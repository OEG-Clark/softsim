{"home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.None.setup.readme": [[10, 14], ["open", "f.read"], "function", ["None"], ["def", "readme", "(", ")", ":", "\n", "    ", "with", "open", "(", "'README.md'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "read", "(", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.None.setup.get_version": [[19, 23], ["open", "exec", "locals", "compile", "f.read"], "function", ["None"], ["def", "get_version", "(", ")", ":", "\n", "    ", "with", "open", "(", "version_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "exec", "(", "compile", "(", "f", ".", "read", "(", ")", ",", "version_file", ",", "'exec'", ")", ")", "\n", "", "return", "locals", "(", ")", "[", "'__version__'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.None.setup.make_cuda_ext": [[25, 48], ["extension", "torch.cuda.is_available", "print", "os.getenv", "os.path.join", "module.split"], "function", ["None"], ["", "def", "make_cuda_ext", "(", "name", ",", "module", ",", "sources", ",", "sources_cuda", "=", "[", "]", ")", ":", "\n", "\n", "    ", "define_macros", "=", "[", "]", "\n", "extra_compile_args", "=", "{", "'cxx'", ":", "[", "]", "}", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "or", "os", ".", "getenv", "(", "'FORCE_CUDA'", ",", "'0'", ")", "==", "'1'", ":", "\n", "        ", "define_macros", "+=", "[", "(", "'WITH_CUDA'", ",", "None", ")", "]", "\n", "extension", "=", "CUDAExtension", "\n", "extra_compile_args", "[", "'nvcc'", "]", "=", "[", "\n", "'-D__CUDA_NO_HALF_OPERATORS__'", ",", "\n", "'-D__CUDA_NO_HALF_CONVERSIONS__'", ",", "\n", "'-D__CUDA_NO_HALF2_OPERATORS__'", ",", "\n", "]", "\n", "sources", "+=", "sources_cuda", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'Compiling {name} without CUDA'", ")", "\n", "extension", "=", "CppExtension", "\n", "\n", "", "return", "extension", "(", "\n", "name", "=", "f'{module}.{name}'", ",", "\n", "sources", "=", "[", "os", ".", "path", ".", "join", "(", "*", "module", ".", "split", "(", "'.'", ")", ",", "p", ")", "for", "p", "in", "sources", "]", ",", "\n", "define_macros", "=", "define_macros", ",", "\n", "extra_compile_args", "=", "extra_compile_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.None.setup.parse_requirements": [[50, 126], ["list", "line.strip.startswith", "exists", "setup.parse_requirements.gen_packages_items"], "function", ["None"], ["", "def", "parse_requirements", "(", "fname", "=", "'requirements.txt'", ",", "with_version", "=", "True", ")", ":", "\n", "    ", "\"\"\"Parse the package dependencies listed in a requirements file but strips\n    specific versioning information.\n\n    Args:\n        fname (str): path to requirements file\n        with_version (bool, default=False): if True include version specs\n\n    Returns:\n        List[str]: list of requirements items\n\n    CommandLine:\n        python -c \"import setup; print(setup.parse_requirements())\"\n    \"\"\"", "\n", "import", "sys", "\n", "from", "os", ".", "path", "import", "exists", "\n", "import", "re", "\n", "require_fpath", "=", "fname", "\n", "\n", "def", "parse_line", "(", "line", ")", ":", "\n", "        ", "\"\"\"Parse information from a line in a requirements text file.\"\"\"", "\n", "if", "line", ".", "startswith", "(", "'-r '", ")", ":", "\n", "# Allow specifying requirements in other files", "\n", "            ", "target", "=", "line", ".", "split", "(", "' '", ")", "[", "1", "]", "\n", "for", "info", "in", "parse_require_file", "(", "target", ")", ":", "\n", "                ", "yield", "info", "\n", "", "", "else", ":", "\n", "            ", "info", "=", "{", "'line'", ":", "line", "}", "\n", "if", "line", ".", "startswith", "(", "'-e '", ")", ":", "\n", "                ", "info", "[", "'package'", "]", "=", "line", ".", "split", "(", "'#egg='", ")", "[", "1", "]", "\n", "", "elif", "'@git+'", "in", "line", ":", "\n", "                ", "info", "[", "'package'", "]", "=", "line", "\n", "", "else", ":", "\n", "# Remove versioning from the package", "\n", "                ", "pat", "=", "'('", "+", "'|'", ".", "join", "(", "[", "'>='", ",", "'=='", ",", "'>'", "]", ")", "+", "')'", "\n", "parts", "=", "re", ".", "split", "(", "pat", ",", "line", ",", "maxsplit", "=", "1", ")", "\n", "parts", "=", "[", "p", ".", "strip", "(", ")", "for", "p", "in", "parts", "]", "\n", "\n", "info", "[", "'package'", "]", "=", "parts", "[", "0", "]", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "                    ", "op", ",", "rest", "=", "parts", "[", "1", ":", "]", "\n", "if", "';'", "in", "rest", ":", "\n", "# Handle platform specific dependencies", "\n", "# http://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-platform-specific-dependencies", "\n", "                        ", "version", ",", "platform_deps", "=", "map", "(", "str", ".", "strip", ",", "\n", "rest", ".", "split", "(", "';'", ")", ")", "\n", "info", "[", "'platform_deps'", "]", "=", "platform_deps", "\n", "", "else", ":", "\n", "                        ", "version", "=", "rest", "# NOQA", "\n", "", "info", "[", "'version'", "]", "=", "(", "op", ",", "version", ")", "\n", "", "", "yield", "info", "\n", "\n", "", "", "def", "parse_require_file", "(", "fpath", ")", ":", "\n", "        ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "and", "not", "line", ".", "startswith", "(", "'#'", ")", ":", "\n", "                    ", "for", "info", "in", "parse_line", "(", "line", ")", ":", "\n", "                        ", "yield", "info", "\n", "\n", "", "", "", "", "", "def", "gen_packages_items", "(", ")", ":", "\n", "        ", "if", "exists", "(", "require_fpath", ")", ":", "\n", "            ", "for", "info", "in", "parse_require_file", "(", "require_fpath", ")", ":", "\n", "                ", "parts", "=", "[", "info", "[", "'package'", "]", "]", "\n", "if", "with_version", "and", "'version'", "in", "info", ":", "\n", "                    ", "parts", ".", "extend", "(", "info", "[", "'version'", "]", ")", "\n", "", "if", "not", "sys", ".", "version", ".", "startswith", "(", "'3.4'", ")", ":", "\n", "# apparently package_deps are broken in 3.4", "\n", "                    ", "platform_deps", "=", "info", ".", "get", "(", "'platform_deps'", ")", "\n", "if", "platform_deps", "is", "not", "None", ":", "\n", "                        ", "parts", ".", "append", "(", "';'", "+", "platform_deps", ")", "\n", "", "", "item", "=", "''", ".", "join", "(", "parts", ")", "\n", "yield", "item", "\n", "\n", "", "", "", "packages", "=", "list", "(", "gen_packages_items", "(", ")", ")", "\n", "return", "packages", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.tools.main_test.parse_args": [[19, 99], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'MMDet test (and eval) a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file in pickle format'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fuse-conv-bn'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to fuse conv and bn, this will slightly increase'", "\n", "'the inference speed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--format-only'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Format the output results without perform evaluation. It is'", "\n", "'useful when you want to format the result to a specific format and '", "\n", "'submit it to the test server'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'evaluation metrics, which depends on the dataset, e.g., \"bbox\",'", "\n", "' \"segm\", \"proposal\" for COCO, and \"mAP\", \"recall\" for PASCAL VOC'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-dir'", ",", "help", "=", "'directory where painted images will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-score-thr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "'score threshold (default: 0.3)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--gpu-collect'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to use gpu to collect results.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--tmpdir'", ",", "\n", "help", "=", "'tmp directory used for collecting results from multiple '", "\n", "'workers, available when gpu-collect is not specified'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation, the key-value pair in xxx=yyy '", "\n", "'format will be kwargs for dataset.evaluate() function (deprecate), '", "\n", "'change to --eval-options instead.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation, the key-value pair in xxx=yyy '", "\n", "'format will be kwargs for dataset.evaluate() function'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "if", "args", ".", "options", "and", "args", ".", "eval_options", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'--options and --eval-options cannot be both '", "\n", "'specified, --options is deprecated in favor of --eval-options'", ")", "\n", "", "if", "args", ".", "options", ":", "\n", "        ", "warnings", ".", "warn", "(", "'--options is deprecated in favor of --eval-options'", ")", "\n", "args", ".", "eval_options", "=", "args", ".", "options", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.tools.main_test.main": [[101, 217], ["main_test.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "Config.fromfile.model.get", "isinstance", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.runner.get_dist_info", "ValueError", "ValueError", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "isinstance", "Config.fromfile.data.test.pop", "isinstance", "mmcv.runner.init_dist", "mmcv.runner.wrap_fp16_model", "mmcv.cnn.fuse_conv_bn", "mmcv.runner.load_checkpoint.get", "mmcv.parallel.MMDataParallel", "mmdet.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmdet.apis.multi_gpu_test", "parse_args.out.endswith", "Config.fromfile.model.neck.get", "mmdet.datasets.replace_ImageToTensor", "max", "Config.fromfile.get", "mmcv.parallel.MMDistributedDataParallel.cuda", "print", "mmcv.dump", "mmdet.datasets.build_dataset.format_results", "Config.fromfile.get().copy", "cfg.get().copy.update", "print", "neck_cfg.get", "Config.fromfile.model.neck.rfp_backbone.get", "cfg.get().copy.pop", "dict", "mmdet.datasets.build_dataset.evaluate", "neck_cfg.rfp_backbone.get", "ds_cfg.pop", "mmdet.datasets.replace_ImageToTensor", "torch.cuda.current_device", "Config.fromfile.get"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.single_gpu_test", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.multi_gpu_test", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.replace_ImageToTensor", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.cityscapes.CityscapesDataset.format_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.replace_ImageToTensor"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "eval", "or", "args", ".", "format_only", "or", "args", ".", "show", "or", "args", ".", "show_dir", ",", "(", "'Please specify at least one operation (save/eval/format/show the '", "\n", "'results / save the results) with the argument \"--out\", \"--eval\"'", "\n", "', \"--format-only\", \"--show\" or \"--show-dir\"'", ")", "\n", "\n", "if", "args", ".", "eval", "and", "args", ".", "format_only", ":", "\n", "        ", "raise", "ValueError", "(", "'--eval and --format_only cannot be both specified'", ")", "\n", "\n", "", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "if", "cfg", ".", "model", ".", "get", "(", "'neck'", ")", ":", "\n", "        ", "if", "isinstance", "(", "cfg", ".", "model", ".", "neck", ",", "list", ")", ":", "\n", "            ", "for", "neck_cfg", "in", "cfg", ".", "model", ".", "neck", ":", "\n", "                ", "if", "neck_cfg", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "                    ", "if", "neck_cfg", ".", "rfp_backbone", ".", "get", "(", "'pretrained'", ")", ":", "\n", "                        ", "neck_cfg", ".", "rfp_backbone", ".", "pretrained", "=", "None", "\n", "", "", "", "", "elif", "cfg", ".", "model", ".", "neck", ".", "get", "(", "'rfp_backbone'", ")", ":", "\n", "            ", "if", "cfg", ".", "model", ".", "neck", ".", "rfp_backbone", ".", "get", "(", "'pretrained'", ")", ":", "\n", "                ", "cfg", ".", "model", ".", "neck", ".", "rfp_backbone", ".", "pretrained", "=", "None", "\n", "\n", "# in case the test dataset is concatenated", "\n", "", "", "", "samples_per_gpu", "=", "1", "\n", "if", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "dict", ")", ":", "\n", "        ", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "samples_per_gpu", "=", "cfg", ".", "data", ".", "test", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "# Replace 'ImageToTensor' to 'DefaultFormatBundle'", "\n", "            ", "cfg", ".", "data", ".", "test", ".", "pipeline", "=", "replace_ImageToTensor", "(", "\n", "cfg", ".", "data", ".", "test", ".", "pipeline", ")", "\n", "", "", "elif", "isinstance", "(", "cfg", ".", "data", ".", "test", ",", "list", ")", ":", "\n", "        ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "            ", "ds_cfg", ".", "test_mode", "=", "True", "\n", "", "samples_per_gpu", "=", "max", "(", "\n", "[", "ds_cfg", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", "]", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "            ", "for", "ds_cfg", "in", "cfg", ".", "data", ".", "test", ":", "\n", "                ", "ds_cfg", ".", "pipeline", "=", "replace_ImageToTensor", "(", "ds_cfg", ".", "pipeline", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# build the dataloader", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "samples_per_gpu", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "cfg", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "args", ".", "fuse_conv_bn", ":", "\n", "        ", "model", "=", "fuse_conv_bn", "(", "model", ")", "\n", "# old versions did not save class info in checkpoints, this walkaround is", "\n", "# for backward compatibility", "\n", "", "if", "'CLASSES'", "in", "checkpoint", ".", "get", "(", "'meta'", ",", "{", "}", ")", ":", "\n", "        ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "        ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "        ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ",", "args", ".", "show_dir", ",", "\n", "args", ".", "show_score_thr", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ",", "\n", "args", ".", "gpu_collect", ")", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "if", "args", ".", "out", ":", "\n", "            ", "print", "(", "f'\\nwriting results to {args.out}'", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "", "kwargs", "=", "{", "}", "if", "args", ".", "eval_options", "is", "None", "else", "args", ".", "eval_options", "\n", "if", "args", ".", "format_only", ":", "\n", "            ", "dataset", ".", "format_results", "(", "outputs", ",", "**", "kwargs", ")", "\n", "", "if", "args", ".", "eval", ":", "\n", "            ", "eval_kwargs", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", ".", "copy", "(", ")", "\n", "# hard-code way to remove EvalHook args", "\n", "for", "key", "in", "[", "\n", "'interval'", ",", "'tmpdir'", ",", "'start'", ",", "'gpu_collect'", ",", "'save_best'", ",", "\n", "'rule'", "\n", "]", ":", "\n", "                ", "eval_kwargs", ".", "pop", "(", "key", ",", "None", ")", "\n", "", "eval_kwargs", ".", "update", "(", "dict", "(", "metric", "=", "args", ".", "eval", ",", "**", "kwargs", ")", ")", "\n", "print", "(", "dataset", ".", "evaluate", "(", "outputs", ",", "**", "eval_kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.tools.train.parse_args": [[21, 84], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work-dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume-from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no-validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether not to evaluate the checkpoint during training'", ")", "\n", "group_gpus", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'number of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpu-ids'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ids of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file (deprecate), '", "\n", "'change to --cfg-options instead.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "if", "args", ".", "options", "and", "args", ".", "cfg_options", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'--options and --cfg-options cannot be both '", "\n", "'specified, --options is deprecated in favor of --cfg-options'", ")", "\n", "", "if", "args", ".", "options", ":", "\n", "        ", "warnings", ".", "warn", "(", "'--options is deprecated in favor of --cfg-options'", ")", "\n", "args", ".", "cfg_options", "=", "args", ".", "options", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.tools.train.main": [[86, 184], ["train.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "mmcv.mkdir_or_exist", "Config.fromfile.dump", "time.strftime", "os.join", "mmdet.utils.get_root_logger", "dict", "mmdet.utils.collect_env", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "mmdet.utils.get_root_logger.info", "os.basename", "mmdet.models.build_detector", "mmdet.apis.train_detector", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmcv.runner.init_dist", "mmcv.runner.get_dist_info", "range", "os.abspath", "os.join", "time.localtime", "mmdet.utils.get_root_logger.info", "mmdet.apis.set_random_seed", "mmdet.datasets.build_dataset", "len", "copy.deepcopy", "datasets.append", "dict", "Config.fromfile.get", "os.join", "range", "range", "os.basename", "Config.fromfile.get", "Config.fromfile.get", "mmdet.datasets.build_dataset", "mmdet.utils.collect_env.items", "os.splitext", "os.basename", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.collect_env.collect_env", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.info", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.info", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.info", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.train.train_detector", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.info", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.train.set_random_seed", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# work_dir is determined in this priority: CLI > segment in file > filename", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "# update configs according to CLI args if args.work_dir is not None", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "elif", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "\n", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "if", "args", ".", "gpu_ids", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "args", ".", "gpu_ids", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "range", "(", "1", ")", "if", "args", ".", "gpus", "is", "None", "else", "range", "(", "args", ".", "gpus", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "# re-set gpu_ids with distributed training mode", "\n", "_", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "cfg", ".", "gpu_ids", "=", "range", "(", "world_size", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# dump config", "\n", "cfg", ".", "dump", "(", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "f'{k}: {v}'", ")", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "meta", "[", "'config'", "]", "=", "cfg", ".", "pretty_text", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Distributed training: {distributed}'", ")", "\n", "logger", ".", "info", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "f'Set random seed to {args.seed}, '", "\n", "f'deterministic: {args.deterministic}'", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "meta", "[", "'exp_name'", "]", "=", "osp", ".", "basename", "(", "args", ".", "config", ")", "\n", "\n", "model", "=", "build_detector", "(", "\n", "cfg", ".", "model", ",", "\n", "train_cfg", "=", "cfg", ".", "get", "(", "'train_cfg'", ")", ",", "\n", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "if", "len", "(", "cfg", ".", "workflow", ")", "==", "2", ":", "\n", "        ", "val_dataset", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "data", ".", "val", ")", "\n", "val_dataset", ".", "pipeline", "=", "cfg", ".", "data", ".", "train", ".", "pipeline", "\n", "datasets", ".", "append", "(", "build_dataset", "(", "val_dataset", ")", ")", "\n", "", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save mmdet version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n", "mmdet_version", "=", "__version__", "+", "get_git_hash", "(", ")", "[", ":", "7", "]", ",", "\n", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", ")", "\n", "# add an attribute for visualization convenience", "\n", "", "model", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "train_detector", "(", "\n", "model", ",", "\n", "datasets", ",", "\n", "cfg", ",", "\n", "distributed", "=", "distributed", ",", "\n", "validate", "=", "(", "not", "args", ".", "no_validate", ")", ",", "\n", "timestamp", "=", "timestamp", ",", "\n", "meta", "=", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.cityscapes.collect_files": [[11, 26], ["glob.glob", "len", "print", "os.join", "img_file.endswith", "files.append", "len", "len", "len", "len", "len"], "function", ["None"], ["def", "collect_files", "(", "img_dir", ",", "gt_dir", ")", ":", "\n", "    ", "suffix", "=", "'leftImg8bit.png'", "\n", "files", "=", "[", "]", "\n", "for", "img_file", "in", "glob", ".", "glob", "(", "osp", ".", "join", "(", "img_dir", ",", "'**/*.png'", ")", ")", ":", "\n", "        ", "assert", "img_file", ".", "endswith", "(", "suffix", ")", ",", "img_file", "\n", "inst_file", "=", "gt_dir", "+", "img_file", "[", "\n", "len", "(", "img_dir", ")", ":", "-", "len", "(", "suffix", ")", "]", "+", "'gtFine_instanceIds.png'", "\n", "# Note that labelIds are not converted to trainId for seg map", "\n", "segm_file", "=", "gt_dir", "+", "img_file", "[", "\n", "len", "(", "img_dir", ")", ":", "-", "len", "(", "suffix", ")", "]", "+", "'gtFine_labelIds.png'", "\n", "files", ".", "append", "(", "(", "img_file", ",", "inst_file", ",", "segm_file", ")", ")", "\n", "", "assert", "len", "(", "files", ")", ",", "f'No images found in {img_dir}'", "\n", "print", "(", "f'Loaded {len(files)} images from {img_dir}'", ")", "\n", "\n", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.cityscapes.collect_annotations": [[28, 37], ["print", "mmcv.track_parallel_progress", "mmcv.track_progress"], "function", ["None"], ["", "def", "collect_annotations", "(", "files", ",", "nproc", "=", "1", ")", ":", "\n", "    ", "print", "(", "'Loading annotation images'", ")", "\n", "if", "nproc", ">", "1", ":", "\n", "        ", "images", "=", "mmcv", ".", "track_parallel_progress", "(", "\n", "load_img_info", ",", "files", ",", "nproc", "=", "nproc", ")", "\n", "", "else", ":", "\n", "        ", "images", "=", "mmcv", ".", "track_progress", "(", "load_img_info", ",", "files", ")", "\n", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.cityscapes.load_img_info": [[39, 82], ["mmcv.imread", "numpy.unique", "os.basename", "dict", "int", "numpy.asarray", "pycocotools.area", "pycocotools.toBbox", "mask_rle[].decode", "dict", "anno_info.append", "os.dirname", "pycocotools.encode", "os.join", "os.join", "maskUtils.toBbox.tolist", "maskUtils.area.tolist", "os.basename", "os.basename"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.encode"], ["", "def", "load_img_info", "(", "files", ")", ":", "\n", "    ", "img_file", ",", "inst_file", ",", "segm_file", "=", "files", "\n", "inst_img", "=", "mmcv", ".", "imread", "(", "inst_file", ",", "'unchanged'", ")", "\n", "# ids < 24 are stuff labels (filtering them first is about 5% faster)", "\n", "unique_inst_ids", "=", "np", ".", "unique", "(", "inst_img", "[", "inst_img", ">=", "24", "]", ")", "\n", "anno_info", "=", "[", "]", "\n", "for", "inst_id", "in", "unique_inst_ids", ":", "\n", "# For non-crowd annotations, inst_id // 1000 is the label_id", "\n", "# Crowd annotations have <1000 instance ids", "\n", "        ", "label_id", "=", "inst_id", "//", "1000", "if", "inst_id", ">=", "1000", "else", "inst_id", "\n", "label", "=", "CSLabels", ".", "id2label", "[", "label_id", "]", "\n", "if", "not", "label", ".", "hasInstances", "or", "label", ".", "ignoreInEval", ":", "\n", "            ", "continue", "\n", "\n", "", "category_id", "=", "label", ".", "id", "\n", "iscrowd", "=", "int", "(", "inst_id", "<", "1000", ")", "\n", "mask", "=", "np", ".", "asarray", "(", "inst_img", "==", "inst_id", ",", "dtype", "=", "np", ".", "uint8", ",", "order", "=", "'F'", ")", "\n", "mask_rle", "=", "maskUtils", ".", "encode", "(", "mask", "[", ":", ",", ":", ",", "None", "]", ")", "[", "0", "]", "\n", "\n", "area", "=", "maskUtils", ".", "area", "(", "mask_rle", ")", "\n", "# convert to COCO style XYWH format", "\n", "bbox", "=", "maskUtils", ".", "toBbox", "(", "mask_rle", ")", "\n", "\n", "# for json encoding", "\n", "mask_rle", "[", "'counts'", "]", "=", "mask_rle", "[", "'counts'", "]", ".", "decode", "(", ")", "\n", "\n", "anno", "=", "dict", "(", "\n", "iscrowd", "=", "iscrowd", ",", "\n", "category_id", "=", "category_id", ",", "\n", "bbox", "=", "bbox", ".", "tolist", "(", ")", ",", "\n", "area", "=", "area", ".", "tolist", "(", ")", ",", "\n", "segmentation", "=", "mask_rle", ")", "\n", "anno_info", ".", "append", "(", "anno", ")", "\n", "", "video_name", "=", "osp", ".", "basename", "(", "osp", ".", "dirname", "(", "img_file", ")", ")", "\n", "img_info", "=", "dict", "(", "\n", "# remove img_prefix for filename", "\n", "file_name", "=", "osp", ".", "join", "(", "video_name", ",", "osp", ".", "basename", "(", "img_file", ")", ")", ",", "\n", "height", "=", "inst_img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "inst_img", ".", "shape", "[", "1", "]", ",", "\n", "anno_info", "=", "anno_info", ",", "\n", "segm_file", "=", "osp", ".", "join", "(", "video_name", ",", "osp", ".", "basename", "(", "segm_file", ")", ")", ")", "\n", "\n", "return", "img_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.cityscapes.cvt_annotations": [[84, 111], ["dict", "mmcv.dump", "image_info.pop", "out_json[].append", "len", "dict.pop", "out_json[].append", "dict", "out_json[].append"], "function", ["None"], ["", "def", "cvt_annotations", "(", "image_infos", ",", "out_json_name", ")", ":", "\n", "    ", "out_json", "=", "dict", "(", ")", "\n", "img_id", "=", "0", "\n", "ann_id", "=", "0", "\n", "out_json", "[", "'images'", "]", "=", "[", "]", "\n", "out_json", "[", "'categories'", "]", "=", "[", "]", "\n", "out_json", "[", "'annotations'", "]", "=", "[", "]", "\n", "for", "image_info", "in", "image_infos", ":", "\n", "        ", "image_info", "[", "'id'", "]", "=", "img_id", "\n", "anno_infos", "=", "image_info", ".", "pop", "(", "'anno_info'", ")", "\n", "out_json", "[", "'images'", "]", ".", "append", "(", "image_info", ")", "\n", "for", "anno_info", "in", "anno_infos", ":", "\n", "            ", "anno_info", "[", "'image_id'", "]", "=", "img_id", "\n", "anno_info", "[", "'id'", "]", "=", "ann_id", "\n", "out_json", "[", "'annotations'", "]", ".", "append", "(", "anno_info", ")", "\n", "ann_id", "+=", "1", "\n", "", "img_id", "+=", "1", "\n", "", "for", "label", "in", "CSLabels", ".", "labels", ":", "\n", "        ", "if", "label", ".", "hasInstances", "and", "not", "label", ".", "ignoreInEval", ":", "\n", "            ", "cat", "=", "dict", "(", "id", "=", "label", ".", "id", ",", "name", "=", "label", ".", "name", ")", "\n", "out_json", "[", "'categories'", "]", ".", "append", "(", "cat", ")", "\n", "\n", "", "", "if", "len", "(", "out_json", "[", "'annotations'", "]", ")", "==", "0", ":", "\n", "        ", "out_json", ".", "pop", "(", "'annotations'", ")", "\n", "\n", "", "mmcv", ".", "dump", "(", "out_json", ",", "out_json_name", ")", "\n", "return", "out_json", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.cityscapes.parse_args": [[113, 124], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Convert Cityscapes annotations to COCO format'", ")", "\n", "parser", ".", "add_argument", "(", "'cityscapes_path'", ",", "help", "=", "'cityscapes data path'", ")", "\n", "parser", ".", "add_argument", "(", "'--img-dir'", ",", "default", "=", "'leftImg8bit'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--gt-dir'", ",", "default", "=", "'gtFine'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--out-dir'", ",", "help", "=", "'output path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--nproc'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of process'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.cityscapes.main": [[126, 148], ["cityscapes.parse_args", "mmcv.mkdir_or_exist", "os.join", "os.join", "dict", "dict.items", "print", "mmcv.Timer", "cityscapes.collect_files", "cityscapes.collect_annotations", "cityscapes.cvt_annotations", "os.join", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.cityscapes.collect_files", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.cityscapes.collect_annotations", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.pascal_voc.cvt_annotations"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "cityscapes_path", "=", "args", ".", "cityscapes_path", "\n", "out_dir", "=", "args", ".", "out_dir", "if", "args", ".", "out_dir", "else", "cityscapes_path", "\n", "mmcv", ".", "mkdir_or_exist", "(", "out_dir", ")", "\n", "\n", "img_dir", "=", "osp", ".", "join", "(", "cityscapes_path", ",", "args", ".", "img_dir", ")", "\n", "gt_dir", "=", "osp", ".", "join", "(", "cityscapes_path", ",", "args", ".", "gt_dir", ")", "\n", "\n", "set_name", "=", "dict", "(", "\n", "train", "=", "'instancesonly_filtered_gtFine_train.json'", ",", "\n", "val", "=", "'instancesonly_filtered_gtFine_val.json'", ",", "\n", "test", "=", "'instancesonly_filtered_gtFine_test.json'", ")", "\n", "\n", "for", "split", ",", "json_name", "in", "set_name", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "f'Converting {split} into {json_name}'", ")", "\n", "with", "mmcv", ".", "Timer", "(", "\n", "print_tmpl", "=", "'It took {}s to convert Cityscapes annotation'", ")", ":", "\n", "            ", "files", "=", "collect_files", "(", "\n", "osp", ".", "join", "(", "img_dir", ",", "split", ")", ",", "osp", ".", "join", "(", "gt_dir", ",", "split", ")", ")", "\n", "image_infos", "=", "collect_annotations", "(", "files", ",", "nproc", "=", "args", ".", "nproc", ")", "\n", "cvt_annotations", "(", "image_infos", ",", "osp", ".", "join", "(", "out_dir", ",", "json_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.pascal_voc.parse_xml": [[13, 65], ["xml.parse", "ET.parse.getroot", "tree.getroot.find", "int", "int", "tree.getroot.findall", "int", "obj.find", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array", "root.find.find", "root.find.find", "obj.find", "int", "int", "int", "int", "np.zeros.append", "np.array.append", "np.zeros.append", "np.array.append", "numpy.array", "numpy.array", "np.zeros.astype", "np.array.astype", "np.zeros.astype", "np.array.astype", "obj.find", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "function", ["None"], ["def", "parse_xml", "(", "args", ")", ":", "\n", "    ", "xml_path", ",", "img_path", "=", "args", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "size", "=", "root", ".", "find", "(", "'size'", ")", "\n", "w", "=", "int", "(", "size", ".", "find", "(", "'width'", ")", ".", "text", ")", "\n", "h", "=", "int", "(", "size", ".", "find", "(", "'height'", ")", ".", "text", ")", "\n", "bboxes", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "bboxes_ignore", "=", "[", "]", "\n", "labels_ignore", "=", "[", "]", "\n", "for", "obj", "in", "root", ".", "findall", "(", "'object'", ")", ":", "\n", "        ", "name", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "label", "=", "label_ids", "[", "name", "]", "\n", "difficult", "=", "int", "(", "obj", ".", "find", "(", "'difficult'", ")", ".", "text", ")", "\n", "bnd_box", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "bbox", "=", "[", "\n", "int", "(", "bnd_box", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ",", "\n", "int", "(", "bnd_box", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "\n", "]", "\n", "if", "difficult", ":", "\n", "            ", "bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "labels_ignore", ".", "append", "(", "label", ")", "\n", "", "else", ":", "\n", "            ", "bboxes", ".", "append", "(", "bbox", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "", "if", "not", "bboxes", ":", "\n", "        ", "bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "bboxes", "=", "np", ".", "array", "(", "bboxes", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "", "if", "not", "bboxes_ignore", ":", "\n", "        ", "bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "        ", "bboxes_ignore", "=", "np", ".", "array", "(", "bboxes_ignore", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels_ignore", "=", "np", ".", "array", "(", "labels_ignore", ")", "\n", "", "annotation", "=", "{", "\n", "'filename'", ":", "img_path", ",", "\n", "'width'", ":", "w", ",", "\n", "'height'", ":", "h", ",", "\n", "'ann'", ":", "{", "\n", "'bboxes'", ":", "bboxes", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'labels'", ":", "labels", ".", "astype", "(", "np", ".", "int64", ")", ",", "\n", "'bboxes_ignore'", ":", "bboxes_ignore", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'labels_ignore'", ":", "labels_ignore", ".", "astype", "(", "np", ".", "int64", ")", "\n", "}", "\n", "}", "\n", "return", "annotation", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.pascal_voc.cvt_annotations": [[67, 93], ["out_file.endswith", "mmcv.dump", "isinstance", "os.join", "mmcv.list_from_file", "mmcv.track_progress", "cvt_to_coco_json.extend", "pascal_voc.cvt_to_coco_json", "os.isfile", "print", "os.join", "list", "zip"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.pascal_voc.cvt_to_coco_json"], ["", "def", "cvt_annotations", "(", "devkit_path", ",", "years", ",", "split", ",", "out_file", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "years", ",", "list", ")", ":", "\n", "        ", "years", "=", "[", "years", "]", "\n", "", "annotations", "=", "[", "]", "\n", "for", "year", "in", "years", ":", "\n", "        ", "filelist", "=", "osp", ".", "join", "(", "devkit_path", ",", "\n", "f'VOC{year}/ImageSets/Main/{split}.txt'", ")", "\n", "if", "not", "osp", ".", "isfile", "(", "filelist", ")", ":", "\n", "            ", "print", "(", "f'filelist does not exist: {filelist}, '", "\n", "f'skip voc{year} {split}'", ")", "\n", "return", "\n", "", "img_names", "=", "mmcv", ".", "list_from_file", "(", "filelist", ")", "\n", "xml_paths", "=", "[", "\n", "osp", ".", "join", "(", "devkit_path", ",", "f'VOC{year}/Annotations/{img_name}.xml'", ")", "\n", "for", "img_name", "in", "img_names", "\n", "]", "\n", "img_paths", "=", "[", "\n", "f'VOC{year}/JPEGImages/{img_name}.jpg'", "for", "img_name", "in", "img_names", "\n", "]", "\n", "part_annotations", "=", "mmcv", ".", "track_progress", "(", "parse_xml", ",", "\n", "list", "(", "zip", "(", "xml_paths", ",", "img_paths", ")", ")", ")", "\n", "annotations", ".", "extend", "(", "part_annotations", ")", "\n", "", "if", "out_file", ".", "endswith", "(", "'json'", ")", ":", "\n", "        ", "annotations", "=", "cvt_to_coco_json", "(", "annotations", ")", "\n", "", "mmcv", ".", "dump", "(", "annotations", ",", "out_file", ")", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.pascal_voc.cvt_to_coco_json": [[95, 180], ["dict", "set", "enumerate", "dict", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "seg.append", "annotation_item[].append", "numpy.array", "int", "int", "np.array.astype().tolist", "int", "int", "coco[].append", "mmdet.core.voc_classes", "dict", "str", "int", "str", "coco[].append", "dict", "int", "str", "int", "int", "coco[].append", "set.add", "range", "range", "int", "int", "int", "int", "int", "int", "int", "int", "len", "pascal_voc.cvt_to_coco_json.addAnnItem"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.class_names.voc_classes"], ["", "def", "cvt_to_coco_json", "(", "annotations", ")", ":", "\n", "    ", "image_id", "=", "0", "\n", "annotation_id", "=", "0", "\n", "coco", "=", "dict", "(", ")", "\n", "coco", "[", "'images'", "]", "=", "[", "]", "\n", "coco", "[", "'type'", "]", "=", "'instance'", "\n", "coco", "[", "'categories'", "]", "=", "[", "]", "\n", "coco", "[", "'annotations'", "]", "=", "[", "]", "\n", "image_set", "=", "set", "(", ")", "\n", "\n", "def", "addAnnItem", "(", "annotation_id", ",", "image_id", ",", "category_id", ",", "bbox", ",", "difficult_flag", ")", ":", "\n", "        ", "annotation_item", "=", "dict", "(", ")", "\n", "annotation_item", "[", "'segmentation'", "]", "=", "[", "]", "\n", "\n", "seg", "=", "[", "]", "\n", "# bbox[] is x1,y1,x2,y2", "\n", "# left_top", "\n", "seg", ".", "append", "(", "int", "(", "bbox", "[", "0", "]", ")", ")", "\n", "seg", ".", "append", "(", "int", "(", "bbox", "[", "1", "]", ")", ")", "\n", "# left_bottom", "\n", "seg", ".", "append", "(", "int", "(", "bbox", "[", "0", "]", ")", ")", "\n", "seg", ".", "append", "(", "int", "(", "bbox", "[", "3", "]", ")", ")", "\n", "# right_bottom", "\n", "seg", ".", "append", "(", "int", "(", "bbox", "[", "2", "]", ")", ")", "\n", "seg", ".", "append", "(", "int", "(", "bbox", "[", "3", "]", ")", ")", "\n", "# right_top", "\n", "seg", ".", "append", "(", "int", "(", "bbox", "[", "2", "]", ")", ")", "\n", "seg", ".", "append", "(", "int", "(", "bbox", "[", "1", "]", ")", ")", "\n", "\n", "annotation_item", "[", "'segmentation'", "]", ".", "append", "(", "seg", ")", "\n", "\n", "xywh", "=", "np", ".", "array", "(", "\n", "[", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ",", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ",", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "]", ")", "\n", "annotation_item", "[", "'area'", "]", "=", "int", "(", "xywh", "[", "2", "]", "*", "xywh", "[", "3", "]", ")", "\n", "if", "difficult_flag", "==", "1", ":", "\n", "            ", "annotation_item", "[", "'ignore'", "]", "=", "0", "\n", "annotation_item", "[", "'iscrowd'", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "annotation_item", "[", "'ignore'", "]", "=", "0", "\n", "annotation_item", "[", "'iscrowd'", "]", "=", "0", "\n", "", "annotation_item", "[", "'image_id'", "]", "=", "int", "(", "image_id", ")", "\n", "annotation_item", "[", "'bbox'", "]", "=", "xywh", ".", "astype", "(", "int", ")", ".", "tolist", "(", ")", "\n", "annotation_item", "[", "'category_id'", "]", "=", "int", "(", "category_id", ")", "\n", "annotation_item", "[", "'id'", "]", "=", "int", "(", "annotation_id", ")", "\n", "coco", "[", "'annotations'", "]", ".", "append", "(", "annotation_item", ")", "\n", "return", "annotation_id", "+", "1", "\n", "\n", "", "for", "category_id", ",", "name", "in", "enumerate", "(", "voc_classes", "(", ")", ")", ":", "\n", "        ", "category_item", "=", "dict", "(", ")", "\n", "category_item", "[", "'supercategory'", "]", "=", "str", "(", "'none'", ")", "\n", "category_item", "[", "'id'", "]", "=", "int", "(", "category_id", ")", "\n", "category_item", "[", "'name'", "]", "=", "str", "(", "name", ")", "\n", "coco", "[", "'categories'", "]", ".", "append", "(", "category_item", ")", "\n", "\n", "", "for", "ann_dict", "in", "annotations", ":", "\n", "        ", "file_name", "=", "ann_dict", "[", "'filename'", "]", "\n", "ann", "=", "ann_dict", "[", "'ann'", "]", "\n", "assert", "file_name", "not", "in", "image_set", "\n", "image_item", "=", "dict", "(", ")", "\n", "image_item", "[", "'id'", "]", "=", "int", "(", "image_id", ")", "\n", "image_item", "[", "'file_name'", "]", "=", "str", "(", "file_name", ")", "\n", "image_item", "[", "'height'", "]", "=", "int", "(", "ann_dict", "[", "'height'", "]", ")", "\n", "image_item", "[", "'width'", "]", "=", "int", "(", "ann_dict", "[", "'width'", "]", ")", "\n", "coco", "[", "'images'", "]", ".", "append", "(", "image_item", ")", "\n", "image_set", ".", "add", "(", "file_name", ")", "\n", "\n", "bboxes", "=", "ann", "[", "'bboxes'", "]", "[", ":", ",", ":", "4", "]", "\n", "labels", "=", "ann", "[", "'labels'", "]", "\n", "for", "bbox_id", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "            ", "bbox", "=", "bboxes", "[", "bbox_id", "]", "\n", "label", "=", "labels", "[", "bbox_id", "]", "\n", "annotation_id", "=", "addAnnItem", "(", "\n", "annotation_id", ",", "image_id", ",", "label", ",", "bbox", ",", "difficult_flag", "=", "0", ")", "\n", "\n", "", "bboxes_ignore", "=", "ann", "[", "'bboxes_ignore'", "]", "[", ":", ",", ":", "4", "]", "\n", "labels_ignore", "=", "ann", "[", "'labels_ignore'", "]", "\n", "for", "bbox_id", "in", "range", "(", "len", "(", "bboxes_ignore", ")", ")", ":", "\n", "            ", "bbox", "=", "bboxes_ignore", "[", "bbox_id", "]", "\n", "label", "=", "labels_ignore", "[", "bbox_id", "]", "\n", "annotation_id", "=", "addAnnItem", "(", "\n", "annotation_id", ",", "image_id", ",", "label", ",", "bbox", ",", "difficult_flag", "=", "1", ")", "\n", "\n", "", "image_id", "+=", "1", "\n", "\n", "", "return", "coco", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.pascal_voc.parse_args": [[182, 194], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Convert PASCAL VOC annotations to mmdetection format'", ")", "\n", "parser", ".", "add_argument", "(", "'devkit_path'", ",", "help", "=", "'pascal voc devkit path'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--out-dir'", ",", "help", "=", "'output path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--out-format'", ",", "\n", "default", "=", "'pkl'", ",", "\n", "choices", "=", "(", "'pkl'", ",", "'coco'", ")", ",", "\n", "help", "=", "'output format, \"coco\" indicates coco annotation format'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.pascal_voc.main": [[196, 233], ["pascal_voc.parse_args", "mmcv.mkdir_or_exist", "os.isdir", "os.isdir", "print", "os.join", "years.append", "os.join", "years.append", "years.append", "IOError", "print", "pascal_voc.cvt_annotations", "isinstance", "print", "pascal_voc.cvt_annotations", "os.join", "os.join"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.pascal_voc.cvt_annotations", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.dataset_converters.pascal_voc.cvt_annotations"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "devkit_path", "=", "args", ".", "devkit_path", "\n", "out_dir", "=", "args", ".", "out_dir", "if", "args", ".", "out_dir", "else", "devkit_path", "\n", "mmcv", ".", "mkdir_or_exist", "(", "out_dir", ")", "\n", "\n", "years", "=", "[", "]", "\n", "if", "osp", ".", "isdir", "(", "osp", ".", "join", "(", "devkit_path", ",", "'VOC2007'", ")", ")", ":", "\n", "        ", "years", ".", "append", "(", "'2007'", ")", "\n", "", "if", "osp", ".", "isdir", "(", "osp", ".", "join", "(", "devkit_path", ",", "'VOC2012'", ")", ")", ":", "\n", "        ", "years", ".", "append", "(", "'2012'", ")", "\n", "", "if", "'2007'", "in", "years", "and", "'2012'", "in", "years", ":", "\n", "        ", "years", ".", "append", "(", "[", "'2007'", ",", "'2012'", "]", ")", "\n", "", "if", "not", "years", ":", "\n", "        ", "raise", "IOError", "(", "f'The devkit path {devkit_path} contains neither '", "\n", "'\"VOC2007\" nor \"VOC2012\" subfolder'", ")", "\n", "", "out_fmt", "=", "f'.{args.out_format}'", "\n", "if", "args", ".", "out_format", "==", "'coco'", ":", "\n", "        ", "out_fmt", "=", "'.json'", "\n", "", "for", "year", "in", "years", ":", "\n", "        ", "if", "year", "==", "'2007'", ":", "\n", "            ", "prefix", "=", "'voc07'", "\n", "", "elif", "year", "==", "'2012'", ":", "\n", "            ", "prefix", "=", "'voc12'", "\n", "", "elif", "year", "==", "[", "'2007'", ",", "'2012'", "]", ":", "\n", "            ", "prefix", "=", "'voc0712'", "\n", "", "for", "split", "in", "[", "'train'", ",", "'val'", ",", "'trainval'", "]", ":", "\n", "            ", "dataset_name", "=", "prefix", "+", "'_'", "+", "split", "\n", "print", "(", "f'processing {dataset_name} ...'", ")", "\n", "cvt_annotations", "(", "devkit_path", ",", "year", ",", "split", ",", "\n", "osp", ".", "join", "(", "out_dir", ",", "dataset_name", "+", "out_fmt", ")", ")", "\n", "", "if", "not", "isinstance", "(", "year", ",", "list", ")", ":", "\n", "            ", "dataset_name", "=", "prefix", "+", "'_test'", "\n", "print", "(", "f'processing {dataset_name} ...'", ")", "\n", "cvt_annotations", "(", "devkit_path", ",", "year", ",", "'test'", ",", "\n", "osp", ".", "join", "(", "out_dir", ",", "dataset_name", "+", "out_fmt", ")", ")", "\n", "", "", "print", "(", "'Done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.publish_model.parse_args": [[7, 14], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Process a checkpoint to be published'", ")", "\n", "parser", ".", "add_argument", "(", "'in_file'", ",", "help", "=", "'input checkpoint filename'", ")", "\n", "parser", ".", "add_argument", "(", "'out_file'", ",", "help", "=", "'output checkpoint filename'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.publish_model.process_checkpoint": [[16, 31], ["torch.load", "torch.save", "subprocess.check_output().decode", "out_file.endswith", "subprocess.Popen", "subprocess.check_output"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode"], ["", "def", "process_checkpoint", "(", "in_file", ",", "out_file", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "in_file", ",", "map_location", "=", "'cpu'", ")", "\n", "# remove optimizer for smaller file size", "\n", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "        ", "del", "checkpoint", "[", "'optimizer'", "]", "\n", "# if it is necessary to remove some sensitive data in checkpoint['meta'],", "\n", "# add the code here.", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "out_file", ")", "\n", "sha", "=", "subprocess", ".", "check_output", "(", "[", "'sha256sum'", ",", "out_file", "]", ")", ".", "decode", "(", ")", "\n", "if", "out_file", ".", "endswith", "(", "'.pth'", ")", ":", "\n", "        ", "out_file_name", "=", "out_file", "[", ":", "-", "4", "]", "\n", "", "else", ":", "\n", "        ", "out_file_name", "=", "out_file", "\n", "", "final_file", "=", "out_file_name", "+", "f'-{sha[:8]}.pth'", "\n", "subprocess", ".", "Popen", "(", "[", "'mv'", ",", "out_file", ",", "final_file", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.publish_model.main": [[33, 36], ["publish_model.parse_args", "publish_model.process_checkpoint"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.publish_model.process_checkpoint"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "process_checkpoint", "(", "args", ".", "in_file", ",", "args", ".", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.detectron2pytorch.convert_bn": [[10, 21], ["torch.from_numpy", "torch.from_numpy", "state_dict[].size", "torch.zeros", "torch.ones", "converted_names.add", "converted_names.add"], "function", ["None"], ["def", "convert_bn", "(", "blobs", ",", "state_dict", ",", "caffe_name", ",", "torch_name", ",", "converted_names", ")", ":", "\n", "# detectron replace bn with affine channel layer", "\n", "    ", "state_dict", "[", "torch_name", "+", "'.bias'", "]", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "caffe_name", "+", "\n", "'_b'", "]", ")", "\n", "state_dict", "[", "torch_name", "+", "'.weight'", "]", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "caffe_name", "+", "\n", "'_s'", "]", ")", "\n", "bn_size", "=", "state_dict", "[", "torch_name", "+", "'.weight'", "]", ".", "size", "(", ")", "\n", "state_dict", "[", "torch_name", "+", "'.running_mean'", "]", "=", "torch", ".", "zeros", "(", "bn_size", ")", "\n", "state_dict", "[", "torch_name", "+", "'.running_var'", "]", "=", "torch", ".", "ones", "(", "bn_size", ")", "\n", "converted_names", ".", "add", "(", "caffe_name", "+", "'_b'", ")", "\n", "converted_names", ".", "add", "(", "caffe_name", "+", "'_s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.detectron2pytorch.convert_conv_fc": [[23, 32], ["torch.from_numpy", "converted_names.add", "torch.from_numpy", "converted_names.add"], "function", ["None"], ["", "def", "convert_conv_fc", "(", "blobs", ",", "state_dict", ",", "caffe_name", ",", "torch_name", ",", "\n", "converted_names", ")", ":", "\n", "    ", "state_dict", "[", "torch_name", "+", "'.weight'", "]", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "caffe_name", "+", "\n", "'_w'", "]", ")", "\n", "converted_names", ".", "add", "(", "caffe_name", "+", "'_w'", ")", "\n", "if", "caffe_name", "+", "'_b'", "in", "blobs", ":", "\n", "        ", "state_dict", "[", "torch_name", "+", "'.bias'", "]", "=", "torch", ".", "from_numpy", "(", "blobs", "[", "caffe_name", "+", "\n", "'_b'", "]", ")", "\n", "converted_names", ".", "add", "(", "caffe_name", "+", "'_b'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.detectron2pytorch.convert": [[34, 70], ["mmcv.load", "collections.OrderedDict", "set", "detectron2pytorch.convert_conv_fc", "detectron2pytorch.convert_bn", "range", "dict", "torch.save", "ValueError", "range", "len", "enumerate", "print", "detectron2pytorch.convert_conv_fc", "detectron2pytorch.convert_bn", "detectron2pytorch.convert_conv_fc", "detectron2pytorch.convert_bn"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.detectron2pytorch.convert_conv_fc", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.detectron2pytorch.convert_bn", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.detectron2pytorch.convert_conv_fc", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.detectron2pytorch.convert_bn", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.detectron2pytorch.convert_conv_fc", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.detectron2pytorch.convert_bn"], ["", "", "def", "convert", "(", "src", ",", "dst", ",", "depth", ")", ":", "\n", "    ", "\"\"\"Convert keys in detectron pretrained ResNet models to pytorch style.\"\"\"", "\n", "# load arch_settings", "\n", "if", "depth", "not", "in", "arch_settings", ":", "\n", "        ", "raise", "ValueError", "(", "'Only support ResNet-50 and ResNet-101 currently'", ")", "\n", "", "block_nums", "=", "arch_settings", "[", "depth", "]", "\n", "# load caffe model", "\n", "caffe_model", "=", "mmcv", ".", "load", "(", "src", ",", "encoding", "=", "'latin1'", ")", "\n", "blobs", "=", "caffe_model", "[", "'blobs'", "]", "if", "'blobs'", "in", "caffe_model", "else", "caffe_model", "\n", "# convert to pytorch style", "\n", "state_dict", "=", "OrderedDict", "(", ")", "\n", "converted_names", "=", "set", "(", ")", "\n", "convert_conv_fc", "(", "blobs", ",", "state_dict", ",", "'conv1'", ",", "'conv1'", ",", "converted_names", ")", "\n", "convert_bn", "(", "blobs", ",", "state_dict", ",", "'res_conv1_bn'", ",", "'bn1'", ",", "converted_names", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "block_nums", ")", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "block_nums", "[", "i", "-", "1", "]", ")", ":", "\n", "            ", "if", "j", "==", "0", ":", "\n", "                ", "convert_conv_fc", "(", "blobs", ",", "state_dict", ",", "f'res{i + 1}_{j}_branch1'", ",", "\n", "f'layer{i}.{j}.downsample.0'", ",", "converted_names", ")", "\n", "convert_bn", "(", "blobs", ",", "state_dict", ",", "f'res{i + 1}_{j}_branch1_bn'", ",", "\n", "f'layer{i}.{j}.downsample.1'", ",", "converted_names", ")", "\n", "", "for", "k", ",", "letter", "in", "enumerate", "(", "[", "'a'", ",", "'b'", ",", "'c'", "]", ")", ":", "\n", "                ", "convert_conv_fc", "(", "blobs", ",", "state_dict", ",", "\n", "f'res{i + 1}_{j}_branch2{letter}'", ",", "\n", "f'layer{i}.{j}.conv{k+1}'", ",", "converted_names", ")", "\n", "convert_bn", "(", "blobs", ",", "state_dict", ",", "\n", "f'res{i + 1}_{j}_branch2{letter}_bn'", ",", "\n", "f'layer{i}.{j}.bn{k + 1}'", ",", "converted_names", ")", "\n", "# check if all layers are converted", "\n", "", "", "", "for", "key", "in", "blobs", ":", "\n", "        ", "if", "key", "not", "in", "converted_names", ":", "\n", "            ", "print", "(", "f'Not Convert: {key}'", ")", "\n", "# save checkpoint", "\n", "", "", "checkpoint", "=", "dict", "(", ")", "\n", "checkpoint", "[", "'state_dict'", "]", "=", "state_dict", "\n", "torch", ".", "save", "(", "checkpoint", ",", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.detectron2pytorch.main": [[72, 79], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "detectron2pytorch.convert"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.convert"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Convert model keys'", ")", "\n", "parser", ".", "add_argument", "(", "'src'", ",", "help", "=", "'src detectron model path'", ")", "\n", "parser", ".", "add_argument", "(", "'dst'", ",", "help", "=", "'save path'", ")", "\n", "parser", ".", "add_argument", "(", "'depth'", ",", "type", "=", "int", ",", "help", "=", "'ResNet model depth'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "convert", "(", "args", ".", "src", ",", "args", ".", "dst", ",", "args", ".", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.regnet2mmdet.convert_stem": [[7, 13], ["model_key.replace", "new_key.replace.replace", "converted_names.add", "print"], "function", ["None"], ["def", "convert_stem", "(", "model_key", ",", "model_weight", ",", "state_dict", ",", "converted_names", ")", ":", "\n", "    ", "new_key", "=", "model_key", ".", "replace", "(", "'stem.conv'", ",", "'conv1'", ")", "\n", "new_key", "=", "new_key", ".", "replace", "(", "'stem.bn'", ",", "'bn1'", ")", "\n", "state_dict", "[", "new_key", "]", "=", "model_weight", "\n", "converted_names", ".", "add", "(", "model_key", ")", "\n", "print", "(", "f'Convert {model_key} to {new_key}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.regnet2mmdet.convert_head": [[15, 20], ["model_key.replace", "converted_names.add", "print"], "function", ["None"], ["", "def", "convert_head", "(", "model_key", ",", "model_weight", ",", "state_dict", ",", "converted_names", ")", ":", "\n", "    ", "new_key", "=", "model_key", ".", "replace", "(", "'head.fc'", ",", "'fc'", ")", "\n", "state_dict", "[", "new_key", "]", "=", "model_weight", "\n", "converted_names", ".", "add", "(", "model_key", ")", "\n", "print", "(", "f'Convert {model_key} to {new_key}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.regnet2mmdet.convert_reslayer": [[22, 52], ["model_key.split", "int", "print", "converted_names.add", "int", "ValueError"], "function", ["None"], ["", "def", "convert_reslayer", "(", "model_key", ",", "model_weight", ",", "state_dict", ",", "converted_names", ")", ":", "\n", "    ", "split_keys", "=", "model_key", ".", "split", "(", "'.'", ")", "\n", "layer", ",", "block", ",", "module", "=", "split_keys", "[", ":", "3", "]", "\n", "block_id", "=", "int", "(", "block", "[", "1", ":", "]", ")", "\n", "layer_name", "=", "f'layer{int(layer[1:])}'", "\n", "block_name", "=", "f'{block_id - 1}'", "\n", "\n", "if", "block_id", "==", "1", "and", "module", "==", "'bn'", ":", "\n", "        ", "new_key", "=", "f'{layer_name}.{block_name}.downsample.1.{split_keys[-1]}'", "\n", "", "elif", "block_id", "==", "1", "and", "module", "==", "'proj'", ":", "\n", "        ", "new_key", "=", "f'{layer_name}.{block_name}.downsample.0.{split_keys[-1]}'", "\n", "", "elif", "module", "==", "'f'", ":", "\n", "        ", "if", "split_keys", "[", "3", "]", "==", "'a_bn'", ":", "\n", "            ", "module_name", "=", "'bn1'", "\n", "", "elif", "split_keys", "[", "3", "]", "==", "'b_bn'", ":", "\n", "            ", "module_name", "=", "'bn2'", "\n", "", "elif", "split_keys", "[", "3", "]", "==", "'c_bn'", ":", "\n", "            ", "module_name", "=", "'bn3'", "\n", "", "elif", "split_keys", "[", "3", "]", "==", "'a'", ":", "\n", "            ", "module_name", "=", "'conv1'", "\n", "", "elif", "split_keys", "[", "3", "]", "==", "'b'", ":", "\n", "            ", "module_name", "=", "'conv2'", "\n", "", "elif", "split_keys", "[", "3", "]", "==", "'c'", ":", "\n", "            ", "module_name", "=", "'conv3'", "\n", "", "new_key", "=", "f'{layer_name}.{block_name}.{module_name}.{split_keys[-1]}'", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'Unsupported conversion of key {model_key}'", ")", "\n", "", "print", "(", "f'Convert {model_key} to {new_key}'", ")", "\n", "state_dict", "[", "new_key", "]", "=", "model_weight", "\n", "converted_names", ".", "add", "(", "model_key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.regnet2mmdet.convert": [[54, 78], ["torch.load", "collections.OrderedDict", "set", "blobs.items", "dict", "torch.save", "regnet2mmdet.convert_stem", "print", "regnet2mmdet.convert_head", "key.startswith", "regnet2mmdet.convert_reslayer"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.regnet2mmdet.convert_stem", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.regnet2mmdet.convert_head", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.regnet2mmdet.convert_reslayer"], ["", "def", "convert", "(", "src", ",", "dst", ")", ":", "\n", "    ", "\"\"\"Convert keys in pycls pretrained RegNet models to mmdet style.\"\"\"", "\n", "# load caffe model", "\n", "regnet_model", "=", "torch", ".", "load", "(", "src", ")", "\n", "blobs", "=", "regnet_model", "[", "'model_state'", "]", "\n", "# convert to pytorch style", "\n", "state_dict", "=", "OrderedDict", "(", ")", "\n", "converted_names", "=", "set", "(", ")", "\n", "for", "key", ",", "weight", "in", "blobs", ".", "items", "(", ")", ":", "\n", "        ", "if", "'stem'", "in", "key", ":", "\n", "            ", "convert_stem", "(", "key", ",", "weight", ",", "state_dict", ",", "converted_names", ")", "\n", "", "elif", "'head'", "in", "key", ":", "\n", "            ", "convert_head", "(", "key", ",", "weight", ",", "state_dict", ",", "converted_names", ")", "\n", "", "elif", "key", ".", "startswith", "(", "'s'", ")", ":", "\n", "            ", "convert_reslayer", "(", "key", ",", "weight", ",", "state_dict", ",", "converted_names", ")", "\n", "\n", "# check if all layers are converted", "\n", "", "", "for", "key", "in", "blobs", ":", "\n", "        ", "if", "key", "not", "in", "converted_names", ":", "\n", "            ", "print", "(", "f'not converted: {key}'", ")", "\n", "# save checkpoint", "\n", "", "", "checkpoint", "=", "dict", "(", ")", "\n", "checkpoint", "[", "'state_dict'", "]", "=", "state_dict", "\n", "torch", ".", "save", "(", "checkpoint", ",", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.regnet2mmdet.main": [[80, 86], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "regnet2mmdet.convert"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.convert"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Convert model keys'", ")", "\n", "parser", ".", "add_argument", "(", "'src'", ",", "help", "=", "'src detectron model path'", ")", "\n", "parser", ".", "add_argument", "(", "'dst'", ",", "help", "=", "'save path'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "convert", "(", "args", ".", "src", ",", "args", ".", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.is_head": [[10, 16], ["any", "key.startswith"], "function", ["None"], ["def", "is_head", "(", "key", ")", ":", "\n", "    ", "valid_head_list", "=", "[", "\n", "'bbox_head'", ",", "'mask_head'", ",", "'semantic_head'", ",", "'grid_head'", ",", "'mask_iou_head'", "\n", "]", "\n", "\n", "return", "any", "(", "key", ".", "startswith", "(", "h", ")", "for", "h", "in", "valid_head_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.parse_config": [[18, 43], ["tempfile.NamedTemporaryFile", "mmcv.Config.fromfile", "tempfile.NamedTemporaryFile.close", "open", "f.write", "isinstance"], "function", ["None"], ["", "def", "parse_config", "(", "config_strings", ")", ":", "\n", "    ", "temp_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "config_path", "=", "f'{temp_file.name}.py'", "\n", "with", "open", "(", "config_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "config_strings", ")", "\n", "\n", "", "config", "=", "Config", ".", "fromfile", "(", "config_path", ")", "\n", "is_two_stage", "=", "True", "\n", "is_ssd", "=", "False", "\n", "is_retina", "=", "False", "\n", "reg_cls_agnostic", "=", "False", "\n", "if", "'rpn_head'", "not", "in", "config", ".", "model", ":", "\n", "        ", "is_two_stage", "=", "False", "\n", "# check whether it is SSD", "\n", "if", "config", ".", "model", ".", "bbox_head", ".", "type", "==", "'SSDHead'", ":", "\n", "            ", "is_ssd", "=", "True", "\n", "", "elif", "config", ".", "model", ".", "bbox_head", ".", "type", "==", "'RetinaHead'", ":", "\n", "            ", "is_retina", "=", "True", "\n", "", "", "elif", "isinstance", "(", "config", ".", "model", "[", "'bbox_head'", "]", ",", "list", ")", ":", "\n", "        ", "reg_cls_agnostic", "=", "True", "\n", "", "elif", "'reg_class_agnostic'", "in", "config", ".", "model", ".", "bbox_head", ":", "\n", "        ", "reg_cls_agnostic", "=", "config", ".", "model", ".", "bbox_head", ".", "reg_class_agnostic", "\n", "", "temp_file", ".", "close", "(", ")", "\n", "return", "is_two_stage", ",", "is_ssd", ",", "is_retina", ",", "reg_cls_agnostic", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.reorder_cls_channel": [[45, 65], ["val.dim", "torch.cat", "val.reshape", "torch.cat", "torch.cat.reshape", "val.size", "torch.cat"], "function", ["None"], ["", "def", "reorder_cls_channel", "(", "val", ",", "num_classes", "=", "81", ")", ":", "\n", "# bias", "\n", "    ", "if", "val", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "new_val", "=", "torch", ".", "cat", "(", "(", "val", "[", "1", ":", "]", ",", "val", "[", ":", "1", "]", ")", ",", "dim", "=", "0", ")", "\n", "# weight", "\n", "", "else", ":", "\n", "        ", "out_channels", ",", "in_channels", "=", "val", ".", "shape", "[", ":", "2", "]", "\n", "# conv_cls for softmax output", "\n", "if", "out_channels", "!=", "num_classes", "and", "out_channels", "%", "num_classes", "==", "0", ":", "\n", "            ", "new_val", "=", "val", ".", "reshape", "(", "-", "1", ",", "num_classes", ",", "in_channels", ",", "*", "val", ".", "shape", "[", "2", ":", "]", ")", "\n", "new_val", "=", "torch", ".", "cat", "(", "(", "new_val", "[", ":", ",", "1", ":", "]", ",", "new_val", "[", ":", ",", ":", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "new_val", "=", "new_val", ".", "reshape", "(", "val", ".", "size", "(", ")", ")", "\n", "# fc_cls", "\n", "", "elif", "out_channels", "==", "num_classes", ":", "\n", "            ", "new_val", "=", "torch", ".", "cat", "(", "(", "val", "[", "1", ":", "]", ",", "val", "[", ":", "1", "]", ")", ",", "dim", "=", "0", ")", "\n", "# agnostic | retina_cls | rpn_cls", "\n", "", "else", ":", "\n", "            ", "new_val", "=", "val", "\n", "\n", "", "", "return", "new_val", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.truncate_cls_channel": [[67, 87], ["val.dim", "new_val.reshape.reshape", "val.size", "val.reshape"], "function", ["None"], ["", "def", "truncate_cls_channel", "(", "val", ",", "num_classes", "=", "81", ")", ":", "\n", "\n", "# bias", "\n", "    ", "if", "val", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "if", "val", ".", "size", "(", "0", ")", "%", "num_classes", "==", "0", ":", "\n", "            ", "new_val", "=", "val", "[", ":", "num_classes", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "new_val", "=", "val", "\n", "# weight", "\n", "", "", "else", ":", "\n", "        ", "out_channels", ",", "in_channels", "=", "val", ".", "shape", "[", ":", "2", "]", "\n", "# conv_logits", "\n", "if", "out_channels", "%", "num_classes", "==", "0", ":", "\n", "            ", "new_val", "=", "val", ".", "reshape", "(", "num_classes", ",", "in_channels", ",", "*", "val", ".", "shape", "[", "2", ":", "]", ")", "[", "1", ":", "]", "\n", "new_val", "=", "new_val", ".", "reshape", "(", "-", "1", ",", "*", "val", ".", "shape", "[", "1", ":", "]", ")", "\n", "# agnostic", "\n", "", "else", ":", "\n", "            ", "new_val", "=", "val", "\n", "\n", "", "", "return", "new_val", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.truncate_reg_channel": [[89, 112], ["val.dim", "new_val.reshape.reshape", "new_val.reshape.reshape", "val.size", "val.reshape", "val.reshape"], "function", ["None"], ["", "def", "truncate_reg_channel", "(", "val", ",", "num_classes", "=", "81", ")", ":", "\n", "# bias", "\n", "    ", "if", "val", ".", "dim", "(", ")", "==", "1", ":", "\n", "# fc_reg | rpn_reg", "\n", "        ", "if", "val", ".", "size", "(", "0", ")", "%", "num_classes", "==", "0", ":", "\n", "            ", "new_val", "=", "val", ".", "reshape", "(", "num_classes", ",", "-", "1", ")", "[", ":", "num_classes", "-", "1", "]", "\n", "new_val", "=", "new_val", ".", "reshape", "(", "-", "1", ")", "\n", "# agnostic", "\n", "", "else", ":", "\n", "            ", "new_val", "=", "val", "\n", "# weight", "\n", "", "", "else", ":", "\n", "        ", "out_channels", ",", "in_channels", "=", "val", ".", "shape", "[", ":", "2", "]", "\n", "# fc_reg | rpn_reg", "\n", "if", "out_channels", "%", "num_classes", "==", "0", ":", "\n", "            ", "new_val", "=", "val", ".", "reshape", "(", "num_classes", ",", "-", "1", ",", "in_channels", ",", "\n", "*", "val", ".", "shape", "[", "2", ":", "]", ")", "[", "1", ":", "]", "\n", "new_val", "=", "new_val", ".", "reshape", "(", "-", "1", ",", "*", "val", ".", "shape", "[", "1", ":", "]", ")", "\n", "# agnostic", "\n", "", "else", ":", "\n", "            ", "new_val", "=", "val", "\n", "\n", "", "", "return", "new_val", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.convert": [[114, 193], ["torch.load", "torch.load.pop", "collections.OrderedDict", "upgrade_model_version.parse_config", "checkpoint.pop.items", "torch.save", "re.search", "re.search", "re.search", "upgrade_model_version.is_head", "re.search", "re.search", "print", "upgrade_model_version.reorder_cls_channel", "re.search", "re.search", "print", "upgrade_model_version.truncate_reg_channel", "print", "upgrade_model_version.truncate_cls_channel", "key.replace", "print", "print", "upgrade_model_version.reorder_cls_channel", "re.search.groups"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.parse_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.is_head", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.reorder_cls_channel", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.truncate_reg_channel", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.truncate_cls_channel", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.reorder_cls_channel"], ["", "def", "convert", "(", "in_file", ",", "out_file", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Convert keys in checkpoints.\n\n    There can be some breaking changes during the development of mmdetection,\n    and this tool is used for upgrading checkpoints trained with old versions\n    to the latest one.\n    \"\"\"", "\n", "checkpoint", "=", "torch", ".", "load", "(", "in_file", ")", "\n", "in_state_dict", "=", "checkpoint", ".", "pop", "(", "'state_dict'", ")", "\n", "out_state_dict", "=", "OrderedDict", "(", ")", "\n", "meta_info", "=", "checkpoint", "[", "'meta'", "]", "\n", "is_two_stage", ",", "is_ssd", ",", "is_retina", ",", "reg_cls_agnostic", "=", "parse_config", "(", "\n", "'#'", "+", "meta_info", "[", "'config'", "]", ")", "\n", "if", "meta_info", "[", "'mmdet_version'", "]", "<=", "'0.5.3'", "and", "is_retina", ":", "\n", "        ", "upgrade_retina", "=", "True", "\n", "", "else", ":", "\n", "        ", "upgrade_retina", "=", "False", "\n", "\n", "# MMDetection v2.5.0 unifies the class order in RPN", "\n", "# if the model is trained in version<v2.5.0", "\n", "# The RPN model should be upgraded to be used in version>=2.5.0", "\n", "", "if", "meta_info", "[", "'mmdet_version'", "]", "<", "'2.5.0'", ":", "\n", "        ", "upgrade_rpn", "=", "True", "\n", "", "else", ":", "\n", "        ", "upgrade_rpn", "=", "False", "\n", "\n", "", "for", "key", ",", "val", "in", "in_state_dict", ".", "items", "(", ")", ":", "\n", "        ", "new_key", "=", "key", "\n", "new_val", "=", "val", "\n", "if", "is_two_stage", "and", "is_head", "(", "key", ")", ":", "\n", "            ", "new_key", "=", "'roi_head.{}'", ".", "format", "(", "key", ")", "\n", "\n", "# classification", "\n", "", "if", "upgrade_rpn", ":", "\n", "            ", "m", "=", "re", ".", "search", "(", "\n", "r'(conv_cls|retina_cls|rpn_cls|fc_cls|fcos_cls|'", "\n", "r'fovea_cls).(weight|bias)'", ",", "new_key", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "re", ".", "search", "(", "\n", "r'(conv_cls|retina_cls|fc_cls|fcos_cls|'", "\n", "r'fovea_cls).(weight|bias)'", ",", "new_key", ")", "\n", "", "if", "m", "is", "not", "None", ":", "\n", "            ", "print", "(", "f'reorder cls channels of {new_key}'", ")", "\n", "new_val", "=", "reorder_cls_channel", "(", "val", ",", "num_classes", ")", "\n", "\n", "# regression", "\n", "", "if", "upgrade_rpn", ":", "\n", "            ", "m", "=", "re", ".", "search", "(", "r'(fc_reg).(weight|bias)'", ",", "new_key", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "re", ".", "search", "(", "r'(fc_reg|rpn_reg).(weight|bias)'", ",", "new_key", ")", "\n", "", "if", "m", "is", "not", "None", "and", "not", "reg_cls_agnostic", ":", "\n", "            ", "print", "(", "f'truncate regression channels of {new_key}'", ")", "\n", "new_val", "=", "truncate_reg_channel", "(", "val", ",", "num_classes", ")", "\n", "\n", "# mask head", "\n", "", "m", "=", "re", ".", "search", "(", "r'(conv_logits).(weight|bias)'", ",", "new_key", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "print", "(", "f'truncate mask prediction channels of {new_key}'", ")", "\n", "new_val", "=", "truncate_cls_channel", "(", "val", ",", "num_classes", ")", "\n", "\n", "", "m", "=", "re", ".", "search", "(", "r'(cls_convs|reg_convs).\\d.(weight|bias)'", ",", "key", ")", "\n", "# Legacy issues in RetinaNet since V1.x", "\n", "# Use ConvModule instead of nn.Conv2d in RetinaNet", "\n", "# cls_convs.0.weight -> cls_convs.0.conv.weight", "\n", "if", "m", "is", "not", "None", "and", "upgrade_retina", ":", "\n", "            ", "param", "=", "m", ".", "groups", "(", ")", "[", "1", "]", "\n", "new_key", "=", "key", ".", "replace", "(", "param", ",", "f'conv.{param}'", ")", "\n", "out_state_dict", "[", "new_key", "]", "=", "val", "\n", "print", "(", "f'rename the name of {key} to {new_key}'", ")", "\n", "continue", "\n", "\n", "", "m", "=", "re", ".", "search", "(", "r'(cls_convs).\\d.(weight|bias)'", ",", "key", ")", "\n", "if", "m", "is", "not", "None", "and", "is_ssd", ":", "\n", "            ", "print", "(", "f'reorder cls channels of {new_key}'", ")", "\n", "new_val", "=", "reorder_cls_channel", "(", "val", ",", "num_classes", ")", "\n", "\n", "", "out_state_dict", "[", "new_key", "]", "=", "new_val", "\n", "", "checkpoint", "[", "'state_dict'", "]", "=", "out_state_dict", "\n", "torch", ".", "save", "(", "checkpoint", ",", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.main": [[195, 206], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "upgrade_model_version.convert"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.model_converters.upgrade_model_version.convert"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Upgrade model version'", ")", "\n", "parser", ".", "add_argument", "(", "'in_file'", ",", "help", "=", "'input checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'out_file'", ",", "help", "=", "'output checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--num-classes'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "81", ",", "\n", "help", "=", "'number of classes of the original model'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "convert", "(", "args", ".", "in_file", ",", "args", ".", "out_file", ",", "args", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.deployment.pytorch2onnx.pytorch2onnx": [[15, 154], ["mmdet.core.build_model_from_cfg", "mmdet.core.preprocess_example_input", "mmdet.core.generate_inputs_and_wrap_model", "torch.onnx.export", "print", "output_names.append", "output_names.append", "simplify", "get_classes", "len", "onnx.load", "onnx.checker.check_model", "model", "list", "onnxruntime.SessionOptions", "os.exists", "onnxruntime.InferenceSession", "rt.InferenceSession.run", "print", "len", "print", "digit_version", "digit_version", "one_img.detach().cpu().numpy", "get_onnxruntime_op_path", "mmdet.core.preprocess_example_input", "len", "rt.SessionOptions.register_custom_ops_library", "bbox2result", "show_result_pyplot", "show_result_pyplot", "list", "zip", "warnings.warn", "set", "set", "one_img.detach().numpy", "rt.InferenceSession.get_outputs", "onnx_outputs[].squeeze", "range", "zip", "numpy.testing.assert_allclose", "one_img.detach().cpu", "cls_segms[].append", "one_img.detach", "range", "one_img.detach"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.export.pytorch2onnx.build_model_from_cfg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.export.pytorch2onnx.preprocess_example_input", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.export.pytorch2onnx.generate_inputs_and_wrap_model", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.get_classes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.export.pytorch2onnx.preprocess_example_input", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox2result", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.inference.show_result_pyplot", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.inference.show_result_pyplot"], ["def", "pytorch2onnx", "(", "config_path", ",", "\n", "checkpoint_path", ",", "\n", "input_img", ",", "\n", "input_shape", ",", "\n", "opset_version", "=", "11", ",", "\n", "show", "=", "False", ",", "\n", "output_file", "=", "'tmp.onnx'", ",", "\n", "verify", "=", "False", ",", "\n", "normalize_cfg", "=", "None", ",", "\n", "dataset", "=", "'coco'", ",", "\n", "test_img", "=", "None", ",", "\n", "do_simplify", "=", "False", ",", "\n", "cfg_options", "=", "None", ")", ":", "\n", "\n", "    ", "input_config", "=", "{", "\n", "'input_shape'", ":", "input_shape", ",", "\n", "'input_path'", ":", "input_img", ",", "\n", "'normalize_cfg'", ":", "normalize_cfg", "\n", "}", "\n", "\n", "# prepare original model and meta for verifying the onnx model", "\n", "orig_model", "=", "build_model_from_cfg", "(", "\n", "config_path", ",", "checkpoint_path", ",", "cfg_options", "=", "cfg_options", ")", "\n", "one_img", ",", "one_meta", "=", "preprocess_example_input", "(", "input_config", ")", "\n", "model", ",", "tensor_data", "=", "generate_inputs_and_wrap_model", "(", "\n", "config_path", ",", "checkpoint_path", ",", "input_config", ",", "cfg_options", "=", "cfg_options", ")", "\n", "output_names", "=", "[", "'boxes'", "]", "\n", "if", "model", ".", "with_bbox", ":", "\n", "        ", "output_names", ".", "append", "(", "'labels'", ")", "\n", "", "if", "model", ".", "with_mask", ":", "\n", "        ", "output_names", ".", "append", "(", "'masks'", ")", "\n", "\n", "", "torch", ".", "onnx", ".", "export", "(", "\n", "model", ",", "\n", "tensor_data", ",", "\n", "output_file", ",", "\n", "input_names", "=", "[", "'input'", "]", ",", "\n", "output_names", "=", "output_names", ",", "\n", "export_params", "=", "True", ",", "\n", "keep_initializers_as_inputs", "=", "True", ",", "\n", "do_constant_folding", "=", "True", ",", "\n", "verbose", "=", "show", ",", "\n", "opset_version", "=", "opset_version", ")", "\n", "\n", "model", ".", "forward", "=", "orig_model", ".", "forward", "\n", "\n", "# simplify onnx model", "\n", "if", "do_simplify", ":", "\n", "        ", "from", "mmdet", "import", "digit_version", "\n", "import", "mmcv", "\n", "\n", "min_required_version", "=", "'1.2.5'", "\n", "assert", "digit_version", "(", "mmcv", ".", "__version__", ")", ">=", "digit_version", "(", "\n", "min_required_version", "\n", ")", ",", "f'Requires to install mmcv>={min_required_version}'", "\n", "from", "mmcv", ".", "onnx", ".", "simplify", "import", "simplify", "\n", "\n", "input_dic", "=", "{", "'input'", ":", "one_img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", "\n", "_", "=", "simplify", "(", "output_file", ",", "[", "input_dic", "]", ",", "output_file", ")", "\n", "", "print", "(", "f'Successfully exported ONNX model: {output_file}'", ")", "\n", "if", "verify", ":", "\n", "        ", "from", "mmdet", ".", "core", "import", "get_classes", ",", "bbox2result", "\n", "from", "mmdet", ".", "apis", "import", "show_result_pyplot", "\n", "\n", "ort_custom_op_path", "=", "''", "\n", "try", ":", "\n", "            ", "from", "mmcv", ".", "ops", "import", "get_onnxruntime_op_path", "\n", "ort_custom_op_path", "=", "get_onnxruntime_op_path", "(", ")", "\n", "", "except", "(", "ImportError", ",", "ModuleNotFoundError", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "'If input model has custom op from mmcv, \\\n                you may have to build mmcv with ONNXRuntime from source.'", ")", "\n", "", "model", ".", "CLASSES", "=", "get_classes", "(", "dataset", ")", "\n", "num_classes", "=", "len", "(", "model", ".", "CLASSES", ")", "\n", "# check by onnx", "\n", "onnx_model", "=", "onnx", ".", "load", "(", "output_file", ")", "\n", "onnx", ".", "checker", ".", "check_model", "(", "onnx_model", ")", "\n", "if", "test_img", "is", "not", "None", ":", "\n", "            ", "input_config", "[", "'input_path'", "]", "=", "test_img", "\n", "one_img", ",", "one_meta", "=", "preprocess_example_input", "(", "input_config", ")", "\n", "tensor_data", "=", "[", "one_img", "]", "\n", "# check the numerical value", "\n", "# get pytorch output", "\n", "", "pytorch_results", "=", "model", "(", "tensor_data", ",", "[", "[", "one_meta", "]", "]", ",", "return_loss", "=", "False", ")", "\n", "pytorch_results", "=", "pytorch_results", "[", "0", "]", "\n", "# get onnx output", "\n", "input_all", "=", "[", "node", ".", "name", "for", "node", "in", "onnx_model", ".", "graph", ".", "input", "]", "\n", "input_initializer", "=", "[", "\n", "node", ".", "name", "for", "node", "in", "onnx_model", ".", "graph", ".", "initializer", "\n", "]", "\n", "net_feed_input", "=", "list", "(", "set", "(", "input_all", ")", "-", "set", "(", "input_initializer", ")", ")", "\n", "assert", "(", "len", "(", "net_feed_input", ")", "==", "1", ")", "\n", "session_options", "=", "rt", ".", "SessionOptions", "(", ")", "\n", "# register custom op for onnxruntime", "\n", "if", "osp", ".", "exists", "(", "ort_custom_op_path", ")", ":", "\n", "            ", "session_options", ".", "register_custom_ops_library", "(", "ort_custom_op_path", ")", "\n", "", "sess", "=", "rt", ".", "InferenceSession", "(", "output_file", ",", "session_options", ")", "\n", "onnx_outputs", "=", "sess", ".", "run", "(", "None", ",", "\n", "{", "net_feed_input", "[", "0", "]", ":", "one_img", ".", "detach", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "output_names", "=", "[", "_", ".", "name", "for", "_", "in", "sess", ".", "get_outputs", "(", ")", "]", "\n", "output_shapes", "=", "[", "_", ".", "shape", "for", "_", "in", "onnx_outputs", "]", "\n", "print", "(", "f'onnxruntime output names: {output_names}, \\\n            output shapes: {output_shapes}'", ")", "\n", "nrof_out", "=", "len", "(", "onnx_outputs", ")", "\n", "assert", "nrof_out", ">", "0", ",", "'Must have output'", "\n", "with_mask", "=", "nrof_out", "==", "3", "\n", "if", "nrof_out", "==", "1", ":", "\n", "            ", "onnx_results", "=", "onnx_outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "det_bboxes", ",", "det_labels", "=", "onnx_outputs", "[", ":", "2", "]", "\n", "onnx_results", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "num_classes", ")", "\n", "if", "with_mask", ":", "\n", "                ", "segm_results", "=", "onnx_outputs", "[", "2", "]", ".", "squeeze", "(", "1", ")", "\n", "cls_segms", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "det_bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "cls_segms", "[", "det_labels", "[", "i", "]", "]", ".", "append", "(", "segm_results", "[", "i", "]", ")", "\n", "", "onnx_results", "=", "(", "onnx_results", ",", "cls_segms", ")", "\n", "# visualize predictions", "\n", "\n", "", "", "if", "show", ":", "\n", "            ", "show_result_pyplot", "(", "\n", "model", ",", "one_meta", "[", "'show_img'", "]", ",", "pytorch_results", ",", "title", "=", "'Pytorch'", ")", "\n", "show_result_pyplot", "(", "\n", "model", ",", "one_meta", "[", "'show_img'", "]", ",", "onnx_results", ",", "title", "=", "'ONNX'", ")", "\n", "\n", "# compare a part of result", "\n", "\n", "", "if", "with_mask", ":", "\n", "            ", "compare_pairs", "=", "list", "(", "zip", "(", "onnx_results", ",", "pytorch_results", ")", ")", "\n", "", "else", ":", "\n", "            ", "compare_pairs", "=", "[", "(", "onnx_results", ",", "pytorch_results", ")", "]", "\n", "", "for", "onnx_res", ",", "pytorch_res", "in", "compare_pairs", ":", "\n", "            ", "for", "o_res", ",", "p_res", "in", "zip", "(", "onnx_res", ",", "pytorch_res", ")", ":", "\n", "                ", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "o_res", ",", "\n", "p_res", ",", "\n", "rtol", "=", "1e-03", ",", "\n", "atol", "=", "1e-05", ",", "\n", ")", "\n", "", "", "print", "(", "'The numerical values are the same between Pytorch and ONNX'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.deployment.pytorch2onnx.parse_args": [[156, 207], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Convert MMDetection models to ONNX'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-img'", ",", "type", "=", "str", ",", "help", "=", "'Images for input'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show onnx graph'", ")", "\n", "parser", ".", "add_argument", "(", "'--output-file'", ",", "type", "=", "str", ",", "default", "=", "'tmp.onnx'", ")", "\n", "parser", ".", "add_argument", "(", "'--opset-version'", ",", "type", "=", "int", ",", "default", "=", "11", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--test-img'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'Images for test'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'coco'", ",", "help", "=", "'Dataset name'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--verify'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'verify the onnx model output against pytorch output'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--simplify'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to simplify onnx model.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--shape'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "800", ",", "1216", "]", ",", "\n", "help", "=", "'input image size'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--mean'", ",", "\n", "type", "=", "float", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "123.675", ",", "116.28", ",", "103.53", "]", ",", "\n", "help", "=", "'mean value used for preprocess input data'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--std'", ",", "\n", "type", "=", "float", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "58.395", ",", "57.12", ",", "57.375", "]", ",", "\n", "help", "=", "'variance value used for preprocess input data'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.deployment.onnx2tensorrt.get_GiB": [[17, 20], ["None"], "function", ["None"], ["def", "get_GiB", "(", "x", ":", "int", ")", ":", "\n", "    ", "\"\"\"return x GiB.\"\"\"", "\n", "return", "x", "*", "(", "1", "<<", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.deployment.onnx2tensorrt.onnx2tensorrt": [[22, 94], ["onnx.load", "onnx2tensorrt.get_GiB", "mmcv.tensorrt.onnx2trt", "os.split", "mmcv.tensorrt.save_trt_engine", "print", "os.makedirs", "os.makedirs", "mmdet.core.preprocess_example_input", "one_img.detach().cpu().numpy", "one_img.cuda", "mmcv.tensorrt.TRTWraper", "trt_outputs[].detach().cpu().numpy", "trt_outputs[].detach().cpu().numpy", "mmcv.ops.get_onnxruntime_op_path", "onnxruntime.SessionOptions", "os.exists", "onnxruntime.InferenceSession", "ort.InferenceSession.run", "numpy.testing.assert_allclose", "numpy.testing.assert_allclose", "print", "torch.no_grad", "mmcv.tensorrt.TRTWraper.", "ort.SessionOptions.register_custom_ops_library", "mmdet.core.get_classes", "mmcv.visualization.image.imshow_det_bboxes", "mmcv.visualization.image.imshow_det_bboxes", "one_img.detach().cpu", "trt_outputs[].detach().cpu", "trt_outputs[].detach().cpu", "img.copy", "img.copy", "one_img.detach", "trt_outputs[].detach", "trt_outputs[].detach"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.deployment.onnx2tensorrt.get_GiB", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.export.pytorch2onnx.preprocess_example_input", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.get_classes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_det_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_det_bboxes"], ["", "def", "onnx2tensorrt", "(", "onnx_file", ",", "\n", "trt_file", ",", "\n", "input_config", ",", "\n", "verify", "=", "False", ",", "\n", "show", "=", "False", ",", "\n", "dataset", "=", "'coco'", ",", "\n", "workspace_size", "=", "1", ")", ":", "\n", "    ", "onnx_model", "=", "onnx", ".", "load", "(", "onnx_file", ")", "\n", "input_shape", "=", "input_config", "[", "'input_shape'", "]", "\n", "# create trt engine and wraper", "\n", "opt_shape_dict", "=", "{", "'input'", ":", "[", "input_shape", ",", "input_shape", ",", "input_shape", "]", "}", "\n", "max_workspace_size", "=", "get_GiB", "(", "workspace_size", ")", "\n", "trt_engine", "=", "onnx2trt", "(", "\n", "onnx_model", ",", "\n", "opt_shape_dict", ",", "\n", "fp16_mode", "=", "False", ",", "\n", "max_workspace_size", "=", "max_workspace_size", ")", "\n", "save_dir", ",", "_", "=", "osp", ".", "split", "(", "trt_file", ")", "\n", "if", "save_dir", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "save_trt_engine", "(", "trt_engine", ",", "trt_file", ")", "\n", "print", "(", "f'Successfully created TensorRT engine: {trt_file}'", ")", "\n", "\n", "if", "verify", ":", "\n", "        ", "one_img", ",", "one_meta", "=", "preprocess_example_input", "(", "input_config", ")", "\n", "input_img_cpu", "=", "one_img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "input_img_cuda", "=", "one_img", ".", "cuda", "(", ")", "\n", "\n", "img", "=", "one_meta", "[", "'show_img'", "]", "\n", "\n", "# Get results from TensorRT", "\n", "trt_model", "=", "TRTWraper", "(", "trt_file", ",", "[", "'input'", "]", ",", "[", "'boxes'", ",", "'labels'", "]", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "trt_outputs", "=", "trt_model", "(", "{", "'input'", ":", "input_img_cuda", "}", ")", "\n", "", "trt_boxes", "=", "trt_outputs", "[", "'boxes'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "trt_labels", "=", "trt_outputs", "[", "'labels'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# Get results from ONNXRuntime", "\n", "ort_custom_op_path", "=", "get_onnxruntime_op_path", "(", ")", "\n", "session_options", "=", "ort", ".", "SessionOptions", "(", ")", "\n", "if", "osp", ".", "exists", "(", "ort_custom_op_path", ")", ":", "\n", "            ", "session_options", ".", "register_custom_ops_library", "(", "ort_custom_op_path", ")", "\n", "", "sess", "=", "ort", ".", "InferenceSession", "(", "onnx_file", ",", "session_options", ")", "\n", "onnx_outputs", "=", "sess", ".", "run", "(", "None", ",", "{", "\n", "'input'", ":", "input_img_cpu", ",", "\n", "}", ")", "\n", "ort_boxes", ",", "ort_labels", "=", "onnx_outputs", "\n", "\n", "# Show detection outputs", "\n", "if", "show", ":", "\n", "            ", "CLASSES", "=", "get_classes", "(", "dataset", ")", "\n", "score_thr", "=", "0.35", "\n", "imshow_det_bboxes", "(", "\n", "img", ".", "copy", "(", ")", ",", "\n", "trt_boxes", ",", "\n", "trt_labels", ",", "\n", "CLASSES", ",", "\n", "score_thr", "=", "score_thr", ",", "\n", "win_name", "=", "'TensorRT'", ")", "\n", "imshow_det_bboxes", "(", "\n", "img", ".", "copy", "(", ")", ",", "\n", "ort_boxes", ",", "\n", "ort_labels", ",", "\n", "CLASSES", ",", "\n", "score_thr", "=", "score_thr", ",", "\n", "win_name", "=", "'ONNXRuntime'", ")", "\n", "# Compare results", "\n", "", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "ort_boxes", ",", "trt_boxes", ",", "rtol", "=", "1e-03", ",", "atol", "=", "1e-05", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "ort_labels", ",", "trt_labels", ")", "\n", "print", "(", "'The numerical values are the same '", "+", "\n", "'between ONNXRuntime and TensorRT'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.deployment.onnx2tensorrt.parse_args": [[96, 144], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Convert MMDetection models from ONNX to TensorRT'", ")", "\n", "parser", ".", "add_argument", "(", "'model'", ",", "help", "=", "'Filename of input ONNX model'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--trt-file'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'tmp.trt'", ",", "\n", "help", "=", "'Filename of output TensorRT engine'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--input-img'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Image for test'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Whether to show output results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'coco'", ",", "help", "=", "'Dataset name'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--verify'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Verify the outputs of ONNXRuntime and TensorRT'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--to-rgb'", ",", "\n", "action", "=", "'store_false'", ",", "\n", "help", "=", "'Feed model with RGB or BGR image. Default is RGB.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--shape'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "400", ",", "600", "]", ",", "\n", "help", "=", "'Input size of the model'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--mean'", ",", "\n", "type", "=", "float", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "123.675", ",", "116.28", ",", "103.53", "]", ",", "\n", "help", "=", "'Mean value used for preprocess input data'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--std'", ",", "\n", "type", "=", "float", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "58.395", ",", "57.12", ",", "57.375", "]", ",", "\n", "help", "=", "'Variance value used for preprocess input data'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--workspace-size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'Max workspace size in GiB'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.deployment.mmdet_handler.MMdetHandler.initialize": [[14, 29], ["torch.device", "properties.get", "os.path.join", "os.path.join", "mmdet.apis.init_detector", "torch.cuda.is_available", "torch.cuda.is_available", "str", "properties.get"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.inference.init_detector"], ["def", "initialize", "(", "self", ",", "context", ")", ":", "\n", "        ", "properties", "=", "context", ".", "system_properties", "\n", "self", ".", "map_location", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "self", ".", "map_location", "+", "':'", "+", "\n", "str", "(", "properties", ".", "get", "(", "'gpu_id'", ")", ")", "if", "torch", ".", "cuda", ".", "\n", "is_available", "(", ")", "else", "self", ".", "map_location", ")", "\n", "self", ".", "manifest", "=", "context", ".", "manifest", "\n", "\n", "model_dir", "=", "properties", ".", "get", "(", "'model_dir'", ")", "\n", "serialized_file", "=", "self", ".", "manifest", "[", "'model'", "]", "[", "'serializedFile'", "]", "\n", "checkpoint", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "serialized_file", ")", "\n", "self", ".", "config_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'config.py'", ")", "\n", "\n", "self", ".", "model", "=", "init_detector", "(", "self", ".", "config_file", ",", "checkpoint", ",", "self", ".", "device", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.deployment.mmdet_handler.MMdetHandler.preprocess": [[30, 41], ["isinstance", "mmcv.imfrombytes", "images.append", "row.get", "row.get", "base64.b64decode"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "data", ")", ":", "\n", "        ", "images", "=", "[", "]", "\n", "\n", "for", "row", "in", "data", ":", "\n", "            ", "image", "=", "row", ".", "get", "(", "'data'", ")", "or", "row", ".", "get", "(", "'body'", ")", "\n", "if", "isinstance", "(", "image", ",", "str", ")", ":", "\n", "                ", "image", "=", "base64", ".", "b64decode", "(", "image", ")", "\n", "", "image", "=", "mmcv", ".", "imfrombytes", "(", "image", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.deployment.mmdet_handler.MMdetHandler.inference": [[42, 45], ["mmdet.apis.inference_detector"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.inference.inference_detector"], ["", "def", "inference", "(", "self", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "results", "=", "inference_detector", "(", "self", ".", "model", ",", "data", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.deployment.mmdet_handler.MMdetHandler.postprocess": [[46, 70], ["enumerate", "output.append", "isinstance", "enumerate", "isinstance", "bbox[].tolist", "float", "output[].append"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "data", ")", ":", "\n", "# Format output following the example ObjectDetectionHandler format", "\n", "        ", "output", "=", "[", "]", "\n", "for", "image_index", ",", "image_result", "in", "enumerate", "(", "data", ")", ":", "\n", "            ", "output", ".", "append", "(", "[", "]", ")", "\n", "if", "isinstance", "(", "image_result", ",", "tuple", ")", ":", "\n", "                ", "bbox_result", ",", "segm_result", "=", "image_result", "\n", "if", "isinstance", "(", "segm_result", ",", "tuple", ")", ":", "\n", "                    ", "segm_result", "=", "segm_result", "[", "0", "]", "# ms rcnn", "\n", "", "", "else", ":", "\n", "                ", "bbox_result", ",", "segm_result", "=", "image_result", ",", "None", "\n", "\n", "", "for", "class_index", ",", "class_result", "in", "enumerate", "(", "bbox_result", ")", ":", "\n", "                ", "class_name", "=", "self", ".", "model", ".", "CLASSES", "[", "class_index", "]", "\n", "for", "bbox", "in", "class_result", ":", "\n", "                    ", "bbox_coords", "=", "bbox", "[", ":", "-", "1", "]", ".", "tolist", "(", ")", "\n", "score", "=", "float", "(", "bbox", "[", "-", "1", "]", ")", "\n", "if", "score", ">=", "self", ".", "threshold", ":", "\n", "                        ", "output", "[", "image_index", "]", ".", "append", "(", "{", "\n", "class_name", ":", "bbox_coords", ",", "\n", "'score'", ":", "score", "\n", "}", ")", "\n", "\n", "", "", "", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.deployment.mmdet2torchserve.mmdet2torchserve": [[14, 65], ["mmcv.Config.fromfile", "tempfile.TemporaryDirectory", "mmcv.Config.fromfile.dump", "argparse.Namespace", "ModelExportUtils.generate_manifest_json", "package_model", "pathlib.Path", "pathlib.Path"], "function", ["None"], ["", "def", "mmdet2torchserve", "(", "\n", "config_file", ":", "str", ",", "\n", "checkpoint_file", ":", "str", ",", "\n", "output_folder", ":", "str", ",", "\n", "model_name", ":", "str", ",", "\n", "model_version", ":", "str", "=", "'1.0'", ",", "\n", "force", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Converts MMDetection model (config + checkpoint) to TorchServe `.mar`.\n\n    Args:\n        config_file:\n            In MMDetection config format.\n            The contents vary for each task repository.\n        checkpoint_file:\n            In MMDetection checkpoint format.\n            The contents vary for each task repository.\n        output_folder:\n            Folder where `{model_name}.mar` will be created.\n            The file created will be in TorchServe archive format.\n        model_name:\n            If not None, used for naming the `{model_name}.mar` file\n            that will be created under `output_folder`.\n            If None, `{Path(checkpoint_file).stem}` will be used.\n        model_version:\n            Model's version.\n        force:\n            If True, if there is an existing `{model_name}.mar`\n            file under `output_folder` it will be overwritten.\n    \"\"\"", "\n", "config", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "config_file", ")", "\n", "\n", "with", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "        ", "config", ".", "dump", "(", "f'{tmpdir}/config.py'", ")", "\n", "\n", "args", "=", "Namespace", "(", "\n", "**", "{", "\n", "'model_file'", ":", "f'{tmpdir}/config.py'", ",", "\n", "'serialized_file'", ":", "checkpoint_file", ",", "\n", "'handler'", ":", "f'{Path(__file__).parent}/mmdet_handler.py'", ",", "\n", "'model_name'", ":", "model_name", "or", "Path", "(", "checkpoint_file", ")", ".", "stem", ",", "\n", "'version'", ":", "model_version", ",", "\n", "'export_path'", ":", "output_folder", ",", "\n", "'force'", ":", "force", ",", "\n", "'requirements_file'", ":", "None", ",", "\n", "'extra_files'", ":", "None", ",", "\n", "'runtime'", ":", "'python'", ",", "\n", "'archive_format'", ":", "'default'", "\n", "}", ")", "\n", "manifest", "=", "ModelExportUtils", ".", "generate_manifest_json", "(", "args", ")", "\n", "package_model", "(", "args", ",", "manifest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.deployment.mmdet2torchserve.parse_args": [[67, 97], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "\n", "description", "=", "'Convert MMDetection models to TorchServe `.mar` format.'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "type", "=", "str", ",", "help", "=", "'config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "type", "=", "str", ",", "help", "=", "'checkpoint file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output-folder'", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "'Folder where `{model_name}.mar` will be created.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--model-name'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'If not None, used for naming the `{model_name}.mar`'", "\n", "'file that will be created under `output_folder`.'", "\n", "'If None, `{Path(checkpoint_file).stem}` will be used.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--model-version'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'1.0'", ",", "\n", "help", "=", "'Number used for versioning.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'-f'", ",", "\n", "'--force'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'overwrite the existing `{model_name}.mar`'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.makeplot": [[12, 51], ["numpy.vstack", "range", "len", "ps_curve.insert", "matplotlib.figure", "matplotlib.subplot", "range", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.title", "matplotlib.legend", "plt.figure.savefig", "matplotlib.close", "numpy.ones", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "ps_.mean", "numpy.zeros", "len", "plt.subplot.plot", "plt.subplot.fill_between", "ps_.mean", "str"], "function", ["None"], ["def", "makeplot", "(", "rs", ",", "ps", ",", "outDir", ",", "class_name", ",", "iou_type", ")", ":", "\n", "    ", "cs", "=", "np", ".", "vstack", "(", "[", "\n", "np", ".", "ones", "(", "(", "2", ",", "3", ")", ")", ",", "\n", "np", ".", "array", "(", "[", "0.31", ",", "0.51", ",", "0.74", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.75", ",", "0.31", ",", "0.30", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.36", ",", "0.90", ",", "0.38", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "0.50", ",", "0.39", ",", "0.64", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "1", ",", "0.6", ",", "0", "]", ")", ",", "\n", "]", ")", "\n", "areaNames", "=", "[", "'allarea'", ",", "'small'", ",", "'medium'", ",", "'large'", "]", "\n", "types", "=", "[", "'C75'", ",", "'C50'", ",", "'Loc'", ",", "'Sim'", ",", "'Oth'", ",", "'BG'", ",", "'FN'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "areaNames", ")", ")", ":", "\n", "        ", "area_ps", "=", "ps", "[", "...", ",", "i", ",", "0", "]", "\n", "figure_title", "=", "iou_type", "+", "'-'", "+", "class_name", "+", "'-'", "+", "areaNames", "[", "i", "]", "\n", "aps", "=", "[", "ps_", ".", "mean", "(", ")", "for", "ps_", "in", "area_ps", "]", "\n", "ps_curve", "=", "[", "\n", "ps_", ".", "mean", "(", "axis", "=", "1", ")", "if", "ps_", ".", "ndim", ">", "1", "else", "ps_", "for", "ps_", "in", "area_ps", "\n", "]", "\n", "ps_curve", ".", "insert", "(", "0", ",", "np", ".", "zeros", "(", "ps_curve", "[", "0", "]", ".", "shape", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "111", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "types", ")", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "rs", ",", "ps_curve", "[", "k", "+", "1", "]", ",", "color", "=", "[", "0", ",", "0", ",", "0", "]", ",", "linewidth", "=", "0.5", ")", "\n", "ax", ".", "fill_between", "(", "\n", "rs", ",", "\n", "ps_curve", "[", "k", "]", ",", "\n", "ps_curve", "[", "k", "+", "1", "]", ",", "\n", "color", "=", "cs", "[", "k", "]", ",", "\n", "label", "=", "str", "(", "f'[{aps[k]:.3f}]'", "+", "types", "[", "k", "]", ")", ",", "\n", ")", "\n", "", "plt", ".", "xlabel", "(", "'recall'", ")", "\n", "plt", ".", "ylabel", "(", "'precision'", ")", "\n", "plt", ".", "xlim", "(", "0", ",", "1.0", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "1.0", ")", "\n", "plt", ".", "title", "(", "figure_title", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "# plt.show()", "\n", "fig", ".", "savefig", "(", "outDir", "+", "f'/{figure_title}.png'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.autolabel": [[53, 69], ["rect.get_height", "ax.annotate", "rect.get_x", "rect.get_width"], "function", ["None"], ["", "", "def", "autolabel", "(", "ax", ",", "rects", ")", ":", "\n", "    ", "\"\"\"Attach a text label above each bar in *rects*, displaying its height.\"\"\"", "\n", "for", "rect", "in", "rects", ":", "\n", "        ", "height", "=", "rect", ".", "get_height", "(", ")", "\n", "if", "height", ">", "0", "and", "height", "<=", "1", ":", "# for percent values", "\n", "            ", "text_label", "=", "'{:2.0f}'", ".", "format", "(", "height", "*", "100", ")", "\n", "", "else", ":", "\n", "            ", "text_label", "=", "'{:2.0f}'", ".", "format", "(", "height", ")", "\n", "", "ax", ".", "annotate", "(", "\n", "text_label", ",", "\n", "xy", "=", "(", "rect", ".", "get_x", "(", ")", "+", "rect", ".", "get_width", "(", ")", "/", "2", ",", "height", ")", ",", "\n", "xytext", "=", "(", "0", ",", "3", ")", ",", "# 3 points vertical offset", "\n", "textcoords", "=", "'offset points'", ",", "\n", "ha", "=", "'center'", ",", "\n", "va", "=", "'bottom'", ",", "\n", "fontsize", "=", "'x-small'", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.makebarplot": [[72, 105], ["matplotlib.subplots", "numpy.arange", "range", "ax.set_ylabel", "ax.set_title", "ax.set_xticks", "ax.set_xticklabels", "ax.legend", "fig.savefig", "matplotlib.close", "len", "rects_list.append", "coco_error_analysis.autolabel", "len", "ps_.mean", "ax.bar", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.autolabel"], ["", "", "def", "makebarplot", "(", "rs", ",", "ps", ",", "outDir", ",", "class_name", ",", "iou_type", ")", ":", "\n", "    ", "areaNames", "=", "[", "'allarea'", ",", "'small'", ",", "'medium'", ",", "'large'", "]", "\n", "types", "=", "[", "'C75'", ",", "'C50'", ",", "'Loc'", ",", "'Sim'", ",", "'Oth'", ",", "'BG'", ",", "'FN'", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "x", "=", "np", ".", "arange", "(", "len", "(", "areaNames", ")", ")", "# the areaNames locations", "\n", "width", "=", "0.60", "# the width of the bars", "\n", "rects_list", "=", "[", "]", "\n", "figure_title", "=", "iou_type", "+", "'-'", "+", "class_name", "+", "'-'", "+", "'ap bar plot'", "\n", "for", "i", "in", "range", "(", "len", "(", "types", ")", "-", "1", ")", ":", "\n", "        ", "type_ps", "=", "ps", "[", "i", ",", "...", ",", "0", "]", "\n", "aps", "=", "[", "ps_", ".", "mean", "(", ")", "for", "ps_", "in", "type_ps", ".", "T", "]", "\n", "rects_list", ".", "append", "(", "\n", "ax", ".", "bar", "(", "\n", "x", "-", "width", "/", "2", "+", "(", "i", "+", "1", ")", "*", "width", "/", "len", "(", "types", ")", ",", "\n", "aps", ",", "\n", "width", "/", "len", "(", "types", ")", ",", "\n", "label", "=", "types", "[", "i", "]", ",", "\n", ")", ")", "\n", "\n", "# Add some text for labels, title and custom x-axis tick labels, etc.", "\n", "", "ax", ".", "set_ylabel", "(", "'Mean Average Precision (mAP)'", ")", "\n", "ax", ".", "set_title", "(", "figure_title", ")", "\n", "ax", ".", "set_xticks", "(", "x", ")", "\n", "ax", ".", "set_xticklabels", "(", "areaNames", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n", "# Add score texts over bars", "\n", "for", "rects", "in", "rects_list", ":", "\n", "        ", "autolabel", "(", "ax", ",", "rects", ")", "\n", "\n", "# Save plot", "\n", "", "fig", ".", "savefig", "(", "outDir", "+", "f'/{figure_title}.png'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.get_gt_area_group_numbers": [[107, 120], ["dict", "dict.fromkeys", "str", "zip", "str"], "function", ["None"], ["", "def", "get_gt_area_group_numbers", "(", "cocoEval", ")", ":", "\n", "    ", "areaRng", "=", "cocoEval", ".", "params", ".", "areaRng", "\n", "areaRngStr", "=", "[", "str", "(", "aRng", ")", "for", "aRng", "in", "areaRng", "]", "\n", "areaRngLbl", "=", "cocoEval", ".", "params", ".", "areaRngLbl", "\n", "areaRngStr2areaRngLbl", "=", "dict", "(", "zip", "(", "areaRngStr", ",", "areaRngLbl", ")", ")", "\n", "areaRngLbl2Number", "=", "dict", ".", "fromkeys", "(", "areaRngLbl", ",", "0", ")", "\n", "for", "evalImg", "in", "cocoEval", ".", "evalImgs", ":", "\n", "        ", "if", "evalImg", ":", "\n", "            ", "for", "gtIgnore", "in", "evalImg", "[", "'gtIgnore'", "]", ":", "\n", "                ", "if", "not", "gtIgnore", ":", "\n", "                    ", "aRngLbl", "=", "areaRngStr2areaRngLbl", "[", "str", "(", "evalImg", "[", "'aRng'", "]", ")", "]", "\n", "areaRngLbl2Number", "[", "aRngLbl", "]", "+=", "1", "\n", "", "", "", "", "return", "areaRngLbl2Number", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.make_gt_area_group_numbers_plot": [[122, 149], ["coco_error_analysis.get_gt_area_group_numbers", "get_gt_area_group_numbers.keys", "matplotlib.subplots", "numpy.arange", "ax.bar", "ax.set_ylabel", "ax.set_title", "ax.set_xticks", "ax.set_xticklabels", "coco_error_analysis.autolabel", "fig.tight_layout", "fig.savefig", "matplotlib.close", "print", "len", "get_gt_area_group_numbers.values"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.get_gt_area_group_numbers", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.autolabel"], ["", "def", "make_gt_area_group_numbers_plot", "(", "cocoEval", ",", "outDir", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "areaRngLbl2Number", "=", "get_gt_area_group_numbers", "(", "cocoEval", ")", "\n", "areaRngLbl", "=", "areaRngLbl2Number", ".", "keys", "(", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'number of annotations per area group:'", ",", "areaRngLbl2Number", ")", "\n", "\n", "# Init figure", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "x", "=", "np", ".", "arange", "(", "len", "(", "areaRngLbl", ")", ")", "# the areaNames locations", "\n", "width", "=", "0.60", "# the width of the bars", "\n", "figure_title", "=", "'number of annotations per area group'", "\n", "\n", "rects", "=", "ax", ".", "bar", "(", "x", ",", "areaRngLbl2Number", ".", "values", "(", ")", ",", "width", ")", "\n", "\n", "# Add some text for labels, title and custom x-axis tick labels, etc.", "\n", "ax", ".", "set_ylabel", "(", "'Number of annotations'", ")", "\n", "ax", ".", "set_title", "(", "figure_title", ")", "\n", "ax", ".", "set_xticks", "(", "x", ")", "\n", "ax", ".", "set_xticklabels", "(", "areaRngLbl", ")", "\n", "\n", "# Add score texts over bars", "\n", "autolabel", "(", "ax", ",", "rects", ")", "\n", "\n", "# Save plot", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "outDir", "+", "f'/{figure_title}.png'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.make_gt_area_histogram_plot": [[151, 171], ["matplotlib.subplots", "ax.hist", "ax.set_xlabel", "ax.set_ylabel", "ax.set_title", "fig.tight_layout", "fig.savefig", "matplotlib.close", "numpy.sqrt", "cocoEval.cocoGt.anns.values"], "function", ["None"], ["", "def", "make_gt_area_histogram_plot", "(", "cocoEval", ",", "outDir", ")", ":", "\n", "    ", "n_bins", "=", "100", "\n", "areas", "=", "[", "ann", "[", "'area'", "]", "for", "ann", "in", "cocoEval", ".", "cocoGt", ".", "anns", ".", "values", "(", ")", "]", "\n", "\n", "# init figure", "\n", "figure_title", "=", "'gt annotation areas histogram plot'", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "# Set the number of bins", "\n", "ax", ".", "hist", "(", "np", ".", "sqrt", "(", "areas", ")", ",", "bins", "=", "n_bins", ")", "\n", "\n", "# Add some text for labels, title and custom x-axis tick labels, etc.", "\n", "ax", ".", "set_xlabel", "(", "'Squareroot Area'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Number of annotations'", ")", "\n", "ax", ".", "set_title", "(", "figure_title", ")", "\n", "\n", "# Save plot", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "outDir", "+", "f'/{figure_title}.png'", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.analyze_individual_category": [[173, 232], ["print", "copy.deepcopy", "cocoGt.getImgIds", "copy.deepcopy.createIndex", "copy.deepcopy", "copy.deepcopy.getCatIds", "enumerate", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "copy.deepcopy", "enumerate", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "cocoGt.loadCats", "cocoGt.loadCats", "copy.deepcopy", "copy.deepcopy", "select_dt_anns.append"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate"], ["", "def", "analyze_individual_category", "(", "k", ",", "\n", "cocoDt", ",", "\n", "cocoGt", ",", "\n", "catId", ",", "\n", "iou_type", ",", "\n", "areas", "=", "None", ")", ":", "\n", "    ", "nm", "=", "cocoGt", ".", "loadCats", "(", "catId", ")", "[", "0", "]", "\n", "print", "(", "f'--------------analyzing {k + 1}-{nm[\"name\"]}---------------'", ")", "\n", "ps_", "=", "{", "}", "\n", "dt", "=", "copy", ".", "deepcopy", "(", "cocoDt", ")", "\n", "nm", "=", "cocoGt", ".", "loadCats", "(", "catId", ")", "[", "0", "]", "\n", "imgIds", "=", "cocoGt", ".", "getImgIds", "(", ")", "\n", "dt_anns", "=", "dt", ".", "dataset", "[", "'annotations'", "]", "\n", "select_dt_anns", "=", "[", "]", "\n", "for", "ann", "in", "dt_anns", ":", "\n", "        ", "if", "ann", "[", "'category_id'", "]", "==", "catId", ":", "\n", "            ", "select_dt_anns", ".", "append", "(", "ann", ")", "\n", "", "", "dt", ".", "dataset", "[", "'annotations'", "]", "=", "select_dt_anns", "\n", "dt", ".", "createIndex", "(", ")", "\n", "# compute precision but ignore superclass confusion", "\n", "gt", "=", "copy", ".", "deepcopy", "(", "cocoGt", ")", "\n", "child_catIds", "=", "gt", ".", "getCatIds", "(", "supNms", "=", "[", "nm", "[", "'supercategory'", "]", "]", ")", "\n", "for", "idx", ",", "ann", "in", "enumerate", "(", "gt", ".", "dataset", "[", "'annotations'", "]", ")", ":", "\n", "        ", "if", "ann", "[", "'category_id'", "]", "in", "child_catIds", "and", "ann", "[", "'category_id'", "]", "!=", "catId", ":", "\n", "            ", "gt", ".", "dataset", "[", "'annotations'", "]", "[", "idx", "]", "[", "'ignore'", "]", "=", "1", "\n", "gt", ".", "dataset", "[", "'annotations'", "]", "[", "idx", "]", "[", "'iscrowd'", "]", "=", "1", "\n", "gt", ".", "dataset", "[", "'annotations'", "]", "[", "idx", "]", "[", "'category_id'", "]", "=", "catId", "\n", "", "", "cocoEval", "=", "COCOeval", "(", "gt", ",", "copy", ".", "deepcopy", "(", "dt", ")", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "cocoEval", ".", "params", ".", "maxDets", "=", "[", "100", "]", "\n", "cocoEval", ".", "params", ".", "iouThrs", "=", "[", "0.1", "]", "\n", "cocoEval", ".", "params", ".", "useCats", "=", "1", "\n", "if", "areas", ":", "\n", "        ", "cocoEval", ".", "params", ".", "areaRng", "=", "[", "[", "0", "**", "2", ",", "areas", "[", "2", "]", "]", ",", "[", "0", "**", "2", ",", "areas", "[", "0", "]", "]", ",", "\n", "[", "areas", "[", "0", "]", ",", "areas", "[", "1", "]", "]", ",", "[", "areas", "[", "1", "]", ",", "areas", "[", "2", "]", "]", "]", "\n", "", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "ps_supercategory", "=", "cocoEval", ".", "eval", "[", "'precision'", "]", "[", "0", ",", ":", ",", "k", ",", ":", ",", ":", "]", "\n", "ps_", "[", "'ps_supercategory'", "]", "=", "ps_supercategory", "\n", "# compute precision but ignore any class confusion", "\n", "gt", "=", "copy", ".", "deepcopy", "(", "cocoGt", ")", "\n", "for", "idx", ",", "ann", "in", "enumerate", "(", "gt", ".", "dataset", "[", "'annotations'", "]", ")", ":", "\n", "        ", "if", "ann", "[", "'category_id'", "]", "!=", "catId", ":", "\n", "            ", "gt", ".", "dataset", "[", "'annotations'", "]", "[", "idx", "]", "[", "'ignore'", "]", "=", "1", "\n", "gt", ".", "dataset", "[", "'annotations'", "]", "[", "idx", "]", "[", "'iscrowd'", "]", "=", "1", "\n", "gt", ".", "dataset", "[", "'annotations'", "]", "[", "idx", "]", "[", "'category_id'", "]", "=", "catId", "\n", "", "", "cocoEval", "=", "COCOeval", "(", "gt", ",", "copy", ".", "deepcopy", "(", "dt", ")", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "cocoEval", ".", "params", ".", "maxDets", "=", "[", "100", "]", "\n", "cocoEval", ".", "params", ".", "iouThrs", "=", "[", "0.1", "]", "\n", "cocoEval", ".", "params", ".", "useCats", "=", "1", "\n", "if", "areas", ":", "\n", "        ", "cocoEval", ".", "params", ".", "areaRng", "=", "[", "[", "0", "**", "2", ",", "areas", "[", "2", "]", "]", ",", "[", "0", "**", "2", ",", "areas", "[", "0", "]", "]", ",", "\n", "[", "areas", "[", "0", "]", ",", "areas", "[", "1", "]", "]", ",", "[", "areas", "[", "1", "]", ",", "areas", "[", "2", "]", "]", "]", "\n", "", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "ps_allcategory", "=", "cocoEval", ".", "eval", "[", "'precision'", "]", "[", "0", ",", ":", ",", "k", ",", ":", ",", ":", "]", "\n", "ps_", "[", "'ps_allcategory'", "]", "=", "ps_allcategory", "\n", "return", "k", ",", "ps_", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.analyze_results": [[234, 305], ["os.path.dirname", "pycocotools.coco.COCO", "pycocotools.coco.COCO.loadRes", "pycocotools.coco.COCO.getImgIds", "os.path.exists", "print", "os.makedirs", "os.path.dirname", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "numpy.vstack", "pycocotools.coco.COCO.getCatIds", "enumerate", "coco_error_analysis.makeplot", "len", "os.path.exists", "print", "os.makedirs", "copy.deepcopy", "copy.deepcopy", "multiprocessing.Pool", "pool.starmap", "print", "coco_error_analysis.makeplot", "coco_error_analysis.makebarplot", "coco_error_analysis.make_gt_area_group_numbers_plot", "coco_error_analysis.make_gt_area_histogram_plot", "numpy.zeros", "pycocotools.coco.COCO.loadCats", "coco_error_analysis.makebarplot", "enumerate"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.makeplot", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.makeplot", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.makebarplot", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.make_gt_area_group_numbers_plot", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.make_gt_area_histogram_plot", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.makebarplot"], ["", "def", "analyze_results", "(", "res_file", ",", "\n", "ann_file", ",", "\n", "res_types", ",", "\n", "out_dir", ",", "\n", "extraplots", "=", "None", ",", "\n", "areas", "=", "None", ")", ":", "\n", "    ", "for", "res_type", "in", "res_types", ":", "\n", "        ", "assert", "res_type", "in", "[", "'bbox'", ",", "'segm'", "]", "\n", "", "if", "areas", ":", "\n", "        ", "assert", "len", "(", "areas", ")", "==", "3", ",", "'3 integers should be specified as areas, \\\n            representing 3 area regions'", "\n", "\n", "", "directory", "=", "os", ".", "path", ".", "dirname", "(", "out_dir", "+", "'/'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "print", "(", "f'-------------create {out_dir}-----------------'", ")", "\n", "os", ".", "makedirs", "(", "directory", ")", "\n", "\n", "", "cocoGt", "=", "COCO", "(", "ann_file", ")", "\n", "cocoDt", "=", "cocoGt", ".", "loadRes", "(", "res_file", ")", "\n", "imgIds", "=", "cocoGt", ".", "getImgIds", "(", ")", "\n", "for", "res_type", "in", "res_types", ":", "\n", "        ", "res_out_dir", "=", "out_dir", "+", "'/'", "+", "res_type", "+", "'/'", "\n", "res_directory", "=", "os", ".", "path", ".", "dirname", "(", "res_out_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "res_directory", ")", ":", "\n", "            ", "print", "(", "f'-------------create {res_out_dir}-----------------'", ")", "\n", "os", ".", "makedirs", "(", "res_directory", ")", "\n", "", "iou_type", "=", "res_type", "\n", "cocoEval", "=", "COCOeval", "(", "\n", "copy", ".", "deepcopy", "(", "cocoGt", ")", ",", "copy", ".", "deepcopy", "(", "cocoDt", ")", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "cocoEval", ".", "params", ".", "iouThrs", "=", "[", "0.75", ",", "0.5", ",", "0.1", "]", "\n", "cocoEval", ".", "params", ".", "maxDets", "=", "[", "100", "]", "\n", "if", "areas", ":", "\n", "            ", "cocoEval", ".", "params", ".", "areaRng", "=", "[", "[", "0", "**", "2", ",", "areas", "[", "2", "]", "]", ",", "[", "0", "**", "2", ",", "areas", "[", "0", "]", "]", ",", "\n", "[", "areas", "[", "0", "]", ",", "areas", "[", "1", "]", "]", ",", "\n", "[", "areas", "[", "1", "]", ",", "areas", "[", "2", "]", "]", "]", "\n", "", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "ps", "=", "cocoEval", ".", "eval", "[", "'precision'", "]", "\n", "ps", "=", "np", ".", "vstack", "(", "[", "ps", ",", "np", ".", "zeros", "(", "(", "4", ",", "*", "ps", ".", "shape", "[", "1", ":", "]", ")", ")", "]", ")", "\n", "catIds", "=", "cocoGt", ".", "getCatIds", "(", ")", "\n", "recThrs", "=", "cocoEval", ".", "params", ".", "recThrs", "\n", "with", "Pool", "(", "processes", "=", "48", ")", "as", "pool", ":", "\n", "            ", "args", "=", "[", "(", "k", ",", "cocoDt", ",", "cocoGt", ",", "catId", ",", "iou_type", ",", "areas", ")", "\n", "for", "k", ",", "catId", "in", "enumerate", "(", "catIds", ")", "]", "\n", "analyze_results", "=", "pool", ".", "starmap", "(", "analyze_individual_category", ",", "args", ")", "\n", "", "for", "k", ",", "catId", "in", "enumerate", "(", "catIds", ")", ":", "\n", "            ", "nm", "=", "cocoGt", ".", "loadCats", "(", "catId", ")", "[", "0", "]", "\n", "print", "(", "f'--------------saving {k + 1}-{nm[\"name\"]}---------------'", ")", "\n", "analyze_result", "=", "analyze_results", "[", "k", "]", "\n", "assert", "k", "==", "analyze_result", "[", "0", "]", "\n", "ps_supercategory", "=", "analyze_result", "[", "1", "]", "[", "'ps_supercategory'", "]", "\n", "ps_allcategory", "=", "analyze_result", "[", "1", "]", "[", "'ps_allcategory'", "]", "\n", "# compute precision but ignore superclass confusion", "\n", "ps", "[", "3", ",", ":", ",", "k", ",", ":", ",", ":", "]", "=", "ps_supercategory", "\n", "# compute precision but ignore any class confusion", "\n", "ps", "[", "4", ",", ":", ",", "k", ",", ":", ",", ":", "]", "=", "ps_allcategory", "\n", "# fill in background and false negative errors and plot", "\n", "ps", "[", "ps", "==", "-", "1", "]", "=", "0", "\n", "ps", "[", "5", ",", ":", ",", "k", ",", ":", ",", ":", "]", "=", "ps", "[", "4", ",", ":", ",", "k", ",", ":", ",", ":", "]", ">", "0", "\n", "ps", "[", "6", ",", ":", ",", "k", ",", ":", ",", ":", "]", "=", "1.0", "\n", "makeplot", "(", "recThrs", ",", "ps", "[", ":", ",", ":", ",", "k", "]", ",", "res_out_dir", ",", "nm", "[", "'name'", "]", ",", "iou_type", ")", "\n", "if", "extraplots", ":", "\n", "                ", "makebarplot", "(", "recThrs", ",", "ps", "[", ":", ",", ":", ",", "k", "]", ",", "res_out_dir", ",", "nm", "[", "'name'", "]", ",", "\n", "iou_type", ")", "\n", "", "", "makeplot", "(", "recThrs", ",", "ps", ",", "res_out_dir", ",", "'allclass'", ",", "iou_type", ")", "\n", "if", "extraplots", ":", "\n", "            ", "makebarplot", "(", "recThrs", ",", "ps", ",", "res_out_dir", ",", "'allclass'", ",", "iou_type", ")", "\n", "make_gt_area_group_numbers_plot", "(", "\n", "cocoEval", "=", "cocoEval", ",", "outDir", "=", "res_out_dir", ",", "verbose", "=", "True", ")", "\n", "make_gt_area_histogram_plot", "(", "cocoEval", "=", "cocoEval", ",", "outDir", "=", "res_out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.main": [[307, 335], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "coco_error_analysis.analyze_results"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.coco_error_analysis.analyze_results"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'COCO Error Analysis Tool'", ")", "\n", "parser", ".", "add_argument", "(", "'result'", ",", "help", "=", "'result file (json format) path'", ")", "\n", "parser", ".", "add_argument", "(", "'out_dir'", ",", "help", "=", "'dir to save analyze result images'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--ann'", ",", "\n", "default", "=", "'data/coco/annotations/instances_val2017.json'", ",", "\n", "help", "=", "'annotation file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--types'", ",", "type", "=", "str", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "'bbox'", "]", ",", "help", "=", "'result types'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--extraplots'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'export extra bar/stat plots'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--areas'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "1024", ",", "9216", ",", "10000000000", "]", ",", "\n", "help", "=", "'area regions'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "analyze_results", "(", "\n", "args", ".", "result", ",", "\n", "args", ".", "ann", ",", "\n", "args", ".", "types", ",", "\n", "out_dir", "=", "args", ".", "out_dir", ",", "\n", "extraplots", "=", "args", ".", "extraplots", ",", "\n", "areas", "=", "args", ".", "areas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.get_flops.parse_args": [[14, 35], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--shape'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "1280", ",", "800", "]", ",", "\n", "help", "=", "'input image size'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.get_flops.main": [[37, 76], ["get_flops.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "mmdet.models.build_detector", "torch.cuda.is_available", "mmdet.models.build_detector.eval", "hasattr", "get_model_complexity_info", "print", "print", "len", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmdet.models.build_detector.cuda", "NotImplementedError", "len", "ValueError", "Config.fromfile.get", "Config.fromfile.get", "tuple"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "if", "len", "(", "args", ".", "shape", ")", "==", "1", ":", "\n", "        ", "input_shape", "=", "(", "3", ",", "args", ".", "shape", "[", "0", "]", ",", "args", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "len", "(", "args", ".", "shape", ")", "==", "2", ":", "\n", "        ", "input_shape", "=", "(", "3", ",", ")", "+", "tuple", "(", "args", ".", "shape", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid input shape'", ")", "\n", "\n", "", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "\n", "", "model", "=", "build_detector", "(", "\n", "cfg", ".", "model", ",", "\n", "train_cfg", "=", "cfg", ".", "get", "(", "'train_cfg'", ")", ",", "\n", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'forward_dummy'", ")", ":", "\n", "        ", "model", ".", "forward", "=", "model", ".", "forward_dummy", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'FLOPs counter is currently not currently supported with {}'", ".", "\n", "format", "(", "model", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "flops", ",", "params", "=", "get_model_complexity_info", "(", "model", ",", "input_shape", ")", "\n", "split_line", "=", "'='", "*", "30", "\n", "print", "(", "f'{split_line}\\nInput shape: {input_shape}\\n'", "\n", "f'Flops: {flops}\\nParams: {params}\\n{split_line}'", ")", "\n", "print", "(", "'!!!Please be cautious if you use the results in papers. '", "\n", "'You may need to check if all ops are supported and verify that the '", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_logs.cal_train_time": [[10, 31], ["enumerate", "print", "log_dict.keys", "numpy.array", "np.array.mean", "all_times.mean.argmax", "all_times.mean.argmin", "all_times.mean.std", "print", "print", "print", "print", "print", "np.array.append", "np.array.append", "numpy.mean"], "function", ["None"], ["def", "cal_train_time", "(", "log_dicts", ",", "args", ")", ":", "\n", "    ", "for", "i", ",", "log_dict", "in", "enumerate", "(", "log_dicts", ")", ":", "\n", "        ", "print", "(", "f'{\"-\" * 5}Analyze train time of {args.json_logs[i]}{\"-\" * 5}'", ")", "\n", "all_times", "=", "[", "]", "\n", "for", "epoch", "in", "log_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "args", ".", "include_outliers", ":", "\n", "                ", "all_times", ".", "append", "(", "log_dict", "[", "epoch", "]", "[", "'time'", "]", ")", "\n", "", "else", ":", "\n", "                ", "all_times", ".", "append", "(", "log_dict", "[", "epoch", "]", "[", "'time'", "]", "[", "1", ":", "]", ")", "\n", "", "", "all_times", "=", "np", ".", "array", "(", "all_times", ")", "\n", "epoch_ave_time", "=", "all_times", ".", "mean", "(", "-", "1", ")", "\n", "slowest_epoch", "=", "epoch_ave_time", ".", "argmax", "(", ")", "\n", "fastest_epoch", "=", "epoch_ave_time", ".", "argmin", "(", ")", "\n", "std_over_epoch", "=", "epoch_ave_time", ".", "std", "(", ")", "\n", "print", "(", "f'slowest epoch {slowest_epoch + 1}, '", "\n", "f'average time is {epoch_ave_time[slowest_epoch]:.4f}'", ")", "\n", "print", "(", "f'fastest epoch {fastest_epoch + 1}, '", "\n", "f'average time is {epoch_ave_time[fastest_epoch]:.4f}'", ")", "\n", "print", "(", "f'time std over epochs is {std_over_epoch:.4f}'", ")", "\n", "print", "(", "f'average iter time: {np.mean(all_times):.4f} s/iter'", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_logs.plot_curve": [[33, 90], ["seaborn.set_style", "len", "enumerate", "matplotlib.switch_backend", "len", "list", "enumerate", "matplotlib.show", "print", "matplotlib.savefig", "matplotlib.cla", "len", "len", "log_dict.keys", "print", "matplotlib.legend", "matplotlib.title", "legend.append", "KeyError", "numpy.arange", "matplotlib.gca", "plt.gca.set_xticks", "matplotlib.xlabel", "matplotlib.plot", "numpy.concatenate", "numpy.concatenate", "matplotlib.xlabel", "matplotlib.plot", "np.concatenate.append", "np.concatenate.append", "max", "numpy.array", "numpy.array", "len"], "function", ["None"], ["", "", "def", "plot_curve", "(", "log_dicts", ",", "args", ")", ":", "\n", "    ", "if", "args", ".", "backend", "is", "not", "None", ":", "\n", "        ", "plt", ".", "switch_backend", "(", "args", ".", "backend", ")", "\n", "", "sns", ".", "set_style", "(", "args", ".", "style", ")", "\n", "# if legend is None, use {filename}_{key} as legend", "\n", "legend", "=", "args", ".", "legend", "\n", "if", "legend", "is", "None", ":", "\n", "        ", "legend", "=", "[", "]", "\n", "for", "json_log", "in", "args", ".", "json_logs", ":", "\n", "            ", "for", "metric", "in", "args", ".", "keys", ":", "\n", "                ", "legend", ".", "append", "(", "f'{json_log}_{metric}'", ")", "\n", "", "", "", "assert", "len", "(", "legend", ")", "==", "(", "len", "(", "args", ".", "json_logs", ")", "*", "len", "(", "args", ".", "keys", ")", ")", "\n", "metrics", "=", "args", ".", "keys", "\n", "\n", "num_metrics", "=", "len", "(", "metrics", ")", "\n", "for", "i", ",", "log_dict", "in", "enumerate", "(", "log_dicts", ")", ":", "\n", "        ", "epochs", "=", "list", "(", "log_dict", ".", "keys", "(", ")", ")", "\n", "for", "j", ",", "metric", "in", "enumerate", "(", "metrics", ")", ":", "\n", "            ", "print", "(", "f'plot curve of {args.json_logs[i]}, metric is {metric}'", ")", "\n", "if", "metric", "not", "in", "log_dict", "[", "epochs", "[", "0", "]", "]", ":", "\n", "                ", "raise", "KeyError", "(", "\n", "f'{args.json_logs[i]} does not contain metric {metric}'", ")", "\n", "\n", "", "if", "'mAP'", "in", "metric", ":", "\n", "                ", "xs", "=", "np", ".", "arange", "(", "1", ",", "max", "(", "epochs", ")", "+", "1", ")", "\n", "ys", "=", "[", "]", "\n", "for", "epoch", "in", "epochs", ":", "\n", "                    ", "ys", "+=", "log_dict", "[", "epoch", "]", "[", "metric", "]", "\n", "", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_xticks", "(", "xs", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "plot", "(", "xs", ",", "ys", ",", "label", "=", "legend", "[", "i", "*", "num_metrics", "+", "j", "]", ",", "marker", "=", "'o'", ")", "\n", "", "else", ":", "\n", "                ", "xs", "=", "[", "]", "\n", "ys", "=", "[", "]", "\n", "num_iters_per_epoch", "=", "log_dict", "[", "epochs", "[", "0", "]", "]", "[", "'iter'", "]", "[", "-", "1", "]", "\n", "for", "epoch", "in", "epochs", ":", "\n", "                    ", "iters", "=", "log_dict", "[", "epoch", "]", "[", "'iter'", "]", "\n", "if", "log_dict", "[", "epoch", "]", "[", "'mode'", "]", "[", "-", "1", "]", "==", "'val'", ":", "\n", "                        ", "iters", "=", "iters", "[", ":", "-", "1", "]", "\n", "", "xs", ".", "append", "(", "\n", "np", ".", "array", "(", "iters", ")", "+", "(", "epoch", "-", "1", ")", "*", "num_iters_per_epoch", ")", "\n", "ys", ".", "append", "(", "np", ".", "array", "(", "log_dict", "[", "epoch", "]", "[", "metric", "]", "[", ":", "len", "(", "iters", ")", "]", ")", ")", "\n", "", "xs", "=", "np", ".", "concatenate", "(", "xs", ")", "\n", "ys", "=", "np", ".", "concatenate", "(", "ys", ")", "\n", "plt", ".", "xlabel", "(", "'iter'", ")", "\n", "plt", ".", "plot", "(", "\n", "xs", ",", "ys", ",", "label", "=", "legend", "[", "i", "*", "num_metrics", "+", "j", "]", ",", "linewidth", "=", "0.5", ")", "\n", "", "plt", ".", "legend", "(", ")", "\n", "", "if", "args", ".", "title", "is", "not", "None", ":", "\n", "            ", "plt", ".", "title", "(", "args", ".", "title", ")", "\n", "", "", "if", "args", ".", "out", "is", "None", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'save curve to: {args.out}'", ")", "\n", "plt", ".", "savefig", "(", "args", ".", "out", ")", "\n", "plt", ".", "cla", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_logs.add_plot_parser": [[92, 118], ["subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument"], "function", ["None"], ["", "", "def", "add_plot_parser", "(", "subparsers", ")", ":", "\n", "    ", "parser_plt", "=", "subparsers", ".", "add_parser", "(", "\n", "'plot_curve'", ",", "help", "=", "'parser for plotting curves'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'json_logs'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'path of train log in json format'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'--keys'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "'bbox_mAP'", "]", ",", "\n", "help", "=", "'the metric that you want to plot'", ")", "\n", "parser_plt", ".", "add_argument", "(", "'--title'", ",", "type", "=", "str", ",", "help", "=", "'title of figure'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'--legend'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'legend of each plot'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'--backend'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'backend of plt'", ")", "\n", "parser_plt", ".", "add_argument", "(", "\n", "'--style'", ",", "type", "=", "str", ",", "default", "=", "'dark'", ",", "help", "=", "'style of plt'", ")", "\n", "parser_plt", ".", "add_argument", "(", "'--out'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_logs.add_time_parser": [[120, 133], ["subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument"], "function", ["None"], ["", "def", "add_time_parser", "(", "subparsers", ")", ":", "\n", "    ", "parser_time", "=", "subparsers", ".", "add_parser", "(", "\n", "'cal_train_time'", ",", "\n", "help", "=", "'parser for computing the average time per training iteration'", ")", "\n", "parser_time", ".", "add_argument", "(", "\n", "'json_logs'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'path of train log in json format'", ")", "\n", "parser_time", ".", "add_argument", "(", "\n", "'--include-outliers'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'include the first value of every epoch when computing '", "\n", "'the average time'", ")", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_logs.parse_args": [[136, 144], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "analyze_logs.add_plot_parser", "analyze_logs.add_time_parser", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_logs.add_plot_parser", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_logs.add_time_parser", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Analyze Json Log'", ")", "\n", "# currently only support plot curve and calculate average train time", "\n", "subparsers", "=", "parser", ".", "add_subparsers", "(", "dest", "=", "'task'", ",", "help", "=", "'task parser'", ")", "\n", "add_plot_parser", "(", "subparsers", ")", "\n", "add_time_parser", "(", "subparsers", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_logs.load_json_logs": [[146, 164], ["zip", "dict", "open", "json.loads", "json.loads.pop", "json.loads.items", "line.strip", "collections.defaultdict", "[].append"], "function", ["None"], ["", "def", "load_json_logs", "(", "json_logs", ")", ":", "\n", "# load and convert json_logs to log_dict, key is epoch, value is a sub dict", "\n", "# keys of sub dict is different metrics, e.g. memory, bbox_mAP", "\n", "# value of sub dict is a list of corresponding values of all iterations", "\n", "    ", "log_dicts", "=", "[", "dict", "(", ")", "for", "_", "in", "json_logs", "]", "\n", "for", "json_log", ",", "log_dict", "in", "zip", "(", "json_logs", ",", "log_dicts", ")", ":", "\n", "        ", "with", "open", "(", "json_log", ",", "'r'", ")", "as", "log_file", ":", "\n", "            ", "for", "line", "in", "log_file", ":", "\n", "                ", "log", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", "\n", "# skip lines without `epoch` field", "\n", "if", "'epoch'", "not", "in", "log", ":", "\n", "                    ", "continue", "\n", "", "epoch", "=", "log", ".", "pop", "(", "'epoch'", ")", "\n", "if", "epoch", "not", "in", "log_dict", ":", "\n", "                    ", "log_dict", "[", "epoch", "]", "=", "defaultdict", "(", "list", ")", "\n", "", "for", "k", ",", "v", "in", "log", ".", "items", "(", ")", ":", "\n", "                    ", "log_dict", "[", "epoch", "]", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "", "", "", "", "return", "log_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_logs.main": [[166, 176], ["analyze_logs.parse_args", "analyze_logs.load_json_logs", "json_log.endswith", "eval"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_logs.load_json_logs"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "json_logs", "=", "args", ".", "json_logs", "\n", "for", "json_log", "in", "json_logs", ":", "\n", "        ", "assert", "json_log", ".", "endswith", "(", "'.json'", ")", "\n", "\n", "", "log_dicts", "=", "load_json_logs", "(", "json_logs", ")", "\n", "\n", "eval", "(", "args", ".", "task", ")", "(", "log_dicts", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.print_coco_results": [[8, 32], ["numpy.zeros", "robustness_eval.print_coco_results._print"], "function", ["None"], ["def", "print_coco_results", "(", "results", ")", ":", "\n", "\n", "    ", "def", "_print", "(", "result", ",", "ap", "=", "1", ",", "iouThr", "=", "None", ",", "areaRng", "=", "'all'", ",", "maxDets", "=", "100", ")", ":", "\n", "        ", "titleStr", "=", "'Average Precision'", "if", "ap", "==", "1", "else", "'Average Recall'", "\n", "typeStr", "=", "'(AP)'", "if", "ap", "==", "1", "else", "'(AR)'", "\n", "iouStr", "=", "'0.50:0.95'", "if", "iouThr", "is", "None", "else", "f'{iouThr:0.2f}'", "\n", "iStr", "=", "f' {titleStr:<18} {typeStr} @[ IoU={iouStr:<9} | '", "\n", "iStr", "+=", "f'area={areaRng:>6s} | maxDets={maxDets:>3d} ] = {result:0.3f}'", "\n", "print", "(", "iStr", ")", "\n", "\n", "", "stats", "=", "np", ".", "zeros", "(", "(", "12", ",", ")", ")", "\n", "stats", "[", "0", "]", "=", "_print", "(", "results", "[", "0", "]", ",", "1", ")", "\n", "stats", "[", "1", "]", "=", "_print", "(", "results", "[", "1", "]", ",", "1", ",", "iouThr", "=", ".5", ")", "\n", "stats", "[", "2", "]", "=", "_print", "(", "results", "[", "2", "]", ",", "1", ",", "iouThr", "=", ".75", ")", "\n", "stats", "[", "3", "]", "=", "_print", "(", "results", "[", "3", "]", ",", "1", ",", "areaRng", "=", "'small'", ")", "\n", "stats", "[", "4", "]", "=", "_print", "(", "results", "[", "4", "]", ",", "1", ",", "areaRng", "=", "'medium'", ")", "\n", "stats", "[", "5", "]", "=", "_print", "(", "results", "[", "5", "]", ",", "1", ",", "areaRng", "=", "'large'", ")", "\n", "stats", "[", "6", "]", "=", "_print", "(", "results", "[", "6", "]", ",", "0", ",", "maxDets", "=", "1", ")", "\n", "stats", "[", "7", "]", "=", "_print", "(", "results", "[", "7", "]", ",", "0", ",", "maxDets", "=", "10", ")", "\n", "stats", "[", "8", "]", "=", "_print", "(", "results", "[", "8", "]", ",", "0", ")", "\n", "stats", "[", "9", "]", "=", "_print", "(", "results", "[", "9", "]", ",", "0", ",", "areaRng", "=", "'small'", ")", "\n", "stats", "[", "10", "]", "=", "_print", "(", "results", "[", "10", "]", ",", "0", ",", "areaRng", "=", "'medium'", ")", "\n", "stats", "[", "11", "]", "=", "_print", "(", "results", "[", "11", "]", ",", "0", ",", "areaRng", "=", "'large'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.get_coco_style_results": [[34, 109], ["mmcv.load", "len", "numpy.zeros", "enumerate", "print", "isinstance", "isinstance", "list", "numpy.mean", "numpy.mean", "mmcv.load.keys", "len", "enumerate", "print", "robustness_eval.print_coco_results", "print", "robustness_eval.print_coco_results", "print", "robustness_eval.print_coco_results", "print", "enumerate", "print", "enumerate", "print", "enumerate", "os.basename", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.print_coco_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.print_coco_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.print_coco_results"], ["", "def", "get_coco_style_results", "(", "filename", ",", "\n", "task", "=", "'bbox'", ",", "\n", "metric", "=", "None", ",", "\n", "prints", "=", "'mPC'", ",", "\n", "aggregate", "=", "'benchmark'", ")", ":", "\n", "\n", "    ", "assert", "aggregate", "in", "[", "'benchmark'", ",", "'all'", "]", "\n", "\n", "if", "prints", "==", "'all'", ":", "\n", "        ", "prints", "=", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", "\n", "", "elif", "isinstance", "(", "prints", ",", "str", ")", ":", "\n", "        ", "prints", "=", "[", "prints", "]", "\n", "", "for", "p", "in", "prints", ":", "\n", "        ", "assert", "p", "in", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", "\n", "\n", "", "if", "metric", "is", "None", ":", "\n", "        ", "metrics", "=", "[", "\n", "'AP'", ",", "'AP50'", ",", "'AP75'", ",", "'APs'", ",", "'APm'", ",", "'APl'", ",", "'AR1'", ",", "'AR10'", ",", "'AR100'", ",", "\n", "'ARs'", ",", "'ARm'", ",", "'ARl'", "\n", "]", "\n", "", "elif", "isinstance", "(", "metric", ",", "list", ")", ":", "\n", "        ", "metrics", "=", "metric", "\n", "", "else", ":", "\n", "        ", "metrics", "=", "[", "metric", "]", "\n", "\n", "", "for", "metric_name", "in", "metrics", ":", "\n", "        ", "assert", "metric_name", "in", "[", "\n", "'AP'", ",", "'AP50'", ",", "'AP75'", ",", "'APs'", ",", "'APm'", ",", "'APl'", ",", "'AR1'", ",", "'AR10'", ",", "'AR100'", ",", "\n", "'ARs'", ",", "'ARm'", ",", "'ARl'", "\n", "]", "\n", "\n", "", "eval_output", "=", "mmcv", ".", "load", "(", "filename", ")", "\n", "\n", "num_distortions", "=", "len", "(", "list", "(", "eval_output", ".", "keys", "(", ")", ")", ")", "\n", "results", "=", "np", ".", "zeros", "(", "(", "num_distortions", ",", "6", ",", "len", "(", "metrics", ")", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "corr_i", ",", "distortion", "in", "enumerate", "(", "eval_output", ")", ":", "\n", "        ", "for", "severity", "in", "eval_output", "[", "distortion", "]", ":", "\n", "            ", "for", "metric_j", ",", "metric_name", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "mAP", "=", "eval_output", "[", "distortion", "]", "[", "severity", "]", "[", "task", "]", "[", "metric_name", "]", "\n", "results", "[", "corr_i", ",", "severity", ",", "metric_j", "]", "=", "mAP", "\n", "\n", "", "", "", "P", "=", "results", "[", "0", ",", "0", ",", ":", "]", "\n", "if", "aggregate", "==", "'benchmark'", ":", "\n", "        ", "mPC", "=", "np", ".", "mean", "(", "results", "[", ":", "15", ",", "1", ":", ",", ":", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "mPC", "=", "np", ".", "mean", "(", "results", "[", ":", ",", "1", ":", ",", ":", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "rPC", "=", "mPC", "/", "P", "\n", "\n", "print", "(", "f'\\nmodel: {osp.basename(filename)}'", ")", "\n", "if", "metric", "is", "None", ":", "\n", "        ", "if", "'P'", "in", "prints", ":", "\n", "            ", "print", "(", "f'Performance on Clean Data [P] ({task})'", ")", "\n", "print_coco_results", "(", "P", ")", "\n", "", "if", "'mPC'", "in", "prints", ":", "\n", "            ", "print", "(", "f'Mean Performance under Corruption [mPC] ({task})'", ")", "\n", "print_coco_results", "(", "mPC", ")", "\n", "", "if", "'rPC'", "in", "prints", ":", "\n", "            ", "print", "(", "f'Relative Performance under Corruption [rPC] ({task})'", ")", "\n", "print_coco_results", "(", "rPC", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "'P'", "in", "prints", ":", "\n", "            ", "print", "(", "f'Performance on Clean Data [P] ({task})'", ")", "\n", "for", "metric_i", ",", "metric_name", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "print", "(", "f'{metric_name:5} =  {P[metric_i]:0.3f}'", ")", "\n", "", "", "if", "'mPC'", "in", "prints", ":", "\n", "            ", "print", "(", "f'Mean Performance under Corruption [mPC] ({task})'", ")", "\n", "for", "metric_i", ",", "metric_name", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "print", "(", "f'{metric_name:5} =  {mPC[metric_i]:0.3f}'", ")", "\n", "", "", "if", "'rPC'", "in", "prints", ":", "\n", "            ", "print", "(", "f'Relative Performance under Corruption [rPC] ({task})'", ")", "\n", "for", "metric_i", ",", "metric_name", "in", "enumerate", "(", "metrics", ")", ":", "\n", "                ", "print", "(", "f'{metric_name:5} => {rPC[metric_i] * 100:0.1f} %'", ")", "\n", "\n", "", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.get_voc_style_results": [[111, 153], ["mmcv.load", "len", "numpy.zeros", "enumerate", "print", "numpy.mean", "isinstance", "list", "numpy.mean", "numpy.mean", "print", "print", "print", "mmcv.load.keys", "os.basename", "range", "numpy.mean", "numpy.mean", "len", "numpy.mean"], "function", ["None"], ["", "def", "get_voc_style_results", "(", "filename", ",", "prints", "=", "'mPC'", ",", "aggregate", "=", "'benchmark'", ")", ":", "\n", "\n", "    ", "assert", "aggregate", "in", "[", "'benchmark'", ",", "'all'", "]", "\n", "\n", "if", "prints", "==", "'all'", ":", "\n", "        ", "prints", "=", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", "\n", "", "elif", "isinstance", "(", "prints", ",", "str", ")", ":", "\n", "        ", "prints", "=", "[", "prints", "]", "\n", "", "for", "p", "in", "prints", ":", "\n", "        ", "assert", "p", "in", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", "\n", "\n", "", "eval_output", "=", "mmcv", ".", "load", "(", "filename", ")", "\n", "\n", "num_distortions", "=", "len", "(", "list", "(", "eval_output", ".", "keys", "(", ")", ")", ")", "\n", "results", "=", "np", ".", "zeros", "(", "(", "num_distortions", ",", "6", ",", "20", ")", ",", "dtype", "=", "'float32'", ")", "\n", "\n", "for", "i", ",", "distortion", "in", "enumerate", "(", "eval_output", ")", ":", "\n", "        ", "for", "severity", "in", "eval_output", "[", "distortion", "]", ":", "\n", "            ", "mAP", "=", "[", "\n", "eval_output", "[", "distortion", "]", "[", "severity", "]", "[", "j", "]", "[", "'ap'", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "eval_output", "[", "distortion", "]", "[", "severity", "]", ")", ")", "\n", "]", "\n", "results", "[", "i", ",", "severity", ",", ":", "]", "=", "mAP", "\n", "\n", "", "", "P", "=", "results", "[", "0", ",", "0", ",", ":", "]", "\n", "if", "aggregate", "==", "'benchmark'", ":", "\n", "        ", "mPC", "=", "np", ".", "mean", "(", "results", "[", ":", "15", ",", "1", ":", ",", ":", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "mPC", "=", "np", ".", "mean", "(", "results", "[", ":", ",", "1", ":", ",", ":", "]", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "", "rPC", "=", "mPC", "/", "P", "\n", "\n", "print", "(", "f'\\nmodel: {osp.basename(filename)}'", ")", "\n", "if", "'P'", "in", "prints", ":", "\n", "        ", "print", "(", "f'Performance on Clean Data [P] in AP50 = {np.mean(P):0.3f}'", ")", "\n", "", "if", "'mPC'", "in", "prints", ":", "\n", "        ", "print", "(", "'Mean Performance under Corruption [mPC] in AP50 = '", "\n", "f'{np.mean(mPC):0.3f}'", ")", "\n", "", "if", "'rPC'", "in", "prints", ":", "\n", "        ", "print", "(", "'Relative Performance under Corruption [rPC] in % = '", "\n", "f'{np.mean(rPC) * 100:0.1f}'", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "results", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.get_results": [[155, 181], ["robustness_eval.get_coco_style_results", "robustness_eval.get_voc_style_results", "print", "print", "print", "print"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.get_coco_style_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.get_voc_style_results"], ["", "def", "get_results", "(", "filename", ",", "\n", "dataset", "=", "'coco'", ",", "\n", "task", "=", "'bbox'", ",", "\n", "metric", "=", "None", ",", "\n", "prints", "=", "'mPC'", ",", "\n", "aggregate", "=", "'benchmark'", ")", ":", "\n", "    ", "assert", "dataset", "in", "[", "'coco'", ",", "'voc'", ",", "'cityscapes'", "]", "\n", "\n", "if", "dataset", "in", "[", "'coco'", ",", "'cityscapes'", "]", ":", "\n", "        ", "results", "=", "get_coco_style_results", "(", "\n", "filename", ",", "\n", "task", "=", "task", ",", "\n", "metric", "=", "metric", ",", "\n", "prints", "=", "prints", ",", "\n", "aggregate", "=", "aggregate", ")", "\n", "", "elif", "dataset", "==", "'voc'", ":", "\n", "        ", "if", "task", "!=", "'bbox'", ":", "\n", "            ", "print", "(", "'Only bbox analysis is supported for Pascal VOC'", ")", "\n", "print", "(", "'Will report bbox results\\n'", ")", "\n", "", "if", "metric", "not", "in", "[", "None", ",", "[", "'AP'", "]", ",", "[", "'AP50'", "]", "]", ":", "\n", "            ", "print", "(", "'Only the AP50 metric is supported for Pascal VOC'", ")", "\n", "print", "(", "'Will report AP50 metric\\n'", ")", "\n", "", "results", "=", "get_voc_style_results", "(", "\n", "filename", ",", "prints", "=", "prints", ",", "aggregate", "=", "aggregate", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.get_distortions_from_file": [[183, 188], ["mmcv.load", "robustness_eval.get_distortions_from_results"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.get_distortions_from_results"], ["", "def", "get_distortions_from_file", "(", "filename", ")", ":", "\n", "\n", "    ", "eval_output", "=", "mmcv", ".", "load", "(", "filename", ")", "\n", "\n", "return", "get_distortions_from_results", "(", "eval_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.get_distortions_from_results": [[190, 195], ["enumerate", "distortions.append", "distortion.replace"], "function", ["None"], ["", "def", "get_distortions_from_results", "(", "eval_output", ")", ":", "\n", "    ", "distortions", "=", "[", "]", "\n", "for", "i", ",", "distortion", "in", "enumerate", "(", "eval_output", ")", ":", "\n", "        ", "distortions", ".", "append", "(", "distortion", ".", "replace", "(", "'_'", ",", "' '", ")", ")", "\n", "", "return", "distortions", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.main": [[197, 247], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "robustness_eval.get_results"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.get_results"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Corruption Result Analysis'", ")", "\n", "parser", ".", "add_argument", "(", "'filename'", ",", "help", "=", "'result file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--dataset'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'coco'", ",", "'voc'", ",", "'cityscapes'", "]", ",", "\n", "default", "=", "'coco'", ",", "\n", "help", "=", "'dataset type'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--task'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'bbox'", ",", "'segm'", "]", ",", "\n", "default", "=", "[", "'bbox'", "]", ",", "\n", "help", "=", "'task to report'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--metric'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "\n", "None", ",", "'AP'", ",", "'AP50'", ",", "'AP75'", ",", "'APs'", ",", "'APm'", ",", "'APl'", ",", "'AR1'", ",", "'AR10'", ",", "\n", "'AR100'", ",", "'ARs'", ",", "'ARm'", ",", "'ARl'", "\n", "]", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'metric to report'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--prints'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", ",", "\n", "default", "=", "'mPC'", ",", "\n", "help", "=", "'corruption benchmark metric to print'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--aggregate'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'all'", ",", "'benchmark'", "]", ",", "\n", "default", "=", "'benchmark'", ",", "\n", "help", "=", "'aggregate all results or only those \\\n        for benchmark corruptions'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "for", "task", "in", "args", ".", "task", ":", "\n", "        ", "get_results", "(", "\n", "args", ".", "filename", ",", "\n", "dataset", "=", "args", ".", "dataset", ",", "\n", "task", "=", "task", ",", "\n", "metric", "=", "args", ".", "metric", ",", "\n", "prints", "=", "args", ".", "prints", ",", "\n", "aggregate", "=", "args", ".", "aggregate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_results.ResultVisualizer.__init__": [[58, 62], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "show", "=", "False", ",", "wait_time", "=", "0", ",", "score_thr", "=", "0", ")", ":", "\n", "        ", "self", ".", "show", "=", "show", "\n", "self", ".", "wait_time", "=", "wait_time", "\n", "self", ".", "score_thr", "=", "score_thr", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_results.ResultVisualizer._save_image_gts_results": [[63, 88], ["mmcv.mkdir_or_exist", "dataset.prepare_train_img", "os.splitext", "os.join", "mmdet.core.visualization.imshow_gt_det_bboxes", "os.join", "os.basename", "str", "round"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.prepare_train_img", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_gt_det_bboxes"], ["", "def", "_save_image_gts_results", "(", "self", ",", "dataset", ",", "results", ",", "mAPs", ",", "out_dir", "=", "None", ")", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "out_dir", ")", "\n", "\n", "for", "mAP_info", "in", "mAPs", ":", "\n", "            ", "index", ",", "mAP", "=", "mAP_info", "\n", "data_info", "=", "dataset", ".", "prepare_train_img", "(", "index", ")", "\n", "\n", "# calc save file path", "\n", "filename", "=", "data_info", "[", "'filename'", "]", "\n", "if", "data_info", "[", "'img_prefix'", "]", "is", "not", "None", ":", "\n", "                ", "filename", "=", "osp", ".", "join", "(", "data_info", "[", "'img_prefix'", "]", ",", "filename", ")", "\n", "", "else", ":", "\n", "                ", "filename", "=", "data_info", "[", "'filename'", "]", "\n", "", "fname", ",", "name", "=", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "filename", ")", ")", "\n", "save_filename", "=", "fname", "+", "'_'", "+", "str", "(", "round", "(", "mAP", ",", "3", ")", ")", "+", "name", "\n", "out_file", "=", "osp", ".", "join", "(", "out_dir", ",", "save_filename", ")", "\n", "imshow_gt_det_bboxes", "(", "\n", "data_info", "[", "'img'", "]", ",", "\n", "data_info", ",", "\n", "results", "[", "index", "]", ",", "\n", "dataset", ".", "CLASSES", ",", "\n", "show", "=", "self", ".", "show", ",", "\n", "score_thr", "=", "self", ".", "score_thr", ",", "\n", "wait_time", "=", "self", ".", "wait_time", ",", "\n", "out_file", "=", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_results.ResultVisualizer.evaluate_and_show": [[89, 135], ["mmcv.ProgressBar", "enumerate", "list", "os.abspath", "os.abspath", "analyze_results.ResultVisualizer._save_image_gts_results", "analyze_results.ResultVisualizer._save_image_gts_results", "len", "callable", "len", "zip", "dataset.prepare_train_img", "eval_fn", "mmcv.ProgressBar.update", "sorted", "os.join", "os.join", "len", "list.items"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_results.ResultVisualizer._save_image_gts_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_results.ResultVisualizer._save_image_gts_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.prepare_train_img"], ["", "", "def", "evaluate_and_show", "(", "self", ",", "\n", "dataset", ",", "\n", "results", ",", "\n", "topk", "=", "20", ",", "\n", "show_dir", "=", "'work_dir'", ",", "\n", "eval_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"Evaluate and show results.\n\n        Args:\n            dataset (Dataset): A PyTorch dataset.\n            results (list): Det results from test results pkl file\n            topk (int): Number of the highest topk and\n                lowest topk after evaluation index sorting. Default: 20\n            show_dir (str, optional): The filename to write the image.\n                Default: 'work_dir'\n            eval_fn (callable, optional): Eval function, Default: None\n        \"\"\"", "\n", "\n", "assert", "topk", ">", "0", "\n", "if", "(", "topk", "*", "2", ")", ">", "len", "(", "dataset", ")", ":", "\n", "            ", "topk", "=", "len", "(", "dataset", ")", "//", "2", "\n", "\n", "", "if", "eval_fn", "is", "None", ":", "\n", "            ", "eval_fn", "=", "bbox_map_eval", "\n", "", "else", ":", "\n", "            ", "assert", "callable", "(", "eval_fn", ")", "\n", "\n", "", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "results", ")", ")", "\n", "_mAPs", "=", "{", "}", "\n", "for", "i", ",", "(", "result", ",", ")", "in", "enumerate", "(", "zip", "(", "results", ")", ")", ":", "\n", "# self.dataset[i] should not call directly", "\n", "# because there is a risk of mismatch", "\n", "            ", "data_info", "=", "dataset", ".", "prepare_train_img", "(", "i", ")", "\n", "mAP", "=", "eval_fn", "(", "result", ",", "data_info", "[", "'ann_info'", "]", ")", "\n", "_mAPs", "[", "i", "]", "=", "mAP", "\n", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# descending select topk image", "\n", "", "_mAPs", "=", "list", "(", "sorted", "(", "_mAPs", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ")", "\n", "good_mAPs", "=", "_mAPs", "[", "-", "topk", ":", "]", "\n", "bad_mAPs", "=", "_mAPs", "[", ":", "topk", "]", "\n", "\n", "good_dir", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "show_dir", ",", "'good'", ")", ")", "\n", "bad_dir", "=", "osp", ".", "abspath", "(", "osp", ".", "join", "(", "show_dir", ",", "'bad'", ")", ")", "\n", "self", ".", "_save_image_gts_results", "(", "dataset", ",", "results", ",", "good_mAPs", ",", "good_dir", ")", "\n", "self", ".", "_save_image_gts_results", "(", "dataset", ",", "results", ",", "bad_mAPs", ",", "bad_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_results.bbox_map_eval": [[13, 46], ["isinstance", "numpy.linspace", "mmdet.core.evaluation.eval_map", "mean_aps.append", "sum", "len", "int", "numpy.round"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.mean_ap.eval_map"], ["def", "bbox_map_eval", "(", "det_result", ",", "annotation", ")", ":", "\n", "    ", "\"\"\"Evaluate mAP of single image det result.\n\n    Args:\n        det_result (list[list]): [[cls1_det, cls2_det, ...], ...].\n            The outer list indicates images, and the inner list indicates\n            per-class detected bboxes.\n        annotation (dict): Ground truth annotations where keys of\n             annotations are:\n\n            - bboxes: numpy array of shape (n, 4)\n            - labels: numpy array of shape (n, )\n            - bboxes_ignore (optional): numpy array of shape (k, 4)\n            - labels_ignore (optional): numpy array of shape (k, )\n\n    Returns:\n        float: mAP\n    \"\"\"", "\n", "\n", "# use only bbox det result", "\n", "if", "isinstance", "(", "det_result", ",", "tuple", ")", ":", "\n", "        ", "bbox_det_result", "=", "[", "det_result", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "        ", "bbox_det_result", "=", "[", "det_result", "]", "\n", "# mAP", "\n", "", "iou_thrs", "=", "np", ".", "linspace", "(", "\n", ".5", ",", "0.95", ",", "int", "(", "np", ".", "round", "(", "(", "0.95", "-", ".5", ")", "/", ".05", ")", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "mean_aps", "=", "[", "]", "\n", "for", "thr", "in", "iou_thrs", ":", "\n", "        ", "mean_ap", ",", "_", "=", "eval_map", "(", "\n", "bbox_det_result", ",", "[", "annotation", "]", ",", "iou_thr", "=", "thr", ",", "logger", "=", "'silent'", ")", "\n", "mean_aps", ".", "append", "(", "mean_ap", ")", "\n", "", "return", "sum", "(", "mean_aps", ")", "/", "len", "(", "mean_aps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_results.parse_args": [[137, 174], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'MMDet eval image prediction result for each'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'prediction_path'", ",", "help", "=", "'prediction path where test pkl result'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'show_dir'", ",", "help", "=", "'directory where painted images will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--wait-time'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "'the interval of show (s), 0 is block'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--topk'", ",", "\n", "default", "=", "20", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'saved Number of the highest topk '", "\n", "'and lowest topk after index sorting'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-score-thr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "'score threshold (default: 0.)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_results.main": [[176, 199], ["analyze_results.parse_args", "mmcv.check_file_exist", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.data.test.pop", "mmdet.datasets.get_loading_pipeline", "mmdet.datasets.build_dataset", "mmcv.load", "analyze_results.ResultVisualizer", "analyze_results.ResultVisualizer.evaluate_and_show", "Config.fromfile.merge_from_dict", "import_modules_from_strings"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.get_loading_pipeline", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.analyze_results.ResultVisualizer.evaluate_and_show"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "mmcv", ".", "check_file_exist", "(", "args", ".", "prediction_path", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "# import modules from string list.", "\n", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "\n", "", "cfg", ".", "data", ".", "test", ".", "pop", "(", "'samples_per_gpu'", ",", "0", ")", "\n", "cfg", ".", "data", ".", "test", ".", "pipeline", "=", "get_loading_pipeline", "(", "cfg", ".", "data", ".", "train", ".", "pipeline", ")", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "outputs", "=", "mmcv", ".", "load", "(", "args", ".", "prediction_path", ")", "\n", "\n", "result_visualizer", "=", "ResultVisualizer", "(", "args", ".", "show", ",", "args", ".", "wait_time", ",", "\n", "args", ".", "show_score_thr", ")", "\n", "result_visualizer", ".", "evaluate_and_show", "(", "\n", "dataset", ",", "outputs", ",", "topk", "=", "args", ".", "topk", ",", "show_dir", "=", "args", ".", "show_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.benchmark.parse_args": [[15, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDet benchmark a model'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--log-interval'", ",", "default", "=", "50", ",", "help", "=", "'interval of logging'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--fuse-conv-bn'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Whether to fuse conv and bn, this will slightly increase'", "\n", "'the inference speed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.benchmark.main": [[40, 110], ["benchmark.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.get", "Config.fromfile.data.test.pop", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "Config.fromfile.get", "mmcv.runner.load_checkpoint", "mmcv.parallel.MMDataParallel", "mmcv.cnn.fuse_conv_bn.eval", "enumerate", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmdet.datasets.replace_ImageToTensor", "mmcv.runner.wrap_fp16_model", "mmcv.cnn.fuse_conv_bn", "torch.cuda.synchronize", "time.perf_counter", "torch.cuda.synchronize", "Config.fromfile.get", "torch.no_grad", "mmcv.cnn.fuse_conv_bn.", "time.perf_counter", "print", "print"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.replace_ImageToTensor"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "\n", "# build the dataloader", "\n", "samples_per_gpu", "=", "cfg", ".", "data", ".", "test", ".", "pop", "(", "'samples_per_gpu'", ",", "1", ")", "\n", "if", "samples_per_gpu", ">", "1", ":", "\n", "# Replace 'ImageToTensor' to 'DefaultFormatBundle'", "\n", "        ", "cfg", ".", "data", ".", "test", ".", "pipeline", "=", "replace_ImageToTensor", "(", "cfg", ".", "data", ".", "test", ".", "pipeline", ")", "\n", "", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "cfg", ".", "data", ".", "workers_per_gpu", ",", "\n", "dist", "=", "False", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "cfg", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "        ", "wrap_fp16_model", "(", "model", ")", "\n", "", "load_checkpoint", "(", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "if", "args", ".", "fuse_conv_bn", ":", "\n", "        ", "model", "=", "fuse_conv_bn", "(", "model", ")", "\n", "\n", "", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# the first several iterations may be very slow so skip them", "\n", "num_warmup", "=", "5", "\n", "pure_inf_time", "=", "0", "\n", "\n", "# benchmark with 2000 image and take the average", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "\n", "        ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "elapsed", "=", "time", ".", "perf_counter", "(", ")", "-", "start_time", "\n", "\n", "if", "i", ">=", "num_warmup", ":", "\n", "            ", "pure_inf_time", "+=", "elapsed", "\n", "if", "(", "i", "+", "1", ")", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "                ", "fps", "=", "(", "i", "+", "1", "-", "num_warmup", ")", "/", "pure_inf_time", "\n", "print", "(", "f'Done image [{i + 1:<3}/ 2000], fps: {fps:.1f} img / s'", ")", "\n", "\n", "", "", "if", "(", "i", "+", "1", ")", "==", "2000", ":", "\n", "            ", "pure_inf_time", "+=", "elapsed", "\n", "fps", "=", "(", "i", "+", "1", "-", "num_warmup", ")", "/", "pure_inf_time", "\n", "print", "(", "f'Overall fps: {fps:.1f} img / s'", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.eval_metric.parse_args": [[9, 44], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Evaluate metric of the '", "\n", "'results saved in pkl format'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'Config of the model'", ")", "\n", "parser", ".", "add_argument", "(", "'pkl_results'", ",", "help", "=", "'Results in pickle format'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--format-only'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Format the output results without perform evaluation. It is'", "\n", "'useful when you want to format the result to a specific format and '", "\n", "'submit it to the test server'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'Evaluation metrics, which depends on the dataset, e.g., \"bbox\",'", "\n", "' \"segm\", \"proposal\" for COCO, and \"mAP\", \"recall\" for PASCAL VOC'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'custom options for evaluation, the key-value pair in xxx=yyy '", "\n", "'format will be kwargs for dataset.evaluate() function'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.eval_metric.main": [[46, 80], ["eval_metric.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "mmdet.datasets.build_dataset", "mmcv.load", "ValueError", "Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmdet.datasets.build_dataset.format_results", "Config.fromfile.get().copy", "cfg.get().copy.update", "print", "cfg.get().copy.pop", "dict", "mmdet.datasets.build_dataset.evaluate", "Config.fromfile.get"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.cityscapes.CityscapesDataset.format_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "assert", "args", ".", "eval", "or", "args", ".", "format_only", ",", "(", "\n", "'Please specify at least one operation (eval/format the results) with '", "\n", "'the argument \"--eval\", \"--format-only\"'", ")", "\n", "if", "args", ".", "eval", "and", "args", ".", "format_only", ":", "\n", "        ", "raise", "ValueError", "(", "'--eval and --format_only cannot be both specified'", ")", "\n", "\n", "", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "test", ")", "\n", "outputs", "=", "mmcv", ".", "load", "(", "args", ".", "pkl_results", ")", "\n", "\n", "kwargs", "=", "{", "}", "if", "args", ".", "eval_options", "is", "None", "else", "args", ".", "eval_options", "\n", "if", "args", ".", "format_only", ":", "\n", "        ", "dataset", ".", "format_results", "(", "outputs", ",", "**", "kwargs", ")", "\n", "", "if", "args", ".", "eval", ":", "\n", "        ", "eval_kwargs", "=", "cfg", ".", "get", "(", "'evaluation'", ",", "{", "}", ")", ".", "copy", "(", ")", "\n", "# hard-code way to remove EvalHook args", "\n", "for", "key", "in", "[", "\n", "'interval'", ",", "'tmpdir'", ",", "'start'", ",", "'gpu_collect'", ",", "'save_best'", ",", "\n", "'rule'", "\n", "]", ":", "\n", "            ", "eval_kwargs", ".", "pop", "(", "key", ",", "None", ")", "\n", "", "eval_kwargs", ".", "update", "(", "dict", "(", "metric", "=", "args", ".", "eval", ",", "**", "kwargs", ")", ")", "\n", "print", "(", "dataset", ".", "evaluate", "(", "outputs", ",", "**", "eval_kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.test_robustness.coco_eval_with_return": [[23, 63], ["mmcv.is_str", "isinstance", "pycocotools.coco.COCO", "result_file.endswith", "pycocotools.coco.COCO.loadRes", "pycocotools.coco.COCO.getImgIds", "pycocotools.cocoeval.COCOeval", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize", "list", "range", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate"], ["def", "coco_eval_with_return", "(", "result_files", ",", "\n", "result_types", ",", "\n", "coco", ",", "\n", "max_dets", "=", "(", "100", ",", "300", ",", "1000", ")", ")", ":", "\n", "    ", "for", "res_type", "in", "result_types", ":", "\n", "        ", "assert", "res_type", "in", "[", "'proposal'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", "\n", "\n", "", "if", "mmcv", ".", "is_str", "(", "coco", ")", ":", "\n", "        ", "coco", "=", "COCO", "(", "coco", ")", "\n", "", "assert", "isinstance", "(", "coco", ",", "COCO", ")", "\n", "\n", "eval_results", "=", "{", "}", "\n", "for", "res_type", "in", "result_types", ":", "\n", "        ", "result_file", "=", "result_files", "[", "res_type", "]", "\n", "assert", "result_file", ".", "endswith", "(", "'.json'", ")", "\n", "\n", "coco_dets", "=", "coco", ".", "loadRes", "(", "result_file", ")", "\n", "img_ids", "=", "coco", ".", "getImgIds", "(", ")", "\n", "iou_type", "=", "'bbox'", "if", "res_type", "==", "'proposal'", "else", "res_type", "\n", "cocoEval", "=", "COCOeval", "(", "coco", ",", "coco_dets", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "img_ids", "\n", "if", "res_type", "==", "'proposal'", ":", "\n", "            ", "cocoEval", ".", "params", ".", "useCats", "=", "0", "\n", "cocoEval", ".", "params", ".", "maxDets", "=", "list", "(", "max_dets", ")", "\n", "", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "if", "res_type", "==", "'segm'", "or", "res_type", "==", "'bbox'", ":", "\n", "            ", "metric_names", "=", "[", "\n", "'AP'", ",", "'AP50'", ",", "'AP75'", ",", "'APs'", ",", "'APm'", ",", "'APl'", ",", "'AR1'", ",", "'AR10'", ",", "\n", "'AR100'", ",", "'ARs'", ",", "'ARm'", ",", "'ARl'", "\n", "]", "\n", "eval_results", "[", "res_type", "]", "=", "{", "\n", "metric_names", "[", "i", "]", ":", "cocoEval", ".", "stats", "[", "i", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "metric_names", ")", ")", "\n", "}", "\n", "", "else", ":", "\n", "            ", "eval_results", "[", "res_type", "]", "=", "cocoEval", ".", "stats", "\n", "\n", "", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.test_robustness.voc_eval_with_return": [[65, 90], ["mmcv.load", "mmdet.core.eval_map", "dataset.get_ann_info", "hasattr", "range", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.mean_ap.eval_map", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.xml_style.XMLDataset.get_ann_info"], ["", "def", "voc_eval_with_return", "(", "result_file", ",", "\n", "dataset", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "logger", "=", "'print'", ",", "\n", "only_ap", "=", "True", ")", ":", "\n", "    ", "det_results", "=", "mmcv", ".", "load", "(", "result_file", ")", "\n", "annotations", "=", "[", "dataset", ".", "get_ann_info", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "if", "hasattr", "(", "dataset", ",", "'year'", ")", "and", "dataset", ".", "year", "==", "2007", ":", "\n", "        ", "dataset_name", "=", "'voc07'", "\n", "", "else", ":", "\n", "        ", "dataset_name", "=", "dataset", ".", "CLASSES", "\n", "", "mean_ap", ",", "eval_results", "=", "eval_map", "(", "\n", "det_results", ",", "\n", "annotations", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "iou_thr", "=", "iou_thr", ",", "\n", "dataset", "=", "dataset_name", ",", "\n", "logger", "=", "logger", ")", "\n", "\n", "if", "only_ap", ":", "\n", "        ", "eval_results", "=", "[", "{", "\n", "'ap'", ":", "eval_results", "[", "i", "]", "[", "'ap'", "]", "\n", "}", "for", "i", "in", "range", "(", "len", "(", "eval_results", ")", ")", "]", "\n", "\n", "", "return", "mean_ap", ",", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.test_robustness.parse_args": [[92, 178], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "str"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MMDet test detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'test config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'checkpoint'", ",", "help", "=", "'checkpoint file'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "help", "=", "'output result file'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--corruptions'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "'benchmark'", ",", "\n", "choices", "=", "[", "\n", "'all'", ",", "'benchmark'", ",", "'noise'", ",", "'blur'", ",", "'weather'", ",", "'digital'", ",", "\n", "'holdout'", ",", "'None'", ",", "'gaussian_noise'", ",", "'shot_noise'", ",", "'impulse_noise'", ",", "\n", "'defocus_blur'", ",", "'glass_blur'", ",", "'motion_blur'", ",", "'zoom_blur'", ",", "'snow'", ",", "\n", "'frost'", ",", "'fog'", ",", "'brightness'", ",", "'contrast'", ",", "'elastic_transform'", ",", "\n", "'pixelate'", ",", "'jpeg_compression'", ",", "'speckle_noise'", ",", "'gaussian_blur'", ",", "\n", "'spatter'", ",", "'saturate'", "\n", "]", ",", "\n", "help", "=", "'corruptions'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--severities'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\n", "help", "=", "'corruption severity levels'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--eval'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'proposal'", ",", "'proposal_fast'", ",", "'bbox'", ",", "'segm'", ",", "'keypoints'", "]", ",", "\n", "help", "=", "'eval types'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--iou-thr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "help", "=", "'IoU threshold for pascal voc evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--summaries'", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "'Print summaries for every corruption and severity'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "help", "=", "'workers per gpu'", ")", "\n", "parser", ".", "add_argument", "(", "'--show'", ",", "action", "=", "'store_true'", ",", "help", "=", "'show results'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-dir'", ",", "help", "=", "'directory where painted images will be saved'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-score-thr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.3", ",", "\n", "help", "=", "'score threshold (default: 0.3)'", ")", "\n", "parser", ".", "add_argument", "(", "'--tmpdir'", ",", "help", "=", "'tmp dir for writing some results'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--final-prints'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'P'", ",", "'mPC'", ",", "'rPC'", "]", ",", "\n", "default", "=", "'mPC'", ",", "\n", "help", "=", "'corruption benchmark metric to print at the end'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--final-prints-aggregate'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'all'", ",", "'benchmark'", "]", ",", "\n", "default", "=", "'benchmark'", ",", "\n", "help", "=", "'aggregate all results or only those for benchmark corruptions'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.test_robustness.main": [[180, 387], ["test_robustness.parse_args", "mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmcv.Config.fromfile.get", "mmcv.runner.get_dist_info", "enumerate", "ValueError", "mmcv.Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmcv.runner.init_dist", "mmdet.apis.set_random_seed", "enumerate", "print", "parse_args.out.endswith", "copy.deepcopy", "print", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "mmdet.models.build_detector", "mmcv.Config.fromfile.get", "mmcv.runner.load_checkpoint", "tools.analysis_tools.robustness_eval.get_results", "tools.analysis_tools.robustness_eval.get_results", "dict", "test_data_cfg[].insert", "mmcv.runner.wrap_fp16_model", "mmcv.runner.load_checkpoint.get", "mmcv.parallel.MMDataParallel", "mmdet.apis.single_gpu_test", "mmcv.parallel.MMDistributedDataParallel", "mmdet.apis.multi_gpu_test", "mmcv.dump", "mmcv.dump", "mmcv.Config.fromfile.get", "os.join", "os.join", "mmcv.parallel.MMDistributedDataParallel.cuda", "str", "os.exists", "os.makedirs", "os.splitext", "print", "test_robustness.coco_eval_with_return", "print", "torch.cuda.current_device", "os.splitext", "mmcv.runner.obj_from_dict", "test_robustness.voc_eval_with_return", "print", "isinstance", "mmdet.datasets.build_dataset.results2json", "print", "mmdet.datasets.build_dataset.results2json"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.train.set_random_seed", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.get_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.get_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.single_gpu_test", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.multi_gpu_test", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.test_robustness.coco_eval_with_return", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.test_robustness.voc_eval_with_return", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.results2json", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.results2json"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "out", "or", "args", ".", "show", "or", "args", ".", "show_dir", ",", "(", "'Please specify at least one operation (save or show the results) '", "\n", "'with the argument \"--out\", \"--show\" or \"show-dir\"'", ")", "\n", "\n", "if", "args", ".", "out", "is", "not", "None", "and", "not", "args", ".", "out", ".", "endswith", "(", "(", "'.pkl'", ",", "'.pickle'", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'The output file must be a pkl file.'", ")", "\n", "\n", "", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "data", ".", "test", ".", "test_mode", "=", "True", "\n", "if", "args", ".", "workers", "==", "0", ":", "\n", "        ", "args", ".", "workers", "=", "cfg", ".", "data", ".", "workers_per_gpu", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "\n", "# set random seeds", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "set_random_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "if", "'all'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "\n", "'gaussian_noise'", ",", "'shot_noise'", ",", "'impulse_noise'", ",", "'defocus_blur'", ",", "\n", "'glass_blur'", ",", "'motion_blur'", ",", "'zoom_blur'", ",", "'snow'", ",", "'frost'", ",", "'fog'", ",", "\n", "'brightness'", ",", "'contrast'", ",", "'elastic_transform'", ",", "'pixelate'", ",", "\n", "'jpeg_compression'", ",", "'speckle_noise'", ",", "'gaussian_blur'", ",", "'spatter'", ",", "\n", "'saturate'", "\n", "]", "\n", "", "elif", "'benchmark'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "\n", "'gaussian_noise'", ",", "'shot_noise'", ",", "'impulse_noise'", ",", "'defocus_blur'", ",", "\n", "'glass_blur'", ",", "'motion_blur'", ",", "'zoom_blur'", ",", "'snow'", ",", "'frost'", ",", "'fog'", ",", "\n", "'brightness'", ",", "'contrast'", ",", "'elastic_transform'", ",", "'pixelate'", ",", "\n", "'jpeg_compression'", "\n", "]", "\n", "", "elif", "'noise'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "'gaussian_noise'", ",", "'shot_noise'", ",", "'impulse_noise'", "]", "\n", "", "elif", "'blur'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "\n", "'defocus_blur'", ",", "'glass_blur'", ",", "'motion_blur'", ",", "'zoom_blur'", "\n", "]", "\n", "", "elif", "'weather'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "'snow'", ",", "'frost'", ",", "'fog'", ",", "'brightness'", "]", "\n", "", "elif", "'digital'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "\n", "'contrast'", ",", "'elastic_transform'", ",", "'pixelate'", ",", "'jpeg_compression'", "\n", "]", "\n", "", "elif", "'holdout'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "'speckle_noise'", ",", "'gaussian_blur'", ",", "'spatter'", ",", "'saturate'", "]", "\n", "", "elif", "'None'", "in", "args", ".", "corruptions", ":", "\n", "        ", "corruptions", "=", "[", "'None'", "]", "\n", "args", ".", "severities", "=", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "corruptions", "=", "args", ".", "corruptions", "\n", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "aggregated_results", "=", "{", "}", "\n", "for", "corr_i", ",", "corruption", "in", "enumerate", "(", "corruptions", ")", ":", "\n", "        ", "aggregated_results", "[", "corruption", "]", "=", "{", "}", "\n", "for", "sev_i", ",", "corruption_severity", "in", "enumerate", "(", "args", ".", "severities", ")", ":", "\n", "# evaluate severity 0 (= no corruption) only once", "\n", "            ", "if", "corr_i", ">", "0", "and", "corruption_severity", "==", "0", ":", "\n", "                ", "aggregated_results", "[", "corruption", "]", "[", "0", "]", "=", "aggregated_results", "[", "corruptions", "[", "0", "]", "]", "[", "0", "]", "\n", "continue", "\n", "\n", "", "test_data_cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "data", ".", "test", ")", "\n", "# assign corruption and severity", "\n", "if", "corruption_severity", ">", "0", ":", "\n", "                ", "corruption_trans", "=", "dict", "(", "\n", "type", "=", "'Corrupt'", ",", "\n", "corruption", "=", "corruption", ",", "\n", "severity", "=", "corruption_severity", ")", "\n", "# TODO: hard coded \"1\", we assume that the first step is", "\n", "# loading images, which needs to be fixed in the future", "\n", "test_data_cfg", "[", "'pipeline'", "]", ".", "insert", "(", "1", ",", "corruption_trans", ")", "\n", "\n", "# print info", "\n", "", "print", "(", "f'\\nTesting {corruption} at severity {corruption_severity}'", ")", "\n", "\n", "# build the dataloader", "\n", "# TODO: support multiple images per gpu", "\n", "#       (only minor changes are needed)", "\n", "dataset", "=", "build_dataset", "(", "test_data_cfg", ")", "\n", "data_loader", "=", "build_dataloader", "(", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "workers_per_gpu", "=", "args", ".", "workers", ",", "\n", "dist", "=", "distributed", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# build the model and load checkpoint", "\n", "cfg", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ",", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "fp16_cfg", "=", "cfg", ".", "get", "(", "'fp16'", ",", "None", ")", "\n", "if", "fp16_cfg", "is", "not", "None", ":", "\n", "                ", "wrap_fp16_model", "(", "model", ")", "\n", "", "checkpoint", "=", "load_checkpoint", "(", "\n", "model", ",", "args", ".", "checkpoint", ",", "map_location", "=", "'cpu'", ")", "\n", "# old versions did not save class info in checkpoints,", "\n", "# this walkaround is for backward compatibility", "\n", "if", "'CLASSES'", "in", "checkpoint", ".", "get", "(", "'meta'", ",", "{", "}", ")", ":", "\n", "                ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "                ", "model", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "", "if", "not", "distributed", ":", "\n", "                ", "model", "=", "MMDataParallel", "(", "model", ",", "device_ids", "=", "[", "0", "]", ")", "\n", "show_dir", "=", "args", ".", "show_dir", "\n", "if", "show_dir", "is", "not", "None", ":", "\n", "                    ", "show_dir", "=", "osp", ".", "join", "(", "show_dir", ",", "corruption", ")", "\n", "show_dir", "=", "osp", ".", "join", "(", "show_dir", ",", "str", "(", "corruption_severity", ")", ")", "\n", "if", "not", "osp", ".", "exists", "(", "show_dir", ")", ":", "\n", "                        ", "osp", ".", "makedirs", "(", "show_dir", ")", "\n", "", "", "outputs", "=", "single_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "show", ",", "\n", "show_dir", ",", "args", ".", "show_score_thr", ")", "\n", "", "else", ":", "\n", "                ", "model", "=", "MMDistributedDataParallel", "(", "\n", "model", ".", "cuda", "(", ")", ",", "\n", "device_ids", "=", "[", "torch", ".", "cuda", ".", "current_device", "(", ")", "]", ",", "\n", "broadcast_buffers", "=", "False", ")", "\n", "outputs", "=", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "args", ".", "tmpdir", ")", "\n", "\n", "", "if", "args", ".", "out", "and", "rank", "==", "0", ":", "\n", "                ", "eval_results_filename", "=", "(", "\n", "osp", ".", "splitext", "(", "args", ".", "out", ")", "[", "0", "]", "+", "'_results'", "+", "\n", "osp", ".", "splitext", "(", "args", ".", "out", ")", "[", "1", "]", ")", "\n", "mmcv", ".", "dump", "(", "outputs", ",", "args", ".", "out", ")", "\n", "eval_types", "=", "args", ".", "eval", "\n", "if", "cfg", ".", "dataset_type", "==", "'VOCDataset'", ":", "\n", "                    ", "if", "eval_types", ":", "\n", "                        ", "for", "eval_type", "in", "eval_types", ":", "\n", "                            ", "if", "eval_type", "==", "'bbox'", ":", "\n", "                                ", "test_dataset", "=", "mmcv", ".", "runner", ".", "obj_from_dict", "(", "\n", "cfg", ".", "data", ".", "test", ",", "datasets", ")", "\n", "logger", "=", "'print'", "if", "args", ".", "summaries", "else", "None", "\n", "mean_ap", ",", "eval_results", "=", "voc_eval_with_return", "(", "\n", "args", ".", "out", ",", "test_dataset", ",", "\n", "args", ".", "iou_thr", ",", "logger", ")", "\n", "aggregated_results", "[", "corruption", "]", "[", "\n", "corruption_severity", "]", "=", "eval_results", "\n", "", "else", ":", "\n", "                                ", "print", "(", "'\\nOnly \"bbox\" evaluation \\\n                                is supported for pascal voc'", ")", "\n", "", "", "", "", "else", ":", "\n", "                    ", "if", "eval_types", ":", "\n", "                        ", "print", "(", "f'Starting evaluate {\" and \".join(eval_types)}'", ")", "\n", "if", "eval_types", "==", "[", "'proposal_fast'", "]", ":", "\n", "                            ", "result_file", "=", "args", ".", "out", "\n", "", "else", ":", "\n", "                            ", "if", "not", "isinstance", "(", "outputs", "[", "0", "]", ",", "dict", ")", ":", "\n", "                                ", "result_files", "=", "dataset", ".", "results2json", "(", "\n", "outputs", ",", "args", ".", "out", ")", "\n", "", "else", ":", "\n", "                                ", "for", "name", "in", "outputs", "[", "0", "]", ":", "\n", "                                    ", "print", "(", "f'\\nEvaluating {name}'", ")", "\n", "outputs_", "=", "[", "out", "[", "name", "]", "for", "out", "in", "outputs", "]", "\n", "result_file", "=", "args", ".", "out", "\n", "+", "f'.{name}'", "\n", "result_files", "=", "dataset", ".", "results2json", "(", "\n", "outputs_", ",", "result_file", ")", "\n", "", "", "", "eval_results", "=", "coco_eval_with_return", "(", "\n", "result_files", ",", "eval_types", ",", "dataset", ".", "coco", ")", "\n", "aggregated_results", "[", "corruption", "]", "[", "\n", "corruption_severity", "]", "=", "eval_results", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'\\nNo task was selected for evaluation;'", "\n", "'\\nUse --eval to select a task'", ")", "\n", "\n", "# save results after each evaluation", "\n", "", "", "mmcv", ".", "dump", "(", "aggregated_results", ",", "eval_results_filename", ")", "\n", "\n", "", "", "", "if", "rank", "==", "0", ":", "\n", "# print final results", "\n", "        ", "print", "(", "'\\nAggregated results:'", ")", "\n", "prints", "=", "args", ".", "final_prints", "\n", "aggregate", "=", "args", ".", "final_prints_aggregate", "\n", "\n", "if", "cfg", ".", "dataset_type", "==", "'VOCDataset'", ":", "\n", "            ", "get_results", "(", "\n", "eval_results_filename", ",", "\n", "dataset", "=", "'voc'", ",", "\n", "prints", "=", "prints", ",", "\n", "aggregate", "=", "aggregate", ")", "\n", "", "else", ":", "\n", "            ", "get_results", "(", "\n", "eval_results_filename", ",", "\n", "dataset", "=", "'coco'", ",", "\n", "prints", "=", "prints", ",", "\n", "aggregate", "=", "aggregate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.print_config.parse_args": [[7, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "ValueError", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Print the whole config'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file (deprecate), '", "\n", "'change to --cfg-options instead.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "options", "and", "args", ".", "cfg_options", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'--options and --cfg-options cannot be both '", "\n", "'specified, --options is deprecated in favor of --cfg-options'", ")", "\n", "", "if", "args", ".", "options", ":", "\n", "        ", "warnings", ".", "warn", "(", "'--options is deprecated in favor of --cfg-options'", ")", "\n", "args", ".", "cfg_options", "=", "args", ".", "options", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.print_config.main": [[40, 51], ["print_config.parse_args", "mmcv.Config.fromfile", "Config.fromfile.get", "print", "Config.fromfile.merge_from_dict", "import_modules_from_strings"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "", "print", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args": [[13, 45], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Browse a dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--skip-type'", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "'+'", ",", "\n", "default", "=", "[", "'DefaultFormatBundle'", ",", "'Normalize'", ",", "'Collect'", "]", ",", "\n", "help", "=", "'skip some useless pipeline'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--output-dir'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'If there is no display interface, you can save it'", ")", "\n", "parser", ".", "add_argument", "(", "'--not-show'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--show-interval'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "2", ",", "\n", "help", "=", "'the interval of show (s)'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.retrieve_data_cfg": [[47, 61], ["mmcv.Config.fromfile", "Config.fromfile.get", "Config.fromfile.merge_from_dict", "import_modules_from_strings"], "function", ["None"], ["", "def", "retrieve_data_cfg", "(", "config_path", ",", "skip_type", ",", "cfg_options", ")", ":", "\n", "    ", "cfg", "=", "Config", ".", "fromfile", "(", "config_path", ")", "\n", "if", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "", "train_data_cfg", "=", "cfg", ".", "data", ".", "train", "\n", "train_data_cfg", "[", "'pipeline'", "]", "=", "[", "\n", "x", "for", "x", "in", "train_data_cfg", ".", "pipeline", "if", "x", "[", "'type'", "]", "not", "in", "skip_type", "\n", "]", "\n", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.main": [[63, 93], ["browse_dataset.parse_args", "browse_dataset.retrieve_data_cfg", "mmdet.datasets.builder.build_dataset", "mmcv.ProgressBar", "len", "item.get", "mmdet.core.visualization.imshow_det_bboxes", "mmcv.ProgressBar.update", "os.path.join", "mmdet.core.utils.mask2ndarray", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.parse_args", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.misc.browse_dataset.retrieve_data_cfg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_det_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.misc.mask2ndarray"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "cfg", "=", "retrieve_data_cfg", "(", "args", ".", "config", ",", "args", ".", "skip_type", ",", "args", ".", "cfg_options", ")", "\n", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "\n", "\n", "progress_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "\n", "for", "item", "in", "dataset", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\n", "Path", "(", "item", "[", "'filename'", "]", ")", ".", "name", "\n", ")", "if", "args", ".", "output_dir", "is", "not", "None", "else", "None", "\n", "\n", "gt_masks", "=", "item", ".", "get", "(", "'gt_masks'", ",", "None", ")", "\n", "if", "gt_masks", "is", "not", "None", ":", "\n", "            ", "gt_masks", "=", "mask2ndarray", "(", "gt_masks", ")", "\n", "\n", "", "imshow_det_bboxes", "(", "\n", "item", "[", "'img'", "]", ",", "\n", "item", "[", "'gt_bboxes'", "]", ",", "\n", "item", "[", "'gt_labels'", "]", ",", "\n", "gt_masks", ",", "\n", "class_names", "=", "dataset", ".", "CLASSES", ",", "\n", "show", "=", "not", "args", ".", "not_show", ",", "\n", "wait_time", "=", "args", ".", "show_interval", ",", "\n", "out_file", "=", "filename", ",", "\n", "bbox_color", "=", "(", "255", ",", "102", ",", "61", ")", ",", "\n", "text_color", "=", "(", "255", ",", "102", ",", "61", ")", ")", "\n", "\n", "progress_bar", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.fpn_config": [[31, 106], ["torch.rand", "mmdet.models.necks.FPN", "range", "range", "mmdet.models.necks.FPN", "len", "mmdet.models.necks.FPN", "mmdet.models.necks.FPN", "dict", "mmdet.models.necks.FPN", "dict", "mmdet.models.necks.FPN", "dict", "mmdet.models.necks.FPN", "mmdet.models.necks.FPN"], "function", ["None"], ["def", "fpn_config", "(", "test_step_name", ")", ":", "\n", "    ", "\"\"\"Return the class containing the corresponding attributes according to\n    the test_step_names.\"\"\"", "\n", "\n", "s", "=", "64", "\n", "in_channels", "=", "[", "8", ",", "16", ",", "32", ",", "64", "]", "\n", "feat_sizes", "=", "[", "s", "//", "2", "**", "i", "for", "i", "in", "range", "(", "4", ")", "]", "# [64, 32, 16, 8]", "\n", "out_channels", "=", "8", "\n", "\n", "feats", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "in_channels", "[", "i", "]", ",", "feat_sizes", "[", "i", "]", ",", "feat_sizes", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "in_channels", ")", ")", "\n", "]", "\n", "\n", "if", "(", "test_step_names", "[", "test_step_name", "]", "==", "0", ")", ":", "\n", "        ", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "add_extra_convs", "=", "True", ",", "\n", "num_outs", "=", "5", ")", "\n", "return", "fpn_model", ",", "feats", "\n", "", "elif", "(", "test_step_names", "[", "test_step_name", "]", "==", "1", ")", ":", "\n", "# Tests for fpn with no extra convs (pooling is used instead)", "\n", "        ", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "add_extra_convs", "=", "False", ",", "\n", "num_outs", "=", "5", ")", "\n", "return", "fpn_model", ",", "feats", "\n", "", "elif", "(", "test_step_names", "[", "test_step_name", "]", "==", "2", ")", ":", "\n", "        ", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "add_extra_convs", "=", "True", ",", "\n", "no_norm_on_lateral", "=", "False", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "num_outs", "=", "5", ")", "\n", "return", "fpn_model", ",", "feats", "\n", "", "elif", "(", "test_step_names", "[", "test_step_name", "]", "==", "3", ")", ":", "\n", "        ", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "add_extra_convs", "=", "True", ",", "\n", "upsample_cfg", "=", "dict", "(", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "\n", "num_outs", "=", "5", ")", "\n", "return", "fpn_model", ",", "feats", "\n", "", "elif", "(", "test_step_names", "[", "test_step_name", "]", "==", "4", ")", ":", "\n", "        ", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "add_extra_convs", "=", "True", ",", "\n", "upsample_cfg", "=", "dict", "(", "scale_factor", "=", "2", ")", ",", "\n", "num_outs", "=", "5", ")", "\n", "return", "fpn_model", ",", "feats", "\n", "", "elif", "(", "test_step_names", "[", "test_step_name", "]", "==", "5", ")", ":", "\n", "        ", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "add_extra_convs", "=", "'on_input'", ",", "\n", "num_outs", "=", "5", ")", "\n", "return", "fpn_model", ",", "feats", "\n", "", "elif", "(", "test_step_names", "[", "test_step_name", "]", "==", "6", ")", ":", "\n", "        ", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "add_extra_convs", "=", "'on_lateral'", ",", "\n", "num_outs", "=", "5", ")", "\n", "return", "fpn_model", ",", "feats", "\n", "", "elif", "(", "test_step_names", "[", "test_step_name", "]", "==", "7", ")", ":", "\n", "        ", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "add_extra_convs", "=", "'on_output'", ",", "\n", "num_outs", "=", "5", ")", "\n", "return", "fpn_model", ",", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.yolo_config": [[108, 125], ["mmcv.load", "os.join", "mmdet.models.necks.YOLOV3Neck"], "function", ["None"], ["", "", "def", "yolo_config", "(", "test_step_name", ")", ":", "\n", "    ", "\"\"\"Config yolov3 Neck.\"\"\"", "\n", "\n", "in_channels", "=", "[", "16", ",", "8", ",", "4", "]", "\n", "out_channels", "=", "[", "8", ",", "4", ",", "2", "]", "\n", "\n", "# The data of yolov3_neck.pkl contains a list of", "\n", "# torch.Tensor, where each torch.Tensor is generated by", "\n", "# torch.rand and each tensor size is:", "\n", "# (1, 4, 64, 64), (1, 8, 32, 32), (1, 16, 16, 16).", "\n", "yolov3_neck_data", "=", "'yolov3_neck.pkl'", "\n", "feats", "=", "mmcv", ".", "load", "(", "osp", ".", "join", "(", "data_path", ",", "yolov3_neck_data", ")", ")", "\n", "\n", "if", "(", "test_step_names", "[", "test_step_name", "]", "==", "0", ")", ":", "\n", "        ", "yolo_model", "=", "YOLOV3Neck", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "num_scales", "=", "3", ")", "\n", "return", "yolo_model", ",", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.test_fpn_normal": [[127, 130], ["test_neck.fpn_config", "utils.ort_validate"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.fpn_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.ort_validate"], ["", "", "def", "test_fpn_normal", "(", ")", ":", "\n", "    ", "outs", "=", "fpn_config", "(", "'normal'", ")", "\n", "ort_validate", "(", "*", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.test_fpn_wo_extra_convs": [[132, 135], ["test_neck.fpn_config", "utils.ort_validate"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.fpn_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.ort_validate"], ["", "def", "test_fpn_wo_extra_convs", "(", ")", ":", "\n", "    ", "outs", "=", "fpn_config", "(", "'wo_extra_convs'", ")", "\n", "ort_validate", "(", "*", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.test_fpn_lateral_bns": [[137, 140], ["test_neck.fpn_config", "utils.ort_validate"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.fpn_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.ort_validate"], ["", "def", "test_fpn_lateral_bns", "(", ")", ":", "\n", "    ", "outs", "=", "fpn_config", "(", "'lateral_bns'", ")", "\n", "ort_validate", "(", "*", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.test_fpn_bilinear_upsample": [[142, 145], ["test_neck.fpn_config", "utils.ort_validate"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.fpn_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.ort_validate"], ["", "def", "test_fpn_bilinear_upsample", "(", ")", ":", "\n", "    ", "outs", "=", "fpn_config", "(", "'bilinear_upsample'", ")", "\n", "ort_validate", "(", "*", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.test_fpn_scale_factor": [[147, 150], ["test_neck.fpn_config", "utils.ort_validate"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.fpn_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.ort_validate"], ["", "def", "test_fpn_scale_factor", "(", ")", ":", "\n", "    ", "outs", "=", "fpn_config", "(", "'scale_factor'", ")", "\n", "ort_validate", "(", "*", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.test_fpn_extra_convs_inputs": [[152, 155], ["test_neck.fpn_config", "utils.ort_validate"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.fpn_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.ort_validate"], ["", "def", "test_fpn_extra_convs_inputs", "(", ")", ":", "\n", "    ", "outs", "=", "fpn_config", "(", "'extra_convs_inputs'", ")", "\n", "ort_validate", "(", "*", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.test_fpn_extra_convs_laterals": [[157, 160], ["test_neck.fpn_config", "utils.ort_validate"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.fpn_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.ort_validate"], ["", "def", "test_fpn_extra_convs_laterals", "(", ")", ":", "\n", "    ", "outs", "=", "fpn_config", "(", "'extra_convs_laterals'", ")", "\n", "ort_validate", "(", "*", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.test_fpn_extra_convs_outputs": [[162, 165], ["test_neck.fpn_config", "utils.ort_validate"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.fpn_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.ort_validate"], ["", "def", "test_fpn_extra_convs_outputs", "(", ")", ":", "\n", "    ", "outs", "=", "fpn_config", "(", "'extra_convs_outputs'", ")", "\n", "ort_validate", "(", "*", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_neck.test_yolo_normal": [[167, 170], ["test_neck.yolo_config", "utils.ort_validate"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_head.yolo_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.ort_validate"], ["", "def", "test_yolo_normal", "(", ")", ":", "\n", "    ", "outs", "=", "yolo_config", "(", "'normal'", ")", "\n", "ort_validate", "(", "*", "outs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_head.retinanet_config": [[22, 53], ["dict", "mmcv.Config", "mmdet.models.dense_heads.RetinaHead", "mmdet.models.dense_heads.RetinaHead.requires_grad_", "mmdet.models.dense_heads.RetinaHead.eval", "dict", "dict", "dict", "dict"], "function", ["None"], ["", "def", "retinanet_config", "(", ")", ":", "\n", "    ", "\"\"\"RetinanNet Head Config.\"\"\"", "\n", "\n", "head_cfg", "=", "dict", "(", "\n", "stacked_convs", "=", "6", ",", "\n", "feat_channels", "=", "2", ",", "\n", "anchor_generator", "=", "dict", "(", "\n", "type", "=", "'AnchorGenerator'", ",", "\n", "octave_base_scale", "=", "4", ",", "\n", "scales_per_octave", "=", "3", ",", "\n", "ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "strides", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", "]", ")", ",", "\n", "bbox_coder", "=", "dict", "(", "\n", "type", "=", "'DeltaXYWHBBoxCoder'", ",", "\n", "target_means", "=", "[", ".0", ",", ".0", ",", ".0", ",", ".0", "]", ",", "\n", "target_stds", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ")", ")", "\n", "\n", "test_cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "deploy_nms_pre", "=", "1000", ",", "\n", "min_bbox_size", "=", "0", ",", "\n", "score_thr", "=", "0.05", ",", "\n", "nms", "=", "dict", "(", "type", "=", "'nms'", ",", "iou_threshold", "=", "0.5", ")", ",", "\n", "max_per_img", "=", "100", ")", ")", "\n", "\n", "model", "=", "RetinaHead", "(", "\n", "num_classes", "=", "4", ",", "in_channels", "=", "1", ",", "test_cfg", "=", "test_cfg", ",", "**", "head_cfg", ")", "\n", "model", ".", "requires_grad_", "(", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_head.test_retina_head_forward_single": [[55, 63], ["test_head.retinanet_config", "torch.rand", "utils.WrapFunction", "utils.ort_validate"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_head.retinanet_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.ort_validate"], ["", "def", "test_retina_head_forward_single", "(", ")", ":", "\n", "    ", "\"\"\"Test RetinaNet Head single forward in torch and onnxruntime env.\"\"\"", "\n", "\n", "retina_model", "=", "retinanet_config", "(", ")", "\n", "\n", "feat", "=", "torch", ".", "rand", "(", "1", ",", "retina_model", ".", "in_channels", ",", "32", ",", "32", ")", "\n", "wrap_model", "=", "WrapFunction", "(", "retina_model", ".", "forward_single", ")", "\n", "ort_validate", "(", "wrap_model", ",", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_head.test_retina_head_forward": [[65, 80], ["test_head.retinanet_config", "utils.WrapFunction", "utils.ort_validate", "torch.rand", "range", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_head.retinanet_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.ort_validate"], ["", "def", "test_retina_head_forward", "(", ")", ":", "\n", "    ", "\"\"\"Test RetinaNet Head forward in torch and onnxruntime env.\"\"\"", "\n", "\n", "retina_model", "=", "retinanet_config", "(", ")", "\n", "s", "=", "128", "\n", "\n", "# RetinaNet head expects a multiple levels of features per image", "\n", "feats", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "retina_model", ".", "in_channels", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ",", "\n", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ")", "# [32, 16, 8, 4, 2]", "\n", "for", "i", "in", "range", "(", "len", "(", "retina_model", ".", "anchor_generator", ".", "strides", ")", ")", "\n", "]", "\n", "\n", "wrap_model", "=", "WrapFunction", "(", "retina_model", ".", "forward", ")", "\n", "ort_validate", "(", "wrap_model", ",", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_head.test_retinanet_head_get_bboxes": [[82, 132], ["test_head.retinanet_config", "mmcv.load", "functools.partial", "utils.WrapFunction", "utils.WrapFunction.cpu().eval", "utils.verify_model", "utils.WrapFunction.forward", "utils.convert_result_list", "range", "os.join", "torch.no_grad", "torch.onnx.export", "torch_output.detach().numpy", "len", "numpy.testing.assert_allclose", "utils.WrapFunction.cpu", "torch_output.detach"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_head.retinanet_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.verify_model", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.convert_result_list"], ["", "def", "test_retinanet_head_get_bboxes", "(", ")", ":", "\n", "    ", "\"\"\"Test RetinaNet Head _get_bboxes() in torch and onnxruntime env.\"\"\"", "\n", "\n", "retina_model", "=", "retinanet_config", "(", ")", "\n", "s", "=", "128", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape_for_onnx'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "2", ")", "\n", "}", "]", "\n", "\n", "# The data of retina_head_get_bboxes.pkl contains two parts:", "\n", "# cls_score(list(Tensor)) and bboxes(list(Tensor)),", "\n", "# where each torch.Tensor is generated by torch.rand().", "\n", "# the cls_score's size: (1, 36, 32, 32), (1, 36, 16, 16),", "\n", "# (1, 36, 8, 8), (1, 36, 4, 4), (1, 36, 2, 2).", "\n", "# the bboxes's size: (1, 36, 32, 32), (1, 36, 16, 16),", "\n", "# (1, 36, 8, 8), (1, 36, 4, 4), (1, 36, 2, 2)", "\n", "retina_head_data", "=", "'retina_head_get_bboxes.pkl'", "\n", "feats", "=", "mmcv", ".", "load", "(", "osp", ".", "join", "(", "data_path", ",", "retina_head_data", ")", ")", "\n", "cls_score", "=", "feats", "[", ":", "5", "]", "\n", "bboxes", "=", "feats", "[", "5", ":", "]", "\n", "\n", "retina_model", ".", "get_bboxes", "=", "partial", "(", "\n", "retina_model", ".", "get_bboxes", ",", "img_metas", "=", "img_metas", ")", "\n", "wrap_model", "=", "WrapFunction", "(", "retina_model", ".", "get_bboxes", ")", "\n", "wrap_model", ".", "cpu", "(", ")", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "torch", ".", "onnx", ".", "export", "(", "\n", "wrap_model", ",", "(", "cls_score", ",", "bboxes", ")", ",", "\n", "'tmp.onnx'", ",", "\n", "export_params", "=", "True", ",", "\n", "keep_initializers_as_inputs", "=", "True", ",", "\n", "do_constant_folding", "=", "True", ",", "\n", "verbose", "=", "False", ",", "\n", "opset_version", "=", "11", ")", "\n", "\n", "", "onnx_outputs", "=", "verify_model", "(", "cls_score", "+", "bboxes", ")", "\n", "\n", "torch_outputs", "=", "wrap_model", ".", "forward", "(", "cls_score", ",", "bboxes", ")", "\n", "torch_outputs", "=", "convert_result_list", "(", "torch_outputs", ")", "\n", "torch_outputs", "=", "[", "\n", "torch_output", ".", "detach", "(", ")", ".", "numpy", "(", ")", "for", "torch_output", "in", "torch_outputs", "\n", "]", "\n", "\n", "# match torch_outputs and onnx_outputs", "\n", "for", "i", "in", "range", "(", "len", "(", "onnx_outputs", ")", ")", ":", "\n", "        ", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "torch_outputs", "[", "i", "]", ",", "onnx_outputs", "[", "i", "]", ",", "rtol", "=", "1e-03", ",", "atol", "=", "1e-05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_head.yolo_config": [[134, 165], ["dict", "mmcv.Config", "mmdet.models.dense_heads.YOLOV3Head", "mmdet.models.dense_heads.YOLOV3Head.requires_grad_", "mmdet.models.dense_heads.YOLOV3Head.eval", "dict", "dict", "dict", "dict"], "function", ["None"], ["", "", "def", "yolo_config", "(", ")", ":", "\n", "    ", "\"\"\"YoloV3 Head Config.\"\"\"", "\n", "\n", "head_cfg", "=", "dict", "(", "\n", "anchor_generator", "=", "dict", "(", "\n", "type", "=", "'YOLOAnchorGenerator'", ",", "\n", "base_sizes", "=", "[", "[", "(", "116", ",", "90", ")", ",", "(", "156", ",", "198", ")", ",", "(", "373", ",", "326", ")", "]", ",", "\n", "[", "(", "30", ",", "61", ")", ",", "(", "62", ",", "45", ")", ",", "(", "59", ",", "119", ")", "]", ",", "\n", "[", "(", "10", ",", "13", ")", ",", "(", "16", ",", "30", ")", ",", "(", "33", ",", "23", ")", "]", "]", ",", "\n", "strides", "=", "[", "32", ",", "16", ",", "8", "]", ")", ",", "\n", "bbox_coder", "=", "dict", "(", "type", "=", "'YOLOBBoxCoder'", ")", ")", "\n", "\n", "test_cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "deploy_nms_pre", "=", "1000", ",", "\n", "min_bbox_size", "=", "0", ",", "\n", "score_thr", "=", "0.05", ",", "\n", "conf_thr", "=", "0.005", ",", "\n", "nms", "=", "dict", "(", "type", "=", "'nms'", ",", "iou_threshold", "=", "0.45", ")", ",", "\n", "max_per_img", "=", "100", ")", ")", "\n", "\n", "model", "=", "YOLOV3Head", "(", "\n", "num_classes", "=", "4", ",", "\n", "in_channels", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "out_channels", "=", "[", "16", ",", "8", ",", "4", "]", ",", "\n", "test_cfg", "=", "test_cfg", ",", "\n", "**", "head_cfg", ")", "\n", "model", ".", "requires_grad_", "(", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_head.test_yolov3_head_forward": [[167, 180], ["test_head.yolo_config", "utils.WrapFunction", "utils.ort_validate", "torch.rand", "range", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_head.yolo_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.ort_validate"], ["", "def", "test_yolov3_head_forward", "(", ")", ":", "\n", "    ", "\"\"\"Test Yolov3 head forward() in torch and ort env.\"\"\"", "\n", "\n", "yolo_model", "=", "yolo_config", "(", ")", "\n", "\n", "# Yolov3 head expects a multiple levels of features per image", "\n", "feats", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "64", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ",", "64", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "yolo_model", ".", "in_channels", ")", ")", "\n", "]", "\n", "\n", "wrap_model", "=", "WrapFunction", "(", "yolo_model", ".", "forward", ")", "\n", "ort_validate", "(", "wrap_model", ",", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_head.test_yolov3_head_get_bboxes": [[182, 227], ["test_head.yolo_config", "mmcv.load", "functools.partial", "utils.WrapFunction", "utils.WrapFunction.cpu().eval", "utils.verify_model", "utils.convert_result_list", "range", "os.join", "torch.no_grad", "torch.onnx.export", "utils.WrapFunction.forward", "torch_output.detach().numpy", "len", "numpy.testing.assert_allclose", "utils.WrapFunction.cpu", "torch_output.detach"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.test_head.yolo_config", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.verify_model", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.convert_result_list", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["", "def", "test_yolov3_head_get_bboxes", "(", ")", ":", "\n", "    ", "\"\"\"Test yolov3 head get_bboxes() in torch and ort env.\"\"\"", "\n", "\n", "yolo_model", "=", "yolo_config", "(", ")", "\n", "\n", "s", "=", "128", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape_for_onnx'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "\n", "# The data of yolov3_head_get_bboxes.pkl contains", "\n", "# a list of torch.Tensor, where each torch.Tensor", "\n", "# is generated by torch.rand and each tensor size is:", "\n", "# (1, 27, 32, 32), (1, 27, 16, 16), (1, 27, 8, 8).", "\n", "yolo_head_data", "=", "'yolov3_head_get_bboxes.pkl'", "\n", "pred_maps", "=", "mmcv", ".", "load", "(", "osp", ".", "join", "(", "data_path", ",", "yolo_head_data", ")", ")", "\n", "\n", "yolo_model", ".", "get_bboxes", "=", "partial", "(", "yolo_model", ".", "get_bboxes", ",", "img_metas", "=", "img_metas", ")", "\n", "wrap_model", "=", "WrapFunction", "(", "yolo_model", ".", "get_bboxes", ")", "\n", "wrap_model", ".", "cpu", "(", ")", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "torch", ".", "onnx", ".", "export", "(", "\n", "wrap_model", ",", "\n", "pred_maps", ",", "\n", "'tmp.onnx'", ",", "\n", "export_params", "=", "True", ",", "\n", "keep_initializers_as_inputs", "=", "True", ",", "\n", "do_constant_folding", "=", "True", ",", "\n", "verbose", "=", "False", ",", "\n", "opset_version", "=", "11", ")", "\n", "\n", "", "onnx_outputs", "=", "verify_model", "(", "pred_maps", ")", "\n", "\n", "torch_outputs", "=", "convert_result_list", "(", "wrap_model", ".", "forward", "(", "pred_maps", ")", ")", "\n", "torch_outputs", "=", "[", "\n", "torch_output", ".", "detach", "(", ")", ".", "numpy", "(", ")", "for", "torch_output", "in", "torch_outputs", "\n", "]", "\n", "\n", "# match torch_outputs and onnx_outputs", "\n", "for", "i", "in", "range", "(", "len", "(", "onnx_outputs", ")", ")", ":", "\n", "        ", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "torch_outputs", "[", "i", "]", ",", "onnx_outputs", "[", "i", "]", ",", "rtol", "=", "1e-03", ",", "atol", "=", "1e-05", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.WrapFunction.__init__": [[22, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "wrapped_function", ")", ":", "\n", "        ", "super", "(", "WrapFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "wrapped_function", "=", "wrapped_function", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.WrapFunction.forward": [[26, 28], ["utils.WrapFunction.wrapped_function"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "wrapped_function", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.ort_validate": [[30, 62], ["model.cpu().eval", "utils.verify_model", "utils.convert_result_list", "range", "torch.no_grad", "torch.no_grad", "torch.onnx.export", "torch.onnx.export", "model.forward", "torch_output.detach().numpy", "len", "numpy.testing.assert_allclose", "model.cpu", "torch_output.detach"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.verify_model", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.convert_result_list", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["", "", "def", "ort_validate", "(", "model", ",", "feats", ",", "onnx_io", "=", "'tmp.onnx'", ")", ":", "\n", "    ", "\"\"\"Validate the output of the onnxruntime backend is the same as the output\n    generated by torch.\n\n    Args:\n        model (nn.Module): the model to be verified\n        feats (list(torch.Tensor) | torch.Tensor): the input of model\n        onnx_io (str): the name of onnx output file\n    \"\"\"", "\n", "model", ".", "cpu", "(", ")", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "torch", ".", "onnx", ".", "export", "(", "\n", "model", ",", "\n", "feats", ",", "\n", "onnx_io", ",", "\n", "export_params", "=", "True", ",", "\n", "keep_initializers_as_inputs", "=", "True", ",", "\n", "do_constant_folding", "=", "True", ",", "\n", "verbose", "=", "False", ",", "\n", "opset_version", "=", "11", ")", "\n", "\n", "", "onnx_outputs", "=", "verify_model", "(", "feats", ")", "\n", "\n", "torch_outputs", "=", "convert_result_list", "(", "model", ".", "forward", "(", "feats", ")", ")", "\n", "torch_outputs", "=", "[", "\n", "torch_output", ".", "detach", "(", ")", ".", "numpy", "(", ")", "for", "torch_output", "in", "torch_outputs", "\n", "]", "\n", "\n", "# match torch_outputs and onnx_outputs", "\n", "for", "i", "in", "range", "(", "len", "(", "onnx_outputs", ")", ")", ":", "\n", "        ", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "torch_outputs", "[", "i", "]", ",", "onnx_outputs", "[", "i", "]", ",", "rtol", "=", "1e-03", ",", "atol", "=", "1e-05", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.verify_model": [[64, 92], ["onnx.load", "onnx.checker.check_model", "onnxruntime.SessionOptions", "os.path.exists", "onnxruntime.InferenceSession", "isinstance", "ort.SessionOptions.register_custom_ops_library", "ort.InferenceSession.run", "ort.InferenceSession.run", "feat.numpy", "feat[].numpy", "range", "ort.InferenceSession.get_inputs", "ort.InferenceSession.get_inputs", "len"], "function", ["None"], ["", "", "def", "verify_model", "(", "feat", ",", "onnx_io", "=", "'tmp.onnx'", ")", ":", "\n", "    ", "\"\"\"Run the model in onnxruntime env.\n\n    Args:\n        feat (list[Tensor]): A list of tensors from torch.rand,\n            each is a 4D-tensor.\n\n    Returns:\n        list[np.array]: onnxruntime infer result, each is a np.array\n    \"\"\"", "\n", "\n", "onnx_model", "=", "onnx", ".", "load", "(", "onnx_io", ")", "\n", "onnx", ".", "checker", ".", "check_model", "(", "onnx_model", ")", "\n", "\n", "session_options", "=", "ort", ".", "SessionOptions", "(", ")", "\n", "# register custom op for onnxruntime", "\n", "if", "osp", ".", "exists", "(", "ort_custom_op_path", ")", ":", "\n", "        ", "session_options", ".", "register_custom_ops_library", "(", "ort_custom_op_path", ")", "\n", "", "sess", "=", "ort", ".", "InferenceSession", "(", "onnx_io", ",", "session_options", ")", "\n", "if", "isinstance", "(", "feat", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "onnx_outputs", "=", "sess", ".", "run", "(", "None", ",", "\n", "{", "sess", ".", "get_inputs", "(", ")", "[", "0", "]", ".", "name", ":", "feat", ".", "numpy", "(", ")", "}", ")", "\n", "", "else", ":", "\n", "        ", "onnx_outputs", "=", "sess", ".", "run", "(", "None", ",", "{", "\n", "sess", ".", "get_inputs", "(", ")", "[", "i", "]", ".", "name", ":", "feat", "[", "i", "]", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "feat", ")", ")", "\n", "}", ")", "\n", "", "return", "onnx_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.convert_result_list": [[94, 114], ["isinstance", "utils.convert_result_list"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_onnx.utils.convert_result_list"], ["", "def", "convert_result_list", "(", "outputs", ")", ":", "\n", "    ", "\"\"\"Convert the torch forward outputs containing tuple or list to a list\n    only containing torch.Tensor.\n\n    Args:\n        output (list(Tensor) | tuple(list(Tensor) | ...): the outputs\n        in torch env, maybe containing nested structures such as list\n        or tuple.\n\n    Returns:\n        list(Tensor): a list only containing torch.Tensor\n    \"\"\"", "\n", "# recursive end condition", "\n", "if", "isinstance", "(", "outputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "[", "outputs", "]", "\n", "\n", "", "ret", "=", "[", "]", "\n", "for", "sub", "in", "outputs", ":", "\n", "        ", "ret", "+=", "convert_result_list", "(", "sub", ")", "\n", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_necks.test_fpn": [[8, 202], ["mmdet.models.necks.FPN", "mmdet.models.necks.FPN.", "range", "mmdet.models.necks.FPN", "mmdet.models.necks.FPN.", "range", "mmdet.models.necks.FPN", "mmdet.models.necks.FPN.", "range", "mmdet.models.necks.FPN.modules", "mmdet.models.necks.FPN", "mmdet.models.necks.FPN.", "mmdet.models.necks.FPN.", "range", "mmdet.models.necks.FPN", "mmdet.models.necks.FPN.", "range", "mmdet.models.necks.FPN", "mmdet.models.necks.FPN.", "range", "mmdet.models.necks.FPN", "mmdet.models.necks.FPN.", "range", "mmdet.models.necks.FPN", "mmdet.models.necks.FPN.", "range", "mmdet.models.necks.FPN", "mmdet.models.necks.FPN.", "range", "mmdet.models.necks.FPN", "mmdet.models.necks.FPN.", "range", "pytest.raises", "mmdet.models.necks.FPN", "pytest.raises", "mmdet.models.necks.FPN", "pytest.raises", "mmdet.models.necks.FPN", "pytest.raises", "mmdet.models.necks.FPN", "torch.rand", "len", "len", "len", "isinstance", "len", "len", "len", "len", "len", "len", "len", "range", "range", "dict", "dict", "dict", "len"], "function", ["None"], ["def", "test_fpn", "(", ")", ":", "\n", "    ", "\"\"\"Tests fpn.\"\"\"", "\n", "s", "=", "64", "\n", "in_channels", "=", "[", "8", ",", "16", ",", "32", ",", "64", "]", "\n", "feat_sizes", "=", "[", "s", "//", "2", "**", "i", "for", "i", "in", "range", "(", "4", ")", "]", "# [64, 32, 16, 8]", "\n", "out_channels", "=", "8", "\n", "# `num_outs` is not equal to len(in_channels) - start_level", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "FPN", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "start_level", "=", "1", ",", "\n", "num_outs", "=", "2", ")", "\n", "\n", "# `end_level` is larger than len(in_channels) - 1", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "FPN", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "start_level", "=", "1", ",", "\n", "end_level", "=", "4", ",", "\n", "num_outs", "=", "2", ")", "\n", "\n", "# `num_outs` is not equal to end_level - start_level", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "FPN", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "start_level", "=", "1", ",", "\n", "end_level", "=", "3", ",", "\n", "num_outs", "=", "1", ")", "\n", "\n", "# Invalid `add_extra_convs` option", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "FPN", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "start_level", "=", "1", ",", "\n", "add_extra_convs", "=", "'on_xxx'", ",", "\n", "num_outs", "=", "5", ")", "\n", "\n", "", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "start_level", "=", "1", ",", "\n", "add_extra_convs", "=", "True", ",", "\n", "num_outs", "=", "5", ")", "\n", "\n", "# FPN expects a multiple levels of features per image", "\n", "feats", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "in_channels", "[", "i", "]", ",", "feat_sizes", "[", "i", "]", ",", "feat_sizes", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "in_channels", ")", ")", "\n", "]", "\n", "outs", "=", "fpn_model", "(", "feats", ")", "\n", "assert", "fpn_model", ".", "add_extra_convs", "==", "'on_input'", "\n", "assert", "len", "(", "outs", ")", "==", "fpn_model", ".", "num_outs", "\n", "for", "i", "in", "range", "(", "fpn_model", ".", "num_outs", ")", ":", "\n", "        ", "outs", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "out_channels", "\n", "outs", "[", "i", "]", ".", "shape", "[", "2", "]", "==", "outs", "[", "i", "]", ".", "shape", "[", "3", "]", "==", "s", "//", "(", "2", "**", "i", ")", "\n", "\n", "# Tests for fpn with no extra convs (pooling is used instead)", "\n", "", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "start_level", "=", "1", ",", "\n", "add_extra_convs", "=", "False", ",", "\n", "num_outs", "=", "5", ")", "\n", "outs", "=", "fpn_model", "(", "feats", ")", "\n", "assert", "len", "(", "outs", ")", "==", "fpn_model", ".", "num_outs", "\n", "assert", "not", "fpn_model", ".", "add_extra_convs", "\n", "for", "i", "in", "range", "(", "fpn_model", ".", "num_outs", ")", ":", "\n", "        ", "outs", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "out_channels", "\n", "outs", "[", "i", "]", ".", "shape", "[", "2", "]", "==", "outs", "[", "i", "]", ".", "shape", "[", "3", "]", "==", "s", "//", "(", "2", "**", "i", ")", "\n", "\n", "# Tests for fpn with lateral bns", "\n", "", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "start_level", "=", "1", ",", "\n", "add_extra_convs", "=", "True", ",", "\n", "no_norm_on_lateral", "=", "False", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "True", ")", ",", "\n", "num_outs", "=", "5", ")", "\n", "outs", "=", "fpn_model", "(", "feats", ")", "\n", "assert", "len", "(", "outs", ")", "==", "fpn_model", ".", "num_outs", "\n", "assert", "fpn_model", ".", "add_extra_convs", "==", "'on_input'", "\n", "for", "i", "in", "range", "(", "fpn_model", ".", "num_outs", ")", ":", "\n", "        ", "outs", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "out_channels", "\n", "outs", "[", "i", "]", ".", "shape", "[", "2", "]", "==", "outs", "[", "i", "]", ".", "shape", "[", "3", "]", "==", "s", "//", "(", "2", "**", "i", ")", "\n", "", "bn_exist", "=", "False", "\n", "for", "m", "in", "fpn_model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "_BatchNorm", ")", ":", "\n", "            ", "bn_exist", "=", "True", "\n", "", "", "assert", "bn_exist", "\n", "\n", "# Bilinear upsample", "\n", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "start_level", "=", "1", ",", "\n", "add_extra_convs", "=", "True", ",", "\n", "upsample_cfg", "=", "dict", "(", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "\n", "num_outs", "=", "5", ")", "\n", "fpn_model", "(", "feats", ")", "\n", "outs", "=", "fpn_model", "(", "feats", ")", "\n", "assert", "len", "(", "outs", ")", "==", "fpn_model", ".", "num_outs", "\n", "assert", "fpn_model", ".", "add_extra_convs", "==", "'on_input'", "\n", "for", "i", "in", "range", "(", "fpn_model", ".", "num_outs", ")", ":", "\n", "        ", "outs", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "out_channels", "\n", "outs", "[", "i", "]", ".", "shape", "[", "2", "]", "==", "outs", "[", "i", "]", ".", "shape", "[", "3", "]", "==", "s", "//", "(", "2", "**", "i", ")", "\n", "\n", "# Scale factor instead of fixed upsample size upsample", "\n", "", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "start_level", "=", "1", ",", "\n", "add_extra_convs", "=", "True", ",", "\n", "upsample_cfg", "=", "dict", "(", "scale_factor", "=", "2", ")", ",", "\n", "num_outs", "=", "5", ")", "\n", "outs", "=", "fpn_model", "(", "feats", ")", "\n", "assert", "len", "(", "outs", ")", "==", "fpn_model", ".", "num_outs", "\n", "for", "i", "in", "range", "(", "fpn_model", ".", "num_outs", ")", ":", "\n", "        ", "outs", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "out_channels", "\n", "outs", "[", "i", "]", ".", "shape", "[", "2", "]", "==", "outs", "[", "i", "]", ".", "shape", "[", "3", "]", "==", "s", "//", "(", "2", "**", "i", ")", "\n", "\n", "# Extra convs source is 'inputs'", "\n", "", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "add_extra_convs", "=", "'on_input'", ",", "\n", "start_level", "=", "1", ",", "\n", "num_outs", "=", "5", ")", "\n", "assert", "fpn_model", ".", "add_extra_convs", "==", "'on_input'", "\n", "outs", "=", "fpn_model", "(", "feats", ")", "\n", "assert", "len", "(", "outs", ")", "==", "fpn_model", ".", "num_outs", "\n", "for", "i", "in", "range", "(", "fpn_model", ".", "num_outs", ")", ":", "\n", "        ", "outs", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "out_channels", "\n", "outs", "[", "i", "]", ".", "shape", "[", "2", "]", "==", "outs", "[", "i", "]", ".", "shape", "[", "3", "]", "==", "s", "//", "(", "2", "**", "i", ")", "\n", "\n", "# Extra convs source is 'laterals'", "\n", "", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "add_extra_convs", "=", "'on_lateral'", ",", "\n", "start_level", "=", "1", ",", "\n", "num_outs", "=", "5", ")", "\n", "assert", "fpn_model", ".", "add_extra_convs", "==", "'on_lateral'", "\n", "outs", "=", "fpn_model", "(", "feats", ")", "\n", "assert", "len", "(", "outs", ")", "==", "fpn_model", ".", "num_outs", "\n", "for", "i", "in", "range", "(", "fpn_model", ".", "num_outs", ")", ":", "\n", "        ", "outs", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "out_channels", "\n", "outs", "[", "i", "]", ".", "shape", "[", "2", "]", "==", "outs", "[", "i", "]", ".", "shape", "[", "3", "]", "==", "s", "//", "(", "2", "**", "i", ")", "\n", "\n", "# Extra convs source is 'outputs'", "\n", "", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "add_extra_convs", "=", "'on_output'", ",", "\n", "start_level", "=", "1", ",", "\n", "num_outs", "=", "5", ")", "\n", "assert", "fpn_model", ".", "add_extra_convs", "==", "'on_output'", "\n", "outs", "=", "fpn_model", "(", "feats", ")", "\n", "assert", "len", "(", "outs", ")", "==", "fpn_model", ".", "num_outs", "\n", "for", "i", "in", "range", "(", "fpn_model", ".", "num_outs", ")", ":", "\n", "        ", "outs", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "out_channels", "\n", "outs", "[", "i", "]", ".", "shape", "[", "2", "]", "==", "outs", "[", "i", "]", ".", "shape", "[", "3", "]", "==", "s", "//", "(", "2", "**", "i", ")", "\n", "\n", "# extra_convs_on_inputs=False is equal to extra convs source is 'on_output'", "\n", "", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "add_extra_convs", "=", "True", ",", "\n", "extra_convs_on_inputs", "=", "False", ",", "\n", "start_level", "=", "1", ",", "\n", "num_outs", "=", "5", ",", "\n", ")", "\n", "assert", "fpn_model", ".", "add_extra_convs", "==", "'on_output'", "\n", "outs", "=", "fpn_model", "(", "feats", ")", "\n", "assert", "len", "(", "outs", ")", "==", "fpn_model", ".", "num_outs", "\n", "for", "i", "in", "range", "(", "fpn_model", ".", "num_outs", ")", ":", "\n", "        ", "outs", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "out_channels", "\n", "outs", "[", "i", "]", ".", "shape", "[", "2", "]", "==", "outs", "[", "i", "]", ".", "shape", "[", "3", "]", "==", "s", "//", "(", "2", "**", "i", ")", "\n", "\n", "# extra_convs_on_inputs=True is equal to extra convs source is 'on_input'", "\n", "", "fpn_model", "=", "FPN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "add_extra_convs", "=", "True", ",", "\n", "extra_convs_on_inputs", "=", "True", ",", "\n", "start_level", "=", "1", ",", "\n", "num_outs", "=", "5", ",", "\n", ")", "\n", "assert", "fpn_model", ".", "add_extra_convs", "==", "'on_input'", "\n", "outs", "=", "fpn_model", "(", "feats", ")", "\n", "assert", "len", "(", "outs", ")", "==", "fpn_model", ".", "num_outs", "\n", "for", "i", "in", "range", "(", "fpn_model", ".", "num_outs", ")", ":", "\n", "        ", "outs", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "out_channels", "\n", "outs", "[", "i", "]", ".", "shape", "[", "2", "]", "==", "outs", "[", "i", "]", ".", "shape", "[", "3", "]", "==", "s", "//", "(", "2", "**", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_necks.test_channel_mapper": [[204, 239], ["mmdet.models.necks.ChannelMapper", "mmdet.models.necks.ChannelMapper.", "range", "torch.rand", "pytest.raises", "mmdet.models.necks.ChannelMapper", "pytest.raises", "mmdet.models.necks.ChannelMapper", "mmdet.models.necks.ChannelMapper.", "len", "len", "len", "range", "range", "len"], "function", ["None"], ["", "", "def", "test_channel_mapper", "(", ")", ":", "\n", "    ", "\"\"\"Tests ChannelMapper.\"\"\"", "\n", "s", "=", "64", "\n", "in_channels", "=", "[", "8", ",", "16", ",", "32", ",", "64", "]", "\n", "feat_sizes", "=", "[", "s", "//", "2", "**", "i", "for", "i", "in", "range", "(", "4", ")", "]", "# [64, 32, 16, 8]", "\n", "out_channels", "=", "8", "\n", "kernel_size", "=", "3", "\n", "feats", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "in_channels", "[", "i", "]", ",", "feat_sizes", "[", "i", "]", ",", "feat_sizes", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "in_channels", ")", ")", "\n", "]", "\n", "\n", "# in_channels must be a list", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "channel_mapper", "=", "ChannelMapper", "(", "\n", "in_channels", "=", "10", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", ")", "\n", "# the length of channel_mapper's inputs must be equal to the length of", "\n", "# in_channels", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "channel_mapper", "=", "ChannelMapper", "(", "\n", "in_channels", "=", "in_channels", "[", ":", "-", "1", "]", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ")", "\n", "channel_mapper", "(", "feats", ")", "\n", "\n", "", "channel_mapper", "=", "ChannelMapper", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ")", "\n", "\n", "outs", "=", "channel_mapper", "(", "feats", ")", "\n", "assert", "len", "(", "outs", ")", "==", "len", "(", "feats", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "feats", ")", ")", ":", "\n", "        ", "outs", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "out_channels", "\n", "outs", "[", "i", "]", ".", "shape", "[", "2", "]", "==", "outs", "[", "i", "]", ".", "shape", "[", "3", "]", "==", "s", "//", "(", "2", "**", "i", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_config_directory": [[10, 23], ["os.path.join", "os.path.dirname", "os.path.exists", "Exception", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["def", "_get_config_directory", "(", ")", ":", "\n", "    ", "\"\"\"Find the predefined detector config directory.\"\"\"", "\n", "try", ":", "\n", "# Assume we are running in the source mmdetection repo", "\n", "        ", "repo_dpath", "=", "dirname", "(", "dirname", "(", "dirname", "(", "__file__", ")", ")", ")", "\n", "", "except", "NameError", ":", "\n", "# For IPython development when this __file__ is not defined", "\n", "        ", "import", "mmdet", "\n", "repo_dpath", "=", "dirname", "(", "dirname", "(", "mmdet", ".", "__file__", ")", ")", "\n", "", "config_dpath", "=", "join", "(", "repo_dpath", ",", "'configs'", ")", "\n", "if", "not", "exists", "(", "config_dpath", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Cannot find config path'", ")", "\n", "", "return", "config_dpath", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_config_module": [[25, 32], ["test_forward._get_config_directory", "os.path.join", "Config.fromfile"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._get_config_directory"], ["", "def", "_get_config_module", "(", "fname", ")", ":", "\n", "    ", "\"\"\"Load a configuration as a python module.\"\"\"", "\n", "from", "mmcv", "import", "Config", "\n", "config_dpath", "=", "_get_config_directory", "(", ")", "\n", "config_fpath", "=", "join", "(", "config_dpath", ",", "fname", ")", "\n", "config_mod", "=", "Config", ".", "fromfile", "(", "config_fpath", ")", "\n", "return", "config_mod", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_detector_cfg": [[34, 43], ["test_forward._get_config_module", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_config_module"], ["", "def", "_get_detector_cfg", "(", "fname", ")", ":", "\n", "    ", "\"\"\"Grab configs necessary to create a detector.\n\n    These are deep copied to allow for safe modification of parameters without\n    influencing other tests.\n    \"\"\"", "\n", "config", "=", "_get_config_module", "(", "fname", ")", "\n", "model", "=", "copy", ".", "deepcopy", "(", "config", ".", "model", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward.test_sparse_rcnn_forward": [[45, 103], ["test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.train", "build_detector.forward", "isinstance", "build_detector._parse_losses", "build_detector.forward_dummy", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "build_detector._parse_losses", "build_detector.eval", "float", "float", "torch.no_grad", "zip", "loss.item", "loss.item", "build_detector.forward", "batch_results.append"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["", "def", "test_sparse_rcnn_forward", "(", ")", ":", "\n", "    ", "config_path", "=", "'sparse_rcnn/sparse_rcnn_r50_fpn_1x_coco.py'", "\n", "model", "=", "_get_detector_cfg", "(", "config_path", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ")", "\n", "input_shape", "=", "(", "1", ",", "3", ",", "550", ",", "550", ")", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_items", "=", "[", "5", "]", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "# Test forward train with non-empty truth batch", "\n", "detector", "=", "detector", "\n", "imgs", "=", "imgs", "\n", "detector", ".", "train", "(", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_bboxes", "=", "[", "item", "for", "item", "in", "gt_bboxes", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "gt_labels", "=", "[", "item", "for", "item", "in", "gt_labels", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "loss", ",", "_", "=", "detector", ".", "_parse_losses", "(", "losses", ")", "\n", "assert", "float", "(", "loss", ".", "item", "(", ")", ")", ">", "0", "\n", "detector", ".", "forward_dummy", "(", "imgs", ")", "\n", "\n", "# Test forward train with an empty truth batch", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_items", "=", "[", "0", "]", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "imgs", "=", "imgs", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_bboxes", "=", "[", "item", "for", "item", "in", "gt_bboxes", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "gt_labels", "=", "[", "item", "for", "item", "in", "gt_labels", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "loss", ",", "_", "=", "detector", ".", "_parse_losses", "(", "losses", ")", "\n", "assert", "float", "(", "loss", ".", "item", "(", ")", ")", ">", "0", "\n", "\n", "# Test forward test", "\n", "detector", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img_list", "=", "[", "g", "[", "None", ",", ":", "]", "for", "g", "in", "imgs", "]", "\n", "batch_results", "=", "[", "]", "\n", "for", "one_img", ",", "one_meta", "in", "zip", "(", "img_list", ",", "img_metas", ")", ":", "\n", "            ", "result", "=", "detector", ".", "forward", "(", "[", "one_img", "]", ",", "[", "[", "one_meta", "]", "]", ",", "\n", "rescale", "=", "True", ",", "\n", "return_loss", "=", "False", ")", "\n", "batch_results", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward.test_rpn_forward": [[105, 132], ["test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "torch.no_grad", "zip", "build_detector.forward", "batch_results.append"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["", "", "", "def", "test_rpn_forward", "(", ")", ":", "\n", "    ", "model", "=", "_get_detector_cfg", "(", "'rpn/rpn_r50_fpn_1x_coco.py'", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ")", "\n", "\n", "input_shape", "=", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ")", "\n", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "\n", "# Test forward train", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "img_metas", ",", "gt_bboxes", "=", "gt_bboxes", ",", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "\n", "# Test forward test", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img_list", "=", "[", "g", "[", "None", ",", ":", "]", "for", "g", "in", "imgs", "]", "\n", "batch_results", "=", "[", "]", "\n", "for", "one_img", ",", "one_meta", "in", "zip", "(", "img_list", ",", "img_metas", ")", ":", "\n", "            ", "result", "=", "detector", ".", "forward", "(", "[", "one_img", "]", ",", "[", "[", "one_meta", "]", "]", ",", "\n", "return_loss", "=", "False", ")", "\n", "batch_results", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward.test_single_stage_forward_gpu": [[134, 185], ["pytest.mark.parametrize", "test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "detector.cuda.cuda", "imgs.cuda.cuda", "detector.cuda.forward", "isinstance", "torch.cuda.is_available", "pytest.skip", "b.cuda", "g.cuda", "torch.no_grad", "zip", "detector.cuda.forward", "batch_results.append"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "'cfg_file'", ",", "\n", "[", "\n", "'retinanet/retinanet_r50_fpn_1x_coco.py'", ",", "\n", "'guided_anchoring/ga_retinanet_r50_fpn_1x_coco.py'", ",", "\n", "'ghm/retinanet_ghm_r50_fpn_1x_coco.py'", ",", "\n", "'fcos/fcos_center_r50_caffe_fpn_gn-head_1x_coco.py'", ",", "\n", "'foveabox/fovea_align_r50_fpn_gn-head_4x4_2x_coco.py'", ",", "\n", "# 'free_anchor/retinanet_free_anchor_r50_fpn_1x_coco.py',", "\n", "# 'atss/atss_r50_fpn_1x_coco.py',  # not ready for topk", "\n", "'reppoints/reppoints_moment_r50_fpn_1x_coco.py'", ",", "\n", "'yolo/yolov3_d53_mstrain-608_273e_coco.py'", "\n", "]", ")", "\n", "def", "test_single_stage_forward_gpu", "(", "cfg_file", ")", ":", "\n", "    ", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "import", "pytest", "\n", "pytest", ".", "skip", "(", "'test requires GPU and torch+cuda'", ")", "\n", "\n", "", "model", "=", "_get_detector_cfg", "(", "cfg_file", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ")", "\n", "\n", "input_shape", "=", "(", "2", ",", "3", ",", "224", ",", "224", ")", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ")", "\n", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "\n", "detector", "=", "detector", ".", "cuda", "(", ")", "\n", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "# Test forward train", "\n", "gt_bboxes", "=", "[", "b", ".", "cuda", "(", ")", "for", "b", "in", "mm_inputs", "[", "'gt_bboxes'", "]", "]", "\n", "gt_labels", "=", "[", "g", ".", "cuda", "(", ")", "for", "g", "in", "mm_inputs", "[", "'gt_labels'", "]", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "\n", "# Test forward test", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img_list", "=", "[", "g", "[", "None", ",", ":", "]", "for", "g", "in", "imgs", "]", "\n", "batch_results", "=", "[", "]", "\n", "for", "one_img", ",", "one_meta", "in", "zip", "(", "img_list", ",", "img_metas", ")", ":", "\n", "            ", "result", "=", "detector", ".", "forward", "(", "[", "one_img", "]", ",", "[", "[", "one_meta", "]", "]", ",", "\n", "return_loss", "=", "False", ")", "\n", "batch_results", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward.test_faster_rcnn_ohem_forward": [[187, 228], ["test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "build_detector._parse_losses", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "build_detector._parse_losses", "float", "float", "loss.item", "loss.item"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["", "", "", "def", "test_faster_rcnn_ohem_forward", "(", ")", ":", "\n", "    ", "model", "=", "_get_detector_cfg", "(", "\n", "'faster_rcnn/faster_rcnn_r50_fpn_ohem_1x_coco.py'", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ")", "\n", "\n", "input_shape", "=", "(", "1", ",", "3", ",", "256", ",", "256", ")", "\n", "\n", "# Test forward train with a non-empty truth batch", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_items", "=", "[", "10", "]", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "loss", ",", "_", "=", "detector", ".", "_parse_losses", "(", "losses", ")", "\n", "assert", "float", "(", "loss", ".", "item", "(", ")", ")", ">", "0", "\n", "\n", "# Test forward train with an empty truth batch", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_items", "=", "[", "0", "]", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "loss", ",", "_", "=", "detector", ".", "_parse_losses", "(", "losses", ")", "\n", "assert", "float", "(", "loss", ".", "item", "(", ")", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward.test_two_stage_forward": [[230, 288], ["pytest.mark.parametrize", "test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "build_detector._parse_losses", "loss.requires_grad_", "loss.backward", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "build_detector._parse_losses", "loss.requires_grad_", "loss.backward", "float", "float", "torch.no_grad", "zip", "loss.item", "loss.item", "build_detector.forward", "batch_results.append"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'cfg_file'", ",", "[", "\n", "'cascade_rcnn/cascade_mask_rcnn_r50_fpn_1x_coco.py'", ",", "\n", "'mask_rcnn/mask_rcnn_r50_fpn_1x_coco.py'", ",", "\n", "'grid_rcnn/grid_rcnn_r50_fpn_gn-head_2x_coco.py'", ",", "\n", "'ms_rcnn/ms_rcnn_r50_fpn_1x_coco.py'", ",", "\n", "'htc/htc_r50_fpn_1x_coco.py'", ",", "\n", "'scnet/scnet_r50_fpn_20e_coco.py'", ",", "\n", "]", ")", "\n", "def", "test_two_stage_forward", "(", "cfg_file", ")", ":", "\n", "    ", "models_with_semantic", "=", "[", "\n", "'htc/htc_r50_fpn_1x_coco.py'", ",", "\n", "'scnet/scnet_r50_fpn_20e_coco.py'", ",", "\n", "]", "\n", "if", "cfg_file", "in", "models_with_semantic", ":", "\n", "        ", "with_semantic", "=", "True", "\n", "", "else", ":", "\n", "        ", "with_semantic", "=", "False", "\n", "\n", "", "model", "=", "_get_detector_cfg", "(", "cfg_file", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ")", "\n", "\n", "input_shape", "=", "(", "1", ",", "3", ",", "256", ",", "256", ")", "\n", "\n", "# Test forward train with a non-empty truth batch", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "\n", "input_shape", ",", "num_items", "=", "[", "10", "]", ",", "with_semantic", "=", "with_semantic", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "losses", "=", "detector", ".", "forward", "(", "imgs", ",", "img_metas", ",", "return_loss", "=", "True", ",", "**", "mm_inputs", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "loss", ",", "_", "=", "detector", ".", "_parse_losses", "(", "losses", ")", "\n", "loss", ".", "requires_grad_", "(", "True", ")", "\n", "assert", "float", "(", "loss", ".", "item", "(", ")", ")", ">", "0", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Test forward train with an empty truth batch", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "\n", "input_shape", ",", "num_items", "=", "[", "0", "]", ",", "with_semantic", "=", "with_semantic", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "losses", "=", "detector", ".", "forward", "(", "imgs", ",", "img_metas", ",", "return_loss", "=", "True", ",", "**", "mm_inputs", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "loss", ",", "_", "=", "detector", ".", "_parse_losses", "(", "losses", ")", "\n", "loss", ".", "requires_grad_", "(", "True", ")", "\n", "assert", "float", "(", "loss", ".", "item", "(", ")", ")", ">", "0", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Test forward test", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img_list", "=", "[", "g", "[", "None", ",", ":", "]", "for", "g", "in", "imgs", "]", "\n", "batch_results", "=", "[", "]", "\n", "for", "one_img", ",", "one_meta", "in", "zip", "(", "img_list", ",", "img_metas", ")", ":", "\n", "            ", "result", "=", "detector", ".", "forward", "(", "[", "one_img", "]", ",", "[", "[", "one_meta", "]", "]", ",", "\n", "return_loss", "=", "False", ")", "\n", "batch_results", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward.test_single_stage_forward_cpu": [[290, 324], ["pytest.mark.parametrize", "test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "torch.no_grad", "zip", "build_detector.forward", "batch_results.append"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "'cfg_file'", ",", "[", "'ghm/retinanet_ghm_r50_fpn_1x_coco.py'", ",", "'ssd/ssd300_coco.py'", "]", ")", "\n", "def", "test_single_stage_forward_cpu", "(", "cfg_file", ")", ":", "\n", "    ", "model", "=", "_get_detector_cfg", "(", "cfg_file", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ")", "\n", "\n", "input_shape", "=", "(", "1", ",", "3", ",", "300", ",", "300", ")", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ")", "\n", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "\n", "# Test forward train", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "\n", "# Test forward test", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img_list", "=", "[", "g", "[", "None", ",", ":", "]", "for", "g", "in", "imgs", "]", "\n", "batch_results", "=", "[", "]", "\n", "for", "one_img", ",", "one_meta", "in", "zip", "(", "img_list", ",", "img_metas", ")", ":", "\n", "            ", "result", "=", "detector", ".", "forward", "(", "[", "one_img", "]", ",", "[", "[", "one_meta", "]", "]", ",", "\n", "return_loss", "=", "False", ")", "\n", "batch_results", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs": [[326, 402], ["numpy.random.RandomState", "np.random.RandomState.rand", "range", "numpy.random.randint", "gt_masks.append", "np.random.RandomState.randint", "gt_bboxes.append", "gt_labels.append", "BitmapMasks", "torch.FloatTensor().requires_grad_", "numpy.random.randint", "mm_inputs.update", "range", "np.random.RandomState.randint", "np.random.RandomState.rand", "numpy.vstack", "torch.FloatTensor", "torch.LongTensor", "len", "torch.FloatTensor", "torch.ByteTensor"], "function", ["None"], ["", "", "", "def", "_demo_mm_inputs", "(", "input_shape", "=", "(", "1", ",", "3", ",", "300", ",", "300", ")", ",", "\n", "num_items", "=", "None", ",", "num_classes", "=", "10", ",", "\n", "with_semantic", "=", "False", ")", ":", "# yapf: disable", "\n", "    ", "\"\"\"Create a superset of inputs needed to run test or train batches.\n\n    Args:\n        input_shape (tuple):\n            input batch dimensions\n\n        num_items (None | List[int]):\n            specifies the number of boxes in each batch item\n\n        num_classes (int):\n            number of different labels a box might have\n    \"\"\"", "\n", "from", "mmdet", ".", "core", "import", "BitmapMasks", "\n", "\n", "(", "N", ",", "C", ",", "H", ",", "W", ")", "=", "input_shape", "\n", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "0", ")", "\n", "\n", "imgs", "=", "rng", ".", "rand", "(", "*", "input_shape", ")", "\n", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'ori_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'pad_shape'", ":", "(", "H", ",", "W", ",", "C", ")", ",", "\n", "'filename'", ":", "'<demo>.png'", ",", "\n", "'scale_factor'", ":", "1.0", ",", "\n", "'flip'", ":", "False", ",", "\n", "'flip_direction'", ":", "None", ",", "\n", "}", "for", "_", "in", "range", "(", "N", ")", "]", "\n", "\n", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_masks", "=", "[", "]", "\n", "\n", "for", "batch_idx", "in", "range", "(", "N", ")", ":", "\n", "        ", "if", "num_items", "is", "None", ":", "\n", "            ", "num_boxes", "=", "rng", ".", "randint", "(", "1", ",", "10", ")", "\n", "", "else", ":", "\n", "            ", "num_boxes", "=", "num_items", "[", "batch_idx", "]", "\n", "\n", "", "cx", ",", "cy", ",", "bw", ",", "bh", "=", "rng", ".", "rand", "(", "num_boxes", ",", "4", ")", ".", "T", "\n", "\n", "tl_x", "=", "(", "(", "cx", "*", "W", ")", "-", "(", "W", "*", "bw", "/", "2", ")", ")", ".", "clip", "(", "0", ",", "W", ")", "\n", "tl_y", "=", "(", "(", "cy", "*", "H", ")", "-", "(", "H", "*", "bh", "/", "2", ")", ")", ".", "clip", "(", "0", ",", "H", ")", "\n", "br_x", "=", "(", "(", "cx", "*", "W", ")", "+", "(", "W", "*", "bw", "/", "2", ")", ")", ".", "clip", "(", "0", ",", "W", ")", "\n", "br_y", "=", "(", "(", "cy", "*", "H", ")", "+", "(", "H", "*", "bh", "/", "2", ")", ")", ".", "clip", "(", "0", ",", "H", ")", "\n", "\n", "boxes", "=", "np", ".", "vstack", "(", "[", "tl_x", ",", "tl_y", ",", "br_x", ",", "br_y", "]", ")", ".", "T", "\n", "class_idxs", "=", "rng", ".", "randint", "(", "1", ",", "num_classes", ",", "size", "=", "num_boxes", ")", "\n", "\n", "gt_bboxes", ".", "append", "(", "torch", ".", "FloatTensor", "(", "boxes", ")", ")", "\n", "gt_labels", ".", "append", "(", "torch", ".", "LongTensor", "(", "class_idxs", ")", ")", "\n", "\n", "", "mask", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "(", "len", "(", "boxes", ")", ",", "H", ",", "W", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "gt_masks", ".", "append", "(", "BitmapMasks", "(", "mask", ",", "H", ",", "W", ")", ")", "\n", "\n", "mm_inputs", "=", "{", "\n", "'imgs'", ":", "torch", ".", "FloatTensor", "(", "imgs", ")", ".", "requires_grad_", "(", "True", ")", ",", "\n", "'img_metas'", ":", "img_metas", ",", "\n", "'gt_bboxes'", ":", "gt_bboxes", ",", "\n", "'gt_labels'", ":", "gt_labels", ",", "\n", "'gt_bboxes_ignore'", ":", "None", ",", "\n", "'gt_masks'", ":", "gt_masks", ",", "\n", "}", "\n", "\n", "if", "with_semantic", ":", "\n", "# assume gt_semantic_seg using scale 1/8 of the img", "\n", "        ", "gt_semantic_seg", "=", "np", ".", "random", ".", "randint", "(", "\n", "0", ",", "num_classes", ",", "(", "1", ",", "1", ",", "H", "//", "8", ",", "W", "//", "8", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "mm_inputs", ".", "update", "(", "\n", "{", "'gt_semantic_seg'", ":", "torch", ".", "ByteTensor", "(", "gt_semantic_seg", ")", "}", ")", "\n", "\n", "", "return", "mm_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward.test_yolact_forward": [[404, 441], ["test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.train", "build_detector.forward", "isinstance", "build_detector.eval", "torch.no_grad", "zip", "build_detector.forward", "batch_results.append"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["", "def", "test_yolact_forward", "(", ")", ":", "\n", "    ", "model", "=", "_get_detector_cfg", "(", "'yolact/yolact_r50_1x8_coco.py'", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ")", "\n", "\n", "input_shape", "=", "(", "1", ",", "3", ",", "100", ",", "100", ")", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ")", "\n", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "\n", "# Test forward train", "\n", "detector", ".", "train", "(", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "gt_masks", "=", "mm_inputs", "[", "'gt_masks'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "gt_masks", "=", "gt_masks", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "\n", "# Test forward test", "\n", "detector", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img_list", "=", "[", "g", "[", "None", ",", ":", "]", "for", "g", "in", "imgs", "]", "\n", "batch_results", "=", "[", "]", "\n", "for", "one_img", ",", "one_meta", "in", "zip", "(", "img_list", ",", "img_metas", ")", ":", "\n", "            ", "result", "=", "detector", ".", "forward", "(", "[", "one_img", "]", ",", "[", "[", "one_meta", "]", "]", ",", "\n", "rescale", "=", "True", ",", "\n", "return_loss", "=", "False", ")", "\n", "batch_results", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward.test_detr_forward": [[443, 496], ["test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.train", "build_detector.forward", "isinstance", "build_detector._parse_losses", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "build_detector._parse_losses", "build_detector.eval", "float", "float", "torch.no_grad", "zip", "loss.item", "loss.item", "build_detector.forward", "batch_results.append"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["", "", "", "def", "test_detr_forward", "(", ")", ":", "\n", "    ", "model", "=", "_get_detector_cfg", "(", "'detr/detr_r50_8x2_150e_coco.py'", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ")", "\n", "\n", "input_shape", "=", "(", "1", ",", "3", ",", "100", ",", "100", ")", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ")", "\n", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "\n", "# Test forward train with non-empty truth batch", "\n", "detector", ".", "train", "(", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "loss", ",", "_", "=", "detector", ".", "_parse_losses", "(", "losses", ")", "\n", "assert", "float", "(", "loss", ".", "item", "(", ")", ")", ">", "0", "\n", "\n", "# Test forward train with an empty truth batch", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_items", "=", "[", "0", "]", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "loss", ",", "_", "=", "detector", ".", "_parse_losses", "(", "losses", ")", "\n", "assert", "float", "(", "loss", ".", "item", "(", ")", ")", ">", "0", "\n", "\n", "# Test forward test", "\n", "detector", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img_list", "=", "[", "g", "[", "None", ",", ":", "]", "for", "g", "in", "imgs", "]", "\n", "batch_results", "=", "[", "]", "\n", "for", "one_img", ",", "one_meta", "in", "zip", "(", "img_list", ",", "img_metas", ")", ":", "\n", "            ", "result", "=", "detector", ".", "forward", "(", "[", "one_img", "]", ",", "[", "[", "one_meta", "]", "]", ",", "\n", "rescale", "=", "True", ",", "\n", "return_loss", "=", "False", ")", "\n", "batch_results", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward.test_kd_single_stage_forward": [[498, 551], ["test_forward._get_detector_cfg", "build_detector", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.train", "build_detector.forward", "isinstance", "build_detector._parse_losses", "test_forward._demo_mm_inputs", "_demo_mm_inputs.pop", "_demo_mm_inputs.pop", "build_detector.forward", "isinstance", "build_detector._parse_losses", "build_detector.eval", "float", "float", "torch.no_grad", "zip", "loss.item", "loss.item", "build_detector.forward", "batch_results.append"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_detector_cfg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._demo_mm_inputs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["", "", "", "def", "test_kd_single_stage_forward", "(", ")", ":", "\n", "    ", "model", "=", "_get_detector_cfg", "(", "'ld/ld_r18_gflv1_r101_fpn_coco_1x.py'", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "detector", "=", "build_detector", "(", "model", ")", "\n", "\n", "input_shape", "=", "(", "1", ",", "3", ",", "100", ",", "100", ")", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ")", "\n", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "\n", "# Test forward train with non-empty truth batch", "\n", "detector", ".", "train", "(", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "loss", ",", "_", "=", "detector", ".", "_parse_losses", "(", "losses", ")", "\n", "assert", "float", "(", "loss", ".", "item", "(", ")", ")", ">", "0", "\n", "\n", "# Test forward train with an empty truth batch", "\n", "mm_inputs", "=", "_demo_mm_inputs", "(", "input_shape", ",", "num_items", "=", "[", "0", "]", ")", "\n", "imgs", "=", "mm_inputs", ".", "pop", "(", "'imgs'", ")", "\n", "img_metas", "=", "mm_inputs", ".", "pop", "(", "'img_metas'", ")", "\n", "gt_bboxes", "=", "mm_inputs", "[", "'gt_bboxes'", "]", "\n", "gt_labels", "=", "mm_inputs", "[", "'gt_labels'", "]", "\n", "losses", "=", "detector", ".", "forward", "(", "\n", "imgs", ",", "\n", "img_metas", ",", "\n", "gt_bboxes", "=", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "return_loss", "=", "True", ")", "\n", "assert", "isinstance", "(", "losses", ",", "dict", ")", "\n", "loss", ",", "_", "=", "detector", ".", "_parse_losses", "(", "losses", ")", "\n", "assert", "float", "(", "loss", ".", "item", "(", ")", ")", ">", "0", "\n", "\n", "# Test forward test", "\n", "detector", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "img_list", "=", "[", "g", "[", "None", ",", ":", "]", "for", "g", "in", "imgs", "]", "\n", "batch_results", "=", "[", "]", "\n", "for", "one_img", ",", "one_meta", "in", "zip", "(", "img_list", ",", "img_metas", ")", ":", "\n", "            ", "result", "=", "detector", ".", "forward", "(", "[", "one_img", "]", ",", "[", "[", "one_meta", "]", "]", ",", "\n", "rescale", "=", "True", ",", "\n", "return_loss", "=", "False", ")", "\n", "batch_results", ".", "append", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward.test_inference_detector": [[553, 609], ["dict", "numpy.random.RandomState", "np.random.RandomState.rand", "np.random.RandomState.rand", "build_detector", "test_forward._get_config_module", "inference_detector", "inference_detector", "ConfigDict", "len", "dict", "dict", "dict", "len", "len", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_config_module", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.inference.inference_detector", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.inference.inference_detector"], ["", "", "", "def", "test_inference_detector", "(", ")", ":", "\n", "    ", "from", "mmdet", ".", "apis", "import", "inference_detector", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "from", "mmcv", "import", "ConfigDict", "\n", "\n", "# small RetinaNet", "\n", "num_class", "=", "3", "\n", "model_dict", "=", "dict", "(", "\n", "type", "=", "'RetinaNet'", ",", "\n", "pretrained", "=", "None", ",", "\n", "backbone", "=", "dict", "(", "\n", "type", "=", "'ResNet'", ",", "\n", "depth", "=", "18", ",", "\n", "num_stages", "=", "4", ",", "\n", "out_indices", "=", "(", "3", ",", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'BN'", ",", "requires_grad", "=", "False", ")", ",", "\n", "norm_eval", "=", "True", ",", "\n", "style", "=", "'pytorch'", ")", ",", "\n", "neck", "=", "None", ",", "\n", "bbox_head", "=", "dict", "(", "\n", "type", "=", "'RetinaHead'", ",", "\n", "num_classes", "=", "num_class", ",", "\n", "in_channels", "=", "512", ",", "\n", "stacked_convs", "=", "1", ",", "\n", "feat_channels", "=", "256", ",", "\n", "anchor_generator", "=", "dict", "(", "\n", "type", "=", "'AnchorGenerator'", ",", "\n", "octave_base_scale", "=", "4", ",", "\n", "scales_per_octave", "=", "3", ",", "\n", "ratios", "=", "[", "0.5", "]", ",", "\n", "strides", "=", "[", "32", "]", ")", ",", "\n", "bbox_coder", "=", "dict", "(", "\n", "type", "=", "'DeltaXYWHBBoxCoder'", ",", "\n", "target_means", "=", "[", ".0", ",", ".0", ",", ".0", ",", ".0", "]", ",", "\n", "target_stds", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ")", ",", "\n", ")", ",", "\n", "test_cfg", "=", "dict", "(", "\n", "nms_pre", "=", "1000", ",", "\n", "min_bbox_size", "=", "0", ",", "\n", "score_thr", "=", "0.05", ",", "\n", "nms", "=", "dict", "(", "type", "=", "'nms'", ",", "iou_threshold", "=", "0.5", ")", ",", "\n", "max_per_img", "=", "100", ")", ")", "\n", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "0", ")", "\n", "img1", "=", "rng", ".", "rand", "(", "100", ",", "100", ",", "3", ")", "\n", "img2", "=", "rng", ".", "rand", "(", "100", ",", "100", ",", "3", ")", "\n", "\n", "model", "=", "build_detector", "(", "ConfigDict", "(", "model_dict", ")", ")", "\n", "config", "=", "_get_config_module", "(", "'retinanet/retinanet_r50_fpn_1x_coco.py'", ")", "\n", "model", ".", "cfg", "=", "config", "\n", "# test single image", "\n", "result", "=", "inference_detector", "(", "model", ",", "img1", ")", "\n", "assert", "len", "(", "result", ")", "==", "num_class", "\n", "# test multiple image", "\n", "result", "=", "inference_detector", "(", "model", ",", "[", "img1", ",", "img2", "]", ")", "\n", "assert", "len", "(", "result", ")", "==", "2", "and", "len", "(", "result", "[", "0", "]", ")", "==", "num_class", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_hourglass.test_hourglass_backbone": [[7, 45], ["mmdet.models.backbones.hourglass.HourglassNet", "mmdet.models.backbones.hourglass.HourglassNet.init_weights", "mmdet.models.backbones.hourglass.HourglassNet.train", "torch.randn", "mmdet.models.backbones.hourglass.HourglassNet.", "mmdet.models.backbones.hourglass.HourglassNet", "mmdet.models.backbones.hourglass.HourglassNet.init_weights", "mmdet.models.backbones.hourglass.HourglassNet.train", "torch.randn", "mmdet.models.backbones.hourglass.HourglassNet.", "pytest.raises", "mmdet.models.backbones.hourglass.HourglassNet", "pytest.raises", "mmdet.models.backbones.hourglass.HourglassNet", "pytest.raises", "mmdet.models.backbones.hourglass.HourglassNet", "len", "torch.Size", "len", "torch.Size", "torch.Size"], "function", ["None"], ["def", "test_hourglass_backbone", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# HourglassNet's num_stacks should larger than 0", "\n", "        ", "HourglassNet", "(", "num_stacks", "=", "0", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# len(stage_channels) should equal len(stage_blocks)", "\n", "        ", "HourglassNet", "(", "\n", "stage_channels", "=", "[", "256", ",", "256", ",", "384", ",", "384", ",", "384", "]", ",", "\n", "stage_blocks", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "4", "]", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# len(stage_channels) should lagrer than downsample_times", "\n", "        ", "HourglassNet", "(", "\n", "downsample_times", "=", "5", ",", "\n", "stage_channels", "=", "[", "256", ",", "256", ",", "384", ",", "384", ",", "384", "]", ",", "\n", "stage_blocks", "=", "[", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n", "# Test HourglassNet-52", "\n", "", "model", "=", "HourglassNet", "(", "num_stacks", "=", "1", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "256", ",", "256", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "1", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "64", ",", "64", "]", ")", "\n", "\n", "# Test HourglassNet-104", "\n", "model", "=", "HourglassNet", "(", "num_stacks", "=", "2", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "256", ",", "256", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "2", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "64", ",", "64", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "64", ",", "64", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_res2net.test_res2net_bottle2neck": [[9, 41], ["mmdet.models.backbones.res2net.Bottle2neck", "dict", "mmdet.models.backbones.res2net.Bottle2neck", "mmdet.models.backbones.res2net.Bottle2neck", "torch.randn", "mmdet.models.backbones.res2net.Bottle2neck.", "pytest.raises", "mmdet.models.backbones.res2net.Bottle2neck", "pytest.raises", "mmdet.models.backbones.res2net.Bottle2neck", "pytest.raises", "mmdet.models.backbones.res2net.Bottle2neck", "torch.Size", "dict"], "function", ["None"], ["def", "test_res2net_bottle2neck", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Style must be in ['pytorch', 'caffe']", "\n", "        ", "Bottle2neck", "(", "64", ",", "64", ",", "base_width", "=", "26", ",", "scales", "=", "4", ",", "style", "=", "'tensorflow'", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Scale must be larger than 1", "\n", "        ", "Bottle2neck", "(", "64", ",", "64", ",", "base_width", "=", "26", ",", "scales", "=", "1", ",", "style", "=", "'pytorch'", ")", "\n", "\n", "# Test Res2Net Bottle2neck structure", "\n", "", "block", "=", "Bottle2neck", "(", "\n", "64", ",", "64", ",", "base_width", "=", "26", ",", "stride", "=", "2", ",", "scales", "=", "4", ",", "style", "=", "'pytorch'", ")", "\n", "assert", "block", ".", "scales", "==", "4", "\n", "\n", "# Test Res2Net Bottle2neck with DCN", "\n", "dcn", "=", "dict", "(", "type", "=", "'DCN'", ",", "deform_groups", "=", "1", ",", "fallback_on_stride", "=", "False", ")", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# conv_cfg must be None if dcn is not None", "\n", "        ", "Bottle2neck", "(", "\n", "64", ",", "\n", "64", ",", "\n", "base_width", "=", "26", ",", "\n", "scales", "=", "4", ",", "\n", "dcn", "=", "dcn", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv'", ")", ")", "\n", "", "Bottle2neck", "(", "64", ",", "64", ",", "dcn", "=", "dcn", ")", "\n", "\n", "# Test Res2Net Bottle2neck forward", "\n", "block", "=", "Bottle2neck", "(", "64", ",", "16", ",", "base_width", "=", "26", ",", "scales", "=", "4", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_res2net.test_res2net_backbone": [[43, 63], ["mmdet.models.backbones.Res2Net", "mmdet.models.backbones.Res2Net.modules", "mmdet.models.backbones.Res2Net.init_weights", "mmdet.models.backbones.Res2Net.train", "torch.randn", "mmdet.models.backbones.Res2Net.", "pytest.raises", "mmdet.models.backbones.Res2Net", "utils.is_block", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_block"], ["", "def", "test_res2net_backbone", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "# Res2Net depth should be in [50, 101, 152]", "\n", "        ", "Res2Net", "(", "depth", "=", "18", ")", "\n", "\n", "# Test Res2Net with scales 4, base_width 26", "\n", "", "model", "=", "Res2Net", "(", "depth", "=", "50", ",", "scales", "=", "4", ",", "base_width", "=", "26", ")", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "m", ".", "scales", "==", "4", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_trident_resnet.test_trident_resnet_bottleneck": [[8, 153], ["mmdet.models.backbones.trident_resnet.TridentBottleneck", "torch.randn", "mmdet.models.backbones.trident_resnet.TridentBottleneck.", "mmdet.models.backbones.trident_resnet.TridentBottleneck", "mmdet.models.backbones.trident_resnet.TridentBottleneck", "mmdet.models.backbones.trident_resnet.TridentBottleneck", "torch.randn", "mmdet.models.backbones.trident_resnet.TridentBottleneck.", "mmdet.models.backbones.trident_resnet.TridentBottleneck", "torch.randn", "mmdet.models.backbones.trident_resnet.TridentBottleneck.", "mmdet.models.backbones.trident_resnet.TridentBottleneck", "torch.randn", "mmdet.models.backbones.trident_resnet.TridentBottleneck.", "mmdet.models.backbones.trident_resnet.TridentBottleneck", "torch.randn", "mmdet.models.backbones.trident_resnet.TridentBottleneck.", "mmdet.models.backbones.trident_resnet.TridentBottleneck", "torch.randn", "mmdet.models.backbones.trident_resnet.TridentBottleneck.", "pytest.raises", "mmdet.models.backbones.trident_resnet.TridentBottleneck", "pytest.raises", "mmdet.models.backbones.trident_resnet.TridentBottleneck", "pytest.raises", "mmdet.models.backbones.trident_resnet.TridentBottleneck", "pytest.raises", "mmdet.models.backbones.trident_resnet.TridentBottleneck", "torch.Size", "torch.Size", "dict", "torch.Size", "dict", "torch.Size", "dict", "dict", "dict", "torch.Size", "dict", "dict", "dict", "torch.Size", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["None"], ["def", "test_trident_resnet_bottleneck", "(", ")", ":", "\n", "    ", "trident_dilations", "=", "(", "1", ",", "2", ",", "3", ")", "\n", "test_branch_idx", "=", "1", "\n", "concat_output", "=", "True", "\n", "trident_build_config", "=", "(", "trident_dilations", ",", "test_branch_idx", ",", "concat_output", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Style must be in ['pytorch', 'caffe']", "\n", "        ", "TridentBottleneck", "(", "\n", "*", "trident_build_config", ",", "inplanes", "=", "64", ",", "planes", "=", "64", ",", "style", "=", "'tensorflow'", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Allowed positions are 'after_conv1', 'after_conv2', 'after_conv3'", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv4'", ")", "\n", "]", "\n", "TridentBottleneck", "(", "\n", "*", "trident_build_config", ",", "inplanes", "=", "64", ",", "planes", "=", "16", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Need to specify different postfix to avoid duplicate plugin name", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "TridentBottleneck", "(", "\n", "*", "trident_build_config", ",", "inplanes", "=", "64", ",", "planes", "=", "16", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "# Plugin type is not supported", "\n", "        ", "plugins", "=", "[", "dict", "(", "cfg", "=", "dict", "(", "type", "=", "'WrongPlugin'", ")", ",", "position", "=", "'after_conv3'", ")", "]", "\n", "TridentBottleneck", "(", "\n", "*", "trident_build_config", ",", "inplanes", "=", "64", ",", "planes", "=", "16", ",", "plugins", "=", "plugins", ")", "\n", "\n", "# Test Bottleneck with checkpoint forward", "\n", "", "block", "=", "TridentBottleneck", "(", "\n", "*", "trident_build_config", ",", "inplanes", "=", "64", ",", "planes", "=", "16", ",", "with_cp", "=", "True", ")", "\n", "assert", "block", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "block", ".", "num_branch", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck style", "\n", "block", "=", "TridentBottleneck", "(", "\n", "*", "trident_build_config", ",", "\n", "inplanes", "=", "64", ",", "\n", "planes", "=", "64", ",", "\n", "stride", "=", "2", ",", "\n", "style", "=", "'pytorch'", ")", "\n", "assert", "block", ".", "conv1", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "conv2", ".", "stride", "==", "(", "2", ",", "2", ")", "\n", "block", "=", "TridentBottleneck", "(", "\n", "*", "trident_build_config", ",", "inplanes", "=", "64", ",", "planes", "=", "64", ",", "stride", "=", "2", ",", "style", "=", "'caffe'", ")", "\n", "assert", "block", ".", "conv1", ".", "stride", "==", "(", "2", ",", "2", ")", "\n", "assert", "block", ".", "conv2", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "\n", "# Test Bottleneck forward", "\n", "block", "=", "TridentBottleneck", "(", "*", "trident_build_config", ",", "inplanes", "=", "64", ",", "planes", "=", "16", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "block", ".", "num_branch", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck with 1 ContextBlock after conv3", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "block", "=", "TridentBottleneck", "(", "\n", "*", "trident_build_config", ",", "inplanes", "=", "64", ",", "planes", "=", "16", ",", "plugins", "=", "plugins", ")", "\n", "assert", "block", ".", "context_block", ".", "in_channels", "==", "64", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "block", ".", "num_branch", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck with 1 GeneralizedAttention after conv2", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "position", "=", "'after_conv2'", ")", "\n", "]", "\n", "block", "=", "TridentBottleneck", "(", "\n", "*", "trident_build_config", ",", "inplanes", "=", "64", ",", "planes", "=", "16", ",", "plugins", "=", "plugins", ")", "\n", "assert", "block", ".", "gen_attention_block", ".", "in_channels", "==", "16", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "block", ".", "num_branch", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck with 1 GeneralizedAttention after conv2, 1 NonLocal2D", "\n", "# after conv2, 1 ContextBlock after conv3", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "position", "=", "'after_conv2'", ")", ",", "\n", "dict", "(", "cfg", "=", "dict", "(", "type", "=", "'NonLocal2d'", ")", ",", "position", "=", "'after_conv2'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "block", "=", "TridentBottleneck", "(", "\n", "*", "trident_build_config", ",", "inplanes", "=", "64", ",", "planes", "=", "16", ",", "plugins", "=", "plugins", ")", "\n", "assert", "block", ".", "gen_attention_block", ".", "in_channels", "==", "16", "\n", "assert", "block", ".", "nonlocal_block", ".", "in_channels", "==", "16", "\n", "assert", "block", ".", "context_block", ".", "in_channels", "==", "64", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "block", ".", "num_branch", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck with 1 ContextBlock after conv2, 2 ContextBlock after", "\n", "# conv3", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ",", "postfix", "=", "1", ")", ",", "\n", "position", "=", "'after_conv2'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ",", "postfix", "=", "2", ")", ",", "\n", "position", "=", "'after_conv3'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ",", "postfix", "=", "3", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "block", "=", "TridentBottleneck", "(", "\n", "*", "trident_build_config", ",", "inplanes", "=", "64", ",", "planes", "=", "16", ",", "plugins", "=", "plugins", ")", "\n", "assert", "block", ".", "context_block1", ".", "in_channels", "==", "16", "\n", "assert", "block", ".", "context_block2", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "context_block3", ".", "in_channels", "==", "64", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "block", ".", "num_branch", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_trident_resnet.test_trident_resnet_backbone": [[155, 181], ["dict", "mmdet.models.backbones.TridentResNet", "mmdet.models.backbones.TridentResNet.init_weights", "mmdet.models.backbones.TridentResNet.train", "torch.randn", "mmdet.models.backbones.TridentResNet.", "pytest.raises", "mmdet.models.backbones.TridentResNet", "pytest.raises", "mmdet.models.backbones.TridentResNet", "len", "torch.Size"], "function", ["None"], ["", "def", "test_trident_resnet_backbone", "(", ")", ":", "\n", "    ", "tridentresnet_config", "=", "dict", "(", "\n", "num_branch", "=", "3", ",", "\n", "test_branch_idx", "=", "1", ",", "\n", "strides", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "dilations", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "trident_dilations", "=", "(", "1", ",", "2", ",", "3", ")", ",", "\n", "out_indices", "=", "(", "2", ",", ")", ",", "\n", ")", "\n", "\"\"\"Test tridentresnet backbone.\"\"\"", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# TridentResNet depth should be in [50, 101, 152]", "\n", "        ", "TridentResNet", "(", "18", ",", "**", "tridentresnet_config", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# In TridentResNet: num_stages == 3", "\n", "        ", "TridentResNet", "(", "50", ",", "num_stages", "=", "4", ",", "**", "tridentresnet_config", ")", "\n", "\n", "", "model", "=", "TridentResNet", "(", "50", ",", "num_stages", "=", "3", ",", "**", "tridentresnet_config", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "1", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "3", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_resnest.test_resnest_bottleneck": [[8, 24], ["mmdet.models.backbones.resnest.Bottleneck", "mmdet.models.backbones.resnest.Bottleneck", "torch.randn", "mmdet.models.backbones.resnest.Bottleneck", "pytest.raises", "mmdet.models.backbones.resnest.Bottleneck", "torch.Size"], "function", ["None"], ["def", "test_resnest_bottleneck", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Style must be in ['pytorch', 'caffe']", "\n", "        ", "BottleneckS", "(", "64", ",", "64", ",", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "style", "=", "'tensorflow'", ")", "\n", "\n", "# Test ResNeSt Bottleneck structure", "\n", "", "block", "=", "BottleneckS", "(", "\n", "64", ",", "256", ",", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "stride", "=", "2", ",", "style", "=", "'pytorch'", ")", "\n", "assert", "block", ".", "avd_layer", ".", "stride", "==", "2", "\n", "assert", "block", ".", "conv2", ".", "channels", "==", "256", "\n", "\n", "# Test ResNeSt Bottleneck forward", "\n", "block", "=", "BottleneckS", "(", "64", ",", "16", ",", "radix", "=", "2", ",", "reduction_factor", "=", "4", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_resnest.test_resnest_backbone": [[26, 44], ["mmdet.models.backbones.ResNeSt", "mmdet.models.backbones.ResNeSt.init_weights", "mmdet.models.backbones.ResNeSt.train", "torch.randn", "mmdet.models.backbones.ResNeSt.", "pytest.raises", "mmdet.models.backbones.ResNeSt", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "function", ["None"], ["", "def", "test_resnest_backbone", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "# ResNeSt depth should be in [50, 101, 152, 200]", "\n", "        ", "ResNeSt", "(", "depth", "=", "18", ")", "\n", "\n", "# Test ResNeSt with radix 2, reduction_factor 4", "\n", "", "model", "=", "ResNeSt", "(", "\n", "depth", "=", "50", ",", "radix", "=", "2", ",", "reduction_factor", "=", "4", ",", "out_indices", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "2", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_resnet.test_resnet_basic_block": [[14, 61], ["mmdet.models.backbones.resnet.BasicBlock", "torch.randn", "mmdet.models.backbones.resnet.BasicBlock.", "mmdet.models.backbones.resnet.BasicBlock", "torch.randn", "mmdet.models.backbones.resnet.BasicBlock.", "pytest.raises", "dict", "mmdet.models.backbones.resnet.BasicBlock", "pytest.raises", "mmdet.models.backbones.resnet.BasicBlock", "pytest.raises", "mmdet.models.backbones.resnet.BasicBlock", "torch.Size", "torch.Size", "dict", "dict", "dict", "dict"], "function", ["None"], ["def", "test_resnet_basic_block", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet.", "\n", "        ", "dcn", "=", "dict", "(", "type", "=", "'DCN'", ",", "deform_groups", "=", "1", ",", "fallback_on_stride", "=", "False", ")", "\n", "BasicBlock", "(", "64", ",", "64", ",", "dcn", "=", "dcn", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet.", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "BasicBlock", "(", "64", ",", "64", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "position", "=", "'after_conv2'", ")", "\n", "]", "\n", "BasicBlock", "(", "64", ",", "64", ",", "plugins", "=", "plugins", ")", "\n", "\n", "# test BasicBlock structure and forward", "\n", "", "block", "=", "BasicBlock", "(", "64", ",", "64", ")", "\n", "assert", "block", ".", "conv1", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "conv1", ".", "out_channels", "==", "64", "\n", "assert", "block", ".", "conv1", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "conv2", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "conv2", ".", "out_channels", "==", "64", "\n", "assert", "block", ".", "conv2", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test BasicBlock with checkpoint forward", "\n", "block", "=", "BasicBlock", "(", "64", ",", "64", ",", "with_cp", "=", "True", ")", "\n", "assert", "block", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_resnet.test_resnet_bottleneck": [[63, 195], ["mmdet.models.backbones.resnet.Bottleneck", "torch.randn", "mmdet.models.backbones.resnet.Bottleneck.", "mmdet.models.backbones.resnet.Bottleneck", "mmdet.models.backbones.resnet.Bottleneck", "dict", "mmdet.models.backbones.resnet.Bottleneck", "isinstance", "mmdet.models.backbones.resnet.Bottleneck", "torch.randn", "mmdet.models.backbones.resnet.Bottleneck.", "mmdet.models.backbones.resnet.Bottleneck", "torch.randn", "mmdet.models.backbones.resnet.Bottleneck.", "mmdet.models.backbones.resnet.Bottleneck", "torch.randn", "mmdet.models.backbones.resnet.Bottleneck.", "mmdet.models.backbones.resnet.Bottleneck", "torch.randn", "mmdet.models.backbones.resnet.Bottleneck.", "mmdet.models.backbones.resnet.Bottleneck", "torch.randn", "mmdet.models.backbones.resnet.Bottleneck.", "pytest.raises", "mmdet.models.backbones.resnet.Bottleneck", "pytest.raises", "mmdet.models.backbones.resnet.Bottleneck", "pytest.raises", "mmdet.models.backbones.resnet.Bottleneck", "pytest.raises", "mmdet.models.backbones.resnet.Bottleneck", "torch.Size", "pytest.raises", "mmdet.models.backbones.resnet.Bottleneck", "torch.Size", "dict", "torch.Size", "dict", "torch.Size", "dict", "dict", "dict", "torch.Size", "dict", "dict", "dict", "torch.Size", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["None"], ["", "def", "test_resnet_bottleneck", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Style must be in ['pytorch', 'caffe']", "\n", "        ", "Bottleneck", "(", "64", ",", "64", ",", "style", "=", "'tensorflow'", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Allowed positions are 'after_conv1', 'after_conv2', 'after_conv3'", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv4'", ")", "\n", "]", "\n", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Need to specify different postfix to avoid duplicate plugin name", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "# Plugin type is not supported", "\n", "        ", "plugins", "=", "[", "dict", "(", "cfg", "=", "dict", "(", "type", "=", "'WrongPlugin'", ")", ",", "position", "=", "'after_conv3'", ")", "]", "\n", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "\n", "# Test Bottleneck with checkpoint forward", "\n", "", "block", "=", "Bottleneck", "(", "64", ",", "16", ",", "with_cp", "=", "True", ")", "\n", "assert", "block", ".", "with_cp", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck style", "\n", "block", "=", "Bottleneck", "(", "64", ",", "64", ",", "stride", "=", "2", ",", "style", "=", "'pytorch'", ")", "\n", "assert", "block", ".", "conv1", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "assert", "block", ".", "conv2", ".", "stride", "==", "(", "2", ",", "2", ")", "\n", "block", "=", "Bottleneck", "(", "64", ",", "64", ",", "stride", "=", "2", ",", "style", "=", "'caffe'", ")", "\n", "assert", "block", ".", "conv1", ".", "stride", "==", "(", "2", ",", "2", ")", "\n", "assert", "block", ".", "conv2", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "\n", "# Test Bottleneck DCN", "\n", "dcn", "=", "dict", "(", "type", "=", "'DCN'", ",", "deform_groups", "=", "1", ",", "fallback_on_stride", "=", "False", ")", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "Bottleneck", "(", "64", ",", "64", ",", "dcn", "=", "dcn", ",", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv'", ")", ")", "\n", "", "block", "=", "Bottleneck", "(", "64", ",", "64", ",", "dcn", "=", "dcn", ")", "\n", "assert", "isinstance", "(", "block", ".", "conv2", ",", "DeformConv2dPack", ")", "\n", "\n", "# Test Bottleneck forward", "\n", "block", "=", "Bottleneck", "(", "64", ",", "16", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck with 1 ContextBlock after conv3", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "block", "=", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "assert", "block", ".", "context_block", ".", "in_channels", "==", "64", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck with 1 GeneralizedAttention after conv2", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "position", "=", "'after_conv2'", ")", "\n", "]", "\n", "block", "=", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "assert", "block", ".", "gen_attention_block", ".", "in_channels", "==", "16", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck with 1 GeneralizedAttention after conv2, 1 NonLocal2D", "\n", "# after conv2, 1 ContextBlock after conv3", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "position", "=", "'after_conv2'", ")", ",", "\n", "dict", "(", "cfg", "=", "dict", "(", "type", "=", "'NonLocal2d'", ")", ",", "position", "=", "'after_conv2'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "block", "=", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "assert", "block", ".", "gen_attention_block", ".", "in_channels", "==", "16", "\n", "assert", "block", ".", "nonlocal_block", ".", "in_channels", "==", "16", "\n", "assert", "block", ".", "context_block", ".", "in_channels", "==", "64", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test Bottleneck with 1 ContextBlock after conv2, 2 ContextBlock after", "\n", "# conv3", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ",", "postfix", "=", "1", ")", ",", "\n", "position", "=", "'after_conv2'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ",", "postfix", "=", "2", ")", ",", "\n", "position", "=", "'after_conv3'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ",", "postfix", "=", "3", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "block", "=", "Bottleneck", "(", "64", ",", "16", ",", "plugins", "=", "plugins", ")", "\n", "assert", "block", ".", "context_block1", ".", "in_channels", "==", "16", "\n", "assert", "block", ".", "context_block2", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "context_block3", ".", "in_channels", "==", "64", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_resnet.test_simplied_basic_block": [[197, 248], ["mmdet.models.utils.SimplifiedBasicBlock", "torch.randn", "mmdet.models.utils.SimplifiedBasicBlock.", "mmdet.models.utils.SimplifiedBasicBlock", "mmdet.models.utils.SimplifiedBasicBlock.", "pytest.raises", "dict", "mmdet.models.utils.SimplifiedBasicBlock", "pytest.raises", "mmdet.models.utils.SimplifiedBasicBlock", "pytest.raises", "mmdet.models.utils.SimplifiedBasicBlock", "pytest.raises", "mmdet.models.utils.SimplifiedBasicBlock", "torch.Size", "torch.Size", "dict", "dict", "dict", "dict"], "function", ["None"], ["", "def", "test_simplied_basic_block", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet.", "\n", "        ", "dcn", "=", "dict", "(", "type", "=", "'DCN'", ",", "deform_groups", "=", "1", ",", "fallback_on_stride", "=", "False", ")", "\n", "SimplifiedBasicBlock", "(", "64", ",", "64", ",", "dcn", "=", "dcn", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet.", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "SimplifiedBasicBlock", "(", "64", ",", "64", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "position", "=", "'after_conv2'", ")", "\n", "]", "\n", "SimplifiedBasicBlock", "(", "64", ",", "64", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Not implemented yet", "\n", "        ", "SimplifiedBasicBlock", "(", "64", ",", "64", ",", "with_cp", "=", "True", ")", "\n", "\n", "# test SimplifiedBasicBlock structure and forward", "\n", "", "block", "=", "SimplifiedBasicBlock", "(", "64", ",", "64", ")", "\n", "assert", "block", ".", "conv1", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "conv1", ".", "out_channels", "==", "64", "\n", "assert", "block", ".", "conv1", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "assert", "block", ".", "conv2", ".", "in_channels", "==", "64", "\n", "assert", "block", ".", "conv2", ".", "out_channels", "==", "64", "\n", "assert", "block", ".", "conv2", ".", "kernel_size", "==", "(", "3", ",", "3", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# test SimplifiedBasicBlock without norm", "\n", "block", "=", "SimplifiedBasicBlock", "(", "64", ",", "64", ",", "norm_cfg", "=", "None", ")", "\n", "assert", "block", ".", "norm1", "is", "None", "\n", "assert", "block", ".", "norm2", "is", "None", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_resnet.test_resnet_res_layer": [[250, 304], ["mmdet.models.utils.ResLayer", "range", "range", "torch.randn", "mmdet.models.utils.ResLayer.", "mmdet.models.utils.ResLayer", "range", "torch.randn", "mmdet.models.utils.ResLayer.", "mmdet.models.utils.ResLayer", "range", "torch.randn", "mmdet.models.utils.ResLayer.", "mmdet.models.utils.ResLayer", "isinstance", "range", "torch.randn", "mmdet.models.utils.ResLayer.", "mmdet.models.utils.ResLayer", "range", "torch.randn", "mmdet.models.utils.ResLayer.", "len", "len", "len", "torch.Size", "len", "torch.Size", "len", "torch.Size", "len", "torch.Size", "torch.Size", "len"], "function", ["None"], ["", "def", "test_resnet_res_layer", "(", ")", ":", "\n", "# Test ResLayer of 3 Bottleneck w\\o downsample", "\n", "    ", "layer", "=", "ResLayer", "(", "Bottleneck", ",", "64", ",", "16", ",", "3", ")", "\n", "assert", "len", "(", "layer", ")", "==", "3", "\n", "assert", "layer", "[", "0", "]", ".", "conv1", ".", "in_channels", "==", "64", "\n", "assert", "layer", "[", "0", "]", ".", "conv1", ".", "out_channels", "==", "16", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layer", ")", ")", ":", "\n", "        ", "assert", "layer", "[", "i", "]", ".", "conv1", ".", "in_channels", "==", "64", "\n", "assert", "layer", "[", "i", "]", ".", "conv1", ".", "out_channels", "==", "16", "\n", "", "for", "i", "in", "range", "(", "len", "(", "layer", ")", ")", ":", "\n", "        ", "assert", "layer", "[", "i", "]", ".", "downsample", "is", "None", "\n", "", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "layer", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test ResLayer of 3 Bottleneck with downsample", "\n", "layer", "=", "ResLayer", "(", "Bottleneck", ",", "64", ",", "64", ",", "3", ")", "\n", "assert", "layer", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "out_channels", "==", "256", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layer", ")", ")", ":", "\n", "        ", "assert", "layer", "[", "i", "]", ".", "downsample", "is", "None", "\n", "", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "layer", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test ResLayer of 3 Bottleneck with stride=2", "\n", "layer", "=", "ResLayer", "(", "Bottleneck", ",", "64", ",", "64", ",", "3", ",", "stride", "=", "2", ")", "\n", "assert", "layer", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "out_channels", "==", "256", "\n", "assert", "layer", "[", "0", "]", ".", "downsample", "[", "0", "]", ".", "stride", "==", "(", "2", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layer", ")", ")", ":", "\n", "        ", "assert", "layer", "[", "i", "]", ".", "downsample", "is", "None", "\n", "", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "layer", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "28", ",", "28", "]", ")", "\n", "\n", "# Test ResLayer of 3 Bottleneck with stride=2 and average downsample", "\n", "layer", "=", "ResLayer", "(", "Bottleneck", ",", "64", ",", "64", ",", "3", ",", "stride", "=", "2", ",", "avg_down", "=", "True", ")", "\n", "assert", "isinstance", "(", "layer", "[", "0", "]", ".", "downsample", "[", "0", "]", ",", "AvgPool2d", ")", "\n", "assert", "layer", "[", "0", "]", ".", "downsample", "[", "1", "]", ".", "out_channels", "==", "256", "\n", "assert", "layer", "[", "0", "]", ".", "downsample", "[", "1", "]", ".", "stride", "==", "(", "1", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "layer", ")", ")", ":", "\n", "        ", "assert", "layer", "[", "i", "]", ".", "downsample", "is", "None", "\n", "", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "layer", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "28", ",", "28", "]", ")", "\n", "\n", "# Test ResLayer of 3 BasicBlock with stride=2 and downsample_first=False", "\n", "layer", "=", "ResLayer", "(", "BasicBlock", ",", "64", ",", "64", ",", "3", ",", "stride", "=", "2", ",", "downsample_first", "=", "False", ")", "\n", "assert", "layer", "[", "2", "]", ".", "downsample", "[", "0", "]", ".", "out_channels", "==", "64", "\n", "assert", "layer", "[", "2", "]", ".", "downsample", "[", "0", "]", ".", "stride", "==", "(", "2", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "layer", ")", "-", "1", ")", ":", "\n", "        ", "assert", "layer", "[", "i", "]", ".", "downsample", "is", "None", "\n", "", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "layer", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "28", ",", "28", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_resnet.test_resnest_stem": [[306, 352], ["mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNetV1d.init_weights", "mmdet.models.backbones.ResNetV1d.train", "mmdet.models.backbones.ResNetV1d", "mmdet.models.backbones.ResNetV1d.init_weights", "mmdet.models.backbones.ResNetV1d.train"], "function", ["None"], ["", "def", "test_resnest_stem", "(", ")", ":", "\n", "# Test default stem_channels", "\n", "    ", "model", "=", "ResNet", "(", "50", ")", "\n", "assert", "model", ".", "stem_channels", "==", "64", "\n", "assert", "model", ".", "conv1", ".", "out_channels", "==", "64", "\n", "assert", "model", ".", "norm1", ".", "num_features", "==", "64", "\n", "\n", "# Test default stem_channels, with base_channels=32", "\n", "model", "=", "ResNet", "(", "50", ",", "base_channels", "=", "32", ")", "\n", "assert", "model", ".", "stem_channels", "==", "32", "\n", "assert", "model", ".", "conv1", ".", "out_channels", "==", "32", "\n", "assert", "model", ".", "norm1", ".", "num_features", "==", "32", "\n", "assert", "model", ".", "layer1", "[", "0", "]", ".", "conv1", ".", "in_channels", "==", "32", "\n", "\n", "# Test stem_channels=64", "\n", "model", "=", "ResNet", "(", "50", ",", "stem_channels", "=", "64", ")", "\n", "assert", "model", ".", "stem_channels", "==", "64", "\n", "assert", "model", ".", "conv1", ".", "out_channels", "==", "64", "\n", "assert", "model", ".", "norm1", ".", "num_features", "==", "64", "\n", "assert", "model", ".", "layer1", "[", "0", "]", ".", "conv1", ".", "in_channels", "==", "64", "\n", "\n", "# Test stem_channels=64, with base_channels=32", "\n", "model", "=", "ResNet", "(", "50", ",", "stem_channels", "=", "64", ",", "base_channels", "=", "32", ")", "\n", "assert", "model", ".", "stem_channels", "==", "64", "\n", "assert", "model", ".", "conv1", ".", "out_channels", "==", "64", "\n", "assert", "model", ".", "norm1", ".", "num_features", "==", "64", "\n", "assert", "model", ".", "layer1", "[", "0", "]", ".", "conv1", ".", "in_channels", "==", "64", "\n", "\n", "# Test stem_channels=128", "\n", "model", "=", "ResNet", "(", "depth", "=", "50", ",", "stem_channels", "=", "128", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "assert", "model", ".", "conv1", ".", "out_channels", "==", "128", "\n", "assert", "model", ".", "layer1", "[", "0", "]", ".", "conv1", ".", "in_channels", "==", "128", "\n", "\n", "# Test V1d stem_channels", "\n", "model", "=", "ResNetV1d", "(", "depth", "=", "50", ",", "stem_channels", "=", "128", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "assert", "model", ".", "stem", "[", "0", "]", ".", "out_channels", "==", "64", "\n", "assert", "model", ".", "stem", "[", "1", "]", ".", "num_features", "==", "64", "\n", "assert", "model", ".", "stem", "[", "3", "]", ".", "out_channels", "==", "64", "\n", "assert", "model", ".", "stem", "[", "4", "]", ".", "num_features", "==", "64", "\n", "assert", "model", ".", "stem", "[", "6", "]", ".", "out_channels", "==", "128", "\n", "assert", "model", ".", "stem", "[", "7", "]", ".", "num_features", "==", "128", "\n", "assert", "model", ".", "layer1", "[", "0", "]", ".", "conv1", ".", "in_channels", "==", "128", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_resnet.test_resnet_backbone": [[354, 666], ["mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.init_weights", "mmdet.models.backbones.ResNet.train", "utils.check_norm_state", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.init_weights", "mmdet.models.backbones.ResNet.train", "utils.check_norm_state", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.init_weights", "mmdet.models.backbones.ResNet.train", "range", "mmdet.models.backbones.ResNetV1d", "mmdet.models.backbones.ResNet.init_weights", "mmdet.models.backbones.ResNet.train", "utils.check_norm_state", "mmdet.models.backbones.ResNet.stem.parameters", "range", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.init_weights", "mmdet.models.backbones.ResNet.train", "torch.randn", "mmdet.models.backbones.ResNet.", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.modules", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.modules", "mmdet.models.backbones.ResNet.init_weights", "mmdet.models.backbones.ResNet.train", "torch.randn", "mmdet.models.backbones.ResNet.", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.init_weights", "mmdet.models.backbones.ResNet.train", "torch.randn", "mmdet.models.backbones.ResNet.", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.modules", "mmdet.models.backbones.ResNet.init_weights", "mmdet.models.backbones.ResNet.train", "torch.randn", "mmdet.models.backbones.ResNet.", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.modules", "mmdet.models.backbones.ResNet.init_weights", "mmdet.models.backbones.ResNet.train", "torch.randn", "mmdet.models.backbones.ResNet.", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.layer1.modules", "mmdet.models.backbones.ResNet.layer2.modules", "mmdet.models.backbones.ResNet.layer3.modules", "mmdet.models.backbones.ResNet.layer4.modules", "mmdet.models.backbones.ResNet.init_weights", "mmdet.models.backbones.ResNet.train", "torch.randn", "mmdet.models.backbones.ResNet.", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.layer1.modules", "mmdet.models.backbones.ResNet.layer2.modules", "mmdet.models.backbones.ResNet.layer3.modules", "mmdet.models.backbones.ResNet.layer4.modules", "mmdet.models.backbones.ResNet.init_weights", "mmdet.models.backbones.ResNet.train", "torch.randn", "mmdet.models.backbones.ResNet.", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.init_weights", "mmdet.models.backbones.ResNet.modules", "mmdet.models.backbones.ResNet.train", "torch.randn", "mmdet.models.backbones.ResNet.", "mmdet.models.backbones.ResNetV1d", "mmdet.models.backbones.ResNet.init_weights", "mmdet.models.backbones.ResNet.train", "torch.randn", "mmdet.models.backbones.ResNet.", "torch.randn", "mmdet.models.backbones.ResNet.", "torch.randn", "mmdet.models.backbones.ResNet.", "pytest.raises", "mmdet.models.backbones.ResNet", "pytest.raises", "mmdet.models.backbones.ResNet", "pytest.raises", "dict", "mmdet.models.backbones.ResNet", "pytest.raises", "mmdet.models.backbones.ResNet", "pytest.raises", "mmdet.models.backbones.ResNet", "pytest.raises", "mmdet.models.backbones.ResNet", "pytest.raises", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.init_weights", "pytest.raises", "mmdet.models.backbones.ResNet", "mmdet.models.backbones.ResNet.modules", "mmdet.models.backbones.ResNet.modules", "getattr.parameters", "getattr", "getattr.modules", "getattr.parameters", "len", "getattr", "getattr.modules", "getattr.parameters", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "utils.is_block", "utils.is_norm", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "len", "torch.Size", "torch.Size", "torch.Size", "utils.is_block", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "utils.is_norm", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "dict", "dict", "dict", "utils.is_block", "utils.is_block", "utils.is_block", "utils.is_block", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "dict", "dict", "utils.is_block", "utils.is_block", "utils.is_block", "utils.is_block", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "isinstance", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "dict", "isinstance", "isinstance", "isinstance", "dict", "isinstance", "mmcv.assert_params_all_zeros", "isinstance", "dict", "dict", "dict", "hasattr", "hasattr", "hasattr", "dict", "dict", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "mmcv.assert_params_all_zeros", "dict"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.check_norm_state", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.check_norm_state", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.check_norm_state", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_block", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_norm", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_block", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_norm", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_block", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_block", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_block", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_block", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_block", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_block", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_block", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_block"], ["", "def", "test_resnet_backbone", "(", ")", ":", "\n", "    ", "\"\"\"Test resnet backbone.\"\"\"", "\n", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "# ResNet depth should be in [18, 34, 50, 101, 152]", "\n", "        ", "ResNet", "(", "20", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# In ResNet: 1 <= num_stages <= 4", "\n", "        ", "ResNet", "(", "50", ",", "num_stages", "=", "0", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# len(stage_with_dcn) == num_stages", "\n", "        ", "dcn", "=", "dict", "(", "type", "=", "'DCN'", ",", "deform_groups", "=", "1", ",", "fallback_on_stride", "=", "False", ")", "\n", "ResNet", "(", "50", ",", "dcn", "=", "dcn", ",", "stage_with_dcn", "=", "(", "True", ",", ")", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# len(stage_with_plugin) == num_stages", "\n", "        ", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "stages", "=", "(", "False", ",", "True", ",", "True", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "ResNet", "(", "50", ",", "plugins", "=", "plugins", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# In ResNet: 1 <= num_stages <= 4", "\n", "        ", "ResNet", "(", "50", ",", "num_stages", "=", "5", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# len(strides) == len(dilations) == num_stages", "\n", "        ", "ResNet", "(", "50", ",", "strides", "=", "(", "1", ",", ")", ",", "dilations", "=", "(", "1", ",", "1", ")", ",", "num_stages", "=", "3", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "# pretrained must be a string path", "\n", "        ", "model", "=", "ResNet", "(", "50", ")", "\n", "model", ".", "init_weights", "(", "pretrained", "=", "0", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Style must be in ['pytorch', 'caffe']", "\n", "        ", "ResNet", "(", "50", ",", "style", "=", "'tensorflow'", ")", "\n", "\n", "# Test ResNet50 norm_eval=True", "\n", "", "model", "=", "ResNet", "(", "50", ",", "norm_eval", "=", "True", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "assert", "check_norm_state", "(", "model", ".", "modules", "(", ")", ",", "False", ")", "\n", "\n", "# Test ResNet50 with torchvision pretrained weight", "\n", "model", "=", "ResNet", "(", "depth", "=", "50", ",", "norm_eval", "=", "True", ")", "\n", "model", ".", "init_weights", "(", "'torchvision://resnet50'", ")", "\n", "model", ".", "train", "(", ")", "\n", "assert", "check_norm_state", "(", "model", ".", "modules", "(", ")", ",", "False", ")", "\n", "\n", "# Test ResNet50 with first stage frozen", "\n", "frozen_stages", "=", "1", "\n", "model", "=", "ResNet", "(", "50", ",", "frozen_stages", "=", "frozen_stages", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "assert", "model", ".", "norm1", ".", "training", "is", "False", "\n", "for", "layer", "in", "[", "model", ".", "conv1", ",", "model", ".", "norm1", "]", ":", "\n", "        ", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "            ", "assert", "param", ".", "requires_grad", "is", "False", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "frozen_stages", "+", "1", ")", ":", "\n", "        ", "layer", "=", "getattr", "(", "model", ",", "f'layer{i}'", ")", "\n", "for", "mod", "in", "layer", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "mod", ",", "_BatchNorm", ")", ":", "\n", "                ", "assert", "mod", ".", "training", "is", "False", "\n", "", "", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "            ", "assert", "param", ".", "requires_grad", "is", "False", "\n", "\n", "# Test ResNet50V1d with first stage frozen", "\n", "", "", "model", "=", "ResNetV1d", "(", "depth", "=", "50", ",", "frozen_stages", "=", "frozen_stages", ")", "\n", "assert", "len", "(", "model", ".", "stem", ")", "==", "9", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "assert", "check_norm_state", "(", "model", ".", "stem", ",", "False", ")", "\n", "for", "param", "in", "model", ".", "stem", ".", "parameters", "(", ")", ":", "\n", "        ", "assert", "param", ".", "requires_grad", "is", "False", "\n", "", "for", "i", "in", "range", "(", "1", ",", "frozen_stages", "+", "1", ")", ":", "\n", "        ", "layer", "=", "getattr", "(", "model", ",", "f'layer{i}'", ")", "\n", "for", "mod", "in", "layer", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "mod", ",", "_BatchNorm", ")", ":", "\n", "                ", "assert", "mod", ".", "training", "is", "False", "\n", "", "", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "            ", "assert", "param", ".", "requires_grad", "is", "False", "\n", "\n", "# Test ResNet18 forward", "\n", "", "", "model", "=", "ResNet", "(", "18", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "128", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNet18 with checkpoint forward", "\n", "model", "=", "ResNet", "(", "18", ",", "with_cp", "=", "True", ")", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "m", ".", "with_cp", "\n", "\n", "# Test ResNet50 with BatchNorm forward", "\n", "", "", "model", "=", "ResNet", "(", "50", ")", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_norm", "(", "m", ")", ":", "\n", "            ", "assert", "isinstance", "(", "m", ",", "_BatchNorm", ")", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNet50 with layers 1, 2, 3 out forward", "\n", "model", "=", "ResNet", "(", "50", ",", "out_indices", "=", "(", "0", ",", "1", ",", "2", ")", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "3", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "\n", "# Test ResNet50 with checkpoint forward", "\n", "model", "=", "ResNet", "(", "50", ",", "with_cp", "=", "True", ")", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "m", ".", "with_cp", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNet50 with GroupNorm forward", "\n", "model", "=", "ResNet", "(", "\n", "50", ",", "norm_cfg", "=", "dict", "(", "type", "=", "'GN'", ",", "num_groups", "=", "32", ",", "requires_grad", "=", "True", ")", ")", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_norm", "(", "m", ")", ":", "\n", "            ", "assert", "isinstance", "(", "m", ",", "GroupNorm", ")", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNet50 with 1 GeneralizedAttention after conv2, 1 NonLocal2D", "\n", "# after conv2, 1 ContextBlock after conv3 in layers 2, 3, 4", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "stages", "=", "(", "False", ",", "True", ",", "True", ",", "True", ")", ",", "\n", "position", "=", "'after_conv2'", ")", ",", "\n", "dict", "(", "cfg", "=", "dict", "(", "type", "=", "'NonLocal2d'", ")", ",", "position", "=", "'after_conv2'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ")", ",", "\n", "stages", "=", "(", "False", ",", "True", ",", "True", ",", "False", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "model", "=", "ResNet", "(", "50", ",", "plugins", "=", "plugins", ")", "\n", "for", "m", "in", "model", ".", "layer1", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "not", "hasattr", "(", "m", ",", "'context_block'", ")", "\n", "assert", "not", "hasattr", "(", "m", ",", "'gen_attention_block'", ")", "\n", "assert", "m", ".", "nonlocal_block", ".", "in_channels", "==", "64", "\n", "", "", "for", "m", "in", "model", ".", "layer2", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "m", ".", "nonlocal_block", ".", "in_channels", "==", "128", "\n", "assert", "m", ".", "gen_attention_block", ".", "in_channels", "==", "128", "\n", "assert", "m", ".", "context_block", ".", "in_channels", "==", "512", "\n", "\n", "", "", "for", "m", "in", "model", ".", "layer3", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "m", ".", "nonlocal_block", ".", "in_channels", "==", "256", "\n", "assert", "m", ".", "gen_attention_block", ".", "in_channels", "==", "256", "\n", "assert", "m", ".", "context_block", ".", "in_channels", "==", "1024", "\n", "\n", "", "", "for", "m", "in", "model", ".", "layer4", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "m", ".", "nonlocal_block", ".", "in_channels", "==", "512", "\n", "assert", "m", ".", "gen_attention_block", ".", "in_channels", "==", "512", "\n", "assert", "not", "hasattr", "(", "m", ",", "'context_block'", ")", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNet50 with 1 ContextBlock after conv2, 1 ContextBlock after", "\n", "# conv3 in layers 2, 3, 4", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ",", "postfix", "=", "1", ")", ",", "\n", "stages", "=", "(", "False", ",", "True", ",", "True", ",", "False", ")", ",", "\n", "position", "=", "'after_conv3'", ")", ",", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "type", "=", "'ContextBlock'", ",", "ratio", "=", "1.", "/", "16", ",", "postfix", "=", "2", ")", ",", "\n", "stages", "=", "(", "False", ",", "True", ",", "True", ",", "False", ")", ",", "\n", "position", "=", "'after_conv3'", ")", "\n", "]", "\n", "\n", "model", "=", "ResNet", "(", "50", ",", "plugins", "=", "plugins", ")", "\n", "for", "m", "in", "model", ".", "layer1", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "not", "hasattr", "(", "m", ",", "'context_block'", ")", "\n", "assert", "not", "hasattr", "(", "m", ",", "'context_block1'", ")", "\n", "assert", "not", "hasattr", "(", "m", ",", "'context_block2'", ")", "\n", "", "", "for", "m", "in", "model", ".", "layer2", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "not", "hasattr", "(", "m", ",", "'context_block'", ")", "\n", "assert", "m", ".", "context_block1", ".", "in_channels", "==", "512", "\n", "assert", "m", ".", "context_block2", ".", "in_channels", "==", "512", "\n", "\n", "", "", "for", "m", "in", "model", ".", "layer3", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "not", "hasattr", "(", "m", ",", "'context_block'", ")", "\n", "assert", "m", ".", "context_block1", ".", "in_channels", "==", "1024", "\n", "assert", "m", ".", "context_block2", ".", "in_channels", "==", "1024", "\n", "\n", "", "", "for", "m", "in", "model", ".", "layer4", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "not", "hasattr", "(", "m", ",", "'context_block'", ")", "\n", "assert", "not", "hasattr", "(", "m", ",", "'context_block1'", ")", "\n", "assert", "not", "hasattr", "(", "m", ",", "'context_block2'", ")", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNet50 zero initialization of residual", "\n", "model", "=", "ResNet", "(", "50", ",", "zero_init_residual", "=", "True", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "            ", "assert", "assert_params_all_zeros", "(", "m", ".", "norm3", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "            ", "assert", "assert_params_all_zeros", "(", "m", ".", "norm2", ")", "\n", "", "", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test ResNetV1d forward", "\n", "model", "=", "ResNetV1d", "(", "depth", "=", "50", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_renext.test_renext_bottleneck": [[9, 56], ["mmdet.models.backbones.resnext.Bottleneck", "dict", "mmdet.models.backbones.resnext.Bottleneck", "mmdet.models.backbones.resnext.Bottleneck", "torch.randn", "mmdet.models.backbones.resnext.Bottleneck", "mmdet.models.backbones.resnext.Bottleneck", "torch.randn", "mmdet.models.backbones.resnext.Bottleneck", "pytest.raises", "mmdet.models.backbones.resnext.Bottleneck", "pytest.raises", "mmdet.models.backbones.resnext.Bottleneck", "torch.Size", "dict", "torch.Size", "dict", "dict"], "function", ["None"], ["def", "test_renext_bottleneck", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# Style must be in ['pytorch', 'caffe']", "\n", "        ", "BottleneckX", "(", "64", ",", "64", ",", "groups", "=", "32", ",", "base_width", "=", "4", ",", "style", "=", "'tensorflow'", ")", "\n", "\n", "# Test ResNeXt Bottleneck structure", "\n", "", "block", "=", "BottleneckX", "(", "\n", "64", ",", "64", ",", "groups", "=", "32", ",", "base_width", "=", "4", ",", "stride", "=", "2", ",", "style", "=", "'pytorch'", ")", "\n", "assert", "block", ".", "conv2", ".", "stride", "==", "(", "2", ",", "2", ")", "\n", "assert", "block", ".", "conv2", ".", "groups", "==", "32", "\n", "assert", "block", ".", "conv2", ".", "out_channels", "==", "128", "\n", "\n", "# Test ResNeXt Bottleneck with DCN", "\n", "dcn", "=", "dict", "(", "type", "=", "'DCN'", ",", "deform_groups", "=", "1", ",", "fallback_on_stride", "=", "False", ")", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# conv_cfg must be None if dcn is not None", "\n", "        ", "BottleneckX", "(", "\n", "64", ",", "\n", "64", ",", "\n", "groups", "=", "32", ",", "\n", "base_width", "=", "4", ",", "\n", "dcn", "=", "dcn", ",", "\n", "conv_cfg", "=", "dict", "(", "type", "=", "'Conv'", ")", ")", "\n", "", "BottleneckX", "(", "64", ",", "64", ",", "dcn", "=", "dcn", ")", "\n", "\n", "# Test ResNeXt Bottleneck forward", "\n", "block", "=", "BottleneckX", "(", "64", ",", "16", ",", "groups", "=", "32", ",", "base_width", "=", "4", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n", "# Test ResNeXt Bottleneck forward with plugins", "\n", "plugins", "=", "[", "\n", "dict", "(", "\n", "cfg", "=", "dict", "(", "\n", "type", "=", "'GeneralizedAttention'", ",", "\n", "spatial_range", "=", "-", "1", ",", "\n", "num_heads", "=", "8", ",", "\n", "attention_type", "=", "'0010'", ",", "\n", "kv_stride", "=", "2", ")", ",", "\n", "stages", "=", "(", "False", ",", "False", ",", "True", ",", "True", ")", ",", "\n", "position", "=", "'after_conv2'", ")", "\n", "]", "\n", "block", "=", "BottleneckX", "(", "64", ",", "16", ",", "groups", "=", "32", ",", "base_width", "=", "4", ",", "plugins", "=", "plugins", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "64", ",", "56", ",", "56", ")", "\n", "x_out", "=", "block", "(", "x", ")", "\n", "assert", "x_out", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "64", ",", "56", ",", "56", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_renext.test_resnext_backbone": [[58, 78], ["mmdet.models.backbones.ResNeXt", "mmdet.models.backbones.ResNeXt.modules", "mmdet.models.backbones.ResNeXt.init_weights", "mmdet.models.backbones.ResNeXt.train", "torch.randn", "mmdet.models.backbones.ResNeXt.", "pytest.raises", "mmdet.models.backbones.ResNeXt", "utils.is_block", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_block"], ["", "def", "test_resnext_backbone", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "# ResNeXt depth should be in [50, 101, 152]", "\n", "        ", "ResNeXt", "(", "depth", "=", "18", ")", "\n", "\n", "# Test ResNeXt with group 32, base_width 4", "\n", "", "model", "=", "ResNeXt", "(", "depth", "=", "50", ",", "groups", "=", "32", ",", "base_width", "=", "4", ")", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "is_block", "(", "m", ")", ":", "\n", "            ", "assert", "m", ".", "conv2", ".", "groups", "==", "32", "\n", "", "", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "512", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "2048", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.test_regnet.test_regnet_backbone": [[34, 59], ["pytest.mark.parametrize", "mmdet.models.backbones.RegNet", "mmdet.models.backbones.RegNet.init_weights", "mmdet.models.backbones.RegNet.train", "torch.randn", "mmdet.models.backbones.RegNet.", "mmdet.models.backbones.RegNet", "pytest.raises", "mmdet.models.backbones.RegNet", "len", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "function", ["None"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'arch_name,arch,out_channels'", ",", "regnet_test_data", ")", "\n", "def", "test_regnet_backbone", "(", "arch_name", ",", "arch", ",", "out_channels", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "# ResNeXt depth should be in [50, 101, 152]", "\n", "        ", "RegNet", "(", "arch_name", "+", "'233'", ")", "\n", "\n", "# Test RegNet with arch_name", "\n", "", "model", "=", "RegNet", "(", "arch_name", ")", "\n", "model", ".", "init_weights", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "imgs", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "224", ",", "224", ")", "\n", "feat", "=", "model", "(", "imgs", ")", "\n", "assert", "len", "(", "feat", ")", "==", "4", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "out_channels", "[", "0", "]", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "out_channels", "[", "1", "]", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "out_channels", "[", "2", "]", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "out_channels", "[", "3", "]", ",", "7", ",", "7", "]", ")", "\n", "\n", "# Test RegNet with arch", "\n", "model", "=", "RegNet", "(", "arch", ")", "\n", "assert", "feat", "[", "0", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "out_channels", "[", "0", "]", ",", "56", ",", "56", "]", ")", "\n", "assert", "feat", "[", "1", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "out_channels", "[", "1", "]", ",", "28", ",", "28", "]", ")", "\n", "assert", "feat", "[", "2", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "out_channels", "[", "2", "]", ",", "14", ",", "14", "]", ")", "\n", "assert", "feat", "[", "3", "]", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "out_channels", "[", "3", "]", ",", "7", ",", "7", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_block": [[10, 16], ["isinstance"], "function", ["None"], ["ort_custom_op_path", "=", "''", "\n", "try", ":", "\n", "    ", "from", "mmcv", ".", "ops", "import", "get_onnxruntime_op_path", "\n", "ort_custom_op_path", "=", "get_onnxruntime_op_path", "(", ")", "\n", "", "except", "(", "ImportError", ",", "ModuleNotFoundError", ")", ":", "\n", "    ", "warnings", ".", "warn", "(", "'If input model has custom op from mmcv, \\\n        you may have to build mmcv with ONNXRuntime from source.'", ")", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.is_norm": [[18, 23], ["isinstance"], "function", ["None"], ["\n", "", "class", "WrapFunction", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Wrap the function to be tested for torch.onnx.export tracking.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "wrapped_function", ")", ":", "\n", "        ", "super", "(", "WrapFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_backbones.utils.check_norm_state": [[25, 32], ["isinstance"], "function", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "wrapped_function", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "", "def", "ort_validate", "(", "model", ",", "feats", ",", "onnx_io", "=", "'tmp.onnx'", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_position_encoding.test_sine_positional_encoding": [[8, 26], ["mmdet.models.utils.SinePositionalEncoding", "mmdet.models.utils.SinePositionalEncoding.", "mmdet.models.utils.SinePositionalEncoding", "mmdet.models.utils.SinePositionalEncoding.", "pytest.raises", "mmdet.models.utils.SinePositionalEncoding", "torch.rand"], "function", ["None"], ["def", "test_sine_positional_encoding", "(", "num_feats", "=", "16", ",", "batch_size", "=", "2", ")", ":", "\n", "# test invalid type of scale", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "module", "=", "SinePositionalEncoding", "(", "\n", "num_feats", ",", "scale", "=", "(", "3.", ",", ")", ",", "normalize", "=", "True", ")", "\n", "\n", "", "module", "=", "SinePositionalEncoding", "(", "num_feats", ")", "\n", "h", ",", "w", "=", "10", ",", "6", "\n", "mask", "=", "torch", ".", "rand", "(", "batch_size", ",", "h", ",", "w", ")", ">", "0.5", "\n", "assert", "not", "module", ".", "normalize", "\n", "out", "=", "module", "(", "mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "batch_size", ",", "num_feats", "*", "2", ",", "h", ",", "w", ")", "\n", "\n", "# set normalize", "\n", "module", "=", "SinePositionalEncoding", "(", "num_feats", ",", "normalize", "=", "True", ")", "\n", "assert", "module", ".", "normalize", "\n", "out", "=", "module", "(", "mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "batch_size", ",", "num_feats", "*", "2", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_position_encoding.test_learned_positional_encoding": [[28, 39], ["mmdet.models.utils.LearnedPositionalEncoding", "mmdet.models.utils.LearnedPositionalEncoding.", "torch.rand"], "function", ["None"], ["", "def", "test_learned_positional_encoding", "(", "num_feats", "=", "16", ",", "\n", "row_num_embed", "=", "10", ",", "\n", "col_num_embed", "=", "10", ",", "\n", "batch_size", "=", "2", ")", ":", "\n", "    ", "module", "=", "LearnedPositionalEncoding", "(", "num_feats", ",", "row_num_embed", ",", "col_num_embed", ")", "\n", "assert", "module", ".", "row_embed", ".", "weight", ".", "shape", "==", "(", "row_num_embed", ",", "num_feats", ")", "\n", "assert", "module", ".", "col_embed", ".", "weight", ".", "shape", "==", "(", "col_num_embed", ",", "num_feats", ")", "\n", "h", ",", "w", "=", "10", ",", "6", "\n", "mask", "=", "torch", ".", "rand", "(", "batch_size", ",", "h", ",", "w", ")", ">", "0.5", "\n", "out", "=", "module", "(", "mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "batch_size", ",", "num_feats", "*", "2", ",", "h", ",", "w", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_transformer._ffn_forward": [[11, 18], ["residual.split", "residual_str.split"], "function", ["None"], ["def", "_ffn_forward", "(", "self", ",", "x", ",", "residual", "=", "None", ")", ":", "\n", "    ", "if", "residual", "is", "None", ":", "\n", "        ", "residual", "=", "x", "\n", "", "residual_str", "=", "residual", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "if", "'(residual'", "in", "residual_str", ":", "\n", "        ", "residual_str", "=", "residual_str", ".", "split", "(", "'(residual'", ")", "[", "0", "]", "\n", "", "return", "x", "+", "'_ffn(residual={})'", ".", "format", "(", "residual_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_transformer._multihead_attention_forward": [[20, 37], ["residual.split", "residual_str.split"], "function", ["None"], ["", "def", "_multihead_attention_forward", "(", "self", ",", "\n", "x", ",", "\n", "key", "=", "None", ",", "\n", "value", "=", "None", ",", "\n", "residual", "=", "None", ",", "\n", "query_pos", "=", "None", ",", "\n", "key_pos", "=", "None", ",", "\n", "attn_mask", "=", "None", ",", "\n", "key_padding_mask", "=", "None", ",", "\n", "selfattn", "=", "True", ")", ":", "\n", "    ", "if", "residual", "is", "None", ":", "\n", "        ", "residual", "=", "x", "\n", "", "residual_str", "=", "residual", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "if", "'(residual'", "in", "residual_str", ":", "\n", "        ", "residual_str", "=", "residual_str", ".", "split", "(", "'(residual'", ")", "[", "0", "]", "\n", "", "attn_str", "=", "'selfattn'", "if", "selfattn", "else", "'multiheadattn'", "\n", "return", "x", "+", "'_{}(residual={})'", ".", "format", "(", "attn_str", ",", "residual_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_transformer._encoder_layer_forward": [[39, 65], ["test_transformer..self_attn", "test_transformer..ffn", "ValueError"], "function", ["None"], ["", "def", "_encoder_layer_forward", "(", "self", ",", "\n", "x", ",", "\n", "pos", "=", "None", ",", "\n", "attn_mask", "=", "None", ",", "\n", "key_padding_mask", "=", "None", ")", ":", "\n", "    ", "norm_cnt", "=", "0", "\n", "inp_residual", "=", "x", "\n", "for", "layer", "in", "self", ".", "order", ":", "\n", "        ", "if", "layer", "==", "'selfattn'", ":", "\n", "            ", "x", "=", "self", ".", "self_attn", "(", "\n", "x", ",", "\n", "x", ",", "\n", "x", ",", "\n", "inp_residual", "if", "self", ".", "pre_norm", "else", "None", ",", "\n", "query_pos", "=", "pos", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ")", "\n", "inp_residual", "=", "x", "\n", "", "elif", "layer", "==", "'norm'", ":", "\n", "            ", "x", "=", "x", "+", "'_norm{}'", ".", "format", "(", "norm_cnt", ")", "\n", "norm_cnt", "+=", "1", "\n", "", "elif", "layer", "==", "'ffn'", ":", "\n", "            ", "x", "=", "self", ".", "ffn", "(", "x", ",", "inp_residual", "if", "self", ".", "pre_norm", "else", "None", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unsupported layer type {layer}.'", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_transformer._decoder_layer_forward": [[67, 109], ["test_transformer..self_attn", "test_transformer..multihead_attn", "test_transformer..ffn", "ValueError"], "function", ["None"], ["", "def", "_decoder_layer_forward", "(", "self", ",", "\n", "x", ",", "\n", "memory", ",", "\n", "memory_pos", "=", "None", ",", "\n", "query_pos", "=", "None", ",", "\n", "memory_attn_mask", "=", "None", ",", "\n", "target_attn_mask", "=", "None", ",", "\n", "memory_key_padding_mask", "=", "None", ",", "\n", "target_key_padding_mask", "=", "None", ")", ":", "\n", "    ", "norm_cnt", "=", "0", "\n", "inp_residual", "=", "x", "\n", "for", "layer", "in", "self", ".", "order", ":", "\n", "        ", "if", "layer", "==", "'selfattn'", ":", "\n", "            ", "x", "=", "self", ".", "self_attn", "(", "\n", "x", ",", "\n", "x", ",", "\n", "x", ",", "\n", "inp_residual", "if", "self", ".", "pre_norm", "else", "None", ",", "\n", "query_pos", ",", "\n", "attn_mask", "=", "target_attn_mask", ",", "\n", "key_padding_mask", "=", "target_key_padding_mask", ")", "\n", "inp_residual", "=", "x", "\n", "", "elif", "layer", "==", "'norm'", ":", "\n", "            ", "x", "=", "x", "+", "'_norm{}'", ".", "format", "(", "norm_cnt", ")", "\n", "norm_cnt", "+=", "1", "\n", "", "elif", "layer", "==", "'multiheadattn'", ":", "\n", "            ", "x", "=", "self", ".", "multihead_attn", "(", "\n", "x", ",", "\n", "memory", ",", "\n", "memory", ",", "\n", "inp_residual", "if", "self", ".", "pre_norm", "else", "None", ",", "\n", "query_pos", ",", "\n", "key_pos", "=", "memory_pos", ",", "\n", "attn_mask", "=", "memory_attn_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ",", "\n", "selfattn", "=", "False", ")", "\n", "inp_residual", "=", "x", "\n", "", "elif", "layer", "==", "'ffn'", ":", "\n", "            ", "x", "=", "self", ".", "ffn", "(", "x", ",", "inp_residual", "if", "self", ".", "pre_norm", "else", "None", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unsupported layer type {layer}.'", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_transformer.test_multihead_attention": [[111, 150], ["mmdet.models.utils.MultiheadAttention", "torch.rand", "mmdet.models.utils.MultiheadAttention.", "torch.rand", "mmdet.models.utils.MultiheadAttention.", "torch.rand", "mmdet.models.utils.MultiheadAttention.", "torch.rand", "torch.rand", "mmdet.models.utils.MultiheadAttention.", "mmdet.models.utils.MultiheadAttention.", "mmdet.models.utils.MultiheadAttention.", "torch.rand", "torch.rand"], "function", ["None"], ["", "def", "test_multihead_attention", "(", "embed_dims", "=", "8", ",", "\n", "num_heads", "=", "2", ",", "\n", "dropout", "=", "0.1", ",", "\n", "num_query", "=", "5", ",", "\n", "num_key", "=", "10", ",", "\n", "batch_size", "=", "1", ")", ":", "\n", "    ", "module", "=", "MultiheadAttention", "(", "embed_dims", ",", "num_heads", ",", "dropout", ")", "\n", "# self attention", "\n", "query", "=", "torch", ".", "rand", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "query", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set key", "\n", "key", "=", "torch", ".", "rand", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "query", ",", "key", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set residual", "\n", "residual", "=", "torch", ".", "rand", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "query", ",", "key", ",", "key", ",", "residual", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set query_pos and key_pos", "\n", "query_pos", "=", "torch", ".", "rand", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "key_pos", "=", "torch", ".", "rand", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "query", ",", "key", ",", "None", ",", "residual", ",", "query_pos", ",", "key_pos", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set key_padding_mask", "\n", "key_padding_mask", "=", "torch", ".", "rand", "(", "batch_size", ",", "num_key", ")", ">", "0.5", "\n", "out", "=", "module", "(", "query", ",", "key", ",", "None", ",", "residual", ",", "query_pos", ",", "key_pos", ",", "None", ",", "\n", "key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set attn_mask", "\n", "attn_mask", "=", "torch", ".", "rand", "(", "num_query", ",", "num_key", ")", ">", "0.5", "\n", "out", "=", "module", "(", "query", ",", "key", ",", "key", ",", "residual", ",", "query_pos", ",", "key_pos", ",", "attn_mask", ",", "\n", "key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_transformer.test_ffn": [[152, 171], ["mmdet.models.utils.FFN", "torch.rand", "mmdet.models.utils.FFN.", "torch.rand", "mmdet.models.utils.FFN.", "mmdet.models.utils.FFN", "torch.rand", "mmdet.models.utils.FFN.", "pytest.raises", "mmdet.models.utils.FFN"], "function", ["None"], ["", "def", "test_ffn", "(", "embed_dims", "=", "8", ",", "feedforward_channels", "=", "8", ",", "num_fcs", "=", "2", ",", "batch_size", "=", "1", ")", ":", "\n", "# test invalid num_fcs", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "module", "=", "FFN", "(", "embed_dims", ",", "feedforward_channels", ",", "1", ")", "\n", "\n", "", "module", "=", "FFN", "(", "embed_dims", ",", "feedforward_channels", ",", "num_fcs", ")", "\n", "x", "=", "torch", ".", "rand", "(", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "x", ")", "\n", "assert", "out", ".", "shape", "==", "(", "batch_size", ",", "embed_dims", ")", "\n", "# set residual", "\n", "residual", "=", "torch", ".", "rand", "(", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "x", ",", "residual", ")", "\n", "assert", "out", ".", "shape", "==", "(", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# test case with no residual", "\n", "module", "=", "FFN", "(", "embed_dims", ",", "feedforward_channels", ",", "num_fcs", ",", "add_residual", "=", "False", ")", "\n", "x", "=", "torch", ".", "rand", "(", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "x", ")", "\n", "assert", "out", ".", "shape", "==", "(", "batch_size", ",", "embed_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_transformer.test_transformer_encoder_layer": [[173, 238], ["torch.rand", "mmdet.models.utils.TransformerEncoderLayer", "mmdet.models.utils.TransformerEncoderLayer.", "torch.rand", "mmdet.models.utils.TransformerEncoderLayer.", "mmdet.models.utils.TransformerEncoderLayer.", "mmdet.models.utils.TransformerEncoderLayer", "mmdet.models.utils.TransformerEncoderLayer.", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_transformer.test_transformer_encoder_layer.test_order"], "function", ["None"], ["", "def", "test_transformer_encoder_layer", "(", "embed_dims", "=", "8", ",", "\n", "num_heads", "=", "2", ",", "\n", "feedforward_channels", "=", "8", ",", "\n", "num_key", "=", "10", ",", "\n", "batch_size", "=", "1", ")", ":", "\n", "    ", "x", "=", "torch", ".", "rand", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "# test invalid number of order", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "order", "=", "(", "'norm'", ",", "'selfattn'", ",", "'norm'", ",", "'ffn'", ",", "'norm'", ")", "\n", "module", "=", "TransformerEncoderLayer", "(", "\n", "embed_dims", ",", "num_heads", ",", "feedforward_channels", ",", "order", "=", "order", ")", "\n", "\n", "# test invalid value of order", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "order", "=", "(", "'norm'", ",", "'selfattn'", ",", "'norm'", ",", "'unknown'", ")", "\n", "module", "=", "TransformerEncoderLayer", "(", "\n", "embed_dims", ",", "num_heads", ",", "feedforward_channels", ",", "order", "=", "order", ")", "\n", "\n", "", "module", "=", "TransformerEncoderLayer", "(", "embed_dims", ",", "num_heads", ",", "\n", "feedforward_channels", ")", "\n", "\n", "key_padding_mask", "=", "torch", ".", "rand", "(", "batch_size", ",", "num_key", ")", ">", "0.5", "\n", "out", "=", "module", "(", "x", ",", "key_padding_mask", "=", "key_padding_mask", ")", "\n", "assert", "not", "module", ".", "pre_norm", "\n", "assert", "out", ".", "shape", "==", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set pos", "\n", "pos", "=", "torch", ".", "rand", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "x", ",", "pos", ",", "key_padding_mask", "=", "key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set attn_mask", "\n", "attn_mask", "=", "torch", ".", "rand", "(", "num_key", ",", "num_key", ")", ">", "0.5", "\n", "out", "=", "module", "(", "x", ",", "pos", ",", "attn_mask", ",", "key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set pre_norm", "\n", "order", "=", "(", "'norm'", ",", "'selfattn'", ",", "'norm'", ",", "'ffn'", ")", "\n", "module", "=", "TransformerEncoderLayer", "(", "\n", "embed_dims", ",", "num_heads", ",", "feedforward_channels", ",", "order", "=", "order", ")", "\n", "assert", "module", ".", "pre_norm", "\n", "out", "=", "module", "(", "x", ",", "pos", ",", "attn_mask", ",", "key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "@", "patch", "(", "'mmdet.models.utils.TransformerEncoderLayer.forward'", ",", "\n", "_encoder_layer_forward", ")", "\n", "@", "patch", "(", "'mmdet.models.utils.FFN.forward'", ",", "_ffn_forward", ")", "\n", "@", "patch", "(", "'mmdet.models.utils.MultiheadAttention.forward'", ",", "\n", "_multihead_attention_forward", ")", "\n", "def", "test_order", "(", ")", ":", "\n", "        ", "module", "=", "TransformerEncoderLayer", "(", "embed_dims", ",", "num_heads", ",", "\n", "feedforward_channels", ")", "\n", "out", "=", "module", "(", "'input'", ")", "\n", "assert", "out", "==", "'input_selfattn(residual=input)_norm0_ffn'", "'(residual=norm0)_norm1'", "\n", "\n", "# pre_norm", "\n", "order", "=", "(", "'norm'", ",", "'selfattn'", ",", "'norm'", ",", "'ffn'", ")", "\n", "module", "=", "TransformerEncoderLayer", "(", "\n", "embed_dims", ",", "num_heads", ",", "feedforward_channels", ",", "order", "=", "order", ")", "\n", "out", "=", "module", "(", "'input'", ")", "\n", "assert", "out", "==", "'input_norm0_selfattn(residual=input)_'", "'norm1_ffn(residual=selfattn)'", "\n", "\n", "", "test_order", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_transformer.test_transformer_decoder_layer": [[240, 354], ["torch.rand", "mmdet.models.utils.TransformerDecoderLayer", "torch.rand", "mmdet.models.utils.TransformerDecoderLayer.", "torch.rand", "mmdet.models.utils.TransformerDecoderLayer.", "torch.rand", "mmdet.models.utils.TransformerDecoderLayer.", "mmdet.models.utils.TransformerDecoderLayer.", "mmdet.models.utils.TransformerDecoderLayer.", "torch.rand", "mmdet.models.utils.TransformerDecoderLayer.", "torch.rand", "mmdet.models.utils.TransformerDecoderLayer.", "mmdet.models.utils.TransformerDecoderLayer", "mmdet.models.utils.TransformerDecoderLayer.", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "test_transformer.test_transformer_encoder_layer.test_order"], "function", ["None"], ["", "def", "test_transformer_decoder_layer", "(", "embed_dims", "=", "8", ",", "\n", "num_heads", "=", "2", ",", "\n", "feedforward_channels", "=", "8", ",", "\n", "num_key", "=", "10", ",", "\n", "num_query", "=", "5", ",", "\n", "batch_size", "=", "1", ")", ":", "\n", "    ", "query", "=", "torch", ".", "rand", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "# test invalid number of order", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "order", "=", "(", "'norm'", ",", "'selfattn'", ",", "'norm'", ",", "'multiheadattn'", ",", "'norm'", ",", "'ffn'", ",", "\n", "'norm'", ")", "\n", "module", "=", "TransformerDecoderLayer", "(", "\n", "embed_dims", ",", "num_heads", ",", "feedforward_channels", ",", "order", "=", "order", ")", "\n", "\n", "# test invalid value of order", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "order", "=", "(", "'norm'", ",", "'selfattn'", ",", "'unknown'", ",", "'multiheadattn'", ",", "'norm'", ",", "'ffn'", ")", "\n", "module", "=", "TransformerDecoderLayer", "(", "\n", "embed_dims", ",", "num_heads", ",", "feedforward_channels", ",", "order", "=", "order", ")", "\n", "\n", "", "module", "=", "TransformerDecoderLayer", "(", "embed_dims", ",", "num_heads", ",", "\n", "feedforward_channels", ")", "\n", "memory", "=", "torch", ".", "rand", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "assert", "not", "module", ".", "pre_norm", "\n", "out", "=", "module", "(", "query", ",", "memory", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set query_pos", "\n", "query_pos", "=", "torch", ".", "rand", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "query", ",", "memory", ",", "memory_pos", "=", "None", ",", "query_pos", "=", "query_pos", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set memory_pos", "\n", "memory_pos", "=", "torch", ".", "rand", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "query", ",", "memory", ",", "memory_pos", ",", "query_pos", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set memory_key_padding_mask", "\n", "memory_key_padding_mask", "=", "torch", ".", "rand", "(", "batch_size", ",", "num_key", ")", ">", "0.5", "\n", "out", "=", "module", "(", "\n", "query", ",", "\n", "memory", ",", "\n", "memory_pos", ",", "\n", "query_pos", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set target_key_padding_mask", "\n", "target_key_padding_mask", "=", "torch", ".", "rand", "(", "batch_size", ",", "num_query", ")", ">", "0.5", "\n", "out", "=", "module", "(", "\n", "query", ",", "\n", "memory", ",", "\n", "memory_pos", ",", "\n", "query_pos", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ",", "\n", "target_key_padding_mask", "=", "target_key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set memory_attn_mask", "\n", "memory_attn_mask", "=", "torch", ".", "rand", "(", "num_query", ",", "num_key", ")", "\n", "out", "=", "module", "(", "\n", "query", ",", "\n", "memory", ",", "\n", "memory_pos", ",", "\n", "query_pos", ",", "\n", "memory_attn_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ",", "\n", "target_key_padding_mask", "=", "target_key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set target_attn_mask", "\n", "target_attn_mask", "=", "torch", ".", "rand", "(", "num_query", ",", "num_query", ")", "\n", "out", "=", "module", "(", "query", ",", "memory", ",", "memory_pos", ",", "query_pos", ",", "memory_attn_mask", ",", "\n", "target_attn_mask", ",", "memory_key_padding_mask", ",", "\n", "target_key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# pre_norm", "\n", "order", "=", "(", "'norm'", ",", "'selfattn'", ",", "'norm'", ",", "'multiheadattn'", ",", "'norm'", ",", "'ffn'", ")", "\n", "module", "=", "TransformerDecoderLayer", "(", "\n", "embed_dims", ",", "num_heads", ",", "feedforward_channels", ",", "order", "=", "order", ")", "\n", "assert", "module", ".", "pre_norm", "\n", "out", "=", "module", "(", "\n", "query", ",", "\n", "memory", ",", "\n", "memory_pos", ",", "\n", "query_pos", ",", "\n", "memory_attn_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ",", "\n", "target_key_padding_mask", "=", "target_key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "@", "patch", "(", "'mmdet.models.utils.TransformerDecoderLayer.forward'", ",", "\n", "_decoder_layer_forward", ")", "\n", "@", "patch", "(", "'mmdet.models.utils.FFN.forward'", ",", "_ffn_forward", ")", "\n", "@", "patch", "(", "'mmdet.models.utils.MultiheadAttention.forward'", ",", "\n", "_multihead_attention_forward", ")", "\n", "def", "test_order", "(", ")", ":", "\n", "        ", "module", "=", "TransformerDecoderLayer", "(", "embed_dims", ",", "num_heads", ",", "\n", "feedforward_channels", ")", "\n", "out", "=", "module", "(", "'input'", ",", "'memory'", ")", "\n", "assert", "out", "==", "'input_selfattn(residual=input)_norm0_multiheadattn'", "'(residual=norm0)_norm1_ffn(residual=norm1)_norm2'", "\n", "\n", "# pre_norm", "\n", "order", "=", "(", "'norm'", ",", "'selfattn'", ",", "'norm'", ",", "'multiheadattn'", ",", "'norm'", ",", "'ffn'", ")", "\n", "module", "=", "TransformerDecoderLayer", "(", "\n", "embed_dims", ",", "num_heads", ",", "feedforward_channels", ",", "order", "=", "order", ")", "\n", "out", "=", "module", "(", "'input'", ",", "'memory'", ")", "\n", "assert", "out", "==", "'input_norm0_selfattn(residual=input)_norm1_'", "'multiheadattn(residual=selfattn)_norm2_ffn(residual='", "'multiheadattn)'", "\n", "\n", "", "test_order", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_transformer.test_transformer_encoder": [[356, 393], ["mmdet.models.utils.TransformerEncoder", "torch.rand", "mmdet.models.utils.TransformerEncoder.", "torch.rand", "mmdet.models.utils.TransformerEncoder.", "mmdet.models.utils.TransformerEncoder.", "mmdet.models.utils.TransformerEncoder.", "mmdet.models.utils.TransformerEncoder", "mmdet.models.utils.TransformerEncoder.", "torch.rand", "torch.rand"], "function", ["None"], ["", "def", "test_transformer_encoder", "(", "num_layers", "=", "2", ",", "\n", "embed_dims", "=", "8", ",", "\n", "num_heads", "=", "2", ",", "\n", "feedforward_channels", "=", "8", ",", "\n", "num_key", "=", "10", ",", "\n", "batch_size", "=", "1", ")", ":", "\n", "    ", "module", "=", "TransformerEncoder", "(", "num_layers", ",", "embed_dims", ",", "num_heads", ",", "\n", "feedforward_channels", ")", "\n", "assert", "not", "module", ".", "pre_norm", "\n", "assert", "module", ".", "norm", "is", "None", "\n", "x", "=", "torch", ".", "rand", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "x", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set pos", "\n", "pos", "=", "torch", ".", "rand", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "x", ",", "pos", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set key_padding_mask", "\n", "key_padding_mask", "=", "torch", ".", "rand", "(", "batch_size", ",", "num_key", ")", ">", "0.5", "\n", "out", "=", "module", "(", "x", ",", "pos", ",", "None", ",", "key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set attn_mask", "\n", "attn_mask", "=", "torch", ".", "rand", "(", "num_key", ",", "num_key", ")", ">", "0.5", "\n", "out", "=", "module", "(", "x", ",", "pos", ",", "attn_mask", ",", "key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# pre_norm", "\n", "order", "=", "(", "'norm'", ",", "'selfattn'", ",", "'norm'", ",", "'ffn'", ")", "\n", "module", "=", "TransformerEncoder", "(", "\n", "num_layers", ",", "embed_dims", ",", "num_heads", ",", "feedforward_channels", ",", "order", "=", "order", ")", "\n", "assert", "module", ".", "pre_norm", "\n", "assert", "module", ".", "norm", "is", "not", "None", "\n", "out", "=", "module", "(", "x", ",", "pos", ",", "attn_mask", ",", "key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_transformer.test_transformer_decoder": [[395, 474], ["mmdet.models.utils.TransformerDecoder", "torch.rand", "torch.rand", "mmdet.models.utils.TransformerDecoder.", "torch.rand", "mmdet.models.utils.TransformerDecoder.", "torch.rand", "mmdet.models.utils.TransformerDecoder.", "mmdet.models.utils.TransformerDecoder.", "mmdet.models.utils.TransformerDecoder.", "mmdet.models.utils.TransformerDecoder.", "mmdet.models.utils.TransformerDecoder.", "mmdet.models.utils.TransformerDecoder", "mmdet.models.utils.TransformerDecoder.", "mmdet.models.utils.TransformerDecoder", "mmdet.models.utils.TransformerDecoder.", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "function", ["None"], ["", "def", "test_transformer_decoder", "(", "num_layers", "=", "2", ",", "\n", "embed_dims", "=", "8", ",", "\n", "num_heads", "=", "2", ",", "\n", "feedforward_channels", "=", "8", ",", "\n", "num_key", "=", "10", ",", "\n", "num_query", "=", "5", ",", "\n", "batch_size", "=", "1", ")", ":", "\n", "    ", "module", "=", "TransformerDecoder", "(", "num_layers", ",", "embed_dims", ",", "num_heads", ",", "\n", "feedforward_channels", ")", "\n", "query", "=", "torch", ".", "rand", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "memory", "=", "torch", ".", "rand", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "query", ",", "memory", ")", "\n", "assert", "out", ".", "shape", "==", "(", "1", ",", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set query_pos", "\n", "query_pos", "=", "torch", ".", "rand", "(", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "query", ",", "memory", ",", "query_pos", "=", "query_pos", ")", "\n", "assert", "out", ".", "shape", "==", "(", "1", ",", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set memory_pos", "\n", "memory_pos", "=", "torch", ".", "rand", "(", "num_key", ",", "batch_size", ",", "embed_dims", ")", "\n", "out", "=", "module", "(", "query", ",", "memory", ",", "memory_pos", ",", "query_pos", ")", "\n", "assert", "out", ".", "shape", "==", "(", "1", ",", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set memory_key_padding_mask", "\n", "memory_key_padding_mask", "=", "torch", ".", "rand", "(", "batch_size", ",", "num_key", ")", ">", "0.5", "\n", "out", "=", "module", "(", "\n", "query", ",", "\n", "memory", ",", "\n", "memory_pos", ",", "\n", "query_pos", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "1", ",", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set target_key_padding_mask", "\n", "target_key_padding_mask", "=", "torch", ".", "rand", "(", "batch_size", ",", "num_query", ")", ">", "0.5", "\n", "out", "=", "module", "(", "\n", "query", ",", "\n", "memory", ",", "\n", "memory_pos", ",", "\n", "query_pos", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ",", "\n", "target_key_padding_mask", "=", "target_key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "1", ",", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set memory_attn_mask", "\n", "memory_attn_mask", "=", "torch", ".", "rand", "(", "num_query", ",", "num_key", ")", ">", "0.5", "\n", "out", "=", "module", "(", "query", ",", "memory", ",", "memory_pos", ",", "query_pos", ",", "memory_attn_mask", ",", "None", ",", "\n", "memory_key_padding_mask", ",", "target_key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "1", ",", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# set target_attn_mask", "\n", "target_attn_mask", "=", "torch", ".", "rand", "(", "num_query", ",", "num_query", ")", ">", "0.5", "\n", "out", "=", "module", "(", "query", ",", "memory", ",", "memory_pos", ",", "query_pos", ",", "memory_attn_mask", ",", "\n", "target_attn_mask", ",", "memory_key_padding_mask", ",", "\n", "target_key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "1", ",", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# pre_norm", "\n", "order", "=", "(", "'norm'", ",", "'selfattn'", ",", "'norm'", ",", "'multiheadattn'", ",", "'norm'", ",", "'ffn'", ")", "\n", "module", "=", "TransformerDecoder", "(", "\n", "num_layers", ",", "embed_dims", ",", "num_heads", ",", "feedforward_channels", ",", "order", "=", "order", ")", "\n", "out", "=", "module", "(", "query", ",", "memory", ",", "memory_pos", ",", "query_pos", ",", "memory_attn_mask", ",", "\n", "target_attn_mask", ",", "memory_key_padding_mask", ",", "\n", "target_key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "1", ",", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n", "# return_intermediate", "\n", "module", "=", "TransformerDecoder", "(", "\n", "num_layers", ",", "\n", "embed_dims", ",", "\n", "num_heads", ",", "\n", "feedforward_channels", ",", "\n", "order", "=", "order", ",", "\n", "return_intermediate", "=", "True", ")", "\n", "out", "=", "module", "(", "query", ",", "memory", ",", "memory_pos", ",", "query_pos", ",", "memory_attn_mask", ",", "\n", "target_attn_mask", ",", "memory_key_padding_mask", ",", "\n", "target_key_padding_mask", ")", "\n", "assert", "out", ".", "shape", "==", "(", "num_layers", ",", "num_query", ",", "batch_size", ",", "embed_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_transformer.test_transformer": [[476, 524], ["mmdet.models.utils.Transformer", "torch.rand", "torch.rand", "torch.rand", "mmdet.models.utils.Transformer.", "mmdet.models.utils.Transformer", "mmdet.models.utils.Transformer.", "mmdet.models.utils.Transformer", "mmdet.models.utils.Transformer.", "mmdet.models.utils.Transformer", "mmdet.models.utils.Transformer.", "mmdet.models.utils.Transformer.init_weights", "torch.rand"], "function", ["None"], ["", "def", "test_transformer", "(", "num_enc_layers", "=", "2", ",", "\n", "num_dec_layers", "=", "2", ",", "\n", "embed_dims", "=", "8", ",", "\n", "num_heads", "=", "2", ",", "\n", "num_query", "=", "5", ",", "\n", "batch_size", "=", "1", ")", ":", "\n", "    ", "module", "=", "Transformer", "(", "embed_dims", ",", "num_heads", ",", "num_enc_layers", ",", "num_dec_layers", ")", "\n", "height", ",", "width", "=", "8", ",", "6", "\n", "x", "=", "torch", ".", "rand", "(", "batch_size", ",", "embed_dims", ",", "height", ",", "width", ")", "\n", "mask", "=", "torch", ".", "rand", "(", "batch_size", ",", "height", ",", "width", ")", ">", "0.5", "\n", "query_embed", "=", "torch", ".", "rand", "(", "num_query", ",", "embed_dims", ")", "\n", "pos_embed", "=", "torch", ".", "rand", "(", "batch_size", ",", "embed_dims", ",", "height", ",", "width", ")", "\n", "hs", ",", "mem", "=", "module", "(", "x", ",", "mask", ",", "query_embed", ",", "pos_embed", ")", "\n", "assert", "hs", ".", "shape", "==", "(", "1", ",", "batch_size", ",", "num_query", ",", "embed_dims", ")", "\n", "assert", "mem", ".", "shape", "==", "(", "batch_size", ",", "embed_dims", ",", "height", ",", "width", ")", "\n", "\n", "# pre_norm", "\n", "module", "=", "Transformer", "(", "\n", "embed_dims", ",", "num_heads", ",", "num_enc_layers", ",", "num_dec_layers", ",", "pre_norm", "=", "True", ")", "\n", "hs", ",", "mem", "=", "module", "(", "x", ",", "mask", ",", "query_embed", ",", "pos_embed", ")", "\n", "assert", "hs", ".", "shape", "==", "(", "1", ",", "batch_size", ",", "num_query", ",", "embed_dims", ")", "\n", "assert", "mem", ".", "shape", "==", "(", "batch_size", ",", "embed_dims", ",", "height", ",", "width", ")", "\n", "\n", "# return_intermediate", "\n", "module", "=", "Transformer", "(", "\n", "embed_dims", ",", "\n", "num_heads", ",", "\n", "num_enc_layers", ",", "\n", "num_dec_layers", ",", "\n", "return_intermediate_dec", "=", "True", ")", "\n", "hs", ",", "mem", "=", "module", "(", "x", ",", "mask", ",", "query_embed", ",", "pos_embed", ")", "\n", "assert", "hs", ".", "shape", "==", "(", "num_dec_layers", ",", "batch_size", ",", "num_query", ",", "embed_dims", ")", "\n", "assert", "mem", ".", "shape", "==", "(", "batch_size", ",", "embed_dims", ",", "height", ",", "width", ")", "\n", "\n", "# pre_norm and return_intermediate", "\n", "module", "=", "Transformer", "(", "\n", "embed_dims", ",", "\n", "num_heads", ",", "\n", "num_enc_layers", ",", "\n", "num_dec_layers", ",", "\n", "pre_norm", "=", "True", ",", "\n", "return_intermediate_dec", "=", "True", ")", "\n", "hs", ",", "mem", "=", "module", "(", "x", ",", "mask", ",", "query_embed", ",", "pos_embed", ")", "\n", "assert", "hs", ".", "shape", "==", "(", "num_dec_layers", ",", "batch_size", ",", "num_query", ",", "embed_dims", ")", "\n", "assert", "mem", ".", "shape", "==", "(", "batch_size", ",", "embed_dims", ",", "height", ",", "width", ")", "\n", "\n", "# test init_weights", "\n", "module", ".", "init_weights", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_misc.dummy_raw_polygon_masks": [[10, 24], ["range", "polygons.append", "numpy.random.randint", "numpy.random.uniform", "min"], "function", ["None"], ["def", "dummy_raw_polygon_masks", "(", "size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        size (tuple): expected shape of dummy masks, (N, H, W)\n\n    Return:\n        list[list[ndarray]]: dummy mask\n    \"\"\"", "\n", "num_obj", ",", "heigt", ",", "width", "=", "size", "\n", "polygons", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_obj", ")", ":", "\n", "        ", "num_points", "=", "np", ".", "random", ".", "randint", "(", "5", ")", "*", "2", "+", "6", "\n", "polygons", ".", "append", "(", "[", "np", ".", "random", ".", "uniform", "(", "0", ",", "min", "(", "heigt", ",", "width", ")", ",", "num_points", ")", "]", ")", "\n", "", "return", "polygons", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_misc.test_mask2ndarray": [[26, 49], ["numpy.ones", "mmdet.core.mask.structures.BitmapMasks", "mmdet.core.utils.mask2ndarray", "numpy.allclose", "test_misc.dummy_raw_polygon_masks", "mmdet.core.mask.structures.PolygonMasks", "mmdet.core.utils.mask2ndarray", "numpy.ones", "mmdet.core.utils.mask2ndarray", "numpy.allclose", "torch.ones", "mmdet.core.utils.mask2ndarray", "numpy.allclose", "pytest.raises", "mmdet.core.utils.mask2ndarray"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.misc.mask2ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.misc.mask2ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.misc.mask2ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.misc.mask2ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.misc.mask2ndarray"], ["", "def", "test_mask2ndarray", "(", ")", ":", "\n", "    ", "raw_masks", "=", "np", ".", "ones", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_mask", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "output_mask", "=", "mask2ndarray", "(", "bitmap_mask", ")", "\n", "assert", "np", ".", "allclose", "(", "raw_masks", ",", "output_mask", ")", "\n", "\n", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "output_mask", "=", "mask2ndarray", "(", "polygon_masks", ")", "\n", "assert", "output_mask", ".", "shape", "==", "(", "3", ",", "28", ",", "28", ")", "\n", "\n", "raw_masks", "=", "np", ".", "ones", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "output_mask", "=", "mask2ndarray", "(", "raw_masks", ")", "\n", "assert", "np", ".", "allclose", "(", "raw_masks", ",", "output_mask", ")", "\n", "\n", "raw_masks", "=", "torch", ".", "ones", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "output_mask", "=", "mask2ndarray", "(", "raw_masks", ")", "\n", "assert", "np", ".", "allclose", "(", "raw_masks", ",", "output_mask", ")", "\n", "\n", "# test unsupported type", "\n", "raw_masks", "=", "[", "]", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "output_mask", "=", "mask2ndarray", "(", "raw_masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_misc.test_distance2bbox": [[51, 93], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "mmdet.core.bbox.distance2bbox", "torch.Tensor.allclose", "mmdet.core.bbox.distance2bbox", "torch.Tensor.allclose", "torch.Tensor.unsqueeze().repeat", "torch.Tensor.unsqueeze().repeat", "mmdet.core.bbox.distance2bbox.allclose", "mmdet.core.bbox.distance2bbox.allclose", "mmdet.core.bbox.distance2bbox.allclose", "torch.zeros", "torch.zeros", "mmdet.core.bbox.distance2bbox", "torch.zeros", "torch.zeros", "mmdet.core.bbox.distance2bbox", "mmdet.core.bbox.distance2bbox", "mmdet.core.bbox.distance2bbox", "mmdet.core.bbox.distance2bbox", "pytest.raises", "mmdet.core.bbox.distance2bbox", "torch.Tensor", "torch.Tensor.unsqueeze", "torch.Tensor.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.distance2bbox", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.distance2bbox", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.distance2bbox", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.distance2bbox", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.distance2bbox", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.distance2bbox", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.distance2bbox", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.distance2bbox"], ["", "", "def", "test_distance2bbox", "(", ")", ":", "\n", "    ", "point", "=", "torch", ".", "Tensor", "(", "[", "[", "74.", ",", "61.", "]", ",", "[", "-", "29.", ",", "106.", "]", ",", "[", "138.", ",", "61.", "]", ",", "[", "29.", ",", "170.", "]", "]", ")", "\n", "\n", "distance", "=", "torch", ".", "Tensor", "(", "[", "[", "0.", ",", "0", ",", "1.", ",", "1.", "]", ",", "[", "1.", ",", "2.", ",", "10.", ",", "6.", "]", ",", "\n", "[", "22.", ",", "-", "29.", ",", "138.", ",", "61.", "]", ",", "[", "54.", ",", "-", "29.", ",", "170.", ",", "61.", "]", "]", ")", "\n", "expected_decode_bboxes", "=", "torch", ".", "Tensor", "(", "[", "[", "74.", ",", "61.", ",", "75.", ",", "62.", "]", ",", "\n", "[", "0.", ",", "104.", ",", "0.", ",", "112.", "]", ",", "\n", "[", "100.", ",", "90.", ",", "100.", ",", "120.", "]", ",", "\n", "[", "0.", ",", "120.", ",", "100.", ",", "120.", "]", "]", ")", "\n", "out_bbox", "=", "distance2bbox", "(", "point", ",", "distance", ",", "max_shape", "=", "(", "120", ",", "100", ")", ")", "\n", "assert", "expected_decode_bboxes", ".", "allclose", "(", "out_bbox", ")", "\n", "out", "=", "distance2bbox", "(", "point", ",", "distance", ",", "max_shape", "=", "torch", ".", "Tensor", "(", "(", "120", ",", "100", ")", ")", ")", "\n", "assert", "expected_decode_bboxes", ".", "allclose", "(", "out", ")", "\n", "\n", "batch_point", "=", "point", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ",", "1", ")", "\n", "batch_distance", "=", "distance", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ",", "1", ")", "\n", "batch_out", "=", "distance2bbox", "(", "\n", "batch_point", ",", "batch_distance", ",", "max_shape", "=", "(", "120", ",", "100", ")", ")", "[", "0", "]", "\n", "assert", "out", ".", "allclose", "(", "batch_out", ")", "\n", "batch_out", "=", "distance2bbox", "(", "\n", "batch_point", ",", "batch_distance", ",", "max_shape", "=", "[", "(", "120", ",", "100", ")", ",", "(", "120", ",", "100", ")", "]", ")", "[", "0", "]", "\n", "assert", "out", ".", "allclose", "(", "batch_out", ")", "\n", "\n", "batch_out", "=", "distance2bbox", "(", "point", ",", "batch_distance", ",", "max_shape", "=", "(", "120", ",", "100", ")", ")", "[", "0", "]", "\n", "assert", "out", ".", "allclose", "(", "batch_out", ")", "\n", "\n", "# test max_shape is not equal to batch", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "distance2bbox", "(", "\n", "batch_point", ",", "\n", "batch_distance", ",", "\n", "max_shape", "=", "[", "(", "120", ",", "100", ")", ",", "(", "120", ",", "100", ")", ",", "(", "32", ",", "32", ")", "]", ")", "\n", "\n", "", "rois", "=", "torch", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "deltas", "=", "torch", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "out", "=", "distance2bbox", "(", "rois", ",", "deltas", ",", "max_shape", "=", "(", "120", ",", "100", ")", ")", "\n", "assert", "rois", ".", "shape", "==", "out", ".", "shape", "\n", "\n", "rois", "=", "torch", ".", "zeros", "(", "(", "2", ",", "0", ",", "4", ")", ")", "\n", "deltas", "=", "torch", ".", "zeros", "(", "(", "2", ",", "0", ",", "4", ")", ")", "\n", "out", "=", "distance2bbox", "(", "rois", ",", "deltas", ",", "max_shape", "=", "(", "120", ",", "100", ")", ")", "\n", "assert", "rois", ".", "shape", "==", "out", ".", "shape", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_version.test_version_check": [[4, 16], ["mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version", "mmdet.digit_version"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version"], ["def", "test_version_check", "(", ")", ":", "\n", "    ", "assert", "digit_version", "(", "'1.0.5'", ")", ">", "digit_version", "(", "'1.0.5rc0'", ")", "\n", "assert", "digit_version", "(", "'1.0.5'", ")", ">", "digit_version", "(", "'1.0.4rc0'", ")", "\n", "assert", "digit_version", "(", "'1.0.5'", ")", ">", "digit_version", "(", "'1.0rc0'", ")", "\n", "assert", "digit_version", "(", "'1.0.0'", ")", ">", "digit_version", "(", "'0.6.2'", ")", "\n", "assert", "digit_version", "(", "'1.0.0'", ")", ">", "digit_version", "(", "'0.2.16'", ")", "\n", "assert", "digit_version", "(", "'1.0.5rc0'", ")", ">", "digit_version", "(", "'1.0.0rc0'", ")", "\n", "assert", "digit_version", "(", "'1.0.0rc1'", ")", ">", "digit_version", "(", "'1.0.0rc0'", ")", "\n", "assert", "digit_version", "(", "'1.0.0rc2'", ")", ">", "digit_version", "(", "'1.0.0rc0'", ")", "\n", "assert", "digit_version", "(", "'1.0.0rc2'", ")", ">", "digit_version", "(", "'1.0.0rc1'", ")", "\n", "assert", "digit_version", "(", "'1.0.1rc1'", ")", ">", "digit_version", "(", "'1.0.0rc1'", ")", "\n", "assert", "digit_version", "(", "'1.0.0'", ")", ">", "digit_version", "(", "'1.0.0rc1'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_visualization.test_color": [[14, 29], ["mmdet.core.visualization.color_val_matplotlib", "mmdet.core.visualization.color_val_matplotlib", "mmdet.core.visualization.color_val_matplotlib", "mmdet.core.visualization.color_val_matplotlib", "mmdet.core.visualization.color_val_matplotlib", "pytest.raises", "mmdet.core.visualization.color_val_matplotlib", "pytest.raises", "mmdet.core.visualization.color_val_matplotlib", "pytest.raises", "mmdet.core.visualization.color_val_matplotlib", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.color_val_matplotlib", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.color_val_matplotlib", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.color_val_matplotlib", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.color_val_matplotlib", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.color_val_matplotlib", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.color_val_matplotlib", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.color_val_matplotlib", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.color_val_matplotlib"], ["def", "test_color", "(", ")", ":", "\n", "    ", "assert", "vis", ".", "color_val_matplotlib", "(", "mmcv", ".", "Color", ".", "blue", ")", "==", "(", "0.", ",", "0.", ",", "1.", ")", "\n", "assert", "vis", ".", "color_val_matplotlib", "(", "'green'", ")", "==", "(", "0.", ",", "1.", ",", "0.", ")", "\n", "assert", "vis", ".", "color_val_matplotlib", "(", "(", "1", ",", "2", ",", "3", ")", ")", "==", "(", "3", "/", "255", ",", "2", "/", "255", ",", "1", "/", "255", ")", "\n", "assert", "vis", ".", "color_val_matplotlib", "(", "100", ")", "==", "(", "100", "/", "255", ",", "100", "/", "255", ",", "100", "/", "255", ")", "\n", "assert", "vis", ".", "color_val_matplotlib", "(", "np", ".", "zeros", "(", "3", ",", "dtype", "=", "np", ".", "int", ")", ")", "==", "(", "0.", ",", "0.", ",", "0.", ")", "\n", "# forbid white color", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "vis", ".", "color_val_matplotlib", "(", "[", "255", ",", "255", ",", "255", "]", ")", "\n", "# forbid float", "\n", "", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "vis", ".", "color_val_matplotlib", "(", "1.0", ")", "\n", "# overflowed", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "vis", ".", "color_val_matplotlib", "(", "(", "0", ",", "0", ",", "500", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_visualization.test_imshow_det_bboxes": [[31, 78], ["os.join", "numpy.ones", "numpy.array", "numpy.array", "mmdet.core.visualization.imshow_det_bboxes", "os.isfile", "os.remove", "os.remove", "numpy.ones", "numpy.array", "numpy.array", "mmdet.core.visualization.imshow_det_bboxes", "os.isfile", "os.remove", "os.remove", "numpy.ones", "numpy.ones", "numpy.ones", "mmdet.core.visualization.imshow_det_bboxes", "os.isfile", "os.remove", "os.remove", "numpy.ones", "numpy.array", "numpy.array", "numpy.array", "mmdet.core.visualization.imshow_det_bboxes", "os.isfile", "os.remove", "os.remove", "tempfile.gettempdir", "numpy.allclose", "numpy.random.random", "pytest.raises", "torch.tensor", "mmdet.core.visualization.imshow_det_bboxes"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_det_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_det_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_det_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_det_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_det_bboxes"], ["", "", "def", "test_imshow_det_bboxes", "(", ")", ":", "\n", "    ", "tmp_filename", "=", "osp", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "'det_bboxes_image'", ",", "\n", "'image.jpg'", ")", "\n", "image", "=", "np", ".", "ones", "(", "(", "10", ",", "10", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "bbox", "=", "np", ".", "array", "(", "[", "[", "2", ",", "1", ",", "3", ",", "3", "]", ",", "[", "3", ",", "4", ",", "6", ",", "6", "]", "]", ")", "\n", "label", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "out_image", "=", "vis", ".", "imshow_det_bboxes", "(", "\n", "image", ",", "bbox", ",", "label", ",", "out_file", "=", "tmp_filename", ",", "show", "=", "False", ")", "\n", "assert", "osp", ".", "isfile", "(", "tmp_filename", ")", "\n", "assert", "image", ".", "shape", "==", "out_image", ".", "shape", "\n", "assert", "not", "np", ".", "allclose", "(", "image", ",", "out_image", ")", "\n", "os", ".", "remove", "(", "tmp_filename", ")", "\n", "\n", "# test grayscale images", "\n", "image", "=", "np", ".", "ones", "(", "(", "10", ",", "10", ")", ",", "np", ".", "uint8", ")", "\n", "bbox", "=", "np", ".", "array", "(", "[", "[", "2", ",", "1", ",", "3", ",", "3", "]", ",", "[", "3", ",", "4", ",", "6", ",", "6", "]", "]", ")", "\n", "label", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "out_image", "=", "vis", ".", "imshow_det_bboxes", "(", "\n", "image", ",", "bbox", ",", "label", ",", "out_file", "=", "tmp_filename", ",", "show", "=", "False", ")", "\n", "assert", "osp", ".", "isfile", "(", "tmp_filename", ")", "\n", "assert", "image", ".", "shape", "==", "out_image", ".", "shape", "[", ":", "2", "]", "\n", "os", ".", "remove", "(", "tmp_filename", ")", "\n", "\n", "# test shaped (0,)", "\n", "image", "=", "np", ".", "ones", "(", "(", "10", ",", "10", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "bbox", "=", "np", ".", "ones", "(", "(", "0", ",", "4", ")", ")", "\n", "label", "=", "np", ".", "ones", "(", "(", "0", ",", ")", ")", "\n", "vis", ".", "imshow_det_bboxes", "(", "\n", "image", ",", "bbox", ",", "label", ",", "out_file", "=", "tmp_filename", ",", "show", "=", "False", ")", "\n", "assert", "osp", ".", "isfile", "(", "tmp_filename", ")", "\n", "os", ".", "remove", "(", "tmp_filename", ")", "\n", "\n", "# test mask", "\n", "image", "=", "np", ".", "ones", "(", "(", "10", ",", "10", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "bbox", "=", "np", ".", "array", "(", "[", "[", "2", ",", "1", ",", "3", ",", "3", "]", ",", "[", "3", ",", "4", ",", "6", ",", "6", "]", "]", ")", "\n", "label", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "segms", "=", "np", ".", "random", ".", "random", "(", "(", "2", ",", "10", ",", "10", ")", ")", ">", "0.5", "\n", "segms", "=", "np", ".", "array", "(", "segms", ",", "np", ".", "int32", ")", "\n", "vis", ".", "imshow_det_bboxes", "(", "\n", "image", ",", "bbox", ",", "label", ",", "segms", ",", "out_file", "=", "tmp_filename", ",", "show", "=", "False", ")", "\n", "assert", "osp", ".", "isfile", "(", "tmp_filename", ")", "\n", "os", ".", "remove", "(", "tmp_filename", ")", "\n", "\n", "# test tensor mask type error", "\n", "with", "pytest", ".", "raises", "(", "AttributeError", ")", ":", "\n", "        ", "segms", "=", "torch", ".", "tensor", "(", "segms", ")", "\n", "vis", ".", "imshow_det_bboxes", "(", "image", ",", "bbox", ",", "label", ",", "segms", ",", "show", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_visualization.test_imshow_gt_det_bboxes": [[80, 128], ["os.join", "numpy.ones", "numpy.array", "numpy.array", "dict", "numpy.array", "mmdet.core.visualization.imshow_gt_det_bboxes", "os.isfile", "os.remove", "os.remove", "numpy.ones", "numpy.array", "numpy.array", "dict", "numpy.array", "mmdet.core.visualization.imshow_gt_det_bboxes", "os.isfile", "os.remove", "os.remove", "numpy.ones", "mmdet.core.visualization.imshow_gt_det_bboxes", "os.isfile", "os.remove", "os.remove", "torch.ones", "mmdet.core.visualization.imshow_gt_det_bboxes", "os.isfile", "os.remove", "os.remove", "tempfile.gettempdir", "numpy.allclose", "pytest.raises", "mmdet.core.visualization.imshow_gt_det_bboxes"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_gt_det_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_gt_det_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_gt_det_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_gt_det_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_gt_det_bboxes"], ["", "", "def", "test_imshow_gt_det_bboxes", "(", ")", ":", "\n", "    ", "tmp_filename", "=", "osp", ".", "join", "(", "tempfile", ".", "gettempdir", "(", ")", ",", "'det_bboxes_image'", ",", "\n", "'image.jpg'", ")", "\n", "image", "=", "np", ".", "ones", "(", "(", "10", ",", "10", ",", "3", ")", ",", "np", ".", "uint8", ")", "\n", "bbox", "=", "np", ".", "array", "(", "[", "[", "2", ",", "1", ",", "3", ",", "3", "]", ",", "[", "3", ",", "4", ",", "6", ",", "6", "]", "]", ")", "\n", "label", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "annotation", "=", "dict", "(", "gt_bboxes", "=", "bbox", ",", "gt_labels", "=", "label", ")", "\n", "det_result", "=", "np", ".", "array", "(", "[", "[", "2", ",", "1", ",", "3", ",", "3", ",", "0", "]", ",", "[", "3", ",", "4", ",", "6", ",", "6", ",", "1", "]", "]", ")", "\n", "result", "=", "[", "det_result", "]", "\n", "out_image", "=", "vis", ".", "imshow_gt_det_bboxes", "(", "\n", "image", ",", "annotation", ",", "result", ",", "out_file", "=", "tmp_filename", ",", "show", "=", "False", ")", "\n", "assert", "osp", ".", "isfile", "(", "tmp_filename", ")", "\n", "assert", "image", ".", "shape", "==", "out_image", ".", "shape", "\n", "assert", "not", "np", ".", "allclose", "(", "image", ",", "out_image", ")", "\n", "os", ".", "remove", "(", "tmp_filename", ")", "\n", "\n", "# test grayscale images", "\n", "image", "=", "np", ".", "ones", "(", "(", "10", ",", "10", ")", ",", "np", ".", "uint8", ")", "\n", "bbox", "=", "np", ".", "array", "(", "[", "[", "2", ",", "1", ",", "3", ",", "3", "]", ",", "[", "3", ",", "4", ",", "6", ",", "6", "]", "]", ")", "\n", "label", "=", "np", ".", "array", "(", "[", "0", ",", "1", "]", ")", "\n", "annotation", "=", "dict", "(", "gt_bboxes", "=", "bbox", ",", "gt_labels", "=", "label", ")", "\n", "det_result", "=", "np", ".", "array", "(", "[", "[", "2", ",", "1", ",", "3", ",", "3", ",", "0", "]", ",", "[", "3", ",", "4", ",", "6", ",", "6", ",", "1", "]", "]", ")", "\n", "result", "=", "[", "det_result", "]", "\n", "vis", ".", "imshow_gt_det_bboxes", "(", "\n", "image", ",", "annotation", ",", "result", ",", "out_file", "=", "tmp_filename", ",", "show", "=", "False", ")", "\n", "assert", "osp", ".", "isfile", "(", "tmp_filename", ")", "\n", "os", ".", "remove", "(", "tmp_filename", ")", "\n", "\n", "# test numpy mask", "\n", "gt_mask", "=", "np", ".", "ones", "(", "(", "2", ",", "10", ",", "10", ")", ")", "\n", "annotation", "[", "'gt_masks'", "]", "=", "gt_mask", "\n", "vis", ".", "imshow_gt_det_bboxes", "(", "\n", "image", ",", "annotation", ",", "result", ",", "out_file", "=", "tmp_filename", ",", "show", "=", "False", ")", "\n", "assert", "osp", ".", "isfile", "(", "tmp_filename", ")", "\n", "os", ".", "remove", "(", "tmp_filename", ")", "\n", "\n", "# test tensor mask", "\n", "gt_mask", "=", "torch", ".", "ones", "(", "(", "2", ",", "10", ",", "10", ")", ")", "\n", "annotation", "[", "'gt_masks'", "]", "=", "gt_mask", "\n", "vis", ".", "imshow_gt_det_bboxes", "(", "\n", "image", ",", "annotation", ",", "result", ",", "out_file", "=", "tmp_filename", ",", "show", "=", "False", ")", "\n", "assert", "osp", ".", "isfile", "(", "tmp_filename", ")", "\n", "os", ".", "remove", "(", "tmp_filename", ")", "\n", "\n", "# test unsupported type", "\n", "annotation", "[", "'gt_masks'", "]", "=", "[", "]", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "vis", ".", "imshow_gt_det_bboxes", "(", "image", ",", "annotation", ",", "result", ",", "show", "=", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_max_iou_assigner": [[14, 36], ["mmdet.core.bbox.assigners.MaxIoUAssigner", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "torch.LongTensor", "torch.all", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["def", "test_max_iou_assigner", "(", ")", ":", "\n", "    ", "self", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "3", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "gt_labels", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "4", "\n", "assert", "len", "(", "assign_result", ".", "labels", ")", "==", "4", "\n", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "0", ",", "2", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_max_iou_assigner_with_ignore": [[38, 63], ["mmdet.core.bbox.assigners.MaxIoUAssigner", "torch.FloatTensor", "torch.FloatTensor", "torch.Tensor", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "torch.LongTensor", "torch.all"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_max_iou_assigner_with_ignore", "(", ")", ":", "\n", "    ", "self", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "30", ",", "32", ",", "40", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "30", ",", "30", ",", "40", ",", "40", "]", ",", "\n", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "\n", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "0", ",", "2", ",", "-", "1", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_max_iou_assigner_with_empty_gt": [[65, 82], ["mmdet.core.bbox.assigners.MaxIoUAssigner", "torch.FloatTensor", "torch.empty", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "torch.LongTensor", "torch.all"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_max_iou_assigner_with_empty_gt", "(", ")", ":", "\n", "    ", "\"\"\"Test corner case where an image might have no true detections.\"\"\"", "\n", "self", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "empty", "(", "0", ",", "4", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ")", "\n", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_max_iou_assigner_with_empty_boxes": [[84, 106], ["mmdet.core.bbox.assigners.MaxIoUAssigner", "torch.empty", "torch.FloatTensor", "torch.LongTensor", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "len", "tuple", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_max_iou_assigner_with_empty_boxes", "(", ")", ":", "\n", "    ", "\"\"\"Test corner case where a network might predict no boxes.\"\"\"", "\n", "self", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "3", "]", ")", "\n", "\n", "# Test with gt_labels", "\n", "assign_result", "=", "self", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "gt_labels", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "assert", "tuple", "(", "assign_result", ".", "labels", ".", "shape", ")", "==", "(", "0", ",", ")", "\n", "\n", "# Test without gt_labels", "\n", "assign_result", "=", "self", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "None", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "assert", "assign_result", ".", "labels", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_max_iou_assigner_with_empty_boxes_and_ignore": [[108, 140], ["mmdet.core.bbox.assigners.MaxIoUAssigner", "torch.empty", "torch.FloatTensor", "torch.Tensor", "torch.LongTensor", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "len", "tuple", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_max_iou_assigner_with_empty_boxes_and_ignore", "(", ")", ":", "\n", "    ", "\"\"\"Test corner case where a network might predict no boxes and\n    ignore_iof_thr is on.\"\"\"", "\n", "self", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "30", ",", "30", ",", "40", ",", "40", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "3", "]", ")", "\n", "\n", "# Test with gt_labels", "\n", "assign_result", "=", "self", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", "=", "gt_labels", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "assert", "tuple", "(", "assign_result", ".", "labels", ".", "shape", ")", "==", "(", "0", ",", ")", "\n", "\n", "# Test without gt_labels", "\n", "assign_result", "=", "self", ".", "assign", "(", "\n", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "None", ",", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "assert", "assign_result", ".", "labels", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_max_iou_assigner_with_empty_boxes_and_gt": [[142, 152], ["mmdet.core.bbox.assigners.MaxIoUAssigner", "torch.empty", "torch.empty", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_max_iou_assigner_with_empty_boxes_and_gt", "(", ")", ":", "\n", "    ", "\"\"\"Test corner case where a network might predict no boxes and no gt.\"\"\"", "\n", "self", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "gt_bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_point_assigner": [[154, 169], ["mmdet.core.bbox.assigners.PointAssigner", "torch.FloatTensor", "torch.FloatTensor", "mmdet.core.bbox.assigners.PointAssigner.assign", "torch.LongTensor", "torch.all"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_point_assigner", "(", ")", ":", "\n", "    ", "self", "=", "PointAssigner", "(", ")", "\n", "points", "=", "torch", ".", "FloatTensor", "(", "[", "# [x, y, stride]", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "10", ",", "10", ",", "1", "]", ",", "\n", "[", "5", ",", "5", ",", "1", "]", ",", "\n", "[", "32", ",", "32", ",", "1", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "points", ",", "gt_bboxes", ")", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", ",", "1", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_point_assigner_with_empty_gt": [[171, 185], ["mmdet.core.bbox.assigners.PointAssigner", "torch.FloatTensor", "torch.FloatTensor", "mmdet.core.bbox.assigners.PointAssigner.assign", "torch.LongTensor", "torch.all"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_point_assigner_with_empty_gt", "(", ")", ":", "\n", "    ", "\"\"\"Test corner case where an image might have no true detections.\"\"\"", "\n", "self", "=", "PointAssigner", "(", ")", "\n", "points", "=", "torch", ".", "FloatTensor", "(", "[", "# [x, y, stride]", "\n", "[", "0", ",", "0", ",", "1", "]", ",", "\n", "[", "10", ",", "10", ",", "1", "]", ",", "\n", "[", "5", ",", "5", ",", "1", "]", ",", "\n", "[", "32", ",", "32", ",", "1", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "points", ",", "gt_bboxes", ")", "\n", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_point_assigner_with_empty_boxes_and_gt": [[187, 194], ["mmdet.core.bbox.assigners.PointAssigner", "torch.FloatTensor", "torch.FloatTensor", "mmdet.core.bbox.assigners.PointAssigner.assign", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_point_assigner_with_empty_boxes_and_gt", "(", ")", ":", "\n", "    ", "\"\"\"Test corner case where an image might predict no points and no gt.\"\"\"", "\n", "self", "=", "PointAssigner", "(", ")", "\n", "points", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "points", ",", "gt_bboxes", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_approx_iou_assigner": [[196, 219], ["mmdet.core.bbox.assigners.ApproxMaxIoUAssigner", "torch.FloatTensor", "torch.FloatTensor", "mmdet.core.bbox.assigners.ApproxMaxIoUAssigner.assign", "torch.LongTensor", "torch.all"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_approx_iou_assigner", "(", ")", ":", "\n", "    ", "self", "=", "ApproxMaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "approxs_per_octave", "=", "1", "\n", "approxs", "=", "bboxes", "\n", "squares", "=", "bboxes", "\n", "assign_result", "=", "self", ".", "assign", "(", "approxs", ",", "squares", ",", "approxs_per_octave", ",", "\n", "gt_bboxes", ")", "\n", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "0", ",", "2", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_approx_iou_assigner_with_empty_gt": [[221, 242], ["mmdet.core.bbox.assigners.ApproxMaxIoUAssigner", "torch.FloatTensor", "torch.FloatTensor", "mmdet.core.bbox.assigners.ApproxMaxIoUAssigner.assign", "torch.LongTensor", "torch.all"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_approx_iou_assigner_with_empty_gt", "(", ")", ":", "\n", "    ", "\"\"\"Test corner case where an image might have no true detections.\"\"\"", "\n", "self", "=", "ApproxMaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "]", ")", "\n", "approxs_per_octave", "=", "1", "\n", "approxs", "=", "bboxes", "\n", "squares", "=", "bboxes", "\n", "assign_result", "=", "self", ".", "assign", "(", "approxs", ",", "squares", ",", "approxs_per_octave", ",", "\n", "gt_bboxes", ")", "\n", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_approx_iou_assigner_with_empty_boxes": [[244, 261], ["mmdet.core.bbox.assigners.ApproxMaxIoUAssigner", "torch.empty", "torch.FloatTensor", "mmdet.core.bbox.assigners.ApproxMaxIoUAssigner.assign", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_approx_iou_assigner_with_empty_boxes", "(", ")", ":", "\n", "    ", "\"\"\"Test corner case where an network might predict no boxes.\"\"\"", "\n", "self", "=", "ApproxMaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "approxs_per_octave", "=", "1", "\n", "approxs", "=", "bboxes", "\n", "squares", "=", "bboxes", "\n", "assign_result", "=", "self", ".", "assign", "(", "approxs", ",", "squares", ",", "approxs_per_octave", ",", "\n", "gt_bboxes", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_approx_iou_assigner_with_empty_boxes_and_gt": [[263, 277], ["mmdet.core.bbox.assigners.ApproxMaxIoUAssigner", "torch.empty", "torch.empty", "mmdet.core.bbox.assigners.ApproxMaxIoUAssigner.assign", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_approx_iou_assigner_with_empty_boxes_and_gt", "(", ")", ":", "\n", "    ", "\"\"\"Test corner case where an network might predict no boxes and no gt.\"\"\"", "\n", "self", "=", "ApproxMaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "gt_bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "approxs_per_octave", "=", "1", "\n", "approxs", "=", "bboxes", "\n", "squares", "=", "bboxes", "\n", "assign_result", "=", "self", ".", "assign", "(", "approxs", ",", "squares", ",", "approxs_per_octave", ",", "\n", "gt_bboxes", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_random_assign_result": [[279, 291], ["AssignResult.random", "AssignResult.random", "AssignResult.random", "AssignResult.random", "AssignResult.random", "AssignResult.random", "AssignResult.random", "AssignResult.random"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random"], ["", "def", "test_random_assign_result", "(", ")", ":", "\n", "    ", "\"\"\"Test random instantiation of assign result to catch corner cases.\"\"\"", "\n", "from", "mmdet", ".", "core", ".", "bbox", ".", "assigners", ".", "assign_result", "import", "AssignResult", "\n", "AssignResult", ".", "random", "(", ")", "\n", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "0", ",", "num_preds", "=", "0", ")", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "0", ",", "num_preds", "=", "3", ")", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "3", ",", "num_preds", "=", "3", ")", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "0", ",", "num_preds", "=", "3", ")", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "7", ",", "num_preds", "=", "7", ")", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "7", ",", "num_preds", "=", "64", ")", "\n", "AssignResult", ".", "random", "(", "num_gts", "=", "24", ",", "num_preds", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_center_region_assigner": [[293, 317], ["mmdet.core.bbox.assigners.CenterRegionAssigner", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "mmdet.core.bbox.assigners.CenterRegionAssigner.assign", "torch.LongTensor", "torch.all", "test_assigner..get_extra_property", "torch.any", "torch.any", "torch.any", "len", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.get_extra_property"], ["", "def", "test_center_region_assigner", "(", ")", ":", "\n", "    ", "self", "=", "CenterRegionAssigner", "(", "pos_scale", "=", "0.3", ",", "neg_scale", "=", "1", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "[", "8", ",", "8", ",", "9", ",", "\n", "9", "]", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "11", ",", "11", "]", ",", "# match bboxes[0]", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "# match bboxes[1]", "\n", "[", "4.5", ",", "4.5", ",", "5.5", ",", "5.5", "]", ",", "# match bboxes[0] but area is too small", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "# match bboxes[1] and has a smaller area than gt[0]", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "3", ",", "4", ",", "5", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "gt_labels", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "3", "\n", "assert", "len", "(", "assign_result", ".", "labels", ")", "==", "3", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "4", ",", "2", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "shadowed_labels", "=", "assign_result", ".", "get_extra_property", "(", "'shadowed_labels'", ")", "\n", "# [8, 8, 9, 9] in the shadowed region of [0, 0, 11, 11] (label: 2)", "\n", "assert", "torch", ".", "any", "(", "shadowed_labels", "==", "torch", ".", "LongTensor", "(", "[", "[", "2", ",", "2", "]", "]", ")", ")", "\n", "# [8, 8, 9, 9] in the shadowed region of [0, 0, 10, 10] (label: 5)", "\n", "assert", "torch", ".", "any", "(", "shadowed_labels", "==", "torch", ".", "LongTensor", "(", "[", "[", "2", ",", "5", "]", "]", ")", ")", "\n", "# [0, 0, 10, 10] is already assigned to [4.5, 4.5, 5.5, 5.5].", "\n", "#   Therefore, [0, 0, 11, 11] (label: 2) is shadowed", "\n", "assert", "torch", ".", "any", "(", "shadowed_labels", "==", "torch", ".", "LongTensor", "(", "[", "[", "0", ",", "2", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_center_region_assigner_with_ignore": [[319, 346], ["mmdet.core.bbox.assigners.CenterRegionAssigner", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "mmdet.core.bbox.assigners.CenterRegionAssigner.assign", "torch.LongTensor", "torch.all", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_center_region_assigner_with_ignore", "(", ")", ":", "\n", "    ", "self", "=", "CenterRegionAssigner", "(", "\n", "pos_scale", "=", "0.5", ",", "\n", "neg_scale", "=", "1", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "# match bboxes[0]", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "# match bboxes[1]", "\n", "]", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "# match bboxes[0]", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels", "=", "gt_labels", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "2", "\n", "assert", "len", "(", "assign_result", ".", "labels", ")", "==", "2", "\n", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "-", "1", ",", "2", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_center_region_assigner_with_empty_bboxes": [[348, 362], ["mmdet.core.bbox.assigners.CenterRegionAssigner", "torch.empty().float", "torch.FloatTensor", "torch.LongTensor", "mmdet.core.bbox.assigners.CenterRegionAssigner.assign", "torch.empty", "test_assigner..gt_inds.numel", "test_assigner..labels.numel"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_center_region_assigner_with_empty_bboxes", "(", ")", ":", "\n", "    ", "self", "=", "CenterRegionAssigner", "(", "\n", "pos_scale", "=", "0.5", ",", "\n", "neg_scale", "=", "1", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", ".", "float", "(", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "# match bboxes[0]", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "# match bboxes[1]", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "gt_labels", ")", "\n", "assert", "assign_result", ".", "gt_inds", "is", "None", "or", "assign_result", ".", "gt_inds", ".", "numel", "(", ")", "==", "0", "\n", "assert", "assign_result", ".", "labels", "is", "None", "or", "assign_result", ".", "labels", ".", "numel", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_center_region_assigner_with_empty_gts": [[364, 379], ["mmdet.core.bbox.assigners.CenterRegionAssigner", "torch.FloatTensor", "torch.empty().float", "torch.empty().long", "mmdet.core.bbox.assigners.CenterRegionAssigner.assign", "torch.LongTensor", "torch.all", "len", "torch.empty", "torch.empty"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_center_region_assigner_with_empty_gts", "(", ")", ":", "\n", "    ", "self", "=", "CenterRegionAssigner", "(", "\n", "pos_scale", "=", "0.5", ",", "\n", "neg_scale", "=", "1", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", ".", "float", "(", ")", "\n", "gt_labels", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ")", ".", "long", "(", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "gt_labels", ")", "\n", "assert", "len", "(", "assign_result", ".", "gt_inds", ")", "==", "2", "\n", "expected_gt_inds", "=", "torch", ".", "LongTensor", "(", "[", "0", ",", "0", "]", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "expected_gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_assigner.test_hungarian_match_assigner": [[381, 425], ["mmdet.core.bbox.assigners.HungarianAssigner", "torch.rand", "torch.rand", "torch.empty().float", "torch.empty().long", "dict", "mmdet.core.bbox.assigners.HungarianAssigner.assign", "torch.all", "torch.all", "torch.FloatTensor", "torch.LongTensor", "mmdet.core.bbox.assigners.HungarianAssigner.assign", "torch.all", "mmdet.core.bbox.assigners.HungarianAssigner", "mmdet.core.bbox.assigners.HungarianAssigner.assign", "torch.all", "mmdet.core.bbox.assigners.HungarianAssigner", "mmdet.core.bbox.assigners.HungarianAssigner.assign", "torch.all", "torch.FloatTensor.size", "torch.FloatTensor.size", "torch.FloatTensor.size", "torch.FloatTensor.size", "torch.FloatTensor.size", "torch.FloatTensor.size", "torch.empty", "torch.empty", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign"], ["", "def", "test_hungarian_match_assigner", "(", ")", ":", "\n", "    ", "self", "=", "HungarianAssigner", "(", ")", "\n", "assert", "self", ".", "iou_cost", ".", "iou_mode", "==", "'giou'", "\n", "\n", "# test no gt bboxes", "\n", "bbox_pred", "=", "torch", ".", "rand", "(", "(", "10", ",", "4", ")", ")", "\n", "cls_pred", "=", "torch", ".", "rand", "(", "(", "10", ",", "81", ")", ")", "\n", "gt_bboxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", ".", "float", "(", ")", "\n", "gt_labels", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ")", ".", "long", "(", ")", "\n", "img_meta", "=", "dict", "(", "img_shape", "=", "(", "10", ",", "8", ",", "3", ")", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "bbox_pred", ",", "cls_pred", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_meta", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", "==", "0", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "labels", "==", "-", "1", ")", "\n", "\n", "# test with gt bboxes", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "[", "0", ",", "0", ",", "5", ",", "7", "]", ",", "[", "3", ",", "5", ",", "7", ",", "8", "]", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "20", "]", ")", "\n", "assign_result", "=", "self", ".", "assign", "(", "bbox_pred", ",", "cls_pred", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_meta", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", ">", "-", "1", ")", "\n", "assert", "(", "assign_result", ".", "gt_inds", ">", "0", ")", ".", "sum", "(", ")", "==", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "assert", "(", "assign_result", ".", "labels", ">", "-", "1", ")", ".", "sum", "(", ")", "==", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "\n", "# test iou mode", "\n", "self", "=", "HungarianAssigner", "(", "\n", "iou_cost", "=", "dict", "(", "type", "=", "'IoUCost'", ",", "iou_mode", "=", "'iou'", ",", "weight", "=", "1.0", ")", ")", "\n", "assert", "self", ".", "iou_cost", ".", "iou_mode", "==", "'iou'", "\n", "assign_result", "=", "self", ".", "assign", "(", "bbox_pred", ",", "cls_pred", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_meta", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", ">", "-", "1", ")", "\n", "assert", "(", "assign_result", ".", "gt_inds", ">", "0", ")", ".", "sum", "(", ")", "==", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "assert", "(", "assign_result", ".", "labels", ">", "-", "1", ")", ".", "sum", "(", ")", "==", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "\n", "# test focal loss mode", "\n", "self", "=", "HungarianAssigner", "(", "\n", "iou_cost", "=", "dict", "(", "type", "=", "'IoUCost'", ",", "iou_mode", "=", "'giou'", ",", "weight", "=", "1.0", ")", ",", "\n", "cls_cost", "=", "dict", "(", "type", "=", "'FocalLossCost'", ",", "weight", "=", "1.", ")", ")", "\n", "assert", "self", ".", "iou_cost", ".", "iou_mode", "==", "'giou'", "\n", "assign_result", "=", "self", ".", "assign", "(", "bbox_pred", ",", "cls_pred", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_meta", ")", "\n", "assert", "torch", ".", "all", "(", "assign_result", ".", "gt_inds", ">", "-", "1", ")", "\n", "assert", "(", "assign_result", ".", "gt_inds", ">", "0", ")", ".", "sum", "(", ")", "==", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "assert", "(", "assign_result", ".", "labels", ">", "-", "1", ")", ".", "sum", "(", ")", "==", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_anchor.test_standard_anchor_generator": [[10, 20], ["dict", "build_anchor_generator"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.builder.build_anchor_generator"], ["def", "test_standard_anchor_generator", "(", ")", ":", "\n", "    ", "from", "mmdet", ".", "core", ".", "anchor", "import", "build_anchor_generator", "\n", "anchor_generator_cfg", "=", "dict", "(", "\n", "type", "=", "'AnchorGenerator'", ",", "\n", "scales", "=", "[", "8", "]", ",", "\n", "ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "strides", "=", "[", "4", ",", "8", "]", ")", "\n", "\n", "anchor_generator", "=", "build_anchor_generator", "(", "anchor_generator_cfg", ")", "\n", "assert", "anchor_generator", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_anchor.test_strides": [[22, 41], ["AnchorGenerator", "AnchorGenerator.grid_anchors", "torch.tensor", "torch.equal", "AnchorGenerator", "AnchorGenerator.grid_anchors", "torch.tensor", "torch.equal"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.grid_anchors"], ["", "def", "test_strides", "(", ")", ":", "\n", "    ", "from", "mmdet", ".", "core", "import", "AnchorGenerator", "\n", "# Square strides", "\n", "self", "=", "AnchorGenerator", "(", "[", "10", "]", ",", "[", "1.", "]", ",", "[", "1.", "]", ",", "[", "10", "]", ")", "\n", "anchors", "=", "self", ".", "grid_anchors", "(", "[", "(", "2", ",", "2", ")", "]", ",", "device", "=", "'cpu'", ")", "\n", "\n", "expected_anchors", "=", "torch", ".", "tensor", "(", "[", "[", "-", "5.", ",", "-", "5.", ",", "5.", ",", "5.", "]", ",", "[", "5.", ",", "-", "5.", ",", "15.", ",", "5.", "]", ",", "\n", "[", "-", "5.", ",", "5.", ",", "5.", ",", "15.", "]", ",", "[", "5.", ",", "5.", ",", "15.", ",", "15.", "]", "]", ")", "\n", "\n", "assert", "torch", ".", "equal", "(", "anchors", "[", "0", "]", ",", "expected_anchors", ")", "\n", "\n", "# Different strides in x and y direction", "\n", "self", "=", "AnchorGenerator", "(", "[", "(", "10", ",", "20", ")", "]", ",", "[", "1.", "]", ",", "[", "1.", "]", ",", "[", "10", "]", ")", "\n", "anchors", "=", "self", ".", "grid_anchors", "(", "[", "(", "2", ",", "2", ")", "]", ",", "device", "=", "'cpu'", ")", "\n", "\n", "expected_anchors", "=", "torch", ".", "tensor", "(", "[", "[", "-", "5.", ",", "-", "5.", ",", "5.", ",", "5.", "]", ",", "[", "5.", ",", "-", "5.", ",", "15.", ",", "5.", "]", ",", "\n", "[", "-", "5.", ",", "15.", ",", "5.", ",", "25.", "]", ",", "[", "5.", ",", "15.", ",", "15.", ",", "25.", "]", "]", ")", "\n", "\n", "assert", "torch", ".", "equal", "(", "anchors", "[", "0", "]", ",", "expected_anchors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_anchor.test_ssd_anchor_generator": [[43, 111], ["torch.cuda.is_available", "dict", "build_anchor_generator", "enumerate", "build_anchor_generator.valid_flags", "enumerate", "build_anchor_generator.grid_anchors", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "base_anchor.allclose", "len", "single_level_valid_flag.sum"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.builder.build_anchor_generator", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.point_generator.PointGenerator.valid_flags", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.grid_anchors"], ["", "def", "test_ssd_anchor_generator", "(", ")", ":", "\n", "    ", "from", "mmdet", ".", "core", ".", "anchor", "import", "build_anchor_generator", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "'cuda'", "\n", "", "else", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "\n", "", "anchor_generator_cfg", "=", "dict", "(", "\n", "type", "=", "'SSDAnchorGenerator'", ",", "\n", "scale_major", "=", "False", ",", "\n", "input_size", "=", "300", ",", "\n", "basesize_ratio_range", "=", "(", "0.15", ",", "0.9", ")", ",", "\n", "strides", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "100", ",", "300", "]", ",", "\n", "ratios", "=", "[", "[", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", "]", ",", "[", "2", "]", "]", ")", "\n", "\n", "featmap_sizes", "=", "[", "(", "38", ",", "38", ")", ",", "(", "19", ",", "19", ")", ",", "(", "10", ",", "10", ")", ",", "(", "5", ",", "5", ")", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", "]", "\n", "anchor_generator", "=", "build_anchor_generator", "(", "anchor_generator_cfg", ")", "\n", "\n", "# check base anchors", "\n", "expected_base_anchors", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "6.5000", ",", "-", "6.5000", ",", "14.5000", ",", "14.5000", "]", ",", "\n", "[", "-", "11.3704", ",", "-", "11.3704", ",", "19.3704", ",", "19.3704", "]", ",", "\n", "[", "-", "10.8492", ",", "-", "3.4246", ",", "18.8492", ",", "11.4246", "]", ",", "\n", "[", "-", "3.4246", ",", "-", "10.8492", ",", "11.4246", ",", "18.8492", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "14.5000", ",", "-", "14.5000", ",", "30.5000", ",", "30.5000", "]", ",", "\n", "[", "-", "25.3729", ",", "-", "25.3729", ",", "41.3729", ",", "41.3729", "]", ",", "\n", "[", "-", "23.8198", ",", "-", "7.9099", ",", "39.8198", ",", "23.9099", "]", ",", "\n", "[", "-", "7.9099", ",", "-", "23.8198", ",", "23.9099", ",", "39.8198", "]", ",", "\n", "[", "-", "30.9711", ",", "-", "4.9904", ",", "46.9711", ",", "20.9904", "]", ",", "\n", "[", "-", "4.9904", ",", "-", "30.9711", ",", "20.9904", ",", "46.9711", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "33.5000", ",", "-", "33.5000", ",", "65.5000", ",", "65.5000", "]", ",", "\n", "[", "-", "45.5366", ",", "-", "45.5366", ",", "77.5366", ",", "77.5366", "]", ",", "\n", "[", "-", "54.0036", ",", "-", "19.0018", ",", "86.0036", ",", "51.0018", "]", ",", "\n", "[", "-", "19.0018", ",", "-", "54.0036", ",", "51.0018", ",", "86.0036", "]", ",", "\n", "[", "-", "69.7365", ",", "-", "12.5788", ",", "101.7365", ",", "44.5788", "]", ",", "\n", "[", "-", "12.5788", ",", "-", "69.7365", ",", "44.5788", ",", "101.7365", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "44.5000", ",", "-", "44.5000", ",", "108.5000", ",", "108.5000", "]", ",", "\n", "[", "-", "56.9817", ",", "-", "56.9817", ",", "120.9817", ",", "120.9817", "]", ",", "\n", "[", "-", "76.1873", ",", "-", "22.0937", ",", "140.1873", ",", "86.0937", "]", ",", "\n", "[", "-", "22.0937", ",", "-", "76.1873", ",", "86.0937", ",", "140.1873", "]", ",", "\n", "[", "-", "100.5019", ",", "-", "12.1673", ",", "164.5019", ",", "76.1673", "]", ",", "\n", "[", "-", "12.1673", ",", "-", "100.5019", ",", "76.1673", ",", "164.5019", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "53.5000", ",", "-", "53.5000", ",", "153.5000", ",", "153.5000", "]", ",", "\n", "[", "-", "66.2185", ",", "-", "66.2185", ",", "166.2185", ",", "166.2185", "]", ",", "\n", "[", "-", "96.3711", ",", "-", "23.1855", ",", "196.3711", ",", "123.1855", "]", ",", "\n", "[", "-", "23.1855", ",", "-", "96.3711", ",", "123.1855", ",", "196.3711", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "19.5000", ",", "19.5000", ",", "280.5000", ",", "280.5000", "]", ",", "\n", "[", "6.6342", ",", "6.6342", ",", "293.3658", ",", "293.3658", "]", ",", "\n", "[", "-", "34.5549", ",", "57.7226", ",", "334.5549", ",", "242.2774", "]", ",", "\n", "[", "57.7226", ",", "-", "34.5549", ",", "242.2774", ",", "334.5549", "]", "]", ")", ",", "\n", "]", "\n", "base_anchors", "=", "anchor_generator", ".", "base_anchors", "\n", "for", "i", ",", "base_anchor", "in", "enumerate", "(", "base_anchors", ")", ":", "\n", "        ", "assert", "base_anchor", ".", "allclose", "(", "expected_base_anchors", "[", "i", "]", ")", "\n", "\n", "# check valid flags", "\n", "", "expected_valid_pixels", "=", "[", "5776", ",", "2166", ",", "600", ",", "150", ",", "36", ",", "4", "]", "\n", "multi_level_valid_flags", "=", "anchor_generator", ".", "valid_flags", "(", "\n", "featmap_sizes", ",", "(", "300", ",", "300", ")", ",", "device", ")", "\n", "for", "i", ",", "single_level_valid_flag", "in", "enumerate", "(", "multi_level_valid_flags", ")", ":", "\n", "        ", "assert", "single_level_valid_flag", ".", "sum", "(", ")", "==", "expected_valid_pixels", "[", "i", "]", "\n", "\n", "# check number of base anchors for each level", "\n", "", "assert", "anchor_generator", ".", "num_base_anchors", "==", "[", "4", ",", "6", ",", "6", ",", "6", ",", "4", ",", "4", "]", "\n", "\n", "# check anchor generation", "\n", "anchors", "=", "anchor_generator", ".", "grid_anchors", "(", "featmap_sizes", ",", "device", ")", "\n", "assert", "len", "(", "anchors", ")", "==", "6", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_anchor.test_anchor_generator_with_tuples": [[113, 146], ["torch.cuda.is_available", "dict", "build_anchor_generator", "build_anchor_generator.grid_anchors", "dict", "build_anchor_generator", "build_anchor_generator.grid_anchors", "zip", "torch.equal"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.builder.build_anchor_generator", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.builder.build_anchor_generator", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.grid_anchors"], ["", "def", "test_anchor_generator_with_tuples", "(", ")", ":", "\n", "    ", "from", "mmdet", ".", "core", ".", "anchor", "import", "build_anchor_generator", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "'cuda'", "\n", "", "else", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "\n", "", "anchor_generator_cfg", "=", "dict", "(", "\n", "type", "=", "'SSDAnchorGenerator'", ",", "\n", "scale_major", "=", "False", ",", "\n", "input_size", "=", "300", ",", "\n", "basesize_ratio_range", "=", "(", "0.15", ",", "0.9", ")", ",", "\n", "strides", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "100", ",", "300", "]", ",", "\n", "ratios", "=", "[", "[", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", "]", ",", "[", "2", "]", "]", ")", "\n", "\n", "featmap_sizes", "=", "[", "(", "38", ",", "38", ")", ",", "(", "19", ",", "19", ")", ",", "(", "10", ",", "10", ")", ",", "(", "5", ",", "5", ")", ",", "(", "3", ",", "3", ")", ",", "(", "1", ",", "1", ")", "]", "\n", "anchor_generator", "=", "build_anchor_generator", "(", "anchor_generator_cfg", ")", "\n", "anchors", "=", "anchor_generator", ".", "grid_anchors", "(", "featmap_sizes", ",", "device", ")", "\n", "\n", "anchor_generator_cfg_tuples", "=", "dict", "(", "\n", "type", "=", "'SSDAnchorGenerator'", ",", "\n", "scale_major", "=", "False", ",", "\n", "input_size", "=", "300", ",", "\n", "basesize_ratio_range", "=", "(", "0.15", ",", "0.9", ")", ",", "\n", "strides", "=", "[", "(", "8", ",", "8", ")", ",", "(", "16", ",", "16", ")", ",", "(", "32", ",", "32", ")", ",", "(", "64", ",", "64", ")", ",", "(", "100", ",", "100", ")", ",", "(", "300", ",", "300", ")", "]", ",", "\n", "ratios", "=", "[", "[", "2", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", ",", "3", "]", ",", "[", "2", "]", ",", "[", "2", "]", "]", ")", "\n", "\n", "anchor_generator_tuples", "=", "build_anchor_generator", "(", "\n", "anchor_generator_cfg_tuples", ")", "\n", "anchors_tuples", "=", "anchor_generator_tuples", ".", "grid_anchors", "(", "\n", "featmap_sizes", ",", "device", ")", "\n", "for", "anchor", ",", "anchor_tuples", "in", "zip", "(", "anchors", ",", "anchors_tuples", ")", ":", "\n", "        ", "assert", "torch", ".", "equal", "(", "anchor", ",", "anchor_tuples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_anchor.test_yolo_anchor_generator": [[148, 189], ["torch.cuda.is_available", "dict", "build_anchor_generator", "enumerate", "build_anchor_generator.grid_anchors", "torch.Tensor", "torch.Tensor", "torch.Tensor", "base_anchor.allclose", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.builder.build_anchor_generator", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.grid_anchors"], ["", "", "def", "test_yolo_anchor_generator", "(", ")", ":", "\n", "    ", "from", "mmdet", ".", "core", ".", "anchor", "import", "build_anchor_generator", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "'cuda'", "\n", "", "else", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "\n", "", "anchor_generator_cfg", "=", "dict", "(", "\n", "type", "=", "'YOLOAnchorGenerator'", ",", "\n", "strides", "=", "[", "32", ",", "16", ",", "8", "]", ",", "\n", "base_sizes", "=", "[", "\n", "[", "(", "116", ",", "90", ")", ",", "(", "156", ",", "198", ")", ",", "(", "373", ",", "326", ")", "]", ",", "\n", "[", "(", "30", ",", "61", ")", ",", "(", "62", ",", "45", ")", ",", "(", "59", ",", "119", ")", "]", ",", "\n", "[", "(", "10", ",", "13", ")", ",", "(", "16", ",", "30", ")", ",", "(", "33", ",", "23", ")", "]", ",", "\n", "]", ")", "\n", "\n", "featmap_sizes", "=", "[", "(", "14", ",", "18", ")", ",", "(", "28", ",", "36", ")", ",", "(", "56", ",", "72", ")", "]", "\n", "anchor_generator", "=", "build_anchor_generator", "(", "anchor_generator_cfg", ")", "\n", "\n", "# check base anchors", "\n", "expected_base_anchors", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "42.0000", ",", "-", "29.0000", ",", "74.0000", ",", "61.0000", "]", ",", "\n", "[", "-", "62.0000", ",", "-", "83.0000", ",", "94.0000", ",", "115.0000", "]", ",", "\n", "[", "-", "170.5000", ",", "-", "147.0000", ",", "202.5000", ",", "179.0000", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "7.0000", ",", "-", "22.5000", ",", "23.0000", ",", "38.5000", "]", ",", "\n", "[", "-", "23.0000", ",", "-", "14.5000", ",", "39.0000", ",", "30.5000", "]", ",", "\n", "[", "-", "21.5000", ",", "-", "51.5000", ",", "37.5000", ",", "67.5000", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "1.0000", ",", "-", "2.5000", ",", "9.0000", ",", "10.5000", "]", ",", "\n", "[", "-", "4.0000", ",", "-", "11.0000", ",", "12.0000", ",", "19.0000", "]", ",", "\n", "[", "-", "12.5000", ",", "-", "7.5000", ",", "20.5000", ",", "15.5000", "]", "]", ")", "\n", "]", "\n", "base_anchors", "=", "anchor_generator", ".", "base_anchors", "\n", "for", "i", ",", "base_anchor", "in", "enumerate", "(", "base_anchors", ")", ":", "\n", "        ", "assert", "base_anchor", ".", "allclose", "(", "expected_base_anchors", "[", "i", "]", ")", "\n", "\n", "# check number of base anchors for each level", "\n", "", "assert", "anchor_generator", ".", "num_base_anchors", "==", "[", "3", ",", "3", ",", "3", "]", "\n", "\n", "# check anchor generation", "\n", "anchors", "=", "anchor_generator", ".", "grid_anchors", "(", "featmap_sizes", ",", "device", ")", "\n", "assert", "len", "(", "anchors", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_anchor.test_retina_anchor": [[191, 288], ["torch.cuda.is_available", "dict", "build_head", "enumerate", "build_head.anchor_generator.valid_flags", "enumerate", "build_head.anchor_generator.grid_anchors", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "base_anchor.allclose", "len", "dict", "dict", "single_level_valid_flag.sum"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.point_generator.PointGenerator.valid_flags", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.grid_anchors"], ["", "def", "test_retina_anchor", "(", ")", ":", "\n", "    ", "from", "mmdet", ".", "models", "import", "build_head", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "'cuda'", "\n", "", "else", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "\n", "# head configs modified from", "\n", "# configs/nas_fpn/retinanet_r50_fpn_crop640_50e.py", "\n", "", "bbox_head", "=", "dict", "(", "\n", "type", "=", "'RetinaSepBNHead'", ",", "\n", "num_classes", "=", "4", ",", "\n", "num_ins", "=", "5", ",", "\n", "in_channels", "=", "4", ",", "\n", "stacked_convs", "=", "1", ",", "\n", "feat_channels", "=", "4", ",", "\n", "anchor_generator", "=", "dict", "(", "\n", "type", "=", "'AnchorGenerator'", ",", "\n", "octave_base_scale", "=", "4", ",", "\n", "scales_per_octave", "=", "3", ",", "\n", "ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "strides", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", "]", ")", ",", "\n", "bbox_coder", "=", "dict", "(", "\n", "type", "=", "'DeltaXYWHBBoxCoder'", ",", "\n", "target_means", "=", "[", ".0", ",", ".0", ",", ".0", ",", ".0", "]", ",", "\n", "target_stds", "=", "[", "1.0", ",", "1.0", ",", "1.0", ",", "1.0", "]", ")", ")", "\n", "\n", "retina_head", "=", "build_head", "(", "bbox_head", ")", "\n", "assert", "retina_head", ".", "anchor_generator", "is", "not", "None", "\n", "\n", "# use the featmap sizes in NASFPN setting to test retina head", "\n", "featmap_sizes", "=", "[", "(", "80", ",", "80", ")", ",", "(", "40", ",", "40", ")", ",", "(", "20", ",", "20", ")", ",", "(", "10", ",", "10", ")", ",", "(", "5", ",", "5", ")", "]", "\n", "# check base anchors", "\n", "expected_base_anchors", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "22.6274", ",", "-", "11.3137", ",", "22.6274", ",", "11.3137", "]", ",", "\n", "[", "-", "28.5088", ",", "-", "14.2544", ",", "28.5088", ",", "14.2544", "]", ",", "\n", "[", "-", "35.9188", ",", "-", "17.9594", ",", "35.9188", ",", "17.9594", "]", ",", "\n", "[", "-", "16.0000", ",", "-", "16.0000", ",", "16.0000", ",", "16.0000", "]", ",", "\n", "[", "-", "20.1587", ",", "-", "20.1587", ",", "20.1587", ",", "20.1587", "]", ",", "\n", "[", "-", "25.3984", ",", "-", "25.3984", ",", "25.3984", ",", "25.3984", "]", ",", "\n", "[", "-", "11.3137", ",", "-", "22.6274", ",", "11.3137", ",", "22.6274", "]", ",", "\n", "[", "-", "14.2544", ",", "-", "28.5088", ",", "14.2544", ",", "28.5088", "]", ",", "\n", "[", "-", "17.9594", ",", "-", "35.9188", ",", "17.9594", ",", "35.9188", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "45.2548", ",", "-", "22.6274", ",", "45.2548", ",", "22.6274", "]", ",", "\n", "[", "-", "57.0175", ",", "-", "28.5088", ",", "57.0175", ",", "28.5088", "]", ",", "\n", "[", "-", "71.8376", ",", "-", "35.9188", ",", "71.8376", ",", "35.9188", "]", ",", "\n", "[", "-", "32.0000", ",", "-", "32.0000", ",", "32.0000", ",", "32.0000", "]", ",", "\n", "[", "-", "40.3175", ",", "-", "40.3175", ",", "40.3175", ",", "40.3175", "]", ",", "\n", "[", "-", "50.7968", ",", "-", "50.7968", ",", "50.7968", ",", "50.7968", "]", ",", "\n", "[", "-", "22.6274", ",", "-", "45.2548", ",", "22.6274", ",", "45.2548", "]", ",", "\n", "[", "-", "28.5088", ",", "-", "57.0175", ",", "28.5088", ",", "57.0175", "]", ",", "\n", "[", "-", "35.9188", ",", "-", "71.8376", ",", "35.9188", ",", "71.8376", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "90.5097", ",", "-", "45.2548", ",", "90.5097", ",", "45.2548", "]", ",", "\n", "[", "-", "114.0350", ",", "-", "57.0175", ",", "114.0350", ",", "57.0175", "]", ",", "\n", "[", "-", "143.6751", ",", "-", "71.8376", ",", "143.6751", ",", "71.8376", "]", ",", "\n", "[", "-", "64.0000", ",", "-", "64.0000", ",", "64.0000", ",", "64.0000", "]", ",", "\n", "[", "-", "80.6349", ",", "-", "80.6349", ",", "80.6349", ",", "80.6349", "]", ",", "\n", "[", "-", "101.5937", ",", "-", "101.5937", ",", "101.5937", ",", "101.5937", "]", ",", "\n", "[", "-", "45.2548", ",", "-", "90.5097", ",", "45.2548", ",", "90.5097", "]", ",", "\n", "[", "-", "57.0175", ",", "-", "114.0350", ",", "57.0175", ",", "114.0350", "]", ",", "\n", "[", "-", "71.8376", ",", "-", "143.6751", ",", "71.8376", ",", "143.6751", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "181.0193", ",", "-", "90.5097", ",", "181.0193", ",", "90.5097", "]", ",", "\n", "[", "-", "228.0701", ",", "-", "114.0350", ",", "228.0701", ",", "114.0350", "]", ",", "\n", "[", "-", "287.3503", ",", "-", "143.6751", ",", "287.3503", ",", "143.6751", "]", ",", "\n", "[", "-", "128.0000", ",", "-", "128.0000", ",", "128.0000", ",", "128.0000", "]", ",", "\n", "[", "-", "161.2699", ",", "-", "161.2699", ",", "161.2699", ",", "161.2699", "]", ",", "\n", "[", "-", "203.1873", ",", "-", "203.1873", ",", "203.1873", ",", "203.1873", "]", ",", "\n", "[", "-", "90.5097", ",", "-", "181.0193", ",", "90.5097", ",", "181.0193", "]", ",", "\n", "[", "-", "114.0350", ",", "-", "228.0701", ",", "114.0350", ",", "228.0701", "]", ",", "\n", "[", "-", "143.6751", ",", "-", "287.3503", ",", "143.6751", ",", "287.3503", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "362.0387", ",", "-", "181.0193", ",", "362.0387", ",", "181.0193", "]", ",", "\n", "[", "-", "456.1401", ",", "-", "228.0701", ",", "456.1401", ",", "228.0701", "]", ",", "\n", "[", "-", "574.7006", ",", "-", "287.3503", ",", "574.7006", ",", "287.3503", "]", ",", "\n", "[", "-", "256.0000", ",", "-", "256.0000", ",", "256.0000", ",", "256.0000", "]", ",", "\n", "[", "-", "322.5398", ",", "-", "322.5398", ",", "322.5398", ",", "322.5398", "]", ",", "\n", "[", "-", "406.3747", ",", "-", "406.3747", ",", "406.3747", ",", "406.3747", "]", ",", "\n", "[", "-", "181.0193", ",", "-", "362.0387", ",", "181.0193", ",", "362.0387", "]", ",", "\n", "[", "-", "228.0701", ",", "-", "456.1401", ",", "228.0701", ",", "456.1401", "]", ",", "\n", "[", "-", "287.3503", ",", "-", "574.7006", ",", "287.3503", ",", "574.7006", "]", "]", ")", "\n", "]", "\n", "base_anchors", "=", "retina_head", ".", "anchor_generator", ".", "base_anchors", "\n", "for", "i", ",", "base_anchor", "in", "enumerate", "(", "base_anchors", ")", ":", "\n", "        ", "assert", "base_anchor", ".", "allclose", "(", "expected_base_anchors", "[", "i", "]", ")", "\n", "\n", "# check valid flags", "\n", "", "expected_valid_pixels", "=", "[", "57600", ",", "14400", ",", "3600", ",", "900", ",", "225", "]", "\n", "multi_level_valid_flags", "=", "retina_head", ".", "anchor_generator", ".", "valid_flags", "(", "\n", "featmap_sizes", ",", "(", "640", ",", "640", ")", ",", "device", ")", "\n", "for", "i", ",", "single_level_valid_flag", "in", "enumerate", "(", "multi_level_valid_flags", ")", ":", "\n", "        ", "assert", "single_level_valid_flag", ".", "sum", "(", ")", "==", "expected_valid_pixels", "[", "i", "]", "\n", "\n", "# check number of base anchors for each level", "\n", "", "assert", "retina_head", ".", "anchor_generator", ".", "num_base_anchors", "==", "[", "9", ",", "9", ",", "9", ",", "9", ",", "9", "]", "\n", "\n", "# check anchor generation", "\n", "anchors", "=", "retina_head", ".", "anchor_generator", ".", "grid_anchors", "(", "featmap_sizes", ",", "device", ")", "\n", "assert", "len", "(", "anchors", ")", "==", "5", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_anchor.test_guided_anchor": [[290, 411], ["torch.cuda.is_available", "dict", "build_head", "enumerate", "build_head.approx_anchor_generator.valid_flags", "enumerate", "build_head.square_anchor_generator.grid_anchors", "enumerate", "build_head.square_anchor_generator.grid_anchors", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "base_anchor.allclose", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "base_anchor.allclose", "len", "dict", "dict", "single_level_valid_flag.sum"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.point_generator.PointGenerator.valid_flags", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.grid_anchors", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.grid_anchors"], ["", "def", "test_guided_anchor", "(", ")", ":", "\n", "    ", "from", "mmdet", ".", "models", "import", "build_head", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "'cuda'", "\n", "", "else", ":", "\n", "        ", "device", "=", "'cpu'", "\n", "# head configs modified from", "\n", "# configs/guided_anchoring/ga_retinanet_r50_fpn_1x_coco.py", "\n", "", "bbox_head", "=", "dict", "(", "\n", "type", "=", "'GARetinaHead'", ",", "\n", "num_classes", "=", "8", ",", "\n", "in_channels", "=", "4", ",", "\n", "stacked_convs", "=", "1", ",", "\n", "feat_channels", "=", "4", ",", "\n", "approx_anchor_generator", "=", "dict", "(", "\n", "type", "=", "'AnchorGenerator'", ",", "\n", "octave_base_scale", "=", "4", ",", "\n", "scales_per_octave", "=", "3", ",", "\n", "ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "strides", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", "]", ")", ",", "\n", "square_anchor_generator", "=", "dict", "(", "\n", "type", "=", "'AnchorGenerator'", ",", "\n", "ratios", "=", "[", "1.0", "]", ",", "\n", "scales", "=", "[", "4", "]", ",", "\n", "strides", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", "]", ")", ")", "\n", "\n", "ga_retina_head", "=", "build_head", "(", "bbox_head", ")", "\n", "assert", "ga_retina_head", ".", "approx_anchor_generator", "is", "not", "None", "\n", "\n", "# use the featmap sizes in NASFPN setting to test ga_retina_head", "\n", "featmap_sizes", "=", "[", "(", "100", ",", "152", ")", ",", "(", "50", ",", "76", ")", ",", "(", "25", ",", "38", ")", ",", "(", "13", ",", "19", ")", ",", "(", "7", ",", "10", ")", "]", "\n", "# check base anchors", "\n", "expected_approxs", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "22.6274", ",", "-", "11.3137", ",", "22.6274", ",", "11.3137", "]", ",", "\n", "[", "-", "28.5088", ",", "-", "14.2544", ",", "28.5088", ",", "14.2544", "]", ",", "\n", "[", "-", "35.9188", ",", "-", "17.9594", ",", "35.9188", ",", "17.9594", "]", ",", "\n", "[", "-", "16.0000", ",", "-", "16.0000", ",", "16.0000", ",", "16.0000", "]", ",", "\n", "[", "-", "20.1587", ",", "-", "20.1587", ",", "20.1587", ",", "20.1587", "]", ",", "\n", "[", "-", "25.3984", ",", "-", "25.3984", ",", "25.3984", ",", "25.3984", "]", ",", "\n", "[", "-", "11.3137", ",", "-", "22.6274", ",", "11.3137", ",", "22.6274", "]", ",", "\n", "[", "-", "14.2544", ",", "-", "28.5088", ",", "14.2544", ",", "28.5088", "]", ",", "\n", "[", "-", "17.9594", ",", "-", "35.9188", ",", "17.9594", ",", "35.9188", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "45.2548", ",", "-", "22.6274", ",", "45.2548", ",", "22.6274", "]", ",", "\n", "[", "-", "57.0175", ",", "-", "28.5088", ",", "57.0175", ",", "28.5088", "]", ",", "\n", "[", "-", "71.8376", ",", "-", "35.9188", ",", "71.8376", ",", "35.9188", "]", ",", "\n", "[", "-", "32.0000", ",", "-", "32.0000", ",", "32.0000", ",", "32.0000", "]", ",", "\n", "[", "-", "40.3175", ",", "-", "40.3175", ",", "40.3175", ",", "40.3175", "]", ",", "\n", "[", "-", "50.7968", ",", "-", "50.7968", ",", "50.7968", ",", "50.7968", "]", ",", "\n", "[", "-", "22.6274", ",", "-", "45.2548", ",", "22.6274", ",", "45.2548", "]", ",", "\n", "[", "-", "28.5088", ",", "-", "57.0175", ",", "28.5088", ",", "57.0175", "]", ",", "\n", "[", "-", "35.9188", ",", "-", "71.8376", ",", "35.9188", ",", "71.8376", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "90.5097", ",", "-", "45.2548", ",", "90.5097", ",", "45.2548", "]", ",", "\n", "[", "-", "114.0350", ",", "-", "57.0175", ",", "114.0350", ",", "57.0175", "]", ",", "\n", "[", "-", "143.6751", ",", "-", "71.8376", ",", "143.6751", ",", "71.8376", "]", ",", "\n", "[", "-", "64.0000", ",", "-", "64.0000", ",", "64.0000", ",", "64.0000", "]", ",", "\n", "[", "-", "80.6349", ",", "-", "80.6349", ",", "80.6349", ",", "80.6349", "]", ",", "\n", "[", "-", "101.5937", ",", "-", "101.5937", ",", "101.5937", ",", "101.5937", "]", ",", "\n", "[", "-", "45.2548", ",", "-", "90.5097", ",", "45.2548", ",", "90.5097", "]", ",", "\n", "[", "-", "57.0175", ",", "-", "114.0350", ",", "57.0175", ",", "114.0350", "]", ",", "\n", "[", "-", "71.8376", ",", "-", "143.6751", ",", "71.8376", ",", "143.6751", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "181.0193", ",", "-", "90.5097", ",", "181.0193", ",", "90.5097", "]", ",", "\n", "[", "-", "228.0701", ",", "-", "114.0350", ",", "228.0701", ",", "114.0350", "]", ",", "\n", "[", "-", "287.3503", ",", "-", "143.6751", ",", "287.3503", ",", "143.6751", "]", ",", "\n", "[", "-", "128.0000", ",", "-", "128.0000", ",", "128.0000", ",", "128.0000", "]", ",", "\n", "[", "-", "161.2699", ",", "-", "161.2699", ",", "161.2699", ",", "161.2699", "]", ",", "\n", "[", "-", "203.1873", ",", "-", "203.1873", ",", "203.1873", ",", "203.1873", "]", ",", "\n", "[", "-", "90.5097", ",", "-", "181.0193", ",", "90.5097", ",", "181.0193", "]", ",", "\n", "[", "-", "114.0350", ",", "-", "228.0701", ",", "114.0350", ",", "228.0701", "]", ",", "\n", "[", "-", "143.6751", ",", "-", "287.3503", ",", "143.6751", ",", "287.3503", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "362.0387", ",", "-", "181.0193", ",", "362.0387", ",", "181.0193", "]", ",", "\n", "[", "-", "456.1401", ",", "-", "228.0701", ",", "456.1401", ",", "228.0701", "]", ",", "\n", "[", "-", "574.7006", ",", "-", "287.3503", ",", "574.7006", ",", "287.3503", "]", ",", "\n", "[", "-", "256.0000", ",", "-", "256.0000", ",", "256.0000", ",", "256.0000", "]", ",", "\n", "[", "-", "322.5398", ",", "-", "322.5398", ",", "322.5398", ",", "322.5398", "]", ",", "\n", "[", "-", "406.3747", ",", "-", "406.3747", ",", "406.3747", ",", "406.3747", "]", ",", "\n", "[", "-", "181.0193", ",", "-", "362.0387", ",", "181.0193", ",", "362.0387", "]", ",", "\n", "[", "-", "228.0701", ",", "-", "456.1401", ",", "228.0701", ",", "456.1401", "]", ",", "\n", "[", "-", "287.3503", ",", "-", "574.7006", ",", "287.3503", ",", "574.7006", "]", "]", ")", "\n", "]", "\n", "approxs", "=", "ga_retina_head", ".", "approx_anchor_generator", ".", "base_anchors", "\n", "for", "i", ",", "base_anchor", "in", "enumerate", "(", "approxs", ")", ":", "\n", "        ", "assert", "base_anchor", ".", "allclose", "(", "expected_approxs", "[", "i", "]", ")", "\n", "\n", "# check valid flags", "\n", "", "expected_valid_pixels", "=", "[", "136800", ",", "34200", ",", "8550", ",", "2223", ",", "630", "]", "\n", "multi_level_valid_flags", "=", "ga_retina_head", ".", "approx_anchor_generator", ".", "valid_flags", "(", "featmap_sizes", ",", "(", "800", ",", "1216", ")", ",", "device", ")", "\n", "for", "i", ",", "single_level_valid_flag", "in", "enumerate", "(", "multi_level_valid_flags", ")", ":", "\n", "        ", "assert", "single_level_valid_flag", ".", "sum", "(", ")", "==", "expected_valid_pixels", "[", "i", "]", "\n", "\n", "# check number of base anchors for each level", "\n", "", "assert", "ga_retina_head", ".", "approx_anchor_generator", ".", "num_base_anchors", "==", "[", "\n", "9", ",", "9", ",", "9", ",", "9", ",", "9", "\n", "]", "\n", "\n", "# check approx generation", "\n", "squares", "=", "ga_retina_head", ".", "square_anchor_generator", ".", "grid_anchors", "(", "\n", "featmap_sizes", ",", "device", ")", "\n", "assert", "len", "(", "squares", ")", "==", "5", "\n", "\n", "expected_squares", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "16.", ",", "-", "16.", ",", "16.", ",", "16.", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "32.", ",", "-", "32.", ",", "32.", ",", "32", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "64.", ",", "-", "64.", ",", "64.", ",", "64.", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "128.", ",", "-", "128.", ",", "128.", ",", "128.", "]", "]", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "[", "-", "256.", ",", "-", "256.", ",", "256.", ",", "256.", "]", "]", ")", "\n", "]", "\n", "squares", "=", "ga_retina_head", ".", "square_anchor_generator", ".", "base_anchors", "\n", "for", "i", ",", "base_anchor", "in", "enumerate", "(", "squares", ")", ":", "\n", "        ", "assert", "base_anchor", ".", "allclose", "(", "expected_squares", "[", "i", "]", ")", "\n", "\n", "# square_anchor_generator does not check valid flags", "\n", "# check number of base anchors for each level", "\n", "", "assert", "(", "ga_retina_head", ".", "square_anchor_generator", ".", "num_base_anchors", "==", "[", "\n", "1", ",", "1", ",", "1", ",", "1", ",", "1", "\n", "]", ")", "\n", "\n", "# check square generation", "\n", "anchors", "=", "ga_retina_head", ".", "square_anchor_generator", ".", "grid_anchors", "(", "\n", "featmap_sizes", ",", "device", ")", "\n", "assert", "len", "(", "anchors", ")", "==", "5", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks": [[8, 17], ["numpy.random.randint"], "function", ["None"], ["def", "dummy_raw_bitmap_masks", "(", "size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        size (tuple): expected shape of dummy masks, (H, W) or (N, H, W)\n\n    Return:\n        ndarray: dummy mask\n    \"\"\"", "\n", "return", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "size", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks": [[19, 33], ["range", "polygons.append", "numpy.random.randint", "numpy.random.uniform", "min"], "function", ["None"], ["", "def", "dummy_raw_polygon_masks", "(", "size", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        size (tuple): expected shape of dummy masks, (N, H, W)\n\n    Return:\n        list[list[ndarray]]: dummy mask\n    \"\"\"", "\n", "num_obj", ",", "heigt", ",", "width", "=", "size", "\n", "polygons", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_obj", ")", ":", "\n", "        ", "num_points", "=", "np", ".", "random", ".", "randint", "(", "5", ")", "*", "2", "+", "6", "\n", "polygons", ".", "append", "(", "[", "np", ".", "random", ".", "uniform", "(", "0", ",", "min", "(", "heigt", ",", "width", ")", ",", "num_points", ")", "]", ")", "\n", "", "return", "polygons", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_bboxes": [[35, 40], ["numpy.random.randint", "numpy.random.randint", "numpy.concatenate().squeeze().astype", "min", "min", "numpy.concatenate().squeeze", "numpy.concatenate"], "function", ["None"], ["", "def", "dummy_bboxes", "(", "num", ",", "max_height", ",", "max_width", ")", ":", "\n", "    ", "x1y1", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "min", "(", "max_height", "//", "2", ",", "max_width", "//", "2", ")", ",", "(", "num", ",", "2", ")", ")", "\n", "wh", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "min", "(", "max_height", "//", "2", ",", "max_width", "//", "2", ")", ",", "(", "num", ",", "2", ")", ")", "\n", "x2y2", "=", "x1y1", "+", "wh", "\n", "return", "np", ".", "concatenate", "(", "[", "x1y1", ",", "x2y2", "]", ",", "axis", "=", "1", ")", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_bitmap_mask_init": [[42, 75], ["numpy.empty", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks", "test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks", "len", "len", "len", "test_masks.dummy_raw_bitmap_masks", "len", "pytest.raises", "mmdet.core.BitmapMasks", "range", "test_masks.dummy_raw_bitmap_masks"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks"], ["", "def", "test_bitmap_mask_init", "(", ")", ":", "\n", "# init with empty ndarray masks", "\n", "    ", "raw_masks", "=", "np", ".", "empty", "(", "(", "0", ",", "28", ",", "28", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "assert", "len", "(", "bitmap_masks", ")", "==", "0", "\n", "assert", "bitmap_masks", ".", "height", "==", "28", "\n", "assert", "bitmap_masks", ".", "width", "==", "28", "\n", "\n", "# init with empty list masks", "\n", "raw_masks", "=", "[", "]", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "assert", "len", "(", "bitmap_masks", ")", "==", "0", "\n", "assert", "bitmap_masks", ".", "height", "==", "28", "\n", "assert", "bitmap_masks", ".", "width", "==", "28", "\n", "\n", "# init with ndarray masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "assert", "len", "(", "bitmap_masks", ")", "==", "3", "\n", "assert", "bitmap_masks", ".", "height", "==", "28", "\n", "assert", "bitmap_masks", ".", "width", "==", "28", "\n", "\n", "# init with list masks contain 3 instances", "\n", "raw_masks", "=", "[", "dummy_raw_bitmap_masks", "(", "(", "28", ",", "28", ")", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "assert", "len", "(", "bitmap_masks", ")", "==", "3", "\n", "assert", "bitmap_masks", ".", "height", "==", "28", "\n", "assert", "bitmap_masks", ".", "width", "==", "28", "\n", "\n", "# init with raw masks of unsupported type", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "raw_masks", "=", "[", "[", "dummy_raw_bitmap_masks", "(", "(", "28", ",", "28", ")", ")", "]", "]", "\n", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_bitmap_mask_rescale": [[77, 96], ["test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.rescale", "numpy.array", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.rescale", "numpy.array", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.rescale", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.rescale"], ["", "", "def", "test_bitmap_mask_rescale", "(", ")", ":", "\n", "# rescale with empty bitmap masks", "\n", "    ", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "rescaled_masks", "=", "bitmap_masks", ".", "rescale", "(", "(", "56", ",", "72", ")", ")", "\n", "assert", "len", "(", "rescaled_masks", ")", "==", "0", "\n", "assert", "rescaled_masks", ".", "height", "==", "56", "\n", "assert", "rescaled_masks", ".", "width", "==", "56", "\n", "\n", "# rescale with bitmap masks contain 1 instances", "\n", "raw_masks", "=", "np", ".", "array", "(", "[", "[", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", ",", "1", "]", "]", "]", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "2", ",", "4", ")", "\n", "rescaled_masks", "=", "bitmap_masks", ".", "rescale", "(", "(", "8", ",", "8", ")", ")", "\n", "assert", "len", "(", "rescaled_masks", ")", "==", "1", "\n", "assert", "rescaled_masks", ".", "height", "==", "4", "\n", "assert", "rescaled_masks", ".", "width", "==", "8", "\n", "truth", "=", "np", ".", "array", "(", "[", "[", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", "]", "]", "]", ")", "\n", "assert", "(", "rescaled_masks", ".", "masks", "==", "truth", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_bitmap_mask_resize": [[98, 130], ["test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.resize", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.resize", "numpy.array", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.resize", "numpy.array", "len", "numpy.diag", "len", "numpy.diag", "len", "numpy.ones", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.resize", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.resize", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.resize"], ["", "def", "test_bitmap_mask_resize", "(", ")", ":", "\n", "# resize with empty bitmap masks", "\n", "    ", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "resized_masks", "=", "bitmap_masks", ".", "resize", "(", "(", "56", ",", "72", ")", ")", "\n", "assert", "len", "(", "resized_masks", ")", "==", "0", "\n", "assert", "resized_masks", ".", "height", "==", "56", "\n", "assert", "resized_masks", ".", "width", "==", "72", "\n", "\n", "# resize with bitmap masks contain 1 instances", "\n", "raw_masks", "=", "np", ".", "diag", "(", "np", ".", "ones", "(", "4", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "4", ",", "4", ")", "\n", "resized_masks", "=", "bitmap_masks", ".", "resize", "(", "(", "8", ",", "8", ")", ")", "\n", "assert", "len", "(", "resized_masks", ")", "==", "1", "\n", "assert", "resized_masks", ".", "height", "==", "8", "\n", "assert", "resized_masks", ".", "width", "==", "8", "\n", "truth", "=", "np", ".", "array", "(", "[", "[", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "]", "]", ")", "\n", "assert", "(", "resized_masks", ".", "masks", "==", "truth", ")", ".", "all", "(", ")", "\n", "\n", "# resize to non-square", "\n", "raw_masks", "=", "np", ".", "diag", "(", "np", ".", "ones", "(", "4", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "[", "np", ".", "newaxis", ",", "...", "]", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "4", ",", "4", ")", "\n", "resized_masks", "=", "bitmap_masks", ".", "resize", "(", "(", "4", ",", "8", ")", ")", "\n", "assert", "len", "(", "resized_masks", ")", "==", "1", "\n", "assert", "resized_masks", ".", "height", "==", "4", "\n", "assert", "resized_masks", ".", "width", "==", "8", "\n", "truth", "=", "np", ".", "array", "(", "[", "[", "[", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", "]", "]", "]", ")", "\n", "assert", "(", "resized_masks", ".", "masks", "==", "truth", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_bitmap_mask_flip": [[132, 171], ["test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.flip", "test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.flip", "bitmap_masks.flip.flip", "test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.flip", "bitmap_masks.flip.flip", "test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.flip", "bitmap_masks.flip.flip", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip"], ["", "def", "test_bitmap_mask_flip", "(", ")", ":", "\n", "# flip with empty bitmap masks", "\n", "    ", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "flipped_masks", "=", "bitmap_masks", ".", "flip", "(", "flip_direction", "=", "'horizontal'", ")", "\n", "assert", "len", "(", "flipped_masks", ")", "==", "0", "\n", "assert", "flipped_masks", ".", "height", "==", "28", "\n", "assert", "flipped_masks", ".", "width", "==", "28", "\n", "\n", "# horizontally flip with bitmap masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "flipped_masks", "=", "bitmap_masks", ".", "flip", "(", "flip_direction", "=", "'horizontal'", ")", "\n", "flipped_flipped_masks", "=", "flipped_masks", ".", "flip", "(", "flip_direction", "=", "'horizontal'", ")", "\n", "assert", "flipped_masks", ".", "masks", ".", "shape", "==", "(", "3", ",", "28", ",", "28", ")", "\n", "assert", "(", "bitmap_masks", ".", "masks", "==", "flipped_flipped_masks", ".", "masks", ")", ".", "all", "(", ")", "\n", "assert", "(", "flipped_masks", ".", "masks", "==", "raw_masks", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", ".", "all", "(", ")", "\n", "\n", "# vertically flip with bitmap masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "flipped_masks", "=", "bitmap_masks", ".", "flip", "(", "flip_direction", "=", "'vertical'", ")", "\n", "flipped_flipped_masks", "=", "flipped_masks", ".", "flip", "(", "flip_direction", "=", "'vertical'", ")", "\n", "assert", "len", "(", "flipped_masks", ")", "==", "3", "\n", "assert", "flipped_masks", ".", "height", "==", "28", "\n", "assert", "flipped_masks", ".", "width", "==", "28", "\n", "assert", "(", "bitmap_masks", ".", "masks", "==", "flipped_flipped_masks", ".", "masks", ")", ".", "all", "(", ")", "\n", "assert", "(", "flipped_masks", ".", "masks", "==", "raw_masks", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", ")", ".", "all", "(", ")", "\n", "\n", "# diagonal flip with bitmap masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "flipped_masks", "=", "bitmap_masks", ".", "flip", "(", "flip_direction", "=", "'diagonal'", ")", "\n", "flipped_flipped_masks", "=", "flipped_masks", ".", "flip", "(", "flip_direction", "=", "'diagonal'", ")", "\n", "assert", "len", "(", "flipped_masks", ")", "==", "3", "\n", "assert", "flipped_masks", ".", "height", "==", "28", "\n", "assert", "flipped_masks", ".", "width", "==", "28", "\n", "assert", "(", "bitmap_masks", ".", "masks", "==", "flipped_flipped_masks", ".", "masks", ")", ".", "all", "(", ")", "\n", "assert", "(", "flipped_masks", ".", "masks", "==", "raw_masks", "[", ":", ",", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_bitmap_mask_pad": [[173, 190], ["test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.pad", "test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.pad", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.pad", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.pad"], ["", "def", "test_bitmap_mask_pad", "(", ")", ":", "\n", "# pad with empty bitmap masks", "\n", "    ", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "padded_masks", "=", "bitmap_masks", ".", "pad", "(", "(", "56", ",", "56", ")", ")", "\n", "assert", "len", "(", "padded_masks", ")", "==", "0", "\n", "assert", "padded_masks", ".", "height", "==", "56", "\n", "assert", "padded_masks", ".", "width", "==", "56", "\n", "\n", "# pad with bitmap masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "padded_masks", "=", "bitmap_masks", ".", "pad", "(", "(", "56", ",", "56", ")", ")", "\n", "assert", "len", "(", "padded_masks", ")", "==", "3", "\n", "assert", "padded_masks", ".", "height", "==", "56", "\n", "assert", "padded_masks", ".", "width", "==", "56", "\n", "assert", "(", "padded_masks", ".", "masks", "[", ":", ",", "28", ":", ",", "28", ":", "]", "==", "0", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_bitmap_mask_crop": [[192, 216], ["numpy.array", "test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.crop", "test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.crop", "len", "len", "pytest.raises", "test_masks.dummy_bboxes", "mmdet.core.BitmapMasks.crop"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop"], ["", "def", "test_bitmap_mask_crop", "(", ")", ":", "\n", "# crop with empty bitmap masks", "\n", "    ", "dummy_bbox", "=", "np", ".", "array", "(", "[", "0", ",", "10", ",", "10", ",", "27", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "cropped_masks", "=", "bitmap_masks", ".", "crop", "(", "dummy_bbox", ")", "\n", "assert", "len", "(", "cropped_masks", ")", "==", "0", "\n", "assert", "cropped_masks", ".", "height", "==", "17", "\n", "assert", "cropped_masks", ".", "width", "==", "10", "\n", "\n", "# crop with bitmap masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "cropped_masks", "=", "bitmap_masks", ".", "crop", "(", "dummy_bbox", ")", "\n", "assert", "len", "(", "cropped_masks", ")", "==", "3", "\n", "assert", "cropped_masks", ".", "height", "==", "17", "\n", "assert", "cropped_masks", ".", "width", "==", "10", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "dummy_bbox", "\n", "assert", "(", "cropped_masks", ".", "masks", "==", "raw_masks", "[", ":", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", ")", ".", "all", "(", ")", "\n", "\n", "# crop with invalid bbox", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "dummy_bbox", "=", "dummy_bboxes", "(", "2", ",", "28", ",", "28", ")", "\n", "bitmap_masks", ".", "crop", "(", "dummy_bbox", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_bitmap_mask_crop_and_resize": [[218, 239], ["test_masks.dummy_bboxes", "numpy.random.randint", "test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.crop_and_resize", "test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.crop_and_resize", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop_and_resize", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop_and_resize"], ["", "", "def", "test_bitmap_mask_crop_and_resize", "(", ")", ":", "\n", "    ", "dummy_bbox", "=", "dummy_bboxes", "(", "5", ",", "28", ",", "28", ")", "\n", "inds", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "3", ",", "(", "5", ",", ")", ")", "\n", "\n", "# crop and resize with empty bitmap masks", "\n", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "cropped_resized_masks", "=", "bitmap_masks", ".", "crop_and_resize", "(", "\n", "dummy_bbox", ",", "(", "56", ",", "56", ")", ",", "inds", ")", "\n", "assert", "len", "(", "cropped_resized_masks", ")", "==", "0", "\n", "assert", "cropped_resized_masks", ".", "height", "==", "56", "\n", "assert", "cropped_resized_masks", ".", "width", "==", "56", "\n", "\n", "# crop and resize with bitmap masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "cropped_resized_masks", "=", "bitmap_masks", ".", "crop_and_resize", "(", "\n", "dummy_bbox", ",", "(", "56", ",", "56", ")", ",", "inds", ")", "\n", "assert", "len", "(", "cropped_resized_masks", ")", "==", "5", "\n", "assert", "cropped_resized_masks", ".", "height", "==", "56", "\n", "assert", "cropped_resized_masks", ".", "width", "==", "56", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_bitmap_mask_expand": [[241, 259], ["test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.expand", "test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.expand", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.expand", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.expand"], ["", "def", "test_bitmap_mask_expand", "(", ")", ":", "\n", "# expand with empty bitmap masks", "\n", "    ", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "expanded_masks", "=", "bitmap_masks", ".", "expand", "(", "56", ",", "56", ",", "12", ",", "14", ")", "\n", "assert", "len", "(", "expanded_masks", ")", "==", "0", "\n", "assert", "expanded_masks", ".", "height", "==", "56", "\n", "assert", "expanded_masks", ".", "width", "==", "56", "\n", "\n", "# expand with bitmap masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "expanded_masks", "=", "bitmap_masks", ".", "expand", "(", "56", ",", "56", ",", "12", ",", "14", ")", "\n", "assert", "len", "(", "expanded_masks", ")", "==", "3", "\n", "assert", "expanded_masks", ".", "height", "==", "56", "\n", "assert", "expanded_masks", ".", "width", "==", "56", "\n", "assert", "(", "expanded_masks", ".", "masks", "[", ":", ",", ":", "12", ",", ":", "14", "]", "==", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "expanded_masks", ".", "masks", "[", ":", ",", "12", "+", "28", ":", ",", "14", "+", "28", ":", "]", "==", "0", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_bitmap_mask_area": [[261, 273], ["test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.areas.sum", "len", "dummy_raw_bitmap_masks.sum"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks"], ["", "def", "test_bitmap_mask_area", "(", ")", ":", "\n", "# area of empty bitmap mask", "\n", "    ", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "assert", "bitmap_masks", ".", "areas", ".", "sum", "(", ")", "==", "0", "\n", "\n", "# area of bitmap masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "areas", "=", "bitmap_masks", ".", "areas", "\n", "assert", "len", "(", "areas", ")", "==", "3", "\n", "assert", "(", "areas", "==", "raw_masks", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_bitmap_mask_to_ndarray": [[275, 290], ["test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.to_ndarray", "isinstance", "test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.to_ndarray", "isinstance"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "def", "test_bitmap_mask_to_ndarray", "(", ")", ":", "\n", "# empty bitmap masks to ndarray", "\n", "    ", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "ndarray_masks", "=", "bitmap_masks", ".", "to_ndarray", "(", ")", "\n", "assert", "isinstance", "(", "ndarray_masks", ",", "np", ".", "ndarray", ")", "\n", "assert", "ndarray_masks", ".", "shape", "==", "(", "0", ",", "28", ",", "28", ")", "\n", "\n", "# bitmap masks contain 3 instances to ndarray", "\n", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "ndarray_masks", "=", "bitmap_masks", ".", "to_ndarray", "(", ")", "\n", "assert", "isinstance", "(", "ndarray_masks", ",", "np", ".", "ndarray", ")", "\n", "assert", "ndarray_masks", ".", "shape", "==", "(", "3", ",", "28", ",", "28", ")", "\n", "assert", "(", "ndarray_masks", "==", "raw_masks", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_bitmap_mask_to_tensor": [[292, 307], ["test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.to_tensor", "isinstance", "test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "mmdet.core.BitmapMasks.to_tensor", "isinstance", "bitmap_masks.to_tensor.numpy"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.to_tensor", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.to_tensor"], ["", "def", "test_bitmap_mask_to_tensor", "(", ")", ":", "\n", "# empty bitmap masks to tensor", "\n", "    ", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "tensor_masks", "=", "bitmap_masks", ".", "to_tensor", "(", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cpu'", ")", "\n", "assert", "isinstance", "(", "tensor_masks", ",", "torch", ".", "Tensor", ")", "\n", "assert", "tensor_masks", ".", "shape", "==", "(", "0", ",", "28", ",", "28", ")", "\n", "\n", "# bitmap masks contain 3 instances to tensor", "\n", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "tensor_masks", "=", "bitmap_masks", ".", "to_tensor", "(", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cpu'", ")", "\n", "assert", "isinstance", "(", "tensor_masks", ",", "torch", ".", "Tensor", ")", "\n", "assert", "tensor_masks", ".", "shape", "==", "(", "3", ",", "28", ",", "28", ")", "\n", "assert", "(", "tensor_masks", ".", "numpy", "(", ")", "==", "raw_masks", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_bitmap_mask_index": [[309, 314], ["test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "range", "range"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks"], ["", "def", "test_bitmap_mask_index", "(", ")", ":", "\n", "    ", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "assert", "(", "bitmap_masks", "[", "0", "]", ".", "masks", "==", "raw_masks", "[", "0", "]", ")", ".", "all", "(", ")", "\n", "assert", "(", "bitmap_masks", "[", "range", "(", "2", ")", "]", ".", "masks", "==", "raw_masks", "[", "range", "(", "2", ")", "]", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_bitmap_mask_iter": [[316, 322], ["test_masks.dummy_raw_bitmap_masks", "mmdet.core.BitmapMasks", "enumerate"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_bitmap_masks"], ["", "def", "test_bitmap_mask_iter", "(", ")", ":", "\n", "    ", "raw_masks", "=", "dummy_raw_bitmap_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "bitmap_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "for", "i", ",", "bitmap_mask", "in", "enumerate", "(", "bitmap_masks", ")", ":", "\n", "        ", "assert", "bitmap_mask", ".", "shape", "==", "(", "28", ",", "28", ")", "\n", "assert", "(", "bitmap_mask", "==", "raw_masks", "[", "i", "]", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_mask_init": [[324, 350], ["mmdet.core.BitmapMasks", "test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "isinstance", "isinstance", "isinstance", "len", "len", "pytest.raises", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.to_ndarray", "test_masks.dummy_raw_polygon_masks"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks"], ["", "", "def", "test_polygon_mask_init", "(", ")", ":", "\n", "# init with empty masks", "\n", "    ", "raw_masks", "=", "[", "]", "\n", "polygon_masks", "=", "BitmapMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "assert", "len", "(", "polygon_masks", ")", "==", "0", "\n", "assert", "polygon_masks", ".", "height", "==", "28", "\n", "assert", "polygon_masks", ".", "width", "==", "28", "\n", "\n", "# init with masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "assert", "isinstance", "(", "polygon_masks", ".", "masks", ",", "list", ")", "\n", "assert", "isinstance", "(", "polygon_masks", ".", "masks", "[", "0", "]", ",", "list", ")", "\n", "assert", "isinstance", "(", "polygon_masks", ".", "masks", "[", "0", "]", "[", "0", "]", ",", "np", ".", "ndarray", ")", "\n", "assert", "len", "(", "polygon_masks", ")", "==", "3", "\n", "assert", "polygon_masks", ".", "height", "==", "28", "\n", "assert", "polygon_masks", ".", "width", "==", "28", "\n", "assert", "polygon_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "3", ",", "28", ",", "28", ")", "\n", "\n", "# init with raw masks of unsupported type", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "raw_masks", "=", "[", "[", "[", "]", "]", "]", "\n", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "\n", "raw_masks", "=", "[", "dummy_raw_polygon_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "]", "\n", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_mask_rescale": [[352, 378], ["test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.rescale", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.rescale", "numpy.array", "len", "len", "polygon_masks.rescale.to_ndarray", "numpy.array", "polygon_masks.rescale.to_ndarray", "polygon_masks.rescale.to_ndarray"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.rescale", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.rescale", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "", "def", "test_polygon_mask_rescale", "(", ")", ":", "\n", "# rescale with empty polygon masks", "\n", "    ", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "rescaled_masks", "=", "polygon_masks", ".", "rescale", "(", "(", "56", ",", "72", ")", ")", "\n", "assert", "len", "(", "rescaled_masks", ")", "==", "0", "\n", "assert", "rescaled_masks", ".", "height", "==", "56", "\n", "assert", "rescaled_masks", ".", "width", "==", "56", "\n", "assert", "rescaled_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "0", ",", "56", ",", "56", ")", "\n", "\n", "# rescale with polygon masks contain 3 instances", "\n", "raw_masks", "=", "[", "[", "np", ".", "array", "(", "[", "1", ",", "1", ",", "3", ",", "1", ",", "4", ",", "3", ",", "2", ",", "4", ",", "1", ",", "3", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", "]", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "5", ",", "5", ")", "\n", "rescaled_masks", "=", "polygon_masks", ".", "rescale", "(", "(", "12", ",", "10", ")", ")", "\n", "assert", "len", "(", "rescaled_masks", ")", "==", "1", "\n", "assert", "rescaled_masks", ".", "height", "==", "10", "\n", "assert", "rescaled_masks", ".", "width", "==", "10", "\n", "assert", "rescaled_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "1", ",", "10", ",", "10", ")", "\n", "truth", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "\n", "np", ".", "uint8", ")", "\n", "assert", "(", "rescaled_masks", ".", "to_ndarray", "(", ")", "==", "truth", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_mask_resize": [[380, 447], ["test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.resize", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.resize", "numpy.array", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.resize", "numpy.array", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.resize", "numpy.stack", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.resize", "numpy.array", "len", "len", "len", "len", "len", "polygon_masks.resize.to_ndarray", "numpy.array", "polygon_masks1.resize.to_ndarray", "numpy.array", "numpy.array", "polygon_masks2.resize.to_ndarray", "polygon_masks3.resize.to_ndarray", "numpy.pad", "numpy.array", "polygon_masks4.resize.to_ndarray", "polygon_masks1.resize.to_ndarray", "polygon_masks2.resize.to_ndarray", "polygon_masks3.resize.to_ndarray", "polygon_masks4.resize.to_ndarray"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.resize", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.resize", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.resize", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.resize", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.resize", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.pad", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "def", "test_polygon_mask_resize", "(", ")", ":", "\n", "# resize with empty polygon masks", "\n", "    ", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "resized_masks", "=", "polygon_masks", ".", "resize", "(", "(", "56", ",", "72", ")", ")", "\n", "assert", "len", "(", "resized_masks", ")", "==", "0", "\n", "assert", "resized_masks", ".", "height", "==", "56", "\n", "assert", "resized_masks", ".", "width", "==", "72", "\n", "assert", "resized_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "0", ",", "56", ",", "72", ")", "\n", "\n", "# resize with polygon masks contain 1 instance 1 part", "\n", "raw_masks1", "=", "[", "[", "np", ".", "array", "(", "[", "1", ",", "1", ",", "3", ",", "1", ",", "4", ",", "3", ",", "2", ",", "4", ",", "1", ",", "3", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", "]", "\n", "polygon_masks1", "=", "PolygonMasks", "(", "raw_masks1", ",", "5", ",", "5", ")", "\n", "resized_masks1", "=", "polygon_masks1", ".", "resize", "(", "(", "10", ",", "10", ")", ")", "\n", "assert", "len", "(", "resized_masks1", ")", "==", "1", "\n", "assert", "resized_masks1", ".", "height", "==", "10", "\n", "assert", "resized_masks1", ".", "width", "==", "10", "\n", "assert", "resized_masks1", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "1", ",", "10", ",", "10", ")", "\n", "truth1", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "\n", "np", ".", "uint8", ")", "\n", "assert", "(", "resized_masks1", ".", "to_ndarray", "(", ")", "==", "truth1", ")", ".", "all", "(", ")", "\n", "\n", "# resize with polygon masks contain 1 instance 2 part", "\n", "raw_masks2", "=", "[", "[", "\n", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "1.", ",", "0.", ",", "1.", ",", "1.", "]", ")", ",", "\n", "np", ".", "array", "(", "[", "1.", ",", "1.", ",", "2.", ",", "1.", ",", "2.", ",", "2.", ",", "1.", ",", "2.", "]", ")", "\n", "]", "]", "\n", "polygon_masks2", "=", "PolygonMasks", "(", "raw_masks2", ",", "3", ",", "3", ")", "\n", "resized_masks2", "=", "polygon_masks2", ".", "resize", "(", "(", "6", ",", "6", ")", ")", "\n", "assert", "len", "(", "resized_masks2", ")", "==", "1", "\n", "assert", "resized_masks2", ".", "height", "==", "6", "\n", "assert", "resized_masks2", ".", "width", "==", "6", "\n", "assert", "resized_masks2", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "1", ",", "6", ",", "6", ")", "\n", "truth2", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "np", ".", "uint8", ")", "\n", "assert", "(", "resized_masks2", ".", "to_ndarray", "(", ")", "==", "truth2", ")", ".", "all", "(", ")", "\n", "\n", "# resize with polygon masks contain 2 instances", "\n", "raw_masks3", "=", "[", "raw_masks1", "[", "0", "]", ",", "raw_masks2", "[", "0", "]", "]", "\n", "polygon_masks3", "=", "PolygonMasks", "(", "raw_masks3", ",", "5", ",", "5", ")", "\n", "resized_masks3", "=", "polygon_masks3", ".", "resize", "(", "(", "10", ",", "10", ")", ")", "\n", "assert", "len", "(", "resized_masks3", ")", "==", "2", "\n", "assert", "resized_masks3", ".", "height", "==", "10", "\n", "assert", "resized_masks3", ".", "width", "==", "10", "\n", "assert", "resized_masks3", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "2", ",", "10", ",", "10", ")", "\n", "truth3", "=", "np", ".", "stack", "(", "[", "truth1", ",", "np", ".", "pad", "(", "truth2", ",", "(", "(", "0", ",", "4", ")", ",", "(", "0", ",", "4", ")", ")", ",", "'constant'", ")", "]", ")", "\n", "assert", "(", "resized_masks3", ".", "to_ndarray", "(", ")", "==", "truth3", ")", ".", "all", "(", ")", "\n", "\n", "# resize to non-square", "\n", "raw_masks4", "=", "[", "[", "np", ".", "array", "(", "[", "1", ",", "1", ",", "3", ",", "1", ",", "4", ",", "3", ",", "2", ",", "4", ",", "1", ",", "3", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", "]", "\n", "polygon_masks4", "=", "PolygonMasks", "(", "raw_masks4", ",", "5", ",", "5", ")", "\n", "resized_masks4", "=", "polygon_masks4", ".", "resize", "(", "(", "5", ",", "10", ")", ")", "\n", "assert", "len", "(", "resized_masks4", ")", "==", "1", "\n", "assert", "resized_masks4", ".", "height", "==", "5", "\n", "assert", "resized_masks4", ".", "width", "==", "10", "\n", "assert", "resized_masks4", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "1", ",", "5", ",", "10", ")", "\n", "truth4", "=", "np", ".", "array", "(", "\n", "[", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "np", ".", "uint8", ")", "\n", "assert", "(", "resized_masks4", ".", "to_ndarray", "(", ")", "==", "truth4", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_mask_flip": [[449, 494], ["test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.flip", "test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.flip", "polygon_masks.flip.flip", "test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.flip", "polygon_masks.flip.flip", "test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.flip", "polygon_masks.flip.flip", "len", "len", "len", "len", "polygon_masks.flip.to_ndarray", "polygon_masks.flip.to_ndarray", "polygon_masks.flip.to_ndarray", "polygon_masks.flip.to_ndarray", "mmdet.core.PolygonMasks.to_ndarray", "flipped_masks.flip.to_ndarray", "mmdet.core.PolygonMasks.to_ndarray", "flipped_masks.flip.to_ndarray", "mmdet.core.PolygonMasks.to_ndarray", "flipped_masks.flip.to_ndarray"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "def", "test_polygon_mask_flip", "(", ")", ":", "\n", "# flip with empty polygon masks", "\n", "    ", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "flipped_masks", "=", "polygon_masks", ".", "flip", "(", "flip_direction", "=", "'horizontal'", ")", "\n", "assert", "len", "(", "flipped_masks", ")", "==", "0", "\n", "assert", "flipped_masks", ".", "height", "==", "28", "\n", "assert", "flipped_masks", ".", "width", "==", "28", "\n", "assert", "flipped_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "0", ",", "28", ",", "28", ")", "\n", "\n", "# TODO: fixed flip correctness checking after v2.0_coord is merged", "\n", "# horizontally flip with polygon masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "flipped_masks", "=", "polygon_masks", ".", "flip", "(", "flip_direction", "=", "'horizontal'", ")", "\n", "flipped_flipped_masks", "=", "flipped_masks", ".", "flip", "(", "flip_direction", "=", "'horizontal'", ")", "\n", "assert", "len", "(", "flipped_masks", ")", "==", "3", "\n", "assert", "flipped_masks", ".", "height", "==", "28", "\n", "assert", "flipped_masks", ".", "width", "==", "28", "\n", "assert", "flipped_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "3", ",", "28", ",", "28", ")", "\n", "assert", "(", "polygon_masks", ".", "to_ndarray", "(", ")", "==", "flipped_flipped_masks", ".", "to_ndarray", "(", ")", "\n", ")", ".", "all", "(", ")", "\n", "\n", "# vertically flip with polygon masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "flipped_masks", "=", "polygon_masks", ".", "flip", "(", "flip_direction", "=", "'vertical'", ")", "\n", "flipped_flipped_masks", "=", "flipped_masks", ".", "flip", "(", "flip_direction", "=", "'vertical'", ")", "\n", "assert", "len", "(", "flipped_masks", ")", "==", "3", "\n", "assert", "flipped_masks", ".", "height", "==", "28", "\n", "assert", "flipped_masks", ".", "width", "==", "28", "\n", "assert", "flipped_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "3", ",", "28", ",", "28", ")", "\n", "assert", "(", "polygon_masks", ".", "to_ndarray", "(", ")", "==", "flipped_flipped_masks", ".", "to_ndarray", "(", ")", "\n", ")", ".", "all", "(", ")", "\n", "\n", "# diagonal flip with polygon masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "flipped_masks", "=", "polygon_masks", ".", "flip", "(", "flip_direction", "=", "'diagonal'", ")", "\n", "flipped_flipped_masks", "=", "flipped_masks", ".", "flip", "(", "flip_direction", "=", "'diagonal'", ")", "\n", "assert", "len", "(", "flipped_masks", ")", "==", "3", "\n", "assert", "flipped_masks", ".", "height", "==", "28", "\n", "assert", "flipped_masks", ".", "width", "==", "28", "\n", "assert", "flipped_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "3", ",", "28", ",", "28", ")", "\n", "assert", "(", "polygon_masks", ".", "to_ndarray", "(", ")", "==", "flipped_flipped_masks", ".", "to_ndarray", "(", ")", "\n", ")", ".", "all", "(", ")", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_mask_crop": [[497, 524], ["numpy.array", "test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.crop", "mmdet.core.PolygonMasks", "numpy.array", "mmdet.core.PolygonMasks.crop", "numpy.array", "len", "len", "pytest.raises", "test_masks.dummy_bboxes", "mmdet.core.PolygonMasks.crop", "polygon_masks.crop.to_ndarray", "numpy.array", "polygon_masks.crop.to_ndarray", "polygon_masks.crop.to_ndarray"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "def", "test_polygon_mask_crop", "(", ")", ":", "\n", "    ", "dummy_bbox", "=", "np", ".", "array", "(", "[", "0", ",", "10", ",", "10", ",", "27", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "# crop with empty polygon masks", "\n", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "cropped_masks", "=", "polygon_masks", ".", "crop", "(", "dummy_bbox", ")", "\n", "assert", "len", "(", "cropped_masks", ")", "==", "0", "\n", "assert", "cropped_masks", ".", "height", "==", "17", "\n", "assert", "cropped_masks", ".", "width", "==", "10", "\n", "assert", "cropped_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "0", ",", "17", ",", "10", ")", "\n", "\n", "# crop with polygon masks contain 1 instances", "\n", "raw_masks", "=", "[", "[", "np", ".", "array", "(", "[", "1.", ",", "3.", ",", "5.", ",", "1.", ",", "5.", ",", "6.", ",", "1", ",", "6", "]", ")", "]", "]", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "7", ",", "7", ")", "\n", "bbox", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "3", ",", "4", "]", ")", "\n", "cropped_masks", "=", "polygon_masks", ".", "crop", "(", "bbox", ")", "\n", "assert", "len", "(", "cropped_masks", ")", "==", "1", "\n", "assert", "cropped_masks", ".", "height", "==", "4", "\n", "assert", "cropped_masks", ".", "width", "==", "3", "\n", "assert", "cropped_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "1", ",", "4", ",", "3", ")", "\n", "truth", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "1", ",", "1", "]", "]", ")", "\n", "assert", "(", "cropped_masks", ".", "to_ndarray", "(", ")", "==", "truth", ")", ".", "all", "(", ")", "\n", "\n", "# crop with invalid bbox", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "dummy_bbox", "=", "dummy_bboxes", "(", "2", ",", "28", ",", "28", ")", "\n", "polygon_masks", ".", "crop", "(", "dummy_bbox", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_mask_pad": [[526, 545], ["test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.pad", "test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.pad", "len", "len", "polygon_masks.pad.to_ndarray", "polygon_masks.pad.to_ndarray", "polygon_masks.pad.to_ndarray"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.pad", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.pad", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "", "def", "test_polygon_mask_pad", "(", ")", ":", "\n", "# pad with empty polygon masks", "\n", "    ", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "padded_masks", "=", "polygon_masks", ".", "pad", "(", "(", "56", ",", "56", ")", ")", "\n", "assert", "len", "(", "padded_masks", ")", "==", "0", "\n", "assert", "padded_masks", ".", "height", "==", "56", "\n", "assert", "padded_masks", ".", "width", "==", "56", "\n", "assert", "padded_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "0", ",", "56", ",", "56", ")", "\n", "\n", "# pad with polygon masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "padded_masks", "=", "polygon_masks", ".", "pad", "(", "(", "56", ",", "56", ")", ")", "\n", "assert", "len", "(", "padded_masks", ")", "==", "3", "\n", "assert", "padded_masks", ".", "height", "==", "56", "\n", "assert", "padded_masks", ".", "width", "==", "56", "\n", "assert", "padded_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "3", ",", "56", ",", "56", ")", "\n", "assert", "(", "padded_masks", ".", "to_ndarray", "(", ")", "[", ":", ",", "28", ":", ",", "28", ":", "]", "==", "0", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_mask_expand": [[547, 552], ["pytest.raises", "test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.expand"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.expand"], ["", "def", "test_polygon_mask_expand", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "NotImplementedError", ")", ":", "\n", "        ", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "polygon_masks", ".", "expand", "(", "56", ",", "56", ",", "10", ",", "17", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_mask_crop_and_resize": [[554, 577], ["test_masks.dummy_bboxes", "numpy.random.randint", "test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.crop_and_resize", "test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.crop_and_resize", "len", "len", "polygon_masks.crop_and_resize.to_ndarray", "polygon_masks.crop_and_resize.to_ndarray"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop_and_resize", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop_and_resize", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "", "def", "test_polygon_mask_crop_and_resize", "(", ")", ":", "\n", "    ", "dummy_bbox", "=", "dummy_bboxes", "(", "5", ",", "28", ",", "28", ")", "\n", "inds", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "3", ",", "(", "5", ",", ")", ")", "\n", "\n", "# crop and resize with empty polygon masks", "\n", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "cropped_resized_masks", "=", "polygon_masks", ".", "crop_and_resize", "(", "\n", "dummy_bbox", ",", "(", "56", ",", "56", ")", ",", "inds", ")", "\n", "assert", "len", "(", "cropped_resized_masks", ")", "==", "0", "\n", "assert", "cropped_resized_masks", ".", "height", "==", "56", "\n", "assert", "cropped_resized_masks", ".", "width", "==", "56", "\n", "assert", "cropped_resized_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "0", ",", "56", ",", "56", ")", "\n", "\n", "# crop and resize with polygon masks contain 3 instances", "\n", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "cropped_resized_masks", "=", "polygon_masks", ".", "crop_and_resize", "(", "\n", "dummy_bbox", ",", "(", "56", ",", "56", ")", ",", "inds", ")", "\n", "assert", "len", "(", "cropped_resized_masks", ")", "==", "5", "\n", "assert", "cropped_resized_masks", ".", "height", "==", "56", "\n", "assert", "cropped_resized_masks", ".", "width", "==", "56", "\n", "assert", "cropped_resized_masks", ".", "to_ndarray", "(", ")", ".", "shape", "==", "(", "5", ",", "56", ",", "56", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_mask_area": [[579, 594], ["test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks", "numpy.isclose().all", "mmdet.core.PolygonMasks.areas.sum", "mmdet.core.PolygonMasks.to_bitmap", "len", "numpy.array", "numpy.isclose"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_bitmap"], ["", "def", "test_polygon_mask_area", "(", ")", ":", "\n", "# area of empty polygon masks", "\n", "    ", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "assert", "polygon_masks", ".", "areas", ".", "sum", "(", ")", "==", "0", "\n", "\n", "# area of polygon masks contain 1 instance", "\n", "# here we hack a case that the gap between the area of bitmap and polygon", "\n", "# is minor", "\n", "raw_masks", "=", "[", "[", "np", ".", "array", "(", "[", "1", ",", "1", ",", "5", ",", "1", ",", "3", ",", "4", "]", ")", "]", "]", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "6", ",", "6", ")", "\n", "polygon_area", "=", "polygon_masks", ".", "areas", "\n", "bitmap_area", "=", "polygon_masks", ".", "to_bitmap", "(", ")", ".", "areas", "\n", "assert", "len", "(", "polygon_area", ")", "==", "1", "\n", "assert", "np", ".", "isclose", "(", "polygon_area", ",", "bitmap_area", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_mask_to_bitmap": [[596, 602], ["test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.to_bitmap", "mmdet.core.PolygonMasks.to_ndarray", "polygon_masks.to_bitmap.to_ndarray"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_bitmap", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "def", "test_polygon_mask_to_bitmap", "(", ")", ":", "\n", "# polygon masks contain 3 instances to bitmap", "\n", "    ", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "bitmap_masks", "=", "polygon_masks", ".", "to_bitmap", "(", ")", "\n", "assert", "(", "polygon_masks", ".", "to_ndarray", "(", ")", "==", "bitmap_masks", ".", "to_ndarray", "(", ")", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_mask_to_ndarray": [[604, 618], ["test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.to_ndarray", "isinstance", "test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.to_ndarray", "isinstance"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "def", "test_polygon_mask_to_ndarray", "(", ")", ":", "\n", "# empty polygon masks to ndarray", "\n", "    ", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "ndarray_masks", "=", "polygon_masks", ".", "to_ndarray", "(", ")", "\n", "assert", "isinstance", "(", "ndarray_masks", ",", "np", ".", "ndarray", ")", "\n", "assert", "ndarray_masks", ".", "shape", "==", "(", "0", ",", "28", ",", "28", ")", "\n", "\n", "# polygon masks contain 3 instances to ndarray", "\n", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "ndarray_masks", "=", "polygon_masks", ".", "to_ndarray", "(", ")", "\n", "assert", "isinstance", "(", "ndarray_masks", ",", "np", ".", "ndarray", ")", "\n", "assert", "ndarray_masks", ".", "shape", "==", "(", "3", ",", "28", ",", "28", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_to_tensor": [[620, 635], ["test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.to_tensor", "isinstance", "test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "mmdet.core.PolygonMasks.to_tensor", "isinstance", "polygon_masks.to_tensor.numpy", "mmdet.core.PolygonMasks.to_ndarray"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.to_tensor", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.to_tensor", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "def", "test_polygon_to_tensor", "(", ")", ":", "\n", "# empty polygon masks to tensor", "\n", "    ", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "0", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "tensor_masks", "=", "polygon_masks", ".", "to_tensor", "(", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cpu'", ")", "\n", "assert", "isinstance", "(", "tensor_masks", ",", "torch", ".", "Tensor", ")", "\n", "assert", "tensor_masks", ".", "shape", "==", "(", "0", ",", "28", ",", "28", ")", "\n", "\n", "# polygon masks contain 3 instances to tensor", "\n", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "tensor_masks", "=", "polygon_masks", ".", "to_tensor", "(", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cpu'", ")", "\n", "assert", "isinstance", "(", "tensor_masks", ",", "torch", ".", "Tensor", ")", "\n", "assert", "tensor_masks", ".", "shape", "==", "(", "3", ",", "28", ",", "28", ")", "\n", "assert", "(", "tensor_masks", ".", "numpy", "(", ")", "==", "polygon_masks", ".", "to_ndarray", "(", ")", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_mask_index": [[637, 649], ["test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "pytest.raises", "numpy.asarray", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks"], ["", "def", "test_polygon_mask_index", "(", ")", ":", "\n", "    ", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "# index by integer", "\n", "polygon_masks", "[", "0", "]", "\n", "# index by list", "\n", "polygon_masks", "[", "[", "0", ",", "1", "]", "]", "\n", "# index by ndarray", "\n", "polygon_masks", "[", "np", ".", "asarray", "(", "[", "0", ",", "1", "]", ")", "]", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "# invalid index", "\n", "        ", "polygon_masks", "[", "torch", ".", "Tensor", "(", "[", "1", ",", "2", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.test_polygon_mask_iter": [[651, 656], ["test_masks.dummy_raw_polygon_masks", "mmdet.core.PolygonMasks", "enumerate", "numpy.equal().all", "numpy.equal"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_masks.dummy_raw_polygon_masks"], ["", "", "def", "test_polygon_mask_iter", "(", ")", ":", "\n", "    ", "raw_masks", "=", "dummy_raw_polygon_masks", "(", "(", "3", ",", "28", ",", "28", ")", ")", "\n", "polygon_masks", "=", "PolygonMasks", "(", "raw_masks", ",", "28", ",", "28", ")", "\n", "for", "i", ",", "polygon_mask", "in", "enumerate", "(", "polygon_masks", ")", ":", "\n", "        ", "assert", "np", ".", "equal", "(", "polygon_mask", ",", "raw_masks", "[", "i", "]", ")", ".", "all", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_coder.test_yolo_bbox_coder": [[8, 24], ["mmdet.core.bbox.coder.YOLOBBoxCoder", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor.allclose", "mmdet.core.bbox.coder.YOLOBBoxCoder.decode"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode"], ["def", "test_yolo_bbox_coder", "(", ")", ":", "\n", "    ", "coder", "=", "YOLOBBoxCoder", "(", ")", "\n", "bboxes", "=", "torch", ".", "Tensor", "(", "[", "[", "-", "42.", ",", "-", "29.", ",", "74.", ",", "61.", "]", ",", "[", "-", "10.", ",", "-", "29.", ",", "106.", ",", "61.", "]", ",", "\n", "[", "22.", ",", "-", "29.", ",", "138.", ",", "61.", "]", ",", "[", "54.", ",", "-", "29.", ",", "170.", ",", "61.", "]", "]", ")", "\n", "pred_bboxes", "=", "torch", ".", "Tensor", "(", "[", "[", "0.4709", ",", "0.6152", ",", "0.1690", ",", "-", "0.4056", "]", ",", "\n", "[", "0.5399", ",", "0.6653", ",", "0.1162", ",", "-", "0.4162", "]", ",", "\n", "[", "0.4654", ",", "0.6618", ",", "0.1548", ",", "-", "0.4301", "]", ",", "\n", "[", "0.4786", ",", "0.6197", ",", "0.1896", ",", "-", "0.4479", "]", "]", ")", "\n", "grid_size", "=", "32", "\n", "expected_decode_bboxes", "=", "torch", ".", "Tensor", "(", "\n", "[", "[", "-", "53.6102", ",", "-", "10.3096", ",", "83.7478", ",", "49.6824", "]", ",", "\n", "[", "-", "15.8700", ",", "-", "8.3901", ",", "114.4236", ",", "50.9693", "]", ",", "\n", "[", "11.1822", ",", "-", "8.0924", ",", "146.6034", ",", "50.4476", "]", ",", "\n", "[", "41.2068", ",", "-", "8.9232", ",", "181.4236", ",", "48.5840", "]", "]", ")", "\n", "assert", "expected_decode_bboxes", ".", "allclose", "(", "\n", "coder", ".", "decode", "(", "bboxes", ",", "pred_bboxes", ",", "grid_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_coder.test_delta_bbox_coder": [[26, 60], ["mmdet.core.bbox.coder.DeltaXYWHBBoxCoder", "torch.Tensor", "torch.Tensor", "torch.Tensor", "mmdet.core.bbox.coder.DeltaXYWHBBoxCoder.decode", "torch.Tensor.allclose", "mmdet.core.bbox.coder.DeltaXYWHBBoxCoder.decode", "torch.Tensor.allclose", "torch.zeros.unsqueeze().repeat", "torch.zeros.unsqueeze().repeat", "coder.decode.allclose", "coder.decode.allclose", "torch.zeros", "torch.zeros", "mmdet.core.bbox.coder.DeltaXYWHBBoxCoder.decode", "mmdet.core.bbox.coder.DeltaXYWHBBoxCoder.decode", "mmdet.core.bbox.coder.DeltaXYWHBBoxCoder.decode", "pytest.raises", "mmdet.core.bbox.coder.DeltaXYWHBBoxCoder.decode", "torch.Tensor", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode"], ["", "def", "test_delta_bbox_coder", "(", ")", ":", "\n", "    ", "coder", "=", "DeltaXYWHBBoxCoder", "(", ")", "\n", "\n", "rois", "=", "torch", ".", "Tensor", "(", "[", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "5.", ",", "5.", ",", "5.", ",", "5.", "]", "]", ")", "\n", "deltas", "=", "torch", ".", "Tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "[", "1.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "2.", ",", "-", "1.", "]", ",", "[", "0.7", ",", "-", "1.9", ",", "-", "0.5", ",", "0.3", "]", "]", ")", "\n", "expected_decode_bboxes", "=", "torch", ".", "Tensor", "(", "[", "[", "0.0000", ",", "0.0000", ",", "1.0000", ",", "1.0000", "]", ",", "\n", "[", "0.1409", ",", "0.1409", ",", "2.8591", ",", "2.8591", "]", ",", "\n", "[", "0.0000", ",", "0.3161", ",", "4.1945", ",", "0.6839", "]", ",", "\n", "[", "5.0000", ",", "5.0000", ",", "5.0000", ",", "5.0000", "]", "]", ")", "\n", "\n", "out", "=", "coder", ".", "decode", "(", "rois", ",", "deltas", ",", "max_shape", "=", "(", "32", ",", "32", ")", ")", "\n", "assert", "expected_decode_bboxes", ".", "allclose", "(", "out", ",", "atol", "=", "1e-04", ")", "\n", "out", "=", "coder", ".", "decode", "(", "rois", ",", "deltas", ",", "max_shape", "=", "torch", ".", "Tensor", "(", "(", "32", ",", "32", ")", ")", ")", "\n", "assert", "expected_decode_bboxes", ".", "allclose", "(", "out", ",", "atol", "=", "1e-04", ")", "\n", "\n", "batch_rois", "=", "rois", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ",", "1", ")", "\n", "batch_deltas", "=", "deltas", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ",", "1", ")", "\n", "batch_out", "=", "coder", ".", "decode", "(", "batch_rois", ",", "batch_deltas", ",", "max_shape", "=", "(", "32", ",", "32", ")", ")", "[", "0", "]", "\n", "assert", "out", ".", "allclose", "(", "batch_out", ")", "\n", "batch_out", "=", "coder", ".", "decode", "(", "\n", "batch_rois", ",", "batch_deltas", ",", "max_shape", "=", "[", "(", "32", ",", "32", ")", ",", "(", "32", ",", "32", ")", "]", ")", "[", "0", "]", "\n", "assert", "out", ".", "allclose", "(", "batch_out", ")", "\n", "\n", "# test max_shape is not equal to batch", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "coder", ".", "decode", "(", "\n", "batch_rois", ",", "batch_deltas", ",", "max_shape", "=", "[", "(", "32", ",", "32", ")", ",", "(", "32", ",", "32", ")", ",", "(", "32", ",", "32", ")", "]", ")", "\n", "\n", "", "rois", "=", "torch", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "deltas", "=", "torch", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "out", "=", "coder", ".", "decode", "(", "rois", ",", "deltas", ",", "max_shape", "=", "(", "32", ",", "32", ")", ")", "\n", "assert", "rois", ".", "shape", "==", "out", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_utils.test_coder.test_tblr_bbox_coder": [[62, 95], ["mmdet.core.bbox.coder.TBLRBBoxCoder", "torch.Tensor", "torch.Tensor", "torch.Tensor", "mmdet.core.bbox.coder.TBLRBBoxCoder.decode", "torch.Tensor.allclose", "mmdet.core.bbox.coder.TBLRBBoxCoder.decode", "torch.Tensor.allclose", "torch.zeros.unsqueeze().repeat", "torch.zeros.unsqueeze().repeat", "coder.decode.allclose", "coder.decode.allclose", "torch.zeros", "torch.zeros", "mmdet.core.bbox.coder.TBLRBBoxCoder.decode", "mmdet.core.bbox.coder.TBLRBBoxCoder.decode", "mmdet.core.bbox.coder.TBLRBBoxCoder.decode", "pytest.raises", "mmdet.core.bbox.coder.TBLRBBoxCoder.decode", "torch.Tensor", "torch.zeros.unsqueeze", "torch.zeros.unsqueeze"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode"], ["", "def", "test_tblr_bbox_coder", "(", ")", ":", "\n", "    ", "coder", "=", "TBLRBBoxCoder", "(", "normalizer", "=", "15.", ")", "\n", "\n", "rois", "=", "torch", ".", "Tensor", "(", "[", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "5.", ",", "5.", ",", "5.", ",", "5.", "]", "]", ")", "\n", "deltas", "=", "torch", ".", "Tensor", "(", "[", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "[", "1.", ",", "1.", ",", "1.", ",", "1.", "]", ",", "\n", "[", "0.", ",", "0.", ",", "2.", ",", "-", "1.", "]", ",", "[", "0.7", ",", "-", "1.9", ",", "-", "0.5", ",", "0.3", "]", "]", ")", "\n", "expected_decode_bboxes", "=", "torch", ".", "Tensor", "(", "[", "[", "0.5000", ",", "0.5000", ",", "0.5000", ",", "0.5000", "]", ",", "\n", "[", "0.0000", ",", "0.0000", ",", "12.0000", ",", "13.0000", "]", ",", "\n", "[", "0.0000", ",", "0.5000", ",", "0.0000", ",", "0.5000", "]", ",", "\n", "[", "5.0000", ",", "5.0000", ",", "5.0000", ",", "5.0000", "]", "]", ")", "\n", "\n", "out", "=", "coder", ".", "decode", "(", "rois", ",", "deltas", ",", "max_shape", "=", "(", "13", ",", "12", ")", ")", "\n", "assert", "expected_decode_bboxes", ".", "allclose", "(", "out", ")", "\n", "out", "=", "coder", ".", "decode", "(", "rois", ",", "deltas", ",", "max_shape", "=", "torch", ".", "Tensor", "(", "(", "13", ",", "12", ")", ")", ")", "\n", "assert", "expected_decode_bboxes", ".", "allclose", "(", "out", ")", "\n", "\n", "batch_rois", "=", "rois", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ",", "1", ")", "\n", "batch_deltas", "=", "deltas", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ",", "1", ")", "\n", "batch_out", "=", "coder", ".", "decode", "(", "batch_rois", ",", "batch_deltas", ",", "max_shape", "=", "(", "13", ",", "12", ")", ")", "[", "0", "]", "\n", "assert", "out", ".", "allclose", "(", "batch_out", ")", "\n", "batch_out", "=", "coder", ".", "decode", "(", "\n", "batch_rois", ",", "batch_deltas", ",", "max_shape", "=", "[", "(", "13", ",", "12", ")", ",", "(", "13", ",", "12", ")", "]", ")", "[", "0", "]", "\n", "assert", "out", ".", "allclose", "(", "batch_out", ")", "\n", "\n", "# test max_shape is not equal to batch", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "coder", ".", "decode", "(", "batch_rois", ",", "batch_deltas", ",", "max_shape", "=", "[", "(", "13", ",", "12", ")", "]", ")", "\n", "\n", "", "rois", "=", "torch", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "deltas", "=", "torch", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "out", "=", "coder", ".", "decode", "(", "rois", ",", "deltas", ",", "max_shape", "=", "(", "32", ",", "32", ")", ")", "\n", "assert", "rois", ".", "shape", "==", "out", ".", "shape", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.test_roi_extractor.test_groie": [[7, 114], ["dict", "mmdet.models.roi_heads.roi_extractors.GenericRoIExtractor", "torch.tensor", "mmdet.models.roi_heads.roi_extractors.GenericRoIExtractor.", "dict", "mmdet.models.roi_heads.roi_extractors.GenericRoIExtractor", "torch.tensor", "mmdet.models.roi_heads.roi_extractors.GenericRoIExtractor.", "dict", "mmdet.models.roi_heads.roi_extractors.GenericRoIExtractor", "torch.tensor", "mmdet.models.roi_heads.roi_extractors.GenericRoIExtractor.", "dict", "mmdet.models.roi_heads.roi_extractors.GenericRoIExtractor", "torch.tensor", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.Size", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.Size", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.Size", "pytest.raises", "dict", "mmdet.models.roi_heads.roi_extractors.GenericRoIExtractor", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "pytest.raises", "mmdet.models.roi_heads.roi_extractors.GenericRoIExtractor.", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["None"], ["def", "test_groie", "(", ")", ":", "\n", "# test with pre/post", "\n", "    ", "cfg", "=", "dict", "(", "\n", "roi_layer", "=", "dict", "(", "type", "=", "'RoIAlign'", ",", "output_size", "=", "7", ",", "sampling_ratio", "=", "2", ")", ",", "\n", "out_channels", "=", "256", ",", "\n", "featmap_strides", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ",", "\n", "pre_cfg", "=", "dict", "(", "\n", "type", "=", "'ConvModule'", ",", "\n", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "256", ",", "\n", "kernel_size", "=", "5", ",", "\n", "padding", "=", "2", ",", "\n", "inplace", "=", "False", ",", "\n", ")", ",", "\n", "post_cfg", "=", "dict", "(", "\n", "type", "=", "'ConvModule'", ",", "\n", "in_channels", "=", "256", ",", "\n", "out_channels", "=", "256", ",", "\n", "kernel_size", "=", "5", ",", "\n", "padding", "=", "2", ",", "\n", "inplace", "=", "False", ")", ")", "\n", "\n", "groie", "=", "GenericRoIExtractor", "(", "**", "cfg", ")", "\n", "\n", "feats", "=", "(", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "200", ",", "336", ")", ")", ",", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "100", ",", "168", ")", ")", ",", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "50", ",", "84", ")", ")", ",", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "25", ",", "42", ")", ")", ",", "\n", ")", "\n", "\n", "rois", "=", "torch", ".", "tensor", "(", "[", "[", "0.0000", ",", "587.8285", ",", "52.1405", ",", "886.2484", ",", "341.5644", "]", "]", ")", "\n", "\n", "res", "=", "groie", "(", "feats", ",", "rois", ")", "\n", "assert", "res", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "7", ",", "7", "]", ")", "\n", "\n", "# test w.o. pre/post", "\n", "cfg", "=", "dict", "(", "\n", "roi_layer", "=", "dict", "(", "type", "=", "'RoIAlign'", ",", "output_size", "=", "7", ",", "sampling_ratio", "=", "2", ")", ",", "\n", "out_channels", "=", "256", ",", "\n", "featmap_strides", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ")", "\n", "\n", "groie", "=", "GenericRoIExtractor", "(", "**", "cfg", ")", "\n", "\n", "feats", "=", "(", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "200", ",", "336", ")", ")", ",", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "100", ",", "168", ")", ")", ",", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "50", ",", "84", ")", ")", ",", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "25", ",", "42", ")", ")", ",", "\n", ")", "\n", "\n", "rois", "=", "torch", ".", "tensor", "(", "[", "[", "0.0000", ",", "587.8285", ",", "52.1405", ",", "886.2484", ",", "341.5644", "]", "]", ")", "\n", "\n", "res", "=", "groie", "(", "feats", ",", "rois", ")", "\n", "assert", "res", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "256", ",", "7", ",", "7", "]", ")", "\n", "\n", "# test w.o. pre/post concat", "\n", "cfg", "=", "dict", "(", "\n", "aggregation", "=", "'concat'", ",", "\n", "roi_layer", "=", "dict", "(", "type", "=", "'RoIAlign'", ",", "output_size", "=", "7", ",", "sampling_ratio", "=", "2", ")", ",", "\n", "out_channels", "=", "256", "*", "4", ",", "\n", "featmap_strides", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ")", "\n", "\n", "groie", "=", "GenericRoIExtractor", "(", "**", "cfg", ")", "\n", "\n", "feats", "=", "(", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "200", ",", "336", ")", ")", ",", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "100", ",", "168", ")", ")", ",", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "50", ",", "84", ")", ")", ",", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "25", ",", "42", ")", ")", ",", "\n", ")", "\n", "\n", "rois", "=", "torch", ".", "tensor", "(", "[", "[", "0.0000", ",", "587.8285", ",", "52.1405", ",", "886.2484", ",", "341.5644", "]", "]", ")", "\n", "\n", "res", "=", "groie", "(", "feats", ",", "rois", ")", "\n", "assert", "res", ".", "shape", "==", "torch", ".", "Size", "(", "[", "1", ",", "1024", ",", "7", ",", "7", "]", ")", "\n", "\n", "# test not supported aggregate method", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "cfg", "=", "dict", "(", "\n", "aggregation", "=", "'not support'", ",", "\n", "roi_layer", "=", "dict", "(", "type", "=", "'RoIAlign'", ",", "output_size", "=", "7", ",", "sampling_ratio", "=", "2", ")", ",", "\n", "out_channels", "=", "1024", ",", "\n", "featmap_strides", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ")", "\n", "_", "=", "GenericRoIExtractor", "(", "**", "cfg", ")", "\n", "\n", "# test concat channels number", "\n", "", "cfg", "=", "dict", "(", "\n", "aggregation", "=", "'concat'", ",", "\n", "roi_layer", "=", "dict", "(", "type", "=", "'RoIAlign'", ",", "output_size", "=", "7", ",", "sampling_ratio", "=", "2", ")", ",", "\n", "out_channels", "=", "256", "*", "5", ",", "# 256*5 != 256*4", "\n", "featmap_strides", "=", "[", "4", ",", "8", ",", "16", ",", "32", "]", ")", "\n", "\n", "groie", "=", "GenericRoIExtractor", "(", "**", "cfg", ")", "\n", "\n", "feats", "=", "(", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "200", ",", "336", ")", ")", ",", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "100", ",", "168", ")", ")", ",", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "50", ",", "84", ")", ")", ",", "\n", "torch", ".", "rand", "(", "(", "1", ",", "256", ",", "25", ",", "42", ")", ")", ",", "\n", ")", "\n", "\n", "rois", "=", "torch", ".", "tensor", "(", "[", "[", "0.0000", ",", "587.8285", ",", "52.1405", ",", "886.2484", ",", "341.5644", "]", "]", ")", "\n", "\n", "# out_channels does not sum of feat channels", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "_", "=", "groie", "(", "feats", ",", "rois", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.test_mask_head.test_mask_head_loss": [[8, 70], ["mmdet.models.roi_heads.mask_heads.FCNMaskHead", "utils._dummy_bbox_sampling", "np.random.randint", "mmcv.Config", "sum", "torch.rand", "mmdet.models.roi_heads.mask_heads.FCNMaskHead.forward", "mmdet.models.roi_heads.mask_heads.FCNMaskHead.get_targets", "torch.cat", "mmdet.models.roi_heads.mask_heads.FCNMaskHead.loss", "sum", "mmdet.models.roi_heads.mask_heads.MaskIoUHead", "mmdet.models.roi_heads.mask_heads.MaskIoUHead.", "mmdet.models.roi_heads.mask_heads.MaskIoUHead.get_targets", "mmdet.models.roi_heads.mask_heads.MaskIoUHead.loss", "loss_mask_iou[].sum", "torch.Tensor", "torch.Tensor", "torch.LongTensor", "BitmapMasks", "dict", "sum.item", "loss_mask_iou[].sum.item", "len", "range", "range", "test_mask_head..size", "mask_iou_head.size"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.utils._dummy_bbox_sampling", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_mask_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Test mask head loss when mask target is empty.\"\"\"", "\n", "self", "=", "FCNMaskHead", "(", "\n", "num_convs", "=", "1", ",", "\n", "roi_feat_size", "=", "6", ",", "\n", "in_channels", "=", "8", ",", "\n", "conv_out_channels", "=", "8", ",", "\n", "num_classes", "=", "8", ")", "\n", "\n", "# Dummy proposals", "\n", "proposal_list", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "228.6326", ",", "153.8874", "]", "]", ")", ",", "\n", "]", "\n", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "sampling_results", "=", "_dummy_bbox_sampling", "(", "proposal_list", ",", "gt_bboxes", ",", "\n", "gt_labels", ")", "\n", "\n", "# create dummy mask", "\n", "import", "numpy", "as", "np", "\n", "from", "mmdet", ".", "core", "import", "BitmapMasks", "\n", "dummy_mask", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "(", "1", ",", "160", ",", "240", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "gt_masks", "=", "[", "BitmapMasks", "(", "dummy_mask", ",", "160", ",", "240", ")", "]", "\n", "\n", "# create dummy train_cfg", "\n", "train_cfg", "=", "mmcv", ".", "Config", "(", "dict", "(", "mask_size", "=", "12", ",", "mask_thr_binary", "=", "0.5", ")", ")", "\n", "\n", "# Create dummy features \"extracted\" for each sampled bbox", "\n", "num_sampled", "=", "sum", "(", "len", "(", "res", ".", "bboxes", ")", "for", "res", "in", "sampling_results", ")", "\n", "dummy_feats", "=", "torch", ".", "rand", "(", "num_sampled", ",", "8", ",", "6", ",", "6", ")", "\n", "\n", "mask_pred", "=", "self", ".", "forward", "(", "dummy_feats", ")", "\n", "mask_targets", "=", "self", ".", "get_targets", "(", "sampling_results", ",", "gt_masks", ",", "train_cfg", ")", "\n", "pos_labels", "=", "torch", ".", "cat", "(", "[", "res", ".", "pos_gt_labels", "for", "res", "in", "sampling_results", "]", ")", "\n", "loss_mask", "=", "self", ".", "loss", "(", "mask_pred", ",", "mask_targets", ",", "pos_labels", ")", "\n", "\n", "onegt_mask_loss", "=", "sum", "(", "loss_mask", "[", "'loss_mask'", "]", ")", "\n", "assert", "onegt_mask_loss", ".", "item", "(", ")", ">", "0", ",", "'mask loss should be non-zero'", "\n", "\n", "# test mask_iou_head", "\n", "mask_iou_head", "=", "MaskIoUHead", "(", "\n", "num_convs", "=", "1", ",", "\n", "num_fcs", "=", "1", ",", "\n", "roi_feat_size", "=", "6", ",", "\n", "in_channels", "=", "8", ",", "\n", "conv_out_channels", "=", "8", ",", "\n", "fc_out_channels", "=", "8", ",", "\n", "num_classes", "=", "8", ")", "\n", "\n", "pos_mask_pred", "=", "mask_pred", "[", "range", "(", "mask_pred", ".", "size", "(", "0", ")", ")", ",", "pos_labels", "]", "\n", "mask_iou_pred", "=", "mask_iou_head", "(", "dummy_feats", ",", "pos_mask_pred", ")", "\n", "pos_mask_iou_pred", "=", "mask_iou_pred", "[", "range", "(", "mask_iou_pred", ".", "size", "(", "0", ")", ")", ",", "pos_labels", "]", "\n", "\n", "mask_iou_targets", "=", "mask_iou_head", ".", "get_targets", "(", "sampling_results", ",", "gt_masks", ",", "\n", "pos_mask_pred", ",", "mask_targets", ",", "\n", "train_cfg", ")", "\n", "loss_mask_iou", "=", "mask_iou_head", ".", "loss", "(", "pos_mask_iou_pred", ",", "mask_iou_targets", ")", "\n", "onegt_mask_iou_loss", "=", "loss_mask_iou", "[", "'loss_mask_iou'", "]", ".", "sum", "(", ")", "\n", "assert", "onegt_mask_iou_loss", ".", "item", "(", ")", ">=", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.test_sabl_bbox_head.test_sabl_bbox_head_loss": [[9, 77], ["mmdet.models.roi_heads.bbox_heads.SABLHead", "mmcv.Config", "utils._dummy_bbox_sampling", "mmdet.models.roi_heads.bbox_heads.SABLHead.get_targets", "sum", "mmdet.core.bbox2roi", "torch.rand", "mmdet.models.roi_heads.bbox_heads.SABLHead.forward", "mmdet.models.roi_heads.bbox_heads.SABLHead.loss", "utils._dummy_bbox_sampling", "mmdet.core.bbox2roi", "mmdet.models.roi_heads.bbox_heads.SABLHead.get_targets", "sum", "torch.rand", "mmdet.models.roi_heads.bbox_heads.SABLHead.forward", "mmdet.models.roi_heads.bbox_heads.SABLHead.loss", "torch.Tensor", "dict", "torch.empty", "torch.LongTensor", "test_sabl_bbox_head..get", "test_sabl_bbox_head..get", "test_sabl_bbox_head..get", "torch.Tensor", "torch.LongTensor", "test_sabl_bbox_head..get", "test_sabl_bbox_head..get", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.utils._dummy_bbox_sampling", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.utils._dummy_bbox_sampling", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_sabl_bbox_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests bbox head loss when truth is empty and non-empty.\"\"\"", "\n", "self", "=", "SABLHead", "(", "\n", "num_classes", "=", "4", ",", "\n", "cls_in_channels", "=", "3", ",", "\n", "reg_in_channels", "=", "3", ",", "\n", "cls_out_channels", "=", "3", ",", "\n", "reg_offset_out_channels", "=", "3", ",", "\n", "reg_cls_out_channels", "=", "3", ",", "\n", "roi_feat_size", "=", "7", ")", "\n", "\n", "# Dummy proposals", "\n", "proposal_list", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "228.6326", ",", "153.8874", "]", "]", ")", ",", "\n", "]", "\n", "\n", "target_cfg", "=", "mmcv", ".", "Config", "(", "dict", "(", "pos_weight", "=", "1", ")", ")", "\n", "\n", "# Test bbox loss when truth is empty", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "\n", "sampling_results", "=", "_dummy_bbox_sampling", "(", "proposal_list", ",", "gt_bboxes", ",", "\n", "gt_labels", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "get_targets", "(", "sampling_results", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "target_cfg", ")", "\n", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "=", "bbox_targets", "\n", "\n", "# Create dummy features \"extracted\" for each sampled bbox", "\n", "num_sampled", "=", "sum", "(", "len", "(", "res", ".", "bboxes", ")", "for", "res", "in", "sampling_results", ")", "\n", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "dummy_feats", "=", "torch", ".", "rand", "(", "num_sampled", ",", "3", ",", "7", ",", "7", ")", "\n", "cls_scores", ",", "bbox_preds", "=", "self", ".", "forward", "(", "dummy_feats", ")", "\n", "\n", "losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "rois", ",", "labels", ",", "label_weights", ",", "\n", "bbox_targets", ",", "bbox_weights", ")", "\n", "assert", "losses", ".", "get", "(", "'loss_cls'", ",", "0", ")", ">", "0", ",", "'cls-loss should be non-zero'", "\n", "assert", "losses", ".", "get", "(", "'loss_bbox_cls'", ",", "\n", "0", ")", "==", "0", ",", "'empty gt bbox-cls-loss should be zero'", "\n", "assert", "losses", ".", "get", "(", "'loss_bbox_reg'", ",", "\n", "0", ")", "==", "0", ",", "'empty gt bbox-reg-loss should be zero'", "\n", "\n", "# Test bbox loss when truth is non-empty", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "\n", "sampling_results", "=", "_dummy_bbox_sampling", "(", "proposal_list", ",", "gt_bboxes", ",", "\n", "gt_labels", ")", "\n", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "get_targets", "(", "sampling_results", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "target_cfg", ")", "\n", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "=", "bbox_targets", "\n", "\n", "# Create dummy features \"extracted\" for each sampled bbox", "\n", "num_sampled", "=", "sum", "(", "len", "(", "res", ".", "bboxes", ")", "for", "res", "in", "sampling_results", ")", "\n", "dummy_feats", "=", "torch", ".", "rand", "(", "num_sampled", ",", "3", ",", "7", ",", "7", ")", "\n", "cls_scores", ",", "bbox_preds", "=", "self", ".", "forward", "(", "dummy_feats", ")", "\n", "\n", "losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "rois", ",", "labels", ",", "label_weights", ",", "\n", "bbox_targets", ",", "bbox_weights", ")", "\n", "assert", "losses", ".", "get", "(", "'loss_bbox_cls'", ",", "\n", "0", ")", ">", "0", ",", "'empty gt bbox-cls-loss should be zero'", "\n", "assert", "losses", ".", "get", "(", "'loss_bbox_reg'", ",", "\n", "0", ")", ">", "0", ",", "'empty gt bbox-reg-loss should be zero'", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.test_bbox_head.test_bbox_head_loss": [[10, 66], ["mmdet.models.roi_heads.bbox_heads.BBoxHead", "mmcv.Config", "utils._dummy_bbox_sampling", "mmdet.models.roi_heads.bbox_heads.BBoxHead.get_targets", "sum", "mmdet.core.bbox2roi", "torch.rand", "mmdet.models.roi_heads.bbox_heads.BBoxHead.forward", "mmdet.models.roi_heads.bbox_heads.BBoxHead.loss", "utils._dummy_bbox_sampling", "mmdet.core.bbox2roi", "mmdet.models.roi_heads.bbox_heads.BBoxHead.get_targets", "sum", "torch.rand", "mmdet.models.roi_heads.bbox_heads.BBoxHead.forward", "mmdet.models.roi_heads.bbox_heads.BBoxHead.loss", "torch.Tensor", "dict", "torch.empty", "torch.LongTensor", "test_bbox_head..get", "test_bbox_head..get", "torch.Tensor", "torch.LongTensor", "test_bbox_head..get", "test_bbox_head..get", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.utils._dummy_bbox_sampling", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.utils._dummy_bbox_sampling", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_bbox_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests bbox head loss when truth is empty and non-empty.\"\"\"", "\n", "self", "=", "BBoxHead", "(", "in_channels", "=", "8", ",", "roi_feat_size", "=", "3", ")", "\n", "\n", "# Dummy proposals", "\n", "proposal_list", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "228.6326", ",", "153.8874", "]", "]", ")", ",", "\n", "]", "\n", "\n", "target_cfg", "=", "mmcv", ".", "Config", "(", "dict", "(", "pos_weight", "=", "1", ")", ")", "\n", "\n", "# Test bbox loss when truth is empty", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "\n", "sampling_results", "=", "_dummy_bbox_sampling", "(", "proposal_list", ",", "gt_bboxes", ",", "\n", "gt_labels", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "get_targets", "(", "sampling_results", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "target_cfg", ")", "\n", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "=", "bbox_targets", "\n", "\n", "# Create dummy features \"extracted\" for each sampled bbox", "\n", "num_sampled", "=", "sum", "(", "len", "(", "res", ".", "bboxes", ")", "for", "res", "in", "sampling_results", ")", "\n", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "dummy_feats", "=", "torch", ".", "rand", "(", "num_sampled", ",", "8", "*", "3", "*", "3", ")", "\n", "cls_scores", ",", "bbox_preds", "=", "self", ".", "forward", "(", "dummy_feats", ")", "\n", "\n", "losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "rois", ",", "labels", ",", "label_weights", ",", "\n", "bbox_targets", ",", "bbox_weights", ")", "\n", "assert", "losses", ".", "get", "(", "'loss_cls'", ",", "0", ")", ">", "0", ",", "'cls-loss should be non-zero'", "\n", "assert", "losses", ".", "get", "(", "'loss_bbox'", ",", "0", ")", "==", "0", ",", "'empty gt loss should be zero'", "\n", "\n", "# Test bbox loss when truth is non-empty", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "\n", "sampling_results", "=", "_dummy_bbox_sampling", "(", "proposal_list", ",", "gt_bboxes", ",", "\n", "gt_labels", ")", "\n", "rois", "=", "bbox2roi", "(", "[", "res", ".", "bboxes", "for", "res", "in", "sampling_results", "]", ")", "\n", "\n", "bbox_targets", "=", "self", ".", "get_targets", "(", "sampling_results", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "target_cfg", ")", "\n", "labels", ",", "label_weights", ",", "bbox_targets", ",", "bbox_weights", "=", "bbox_targets", "\n", "\n", "# Create dummy features \"extracted\" for each sampled bbox", "\n", "num_sampled", "=", "sum", "(", "len", "(", "res", ".", "bboxes", ")", "for", "res", "in", "sampling_results", ")", "\n", "dummy_feats", "=", "torch", ".", "rand", "(", "num_sampled", ",", "8", "*", "3", "*", "3", ")", "\n", "cls_scores", ",", "bbox_preds", "=", "self", ".", "forward", "(", "dummy_feats", ")", "\n", "\n", "losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "rois", ",", "labels", ",", "label_weights", ",", "\n", "bbox_targets", ",", "bbox_weights", ")", "\n", "assert", "losses", ".", "get", "(", "'loss_cls'", ",", "0", ")", ">", "0", ",", "'cls-loss should be non-zero'", "\n", "assert", "losses", ".", "get", "(", "'loss_bbox'", ",", "0", ")", ">", "0", ",", "'box-loss should be non-zero'", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.test_bbox_head.test_bbox_head_get_bboxes": [[68, 91], ["pytest.mark.parametrize", "mmdet.models.roi_heads.bbox_heads.BBoxHead", "torch.rand", "torch.rand", "torch.rand", "mmdet.models.roi_heads.bbox_heads.BBoxHead.get_bboxes", "torch.rand", "torch.rand", "torch.rand", "mmdet.models.roi_heads.bbox_heads.BBoxHead.get_bboxes", "len", "len", "len", "len"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "[", "'num_sample'", ",", "'num_batch'", "]", ",", "[", "[", "2", ",", "2", "]", ",", "[", "0", ",", "2", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "def", "test_bbox_head_get_bboxes", "(", "num_sample", ",", "num_batch", ")", ":", "\n", "    ", "self", "=", "BBoxHead", "(", "reg_class_agnostic", "=", "True", ")", "\n", "\n", "num_class", "=", "6", "\n", "rois", "=", "torch", ".", "rand", "(", "(", "num_sample", ",", "5", ")", ")", "\n", "cls_score", "=", "torch", ".", "rand", "(", "(", "num_sample", ",", "num_class", ")", ")", "\n", "bbox_pred", "=", "torch", ".", "rand", "(", "(", "num_sample", ",", "4", ")", ")", "\n", "scale_factor", "=", "2.0", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "get_bboxes", "(", "\n", "rois", ",", "cls_score", ",", "bbox_pred", ",", "None", ",", "scale_factor", ",", "rescale", "=", "True", ")", "\n", "if", "num_sample", "==", "0", ":", "\n", "        ", "assert", "len", "(", "det_bboxes", ")", "==", "0", "and", "len", "(", "det_labels", ")", "==", "0", "\n", "", "else", ":", "\n", "        ", "assert", "det_bboxes", ".", "shape", "==", "bbox_pred", ".", "shape", "\n", "assert", "det_labels", ".", "shape", "==", "cls_score", ".", "shape", "\n", "\n", "", "rois", "=", "torch", ".", "rand", "(", "(", "num_batch", ",", "num_sample", ",", "5", ")", ")", "\n", "cls_score", "=", "torch", ".", "rand", "(", "(", "num_batch", ",", "num_sample", ",", "num_class", ")", ")", "\n", "bbox_pred", "=", "torch", ".", "rand", "(", "(", "num_batch", ",", "num_sample", ",", "4", ")", ")", "\n", "det_bboxes", ",", "det_labels", "=", "self", ".", "get_bboxes", "(", "\n", "rois", ",", "cls_score", ",", "bbox_pred", ",", "None", ",", "scale_factor", ",", "rescale", "=", "True", ")", "\n", "assert", "len", "(", "det_bboxes", ")", "==", "num_batch", "and", "len", "(", "det_labels", ")", "==", "num_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.test_bbox_head.test_refine_boxes": [[93, 214], ["mmdet.models.roi_heads.bbox_heads.BBoxHead", "print", "test_bbox_head._demodata_refine_boxes", "mmdet.models.roi_heads.bbox_heads.BBoxHead.refine_bboxes", "all", "len", "sum", "print", "map"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.test_bbox_head._demodata_refine_boxes"], ["", "def", "test_refine_boxes", "(", ")", ":", "\n", "    ", "\"\"\"Mirrors the doctest in\n    ``mmdet.models.bbox_heads.bbox_head.BBoxHead.refine_boxes`` but checks for\n    multiple values of n_roi / n_img.\"\"\"", "\n", "self", "=", "BBoxHead", "(", "reg_class_agnostic", "=", "True", ")", "\n", "\n", "test_settings", "=", "[", "\n", "\n", "# Corner case: less rois than images", "\n", "{", "\n", "'n_roi'", ":", "2", ",", "\n", "'n_img'", ":", "4", ",", "\n", "'rng'", ":", "34285940", "\n", "}", ",", "\n", "\n", "# Corner case: no images", "\n", "{", "\n", "'n_roi'", ":", "0", ",", "\n", "'n_img'", ":", "0", ",", "\n", "'rng'", ":", "52925222", "\n", "}", ",", "\n", "\n", "# Corner cases: few images / rois", "\n", "{", "\n", "'n_roi'", ":", "1", ",", "\n", "'n_img'", ":", "1", ",", "\n", "'rng'", ":", "1200281", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "2", ",", "\n", "'n_img'", ":", "1", ",", "\n", "'rng'", ":", "1200282", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "2", ",", "\n", "'n_img'", ":", "2", ",", "\n", "'rng'", ":", "1200283", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "1", ",", "\n", "'n_img'", ":", "2", ",", "\n", "'rng'", ":", "1200284", "\n", "}", ",", "\n", "\n", "# Corner case: no rois few images", "\n", "{", "\n", "'n_roi'", ":", "0", ",", "\n", "'n_img'", ":", "1", ",", "\n", "'rng'", ":", "23955860", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "0", ",", "\n", "'n_img'", ":", "2", ",", "\n", "'rng'", ":", "25830516", "\n", "}", ",", "\n", "\n", "# Corner case: no rois many images", "\n", "{", "\n", "'n_roi'", ":", "0", ",", "\n", "'n_img'", ":", "10", ",", "\n", "'rng'", ":", "671346", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "0", ",", "\n", "'n_img'", ":", "20", ",", "\n", "'rng'", ":", "699807", "\n", "}", ",", "\n", "\n", "# Corner case: cal_similarity num rois and images", "\n", "{", "\n", "'n_roi'", ":", "20", ",", "\n", "'n_img'", ":", "20", ",", "\n", "'rng'", ":", "1200238", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "10", ",", "\n", "'n_img'", ":", "20", ",", "\n", "'rng'", ":", "1200238", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "5", ",", "\n", "'n_img'", ":", "5", ",", "\n", "'rng'", ":", "1200238", "\n", "}", ",", "\n", "\n", "# ----------------------------------", "\n", "# Common case: more rois than images", "\n", "{", "\n", "'n_roi'", ":", "100", ",", "\n", "'n_img'", ":", "1", ",", "\n", "'rng'", ":", "337156", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "150", ",", "\n", "'n_img'", ":", "2", ",", "\n", "'rng'", ":", "275898", "\n", "}", ",", "\n", "{", "\n", "'n_roi'", ":", "500", ",", "\n", "'n_img'", ":", "5", ",", "\n", "'rng'", ":", "4903221", "\n", "}", ",", "\n", "]", "\n", "\n", "for", "demokw", "in", "test_settings", ":", "\n", "        ", "try", ":", "\n", "            ", "n_roi", "=", "demokw", "[", "'n_roi'", "]", "\n", "n_img", "=", "demokw", "[", "'n_img'", "]", "\n", "rng", "=", "demokw", "[", "'rng'", "]", "\n", "\n", "print", "(", "f'Test refine_boxes case: {demokw!r}'", ")", "\n", "tup", "=", "_demodata_refine_boxes", "(", "n_roi", ",", "n_img", ",", "rng", "=", "rng", ")", "\n", "rois", ",", "labels", ",", "bbox_preds", ",", "pos_is_gts", ",", "img_metas", "=", "tup", "\n", "bboxes_list", "=", "self", ".", "refine_bboxes", "(", "rois", ",", "labels", ",", "bbox_preds", ",", "\n", "pos_is_gts", ",", "img_metas", ")", "\n", "assert", "len", "(", "bboxes_list", ")", "==", "n_img", "\n", "assert", "sum", "(", "map", "(", "len", ",", "bboxes_list", ")", ")", "<=", "n_roi", "\n", "assert", "all", "(", "b", ".", "shape", "[", "1", "]", "==", "4", "for", "b", "in", "bboxes_list", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "print", "(", "f'Test failed with demokw={demokw!r}'", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.test_bbox_head._demodata_refine_boxes": [[216, 256], ["ensure_rng", "random_boxes", "torch.cat", "ensure_rng.randint", "torch.from_numpy().long", "random_boxes", "kwarray.group_items", "torch.empty", "torch.empty", "ensure_rng.randint", "torch.from_numpy", "torch.from_numpy.numpy", "sum", "ensure_rng.randint().astype", "pytest.skip", "range", "img_ids[].float", "torch.from_numpy", "kwarray.group_items.get", "range", "torch.from_numpy().sort", "torch.from_numpy().long.numpy", "ensure_rng.randint", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.util_random.ensure_rng", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.demodata.random_boxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.demodata.random_boxes"], ["", "", "", "def", "_demodata_refine_boxes", "(", "n_roi", ",", "n_img", ",", "rng", "=", "0", ")", ":", "\n", "    ", "\"\"\"Create random test data for the\n    ``mmdet.models.bbox_heads.bbox_head.BBoxHead.refine_boxes`` method.\"\"\"", "\n", "import", "numpy", "as", "np", "\n", "from", "mmdet", ".", "core", ".", "bbox", ".", "demodata", "import", "random_boxes", "\n", "from", "mmdet", ".", "core", ".", "bbox", ".", "demodata", "import", "ensure_rng", "\n", "try", ":", "\n", "        ", "import", "kwarray", "\n", "", "except", "ImportError", ":", "\n", "        ", "import", "pytest", "\n", "pytest", ".", "skip", "(", "'kwarray is required for this test'", ")", "\n", "", "scale", "=", "512", "\n", "rng", "=", "ensure_rng", "(", "rng", ")", "\n", "img_metas", "=", "[", "{", "'img_shape'", ":", "(", "scale", ",", "scale", ")", "}", "for", "_", "in", "range", "(", "n_img", ")", "]", "\n", "# Create rois in the expected format", "\n", "roi_boxes", "=", "random_boxes", "(", "n_roi", ",", "scale", "=", "scale", ",", "rng", "=", "rng", ")", "\n", "if", "n_img", "==", "0", ":", "\n", "        ", "assert", "n_roi", "==", "0", ",", "'cannot have any rois if there are no images'", "\n", "img_ids", "=", "torch", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "roi_boxes", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "img_ids", "=", "rng", ".", "randint", "(", "0", ",", "n_img", ",", "(", "n_roi", ",", ")", ")", "\n", "img_ids", "=", "torch", ".", "from_numpy", "(", "img_ids", ")", "\n", "", "rois", "=", "torch", ".", "cat", "(", "[", "img_ids", "[", ":", ",", "None", "]", ".", "float", "(", ")", ",", "roi_boxes", "]", ",", "dim", "=", "1", ")", "\n", "# Create other args", "\n", "labels", "=", "rng", ".", "randint", "(", "0", ",", "2", ",", "(", "n_roi", ",", ")", ")", "\n", "labels", "=", "torch", ".", "from_numpy", "(", "labels", ")", ".", "long", "(", ")", "\n", "bbox_preds", "=", "random_boxes", "(", "n_roi", ",", "scale", "=", "scale", ",", "rng", "=", "rng", ")", "\n", "# For each image, pretend random positive boxes are gts", "\n", "is_label_pos", "=", "(", "labels", ".", "numpy", "(", ")", ">", "0", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "lbl_per_img", "=", "kwarray", ".", "group_items", "(", "is_label_pos", ",", "img_ids", ".", "numpy", "(", ")", ")", "\n", "pos_per_img", "=", "[", "sum", "(", "lbl_per_img", ".", "get", "(", "gid", ",", "[", "]", ")", ")", "for", "gid", "in", "range", "(", "n_img", ")", "]", "\n", "# randomly generate with numpy then sort with torch", "\n", "_pos_is_gts", "=", "[", "\n", "rng", ".", "randint", "(", "0", ",", "2", ",", "(", "npos", ",", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "for", "npos", "in", "pos_per_img", "\n", "]", "\n", "pos_is_gts", "=", "[", "\n", "torch", ".", "from_numpy", "(", "p", ")", ".", "sort", "(", "descending", "=", "True", ")", "[", "0", "]", "for", "p", "in", "_pos_is_gts", "\n", "]", "\n", "return", "rois", ",", "labels", ",", "bbox_preds", ",", "pos_is_gts", ",", "img_metas", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_roi_heads.utils._dummy_bbox_sampling": [[6, 38], ["torch.rand", "dict", "dict", "mmdet.core.build_assigner", "mmdet.core.build_sampler", "range", "mmdet.core.build_assigner.assign", "mmdet.core.build_sampler.sample", "sampling_results.append", "range"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.builder.build_assigner", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.builder.build_sampler", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler.sample"], ["import", "onnxruntime", "as", "ort", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "ort_custom_op_path", "=", "''", "\n", "try", ":", "\n", "    ", "from", "mmcv", ".", "ops", "import", "get_onnxruntime_op_path", "\n", "ort_custom_op_path", "=", "get_onnxruntime_op_path", "(", ")", "\n", "", "except", "(", "ImportError", ",", "ModuleNotFoundError", ")", ":", "\n", "    ", "warnings", ".", "warn", "(", "'If input model has custom op from mmcv, \\\n        you may have to build mmcv with ONNXRuntime from source.'", ")", "\n", "\n", "\n", "", "class", "WrapFunction", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Wrap the function to be tested for torch.onnx.export tracking.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "wrapped_function", ")", ":", "\n", "        ", "super", "(", "WrapFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "wrapped_function", "=", "wrapped_function", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "wrapped_function", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "", "def", "ort_validate", "(", "model", ",", "feats", ",", "onnx_io", "=", "'tmp.onnx'", ")", ":", "\n", "    ", "\"\"\"Validate the output of the onnxruntime backend is the same as the output\n    generated by torch.\n\n    Args:\n        model (nn.Module): the model to be verified\n        feats (list(torch.Tensor) | torch.Tensor): the input of model\n        onnx_io (str): the name of onnx output file\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_corner_head.test_corner_head_loss": [[7, 93], ["mmdet.models.dense_heads.CornerHead", "mmdet.models.dense_heads.CornerHead.forward", "mmdet.models.dense_heads.CornerHead.loss", "sum", "sum", "sum", "sum", "mmdet.models.dense_heads.CornerHead.loss", "sum", "sum", "sum", "sum", "zip", "mmdet.models.dense_heads.CornerHead.loss", "sum", "sum", "sum", "sum", "torch.rand", "torch.empty", "torch.LongTensor", "sum.item", "sum.item", "sum.item", "sum.item", "torch.Tensor", "torch.LongTensor", "sum.item", "sum.item", "sum.item", "sum.item", "torch.Tensor", "torch.LongTensor", "sum.item", "sum.item", "sum.item", "sum.item", "range"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_corner_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests corner head loss when truth is empty and non-empty.\"\"\"", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "\n", "self", "=", "CornerHead", "(", "num_classes", "=", "4", ",", "in_channels", "=", "1", ")", "\n", "\n", "# Corner head expects a multiple levels of features per image", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "s", "//", "4", ",", "s", "//", "4", ")", "for", "_", "in", "range", "(", "self", ".", "num_feat_levels", ")", "\n", "]", "\n", "tl_heats", ",", "br_heats", ",", "tl_embs", ",", "br_embs", ",", "tl_offs", ",", "br_offs", "=", "self", ".", "forward", "(", "feat", ")", "\n", "\n", "# Test that empty ground truth encourages the network to predict background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "\n", "gt_bboxes_ignore", "=", "None", "\n", "empty_gt_losses", "=", "self", ".", "loss", "(", "tl_heats", ",", "br_heats", ",", "tl_embs", ",", "br_embs", ",", "tl_offs", ",", "\n", "br_offs", ",", "gt_bboxes", ",", "gt_labels", ",", "img_metas", ",", "\n", "gt_bboxes_ignore", ")", "\n", "empty_det_loss", "=", "sum", "(", "empty_gt_losses", "[", "'det_loss'", "]", ")", "\n", "empty_push_loss", "=", "sum", "(", "empty_gt_losses", "[", "'push_loss'", "]", ")", "\n", "empty_pull_loss", "=", "sum", "(", "empty_gt_losses", "[", "'pull_loss'", "]", ")", "\n", "empty_off_loss", "=", "sum", "(", "empty_gt_losses", "[", "'off_loss'", "]", ")", "\n", "assert", "empty_det_loss", ".", "item", "(", ")", ">", "0", ",", "'det loss should be non-zero'", "\n", "assert", "empty_push_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no push loss when there are no true boxes'", ")", "\n", "assert", "empty_pull_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no pull loss when there are no true boxes'", ")", "\n", "assert", "empty_off_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "\n", "# When truth is non-empty then both cls and box loss should be nonzero for", "\n", "# random inputs", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "one_gt_losses", "=", "self", ".", "loss", "(", "tl_heats", ",", "br_heats", ",", "tl_embs", ",", "br_embs", ",", "tl_offs", ",", "\n", "br_offs", ",", "gt_bboxes", ",", "gt_labels", ",", "img_metas", ",", "\n", "gt_bboxes_ignore", ")", "\n", "onegt_det_loss", "=", "sum", "(", "one_gt_losses", "[", "'det_loss'", "]", ")", "\n", "onegt_push_loss", "=", "sum", "(", "one_gt_losses", "[", "'push_loss'", "]", ")", "\n", "onegt_pull_loss", "=", "sum", "(", "one_gt_losses", "[", "'pull_loss'", "]", ")", "\n", "onegt_off_loss", "=", "sum", "(", "one_gt_losses", "[", "'off_loss'", "]", ")", "\n", "assert", "onegt_det_loss", ".", "item", "(", ")", ">", "0", ",", "'det loss should be non-zero'", "\n", "assert", "onegt_push_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no push loss when there are only one true box'", ")", "\n", "assert", "onegt_pull_loss", ".", "item", "(", ")", ">", "0", ",", "'pull loss should be non-zero'", "\n", "assert", "onegt_off_loss", ".", "item", "(", ")", ">", "0", ",", "'off loss should be non-zero'", "\n", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", ",", "\n", "[", "123.6667", ",", "123.8757", ",", "138.6326", ",", "251.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", ",", "3", "]", ")", "]", "\n", "\n", "# equalize the corners' embedding value of different objects to make the", "\n", "# push_loss larger than 0", "\n", "gt_bboxes_ind", "=", "(", "gt_bboxes", "[", "0", "]", "//", "4", ")", ".", "int", "(", ")", ".", "tolist", "(", ")", "\n", "for", "tl_emb_feat", ",", "br_emb_feat", "in", "zip", "(", "tl_embs", ",", "br_embs", ")", ":", "\n", "        ", "tl_emb_feat", "[", ":", ",", ":", ",", "gt_bboxes_ind", "[", "0", "]", "[", "1", "]", ",", "\n", "gt_bboxes_ind", "[", "0", "]", "[", "0", "]", "]", "=", "tl_emb_feat", "[", ":", ",", ":", ",", "\n", "gt_bboxes_ind", "[", "1", "]", "[", "1", "]", ",", "\n", "gt_bboxes_ind", "[", "1", "]", "[", "0", "]", "]", "\n", "br_emb_feat", "[", ":", ",", ":", ",", "gt_bboxes_ind", "[", "0", "]", "[", "3", "]", ",", "\n", "gt_bboxes_ind", "[", "0", "]", "[", "2", "]", "]", "=", "br_emb_feat", "[", ":", ",", ":", ",", "\n", "gt_bboxes_ind", "[", "1", "]", "[", "3", "]", ",", "\n", "gt_bboxes_ind", "[", "1", "]", "[", "2", "]", "]", "\n", "\n", "", "two_gt_losses", "=", "self", ".", "loss", "(", "tl_heats", ",", "br_heats", ",", "tl_embs", ",", "br_embs", ",", "tl_offs", ",", "\n", "br_offs", ",", "gt_bboxes", ",", "gt_labels", ",", "img_metas", ",", "\n", "gt_bboxes_ignore", ")", "\n", "twogt_det_loss", "=", "sum", "(", "two_gt_losses", "[", "'det_loss'", "]", ")", "\n", "twogt_push_loss", "=", "sum", "(", "two_gt_losses", "[", "'push_loss'", "]", ")", "\n", "twogt_pull_loss", "=", "sum", "(", "two_gt_losses", "[", "'pull_loss'", "]", ")", "\n", "twogt_off_loss", "=", "sum", "(", "two_gt_losses", "[", "'off_loss'", "]", ")", "\n", "assert", "twogt_det_loss", ".", "item", "(", ")", ">", "0", ",", "'det loss should be non-zero'", "\n", "assert", "twogt_push_loss", ".", "item", "(", ")", ">", "0", ",", "'push loss should be non-zero'", "\n", "assert", "twogt_pull_loss", ".", "item", "(", ")", ">", "0", ",", "'pull loss should be non-zero'", "\n", "assert", "twogt_off_loss", ".", "item", "(", ")", ">", "0", ",", "'off loss should be non-zero'", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_corner_head.test_corner_head_encode_and_decode_heatmap": [[95, 167], ["mmdet.models.dense_heads.CornerHead", "mmdet.models.dense_heads.CornerHead.get_targets", "torch.zeros", "torch.zeros", "mmdet.models.dense_heads.CornerHead.decode_heatmap", "batch_bboxes.view", "batch_scores.view", "batch_clses.view", "scores[].view.argsort", "bboxes[].view", "scores[].view", "clses[].view", "valid_bboxes.max", "mmdet.core.evaluation.bbox_overlaps.bbox_overlaps", "torch.Tensor", "torch.LongTensor", "torch.rand", "valid_labels.to", "gt_labels[].to", "offset_bboxes.numpy", "offset_gtbboxes.numpy", "range", "torch.where", "torch.where"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.iou2d_calculator.bbox_overlaps", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to"], ["", "def", "test_corner_head_encode_and_decode_heatmap", "(", ")", ":", "\n", "    ", "\"\"\"Tests corner head generating and decoding the heatmap.\"\"\"", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'border'", ":", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "}", "]", "\n", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "10", ",", "20", ",", "200", ",", "240", "]", ",", "[", "40", ",", "50", ",", "100", ",", "200", "]", ",", "\n", "[", "10", ",", "20", ",", "200", ",", "240", "]", "]", ")", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "1", ",", "1", ",", "2", "]", ")", "]", "\n", "\n", "self", "=", "CornerHead", "(", "num_classes", "=", "4", ",", "in_channels", "=", "1", ",", "corner_emb_channels", "=", "1", ")", "\n", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "s", "//", "4", ",", "s", "//", "4", ")", "for", "_", "in", "range", "(", "self", ".", "num_feat_levels", ")", "\n", "]", "\n", "\n", "targets", "=", "self", ".", "get_targets", "(", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "feat", "[", "0", "]", ".", "shape", ",", "\n", "img_metas", "[", "0", "]", "[", "'pad_shape'", "]", ",", "\n", "with_corner_emb", "=", "self", ".", "with_corner_emb", ")", "\n", "\n", "gt_tl_heatmap", "=", "targets", "[", "'topleft_heatmap'", "]", "\n", "gt_br_heatmap", "=", "targets", "[", "'bottomright_heatmap'", "]", "\n", "gt_tl_offset", "=", "targets", "[", "'topleft_offset'", "]", "\n", "gt_br_offset", "=", "targets", "[", "'bottomright_offset'", "]", "\n", "embedding", "=", "targets", "[", "'corner_embedding'", "]", "\n", "[", "top", ",", "left", "]", ",", "[", "bottom", ",", "right", "]", "=", "embedding", "[", "0", "]", "[", "0", "]", "\n", "gt_tl_embedding_heatmap", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "s", "//", "4", ",", "s", "//", "4", "]", ")", "\n", "gt_br_embedding_heatmap", "=", "torch", ".", "zeros", "(", "[", "1", ",", "1", ",", "s", "//", "4", ",", "s", "//", "4", "]", ")", "\n", "gt_tl_embedding_heatmap", "[", "0", ",", "0", ",", "top", ",", "left", "]", "=", "1", "\n", "gt_br_embedding_heatmap", "[", "0", ",", "0", ",", "bottom", ",", "right", "]", "=", "1", "\n", "\n", "batch_bboxes", ",", "batch_scores", ",", "batch_clses", "=", "self", ".", "decode_heatmap", "(", "\n", "tl_heat", "=", "gt_tl_heatmap", ",", "\n", "br_heat", "=", "gt_br_heatmap", ",", "\n", "tl_off", "=", "gt_tl_offset", ",", "\n", "br_off", "=", "gt_br_offset", ",", "\n", "tl_emb", "=", "gt_tl_embedding_heatmap", ",", "\n", "br_emb", "=", "gt_br_embedding_heatmap", ",", "\n", "img_meta", "=", "img_metas", "[", "0", "]", ",", "\n", "k", "=", "100", ",", "\n", "kernel", "=", "3", ",", "\n", "distance_threshold", "=", "0.5", ")", "\n", "\n", "bboxes", "=", "batch_bboxes", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "scores", "=", "batch_scores", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "clses", "=", "batch_clses", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "idx", "=", "scores", ".", "argsort", "(", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "bboxes", "=", "bboxes", "[", "idx", "]", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "scores", "=", "scores", "[", "idx", "]", ".", "view", "(", "-", "1", ")", "\n", "clses", "=", "clses", "[", "idx", "]", ".", "view", "(", "-", "1", ")", "\n", "\n", "valid_bboxes", "=", "bboxes", "[", "torch", ".", "where", "(", "scores", ">", "0.05", ")", "]", "\n", "valid_labels", "=", "clses", "[", "torch", ".", "where", "(", "scores", ">", "0.05", ")", "]", "\n", "max_coordinate", "=", "valid_bboxes", ".", "max", "(", ")", "\n", "offsets", "=", "valid_labels", ".", "to", "(", "valid_bboxes", ")", "*", "(", "max_coordinate", "+", "1", ")", "\n", "gt_offsets", "=", "gt_labels", "[", "0", "]", ".", "to", "(", "gt_bboxes", "[", "0", "]", ")", "*", "(", "max_coordinate", "+", "1", ")", "\n", "\n", "offset_bboxes", "=", "valid_bboxes", "+", "offsets", "[", ":", ",", "None", "]", "\n", "offset_gtbboxes", "=", "gt_bboxes", "[", "0", "]", "+", "gt_offsets", "[", ":", ",", "None", "]", "\n", "\n", "iou_matrix", "=", "bbox_overlaps", "(", "offset_bboxes", ".", "numpy", "(", ")", ",", "offset_gtbboxes", ".", "numpy", "(", ")", ")", "\n", "assert", "(", "iou_matrix", "==", "1", ")", ".", "sum", "(", ")", "==", "3", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_ld_head.test_ld_head_loss": [[7, 121], ["mmcv.Config", "mmdet.models.dense_heads.LDHead", "mmdet.models.dense_heads.GFLHead", "mmdet.models.dense_heads.LDHead.forward", "mmdet.models.dense_heads.LDHead.loss", "sum", "sum", "sum", "mmdet.models.dense_heads.LDHead.loss", "sum", "sum", "mmdet.models.dense_heads.LDHead.loss", "sum", "sum", "mmdet.models.dense_heads.LDHead.loss", "sum", "sum", "dict", "torch.rand", "mmdet.models.dense_heads.GFLHead.forward", "torch.empty", "torch.LongTensor", "sum.item", "sum.item", "sum.item", "torch.Tensor", "torch.LongTensor", "sum.item", "sum.item", "sum.item", "sum.item", "torch.randn", "sum.item", "sum.item", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_ld_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests vfnet head loss when truth is empty and non-empty.\"\"\"", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "train_cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "assigner", "=", "dict", "(", "type", "=", "'ATSSAssigner'", ",", "topk", "=", "9", ",", "ignore_iof_thr", "=", "0.1", ")", ",", "\n", "allowed_border", "=", "-", "1", ",", "\n", "pos_weight", "=", "-", "1", ",", "\n", "debug", "=", "False", ")", ")", "\n", "\n", "self", "=", "LDHead", "(", "\n", "num_classes", "=", "4", ",", "\n", "in_channels", "=", "1", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "loss_ld", "=", "dict", "(", "type", "=", "'KnowledgeDistillationKLDivLoss'", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'QualityFocalLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "beta", "=", "2.0", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "type", "=", "'GIoULoss'", ",", "loss_weight", "=", "2.0", ")", ",", "\n", "anchor_generator", "=", "dict", "(", "\n", "type", "=", "'AnchorGenerator'", ",", "\n", "ratios", "=", "[", "1.0", "]", ",", "\n", "octave_base_scale", "=", "8", ",", "\n", "scales_per_octave", "=", "1", ",", "\n", "strides", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", "]", ")", ")", "\n", "\n", "teacher_model", "=", "GFLHead", "(", "\n", "num_classes", "=", "4", ",", "\n", "in_channels", "=", "1", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'QualityFocalLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "beta", "=", "2.0", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "type", "=", "'GIoULoss'", ",", "loss_weight", "=", "2.0", ")", ",", "\n", "anchor_generator", "=", "dict", "(", "\n", "type", "=", "'AnchorGenerator'", ",", "\n", "ratios", "=", "[", "1.0", "]", ",", "\n", "octave_base_scale", "=", "8", ",", "\n", "scales_per_octave", "=", "1", ",", "\n", "strides", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", "]", ")", ")", "\n", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "s", "//", "feat_size", ",", "s", "//", "feat_size", ")", "\n", "for", "feat_size", "in", "[", "4", ",", "8", ",", "16", ",", "32", ",", "64", "]", "\n", "]", "\n", "cls_scores", ",", "bbox_preds", "=", "self", ".", "forward", "(", "feat", ")", "\n", "rand_soft_target", "=", "teacher_model", ".", "forward", "(", "feat", ")", "[", "1", "]", "\n", "\n", "# Test that empty ground truth encourages the network to predict", "\n", "# background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "gt_bboxes_ignore", "=", "None", "\n", "\n", "empty_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "rand_soft_target", ",", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "# When there is no truth, the cls loss should be nonzero, ld loss should", "\n", "# be non-negative but there should be no box loss.", "\n", "empty_cls_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "empty_box_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "empty_ld_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_ld'", "]", ")", "\n", "assert", "empty_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "empty_box_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "assert", "empty_ld_loss", ".", "item", "(", ")", ">=", "0", ",", "'ld loss should be non-negative'", "\n", "\n", "# When truth is non-empty then both cls and box loss should be nonzero", "\n", "# for random inputs", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "one_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "rand_soft_target", ",", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "onegt_cls_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "onegt_box_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "\n", "assert", "onegt_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "onegt_box_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss should be non-zero'", "\n", "\n", "gt_bboxes_ignore", "=", "gt_bboxes", "\n", "\n", "# When truth is non-empty but ignored then the cls loss should be nonzero,", "\n", "# but there should be no box loss.", "\n", "ignore_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "rand_soft_target", ",", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "ignore_cls_loss", "=", "sum", "(", "ignore_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "ignore_box_loss", "=", "sum", "(", "ignore_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "\n", "assert", "ignore_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "ignore_box_loss", ".", "item", "(", ")", "==", "0", ",", "'gt bbox ignored loss should be zero'", "\n", "\n", "# When truth is non-empty and not ignored then both cls and box loss should", "\n", "# be nonzero for random inputs", "\n", "gt_bboxes_ignore", "=", "[", "torch", ".", "randn", "(", "1", ",", "4", ")", "]", "\n", "\n", "not_ignore_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "\n", "gt_labels", ",", "rand_soft_target", ",", "img_metas", ",", "\n", "gt_bboxes_ignore", ")", "\n", "not_ignore_cls_loss", "=", "sum", "(", "not_ignore_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "not_ignore_box_loss", "=", "sum", "(", "not_ignore_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "\n", "assert", "not_ignore_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "not_ignore_box_loss", ".", "item", "(", "\n", ")", ">", "0", ",", "'gt bbox not ignored loss should be non-zero'", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_fsaf_head.test_fsaf_head_loss": [[7, 82], ["dict", "mmcv.Config", "mmdet.models.dense_heads.FSAFHead", "torch.cuda.is_available", "dict", "mmdet.models.dense_heads.FSAFHead.cuda", "mmdet.models.dense_heads.FSAFHead.forward", "mmdet.models.dense_heads.FSAFHead.loss", "sum", "sum", "mmdet.models.dense_heads.FSAFHead.loss", "sum", "sum", "dict", "dict", "dict", "dict", "torch.rand().cuda", "torch.Tensor().cuda", "torch.LongTensor().cuda", "sum.item", "sum.item", "torch.empty().cuda", "torch.LongTensor().cuda", "sum.item", "sum.item", "dict", "range", "torch.rand", "len", "torch.Tensor", "torch.LongTensor", "torch.empty", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_fsaf_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests anchor head loss when truth is empty and non-empty.\"\"\"", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "\n", "cfg", "=", "dict", "(", "\n", "reg_decoded_bbox", "=", "True", ",", "\n", "anchor_generator", "=", "dict", "(", "\n", "type", "=", "'AnchorGenerator'", ",", "\n", "octave_base_scale", "=", "1", ",", "\n", "scales_per_octave", "=", "1", ",", "\n", "ratios", "=", "[", "1.0", "]", ",", "\n", "strides", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", "]", ")", ",", "\n", "bbox_coder", "=", "dict", "(", "type", "=", "'TBLRBBoxCoder'", ",", "normalizer", "=", "4.0", ")", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'FocalLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "gamma", "=", "2.0", ",", "\n", "alpha", "=", "0.25", ",", "\n", "loss_weight", "=", "1.0", ",", "\n", "reduction", "=", "'none'", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "\n", "type", "=", "'IoULoss'", ",", "eps", "=", "1e-6", ",", "loss_weight", "=", "1.0", ",", "reduction", "=", "'none'", ")", ")", "\n", "\n", "train_cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "assigner", "=", "dict", "(", "\n", "type", "=", "'CenterRegionAssigner'", ",", "\n", "pos_scale", "=", "0.2", ",", "\n", "neg_scale", "=", "0.2", ",", "\n", "min_pos_iof", "=", "0.01", ")", ",", "\n", "allowed_border", "=", "-", "1", ",", "\n", "pos_weight", "=", "-", "1", ",", "\n", "debug", "=", "False", ")", ")", "\n", "head", "=", "FSAFHead", "(", "num_classes", "=", "4", ",", "in_channels", "=", "1", ",", "train_cfg", "=", "train_cfg", ",", "**", "cfg", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ".", "cuda", "(", ")", "\n", "# FSAF head expects a multiple levels of features per image", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "head", ".", "anchor_generator", ".", "strides", ")", ")", "\n", "]", "\n", "cls_scores", ",", "bbox_preds", "=", "head", ".", "forward", "(", "feat", ")", "\n", "gt_bboxes_ignore", "=", "None", "\n", "\n", "# When truth is non-empty then both cls and box loss should be nonzero", "\n", "#  for random inputs", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ".", "cuda", "(", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", "]", "\n", "one_gt_losses", "=", "head", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "onegt_cls_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "onegt_box_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "assert", "onegt_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "onegt_box_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss should be non-zero'", "\n", "\n", "# Test that empty ground truth encourages the network to predict bkg", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", ".", "cuda", "(", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", ".", "cuda", "(", ")", "]", "\n", "\n", "empty_gt_losses", "=", "head", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "\n", "gt_labels", ",", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "# When there is no truth, the cls loss should be nonzero but there", "\n", "# should be no box loss.", "\n", "empty_cls_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "empty_box_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "assert", "empty_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "empty_box_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_vfnet_head.test_vfnet_head_loss": [[7, 63], ["mmcv.Config", "mmdet.models.dense_heads.VFNetHead", "torch.cuda.is_available", "dict", "mmdet.models.dense_heads.VFNetHead.cuda", "mmdet.models.dense_heads.VFNetHead.forward", "mmdet.models.dense_heads.VFNetHead.loss", "mmdet.models.dense_heads.VFNetHead.loss", "dict", "torch.rand().cuda", "torch.empty().cuda", "torch.LongTensor().cuda", "empty_cls_loss.item", "empty_box_loss.item", "torch.Tensor().cuda", "torch.LongTensor().cuda", "onegt_cls_loss.item", "onegt_box_loss.item", "dict", "torch.rand", "torch.empty", "torch.LongTensor", "torch.Tensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_vfnet_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests vfnet head loss when truth is empty and non-empty.\"\"\"", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "train_cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "assigner", "=", "dict", "(", "type", "=", "'ATSSAssigner'", ",", "topk", "=", "9", ")", ",", "\n", "allowed_border", "=", "-", "1", ",", "\n", "pos_weight", "=", "-", "1", ",", "\n", "debug", "=", "False", ")", ")", "\n", "# since Focal Loss is not supported on CPU", "\n", "self", "=", "VFNetHead", "(", "\n", "num_classes", "=", "4", ",", "\n", "in_channels", "=", "1", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "loss_cls", "=", "dict", "(", "type", "=", "'VarifocalLoss'", ",", "use_sigmoid", "=", "True", ",", "loss_weight", "=", "1.0", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "self", ".", "cuda", "(", ")", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "s", "//", "feat_size", ",", "s", "//", "feat_size", ")", ".", "cuda", "(", ")", "\n", "for", "feat_size", "in", "[", "4", ",", "8", ",", "16", ",", "32", ",", "64", "]", "\n", "]", "\n", "cls_scores", ",", "bbox_preds", ",", "bbox_preds_refine", "=", "self", ".", "forward", "(", "feat", ")", "\n", "# Test that empty ground truth encourages the network to predict", "\n", "# background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", ".", "cuda", "(", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", ".", "cuda", "(", ")", "]", "\n", "gt_bboxes_ignore", "=", "None", "\n", "empty_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "bbox_preds_refine", ",", "\n", "gt_bboxes", ",", "gt_labels", ",", "img_metas", ",", "\n", "gt_bboxes_ignore", ")", "\n", "# When there is no truth, the cls loss should be nonzero but there", "\n", "# should be no box loss.", "\n", "empty_cls_loss", "=", "empty_gt_losses", "[", "'loss_cls'", "]", "\n", "empty_box_loss", "=", "empty_gt_losses", "[", "'loss_bbox'", "]", "\n", "assert", "empty_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "empty_box_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "\n", "# When truth is non-empty then both cls and box loss should be nonzero", "\n", "# for random inputs", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ".", "cuda", "(", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", "]", "\n", "one_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "bbox_preds_refine", ",", "\n", "gt_bboxes", ",", "gt_labels", ",", "img_metas", ",", "\n", "gt_bboxes_ignore", ")", "\n", "onegt_cls_loss", "=", "one_gt_losses", "[", "'loss_cls'", "]", "\n", "onegt_box_loss", "=", "one_gt_losses", "[", "'loss_bbox'", "]", "\n", "assert", "onegt_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "onegt_box_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss should be non-zero'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_transformer_head.test_transformer_head_loss": [[6, 84], ["dict", "dict", "dict", "mmdet.models.dense_heads.TransformerHead", "mmdet.models.dense_heads.TransformerHead.init_weights", "mmdet.models.dense_heads.TransformerHead.forward", "mmdet.models.dense_heads.TransformerHead.loss", "test_transformer_head..items", "mmdet.models.dense_heads.TransformerHead.loss", "test_transformer_head..values", "mmdet.models.dense_heads.TransformerHead.forward_train", "mmdet.models.dense_heads.TransformerHead.get_bboxes", "torch.rand", "torch.empty", "torch.LongTensor", "torch.Tensor", "torch.LongTensor", "dict", "dict", "dict", "loss.item", "loss.item", "dict", "dict", "dict", "loss.item", "loss.item"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_transformer_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests transformer head loss when truth is empty and non-empty.\"\"\"", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'batch_input_shape'", ":", "(", "s", ",", "s", ")", "\n", "}", "]", "\n", "train_cfg", "=", "dict", "(", "\n", "assigner", "=", "dict", "(", "\n", "type", "=", "'HungarianAssigner'", ",", "\n", "cls_cost", "=", "dict", "(", "type", "=", "'ClassificationCost'", ",", "weight", "=", "1.0", ")", ",", "\n", "reg_cost", "=", "dict", "(", "type", "=", "'BBoxL1Cost'", ",", "weight", "=", "5.0", ")", ",", "\n", "iou_cost", "=", "dict", "(", "type", "=", "'IoUCost'", ",", "iou_mode", "=", "'giou'", ",", "weight", "=", "2.0", ")", ")", ")", "\n", "transformer_cfg", "=", "dict", "(", "\n", "type", "=", "'Transformer'", ",", "\n", "embed_dims", "=", "4", ",", "\n", "num_heads", "=", "1", ",", "\n", "num_encoder_layers", "=", "1", ",", "\n", "num_decoder_layers", "=", "1", ",", "\n", "feedforward_channels", "=", "1", ",", "\n", "dropout", "=", "0.1", ",", "\n", "act_cfg", "=", "dict", "(", "type", "=", "'ReLU'", ",", "inplace", "=", "True", ")", ",", "\n", "norm_cfg", "=", "dict", "(", "type", "=", "'LN'", ")", ",", "\n", "num_fcs", "=", "2", ",", "\n", "pre_norm", "=", "False", ",", "\n", "return_intermediate_dec", "=", "True", ")", "\n", "positional_encoding_cfg", "=", "dict", "(", "\n", "type", "=", "'SinePositionalEncoding'", ",", "num_feats", "=", "2", ",", "normalize", "=", "True", ")", "\n", "self", "=", "TransformerHead", "(", "\n", "num_classes", "=", "4", ",", "\n", "in_channels", "=", "1", ",", "\n", "num_fcs", "=", "2", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "transformer", "=", "transformer_cfg", ",", "\n", "positional_encoding", "=", "positional_encoding_cfg", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "s", "//", "feat_size", ",", "s", "//", "feat_size", ")", "\n", "for", "feat_size", "in", "[", "4", ",", "8", ",", "16", ",", "32", ",", "64", "]", "\n", "]", "\n", "cls_scores", ",", "bbox_preds", "=", "self", ".", "forward", "(", "feat", ",", "img_metas", ")", "\n", "# Test that empty ground truth encourages the network to predict background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "gt_bboxes_ignore", "=", "None", "\n", "empty_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "# When there is no truth, the cls loss should be nonzero but there should", "\n", "# be no box loss.", "\n", "for", "key", ",", "loss", "in", "empty_gt_losses", ".", "items", "(", ")", ":", "\n", "        ", "if", "'cls'", "in", "key", ":", "\n", "            ", "assert", "loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "", "elif", "'bbox'", "in", "key", ":", "\n", "            ", "assert", "loss", ".", "item", "(", "\n", ")", "==", "0", ",", "'there should be no box loss when there are no true boxes'", "\n", "", "elif", "'iou'", "in", "key", ":", "\n", "            ", "assert", "loss", ".", "item", "(", "\n", ")", "==", "0", ",", "'there should be no iou loss when there are no true boxes'", "\n", "\n", "# When truth is non-empty then both cls and box loss should be nonzero for", "\n", "# random inputs", "\n", "", "", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "one_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "for", "loss", "in", "one_gt_losses", ".", "values", "(", ")", ":", "\n", "        ", "assert", "loss", ".", "item", "(", "\n", ")", ">", "0", ",", "'cls loss, or box loss, or iou loss should be non-zero'", "\n", "\n", "# test forward_train", "\n", "", "self", ".", "forward_train", "(", "feat", ",", "img_metas", ",", "gt_bboxes", ",", "gt_labels", ")", "\n", "\n", "# test inference mode", "\n", "self", ".", "get_bboxes", "(", "cls_scores", ",", "bbox_preds", ",", "img_metas", ",", "rescale", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_fcos_head.test_fcos_head_loss": [[7, 64], ["mmcv.Config", "mmdet.models.dense_heads.FCOSHead", "mmdet.models.dense_heads.FCOSHead.forward", "mmdet.models.dense_heads.FCOSHead.loss", "mmdet.models.dense_heads.FCOSHead.loss", "dict", "torch.rand", "torch.empty", "torch.LongTensor", "empty_cls_loss.item", "empty_box_loss.item", "torch.Tensor", "torch.LongTensor", "onegt_cls_loss.item", "onegt_box_loss.item", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_fcos_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests fcos head loss when truth is empty and non-empty.\"\"\"", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "train_cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "assigner", "=", "dict", "(", "\n", "type", "=", "'MaxIoUAssigner'", ",", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.4", ",", "\n", "min_pos_iou", "=", "0", ",", "\n", "ignore_iof_thr", "=", "-", "1", ")", ",", "\n", "allowed_border", "=", "-", "1", ",", "\n", "pos_weight", "=", "-", "1", ",", "\n", "debug", "=", "False", ")", ")", "\n", "# since Focal Loss is not supported on CPU", "\n", "self", "=", "FCOSHead", "(", "\n", "num_classes", "=", "4", ",", "\n", "in_channels", "=", "1", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "True", ",", "loss_weight", "=", "1.0", ")", ")", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "s", "//", "feat_size", ",", "s", "//", "feat_size", ")", "\n", "for", "feat_size", "in", "[", "4", ",", "8", ",", "16", ",", "32", ",", "64", "]", "\n", "]", "\n", "cls_scores", ",", "bbox_preds", ",", "centerness", "=", "self", ".", "forward", "(", "feat", ")", "\n", "# Test that empty ground truth encourages the network to predict background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "gt_bboxes_ignore", "=", "None", "\n", "empty_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "centerness", ",", "gt_bboxes", ",", "\n", "gt_labels", ",", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "# When there is no truth, the cls loss should be nonzero but there should", "\n", "# be no box loss.", "\n", "empty_cls_loss", "=", "empty_gt_losses", "[", "'loss_cls'", "]", "\n", "empty_box_loss", "=", "empty_gt_losses", "[", "'loss_bbox'", "]", "\n", "assert", "empty_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "empty_box_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "\n", "# When truth is non-empty then both cls and box loss should be nonzero for", "\n", "# random inputs", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "one_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "centerness", ",", "gt_bboxes", ",", "\n", "gt_labels", ",", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "onegt_cls_loss", "=", "one_gt_losses", "[", "'loss_cls'", "]", "\n", "onegt_box_loss", "=", "one_gt_losses", "[", "'loss_bbox'", "]", "\n", "assert", "onegt_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "onegt_box_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss should be non-zero'", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_anchor_head.test_anchor_head_loss": [[7, 70], ["mmcv.Config", "mmdet.models.dense_heads.AnchorHead", "mmdet.models.dense_heads.AnchorHead.forward", "mmdet.models.dense_heads.AnchorHead.loss", "sum", "sum", "mmdet.models.dense_heads.AnchorHead.loss", "sum", "sum", "dict", "torch.rand", "torch.empty", "torch.LongTensor", "sum.item", "sum.item", "torch.Tensor", "torch.LongTensor", "sum.item", "sum.item", "range", "dict", "dict", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_anchor_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests anchor head loss when truth is empty and non-empty.\"\"\"", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "\n", "cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "assigner", "=", "dict", "(", "\n", "type", "=", "'MaxIoUAssigner'", ",", "\n", "pos_iou_thr", "=", "0.7", ",", "\n", "neg_iou_thr", "=", "0.3", ",", "\n", "min_pos_iou", "=", "0.3", ",", "\n", "match_low_quality", "=", "True", ",", "\n", "ignore_iof_thr", "=", "-", "1", ")", ",", "\n", "sampler", "=", "dict", "(", "\n", "type", "=", "'RandomSampler'", ",", "\n", "num", "=", "256", ",", "\n", "pos_fraction", "=", "0.5", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "False", ")", ",", "\n", "allowed_border", "=", "0", ",", "\n", "pos_weight", "=", "-", "1", ",", "\n", "debug", "=", "False", ")", ")", "\n", "self", "=", "AnchorHead", "(", "num_classes", "=", "4", ",", "in_channels", "=", "1", ",", "train_cfg", "=", "cfg", ")", "\n", "\n", "# Anchor head expects a multiple levels of features per image", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "anchor_generator", ".", "strides", ")", ")", "\n", "]", "\n", "cls_scores", ",", "bbox_preds", "=", "self", ".", "forward", "(", "feat", ")", "\n", "\n", "# Test that empty ground truth encourages the network to predict background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "\n", "gt_bboxes_ignore", "=", "None", "\n", "empty_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "# When there is no truth, the cls loss should be nonzero but there should", "\n", "# be no box loss.", "\n", "empty_cls_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "empty_box_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "assert", "empty_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "empty_box_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "\n", "# When truth is non-empty then both cls and box loss should be nonzero for", "\n", "# random inputs", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "one_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "onegt_cls_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "onegt_box_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "assert", "onegt_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "onegt_box_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss should be non-zero'", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_ga_anchor_head.test_ga_anchor_head_loss": [[7, 91], ["mmcv.Config", "mmdet.models.dense_heads.GuidedAnchorHead", "torch.cuda.is_available", "dict", "mmdet.models.dense_heads.GuidedAnchorHead.cuda", "mmdet.models.dense_heads.GuidedAnchorHead.forward", "mmdet.models.dense_heads.GuidedAnchorHead.loss", "sum", "sum", "mmdet.models.dense_heads.GuidedAnchorHead.loss", "sum", "sum", "torch.rand().cuda", "torch.empty().cuda", "torch.LongTensor().cuda", "sum.item", "sum.item", "torch.Tensor().cuda", "torch.LongTensor().cuda", "sum.item", "sum.item", "dict", "dict", "dict", "dict", "range", "torch.rand", "len", "torch.empty", "torch.LongTensor", "torch.Tensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_ga_anchor_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests anchor head loss when truth is empty and non-empty.\"\"\"", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "\n", "cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "assigner", "=", "dict", "(", "\n", "type", "=", "'MaxIoUAssigner'", ",", "\n", "pos_iou_thr", "=", "0.7", ",", "\n", "neg_iou_thr", "=", "0.3", ",", "\n", "min_pos_iou", "=", "0.3", ",", "\n", "match_low_quality", "=", "True", ",", "\n", "ignore_iof_thr", "=", "-", "1", ")", ",", "\n", "sampler", "=", "dict", "(", "\n", "type", "=", "'RandomSampler'", ",", "\n", "num", "=", "256", ",", "\n", "pos_fraction", "=", "0.5", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "False", ")", ",", "\n", "ga_assigner", "=", "dict", "(", "\n", "type", "=", "'ApproxMaxIoUAssigner'", ",", "\n", "pos_iou_thr", "=", "0.7", ",", "\n", "neg_iou_thr", "=", "0.3", ",", "\n", "min_pos_iou", "=", "0.3", ",", "\n", "ignore_iof_thr", "=", "-", "1", ")", ",", "\n", "ga_sampler", "=", "dict", "(", "\n", "type", "=", "'RandomSampler'", ",", "\n", "num", "=", "256", ",", "\n", "pos_fraction", "=", "0.5", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "False", ")", ",", "\n", "allowed_border", "=", "-", "1", ",", "\n", "center_ratio", "=", "0.2", ",", "\n", "ignore_ratio", "=", "0.5", ",", "\n", "pos_weight", "=", "-", "1", ",", "\n", "debug", "=", "False", ")", ")", "\n", "head", "=", "GuidedAnchorHead", "(", "num_classes", "=", "4", ",", "in_channels", "=", "4", ",", "train_cfg", "=", "cfg", ")", "\n", "\n", "# Anchor head expects a multiple levels of features per image", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ".", "cuda", "(", ")", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "4", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "head", ".", "approx_anchor_generator", ".", "base_anchors", ")", ")", "\n", "]", "\n", "cls_scores", ",", "bbox_preds", ",", "shape_preds", ",", "loc_preds", "=", "head", ".", "forward", "(", "feat", ")", "\n", "\n", "# Test that empty ground truth encourages the network to predict", "\n", "# background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", ".", "cuda", "(", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", ".", "cuda", "(", ")", "]", "\n", "\n", "gt_bboxes_ignore", "=", "None", "\n", "\n", "empty_gt_losses", "=", "head", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "shape_preds", ",", "\n", "loc_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "img_metas", ",", "\n", "gt_bboxes_ignore", ")", "\n", "\n", "# When there is no truth, the cls loss should be nonzero but there", "\n", "# should be no box loss.", "\n", "empty_cls_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "empty_box_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "assert", "empty_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "empty_box_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "\n", "# When truth is non-empty then both cls and box loss should be nonzero", "\n", "# for random inputs", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ".", "cuda", "(", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", "]", "\n", "one_gt_losses", "=", "head", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "shape_preds", ",", "\n", "loc_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "img_metas", ",", "\n", "gt_bboxes_ignore", ")", "\n", "onegt_cls_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "onegt_box_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "assert", "onegt_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "onegt_box_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss should be non-zero'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_yolact_head.test_yolact_head_loss": [[7, 137], ["mmcv.Config", "mmdet.models.dense_heads.YOLACTHead", "mmdet.models.dense_heads.YOLACTSegmHead", "mmdet.models.dense_heads.YOLACTProtonet", "mmdet.models.dense_heads.YOLACTHead.forward", "mmdet.models.dense_heads.YOLACTHead.loss", "sum", "sum", "mmdet.models.dense_heads.YOLACTSegmHead.", "mmdet.models.dense_heads.YOLACTSegmHead.loss", "mmdet.models.dense_heads.YOLACTProtonet.", "mmdet.models.dense_heads.YOLACTProtonet.loss", "sum", "sum", "mmdet.models.dense_heads.YOLACTHead.loss", "sum", "sum", "mmdet.models.dense_heads.YOLACTSegmHead.loss", "mmdet.models.dense_heads.YOLACTProtonet.", "mmdet.models.dense_heads.YOLACTProtonet.loss", "sum", "sum", "dict", "torch.rand", "torch.empty", "torch.LongTensor", "torch.empty", "sum.item", "sum.item", "sum.item", "torch.Tensor", "torch.LongTensor", "sum.item", "sum.item", "sum.item", "sum.item", "dict", "dict", "dict", "dict", "dict", "dict", "torch.rand"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_yolact_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests yolact head losses when truth is empty and non-empty.\"\"\"", "\n", "s", "=", "550", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "train_cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "assigner", "=", "dict", "(", "\n", "type", "=", "'MaxIoUAssigner'", ",", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.4", ",", "\n", "min_pos_iou", "=", "0.", ",", "\n", "ignore_iof_thr", "=", "-", "1", ",", "\n", "gt_max_assign_all", "=", "False", ")", ",", "\n", "smoothl1_beta", "=", "1.", ",", "\n", "allowed_border", "=", "-", "1", ",", "\n", "pos_weight", "=", "-", "1", ",", "\n", "neg_pos_ratio", "=", "3", ",", "\n", "debug", "=", "False", ",", "\n", "min_gt_box_wh", "=", "[", "4.0", ",", "4.0", "]", ")", ")", "\n", "bbox_head", "=", "YOLACTHead", "(", "\n", "num_classes", "=", "80", ",", "\n", "in_channels", "=", "256", ",", "\n", "feat_channels", "=", "256", ",", "\n", "anchor_generator", "=", "dict", "(", "\n", "type", "=", "'AnchorGenerator'", ",", "\n", "octave_base_scale", "=", "3", ",", "\n", "scales_per_octave", "=", "1", ",", "\n", "base_sizes", "=", "[", "8", ",", "16", ",", "32", ",", "64", ",", "128", "]", ",", "\n", "ratios", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", ",", "\n", "strides", "=", "[", "550.0", "/", "x", "for", "x", "in", "[", "69", ",", "35", ",", "18", ",", "9", ",", "5", "]", "]", ",", "\n", "centers", "=", "[", "(", "550", "*", "0.5", "/", "x", ",", "550", "*", "0.5", "/", "x", ")", "\n", "for", "x", "in", "[", "69", ",", "35", ",", "18", ",", "9", ",", "5", "]", "]", ")", ",", "\n", "bbox_coder", "=", "dict", "(", "\n", "type", "=", "'DeltaXYWHBBoxCoder'", ",", "\n", "target_means", "=", "[", ".0", ",", ".0", ",", ".0", ",", ".0", "]", ",", "\n", "target_stds", "=", "[", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", "]", ")", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "False", ",", "\n", "reduction", "=", "'none'", ",", "\n", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "type", "=", "'SmoothL1Loss'", ",", "beta", "=", "1.0", ",", "loss_weight", "=", "1.5", ")", ",", "\n", "num_head_convs", "=", "1", ",", "\n", "num_protos", "=", "32", ",", "\n", "use_ohem", "=", "True", ",", "\n", "train_cfg", "=", "train_cfg", ")", "\n", "segm_head", "=", "YOLACTSegmHead", "(", "\n", "in_channels", "=", "256", ",", "\n", "num_classes", "=", "80", ",", "\n", "loss_segm", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "True", ",", "loss_weight", "=", "1.0", ")", ")", "\n", "mask_head", "=", "YOLACTProtonet", "(", "\n", "num_classes", "=", "80", ",", "\n", "in_channels", "=", "256", ",", "\n", "num_protos", "=", "32", ",", "\n", "max_masks_to_train", "=", "100", ",", "\n", "loss_mask_weight", "=", "6.125", ")", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "256", ",", "feat_size", ",", "feat_size", ")", "\n", "for", "feat_size", "in", "[", "69", ",", "35", ",", "18", ",", "9", ",", "5", "]", "\n", "]", "\n", "cls_score", ",", "bbox_pred", ",", "coeff_pred", "=", "bbox_head", ".", "forward", "(", "feat", ")", "\n", "# Test that empty ground truth encourages the network to predict background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "gt_masks", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "550", ",", "550", ")", ")", "]", "\n", "gt_bboxes_ignore", "=", "None", "\n", "empty_gt_losses", ",", "sampling_results", "=", "bbox_head", ".", "loss", "(", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "# When there is no truth, the cls loss should be nonzero but there should", "\n", "# be no box loss.", "\n", "empty_cls_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "empty_box_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "assert", "empty_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "empty_box_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "\n", "# Test segm head and mask head", "\n", "segm_head_outs", "=", "segm_head", "(", "feat", "[", "0", "]", ")", "\n", "empty_segm_loss", "=", "segm_head", ".", "loss", "(", "segm_head_outs", ",", "gt_masks", ",", "gt_labels", ")", "\n", "mask_pred", "=", "mask_head", "(", "feat", "[", "0", "]", ",", "coeff_pred", ",", "gt_bboxes", ",", "img_metas", ",", "\n", "sampling_results", ")", "\n", "empty_mask_loss", "=", "mask_head", ".", "loss", "(", "mask_pred", ",", "gt_masks", ",", "gt_bboxes", ",", "img_metas", ",", "\n", "sampling_results", ")", "\n", "# When there is no truth, the segm and mask loss should be zero.", "\n", "empty_segm_loss", "=", "sum", "(", "empty_segm_loss", "[", "'loss_segm'", "]", ")", "\n", "empty_mask_loss", "=", "sum", "(", "empty_mask_loss", "[", "'loss_mask'", "]", ")", "\n", "assert", "empty_segm_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no segm loss when there are no true boxes'", ")", "\n", "assert", "empty_mask_loss", "==", "0", ",", "(", "\n", "'there should be no mask loss when there are no true boxes'", ")", "\n", "\n", "# When truth is non-empty then cls, box, mask, segm loss should be", "\n", "# nonzero for random inputs.", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "gt_masks", "=", "[", "(", "torch", ".", "rand", "(", "(", "1", ",", "550", ",", "550", ")", ")", ">", "0.5", ")", ".", "float", "(", ")", "]", "\n", "\n", "one_gt_losses", ",", "sampling_results", "=", "bbox_head", ".", "loss", "(", "\n", "cls_score", ",", "\n", "bbox_pred", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_metas", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ")", "\n", "one_gt_cls_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "one_gt_box_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "assert", "one_gt_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "one_gt_box_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss should be non-zero'", "\n", "\n", "one_gt_segm_loss", "=", "segm_head", ".", "loss", "(", "segm_head_outs", ",", "gt_masks", ",", "gt_labels", ")", "\n", "mask_pred", "=", "mask_head", "(", "feat", "[", "0", "]", ",", "coeff_pred", ",", "gt_bboxes", ",", "img_metas", ",", "\n", "sampling_results", ")", "\n", "one_gt_mask_loss", "=", "mask_head", ".", "loss", "(", "mask_pred", ",", "gt_masks", ",", "gt_bboxes", ",", "\n", "img_metas", ",", "sampling_results", ")", "\n", "one_gt_segm_loss", "=", "sum", "(", "one_gt_segm_loss", "[", "'loss_segm'", "]", ")", "\n", "one_gt_mask_loss", "=", "sum", "(", "one_gt_mask_loss", "[", "'loss_mask'", "]", ")", "\n", "assert", "one_gt_segm_loss", ".", "item", "(", ")", ">", "0", ",", "'segm loss should be non-zero'", "\n", "assert", "one_gt_mask_loss", ".", "item", "(", ")", ">", "0", ",", "'mask loss should be non-zero'", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_pisa_head.test_pisa_retinanet_head_loss": [[8, 73], ["mmcv.Config", "mmdet.models.dense_heads.PISARetinaHead", "mmdet.models.dense_heads.PISARetinaHead.forward", "mmdet.models.dense_heads.PISARetinaHead.loss", "empty_gt_losses[].sum", "empty_gt_losses[].sum", "mmdet.models.dense_heads.PISARetinaHead.loss", "one_gt_losses[].sum", "one_gt_losses[].sum", "dict", "torch.rand", "torch.empty", "torch.LongTensor", "empty_gt_losses[].sum.item", "empty_gt_losses[].sum.item", "torch.Tensor", "torch.LongTensor", "one_gt_losses[].sum.item", "one_gt_losses[].sum.item", "range", "dict", "dict", "dict", "dict", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_pisa_retinanet_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests pisa retinanet head loss when truth is empty and non-empty.\"\"\"", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "\n", "cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "assigner", "=", "dict", "(", "\n", "type", "=", "'MaxIoUAssigner'", ",", "\n", "pos_iou_thr", "=", "0.7", ",", "\n", "neg_iou_thr", "=", "0.3", ",", "\n", "min_pos_iou", "=", "0.3", ",", "\n", "match_low_quality", "=", "True", ",", "\n", "ignore_iof_thr", "=", "-", "1", ")", ",", "\n", "sampler", "=", "dict", "(", "\n", "type", "=", "'RandomSampler'", ",", "\n", "num", "=", "256", ",", "\n", "pos_fraction", "=", "0.5", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "False", ")", ",", "\n", "isr", "=", "dict", "(", "k", "=", "2.", ",", "bias", "=", "0.", ")", ",", "\n", "carl", "=", "dict", "(", "k", "=", "1.", ",", "bias", "=", "0.2", ")", ",", "\n", "allowed_border", "=", "0", ",", "\n", "pos_weight", "=", "-", "1", ",", "\n", "debug", "=", "False", ")", ")", "\n", "self", "=", "PISARetinaHead", "(", "num_classes", "=", "4", ",", "in_channels", "=", "1", ",", "train_cfg", "=", "cfg", ")", "\n", "\n", "# Anchor head expects a multiple levels of features per image", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "anchor_generator", ".", "strides", ")", ")", "\n", "]", "\n", "cls_scores", ",", "bbox_preds", "=", "self", ".", "forward", "(", "feat", ")", "\n", "\n", "# Test that empty ground truth encourages the network to predict background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "\n", "gt_bboxes_ignore", "=", "None", "\n", "empty_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "# When there is no truth, the cls loss should be nonzero but there should", "\n", "# be no box loss.", "\n", "empty_cls_loss", "=", "empty_gt_losses", "[", "'loss_cls'", "]", ".", "sum", "(", ")", "\n", "empty_box_loss", "=", "empty_gt_losses", "[", "'loss_bbox'", "]", ".", "sum", "(", ")", "\n", "assert", "empty_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "empty_box_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "\n", "# When truth is non-empty then both cls and box loss should be nonzero for", "\n", "# random inputs", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "one_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "onegt_cls_loss", "=", "one_gt_losses", "[", "'loss_cls'", "]", ".", "sum", "(", ")", "\n", "onegt_box_loss", "=", "one_gt_losses", "[", "'loss_bbox'", "]", ".", "sum", "(", ")", "\n", "assert", "onegt_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "onegt_box_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss should be non-zero'", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_pisa_head.test_pisa_ssd_head_loss": [[75, 148], ["mmcv.Config", "dict", "mmdet.models.dense_heads.PISASSDHead", "mmdet.models.dense_heads.PISASSDHead.forward", "mmdet.models.dense_heads.PISASSDHead.loss", "sum", "sum", "mmdet.models.dense_heads.PISASSDHead.loss", "sum", "sum", "dict", "torch.rand", "torch.empty", "torch.LongTensor", "sum.item", "sum.item", "torch.Tensor", "torch.LongTensor", "sum.item", "sum.item", "range", "dict", "dict", "dict", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["", "def", "test_pisa_ssd_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests pisa ssd head loss when truth is empty and non-empty.\"\"\"", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "\n", "cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "assigner", "=", "dict", "(", "\n", "type", "=", "'MaxIoUAssigner'", ",", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "min_pos_iou", "=", "0.", ",", "\n", "ignore_iof_thr", "=", "-", "1", ",", "\n", "gt_max_assign_all", "=", "False", ")", ",", "\n", "isr", "=", "dict", "(", "k", "=", "2.", ",", "bias", "=", "0.", ")", ",", "\n", "carl", "=", "dict", "(", "k", "=", "1.", ",", "bias", "=", "0.2", ")", ",", "\n", "smoothl1_beta", "=", "1.", ",", "\n", "allowed_border", "=", "-", "1", ",", "\n", "pos_weight", "=", "-", "1", ",", "\n", "neg_pos_ratio", "=", "3", ",", "\n", "debug", "=", "False", ")", ")", "\n", "ssd_anchor_generator", "=", "dict", "(", "\n", "type", "=", "'SSDAnchorGenerator'", ",", "\n", "scale_major", "=", "False", ",", "\n", "input_size", "=", "300", ",", "\n", "strides", "=", "[", "1", "]", ",", "\n", "ratios", "=", "(", "[", "2", "]", ",", ")", ",", "\n", "basesize_ratio_range", "=", "(", "0.15", ",", "0.9", ")", ")", "\n", "self", "=", "PISASSDHead", "(", "\n", "num_classes", "=", "4", ",", "\n", "in_channels", "=", "(", "1", ",", ")", ",", "\n", "train_cfg", "=", "cfg", ",", "\n", "anchor_generator", "=", "ssd_anchor_generator", ")", "\n", "\n", "# Anchor head expects a multiple levels of features per image", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "anchor_generator", ".", "strides", ")", ")", "\n", "]", "\n", "cls_scores", ",", "bbox_preds", "=", "self", ".", "forward", "(", "feat", ")", "\n", "\n", "# Test that empty ground truth encourages the network to predict background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "\n", "gt_bboxes_ignore", "=", "None", "\n", "empty_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "# When there is no truth, the cls loss should be nonzero but there should", "\n", "# be no box loss.", "\n", "empty_cls_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "empty_box_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "# SSD is special, #pos:#neg = 1: 3, so empth gt will also lead loss cls = 0", "\n", "assert", "empty_cls_loss", ".", "item", "(", ")", "==", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "empty_box_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "\n", "# When truth is non-empty then both cls and box loss should be nonzero for", "\n", "# random inputs", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "one_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "onegt_cls_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "onegt_box_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_bbox'", "]", ")", "\n", "assert", "onegt_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "onegt_box_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss should be non-zero'", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_pisa_head.test_pisa_roi_head_loss": [[150, 245], ["mmcv.Config", "dict", "dict", "mmdet.models.roi_heads.PISARoIHead", "mmdet.models.roi_heads.PISARoIHead.forward_train", "empty_gt_losses[].sum", "empty_gt_losses[].sum", "mmdet.models.roi_heads.PISARoIHead.forward_train", "one_gt_losses[].sum", "one_gt_losses[].sum", "dict", "torch.rand", "torch.Tensor", "torch.empty", "torch.LongTensor", "empty_gt_losses[].sum.item", "empty_gt_losses[].sum.item", "torch.Tensor", "torch.LongTensor", "one_gt_losses[].sum.item", "one_gt_losses[].sum.item", "dict", "dict", "dict", "dict", "range", "dict", "dict", "dict", "dict"], "function", ["None"], ["", "def", "test_pisa_roi_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests pisa roi head loss when truth is empty and non-empty.\"\"\"", "\n", "train_cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "assigner", "=", "dict", "(", "\n", "type", "=", "'MaxIoUAssigner'", ",", "\n", "pos_iou_thr", "=", "0.7", ",", "\n", "neg_iou_thr", "=", "0.3", ",", "\n", "min_pos_iou", "=", "0.3", ",", "\n", "match_low_quality", "=", "True", ",", "\n", "ignore_iof_thr", "=", "-", "1", ")", ",", "\n", "sampler", "=", "dict", "(", "\n", "type", "=", "'ScoreHLRSampler'", ",", "\n", "num", "=", "4", ",", "\n", "pos_fraction", "=", "0.25", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ",", "\n", "k", "=", "0.5", ",", "\n", "bias", "=", "0.", ")", ",", "\n", "isr", "=", "dict", "(", "k", "=", "2.", ",", "bias", "=", "0.", ")", ",", "\n", "carl", "=", "dict", "(", "k", "=", "1.", ",", "bias", "=", "0.2", ")", ",", "\n", "allowed_border", "=", "0", ",", "\n", "pos_weight", "=", "-", "1", ",", "\n", "debug", "=", "False", ")", ")", "\n", "\n", "bbox_roi_extractor", "=", "dict", "(", "\n", "type", "=", "'SingleRoIExtractor'", ",", "\n", "roi_layer", "=", "dict", "(", "type", "=", "'RoIAlign'", ",", "output_size", "=", "7", ",", "sampling_ratio", "=", "0", ")", ",", "\n", "out_channels", "=", "1", ",", "\n", "featmap_strides", "=", "[", "1", "]", ")", "\n", "\n", "bbox_head", "=", "dict", "(", "\n", "type", "=", "'Shared2FCBBoxHead'", ",", "\n", "in_channels", "=", "1", ",", "\n", "fc_out_channels", "=", "2", ",", "\n", "roi_feat_size", "=", "7", ",", "\n", "num_classes", "=", "4", ",", "\n", "bbox_coder", "=", "dict", "(", "\n", "type", "=", "'DeltaXYWHBBoxCoder'", ",", "\n", "target_means", "=", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "\n", "target_stds", "=", "[", "0.1", ",", "0.1", ",", "0.2", ",", "0.2", "]", ")", ",", "\n", "reg_class_agnostic", "=", "False", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "False", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "type", "=", "'L1Loss'", ",", "loss_weight", "=", "1.0", ")", ")", "\n", "\n", "self", "=", "PISARoIHead", "(", "bbox_roi_extractor", ",", "bbox_head", ",", "train_cfg", "=", "train_cfg", ")", "\n", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "\n", "# Anchor head expects a multiple levels of features per image", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ")", "\n", "]", "\n", "\n", "proposal_list", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "22.6667", ",", "22.8757", ",", "238.6326", ",", "151.8874", "]", ",", "[", "0", ",", "3", ",", "5", ",", "7", "]", "]", ")", "\n", "]", "\n", "\n", "# Test that empty ground truth encourages the network to predict background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "gt_bboxes_ignore", "=", "None", "\n", "\n", "empty_gt_losses", "=", "self", ".", "forward_train", "(", "feat", ",", "img_metas", ",", "proposal_list", ",", "\n", "gt_bboxes", ",", "gt_labels", ",", "\n", "gt_bboxes_ignore", ")", "\n", "\n", "# When there is no truth, the cls loss should be nonzero but there should", "\n", "# be no box loss.", "\n", "empty_cls_loss", "=", "empty_gt_losses", "[", "'loss_cls'", "]", ".", "sum", "(", ")", "\n", "empty_box_loss", "=", "empty_gt_losses", "[", "'loss_bbox'", "]", ".", "sum", "(", ")", "\n", "assert", "empty_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "empty_box_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "\n", "# When truth is non-empty then both cls and box loss should be nonzero for", "\n", "# random inputs", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "\n", "one_gt_losses", "=", "self", ".", "forward_train", "(", "feat", ",", "img_metas", ",", "proposal_list", ",", "\n", "gt_bboxes", ",", "gt_labels", ",", "gt_bboxes_ignore", ")", "\n", "onegt_cls_loss", "=", "one_gt_losses", "[", "'loss_cls'", "]", ".", "sum", "(", ")", "\n", "onegt_box_loss", "=", "one_gt_losses", "[", "'loss_bbox'", "]", ".", "sum", "(", ")", "\n", "assert", "onegt_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "onegt_box_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss should be non-zero'", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_paa_head.test_paa_head_loss": [[9, 123], ["mock_skm", "mmcv.Config", "mmdet.models.dense_heads.PAAHead", "mmdet.models.dense_heads.PAAHead.init_weights", "mmdet.models.dense_heads.PAAHead.", "mmdet.models.dense_heads.PAAHead.loss", "mmdet.models.dense_heads.PAAHead.loss", "mmdet.models.dense_heads.paa_head.levels_to_images", "mmcv.Config", "mmdet.models.dense_heads.PAAHead._get_bboxes", "dict", "torch.rand", "torch.empty", "torch.LongTensor", "empty_cls_loss.item", "empty_box_loss.item", "empty_iou_loss.item", "torch.Tensor", "torch.LongTensor", "onegt_cls_loss.item", "onegt_box_loss.item", "onegt_iou_loss.item", "torch.ones", "len", "results[].size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "dict", "numpy.zeros_like", "np.zeros_like.reshape", "numpy.random.random", "dict", "dict", "dict", "range", "len", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random"], ["def", "test_paa_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests paa head loss when truth is empty and non-empty.\"\"\"", "\n", "\n", "class", "mock_skm", "(", "object", ")", ":", "\n", "\n", "        ", "def", "GaussianMixture", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "return", "self", "\n", "\n", "", "def", "fit", "(", "self", ",", "loss", ")", ":", "\n", "            ", "pass", "\n", "\n", "", "def", "predict", "(", "self", ",", "loss", ")", ":", "\n", "            ", "components", "=", "np", ".", "zeros_like", "(", "loss", ",", "dtype", "=", "np", ".", "long", ")", "\n", "return", "components", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "", "def", "score_samples", "(", "self", ",", "loss", ")", ":", "\n", "            ", "scores", "=", "np", ".", "random", ".", "random", "(", "len", "(", "loss", ")", ")", "\n", "return", "scores", "\n", "\n", "", "", "paa_head", ".", "skm", "=", "mock_skm", "(", ")", "\n", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "train_cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "assigner", "=", "dict", "(", "\n", "type", "=", "'MaxIoUAssigner'", ",", "\n", "pos_iou_thr", "=", "0.1", ",", "\n", "neg_iou_thr", "=", "0.1", ",", "\n", "min_pos_iou", "=", "0", ",", "\n", "ignore_iof_thr", "=", "-", "1", ")", ",", "\n", "allowed_border", "=", "-", "1", ",", "\n", "pos_weight", "=", "-", "1", ",", "\n", "debug", "=", "False", ")", ")", "\n", "# since Focal Loss is not supported on CPU", "\n", "self", "=", "PAAHead", "(", "\n", "num_classes", "=", "4", ",", "\n", "in_channels", "=", "1", ",", "\n", "train_cfg", "=", "train_cfg", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "True", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "loss_bbox", "=", "dict", "(", "type", "=", "'GIoULoss'", ",", "loss_weight", "=", "1.3", ")", ",", "\n", "loss_centerness", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "True", ",", "loss_weight", "=", "0.5", ")", ")", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "1", ",", "s", "//", "feat_size", ",", "s", "//", "feat_size", ")", "\n", "for", "feat_size", "in", "[", "4", ",", "8", ",", "16", ",", "32", ",", "64", "]", "\n", "]", "\n", "self", ".", "init_weights", "(", ")", "\n", "cls_scores", ",", "bbox_preds", ",", "iou_preds", "=", "self", "(", "feat", ")", "\n", "# Test that empty ground truth encourages the network to predict background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", "]", "\n", "gt_bboxes_ignore", "=", "None", "\n", "empty_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "iou_preds", ",", "gt_bboxes", ",", "\n", "gt_labels", ",", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "# When there is no truth, the cls loss should be nonzero but there should", "\n", "# be no box loss.", "\n", "empty_cls_loss", "=", "empty_gt_losses", "[", "'loss_cls'", "]", "\n", "empty_box_loss", "=", "empty_gt_losses", "[", "'loss_bbox'", "]", "\n", "empty_iou_loss", "=", "empty_gt_losses", "[", "'loss_iou'", "]", "\n", "assert", "empty_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "empty_box_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "assert", "empty_iou_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box loss when there are no true boxes'", ")", "\n", "\n", "# When truth is non-empty then both cls and box loss should be nonzero for", "\n", "# random inputs", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", "]", "\n", "one_gt_losses", "=", "self", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "iou_preds", ",", "gt_bboxes", ",", "\n", "gt_labels", ",", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "onegt_cls_loss", "=", "one_gt_losses", "[", "'loss_cls'", "]", "\n", "onegt_box_loss", "=", "one_gt_losses", "[", "'loss_bbox'", "]", "\n", "onegt_iou_loss", "=", "one_gt_losses", "[", "'loss_iou'", "]", "\n", "assert", "onegt_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "onegt_box_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss should be non-zero'", "\n", "assert", "onegt_iou_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss should be non-zero'", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "10", ",", "4", ",", "20", ",", "20", "\n", "mlvl_tensor", "=", "[", "torch", ".", "ones", "(", "n", ",", "c", ",", "h", ",", "w", ")", "for", "i", "in", "range", "(", "5", ")", "]", "\n", "results", "=", "levels_to_images", "(", "mlvl_tensor", ")", "\n", "assert", "len", "(", "results", ")", "==", "n", "\n", "assert", "results", "[", "0", "]", ".", "size", "(", ")", "==", "(", "h", "*", "w", "*", "5", ",", "c", ")", "\n", "assert", "self", ".", "with_score_voting", "\n", "cls_scores", "=", "[", "torch", ".", "ones", "(", "2", ",", "4", ",", "5", ",", "5", ")", "]", "\n", "bbox_preds", "=", "[", "torch", ".", "ones", "(", "2", ",", "4", ",", "5", ",", "5", ")", "]", "\n", "iou_preds", "=", "[", "torch", ".", "ones", "(", "2", ",", "1", ",", "5", ",", "5", ")", "]", "\n", "mlvl_anchors", "=", "[", "torch", ".", "ones", "(", "2", ",", "5", "*", "5", ",", "4", ")", "]", "\n", "img_shape", "=", "None", "\n", "scale_factor", "=", "[", "0.5", ",", "0.5", "]", "\n", "cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "nms_pre", "=", "1000", ",", "\n", "min_bbox_size", "=", "0", ",", "\n", "score_thr", "=", "0.05", ",", "\n", "nms", "=", "dict", "(", "type", "=", "'nms'", ",", "iou_threshold", "=", "0.6", ")", ",", "\n", "max_per_img", "=", "100", ")", ")", "\n", "rescale", "=", "False", "\n", "self", ".", "_get_bboxes", "(", "\n", "cls_scores", ",", "\n", "bbox_preds", ",", "\n", "iou_preds", ",", "\n", "mlvl_anchors", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "cfg", ",", "\n", "rescale", "=", "rescale", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_dense_heads.test_sabl_retina_head.test_sabl_retina_head_loss": [[7, 76], ["mmcv.Config", "mmdet.models.dense_heads.SABLRetinaHead", "torch.cuda.is_available", "dict", "mmdet.models.dense_heads.SABLRetinaHead.cuda", "mmdet.models.dense_heads.SABLRetinaHead.forward", "mmdet.models.dense_heads.SABLRetinaHead.loss", "sum", "sum", "sum", "mmdet.models.dense_heads.SABLRetinaHead.loss", "sum", "sum", "sum", "dict", "torch.rand().cuda", "torch.empty().cuda", "torch.LongTensor().cuda", "sum.item", "sum.item", "sum.item", "torch.Tensor().cuda", "torch.LongTensor().cuda", "sum.item", "sum.item", "sum.item", "dict", "range", "torch.rand", "len", "torch.empty", "torch.LongTensor", "torch.Tensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward"], ["def", "test_sabl_retina_head_loss", "(", ")", ":", "\n", "    ", "\"\"\"Tests anchor head loss when truth is empty and non-empty.\"\"\"", "\n", "s", "=", "256", "\n", "img_metas", "=", "[", "{", "\n", "'img_shape'", ":", "(", "s", ",", "s", ",", "3", ")", ",", "\n", "'scale_factor'", ":", "1", ",", "\n", "'pad_shape'", ":", "(", "s", ",", "s", ",", "3", ")", "\n", "}", "]", "\n", "\n", "cfg", "=", "mmcv", ".", "Config", "(", "\n", "dict", "(", "\n", "assigner", "=", "dict", "(", "\n", "type", "=", "'ApproxMaxIoUAssigner'", ",", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.4", ",", "\n", "min_pos_iou", "=", "0.0", ",", "\n", "ignore_iof_thr", "=", "-", "1", ")", ",", "\n", "allowed_border", "=", "-", "1", ",", "\n", "pos_weight", "=", "-", "1", ",", "\n", "debug", "=", "False", ")", ")", "\n", "head", "=", "SABLRetinaHead", "(", "\n", "num_classes", "=", "4", ",", "\n", "in_channels", "=", "3", ",", "\n", "feat_channels", "=", "10", ",", "\n", "loss_cls", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "True", ",", "loss_weight", "=", "1.0", ")", ",", "\n", "train_cfg", "=", "cfg", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "head", ".", "cuda", "(", ")", "\n", "# Anchor head expects a multiple levels of features per image", "\n", "feat", "=", "[", "\n", "torch", ".", "rand", "(", "1", ",", "3", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ",", "s", "//", "(", "2", "**", "(", "i", "+", "2", ")", ")", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "head", ".", "approx_anchor_generator", ".", "base_anchors", ")", ")", "\n", "]", "\n", "cls_scores", ",", "bbox_preds", "=", "head", ".", "forward", "(", "feat", ")", "\n", "\n", "# Test that empty ground truth encourages the network", "\n", "# to predict background", "\n", "gt_bboxes", "=", "[", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", ".", "cuda", "(", ")", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "]", ")", ".", "cuda", "(", ")", "]", "\n", "\n", "gt_bboxes_ignore", "=", "None", "\n", "empty_gt_losses", "=", "head", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "\n", "gt_labels", ",", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "# When there is no truth, the cls loss should be nonzero but there", "\n", "# should be no box loss.", "\n", "empty_cls_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "empty_box_cls_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_bbox_cls'", "]", ")", "\n", "empty_box_reg_loss", "=", "sum", "(", "empty_gt_losses", "[", "'loss_bbox_reg'", "]", ")", "\n", "assert", "empty_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "empty_box_cls_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box cls loss when there are no true boxes'", ")", "\n", "assert", "empty_box_reg_loss", ".", "item", "(", ")", "==", "0", ",", "(", "\n", "'there should be no box reg loss when there are no true boxes'", ")", "\n", "\n", "# When truth is non-empty then both cls and box loss should", "\n", "# be nonzero for random inputs", "\n", "gt_bboxes", "=", "[", "\n", "torch", ".", "Tensor", "(", "[", "[", "23.6667", ",", "23.8757", ",", "238.6326", ",", "151.8874", "]", "]", ")", ".", "cuda", "(", ")", ",", "\n", "]", "\n", "gt_labels", "=", "[", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "cuda", "(", ")", "]", "\n", "one_gt_losses", "=", "head", ".", "loss", "(", "cls_scores", ",", "bbox_preds", ",", "gt_bboxes", ",", "gt_labels", ",", "\n", "img_metas", ",", "gt_bboxes_ignore", ")", "\n", "onegt_cls_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_cls'", "]", ")", "\n", "onegt_box_cls_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_bbox_cls'", "]", ")", "\n", "onegt_box_reg_loss", "=", "sum", "(", "one_gt_losses", "[", "'loss_bbox_reg'", "]", ")", "\n", "assert", "onegt_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'cls loss should be non-zero'", "\n", "assert", "onegt_box_cls_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss cls should be non-zero'", "\n", "assert", "onegt_box_reg_loss", ".", "item", "(", ")", ">", "0", ",", "'box loss reg should be non-zero'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_data.test_utils.test_replace_ImageToTensor": [[6, 62], ["dict", "dict", "dict", "dict", "pytest.warns", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "pytest.warns", "mmdet.datasets.replace_ImageToTensor", "mmdet.datasets.replace_ImageToTensor", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.replace_ImageToTensor", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.replace_ImageToTensor"], ["def", "test_replace_ImageToTensor", "(", ")", ":", "\n", "# with MultiScaleFlipAug", "\n", "    ", "pipelines", "=", "[", "\n", "dict", "(", "type", "=", "'LoadImageFromFile'", ")", ",", "\n", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "(", "1333", ",", "800", ")", ",", "\n", "flip", "=", "False", ",", "\n", "transforms", "=", "[", "\n", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "True", ")", ",", "\n", "dict", "(", "type", "=", "'RandomFlip'", ")", ",", "\n", "dict", "(", "type", "=", "'Normalize'", ")", ",", "\n", "dict", "(", "type", "=", "'Pad'", ",", "size_divisor", "=", "32", ")", ",", "\n", "dict", "(", "type", "=", "'ImageToTensor'", ",", "keys", "=", "[", "'img'", "]", ")", ",", "\n", "dict", "(", "type", "=", "'Collect'", ",", "keys", "=", "[", "'img'", "]", ")", ",", "\n", "]", ")", "\n", "]", "\n", "expected_pipelines", "=", "[", "\n", "dict", "(", "type", "=", "'LoadImageFromFile'", ")", ",", "\n", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "(", "1333", ",", "800", ")", ",", "\n", "flip", "=", "False", ",", "\n", "transforms", "=", "[", "\n", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "True", ")", ",", "\n", "dict", "(", "type", "=", "'RandomFlip'", ")", ",", "\n", "dict", "(", "type", "=", "'Normalize'", ")", ",", "\n", "dict", "(", "type", "=", "'Pad'", ",", "size_divisor", "=", "32", ")", ",", "\n", "dict", "(", "type", "=", "'DefaultFormatBundle'", ")", ",", "\n", "dict", "(", "type", "=", "'Collect'", ",", "keys", "=", "[", "'img'", "]", ")", ",", "\n", "]", ")", "\n", "]", "\n", "with", "pytest", ".", "warns", "(", "UserWarning", ")", ":", "\n", "        ", "assert", "expected_pipelines", "==", "replace_ImageToTensor", "(", "pipelines", ")", "\n", "\n", "# without MultiScaleFlipAug", "\n", "", "pipelines", "=", "[", "\n", "dict", "(", "type", "=", "'LoadImageFromFile'", ")", ",", "\n", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "True", ")", ",", "\n", "dict", "(", "type", "=", "'RandomFlip'", ")", ",", "\n", "dict", "(", "type", "=", "'Normalize'", ")", ",", "\n", "dict", "(", "type", "=", "'Pad'", ",", "size_divisor", "=", "32", ")", ",", "\n", "dict", "(", "type", "=", "'ImageToTensor'", ",", "keys", "=", "[", "'img'", "]", ")", ",", "\n", "dict", "(", "type", "=", "'Collect'", ",", "keys", "=", "[", "'img'", "]", ")", ",", "\n", "]", "\n", "expected_pipelines", "=", "[", "\n", "dict", "(", "type", "=", "'LoadImageFromFile'", ")", ",", "\n", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "True", ")", ",", "\n", "dict", "(", "type", "=", "'RandomFlip'", ")", ",", "\n", "dict", "(", "type", "=", "'Normalize'", ")", ",", "\n", "dict", "(", "type", "=", "'Pad'", ",", "size_divisor", "=", "32", ")", ",", "\n", "dict", "(", "type", "=", "'DefaultFormatBundle'", ")", ",", "\n", "dict", "(", "type", "=", "'Collect'", ",", "keys", "=", "[", "'img'", "]", ")", ",", "\n", "]", "\n", "with", "pytest", ".", "warns", "(", "UserWarning", ")", ":", "\n", "        ", "assert", "expected_pipelines", "==", "replace_ImageToTensor", "(", "pipelines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_data.test_utils.test_get_loading_pipeline": [[64, 80], ["dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "mmdet.datasets.get_loading_pipeline"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.get_loading_pipeline"], ["", "", "def", "test_get_loading_pipeline", "(", ")", ":", "\n", "    ", "pipelines", "=", "[", "\n", "dict", "(", "type", "=", "'LoadImageFromFile'", ")", ",", "\n", "dict", "(", "type", "=", "'LoadAnnotations'", ",", "with_bbox", "=", "True", ")", ",", "\n", "dict", "(", "type", "=", "'Resize'", ",", "img_scale", "=", "(", "1333", ",", "800", ")", ",", "keep_ratio", "=", "True", ")", ",", "\n", "dict", "(", "type", "=", "'RandomFlip'", ",", "flip_ratio", "=", "0.5", ")", ",", "\n", "dict", "(", "type", "=", "'Pad'", ",", "size_divisor", "=", "32", ")", ",", "\n", "dict", "(", "type", "=", "'DefaultFormatBundle'", ")", ",", "\n", "dict", "(", "type", "=", "'Collect'", ",", "keys", "=", "[", "'img'", ",", "'gt_bboxes'", ",", "'gt_labels'", "]", ")", "\n", "]", "\n", "expected_pipelines", "=", "[", "\n", "dict", "(", "type", "=", "'LoadImageFromFile'", ")", ",", "\n", "dict", "(", "type", "=", "'LoadAnnotations'", ",", "with_bbox", "=", "True", ")", "\n", "]", "\n", "assert", "expected_pipelines", "==", "get_loading_pipeline", "(", "pipelines", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_loading.TestLoading.setup_class": [[13, 16], ["os.join", "os.dirname"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "setup_class", "(", "cls", ")", ":", "\n", "        ", "cls", ".", "data_prefix", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../data'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_loading.TestLoading.test_load_img": [[17, 58], ["dict", "mmdet.datasets.pipelines.LoadImageFromFile", "mmdet.datasets.pipelines.LoadImageFromFile.", "dict", "mmdet.datasets.pipelines.LoadImageFromFile", "mmdet.datasets.pipelines.LoadImageFromFile.", "mmdet.datasets.pipelines.LoadImageFromFile", "mmdet.datasets.pipelines.LoadImageFromFile.", "dict", "mmdet.datasets.pipelines.LoadImageFromFile", "mmdet.datasets.pipelines.LoadImageFromFile.", "mmdet.datasets.pipelines.LoadImageFromFile", "mmdet.datasets.pipelines.LoadImageFromFile.", "copy.deepcopy", "os.join", "repr", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "dict", "dict", "dict"], "methods", ["None"], ["", "def", "test_load_img", "(", "self", ")", ":", "\n", "        ", "results", "=", "dict", "(", "\n", "img_prefix", "=", "self", ".", "data_prefix", ",", "img_info", "=", "dict", "(", "filename", "=", "'color.jpg'", ")", ")", "\n", "transform", "=", "LoadImageFromFile", "(", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'filename'", "]", "==", "osp", ".", "join", "(", "self", ".", "data_prefix", ",", "'color.jpg'", ")", "\n", "assert", "results", "[", "'ori_filename'", "]", "==", "'color.jpg'", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "results", "[", "'img_shape'", "]", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "results", "[", "'ori_shape'", "]", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "repr", "(", "transform", ")", "==", "transform", ".", "__class__", ".", "__name__", "+", "\"(to_float32=False, color_type='color', \"", "+", "\"file_client_args={'backend': 'disk'})\"", "\n", "\n", "# no img_prefix", "\n", "results", "=", "dict", "(", "\n", "img_prefix", "=", "None", ",", "img_info", "=", "dict", "(", "filename", "=", "'tests/data/color.jpg'", ")", ")", "\n", "transform", "=", "LoadImageFromFile", "(", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'filename'", "]", "==", "'tests/data/color.jpg'", "\n", "assert", "results", "[", "'ori_filename'", "]", "==", "'tests/data/color.jpg'", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "\n", "# to_float32", "\n", "transform", "=", "LoadImageFromFile", "(", "to_float32", "=", "True", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "dtype", "==", "np", ".", "float32", "\n", "\n", "# gray image", "\n", "results", "=", "dict", "(", "\n", "img_prefix", "=", "self", ".", "data_prefix", ",", "img_info", "=", "dict", "(", "filename", "=", "'gray.jpg'", ")", ")", "\n", "transform", "=", "LoadImageFromFile", "(", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "dtype", "==", "np", ".", "uint8", "\n", "\n", "transform", "=", "LoadImageFromFile", "(", "color_type", "=", "'unchanged'", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "==", "(", "288", ",", "512", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "dtype", "==", "np", ".", "uint8", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_loading.TestLoading.test_load_multi_channel_img": [[59, 79], ["dict", "mmdet.datasets.pipelines.LoadMultiChannelImageFromFiles", "mmdet.datasets.pipelines.LoadMultiChannelImageFromFiles.", "copy.deepcopy", "repr", "dict", "os.join", "os.join"], "methods", ["None"], ["", "def", "test_load_multi_channel_img", "(", "self", ")", ":", "\n", "        ", "results", "=", "dict", "(", "\n", "img_prefix", "=", "self", ".", "data_prefix", ",", "\n", "img_info", "=", "dict", "(", "filename", "=", "[", "'color.jpg'", ",", "'color.jpg'", "]", ")", ")", "\n", "transform", "=", "LoadMultiChannelImageFromFiles", "(", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'filename'", "]", "==", "[", "\n", "osp", ".", "join", "(", "self", ".", "data_prefix", ",", "'color.jpg'", ")", ",", "\n", "osp", ".", "join", "(", "self", ".", "data_prefix", ",", "'color.jpg'", ")", "\n", "]", "\n", "assert", "results", "[", "'ori_filename'", "]", "==", "[", "'color.jpg'", ",", "'color.jpg'", "]", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "==", "(", "288", ",", "512", ",", "3", ",", "2", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "results", "[", "'img_shape'", "]", "==", "(", "288", ",", "512", ",", "3", ",", "2", ")", "\n", "assert", "results", "[", "'ori_shape'", "]", "==", "(", "288", ",", "512", ",", "3", ",", "2", ")", "\n", "assert", "results", "[", "'pad_shape'", "]", "==", "(", "288", ",", "512", ",", "3", ",", "2", ")", "\n", "assert", "results", "[", "'scale_factor'", "]", "==", "1.0", "\n", "assert", "repr", "(", "transform", ")", "==", "transform", ".", "__class__", ".", "__name__", "+", "\"(to_float32=False, color_type='unchanged', \"", "+", "\"file_client_args={'backend': 'disk'})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_loading.TestLoading.test_load_webcam_img": [[80, 91], ["mmcv.imread", "dict", "mmdet.datasets.pipelines.LoadImageFromWebcam", "mmdet.datasets.pipelines.LoadImageFromWebcam.", "os.join", "copy.deepcopy"], "methods", ["None"], ["", "def", "test_load_webcam_img", "(", "self", ")", ":", "\n", "        ", "img", "=", "mmcv", ".", "imread", "(", "osp", ".", "join", "(", "self", ".", "data_prefix", ",", "'color.jpg'", ")", ")", "\n", "results", "=", "dict", "(", "img", "=", "img", ")", "\n", "transform", "=", "LoadImageFromWebcam", "(", ")", "\n", "results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "results", "[", "'filename'", "]", "is", "None", "\n", "assert", "results", "[", "'ori_filename'", "]", "is", "None", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "results", "[", "'img_shape'", "]", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "results", "[", "'ori_shape'", "]", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_sampler.test_random_sampler": [[8, 42], ["mmdet.core.bbox.assigners.MaxIoUAssigner", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.Tensor", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "mmdet.core.bbox.samplers.RandomSampler", "mmdet.core.bbox.samplers.RandomSampler.sample", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler.sample"], ["def", "test_random_sampler", "(", ")", ":", "\n", "    ", "assigner", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", "]", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "30", ",", "30", ",", "40", ",", "40", "]", ",", "\n", "]", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels", "=", "gt_labels", ")", "\n", "\n", "sampler", "=", "RandomSampler", "(", "\n", "num", "=", "10", ",", "pos_fraction", "=", "0.5", ",", "neg_pos_ub", "=", "-", "1", ",", "add_gt_as_proposals", "=", "True", ")", "\n", "\n", "sample_result", "=", "sampler", ".", "sample", "(", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ")", "\n", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_sampler.test_random_sampler_empty_gt": [[44, 68], ["mmdet.core.bbox.assigners.MaxIoUAssigner", "torch.FloatTensor", "torch.empty", "torch.empty().long", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "mmdet.core.bbox.samplers.RandomSampler", "mmdet.core.bbox.samplers.RandomSampler.sample", "len", "len", "len", "len", "torch.empty"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "test_random_sampler_empty_gt", "(", ")", ":", "\n", "    ", "assigner", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "empty", "(", "0", ",", "4", ")", "\n", "gt_labels", "=", "torch", ".", "empty", "(", "0", ",", ")", ".", "long", "(", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "gt_labels", ")", "\n", "\n", "sampler", "=", "RandomSampler", "(", "\n", "num", "=", "10", ",", "pos_fraction", "=", "0.5", ",", "neg_pos_ub", "=", "-", "1", ",", "add_gt_as_proposals", "=", "True", ")", "\n", "\n", "sample_result", "=", "sampler", ".", "sample", "(", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ")", "\n", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_sampler.test_random_sampler_empty_pred": [[70, 92], ["mmdet.core.bbox.assigners.MaxIoUAssigner", "torch.empty", "torch.FloatTensor", "torch.LongTensor", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "mmdet.core.bbox.samplers.RandomSampler", "mmdet.core.bbox.samplers.RandomSampler.sample", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "test_random_sampler_empty_pred", "(", ")", ":", "\n", "    ", "assigner", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "0", ",", "4", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", "]", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "bboxes", ",", "gt_bboxes", ",", "gt_labels", "=", "gt_labels", ")", "\n", "\n", "sampler", "=", "RandomSampler", "(", "\n", "num", "=", "10", ",", "pos_fraction", "=", "0.5", ",", "neg_pos_ub", "=", "-", "1", ",", "add_gt_as_proposals", "=", "True", ")", "\n", "\n", "sample_result", "=", "sampler", ".", "sample", "(", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ")", "\n", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_sampler._context_for_ohem": [[94, 107], ["sys.path.insert", "_get_detector_cfg", "dirname", "build_detector", "dirname", "dirname"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_models.test_forward._get_detector_cfg"], ["", "def", "_context_for_ohem", "(", ")", ":", "\n", "    ", "import", "sys", "\n", "from", "os", ".", "path", "import", "dirname", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "dirname", "(", "dirname", "(", "dirname", "(", "__file__", ")", ")", ")", ")", "\n", "from", "test_forward", "import", "_get_detector_cfg", "\n", "\n", "model", "=", "_get_detector_cfg", "(", "\n", "'faster_rcnn/faster_rcnn_r50_fpn_ohem_1x_coco.py'", ")", "\n", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "context", "=", "build_detector", "(", "model", ")", ".", "roi_head", "\n", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_sampler.test_ohem_sampler": [[109, 152], ["mmdet.core.bbox.assigners.MaxIoUAssigner", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch.Tensor", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "test_sampler._context_for_ohem", "mmdet.core.bbox.samplers.OHEMSampler", "mmdet.core.bbox.samplers.OHEMSampler.sample", "torch.rand", "len", "len", "len", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_sampler._context_for_ohem", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "test_ohem_sampler", "(", ")", ":", "\n", "\n", "    ", "assigner", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "9", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", "]", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "30", ",", "30", ",", "40", ",", "40", "]", ",", "\n", "]", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels", "=", "gt_labels", ")", "\n", "\n", "context", "=", "_context_for_ohem", "(", ")", "\n", "\n", "sampler", "=", "OHEMSampler", "(", "\n", "num", "=", "10", ",", "\n", "pos_fraction", "=", "0.5", ",", "\n", "context", "=", "context", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ")", "\n", "\n", "feats", "=", "[", "torch", ".", "rand", "(", "1", ",", "256", ",", "int", "(", "2", "**", "i", ")", ",", "int", "(", "2", "**", "i", ")", ")", "for", "i", "in", "[", "6", ",", "5", ",", "4", ",", "3", ",", "2", "]", "]", "\n", "sample_result", "=", "sampler", ".", "sample", "(", "\n", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ",", "feats", "=", "feats", ")", "\n", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_sampler.test_ohem_sampler_empty_gt": [[154, 193], ["mmdet.core.bbox.assigners.MaxIoUAssigner", "torch.FloatTensor", "torch.empty", "torch.LongTensor", "torch.Tensor", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "test_sampler._context_for_ohem", "mmdet.core.bbox.samplers.OHEMSampler", "mmdet.core.bbox.samplers.OHEMSampler.sample", "torch.rand", "len", "len", "len", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_sampler._context_for_ohem", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "test_ohem_sampler_empty_gt", "(", ")", ":", "\n", "\n", "    ", "assigner", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "empty", "(", "0", ",", "4", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "]", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "Tensor", "(", "[", "]", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels", "=", "gt_labels", ")", "\n", "\n", "context", "=", "_context_for_ohem", "(", ")", "\n", "\n", "sampler", "=", "OHEMSampler", "(", "\n", "num", "=", "10", ",", "\n", "pos_fraction", "=", "0.5", ",", "\n", "context", "=", "context", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ")", "\n", "\n", "feats", "=", "[", "torch", ".", "rand", "(", "1", ",", "256", ",", "int", "(", "2", "**", "i", ")", ",", "int", "(", "2", "**", "i", ")", ")", "for", "i", "in", "[", "6", ",", "5", ",", "4", ",", "3", ",", "2", "]", "]", "\n", "\n", "sample_result", "=", "sampler", ".", "sample", "(", "\n", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ",", "feats", "=", "feats", ")", "\n", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_sampler.test_ohem_sampler_empty_pred": [[195, 233], ["mmdet.core.bbox.assigners.MaxIoUAssigner", "torch.empty", "torch.FloatTensor", "torch.LongTensor", "torch.Tensor", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "test_sampler._context_for_ohem", "mmdet.core.bbox.samplers.OHEMSampler", "mmdet.core.bbox.samplers.OHEMSampler.sample", "torch.rand", "len", "len", "len", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_sampler._context_for_ohem", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "def", "test_ohem_sampler_empty_pred", "(", ")", ":", "\n", "    ", "assigner", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "bboxes", "=", "torch", ".", "empty", "(", "0", ",", "4", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", ",", "2", ",", "3", "]", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "Tensor", "(", "[", "]", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels", "=", "gt_labels", ")", "\n", "\n", "context", "=", "_context_for_ohem", "(", ")", "\n", "\n", "sampler", "=", "OHEMSampler", "(", "\n", "num", "=", "10", ",", "\n", "pos_fraction", "=", "0.5", ",", "\n", "context", "=", "context", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ")", "\n", "\n", "feats", "=", "[", "torch", ".", "rand", "(", "1", ",", "256", ",", "int", "(", "2", "**", "i", ")", ",", "int", "(", "2", "**", "i", ")", ")", "for", "i", "in", "[", "6", ",", "5", ",", "4", ",", "3", ",", "2", "]", "]", "\n", "\n", "sample_result", "=", "sampler", ".", "sample", "(", "\n", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ",", "feats", "=", "feats", ")", "\n", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_sampler.test_random_sample_result": [[235, 247], ["SamplingResult.random", "SamplingResult.random", "SamplingResult.random", "SamplingResult.random", "SamplingResult.random", "SamplingResult.random", "SamplingResult.random", "range", "SamplingResult.random"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random"], ["", "def", "test_random_sample_result", "(", ")", ":", "\n", "    ", "from", "mmdet", ".", "core", ".", "bbox", ".", "samplers", ".", "sampling_result", "import", "SamplingResult", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "0", ",", "num_preds", "=", "0", ")", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "0", ",", "num_preds", "=", "3", ")", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "3", ",", "num_preds", "=", "3", ")", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "0", ",", "num_preds", "=", "3", ")", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "7", ",", "num_preds", "=", "7", ")", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "7", ",", "num_preds", "=", "64", ")", "\n", "SamplingResult", ".", "random", "(", "num_gts", "=", "24", ",", "num_preds", "=", "3", ")", "\n", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "SamplingResult", ".", "random", "(", "rng", "=", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_sampler.test_score_hlr_sampler_empty_pred": [[249, 329], ["mmdet.core.bbox.assigners.MaxIoUAssigner", "test_sampler._context_for_ohem", "mmdet.core.bbox.samplers.ScoreHLRSampler", "torch.Tensor", "torch.empty", "torch.FloatTensor", "torch.LongTensor", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "mmdet.core.bbox.samplers.ScoreHLRSampler.sample", "torch.FloatTensor", "torch.empty", "torch.LongTensor", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "mmdet.core.bbox.samplers.ScoreHLRSampler.sample", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "mmdet.core.bbox.assigners.MaxIoUAssigner.assign", "mmdet.core.bbox.samplers.ScoreHLRSampler.sample", "torch.rand", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_sampler._context_for_ohem", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler.sample", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "", "def", "test_score_hlr_sampler_empty_pred", "(", ")", ":", "\n", "    ", "assigner", "=", "MaxIoUAssigner", "(", "\n", "pos_iou_thr", "=", "0.5", ",", "\n", "neg_iou_thr", "=", "0.5", ",", "\n", "ignore_iof_thr", "=", "0.5", ",", "\n", "ignore_wrt_candidates", "=", "False", ",", "\n", ")", "\n", "context", "=", "_context_for_ohem", "(", ")", "\n", "sampler", "=", "ScoreHLRSampler", "(", "\n", "num", "=", "10", ",", "\n", "pos_fraction", "=", "0.5", ",", "\n", "context", "=", "context", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ")", "\n", "gt_bboxes_ignore", "=", "torch", ".", "Tensor", "(", "[", "]", ")", "\n", "feats", "=", "[", "torch", ".", "rand", "(", "1", ",", "256", ",", "int", "(", "2", "**", "i", ")", ",", "int", "(", "2", "**", "i", ")", ")", "for", "i", "in", "[", "6", ",", "5", ",", "4", ",", "3", ",", "2", "]", "]", "\n", "\n", "# empty bbox", "\n", "bboxes", "=", "torch", ".", "empty", "(", "0", ",", "4", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", ",", "2", ",", "3", "]", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels", "=", "gt_labels", ")", "\n", "sample_result", ",", "_", "=", "sampler", ".", "sample", "(", "\n", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ",", "feats", "=", "feats", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_inds", ")", "==", "0", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n", "# empty gt", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "empty", "(", "0", ",", "4", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "]", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels", "=", "gt_labels", ")", "\n", "sample_result", ",", "_", "=", "sampler", ".", "sample", "(", "\n", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ",", "feats", "=", "feats", ")", "\n", "assert", "len", "(", "sample_result", ".", "pos_inds", ")", "==", "0", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "\n", "# non-empty input", "\n", "bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_bboxes", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "5", ",", "5", ",", "15", ",", "15", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "gt_labels", "=", "torch", ".", "LongTensor", "(", "[", "1", ",", "2", ",", "2", ",", "3", "]", ")", "\n", "assign_result", "=", "assigner", ".", "assign", "(", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "gt_labels", "=", "gt_labels", ")", "\n", "sample_result", ",", "_", "=", "sampler", ".", "sample", "(", "\n", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ",", "feats", "=", "feats", ")", "\n", "assert", "len", "(", "sample_result", ".", "pos_bboxes", ")", "==", "len", "(", "sample_result", ".", "pos_inds", ")", "\n", "assert", "len", "(", "sample_result", ".", "neg_bboxes", ")", "==", "len", "(", "sample_result", ".", "neg_inds", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_pipelines.test_formatting.test_default_format_bundle": [[8, 24], ["dict", "dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "mmcv.utils.build_from_cfg.", "os.join", "dict", "os.dirname"], "function", ["None"], ["def", "test_default_format_bundle", "(", ")", ":", "\n", "    ", "results", "=", "dict", "(", "\n", "img_prefix", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../data'", ")", ",", "\n", "img_info", "=", "dict", "(", "filename", "=", "'color.jpg'", ")", ")", "\n", "load", "=", "dict", "(", "type", "=", "'LoadImageFromFile'", ")", "\n", "load", "=", "build_from_cfg", "(", "load", ",", "PIPELINES", ")", "\n", "bundle", "=", "dict", "(", "type", "=", "'DefaultFormatBundle'", ")", "\n", "bundle", "=", "build_from_cfg", "(", "bundle", ",", "PIPELINES", ")", "\n", "results", "=", "load", "(", "results", ")", "\n", "assert", "'pad_shape'", "not", "in", "results", "\n", "assert", "'scale_factor'", "not", "in", "results", "\n", "assert", "'img_norm_cfg'", "not", "in", "results", "\n", "results", "=", "bundle", "(", "results", ")", "\n", "assert", "'pad_shape'", "in", "results", "\n", "assert", "'scale_factor'", "in", "results", "\n", "assert", "'img_norm_cfg'", "in", "results", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_transform.test_resize": [[14, 80], ["dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "copy.deepcopy", "mmcv.utils.build_from_cfg.", "numpy.equal().all", "transform.pop", "transform.pop", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "numpy.equal().all", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "mmcv.utils.build_from_cfg.", "os.join", "os.dirname", "numpy.equal", "numpy.equal", "os.join", "dict", "os.dirname"], "function", ["None"], ["def", "test_resize", "(", ")", ":", "\n", "# test assertion if img_scale is a list", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Resize'", ",", "img_scale", "=", "[", "1333", ",", "800", "]", ",", "keep_ratio", "=", "True", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion if len(img_scale) while ratio_range is not None", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'Resize'", ",", "\n", "img_scale", "=", "[", "(", "1333", ",", "800", ")", ",", "(", "1333", ",", "600", ")", "]", ",", "\n", "ratio_range", "=", "(", "0.9", ",", "1.1", ")", ",", "\n", "keep_ratio", "=", "True", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid multiscale_mode", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'Resize'", ",", "\n", "img_scale", "=", "[", "(", "1333", ",", "800", ")", ",", "(", "1333", ",", "600", ")", "]", ",", "\n", "keep_ratio", "=", "True", ",", "\n", "multiscale_mode", "=", "'2333'", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion if both scale and scale_factor are setted", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "results", "=", "dict", "(", "\n", "img_prefix", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data'", ")", ",", "\n", "img_info", "=", "dict", "(", "filename", "=", "'color.jpg'", ")", ")", "\n", "load", "=", "dict", "(", "type", "=", "'LoadImageFromFile'", ")", "\n", "load", "=", "build_from_cfg", "(", "load", ",", "PIPELINES", ")", "\n", "transform", "=", "dict", "(", "type", "=", "'Resize'", ",", "img_scale", "=", "(", "1333", ",", "800", ")", ",", "keep_ratio", "=", "True", ")", "\n", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "load", "(", "results", ")", "\n", "results", "[", "'scale'", "]", "=", "(", "1333", ",", "800", ")", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "results", "=", "transform", "(", "results", ")", "\n", "\n", "", "transform", "=", "dict", "(", "type", "=", "'Resize'", ",", "img_scale", "=", "(", "1333", ",", "800", ")", ",", "keep_ratio", "=", "True", ")", "\n", "resize_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data/color.jpg'", ")", ",", "'color'", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img2'", "]", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", ",", "'img2'", "]", "\n", "\n", "results", "=", "resize_module", "(", "results", ")", "\n", "assert", "np", ".", "equal", "(", "results", "[", "'img'", "]", ",", "results", "[", "'img2'", "]", ")", ".", "all", "(", ")", "\n", "\n", "results", ".", "pop", "(", "'scale'", ")", "\n", "results", ".", "pop", "(", "'scale_factor'", ")", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Resize'", ",", "\n", "img_scale", "=", "(", "1280", ",", "800", ")", ",", "\n", "multiscale_mode", "=", "'value'", ",", "\n", "keep_ratio", "=", "False", ")", "\n", "resize_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "resize_module", "(", "results", ")", "\n", "assert", "np", ".", "equal", "(", "results", "[", "'img'", "]", ",", "results", "[", "'img2'", "]", ")", ".", "all", "(", ")", "\n", "assert", "results", "[", "'img_shape'", "]", "==", "(", "800", ",", "1280", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_transform.test_flip": [[82, 181], ["dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "copy.deepcopy", "copy.deepcopy", "mmcv.utils.build_from_cfg.", "numpy.equal().all", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "numpy.equal().all", "numpy.equal().all", "dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "copy.deepcopy", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "copy.deepcopy", "mmcv.utils.build_from_cfg.", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "os.join", "os.join", "numpy.array_equal", "numpy.array_equal", "os.join", "numpy.array_equal", "numpy.array_equal", "os.dirname", "numpy.equal", "numpy.equal", "numpy.equal", "os.dirname", "mmcv.imflip", "os.dirname", "mmcv.imflip"], "function", ["None"], ["", "def", "test_flip", "(", ")", ":", "\n", "# test assertion for invalid flip_ratio", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'RandomFlip'", ",", "flip_ratio", "=", "1.5", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "# test assertion for 0 <= sum(flip_ratio) <= 1", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomFlip'", ",", "\n", "flip_ratio", "=", "[", "0.7", ",", "0.8", "]", ",", "\n", "direction", "=", "[", "'horizontal'", ",", "'vertical'", "]", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for mismatch between number of flip_ratio and direction", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'RandomFlip'", ",", "flip_ratio", "=", "[", "0.4", ",", "0.5", "]", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid direction", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomFlip'", ",", "flip_ratio", "=", "1.", ",", "direction", "=", "'horizonta'", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "transform", "=", "dict", "(", "type", "=", "'RandomFlip'", ",", "flip_ratio", "=", "1.", ")", "\n", "flip_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data/color.jpg'", ")", ",", "'color'", ")", "\n", "original_img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img2'", "]", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", ",", "'img2'", "]", "\n", "\n", "results", "=", "flip_module", "(", "results", ")", "\n", "assert", "np", ".", "equal", "(", "results", "[", "'img'", "]", ",", "results", "[", "'img2'", "]", ")", ".", "all", "(", ")", "\n", "\n", "flip_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "flip_module", "(", "results", ")", "\n", "assert", "np", ".", "equal", "(", "results", "[", "'img'", "]", ",", "results", "[", "'img2'", "]", ")", ".", "all", "(", ")", "\n", "assert", "np", ".", "equal", "(", "original_img", ",", "results", "[", "'img'", "]", ")", ".", "all", "(", ")", "\n", "\n", "# test flip_ratio is float, direction is list", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomFlip'", ",", "\n", "flip_ratio", "=", "0.9", ",", "\n", "direction", "=", "[", "'horizontal'", ",", "'vertical'", ",", "'diagonal'", "]", ")", "\n", "flip_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data/color.jpg'", ")", ",", "'color'", ")", "\n", "original_img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "results", "=", "flip_module", "(", "results", ")", "\n", "if", "results", "[", "'flip'", "]", ":", "\n", "        ", "assert", "np", ".", "array_equal", "(", "\n", "mmcv", ".", "imflip", "(", "original_img", ",", "results", "[", "'flip_direction'", "]", ")", ",", "\n", "results", "[", "'img'", "]", ")", "\n", "", "else", ":", "\n", "        ", "assert", "np", ".", "array_equal", "(", "original_img", ",", "results", "[", "'img'", "]", ")", "\n", "\n", "# test flip_ratio is list, direction is list", "\n", "", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomFlip'", ",", "\n", "flip_ratio", "=", "[", "0.3", ",", "0.3", ",", "0.2", "]", ",", "\n", "direction", "=", "[", "'horizontal'", ",", "'vertical'", ",", "'diagonal'", "]", ")", "\n", "flip_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data/color.jpg'", ")", ",", "'color'", ")", "\n", "original_img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "results", "=", "flip_module", "(", "results", ")", "\n", "if", "results", "[", "'flip'", "]", ":", "\n", "        ", "assert", "np", ".", "array_equal", "(", "\n", "mmcv", ".", "imflip", "(", "original_img", ",", "results", "[", "'flip_direction'", "]", ")", ",", "\n", "results", "[", "'img'", "]", ")", "\n", "", "else", ":", "\n", "        ", "assert", "np", ".", "array_equal", "(", "original_img", ",", "results", "[", "'img'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_transform.test_random_crop": [[183, 304], ["dict", "mmcv.imread", "test_transform.test_random_crop.create_random_bboxes"], "function", ["None"], ["", "", "def", "test_random_crop", "(", ")", ":", "\n", "# test assertion for invalid random crop", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'RandomCrop'", ",", "crop_size", "=", "(", "-", "1", ",", "0", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data/color.jpg'", ")", ",", "'color'", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# TODO: add img_fields test", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", ",", "'gt_bboxes_ignore'", "]", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "\n", "def", "create_random_bboxes", "(", "num_bboxes", ",", "img_w", ",", "img_h", ")", ":", "\n", "        ", "bboxes_left_top", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.5", ",", "size", "=", "(", "num_bboxes", ",", "2", ")", ")", "\n", "bboxes_right_bottom", "=", "np", ".", "random", ".", "uniform", "(", "0.5", ",", "1", ",", "size", "=", "(", "num_bboxes", ",", "2", ")", ")", "\n", "bboxes", "=", "np", ".", "concatenate", "(", "(", "bboxes_left_top", ",", "bboxes_right_bottom", ")", ",", "1", ")", "\n", "bboxes", "=", "(", "bboxes", "*", "np", ".", "array", "(", "[", "img_w", ",", "img_h", ",", "img_w", ",", "img_h", "]", ")", ")", ".", "astype", "(", "\n", "np", ".", "int", ")", "\n", "return", "bboxes", "\n", "\n", "", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "gt_bboxes", "=", "create_random_bboxes", "(", "8", ",", "w", ",", "h", ")", "\n", "gt_bboxes_ignore", "=", "create_random_bboxes", "(", "2", ",", "w", ",", "h", ")", "\n", "results", "[", "'gt_bboxes'", "]", "=", "gt_bboxes", "\n", "results", "[", "'gt_bboxes_ignore'", "]", "=", "gt_bboxes_ignore", "\n", "transform", "=", "dict", "(", "type", "=", "'RandomCrop'", ",", "crop_size", "=", "(", "h", "-", "20", ",", "w", "-", "20", ")", ")", "\n", "crop_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "crop_module", "(", "results", ")", "\n", "assert", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "==", "(", "h", "-", "20", ",", "w", "-", "20", ")", "\n", "# All bboxes should be reserved after crop", "\n", "assert", "results", "[", "'img_shape'", "]", "[", ":", "2", "]", "==", "(", "h", "-", "20", ",", "w", "-", "20", ")", "\n", "assert", "results", "[", "'gt_bboxes'", "]", ".", "shape", "[", "0", "]", "==", "8", "\n", "assert", "results", "[", "'gt_bboxes_ignore'", "]", ".", "shape", "[", "0", "]", "==", "2", "\n", "\n", "def", "area", "(", "bboxes", ")", ":", "\n", "        ", "return", "np", ".", "prod", "(", "bboxes", "[", ":", ",", "2", ":", "4", "]", "-", "bboxes", "[", ":", ",", "0", ":", "2", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "assert", "(", "area", "(", "results", "[", "'gt_bboxes'", "]", ")", "<=", "area", "(", "gt_bboxes", ")", ")", ".", "all", "(", ")", "\n", "assert", "(", "area", "(", "results", "[", "'gt_bboxes_ignore'", "]", ")", "<=", "area", "(", "gt_bboxes_ignore", ")", ")", ".", "all", "(", ")", "\n", "\n", "# test assertion for invalid crop_type", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomCrop'", ",", "crop_size", "=", "(", "1", ",", "1", ")", ",", "crop_type", "=", "'unknown'", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid crop_size", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomCrop'", ",", "crop_type", "=", "'relative'", ",", "crop_size", "=", "(", "0", ",", "0", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "def", "_construct_toy_data", "(", ")", ":", "\n", "        ", "img", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "5", ",", "6", ",", "7", ",", "8", "]", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "=", "np", ".", "stack", "(", "[", "img", ",", "img", ",", "img", "]", ",", "axis", "=", "-", "1", ")", "\n", "results", "=", "dict", "(", ")", "\n", "# image", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "# bboxes", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", ",", "'gt_bboxes_ignore'", "]", "\n", "results", "[", "'gt_bboxes'", "]", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "2.", ",", "1.", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "results", "[", "'gt_bboxes_ignore'", "]", "=", "np", ".", "array", "(", "[", "[", "2.", ",", "0.", ",", "3.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "# labels", "\n", "results", "[", "'gt_labels'", "]", "=", "np", ".", "array", "(", "[", "1", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "return", "results", "\n", "\n", "# test crop_type \"relative_range\"", "\n", "", "results", "=", "_construct_toy_data", "(", ")", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomCrop'", ",", "\n", "crop_type", "=", "'relative_range'", ",", "\n", "crop_size", "=", "(", "0.3", ",", "0.7", ")", ",", "\n", "allow_negative_crop", "=", "True", ")", "\n", "transform_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "h", ",", "w", "=", "results_transformed", "[", "'img_shape'", "]", "[", ":", "2", "]", "\n", "assert", "int", "(", "2", "*", "0.3", "+", "0.5", ")", "<=", "h", "<=", "int", "(", "2", "*", "1", "+", "0.5", ")", "\n", "assert", "int", "(", "4", "*", "0.7", "+", "0.5", ")", "<=", "w", "<=", "int", "(", "4", "*", "1", "+", "0.5", ")", "\n", "\n", "# test crop_type \"relative\"", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomCrop'", ",", "\n", "crop_type", "=", "'relative'", ",", "\n", "crop_size", "=", "(", "0.3", ",", "0.7", ")", ",", "\n", "allow_negative_crop", "=", "True", ")", "\n", "transform_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "h", ",", "w", "=", "results_transformed", "[", "'img_shape'", "]", "[", ":", "2", "]", "\n", "assert", "h", "==", "int", "(", "2", "*", "0.3", "+", "0.5", ")", "and", "w", "==", "int", "(", "4", "*", "0.7", "+", "0.5", ")", "\n", "\n", "# test crop_type \"absolute\"", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomCrop'", ",", "\n", "crop_type", "=", "'absolute'", ",", "\n", "crop_size", "=", "(", "1", ",", "2", ")", ",", "\n", "allow_negative_crop", "=", "True", ")", "\n", "transform_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "h", ",", "w", "=", "results_transformed", "[", "'img_shape'", "]", "[", ":", "2", "]", "\n", "assert", "h", "==", "1", "and", "w", "==", "2", "\n", "\n", "# test crop_type \"absolute_range\"", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomCrop'", ",", "\n", "crop_type", "=", "'absolute_range'", ",", "\n", "crop_size", "=", "(", "1", ",", "20", ")", ",", "\n", "allow_negative_crop", "=", "True", ")", "\n", "transform_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "h", ",", "w", "=", "results_transformed", "[", "'img_shape'", "]", "[", ":", "2", "]", "\n", "assert", "1", "<=", "h", "<=", "2", "and", "1", "<=", "w", "<=", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_transform.test_min_iou_random_crop": [[306, 354], ["dict", "mmcv.imread", "test_transform.test_random_crop.create_random_bboxes"], "function", ["None"], ["", "def", "test_min_iou_random_crop", "(", ")", ":", "\n", "\n", "    ", "def", "create_random_bboxes", "(", "num_bboxes", ",", "img_w", ",", "img_h", ")", ":", "\n", "        ", "bboxes_left_top", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.5", ",", "size", "=", "(", "num_bboxes", ",", "2", ")", ")", "\n", "bboxes_right_bottom", "=", "np", ".", "random", ".", "uniform", "(", "0.5", ",", "1", ",", "size", "=", "(", "num_bboxes", ",", "2", ")", ")", "\n", "bboxes", "=", "np", ".", "concatenate", "(", "(", "bboxes_left_top", ",", "bboxes_right_bottom", ")", ",", "1", ")", "\n", "bboxes", "=", "(", "bboxes", "*", "np", ".", "array", "(", "[", "img_w", ",", "img_h", ",", "img_w", ",", "img_h", "]", ")", ")", ".", "astype", "(", "\n", "np", ".", "int", ")", "\n", "return", "bboxes", "\n", "\n", "", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data/color.jpg'", ")", ",", "'color'", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", ",", "'gt_bboxes_ignore'", "]", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "gt_bboxes", "=", "create_random_bboxes", "(", "1", ",", "w", ",", "h", ")", "\n", "gt_bboxes_ignore", "=", "create_random_bboxes", "(", "1", ",", "w", ",", "h", ")", "\n", "results", "[", "'gt_bboxes'", "]", "=", "gt_bboxes", "\n", "results", "[", "'gt_bboxes_ignore'", "]", "=", "gt_bboxes_ignore", "\n", "transform", "=", "dict", "(", "type", "=", "'MinIoURandomCrop'", ")", "\n", "crop_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# Test for img_fields", "\n", "results_test", "=", "copy", ".", "deepcopy", "(", "results", ")", "\n", "results_test", "[", "'img1'", "]", "=", "results_test", "[", "'img'", "]", "\n", "results_test", "[", "'img_fields'", "]", "=", "[", "'img'", ",", "'img1'", "]", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "crop_module", "(", "results_test", ")", "\n", "", "results", "=", "crop_module", "(", "results", ")", "\n", "patch", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "results", "[", "'img_shape'", "]", "[", "1", "]", ",", "results", "[", "'img_shape'", "]", "[", "0", "]", "]", ")", "\n", "ious", "=", "bbox_overlaps", "(", "patch", ".", "reshape", "(", "-", "1", ",", "4", ")", ",", "\n", "results", "[", "'gt_bboxes'", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "ious_ignore", "=", "bbox_overlaps", "(", "\n", "patch", ".", "reshape", "(", "-", "1", ",", "4", ")", ",", "results", "[", "'gt_bboxes_ignore'", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "mode", "=", "crop_module", ".", "mode", "\n", "if", "mode", "==", "1", ":", "\n", "        ", "assert", "np", ".", "equal", "(", "results", "[", "'gt_bboxes'", "]", ",", "gt_bboxes", ")", ".", "all", "(", ")", "\n", "assert", "np", ".", "equal", "(", "results", "[", "'gt_bboxes_ignore'", "]", ",", "gt_bboxes_ignore", ")", ".", "all", "(", ")", "\n", "", "else", ":", "\n", "        ", "assert", "(", "ious", ">=", "mode", ")", ".", "all", "(", ")", "\n", "assert", "(", "ious_ignore", ">=", "mode", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_transform.test_pad": [[356, 394], ["dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "copy.deepcopy", "copy.deepcopy", "dict.", "numpy.equal().all", "numpy.equal().all", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict.", "numpy.equal().all", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "os.join", "os.dirname", "numpy.equal", "numpy.equal", "numpy.equal"], "function", ["None"], ["", "", "def", "test_pad", "(", ")", ":", "\n", "# test assertion if both size_divisor and size is None", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Pad'", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "transform", "=", "dict", "(", "type", "=", "'Pad'", ",", "size_divisor", "=", "32", ")", "\n", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data/color.jpg'", ")", ",", "'color'", ")", "\n", "original_img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img2'", "]", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", ",", "'img2'", "]", "\n", "\n", "results", "=", "transform", "(", "results", ")", "\n", "assert", "np", ".", "equal", "(", "results", "[", "'img'", "]", ",", "results", "[", "'img2'", "]", ")", ".", "all", "(", ")", "\n", "# original img already divisible by 32", "\n", "assert", "np", ".", "equal", "(", "results", "[", "'img'", "]", ",", "original_img", ")", ".", "all", "(", ")", "\n", "img_shape", "=", "results", "[", "'img'", "]", ".", "shape", "\n", "assert", "img_shape", "[", "0", "]", "%", "32", "==", "0", "\n", "assert", "img_shape", "[", "1", "]", "%", "32", "==", "0", "\n", "\n", "resize_transform", "=", "dict", "(", "\n", "type", "=", "'Resize'", ",", "img_scale", "=", "(", "1333", ",", "800", ")", ",", "keep_ratio", "=", "True", ")", "\n", "resize_module", "=", "build_from_cfg", "(", "resize_transform", ",", "PIPELINES", ")", "\n", "results", "=", "resize_module", "(", "results", ")", "\n", "results", "=", "transform", "(", "results", ")", "\n", "img_shape", "=", "results", "[", "'img'", "]", ".", "shape", "\n", "assert", "np", ".", "equal", "(", "results", "[", "'img'", "]", ",", "results", "[", "'img2'", "]", ")", ".", "all", "(", ")", "\n", "assert", "img_shape", "[", "0", "]", "%", "32", "==", "0", "\n", "assert", "img_shape", "[", "1", "]", "%", "32", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_transform.test_normalize": [[396, 423], ["dict", "dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "copy.deepcopy", "copy.deepcopy", "mmcv.utils.build_from_cfg.", "numpy.equal().all", "numpy.array", "numpy.array", "numpy.allclose", "os.join", "os.dirname", "numpy.equal"], "function", ["None"], ["", "def", "test_normalize", "(", ")", ":", "\n", "    ", "img_norm_cfg", "=", "dict", "(", "\n", "mean", "=", "[", "123.675", ",", "116.28", ",", "103.53", "]", ",", "\n", "std", "=", "[", "58.395", ",", "57.12", ",", "57.375", "]", ",", "\n", "to_rgb", "=", "True", ")", "\n", "transform", "=", "dict", "(", "type", "=", "'Normalize'", ",", "**", "img_norm_cfg", ")", "\n", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data/color.jpg'", ")", ",", "'color'", ")", "\n", "original_img", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img2'", "]", "=", "copy", ".", "deepcopy", "(", "img", ")", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", ",", "'img2'", "]", "\n", "\n", "results", "=", "transform", "(", "results", ")", "\n", "assert", "np", ".", "equal", "(", "results", "[", "'img'", "]", ",", "results", "[", "'img2'", "]", ")", ".", "all", "(", ")", "\n", "\n", "mean", "=", "np", ".", "array", "(", "img_norm_cfg", "[", "'mean'", "]", ")", "\n", "std", "=", "np", ".", "array", "(", "img_norm_cfg", "[", "'std'", "]", ")", "\n", "converted_img", "=", "(", "original_img", "[", "...", ",", ":", ":", "-", "1", "]", "-", "mean", ")", "/", "std", "\n", "assert", "np", ".", "allclose", "(", "results", "[", "'img'", "]", ",", "converted_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_transform.test_albu_transform": [[425, 447], ["dict", "dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "mmcv.utils.build_from_cfg.", "mmcv.utils.build_from_cfg.", "os.join", "dict", "os.dirname", "dict"], "function", ["None"], ["", "def", "test_albu_transform", "(", ")", ":", "\n", "    ", "results", "=", "dict", "(", "\n", "img_prefix", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data'", ")", ",", "\n", "img_info", "=", "dict", "(", "filename", "=", "'color.jpg'", ")", ")", "\n", "\n", "# Define simple pipeline", "\n", "load", "=", "dict", "(", "type", "=", "'LoadImageFromFile'", ")", "\n", "load", "=", "build_from_cfg", "(", "load", ",", "PIPELINES", ")", "\n", "\n", "albu_transform", "=", "dict", "(", "\n", "type", "=", "'Albu'", ",", "transforms", "=", "[", "dict", "(", "type", "=", "'ChannelShuffle'", ",", "p", "=", "1", ")", "]", ")", "\n", "albu_transform", "=", "build_from_cfg", "(", "albu_transform", ",", "PIPELINES", ")", "\n", "\n", "normalize", "=", "dict", "(", "type", "=", "'Normalize'", ",", "mean", "=", "[", "0", "]", "*", "3", ",", "std", "=", "[", "0", "]", "*", "3", ",", "to_rgb", "=", "True", ")", "\n", "normalize", "=", "build_from_cfg", "(", "normalize", ",", "PIPELINES", ")", "\n", "\n", "# Execute transforms", "\n", "results", "=", "load", "(", "results", ")", "\n", "results", "=", "albu_transform", "(", "results", ")", "\n", "results", "=", "normalize", "(", "results", ")", "\n", "\n", "assert", "results", "[", "'img'", "]", ".", "dtype", "==", "np", ".", "float32", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_transform.test_random_center_crop_pad": [[449, 593], ["dict", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "copy.deepcopy", "test_transform.test_random_crop.create_random_bboxes"], "function", ["None"], ["", "def", "test_random_center_crop_pad", "(", ")", ":", "\n", "# test assertion for invalid crop_size while test_mode=False", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomCenterCropPad'", ",", "\n", "crop_size", "=", "(", "-", "1", ",", "0", ")", ",", "\n", "test_mode", "=", "False", ",", "\n", "test_pad_mode", "=", "None", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid ratios while test_mode=False", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomCenterCropPad'", ",", "\n", "crop_size", "=", "(", "511", ",", "511", ")", ",", "\n", "ratios", "=", "(", "1.0", ")", ",", "\n", "test_mode", "=", "False", ",", "\n", "test_pad_mode", "=", "None", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid mean, std and to_rgb", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomCenterCropPad'", ",", "\n", "crop_size", "=", "(", "511", ",", "511", ")", ",", "\n", "mean", "=", "None", ",", "\n", "std", "=", "None", ",", "\n", "to_rgb", "=", "None", ",", "\n", "test_mode", "=", "False", ",", "\n", "test_pad_mode", "=", "None", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid crop_size while test_mode=True", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomCenterCropPad'", ",", "\n", "crop_size", "=", "(", "511", ",", "511", ")", ",", "\n", "ratios", "=", "None", ",", "\n", "border", "=", "None", ",", "\n", "mean", "=", "[", "123.675", ",", "116.28", ",", "103.53", "]", ",", "\n", "std", "=", "[", "58.395", ",", "57.12", ",", "57.375", "]", ",", "\n", "to_rgb", "=", "True", ",", "\n", "test_mode", "=", "True", ",", "\n", "test_pad_mode", "=", "(", "'logical_or'", ",", "127", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid ratios while test_mode=True", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomCenterCropPad'", ",", "\n", "crop_size", "=", "None", ",", "\n", "ratios", "=", "(", "0.9", ",", "1.0", ",", "1.1", ")", ",", "\n", "border", "=", "None", ",", "\n", "mean", "=", "[", "123.675", ",", "116.28", ",", "103.53", "]", ",", "\n", "std", "=", "[", "58.395", ",", "57.12", ",", "57.375", "]", ",", "\n", "to_rgb", "=", "True", ",", "\n", "test_mode", "=", "True", ",", "\n", "test_pad_mode", "=", "(", "'logical_or'", ",", "127", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid border while test_mode=True", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomCenterCropPad'", ",", "\n", "crop_size", "=", "None", ",", "\n", "ratios", "=", "None", ",", "\n", "border", "=", "128", ",", "\n", "mean", "=", "[", "123.675", ",", "116.28", ",", "103.53", "]", ",", "\n", "std", "=", "[", "58.395", ",", "57.12", ",", "57.375", "]", ",", "\n", "to_rgb", "=", "True", ",", "\n", "test_mode", "=", "True", ",", "\n", "test_pad_mode", "=", "(", "'logical_or'", ",", "127", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid test_pad_mode while test_mode=True", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'RandomCenterCropPad'", ",", "\n", "crop_size", "=", "None", ",", "\n", "ratios", "=", "None", ",", "\n", "border", "=", "None", ",", "\n", "mean", "=", "[", "123.675", ",", "116.28", ",", "103.53", "]", ",", "\n", "std", "=", "[", "58.395", ",", "57.12", ",", "57.375", "]", ",", "\n", "to_rgb", "=", "True", ",", "\n", "test_mode", "=", "True", ",", "\n", "test_pad_mode", "=", "(", "'do_nothing'", ",", "100", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "results", "=", "dict", "(", "\n", "img_prefix", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data'", ")", ",", "\n", "img_info", "=", "dict", "(", "filename", "=", "'color.jpg'", ")", ")", "\n", "\n", "load", "=", "dict", "(", "type", "=", "'LoadImageFromFile'", ",", "to_float32", "=", "True", ")", "\n", "load", "=", "build_from_cfg", "(", "load", ",", "PIPELINES", ")", "\n", "results", "=", "load", "(", "results", ")", "\n", "test_results", "=", "copy", ".", "deepcopy", "(", "results", ")", "\n", "\n", "def", "create_random_bboxes", "(", "num_bboxes", ",", "img_w", ",", "img_h", ")", ":", "\n", "        ", "bboxes_left_top", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "0.5", ",", "size", "=", "(", "num_bboxes", ",", "2", ")", ")", "\n", "bboxes_right_bottom", "=", "np", ".", "random", ".", "uniform", "(", "0.5", ",", "1", ",", "size", "=", "(", "num_bboxes", ",", "2", ")", ")", "\n", "bboxes", "=", "np", ".", "concatenate", "(", "(", "bboxes_left_top", ",", "bboxes_right_bottom", ")", ",", "1", ")", "\n", "bboxes", "=", "(", "bboxes", "*", "np", ".", "array", "(", "[", "img_w", ",", "img_h", ",", "img_w", ",", "img_h", "]", ")", ")", ".", "astype", "(", "\n", "np", ".", "int", ")", "\n", "return", "bboxes", "\n", "\n", "", "h", ",", "w", ",", "_", "=", "results", "[", "'img_shape'", "]", "\n", "gt_bboxes", "=", "create_random_bboxes", "(", "8", ",", "w", ",", "h", ")", "\n", "gt_bboxes_ignore", "=", "create_random_bboxes", "(", "2", ",", "w", ",", "h", ")", "\n", "results", "[", "'gt_bboxes'", "]", "=", "gt_bboxes", "\n", "results", "[", "'gt_bboxes_ignore'", "]", "=", "gt_bboxes_ignore", "\n", "train_transform", "=", "dict", "(", "\n", "type", "=", "'RandomCenterCropPad'", ",", "\n", "crop_size", "=", "(", "h", "-", "20", ",", "w", "-", "20", ")", ",", "\n", "ratios", "=", "(", "1.0", ",", ")", ",", "\n", "border", "=", "128", ",", "\n", "mean", "=", "[", "123.675", ",", "116.28", ",", "103.53", "]", ",", "\n", "std", "=", "[", "58.395", ",", "57.12", ",", "57.375", "]", ",", "\n", "to_rgb", "=", "True", ",", "\n", "test_mode", "=", "False", ",", "\n", "test_pad_mode", "=", "None", ")", "\n", "crop_module", "=", "build_from_cfg", "(", "train_transform", ",", "PIPELINES", ")", "\n", "train_results", "=", "crop_module", "(", "results", ")", "\n", "assert", "train_results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "==", "(", "h", "-", "20", ",", "w", "-", "20", ")", "\n", "# All bboxes should be reserved after crop", "\n", "assert", "train_results", "[", "'pad_shape'", "]", "[", ":", "2", "]", "==", "(", "h", "-", "20", ",", "w", "-", "20", ")", "\n", "assert", "train_results", "[", "'gt_bboxes'", "]", ".", "shape", "[", "0", "]", "==", "8", "\n", "assert", "train_results", "[", "'gt_bboxes_ignore'", "]", ".", "shape", "[", "0", "]", "==", "2", "\n", "\n", "test_transform", "=", "dict", "(", "\n", "type", "=", "'RandomCenterCropPad'", ",", "\n", "crop_size", "=", "None", ",", "\n", "ratios", "=", "None", ",", "\n", "border", "=", "None", ",", "\n", "mean", "=", "[", "123.675", ",", "116.28", ",", "103.53", "]", ",", "\n", "std", "=", "[", "58.395", ",", "57.12", ",", "57.375", "]", ",", "\n", "to_rgb", "=", "True", ",", "\n", "test_mode", "=", "True", ",", "\n", "test_pad_mode", "=", "(", "'logical_or'", ",", "127", ")", ")", "\n", "crop_module", "=", "build_from_cfg", "(", "test_transform", ",", "PIPELINES", ")", "\n", "\n", "test_results", "=", "crop_module", "(", "test_results", ")", "\n", "assert", "test_results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "==", "(", "h", "|", "127", ",", "w", "|", "127", ")", "\n", "assert", "test_results", "[", "'pad_shape'", "]", "[", ":", "2", "]", "==", "(", "h", "|", "127", ",", "w", "|", "127", ")", "\n", "assert", "'border'", "in", "test_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_transform.test_multi_scale_flip_aug": [[595, 686], ["dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.imread", "dict.", "dict", "mmcv.utils.build_from_cfg", "dict.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg", "dict.", "isinstance", "isinstance", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "os.join", "copy.deepcopy", "len", "copy.deepcopy", "len", "mmcv.Config.fromfile", "mmcv.utils.build_from_cfg.", "len", "len", "[].data[].tolist", "os.dirname", "os.join", "dict", "dict", "dict", "os.dirname", "dict", "dict", "dict", "dict"], "function", ["None"], ["", "def", "test_multi_scale_flip_aug", "(", ")", ":", "\n", "# test assertion if give both scale_factor and img_scale", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "scale_factor", "=", "1.0", ",", "\n", "img_scale", "=", "[", "(", "1333", ",", "800", ")", "]", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ")", "]", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion if both scale_factor and img_scale are None", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "scale_factor", "=", "None", ",", "\n", "img_scale", "=", "None", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ")", "]", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion if img_scale is not tuple or list of tuple", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "[", "1333", ",", "800", "]", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ")", "]", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion if flip_direction is not str or list of str", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "[", "(", "1333", ",", "800", ")", "]", ",", "\n", "flip_direction", "=", "1", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ")", "]", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "scale_transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "img_scale", "=", "[", "(", "1333", ",", "800", ")", ",", "(", "1333", ",", "640", ")", "]", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "True", ")", "]", ")", "\n", "transform", "=", "build_from_cfg", "(", "scale_transform", ",", "PIPELINES", ")", "\n", "\n", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data/color.jpg'", ")", ",", "'color'", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "\n", "scale_results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "len", "(", "scale_results", "[", "'img'", "]", ")", "==", "2", "\n", "assert", "scale_results", "[", "'img'", "]", "[", "0", "]", ".", "shape", "==", "(", "750", ",", "1333", ",", "3", ")", "\n", "assert", "scale_results", "[", "'img_shape'", "]", "[", "0", "]", "==", "(", "750", ",", "1333", ",", "3", ")", "\n", "assert", "scale_results", "[", "'img'", "]", "[", "1", "]", ".", "shape", "==", "(", "640", ",", "1138", ",", "3", ")", "\n", "assert", "scale_results", "[", "'img_shape'", "]", "[", "1", "]", "==", "(", "640", ",", "1138", ",", "3", ")", "\n", "\n", "scale_factor_transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "scale_factor", "=", "[", "0.8", ",", "1.0", ",", "1.2", "]", ",", "\n", "transforms", "=", "[", "dict", "(", "type", "=", "'Resize'", ",", "keep_ratio", "=", "False", ")", "]", ")", "\n", "transform", "=", "build_from_cfg", "(", "scale_factor_transform", ",", "PIPELINES", ")", "\n", "scale_factor_results", "=", "transform", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "len", "(", "scale_factor_results", "[", "'img'", "]", ")", "==", "3", "\n", "assert", "scale_factor_results", "[", "'img'", "]", "[", "0", "]", ".", "shape", "==", "(", "230", ",", "409", ",", "3", ")", "\n", "assert", "scale_factor_results", "[", "'img_shape'", "]", "[", "0", "]", "==", "(", "230", ",", "409", ",", "3", ")", "\n", "assert", "scale_factor_results", "[", "'img'", "]", "[", "1", "]", ".", "shape", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "scale_factor_results", "[", "'img_shape'", "]", "[", "1", "]", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "scale_factor_results", "[", "'img'", "]", "[", "2", "]", ".", "shape", "==", "(", "345", ",", "614", ",", "3", ")", "\n", "assert", "scale_factor_results", "[", "'img_shape'", "]", "[", "2", "]", "==", "(", "345", ",", "614", ",", "3", ")", "\n", "\n", "# test pipeline of coco_detection", "\n", "results", "=", "dict", "(", "\n", "img_prefix", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data'", ")", ",", "\n", "img_info", "=", "dict", "(", "filename", "=", "'color.jpg'", ")", ")", "\n", "load_cfg", ",", "multi_scale_cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "\n", "'configs/_base_/datasets/coco_detection.py'", ")", ".", "test_pipeline", "\n", "load", "=", "build_from_cfg", "(", "load_cfg", ",", "PIPELINES", ")", "\n", "transform", "=", "build_from_cfg", "(", "multi_scale_cfg", ",", "PIPELINES", ")", "\n", "results", "=", "transform", "(", "load", "(", "results", ")", ")", "\n", "assert", "len", "(", "results", "[", "'img'", "]", ")", "==", "1", "\n", "assert", "len", "(", "results", "[", "'img_metas'", "]", ")", "==", "1", "\n", "assert", "isinstance", "(", "results", "[", "'img'", "]", "[", "0", "]", ",", "torch", ".", "Tensor", ")", "\n", "assert", "isinstance", "(", "results", "[", "'img_metas'", "]", "[", "0", "]", ",", "mmcv", ".", "parallel", ".", "DataContainer", ")", "\n", "assert", "results", "[", "'img_metas'", "]", "[", "0", "]", ".", "data", "[", "'ori_shape'", "]", "==", "(", "288", ",", "512", ",", "3", ")", "\n", "assert", "results", "[", "'img_metas'", "]", "[", "0", "]", ".", "data", "[", "'img_shape'", "]", "==", "(", "750", ",", "1333", ",", "3", ")", "\n", "assert", "results", "[", "'img_metas'", "]", "[", "0", "]", ".", "data", "[", "'pad_shape'", "]", "==", "(", "768", ",", "1344", ",", "3", ")", "\n", "assert", "results", "[", "'img_metas'", "]", "[", "0", "]", ".", "data", "[", "'scale_factor'", "]", ".", "tolist", "(", ")", "==", "[", "\n", "2.603515625", ",", "2.6041667461395264", ",", "2.603515625", ",", "2.6041667461395264", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_transform.test_cutout": [[689, 753], ["dict", "mmcv.imread", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "os.join", "copy.deepcopy", "cutout_result[].sum", "mmcv.imread.sum", "copy.deepcopy", "cutout_result[].sum", "mmcv.imread.sum", "copy.deepcopy", "cutout_result[].sum", "mmcv.imread.sum", "copy.deepcopy", "cutout_result[].sum", "mmcv.imread.sum", "os.dirname"], "function", ["None"], ["", "def", "test_cutout", "(", ")", ":", "\n", "# test n_holes", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'CutOut'", ",", "n_holes", "=", "(", "5", ",", "3", ")", ",", "cutout_shape", "=", "(", "8", ",", "8", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'CutOut'", ",", "n_holes", "=", "(", "3", ",", "4", ",", "5", ")", ",", "cutout_shape", "=", "(", "8", ",", "8", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "# test cutout_shape and cutout_ratio", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'CutOut'", ",", "n_holes", "=", "1", ",", "cutout_shape", "=", "8", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'CutOut'", ",", "n_holes", "=", "1", ",", "cutout_ratio", "=", "0.2", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "# either of cutout_shape and cutout_ratio should be given", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'CutOut'", ",", "n_holes", "=", "1", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'CutOut'", ",", "\n", "n_holes", "=", "1", ",", "\n", "cutout_shape", "=", "(", "2", ",", "2", ")", ",", "\n", "cutout_ratio", "=", "(", "0.4", ",", "0.4", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "results", "=", "dict", "(", ")", "\n", "img", "=", "mmcv", ".", "imread", "(", "\n", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data/color.jpg'", ")", ",", "'color'", ")", "\n", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "\n", "transform", "=", "dict", "(", "type", "=", "'CutOut'", ",", "n_holes", "=", "1", ",", "cutout_shape", "=", "(", "10", ",", "10", ")", ")", "\n", "cutout_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "cutout_result", "=", "cutout_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "cutout_result", "[", "'img'", "]", ".", "sum", "(", ")", "<", "img", ".", "sum", "(", ")", "\n", "\n", "transform", "=", "dict", "(", "type", "=", "'CutOut'", ",", "n_holes", "=", "1", ",", "cutout_ratio", "=", "(", "0.8", ",", "0.8", ")", ")", "\n", "cutout_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "cutout_result", "=", "cutout_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "cutout_result", "[", "'img'", "]", ".", "sum", "(", ")", "<", "img", ".", "sum", "(", ")", "\n", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'CutOut'", ",", "\n", "n_holes", "=", "(", "2", ",", "4", ")", ",", "\n", "cutout_shape", "=", "[", "(", "10", ",", "10", ")", ",", "(", "15", ",", "15", ")", "]", ",", "\n", "fill_in", "=", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "cutout_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "cutout_result", "=", "cutout_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "cutout_result", "[", "'img'", "]", ".", "sum", "(", ")", ">", "img", ".", "sum", "(", ")", "\n", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'CutOut'", ",", "\n", "n_holes", "=", "1", ",", "\n", "cutout_ratio", "=", "(", "0.8", ",", "0.8", ")", ",", "\n", "fill_in", "=", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "cutout_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "cutout_result", "=", "cutout_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert", "cutout_result", "[", "'img'", "]", ".", "sum", "(", ")", ">", "img", ".", "sum", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_shear.construct_toy_data": [[11, 40], ["numpy.array", "numpy.stack", "dict", "numpy.array", "numpy.array", "numpy.array", "mmdet.core.mask.BitmapMasks", "mmdet.core.mask.PolygonMasks", "numpy.array", "numpy.array"], "function", ["None"], ["def", "construct_toy_data", "(", "poly2mask", "=", "True", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "5", ",", "6", ",", "7", ",", "8", "]", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "=", "np", ".", "stack", "(", "[", "img", ",", "img", ",", "img", "]", ",", "axis", "=", "-", "1", ")", "\n", "results", "=", "dict", "(", ")", "\n", "# image", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "# bboxes", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", ",", "'gt_bboxes_ignore'", "]", "\n", "results", "[", "'gt_bboxes'", "]", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "2.", ",", "1.", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "results", "[", "'gt_bboxes_ignore'", "]", "=", "np", ".", "array", "(", "[", "[", "2.", ",", "0.", ",", "3.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "# labels", "\n", "results", "[", "'gt_labels'", "]", "=", "np", ".", "array", "(", "[", "1", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "# masks", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "'gt_masks'", "]", "\n", "if", "poly2mask", ":", "\n", "        ", "gt_masks", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", ",", "0", "]", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "results", "[", "'gt_masks'", "]", "=", "BitmapMasks", "(", "gt_masks", ",", "2", ",", "4", ")", "\n", "", "else", ":", "\n", "        ", "raw_masks", "=", "[", "[", "np", ".", "array", "(", "[", "1", ",", "0", ",", "2", ",", "0", ",", "2", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", "]", "\n", "results", "[", "'gt_masks'", "]", "=", "PolygonMasks", "(", "raw_masks", ",", "2", ",", "4", ")", "\n", "\n", "# segmentations", "\n", "", "results", "[", "'seg_fields'", "]", "=", "[", "'gt_semantic_seg'", "]", "\n", "results", "[", "'gt_semantic_seg'", "]", "=", "img", "[", "...", ",", "0", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_shear._check_fields": [[42, 49], ["isinstance", "numpy.equal().all", "numpy.equal().all", "numpy.equal", "numpy.equal", "results[].to_ndarray", "results_sheared[].to_ndarray"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "def", "_check_fields", "(", "results", ",", "results_sheared", ",", "keys", ")", ":", "\n", "    ", "for", "key", "in", "keys", ":", "\n", "        ", "if", "isinstance", "(", "results", "[", "key", "]", ",", "(", "BitmapMasks", ",", "PolygonMasks", ")", ")", ":", "\n", "            ", "assert", "np", ".", "equal", "(", "results", "[", "key", "]", ".", "to_ndarray", "(", ")", ",", "\n", "results_sheared", "[", "key", "]", ".", "to_ndarray", "(", ")", ")", ".", "all", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "np", ".", "equal", "(", "results", "[", "key", "]", ",", "results_sheared", "[", "key", "]", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_shear.check_shear": [[51, 65], ["test_shear._check_fields", "test_shear._check_fields", "test_shear._check_fields", "test_shear._check_fields", "results.get", "results.get", "results.get", "results.get", "numpy.equal().all", "numpy.equal"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate._check_fields", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate._check_fields", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate._check_fields", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate._check_fields"], ["", "", "", "def", "check_shear", "(", "results", ",", "results_sheared", ")", ":", "\n", "# _check_keys(results, results_sheared)", "\n", "# check image", "\n", "    ", "_check_fields", "(", "results", ",", "results_sheared", ",", "results", ".", "get", "(", "'img_fields'", ",", "[", "'img'", "]", ")", ")", "\n", "# check bboxes", "\n", "_check_fields", "(", "results", ",", "results_sheared", ",", "results", ".", "get", "(", "'bbox_fields'", ",", "[", "]", ")", ")", "\n", "# check masks", "\n", "_check_fields", "(", "results", ",", "results_sheared", ",", "results", ".", "get", "(", "'mask_fields'", ",", "[", "]", ")", ")", "\n", "# check segmentations", "\n", "_check_fields", "(", "results", ",", "results_sheared", ",", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ")", "\n", "# check gt_labels", "\n", "if", "'gt_labels'", "in", "results", ":", "\n", "        ", "assert", "np", ".", "equal", "(", "results", "[", "'gt_labels'", "]", ",", "\n", "results_sheared", "[", "'gt_labels'", "]", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_shear.test_shear": [[67, 218], ["test_shear.construct_toy_data", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "test_shear.check_shear", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "test_shear.check_shear", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "test_shear.check_shear", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "copy.deepcopy", "numpy.array", "numpy.stack", "numpy.array", "numpy.array", "numpy.array", "mmdet.core.mask.BitmapMasks", "numpy.array", "test_shear.check_shear", "test_shear.construct_toy_data", "mmcv.utils.build_from_cfg.", "mmdet.core.mask.PolygonMasks", "test_shear.check_shear", "test_shear.construct_toy_data", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "copy.deepcopy", "numpy.array", "numpy.stack", "numpy.empty", "numpy.empty", "numpy.empty", "mmdet.core.mask.BitmapMasks", "numpy.array", "test_shear.check_shear", "test_shear.construct_toy_data", "mmcv.utils.build_from_cfg.", "mmdet.core.mask.PolygonMasks", "test_shear.check_shear", "test_shear.construct_toy_data", "mmdet.core.mask.BitmapMasks", "numpy.array", "mmcv.utils.build_from_cfg.", "test_shear.check_shear", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "numpy.array", "copy.deepcopy", "copy.deepcopy", "numpy.array", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "numpy.array", "numpy.array", "numpy.array", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_shear.check_shear", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_shear.check_shear", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_shear.check_shear", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_shear.check_shear", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_shear.check_shear", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_shear.check_shear", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_shear.check_shear", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_shear.check_shear"], ["", "", "def", "test_shear", "(", ")", ":", "\n", "# test assertion for invalid type of max_shear_magnitude", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Shear'", ",", "level", "=", "1", ",", "max_shear_magnitude", "=", "(", "0.5", ",", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid value of max_shear_magnitude", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Shear'", ",", "level", "=", "2", ",", "max_shear_magnitude", "=", "1.2", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test ValueError for invalid type of img_fill_val", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Shear'", ",", "level", "=", "2", ",", "img_fill_val", "=", "[", "128", "]", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "", "results", "=", "construct_toy_data", "(", ")", "\n", "# test case when no shear aug (level=0, direction='horizontal')", "\n", "img_fill_val", "=", "(", "104", ",", "116", ",", "124", ")", "\n", "seg_ignore_label", "=", "255", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Shear'", ",", "\n", "level", "=", "0", ",", "\n", "prob", "=", "1.", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "seg_ignore_label", "=", "seg_ignore_label", ",", "\n", "direction", "=", "'horizontal'", ")", "\n", "shear_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_wo_shear", "=", "shear_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "check_shear", "(", "results", ",", "results_wo_shear", ")", "\n", "\n", "# test case when no shear aug (level=0, direction='vertical')", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Shear'", ",", "\n", "level", "=", "0", ",", "\n", "prob", "=", "1.", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "seg_ignore_label", "=", "seg_ignore_label", ",", "\n", "direction", "=", "'vertical'", ")", "\n", "shear_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_wo_shear", "=", "shear_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "check_shear", "(", "results", ",", "results_wo_shear", ")", "\n", "\n", "# test case when no shear aug (prob<=0)", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Shear'", ",", "\n", "level", "=", "10", ",", "\n", "prob", "=", "0.", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "direction", "=", "'vertical'", ")", "\n", "shear_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_wo_shear", "=", "shear_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "check_shear", "(", "results", ",", "results_wo_shear", ")", "\n", "\n", "# test shear horizontally, magnitude=1", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Shear'", ",", "\n", "level", "=", "10", ",", "\n", "prob", "=", "1.", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "max_shear_magnitude", "=", "1.", ",", "\n", "random_negative_prob", "=", "0.", ")", "\n", "shear_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_sheared", "=", "shear_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "results_gt", "=", "copy", ".", "deepcopy", "(", "results", ")", "\n", "img_s", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "0", ",", "5", ",", "6", ",", "7", "]", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img_s", "=", "np", ".", "stack", "(", "[", "img_s", ",", "img_s", ",", "img_s", "]", ",", "axis", "=", "-", "1", ")", "\n", "img_s", "[", "1", ",", "0", ",", ":", "]", "=", "np", ".", "array", "(", "img_fill_val", ")", "\n", "results_gt", "[", "'img'", "]", "=", "img_s", "\n", "results_gt", "[", "'gt_bboxes'", "]", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "3.", ",", "1.", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "results_gt", "[", "'gt_bboxes_ignore'", "]", "=", "np", ".", "array", "(", "[", "[", "2.", ",", "0.", ",", "4.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_masks", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "0", "]", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "results_gt", "[", "'gt_masks'", "]", "=", "BitmapMasks", "(", "gt_masks", ",", "2", ",", "4", ")", "\n", "results_gt", "[", "'gt_semantic_seg'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "255", ",", "5", ",", "6", ",", "7", "]", "]", ",", "dtype", "=", "results", "[", "'gt_semantic_seg'", "]", ".", "dtype", ")", "\n", "check_shear", "(", "results_gt", ",", "results_sheared", ")", "\n", "\n", "# test PolygonMasks with shear horizontally, magnitude=1", "\n", "results", "=", "construct_toy_data", "(", "poly2mask", "=", "False", ")", "\n", "results_sheared", "=", "shear_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "gt_masks", "=", "[", "[", "np", ".", "array", "(", "[", "1", ",", "0", ",", "2", ",", "0", ",", "3", ",", "1", ",", "2", ",", "1", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", "]", "\n", "results_gt", "[", "'gt_masks'", "]", "=", "PolygonMasks", "(", "gt_masks", ",", "2", ",", "4", ")", "\n", "check_shear", "(", "results_gt", ",", "results_sheared", ")", "\n", "\n", "# test shear vertically, magnitude=-1", "\n", "img_fill_val", "=", "128", "\n", "results", "=", "construct_toy_data", "(", ")", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Shear'", ",", "\n", "level", "=", "10", ",", "\n", "prob", "=", "1.", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "direction", "=", "'vertical'", ",", "\n", "max_shear_magnitude", "=", "1.", ",", "\n", "random_negative_prob", "=", "1.", ")", "\n", "shear_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_sheared", "=", "shear_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "results_gt", "=", "copy", ".", "deepcopy", "(", "results", ")", "\n", "img_s", "=", "np", ".", "array", "(", "[", "[", "1", ",", "6", ",", "img_fill_val", ",", "img_fill_val", "]", ",", "\n", "[", "5", ",", "img_fill_val", ",", "img_fill_val", ",", "img_fill_val", "]", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "img_s", "=", "np", ".", "stack", "(", "[", "img_s", ",", "img_s", ",", "img_s", "]", ",", "axis", "=", "-", "1", ")", "\n", "results_gt", "[", "'img'", "]", "=", "img_s", "\n", "results_gt", "[", "'gt_bboxes'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "results_gt", "[", "'gt_labels'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "results_gt", "[", "'gt_bboxes_ignore'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_masks", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "results_gt", "[", "'gt_masks'", "]", "=", "BitmapMasks", "(", "gt_masks", ",", "2", ",", "4", ")", "\n", "results_gt", "[", "'gt_semantic_seg'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "1", ",", "6", ",", "255", ",", "255", "]", ",", "[", "5", ",", "255", ",", "255", ",", "255", "]", "]", ",", "\n", "dtype", "=", "results", "[", "'gt_semantic_seg'", "]", ".", "dtype", ")", "\n", "check_shear", "(", "results_gt", ",", "results_sheared", ")", "\n", "\n", "# test PolygonMasks with shear vertically, magnitude=-1", "\n", "results", "=", "construct_toy_data", "(", "poly2mask", "=", "False", ")", "\n", "results_sheared", "=", "shear_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "gt_masks", "=", "[", "[", "np", ".", "array", "(", "[", "1", ",", "0", ",", "2", ",", "0", ",", "2", ",", "0", ",", "1", ",", "0", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", "]", "\n", "results_gt", "[", "'gt_masks'", "]", "=", "PolygonMasks", "(", "gt_masks", ",", "2", ",", "4", ")", "\n", "check_shear", "(", "results_gt", ",", "results_sheared", ")", "\n", "\n", "results", "=", "construct_toy_data", "(", ")", "\n", "# same mask for BitmapMasks and PolygonMasks", "\n", "results", "[", "'gt_masks'", "]", "=", "BitmapMasks", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "[", "0", ",", "1", ",", "1", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "[", "None", ",", ":", ",", ":", "]", ",", "2", ",", "\n", "4", ")", "\n", "results", "[", "'gt_bboxes'", "]", "=", "np", ".", "array", "(", "[", "[", "1.", ",", "0.", ",", "2.", ",", "1.", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "results_sheared_bitmap", "=", "shear_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "check_shear", "(", "results_sheared_bitmap", ",", "results_sheared", ")", "\n", "\n", "# test AutoAugment equipped with Shear", "\n", "policies", "=", "[", "[", "dict", "(", "type", "=", "'Shear'", ",", "level", "=", "10", ",", "prob", "=", "1.", ")", "]", "]", "\n", "autoaug", "=", "dict", "(", "type", "=", "'AutoAugment'", ",", "policies", "=", "policies", ")", "\n", "autoaug_module", "=", "build_from_cfg", "(", "autoaug", ",", "PIPELINES", ")", "\n", "autoaug_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "\n", "policies", "=", "[", "[", "\n", "dict", "(", "type", "=", "'Shear'", ",", "level", "=", "10", ",", "prob", "=", "1.", ")", ",", "\n", "dict", "(", "\n", "type", "=", "'Shear'", ",", "\n", "level", "=", "8", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "direction", "=", "'vertical'", ",", "\n", "max_shear_magnitude", "=", "1.", ")", "\n", "]", "]", "\n", "autoaug", "=", "dict", "(", "type", "=", "'AutoAugment'", ",", "policies", "=", "policies", ")", "\n", "autoaug_module", "=", "build_from_cfg", "(", "autoaug", ",", "PIPELINES", ")", "\n", "autoaug_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate.construct_toy_data": [[11, 39], ["numpy.array", "numpy.stack", "dict", "numpy.array", "numpy.array", "numpy.array", "mmdet.core.mask.BitmapMasks", "mmdet.core.mask.PolygonMasks", "numpy.array", "numpy.array"], "function", ["None"], ["def", "construct_toy_data", "(", "poly2mask", "=", "True", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "5", ",", "6", ",", "7", ",", "8", "]", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "=", "np", ".", "stack", "(", "[", "img", ",", "img", ",", "img", "]", ",", "axis", "=", "-", "1", ")", "\n", "results", "=", "dict", "(", ")", "\n", "# image", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "# bboxes", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", ",", "'gt_bboxes_ignore'", "]", "\n", "results", "[", "'gt_bboxes'", "]", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "2.", ",", "1.", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "results", "[", "'gt_bboxes_ignore'", "]", "=", "np", ".", "array", "(", "[", "[", "2.", ",", "0.", ",", "3.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "# labels", "\n", "results", "[", "'gt_labels'", "]", "=", "np", ".", "array", "(", "[", "1", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "# masks", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "'gt_masks'", "]", "\n", "if", "poly2mask", ":", "\n", "        ", "gt_masks", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", ",", "0", "]", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "results", "[", "'gt_masks'", "]", "=", "BitmapMasks", "(", "gt_masks", ",", "2", ",", "4", ")", "\n", "", "else", ":", "\n", "        ", "raw_masks", "=", "[", "[", "np", ".", "array", "(", "[", "0", ",", "0", ",", "2", ",", "0", ",", "2", ",", "1", ",", "0", ",", "1", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", "]", "\n", "results", "[", "'gt_masks'", "]", "=", "PolygonMasks", "(", "raw_masks", ",", "2", ",", "4", ")", "\n", "# segmentations", "\n", "", "results", "[", "'seg_fields'", "]", "=", "[", "'gt_semantic_seg'", "]", "\n", "results", "[", "'gt_semantic_seg'", "]", "=", "img", "[", "...", ",", "0", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate._check_fields": [[41, 48], ["isinstance", "numpy.equal().all", "numpy.equal().all", "numpy.equal", "numpy.equal", "results[].to_ndarray", "results_rotated[].to_ndarray"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "def", "_check_fields", "(", "results", ",", "results_rotated", ",", "keys", ")", ":", "\n", "    ", "for", "key", "in", "keys", ":", "\n", "        ", "if", "isinstance", "(", "results", "[", "key", "]", ",", "(", "BitmapMasks", ",", "PolygonMasks", ")", ")", ":", "\n", "            ", "assert", "np", ".", "equal", "(", "results", "[", "key", "]", ".", "to_ndarray", "(", ")", ",", "\n", "results_rotated", "[", "key", "]", ".", "to_ndarray", "(", ")", ")", ".", "all", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "np", ".", "equal", "(", "results", "[", "key", "]", ",", "results_rotated", "[", "key", "]", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate.check_rotate": [[50, 63], ["test_rotate._check_fields", "test_rotate._check_fields", "test_rotate._check_fields", "test_rotate._check_fields", "results.get", "results.get", "results.get", "results.get", "numpy.equal().all", "numpy.equal"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate._check_fields", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate._check_fields", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate._check_fields", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate._check_fields"], ["", "", "", "def", "check_rotate", "(", "results", ",", "results_rotated", ")", ":", "\n", "# check image", "\n", "    ", "_check_fields", "(", "results", ",", "results_rotated", ",", "results", ".", "get", "(", "'img_fields'", ",", "[", "'img'", "]", ")", ")", "\n", "# check bboxes", "\n", "_check_fields", "(", "results", ",", "results_rotated", ",", "results", ".", "get", "(", "'bbox_fields'", ",", "[", "]", ")", ")", "\n", "# check masks", "\n", "_check_fields", "(", "results", ",", "results_rotated", ",", "results", ".", "get", "(", "'mask_fields'", ",", "[", "]", ")", ")", "\n", "# check segmentations", "\n", "_check_fields", "(", "results", ",", "results_rotated", ",", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ")", "\n", "# _check gt_labels", "\n", "if", "'gt_labels'", "in", "results", ":", "\n", "        ", "assert", "np", ".", "equal", "(", "results", "[", "'gt_labels'", "]", ",", "\n", "results_rotated", "[", "'gt_labels'", "]", ")", ".", "all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate.test_rotate": [[65, 225], ["test_rotate.construct_toy_data", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "test_rotate.check_rotate", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "test_rotate.check_rotate", "test_rotate.construct_toy_data", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "numpy.array().astype", "numpy.stack", "copy.deepcopy", "numpy.array", "numpy.empty", "mmdet.core.mask.BitmapMasks", "numpy.array().astype", "test_rotate.check_rotate", "test_rotate.construct_toy_data", "mmcv.utils.build_from_cfg.", "mmdet.core.mask.PolygonMasks", "test_rotate.check_rotate", "dict", "test_rotate.construct_toy_data", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "copy.deepcopy", "numpy.stack().astype", "numpy.empty", "numpy.empty", "numpy.empty", "numpy.empty", "mmdet.core.mask.BitmapMasks", "test_rotate.check_rotate", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "test_rotate.check_rotate", "test_rotate.construct_toy_data", "mmcv.utils.build_from_cfg.", "mmdet.core.mask.PolygonMasks", "test_rotate.check_rotate", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "pytest.raises", "dict", "mmcv.utils.build_from_cfg", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "numpy.array", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "numpy.array", "numpy.array", "numpy.array", "numpy.stack", "numpy.array", "dict", "dict", "dict", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate.check_rotate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate.check_rotate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate.check_rotate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate.check_rotate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate.check_rotate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate.check_rotate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_rotate.check_rotate"], ["", "", "def", "test_rotate", "(", ")", ":", "\n", "# test assertion for invalid type of max_rotate_angle", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Rotate'", ",", "level", "=", "1", ",", "max_rotate_angle", "=", "(", "30", ",", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid type of scale", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Rotate'", ",", "level", "=", "2", ",", "scale", "=", "(", "1.2", ",", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test ValueError for invalid type of img_fill_val", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'Rotate'", ",", "level", "=", "2", ",", "img_fill_val", "=", "[", "\n", "128", ",", "\n", "]", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid number of elements in center", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Rotate'", ",", "level", "=", "2", ",", "center", "=", "(", "0.5", ",", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid type of center", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Rotate'", ",", "level", "=", "2", ",", "center", "=", "[", "0", ",", "0", "]", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test case when no rotate aug (level=0)", "\n", "", "results", "=", "construct_toy_data", "(", ")", "\n", "img_fill_val", "=", "(", "104", ",", "116", ",", "124", ")", "\n", "seg_ignore_label", "=", "255", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Rotate'", ",", "\n", "level", "=", "0", ",", "\n", "prob", "=", "1.", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "seg_ignore_label", "=", "seg_ignore_label", ",", "\n", ")", "\n", "rotate_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_wo_rotate", "=", "rotate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "check_rotate", "(", "results", ",", "results_wo_rotate", ")", "\n", "\n", "# test case when no rotate aug (prob<=0)", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Rotate'", ",", "level", "=", "10", ",", "prob", "=", "0.", ",", "img_fill_val", "=", "img_fill_val", ",", "scale", "=", "0.6", ")", "\n", "rotate_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_wo_rotate", "=", "rotate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "check_rotate", "(", "results", ",", "results_wo_rotate", ")", "\n", "\n", "# test clockwise rotation with angle 90", "\n", "results", "=", "construct_toy_data", "(", ")", "\n", "img_fill_val", "=", "128", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Rotate'", ",", "\n", "level", "=", "10", ",", "\n", "max_rotate_angle", "=", "90", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "# set random_negative_prob to 0 for clockwise rotation", "\n", "random_negative_prob", "=", "0.", ",", "\n", "prob", "=", "1.", ")", "\n", "rotate_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_rotated", "=", "rotate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "img_r", "=", "np", ".", "array", "(", "[", "[", "img_fill_val", ",", "6", ",", "2", ",", "img_fill_val", "]", ",", "\n", "[", "img_fill_val", ",", "7", ",", "3", ",", "img_fill_val", "]", "]", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img_r", "=", "np", ".", "stack", "(", "[", "img_r", ",", "img_r", ",", "img_r", "]", ",", "axis", "=", "-", "1", ")", "\n", "results_gt", "=", "copy", ".", "deepcopy", "(", "results", ")", "\n", "results_gt", "[", "'img'", "]", "=", "img_r", "\n", "results_gt", "[", "'gt_bboxes'", "]", "=", "np", ".", "array", "(", "[", "[", "1.", ",", "0.", ",", "2.", ",", "1.", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "results_gt", "[", "'gt_bboxes_ignore'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_masks", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "0", "]", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "results_gt", "[", "'gt_masks'", "]", "=", "BitmapMasks", "(", "gt_masks", ",", "2", ",", "4", ")", "\n", "results_gt", "[", "'gt_semantic_seg'", "]", "=", "np", ".", "array", "(", "\n", "[", "[", "255", ",", "6", ",", "2", ",", "255", "]", ",", "[", "255", ",", "7", ",", "3", ",", "\n", "255", "]", "]", ")", ".", "astype", "(", "results", "[", "'gt_semantic_seg'", "]", ".", "dtype", ")", "\n", "check_rotate", "(", "results_gt", ",", "results_rotated", ")", "\n", "\n", "# test clockwise rotation with angle 90, PolygonMasks", "\n", "results", "=", "construct_toy_data", "(", "poly2mask", "=", "False", ")", "\n", "results_rotated", "=", "rotate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "gt_masks", "=", "[", "[", "np", ".", "array", "(", "[", "2", ",", "0", ",", "2", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", "]", "\n", "results_gt", "[", "'gt_masks'", "]", "=", "PolygonMasks", "(", "gt_masks", ",", "2", ",", "4", ")", "\n", "check_rotate", "(", "results_gt", ",", "results_rotated", ")", "\n", "\n", "# test counter-clockwise roatation with angle 90,", "\n", "# and specify the ratation center", "\n", "img_fill_val", "=", "(", "104", ",", "116", ",", "124", ")", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Rotate'", ",", "\n", "level", "=", "10", ",", "\n", "max_rotate_angle", "=", "90", ",", "\n", "center", "=", "(", "0", ",", "0", ")", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "# set random_negative_prob to 1 for counter-clockwise rotation", "\n", "random_negative_prob", "=", "1.", ",", "\n", "prob", "=", "1.", ")", "\n", "results", "=", "construct_toy_data", "(", ")", "\n", "rotate_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_rotated", "=", "rotate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "results_gt", "=", "copy", ".", "deepcopy", "(", "results", ")", "\n", "h", ",", "w", "=", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "\n", "img_r", "=", "np", ".", "stack", "(", "[", "\n", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "*", "img_fill_val", "[", "0", "]", ",", "\n", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "*", "img_fill_val", "[", "1", "]", ",", "\n", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "*", "img_fill_val", "[", "2", "]", "\n", "]", ",", "\n", "axis", "=", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img_r", "[", "0", ",", "0", ",", ":", "]", "=", "1", "\n", "img_r", "[", "0", ",", "1", ",", ":", "]", "=", "5", "\n", "results_gt", "[", "'img'", "]", "=", "img_r", "\n", "results_gt", "[", "'gt_bboxes'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "results_gt", "[", "'gt_bboxes_ignore'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "results_gt", "[", "'gt_labels'", "]", "=", "np", ".", "empty", "(", "(", "0", ",", ")", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "gt_masks", "=", "np", ".", "empty", "(", "(", "0", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "results_gt", "[", "'gt_masks'", "]", "=", "BitmapMasks", "(", "gt_masks", ",", "h", ",", "w", ")", "\n", "gt_seg", "=", "(", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "*", "255", ")", ".", "astype", "(", "results", "[", "'gt_semantic_seg'", "]", ".", "dtype", ")", "\n", "gt_seg", "[", "0", ",", "0", "]", ",", "gt_seg", "[", "0", ",", "1", "]", "=", "1", ",", "5", "\n", "results_gt", "[", "'gt_semantic_seg'", "]", "=", "gt_seg", "\n", "check_rotate", "(", "results_gt", ",", "results_rotated", ")", "\n", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Rotate'", ",", "\n", "level", "=", "10", ",", "\n", "max_rotate_angle", "=", "90", ",", "\n", "center", "=", "(", "0", ")", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "random_negative_prob", "=", "1.", ",", "\n", "prob", "=", "1.", ")", "\n", "rotate_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_rotated", "=", "rotate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "check_rotate", "(", "results_gt", ",", "results_rotated", ")", "\n", "\n", "# test counter-clockwise roatation with angle 90,", "\n", "# and specify the ratation center, PolygonMasks", "\n", "results", "=", "construct_toy_data", "(", "poly2mask", "=", "False", ")", "\n", "results_rotated", "=", "rotate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "gt_masks", "=", "[", "[", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", "]", "\n", "results_gt", "[", "'gt_masks'", "]", "=", "PolygonMasks", "(", "gt_masks", ",", "2", ",", "4", ")", "\n", "check_rotate", "(", "results_gt", ",", "results_rotated", ")", "\n", "\n", "# test AutoAugment equipped with Rotate", "\n", "policies", "=", "[", "[", "dict", "(", "type", "=", "'Rotate'", ",", "level", "=", "10", ",", "prob", "=", "1.", ")", "]", "]", "\n", "autoaug", "=", "dict", "(", "type", "=", "'AutoAugment'", ",", "policies", "=", "policies", ")", "\n", "autoaug_module", "=", "build_from_cfg", "(", "autoaug", ",", "PIPELINES", ")", "\n", "autoaug_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "\n", "policies", "=", "[", "[", "\n", "dict", "(", "type", "=", "'Rotate'", ",", "level", "=", "10", ",", "prob", "=", "1.", ")", ",", "\n", "dict", "(", "\n", "type", "=", "'Rotate'", ",", "\n", "level", "=", "8", ",", "\n", "max_rotate_angle", "=", "90", ",", "\n", "center", "=", "(", "0", ")", ",", "\n", "img_fill_val", "=", "img_fill_val", ")", "\n", "]", "]", "\n", "autoaug", "=", "dict", "(", "type", "=", "'AutoAugment'", ",", "policies", "=", "policies", ")", "\n", "autoaug_module", "=", "build_from_cfg", "(", "autoaug", ",", "PIPELINES", ")", "\n", "autoaug_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._check_keys": [[12, 17], ["len", "len", "set().difference", "set().difference", "set", "set", "set", "results_translated.keys", "set", "results.keys", "results.keys", "results_translated.keys"], "function", ["None"], ["def", "_check_keys", "(", "results", ",", "results_translated", ")", ":", "\n", "    ", "assert", "len", "(", "set", "(", "results", ".", "keys", "(", ")", ")", ".", "difference", "(", "set", "(", "\n", "results_translated", ".", "keys", "(", ")", ")", ")", ")", "==", "0", "\n", "assert", "len", "(", "set", "(", "results_translated", ".", "keys", "(", ")", ")", ".", "difference", "(", "set", "(", "\n", "results", ".", "keys", "(", ")", ")", ")", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._pad": [[19, 27], ["isinstance", "isinstance", "numpy.stack().astype", "tuple", "len", "numpy.stack", "numpy.ones", "range"], "function", ["None"], ["", "def", "_pad", "(", "h", ",", "w", ",", "c", ",", "pad_val", ",", "axis", "=", "-", "1", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "assert", "isinstance", "(", "pad_val", ",", "(", "int", ",", "float", ",", "tuple", ")", ")", "\n", "if", "isinstance", "(", "pad_val", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "        ", "pad_val", "=", "tuple", "(", "[", "pad_val", "]", "*", "c", ")", "\n", "", "assert", "len", "(", "pad_val", ")", "==", "c", "\n", "pad_data", "=", "np", ".", "stack", "(", "[", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ")", "*", "pad_val", "[", "i", "]", "for", "i", "in", "range", "(", "c", ")", "]", ",", "\n", "axis", "=", "axis", ")", ".", "astype", "(", "dtype", ")", "\n", "return", "pad_data", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._construct_img": [[29, 37], ["img.astype.astype", "numpy.random.uniform"], "function", ["None"], ["", "def", "_construct_img", "(", "results", ")", ":", "\n", "    ", "h", ",", "w", "=", "results", "[", "'img_info'", "]", "[", "'height'", "]", ",", "results", "[", "'img_info'", "]", "[", "'width'", "]", "\n", "img", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "h", ",", "w", ",", "3", ")", ")", "*", "255", "\n", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._construct_ann_info": [[39, 73], ["numpy.array", "numpy.array", "numpy.array", "dict"], "function", ["None"], ["", "def", "_construct_ann_info", "(", "h", "=", "427", ",", "w", "=", "640", ",", "c", "=", "3", ")", ":", "\n", "    ", "bboxes", "=", "np", ".", "array", "(", "\n", "[", "[", "222.62", ",", "217.82", ",", "241.81", ",", "238.93", "]", ",", "[", "50.5", ",", "329.7", ",", "130.23", ",", "384.96", "]", ",", "\n", "[", "175.47", ",", "331.97", ",", "254.8", ",", "389.26", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "labels", "=", "np", ".", "array", "(", "[", "9", ",", "2", ",", "2", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "bboxes_ignore", "=", "np", ".", "array", "(", "[", "[", "59.", ",", "253.", ",", "311.", ",", "337.", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "masks", "=", "[", "\n", "[", "[", "222.62", ",", "217.82", ",", "222.62", ",", "238.93", ",", "241.81", ",", "238.93", ",", "240.85", ",", "218.78", "]", "]", ",", "\n", "[", "[", "\n", "69.19", ",", "332.17", ",", "82.39", ",", "330.25", ",", "97.24", ",", "329.7", ",", "114.01", ",", "331.35", ",", "116.76", ",", "\n", "337.39", ",", "119.78", ",", "343.17", ",", "128.03", ",", "344.54", ",", "128.86", ",", "347.84", ",", "124.18", ",", "\n", "350.59", ",", "129.96", ",", "358.01", ",", "130.23", ",", "366.54", ",", "129.13", ",", "377.81", ",", "125.28", ",", "\n", "382.48", ",", "119.78", ",", "381.93", ",", "117.31", ",", "377.54", ",", "116.21", ",", "379.46", ",", "114.83", ",", "\n", "382.21", ",", "107.14", ",", "383.31", ",", "105.49", ",", "378.36", ",", "77.99", ",", "377.54", ",", "75.79", ",", "\n", "381.11", ",", "69.74", ",", "381.93", ",", "66.72", ",", "378.91", ",", "65.07", ",", "377.81", ",", "63.15", ",", "379.19", ",", "\n", "62.32", ",", "383.31", ",", "52.7", ",", "384.96", ",", "50.5", ",", "379.46", ",", "51.32", ",", "375.61", ",", "51.6", ",", "\n", "370.11", ",", "51.6", ",", "364.06", ",", "53.52", ",", "354.99", ",", "56.27", ",", "344.54", ",", "59.57", ",", "336.29", ",", "\n", "66.45", ",", "332.72", "\n", "]", "]", ",", "\n", "[", "[", "\n", "175.47", ",", "386.86", ",", "175.87", ",", "376.44", ",", "177.08", ",", "351.2", ",", "189.1", ",", "332.77", ",", "\n", "194.31", ",", "331.97", ",", "236.37", ",", "332.77", ",", "244.79", ",", "342.39", ",", "246.79", ",", "346.79", ",", "\n", "248.39", ",", "345.99", ",", "251.6", ",", "345.59", ",", "254.8", ",", "348.0", ",", "254.8", ",", "351.6", ",", "250.0", ",", "\n", "352.0", ",", "250.0", ",", "354.81", ",", "251.6", ",", "358.41", ",", "251.6", ",", "364.42", ",", "251.6", ",", "370.03", ",", "\n", "252.8", ",", "378.04", ",", "252.8", ",", "384.05", ",", "250.8", ",", "387.26", ",", "246.39", ",", "387.66", ",", "\n", "245.19", ",", "386.46", ",", "242.38", ",", "388.86", ",", "233.97", ",", "389.26", ",", "232.77", ",", "388.06", ",", "\n", "232.77", ",", "383.65", ",", "195.91", ",", "381.25", ",", "195.91", ",", "384.86", ",", "191.1", ",", "384.86", ",", "\n", "187.49", ",", "385.26", ",", "186.69", ",", "382.85", ",", "184.29", ",", "382.45", ",", "183.09", ",", "387.26", ",", "\n", "178.68", ",", "388.46", ",", "176.28", ",", "387.66", "\n", "]", "]", "\n", "]", "\n", "return", "dict", "(", "\n", "bboxes", "=", "bboxes", ",", "labels", "=", "labels", ",", "bboxes_ignore", "=", "bboxes_ignore", ",", "masks", "=", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._load_bboxes": [[75, 83], ["ann_info[].copy", "ann_info.get", "ann_info.get.copy", "results[].append"], "function", ["None"], ["", "def", "_load_bboxes", "(", "results", ")", ":", "\n", "    ", "ann_info", "=", "results", "[", "'ann_info'", "]", "\n", "results", "[", "'gt_bboxes'", "]", "=", "ann_info", "[", "'bboxes'", "]", ".", "copy", "(", ")", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", "]", "\n", "gt_bboxes_ignore", "=", "ann_info", ".", "get", "(", "'bboxes_ignore'", ",", "None", ")", "\n", "if", "gt_bboxes_ignore", "is", "not", "None", ":", "\n", "        ", "results", "[", "'gt_bboxes_ignore'", "]", "=", "gt_bboxes_ignore", ".", "copy", "(", ")", "\n", "results", "[", "'bbox_fields'", "]", ".", "append", "(", "'gt_bboxes_ignore'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._load_labels": [[85, 87], ["[].copy"], "function", ["None"], ["", "", "def", "_load_labels", "(", "results", ")", ":", "\n", "    ", "results", "[", "'gt_labels'", "]", "=", "results", "[", "'ann_info'", "]", "[", "'labels'", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._poly2mask": [[89, 103], ["isinstance", "pycocotools.decode", "pycocotools.frPyObjects", "pycocotools.merge", "isinstance", "pycocotools.frPyObjects"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode"], ["", "def", "_poly2mask", "(", "mask_ann", ",", "img_h", ",", "img_w", ")", ":", "\n", "    ", "if", "isinstance", "(", "mask_ann", ",", "list", ")", ":", "\n", "# polygon -- a single object might consist of multiple parts", "\n", "# we merge all parts into one mask rle code", "\n", "        ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "mask_ann", ",", "img_h", ",", "img_w", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "", "elif", "isinstance", "(", "mask_ann", "[", "'counts'", "]", ",", "list", ")", ":", "\n", "# uncompressed RLE", "\n", "        ", "rle", "=", "maskUtils", ".", "frPyObjects", "(", "mask_ann", ",", "img_h", ",", "img_w", ")", "\n", "", "else", ":", "\n", "# rle", "\n", "        ", "rle", "=", "mask_ann", "\n", "", "mask", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._process_polygons": [[105, 112], ["numpy.array", "valid_polygons.append", "len", "len"], "function", ["None"], ["", "def", "_process_polygons", "(", "polygons", ")", ":", "\n", "    ", "polygons", "=", "[", "np", ".", "array", "(", "p", ")", "for", "p", "in", "polygons", "]", "\n", "valid_polygons", "=", "[", "]", "\n", "for", "polygon", "in", "polygons", ":", "\n", "        ", "if", "len", "(", "polygon", ")", "%", "2", "==", "0", "and", "len", "(", "polygon", ")", ">=", "6", ":", "\n", "            ", "valid_polygons", ".", "append", "(", "polygon", ")", "\n", "", "", "return", "valid_polygons", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._load_masks": [[114, 125], ["mmdet.core.mask.BitmapMasks", "mmdet.core.mask.PolygonMasks", "test_translate._poly2mask", "test_translate._process_polygons"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._poly2mask", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._process_polygons"], ["", "def", "_load_masks", "(", "results", ",", "poly2mask", "=", "True", ")", ":", "\n", "    ", "h", ",", "w", "=", "results", "[", "'img_info'", "]", "[", "'height'", "]", ",", "results", "[", "'img_info'", "]", "[", "'width'", "]", "\n", "gt_masks", "=", "results", "[", "'ann_info'", "]", "[", "'masks'", "]", "\n", "if", "poly2mask", ":", "\n", "        ", "gt_masks", "=", "BitmapMasks", "(", "[", "_poly2mask", "(", "mask", ",", "h", ",", "w", ")", "for", "mask", "in", "gt_masks", "]", ",", "\n", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "        ", "gt_masks", "=", "PolygonMasks", "(", "\n", "[", "_process_polygons", "(", "polygons", ")", "for", "polygons", "in", "gt_masks", "]", ",", "h", ",", "w", ")", "\n", "", "results", "[", "'gt_masks'", "]", "=", "gt_masks", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "'gt_masks'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._construct_semantic_seg": [[127, 132], ["numpy.random.uniform"], "function", ["None"], ["", "def", "_construct_semantic_seg", "(", "results", ")", ":", "\n", "    ", "h", ",", "w", "=", "results", "[", "'img_info'", "]", "[", "'height'", "]", ",", "results", "[", "'img_info'", "]", "[", "'width'", "]", "\n", "seg_toy", "=", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "h", ",", "w", ")", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "results", "[", "'gt_semantic_seg'", "]", "=", "seg_toy", "\n", "results", "[", "'seg_fields'", "]", "=", "[", "'gt_semantic_seg'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate.construct_toy_data": [[134, 146], ["dict", "test_translate._construct_ann_info", "dict", "test_translate._construct_img", "test_translate._load_bboxes", "test_translate._load_labels", "test_translate._load_masks", "test_translate._construct_semantic_seg"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._construct_ann_info", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._construct_img", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._load_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._load_labels", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._load_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate._construct_semantic_seg"], ["", "def", "construct_toy_data", "(", "poly2mask", "=", "True", ")", ":", "\n", "    ", "img_info", "=", "dict", "(", "height", "=", "427", ",", "width", "=", "640", ")", "\n", "ann_info", "=", "_construct_ann_info", "(", "h", "=", "img_info", "[", "'height'", "]", ",", "w", "=", "img_info", "[", "'width'", "]", ")", "\n", "results", "=", "dict", "(", "img_info", "=", "img_info", ",", "ann_info", "=", "ann_info", ")", "\n", "# construct image, similar to 'LoadImageFromFile'", "\n", "_construct_img", "(", "results", ")", "\n", "# 'LoadAnnotations' (bboxes, labels, masks, semantic_seg)", "\n", "_load_bboxes", "(", "results", ")", "\n", "_load_labels", "(", "results", ")", "\n", "_load_masks", "(", "results", ",", "poly2mask", ")", "\n", "_construct_semantic_seg", "(", "results", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_translate.test_translate": [[148, 516], ["test_translate.construct_toy_data", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "test_translate.test_translate.check_translate"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data"], ["", "def", "test_translate", "(", ")", ":", "\n", "# test assertion for invalid value of level", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Translate'", ",", "level", "=", "-", "1", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid type of level", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Translate'", ",", "level", "=", "[", "1", "]", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid prob", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "type", "=", "'Translate'", ",", "level", "=", "1", ",", "prob", "=", "-", "0.5", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for the num of elements in tuple img_fill_val", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'Translate'", ",", "level", "=", "1", ",", "img_fill_val", "=", "(", "128", ",", "128", ",", "128", ",", "128", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test ValueError for invalid type of img_fill_val", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'Translate'", ",", "level", "=", "1", ",", "img_fill_val", "=", "[", "128", ",", "128", ",", "128", "]", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid value of img_fill_val", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'Translate'", ",", "level", "=", "1", ",", "img_fill_val", "=", "(", "128", ",", "-", "1", ",", "256", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid value of direction", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'Translate'", ",", "level", "=", "1", ",", "img_fill_val", "=", "128", ",", "direction", "=", "'diagonal'", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# test assertion for invalid type of max_translate_offset", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "transform", "=", "dict", "(", "\n", "type", "=", "'Translate'", ",", "\n", "level", "=", "1", ",", "\n", "img_fill_val", "=", "128", ",", "\n", "max_translate_offset", "=", "(", "250.", ",", ")", ")", "\n", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "# construct toy data example for unit test", "\n", "", "results", "=", "construct_toy_data", "(", ")", "\n", "\n", "def", "_check_bbox_mask", "(", "results", ",", "\n", "results_translated", ",", "\n", "offset", ",", "\n", "direction", ",", "\n", "min_size", "=", "0.", ")", ":", "\n", "# The key correspondence from bboxes to labels and masks.", "\n", "        ", "bbox2label", "=", "{", "\n", "'gt_bboxes'", ":", "'gt_labels'", ",", "\n", "'gt_bboxes_ignore'", ":", "'gt_labels_ignore'", "\n", "}", "\n", "bbox2mask", "=", "{", "\n", "'gt_bboxes'", ":", "'gt_masks'", ",", "\n", "'gt_bboxes_ignore'", ":", "'gt_masks_ignore'", "\n", "}", "\n", "\n", "def", "_translate_bbox", "(", "bboxes", ",", "offset", ",", "direction", ",", "max_h", ",", "max_w", ")", ":", "\n", "            ", "if", "direction", "==", "'horizontal'", ":", "\n", "                ", "bboxes", "[", ":", ",", "0", ":", ":", "2", "]", "=", "bboxes", "[", ":", ",", "0", ":", ":", "2", "]", "+", "offset", "\n", "", "elif", "direction", "==", "'vertical'", ":", "\n", "                ", "bboxes", "[", ":", ",", "1", ":", ":", "2", "]", "=", "bboxes", "[", ":", ",", "1", ":", ":", "2", "]", "+", "offset", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "\n", "", "bboxes", "[", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "bboxes", "[", ":", ",", "0", ":", ":", "2", "]", ",", "0", ",", "max_w", ")", "\n", "bboxes", "[", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "bboxes", "[", ":", ",", "1", ":", ":", "2", "]", ",", "0", ",", "max_h", ")", "\n", "return", "bboxes", "\n", "\n", "", "h", ",", "w", ",", "c", "=", "results_translated", "[", "'img'", "]", ".", "shape", "\n", "for", "key", "in", "results_translated", ".", "get", "(", "'bbox_fields'", ",", "[", "]", ")", ":", "\n", "            ", "label_key", ",", "mask_key", "=", "bbox2label", "[", "key", "]", ",", "bbox2mask", "[", "key", "]", "\n", "# check length of key", "\n", "if", "label_key", "in", "results", ":", "\n", "                ", "assert", "len", "(", "results_translated", "[", "key", "]", ")", "==", "len", "(", "\n", "results_translated", "[", "label_key", "]", ")", "\n", "", "if", "mask_key", "in", "results", ":", "\n", "                ", "assert", "len", "(", "results_translated", "[", "key", "]", ")", "==", "len", "(", "\n", "results_translated", "[", "mask_key", "]", ")", "\n", "# construct gt_bboxes", "\n", "", "gt_bboxes", "=", "_translate_bbox", "(", "\n", "copy", ".", "deepcopy", "(", "results", "[", "key", "]", ")", ",", "offset", ",", "direction", ",", "h", ",", "w", ")", "\n", "valid_inds", "=", "(", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", ">", "min_size", ")", "&", "(", "\n", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", ">", "min_size", ")", "\n", "gt_bboxes", "=", "gt_bboxes", "[", "valid_inds", "]", "\n", "# check bbox", "\n", "assert", "np", ".", "equal", "(", "gt_bboxes", ",", "results_translated", "[", "key", "]", ")", ".", "all", "(", ")", "\n", "\n", "# construct gt_masks", "\n", "if", "mask_key", "not", "in", "results", ":", "\n", "# e.g. 'gt_masks_ignore'", "\n", "                ", "continue", "\n", "", "masks", ",", "masks_translated", "=", "results", "[", "mask_key", "]", ".", "to_ndarray", "(", "\n", ")", ",", "results_translated", "[", "mask_key", "]", ".", "to_ndarray", "(", ")", "\n", "assert", "masks", ".", "dtype", "==", "masks_translated", ".", "dtype", "\n", "if", "direction", "==", "'horizontal'", ":", "\n", "                ", "masks_pad", "=", "_pad", "(", "\n", "h", ",", "\n", "abs", "(", "offset", ")", ",", "\n", "masks", ".", "shape", "[", "0", "]", ",", "\n", "0", ",", "\n", "axis", "=", "0", ",", "\n", "dtype", "=", "masks", ".", "dtype", ")", "\n", "if", "offset", "<=", "0", ":", "\n", "# left shift", "\n", "                    ", "gt_masks", "=", "np", ".", "concatenate", "(", "\n", "(", "masks", "[", ":", ",", ":", ",", "-", "offset", ":", "]", ",", "masks_pad", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "# right shift", "\n", "                    ", "gt_masks", "=", "np", ".", "concatenate", "(", "\n", "(", "masks_pad", ",", "masks", "[", ":", ",", ":", ",", ":", "-", "offset", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "masks_pad", "=", "_pad", "(", "\n", "abs", "(", "offset", ")", ",", "\n", "w", ",", "\n", "masks", ".", "shape", "[", "0", "]", ",", "\n", "0", ",", "\n", "axis", "=", "0", ",", "\n", "dtype", "=", "masks", ".", "dtype", ")", "\n", "if", "offset", "<=", "0", ":", "\n", "# top shift", "\n", "                    ", "gt_masks", "=", "np", ".", "concatenate", "(", "\n", "(", "masks", "[", ":", ",", "-", "offset", ":", ",", ":", "]", ",", "masks_pad", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "# bottom shift", "\n", "                    ", "gt_masks", "=", "np", ".", "concatenate", "(", "\n", "(", "masks_pad", ",", "masks", "[", ":", ",", ":", "-", "offset", ",", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "", "", "gt_masks", "=", "gt_masks", "[", "valid_inds", "]", "\n", "# check masks", "\n", "assert", "np", ".", "equal", "(", "gt_masks", ",", "masks_translated", ")", ".", "all", "(", ")", "\n", "\n", "", "", "def", "_check_img_seg", "(", "results", ",", "results_translated", ",", "keys", ",", "offset", ",", "fill_val", ",", "\n", "direction", ")", ":", "\n", "        ", "for", "key", "in", "keys", ":", "\n", "            ", "assert", "isinstance", "(", "results_translated", "[", "key", "]", ",", "type", "(", "results", "[", "key", "]", ")", ")", "\n", "# assert type(results[key]) == type(results_translated[key])", "\n", "data", ",", "data_translated", "=", "results", "[", "key", "]", ",", "results_translated", "[", "key", "]", "\n", "if", "'mask'", "in", "key", ":", "\n", "                ", "data", ",", "data_translated", "=", "data", ".", "to_ndarray", "(", "\n", ")", ",", "data_translated", ".", "to_ndarray", "(", ")", "\n", "", "assert", "data", ".", "dtype", "==", "data_translated", ".", "dtype", "\n", "if", "'img'", "in", "key", ":", "\n", "                ", "data", ",", "data_translated", "=", "data", ".", "transpose", "(", "\n", "(", "2", ",", "0", ",", "1", ")", ")", ",", "data_translated", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "elif", "'seg'", "in", "key", ":", "\n", "                ", "data", ",", "data_translated", "=", "data", "[", "None", ",", ":", ",", ":", "]", ",", "data_translated", "[", "\n", "None", ",", ":", ",", ":", "]", "\n", "", "c", ",", "h", ",", "w", "=", "data", ".", "shape", "\n", "if", "direction", "==", "'horizontal'", ":", "\n", "                ", "data_pad", "=", "_pad", "(", "\n", "h", ",", "abs", "(", "offset", ")", ",", "c", ",", "fill_val", ",", "axis", "=", "0", ",", "dtype", "=", "data", ".", "dtype", ")", "\n", "if", "offset", "<=", "0", ":", "\n", "# left shift", "\n", "                    ", "data_gt", "=", "np", ".", "concatenate", "(", "(", "data", "[", ":", ",", ":", ",", "-", "offset", ":", "]", ",", "data_pad", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "# right shift", "\n", "                    ", "data_gt", "=", "np", ".", "concatenate", "(", "(", "data_pad", ",", "data", "[", ":", ",", ":", ",", ":", "-", "offset", "]", ")", ",", "\n", "axis", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "data_pad", "=", "_pad", "(", "\n", "abs", "(", "offset", ")", ",", "w", ",", "c", ",", "fill_val", ",", "axis", "=", "0", ",", "dtype", "=", "data", ".", "dtype", ")", "\n", "if", "offset", "<=", "0", ":", "\n", "# top shift", "\n", "                    ", "data_gt", "=", "np", ".", "concatenate", "(", "(", "data", "[", ":", ",", "-", "offset", ":", ",", ":", "]", ",", "data_pad", ")", ",", "\n", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "# bottom shift", "\n", "                    ", "data_gt", "=", "np", ".", "concatenate", "(", "(", "data_pad", ",", "data", "[", ":", ",", ":", "-", "offset", ",", ":", "]", ")", ",", "\n", "axis", "=", "1", ")", "\n", "", "", "if", "'mask'", "in", "key", ":", "\n", "# TODO assertion here. ``data_translated`` must be a subset", "\n", "# (or equal) of ``data_gt``", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "assert", "np", ".", "equal", "(", "data_gt", ",", "data_translated", ")", ".", "all", "(", ")", "\n", "\n", "", "", "", "def", "check_translate", "(", "results", ",", "\n", "results_translated", ",", "\n", "offset", ",", "\n", "img_fill_val", ",", "\n", "seg_ignore_label", ",", "\n", "direction", ",", "\n", "min_size", "=", "0", ")", ":", "\n", "# check keys", "\n", "        ", "_check_keys", "(", "results", ",", "results_translated", ")", "\n", "# check image", "\n", "_check_img_seg", "(", "results", ",", "results_translated", ",", "\n", "results", ".", "get", "(", "'img_fields'", ",", "[", "'img'", "]", ")", ",", "offset", ",", "\n", "img_fill_val", ",", "direction", ")", "\n", "# check segmentation map", "\n", "_check_img_seg", "(", "results", ",", "results_translated", ",", "\n", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ",", "offset", ",", "seg_ignore_label", ",", "\n", "direction", ")", "\n", "# check masks and bboxes", "\n", "_check_bbox_mask", "(", "results", ",", "results_translated", ",", "offset", ",", "direction", ",", "\n", "min_size", ")", "\n", "\n", "# test case when level=0 (without translate aug)", "\n", "", "img_fill_val", "=", "(", "104", ",", "116", ",", "124", ")", "\n", "seg_ignore_label", "=", "255", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Translate'", ",", "\n", "level", "=", "0", ",", "\n", "prob", "=", "1.0", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "seg_ignore_label", "=", "seg_ignore_label", ")", "\n", "translate_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_wo_translate", "=", "translate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "check_translate", "(", "\n", "copy", ".", "deepcopy", "(", "results", ")", ",", "\n", "results_wo_translate", ",", "\n", "0", ",", "\n", "img_fill_val", ",", "\n", "seg_ignore_label", ",", "\n", "'horizontal'", ",", "\n", ")", "\n", "\n", "# test case when level>0 and translate horizontally (left shift).", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Translate'", ",", "\n", "level", "=", "8", ",", "\n", "prob", "=", "1.0", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "random_negative_prob", "=", "1.0", ",", "\n", "seg_ignore_label", "=", "seg_ignore_label", ")", "\n", "translate_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "offset", "=", "translate_module", ".", "offset", "\n", "results_translated", "=", "translate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "check_translate", "(", "\n", "copy", ".", "deepcopy", "(", "results", ")", ",", "\n", "results_translated", ",", "\n", "-", "offset", ",", "\n", "img_fill_val", ",", "\n", "seg_ignore_label", ",", "\n", "'horizontal'", ",", "\n", ")", "\n", "\n", "# test case when level>0 and translate horizontally (right shift).", "\n", "translate_module", ".", "random_negative_prob", "=", "0.0", "\n", "results_translated", "=", "translate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "check_translate", "(", "\n", "copy", ".", "deepcopy", "(", "results", ")", ",", "\n", "results_translated", ",", "\n", "offset", ",", "\n", "img_fill_val", ",", "\n", "seg_ignore_label", ",", "\n", "'horizontal'", ",", "\n", ")", "\n", "\n", "# test case when level>0 and translate vertically (top shift).", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Translate'", ",", "\n", "level", "=", "10", ",", "\n", "prob", "=", "1.0", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "seg_ignore_label", "=", "seg_ignore_label", ",", "\n", "random_negative_prob", "=", "1.0", ",", "\n", "direction", "=", "'vertical'", ")", "\n", "translate_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "offset", "=", "translate_module", ".", "offset", "\n", "results_translated", "=", "translate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "check_translate", "(", "\n", "copy", ".", "deepcopy", "(", "results", ")", ",", "results_translated", ",", "-", "offset", ",", "img_fill_val", ",", "\n", "seg_ignore_label", ",", "'vertical'", ")", "\n", "\n", "# test case when level>0 and translate vertically (bottom shift).", "\n", "translate_module", ".", "random_negative_prob", "=", "0.0", "\n", "results_translated", "=", "translate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "check_translate", "(", "\n", "copy", ".", "deepcopy", "(", "results", ")", ",", "results_translated", ",", "offset", ",", "img_fill_val", ",", "\n", "seg_ignore_label", ",", "'vertical'", ")", "\n", "\n", "# test case when no translation is called (prob<=0)", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Translate'", ",", "\n", "level", "=", "8", ",", "\n", "prob", "=", "0.0", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "random_negative_prob", "=", "0.0", ",", "\n", "seg_ignore_label", "=", "seg_ignore_label", ")", "\n", "translate_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_translated", "=", "translate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "\n", "# test translate vertically with PolygonMasks (top shift)", "\n", "results", "=", "construct_toy_data", "(", "False", ")", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Translate'", ",", "\n", "level", "=", "10", ",", "\n", "prob", "=", "1.0", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "seg_ignore_label", "=", "seg_ignore_label", ",", "\n", "direction", "=", "'vertical'", ")", "\n", "translate_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "offset", "=", "translate_module", ".", "offset", "\n", "translate_module", ".", "random_negative_prob", "=", "1.0", "\n", "results_translated", "=", "translate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "\n", "def", "_translated_gt", "(", "masks", ",", "direction", ",", "offset", ",", "out_shape", ")", ":", "\n", "        ", "translated_masks", "=", "[", "]", "\n", "for", "poly_per_obj", "in", "masks", ":", "\n", "            ", "translated_poly_per_obj", "=", "[", "]", "\n", "for", "p", "in", "poly_per_obj", ":", "\n", "                ", "p", "=", "p", ".", "copy", "(", ")", "\n", "if", "direction", "==", "'horizontal'", ":", "\n", "                    ", "p", "[", "0", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "p", "[", "0", ":", ":", "2", "]", "+", "offset", ",", "0", ",", "out_shape", "[", "1", "]", ")", "\n", "", "elif", "direction", "==", "'vertical'", ":", "\n", "                    ", "p", "[", "1", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "p", "[", "1", ":", ":", "2", "]", "+", "offset", ",", "0", ",", "out_shape", "[", "0", "]", ")", "\n", "", "if", "PolygonMasks", "(", "[", "[", "p", "]", "]", ",", "*", "out_shape", ")", ".", "areas", "[", "0", "]", ">", "0", ":", "\n", "# filter invalid (area=0)", "\n", "                    ", "translated_poly_per_obj", ".", "append", "(", "p", ")", "\n", "", "", "if", "len", "(", "translated_poly_per_obj", ")", ":", "\n", "                ", "translated_masks", ".", "append", "(", "translated_poly_per_obj", ")", "\n", "", "", "translated_masks", "=", "PolygonMasks", "(", "translated_masks", ",", "*", "out_shape", ")", "\n", "return", "translated_masks", "\n", "\n", "", "h", ",", "w", "=", "results", "[", "'img_shape'", "]", "[", ":", "2", "]", "\n", "for", "key", "in", "results", ".", "get", "(", "'mask_fields'", ",", "[", "]", ")", ":", "\n", "        ", "masks", "=", "results", "[", "key", "]", "\n", "translated_gt", "=", "_translated_gt", "(", "masks", ",", "'vertical'", ",", "-", "offset", ",", "(", "h", ",", "w", ")", ")", "\n", "assert", "np", ".", "equal", "(", "results_translated", "[", "key", "]", ".", "to_ndarray", "(", ")", ",", "\n", "translated_gt", ".", "to_ndarray", "(", ")", ")", ".", "all", "(", ")", "\n", "\n", "# test translate horizontally with PolygonMasks (right shift)", "\n", "", "results", "=", "construct_toy_data", "(", "False", ")", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'Translate'", ",", "\n", "level", "=", "8", ",", "\n", "prob", "=", "1.0", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "random_negative_prob", "=", "0.0", ",", "\n", "seg_ignore_label", "=", "seg_ignore_label", ")", "\n", "translate_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "offset", "=", "translate_module", ".", "offset", "\n", "results_translated", "=", "translate_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "h", ",", "w", "=", "results", "[", "'img_shape'", "]", "[", ":", "2", "]", "\n", "for", "key", "in", "results", ".", "get", "(", "'mask_fields'", ",", "[", "]", ")", ":", "\n", "        ", "masks", "=", "results", "[", "key", "]", "\n", "translated_gt", "=", "_translated_gt", "(", "masks", ",", "'horizontal'", ",", "offset", ",", "(", "h", ",", "w", ")", ")", "\n", "assert", "np", ".", "equal", "(", "results_translated", "[", "key", "]", ".", "to_ndarray", "(", ")", ",", "\n", "translated_gt", ".", "to_ndarray", "(", ")", ")", ".", "all", "(", ")", "\n", "\n", "# test AutoAugment equipped with Translate", "\n", "", "policies", "=", "[", "[", "dict", "(", "type", "=", "'Translate'", ",", "level", "=", "10", ",", "prob", "=", "1.", ")", "]", "]", "\n", "autoaug", "=", "dict", "(", "type", "=", "'AutoAugment'", ",", "policies", "=", "policies", ")", "\n", "autoaug_module", "=", "build_from_cfg", "(", "autoaug", ",", "PIPELINES", ")", "\n", "autoaug_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "\n", "policies", "=", "[", "[", "\n", "dict", "(", "type", "=", "'Translate'", ",", "level", "=", "10", ",", "prob", "=", "1.", ")", ",", "\n", "dict", "(", "\n", "type", "=", "'Translate'", ",", "\n", "level", "=", "8", ",", "\n", "img_fill_val", "=", "img_fill_val", ",", "\n", "direction", "=", "'vertical'", ")", "\n", "]", "]", "\n", "autoaug", "=", "dict", "(", "type", "=", "'AutoAugment'", ",", "policies", "=", "policies", ")", "\n", "autoaug_module", "=", "build_from_cfg", "(", "autoaug", ",", "PIPELINES", ")", "\n", "autoaug_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data": [[12, 40], ["numpy.array", "numpy.stack", "dict", "numpy.array", "numpy.array", "numpy.array", "mmdet.core.mask.BitmapMasks", "mmdet.core.mask.PolygonMasks", "numpy.array", "numpy.array"], "function", ["None"], ["def", "construct_toy_data", "(", "poly2mask", "=", "True", ")", ":", "\n", "    ", "img", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "5", ",", "6", ",", "7", ",", "8", "]", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "=", "np", ".", "stack", "(", "[", "img", ",", "img", ",", "img", "]", ",", "axis", "=", "-", "1", ")", "\n", "results", "=", "dict", "(", ")", "\n", "# image", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "# bboxes", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", ",", "'gt_bboxes_ignore'", "]", "\n", "results", "[", "'gt_bboxes'", "]", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "2.", ",", "1.", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "results", "[", "'gt_bboxes_ignore'", "]", "=", "np", ".", "array", "(", "[", "[", "2.", ",", "0.", ",", "3.", ",", "1.", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "# labels", "\n", "results", "[", "'gt_labels'", "]", "=", "np", ".", "array", "(", "[", "1", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "# masks", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "'gt_masks'", "]", "\n", "if", "poly2mask", ":", "\n", "        ", "gt_masks", "=", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "1", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", ",", "0", "]", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "[", "None", ",", ":", ",", ":", "]", "\n", "results", "[", "'gt_masks'", "]", "=", "BitmapMasks", "(", "gt_masks", ",", "2", ",", "4", ")", "\n", "", "else", ":", "\n", "        ", "raw_masks", "=", "[", "[", "np", ".", "array", "(", "[", "1", ",", "0", ",", "2", ",", "0", ",", "2", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "np", ".", "float", ")", "]", "]", "\n", "results", "[", "'gt_masks'", "]", "=", "PolygonMasks", "(", "raw_masks", ",", "2", ",", "4", ")", "\n", "# segmentations", "\n", "", "results", "[", "'seg_fields'", "]", "=", "[", "'gt_semantic_seg'", "]", "\n", "results", "[", "'gt_semantic_seg'", "]", "=", "img", "[", "...", ",", "0", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.test_adjust_color": [[42, 71], ["test_img_augment.construct_toy_data", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "numpy.testing.assert_array_equal", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "numpy.testing.assert_array_equal", "mmcv.bgr2gray", "numpy.stack", "mmcv.utils.build_from_cfg.", "numpy.testing.assert_array_equal", "mmcv.utils.build_from_cfg.", "numpy.testing.assert_array_equal", "copy.deepcopy", "copy.deepcopy", "img.copy", "copy.deepcopy", "copy.deepcopy", "numpy.round().astype", "numpy.round", "numpy.clip"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data"], ["", "def", "test_adjust_color", "(", ")", ":", "\n", "    ", "results", "=", "construct_toy_data", "(", ")", "\n", "# test wighout aug", "\n", "transform", "=", "dict", "(", "type", "=", "'ColorTransform'", ",", "prob", "=", "0", ",", "level", "=", "10", ")", "\n", "transform_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert_array_equal", "(", "results_transformed", "[", "'img'", "]", ",", "results", "[", "'img'", "]", ")", "\n", "\n", "# test with factor 1", "\n", "img", "=", "results", "[", "'img'", "]", "\n", "transform", "=", "dict", "(", "type", "=", "'ColorTransform'", ",", "prob", "=", "1", ",", "level", "=", "10", ")", "\n", "transform_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert_array_equal", "(", "results_transformed", "[", "'img'", "]", ",", "img", ")", "\n", "\n", "# test with factor 0", "\n", "transform_module", ".", "factor", "=", "0", "\n", "img_gray", "=", "mmcv", ".", "bgr2gray", "(", "img", ".", "copy", "(", ")", ")", "\n", "img_r", "=", "np", ".", "stack", "(", "[", "img_gray", ",", "img_gray", ",", "img_gray", "]", ",", "axis", "=", "-", "1", ")", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert_array_equal", "(", "results_transformed", "[", "'img'", "]", ",", "img_r", ")", "\n", "\n", "# test with factor 0.5", "\n", "transform_module", ".", "factor", "=", "0.5", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "img", "=", "results", "[", "'img'", "]", "\n", "assert_array_equal", "(", "\n", "results_transformed", "[", "'img'", "]", ",", "\n", "np", ".", "round", "(", "np", ".", "clip", "(", "(", "img", "*", "0.5", "+", "img_r", "*", "0.5", ")", ",", "0", ",", "255", ")", ")", ".", "astype", "(", "img", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.test_imequalize": [[73, 106], ["test_img_augment.construct_toy_data", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "numpy.testing.assert_array_equal", "dict", "mmcv.utils.build_from_cfg", "numpy.array", "numpy.stack", "mmcv.utils.build_from_cfg.", "numpy.testing.assert_array_equal", "range", "Image.fromarray", "numpy.asarray", "copy.deepcopy", "copy.deepcopy", "numpy.clip().astype", "mmcv.utils.build_from_cfg.", "numpy.testing.assert_array_equal", "ImageOps.equalize", "copy.deepcopy", "test_img_augment.test_imequalize._imequalize"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.EqualizeTransform._imequalize"], ["", "def", "test_imequalize", "(", "nb_rand_test", "=", "100", ")", ":", "\n", "\n", "    ", "def", "_imequalize", "(", "img", ")", ":", "\n", "# equalize the image using PIL.ImageOps.equalize", "\n", "        ", "from", "PIL", "import", "ImageOps", ",", "Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "equalized_img", "=", "np", ".", "asarray", "(", "ImageOps", ".", "equalize", "(", "img", ")", ")", "\n", "return", "equalized_img", "\n", "\n", "", "results", "=", "construct_toy_data", "(", ")", "\n", "# test wighout aug", "\n", "transform", "=", "dict", "(", "type", "=", "'EqualizeTransform'", ",", "prob", "=", "0", ")", "\n", "transform_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert_array_equal", "(", "results_transformed", "[", "'img'", "]", ",", "results", "[", "'img'", "]", ")", "\n", "\n", "# test equalize with case step=0", "\n", "transform", "=", "dict", "(", "type", "=", "'EqualizeTransform'", ",", "prob", "=", "1.", ")", "\n", "transform_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "img", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "120", ",", "120", ",", "120", "]", ",", "[", "255", ",", "255", ",", "255", "]", "]", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "img", "=", "np", ".", "stack", "(", "[", "img", ",", "img", ",", "img", "]", ",", "axis", "=", "-", "1", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert_array_equal", "(", "results_transformed", "[", "'img'", "]", ",", "img", ")", "\n", "\n", "# test equalize with randomly sampled image.", "\n", "for", "_", "in", "range", "(", "nb_rand_test", ")", ":", "\n", "        ", "img", "=", "np", ".", "clip", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "1000", ",", "1200", ",", "3", ")", ")", "*", "260", ",", "0", ",", "\n", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert_array_equal", "(", "results_transformed", "[", "'img'", "]", ",", "_imequalize", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.test_adjust_brightness": [[108, 151], ["test_img_augment.construct_toy_data", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "numpy.testing.assert_array_equal", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "numpy.testing.assert_array_equal", "mmcv.utils.build_from_cfg.", "numpy.testing.assert_array_equal", "range", "Image.fromarray", "Brightness().enhance", "numpy.asarray", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "numpy.zeros_like", "numpy.clip().astype", "numpy.random.uniform", "numpy.testing.assert_allclose", "[].astype", "_adjust_brightness().astype", "Brightness", "numpy.clip", "test_img_augment.test_adjust_brightness._adjust_brightness"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data"], ["", "", "def", "test_adjust_brightness", "(", "nb_rand_test", "=", "100", ")", ":", "\n", "\n", "    ", "def", "_adjust_brightness", "(", "img", ",", "factor", ")", ":", "\n", "# adjust the brightness of image using", "\n", "# PIL.ImageEnhance.Brightness", "\n", "        ", "from", "PIL", ".", "ImageEnhance", "import", "Brightness", "\n", "from", "PIL", "import", "Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "brightened_img", "=", "Brightness", "(", "img", ")", ".", "enhance", "(", "factor", ")", "\n", "return", "np", ".", "asarray", "(", "brightened_img", ")", "\n", "\n", "", "results", "=", "construct_toy_data", "(", ")", "\n", "# test wighout aug", "\n", "transform", "=", "dict", "(", "type", "=", "'BrightnessTransform'", ",", "level", "=", "10", ",", "prob", "=", "0", ")", "\n", "transform_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert_array_equal", "(", "results_transformed", "[", "'img'", "]", ",", "results", "[", "'img'", "]", ")", "\n", "\n", "# test case with factor 1.0", "\n", "transform", "=", "dict", "(", "type", "=", "'BrightnessTransform'", ",", "level", "=", "10", ",", "prob", "=", "1.", ")", "\n", "transform_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "transform_module", ".", "factor", "=", "1.0", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert_array_equal", "(", "results_transformed", "[", "'img'", "]", ",", "results", "[", "'img'", "]", ")", "\n", "\n", "# test case with factor 0.0", "\n", "transform_module", ".", "factor", "=", "0.0", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert_array_equal", "(", "results_transformed", "[", "'img'", "]", ",", "\n", "np", ".", "zeros_like", "(", "results", "[", "'img'", "]", ")", ")", "\n", "\n", "# test with randomly sampled images and factors.", "\n", "for", "_", "in", "range", "(", "nb_rand_test", ")", ":", "\n", "        ", "img", "=", "np", ".", "clip", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "1000", ",", "1200", ",", "3", ")", ")", "*", "260", ",", "0", ",", "\n", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "factor", "=", "np", ".", "random", ".", "uniform", "(", ")", "\n", "transform_module", ".", "factor", "=", "factor", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "[", "'img'", "]", ".", "astype", "(", "np", ".", "int32", ")", ",", "\n", "_adjust_brightness", "(", "img", ",", "factor", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "\n", "rtol", "=", "0", ",", "\n", "atol", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.test_adjust_contrast": [[153, 204], ["test_img_augment.construct_toy_data", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "numpy.testing.assert_array_equal", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "numpy.testing.assert_array_equal", "mmcv.utils.build_from_cfg.", "numpy.testing.assert_allclose", "range", "Image.fromarray", "Contrast().enhance", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "test_img_augment.test_adjust_contrast._adjust_contrast"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_img_augment.construct_toy_data"], ["", "", "def", "test_adjust_contrast", "(", "nb_rand_test", "=", "100", ")", ":", "\n", "\n", "    ", "def", "_adjust_contrast", "(", "img", ",", "factor", ")", ":", "\n", "        ", "from", "PIL", ".", "ImageEnhance", "import", "Contrast", "\n", "from", "PIL", "import", "Image", "\n", "# Image.fromarray defaultly supports RGB, not BGR.", "\n", "# convert from BGR to RGB", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", "[", "...", ",", ":", ":", "-", "1", "]", ",", "mode", "=", "'RGB'", ")", "\n", "contrasted_img", "=", "Contrast", "(", "img", ")", ".", "enhance", "(", "factor", ")", "\n", "# convert from RGB to BGR", "\n", "return", "np", ".", "asarray", "(", "contrasted_img", ")", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "\n", "", "results", "=", "construct_toy_data", "(", ")", "\n", "# test wighout aug", "\n", "transform", "=", "dict", "(", "type", "=", "'ContrastTransform'", ",", "level", "=", "10", ",", "prob", "=", "0", ")", "\n", "transform_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert_array_equal", "(", "results_transformed", "[", "'img'", "]", ",", "results", "[", "'img'", "]", ")", "\n", "\n", "# test case with factor 1.0", "\n", "transform", "=", "dict", "(", "type", "=", "'ContrastTransform'", ",", "level", "=", "10", ",", "prob", "=", "1.", ")", "\n", "transform_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "transform_module", ".", "factor", "=", "1.0", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "assert_array_equal", "(", "results_transformed", "[", "'img'", "]", ",", "results", "[", "'img'", "]", ")", "\n", "\n", "# test case with factor 0.0", "\n", "transform_module", ".", "factor", "=", "0.0", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "results_transformed", "[", "'img'", "]", ",", "\n", "_adjust_contrast", "(", "results", "[", "'img'", "]", ",", "0.", ")", ",", "\n", "rtol", "=", "0", ",", "\n", "atol", "=", "1", ")", "\n", "\n", "# test adjust_contrast with randomly sampled images and factors.", "\n", "for", "_", "in", "range", "(", "nb_rand_test", ")", ":", "\n", "        ", "img", "=", "np", ".", "clip", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "1200", ",", "1000", ",", "3", ")", ")", "*", "260", ",", "0", ",", "\n", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "factor", "=", "np", ".", "random", ".", "uniform", "(", ")", "\n", "transform_module", ".", "factor", "=", "factor", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results_transformed", "=", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "\n", "# Note the gap (less_equal 1) between PIL.ImageEnhance.Contrast", "\n", "# and mmcv.adjust_contrast comes from the gap that converts from", "\n", "# a color image to gray image using mmcv or PIL.", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "transform_module", "(", "copy", ".", "deepcopy", "(", "results", ")", ")", "[", "'img'", "]", ".", "astype", "(", "np", ".", "int32", ")", ",", "\n", "_adjust_contrast", "(", "results", "[", "'img'", "]", ",", "factor", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "\n", "rtol", "=", "0", ",", "\n", "atol", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_models_aug_test.model_aug_test_template": [[12, 42], ["mmcv.Config.fromfile", "mmdet.models.build_detector", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg", "dict", "mmcv.utils.build_from_cfg.", "mmdet.models.build_detector.eval", "mmcv.utils.build_from_cfg.", "len", "len", "mmcv.parallel.collate", "torch.no_grad", "mmdet.models.build_detector.", "os.join", "dict", "os.dirname", "mmcv.parallel.collate"], "function", ["None"], ["def", "model_aug_test_template", "(", "cfg_file", ")", ":", "\n", "# get config", "\n", "    ", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "cfg_file", ")", "\n", "# init model", "\n", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ")", "\n", "\n", "# init test pipeline and set aug test", "\n", "load_cfg", ",", "multi_scale_cfg", "=", "cfg", ".", "test_pipeline", "\n", "multi_scale_cfg", "[", "'flip'", "]", "=", "True", "\n", "multi_scale_cfg", "[", "'img_scale'", "]", "=", "[", "(", "1333", ",", "800", ")", ",", "(", "800", ",", "600", ")", ",", "(", "640", ",", "480", ")", "]", "\n", "\n", "load", "=", "build_from_cfg", "(", "load_cfg", ",", "PIPELINES", ")", "\n", "transform", "=", "build_from_cfg", "(", "multi_scale_cfg", ",", "PIPELINES", ")", "\n", "\n", "results", "=", "dict", "(", "\n", "img_prefix", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data'", ")", ",", "\n", "img_info", "=", "dict", "(", "filename", "=", "'color.jpg'", ")", ")", "\n", "results", "=", "transform", "(", "load", "(", "results", ")", ")", "\n", "assert", "len", "(", "results", "[", "'img'", "]", ")", "==", "6", "\n", "assert", "len", "(", "results", "[", "'img_metas'", "]", ")", "==", "6", "\n", "\n", "results", "[", "'img'", "]", "=", "[", "collate", "(", "[", "x", "]", ")", "for", "x", "in", "results", "[", "'img'", "]", "]", "\n", "results", "[", "'img_metas'", "]", "=", "[", "collate", "(", "[", "x", "]", ")", ".", "data", "[", "0", "]", "for", "x", "in", "results", "[", "'img_metas'", "]", "]", "\n", "# aug test the model", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "aug_result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "results", ")", "\n", "", "return", "aug_result", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_models_aug_test.test_aug_test_size": [[44, 67], ["dict", "dict", "mmcv.utils.build_from_cfg", "dict", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg.", "mmcv.utils.build_from_cfg.", "mmcv.utils.build_from_cfg.", "len", "os.join", "dict", "os.dirname"], "function", ["None"], ["", "def", "test_aug_test_size", "(", ")", ":", "\n", "    ", "results", "=", "dict", "(", "\n", "img_prefix", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data'", ")", ",", "\n", "img_info", "=", "dict", "(", "filename", "=", "'color.jpg'", ")", ")", "\n", "\n", "# Define simple pipeline", "\n", "load", "=", "dict", "(", "type", "=", "'LoadImageFromFile'", ")", "\n", "load", "=", "build_from_cfg", "(", "load", ",", "PIPELINES", ")", "\n", "\n", "# get config", "\n", "transform", "=", "dict", "(", "\n", "type", "=", "'MultiScaleFlipAug'", ",", "\n", "transforms", "=", "[", "]", ",", "\n", "img_scale", "=", "[", "(", "1333", ",", "800", ")", ",", "(", "800", ",", "600", ")", ",", "(", "640", ",", "480", ")", "]", ",", "\n", "flip", "=", "True", ",", "\n", "flip_direction", "=", "[", "'horizontal'", ",", "'vertical'", "]", ")", "\n", "multi_aug_test_module", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "\n", "results", "=", "load", "(", "results", ")", "\n", "results", "=", "multi_aug_test_module", "(", "load", "(", "results", ")", ")", "\n", "# len([\"original\", \"horizontal\", \"vertical\"]) *", "\n", "# len([(1333, 800), (800, 600), (640, 480)])", "\n", "assert", "len", "(", "results", "[", "'img'", "]", ")", "==", "9", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_models_aug_test.test_cascade_rcnn_aug_test": [[69, 73], ["test_models_aug_test.model_aug_test_template", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_models_aug_test.model_aug_test_template"], ["", "def", "test_cascade_rcnn_aug_test", "(", ")", ":", "\n", "    ", "aug_result", "=", "model_aug_test_template", "(", "\n", "'configs/cascade_rcnn/cascade_rcnn_r50_fpn_1x_coco.py'", ")", "\n", "assert", "len", "(", "aug_result", "[", "0", "]", ")", "==", "80", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_models_aug_test.test_mask_rcnn_aug_test": [[75, 81], ["test_models_aug_test.model_aug_test_template", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_models_aug_test.model_aug_test_template"], ["", "def", "test_mask_rcnn_aug_test", "(", ")", ":", "\n", "    ", "aug_result", "=", "model_aug_test_template", "(", "\n", "'configs/mask_rcnn/mask_rcnn_r50_fpn_1x_coco.py'", ")", "\n", "assert", "len", "(", "aug_result", "[", "0", "]", ")", "==", "2", "\n", "assert", "len", "(", "aug_result", "[", "0", "]", "[", "0", "]", ")", "==", "80", "\n", "assert", "len", "(", "aug_result", "[", "0", "]", "[", "1", "]", ")", "==", "80", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_models_aug_test.test_htc_aug_test": [[83, 88], ["test_models_aug_test.model_aug_test_template", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_models_aug_test.model_aug_test_template"], ["", "def", "test_htc_aug_test", "(", ")", ":", "\n", "    ", "aug_result", "=", "model_aug_test_template", "(", "'configs/htc/htc_r50_fpn_1x_coco.py'", ")", "\n", "assert", "len", "(", "aug_result", "[", "0", "]", ")", "==", "2", "\n", "assert", "len", "(", "aug_result", "[", "0", "]", "[", "0", "]", ")", "==", "80", "\n", "assert", "len", "(", "aug_result", "[", "0", "]", "[", "1", "]", ")", "==", "80", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_models_aug_test.test_scnet_aug_test": [[90, 96], ["test_models_aug_test.model_aug_test_template", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_models_aug_test.model_aug_test_template"], ["", "def", "test_scnet_aug_test", "(", ")", ":", "\n", "    ", "aug_result", "=", "model_aug_test_template", "(", "\n", "'configs/scnet/scnet_r50_fpn_1x_coco.py'", ")", "\n", "assert", "len", "(", "aug_result", "[", "0", "]", ")", "==", "2", "\n", "assert", "len", "(", "aug_result", "[", "0", "]", "[", "0", "]", ")", "==", "80", "\n", "assert", "len", "(", "aug_result", "[", "0", "]", "[", "1", "]", ")", "==", "80", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_transform.test_models_aug_test.test_cornernet_aug_test": [[98, 129], ["mmcv.Config.fromfile", "mmdet.models.build_detector", "mmcv.utils.build_from_cfg", "mmcv.utils.build_from_cfg", "dict", "mmcv.utils.build_from_cfg.", "mmdet.models.build_detector.eval", "mmcv.utils.build_from_cfg.", "len", "len", "mmcv.parallel.collate", "torch.no_grad", "mmdet.models.build_detector.", "len", "os.join", "dict", "os.dirname", "mmcv.parallel.collate"], "function", ["None"], ["", "def", "test_cornernet_aug_test", "(", ")", ":", "\n", "# get config", "\n", "    ", "cfg", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "\n", "'configs/cornernet/cornernet_hourglass104_mstest_10x5_210e_coco.py'", ")", "\n", "# init model", "\n", "cfg", ".", "model", ".", "pretrained", "=", "None", "\n", "cfg", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_detector", "(", "cfg", ".", "model", ")", "\n", "\n", "# init test pipeline and set aug test", "\n", "load_cfg", ",", "multi_scale_cfg", "=", "cfg", ".", "test_pipeline", "\n", "multi_scale_cfg", "[", "'flip'", "]", "=", "True", "\n", "multi_scale_cfg", "[", "'scale_factor'", "]", "=", "[", "0.5", ",", "1.0", ",", "2.0", "]", "\n", "\n", "load", "=", "build_from_cfg", "(", "load_cfg", ",", "PIPELINES", ")", "\n", "transform", "=", "build_from_cfg", "(", "multi_scale_cfg", ",", "PIPELINES", ")", "\n", "\n", "results", "=", "dict", "(", "\n", "img_prefix", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "__file__", ")", ",", "'../../../data'", ")", ",", "\n", "img_info", "=", "dict", "(", "filename", "=", "'color.jpg'", ")", ")", "\n", "results", "=", "transform", "(", "load", "(", "results", ")", ")", "\n", "assert", "len", "(", "results", "[", "'img'", "]", ")", "==", "6", "\n", "assert", "len", "(", "results", "[", "'img_metas'", "]", ")", "==", "6", "\n", "\n", "results", "[", "'img'", "]", "=", "[", "collate", "(", "[", "x", "]", ")", "for", "x", "in", "results", "[", "'img'", "]", "]", "\n", "results", "[", "'img_metas'", "]", "=", "[", "collate", "(", "[", "x", "]", ")", ".", "data", "[", "0", "]", "for", "x", "in", "results", "[", "'img_metas'", "]", "]", "\n", "# aug test the model", "\n", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "aug_result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "results", ")", "\n", "", "assert", "len", "(", "aug_result", "[", "0", "]", ")", "==", "80", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._create_dummy_coco_json": [[20, 78], ["mmcv.dump"], "function", ["None"], ["def", "_create_dummy_coco_json", "(", "json_name", ")", ":", "\n", "    ", "image", "=", "{", "\n", "'id'", ":", "0", ",", "\n", "'width'", ":", "640", ",", "\n", "'height'", ":", "640", ",", "\n", "'file_name'", ":", "'fake_name.jpg'", ",", "\n", "}", "\n", "\n", "annotation_1", "=", "{", "\n", "'id'", ":", "1", ",", "\n", "'image_id'", ":", "0", ",", "\n", "'category_id'", ":", "0", ",", "\n", "'area'", ":", "400", ",", "\n", "'bbox'", ":", "[", "50", ",", "60", ",", "20", ",", "20", "]", ",", "\n", "'iscrowd'", ":", "0", ",", "\n", "}", "\n", "\n", "annotation_2", "=", "{", "\n", "'id'", ":", "2", ",", "\n", "'image_id'", ":", "0", ",", "\n", "'category_id'", ":", "0", ",", "\n", "'area'", ":", "900", ",", "\n", "'bbox'", ":", "[", "100", ",", "120", ",", "30", ",", "30", "]", ",", "\n", "'iscrowd'", ":", "0", ",", "\n", "}", "\n", "\n", "annotation_3", "=", "{", "\n", "'id'", ":", "3", ",", "\n", "'image_id'", ":", "0", ",", "\n", "'category_id'", ":", "0", ",", "\n", "'area'", ":", "1600", ",", "\n", "'bbox'", ":", "[", "150", ",", "160", ",", "40", ",", "40", "]", ",", "\n", "'iscrowd'", ":", "0", ",", "\n", "}", "\n", "\n", "annotation_4", "=", "{", "\n", "'id'", ":", "4", ",", "\n", "'image_id'", ":", "0", ",", "\n", "'category_id'", ":", "0", ",", "\n", "'area'", ":", "10000", ",", "\n", "'bbox'", ":", "[", "250", ",", "260", ",", "100", ",", "100", "]", ",", "\n", "'iscrowd'", ":", "0", ",", "\n", "}", "\n", "\n", "categories", "=", "[", "{", "\n", "'id'", ":", "0", ",", "\n", "'name'", ":", "'car'", ",", "\n", "'supercategory'", ":", "'car'", ",", "\n", "}", "]", "\n", "\n", "fake_json", "=", "{", "\n", "'images'", ":", "[", "image", "]", ",", "\n", "'annotations'", ":", "\n", "[", "annotation_1", ",", "annotation_2", ",", "annotation_3", ",", "annotation_4", "]", ",", "\n", "'categories'", ":", "categories", "\n", "}", "\n", "\n", "mmcv", ".", "dump", "(", "fake_json", ",", "json_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._create_dummy_custom_pkl": [[80, 94], ["mmcv.dump", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "_create_dummy_custom_pkl", "(", "pkl_name", ")", ":", "\n", "    ", "fake_pkl", "=", "[", "{", "\n", "'filename'", ":", "'fake_name.jpg'", ",", "\n", "'width'", ":", "640", ",", "\n", "'height'", ":", "640", ",", "\n", "'ann'", ":", "{", "\n", "'bboxes'", ":", "\n", "np", ".", "array", "(", "[", "[", "50", ",", "60", ",", "70", ",", "80", "]", ",", "[", "100", ",", "120", ",", "130", ",", "150", "]", ",", "\n", "[", "150", ",", "160", ",", "190", ",", "200", "]", ",", "[", "250", ",", "260", ",", "350", ",", "360", "]", "]", ")", ",", "\n", "'labels'", ":", "\n", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "}", "\n", "}", "]", "\n", "mmcv", ".", "dump", "(", "fake_pkl", ",", "pkl_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._create_dummy_results": [[96, 102], ["numpy.array"], "function", ["None"], ["", "def", "_create_dummy_results", "(", ")", ":", "\n", "    ", "boxes", "=", "[", "\n", "np", ".", "array", "(", "[", "[", "50", ",", "60", ",", "70", ",", "80", ",", "1.0", "]", ",", "[", "100", ",", "120", ",", "130", ",", "150", ",", "0.98", "]", ",", "\n", "[", "150", ",", "160", ",", "190", ",", "200", ",", "0.96", "]", ",", "[", "250", ",", "260", ",", "350", ",", "360", ",", "0.95", "]", "]", ")", "\n", "]", "\n", "return", "[", "boxes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common.test_dataset_init": [[104, 118], ["pytest.mark.parametrize", "mmcv.Config.fromfile", "os.unlink", "os.unlink", "os.path.exists", "os.path.exists", "os.symlink", "os.symlink", "copy.deepcopy", "mmdet.datasets.build_dataset", "mmcv.Config.fromfile.data.get"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'config_path'", ",", "\n", "[", "'./configs/_base_/datasets/voc0712.py'", "]", ")", "\n", "def", "test_dataset_init", "(", "config_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./data'", ")", ":", "\n", "        ", "os", ".", "symlink", "(", "'./tests/data'", ",", "'./data'", ")", "\n", "", "data_config", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "config_path", ")", "\n", "if", "'data'", "not", "in", "data_config", ":", "\n", "        ", "return", "\n", "", "stage_names", "=", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "for", "stage_name", "in", "stage_names", ":", "\n", "        ", "dataset_config", "=", "copy", ".", "deepcopy", "(", "data_config", ".", "data", ".", "get", "(", "stage_name", ")", ")", "\n", "dataset", "=", "build_dataset", "(", "dataset_config", ")", "\n", "dataset", "[", "0", "]", "\n", "", "os", ".", "unlink", "(", "'./data'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common.test_dataset_evaluation": [[120, 218], ["tempfile.TemporaryDirectory", "os.join", "test_common._create_dummy_coco_json", "mmdet.datasets.CocoDataset", "test_common._create_dummy_results", "mmdet.datasets.CocoDataset.evaluate", "dict", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataset.evaluate", "dict", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataset.evaluate", "os.join", "test_common._create_dummy_custom_pkl", "mmdet.datasets.CustomDataset", "test_common._create_dummy_results", "mmdet.datasets.CustomDataset.evaluate", "dict", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataset.evaluate", "dict", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataset.evaluate", "dict", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataset.evaluate", "tempfile.TemporaryDirectory.cleanup", "test_common._create_dummy_results", "test_common._create_dummy_results", "test_common._create_dummy_results", "test_common._create_dummy_results", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._create_dummy_coco_json", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._create_dummy_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._create_dummy_custom_pkl", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._create_dummy_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._create_dummy_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._create_dummy_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._create_dummy_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._create_dummy_results"], ["", "def", "test_dataset_evaluation", "(", ")", ":", "\n", "    ", "tmp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "# create dummy data", "\n", "fake_json_file", "=", "osp", ".", "join", "(", "tmp_dir", ".", "name", ",", "'fake_data.json'", ")", "\n", "_create_dummy_coco_json", "(", "fake_json_file", ")", "\n", "\n", "# test single coco dataset evaluation", "\n", "coco_dataset", "=", "CocoDataset", "(", "\n", "ann_file", "=", "fake_json_file", ",", "classes", "=", "(", "'car'", ",", ")", ",", "pipeline", "=", "[", "]", ")", "\n", "fake_results", "=", "_create_dummy_results", "(", ")", "\n", "eval_results", "=", "coco_dataset", ".", "evaluate", "(", "fake_results", ",", "classwise", "=", "True", ")", "\n", "assert", "eval_results", "[", "'bbox_mAP'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'bbox_mAP_50'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'bbox_mAP_75'", "]", "==", "1", "\n", "\n", "# test concat dataset evaluation", "\n", "fake_concat_results", "=", "_create_dummy_results", "(", ")", "+", "_create_dummy_results", "(", ")", "\n", "\n", "# build concat dataset through two config dict", "\n", "coco_cfg", "=", "dict", "(", "\n", "type", "=", "'CocoDataset'", ",", "\n", "ann_file", "=", "fake_json_file", ",", "\n", "classes", "=", "(", "'car'", ",", ")", ",", "\n", "pipeline", "=", "[", "]", ")", "\n", "concat_cfgs", "=", "[", "coco_cfg", ",", "coco_cfg", "]", "\n", "concat_dataset", "=", "build_dataset", "(", "concat_cfgs", ")", "\n", "eval_results", "=", "concat_dataset", ".", "evaluate", "(", "fake_concat_results", ")", "\n", "assert", "eval_results", "[", "'0_bbox_mAP'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'0_bbox_mAP_50'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'0_bbox_mAP_75'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'1_bbox_mAP'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'1_bbox_mAP_50'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'1_bbox_mAP_75'", "]", "==", "1", "\n", "\n", "# build concat dataset through concatenated ann_file", "\n", "coco_cfg", "=", "dict", "(", "\n", "type", "=", "'CocoDataset'", ",", "\n", "ann_file", "=", "[", "fake_json_file", ",", "fake_json_file", "]", ",", "\n", "classes", "=", "(", "'car'", ",", ")", ",", "\n", "pipeline", "=", "[", "]", ")", "\n", "concat_dataset", "=", "build_dataset", "(", "coco_cfg", ")", "\n", "eval_results", "=", "concat_dataset", ".", "evaluate", "(", "fake_concat_results", ")", "\n", "assert", "eval_results", "[", "'0_bbox_mAP'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'0_bbox_mAP_50'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'0_bbox_mAP_75'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'1_bbox_mAP'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'1_bbox_mAP_50'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'1_bbox_mAP_75'", "]", "==", "1", "\n", "\n", "# create dummy data", "\n", "fake_pkl_file", "=", "osp", ".", "join", "(", "tmp_dir", ".", "name", ",", "'fake_data.pkl'", ")", "\n", "_create_dummy_custom_pkl", "(", "fake_pkl_file", ")", "\n", "\n", "# test single custom dataset evaluation", "\n", "custom_dataset", "=", "CustomDataset", "(", "\n", "ann_file", "=", "fake_pkl_file", ",", "classes", "=", "(", "'car'", ",", ")", ",", "pipeline", "=", "[", "]", ")", "\n", "fake_results", "=", "_create_dummy_results", "(", ")", "\n", "eval_results", "=", "custom_dataset", ".", "evaluate", "(", "fake_results", ")", "\n", "assert", "eval_results", "[", "'mAP'", "]", "==", "1", "\n", "\n", "# test concat dataset evaluation", "\n", "fake_concat_results", "=", "_create_dummy_results", "(", ")", "+", "_create_dummy_results", "(", ")", "\n", "\n", "# build concat dataset through two config dict", "\n", "custom_cfg", "=", "dict", "(", "\n", "type", "=", "'CustomDataset'", ",", "\n", "ann_file", "=", "fake_pkl_file", ",", "\n", "classes", "=", "(", "'car'", ",", ")", ",", "\n", "pipeline", "=", "[", "]", ")", "\n", "concat_cfgs", "=", "[", "custom_cfg", ",", "custom_cfg", "]", "\n", "concat_dataset", "=", "build_dataset", "(", "concat_cfgs", ")", "\n", "eval_results", "=", "concat_dataset", ".", "evaluate", "(", "fake_concat_results", ")", "\n", "assert", "eval_results", "[", "'0_mAP'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'1_mAP'", "]", "==", "1", "\n", "\n", "# build concat dataset through concatenated ann_file", "\n", "concat_cfg", "=", "dict", "(", "\n", "type", "=", "'CustomDataset'", ",", "\n", "ann_file", "=", "[", "fake_pkl_file", ",", "fake_pkl_file", "]", ",", "\n", "classes", "=", "(", "'car'", ",", ")", ",", "\n", "pipeline", "=", "[", "]", ")", "\n", "concat_dataset", "=", "build_dataset", "(", "concat_cfg", ")", "\n", "eval_results", "=", "concat_dataset", ".", "evaluate", "(", "fake_concat_results", ")", "\n", "assert", "eval_results", "[", "'0_mAP'", "]", "==", "1", "\n", "assert", "eval_results", "[", "'1_mAP'", "]", "==", "1", "\n", "\n", "# build concat dataset through explict type", "\n", "concat_cfg", "=", "dict", "(", "\n", "type", "=", "'ConcatDataset'", ",", "\n", "datasets", "=", "[", "custom_cfg", ",", "custom_cfg", "]", ",", "\n", "separate_eval", "=", "False", ")", "\n", "concat_dataset", "=", "build_dataset", "(", "concat_cfg", ")", "\n", "eval_results", "=", "concat_dataset", ".", "evaluate", "(", "fake_concat_results", ",", "metric", "=", "'mAP'", ")", "\n", "assert", "eval_results", "[", "'mAP'", "]", "==", "1", "\n", "assert", "len", "(", "concat_dataset", ".", "datasets", "[", "0", "]", ".", "data_infos", ")", "==", "len", "(", "concat_dataset", ".", "datasets", "[", "1", "]", ".", "data_infos", ")", "\n", "assert", "len", "(", "concat_dataset", ".", "datasets", "[", "0", "]", ".", "data_infos", ")", "==", "1", "\n", "tmp_dir", ".", "cleanup", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common.test_evaluation_hook": [[220, 304], ["unittest.mock.patch", "unittest.mock.patch", "pytest.mark.parametrize", "torch.utils.data.DataLoader", "test_common._build_demo_runner", "EvalHookParam", "unittest.mock.MagicMock", "_build_demo_runner.register_hook", "_build_demo_runner.run", "test_common._build_demo_runner", "EvalHookParam", "unittest.mock.MagicMock", "_build_demo_runner.register_hook", "_build_demo_runner.run", "test_common._build_demo_runner", "EvalHookParam", "unittest.mock.MagicMock", "_build_demo_runner.register_hook", "_build_demo_runner.run", "test_common._build_demo_runner", "EvalHookParam", "unittest.mock.MagicMock", "_build_demo_runner.register_hook", "_build_demo_runner.run", "test_common._build_demo_runner", "EvalHookParam", "unittest.mock.MagicMock", "_build_demo_runner.register_hook", "_build_demo_runner.run", "test_common._build_demo_runner", "unittest.mock.MagicMock", "_build_demo_runner.register_hook", "_build_demo_runner.run", "test_common._build_demo_runner", "EvalHookParam", "unittest.mock.MagicMock", "_build_demo_runner.register_hook", "_build_demo_runner.run", "test_common._build_demo_runner", "EvalHookParam", "unittest.mock.MagicMock", "_build_demo_runner.register_hook", "_build_demo_runner.run", "torch.ones", "torch.ones", "pytest.raises", "EvalHookParam", "pytest.raises", "EvalHookParam", "pytest.warns", "EvalHookParam", "unittest.mock.MagicMock"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._build_demo_runner", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._build_demo_runner", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._build_demo_runner", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._build_demo_runner", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._build_demo_runner", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._build_demo_runner", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._build_demo_runner", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._build_demo_runner"], ["", "@", "patch", "(", "'mmdet.apis.single_gpu_test'", ",", "MagicMock", ")", "\n", "@", "patch", "(", "'mmdet.apis.multi_gpu_test'", ",", "MagicMock", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'EvalHookParam'", ",", "(", "EvalHook", ",", "DistEvalHook", ")", ")", "\n", "def", "test_evaluation_hook", "(", "EvalHookParam", ")", ":", "\n", "# create dummy data", "\n", "    ", "dataloader", "=", "DataLoader", "(", "torch", ".", "ones", "(", "(", "5", ",", "2", ")", ")", ")", "\n", "\n", "# 0.1. dataloader is not a DataLoader object", "\n", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "        ", "EvalHookParam", "(", "dataloader", "=", "MagicMock", "(", ")", ",", "interval", "=", "-", "1", ")", "\n", "\n", "# 0.2. negative interval", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "EvalHookParam", "(", "dataloader", ",", "interval", "=", "-", "1", ")", "\n", "\n", "# 1. start=None, interval=1: perform evaluation after each epoch.", "\n", "", "runner", "=", "_build_demo_runner", "(", ")", "\n", "evalhook", "=", "EvalHookParam", "(", "dataloader", ",", "interval", "=", "1", ")", "\n", "evalhook", ".", "evaluate", "=", "MagicMock", "(", ")", "\n", "runner", ".", "register_hook", "(", "evalhook", ")", "\n", "runner", ".", "run", "(", "[", "dataloader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "2", ")", "\n", "assert", "evalhook", ".", "evaluate", ".", "call_count", "==", "2", "# after epoch 1 & 2", "\n", "\n", "# 2. start=1, interval=1: perform evaluation after each epoch.", "\n", "runner", "=", "_build_demo_runner", "(", ")", "\n", "\n", "evalhook", "=", "EvalHookParam", "(", "dataloader", ",", "start", "=", "1", ",", "interval", "=", "1", ")", "\n", "evalhook", ".", "evaluate", "=", "MagicMock", "(", ")", "\n", "runner", ".", "register_hook", "(", "evalhook", ")", "\n", "runner", ".", "run", "(", "[", "dataloader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "2", ")", "\n", "assert", "evalhook", ".", "evaluate", ".", "call_count", "==", "2", "# after epoch 1 & 2", "\n", "\n", "# 3. start=None, interval=2: perform evaluation after epoch 2, 4, 6, etc", "\n", "runner", "=", "_build_demo_runner", "(", ")", "\n", "evalhook", "=", "EvalHookParam", "(", "dataloader", ",", "interval", "=", "2", ")", "\n", "evalhook", ".", "evaluate", "=", "MagicMock", "(", ")", "\n", "runner", ".", "register_hook", "(", "evalhook", ")", "\n", "runner", ".", "run", "(", "[", "dataloader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "2", ")", "\n", "assert", "evalhook", ".", "evaluate", ".", "call_count", "==", "1", "# after epoch 2", "\n", "\n", "# 4. start=1, interval=2: perform evaluation after epoch 1, 3, 5, etc", "\n", "runner", "=", "_build_demo_runner", "(", ")", "\n", "evalhook", "=", "EvalHookParam", "(", "dataloader", ",", "start", "=", "1", ",", "interval", "=", "2", ")", "\n", "evalhook", ".", "evaluate", "=", "MagicMock", "(", ")", "\n", "runner", ".", "register_hook", "(", "evalhook", ")", "\n", "runner", ".", "run", "(", "[", "dataloader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "3", ")", "\n", "assert", "evalhook", ".", "evaluate", ".", "call_count", "==", "2", "# after epoch 1 & 3", "\n", "\n", "# 5. start=0/negative, interval=1: perform evaluation after each epoch and", "\n", "#    before epoch 1.", "\n", "runner", "=", "_build_demo_runner", "(", ")", "\n", "evalhook", "=", "EvalHookParam", "(", "dataloader", ",", "start", "=", "0", ")", "\n", "evalhook", ".", "evaluate", "=", "MagicMock", "(", ")", "\n", "runner", ".", "register_hook", "(", "evalhook", ")", "\n", "runner", ".", "run", "(", "[", "dataloader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "2", ")", "\n", "assert", "evalhook", ".", "evaluate", ".", "call_count", "==", "3", "# before epoch1 and after e1 & e2", "\n", "\n", "runner", "=", "_build_demo_runner", "(", ")", "\n", "with", "pytest", ".", "warns", "(", "UserWarning", ")", ":", "\n", "        ", "evalhook", "=", "EvalHookParam", "(", "dataloader", ",", "start", "=", "-", "2", ")", "\n", "", "evalhook", ".", "evaluate", "=", "MagicMock", "(", ")", "\n", "runner", ".", "register_hook", "(", "evalhook", ")", "\n", "runner", ".", "run", "(", "[", "dataloader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "2", ")", "\n", "assert", "evalhook", ".", "evaluate", ".", "call_count", "==", "3", "# before epoch1 and after e1 & e2", "\n", "\n", "# 6. resuming from epoch i, start = x (x<=i), interval =1: perform", "\n", "#    evaluation after each epoch and before the first epoch.", "\n", "runner", "=", "_build_demo_runner", "(", ")", "\n", "evalhook", "=", "EvalHookParam", "(", "dataloader", ",", "start", "=", "1", ")", "\n", "evalhook", ".", "evaluate", "=", "MagicMock", "(", ")", "\n", "runner", ".", "register_hook", "(", "evalhook", ")", "\n", "runner", ".", "_epoch", "=", "2", "\n", "runner", ".", "run", "(", "[", "dataloader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "3", ")", "\n", "assert", "evalhook", ".", "evaluate", ".", "call_count", "==", "2", "# before & after epoch 3", "\n", "\n", "# 7. resuming from epoch i, start = i+1/None, interval =1: perform", "\n", "#    evaluation after each epoch.", "\n", "runner", "=", "_build_demo_runner", "(", ")", "\n", "evalhook", "=", "EvalHookParam", "(", "dataloader", ",", "start", "=", "2", ")", "\n", "evalhook", ".", "evaluate", "=", "MagicMock", "(", ")", "\n", "runner", ".", "register_hook", "(", "evalhook", ")", "\n", "runner", ".", "_epoch", "=", "1", "\n", "runner", ".", "run", "(", "[", "dataloader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "3", ")", "\n", "assert", "evalhook", ".", "evaluate", ".", "call_count", "==", "2", "# after epoch 2 & 3", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common._build_demo_runner": [[306, 329], ["Model", "tempfile.mkdtemp", "mmcv.runner.EpochBasedRunner", "super().__init__", "torch.Linear", "test_common..linear", "dict", "dict", "logging.getLogger", "test_common..", "test_common.."], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["", "def", "_build_demo_runner", "(", ")", ":", "\n", "\n", "    ", "class", "Model", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "2", ",", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "return", "self", ".", "linear", "(", "x", ")", "\n", "\n", "", "def", "train_step", "(", "self", ",", "x", ",", "optimizer", ",", "**", "kwargs", ")", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "self", "(", "x", ")", ")", "\n", "\n", "", "def", "val_step", "(", "self", ",", "x", ",", "optimizer", ",", "**", "kwargs", ")", ":", "\n", "            ", "return", "dict", "(", "loss", "=", "self", "(", "x", ")", ")", "\n", "\n", "", "", "model", "=", "Model", "(", ")", "\n", "tmp_dir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "runner", "=", "EpochBasedRunner", "(", "\n", "model", "=", "model", ",", "work_dir", "=", "tmp_dir", ",", "logger", "=", "logging", ".", "getLogger", "(", ")", ")", "\n", "return", "runner", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_common.test_allow_empty_images": [[331, 358], ["pytest.mark.parametrize", "mmdet.datasets.DATASETS.get", "DATASETS.get.", "DATASETS.get.", "len", "len", "len", "len"], "function", ["None"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'classes, expected_length'", ",", "[", "(", "[", "'bus'", "]", ",", "2", ")", ",", "\n", "(", "[", "'car'", "]", ",", "1", ")", ",", "\n", "(", "[", "'bus'", ",", "'car'", "]", ",", "2", ")", "]", ")", "\n", "def", "test_allow_empty_images", "(", "classes", ",", "expected_length", ")", ":", "\n", "    ", "dataset_class", "=", "DATASETS", ".", "get", "(", "'CocoDataset'", ")", "\n", "# Filter empty images", "\n", "filtered_dataset", "=", "dataset_class", "(", "\n", "ann_file", "=", "'tests/data/coco_sample.json'", ",", "\n", "img_prefix", "=", "'tests/data'", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "classes", "=", "classes", ",", "\n", "filter_empty_gt", "=", "True", ")", "\n", "\n", "# Get all", "\n", "full_dataset", "=", "dataset_class", "(", "\n", "ann_file", "=", "'tests/data/coco_sample.json'", ",", "\n", "img_prefix", "=", "'tests/data'", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "classes", "=", "classes", ",", "\n", "filter_empty_gt", "=", "False", ")", "\n", "\n", "assert", "len", "(", "filtered_dataset", ")", "==", "expected_length", "\n", "assert", "len", "(", "filtered_dataset", ".", "img_ids", ")", "==", "expected_length", "\n", "assert", "len", "(", "full_dataset", ")", "==", "3", "\n", "assert", "len", "(", "full_dataset", ".", "img_ids", ")", "==", "3", "\n", "assert", "filtered_dataset", ".", "CLASSES", "==", "classes", "\n", "assert", "full_dataset", ".", "CLASSES", "==", "classes", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_custom_dataset.test_custom_classes_override_default": [[8, 84], ["unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "unittest.mock.patch", "pytest.mark.parametrize", "mmdet.datasets.DATASETS.get", "DATASETS.get.", "DATASETS.get.", "DATASETS.get.", "DATASETS.get.", "tempfile.NamedTemporaryFile", "DATASETS.get.", "tempfile.NamedTemporaryFile.close", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "open", "f.write", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock"], "function", ["None"], ["@", "patch", "(", "'mmdet.datasets.CocoDataset.load_annotations'", ",", "MagicMock", ")", "\n", "@", "patch", "(", "'mmdet.datasets.CustomDataset.load_annotations'", ",", "MagicMock", ")", "\n", "@", "patch", "(", "'mmdet.datasets.XMLDataset.load_annotations'", ",", "MagicMock", ")", "\n", "@", "patch", "(", "'mmdet.datasets.CityscapesDataset.load_annotations'", ",", "MagicMock", ")", "\n", "@", "patch", "(", "'mmdet.datasets.CocoDataset._filter_imgs'", ",", "MagicMock", ")", "\n", "@", "patch", "(", "'mmdet.datasets.CustomDataset._filter_imgs'", ",", "MagicMock", ")", "\n", "@", "patch", "(", "'mmdet.datasets.XMLDataset._filter_imgs'", ",", "MagicMock", ")", "\n", "@", "patch", "(", "'mmdet.datasets.CityscapesDataset._filter_imgs'", ",", "MagicMock", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'dataset'", ",", "\n", "[", "'CocoDataset'", ",", "'VOCDataset'", ",", "'CityscapesDataset'", "]", ")", "\n", "def", "test_custom_classes_override_default", "(", "dataset", ")", ":", "\n", "    ", "dataset_class", "=", "DATASETS", ".", "get", "(", "dataset", ")", "\n", "if", "dataset", "in", "[", "'CocoDataset'", ",", "'CityscapesDataset'", "]", ":", "\n", "        ", "dataset_class", ".", "coco", "=", "MagicMock", "(", ")", "\n", "dataset_class", ".", "cat_ids", "=", "MagicMock", "(", ")", "\n", "\n", "", "original_classes", "=", "dataset_class", ".", "CLASSES", "\n", "\n", "# Test setting classes as a tuple", "\n", "custom_dataset", "=", "dataset_class", "(", "\n", "ann_file", "=", "MagicMock", "(", ")", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "classes", "=", "(", "'bus'", ",", "'car'", ")", ",", "\n", "test_mode", "=", "True", ",", "\n", "img_prefix", "=", "'VOC2007'", "if", "dataset", "==", "'VOCDataset'", "else", "''", ")", "\n", "\n", "assert", "custom_dataset", ".", "CLASSES", "!=", "original_classes", "\n", "assert", "custom_dataset", ".", "CLASSES", "==", "(", "'bus'", ",", "'car'", ")", "\n", "\n", "# Test setting classes as a list", "\n", "custom_dataset", "=", "dataset_class", "(", "\n", "ann_file", "=", "MagicMock", "(", ")", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "classes", "=", "[", "'bus'", ",", "'car'", "]", ",", "\n", "test_mode", "=", "True", ",", "\n", "img_prefix", "=", "'VOC2007'", "if", "dataset", "==", "'VOCDataset'", "else", "''", ")", "\n", "\n", "assert", "custom_dataset", ".", "CLASSES", "!=", "original_classes", "\n", "assert", "custom_dataset", ".", "CLASSES", "==", "[", "'bus'", ",", "'car'", "]", "\n", "\n", "# Test overriding not a subset", "\n", "custom_dataset", "=", "dataset_class", "(", "\n", "ann_file", "=", "MagicMock", "(", ")", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "classes", "=", "[", "'foo'", "]", ",", "\n", "test_mode", "=", "True", ",", "\n", "img_prefix", "=", "'VOC2007'", "if", "dataset", "==", "'VOCDataset'", "else", "''", ")", "\n", "\n", "assert", "custom_dataset", ".", "CLASSES", "!=", "original_classes", "\n", "assert", "custom_dataset", ".", "CLASSES", "==", "[", "'foo'", "]", "\n", "\n", "# Test default behavior", "\n", "custom_dataset", "=", "dataset_class", "(", "\n", "ann_file", "=", "MagicMock", "(", ")", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "classes", "=", "None", ",", "\n", "test_mode", "=", "True", ",", "\n", "img_prefix", "=", "'VOC2007'", "if", "dataset", "==", "'VOCDataset'", "else", "''", ")", "\n", "\n", "assert", "custom_dataset", ".", "CLASSES", "==", "original_classes", "\n", "\n", "# Test sending file path", "\n", "import", "tempfile", "\n", "tmp_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "with", "open", "(", "tmp_file", ".", "name", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'bus\\ncar\\n'", ")", "\n", "", "custom_dataset", "=", "dataset_class", "(", "\n", "ann_file", "=", "MagicMock", "(", ")", ",", "\n", "pipeline", "=", "[", "]", ",", "\n", "classes", "=", "tmp_file", ".", "name", ",", "\n", "test_mode", "=", "True", ",", "\n", "img_prefix", "=", "'VOC2007'", "if", "dataset", "==", "'VOCDataset'", "else", "''", ")", "\n", "tmp_file", ".", "close", "(", ")", "\n", "\n", "assert", "custom_dataset", ".", "CLASSES", "!=", "original_classes", "\n", "assert", "custom_dataset", ".", "CLASSES", "==", "[", "'bus'", ",", "'car'", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_coco_dataset._create_ids_error_coco_json": [[10, 48], ["mmcv.dump"], "function", ["None"], ["def", "_create_ids_error_coco_json", "(", "json_name", ")", ":", "\n", "    ", "image", "=", "{", "\n", "'id'", ":", "0", ",", "\n", "'width'", ":", "640", ",", "\n", "'height'", ":", "640", ",", "\n", "'file_name'", ":", "'fake_name.jpg'", ",", "\n", "}", "\n", "\n", "annotation_1", "=", "{", "\n", "'id'", ":", "1", ",", "\n", "'image_id'", ":", "0", ",", "\n", "'category_id'", ":", "0", ",", "\n", "'area'", ":", "400", ",", "\n", "'bbox'", ":", "[", "50", ",", "60", ",", "20", ",", "20", "]", ",", "\n", "'iscrowd'", ":", "0", ",", "\n", "}", "\n", "\n", "annotation_2", "=", "{", "\n", "'id'", ":", "1", ",", "\n", "'image_id'", ":", "0", ",", "\n", "'category_id'", ":", "0", ",", "\n", "'area'", ":", "900", ",", "\n", "'bbox'", ":", "[", "100", ",", "120", ",", "30", ",", "30", "]", ",", "\n", "'iscrowd'", ":", "0", ",", "\n", "}", "\n", "\n", "categories", "=", "[", "{", "\n", "'id'", ":", "0", ",", "\n", "'name'", ":", "'car'", ",", "\n", "'supercategory'", ":", "'car'", ",", "\n", "}", "]", "\n", "\n", "fake_json", "=", "{", "\n", "'images'", ":", "[", "image", "]", ",", "\n", "'annotations'", ":", "[", "annotation_1", ",", "annotation_2", "]", ",", "\n", "'categories'", ":", "categories", "\n", "}", "\n", "mmcv", ".", "dump", "(", "fake_json", ",", "json_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_coco_dataset.test_coco_annotation_ids_unique": [[50, 58], ["tempfile.TemporaryDirectory", "os.join", "test_coco_dataset._create_ids_error_coco_json", "pytest.raises", "mmdet.datasets.CocoDataset"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_coco_dataset._create_ids_error_coco_json"], ["", "def", "test_coco_annotation_ids_unique", "(", ")", ":", "\n", "    ", "tmp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "fake_json_file", "=", "osp", ".", "join", "(", "tmp_dir", ".", "name", ",", "'fake_data.json'", ")", "\n", "_create_ids_error_coco_json", "(", "fake_json_file", ")", "\n", "\n", "# test annotation ids not unique error", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "CocoDataset", "(", "ann_file", "=", "fake_json_file", ",", "classes", "=", "(", "'car'", ",", ")", ",", "pipeline", "=", "[", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_xml_dataset.test_xml_dataset": [[6, 23], ["mmdet.datasets.DATASETS.get", "pytest.raises", "XMLDatasetSubClass"], "function", ["None"], ["def", "test_xml_dataset", "(", ")", ":", "\n", "    ", "dataconfig", "=", "{", "\n", "'ann_file'", ":", "'data/VOCdevkit/VOC2007/ImageSets/Main/test.txt'", ",", "\n", "'img_prefix'", ":", "'data/VOCdevkit/VOC2007/'", ",", "\n", "'pipeline'", ":", "[", "{", "\n", "'type'", ":", "'LoadImageFromFile'", "\n", "}", "]", "\n", "}", "\n", "XMLDataset", "=", "DATASETS", ".", "get", "(", "'XMLDataset'", ")", "\n", "\n", "class", "XMLDatasetSubClass", "(", "XMLDataset", ")", ":", "\n", "        ", "CLASSES", "=", "None", "\n", "\n", "# get_ann_info and _filter_imgs of XMLDataset", "\n", "# would use self.CLASSES, we added CLASSES not NONE", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "XMLDatasetSubClass", "(", "**", "dataconfig", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_datasets.test_dataset_wrapper.test_dataset_wrapper": [[12, 81], ["unittest.mock.MagicMock", "unittest.mock.MagicMock", "mmdet.datasets.CustomDataset", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "mmdet.datasets.CustomDataset", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "mmdet.datasets.ConcatDataset", "mmdet.datasets.RepeatDataset", "collections.defaultdict", "collections.defaultdict.items", "numpy.mean", "numpy.cumsum", "mmdet.datasets.ClassBalancedDataset", "numpy.random.randint", "numpy.random.randint().tolist", "numpy.random.randint().tolist", "mmdet.datasets.ConcatDataset.get_cat_ids", "mmdet.datasets.ConcatDataset.get_cat_ids", "len", "mmdet.datasets.RepeatDataset.get_cat_ids", "mmdet.datasets.RepeatDataset.get_cat_ids", "mmdet.datasets.RepeatDataset.get_cat_ids", "len", "set", "list", "max", "set", "max", "repeat_factors.append", "len", "len", "unittest.mock.MagicMock", "numpy.random.randint", "unittest.mock.MagicMock", "numpy.random.randint", "len", "len", "len", "len", "collections.defaultdict.values", "math.sqrt", "collections.defaultdict.items", "math.ceil", "bisect.bisect_right", "numpy.random.randint", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.get_cat_ids", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.get_cat_ids", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.get_cat_ids", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.get_cat_ids", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.get_cat_ids"], ["def", "test_dataset_wrapper", "(", ")", ":", "\n", "    ", "CustomDataset", ".", "load_annotations", "=", "MagicMock", "(", ")", "\n", "CustomDataset", ".", "__getitem__", "=", "MagicMock", "(", "side_effect", "=", "lambda", "idx", ":", "idx", ")", "\n", "dataset_a", "=", "CustomDataset", "(", "\n", "ann_file", "=", "MagicMock", "(", ")", ",", "pipeline", "=", "[", "]", ",", "test_mode", "=", "True", ",", "img_prefix", "=", "''", ")", "\n", "len_a", "=", "10", "\n", "cat_ids_list_a", "=", "[", "\n", "np", ".", "random", ".", "randint", "(", "0", ",", "80", ",", "num", ")", ".", "tolist", "(", ")", "\n", "for", "num", "in", "np", ".", "random", ".", "randint", "(", "1", ",", "20", ",", "len_a", ")", "\n", "]", "\n", "dataset_a", ".", "data_infos", "=", "MagicMock", "(", ")", "\n", "dataset_a", ".", "data_infos", ".", "__len__", ".", "return_value", "=", "len_a", "\n", "dataset_a", ".", "get_cat_ids", "=", "MagicMock", "(", "\n", "side_effect", "=", "lambda", "idx", ":", "cat_ids_list_a", "[", "idx", "]", ")", "\n", "dataset_b", "=", "CustomDataset", "(", "\n", "ann_file", "=", "MagicMock", "(", ")", ",", "pipeline", "=", "[", "]", ",", "test_mode", "=", "True", ",", "img_prefix", "=", "''", ")", "\n", "len_b", "=", "20", "\n", "cat_ids_list_b", "=", "[", "\n", "np", ".", "random", ".", "randint", "(", "0", ",", "80", ",", "num", ")", ".", "tolist", "(", ")", "\n", "for", "num", "in", "np", ".", "random", ".", "randint", "(", "1", ",", "20", ",", "len_b", ")", "\n", "]", "\n", "dataset_b", ".", "data_infos", "=", "MagicMock", "(", ")", "\n", "dataset_b", ".", "data_infos", ".", "__len__", ".", "return_value", "=", "len_b", "\n", "dataset_b", ".", "get_cat_ids", "=", "MagicMock", "(", "\n", "side_effect", "=", "lambda", "idx", ":", "cat_ids_list_b", "[", "idx", "]", ")", "\n", "\n", "concat_dataset", "=", "ConcatDataset", "(", "[", "dataset_a", ",", "dataset_b", "]", ")", "\n", "assert", "concat_dataset", "[", "5", "]", "==", "5", "\n", "assert", "concat_dataset", "[", "25", "]", "==", "15", "\n", "assert", "concat_dataset", ".", "get_cat_ids", "(", "5", ")", "==", "cat_ids_list_a", "[", "5", "]", "\n", "assert", "concat_dataset", ".", "get_cat_ids", "(", "25", ")", "==", "cat_ids_list_b", "[", "15", "]", "\n", "assert", "len", "(", "concat_dataset", ")", "==", "len", "(", "dataset_a", ")", "+", "len", "(", "dataset_b", ")", "\n", "\n", "repeat_dataset", "=", "RepeatDataset", "(", "dataset_a", ",", "10", ")", "\n", "assert", "repeat_dataset", "[", "5", "]", "==", "5", "\n", "assert", "repeat_dataset", "[", "15", "]", "==", "5", "\n", "assert", "repeat_dataset", "[", "27", "]", "==", "7", "\n", "assert", "repeat_dataset", ".", "get_cat_ids", "(", "5", ")", "==", "cat_ids_list_a", "[", "5", "]", "\n", "assert", "repeat_dataset", ".", "get_cat_ids", "(", "15", ")", "==", "cat_ids_list_a", "[", "5", "]", "\n", "assert", "repeat_dataset", ".", "get_cat_ids", "(", "27", ")", "==", "cat_ids_list_a", "[", "7", "]", "\n", "assert", "len", "(", "repeat_dataset", ")", "==", "10", "*", "len", "(", "dataset_a", ")", "\n", "\n", "category_freq", "=", "defaultdict", "(", "int", ")", "\n", "for", "cat_ids", "in", "cat_ids_list_a", ":", "\n", "        ", "cat_ids", "=", "set", "(", "cat_ids", ")", "\n", "for", "cat_id", "in", "cat_ids", ":", "\n", "            ", "category_freq", "[", "cat_id", "]", "+=", "1", "\n", "", "", "for", "k", ",", "v", "in", "category_freq", ".", "items", "(", ")", ":", "\n", "        ", "category_freq", "[", "k", "]", "=", "v", "/", "len", "(", "cat_ids_list_a", ")", "\n", "\n", "", "mean_freq", "=", "np", ".", "mean", "(", "list", "(", "category_freq", ".", "values", "(", ")", ")", ")", "\n", "repeat_thr", "=", "mean_freq", "\n", "\n", "category_repeat", "=", "{", "\n", "cat_id", ":", "max", "(", "1.0", ",", "math", ".", "sqrt", "(", "repeat_thr", "/", "cat_freq", ")", ")", "\n", "for", "cat_id", ",", "cat_freq", "in", "category_freq", ".", "items", "(", ")", "\n", "}", "\n", "\n", "repeat_factors", "=", "[", "]", "\n", "for", "cat_ids", "in", "cat_ids_list_a", ":", "\n", "        ", "cat_ids", "=", "set", "(", "cat_ids", ")", "\n", "repeat_factor", "=", "max", "(", "{", "category_repeat", "[", "cat_id", "]", "for", "cat_id", "in", "cat_ids", "}", ")", "\n", "repeat_factors", ".", "append", "(", "math", ".", "ceil", "(", "repeat_factor", ")", ")", "\n", "", "repeat_factors_cumsum", "=", "np", ".", "cumsum", "(", "repeat_factors", ")", "\n", "repeat_factor_dataset", "=", "ClassBalancedDataset", "(", "dataset_a", ",", "repeat_thr", ")", "\n", "assert", "len", "(", "repeat_factor_dataset", ")", "==", "repeat_factors_cumsum", "[", "-", "1", "]", "\n", "for", "idx", "in", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "repeat_factor_dataset", ")", ",", "3", ")", ":", "\n", "        ", "assert", "repeat_factor_dataset", "[", "idx", "]", "==", "bisect", ".", "bisect_right", "(", "\n", "repeat_factors_cumsum", ",", "idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_fp16.test_cast_tensor_type": [[9, 49], ["torch.FloatTensor", "torch.FloatTensor", "mmcv.runner.fp16_utils.cast_tensor_type", "isinstance", "mmcv.runner.fp16_utils.cast_tensor_type", "isinstance", "numpy.array", "mmcv.runner.fp16_utils.cast_tensor_type", "isinstance", "dict", "mmcv.runner.fp16_utils.cast_tensor_type", "isinstance", "mmcv.runner.fp16_utils.cast_tensor_type", "isinstance", "mmcv.runner.fp16_utils.cast_tensor_type", "isinstance", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["def", "test_cast_tensor_type", "(", ")", ":", "\n", "    ", "inputs", "=", "torch", ".", "FloatTensor", "(", "[", "5.", "]", ")", "\n", "src_type", "=", "torch", ".", "float32", "\n", "dst_type", "=", "torch", ".", "int32", "\n", "outputs", "=", "cast_tensor_type", "(", "inputs", ",", "src_type", ",", "dst_type", ")", "\n", "assert", "isinstance", "(", "outputs", ",", "torch", ".", "Tensor", ")", "\n", "assert", "outputs", ".", "dtype", "==", "dst_type", "\n", "\n", "inputs", "=", "'tensor'", "\n", "src_type", "=", "str", "\n", "dst_type", "=", "str", "\n", "outputs", "=", "cast_tensor_type", "(", "inputs", ",", "src_type", ",", "dst_type", ")", "\n", "assert", "isinstance", "(", "outputs", ",", "str", ")", "\n", "\n", "inputs", "=", "np", ".", "array", "(", "[", "5.", "]", ")", "\n", "src_type", "=", "np", ".", "ndarray", "\n", "dst_type", "=", "np", ".", "ndarray", "\n", "outputs", "=", "cast_tensor_type", "(", "inputs", ",", "src_type", ",", "dst_type", ")", "\n", "assert", "isinstance", "(", "outputs", ",", "np", ".", "ndarray", ")", "\n", "\n", "inputs", "=", "dict", "(", "\n", "tensor_a", "=", "torch", ".", "FloatTensor", "(", "[", "1.", "]", ")", ",", "tensor_b", "=", "torch", ".", "FloatTensor", "(", "[", "2.", "]", ")", ")", "\n", "src_type", "=", "torch", ".", "float32", "\n", "dst_type", "=", "torch", ".", "int32", "\n", "outputs", "=", "cast_tensor_type", "(", "inputs", ",", "src_type", ",", "dst_type", ")", "\n", "assert", "isinstance", "(", "outputs", ",", "dict", ")", "\n", "assert", "outputs", "[", "'tensor_a'", "]", ".", "dtype", "==", "dst_type", "\n", "assert", "outputs", "[", "'tensor_b'", "]", ".", "dtype", "==", "dst_type", "\n", "\n", "inputs", "=", "[", "torch", ".", "FloatTensor", "(", "[", "1.", "]", ")", ",", "torch", ".", "FloatTensor", "(", "[", "2.", "]", ")", "]", "\n", "src_type", "=", "torch", ".", "float32", "\n", "dst_type", "=", "torch", ".", "int32", "\n", "outputs", "=", "cast_tensor_type", "(", "inputs", ",", "src_type", ",", "dst_type", ")", "\n", "assert", "isinstance", "(", "outputs", ",", "list", ")", "\n", "assert", "outputs", "[", "0", "]", ".", "dtype", "==", "dst_type", "\n", "assert", "outputs", "[", "1", "]", ".", "dtype", "==", "dst_type", "\n", "\n", "inputs", "=", "5", "\n", "outputs", "=", "cast_tensor_type", "(", "inputs", ",", "None", ",", "None", ")", "\n", "assert", "isinstance", "(", "outputs", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_fp16.test_auto_fp16": [[51, 175], ["ExampleModule", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ExampleObject.", "ExampleObject.", "torch.cuda.is_available", "torch.cuda.is_available", "ExampleModule", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ExampleObject.", "ExampleObject.", "torch.cuda.is_available", "torch.cuda.is_available", "ExampleModule", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ExampleObject.", "ExampleObject.", "torch.cuda.is_available", "torch.cuda.is_available", "ExampleModule", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ExampleObject.", "ExampleObject.", "torch.cuda.is_available", "torch.cuda.is_available", "pytest.raises", "ExampleObject", "torch.ones", "torch.ones", "ExampleObject.", "mmcv.runner.auto_fp16", "ExampleObject.cuda", "ExampleObject.", "mmcv.runner.auto_fp16", "ExampleObject.cuda", "ExampleObject.", "mmcv.runner.auto_fp16", "ExampleObject.cuda", "ExampleObject.", "mmcv.runner.auto_fp16", "ExampleObject.cuda", "ExampleObject.", "mmcv.runner.auto_fp16", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda"], "function", ["None"], ["", "def", "test_auto_fp16", "(", ")", ":", "\n", "\n", "    ", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "# ExampleObject is not a subclass of nn.Module", "\n", "\n", "        ", "class", "ExampleObject", "(", "object", ")", ":", "\n", "\n", "            ", "@", "auto_fp16", "(", ")", "\n", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "                ", "return", "x", "\n", "\n", "", "", "model", "=", "ExampleObject", "(", ")", "\n", "input_x", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "model", "(", "input_x", ")", "\n", "\n", "# apply to all input args", "\n", "", "class", "ExampleModule", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "        ", "@", "auto_fp16", "(", ")", "\n", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "            ", "return", "x", ",", "y", "\n", "\n", "", "", "model", "=", "ExampleModule", "(", ")", "\n", "input_x", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "input_y", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "output_x", ",", "output_y", "=", "model", "(", "input_x", ",", "input_y", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "model", ".", "fp16_enabled", "=", "True", "\n", "output_x", ",", "output_y", "=", "model", "(", "input_x", ",", "input_y", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "half", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "output_x", ",", "output_y", "=", "model", "(", "input_x", ".", "cuda", "(", ")", ",", "input_y", ".", "cuda", "(", ")", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "half", "\n", "\n", "# apply to specified input args", "\n", "", "class", "ExampleModule", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "        ", "@", "auto_fp16", "(", "apply_to", "=", "(", "'x'", ",", ")", ")", "\n", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "            ", "return", "x", ",", "y", "\n", "\n", "", "", "model", "=", "ExampleModule", "(", ")", "\n", "input_x", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "input_y", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "output_x", ",", "output_y", "=", "model", "(", "input_x", ",", "input_y", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "model", ".", "fp16_enabled", "=", "True", "\n", "output_x", ",", "output_y", "=", "model", "(", "input_x", ",", "input_y", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "output_x", ",", "output_y", "=", "model", "(", "input_x", ".", "cuda", "(", ")", ",", "input_y", ".", "cuda", "(", ")", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "# apply to optional input args", "\n", "", "class", "ExampleModule", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "        ", "@", "auto_fp16", "(", "apply_to", "=", "(", "'x'", ",", "'y'", ")", ")", "\n", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "z", "=", "None", ")", ":", "\n", "            ", "return", "x", ",", "y", ",", "z", "\n", "\n", "", "", "model", "=", "ExampleModule", "(", ")", "\n", "input_x", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "input_y", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "input_z", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "output_x", ",", "output_y", ",", "output_z", "=", "model", "(", "input_x", ",", "y", "=", "input_y", ",", "z", "=", "input_z", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_z", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "model", ".", "fp16_enabled", "=", "True", "\n", "output_x", ",", "output_y", ",", "output_z", "=", "model", "(", "input_x", ",", "y", "=", "input_y", ",", "z", "=", "input_z", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_z", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "output_x", ",", "output_y", ",", "output_z", "=", "model", "(", "\n", "input_x", ".", "cuda", "(", ")", ",", "y", "=", "input_y", ".", "cuda", "(", ")", ",", "z", "=", "input_z", ".", "cuda", "(", ")", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_z", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "# out_fp32=True", "\n", "", "class", "ExampleModule", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "        ", "@", "auto_fp16", "(", "apply_to", "=", "(", "'x'", ",", "'y'", ")", ",", "out_fp32", "=", "True", ")", "\n", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "z", "=", "None", ")", ":", "\n", "            ", "return", "x", ",", "y", ",", "z", "\n", "\n", "", "", "model", "=", "ExampleModule", "(", ")", "\n", "input_x", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "half", ")", "\n", "input_y", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "input_z", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "output_x", ",", "output_y", ",", "output_z", "=", "model", "(", "input_x", ",", "y", "=", "input_y", ",", "z", "=", "input_z", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_z", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "model", ".", "fp16_enabled", "=", "True", "\n", "output_x", ",", "output_y", ",", "output_z", "=", "model", "(", "input_x", ",", "y", "=", "input_y", ",", "z", "=", "input_z", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_z", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "output_x", ",", "output_y", ",", "output_z", "=", "model", "(", "\n", "input_x", ".", "cuda", "(", ")", ",", "y", "=", "input_y", ".", "cuda", "(", ")", ",", "z", "=", "input_z", ".", "cuda", "(", ")", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_z", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_fp16.test_force_fp32": [[177, 301], ["ExampleModule", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ExampleObject.", "ExampleObject.", "torch.cuda.is_available", "torch.cuda.is_available", "ExampleModule", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ExampleObject.", "ExampleObject.", "torch.cuda.is_available", "torch.cuda.is_available", "ExampleModule", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ExampleObject.", "ExampleObject.", "torch.cuda.is_available", "torch.cuda.is_available", "ExampleModule", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ExampleObject.", "ExampleObject.", "torch.cuda.is_available", "torch.cuda.is_available", "pytest.raises", "ExampleObject", "torch.ones", "torch.ones", "ExampleObject.", "mmcv.runner.force_fp32", "ExampleObject.cuda", "ExampleObject.", "mmcv.runner.force_fp32", "ExampleObject.cuda", "ExampleObject.", "mmcv.runner.force_fp32", "ExampleObject.cuda", "ExampleObject.", "mmcv.runner.force_fp32", "ExampleObject.cuda", "ExampleObject.", "mmcv.runner.force_fp32", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda", "torch.ones.cuda"], "function", ["None"], ["", "", "def", "test_force_fp32", "(", ")", ":", "\n", "\n", "    ", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "# ExampleObject is not a subclass of nn.Module", "\n", "\n", "        ", "class", "ExampleObject", "(", "object", ")", ":", "\n", "\n", "            ", "@", "force_fp32", "(", ")", "\n", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "                ", "return", "x", "\n", "\n", "", "", "model", "=", "ExampleObject", "(", ")", "\n", "input_x", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "model", "(", "input_x", ")", "\n", "\n", "# apply to all input args", "\n", "", "class", "ExampleModule", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "        ", "@", "force_fp32", "(", ")", "\n", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "            ", "return", "x", ",", "y", "\n", "\n", "", "", "model", "=", "ExampleModule", "(", ")", "\n", "input_x", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "half", ")", "\n", "input_y", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "half", ")", "\n", "output_x", ",", "output_y", "=", "model", "(", "input_x", ",", "input_y", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "half", "\n", "\n", "model", ".", "fp16_enabled", "=", "True", "\n", "output_x", ",", "output_y", "=", "model", "(", "input_x", ",", "input_y", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "output_x", ",", "output_y", "=", "model", "(", "input_x", ".", "cuda", "(", ")", ",", "input_y", ".", "cuda", "(", ")", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "float32", "\n", "\n", "# apply to specified input args", "\n", "", "class", "ExampleModule", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "        ", "@", "force_fp32", "(", "apply_to", "=", "(", "'x'", ",", ")", ")", "\n", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "            ", "return", "x", ",", "y", "\n", "\n", "", "", "model", "=", "ExampleModule", "(", ")", "\n", "input_x", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "half", ")", "\n", "input_y", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "half", ")", "\n", "output_x", ",", "output_y", "=", "model", "(", "input_x", ",", "input_y", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "half", "\n", "\n", "model", ".", "fp16_enabled", "=", "True", "\n", "output_x", ",", "output_y", "=", "model", "(", "input_x", ",", "input_y", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "half", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "output_x", ",", "output_y", "=", "model", "(", "input_x", ".", "cuda", "(", ")", ",", "input_y", ".", "cuda", "(", ")", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "half", "\n", "\n", "# apply to optional input args", "\n", "", "class", "ExampleModule", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "        ", "@", "force_fp32", "(", "apply_to", "=", "(", "'x'", ",", "'y'", ")", ")", "\n", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "z", "=", "None", ")", ":", "\n", "            ", "return", "x", ",", "y", ",", "z", "\n", "\n", "", "", "model", "=", "ExampleModule", "(", ")", "\n", "input_x", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "half", ")", "\n", "input_y", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "half", ")", "\n", "input_z", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "half", ")", "\n", "output_x", ",", "output_y", ",", "output_z", "=", "model", "(", "input_x", ",", "y", "=", "input_y", ",", "z", "=", "input_z", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_z", ".", "dtype", "==", "torch", ".", "half", "\n", "\n", "model", ".", "fp16_enabled", "=", "True", "\n", "output_x", ",", "output_y", ",", "output_z", "=", "model", "(", "input_x", ",", "y", "=", "input_y", ",", "z", "=", "input_z", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_z", ".", "dtype", "==", "torch", ".", "half", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "output_x", ",", "output_y", ",", "output_z", "=", "model", "(", "\n", "input_x", ".", "cuda", "(", ")", ",", "y", "=", "input_y", ".", "cuda", "(", ")", ",", "z", "=", "input_z", ".", "cuda", "(", ")", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_z", ".", "dtype", "==", "torch", ".", "half", "\n", "\n", "# out_fp16=True", "\n", "", "class", "ExampleModule", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "        ", "@", "force_fp32", "(", "apply_to", "=", "(", "'x'", ",", "'y'", ")", ",", "out_fp16", "=", "True", ")", "\n", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ",", "z", "=", "None", ")", ":", "\n", "            ", "return", "x", ",", "y", ",", "z", "\n", "\n", "", "", "model", "=", "ExampleModule", "(", ")", "\n", "input_x", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "input_y", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "half", ")", "\n", "input_z", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "half", ")", "\n", "output_x", ",", "output_y", ",", "output_z", "=", "model", "(", "input_x", ",", "y", "=", "input_y", ",", "z", "=", "input_z", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "float32", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_z", ".", "dtype", "==", "torch", ".", "half", "\n", "\n", "model", ".", "fp16_enabled", "=", "True", "\n", "output_x", ",", "output_y", ",", "output_z", "=", "model", "(", "input_x", ",", "y", "=", "input_y", ",", "z", "=", "input_z", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_z", ".", "dtype", "==", "torch", ".", "half", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "output_x", ",", "output_y", ",", "output_z", "=", "model", "(", "\n", "input_x", ".", "cuda", "(", ")", ",", "y", "=", "input_y", ".", "cuda", "(", ")", ",", "z", "=", "input_z", ".", "cuda", "(", ")", ")", "\n", "assert", "output_x", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_y", ".", "dtype", "==", "torch", ".", "half", "\n", "assert", "output_z", ".", "dtype", "==", "torch", ".", "half", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_async.AsyncTestCase._run_test_method": [[23, 28], ["method", "asyncio.iscoroutine", "test_async.AsyncTestCase.loop.run_until_complete", "asyncio.wait_for"], "methods", ["None"], ["def", "_run_test_method", "(", "self", ",", "method", ")", ":", "\n", "        ", "result", "=", "method", "(", ")", "\n", "if", "asyncio", ".", "iscoroutine", "(", "result", ")", ":", "\n", "            ", "self", ".", "loop", ".", "run_until_complete", "(", "\n", "asyncio", ".", "wait_for", "(", "result", ",", "timeout", "=", "self", ".", "TEST_TIMEOUT", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_async.MaskRCNNDetector.__init__": [[32, 44], ["mmdet.apis.init_detector"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.inference.init_detector"], ["    ", "def", "__init__", "(", "self", ",", "\n", "model_config", ",", "\n", "checkpoint", "=", "None", ",", "\n", "streamqueue_size", "=", "3", ",", "\n", "device", "=", "'cuda:0'", ")", ":", "\n", "\n", "        ", "self", ".", "streamqueue_size", "=", "streamqueue_size", "\n", "self", ".", "device", "=", "device", "\n", "# build the model and load checkpoint", "\n", "self", ".", "model", "=", "init_detector", "(", "\n", "model_config", ",", "checkpoint", "=", "None", ",", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "streamqueue", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleDataset.__init__": [[19, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "index", "=", "0", "\n", "self", ".", "eval_result", "=", "[", "0.1", ",", "0.4", ",", "0.3", ",", "0.7", ",", "0.2", ",", "0.05", ",", "0.4", ",", "0.6", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleDataset.__getitem__": [[23, 26], ["dict", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "results", "=", "dict", "(", "imgs", "=", "torch", ".", "tensor", "(", "[", "1", "]", ")", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleDataset.__len__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleDataset.evaluate": [[30, 33], ["None"], "methods", ["None"], ["", "@", "mock", ".", "create_autospec", "\n", "def", "evaluate", "(", "self", ",", "results", ",", "logger", "=", "None", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.EvalDataset.evaluate": [[37, 42], ["collections.OrderedDict"], "methods", ["None"], ["    ", "def", "evaluate", "(", "self", ",", "results", ",", "logger", "=", "None", ")", ":", "\n", "        ", "mean_ap", "=", "self", ".", "eval_result", "[", "self", ".", "index", "]", "\n", "output", "=", "OrderedDict", "(", "mAP", "=", "mean_ap", ",", "index", "=", "self", ".", "index", ",", "score", "=", "mean_ap", ")", "\n", "self", ".", "index", "+=", "1", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.__init__": [[46, 50], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Linear", "(", "1", ",", "1", ")", "\n", "self", ".", "test_cfg", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.forward": [[51, 53], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "imgs", ",", "rescale", "=", "False", ",", "return_loss", "=", "False", ")", ":", "\n", "        ", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.ExampleModel.train_step": [[54, 63], ["None"], "methods", ["None"], ["", "def", "train_step", "(", "self", ",", "data_batch", ",", "optimizer", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "{", "\n", "'loss'", ":", "0.5", ",", "\n", "'log_vars'", ":", "{", "\n", "'accuracy'", ":", "0.98", "\n", "}", ",", "\n", "'num_samples'", ":", "1", "\n", "}", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_eval_hook.test_eval_hook": [[65, 264], ["pytest.mark.skipif", "unittest.mock.patch", "unittest.mock.patch", "pytest.mark.parametrize", "dict", "test_eval_hook.ExampleDataset", "torch.utils.data.DataLoader", "test_eval_hook.ExampleModel", "mmcv.runner.build_optimizer", "torch.utils.data.DataLoader", "EvalHookCls", "torch.utils.data.DataLoader", "test_eval_hook.ExampleModel", "torch.utils.data.DataLoader", "EvalHookCls", "torch.utils.data.DataLoader", "test_eval_hook.ExampleModel", "torch.utils.data.DataLoader", "EvalHookCls", "torch.utils.data.DataLoader", "EvalHookCls", "torch.utils.data.DataLoader", "EvalHookCls", "torch.utils.data.DataLoader", "EvalHookCls", "pytest.raises", "test_eval_hook.ExampleDataset", "EvalHookCls", "pytest.raises", "test_eval_hook.ExampleDataset", "torch.utils.data.DataLoader", "EvalHookCls", "pytest.raises", "test_eval_hook.ExampleDataset", "torch.utils.data.DataLoader", "EvalHookCls", "tempfile.TemporaryDirectory", "mmcv.utils.get_logger", "mmcv.runner.EpochBasedRunner", "mmcv.runner.EpochBasedRunner.register_hook", "mmcv.runner.EpochBasedRunner.run", "test_eval_hook.EvalDataset", "test_eval_hook.EvalDataset", "tempfile.TemporaryDirectory", "mmcv.utils.get_logger", "mmcv.runner.EpochBasedRunner", "mmcv.runner.EpochBasedRunner.register_checkpoint_hook", "mmcv.runner.EpochBasedRunner.register_hook", "mmcv.runner.EpochBasedRunner.run", "os.join", "os.join", "os.exists", "test_eval_hook.EvalDataset", "test_eval_hook.EvalDataset", "tempfile.TemporaryDirectory", "mmcv.utils.get_logger", "mmcv.runner.EpochBasedRunner", "mmcv.runner.EpochBasedRunner.register_checkpoint_hook", "mmcv.runner.EpochBasedRunner.register_hook", "mmcv.runner.EpochBasedRunner.run", "os.join", "os.join", "os.exists", "test_eval_hook.EvalDataset", "tempfile.TemporaryDirectory", "mmcv.utils.get_logger", "mmcv.runner.EpochBasedRunner", "mmcv.runner.EpochBasedRunner.register_checkpoint_hook", "mmcv.runner.EpochBasedRunner.register_hook", "mmcv.runner.EpochBasedRunner.run", "os.join", "os.join", "os.exists", "test_eval_hook.EvalDataset", "tempfile.TemporaryDirectory", "mmcv.utils.get_logger", "mmcv.runner.EpochBasedRunner", "mmcv.runner.EpochBasedRunner.register_checkpoint_hook", "mmcv.runner.EpochBasedRunner.register_hook", "mmcv.runner.EpochBasedRunner.run", "os.join", "os.join", "os.exists", "test_eval_hook.EvalDataset", "tempfile.TemporaryDirectory", "mmcv.utils.get_logger", "mmcv.runner.EpochBasedRunner", "mmcv.runner.EpochBasedRunner.register_checkpoint_hook", "mmcv.runner.EpochBasedRunner.register_hook", "mmcv.runner.EpochBasedRunner.run", "os.join", "os.join", "os.exists", "os.join", "torch.utils.data.DataLoader", "EvalHookCls", "mmcv.runner.EpochBasedRunner", "mmcv.runner.EpochBasedRunner.register_checkpoint_hook", "mmcv.runner.EpochBasedRunner.register_hook", "mmcv.runner.EpochBasedRunner.resume", "mmcv.runner.EpochBasedRunner.run", "os.join", "os.join", "os.exists", "torch.cuda.is_available", "torch.cuda.is_available", "torch.utils.data.DataLoader", "dict", "os.realpath", "dict", "os.realpath", "dict", "os.realpath", "dict", "os.realpath", "dict", "os.realpath", "test_eval_hook.ExampleDataset", "dict", "os.realpath"], "function", ["None"], ["", "", "@", "pytest", ".", "mark", ".", "skipif", "(", "\n", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "reason", "=", "'requires CUDA support'", ")", "\n", "@", "patch", "(", "'mmdet.apis.single_gpu_test'", ",", "MagicMock", ")", "\n", "@", "patch", "(", "'mmdet.apis.multi_gpu_test'", ",", "MagicMock", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'EvalHookCls'", ",", "(", "EvalHook", ",", "DistEvalHook", ")", ")", "\n", "def", "test_eval_hook", "(", "EvalHookCls", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "TypeError", ")", ":", "\n", "# dataloader must be a pytorch DataLoader", "\n", "        ", "test_dataset", "=", "ExampleDataset", "(", ")", "\n", "data_loader", "=", "[", "\n", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "sampler", "=", "None", ",", "\n", "num_worker", "=", "0", ",", "\n", "shuffle", "=", "False", ")", "\n", "]", "\n", "EvalHookCls", "(", "data_loader", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "KeyError", ")", ":", "\n", "# rule must be in keys of rule_map", "\n", "        ", "test_dataset", "=", "ExampleDataset", "(", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "sampler", "=", "None", ",", "\n", "num_workers", "=", "0", ",", "\n", "shuffle", "=", "False", ")", "\n", "EvalHookCls", "(", "data_loader", ",", "save_best", "=", "'auto'", ",", "rule", "=", "'unsupport'", ")", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "# key_indicator must be valid when rule_map is None", "\n", "        ", "test_dataset", "=", "ExampleDataset", "(", ")", "\n", "data_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "sampler", "=", "None", ",", "\n", "num_workers", "=", "0", ",", "\n", "shuffle", "=", "False", ")", "\n", "EvalHookCls", "(", "data_loader", ",", "save_best", "=", "'unsupport'", ")", "\n", "\n", "", "optimizer_cfg", "=", "dict", "(", "\n", "type", "=", "'SGD'", ",", "lr", "=", "0.01", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.0001", ")", "\n", "\n", "test_dataset", "=", "ExampleDataset", "(", ")", "\n", "loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ")", "\n", "model", "=", "ExampleModel", "(", ")", "\n", "optimizer", "=", "build_optimizer", "(", "model", ",", "optimizer_cfg", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ")", "\n", "eval_hook", "=", "EvalHookCls", "(", "data_loader", ",", "save_best", "=", "None", ")", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "        ", "logger", "=", "get_logger", "(", "'test_eval'", ")", "\n", "runner", "=", "EpochBasedRunner", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "tmpdir", ",", "\n", "logger", "=", "logger", ")", "\n", "runner", ".", "register_hook", "(", "eval_hook", ")", "\n", "runner", ".", "run", "(", "[", "loader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "1", ")", "\n", "assert", "runner", ".", "meta", "is", "None", "or", "'best_score'", "not", "in", "runner", ".", "meta", "[", "\n", "'hook_msgs'", "]", "\n", "assert", "runner", ".", "meta", "is", "None", "or", "'best_ckpt'", "not", "in", "runner", ".", "meta", "[", "\n", "'hook_msgs'", "]", "\n", "\n", "# when `save_best` is set to 'auto', first metric will be used.", "\n", "", "loader", "=", "DataLoader", "(", "EvalDataset", "(", ")", ",", "batch_size", "=", "1", ")", "\n", "model", "=", "ExampleModel", "(", ")", "\n", "data_loader", "=", "DataLoader", "(", "EvalDataset", "(", ")", ",", "batch_size", "=", "1", ")", "\n", "eval_hook", "=", "EvalHookCls", "(", "data_loader", ",", "interval", "=", "1", ",", "save_best", "=", "'auto'", ")", "\n", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "        ", "logger", "=", "get_logger", "(", "'test_eval'", ")", "\n", "runner", "=", "EpochBasedRunner", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "tmpdir", ",", "\n", "logger", "=", "logger", ")", "\n", "runner", ".", "register_checkpoint_hook", "(", "dict", "(", "interval", "=", "1", ")", ")", "\n", "runner", ".", "register_hook", "(", "eval_hook", ")", "\n", "runner", ".", "run", "(", "[", "loader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "8", ")", "\n", "\n", "real_path", "=", "osp", ".", "join", "(", "tmpdir", ",", "'epoch_4.pth'", ")", "\n", "link_path", "=", "osp", ".", "join", "(", "tmpdir", ",", "'best_mAP.pth'", ")", "\n", "\n", "assert", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_ckpt'", "]", "==", "osp", ".", "realpath", "(", "real_path", ")", "\n", "assert", "osp", ".", "exists", "(", "link_path", ")", "\n", "assert", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_score'", "]", "==", "0.7", "\n", "\n", "", "loader", "=", "DataLoader", "(", "EvalDataset", "(", ")", ",", "batch_size", "=", "1", ")", "\n", "model", "=", "ExampleModel", "(", ")", "\n", "data_loader", "=", "DataLoader", "(", "EvalDataset", "(", ")", ",", "batch_size", "=", "1", ")", "\n", "eval_hook", "=", "EvalHookCls", "(", "data_loader", ",", "interval", "=", "1", ",", "save_best", "=", "'mAP'", ")", "\n", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "        ", "logger", "=", "get_logger", "(", "'test_eval'", ")", "\n", "runner", "=", "EpochBasedRunner", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "tmpdir", ",", "\n", "logger", "=", "logger", ")", "\n", "runner", ".", "register_checkpoint_hook", "(", "dict", "(", "interval", "=", "1", ")", ")", "\n", "runner", ".", "register_hook", "(", "eval_hook", ")", "\n", "runner", ".", "run", "(", "[", "loader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "8", ")", "\n", "\n", "real_path", "=", "osp", ".", "join", "(", "tmpdir", ",", "'epoch_4.pth'", ")", "\n", "link_path", "=", "osp", ".", "join", "(", "tmpdir", ",", "'best_mAP.pth'", ")", "\n", "\n", "assert", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_ckpt'", "]", "==", "osp", ".", "realpath", "(", "real_path", ")", "\n", "assert", "osp", ".", "exists", "(", "link_path", ")", "\n", "assert", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_score'", "]", "==", "0.7", "\n", "\n", "", "data_loader", "=", "DataLoader", "(", "EvalDataset", "(", ")", ",", "batch_size", "=", "1", ")", "\n", "eval_hook", "=", "EvalHookCls", "(", "\n", "data_loader", ",", "interval", "=", "1", ",", "save_best", "=", "'score'", ",", "rule", "=", "'greater'", ")", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "        ", "logger", "=", "get_logger", "(", "'test_eval'", ")", "\n", "runner", "=", "EpochBasedRunner", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "tmpdir", ",", "\n", "logger", "=", "logger", ")", "\n", "runner", ".", "register_checkpoint_hook", "(", "dict", "(", "interval", "=", "1", ")", ")", "\n", "runner", ".", "register_hook", "(", "eval_hook", ")", "\n", "runner", ".", "run", "(", "[", "loader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "8", ")", "\n", "\n", "real_path", "=", "osp", ".", "join", "(", "tmpdir", ",", "'epoch_4.pth'", ")", "\n", "link_path", "=", "osp", ".", "join", "(", "tmpdir", ",", "'best_score.pth'", ")", "\n", "\n", "assert", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_ckpt'", "]", "==", "osp", ".", "realpath", "(", "real_path", ")", "\n", "assert", "osp", ".", "exists", "(", "link_path", ")", "\n", "assert", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_score'", "]", "==", "0.7", "\n", "\n", "", "data_loader", "=", "DataLoader", "(", "EvalDataset", "(", ")", ",", "batch_size", "=", "1", ")", "\n", "eval_hook", "=", "EvalHookCls", "(", "data_loader", ",", "save_best", "=", "'mAP'", ",", "rule", "=", "'less'", ")", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "        ", "logger", "=", "get_logger", "(", "'test_eval'", ")", "\n", "runner", "=", "EpochBasedRunner", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "tmpdir", ",", "\n", "logger", "=", "logger", ")", "\n", "runner", ".", "register_checkpoint_hook", "(", "dict", "(", "interval", "=", "1", ")", ")", "\n", "runner", ".", "register_hook", "(", "eval_hook", ")", "\n", "runner", ".", "run", "(", "[", "loader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "8", ")", "\n", "\n", "real_path", "=", "osp", ".", "join", "(", "tmpdir", ",", "'epoch_6.pth'", ")", "\n", "link_path", "=", "osp", ".", "join", "(", "tmpdir", ",", "'best_mAP.pth'", ")", "\n", "\n", "assert", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_ckpt'", "]", "==", "osp", ".", "realpath", "(", "real_path", ")", "\n", "assert", "osp", ".", "exists", "(", "link_path", ")", "\n", "assert", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_score'", "]", "==", "0.05", "\n", "\n", "", "data_loader", "=", "DataLoader", "(", "EvalDataset", "(", ")", ",", "batch_size", "=", "1", ")", "\n", "eval_hook", "=", "EvalHookCls", "(", "data_loader", ",", "save_best", "=", "'mAP'", ")", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmpdir", ":", "\n", "        ", "logger", "=", "get_logger", "(", "'test_eval'", ")", "\n", "runner", "=", "EpochBasedRunner", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "tmpdir", ",", "\n", "logger", "=", "logger", ")", "\n", "runner", ".", "register_checkpoint_hook", "(", "dict", "(", "interval", "=", "1", ")", ")", "\n", "runner", ".", "register_hook", "(", "eval_hook", ")", "\n", "runner", ".", "run", "(", "[", "loader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "2", ")", "\n", "\n", "real_path", "=", "osp", ".", "join", "(", "tmpdir", ",", "'epoch_2.pth'", ")", "\n", "link_path", "=", "osp", ".", "join", "(", "tmpdir", ",", "'best_mAP.pth'", ")", "\n", "\n", "assert", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_ckpt'", "]", "==", "osp", ".", "realpath", "(", "real_path", ")", "\n", "assert", "osp", ".", "exists", "(", "link_path", ")", "\n", "assert", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_score'", "]", "==", "0.4", "\n", "\n", "resume_from", "=", "osp", ".", "join", "(", "tmpdir", ",", "'latest.pth'", ")", "\n", "loader", "=", "DataLoader", "(", "ExampleDataset", "(", ")", ",", "batch_size", "=", "1", ")", "\n", "eval_hook", "=", "EvalHookCls", "(", "data_loader", ",", "save_best", "=", "'mAP'", ")", "\n", "runner", "=", "EpochBasedRunner", "(", "\n", "model", "=", "model", ",", "\n", "batch_processor", "=", "None", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "work_dir", "=", "tmpdir", ",", "\n", "logger", "=", "logger", ")", "\n", "runner", ".", "register_checkpoint_hook", "(", "dict", "(", "interval", "=", "1", ")", ")", "\n", "runner", ".", "register_hook", "(", "eval_hook", ")", "\n", "runner", ".", "resume", "(", "resume_from", ")", "\n", "runner", ".", "run", "(", "[", "loader", "]", ",", "[", "(", "'train'", ",", "1", ")", "]", ",", "8", ")", "\n", "\n", "real_path", "=", "osp", ".", "join", "(", "tmpdir", ",", "'epoch_4.pth'", ")", "\n", "link_path", "=", "osp", ".", "join", "(", "tmpdir", ",", "'best_mAP.pth'", ")", "\n", "\n", "assert", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_ckpt'", "]", "==", "osp", ".", "realpath", "(", "real_path", ")", "\n", "assert", "osp", ".", "exists", "(", "link_path", ")", "\n", "assert", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_score'", "]", "==", "0.7", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._get_config_directory": [[13, 27], ["os.path.join", "os.path.dirname", "os.path.join", "os.path.exists", "Exception", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["def", "_get_config_directory", "(", ")", ":", "\n", "    ", "\"\"\"Find the predefined detector config directory.\"\"\"", "\n", "try", ":", "\n", "# Assume we are running in the source mmdetection repo", "\n", "        ", "repo_dpath", "=", "dirname", "(", "dirname", "(", "__file__", ")", ")", "\n", "repo_dpath", "=", "join", "(", "repo_dpath", ",", "'..'", ")", "\n", "", "except", "NameError", ":", "\n", "# For IPython development when this __file__ is not defined", "\n", "        ", "import", "mmdet", "\n", "repo_dpath", "=", "dirname", "(", "dirname", "(", "mmdet", ".", "__file__", ")", ")", "\n", "", "config_dpath", "=", "join", "(", "repo_dpath", ",", "'configs'", ")", "\n", "if", "not", "exists", "(", "config_dpath", ")", ":", "\n", "        ", "raise", "Exception", "(", "'Cannot find config path'", ")", "\n", "", "return", "config_dpath", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_numclasscheckhook": [[29, 62], ["unittest.mock.Mock", "mmdet.datasets.utils.NumClassCheckHook", "test_config._check_numclasscheckhook.get_dataset_name_classes"], "function", ["None"], ["", "def", "_check_numclasscheckhook", "(", "detector", ",", "config_mod", ")", ":", "\n", "    ", "dummy_runner", "=", "Mock", "(", ")", "\n", "dummy_runner", ".", "model", "=", "detector", "\n", "\n", "def", "get_dataset_name_classes", "(", "dataset", ")", ":", "\n", "# deal with `RepeatDataset`,`ConcatDataset`,`ClassBalancedDataset`..", "\n", "        ", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "dataset", "=", "dataset", "[", "0", "]", "\n", "", "while", "(", "'dataset'", "in", "dataset", ")", ":", "\n", "            ", "dataset", "=", "dataset", "[", "'dataset'", "]", "\n", "# ConcatDataset", "\n", "if", "isinstance", "(", "dataset", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "dataset", "=", "dataset", "[", "0", "]", "\n", "", "", "return", "dataset", "[", "'type'", "]", ",", "dataset", ".", "get", "(", "'classes'", ",", "None", ")", "\n", "\n", "", "compatible_check", "=", "NumClassCheckHook", "(", ")", "\n", "dataset_name", ",", "CLASSES", "=", "get_dataset_name_classes", "(", "\n", "config_mod", "[", "'data'", "]", "[", "'train'", "]", ")", "\n", "if", "CLASSES", "is", "None", ":", "\n", "        ", "CLASSES", "=", "DATASETS", ".", "get", "(", "dataset_name", ")", ".", "CLASSES", "\n", "", "dummy_runner", ".", "data_loader", ".", "dataset", ".", "CLASSES", "=", "CLASSES", "\n", "compatible_check", ".", "before_train_epoch", "(", "dummy_runner", ")", "\n", "\n", "dummy_runner", ".", "data_loader", ".", "dataset", ".", "CLASSES", "=", "None", "\n", "compatible_check", ".", "before_train_epoch", "(", "dummy_runner", ")", "\n", "\n", "dataset_name", ",", "CLASSES", "=", "get_dataset_name_classes", "(", "config_mod", "[", "'data'", "]", "[", "'val'", "]", ")", "\n", "if", "CLASSES", "is", "None", ":", "\n", "        ", "CLASSES", "=", "DATASETS", ".", "get", "(", "dataset_name", ")", ".", "CLASSES", "\n", "", "dummy_runner", ".", "data_loader", ".", "dataset", ".", "CLASSES", "=", "CLASSES", "\n", "compatible_check", ".", "before_val_epoch", "(", "dummy_runner", ")", "\n", "dummy_runner", ".", "data_loader", ".", "dataset", ".", "CLASSES", "=", "None", "\n", "compatible_check", ".", "before_val_epoch", "(", "dummy_runner", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config.test_config_build_detector": [[64, 106], ["test_config._get_config_directory", "print", "list", "print", "glob.glob", "os.path.relpath", "os.path.join", "Config.fromfile", "print", "build_detector", "test_config._check_numclasscheckhook", "mmcv.runner.build_optimizer", "isinstance", "os.path.join", "Config.fromfile.model.keys", "test_config._check_roi_head", "p.find", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._get_config_directory", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_numclasscheckhook", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_roi_head"], ["", "def", "test_config_build_detector", "(", ")", ":", "\n", "    ", "\"\"\"Test that all detection models defined in the configs can be\n    initialized.\"\"\"", "\n", "from", "mmcv", "import", "Config", "\n", "from", "mmdet", ".", "models", "import", "build_detector", "\n", "\n", "config_dpath", "=", "_get_config_directory", "(", ")", "\n", "print", "(", "f'Found config_dpath = {config_dpath}'", ")", "\n", "\n", "import", "glob", "\n", "config_fpaths", "=", "list", "(", "glob", ".", "glob", "(", "join", "(", "config_dpath", ",", "'**'", ",", "'*.py'", ")", ")", ")", "\n", "config_fpaths", "=", "[", "p", "for", "p", "in", "config_fpaths", "if", "p", ".", "find", "(", "'_base_'", ")", "==", "-", "1", "]", "\n", "config_names", "=", "[", "relpath", "(", "p", ",", "config_dpath", ")", "for", "p", "in", "config_fpaths", "]", "\n", "\n", "print", "(", "f'Using {len(config_names)} config files'", ")", "\n", "\n", "for", "config_fname", "in", "config_names", ":", "\n", "        ", "config_fpath", "=", "join", "(", "config_dpath", ",", "config_fname", ")", "\n", "config_mod", "=", "Config", ".", "fromfile", "(", "config_fpath", ")", "\n", "config_mod", ".", "model", "\n", "print", "(", "f'Building detector, config_fpath = {config_fpath}'", ")", "\n", "\n", "# Remove pretrained keys to allow for testing in an offline environment", "\n", "if", "'pretrained'", "in", "config_mod", ".", "model", ":", "\n", "            ", "config_mod", ".", "model", "[", "'pretrained'", "]", "=", "None", "\n", "\n", "", "detector", "=", "build_detector", "(", "config_mod", ".", "model", ")", "\n", "assert", "detector", "is", "not", "None", "\n", "\n", "_check_numclasscheckhook", "(", "detector", ",", "config_mod", ")", "\n", "\n", "optimizer", "=", "build_optimizer", "(", "detector", ",", "config_mod", ".", "optimizer", ")", "\n", "assert", "isinstance", "(", "optimizer", ",", "torch", ".", "optim", ".", "Optimizer", ")", "\n", "\n", "if", "'roi_head'", "in", "config_mod", ".", "model", ".", "keys", "(", ")", ":", "\n", "# for two stage detector", "\n", "# detectors must have bbox head", "\n", "            ", "assert", "detector", ".", "roi_head", ".", "with_bbox", "and", "detector", ".", "with_bbox", "\n", "assert", "detector", ".", "roi_head", ".", "with_mask", "==", "detector", ".", "with_mask", "\n", "\n", "head_config", "=", "config_mod", ".", "model", "[", "'roi_head'", "]", "\n", "_check_roi_head", "(", "head_config", ",", "detector", ".", "roi_head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_roi_head": [[115, 166], ["test_config._check_roi_extractor", "test_config._check_bbox_head", "test_config._check_mask_head", "test_config._check_roi_extractor", "len", "len", "len", "len", "hasattr", "test_config._check_roi_extractor"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_roi_extractor", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_bbox_head", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_mask_head", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_roi_extractor", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_roi_extractor"], ["", "", "", "def", "_check_roi_head", "(", "config", ",", "head", ")", ":", "\n", "# check consistency between head_config and roi_head", "\n", "    ", "assert", "config", "[", "'type'", "]", "==", "head", ".", "__class__", ".", "__name__", "\n", "\n", "# check roi_align", "\n", "bbox_roi_cfg", "=", "config", ".", "bbox_roi_extractor", "\n", "bbox_roi_extractor", "=", "head", ".", "bbox_roi_extractor", "\n", "_check_roi_extractor", "(", "bbox_roi_cfg", ",", "bbox_roi_extractor", ")", "\n", "\n", "# check bbox head infos", "\n", "bbox_cfg", "=", "config", ".", "bbox_head", "\n", "bbox_head", "=", "head", ".", "bbox_head", "\n", "_check_bbox_head", "(", "bbox_cfg", ",", "bbox_head", ")", "\n", "\n", "if", "head", ".", "with_mask", ":", "\n", "# check roi_align", "\n", "        ", "if", "config", ".", "mask_roi_extractor", ":", "\n", "            ", "mask_roi_cfg", "=", "config", ".", "mask_roi_extractor", "\n", "mask_roi_extractor", "=", "head", ".", "mask_roi_extractor", "\n", "_check_roi_extractor", "(", "mask_roi_cfg", ",", "mask_roi_extractor", ",", "\n", "bbox_roi_extractor", ")", "\n", "\n", "# check mask head infos", "\n", "", "mask_head", "=", "head", ".", "mask_head", "\n", "mask_cfg", "=", "config", ".", "mask_head", "\n", "_check_mask_head", "(", "mask_cfg", ",", "mask_head", ")", "\n", "\n", "# check arch specific settings, e.g., cascade/htc", "\n", "", "if", "config", "[", "'type'", "]", "in", "[", "'CascadeRoIHead'", ",", "'HybridTaskCascadeRoIHead'", "]", ":", "\n", "        ", "assert", "config", ".", "num_stages", "==", "len", "(", "head", ".", "bbox_head", ")", "\n", "assert", "config", ".", "num_stages", "==", "len", "(", "head", ".", "bbox_roi_extractor", ")", "\n", "\n", "if", "head", ".", "with_mask", ":", "\n", "            ", "assert", "config", ".", "num_stages", "==", "len", "(", "head", ".", "mask_head", ")", "\n", "assert", "config", ".", "num_stages", "==", "len", "(", "head", ".", "mask_roi_extractor", ")", "\n", "\n", "", "", "elif", "config", "[", "'type'", "]", "in", "[", "'MaskScoringRoIHead'", "]", ":", "\n", "        ", "assert", "(", "hasattr", "(", "head", ",", "'mask_iou_head'", ")", "\n", "and", "head", ".", "mask_iou_head", "is", "not", "None", ")", "\n", "mask_iou_cfg", "=", "config", ".", "mask_iou_head", "\n", "mask_iou_head", "=", "head", ".", "mask_iou_head", "\n", "assert", "(", "mask_iou_cfg", ".", "fc_out_channels", "==", "\n", "mask_iou_head", ".", "fc_mask_iou", ".", "in_features", ")", "\n", "\n", "", "elif", "config", "[", "'type'", "]", "in", "[", "'GridRoIHead'", "]", ":", "\n", "        ", "grid_roi_cfg", "=", "config", ".", "grid_roi_extractor", "\n", "grid_roi_extractor", "=", "head", ".", "grid_roi_extractor", "\n", "_check_roi_extractor", "(", "grid_roi_cfg", ",", "grid_roi_extractor", ",", "\n", "bbox_roi_extractor", ")", "\n", "\n", "config", ".", "grid_head", ".", "grid_points", "=", "head", ".", "grid_head", ".", "grid_points", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_roi_extractor": [[168, 194], ["isinstance", "isinstance", "len", "len", "_pair"], "function", ["None"], ["", "", "def", "_check_roi_extractor", "(", "config", ",", "roi_extractor", ",", "prev_roi_extractor", "=", "None", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "# Separate roi_extractor and prev_roi_extractor checks for flexibility", "\n", "if", "isinstance", "(", "roi_extractor", ",", "nn", ".", "ModuleList", ")", ":", "\n", "        ", "roi_extractor", "=", "roi_extractor", "[", "0", "]", "\n", "", "if", "prev_roi_extractor", "and", "isinstance", "(", "prev_roi_extractor", ",", "nn", ".", "ModuleList", ")", ":", "\n", "        ", "prev_roi_extractor", "=", "prev_roi_extractor", "[", "0", "]", "\n", "\n", "", "assert", "(", "len", "(", "config", ".", "featmap_strides", ")", "==", "len", "(", "roi_extractor", ".", "roi_layers", ")", ")", "\n", "assert", "(", "config", ".", "out_channels", "==", "roi_extractor", ".", "out_channels", ")", "\n", "from", "torch", ".", "nn", ".", "modules", ".", "utils", "import", "_pair", "\n", "assert", "(", "_pair", "(", "config", ".", "roi_layer", ".", "output_size", ")", "==", "\n", "roi_extractor", ".", "roi_layers", "[", "0", "]", ".", "output_size", ")", "\n", "\n", "if", "'use_torchvision'", "in", "config", ".", "roi_layer", ":", "\n", "        ", "assert", "(", "config", ".", "roi_layer", ".", "use_torchvision", "==", "\n", "roi_extractor", ".", "roi_layers", "[", "0", "]", ".", "use_torchvision", ")", "\n", "", "elif", "'aligned'", "in", "config", ".", "roi_layer", ":", "\n", "        ", "assert", "(", "\n", "config", ".", "roi_layer", ".", "aligned", "==", "roi_extractor", ".", "roi_layers", "[", "0", "]", ".", "aligned", ")", "\n", "\n", "", "if", "prev_roi_extractor", ":", "\n", "        ", "assert", "(", "roi_extractor", ".", "roi_layers", "[", "0", "]", ".", "aligned", "==", "\n", "prev_roi_extractor", ".", "roi_layers", "[", "0", "]", ".", "aligned", ")", "\n", "assert", "(", "roi_extractor", ".", "roi_layers", "[", "0", "]", ".", "use_torchvision", "==", "\n", "prev_roi_extractor", ".", "roi_layers", "[", "0", "]", ".", "use_torchvision", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_mask_head": [[196, 217], ["isinstance", "zip", "isinstance", "test_config._check_mask_head", "mask_cfg.get", "hasattr", "test_config._check_mask_head"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_mask_head", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_mask_head"], ["", "", "def", "_check_mask_head", "(", "mask_cfg", ",", "mask_head", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "if", "isinstance", "(", "mask_cfg", ",", "list", ")", ":", "\n", "        ", "for", "single_mask_cfg", ",", "single_mask_head", "in", "zip", "(", "mask_cfg", ",", "mask_head", ")", ":", "\n", "            ", "_check_mask_head", "(", "single_mask_cfg", ",", "single_mask_head", ")", "\n", "", "", "elif", "isinstance", "(", "mask_head", ",", "nn", ".", "ModuleList", ")", ":", "\n", "        ", "for", "single_mask_head", "in", "mask_head", ":", "\n", "            ", "_check_mask_head", "(", "mask_cfg", ",", "single_mask_head", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "mask_cfg", "[", "'type'", "]", "==", "mask_head", ".", "__class__", ".", "__name__", "\n", "assert", "mask_cfg", ".", "in_channels", "==", "mask_head", ".", "in_channels", "\n", "class_agnostic", "=", "mask_cfg", ".", "get", "(", "'class_agnostic'", ",", "False", ")", "\n", "out_dim", "=", "(", "1", "if", "class_agnostic", "else", "mask_cfg", ".", "num_classes", ")", "\n", "if", "hasattr", "(", "mask_head", ",", "'conv_logits'", ")", ":", "\n", "            ", "assert", "(", "mask_cfg", ".", "conv_out_channels", "==", "\n", "mask_head", ".", "conv_logits", ".", "in_channels", ")", "\n", "assert", "mask_head", ".", "conv_logits", ".", "out_channels", "==", "out_dim", "\n", "", "else", ":", "\n", "            ", "assert", "mask_cfg", ".", "fc_out_channels", "==", "mask_head", ".", "fc_logits", ".", "in_features", "\n", "assert", "(", "mask_head", ".", "fc_logits", ".", "out_features", "==", "out_dim", "*", "\n", "mask_head", ".", "output_area", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_bbox_head": [[219, 263], ["isinstance", "zip", "isinstance", "test_config._check_bbox_head", "test_config._check_bbox_head", "bbox_cfg.get", "bbox_cfg.get", "bbox_cfg.get", "bbox_cfg.get", "len", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_bbox_head", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_bbox_head"], ["", "", "", "def", "_check_bbox_head", "(", "bbox_cfg", ",", "bbox_head", ")", ":", "\n", "    ", "import", "torch", ".", "nn", "as", "nn", "\n", "if", "isinstance", "(", "bbox_cfg", ",", "list", ")", ":", "\n", "        ", "for", "single_bbox_cfg", ",", "single_bbox_head", "in", "zip", "(", "bbox_cfg", ",", "bbox_head", ")", ":", "\n", "            ", "_check_bbox_head", "(", "single_bbox_cfg", ",", "single_bbox_head", ")", "\n", "", "", "elif", "isinstance", "(", "bbox_head", ",", "nn", ".", "ModuleList", ")", ":", "\n", "        ", "for", "single_bbox_head", "in", "bbox_head", ":", "\n", "            ", "_check_bbox_head", "(", "bbox_cfg", ",", "single_bbox_head", ")", "\n", "", "", "else", ":", "\n", "        ", "assert", "bbox_cfg", "[", "'type'", "]", "==", "bbox_head", ".", "__class__", ".", "__name__", "\n", "if", "bbox_cfg", "[", "'type'", "]", "==", "'SABLHead'", ":", "\n", "            ", "assert", "bbox_cfg", ".", "cls_in_channels", "==", "bbox_head", ".", "cls_in_channels", "\n", "assert", "bbox_cfg", ".", "reg_in_channels", "==", "bbox_head", ".", "reg_in_channels", "\n", "\n", "cls_out_channels", "=", "bbox_cfg", ".", "get", "(", "'cls_out_channels'", ",", "1024", ")", "\n", "assert", "(", "cls_out_channels", "==", "bbox_head", ".", "fc_cls", ".", "in_features", ")", "\n", "assert", "(", "bbox_cfg", ".", "num_classes", "+", "1", "==", "bbox_head", ".", "fc_cls", ".", "out_features", ")", "\n", "\n", "", "elif", "bbox_cfg", "[", "'type'", "]", "==", "'DIIHead'", ":", "\n", "            ", "assert", "bbox_cfg", "[", "'num_ffn_fcs'", "]", "==", "bbox_head", ".", "ffn", ".", "num_fcs", "\n", "# 3 means FC and LN and Relu", "\n", "assert", "bbox_cfg", "[", "'num_cls_fcs'", "]", "==", "len", "(", "bbox_head", ".", "cls_fcs", ")", "//", "3", "\n", "assert", "bbox_cfg", "[", "'num_reg_fcs'", "]", "==", "len", "(", "bbox_head", ".", "reg_fcs", ")", "//", "3", "\n", "assert", "bbox_cfg", "[", "'in_channels'", "]", "==", "bbox_head", ".", "in_channels", "\n", "assert", "bbox_cfg", "[", "'in_channels'", "]", "==", "bbox_head", ".", "fc_cls", ".", "in_features", "\n", "assert", "bbox_cfg", "[", "'in_channels'", "]", "==", "bbox_head", ".", "fc_reg", ".", "in_features", "\n", "assert", "bbox_cfg", "[", "'in_channels'", "]", "==", "bbox_head", ".", "attention", ".", "embed_dims", "\n", "assert", "bbox_cfg", "[", "\n", "'feedforward_channels'", "]", "==", "bbox_head", ".", "ffn", ".", "feedforward_channels", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "bbox_cfg", ".", "in_channels", "==", "bbox_head", ".", "in_channels", "\n", "with_cls", "=", "bbox_cfg", ".", "get", "(", "'with_cls'", ",", "True", ")", "\n", "\n", "if", "with_cls", ":", "\n", "                ", "fc_out_channels", "=", "bbox_cfg", ".", "get", "(", "'fc_out_channels'", ",", "2048", ")", "\n", "assert", "(", "fc_out_channels", "==", "bbox_head", ".", "fc_cls", ".", "in_features", ")", "\n", "assert", "(", "bbox_cfg", ".", "num_classes", "+", "\n", "1", "==", "bbox_head", ".", "fc_cls", ".", "out_features", ")", "\n", "", "with_reg", "=", "bbox_cfg", ".", "get", "(", "'with_reg'", ",", "True", ")", "\n", "if", "with_reg", ":", "\n", "                ", "out_dim", "=", "(", "4", "if", "bbox_cfg", ".", "reg_class_agnostic", "else", "4", "*", "\n", "bbox_cfg", ".", "num_classes", ")", "\n", "assert", "bbox_head", ".", "fc_reg", ".", "out_features", "==", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._check_anchorhead": [[265, 286], ["config.loss_cls.get"], "function", ["None"], ["", "", "", "", "def", "_check_anchorhead", "(", "config", ",", "head", ")", ":", "\n", "# check consistency between head_config and roi_head", "\n", "    ", "assert", "config", "[", "'type'", "]", "==", "head", ".", "__class__", ".", "__name__", "\n", "assert", "config", ".", "in_channels", "==", "head", ".", "in_channels", "\n", "\n", "num_classes", "=", "(", "\n", "config", ".", "num_classes", "-", "\n", "1", "if", "config", ".", "loss_cls", ".", "get", "(", "'use_sigmoid'", ",", "False", ")", "else", "config", ".", "num_classes", ")", "\n", "if", "config", "[", "'type'", "]", "==", "'ATSSHead'", ":", "\n", "        ", "assert", "(", "config", ".", "feat_channels", "==", "head", ".", "atss_cls", ".", "in_channels", ")", "\n", "assert", "(", "config", ".", "feat_channels", "==", "head", ".", "atss_reg", ".", "in_channels", ")", "\n", "assert", "(", "config", ".", "feat_channels", "==", "head", ".", "atss_centerness", ".", "in_channels", ")", "\n", "", "elif", "config", "[", "'type'", "]", "==", "'SABLRetinaHead'", ":", "\n", "        ", "assert", "(", "config", ".", "feat_channels", "==", "head", ".", "retina_cls", ".", "in_channels", ")", "\n", "assert", "(", "config", ".", "feat_channels", "==", "head", ".", "retina_bbox_reg", ".", "in_channels", ")", "\n", "assert", "(", "config", ".", "feat_channels", "==", "head", ".", "retina_bbox_cls", ".", "in_channels", ")", "\n", "", "else", ":", "\n", "        ", "assert", "(", "config", ".", "in_channels", "==", "head", ".", "conv_cls", ".", "in_channels", ")", "\n", "assert", "(", "config", ".", "in_channels", "==", "head", ".", "conv_reg", ".", "in_channels", ")", "\n", "assert", "(", "head", ".", "conv_cls", ".", "out_channels", "==", "num_classes", "*", "head", ".", "num_anchors", ")", "\n", "assert", "head", ".", "fc_reg", ".", "out_channels", "==", "4", "*", "head", ".", "num_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config.test_config_data_pipeline": [[290, 419], ["pytest.mark.parametrize", "test_config._get_config_directory", "print", "os.path.join", "Config.fromfile", "Config.fromfile.train_pipeline.pop", "Config.fromfile.train_pipeline.pop", "Config.fromfile.test_pipeline.pop", "Compose", "Compose", "print", "print", "np.random.randint", "cfg.train_pipeline.pop.get", "dict", "Compose.", "print", "dict", "Compose.", "print", "dict", "Compose.", "print", "dict", "Compose.", "img.astype.astype", "cfg.train_pipeline.pop.get", "np.random.randint", "mmdet.core.BitmapMasks", "range", "mmdet.core.PolygonMasks", "np.array", "np.array", "test_config.test_config_data_pipeline.dummy_masks"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_runtime.test_config._get_config_directory"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "'config_rpath'", ",", "\n", "[", "\n", "'wider_face/ssd300_wider_face.py'", ",", "\n", "'pascal_voc/ssd300_voc0712.py'", ",", "\n", "'pascal_voc/ssd512_voc0712.py'", ",", "\n", "# 'albu_example/mask_rcnn_r50_fpn_1x.py',", "\n", "'foveabox/fovea_align_r50_fpn_gn-head_mstrain_640-800_4x4_2x_coco.py'", ",", "\n", "'mask_rcnn/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_coco.py'", ",", "\n", "'mask_rcnn/mask_rcnn_r50_caffe_fpn_mstrain_1x_coco.py'", ",", "\n", "'fp16/mask_rcnn_r50_fpn_fp16_1x_coco.py'", "\n", "]", ")", "\n", "def", "test_config_data_pipeline", "(", "config_rpath", ")", ":", "\n", "    ", "\"\"\"Test whether the data pipeline is valid and can process corner cases.\n\n    CommandLine:\n        xdoctest -m tests/test_runtime/\n            test_config.py test_config_build_data_pipeline\n    \"\"\"", "\n", "from", "mmcv", "import", "Config", "\n", "from", "mmdet", ".", "datasets", ".", "pipelines", "import", "Compose", "\n", "import", "numpy", "as", "np", "\n", "\n", "config_dpath", "=", "_get_config_directory", "(", ")", "\n", "print", "(", "f'Found config_dpath = {config_dpath}'", ")", "\n", "\n", "def", "dummy_masks", "(", "h", ",", "w", ",", "num_obj", "=", "3", ",", "mode", "=", "'bitmap'", ")", ":", "\n", "        ", "assert", "mode", "in", "(", "'polygon'", ",", "'bitmap'", ")", "\n", "if", "mode", "==", "'bitmap'", ":", "\n", "            ", "masks", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ",", "(", "num_obj", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "masks", "=", "BitmapMasks", "(", "masks", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "            ", "masks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_obj", ")", ":", "\n", "                ", "masks", ".", "append", "(", "[", "]", ")", "\n", "masks", "[", "-", "1", "]", ".", "append", "(", "\n", "np", ".", "random", ".", "uniform", "(", "0", ",", "min", "(", "h", "-", "1", ",", "w", "-", "1", ")", ",", "(", "8", "+", "4", "*", "i", ",", ")", ")", ")", "\n", "masks", "[", "-", "1", "]", ".", "append", "(", "\n", "np", ".", "random", ".", "uniform", "(", "0", ",", "min", "(", "h", "-", "1", ",", "w", "-", "1", ")", ",", "(", "10", "+", "4", "*", "i", ",", ")", ")", ")", "\n", "", "masks", "=", "PolygonMasks", "(", "masks", ",", "h", ",", "w", ")", "\n", "", "return", "masks", "\n", "\n", "", "config_fpath", "=", "join", "(", "config_dpath", ",", "config_rpath", ")", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "config_fpath", ")", "\n", "\n", "# remove loading pipeline", "\n", "loading_pipeline", "=", "cfg", ".", "train_pipeline", ".", "pop", "(", "0", ")", "\n", "loading_ann_pipeline", "=", "cfg", ".", "train_pipeline", ".", "pop", "(", "0", ")", "\n", "cfg", ".", "test_pipeline", ".", "pop", "(", "0", ")", "\n", "\n", "train_pipeline", "=", "Compose", "(", "cfg", ".", "train_pipeline", ")", "\n", "test_pipeline", "=", "Compose", "(", "cfg", ".", "test_pipeline", ")", "\n", "\n", "print", "(", "f'Building data pipeline, config_fpath = {config_fpath}'", ")", "\n", "\n", "print", "(", "f'Test training data pipeline: \\n{train_pipeline!r}'", ")", "\n", "img", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "255", ",", "size", "=", "(", "888", ",", "666", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "if", "loading_pipeline", ".", "get", "(", "'to_float32'", ",", "False", ")", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "mode", "=", "'bitmap'", "if", "loading_ann_pipeline", ".", "get", "(", "'poly2mask'", ",", "\n", "True", ")", "else", "'polygon'", "\n", "results", "=", "dict", "(", "\n", "filename", "=", "'test_img.png'", ",", "\n", "ori_filename", "=", "'test_img.png'", ",", "\n", "img", "=", "img", ",", "\n", "img_shape", "=", "img", ".", "shape", ",", "\n", "ori_shape", "=", "img", ".", "shape", ",", "\n", "gt_bboxes", "=", "np", ".", "array", "(", "[", "[", "35.2", ",", "11.7", ",", "39.7", ",", "15.7", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "1", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "gt_masks", "=", "dummy_masks", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ",", "mode", "=", "mode", ")", ",", "\n", ")", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", "]", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "'gt_masks'", "]", "\n", "output_results", "=", "train_pipeline", "(", "results", ")", "\n", "assert", "output_results", "is", "not", "None", "\n", "\n", "print", "(", "f'Test testing data pipeline: \\n{test_pipeline!r}'", ")", "\n", "results", "=", "dict", "(", "\n", "filename", "=", "'test_img.png'", ",", "\n", "ori_filename", "=", "'test_img.png'", ",", "\n", "img", "=", "img", ",", "\n", "img_shape", "=", "img", ".", "shape", ",", "\n", "ori_shape", "=", "img", ".", "shape", ",", "\n", "gt_bboxes", "=", "np", ".", "array", "(", "[", "[", "35.2", ",", "11.7", ",", "39.7", ",", "15.7", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "1", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "gt_masks", "=", "dummy_masks", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ",", "mode", "=", "mode", ")", ",", "\n", ")", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", "]", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "'gt_masks'", "]", "\n", "output_results", "=", "test_pipeline", "(", "results", ")", "\n", "assert", "output_results", "is", "not", "None", "\n", "\n", "# test empty GT", "\n", "print", "(", "'Test empty GT with training data pipeline: '", "\n", "f'\\n{train_pipeline!r}'", ")", "\n", "results", "=", "dict", "(", "\n", "filename", "=", "'test_img.png'", ",", "\n", "ori_filename", "=", "'test_img.png'", ",", "\n", "img", "=", "img", ",", "\n", "img_shape", "=", "img", ".", "shape", ",", "\n", "ori_shape", "=", "img", ".", "shape", ",", "\n", "gt_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "gt_masks", "=", "dummy_masks", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ",", "num_obj", "=", "0", ",", "mode", "=", "mode", ")", ",", "\n", ")", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", "]", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "'gt_masks'", "]", "\n", "output_results", "=", "train_pipeline", "(", "results", ")", "\n", "assert", "output_results", "is", "not", "None", "\n", "\n", "print", "(", "f'Test empty GT with testing data pipeline: \\n{test_pipeline!r}'", ")", "\n", "results", "=", "dict", "(", "\n", "filename", "=", "'test_img.png'", ",", "\n", "ori_filename", "=", "'test_img.png'", ",", "\n", "img", "=", "img", ",", "\n", "img_shape", "=", "img", ".", "shape", ",", "\n", "ori_shape", "=", "img", ".", "shape", ",", "\n", "gt_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int64", ")", ",", "\n", "gt_masks", "=", "dummy_masks", "(", "img", ".", "shape", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ",", "num_obj", "=", "0", ",", "mode", "=", "mode", ")", ",", "\n", ")", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "'gt_bboxes'", "]", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "'gt_masks'", "]", "\n", "output_results", "=", "test_pipeline", "(", "results", ")", "\n", "assert", "output_results", "is", "not", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_metrics.test_box_overlap.test_bbox_overlaps_2d": [[8, 106], ["mmdet.core.BboxOverlaps2D", "test_box_overlap.test_bbox_overlaps_2d._construct_bbox"], "function", ["None"], ["def", "test_bbox_overlaps_2d", "(", "eps", "=", "1e-7", ")", ":", "\n", "\n", "    ", "def", "_construct_bbox", "(", "num_bbox", "=", "None", ")", ":", "\n", "        ", "img_h", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "3", ",", "1000", ")", ")", "\n", "img_w", "=", "int", "(", "np", ".", "random", ".", "randint", "(", "3", ",", "1000", ")", ")", "\n", "if", "num_bbox", "is", "None", ":", "\n", "            ", "num_bbox", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "10", ")", "\n", "", "x1y1", "=", "torch", ".", "rand", "(", "(", "num_bbox", ",", "2", ")", ")", "\n", "x2y2", "=", "torch", ".", "max", "(", "torch", ".", "rand", "(", "(", "num_bbox", ",", "2", ")", ")", ",", "x1y1", ")", "\n", "bboxes", "=", "torch", ".", "cat", "(", "(", "x1y1", ",", "x2y2", ")", ",", "-", "1", ")", "\n", "bboxes", "[", ":", ",", "0", ":", ":", "2", "]", "*=", "img_w", "\n", "bboxes", "[", ":", ",", "1", ":", ":", "2", "]", "*=", "img_h", "\n", "return", "bboxes", ",", "num_bbox", "\n", "\n", "# is_aligned is True, bboxes.size(-1) == 5 (include score)", "\n", "", "self", "=", "BboxOverlaps2D", "(", ")", "\n", "bboxes1", ",", "num_bbox", "=", "_construct_bbox", "(", ")", "\n", "bboxes2", ",", "_", "=", "_construct_bbox", "(", "num_bbox", ")", "\n", "bboxes1", "=", "torch", ".", "cat", "(", "(", "bboxes1", ",", "torch", ".", "rand", "(", "(", "num_bbox", ",", "1", ")", ")", ")", ",", "1", ")", "\n", "bboxes2", "=", "torch", ".", "cat", "(", "(", "bboxes2", ",", "torch", ".", "rand", "(", "(", "num_bbox", ",", "1", ")", ")", ")", ",", "1", ")", "\n", "gious", "=", "self", "(", "bboxes1", ",", "bboxes2", ",", "'giou'", ",", "True", ")", "\n", "assert", "gious", ".", "size", "(", ")", "==", "(", "num_bbox", ",", ")", ",", "gious", ".", "size", "(", ")", "\n", "assert", "torch", ".", "all", "(", "gious", ">=", "-", "1", ")", "and", "torch", ".", "all", "(", "gious", "<=", "1", ")", "\n", "\n", "# is_aligned is True, bboxes1.size(-2) == 0", "\n", "bboxes1", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "bboxes2", "=", "torch", ".", "empty", "(", "(", "0", ",", "4", ")", ")", "\n", "gious", "=", "self", "(", "bboxes1", ",", "bboxes2", ",", "'giou'", ",", "True", ")", "\n", "assert", "gious", ".", "size", "(", ")", "==", "(", "0", ",", ")", ",", "gious", ".", "size", "(", ")", "\n", "assert", "torch", ".", "all", "(", "gious", "==", "torch", ".", "empty", "(", "(", "0", ",", ")", ")", ")", "\n", "assert", "torch", ".", "all", "(", "gious", ">=", "-", "1", ")", "and", "torch", ".", "all", "(", "gious", "<=", "1", ")", "\n", "\n", "# is_aligned is True, and bboxes.ndims > 2", "\n", "bboxes1", ",", "num_bbox", "=", "_construct_bbox", "(", ")", "\n", "bboxes2", ",", "_", "=", "_construct_bbox", "(", "num_bbox", ")", "\n", "bboxes1", "=", "bboxes1", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ",", "1", ")", "\n", "# test assertion when batch dim is not the same", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "self", "(", "bboxes1", ",", "bboxes2", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "3", ",", "1", ",", "1", ")", ",", "'giou'", ",", "True", ")", "\n", "", "bboxes2", "=", "bboxes2", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ",", "1", ")", "\n", "gious", "=", "self", "(", "bboxes1", ",", "bboxes2", ",", "'giou'", ",", "True", ")", "\n", "assert", "torch", ".", "all", "(", "gious", ">=", "-", "1", ")", "and", "torch", ".", "all", "(", "gious", "<=", "1", ")", "\n", "assert", "gious", ".", "size", "(", ")", "==", "(", "2", ",", "num_bbox", ")", "\n", "bboxes1", "=", "bboxes1", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", "\n", "bboxes2", "=", "bboxes2", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ",", "1", ",", "1", ")", "\n", "gious", "=", "self", "(", "bboxes1", ",", "bboxes2", ",", "'giou'", ",", "True", ")", "\n", "assert", "torch", ".", "all", "(", "gious", ">=", "-", "1", ")", "and", "torch", ".", "all", "(", "gious", "<=", "1", ")", "\n", "assert", "gious", ".", "size", "(", ")", "==", "(", "2", ",", "2", ",", "num_bbox", ")", "\n", "\n", "# is_aligned is False", "\n", "bboxes1", ",", "num_bbox1", "=", "_construct_bbox", "(", ")", "\n", "bboxes2", ",", "num_bbox2", "=", "_construct_bbox", "(", ")", "\n", "gious", "=", "self", "(", "bboxes1", ",", "bboxes2", ",", "'giou'", ")", "\n", "assert", "torch", ".", "all", "(", "gious", ">=", "-", "1", ")", "and", "torch", ".", "all", "(", "gious", "<=", "1", ")", "\n", "assert", "gious", ".", "size", "(", ")", "==", "(", "num_bbox1", ",", "num_bbox2", ")", "\n", "\n", "# is_aligned is False, and bboxes.ndims > 2", "\n", "bboxes1", "=", "bboxes1", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ",", "1", ")", "\n", "bboxes2", "=", "bboxes2", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "2", ",", "1", ",", "1", ")", "\n", "gious", "=", "self", "(", "bboxes1", ",", "bboxes2", ",", "'giou'", ")", "\n", "assert", "torch", ".", "all", "(", "gious", ">=", "-", "1", ")", "and", "torch", ".", "all", "(", "gious", "<=", "1", ")", "\n", "assert", "gious", ".", "size", "(", ")", "==", "(", "2", ",", "num_bbox1", ",", "num_bbox2", ")", "\n", "bboxes1", "=", "bboxes1", ".", "unsqueeze", "(", "0", ")", "\n", "bboxes2", "=", "bboxes2", ".", "unsqueeze", "(", "0", ")", "\n", "gious", "=", "self", "(", "bboxes1", ",", "bboxes2", ",", "'giou'", ")", "\n", "assert", "torch", ".", "all", "(", "gious", ">=", "-", "1", ")", "and", "torch", ".", "all", "(", "gious", "<=", "1", ")", "\n", "assert", "gious", ".", "size", "(", ")", "==", "(", "1", ",", "2", ",", "num_bbox1", ",", "num_bbox2", ")", "\n", "\n", "# is_aligned is False, bboxes1.size(-2) == 0", "\n", "gious", "=", "self", "(", "torch", ".", "empty", "(", "1", ",", "2", ",", "0", ",", "4", ")", ",", "bboxes2", ",", "'giou'", ")", "\n", "assert", "torch", ".", "all", "(", "gious", "==", "torch", ".", "empty", "(", "1", ",", "2", ",", "0", ",", "bboxes2", ".", "size", "(", "-", "2", ")", ")", ")", "\n", "assert", "torch", ".", "all", "(", "gious", ">=", "-", "1", ")", "and", "torch", ".", "all", "(", "gious", "<=", "1", ")", "\n", "\n", "# test allclose between bbox_overlaps and the original official", "\n", "# implementation.", "\n", "bboxes1", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "10", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "[", "32", ",", "32", ",", "38", ",", "42", "]", ",", "\n", "]", ")", "\n", "bboxes2", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "[", "0", ",", "0", ",", "10", ",", "20", "]", ",", "\n", "[", "0", ",", "10", ",", "10", ",", "19", "]", ",", "\n", "[", "10", ",", "10", ",", "20", ",", "20", "]", ",", "\n", "]", ")", "\n", "gious", "=", "bbox_overlaps", "(", "bboxes1", ",", "bboxes2", ",", "'giou'", ",", "is_aligned", "=", "True", ",", "eps", "=", "eps", ")", "\n", "gious", "=", "gious", ".", "numpy", "(", ")", ".", "round", "(", "4", ")", "\n", "# the gt is got with four decimal precision.", "\n", "expected_gious", "=", "np", ".", "array", "(", "[", "0.5000", ",", "-", "0.0500", ",", "-", "0.8214", "]", ")", "\n", "assert", "np", ".", "allclose", "(", "gious", ",", "expected_gious", ",", "rtol", "=", "0", ",", "atol", "=", "eps", ")", "\n", "\n", "# test mode 'iof'", "\n", "ious", "=", "bbox_overlaps", "(", "bboxes1", ",", "bboxes2", ",", "'iof'", ",", "is_aligned", "=", "True", ",", "eps", "=", "eps", ")", "\n", "assert", "torch", ".", "all", "(", "ious", ">=", "-", "1", ")", "and", "torch", ".", "all", "(", "ious", "<=", "1", ")", "\n", "assert", "ious", ".", "size", "(", ")", "==", "(", "bboxes1", ".", "size", "(", "0", ")", ",", ")", "\n", "ious", "=", "bbox_overlaps", "(", "bboxes1", ",", "bboxes2", ",", "'iof'", ",", "eps", "=", "eps", ")", "\n", "assert", "torch", ".", "all", "(", "ious", ">=", "-", "1", ")", "and", "torch", ".", "all", "(", "ious", "<=", "1", ")", "\n", "assert", "ious", ".", "size", "(", ")", "==", "(", "bboxes1", ".", "size", "(", "0", ")", ",", "bboxes2", ".", "size", "(", "0", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_metrics.test_losses.test_ce_loss": [[7, 32], ["dict", "mmdet.models.build_loss", "torch.Tensor", "torch.Tensor().long", "torch.allclose", "dict", "mmdet.models.build_loss", "torch.allclose", "pytest.raises", "dict", "mmdet.models.build_loss", "mmdet.models.build_loss.", "torch.tensor", "mmdet.models.build_loss.", "torch.tensor", "torch.Tensor"], "function", ["None"], ["def", "test_ce_loss", "(", ")", ":", "\n", "# use_mask and use_sigmoid cannot be true at the same time", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "loss_cfg", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_mask", "=", "True", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "1.0", ")", "\n", "build_loss", "(", "loss_cfg", ")", "\n", "\n", "# test loss with class weights", "\n", "", "loss_cls_cfg", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "\n", "use_sigmoid", "=", "False", ",", "\n", "class_weight", "=", "[", "0.8", ",", "0.2", "]", ",", "\n", "loss_weight", "=", "1.0", ")", "\n", "loss_cls", "=", "build_loss", "(", "loss_cls_cfg", ")", "\n", "fake_pred", "=", "torch", ".", "Tensor", "(", "[", "[", "100", ",", "-", "100", "]", "]", ")", "\n", "fake_label", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "long", "(", ")", "\n", "assert", "torch", ".", "allclose", "(", "loss_cls", "(", "fake_pred", ",", "fake_label", ")", ",", "torch", ".", "tensor", "(", "40.", ")", ")", "\n", "\n", "loss_cls_cfg", "=", "dict", "(", "\n", "type", "=", "'CrossEntropyLoss'", ",", "use_sigmoid", "=", "False", ",", "loss_weight", "=", "1.0", ")", "\n", "loss_cls", "=", "build_loss", "(", "loss_cls_cfg", ")", "\n", "assert", "torch", ".", "allclose", "(", "loss_cls", "(", "fake_pred", ",", "fake_label", ")", ",", "torch", ".", "tensor", "(", "200.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_metrics.test_losses.test_varifocal_loss": [[34, 79], ["dict", "mmdet.models.build_loss", "mmdet.models.build_loss", "torch.Tensor", "torch.Tensor", "torch.allclose", "mmdet.models.build_loss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.allclose", "pytest.raises", "dict", "mmdet.models.build_loss", "pytest.raises", "dict", "mmdet.models.build_loss", "pytest.raises", "torch.Tensor", "torch.Tensor", "mmdet.models.build_loss.", "mmdet.models.build_loss.", "torch.tensor", "mmdet.models.build_loss.", "torch.tensor"], "function", ["None"], ["", "def", "test_varifocal_loss", "(", ")", ":", "\n", "# only sigmoid version of VarifocalLoss is implemented", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "loss_cfg", "=", "dict", "(", "\n", "type", "=", "'VarifocalLoss'", ",", "use_sigmoid", "=", "False", ",", "loss_weight", "=", "1.0", ")", "\n", "build_loss", "(", "loss_cfg", ")", "\n", "\n", "# test that alpha should be greater than 0", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "loss_cfg", "=", "dict", "(", "\n", "type", "=", "'VarifocalLoss'", ",", "\n", "alpha", "=", "-", "0.75", ",", "\n", "gamma", "=", "2.0", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "loss_weight", "=", "1.0", ")", "\n", "build_loss", "(", "loss_cfg", ")", "\n", "\n", "# test that pred and target should be of the same size", "\n", "", "loss_cls_cfg", "=", "dict", "(", "\n", "type", "=", "'VarifocalLoss'", ",", "\n", "use_sigmoid", "=", "True", ",", "\n", "alpha", "=", "0.75", ",", "\n", "gamma", "=", "2.0", ",", "\n", "iou_weighted", "=", "True", ",", "\n", "reduction", "=", "'mean'", ",", "\n", "loss_weight", "=", "1.0", ")", "\n", "loss_cls", "=", "build_loss", "(", "loss_cls_cfg", ")", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "fake_pred", "=", "torch", ".", "Tensor", "(", "[", "[", "100.0", ",", "-", "100.0", "]", "]", ")", "\n", "fake_target", "=", "torch", ".", "Tensor", "(", "[", "[", "1.0", "]", "]", ")", "\n", "loss_cls", "(", "fake_pred", ",", "fake_target", ")", "\n", "\n", "# test the calculation", "\n", "", "loss_cls", "=", "build_loss", "(", "loss_cls_cfg", ")", "\n", "fake_pred", "=", "torch", ".", "Tensor", "(", "[", "[", "100.0", ",", "-", "100.0", "]", "]", ")", "\n", "fake_target", "=", "torch", ".", "Tensor", "(", "[", "[", "1.0", ",", "0.0", "]", "]", ")", "\n", "assert", "torch", ".", "allclose", "(", "loss_cls", "(", "fake_pred", ",", "fake_target", ")", ",", "torch", ".", "tensor", "(", "0.0", ")", ")", "\n", "\n", "# test the loss with weights", "\n", "loss_cls", "=", "build_loss", "(", "loss_cls_cfg", ")", "\n", "fake_pred", "=", "torch", ".", "Tensor", "(", "[", "[", "0.0", ",", "100.0", "]", "]", ")", "\n", "fake_target", "=", "torch", ".", "Tensor", "(", "[", "[", "1.0", ",", "1.0", "]", "]", ")", "\n", "fake_weight", "=", "torch", ".", "Tensor", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "assert", "torch", ".", "allclose", "(", "\n", "loss_cls", "(", "fake_pred", ",", "fake_target", ",", "fake_weight", ")", ",", "torch", ".", "tensor", "(", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_metrics.test_losses.test_kd_loss": [[81, 110], ["dict", "mmdet.models.build_loss", "mmdet.models.build_loss", "torch.Tensor", "torch.Tensor", "torch.allclose", "mmdet.models.build_loss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.allclose", "pytest.raises", "dict", "mmdet.models.build_loss", "pytest.raises", "torch.Tensor", "torch.Tensor().long", "mmdet.models.build_loss.", "mmdet.models.build_loss.", "torch.tensor", "mmdet.models.build_loss.", "torch.tensor", "torch.Tensor"], "function", ["None"], ["", "def", "test_kd_loss", "(", ")", ":", "\n", "# test that temeprature should be greater than 1", "\n", "    ", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "loss_cfg", "=", "dict", "(", "\n", "type", "=", "'KnowledgeDistillationKLDivLoss'", ",", "loss_weight", "=", "1.0", ",", "T", "=", "0.5", ")", "\n", "build_loss", "(", "loss_cfg", ")", "\n", "\n", "# test that pred and target should be of the same size", "\n", "", "loss_cls_cfg", "=", "dict", "(", "\n", "type", "=", "'KnowledgeDistillationKLDivLoss'", ",", "loss_weight", "=", "1.0", ",", "T", "=", "1", ")", "\n", "loss_cls", "=", "build_loss", "(", "loss_cls_cfg", ")", "\n", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "fake_pred", "=", "torch", ".", "Tensor", "(", "[", "[", "100", ",", "-", "100", "]", "]", ")", "\n", "fake_label", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ".", "long", "(", ")", "\n", "loss_cls", "(", "fake_pred", ",", "fake_label", ")", "\n", "\n", "# test the calculation", "\n", "", "loss_cls", "=", "build_loss", "(", "loss_cls_cfg", ")", "\n", "fake_pred", "=", "torch", ".", "Tensor", "(", "[", "[", "100.0", ",", "100.0", "]", "]", ")", "\n", "fake_target", "=", "torch", ".", "Tensor", "(", "[", "[", "1.0", ",", "1.0", "]", "]", ")", "\n", "assert", "torch", ".", "allclose", "(", "loss_cls", "(", "fake_pred", ",", "fake_target", ")", ",", "torch", ".", "tensor", "(", "0.0", ")", ")", "\n", "\n", "# test the loss with weights", "\n", "loss_cls", "=", "build_loss", "(", "loss_cls_cfg", ")", "\n", "fake_pred", "=", "torch", ".", "Tensor", "(", "[", "[", "100.0", ",", "-", "100.0", "]", ",", "[", "100.0", ",", "100.0", "]", "]", ")", "\n", "fake_target", "=", "torch", ".", "Tensor", "(", "[", "[", "1.0", ",", "0.0", "]", ",", "[", "1.0", ",", "1.0", "]", "]", ")", "\n", "fake_weight", "=", "torch", ".", "Tensor", "(", "[", "0.0", ",", "1.0", "]", ")", "\n", "assert", "torch", ".", "allclose", "(", "\n", "loss_cls", "(", "fake_pred", ",", "fake_target", ",", "fake_weight", ")", ",", "torch", ".", "tensor", "(", "0.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.test_metrics.test_losses.test_accuracy": [[112, 168], ["torch.empty", "torch.empty", "mmdet.models.Accuracy", "mmdet.models.Accuracy.", "torch.Tensor", "torch.Tensor().long", "mmdet.models.Accuracy", "mmdet.models.Accuracy.", "torch.Tensor().long", "mmdet.models.Accuracy", "mmdet.models.Accuracy.", "mmdet.models.Accuracy", "torch.Tensor().long", "mmdet.models.Accuracy.", "mmdet.models.Accuracy", "torch.Tensor().long", "mmdet.models.Accuracy.", "accuracy.item", "accuracy.item", "accuracy.item", "accuracy.item", "pytest.raises", "mmdet.models.Accuracy", "mmdet.models.Accuracy.", "pytest.raises", "mmdet.models.Accuracy", "mmdet.models.Accuracy.", "pytest.raises", "torch.Tensor().long", "mmdet.models.Accuracy", "mmdet.models.Accuracy.", "pytest.raises", "mmdet.models.Accuracy", "mmdet.models.Accuracy.", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "a.item", "torch.Tensor"], "function", ["None"], ["", "def", "test_accuracy", "(", ")", ":", "\n", "# test for empty pred", "\n", "    ", "pred", "=", "torch", ".", "empty", "(", "0", ",", "4", ")", "\n", "label", "=", "torch", ".", "empty", "(", "0", ")", "\n", "accuracy", "=", "Accuracy", "(", "topk", "=", "1", ")", "\n", "acc", "=", "accuracy", "(", "pred", ",", "label", ")", "\n", "assert", "acc", ".", "item", "(", ")", "==", "0", "\n", "\n", "pred", "=", "torch", ".", "Tensor", "(", "[", "[", "0.2", ",", "0.3", ",", "0.6", ",", "0.5", "]", ",", "[", "0.1", ",", "0.1", ",", "0.2", ",", "0.6", "]", ",", "\n", "[", "0.9", ",", "0.0", ",", "0.0", ",", "0.1", "]", ",", "[", "0.4", ",", "0.7", ",", "0.1", ",", "0.1", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.99", ",", "0", "]", "]", ")", "\n", "# test for top1", "\n", "true_label", "=", "torch", ".", "Tensor", "(", "[", "2", ",", "3", ",", "0", ",", "1", ",", "2", "]", ")", ".", "long", "(", ")", "\n", "accuracy", "=", "Accuracy", "(", "topk", "=", "1", ")", "\n", "acc", "=", "accuracy", "(", "pred", ",", "true_label", ")", "\n", "assert", "acc", ".", "item", "(", ")", "==", "100", "\n", "\n", "# test for top1 with score thresh=0.8", "\n", "true_label", "=", "torch", ".", "Tensor", "(", "[", "2", ",", "3", ",", "0", ",", "1", ",", "2", "]", ")", ".", "long", "(", ")", "\n", "accuracy", "=", "Accuracy", "(", "topk", "=", "1", ",", "thresh", "=", "0.8", ")", "\n", "acc", "=", "accuracy", "(", "pred", ",", "true_label", ")", "\n", "assert", "acc", ".", "item", "(", ")", "==", "40", "\n", "\n", "# test for top2", "\n", "accuracy", "=", "Accuracy", "(", "topk", "=", "2", ")", "\n", "label", "=", "torch", ".", "Tensor", "(", "[", "3", ",", "2", ",", "0", ",", "0", ",", "2", "]", ")", ".", "long", "(", ")", "\n", "acc", "=", "accuracy", "(", "pred", ",", "label", ")", "\n", "assert", "acc", ".", "item", "(", ")", "==", "100", "\n", "\n", "# test for both top1 and top2", "\n", "accuracy", "=", "Accuracy", "(", "topk", "=", "(", "1", ",", "2", ")", ")", "\n", "true_label", "=", "torch", ".", "Tensor", "(", "[", "2", ",", "3", ",", "0", ",", "1", ",", "2", "]", ")", ".", "long", "(", ")", "\n", "acc", "=", "accuracy", "(", "pred", ",", "true_label", ")", "\n", "for", "a", "in", "acc", ":", "\n", "        ", "assert", "a", ".", "item", "(", ")", "==", "100", "\n", "\n", "# topk is larger than pred class number", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "accuracy", "=", "Accuracy", "(", "topk", "=", "5", ")", "\n", "accuracy", "(", "pred", ",", "true_label", ")", "\n", "\n", "# wrong topk type", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "accuracy", "=", "Accuracy", "(", "topk", "=", "'wrong type'", ")", "\n", "accuracy", "(", "pred", ",", "true_label", ")", "\n", "\n", "# label size is larger than required", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "label", "=", "torch", ".", "Tensor", "(", "[", "2", ",", "3", ",", "0", ",", "1", ",", "2", ",", "0", "]", ")", ".", "long", "(", ")", "# size mismatch", "\n", "accuracy", "=", "Accuracy", "(", ")", "\n", "accuracy", "(", "pred", ",", "label", ")", "\n", "\n", "# wrong pred dimension", "\n", "", "with", "pytest", ".", "raises", "(", "AssertionError", ")", ":", "\n", "        ", "accuracy", "=", "Accuracy", "(", ")", "\n", "accuracy", "(", "pred", "[", ":", ",", ":", ",", "None", "]", ",", "true_label", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.__init__.digit_version": [[6, 16], ["version_str.split", "x.isdigit", "digit_version.append", "int", "x.find", "x.split", "digit_version.append", "digit_version.append", "int", "int", "mmcv.__version__"], "function", ["None"], ["]", "\n", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mmdet-new.version.parse_version_info": [[7, 17], ["version_str.split", "tuple", "x.isdigit", "version_info.append", "int", "x.find", "x.split", "version_info.append", "version_info.append", "int"], "function", ["None"], ["def", "parse_version_info", "(", "version_str", ")", ":", "\n", "    ", "version_info", "=", "[", "]", "\n", "for", "x", "in", "version_str", ".", "split", "(", "'.'", ")", ":", "\n", "        ", "if", "x", ".", "isdigit", "(", ")", ":", "\n", "            ", "version_info", ".", "append", "(", "int", "(", "x", ")", ")", "\n", "", "elif", "x", ".", "find", "(", "'rc'", ")", "!=", "-", "1", ":", "\n", "            ", "patch_version", "=", "x", ".", "split", "(", "'rc'", ")", "\n", "version_info", ".", "append", "(", "int", "(", "patch_version", "[", "0", "]", ")", ")", "\n", "version_info", ".", "append", "(", "f'rc{patch_version[1]}'", ")", "\n", "", "", "return", "tuple", "(", "version_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.dist_utils.DistOptimizerHook.__init__": [[57, 61], ["warnings.warn", "mmcv.runner.OptimizerHook.__init__"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "'\"DistOptimizerHook\" is deprecated, please switch to'", "\n", "'\"mmcv.runner.OptimizerHook\".'", ")", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.dist_utils._allreduce_coalesced": [[10, 30], ["torch._utils._take_tensors", "collections.OrderedDict", "buckets.values.values", "torch._utils._flatten_dense_tensors", "torch.all_reduce", "torch._utils._flatten_dense_tensors.div_", "zip", "tensor.type", "buckets[].append", "torch._utils._unflatten_dense_tensors", "tensor.copy_"], "function", ["None"], ["def", "_allreduce_coalesced", "(", "tensors", ",", "world_size", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "if", "bucket_size_mb", ">", "0", ":", "\n", "        ", "bucket_size_bytes", "=", "bucket_size_mb", "*", "1024", "*", "1024", "\n", "buckets", "=", "_take_tensors", "(", "tensors", ",", "bucket_size_bytes", ")", "\n", "", "else", ":", "\n", "        ", "buckets", "=", "OrderedDict", "(", ")", "\n", "for", "tensor", "in", "tensors", ":", "\n", "            ", "tp", "=", "tensor", ".", "type", "(", ")", "\n", "if", "tp", "not", "in", "buckets", ":", "\n", "                ", "buckets", "[", "tp", "]", "=", "[", "]", "\n", "", "buckets", "[", "tp", "]", ".", "append", "(", "tensor", ")", "\n", "", "buckets", "=", "buckets", ".", "values", "(", ")", "\n", "\n", "", "for", "bucket", "in", "buckets", ":", "\n", "        ", "flat_tensors", "=", "_flatten_dense_tensors", "(", "bucket", ")", "\n", "dist", ".", "all_reduce", "(", "flat_tensors", ")", "\n", "flat_tensors", ".", "div_", "(", "world_size", ")", "\n", "for", "tensor", ",", "synced", "in", "zip", "(", "\n", "bucket", ",", "_unflatten_dense_tensors", "(", "flat_tensors", ",", "bucket", ")", ")", ":", "\n", "            ", "tensor", ".", "copy_", "(", "synced", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.dist_utils.allreduce_grads": [[32, 52], ["torch.get_world_size", "dist_utils._allreduce_coalesced", "torch.all_reduce", "tensor.div_"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.dist_utils._allreduce_coalesced"], ["", "", "", "def", "allreduce_grads", "(", "params", ",", "coalesce", "=", "True", ",", "bucket_size_mb", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Allreduce gradients.\n\n    Args:\n        params (list[torch.Parameters]): List of parameters of a model\n        coalesce (bool, optional): Whether allreduce parameters as a whole.\n            Defaults to True.\n        bucket_size_mb (int, optional): Size of bucket, the unit is MB.\n            Defaults to -1.\n    \"\"\"", "\n", "grads", "=", "[", "\n", "param", ".", "grad", ".", "data", "for", "param", "in", "params", "\n", "if", "param", ".", "requires_grad", "and", "param", ".", "grad", "is", "not", "None", "\n", "]", "\n", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "coalesce", ":", "\n", "        ", "_allreduce_coalesced", "(", "grads", ",", "world_size", ",", "bucket_size_mb", ")", "\n", "", "else", ":", "\n", "        ", "for", "tensor", "in", "grads", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "world_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.dist_utils.reduce_mean": [[63, 70], ["tensor.clone.clone", "torch.all_reduce", "tensor.clone.div_", "torch.is_available", "torch.is_initialized", "torch.get_world_size"], "function", ["None"], ["", "", "def", "reduce_mean", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\"Obtain the mean of tensor on different GPUs.\"\"\"", "\n", "if", "not", "(", "dist", ".", "is_available", "(", ")", "and", "dist", ".", "is_initialized", "(", ")", ")", ":", "\n", "        ", "return", "tensor", "\n", "", "tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "tensor", ".", "div_", "(", "dist", ".", "get_world_size", "(", ")", ")", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "return", "tensor", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.misc.multi_apply": [[10, 30], ["six.moves.map", "tuple", "functools.partial", "six.moves.map", "six.moves.zip"], "function", ["None"], ["def", "multi_apply", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Apply function to a list of arguments.\n\n    Note:\n        This function applies the ``func`` to multiple inputs and\n        map the multiple outputs of the ``func`` into different\n        list. Each list contains the same type of outputs corresponding\n        to different inputs.\n\n    Args:\n        func (Function): A function that will be applied to a list of\n            arguments\n\n    Returns:\n        tuple(list): A tuple containing multiple list, each list contains \\\n            a kind of returned results by the function\n    \"\"\"", "\n", "pfunc", "=", "partial", "(", "func", ",", "**", "kwargs", ")", "if", "kwargs", "else", "func", "\n", "map_results", "=", "map", "(", "pfunc", ",", "*", "args", ")", "\n", "return", "tuple", "(", "map", "(", "list", ",", "zip", "(", "*", "map_results", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.misc.unmap": [[32, 43], ["data.dim", "data.new_full", "data.new_full", "inds.type", "data.size", "inds.type"], "function", ["None"], ["", "def", "unmap", "(", "data", ",", "count", ",", "inds", ",", "fill", "=", "0", ")", ":", "\n", "    ", "\"\"\"Unmap a subset of item (data) back to the original set of items (of size\n    count)\"\"\"", "\n", "if", "data", ".", "dim", "(", ")", "==", "1", ":", "\n", "        ", "ret", "=", "data", ".", "new_full", "(", "(", "count", ",", ")", ",", "fill", ")", "\n", "ret", "[", "inds", ".", "type", "(", "torch", ".", "bool", ")", "]", "=", "data", "\n", "", "else", ":", "\n", "        ", "new_size", "=", "(", "count", ",", ")", "+", "data", ".", "size", "(", ")", "[", "1", ":", "]", "\n", "ret", "=", "data", ".", "new_full", "(", "new_size", ",", "fill", ")", "\n", "ret", "[", "inds", ".", "type", "(", "torch", ".", "bool", ")", ",", ":", "]", "=", "data", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.misc.mask2ndarray": [[45, 62], ["isinstance", "mask.detach().cpu().numpy.to_ndarray", "isinstance", "mask.detach().cpu().numpy.detach().cpu().numpy", "isinstance", "TypeError", "mask.detach().cpu().numpy.detach().cpu", "mask.detach().cpu().numpy.detach", "type"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "def", "mask2ndarray", "(", "mask", ")", ":", "\n", "    ", "\"\"\"Convert Mask to ndarray..\n\n    Args:\n        mask (:obj:`BitmapMasks` or :obj:`PolygonMasks` or\n        torch.Tensor or np.ndarray): The mask to be converted.\n\n    Returns:\n        np.ndarray: Ndarray mask of shape (n, h, w) that has been converted\n    \"\"\"", "\n", "if", "isinstance", "(", "mask", ",", "(", "BitmapMasks", ",", "PolygonMasks", ")", ")", ":", "\n", "        ", "mask", "=", "mask", ".", "to_ndarray", "(", ")", "\n", "", "elif", "isinstance", "(", "mask", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "mask", "=", "mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "not", "isinstance", "(", "mask", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "raise", "TypeError", "(", "f'Unsupported {type(mask)} data type'", ")", "\n", "", "return", "mask", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.util_mixins.NiceRepr.__nice__": [[75, 85], ["hasattr", "str", "NotImplementedError", "len"], "methods", ["None"], ["def", "__nice__", "(", "self", ")", ":", "\n", "        ", "\"\"\"str: a \"nice\" summary string describing this module\"\"\"", "\n", "if", "hasattr", "(", "self", ",", "'__len__'", ")", ":", "\n", "# It is a common pattern for objects to use __len__ in __nice__", "\n", "# As a convenience we define a default __nice__ for these objects", "\n", "            ", "return", "str", "(", "len", "(", "self", ")", ")", "\n", "", "else", ":", "\n", "# In all other cases force the subclass to overload __nice__", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "f'Define the __nice__ method for {self.__class__!r}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.util_mixins.NiceRepr.__repr__": [[86, 95], ["util_mixins.NiceRepr.__nice__", "warnings.warn", "object.__repr__", "hex", "str", "id"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.__nice__", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__repr__"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"str: the string of the module\"\"\"", "\n", "try", ":", "\n", "            ", "nice", "=", "self", ".", "__nice__", "(", ")", "\n", "classname", "=", "self", ".", "__class__", ".", "__name__", "\n", "return", "f'<{classname}({nice}) at {hex(id(self))}>'", "\n", "", "except", "NotImplementedError", "as", "ex", ":", "\n", "            ", "warnings", ".", "warn", "(", "str", "(", "ex", ")", ",", "category", "=", "RuntimeWarning", ")", "\n", "return", "object", ".", "__repr__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.util_mixins.NiceRepr.__str__": [[96, 105], ["util_mixins.NiceRepr.__nice__", "warnings.warn", "object.__repr__", "str"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.__nice__", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__repr__"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"str: the string of the module\"\"\"", "\n", "try", ":", "\n", "            ", "classname", "=", "self", ".", "__class__", ".", "__name__", "\n", "nice", "=", "self", ".", "__nice__", "(", ")", "\n", "return", "f'<{classname}({nice})>'", "\n", "", "except", "NotImplementedError", "as", "ex", ":", "\n", "            ", "warnings", ".", "warn", "(", "str", "(", "ex", ")", ",", "category", "=", "RuntimeWarning", ")", "\n", "return", "object", ".", "__repr__", "(", "self", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.logger.get_root_logger": [[6, 20], ["mmcv.utils.get_logger"], "function", ["None"], ["def", "get_root_logger", "(", "log_file", "=", "None", ",", "log_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"Get root logger.\n\n    Args:\n        log_file (str, optional): File path of log. Defaults to None.\n        log_level (int, optional): The level of logger.\n            Defaults to logging.INFO.\n\n    Returns:\n        :obj:`logging.Logger`: The obtained logger\n    \"\"\"", "\n", "logger", "=", "get_logger", "(", "name", "=", "'mmdet'", ",", "log_file", "=", "log_file", ",", "log_level", "=", "log_level", ")", "\n", "\n", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.collect_env.collect_env": [[7, 12], ["mmcv.utils.collect_env", "mmcv.utils.get_git_hash"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.collect_env.collect_env"], ["def", "collect_env", "(", ")", ":", "\n", "    ", "\"\"\"Collect the information of the running environments.\"\"\"", "\n", "env_info", "=", "collect_base_env", "(", ")", "\n", "env_info", "[", "'MMDetection'", "]", "=", "mmdet", ".", "__version__", "+", "'+'", "+", "get_git_hash", "(", ")", "[", ":", "7", "]", "\n", "return", "env_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.util_random.ensure_rng": [[5, 34], ["isinstance", "numpy.random.RandomState"], "function", ["None"], ["def", "ensure_rng", "(", "rng", "=", "None", ")", ":", "\n", "    ", "\"\"\"Coerces input into a random number generator.\n\n    If the input is None, then a global random state is returned.\n\n    If the input is a numeric value, then that is used as a seed to construct a\n    random state. Otherwise the input is returned as-is.\n\n    Adapted from [1]_.\n\n    Args:\n        rng (int | numpy.random.RandomState | None):\n            if None, then defaults to the global rng. Otherwise this can be an\n            integer or a RandomState class\n    Returns:\n        (numpy.random.RandomState) : rng -\n            a numpy random number generator\n\n    References:\n        .. [1] https://gitlab.kitware.com/computer-vision/kwarray/blob/master/kwarray/util_random.py#L270  # noqa: E501\n    \"\"\"", "\n", "\n", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "mtrand", ".", "_rand", "\n", "", "elif", "isinstance", "(", "rng", ",", "int", ")", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "rng", ")", "\n", "", "else", ":", "\n", "        ", "rng", "=", "rng", "\n", "", "return", "rng", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.color_val_matplotlib": [[234, 247], ["mmcv.color_val", "tuple"], "function", ["None"], ["def", "color_val_matplotlib", "(", "color", ")", ":", "\n", "    ", "\"\"\"Convert various input in BGR order to normalized RGB matplotlib color\n    tuples,\n\n    Args:\n        color (:obj:`Color`/str/tuple/int/ndarray): Color inputs\n\n    Returns:\n        tuple[float]: A tuple of 3 normalized floats indicating RGB channels.\n    \"\"\"", "\n", "color", "=", "mmcv", ".", "color_val", "(", "color", ")", "\n", "color", "=", "[", "color", "/", "255", "for", "color", "in", "color", "[", ":", ":", "-", "1", "]", "]", "\n", "return", "tuple", "(", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_det_bboxes": [[249, 454], ["mmcv.imread().astype", "image.color_val_matplotlib", "image.color_val_matplotlib", "mmcv.bgr2rgb", "numpy.ascontiguousarray", "matplotlib.figure", "matplotlib.title", "plt.figure.get_dpi", "plt.figure.set_size_inches", "matplotlib.subplots_adjust", "matplotlib.gca", "plt.gca.axis", "enumerate", "matplotlib.imshow", "matplotlib.collections.PatchCollection", "plt.gca.add_collection", "canvas.print_to_buffer", "numpy.frombuffer", "np.frombuffer.reshape", "numpy.split", "rgb.astype", "mmcv.rgb2bgr", "matplotlib.close", "zip", "bbox.astype", "numpy.array().reshape", "polygons.append", "color.append", "plt.gca.text", "mmcv.imread", "numpy.random.seed", "matplotlib.patches.Polygon", "len", "segms[].astype", "matplotlib.show", "matplotlib.show", "matplotlib.pause", "numpy.random.randint", "numpy.array", "range", "numpy.array", "max", "max", "mmcv.color_val"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.color_val_matplotlib", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.color_val_matplotlib"], ["", "def", "imshow_det_bboxes", "(", "img", ",", "\n", "bboxes", ",", "\n", "labels", ",", "\n", "segms", "=", "None", ",", "\n", "class_names", "=", "None", ",", "\n", "score_thr", "=", "0", ",", "\n", "bbox_color", "=", "'red'", ",", "\n", "text_color", "=", "'red'", ",", "\n", "mask_color", "=", "None", ",", "\n", "thickness", "=", "2", ",", "\n", "font_size", "=", "25", ",", "\n", "win_name", "=", "''", ",", "\n", "show", "=", "False", ",", "\n", "wait_time", "=", "0", ",", "\n", "out_file", "=", "None", ")", ":", "\n", "    ", "\"\"\"Draw bboxes and class labels (with scores) on an image.\n\n    Args:\n        img (str or ndarray): The image to be displayed.\n        bboxes (ndarray): Bounding boxes (with scores), shaped (n, 4) or\n            (n, 5).\n        labels (ndarray): Labels of bboxes.\n        segms (ndarray or None): Masks, shaped (n,h,w) or None\n        class_names (list[str]): Names of each classes.\n        score_thr (float): Minimum score of bboxes to be shown.  Default: 0\n        bbox_color (str or tuple(int) or :obj:`Color`):Color of bbox lines.\n           The tuple of color should be in BGR order. Default: 'green'\n        text_color (str or tuple(int) or :obj:`Color`):Color of texts.\n           The tuple of color should be in BGR order. Default: 'green'\n        mask_color (str or tuple(int) or :obj:`Color`, optional):\n           Color of masks. The tuple of color should be in BGR order.\n           Default: None\n        thickness (int): Thickness of lines. Default: 2\n        font_size (int): Font size of texts. Default: 13\n        show (bool): Whether to show the image. Default: True\n        win_name (str): The window name. Default: ''\n        wait_time (float): Value of waitKey param. Default: 0.\n        out_file (str, optional): The filename to write the image.\n            Default: None\n\n    Returns:\n        ndarray: The image with bboxes drawn on it.\n    \"\"\"", "\n", "assert", "bboxes", ".", "ndim", "==", "2", ",", "f' bboxes ndim should be 2, but its ndim is {bboxes.ndim}.'", "\n", "assert", "labels", ".", "ndim", "==", "1", ",", "f' labels ndim should be 1, but its ndim is {labels.ndim}.'", "\n", "assert", "bboxes", ".", "shape", "[", "0", "]", "==", "labels", ".", "shape", "[", "0", "]", ",", "'bboxes.shape[0] and labels.shape[0] should have the same length.'", "\n", "assert", "bboxes", ".", "shape", "[", "1", "]", "==", "4", "or", "bboxes", ".", "shape", "[", "1", "]", "==", "5", ",", "f' bboxes.shape[1] should be 4 or 5, but its {bboxes.shape[1]}.'", "\n", "img", "=", "mmcv", ".", "imread", "(", "img", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "score_thr", ">", "0", ":", "\n", "        ", "assert", "bboxes", ".", "shape", "[", "1", "]", "==", "5", "\n", "scores", "=", "bboxes", "[", ":", ",", "-", "1", "]", "\n", "inds", "=", "scores", ">", "score_thr", "\n", "bboxes", "=", "bboxes", "[", "inds", ",", ":", "]", "\n", "labels", "=", "labels", "[", "inds", "]", "\n", "if", "segms", "is", "not", "None", ":", "\n", "            ", "segms", "=", "segms", "[", "inds", ",", "...", "]", "\n", "\n", "", "", "mask_colors", "=", "[", "]", "\n", "if", "labels", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "        ", "if", "mask_color", "is", "None", ":", "\n", "# random color", "\n", "            ", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "mask_colors", "=", "[", "\n", "np", ".", "random", ".", "randint", "(", "0", ",", "256", ",", "(", "1", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "_", "in", "range", "(", "max", "(", "labels", ")", "+", "1", ")", "\n", "]", "\n", "", "else", ":", "\n", "# specify  color", "\n", "            ", "mask_colors", "=", "[", "\n", "np", ".", "array", "(", "mmcv", ".", "color_val", "(", "mask_color", ")", "[", ":", ":", "-", "1", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "]", "*", "(", "\n", "max", "(", "labels", ")", "+", "1", ")", "\n", "\n", "", "", "bbox_color", "=", "color_val_matplotlib", "(", "bbox_color", ")", "\n", "text_color", "=", "color_val_matplotlib", "(", "text_color", ")", "\n", "\n", "img", "=", "mmcv", ".", "bgr2rgb", "(", "img", ")", "\n", "width", ",", "height", "=", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "win_name", ",", "frameon", "=", "False", ")", "\n", "plt", ".", "title", "(", "win_name", ")", "\n", "canvas", "=", "fig", ".", "canvas", "\n", "dpi", "=", "fig", ".", "get_dpi", "(", ")", "\n", "# add a small EPS to avoid precision lost due to matplotlib's truncation", "\n", "# (https://github.com/matplotlib/matplotlib/issues/15363)", "\n", "fig", ".", "set_size_inches", "(", "(", "width", "+", "EPS", ")", "/", "dpi", ",", "(", "height", "+", "EPS", ")", "/", "dpi", ")", "\n", "\n", "# remove white edges by set subplot margin", "\n", "plt", ".", "subplots_adjust", "(", "left", "=", "0", ",", "right", "=", "1", ",", "bottom", "=", "0", ",", "top", "=", "1", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "\n", "polygons", "=", "[", "]", "\n", "color", "=", "[", "]", "\n", "for", "i", ",", "(", "bbox", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "bboxes", ",", "labels", ")", ")", ":", "\n", "\n", "#         # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", "\n", "#         # # txt\u6587\u4ef6\u7528\u7684", "\n", "#         # # print('\\n', out_file[-10:-4], ' ', label+1, ' ',bbox[4],' ', bbox[0], ' ', bbox[1], ' ', bbox[2], ' ', bbox[3])", "\n", "#         # file_handle.write(str(str(out_file[-10:-4])+' '+str(label+1)+' '+str(bbox[4])+' '+str(bbox[0])+' '+", "\n", "#         #                       str(bbox[1])+' '+str(bbox[2])+' '+str(bbox[3])+'\\n'))", "\n", "#         # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", "\n", "# csv\u6587\u4ef6---\u5149\u5b66\u7248", "\n", "# if label==0:", "\n", "#     name='holothurian'", "\n", "# elif label==1:", "\n", "#     name='echinus'", "\n", "# elif label==2:", "\n", "#     name='scallop'", "\n", "# else:", "\n", "#     name='starfish'", "\n", "#         # \u58f0\u5b66\u7248", "\n", "# if label == 0:", "\n", "#     name = 'cube'", "\n", "# elif label == 1:", "\n", "#     name = 'ball'", "\n", "# elif label == 2:", "\n", "#     name = 'cylinder'", "\n", "# elif label == 3:", "\n", "#     name = 'human body'", "\n", "# elif label == 4:", "\n", "#     name = 'tyre'", "\n", "# elif label == 5:", "\n", "#     name = 'circle cage'", "\n", "# elif label == 6:", "\n", "#     name = 'square cage'", "\n", "# else:", "\n", "#     name = 'metal bucket'", "\n", "# csv_writer.writerow(", "\n", "#     [name, str(os.path.basename(out_file)[:-4]), bbox[4], int(bbox[0]), int(bbox[1]), int(bbox[2]),", "\n", "#      int(bbox[3])])", "\n", "# csv_writer.writerow([name,str(out_file[-10:-4]),bbox[4],int(bbox[0]),int(bbox[1]),int(bbox[2]),int(bbox[3])])", "\n", "#         ###########################################################################################", "\n", "# csv_writer.writerow([name,str(out_file[-10:-4]),bbox[4],bbox[0],bbox[1],bbox[2],bbox[3]])", "\n", "\n", "# csv_writer.writerow([name,str(out_file[-10:-4]),bbox[4],round(bbox[0]),round(bbox[1]),round(bbox[2]),round(bbox[3])])", "\n", "\n", "        ", "bbox_int", "=", "bbox", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "\n", "\n", "poly", "=", "[", "[", "bbox_int", "[", "0", "]", ",", "bbox_int", "[", "1", "]", "]", ",", "[", "bbox_int", "[", "0", "]", ",", "bbox_int", "[", "3", "]", "]", ",", "\n", "[", "bbox_int", "[", "2", "]", ",", "bbox_int", "[", "3", "]", "]", ",", "[", "bbox_int", "[", "2", "]", ",", "bbox_int", "[", "1", "]", "]", "]", "\n", "np_poly", "=", "np", ".", "array", "(", "poly", ")", ".", "reshape", "(", "(", "4", ",", "2", ")", ")", "\n", "polygons", ".", "append", "(", "Polygon", "(", "np_poly", ")", ")", "\n", "color", ".", "append", "(", "bbox_color", ")", "\n", "label_text", "=", "class_names", "[", "\n", "label", "]", "if", "class_names", "is", "not", "None", "else", "f'class {label}'", "\n", "if", "len", "(", "bbox", ")", ">", "4", ":", "\n", "            ", "label_text", "+=", "f'|{bbox[-1]:.02f}'", "\n", "", "ax", ".", "text", "(", "\n", "bbox_int", "[", "0", "]", ",", "\n", "bbox_int", "[", "1", "]", ",", "\n", "f'{label_text}'", ",", "\n", "bbox", "=", "{", "\n", "'facecolor'", ":", "'black'", ",", "\n", "'alpha'", ":", "0.8", ",", "\n", "'pad'", ":", "0.7", ",", "\n", "'edgecolor'", ":", "'none'", "\n", "}", ",", "\n", "color", "=", "text_color", ",", "\n", "fontsize", "=", "font_size", ",", "\n", "verticalalignment", "=", "'top'", ",", "\n", "horizontalalignment", "=", "'left'", ")", "\n", "if", "segms", "is", "not", "None", ":", "\n", "            ", "color_mask", "=", "mask_colors", "[", "labels", "[", "i", "]", "]", "\n", "mask", "=", "segms", "[", "i", "]", ".", "astype", "(", "bool", ")", "\n", "img", "[", "mask", "]", "=", "img", "[", "mask", "]", "*", "0.5", "+", "color_mask", "*", "0.5", "\n", "\n", "", "", "plt", ".", "imshow", "(", "img", ")", "\n", "\n", "p", "=", "PatchCollection", "(", "\n", "polygons", ",", "facecolor", "=", "'none'", ",", "edgecolors", "=", "color", ",", "linewidths", "=", "thickness", ")", "\n", "ax", ".", "add_collection", "(", "p", ")", "\n", "\n", "stream", ",", "_", "=", "canvas", ".", "print_to_buffer", "(", ")", "\n", "buffer", "=", "np", ".", "frombuffer", "(", "stream", ",", "dtype", "=", "'uint8'", ")", "\n", "img_rgba", "=", "buffer", ".", "reshape", "(", "height", ",", "width", ",", "4", ")", "\n", "rgb", ",", "alpha", "=", "np", ".", "split", "(", "img_rgba", ",", "[", "3", "]", ",", "axis", "=", "2", ")", "\n", "img", "=", "rgb", ".", "astype", "(", "'uint8'", ")", "\n", "img", "=", "mmcv", ".", "rgb2bgr", "(", "img", ")", "\n", "\n", "if", "show", ":", "\n", "# We do not use cv2 for display because in some cases, opencv will", "\n", "# conflict with Qt, it will output a warning: Current thread", "\n", "# is not the object's thread. You can refer to", "\n", "# https://github.com/opencv/opencv-python/issues/46 for details", "\n", "        ", "if", "wait_time", "==", "0", ":", "\n", "            ", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "show", "(", "block", "=", "False", ")", "\n", "plt", ".", "pause", "(", "wait_time", ")", "\n", "", "", "if", "out_file", "is", "not", "None", ":", "\n", "# mmcv.imwrite(img, out_file)", "\n", "        ", "pass", "\n", "\n", "", "plt", ".", "close", "(", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_gt_det_bboxes": [[456, 571], ["isinstance", "annotation.get", "mmcv.imread", "image.imshow_det_bboxes", "isinstance", "numpy.vstack", "numpy.concatenate", "image.imshow_det_bboxes", "utils.mask2ndarray", "isinstance", "numpy.full", "mmcv.concat_list", "pycocotools.decode", "segms.transpose.transpose", "type", "enumerate", "len"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_det_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.visualization.image.imshow_det_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.misc.mask2ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode"], ["", "def", "imshow_gt_det_bboxes", "(", "img", ",", "\n", "annotation", ",", "\n", "result", ",", "\n", "class_names", "=", "None", ",", "\n", "score_thr", "=", "0", ",", "\n", "gt_bbox_color", "=", "(", "255", ",", "102", ",", "61", ")", ",", "\n", "gt_text_color", "=", "(", "255", ",", "102", ",", "61", ")", ",", "\n", "gt_mask_color", "=", "(", "255", ",", "102", ",", "61", ")", ",", "\n", "det_bbox_color", "=", "(", "72", ",", "101", ",", "241", ")", ",", "\n", "det_text_color", "=", "(", "72", ",", "101", ",", "241", ")", ",", "\n", "det_mask_color", "=", "(", "72", ",", "101", ",", "241", ")", ",", "\n", "thickness", "=", "2", ",", "\n", "font_size", "=", "13", ",", "\n", "win_name", "=", "''", ",", "\n", "show", "=", "False", ",", "\n", "wait_time", "=", "0", ",", "\n", "out_file", "=", "None", ")", ":", "\n", "    ", "\"\"\"General visualization GT and result function.\n\n    Args:\n      img (str or ndarray): The image to be displayed.)\n      annotation (dict): Ground truth annotations where contain keys of\n          'gt_bboxes' and 'gt_labels' or 'gt_masks'\n      result (tuple[list] or list): The detection result, can be either\n          (bbox, segm) or just bbox.\n      class_names (list[str]): Names of each classes.\n      score_thr (float): Minimum score of bboxes to be shown.  Default: 0\n      gt_bbox_color (str or tuple(int) or :obj:`Color`):Color of bbox lines.\n           The tuple of color should be in BGR order. Default: (255, 102, 61)\n      gt_text_color (str or tuple(int) or :obj:`Color`):Color of texts.\n           The tuple of color should be in BGR order. Default: (255, 102, 61)\n      gt_mask_color (str or tuple(int) or :obj:`Color`, optional):\n           Color of masks. The tuple of color should be in BGR order.\n           Default: (255, 102, 61)\n      det_bbox_color (str or tuple(int) or :obj:`Color`):Color of bbox lines.\n           The tuple of color should be in BGR order. Default: (72, 101, 241)\n      det_text_color (str or tuple(int) or :obj:`Color`):Color of texts.\n           The tuple of color should be in BGR order. Default: (72, 101, 241)\n      det_mask_color (str or tuple(int) or :obj:`Color`, optional):\n           Color of masks. The tuple of color should be in BGR order.\n           Default: (72, 101, 241)\n      thickness (int): Thickness of lines. Default: 2\n      font_size (int): Font size of texts. Default: 13\n      win_name (str): The window name. Default: ''\n      show (bool): Whether to show the image. Default: True\n      wait_time (float): Value of waitKey param. Default: 0.\n      out_file (str, optional): The filename to write the image.\n         Default: None\n\n    Returns:\n        ndarray: The image with bboxes or masks drawn on it.\n    \"\"\"", "\n", "assert", "'gt_bboxes'", "in", "annotation", "\n", "assert", "'gt_labels'", "in", "annotation", "\n", "assert", "isinstance", "(", "\n", "result", ",", "\n", "(", "tuple", ",", "list", ")", ")", ",", "f'Expected tuple or list, but get {type(result)}'", "\n", "\n", "gt_masks", "=", "annotation", ".", "get", "(", "'gt_masks'", ",", "None", ")", "\n", "if", "gt_masks", "is", "not", "None", ":", "\n", "        ", "gt_masks", "=", "mask2ndarray", "(", "gt_masks", ")", "\n", "\n", "", "img", "=", "mmcv", ".", "imread", "(", "img", ")", "\n", "\n", "img", "=", "imshow_det_bboxes", "(", "\n", "img", ",", "\n", "annotation", "[", "'gt_bboxes'", "]", ",", "\n", "annotation", "[", "'gt_labels'", "]", ",", "\n", "gt_masks", ",", "\n", "class_names", "=", "class_names", ",", "\n", "bbox_color", "=", "gt_bbox_color", ",", "\n", "text_color", "=", "gt_text_color", ",", "\n", "mask_color", "=", "gt_mask_color", ",", "\n", "thickness", "=", "thickness", ",", "\n", "font_size", "=", "font_size", ",", "\n", "win_name", "=", "win_name", ",", "\n", "show", "=", "False", ")", "\n", "\n", "if", "isinstance", "(", "result", ",", "tuple", ")", ":", "\n", "        ", "bbox_result", ",", "segm_result", "=", "result", "\n", "if", "isinstance", "(", "segm_result", ",", "tuple", ")", ":", "\n", "            ", "segm_result", "=", "segm_result", "[", "0", "]", "# ms rcnn", "\n", "", "", "else", ":", "\n", "        ", "bbox_result", ",", "segm_result", "=", "result", ",", "None", "\n", "\n", "", "bboxes", "=", "np", ".", "vstack", "(", "bbox_result", ")", "\n", "labels", "=", "[", "\n", "np", ".", "full", "(", "bbox", ".", "shape", "[", "0", "]", ",", "i", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", ",", "bbox", "in", "enumerate", "(", "bbox_result", ")", "\n", "]", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "\n", "segms", "=", "None", "\n", "if", "segm_result", "is", "not", "None", "and", "len", "(", "labels", ")", ">", "0", ":", "# non empty", "\n", "        ", "segms", "=", "mmcv", ".", "concat_list", "(", "segm_result", ")", "\n", "segms", "=", "mask_util", ".", "decode", "(", "segms", ")", "\n", "segms", "=", "segms", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "img", "=", "imshow_det_bboxes", "(", "\n", "img", ",", "\n", "bboxes", ",", "\n", "labels", ",", "\n", "segms", "=", "segms", ",", "\n", "class_names", "=", "class_names", ",", "\n", "score_thr", "=", "score_thr", ",", "\n", "bbox_color", "=", "det_bbox_color", ",", "\n", "text_color", "=", "det_text_color", ",", "\n", "mask_color", "=", "det_mask_color", ",", "\n", "thickness", "=", "thickness", ",", "\n", "font_size", "=", "font_size", ",", "\n", "win_name", "=", "win_name", ",", "\n", "show", "=", "show", ",", "\n", "wait_time", "=", "wait_time", ",", "\n", "out_file", "=", "out_file", ")", "\n", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.post_processing.merge_augs.merge_aug_proposals": [[12, 81], ["copy.deepcopy", "zip", "torch.cat", "mmcv.ops.nms", "scores.sort", "min", "warnings.warn", "mmcv.ConfigDict", "proposals.clone", "bbox.bbox_mapping_back", "recovered_proposals.append", "aug_proposals[].contiguous", "aug_proposals[].contiguous", "dict"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox_mapping_back"], ["def", "merge_aug_proposals", "(", "aug_proposals", ",", "img_metas", ",", "cfg", ")", ":", "\n", "    ", "\"\"\"Merge augmented proposals (multiscale, flip, etc.)\n\n    Args:\n        aug_proposals (list[Tensor]): proposals from different testing\n            schemes, shape (n, 5). Note that they are not rescaled to the\n            original image size.\n\n        img_metas (list[dict]): list of image info dict where each dict has:\n            'img_shape', 'scale_factor', 'flip', and may also contain\n            'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n            For details on the values of these keys see\n            `mmdet/datasets/pipelines/formatting.py:Collect`.\n\n        cfg (dict): rpn test config.\n\n    Returns:\n        Tensor: shape (n, 4), proposals corresponding to original image scale.\n    \"\"\"", "\n", "\n", "cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ")", "\n", "\n", "# deprecate arguments warning", "\n", "if", "'nms'", "not", "in", "cfg", "or", "'max_num'", "in", "cfg", "or", "'nms_thr'", "in", "cfg", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'In rpn_proposal or test_cfg, '", "\n", "'nms_thr has been moved to a dict named nms as '", "\n", "'iou_threshold, max_num has been renamed as max_per_img, '", "\n", "'name of original arguments and the way to specify '", "\n", "'iou_threshold of NMS will be deprecated.'", ")", "\n", "", "if", "'nms'", "not", "in", "cfg", ":", "\n", "        ", "cfg", ".", "nms", "=", "ConfigDict", "(", "dict", "(", "type", "=", "'nms'", ",", "iou_threshold", "=", "cfg", ".", "nms_thr", ")", ")", "\n", "", "if", "'max_num'", "in", "cfg", ":", "\n", "        ", "if", "'max_per_img'", "in", "cfg", ":", "\n", "            ", "assert", "cfg", ".", "max_num", "==", "cfg", ".", "max_per_img", ",", "f'You set max_num and '", "f'max_per_img at the same time, but get {cfg.max_num} '", "f'and {cfg.max_per_img} respectively'", "f'Please delete max_num which will be deprecated.'", "\n", "", "else", ":", "\n", "            ", "cfg", ".", "max_per_img", "=", "cfg", ".", "max_num", "\n", "", "", "if", "'nms_thr'", "in", "cfg", ":", "\n", "        ", "assert", "cfg", ".", "nms", ".", "iou_threshold", "==", "cfg", ".", "nms_thr", ",", "f'You set '", "f'iou_threshold in nms and '", "f'nms_thr at the same time, but get '", "f'{cfg.nms.iou_threshold} and {cfg.nms_thr}'", "f' respectively. Please delete the nms_thr '", "f'which will be deprecated.'", "\n", "\n", "", "recovered_proposals", "=", "[", "]", "\n", "for", "proposals", ",", "img_info", "in", "zip", "(", "aug_proposals", ",", "img_metas", ")", ":", "\n", "        ", "img_shape", "=", "img_info", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_info", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_info", "[", "'flip'", "]", "\n", "flip_direction", "=", "img_info", "[", "'flip_direction'", "]", "\n", "_proposals", "=", "proposals", ".", "clone", "(", ")", "\n", "_proposals", "[", ":", ",", ":", "4", "]", "=", "bbox_mapping_back", "(", "_proposals", "[", ":", ",", ":", "4", "]", ",", "img_shape", ",", "\n", "scale_factor", ",", "flip", ",", "\n", "flip_direction", ")", "\n", "recovered_proposals", ".", "append", "(", "_proposals", ")", "\n", "", "aug_proposals", "=", "torch", ".", "cat", "(", "recovered_proposals", ",", "dim", "=", "0", ")", "\n", "merged_proposals", ",", "_", "=", "nms", "(", "aug_proposals", "[", ":", ",", ":", "4", "]", ".", "contiguous", "(", ")", ",", "\n", "aug_proposals", "[", ":", ",", "-", "1", "]", ".", "contiguous", "(", ")", ",", "\n", "cfg", ".", "nms", ".", "iou_threshold", ")", "\n", "scores", "=", "merged_proposals", "[", ":", ",", "4", "]", "\n", "_", ",", "order", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "num", "=", "min", "(", "cfg", ".", "max_per_img", ",", "merged_proposals", ".", "shape", "[", "0", "]", ")", "\n", "order", "=", "order", "[", ":", "num", "]", "\n", "merged_proposals", "=", "merged_proposals", "[", "order", ",", ":", "]", "\n", "return", "merged_proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.post_processing.merge_augs.merge_aug_bboxes": [[83, 110], ["zip", "torch.stack().mean", "bbox.bbox_mapping_back", "recovered_bboxes.append", "torch.stack().mean", "torch.stack", "torch.stack"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox_mapping_back"], ["", "def", "merge_aug_bboxes", "(", "aug_bboxes", ",", "aug_scores", ",", "img_metas", ",", "rcnn_test_cfg", ")", ":", "\n", "    ", "\"\"\"Merge augmented detection bboxes and scores.\n\n    Args:\n        aug_bboxes (list[Tensor]): shape (n, 4*#class)\n        aug_scores (list[Tensor] or None): shape (n, #class)\n        img_shapes (list[Tensor]): shape (3, ).\n        rcnn_test_cfg (dict): rcnn test config.\n\n    Returns:\n        tuple: (bboxes, scores)\n    \"\"\"", "\n", "recovered_bboxes", "=", "[", "]", "\n", "for", "bboxes", ",", "img_info", "in", "zip", "(", "aug_bboxes", ",", "img_metas", ")", ":", "\n", "        ", "img_shape", "=", "img_info", "[", "0", "]", "[", "'img_shape'", "]", "\n", "scale_factor", "=", "img_info", "[", "0", "]", "[", "'scale_factor'", "]", "\n", "flip", "=", "img_info", "[", "0", "]", "[", "'flip'", "]", "\n", "flip_direction", "=", "img_info", "[", "0", "]", "[", "'flip_direction'", "]", "\n", "bboxes", "=", "bbox_mapping_back", "(", "bboxes", ",", "img_shape", ",", "scale_factor", ",", "flip", ",", "\n", "flip_direction", ")", "\n", "recovered_bboxes", ".", "append", "(", "bboxes", ")", "\n", "", "bboxes", "=", "torch", ".", "stack", "(", "recovered_bboxes", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "if", "aug_scores", "is", "None", ":", "\n", "        ", "return", "bboxes", "\n", "", "else", ":", "\n", "        ", "scores", "=", "torch", ".", "stack", "(", "aug_scores", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "return", "bboxes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.post_processing.merge_augs.merge_aug_scores": [[112, 118], ["isinstance", "torch.mean", "numpy.mean", "torch.stack"], "function", ["None"], ["", "", "def", "merge_aug_scores", "(", "aug_scores", ")", ":", "\n", "    ", "\"\"\"Merge augmented bbox scores.\"\"\"", "\n", "if", "isinstance", "(", "aug_scores", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "aug_scores", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "aug_scores", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.post_processing.merge_augs.merge_aug_masks": [[120, 151], ["zip", "recovered_masks.append", "numpy.mean", "numpy.average", "numpy.array", "numpy.array", "ValueError"], "function", ["None"], ["", "", "def", "merge_aug_masks", "(", "aug_masks", ",", "img_metas", ",", "rcnn_test_cfg", ",", "weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"Merge augmented mask prediction.\n\n    Args:\n        aug_masks (list[ndarray]): shape (n, #class, h, w)\n        img_shapes (list[ndarray]): shape (3, ).\n        rcnn_test_cfg (dict): rcnn test config.\n\n    Returns:\n        tuple: (bboxes, scores)\n    \"\"\"", "\n", "recovered_masks", "=", "[", "]", "\n", "for", "mask", ",", "img_info", "in", "zip", "(", "aug_masks", ",", "img_metas", ")", ":", "\n", "        ", "flip", "=", "img_info", "[", "0", "]", "[", "'flip'", "]", "\n", "flip_direction", "=", "img_info", "[", "0", "]", "[", "'flip_direction'", "]", "\n", "if", "flip", ":", "\n", "            ", "if", "flip_direction", "==", "'horizontal'", ":", "\n", "                ", "mask", "=", "mask", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "elif", "flip_direction", "==", "'vertical'", ":", "\n", "                ", "mask", "=", "mask", "[", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"Invalid flipping direction '{flip_direction}'\"", ")", "\n", "", "", "recovered_masks", ".", "append", "(", "mask", ")", "\n", "\n", "", "if", "weights", "is", "None", ":", "\n", "        ", "merged_masks", "=", "np", ".", "mean", "(", "recovered_masks", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "merged_masks", "=", "np", ".", "average", "(", "\n", "np", ".", "array", "(", "recovered_masks", ")", ",", "axis", "=", "0", ",", "weights", "=", "np", ".", "array", "(", "weights", ")", ")", "\n", "", "return", "merged_masks", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.post_processing.bbox_nms.multiclass_nms": [[7, 94], ["torch.arange", "torch.cat.view().expand_as", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.reshape", "mmcv.ops.nms.batched_nms", "multi_scores.size", "multi_bboxes.view", "multi_bboxes[].expand", "torch.onnx.is_in_onnx_export", "score_factors.reshape.view().expand", "score_factors.reshape.reshape", "torch.onnx.is_in_onnx_export", "valid_mask.nonzero().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat.numel", "torch.onnx.is_in_onnx_export", "multi_scores.size", "multi_scores.size", "torch.cat.view", "multi_scores.size", "RuntimeError", "score_factors.reshape.view", "valid_mask.nonzero", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.expand", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.expand"], ["def", "multiclass_nms", "(", "multi_bboxes", ",", "\n", "multi_scores", ",", "\n", "score_thr", ",", "\n", "nms_cfg", ",", "\n", "max_num", "=", "-", "1", ",", "\n", "score_factors", "=", "None", ",", "\n", "return_inds", "=", "False", ")", ":", "\n", "    ", "\"\"\"NMS for multi-class bboxes.\n\n    Args:\n        multi_bboxes (Tensor): shape (n, #class*4) or (n, 4)\n        multi_scores (Tensor): shape (n, #class), where the last column\n            contains scores of the background class, but this will be ignored.\n        score_thr (float): bbox threshold, bboxes with scores lower than it\n            will not be considered.\n        nms_thr (float): NMS IoU threshold\n        max_num (int, optional): if there are more than max_num bboxes after\n            NMS, only top max_num will be kept. Default to -1.\n        score_factors (Tensor, optional): The factors multiplied to scores\n            before applying NMS. Default to None.\n        return_inds (bool, optional): Whether return the indices of kept\n            bboxes. Default to False.\n\n    Returns:\n        tuple: (bboxes, labels, indices (optional)), tensors of shape (k, 5),\n            (k), and (k). Labels are 0-based.\n    \"\"\"", "\n", "num_classes", "=", "multi_scores", ".", "size", "(", "1", ")", "-", "1", "\n", "# exclude background category", "\n", "if", "multi_bboxes", ".", "shape", "[", "1", "]", ">", "4", ":", "\n", "        ", "bboxes", "=", "multi_bboxes", ".", "view", "(", "multi_scores", ".", "size", "(", "0", ")", ",", "-", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "        ", "bboxes", "=", "multi_bboxes", "[", ":", ",", "None", "]", ".", "expand", "(", "\n", "multi_scores", ".", "size", "(", "0", ")", ",", "num_classes", ",", "4", ")", "\n", "\n", "", "scores", "=", "multi_scores", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "labels", "=", "torch", ".", "arange", "(", "num_classes", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "labels", "=", "labels", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "scores", ")", "\n", "\n", "bboxes", "=", "bboxes", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "scores", "=", "scores", ".", "reshape", "(", "-", "1", ")", "\n", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "if", "not", "torch", ".", "onnx", ".", "is_in_onnx_export", "(", ")", ":", "\n", "# NonZero not supported  in TensorRT", "\n", "# remove low scoring boxes", "\n", "        ", "valid_mask", "=", "scores", ">", "score_thr", "\n", "# multiply score_factor after threshold to preserve more bboxes, improve", "\n", "# mAP by 1% for YOLOv3", "\n", "", "if", "score_factors", "is", "not", "None", ":", "\n", "# expand the shape to match original shape of score", "\n", "        ", "score_factors", "=", "score_factors", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "\n", "multi_scores", ".", "size", "(", "0", ")", ",", "num_classes", ")", "\n", "score_factors", "=", "score_factors", ".", "reshape", "(", "-", "1", ")", "\n", "scores", "=", "scores", "*", "score_factors", "\n", "\n", "", "if", "not", "torch", ".", "onnx", ".", "is_in_onnx_export", "(", ")", ":", "\n", "# NonZero not supported  in TensorRT", "\n", "        ", "inds", "=", "valid_mask", ".", "nonzero", "(", "as_tuple", "=", "False", ")", ".", "squeeze", "(", "1", ")", "\n", "bboxes", ",", "scores", ",", "labels", "=", "bboxes", "[", "inds", "]", ",", "scores", "[", "inds", "]", ",", "labels", "[", "inds", "]", "\n", "", "else", ":", "\n", "# TensorRT NMS plugin has invalid output filled with -1", "\n", "# add dummy data to make detection output correct.", "\n", "        ", "bboxes", "=", "torch", ".", "cat", "(", "[", "bboxes", ",", "bboxes", ".", "new_zeros", "(", "1", ",", "4", ")", "]", ",", "dim", "=", "0", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "[", "scores", ",", "scores", ".", "new_zeros", "(", "1", ")", "]", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "labels", ",", "labels", ".", "new_zeros", "(", "1", ")", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "if", "bboxes", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "if", "torch", ".", "onnx", ".", "is_in_onnx_export", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'[ONNX Error] Can not record NMS '", "\n", "'as it has not been executed this time'", ")", "\n", "", "if", "return_inds", ":", "\n", "            ", "return", "bboxes", ",", "labels", ",", "inds", "\n", "", "else", ":", "\n", "            ", "return", "bboxes", ",", "labels", "\n", "\n", "", "", "dets", ",", "keep", "=", "batched_nms", "(", "bboxes", ",", "scores", ",", "labels", ",", "nms_cfg", ")", "\n", "\n", "if", "max_num", ">", "0", ":", "\n", "        ", "dets", "=", "dets", "[", ":", "max_num", "]", "\n", "keep", "=", "keep", "[", ":", "max_num", "]", "\n", "\n", "", "if", "return_inds", ":", "\n", "        ", "return", "dets", ",", "labels", "[", "keep", "]", ",", "keep", "\n", "", "else", ":", "\n", "        ", "return", "dets", ",", "labels", "[", "keep", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.post_processing.bbox_nms.fast_nms": [[96, 169], ["multi_scores[].t", "multi_scores[].t.sort", "idx[].contiguous", "idx[].contiguous.size", "multi_bboxes[].view", "multi_coeffs[].view", "mmdet.core.bbox.iou_calculators.bbox_overlaps", "mmdet.core.bbox.iou_calculators.bbox_overlaps.triu_", "mmdet.core.bbox.iou_calculators.bbox_overlaps.max", "[].expand_as", "multi_scores[].t.sort", "torch.cat", "torch.arange", "idx[].contiguous.view", "idx[].contiguous.view"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.iou2d_calculator.bbox_overlaps"], ["", "", "def", "fast_nms", "(", "multi_bboxes", ",", "\n", "multi_scores", ",", "\n", "multi_coeffs", ",", "\n", "score_thr", ",", "\n", "iou_thr", ",", "\n", "top_k", ",", "\n", "max_num", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Fast NMS in `YOLACT <https://arxiv.org/abs/1904.02689>`_.\n\n    Fast NMS allows already-removed detections to suppress other detections so\n    that every instance can be decided to be kept or discarded in parallel,\n    which is not possible in traditional NMS. This relaxation allows us to\n    implement Fast NMS entirely in standard GPU-accelerated matrix operations.\n\n    Args:\n        multi_bboxes (Tensor): shape (n, #class*4) or (n, 4)\n        multi_scores (Tensor): shape (n, #class+1), where the last column\n            contains scores of the background class, but this will be ignored.\n        multi_coeffs (Tensor): shape (n, #class*coeffs_dim).\n        score_thr (float): bbox threshold, bboxes with scores lower than it\n            will not be considered.\n        iou_thr (float): IoU threshold to be considered as conflicted.\n        top_k (int): if there are more than top_k bboxes before NMS,\n            only top top_k will be kept.\n        max_num (int): if there are more than max_num bboxes after NMS,\n            only top max_num will be kept. If -1, keep all the bboxes.\n            Default: -1.\n\n    Returns:\n        tuple: (bboxes, labels, coefficients), tensors of shape (k, 5), (k, 1),\n            and (k, coeffs_dim). Labels are 0-based.\n    \"\"\"", "\n", "\n", "scores", "=", "multi_scores", "[", ":", ",", ":", "-", "1", "]", ".", "t", "(", ")", "# [#class, n]", "\n", "scores", ",", "idx", "=", "scores", ".", "sort", "(", "1", ",", "descending", "=", "True", ")", "\n", "\n", "idx", "=", "idx", "[", ":", ",", ":", "top_k", "]", ".", "contiguous", "(", ")", "\n", "scores", "=", "scores", "[", ":", ",", ":", "top_k", "]", "# [#class, topk]", "\n", "num_classes", ",", "num_dets", "=", "idx", ".", "size", "(", ")", "\n", "boxes", "=", "multi_bboxes", "[", "idx", ".", "view", "(", "-", "1", ")", ",", ":", "]", ".", "view", "(", "num_classes", ",", "num_dets", ",", "4", ")", "\n", "coeffs", "=", "multi_coeffs", "[", "idx", ".", "view", "(", "-", "1", ")", ",", ":", "]", ".", "view", "(", "num_classes", ",", "num_dets", ",", "-", "1", ")", "\n", "\n", "iou", "=", "bbox_overlaps", "(", "boxes", ",", "boxes", ")", "# [#class, topk, topk]", "\n", "iou", ".", "triu_", "(", "diagonal", "=", "1", ")", "\n", "iou_max", ",", "_", "=", "iou", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "# Now just filter out the ones higher than the threshold", "\n", "keep", "=", "iou_max", "<=", "iou_thr", "\n", "\n", "# Second thresholding introduces 0.2 mAP gain at negligible time cost", "\n", "keep", "*=", "scores", ">", "score_thr", "\n", "\n", "# Assign each kept detection to its corresponding class", "\n", "classes", "=", "torch", ".", "arange", "(", "\n", "num_classes", ",", "device", "=", "boxes", ".", "device", ")", "[", ":", ",", "None", "]", ".", "expand_as", "(", "keep", ")", "\n", "classes", "=", "classes", "[", "keep", "]", "\n", "\n", "boxes", "=", "boxes", "[", "keep", "]", "\n", "coeffs", "=", "coeffs", "[", "keep", "]", "\n", "scores", "=", "scores", "[", "keep", "]", "\n", "\n", "# Only keep the top max_num highest scores across all classes", "\n", "scores", ",", "idx", "=", "scores", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "if", "max_num", ">", "0", ":", "\n", "        ", "idx", "=", "idx", "[", ":", "max_num", "]", "\n", "scores", "=", "scores", "[", ":", "max_num", "]", "\n", "\n", "", "classes", "=", "classes", "[", "idx", "]", "\n", "boxes", "=", "boxes", "[", "idx", "]", "\n", "coeffs", "=", "coeffs", "[", "idx", "]", "\n", "\n", "cls_dets", "=", "torch", ".", "cat", "(", "[", "boxes", ",", "scores", "[", ":", ",", "None", "]", "]", ",", "dim", "=", "1", ")", "\n", "return", "cls_dets", ",", "classes", ",", "coeffs", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.export.pytorch2onnx.generate_inputs_and_wrap_model": [[9, 62], ["pytorch2onnx.build_model_from_cfg", "pytorch2onnx.preprocess_example_input", "functools.partial", "register_extra_symbolics", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.export.pytorch2onnx.build_model_from_cfg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.export.pytorch2onnx.preprocess_example_input"], ["from", "mmcv", "import", "DictAction", "\n", "\n", "from", "mmdet", ".", "core", "import", "(", "build_model_from_cfg", ",", "generate_inputs_and_wrap_model", ",", "\n", "preprocess_example_input", ")", "\n", "\n", "\n", "def", "pytorch2onnx", "(", "config_path", ",", "\n", "checkpoint_path", ",", "\n", "input_img", ",", "\n", "input_shape", ",", "\n", "opset_version", "=", "11", ",", "\n", "show", "=", "False", ",", "\n", "output_file", "=", "'tmp.onnx'", ",", "\n", "verify", "=", "False", ",", "\n", "normalize_cfg", "=", "None", ",", "\n", "dataset", "=", "'coco'", ",", "\n", "test_img", "=", "None", ",", "\n", "do_simplify", "=", "False", ",", "\n", "cfg_options", "=", "None", ")", ":", "\n", "\n", "    ", "input_config", "=", "{", "\n", "'input_shape'", ":", "input_shape", ",", "\n", "'input_path'", ":", "input_img", ",", "\n", "'normalize_cfg'", ":", "normalize_cfg", "\n", "}", "\n", "\n", "# prepare original model and meta for verifying the onnx model", "\n", "orig_model", "=", "build_model_from_cfg", "(", "\n", "config_path", ",", "checkpoint_path", ",", "cfg_options", "=", "cfg_options", ")", "\n", "one_img", ",", "one_meta", "=", "preprocess_example_input", "(", "input_config", ")", "\n", "model", ",", "tensor_data", "=", "generate_inputs_and_wrap_model", "(", "\n", "config_path", ",", "checkpoint_path", ",", "input_config", ",", "cfg_options", "=", "cfg_options", ")", "\n", "output_names", "=", "[", "'boxes'", "]", "\n", "if", "model", ".", "with_bbox", ":", "\n", "        ", "output_names", ".", "append", "(", "'labels'", ")", "\n", "", "if", "model", ".", "with_mask", ":", "\n", "        ", "output_names", ".", "append", "(", "'masks'", ")", "\n", "\n", "", "torch", ".", "onnx", ".", "export", "(", "\n", "model", ",", "\n", "tensor_data", ",", "\n", "output_file", ",", "\n", "input_names", "=", "[", "'input'", "]", ",", "\n", "output_names", "=", "output_names", ",", "\n", "export_params", "=", "True", ",", "\n", "keep_initializers_as_inputs", "=", "True", ",", "\n", "do_constant_folding", "=", "True", ",", "\n", "verbose", "=", "show", ",", "\n", "opset_version", "=", "opset_version", ")", "\n", "\n", "model", ".", "forward", "=", "orig_model", ".", "forward", "\n", "\n", "# simplify onnx model", "\n", "if", "do_simplify", ":", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.export.pytorch2onnx.build_model_from_cfg": [[64, 96], ["mmcv.Config.fromfile", "mmcv.Config.fromfile.get", "mmcv.Config.fromfile.get", "build_detector", "mmcv.runner.load_checkpoint", "build_detector.cpu().eval", "mmcv.Config.fromfile.merge_from_dict", "import_modules_from_strings", "mmcv.Config.fromfile.get", "build_detector.cpu"], "function", ["None"], ["import", "mmcv", "\n", "\n", "min_required_version", "=", "'1.2.5'", "\n", "assert", "digit_version", "(", "mmcv", ".", "__version__", ")", ">=", "digit_version", "(", "\n", "min_required_version", "\n", ")", ",", "f'Requires to install mmcv>={min_required_version}'", "\n", "from", "mmcv", ".", "onnx", ".", "simplify", "import", "simplify", "\n", "\n", "input_dic", "=", "{", "'input'", ":", "one_img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "}", "\n", "_", "=", "simplify", "(", "output_file", ",", "[", "input_dic", "]", ",", "output_file", ")", "\n", "", "print", "(", "f'Successfully exported ONNX model: {output_file}'", ")", "\n", "if", "verify", ":", "\n", "        ", "from", "mmdet", ".", "core", "import", "get_classes", ",", "bbox2result", "\n", "from", "mmdet", ".", "apis", "import", "show_result_pyplot", "\n", "\n", "ort_custom_op_path", "=", "''", "\n", "try", ":", "\n", "            ", "from", "mmcv", ".", "ops", "import", "get_onnxruntime_op_path", "\n", "ort_custom_op_path", "=", "get_onnxruntime_op_path", "(", ")", "\n", "", "except", "(", "ImportError", ",", "ModuleNotFoundError", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "'If input model has custom op from mmcv, \\\n                you may have to build mmcv with ONNXRuntime from source.'", ")", "\n", "", "model", ".", "CLASSES", "=", "get_classes", "(", "dataset", ")", "\n", "num_classes", "=", "len", "(", "model", ".", "CLASSES", ")", "\n", "# check by onnx", "\n", "onnx_model", "=", "onnx", ".", "load", "(", "output_file", ")", "\n", "onnx", ".", "checker", ".", "check_model", "(", "onnx_model", ")", "\n", "if", "test_img", "is", "not", "None", ":", "\n", "            ", "input_config", "[", "'input_path'", "]", "=", "test_img", "\n", "one_img", ",", "one_meta", "=", "preprocess_example_input", "(", "input_config", ")", "\n", "tensor_data", "=", "[", "one_img", "]", "\n", "# check the numerical value", "\n", "# get pytorch output", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.export.pytorch2onnx.preprocess_example_input": [[98, 155], ["mmcv.imread", "mmcv.imresize", "mmcv.imnormalize.copy", "mmcv.imnormalize.transpose", "torch.from_numpy().unsqueeze().float().requires_grad_", "input_config.keys", "numpy.array", "numpy.array", "normalize_cfg.get", "mmcv.imnormalize", "torch.from_numpy().unsqueeze().float", "torch.from_numpy().unsqueeze", "torch.from_numpy"], "function", ["None"], ["pytorch_results", "=", "pytorch_results", "[", "0", "]", "\n", "# get onnx output", "\n", "input_all", "=", "[", "node", ".", "name", "for", "node", "in", "onnx_model", ".", "graph", ".", "input", "]", "\n", "input_initializer", "=", "[", "\n", "node", ".", "name", "for", "node", "in", "onnx_model", ".", "graph", ".", "initializer", "\n", "]", "\n", "net_feed_input", "=", "list", "(", "set", "(", "input_all", ")", "-", "set", "(", "input_initializer", ")", ")", "\n", "assert", "(", "len", "(", "net_feed_input", ")", "==", "1", ")", "\n", "session_options", "=", "rt", ".", "SessionOptions", "(", ")", "\n", "# register custom op for onnxruntime", "\n", "if", "osp", ".", "exists", "(", "ort_custom_op_path", ")", ":", "\n", "            ", "session_options", ".", "register_custom_ops_library", "(", "ort_custom_op_path", ")", "\n", "", "sess", "=", "rt", ".", "InferenceSession", "(", "output_file", ",", "session_options", ")", "\n", "onnx_outputs", "=", "sess", ".", "run", "(", "None", ",", "\n", "{", "net_feed_input", "[", "0", "]", ":", "one_img", ".", "detach", "(", ")", ".", "numpy", "(", ")", "}", ")", "\n", "output_names", "=", "[", "_", ".", "name", "for", "_", "in", "sess", ".", "get_outputs", "(", ")", "]", "\n", "output_shapes", "=", "[", "_", ".", "shape", "for", "_", "in", "onnx_outputs", "]", "\n", "print", "(", "f'onnxruntime output names: {output_names}, \\\n            output shapes: {output_shapes}'", ")", "\n", "nrof_out", "=", "len", "(", "onnx_outputs", ")", "\n", "assert", "nrof_out", ">", "0", ",", "'Must have output'", "\n", "with_mask", "=", "nrof_out", "==", "3", "\n", "if", "nrof_out", "==", "1", ":", "\n", "            ", "onnx_results", "=", "onnx_outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "det_bboxes", ",", "det_labels", "=", "onnx_outputs", "[", ":", "2", "]", "\n", "onnx_results", "=", "bbox2result", "(", "det_bboxes", ",", "det_labels", ",", "num_classes", ")", "\n", "if", "with_mask", ":", "\n", "                ", "segm_results", "=", "onnx_outputs", "[", "2", "]", ".", "squeeze", "(", "1", ")", "\n", "cls_segms", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "det_bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "cls_segms", "[", "det_labels", "[", "i", "]", "]", ".", "append", "(", "segm_results", "[", "i", "]", ")", "\n", "", "onnx_results", "=", "(", "onnx_results", ",", "cls_segms", ")", "\n", "# visualize predictions", "\n", "\n", "", "", "if", "show", ":", "\n", "            ", "show_result_pyplot", "(", "\n", "model", ",", "one_meta", "[", "'show_img'", "]", ",", "pytorch_results", ",", "title", "=", "'Pytorch'", ")", "\n", "show_result_pyplot", "(", "\n", "model", ",", "one_meta", "[", "'show_img'", "]", ",", "onnx_results", ",", "title", "=", "'ONNX'", ")", "\n", "\n", "# compare a part of result", "\n", "\n", "", "if", "with_mask", ":", "\n", "            ", "compare_pairs", "=", "list", "(", "zip", "(", "onnx_results", ",", "pytorch_results", ")", ")", "\n", "", "else", ":", "\n", "            ", "compare_pairs", "=", "[", "(", "onnx_results", ",", "pytorch_results", ")", "]", "\n", "", "for", "onnx_res", ",", "pytorch_res", "in", "compare_pairs", ":", "\n", "            ", "for", "o_res", ",", "p_res", "in", "zip", "(", "onnx_res", ",", "pytorch_res", ")", ":", "\n", "                ", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "o_res", ",", "\n", "p_res", ",", "\n", "rtol", "=", "1e-03", ",", "\n", "atol", "=", "1e-05", ",", "\n", ")", "\n", "", "", "print", "(", "'The numerical values are the same between Pytorch and ONNX'", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.mask_target.mask_target": [[6, 64], ["map", "list", "len", "torch.cat", "range", "len"], "function", ["None"], ["def", "mask_target", "(", "pos_proposals_list", ",", "pos_assigned_gt_inds_list", ",", "gt_masks_list", ",", "\n", "cfg", ")", ":", "\n", "    ", "\"\"\"Compute mask target for positive proposals in multiple images.\n\n    Args:\n        pos_proposals_list (list[Tensor]): Positive proposals in multiple\n            images.\n        pos_assigned_gt_inds_list (list[Tensor]): Assigned GT indices for each\n            positive proposals.\n        gt_masks_list (list[:obj:`BaseInstanceMasks`]): Ground truth masks of\n            each image.\n        cfg (dict): Config dict that specifies the mask size.\n\n    Returns:\n        list[Tensor]: Mask target of each image.\n\n    Example:\n        >>> import mmcv\n        >>> import mmdet\n        >>> from mmdet.core.mask import BitmapMasks\n        >>> from mmdet.core.mask.mask_target import *\n        >>> H, W = 17, 18\n        >>> cfg = mmcv.Config({'mask_size': (13, 14)})\n        >>> rng = np.random.RandomState(0)\n        >>> # Positive proposals (tl_x, tl_y, br_x, br_y) for each image\n        >>> pos_proposals_list = [\n        >>>     torch.Tensor([\n        >>>         [ 7.2425,  5.5929, 13.9414, 14.9541],\n        >>>         [ 7.3241,  3.6170, 16.3850, 15.3102],\n        >>>     ]),\n        >>>     torch.Tensor([\n        >>>         [ 4.8448, 6.4010, 7.0314, 9.7681],\n        >>>         [ 5.9790, 2.6989, 7.4416, 4.8580],\n        >>>         [ 0.0000, 0.0000, 0.1398, 9.8232],\n        >>>     ]),\n        >>> ]\n        >>> # Corresponding class index for each proposal for each image\n        >>> pos_assigned_gt_inds_list = [\n        >>>     torch.LongTensor([7, 0]),\n        >>>     torch.LongTensor([5, 4, 1]),\n        >>> ]\n        >>> # Ground truth mask for each true object for each image\n        >>> gt_masks_list = [\n        >>>     BitmapMasks(rng.rand(8, H, W), height=H, width=W),\n        >>>     BitmapMasks(rng.rand(6, H, W), height=H, width=W),\n        >>> ]\n        >>> mask_targets = mask_target(\n        >>>     pos_proposals_list, pos_assigned_gt_inds_list,\n        >>>     gt_masks_list, cfg)\n        >>> assert mask_targets.shape == (5,) + cfg['mask_size']\n    \"\"\"", "\n", "cfg_list", "=", "[", "cfg", "for", "_", "in", "range", "(", "len", "(", "pos_proposals_list", ")", ")", "]", "\n", "mask_targets", "=", "map", "(", "mask_target_single", ",", "pos_proposals_list", ",", "\n", "pos_assigned_gt_inds_list", ",", "gt_masks_list", ",", "cfg_list", ")", "\n", "mask_targets", "=", "list", "(", "mask_targets", ")", "\n", "if", "len", "(", "mask_targets", ")", ">", "0", ":", "\n", "        ", "mask_targets", "=", "torch", ".", "cat", "(", "mask_targets", ")", "\n", "", "return", "mask_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.mask_target.mask_target_single": [[66, 123], ["torch.nn.modules.utils._pair", "pos_proposals.size", "pos_proposals.cpu().numpy", "numpy.clip", "numpy.clip", "pos_assigned_gt_inds.cpu().numpy.cpu().numpy", "gt_masks.crop_and_resize().to_ndarray", "torch.from_numpy().float().to", "pos_proposals.new_zeros", "pos_proposals.cpu", "pos_assigned_gt_inds.cpu().numpy.cpu", "gt_masks.crop_and_resize", "torch.from_numpy().float", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop_and_resize"], ["", "def", "mask_target_single", "(", "pos_proposals", ",", "pos_assigned_gt_inds", ",", "gt_masks", ",", "cfg", ")", ":", "\n", "    ", "\"\"\"Compute mask target for each positive proposal in the image.\n\n    Args:\n        pos_proposals (Tensor): Positive proposals.\n        pos_assigned_gt_inds (Tensor): Assigned GT inds of positive proposals.\n        gt_masks (:obj:`BaseInstanceMasks`): GT masks in the format of Bitmap\n            or Polygon.\n        cfg (dict): Config dict that indicate the mask size.\n\n    Returns:\n        Tensor: Mask target of each positive proposals in the image.\n\n    Example:\n        >>> import mmcv\n        >>> import mmdet\n        >>> from mmdet.core.mask import BitmapMasks\n        >>> from mmdet.core.mask.mask_target import *  # NOQA\n        >>> H, W = 32, 32\n        >>> cfg = mmcv.Config({'mask_size': (7, 11)})\n        >>> rng = np.random.RandomState(0)\n        >>> # Masks for each ground truth box (relative to the image)\n        >>> gt_masks_data = rng.rand(3, H, W)\n        >>> gt_masks = BitmapMasks(gt_masks_data, height=H, width=W)\n        >>> # Predicted positive boxes in one image\n        >>> pos_proposals = torch.FloatTensor([\n        >>>     [ 16.2,   5.5, 19.9, 20.9],\n        >>>     [ 17.3,  13.6, 19.3, 19.3],\n        >>>     [ 14.8,  16.4, 17.0, 23.7],\n        >>>     [  0.0,   0.0, 16.0, 16.0],\n        >>>     [  4.0,   0.0, 20.0, 16.0],\n        >>> ])\n        >>> # For each predicted proposal, its assignment to a gt mask\n        >>> pos_assigned_gt_inds = torch.LongTensor([0, 1, 2, 1, 1])\n        >>> mask_targets = mask_target_single(\n        >>>     pos_proposals, pos_assigned_gt_inds, gt_masks, cfg)\n        >>> assert mask_targets.shape == (5,) + cfg['mask_size']\n    \"\"\"", "\n", "device", "=", "pos_proposals", ".", "device", "\n", "mask_size", "=", "_pair", "(", "cfg", ".", "mask_size", ")", "\n", "num_pos", "=", "pos_proposals", ".", "size", "(", "0", ")", "\n", "if", "num_pos", ">", "0", ":", "\n", "        ", "proposals_np", "=", "pos_proposals", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "maxh", ",", "maxw", "=", "gt_masks", ".", "height", ",", "gt_masks", ".", "width", "\n", "proposals_np", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "np", ".", "clip", "(", "proposals_np", "[", ":", ",", "[", "0", ",", "2", "]", "]", ",", "0", ",", "maxw", ")", "\n", "proposals_np", "[", ":", ",", "[", "1", ",", "3", "]", "]", "=", "np", ".", "clip", "(", "proposals_np", "[", ":", ",", "[", "1", ",", "3", "]", "]", ",", "0", ",", "maxh", ")", "\n", "pos_assigned_gt_inds", "=", "pos_assigned_gt_inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "mask_targets", "=", "gt_masks", ".", "crop_and_resize", "(", "\n", "proposals_np", ",", "mask_size", ",", "device", "=", "device", ",", "\n", "inds", "=", "pos_assigned_gt_inds", ")", ".", "to_ndarray", "(", ")", "\n", "\n", "mask_targets", "=", "torch", ".", "from_numpy", "(", "mask_targets", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "        ", "mask_targets", "=", "pos_proposals", ".", "new_zeros", "(", "(", "0", ",", ")", "+", "mask_size", ")", "\n", "\n", "", "return", "mask_targets", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BaseInstanceMasks.rescale": [[14, 26], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "rescale", "(", "self", ",", "scale", ",", "interpolation", "=", "'nearest'", ")", ":", "\n", "        ", "\"\"\"Rescale masks as large as possible while keeping the aspect ratio.\n        For details can refer to `mmcv.imrescale`.\n\n        Args:\n            scale (tuple[int]): The maximum size (h, w) of rescaled mask.\n            interpolation (str): Same as :func:`mmcv.imrescale`.\n\n        Returns:\n            BaseInstanceMasks: The rescaled masks.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BaseInstanceMasks.resize": [[27, 38], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "resize", "(", "self", ",", "out_shape", ",", "interpolation", "=", "'nearest'", ")", ":", "\n", "        ", "\"\"\"Resize masks to the given out_shape.\n\n        Args:\n            out_shape: Target (h, w) of resized mask.\n            interpolation (str): See :func:`mmcv.imresize`.\n\n        Returns:\n            BaseInstanceMasks: The resized masks.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BaseInstanceMasks.flip": [[39, 49], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "flip", "(", "self", ",", "flip_direction", "=", "'horizontal'", ")", ":", "\n", "        ", "\"\"\"Flip masks alone the given direction.\n\n        Args:\n            flip_direction (str): Either 'horizontal' or 'vertical'.\n\n        Returns:\n            BaseInstanceMasks: The flipped masks.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BaseInstanceMasks.pad": [[50, 61], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "pad", "(", "self", ",", "out_shape", ",", "pad_val", ")", ":", "\n", "        ", "\"\"\"Pad masks to the given size of (h, w).\n\n        Args:\n            out_shape (tuple[int]): Target (h, w) of padded mask.\n            pad_val (int): The padded value.\n\n        Returns:\n            BaseInstanceMasks: The padded masks.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BaseInstanceMasks.crop": [[62, 72], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "crop", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "\"\"\"Crop each mask by the given bbox.\n\n        Args:\n            bbox (ndarray): Bbox in format [x1, y1, x2, y2], shape (4, ).\n\n        Return:\n            BaseInstanceMasks: The cropped masks.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BaseInstanceMasks.crop_and_resize": [[73, 97], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "crop_and_resize", "(", "self", ",", "\n", "bboxes", ",", "\n", "out_shape", ",", "\n", "inds", ",", "\n", "device", ",", "\n", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "\"\"\"Crop and resize masks by the given bboxes.\n\n        This function is mainly used in mask targets computation.\n        It firstly align mask to bboxes by assigned_inds, then crop mask by the\n        assigned bbox and resize to the size of (mask_h, mask_w)\n\n        Args:\n            bboxes (Tensor): Bboxes in format [x1, y1, x2, y2], shape (N, 4)\n            out_shape (tuple[int]): Target (h, w) of resized mask\n            inds (ndarray): Indexes to assign masks to each bbox,\n                shape (N,) and values should be between [0, num_masks - 1].\n            device (str): Device of bboxes\n            interpolation (str): See `mmcv.imresize`\n\n        Return:\n            BaseInstanceMasks: the cropped and resized masks.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BaseInstanceMasks.expand": [[98, 101], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "expand", "(", "self", ",", "expanded_h", ",", "expanded_w", ",", "top", ",", "left", ")", ":", "\n", "        ", "\"\"\"see :class:`Expand`.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BaseInstanceMasks.areas": [[102, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "@", "abstractmethod", "\n", "def", "areas", "(", "self", ")", ":", "\n", "        ", "\"\"\"ndarray: areas of each instance.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BaseInstanceMasks.to_ndarray": [[107, 114], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "to_ndarray", "(", "self", ")", ":", "\n", "        ", "\"\"\"Convert masks to the format of ndarray.\n\n        Return:\n            ndarray: Converted masks in the format of ndarray.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BaseInstanceMasks.to_tensor": [[115, 126], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "to_tensor", "(", "self", ",", "dtype", ",", "device", ")", ":", "\n", "        ", "\"\"\"Convert masks to the format of Tensor.\n\n        Args:\n            dtype (str): Dtype of converted mask.\n            device (torch.device): Device of converted masks.\n\n        Returns:\n            Tensor: Converted masks in the format of Tensor.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BaseInstanceMasks.translate": [[127, 147], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "translate", "(", "self", ",", "\n", "out_shape", ",", "\n", "offset", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "fill_val", "=", "0", ",", "\n", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "\"\"\"Translate the masks.\n\n        Args:\n            out_shape (tuple[int]): Shape for output mask, format (h, w).\n            offset (int | float): The offset for translate.\n            direction (str): The translate direction, either \"horizontal\"\n                or \"vertical\".\n            fill_val (int | float): Border value. Default 0.\n            interpolation (str): Same as :func:`mmcv.imtranslate`.\n\n        Returns:\n            Translated masks.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BaseInstanceMasks.shear": [[148, 168], ["None"], "methods", ["None"], ["", "def", "shear", "(", "self", ",", "\n", "out_shape", ",", "\n", "magnitude", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "border_value", "=", "0", ",", "\n", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "\"\"\"Shear the masks.\n\n        Args:\n            out_shape (tuple[int]): Shape for output mask, format (h, w).\n            magnitude (int | float): The magnitude used for shear.\n            direction (str): The shear direction, either \"horizontal\"\n                or \"vertical\".\n            border_value (int | tuple[int]): Value used in case of a\n                constant border. Default 0.\n            interpolation (str): Same as in :func:`mmcv.imshear`.\n\n        Returns:\n            ndarray: Sheared masks.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BaseInstanceMasks.rotate": [[169, 186], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "rotate", "(", "self", ",", "out_shape", ",", "angle", ",", "center", "=", "None", ",", "scale", "=", "1.0", ",", "fill_val", "=", "0", ")", ":", "\n", "        ", "\"\"\"Rotate the masks.\n\n        Args:\n            out_shape (tuple[int]): Shape for output mask, format (h, w).\n            angle (int | float): Rotation angle in degrees. Positive values\n                mean counter-clockwise rotation.\n            center (tuple[float], optional): Center point (w, h) of the\n                rotation in source image. If not specified, the center of\n                the image will be used.\n            scale (int | float): Isotropic scale factor.\n            fill_val (int | float): Border value. Default 0 for masks.\n\n        Returns:\n            Rotated masks.\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.__init__": [[217, 233], ["len", "numpy.empty", "isinstance", "isinstance", "numpy.stack().reshape", "isinstance", "numpy.stack"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "masks", ",", "height", ",", "width", ")", ":", "\n", "        ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "if", "len", "(", "masks", ")", "==", "0", ":", "\n", "            ", "self", ".", "masks", "=", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "height", ",", "self", ".", "width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "masks", ",", "(", "list", ",", "np", ".", "ndarray", ")", ")", "\n", "if", "isinstance", "(", "masks", ",", "list", ")", ":", "\n", "                ", "assert", "isinstance", "(", "masks", "[", "0", "]", ",", "np", ".", "ndarray", ")", "\n", "assert", "masks", "[", "0", "]", ".", "ndim", "==", "2", "# (H, W)", "\n", "", "else", ":", "\n", "                ", "assert", "masks", ".", "ndim", "==", "3", "# (N, H, W)", "\n", "\n", "", "self", ".", "masks", "=", "np", ".", "stack", "(", "masks", ")", ".", "reshape", "(", "-", "1", ",", "height", ",", "width", ")", "\n", "assert", "self", ".", "masks", ".", "shape", "[", "1", "]", "==", "self", ".", "height", "\n", "assert", "self", ".", "masks", ".", "shape", "[", "2", "]", "==", "self", ".", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.__getitem__": [[234, 245], ["structures.BitmapMasks.masks[].reshape", "structures.BitmapMasks"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Index the BitmapMask.\n\n        Args:\n            index (int | ndarray): Indices in the format of integer or ndarray.\n\n        Returns:\n            :obj:`BitmapMasks`: Indexed bitmap masks.\n        \"\"\"", "\n", "masks", "=", "self", ".", "masks", "[", "index", "]", ".", "reshape", "(", "-", "1", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "return", "BitmapMasks", "(", "masks", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.__iter__": [[246, 248], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.__repr__": [[249, 255], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "s", "+=", "f'num_masks={len(self.masks)}, '", "\n", "s", "+=", "f'height={self.height}, '", "\n", "s", "+=", "f'width={self.width})'", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.__len__": [[256, 259], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of masks.\"\"\"", "\n", "return", "len", "(", "self", ".", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.rescale": [[260, 272], ["structures.BitmapMasks", "len", "mmcv.rescale_size", "numpy.empty", "numpy.stack", "mmcv.imrescale"], "methods", ["None"], ["", "def", "rescale", "(", "self", ",", "scale", ",", "interpolation", "=", "'nearest'", ")", ":", "\n", "        ", "\"\"\"See :func:`BaseInstanceMasks.rescale`.\"\"\"", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "new_w", ",", "new_h", "=", "mmcv", ".", "rescale_size", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "scale", ")", "\n", "rescaled_masks", "=", "np", ".", "empty", "(", "(", "0", ",", "new_h", ",", "new_w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "rescaled_masks", "=", "np", ".", "stack", "(", "[", "\n", "mmcv", ".", "imrescale", "(", "mask", ",", "scale", ",", "interpolation", "=", "interpolation", ")", "\n", "for", "mask", "in", "self", ".", "masks", "\n", "]", ")", "\n", "", "height", ",", "width", "=", "rescaled_masks", ".", "shape", "[", "1", ":", "]", "\n", "return", "BitmapMasks", "(", "rescaled_masks", ",", "height", ",", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.resize": [[273, 284], ["structures.BitmapMasks", "len", "numpy.empty", "numpy.stack", "mmcv.imresize"], "methods", ["None"], ["", "def", "resize", "(", "self", ",", "out_shape", ",", "interpolation", "=", "'nearest'", ")", ":", "\n", "        ", "\"\"\"See :func:`BaseInstanceMasks.resize`.\"\"\"", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "resized_masks", "=", "np", ".", "empty", "(", "(", "0", ",", "*", "out_shape", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "resized_masks", "=", "np", ".", "stack", "(", "[", "\n", "mmcv", ".", "imresize", "(", "\n", "mask", ",", "out_shape", "[", ":", ":", "-", "1", "]", ",", "interpolation", "=", "interpolation", ")", "\n", "for", "mask", "in", "self", ".", "masks", "\n", "]", ")", "\n", "", "return", "BitmapMasks", "(", "resized_masks", ",", "*", "out_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.flip": [[285, 297], ["structures.BitmapMasks", "len", "numpy.stack", "mmcv.imflip"], "methods", ["None"], ["", "def", "flip", "(", "self", ",", "flip_direction", "=", "'horizontal'", ")", ":", "\n", "        ", "\"\"\"See :func:`BaseInstanceMasks.flip`.\"\"\"", "\n", "assert", "flip_direction", "in", "(", "'horizontal'", ",", "'vertical'", ",", "'diagonal'", ")", "\n", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "flipped_masks", "=", "self", ".", "masks", "\n", "", "else", ":", "\n", "            ", "flipped_masks", "=", "np", ".", "stack", "(", "[", "\n", "mmcv", ".", "imflip", "(", "mask", ",", "direction", "=", "flip_direction", ")", "\n", "for", "mask", "in", "self", ".", "masks", "\n", "]", ")", "\n", "", "return", "BitmapMasks", "(", "flipped_masks", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.pad": [[298, 308], ["structures.BitmapMasks", "len", "numpy.empty", "numpy.stack", "mmcv.impad"], "methods", ["None"], ["", "def", "pad", "(", "self", ",", "out_shape", ",", "pad_val", "=", "0", ")", ":", "\n", "        ", "\"\"\"See :func:`BaseInstanceMasks.pad`.\"\"\"", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "padded_masks", "=", "np", ".", "empty", "(", "(", "0", ",", "*", "out_shape", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "padded_masks", "=", "np", ".", "stack", "(", "[", "\n", "mmcv", ".", "impad", "(", "mask", ",", "shape", "=", "out_shape", ",", "pad_val", "=", "pad_val", ")", "\n", "for", "mask", "in", "self", ".", "masks", "\n", "]", ")", "\n", "", "return", "BitmapMasks", "(", "padded_masks", ",", "*", "out_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.crop": [[309, 327], ["isinstance", "bbox.copy.copy.copy", "numpy.clip", "numpy.clip", "numpy.maximum", "numpy.maximum", "structures.BitmapMasks", "len", "numpy.empty"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "\"\"\"See :func:`BaseInstanceMasks.crop`.\"\"\"", "\n", "assert", "isinstance", "(", "bbox", ",", "np", ".", "ndarray", ")", "\n", "assert", "bbox", ".", "ndim", "==", "1", "\n", "\n", "# clip the boundary", "\n", "bbox", "=", "bbox", ".", "copy", "(", ")", "\n", "bbox", "[", "0", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "bbox", "[", "0", ":", ":", "2", "]", ",", "0", ",", "self", ".", "width", ")", "\n", "bbox", "[", "1", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "bbox", "[", "1", ":", ":", "2", "]", ",", "0", ",", "self", ".", "height", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", "\n", "w", "=", "np", ".", "maximum", "(", "x2", "-", "x1", ",", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "y2", "-", "y1", ",", "1", ")", "\n", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "cropped_masks", "=", "np", ".", "empty", "(", "(", "0", ",", "h", ",", "w", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "cropped_masks", "=", "self", ".", "masks", "[", ":", ",", "y1", ":", "y1", "+", "h", ",", "x1", ":", "x1", "+", "w", "]", "\n", "", "return", "BitmapMasks", "(", "cropped_masks", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.crop_and_resize": [[328, 359], ["isinstance", "isinstance", "torch.cat", "rois.to.to.to", "structures.BitmapMasks", "len", "numpy.empty", "structures.BitmapMasks", "torch.from_numpy().to", "torch.from_numpy().to", "torch.arange().to", "torch.from_numpy().to().index_select().to", "mmcv.ops.roi_align.roi_align().squeeze", "torch.from_numpy", "torch.from_numpy", "torch.arange", "torch.from_numpy().to().index_select", "mmcv.ops.roi_align.roi_align", "torch.from_numpy().to", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to"], ["", "def", "crop_and_resize", "(", "self", ",", "\n", "bboxes", ",", "\n", "out_shape", ",", "\n", "inds", ",", "\n", "device", "=", "'cpu'", ",", "\n", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "\"\"\"See :func:`BaseInstanceMasks.crop_and_resize`.\"\"\"", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "empty_masks", "=", "np", ".", "empty", "(", "(", "0", ",", "*", "out_shape", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "return", "BitmapMasks", "(", "empty_masks", ",", "*", "out_shape", ")", "\n", "\n", "# convert bboxes to tensor", "\n", "", "if", "isinstance", "(", "bboxes", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "bboxes", "=", "torch", ".", "from_numpy", "(", "bboxes", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "", "if", "isinstance", "(", "inds", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "inds", "=", "torch", ".", "from_numpy", "(", "inds", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "\n", "", "num_bbox", "=", "bboxes", ".", "shape", "[", "0", "]", "\n", "fake_inds", "=", "torch", ".", "arange", "(", "\n", "num_bbox", ",", "device", "=", "device", ")", ".", "to", "(", "dtype", "=", "bboxes", ".", "dtype", ")", "[", ":", ",", "None", "]", "\n", "rois", "=", "torch", ".", "cat", "(", "[", "fake_inds", ",", "bboxes", "]", ",", "dim", "=", "1", ")", "# Nx5", "\n", "rois", "=", "rois", ".", "to", "(", "device", "=", "device", ")", "\n", "if", "num_bbox", ">", "0", ":", "\n", "            ", "gt_masks_th", "=", "torch", ".", "from_numpy", "(", "self", ".", "masks", ")", ".", "to", "(", "device", ")", ".", "index_select", "(", "\n", "0", ",", "inds", ")", ".", "to", "(", "dtype", "=", "rois", ".", "dtype", ")", "\n", "targets", "=", "roi_align", "(", "gt_masks_th", "[", ":", ",", "None", ",", ":", ",", ":", "]", ",", "rois", ",", "out_shape", ",", "\n", "1.0", ",", "0", ",", "'avg'", ",", "True", ")", ".", "squeeze", "(", "1", ")", "\n", "resized_masks", "=", "(", "targets", ">=", "0.5", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "resized_masks", "=", "[", "]", "\n", "", "return", "BitmapMasks", "(", "resized_masks", ",", "*", "out_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.expand": [[360, 371], ["structures.BitmapMasks", "len", "numpy.empty", "numpy.zeros", "len"], "methods", ["None"], ["", "def", "expand", "(", "self", ",", "expanded_h", ",", "expanded_w", ",", "top", ",", "left", ")", ":", "\n", "        ", "\"\"\"See :func:`BaseInstanceMasks.expand`.\"\"\"", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "expanded_mask", "=", "np", ".", "empty", "(", "(", "0", ",", "expanded_h", ",", "expanded_w", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "expanded_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ")", ",", "expanded_h", ",", "expanded_w", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "expanded_mask", "[", ":", ",", "top", ":", "top", "+", "self", ".", "height", ",", "\n", "left", ":", "left", "+", "self", ".", "width", "]", "=", "self", ".", "masks", "\n", "", "return", "BitmapMasks", "(", "expanded_mask", ",", "expanded_h", ",", "expanded_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.translate": [[372, 421], ["structures.BitmapMasks", "len", "numpy.empty", "mmcv.imtranslate", "translated_masks.transpose().astype.transpose().astype.transpose().astype", "structures.BitmapMasks.masks.transpose", "translated_masks.transpose().astype.transpose().astype.transpose"], "methods", ["None"], ["", "def", "translate", "(", "self", ",", "\n", "out_shape", ",", "\n", "offset", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "fill_val", "=", "0", ",", "\n", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "\"\"\"Translate the BitmapMasks.\n\n        Args:\n            out_shape (tuple[int]): Shape for output mask, format (h, w).\n            offset (int | float): The offset for translate.\n            direction (str): The translate direction, either \"horizontal\"\n                or \"vertical\".\n            fill_val (int | float): Border value. Default 0 for masks.\n            interpolation (str): Same as :func:`mmcv.imtranslate`.\n\n        Returns:\n            BitmapMasks: Translated BitmapMasks.\n\n        Example:\n            >>> from mmdet.core.mask.structures import BitmapMasks\n            >>> self = BitmapMasks.random(dtype=np.uint8)\n            >>> out_shape = (32, 32)\n            >>> offset = 4\n            >>> direction = 'horizontal'\n            >>> fill_val = 0\n            >>> interpolation = 'bilinear'\n            >>> # Note, There seem to be issues when:\n            >>> # * out_shape is different than self's shape\n            >>> # * the mask dtype is not supported by cv2.AffineWarp\n            >>> new = self.translate(out_shape, offset, direction, fill_val,\n            >>>                      interpolation)\n            >>> assert len(new) == len(self)\n            >>> assert new.height, new.width == out_shape\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "translated_masks", "=", "np", ".", "empty", "(", "(", "0", ",", "*", "out_shape", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "translated_masks", "=", "mmcv", ".", "imtranslate", "(", "\n", "self", ".", "masks", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ",", "\n", "offset", ",", "\n", "direction", ",", "\n", "border_value", "=", "fill_val", ",", "\n", "interpolation", "=", "interpolation", ")", "\n", "if", "translated_masks", ".", "ndim", "==", "2", ":", "\n", "                ", "translated_masks", "=", "translated_masks", "[", ":", ",", ":", ",", "None", "]", "\n", "", "translated_masks", "=", "translated_masks", ".", "transpose", "(", "\n", "(", "2", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "self", ".", "masks", ".", "dtype", ")", "\n", "", "return", "BitmapMasks", "(", "translated_masks", ",", "*", "out_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.shear": [[422, 456], ["structures.BitmapMasks", "len", "numpy.empty", "mmcv.imshear", "sheared_masks.transpose().astype.transpose().astype.transpose().astype", "structures.BitmapMasks.masks.transpose", "sheared_masks.transpose().astype.transpose().astype.transpose"], "methods", ["None"], ["", "def", "shear", "(", "self", ",", "\n", "out_shape", ",", "\n", "magnitude", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "border_value", "=", "0", ",", "\n", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "\"\"\"Shear the BitmapMasks.\n\n        Args:\n            out_shape (tuple[int]): Shape for output mask, format (h, w).\n            magnitude (int | float): The magnitude used for shear.\n            direction (str): The shear direction, either \"horizontal\"\n                or \"vertical\".\n            border_value (int | tuple[int]): Value used in case of a\n                constant border.\n            interpolation (str): Same as in :func:`mmcv.imshear`.\n\n        Returns:\n            BitmapMasks: The sheared masks.\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "sheared_masks", "=", "np", ".", "empty", "(", "(", "0", ",", "*", "out_shape", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "sheared_masks", "=", "mmcv", ".", "imshear", "(", "\n", "self", ".", "masks", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ",", "\n", "magnitude", ",", "\n", "direction", ",", "\n", "border_value", "=", "border_value", ",", "\n", "interpolation", "=", "interpolation", ")", "\n", "if", "sheared_masks", ".", "ndim", "==", "2", ":", "\n", "                ", "sheared_masks", "=", "sheared_masks", "[", ":", ",", ":", ",", "None", "]", "\n", "", "sheared_masks", "=", "sheared_masks", ".", "transpose", "(", "\n", "(", "2", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "self", ".", "masks", ".", "dtype", ")", "\n", "", "return", "BitmapMasks", "(", "sheared_masks", ",", "*", "out_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.rotate": [[457, 488], ["structures.BitmapMasks", "len", "numpy.empty", "mmcv.imrotate", "rotated_masks.transpose().astype.transpose().astype.transpose().astype", "structures.BitmapMasks.masks.transpose", "rotated_masks.transpose().astype.transpose().astype.transpose"], "methods", ["None"], ["", "def", "rotate", "(", "self", ",", "out_shape", ",", "angle", ",", "center", "=", "None", ",", "scale", "=", "1.0", ",", "fill_val", "=", "0", ")", ":", "\n", "        ", "\"\"\"Rotate the BitmapMasks.\n\n        Args:\n            out_shape (tuple[int]): Shape for output mask, format (h, w).\n            angle (int | float): Rotation angle in degrees. Positive values\n                mean counter-clockwise rotation.\n            center (tuple[float], optional): Center point (w, h) of the\n                rotation in source image. If not specified, the center of\n                the image will be used.\n            scale (int | float): Isotropic scale factor.\n            fill_val (int | float): Border value. Default 0 for masks.\n\n        Returns:\n            BitmapMasks: Rotated BitmapMasks.\n        \"\"\"", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "rotated_masks", "=", "np", ".", "empty", "(", "(", "0", ",", "*", "out_shape", ")", ",", "dtype", "=", "self", ".", "masks", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "rotated_masks", "=", "mmcv", ".", "imrotate", "(", "\n", "self", ".", "masks", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ",", "\n", "angle", ",", "\n", "center", "=", "center", ",", "\n", "scale", "=", "scale", ",", "\n", "border_value", "=", "fill_val", ")", "\n", "if", "rotated_masks", ".", "ndim", "==", "2", ":", "\n", "# case when only one mask, (h, w)", "\n", "                ", "rotated_masks", "=", "rotated_masks", "[", ":", ",", ":", ",", "None", "]", "# (h, w, 1)", "\n", "", "rotated_masks", "=", "rotated_masks", ".", "transpose", "(", "\n", "(", "2", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "self", ".", "masks", ".", "dtype", ")", "\n", "", "return", "BitmapMasks", "(", "rotated_masks", ",", "*", "out_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.areas": [[489, 493], ["structures.BitmapMasks.masks.sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "areas", "(", "self", ")", ":", "\n", "        ", "\"\"\"See :py:attr:`BaseInstanceMasks.areas`.\"\"\"", "\n", "return", "self", ".", "masks", ".", "sum", "(", "(", "1", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.to_ndarray": [[494, 497], ["None"], "methods", ["None"], ["", "def", "to_ndarray", "(", "self", ")", ":", "\n", "        ", "\"\"\"See :func:`BaseInstanceMasks.to_ndarray`.\"\"\"", "\n", "return", "self", ".", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.to_tensor": [[498, 501], ["torch.tensor"], "methods", ["None"], ["", "def", "to_tensor", "(", "self", ",", "dtype", ",", "device", ")", ":", "\n", "        ", "\"\"\"See :func:`BaseInstanceMasks.to_tensor`.\"\"\"", "\n", "return", "torch", ".", "tensor", "(", "self", ".", "masks", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.BitmapMasks.random": [[502, 522], ["ensure_rng", "cls", "ensure_rng.rand"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.util_random.ensure_rng"], ["", "@", "classmethod", "\n", "def", "random", "(", "cls", ",", "\n", "num_masks", "=", "3", ",", "\n", "height", "=", "32", ",", "\n", "width", "=", "32", ",", "\n", "dtype", "=", "np", ".", "uint8", ",", "\n", "rng", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate random bitmap masks for demo / testing purposes.\n\n        Example:\n            >>> from mmdet.core.mask.structures import BitmapMasks\n            >>> self = BitmapMasks.random()\n            >>> print('self = {}'.format(self))\n            self = BitmapMasks(num_masks=3, height=32, width=32)\n        \"\"\"", "\n", "from", "mmdet", ".", "utils", ".", "util_random", "import", "ensure_rng", "\n", "rng", "=", "ensure_rng", "(", "rng", ")", "\n", "masks", "=", "(", "rng", ".", "rand", "(", "num_masks", ",", "height", ",", "width", ")", ">", "0.1", ")", ".", "astype", "(", "dtype", ")", "\n", "self", "=", "cls", "(", "masks", ",", "height", "=", "height", ",", "width", "=", "width", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.__init__": [[564, 573], ["isinstance", "len", "isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "masks", ",", "height", ",", "width", ")", ":", "\n", "        ", "assert", "isinstance", "(", "masks", ",", "list", ")", "\n", "if", "len", "(", "masks", ")", ">", "0", ":", "\n", "            ", "assert", "isinstance", "(", "masks", "[", "0", "]", ",", "list", ")", "\n", "assert", "isinstance", "(", "masks", "[", "0", "]", "[", "0", "]", ",", "np", ".", "ndarray", ")", "\n", "\n", "", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "masks", "=", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.__getitem__": [[574, 596], ["isinstance", "isinstance", "structures.PolygonMasks", "index.tolist.tolist.tolist", "len", "isinstance", "ValueError", "type"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Index the polygon masks.\n\n        Args:\n            index (ndarray | List): The indices.\n\n        Returns:\n            :obj:`PolygonMasks`: The indexed polygon masks.\n        \"\"\"", "\n", "if", "isinstance", "(", "index", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "index", "=", "index", ".", "tolist", "(", ")", "\n", "", "if", "isinstance", "(", "index", ",", "list", ")", ":", "\n", "            ", "masks", "=", "[", "self", ".", "masks", "[", "i", "]", "for", "i", "in", "index", "]", "\n", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "masks", "=", "self", ".", "masks", "[", "index", "]", "\n", "", "except", "Exception", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f'Unsupported input of type {type(index)} for indexing!'", ")", "\n", "", "", "if", "len", "(", "masks", ")", "and", "isinstance", "(", "masks", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "masks", "=", "[", "masks", "]", "# ensure a list of three levels", "\n", "", "return", "PolygonMasks", "(", "masks", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.__iter__": [[597, 599], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.__repr__": [[600, 606], ["len"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "s", "+=", "f'num_masks={len(self.masks)}, '", "\n", "s", "+=", "f'height={self.height}, '", "\n", "s", "+=", "f'width={self.width})'", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.__len__": [[607, 610], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of masks.\"\"\"", "\n", "return", "len", "(", "self", ".", "masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.rescale": [[611, 619], ["mmcv.rescale_size", "len", "structures.PolygonMasks", "structures.PolygonMasks.resize"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.resize"], ["", "def", "rescale", "(", "self", ",", "scale", ",", "interpolation", "=", "None", ")", ":", "\n", "        ", "\"\"\"see :func:`BaseInstanceMasks.rescale`\"\"\"", "\n", "new_w", ",", "new_h", "=", "mmcv", ".", "rescale_size", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "scale", ")", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "rescaled_masks", "=", "PolygonMasks", "(", "[", "]", ",", "new_h", ",", "new_w", ")", "\n", "", "else", ":", "\n", "            ", "rescaled_masks", "=", "self", ".", "resize", "(", "(", "new_h", ",", "new_w", ")", ")", "\n", "", "return", "rescaled_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.resize": [[620, 638], ["len", "structures.PolygonMasks", "structures.PolygonMasks", "PolygonMasks.append", "p.copy.copy.copy", "resized_poly.append"], "methods", ["None"], ["", "def", "resize", "(", "self", ",", "out_shape", ",", "interpolation", "=", "None", ")", ":", "\n", "        ", "\"\"\"see :func:`BaseInstanceMasks.resize`\"\"\"", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "resized_masks", "=", "PolygonMasks", "(", "[", "]", ",", "*", "out_shape", ")", "\n", "", "else", ":", "\n", "            ", "h_scale", "=", "out_shape", "[", "0", "]", "/", "self", ".", "height", "\n", "w_scale", "=", "out_shape", "[", "1", "]", "/", "self", ".", "width", "\n", "resized_masks", "=", "[", "]", "\n", "for", "poly_per_obj", "in", "self", ".", "masks", ":", "\n", "                ", "resized_poly", "=", "[", "]", "\n", "for", "p", "in", "poly_per_obj", ":", "\n", "                    ", "p", "=", "p", ".", "copy", "(", ")", "\n", "p", "[", "0", ":", ":", "2", "]", "*=", "w_scale", "\n", "p", "[", "1", ":", ":", "2", "]", "*=", "h_scale", "\n", "resized_poly", ".", "append", "(", "p", ")", "\n", "", "resized_masks", ".", "append", "(", "resized_poly", ")", "\n", "", "resized_masks", "=", "PolygonMasks", "(", "resized_masks", ",", "*", "out_shape", ")", "\n", "", "return", "resized_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip": [[639, 662], ["len", "structures.PolygonMasks", "structures.PolygonMasks", "PolygonMasks.append", "p.copy.copy.copy", "flipped_poly_per_obj.append"], "methods", ["None"], ["", "def", "flip", "(", "self", ",", "flip_direction", "=", "'horizontal'", ")", ":", "\n", "        ", "\"\"\"see :func:`BaseInstanceMasks.flip`\"\"\"", "\n", "assert", "flip_direction", "in", "(", "'horizontal'", ",", "'vertical'", ",", "'diagonal'", ")", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "flipped_masks", "=", "PolygonMasks", "(", "[", "]", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "", "else", ":", "\n", "            ", "flipped_masks", "=", "[", "]", "\n", "for", "poly_per_obj", "in", "self", ".", "masks", ":", "\n", "                ", "flipped_poly_per_obj", "=", "[", "]", "\n", "for", "p", "in", "poly_per_obj", ":", "\n", "                    ", "p", "=", "p", ".", "copy", "(", ")", "\n", "if", "flip_direction", "==", "'horizontal'", ":", "\n", "                        ", "p", "[", "0", ":", ":", "2", "]", "=", "self", ".", "width", "-", "p", "[", "0", ":", ":", "2", "]", "\n", "", "elif", "flip_direction", "==", "'vertical'", ":", "\n", "                        ", "p", "[", "1", ":", ":", "2", "]", "=", "self", ".", "height", "-", "p", "[", "1", ":", ":", "2", "]", "\n", "", "else", ":", "\n", "                        ", "p", "[", "0", ":", ":", "2", "]", "=", "self", ".", "width", "-", "p", "[", "0", ":", ":", "2", "]", "\n", "p", "[", "1", ":", ":", "2", "]", "=", "self", ".", "height", "-", "p", "[", "1", ":", ":", "2", "]", "\n", "", "flipped_poly_per_obj", ".", "append", "(", "p", ")", "\n", "", "flipped_masks", ".", "append", "(", "flipped_poly_per_obj", ")", "\n", "", "flipped_masks", "=", "PolygonMasks", "(", "flipped_masks", ",", "self", ".", "height", ",", "\n", "self", ".", "width", ")", "\n", "", "return", "flipped_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop": [[663, 691], ["isinstance", "bbox.copy.copy.copy", "numpy.clip", "numpy.clip", "numpy.maximum", "numpy.maximum", "len", "structures.PolygonMasks", "structures.PolygonMasks", "PolygonMasks.append", "p.copy.copy.copy", "cropped_poly_per_obj.append"], "methods", ["None"], ["", "def", "crop", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "\"\"\"see :func:`BaseInstanceMasks.crop`\"\"\"", "\n", "assert", "isinstance", "(", "bbox", ",", "np", ".", "ndarray", ")", "\n", "assert", "bbox", ".", "ndim", "==", "1", "\n", "\n", "# clip the boundary", "\n", "bbox", "=", "bbox", ".", "copy", "(", ")", "\n", "bbox", "[", "0", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "bbox", "[", "0", ":", ":", "2", "]", ",", "0", ",", "self", ".", "width", ")", "\n", "bbox", "[", "1", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "bbox", "[", "1", ":", ":", "2", "]", ",", "0", ",", "self", ".", "height", ")", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", "\n", "w", "=", "np", ".", "maximum", "(", "x2", "-", "x1", ",", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "y2", "-", "y1", ",", "1", ")", "\n", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "cropped_masks", "=", "PolygonMasks", "(", "[", "]", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "            ", "cropped_masks", "=", "[", "]", "\n", "for", "poly_per_obj", "in", "self", ".", "masks", ":", "\n", "                ", "cropped_poly_per_obj", "=", "[", "]", "\n", "for", "p", "in", "poly_per_obj", ":", "\n", "# pycocotools will clip the boundary", "\n", "                    ", "p", "=", "p", ".", "copy", "(", ")", "\n", "p", "[", "0", ":", ":", "2", "]", "-=", "bbox", "[", "0", "]", "\n", "p", "[", "1", ":", ":", "2", "]", "-=", "bbox", "[", "1", "]", "\n", "cropped_poly_per_obj", ".", "append", "(", "p", ")", "\n", "", "cropped_masks", ".", "append", "(", "cropped_poly_per_obj", ")", "\n", "", "cropped_masks", "=", "PolygonMasks", "(", "cropped_masks", ",", "h", ",", "w", ")", "\n", "", "return", "cropped_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.pad": [[692, 695], ["structures.PolygonMasks"], "methods", ["None"], ["", "def", "pad", "(", "self", ",", "out_shape", ",", "pad_val", "=", "0", ")", ":", "\n", "        ", "\"\"\"padding has no effect on polygons`\"\"\"", "\n", "return", "PolygonMasks", "(", "self", ".", "masks", ",", "*", "out_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.expand": [[696, 699], ["None"], "methods", ["None"], ["", "def", "expand", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"TODO: Add expand for polygon\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop_and_resize": [[700, 735], ["range", "structures.PolygonMasks", "len", "structures.PolygonMasks", "len", "numpy.maximum", "numpy.maximum", "resized_masks.append", "max", "max", "p.copy.copy.copy", "resized_mask.append"], "methods", ["None"], ["", "def", "crop_and_resize", "(", "self", ",", "\n", "bboxes", ",", "\n", "out_shape", ",", "\n", "inds", ",", "\n", "device", "=", "'cpu'", ",", "\n", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "\"\"\"see :func:`BaseInstanceMasks.crop_and_resize`\"\"\"", "\n", "out_h", ",", "out_w", "=", "out_shape", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "return", "PolygonMasks", "(", "[", "]", ",", "out_h", ",", "out_w", ")", "\n", "\n", "", "resized_masks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "bboxes", ")", ")", ":", "\n", "            ", "mask", "=", "self", ".", "masks", "[", "inds", "[", "i", "]", "]", "\n", "bbox", "=", "bboxes", "[", "i", ",", ":", "]", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", "\n", "w", "=", "np", ".", "maximum", "(", "x2", "-", "x1", ",", "1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "y2", "-", "y1", ",", "1", ")", "\n", "h_scale", "=", "out_h", "/", "max", "(", "h", ",", "0.1", ")", "# avoid too large scale", "\n", "w_scale", "=", "out_w", "/", "max", "(", "w", ",", "0.1", ")", "\n", "\n", "resized_mask", "=", "[", "]", "\n", "for", "p", "in", "mask", ":", "\n", "                ", "p", "=", "p", ".", "copy", "(", ")", "\n", "# crop", "\n", "# pycocotools will clip the boundary", "\n", "p", "[", "0", ":", ":", "2", "]", "-=", "bbox", "[", "0", "]", "\n", "p", "[", "1", ":", ":", "2", "]", "-=", "bbox", "[", "1", "]", "\n", "\n", "# resize", "\n", "p", "[", "0", ":", ":", "2", "]", "*=", "w_scale", "\n", "p", "[", "1", ":", ":", "2", "]", "*=", "h_scale", "\n", "resized_mask", ".", "append", "(", "p", ")", "\n", "", "resized_masks", ".", "append", "(", "resized_mask", ")", "\n", "", "return", "PolygonMasks", "(", "resized_masks", ",", "*", "out_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.translate": [[736, 769], ["len", "structures.PolygonMasks", "structures.PolygonMasks", "PolygonMasks.append", "p.copy.copy.copy", "translated_poly_per_obj.append", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "def", "translate", "(", "self", ",", "\n", "out_shape", ",", "\n", "offset", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "fill_val", "=", "None", ",", "\n", "interpolation", "=", "None", ")", ":", "\n", "        ", "\"\"\"Translate the PolygonMasks.\n\n        Example:\n            >>> self = PolygonMasks.random(dtype=np.int)\n            >>> out_shape = (self.height, self.width)\n            >>> new = self.translate(out_shape, 4., direction='horizontal')\n            >>> assert np.all(new.masks[0][0][1::2] == self.masks[0][0][1::2])\n            >>> assert np.all(new.masks[0][0][0::2] == self.masks[0][0][0::2] + 4)  # noqa: E501\n        \"\"\"", "\n", "assert", "fill_val", "is", "None", "or", "fill_val", "==", "0", ",", "'Here fill_val is not '", "f'used, and defaultly should be None or 0. got {fill_val}.'", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "translated_masks", "=", "PolygonMasks", "(", "[", "]", ",", "*", "out_shape", ")", "\n", "", "else", ":", "\n", "            ", "translated_masks", "=", "[", "]", "\n", "for", "poly_per_obj", "in", "self", ".", "masks", ":", "\n", "                ", "translated_poly_per_obj", "=", "[", "]", "\n", "for", "p", "in", "poly_per_obj", ":", "\n", "                    ", "p", "=", "p", ".", "copy", "(", ")", "\n", "if", "direction", "==", "'horizontal'", ":", "\n", "                        ", "p", "[", "0", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "p", "[", "0", ":", ":", "2", "]", "+", "offset", ",", "0", ",", "out_shape", "[", "1", "]", ")", "\n", "", "elif", "direction", "==", "'vertical'", ":", "\n", "                        ", "p", "[", "1", ":", ":", "2", "]", "=", "np", ".", "clip", "(", "p", "[", "1", ":", ":", "2", "]", "+", "offset", ",", "0", ",", "out_shape", "[", "0", "]", ")", "\n", "", "translated_poly_per_obj", ".", "append", "(", "p", ")", "\n", "", "translated_masks", ".", "append", "(", "translated_poly_per_obj", ")", "\n", "", "translated_masks", "=", "PolygonMasks", "(", "translated_masks", ",", "*", "out_shape", ")", "\n", "", "return", "translated_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.shear": [[770, 801], ["len", "structures.PolygonMasks", "structures.PolygonMasks", "numpy.stack().astype", "PolygonMasks.append", "numpy.stack().astype", "numpy.stack", "numpy.matmul", "numpy.clip", "numpy.clip", "sheared_poly.append", "numpy.stack", "numpy.matmul.transpose().reshape", "numpy.stack", "numpy.matmul.transpose"], "methods", ["None"], ["", "def", "shear", "(", "self", ",", "\n", "out_shape", ",", "\n", "magnitude", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "border_value", "=", "0", ",", "\n", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "\"\"\"See :func:`BaseInstanceMasks.shear`.\"\"\"", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "sheared_masks", "=", "PolygonMasks", "(", "[", "]", ",", "*", "out_shape", ")", "\n", "", "else", ":", "\n", "            ", "sheared_masks", "=", "[", "]", "\n", "if", "direction", "==", "'horizontal'", ":", "\n", "                ", "shear_matrix", "=", "np", ".", "stack", "(", "[", "[", "1", ",", "magnitude", "]", ",", "\n", "[", "0", ",", "1", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "elif", "direction", "==", "'vertical'", ":", "\n", "                ", "shear_matrix", "=", "np", ".", "stack", "(", "[", "[", "1", ",", "0", "]", ",", "[", "magnitude", ",", "\n", "1", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "for", "poly_per_obj", "in", "self", ".", "masks", ":", "\n", "                ", "sheared_poly", "=", "[", "]", "\n", "for", "p", "in", "poly_per_obj", ":", "\n", "                    ", "p", "=", "np", ".", "stack", "(", "[", "p", "[", "0", ":", ":", "2", "]", ",", "p", "[", "1", ":", ":", "2", "]", "]", ",", "axis", "=", "0", ")", "# [2, n]", "\n", "new_coords", "=", "np", ".", "matmul", "(", "shear_matrix", ",", "p", ")", "# [2, n]", "\n", "new_coords", "[", "0", ",", ":", "]", "=", "np", ".", "clip", "(", "new_coords", "[", "0", ",", ":", "]", ",", "0", ",", "\n", "out_shape", "[", "1", "]", ")", "\n", "new_coords", "[", "1", ",", ":", "]", "=", "np", ".", "clip", "(", "new_coords", "[", "1", ",", ":", "]", ",", "0", ",", "\n", "out_shape", "[", "0", "]", ")", "\n", "sheared_poly", ".", "append", "(", "\n", "new_coords", ".", "transpose", "(", "(", "1", ",", "0", ")", ")", ".", "reshape", "(", "-", "1", ")", ")", "\n", "", "sheared_masks", ".", "append", "(", "sheared_poly", ")", "\n", "", "sheared_masks", "=", "PolygonMasks", "(", "sheared_masks", ",", "*", "out_shape", ")", "\n", "", "return", "sheared_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.rotate": [[802, 830], ["len", "structures.PolygonMasks", "cv2.getRotationMatrix2D", "structures.PolygonMasks", "PolygonMasks.append", "p.copy.copy.copy", "numpy.stack", "numpy.concatenate", "numpy.clip", "numpy.clip", "rotated_poly.append", "numpy.matmul", "rotated_coords.reshape", "numpy.ones"], "methods", ["None"], ["", "def", "rotate", "(", "self", ",", "out_shape", ",", "angle", ",", "center", "=", "None", ",", "scale", "=", "1.0", ",", "fill_val", "=", "0", ")", ":", "\n", "        ", "\"\"\"See :func:`BaseInstanceMasks.rotate`.\"\"\"", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "rotated_masks", "=", "PolygonMasks", "(", "[", "]", ",", "*", "out_shape", ")", "\n", "", "else", ":", "\n", "            ", "rotated_masks", "=", "[", "]", "\n", "rotate_matrix", "=", "cv2", ".", "getRotationMatrix2D", "(", "center", ",", "-", "angle", ",", "scale", ")", "\n", "for", "poly_per_obj", "in", "self", ".", "masks", ":", "\n", "                ", "rotated_poly", "=", "[", "]", "\n", "for", "p", "in", "poly_per_obj", ":", "\n", "                    ", "p", "=", "p", ".", "copy", "(", ")", "\n", "coords", "=", "np", ".", "stack", "(", "[", "p", "[", "0", ":", ":", "2", "]", ",", "p", "[", "1", ":", ":", "2", "]", "]", ",", "axis", "=", "1", ")", "# [n, 2]", "\n", "# pad 1 to convert from format [x, y] to homogeneous", "\n", "# coordinates format [x, y, 1]", "\n", "coords", "=", "np", ".", "concatenate", "(", "\n", "(", "coords", ",", "np", ".", "ones", "(", "(", "coords", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "coords", ".", "dtype", ")", ")", ",", "\n", "axis", "=", "1", ")", "# [n, 3]", "\n", "rotated_coords", "=", "np", ".", "matmul", "(", "\n", "rotate_matrix", "[", "None", ",", ":", ",", ":", "]", ",", "\n", "coords", "[", ":", ",", ":", ",", "None", "]", ")", "[", "...", ",", "0", "]", "# [n, 2, 1] -> [n, 2]", "\n", "rotated_coords", "[", ":", ",", "0", "]", "=", "np", ".", "clip", "(", "rotated_coords", "[", ":", ",", "0", "]", ",", "0", ",", "\n", "out_shape", "[", "1", "]", ")", "\n", "rotated_coords", "[", ":", ",", "1", "]", "=", "np", ".", "clip", "(", "rotated_coords", "[", ":", ",", "1", "]", ",", "0", ",", "\n", "out_shape", "[", "0", "]", ")", "\n", "rotated_poly", ".", "append", "(", "rotated_coords", ".", "reshape", "(", "-", "1", ")", ")", "\n", "", "rotated_masks", ".", "append", "(", "rotated_poly", ")", "\n", "", "rotated_masks", "=", "PolygonMasks", "(", "rotated_masks", ",", "*", "out_shape", ")", "\n", "", "return", "rotated_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_bitmap": [[831, 835], ["structures.PolygonMasks.to_ndarray", "structures.BitmapMasks"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "def", "to_bitmap", "(", "self", ")", ":", "\n", "        ", "\"\"\"convert polygon masks to bitmap masks.\"\"\"", "\n", "bitmap_masks", "=", "self", ".", "to_ndarray", "(", ")", "\n", "return", "BitmapMasks", "(", "bitmap_masks", ",", "self", ".", "height", ",", "self", ".", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.areas": [[836, 854], ["numpy.asarray", "area.append", "structures.PolygonMasks._polygon_area"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks._polygon_area"], ["", "@", "property", "\n", "def", "areas", "(", "self", ")", ":", "\n", "        ", "\"\"\"Compute areas of masks.\n\n        This func is modified from `detectron2\n        <https://github.com/facebookresearch/detectron2/blob/ffff8acc35ea88ad1cb1806ab0f00b4c1c5dbfd9/detectron2/structures/masks.py#L387>`_.\n        The function only works with Polygons using the shoelace formula.\n\n        Return:\n            ndarray: areas of each instance\n        \"\"\"", "# noqa: W501", "\n", "area", "=", "[", "]", "\n", "for", "polygons_per_obj", "in", "self", ".", "masks", ":", "\n", "            ", "area_per_obj", "=", "0", "\n", "for", "p", "in", "polygons_per_obj", ":", "\n", "                ", "area_per_obj", "+=", "self", ".", "_polygon_area", "(", "p", "[", "0", ":", ":", "2", "]", ",", "p", "[", "1", ":", ":", "2", "]", ")", "\n", "", "area", ".", "append", "(", "area_per_obj", ")", "\n", "", "return", "np", ".", "asarray", "(", "area", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks._polygon_area": [[855, 870], ["numpy.abs", "numpy.dot", "numpy.dot", "numpy.roll", "numpy.roll"], "methods", ["None"], ["", "def", "_polygon_area", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"Compute the area of a component of a polygon.\n\n        Using the shoelace formula:\n        https://stackoverflow.com/questions/24467972/calculate-area-of-polygon-given-x-y-coordinates\n\n        Args:\n            x (ndarray): x coordinates of the component\n            y (ndarray): y coordinates of the component\n\n        Return:\n            float: the are of the component\n        \"\"\"", "# noqa: 501", "\n", "return", "0.5", "*", "np", ".", "abs", "(", "\n", "np", ".", "dot", "(", "x", ",", "np", ".", "roll", "(", "y", ",", "1", ")", ")", "-", "np", ".", "dot", "(", "y", ",", "np", ".", "roll", "(", "x", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray": [[871, 880], ["numpy.stack", "len", "numpy.empty", "bitmap_masks.append", "structures.polygon_to_bitmap"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.polygon_to_bitmap"], ["", "def", "to_ndarray", "(", "self", ")", ":", "\n", "        ", "\"\"\"Convert masks to the format of ndarray.\"\"\"", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "return", "np", ".", "empty", "(", "(", "0", ",", "self", ".", "height", ",", "self", ".", "width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "bitmap_masks", "=", "[", "]", "\n", "for", "poly_per_obj", "in", "self", ".", "masks", ":", "\n", "            ", "bitmap_masks", ".", "append", "(", "\n", "polygon_to_bitmap", "(", "poly_per_obj", ",", "self", ".", "height", ",", "self", ".", "width", ")", ")", "\n", "", "return", "np", ".", "stack", "(", "bitmap_masks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_tensor": [[881, 889], ["structures.PolygonMasks.to_ndarray", "torch.tensor", "len", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.to_ndarray"], ["", "def", "to_tensor", "(", "self", ",", "dtype", ",", "device", ")", ":", "\n", "        ", "\"\"\"See :func:`BaseInstanceMasks.to_tensor`.\"\"\"", "\n", "if", "len", "(", "self", ".", "masks", ")", "==", "0", ":", "\n", "            ", "return", "torch", ".", "empty", "(", "(", "0", ",", "self", ".", "height", ",", "self", ".", "width", ")", ",", "\n", "dtype", "=", "dtype", ",", "\n", "device", "=", "device", ")", "\n", "", "ndarray_masks", "=", "self", ".", "to_ndarray", "(", ")", "\n", "return", "torch", ".", "tensor", "(", "ndarray_masks", ",", "dtype", "=", "dtype", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.random": [[890, 1008], ["ensure_rng", "range", "cls", "numpy.clip", "ensure_rng.uniform", "truncnorm", "truncnorm.rvs", "numpy.hstack", "numpy.hstack.min", "numpy.hstack.max", "angle.argsort", "verts.take.take.take", "structures.PolygonMasks.random._order_vertices"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.util_random.ensure_rng"], ["", "@", "classmethod", "\n", "def", "random", "(", "cls", ",", "\n", "num_masks", "=", "3", ",", "\n", "height", "=", "32", ",", "\n", "width", "=", "32", ",", "\n", "n_verts", "=", "5", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "\n", "rng", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate random polygon masks for demo / testing purposes.\n\n        Adapted from [1]_\n\n        References:\n            .. [1] https://gitlab.kitware.com/computer-vision/kwimage/-/blob/928cae35ca8/kwimage/structs/polygon.py#L379  # noqa: E501\n\n        Example:\n            >>> from mmdet.core.mask.structures import PolygonMasks\n            >>> self = PolygonMasks.random()\n            >>> print('self = {}'.format(self))\n        \"\"\"", "\n", "from", "mmdet", ".", "utils", ".", "util_random", "import", "ensure_rng", "\n", "rng", "=", "ensure_rng", "(", "rng", ")", "\n", "\n", "def", "_gen_polygon", "(", "n", ",", "irregularity", ",", "spikeyness", ")", ":", "\n", "            ", "\"\"\"Creates the polygon by sampling points on a circle around the\n            centre.  Random noise is added by varying the angular spacing\n            between sequential points, and by varying the radial distance of\n            each point from the centre.\n\n            Based on original code by Mike Ounsworth\n\n            Args:\n                n (int): number of vertices\n                irregularity (float): [0,1] indicating how much variance there\n                    is in the angular spacing of vertices. [0,1] will map to\n                    [0, 2pi/numberOfVerts]\n                spikeyness (float): [0,1] indicating how much variance there is\n                    in each vertex from the circle of radius aveRadius. [0,1]\n                    will map to [0, aveRadius]\n\n            Returns:\n                a list of vertices, in CCW order.\n            \"\"\"", "\n", "from", "scipy", ".", "stats", "import", "truncnorm", "\n", "# Generate around the unit circle", "\n", "cx", ",", "cy", "=", "(", "0.0", ",", "0.0", ")", "\n", "radius", "=", "1", "\n", "\n", "tau", "=", "np", ".", "pi", "*", "2", "\n", "\n", "irregularity", "=", "np", ".", "clip", "(", "irregularity", ",", "0", ",", "1", ")", "*", "2", "*", "np", ".", "pi", "/", "n", "\n", "spikeyness", "=", "np", ".", "clip", "(", "spikeyness", ",", "1e-9", ",", "1", ")", "\n", "\n", "# generate n angle steps", "\n", "lower", "=", "(", "tau", "/", "n", ")", "-", "irregularity", "\n", "upper", "=", "(", "tau", "/", "n", ")", "+", "irregularity", "\n", "angle_steps", "=", "rng", ".", "uniform", "(", "lower", ",", "upper", ",", "n", ")", "\n", "\n", "# normalize the steps so that point 0 and point n+1 are the same", "\n", "k", "=", "angle_steps", ".", "sum", "(", ")", "/", "(", "2", "*", "np", ".", "pi", ")", "\n", "angles", "=", "(", "angle_steps", "/", "k", ")", ".", "cumsum", "(", ")", "+", "rng", ".", "uniform", "(", "0", ",", "tau", ")", "\n", "\n", "# Convert high and low values to be wrt the standard normal range", "\n", "# https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.truncnorm.html", "\n", "low", "=", "0", "\n", "high", "=", "2", "*", "radius", "\n", "mean", "=", "radius", "\n", "std", "=", "spikeyness", "\n", "a", "=", "(", "low", "-", "mean", ")", "/", "std", "\n", "b", "=", "(", "high", "-", "mean", ")", "/", "std", "\n", "tnorm", "=", "truncnorm", "(", "a", "=", "a", ",", "b", "=", "b", ",", "loc", "=", "mean", ",", "scale", "=", "std", ")", "\n", "\n", "# now generate the points", "\n", "radii", "=", "tnorm", ".", "rvs", "(", "n", ",", "random_state", "=", "rng", ")", "\n", "x_pts", "=", "cx", "+", "radii", "*", "np", ".", "cos", "(", "angles", ")", "\n", "y_pts", "=", "cy", "+", "radii", "*", "np", ".", "sin", "(", "angles", ")", "\n", "\n", "points", "=", "np", ".", "hstack", "(", "[", "x_pts", "[", ":", ",", "None", "]", ",", "y_pts", "[", ":", ",", "None", "]", "]", ")", "\n", "\n", "# Scale to 0-1 space", "\n", "points", "=", "points", "-", "points", ".", "min", "(", "axis", "=", "0", ")", "\n", "points", "=", "points", "/", "points", ".", "max", "(", "axis", "=", "0", ")", "\n", "\n", "# Randomly place within 0-1 space", "\n", "points", "=", "points", "*", "(", "rng", ".", "rand", "(", ")", "*", ".8", "+", ".2", ")", "\n", "min_pt", "=", "points", ".", "min", "(", "axis", "=", "0", ")", "\n", "max_pt", "=", "points", ".", "max", "(", "axis", "=", "0", ")", "\n", "\n", "high", "=", "(", "1", "-", "max_pt", ")", "\n", "low", "=", "(", "0", "-", "min_pt", ")", "\n", "offset", "=", "(", "rng", ".", "rand", "(", "2", ")", "*", "(", "high", "-", "low", ")", ")", "+", "low", "\n", "points", "=", "points", "+", "offset", "\n", "return", "points", "\n", "\n", "", "def", "_order_vertices", "(", "verts", ")", ":", "\n", "            ", "\"\"\"\n            References:\n                https://stackoverflow.com/questions/1709283/how-can-i-sort-a-coordinate-list-for-a-rectangle-counterclockwise\n            \"\"\"", "\n", "mlat", "=", "verts", ".", "T", "[", "0", "]", ".", "sum", "(", ")", "/", "len", "(", "verts", ")", "\n", "mlng", "=", "verts", ".", "T", "[", "1", "]", ".", "sum", "(", ")", "/", "len", "(", "verts", ")", "\n", "\n", "tau", "=", "np", ".", "pi", "*", "2", "\n", "angle", "=", "(", "np", ".", "arctan2", "(", "mlat", "-", "verts", ".", "T", "[", "0", "]", ",", "verts", ".", "T", "[", "1", "]", "-", "mlng", ")", "+", "\n", "tau", ")", "%", "tau", "\n", "sortx", "=", "angle", ".", "argsort", "(", ")", "\n", "verts", "=", "verts", ".", "take", "(", "sortx", ",", "axis", "=", "0", ")", "\n", "return", "verts", "\n", "\n", "# Generate a random exterior for each requested mask", "\n", "", "masks", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_masks", ")", ":", "\n", "            ", "exterior", "=", "_order_vertices", "(", "_gen_polygon", "(", "n_verts", ",", "0.9", ",", "0.9", ")", ")", "\n", "exterior", "=", "(", "exterior", "*", "[", "(", "width", ",", "height", ")", "]", ")", ".", "astype", "(", "dtype", ")", "\n", "masks", ".", "append", "(", "[", "exterior", ".", "ravel", "(", ")", "]", ")", "\n", "\n", "", "self", "=", "cls", "(", "masks", ",", "height", ",", "width", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.polygon_to_bitmap": [[1010, 1025], ["pycocotools.frPyObjects", "pycocotools.merge", "pycocotools.decode().astype", "pycocotools.decode"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode"], ["", "", "def", "polygon_to_bitmap", "(", "polygons", ",", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"Convert masks from the form of polygons to bitmaps.\n\n    Args:\n        polygons (list[ndarray]): masks in polygon representation\n        height (int): mask height\n        width (int): mask width\n\n    Return:\n        ndarray: the converted masks in bitmap representation\n    \"\"\"", "\n", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "polygons", ",", "height", ",", "width", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "bitmap_mask", "=", "maskUtils", ".", "decode", "(", "rle", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "return", "bitmap_mask", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.utils.split_combined_polys": [[6, 33], ["range", "len", "poly_lens[].tolist", "polys_per_mask[].tolist", "mmcv.slice_list", "mmcv.slice_list", "mask_polys_list.append"], "function", ["None"], ["import", "onnxruntime", "as", "ort", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "ort_custom_op_path", "=", "''", "\n", "try", ":", "\n", "    ", "from", "mmcv", ".", "ops", "import", "get_onnxruntime_op_path", "\n", "ort_custom_op_path", "=", "get_onnxruntime_op_path", "(", ")", "\n", "", "except", "(", "ImportError", ",", "ModuleNotFoundError", ")", ":", "\n", "    ", "warnings", ".", "warn", "(", "'If input model has custom op from mmcv, \\\n        you may have to build mmcv with ONNXRuntime from source.'", ")", "\n", "\n", "\n", "", "class", "WrapFunction", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Wrap the function to be tested for torch.onnx.export tracking.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "wrapped_function", ")", ":", "\n", "        ", "super", "(", "WrapFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "wrapped_function", "=", "wrapped_function", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "wrapped_function", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "", "def", "ort_validate", "(", "model", ",", "feats", ",", "onnx_io", "=", "'tmp.onnx'", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.utils.encode_mask_results": [[36, 64], ["isinstance", "len", "range", "isinstance", "len", "range", "encoded_mask_results[].append", "pycocotools.encode", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.encode"], ["\n", "model", ".", "cpu", "(", ")", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "torch", ".", "onnx", ".", "export", "(", "\n", "model", ",", "\n", "feats", ",", "\n", "onnx_io", ",", "\n", "export_params", "=", "True", ",", "\n", "keep_initializers_as_inputs", "=", "True", ",", "\n", "do_constant_folding", "=", "True", ",", "\n", "verbose", "=", "False", ",", "\n", "opset_version", "=", "11", ")", "\n", "\n", "", "onnx_outputs", "=", "verify_model", "(", "feats", ")", "\n", "\n", "torch_outputs", "=", "convert_result_list", "(", "model", ".", "forward", "(", "feats", ")", ")", "\n", "torch_outputs", "=", "[", "\n", "torch_output", ".", "detach", "(", ")", ".", "numpy", "(", ")", "for", "torch_output", "in", "torch_outputs", "\n", "]", "\n", "\n", "# match torch_outputs and onnx_outputs", "\n", "for", "i", "in", "range", "(", "len", "(", "onnx_outputs", ")", ")", ":", "\n", "        ", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "torch_outputs", "[", "i", "]", ",", "onnx_outputs", "[", "i", "]", ",", "rtol", "=", "1e-03", ",", "atol", "=", "1e-05", ")", "\n", "\n", "\n", "", "", "def", "verify_model", "(", "feat", ",", "onnx_io", "=", "'tmp.onnx'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.__init__": [[58, 111], ["torch.Tensor", "anchor_generator.AnchorGenerator.gen_base_anchors", "ValueError", "torch.nn.modules.utils._pair", "len", "len", "torch.Tensor", "len", "len", "min", "numpy.array", "torch.Tensor", "ValueError", "range"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.gen_base_anchors"], ["def", "__init__", "(", "self", ",", "\n", "strides", ",", "\n", "ratios", ",", "\n", "scales", "=", "None", ",", "\n", "base_sizes", "=", "None", ",", "\n", "scale_major", "=", "True", ",", "\n", "octave_base_scale", "=", "None", ",", "\n", "scales_per_octave", "=", "None", ",", "\n", "centers", "=", "None", ",", "\n", "center_offset", "=", "0.", ")", ":", "\n", "# check center and center_offset", "\n", "        ", "if", "center_offset", "!=", "0", ":", "\n", "            ", "assert", "centers", "is", "None", ",", "'center cannot be set when center_offset'", "f'!=0, {centers} is given.'", "\n", "", "if", "not", "(", "0", "<=", "center_offset", "<=", "1", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'center_offset should be in range [0, 1], '", "\n", "f'{center_offset} is given.'", ")", "\n", "", "if", "centers", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "centers", ")", "==", "len", "(", "strides", ")", ",", "'The number of strides should be the same as centers, got '", "f'{strides} and {centers}'", "\n", "\n", "# calculate base sizes of anchors", "\n", "", "self", ".", "strides", "=", "[", "_pair", "(", "stride", ")", "for", "stride", "in", "strides", "]", "\n", "self", ".", "base_sizes", "=", "[", "min", "(", "stride", ")", "for", "stride", "in", "self", ".", "strides", "\n", "]", "if", "base_sizes", "is", "None", "else", "base_sizes", "\n", "assert", "len", "(", "self", ".", "base_sizes", ")", "==", "len", "(", "self", ".", "strides", ")", ",", "'The number of strides should be the same as base sizes, got '", "f'{self.strides} and {self.base_sizes}'", "\n", "\n", "# calculate scales of anchors", "\n", "assert", "(", "(", "octave_base_scale", "is", "not", "None", "\n", "and", "scales_per_octave", "is", "not", "None", ")", "^", "(", "scales", "is", "not", "None", ")", ")", ",", "'scales and octave_base_scale with scales_per_octave cannot'", "' be set at the same time'", "\n", "if", "scales", "is", "not", "None", ":", "\n", "            ", "self", ".", "scales", "=", "torch", ".", "Tensor", "(", "scales", ")", "\n", "", "elif", "octave_base_scale", "is", "not", "None", "and", "scales_per_octave", "is", "not", "None", ":", "\n", "            ", "octave_scales", "=", "np", ".", "array", "(", "\n", "[", "2", "**", "(", "i", "/", "scales_per_octave", ")", "for", "i", "in", "range", "(", "scales_per_octave", ")", "]", ")", "\n", "scales", "=", "octave_scales", "*", "octave_base_scale", "\n", "self", ".", "scales", "=", "torch", ".", "Tensor", "(", "scales", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Either scales or octave_base_scale with '", "\n", "'scales_per_octave should be set'", ")", "\n", "\n", "", "self", ".", "octave_base_scale", "=", "octave_base_scale", "\n", "self", ".", "scales_per_octave", "=", "scales_per_octave", "\n", "self", ".", "ratios", "=", "torch", ".", "Tensor", "(", "ratios", ")", "\n", "self", ".", "scale_major", "=", "scale_major", "\n", "self", ".", "centers", "=", "centers", "\n", "self", ".", "center_offset", "=", "center_offset", "\n", "self", ".", "base_anchors", "=", "self", ".", "gen_base_anchors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.num_base_anchors": [[112, 116], ["base_anchors.size"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_base_anchors", "(", "self", ")", ":", "\n", "        ", "\"\"\"list[int]: total number of base anchors in a feature grid\"\"\"", "\n", "return", "[", "base_anchors", ".", "size", "(", "0", ")", "for", "base_anchors", "in", "self", ".", "base_anchors", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.num_levels": [[117, 121], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_levels", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: number of feature levels that the generator will be applied\"\"\"", "\n", "return", "len", "(", "self", ".", "strides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.gen_base_anchors": [[122, 141], ["enumerate", "multi_level_base_anchors.append", "anchor_generator.AnchorGenerator.gen_single_level_base_anchors"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.gen_single_level_base_anchors"], ["", "def", "gen_base_anchors", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate base anchors.\n\n        Returns:\n            list(torch.Tensor): Base anchors of a feature grid in multiple \\\n                feature levels.\n        \"\"\"", "\n", "multi_level_base_anchors", "=", "[", "]", "\n", "for", "i", ",", "base_size", "in", "enumerate", "(", "self", ".", "base_sizes", ")", ":", "\n", "            ", "center", "=", "None", "\n", "if", "self", ".", "centers", "is", "not", "None", ":", "\n", "                ", "center", "=", "self", ".", "centers", "[", "i", "]", "\n", "", "multi_level_base_anchors", ".", "append", "(", "\n", "self", ".", "gen_single_level_base_anchors", "(", "\n", "base_size", ",", "\n", "scales", "=", "self", ".", "scales", ",", "\n", "ratios", "=", "self", ".", "ratios", ",", "\n", "center", "=", "center", ")", ")", "\n", "", "return", "multi_level_base_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.gen_single_level_base_anchors": [[142, 186], ["torch.sqrt", "torch.stack"], "methods", ["None"], ["", "def", "gen_single_level_base_anchors", "(", "self", ",", "\n", "base_size", ",", "\n", "scales", ",", "\n", "ratios", ",", "\n", "center", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate base anchors of a single level.\n\n        Args:\n            base_size (int | float): Basic size of an anchor.\n            scales (torch.Tensor): Scales of the anchor.\n            ratios (torch.Tensor): The ratio between between the height\n                and width of anchors in a single level.\n            center (tuple[float], optional): The center of the base anchor\n                related to a single feature grid. Defaults to None.\n\n        Returns:\n            torch.Tensor: Anchors in a single-level feature maps.\n        \"\"\"", "\n", "w", "=", "base_size", "\n", "h", "=", "base_size", "\n", "if", "center", "is", "None", ":", "\n", "            ", "x_center", "=", "self", ".", "center_offset", "*", "w", "\n", "y_center", "=", "self", ".", "center_offset", "*", "h", "\n", "", "else", ":", "\n", "            ", "x_center", ",", "y_center", "=", "center", "\n", "\n", "", "h_ratios", "=", "torch", ".", "sqrt", "(", "ratios", ")", "\n", "w_ratios", "=", "1", "/", "h_ratios", "\n", "if", "self", ".", "scale_major", ":", "\n", "            ", "ws", "=", "(", "w", "*", "w_ratios", "[", ":", ",", "None", "]", "*", "scales", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "hs", "=", "(", "h", "*", "h_ratios", "[", ":", ",", "None", "]", "*", "scales", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "ws", "=", "(", "w", "*", "scales", "[", ":", ",", "None", "]", "*", "w_ratios", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "hs", "=", "(", "h", "*", "scales", "[", ":", ",", "None", "]", "*", "h_ratios", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# use float anchor and the anchor's center is aligned with the", "\n", "# pixel center", "\n", "", "base_anchors", "=", "[", "\n", "x_center", "-", "0.5", "*", "ws", ",", "y_center", "-", "0.5", "*", "hs", ",", "x_center", "+", "0.5", "*", "ws", ",", "\n", "y_center", "+", "0.5", "*", "hs", "\n", "]", "\n", "base_anchors", "=", "torch", ".", "stack", "(", "base_anchors", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "base_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator._meshgrid": [[187, 206], ["x.repeat", "y.view().repeat().view", "y.view().repeat", "y.view"], "methods", ["None"], ["", "def", "_meshgrid", "(", "self", ",", "x", ",", "y", ",", "row_major", "=", "True", ")", ":", "\n", "        ", "\"\"\"Generate mesh grid of x and y.\n\n        Args:\n            x (torch.Tensor): Grids of x dimension.\n            y (torch.Tensor): Grids of y dimension.\n            row_major (bool, optional): Whether to return y grids first.\n                Defaults to True.\n\n        Returns:\n            tuple[torch.Tensor]: The mesh grids of x and y.\n        \"\"\"", "\n", "# use shape instead of len to keep tracing while exporting to onnx", "\n", "xx", "=", "x", ".", "repeat", "(", "y", ".", "shape", "[", "0", "]", ")", "\n", "yy", "=", "y", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "x", ".", "shape", "[", "0", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "row_major", ":", "\n", "            ", "return", "xx", ",", "yy", "\n", "", "else", ":", "\n", "            ", "return", "yy", ",", "xx", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.grid_anchors": [[207, 232], ["range", "len", "anchor_generator.AnchorGenerator.single_level_grid_anchors", "multi_level_anchors.append", "anchor_generator.AnchorGenerator.base_anchors[].to"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.single_level_grid_anchors", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to"], ["", "", "def", "grid_anchors", "(", "self", ",", "featmap_sizes", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "\"\"\"Generate grid anchors in multiple feature levels.\n\n        Args:\n            featmap_sizes (list[tuple]): List of feature map sizes in\n                multiple feature levels.\n            device (str): Device where the anchors will be put on.\n\n        Return:\n            list[torch.Tensor]: Anchors in multiple feature levels. \\\n                The sizes of each tensor should be [N, 4], where \\\n                N = width * height * num_base_anchors, width and height \\\n                are the sizes of the corresponding feature level, \\\n                num_base_anchors is the number of anchors for that level.\n        \"\"\"", "\n", "assert", "self", ".", "num_levels", "==", "len", "(", "featmap_sizes", ")", "\n", "multi_level_anchors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "anchors", "=", "self", ".", "single_level_grid_anchors", "(", "\n", "self", ".", "base_anchors", "[", "i", "]", ".", "to", "(", "device", ")", ",", "\n", "featmap_sizes", "[", "i", "]", ",", "\n", "self", ".", "strides", "[", "i", "]", ",", "\n", "device", "=", "device", ")", "\n", "multi_level_anchors", ".", "append", "(", "anchors", ")", "\n", "", "return", "multi_level_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.single_level_grid_anchors": [[233, 271], ["anchor_generator.AnchorGenerator._meshgrid", "torch.stack", "shifts.type_as.type_as.type_as", "all_anchors.view.view.view", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.point_generator.PointGenerator._meshgrid"], ["", "def", "single_level_grid_anchors", "(", "self", ",", "\n", "base_anchors", ",", "\n", "featmap_size", ",", "\n", "stride", "=", "(", "16", ",", "16", ")", ",", "\n", "device", "=", "'cuda'", ")", ":", "\n", "        ", "\"\"\"Generate grid anchors of a single level.\n\n        Note:\n            This function is usually called by method ``self.grid_anchors``.\n\n        Args:\n            base_anchors (torch.Tensor): The base anchors of a feature grid.\n            featmap_size (tuple[int]): Size of the feature maps.\n            stride (tuple[int], optional): Stride of the feature map in order\n                (w, h). Defaults to (16, 16).\n            device (str, optional): Device the tensor will be put on.\n                Defaults to 'cuda'.\n\n        Returns:\n            torch.Tensor: Anchors in the overall feature maps.\n        \"\"\"", "\n", "# keep as Tensor, so that we can covert to ONNX correctly", "\n", "feat_h", ",", "feat_w", "=", "featmap_size", "\n", "shift_x", "=", "torch", ".", "arange", "(", "0", ",", "feat_w", ",", "device", "=", "device", ")", "*", "stride", "[", "0", "]", "\n", "shift_y", "=", "torch", ".", "arange", "(", "0", ",", "feat_h", ",", "device", "=", "device", ")", "*", "stride", "[", "1", "]", "\n", "\n", "shift_xx", ",", "shift_yy", "=", "self", ".", "_meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "shifts", "=", "torch", ".", "stack", "(", "[", "shift_xx", ",", "shift_yy", ",", "shift_xx", ",", "shift_yy", "]", ",", "dim", "=", "-", "1", ")", "\n", "shifts", "=", "shifts", ".", "type_as", "(", "base_anchors", ")", "\n", "# first feat_w elements correspond to the first row of shifts", "\n", "# add A anchors (1, A, 4) to K shifts (K, 1, 4) to get", "\n", "# shifted anchors (K, A, 4), reshape to (K*A, 4)", "\n", "\n", "all_anchors", "=", "base_anchors", "[", "None", ",", ":", ",", ":", "]", "+", "shifts", "[", ":", ",", "None", ",", ":", "]", "\n", "all_anchors", "=", "all_anchors", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "# first A rows correspond to A anchors of (0, 0) in feature map,", "\n", "# then (0, 1), (0, 2), ...", "\n", "return", "all_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.valid_flags": [[272, 298], ["range", "len", "min", "min", "anchor_generator.AnchorGenerator.single_level_valid_flags", "multi_level_flags.append", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.single_level_valid_flags"], ["", "def", "valid_flags", "(", "self", ",", "featmap_sizes", ",", "pad_shape", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "\"\"\"Generate valid flags of anchors in multiple feature levels.\n\n        Args:\n            featmap_sizes (list(tuple)): List of feature map sizes in\n                multiple feature levels.\n            pad_shape (tuple): The padded shape of the image.\n            device (str): Device where the anchors will be put on.\n\n        Return:\n            list(torch.Tensor): Valid flags of anchors in multiple levels.\n        \"\"\"", "\n", "assert", "self", ".", "num_levels", "==", "len", "(", "featmap_sizes", ")", "\n", "multi_level_flags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "anchor_stride", "=", "self", ".", "strides", "[", "i", "]", "\n", "feat_h", ",", "feat_w", "=", "featmap_sizes", "[", "i", "]", "\n", "h", ",", "w", "=", "pad_shape", "[", ":", "2", "]", "\n", "valid_feat_h", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "h", "/", "anchor_stride", "[", "1", "]", ")", ")", ",", "feat_h", ")", "\n", "valid_feat_w", "=", "min", "(", "int", "(", "np", ".", "ceil", "(", "w", "/", "anchor_stride", "[", "0", "]", ")", ")", ",", "feat_w", ")", "\n", "flags", "=", "self", ".", "single_level_valid_flags", "(", "(", "feat_h", ",", "feat_w", ")", ",", "\n", "(", "valid_feat_h", ",", "valid_feat_w", ")", ",", "\n", "self", ".", "num_base_anchors", "[", "i", "]", ",", "\n", "device", "=", "device", ")", "\n", "multi_level_flags", ".", "append", "(", "flags", ")", "\n", "", "return", "multi_level_flags", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.single_level_valid_flags": [[299, 329], ["torch.zeros", "torch.zeros", "anchor_generator.AnchorGenerator._meshgrid", "valid[].expand().contiguous().view", "valid[].expand().contiguous", "valid[].expand", "valid[].expand().contiguous().view.size"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.point_generator.PointGenerator._meshgrid", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.expand"], ["", "def", "single_level_valid_flags", "(", "self", ",", "\n", "featmap_size", ",", "\n", "valid_size", ",", "\n", "num_base_anchors", ",", "\n", "device", "=", "'cuda'", ")", ":", "\n", "        ", "\"\"\"Generate the valid flags of anchor in a single feature map.\n\n        Args:\n            featmap_size (tuple[int]): The size of feature maps.\n            valid_size (tuple[int]): The valid size of the feature maps.\n            num_base_anchors (int): The number of base anchors.\n            device (str, optional): Device where the flags will be put on.\n                Defaults to 'cuda'.\n\n        Returns:\n            torch.Tensor: The valid flags of each anchor in a single level \\\n                feature map.\n        \"\"\"", "\n", "feat_h", ",", "feat_w", "=", "featmap_size", "\n", "valid_h", ",", "valid_w", "=", "valid_size", "\n", "assert", "valid_h", "<=", "feat_h", "and", "valid_w", "<=", "feat_w", "\n", "valid_x", "=", "torch", ".", "zeros", "(", "feat_w", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "\n", "valid_y", "=", "torch", ".", "zeros", "(", "feat_h", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "\n", "valid_x", "[", ":", "valid_w", "]", "=", "1", "\n", "valid_y", "[", ":", "valid_h", "]", "=", "1", "\n", "valid_xx", ",", "valid_yy", "=", "self", ".", "_meshgrid", "(", "valid_x", ",", "valid_y", ")", "\n", "valid", "=", "valid_xx", "&", "valid_yy", "\n", "valid", "=", "valid", "[", ":", ",", "None", "]", ".", "expand", "(", "valid", ".", "size", "(", "0", ")", ",", "\n", "num_base_anchors", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "valid", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.AnchorGenerator.__repr__": [[330, 347], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"str: a string that describes the module\"\"\"", "\n", "indent_str", "=", "'    '", "\n", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "+", "'(\\n'", "\n", "repr_str", "+=", "f'{indent_str}strides={self.strides},\\n'", "\n", "repr_str", "+=", "f'{indent_str}ratios={self.ratios},\\n'", "\n", "repr_str", "+=", "f'{indent_str}scales={self.scales},\\n'", "\n", "repr_str", "+=", "f'{indent_str}base_sizes={self.base_sizes},\\n'", "\n", "repr_str", "+=", "f'{indent_str}scale_major={self.scale_major},\\n'", "\n", "repr_str", "+=", "f'{indent_str}octave_base_scale='", "\n", "repr_str", "+=", "f'{self.octave_base_scale},\\n'", "\n", "repr_str", "+=", "f'{indent_str}scales_per_octave='", "\n", "repr_str", "+=", "f'{self.scales_per_octave},\\n'", "\n", "repr_str", "+=", "f'{indent_str}num_levels={self.num_levels}\\n'", "\n", "repr_str", "+=", "f'{indent_str}centers={self.centers},\\n'", "\n", "repr_str", "+=", "f'{indent_str}center_offset={self.center_offset})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.SSDAnchorGenerator.__init__": [[366, 434], ["mmcv.is_tuple_of", "int", "int", "int", "range", "range", "anchor_generator.SSDAnchorGenerator.gen_base_anchors", "len", "len", "torch.nn.modules.utils._pair", "int", "min_sizes.append", "max_sizes.append", "len", "anchor_ratios.append", "anchor_scales.append", "numpy.floor", "int", "int", "int", "min_sizes.insert", "max_sizes.insert", "ValueError", "numpy.sqrt", "torch.Tensor", "torch.Tensor", "int", "int", "min_sizes.insert", "max_sizes.insert", "ValueError", "min_sizes.insert", "max_sizes.insert", "int", "int", "int", "int", "min_sizes.insert", "max_sizes.insert", "ValueError", "int", "int"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.gen_base_anchors"], ["def", "__init__", "(", "self", ",", "\n", "strides", ",", "\n", "ratios", ",", "\n", "basesize_ratio_range", ",", "\n", "input_size", "=", "300", ",", "\n", "scale_major", "=", "True", ")", ":", "\n", "        ", "assert", "len", "(", "strides", ")", "==", "len", "(", "ratios", ")", "\n", "assert", "mmcv", ".", "is_tuple_of", "(", "basesize_ratio_range", ",", "float", ")", "\n", "\n", "self", ".", "strides", "=", "[", "_pair", "(", "stride", ")", "for", "stride", "in", "strides", "]", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "centers", "=", "[", "(", "stride", "[", "0", "]", "/", "2.", ",", "stride", "[", "1", "]", "/", "2.", ")", "\n", "for", "stride", "in", "self", ".", "strides", "]", "\n", "self", ".", "basesize_ratio_range", "=", "basesize_ratio_range", "\n", "\n", "# calculate anchor ratios and sizes", "\n", "min_ratio", ",", "max_ratio", "=", "basesize_ratio_range", "\n", "min_ratio", "=", "int", "(", "min_ratio", "*", "100", ")", "\n", "max_ratio", "=", "int", "(", "max_ratio", "*", "100", ")", "\n", "step", "=", "int", "(", "np", ".", "floor", "(", "max_ratio", "-", "min_ratio", ")", "/", "(", "self", ".", "num_levels", "-", "2", ")", ")", "\n", "min_sizes", "=", "[", "]", "\n", "max_sizes", "=", "[", "]", "\n", "for", "ratio", "in", "range", "(", "int", "(", "min_ratio", ")", ",", "int", "(", "max_ratio", ")", "+", "1", ",", "step", ")", ":", "\n", "            ", "min_sizes", ".", "append", "(", "int", "(", "self", ".", "input_size", "*", "ratio", "/", "100", ")", ")", "\n", "max_sizes", ".", "append", "(", "int", "(", "self", ".", "input_size", "*", "(", "ratio", "+", "step", ")", "/", "100", ")", ")", "\n", "", "if", "self", ".", "input_size", "==", "300", ":", "\n", "            ", "if", "basesize_ratio_range", "[", "0", "]", "==", "0.15", ":", "# SSD300 COCO", "\n", "                ", "min_sizes", ".", "insert", "(", "0", ",", "int", "(", "self", ".", "input_size", "*", "7", "/", "100", ")", ")", "\n", "max_sizes", ".", "insert", "(", "0", ",", "int", "(", "self", ".", "input_size", "*", "15", "/", "100", ")", ")", "\n", "", "elif", "basesize_ratio_range", "[", "0", "]", "==", "0.2", ":", "# SSD300 VOC", "\n", "                ", "min_sizes", ".", "insert", "(", "0", ",", "int", "(", "self", ".", "input_size", "*", "10", "/", "100", ")", ")", "\n", "max_sizes", ".", "insert", "(", "0", ",", "int", "(", "self", ".", "input_size", "*", "20", "/", "100", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'basesize_ratio_range[0] should be either 0.15'", "\n", "'or 0.2 when input_size is 300, got '", "\n", "f'{basesize_ratio_range[0]}.'", ")", "\n", "", "", "elif", "self", ".", "input_size", "==", "512", ":", "\n", "            ", "if", "basesize_ratio_range", "[", "0", "]", "==", "0.1", ":", "# SSD512 COCO", "\n", "                ", "min_sizes", ".", "insert", "(", "0", ",", "int", "(", "self", ".", "input_size", "*", "4", "/", "100", ")", ")", "\n", "max_sizes", ".", "insert", "(", "0", ",", "int", "(", "self", ".", "input_size", "*", "10", "/", "100", ")", ")", "\n", "", "elif", "basesize_ratio_range", "[", "0", "]", "==", "0.15", ":", "# SSD512 VOC", "\n", "                ", "min_sizes", ".", "insert", "(", "0", ",", "int", "(", "self", ".", "input_size", "*", "7", "/", "100", ")", ")", "\n", "max_sizes", ".", "insert", "(", "0", ",", "int", "(", "self", ".", "input_size", "*", "15", "/", "100", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'basesize_ratio_range[0] should be either 0.1'", "\n", "'or 0.15 when input_size is 512, got'", "\n", "f' {basesize_ratio_range[0]}.'", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Only support 300 or 512 in SSDAnchorGenerator'", "\n", "f', got {self.input_size}.'", ")", "\n", "\n", "", "anchor_ratios", "=", "[", "]", "\n", "anchor_scales", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "self", ".", "strides", ")", ")", ":", "\n", "            ", "scales", "=", "[", "1.", ",", "np", ".", "sqrt", "(", "max_sizes", "[", "k", "]", "/", "min_sizes", "[", "k", "]", ")", "]", "\n", "anchor_ratio", "=", "[", "1.", "]", "\n", "for", "r", "in", "ratios", "[", "k", "]", ":", "\n", "                ", "anchor_ratio", "+=", "[", "1", "/", "r", ",", "r", "]", "# 4 or 6 ratio", "\n", "", "anchor_ratios", ".", "append", "(", "torch", ".", "Tensor", "(", "anchor_ratio", ")", ")", "\n", "anchor_scales", ".", "append", "(", "torch", ".", "Tensor", "(", "scales", ")", ")", "\n", "\n", "", "self", ".", "base_sizes", "=", "min_sizes", "\n", "self", ".", "scales", "=", "anchor_scales", "\n", "self", ".", "ratios", "=", "anchor_ratios", "\n", "self", ".", "scale_major", "=", "scale_major", "\n", "self", ".", "center_offset", "=", "0", "\n", "self", ".", "base_anchors", "=", "self", ".", "gen_base_anchors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.SSDAnchorGenerator.gen_base_anchors": [[435, 455], ["enumerate", "anchor_generator.SSDAnchorGenerator.gen_single_level_base_anchors", "list", "list.insert", "torch.index_select", "multi_level_base_anchors.append", "range", "len", "torch.LongTensor", "len"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.gen_single_level_base_anchors"], ["", "def", "gen_base_anchors", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate base anchors.\n\n        Returns:\n            list(torch.Tensor): Base anchors of a feature grid in multiple \\\n                feature levels.\n        \"\"\"", "\n", "multi_level_base_anchors", "=", "[", "]", "\n", "for", "i", ",", "base_size", "in", "enumerate", "(", "self", ".", "base_sizes", ")", ":", "\n", "            ", "base_anchors", "=", "self", ".", "gen_single_level_base_anchors", "(", "\n", "base_size", ",", "\n", "scales", "=", "self", ".", "scales", "[", "i", "]", ",", "\n", "ratios", "=", "self", ".", "ratios", "[", "i", "]", ",", "\n", "center", "=", "self", ".", "centers", "[", "i", "]", ")", "\n", "indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "ratios", "[", "i", "]", ")", ")", ")", "\n", "indices", ".", "insert", "(", "1", ",", "len", "(", "indices", ")", ")", "\n", "base_anchors", "=", "torch", ".", "index_select", "(", "base_anchors", ",", "0", ",", "\n", "torch", ".", "LongTensor", "(", "indices", ")", ")", "\n", "multi_level_base_anchors", ".", "append", "(", "base_anchors", ")", "\n", "", "return", "multi_level_base_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.SSDAnchorGenerator.__repr__": [[456, 471], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"str: a string that describes the module\"\"\"", "\n", "indent_str", "=", "'    '", "\n", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "+", "'(\\n'", "\n", "repr_str", "+=", "f'{indent_str}strides={self.strides},\\n'", "\n", "repr_str", "+=", "f'{indent_str}scales={self.scales},\\n'", "\n", "repr_str", "+=", "f'{indent_str}scale_major={self.scale_major},\\n'", "\n", "repr_str", "+=", "f'{indent_str}input_size={self.input_size},\\n'", "\n", "repr_str", "+=", "f'{indent_str}scales={self.scales},\\n'", "\n", "repr_str", "+=", "f'{indent_str}ratios={self.ratios},\\n'", "\n", "repr_str", "+=", "f'{indent_str}num_levels={self.num_levels},\\n'", "\n", "repr_str", "+=", "f'{indent_str}base_sizes={self.base_sizes},\\n'", "\n", "repr_str", "+=", "f'{indent_str}basesize_ratio_range='", "\n", "repr_str", "+=", "f'{self.basesize_ratio_range})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.LegacyAnchorGenerator.gen_single_level_base_anchors": [[522, 570], ["torch.sqrt", "torch.stack().round", "torch.stack"], "methods", ["None"], ["def", "gen_single_level_base_anchors", "(", "self", ",", "\n", "base_size", ",", "\n", "scales", ",", "\n", "ratios", ",", "\n", "center", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate base anchors of a single level.\n\n        Note:\n            The width/height of anchors are minused by 1 when calculating \\\n                the centers and corners to meet the V1.x coordinate system.\n\n        Args:\n            base_size (int | float): Basic size of an anchor.\n            scales (torch.Tensor): Scales of the anchor.\n            ratios (torch.Tensor): The ratio between between the height.\n                and width of anchors in a single level.\n            center (tuple[float], optional): The center of the base anchor\n                related to a single feature grid. Defaults to None.\n\n        Returns:\n            torch.Tensor: Anchors in a single-level feature map.\n        \"\"\"", "\n", "w", "=", "base_size", "\n", "h", "=", "base_size", "\n", "if", "center", "is", "None", ":", "\n", "            ", "x_center", "=", "self", ".", "center_offset", "*", "(", "w", "-", "1", ")", "\n", "y_center", "=", "self", ".", "center_offset", "*", "(", "h", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_center", ",", "y_center", "=", "center", "\n", "\n", "", "h_ratios", "=", "torch", ".", "sqrt", "(", "ratios", ")", "\n", "w_ratios", "=", "1", "/", "h_ratios", "\n", "if", "self", ".", "scale_major", ":", "\n", "            ", "ws", "=", "(", "w", "*", "w_ratios", "[", ":", ",", "None", "]", "*", "scales", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "hs", "=", "(", "h", "*", "h_ratios", "[", ":", ",", "None", "]", "*", "scales", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "ws", "=", "(", "w", "*", "scales", "[", ":", ",", "None", "]", "*", "w_ratios", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "hs", "=", "(", "h", "*", "scales", "[", ":", ",", "None", "]", "*", "h_ratios", "[", "None", ",", ":", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "# use float anchor and the anchor's center is aligned with the", "\n", "# pixel center", "\n", "", "base_anchors", "=", "[", "\n", "x_center", "-", "0.5", "*", "(", "ws", "-", "1", ")", ",", "y_center", "-", "0.5", "*", "(", "hs", "-", "1", ")", ",", "\n", "x_center", "+", "0.5", "*", "(", "ws", "-", "1", ")", ",", "y_center", "+", "0.5", "*", "(", "hs", "-", "1", ")", "\n", "]", "\n", "base_anchors", "=", "torch", ".", "stack", "(", "base_anchors", ",", "dim", "=", "-", "1", ")", ".", "round", "(", ")", "\n", "\n", "return", "base_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.LegacySSDAnchorGenerator.__init__": [[580, 592], ["anchor_generator.SSDAnchorGenerator.__init__", "anchor_generator.LegacySSDAnchorGenerator.gen_base_anchors"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.gen_base_anchors"], ["def", "__init__", "(", "self", ",", "\n", "strides", ",", "\n", "ratios", ",", "\n", "basesize_ratio_range", ",", "\n", "input_size", "=", "300", ",", "\n", "scale_major", "=", "True", ")", ":", "\n", "        ", "super", "(", "LegacySSDAnchorGenerator", ",", "\n", "self", ")", ".", "__init__", "(", "strides", ",", "ratios", ",", "basesize_ratio_range", ",", "input_size", ",", "\n", "scale_major", ")", "\n", "self", ".", "centers", "=", "[", "(", "(", "stride", "-", "1", ")", "/", "2.", ",", "(", "stride", "-", "1", ")", "/", "2.", ")", "\n", "for", "stride", "in", "strides", "]", "\n", "self", ".", "base_anchors", "=", "self", ".", "gen_base_anchors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.__init__": [[605, 616], ["len", "anchor_generator.YOLOAnchorGenerator.gen_base_anchors", "torch.nn.modules.utils._pair", "anchor_generator.YOLOAnchorGenerator.base_sizes.append", "len", "torch.nn.modules.utils._pair"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.gen_base_anchors"], ["def", "__init__", "(", "self", ",", "strides", ",", "base_sizes", ")", ":", "\n", "        ", "self", ".", "strides", "=", "[", "_pair", "(", "stride", ")", "for", "stride", "in", "strides", "]", "\n", "self", ".", "centers", "=", "[", "(", "stride", "[", "0", "]", "/", "2.", ",", "stride", "[", "1", "]", "/", "2.", ")", "\n", "for", "stride", "in", "self", ".", "strides", "]", "\n", "self", ".", "base_sizes", "=", "[", "]", "\n", "num_anchor_per_level", "=", "len", "(", "base_sizes", "[", "0", "]", ")", "\n", "for", "base_sizes_per_level", "in", "base_sizes", ":", "\n", "            ", "assert", "num_anchor_per_level", "==", "len", "(", "base_sizes_per_level", ")", "\n", "self", ".", "base_sizes", ".", "append", "(", "\n", "[", "_pair", "(", "base_size", ")", "for", "base_size", "in", "base_sizes_per_level", "]", ")", "\n", "", "self", ".", "base_anchors", "=", "self", ".", "gen_base_anchors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.num_levels": [[617, 621], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_levels", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: number of feature levels that the generator will be applied\"\"\"", "\n", "return", "len", "(", "self", ".", "base_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.gen_base_anchors": [[622, 638], ["enumerate", "multi_level_base_anchors.append", "anchor_generator.YOLOAnchorGenerator.gen_single_level_base_anchors"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.gen_single_level_base_anchors"], ["", "def", "gen_base_anchors", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generate base anchors.\n\n        Returns:\n            list(torch.Tensor): Base anchors of a feature grid in multiple \\\n                feature levels.\n        \"\"\"", "\n", "multi_level_base_anchors", "=", "[", "]", "\n", "for", "i", ",", "base_sizes_per_level", "in", "enumerate", "(", "self", ".", "base_sizes", ")", ":", "\n", "            ", "center", "=", "None", "\n", "if", "self", ".", "centers", "is", "not", "None", ":", "\n", "                ", "center", "=", "self", ".", "centers", "[", "i", "]", "\n", "", "multi_level_base_anchors", ".", "append", "(", "\n", "self", ".", "gen_single_level_base_anchors", "(", "base_sizes_per_level", ",", "\n", "center", ")", ")", "\n", "", "return", "multi_level_base_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.gen_single_level_base_anchors": [[639, 666], ["torch.stack", "torch.Tensor", "torch.stack.append"], "methods", ["None"], ["", "def", "gen_single_level_base_anchors", "(", "self", ",", "base_sizes_per_level", ",", "center", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate base anchors of a single level.\n\n        Args:\n            base_sizes_per_level (list[tuple[int, int]]): Basic sizes of\n                anchors.\n            center (tuple[float], optional): The center of the base anchor\n                related to a single feature grid. Defaults to None.\n\n        Returns:\n            torch.Tensor: Anchors in a single-level feature maps.\n        \"\"\"", "\n", "x_center", ",", "y_center", "=", "center", "\n", "base_anchors", "=", "[", "]", "\n", "for", "base_size", "in", "base_sizes_per_level", ":", "\n", "            ", "w", ",", "h", "=", "base_size", "\n", "\n", "# use float anchor and the anchor's center is aligned with the", "\n", "# pixel center", "\n", "base_anchor", "=", "torch", ".", "Tensor", "(", "[", "\n", "x_center", "-", "0.5", "*", "w", ",", "y_center", "-", "0.5", "*", "h", ",", "x_center", "+", "0.5", "*", "w", ",", "\n", "y_center", "+", "0.5", "*", "h", "\n", "]", ")", "\n", "base_anchors", ".", "append", "(", "base_anchor", ")", "\n", "", "base_anchors", "=", "torch", ".", "stack", "(", "base_anchors", ",", "dim", "=", "0", ")", "\n", "\n", "return", "base_anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.responsible_flags": [[667, 691], ["range", "len", "anchor_generator.YOLOAnchorGenerator.single_level_responsible_flags", "multi_level_responsible_flags.append"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.single_level_responsible_flags"], ["", "def", "responsible_flags", "(", "self", ",", "featmap_sizes", ",", "gt_bboxes", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "\"\"\"Generate responsible anchor flags of grid cells in multiple scales.\n\n        Args:\n            featmap_sizes (list(tuple)): List of feature map sizes in multiple\n                feature levels.\n            gt_bboxes (Tensor): Ground truth boxes, shape (n, 4).\n            device (str): Device where the anchors will be put on.\n\n        Return:\n            list(torch.Tensor): responsible flags of anchors in multiple level\n        \"\"\"", "\n", "assert", "self", ".", "num_levels", "==", "len", "(", "featmap_sizes", ")", "\n", "multi_level_responsible_flags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_levels", ")", ":", "\n", "            ", "anchor_stride", "=", "self", ".", "strides", "[", "i", "]", "\n", "flags", "=", "self", ".", "single_level_responsible_flags", "(", "\n", "featmap_sizes", "[", "i", "]", ",", "\n", "gt_bboxes", ",", "\n", "anchor_stride", ",", "\n", "self", ".", "num_base_anchors", "[", "i", "]", ",", "\n", "device", "=", "device", ")", "\n", "multi_level_responsible_flags", ".", "append", "(", "flags", ")", "\n", "", "return", "multi_level_responsible_flags", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.anchor_generator.YOLOAnchorGenerator.single_level_responsible_flags": [[692, 728], ["torch.floor().long", "torch.floor().long", "torch.zeros", "responsible_grid[].expand().contiguous().view", "torch.floor", "torch.floor", "responsible_grid[].expand().contiguous", "responsible_grid[].expand", "responsible_grid[].expand().contiguous().view.size"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.expand"], ["", "def", "single_level_responsible_flags", "(", "self", ",", "\n", "featmap_size", ",", "\n", "gt_bboxes", ",", "\n", "stride", ",", "\n", "num_base_anchors", ",", "\n", "device", "=", "'cuda'", ")", ":", "\n", "        ", "\"\"\"Generate the responsible flags of anchor in a single feature map.\n\n        Args:\n            featmap_size (tuple[int]): The size of feature maps.\n            gt_bboxes (Tensor): Ground truth boxes, shape (n, 4).\n            stride (tuple(int)): stride of current level\n            num_base_anchors (int): The number of base anchors.\n            device (str, optional): Device where the flags will be put on.\n                Defaults to 'cuda'.\n\n        Returns:\n            torch.Tensor: The valid flags of each anchor in a single level \\\n                feature map.\n        \"\"\"", "\n", "feat_h", ",", "feat_w", "=", "featmap_size", "\n", "gt_bboxes_cx", "=", "(", "(", "gt_bboxes", "[", ":", ",", "0", "]", "+", "gt_bboxes", "[", ":", ",", "2", "]", ")", "*", "0.5", ")", ".", "to", "(", "device", ")", "\n", "gt_bboxes_cy", "=", "(", "(", "gt_bboxes", "[", ":", ",", "1", "]", "+", "gt_bboxes", "[", ":", ",", "3", "]", ")", "*", "0.5", ")", ".", "to", "(", "device", ")", "\n", "gt_bboxes_grid_x", "=", "torch", ".", "floor", "(", "gt_bboxes_cx", "/", "stride", "[", "0", "]", ")", ".", "long", "(", ")", "\n", "gt_bboxes_grid_y", "=", "torch", ".", "floor", "(", "gt_bboxes_cy", "/", "stride", "[", "1", "]", ")", ".", "long", "(", ")", "\n", "\n", "# row major indexing", "\n", "gt_bboxes_grid_idx", "=", "gt_bboxes_grid_y", "*", "feat_w", "+", "gt_bboxes_grid_x", "\n", "\n", "responsible_grid", "=", "torch", ".", "zeros", "(", "\n", "feat_h", "*", "feat_w", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "device", ")", "\n", "responsible_grid", "[", "gt_bboxes_grid_idx", "]", "=", "1", "\n", "\n", "responsible_grid", "=", "responsible_grid", "[", ":", ",", "None", "]", ".", "expand", "(", "\n", "responsible_grid", ".", "size", "(", "0", ")", ",", "num_base_anchors", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "responsible_grid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.builder.build_anchor_generator": [[6, 8], ["mmcv.utils.build_from_cfg"], "function", ["None"], ["def", "build_anchor_generator", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "return", "build_from_cfg", "(", "cfg", ",", "ANCHOR_GENERATORS", ",", "default_args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.point_generator.PointGenerator._meshgrid": [[9, 16], ["x.repeat", "y.view().repeat().view", "len", "y.view().repeat", "len", "y.view"], "methods", ["None"], ["    ", "def", "_meshgrid", "(", "self", ",", "x", ",", "y", ",", "row_major", "=", "True", ")", ":", "\n", "        ", "xx", "=", "x", ".", "repeat", "(", "len", "(", "y", ")", ")", "\n", "yy", "=", "y", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "len", "(", "x", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "if", "row_major", ":", "\n", "            ", "return", "xx", ",", "yy", "\n", "", "else", ":", "\n", "            ", "return", "yy", ",", "xx", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.point_generator.PointGenerator.grid_points": [[17, 26], ["point_generator.PointGenerator._meshgrid", "shift_x.new_full", "torch.stack", "torch.stack.to", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.point_generator.PointGenerator._meshgrid", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to"], ["", "", "def", "grid_points", "(", "self", ",", "featmap_size", ",", "stride", "=", "16", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "feat_h", ",", "feat_w", "=", "featmap_size", "\n", "shift_x", "=", "torch", ".", "arange", "(", "0.", ",", "feat_w", ",", "device", "=", "device", ")", "*", "stride", "\n", "shift_y", "=", "torch", ".", "arange", "(", "0.", ",", "feat_h", ",", "device", "=", "device", ")", "*", "stride", "\n", "shift_xx", ",", "shift_yy", "=", "self", ".", "_meshgrid", "(", "shift_x", ",", "shift_y", ")", "\n", "stride", "=", "shift_x", ".", "new_full", "(", "(", "shift_xx", ".", "shape", "[", "0", "]", ",", ")", ",", "stride", ")", "\n", "shifts", "=", "torch", ".", "stack", "(", "[", "shift_xx", ",", "shift_yy", ",", "stride", "]", ",", "dim", "=", "-", "1", ")", "\n", "all_points", "=", "shifts", ".", "to", "(", "device", ")", "\n", "return", "all_points", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.point_generator.PointGenerator.valid_flags": [[27, 38], ["torch.zeros", "torch.zeros", "point_generator.PointGenerator._meshgrid"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.point_generator.PointGenerator._meshgrid"], ["", "def", "valid_flags", "(", "self", ",", "featmap_size", ",", "valid_size", ",", "device", "=", "'cuda'", ")", ":", "\n", "        ", "feat_h", ",", "feat_w", "=", "featmap_size", "\n", "valid_h", ",", "valid_w", "=", "valid_size", "\n", "assert", "valid_h", "<=", "feat_h", "and", "valid_w", "<=", "feat_w", "\n", "valid_x", "=", "torch", ".", "zeros", "(", "feat_w", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "\n", "valid_y", "=", "torch", ".", "zeros", "(", "feat_h", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "device", ")", "\n", "valid_x", "[", ":", "valid_w", "]", "=", "1", "\n", "valid_y", "[", ":", "valid_h", "]", "=", "1", "\n", "valid_xx", ",", "valid_yy", "=", "self", ".", "_meshgrid", "(", "valid_x", ",", "valid_y", ")", "\n", "valid", "=", "valid_xx", "&", "valid_yy", "\n", "return", "valid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.utils.images_to_levels": [[4, 18], ["torch.stack", "level_targets.append"], "function", ["None"], ["import", "numpy", "as", "np", "\n", "import", "onnx", "\n", "import", "onnxruntime", "as", "ort", "\n", "import", "torch", "\n", "import", "torch", ".", "nn", "as", "nn", "\n", "\n", "ort_custom_op_path", "=", "''", "\n", "try", ":", "\n", "    ", "from", "mmcv", ".", "ops", "import", "get_onnxruntime_op_path", "\n", "ort_custom_op_path", "=", "get_onnxruntime_op_path", "(", ")", "\n", "", "except", "(", "ImportError", ",", "ModuleNotFoundError", ")", ":", "\n", "    ", "warnings", ".", "warn", "(", "'If input model has custom op from mmcv, \\\n        you may have to build mmcv with ONNXRuntime from source.'", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.utils.anchor_inside_flags": [[20, 47], ["None"], "function", ["None"], ["    ", "\"\"\"Wrap the function to be tested for torch.onnx.export tracking.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "wrapped_function", ")", ":", "\n", "        ", "super", "(", "WrapFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "wrapped_function", "=", "wrapped_function", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "wrapped_function", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "", "def", "ort_validate", "(", "model", ",", "feats", ",", "onnx_io", "=", "'tmp.onnx'", ")", ":", "\n", "    ", "\"\"\"Validate the output of the onnxruntime backend is the same as the output\n    generated by torch.\n\n    Args:\n        model (nn.Module): the model to be verified\n        feats (list(torch.Tensor) | torch.Tensor): the input of model\n        onnx_io (str): the name of onnx output file\n    \"\"\"", "\n", "model", ".", "cpu", "(", ")", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "torch", ".", "onnx", ".", "export", "(", "\n", "model", ",", "\n", "feats", ",", "\n", "onnx_io", ",", "\n", "export_params", "=", "True", ",", "\n", "keep_initializers_as_inputs", "=", "True", ",", "\n", "do_constant_folding", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.utils.calc_region": [[49, 72], ["torch.round().long", "torch.round().long", "torch.round().long", "torch.round().long", "x1.clamp.clamp", "y1.clamp.clamp", "x2.clamp.clamp", "y2.clamp.clamp", "torch.round", "torch.round", "torch.round", "torch.round"], "function", ["None"], ["opset_version", "=", "11", ")", "\n", "\n", "", "onnx_outputs", "=", "verify_model", "(", "feats", ")", "\n", "\n", "torch_outputs", "=", "convert_result_list", "(", "model", ".", "forward", "(", "feats", ")", ")", "\n", "torch_outputs", "=", "[", "\n", "torch_output", ".", "detach", "(", ")", ".", "numpy", "(", ")", "for", "torch_output", "in", "torch_outputs", "\n", "]", "\n", "\n", "# match torch_outputs and onnx_outputs", "\n", "for", "i", "in", "range", "(", "len", "(", "onnx_outputs", ")", ")", ":", "\n", "        ", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "torch_outputs", "[", "i", "]", ",", "onnx_outputs", "[", "i", "]", ",", "rtol", "=", "1e-03", ",", "atol", "=", "1e-05", ")", "\n", "\n", "\n", "", "", "def", "verify_model", "(", "feat", ",", "onnx_io", "=", "'tmp.onnx'", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.mean_ap.average_precision": [[12, 57], ["numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.hstack", "numpy.hstack", "range", "range", "numpy.maximum", "numpy.sum", "range", "ValueError", "numpy.where", "numpy.arange", "precs.max"], "function", ["None"], ["def", "average_precision", "(", "recalls", ",", "precisions", ",", "mode", "=", "'area'", ")", ":", "\n", "    ", "\"\"\"Calculate average precision (for single or multiple scales).\n\n    Args:\n        recalls (ndarray): shape (num_scales, num_dets) or (num_dets, )\n        precisions (ndarray): shape (num_scales, num_dets) or (num_dets, )\n        mode (str): 'area' or '11points', 'area' means calculating the area\n            under precision-recall curve, '11points' means calculating\n            the average precision of recalls at [0, 0.1, ..., 1]\n\n    Returns:\n        float or ndarray: calculated average precision\n    \"\"\"", "\n", "no_scale", "=", "False", "\n", "if", "recalls", ".", "ndim", "==", "1", ":", "\n", "        ", "no_scale", "=", "True", "\n", "recalls", "=", "recalls", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "precisions", "=", "precisions", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "assert", "recalls", ".", "shape", "==", "precisions", ".", "shape", "and", "recalls", ".", "ndim", "==", "2", "\n", "num_scales", "=", "recalls", ".", "shape", "[", "0", "]", "\n", "ap", "=", "np", ".", "zeros", "(", "num_scales", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "mode", "==", "'area'", ":", "\n", "        ", "zeros", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "1", ")", ",", "dtype", "=", "recalls", ".", "dtype", ")", "\n", "ones", "=", "np", ".", "ones", "(", "(", "num_scales", ",", "1", ")", ",", "dtype", "=", "recalls", ".", "dtype", ")", "\n", "mrec", "=", "np", ".", "hstack", "(", "(", "zeros", ",", "recalls", ",", "ones", ")", ")", "\n", "mpre", "=", "np", ".", "hstack", "(", "(", "zeros", ",", "precisions", ",", "zeros", ")", ")", "\n", "for", "i", "in", "range", "(", "mpre", ".", "shape", "[", "1", "]", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", ":", ",", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", ":", ",", "i", "-", "1", "]", ",", "mpre", "[", ":", ",", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "ind", "=", "np", ".", "where", "(", "mrec", "[", "i", ",", "1", ":", "]", "!=", "mrec", "[", "i", ",", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "ap", "[", "i", "]", "=", "np", ".", "sum", "(", "\n", "(", "mrec", "[", "i", ",", "ind", "+", "1", "]", "-", "mrec", "[", "i", ",", "ind", "]", ")", "*", "mpre", "[", "i", ",", "ind", "+", "1", "]", ")", "\n", "", "", "elif", "mode", "==", "'11points'", ":", "\n", "        ", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "for", "thr", "in", "np", ".", "arange", "(", "0", ",", "1", "+", "1e-3", ",", "0.1", ")", ":", "\n", "                ", "precs", "=", "precisions", "[", "i", ",", "recalls", "[", "i", ",", ":", "]", ">=", "thr", "]", "\n", "prec", "=", "precs", ".", "max", "(", ")", "if", "precs", ".", "size", ">", "0", "else", "0", "\n", "ap", "[", "i", "]", "+=", "prec", "\n", "", "", "ap", "/=", "11", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'Unrecognized mode, only \"area\" and \"11points\" are supported'", ")", "\n", "", "if", "no_scale", ":", "\n", "        ", "ap", "=", "ap", "[", "0", "]", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.mean_ap.tpfp_imagenet": [[59, 151], ["numpy.concatenate", "numpy.vstack", "len", "numpy.zeros", "numpy.zeros", "bbox_overlaps.bbox_overlaps", "numpy.minimum", "numpy.argsort", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.ones", "enumerate", "numpy.zeros_like", "range"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.iou2d_calculator.bbox_overlaps"], ["", "def", "tpfp_imagenet", "(", "det_bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "default_iou_thr", "=", "0.5", ",", "\n", "area_ranges", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check if detected bboxes are true positive or false positive.\n\n    Args:\n        det_bbox (ndarray): Detected bboxes of this image, of shape (m, 5).\n        gt_bboxes (ndarray): GT bboxes of this image, of shape (n, 4).\n        gt_bboxes_ignore (ndarray): Ignored gt bboxes of this image,\n            of shape (k, 4). Default: None\n        default_iou_thr (float): IoU threshold to be considered as matched for\n            medium and large bboxes (small ones have special rules).\n            Default: 0.5.\n        area_ranges (list[tuple] | None): Range of bbox areas to be evaluated,\n            in the format [(min1, max1), (min2, max2), ...]. Default: None.\n\n    Returns:\n        tuple[np.ndarray]: (tp, fp) whose elements are 0 and 1. The shape of\n            each array is (num_scales, m).\n    \"\"\"", "\n", "# an indicator of ignored gts", "\n", "gt_ignore_inds", "=", "np", ".", "concatenate", "(", "\n", "(", "np", ".", "zeros", "(", "gt_bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", ",", "\n", "np", ".", "ones", "(", "gt_bboxes_ignore", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", ")", ")", "\n", "# stack gt_bboxes and gt_bboxes_ignore for convenience", "\n", "gt_bboxes", "=", "np", ".", "vstack", "(", "(", "gt_bboxes", ",", "gt_bboxes_ignore", ")", ")", "\n", "\n", "num_dets", "=", "det_bboxes", ".", "shape", "[", "0", "]", "\n", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "if", "area_ranges", "is", "None", ":", "\n", "        ", "area_ranges", "=", "[", "(", "None", ",", "None", ")", "]", "\n", "", "num_scales", "=", "len", "(", "area_ranges", ")", "\n", "# tp and fp are of shape (num_scales, num_gts), each row is tp or fp", "\n", "# of a certain scale.", "\n", "tp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "gt_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "if", "area_ranges", "==", "[", "(", "None", ",", "None", ")", "]", ":", "\n", "            ", "fp", "[", "...", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "det_areas", "=", "(", "det_bboxes", "[", ":", ",", "2", "]", "-", "det_bboxes", "[", ":", ",", "0", "]", ")", "*", "(", "\n", "det_bboxes", "[", ":", ",", "3", "]", "-", "det_bboxes", "[", ":", ",", "1", "]", ")", "\n", "for", "i", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "                ", "fp", "[", "i", ",", "(", "det_areas", ">=", "min_area", ")", "&", "(", "det_areas", "<", "max_area", ")", "]", "=", "1", "\n", "", "", "return", "tp", ",", "fp", "\n", "", "ious", "=", "bbox_overlaps", "(", "det_bboxes", ",", "gt_bboxes", "-", "1", ")", "\n", "gt_w", "=", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", "\n", "gt_h", "=", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", "\n", "iou_thrs", "=", "np", ".", "minimum", "(", "(", "gt_w", "*", "gt_h", ")", "/", "(", "(", "gt_w", "+", "10.0", ")", "*", "(", "gt_h", "+", "10.0", ")", ")", ",", "\n", "default_iou_thr", ")", "\n", "# sort all detections by scores in descending order", "\n", "sort_inds", "=", "np", ".", "argsort", "(", "-", "det_bboxes", "[", ":", ",", "-", "1", "]", ")", "\n", "for", "k", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "        ", "gt_covered", "=", "np", ".", "zeros", "(", "num_gts", ",", "dtype", "=", "bool", ")", "\n", "# if no area range is specified, gt_area_ignore is all False", "\n", "if", "min_area", "is", "None", ":", "\n", "            ", "gt_area_ignore", "=", "np", ".", "zeros_like", "(", "gt_ignore_inds", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "            ", "gt_areas", "=", "gt_w", "*", "gt_h", "\n", "gt_area_ignore", "=", "(", "gt_areas", "<", "min_area", ")", "|", "(", "gt_areas", ">=", "max_area", ")", "\n", "", "for", "i", "in", "sort_inds", ":", "\n", "            ", "max_iou", "=", "-", "1", "\n", "matched_gt", "=", "-", "1", "\n", "# find best overlapped available gt", "\n", "for", "j", "in", "range", "(", "num_gts", ")", ":", "\n", "# different from PASCAL VOC: allow finding other gts if the", "\n", "# best overlapped ones are already matched by other det bboxes", "\n", "                ", "if", "gt_covered", "[", "j", "]", ":", "\n", "                    ", "continue", "\n", "", "elif", "ious", "[", "i", ",", "j", "]", ">=", "iou_thrs", "[", "j", "]", "and", "ious", "[", "i", ",", "j", "]", ">", "max_iou", ":", "\n", "                    ", "max_iou", "=", "ious", "[", "i", ",", "j", "]", "\n", "matched_gt", "=", "j", "\n", "# there are 4 cases for a det bbox:", "\n", "# 1. it matches a gt, tp = 1, fp = 0", "\n", "# 2. it matches an ignored gt, tp = 0, fp = 0", "\n", "# 3. it matches no gt and within area range, tp = 0, fp = 1", "\n", "# 4. it matches no gt but is beyond area range, tp = 0, fp = 0", "\n", "", "", "if", "matched_gt", ">=", "0", ":", "\n", "                ", "gt_covered", "[", "matched_gt", "]", "=", "1", "\n", "if", "not", "(", "gt_ignore_inds", "[", "matched_gt", "]", "\n", "or", "gt_area_ignore", "[", "matched_gt", "]", ")", ":", "\n", "                    ", "tp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "", "elif", "min_area", "is", "None", ":", "\n", "                ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "bbox", "=", "det_bboxes", "[", "i", ",", ":", "4", "]", "\n", "area", "=", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ")", "*", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ")", "\n", "if", "area", ">=", "min_area", "and", "area", "<", "max_area", ":", "\n", "                    ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "", "", "", "return", "tp", ",", "fp", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.mean_ap.tpfp_default": [[153, 238], ["numpy.concatenate", "numpy.vstack", "len", "numpy.zeros", "numpy.zeros", "bbox_overlaps.bbox_overlaps", "bbox_overlaps.bbox_overlaps.max", "bbox_overlaps.bbox_overlaps.argmax", "numpy.argsort", "enumerate", "numpy.zeros", "numpy.zeros", "numpy.ones", "enumerate", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.iou2d_calculator.bbox_overlaps"], ["", "def", "tpfp_default", "(", "det_bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "area_ranges", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check if detected bboxes are true positive or false positive.\n\n    Args:\n        det_bbox (ndarray): Detected bboxes of this image, of shape (m, 5).\n        gt_bboxes (ndarray): GT bboxes of this image, of shape (n, 4).\n        gt_bboxes_ignore (ndarray): Ignored gt bboxes of this image,\n            of shape (k, 4). Default: None\n        iou_thr (float): IoU threshold to be considered as matched.\n            Default: 0.5.\n        area_ranges (list[tuple] | None): Range of bbox areas to be evaluated,\n            in the format [(min1, max1), (min2, max2), ...]. Default: None.\n\n    Returns:\n        tuple[np.ndarray]: (tp, fp) whose elements are 0 and 1. The shape of\n            each array is (num_scales, m).\n    \"\"\"", "\n", "# an indicator of ignored gts", "\n", "gt_ignore_inds", "=", "np", ".", "concatenate", "(", "\n", "(", "np", ".", "zeros", "(", "gt_bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", ",", "\n", "np", ".", "ones", "(", "gt_bboxes_ignore", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "bool", ")", ")", ")", "\n", "# stack gt_bboxes and gt_bboxes_ignore for convenience", "\n", "gt_bboxes", "=", "np", ".", "vstack", "(", "(", "gt_bboxes", ",", "gt_bboxes_ignore", ")", ")", "\n", "\n", "num_dets", "=", "det_bboxes", ".", "shape", "[", "0", "]", "\n", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "if", "area_ranges", "is", "None", ":", "\n", "        ", "area_ranges", "=", "[", "(", "None", ",", "None", ")", "]", "\n", "", "num_scales", "=", "len", "(", "area_ranges", ")", "\n", "# tp and fp are of shape (num_scales, num_gts), each row is tp or fp of", "\n", "# a certain scale", "\n", "tp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_dets", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# if there is no gt bboxes in this image, then all det bboxes", "\n", "# within area range are false positives", "\n", "if", "gt_bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "if", "area_ranges", "==", "[", "(", "None", ",", "None", ")", "]", ":", "\n", "            ", "fp", "[", "...", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "det_areas", "=", "(", "det_bboxes", "[", ":", ",", "2", "]", "-", "det_bboxes", "[", ":", ",", "0", "]", ")", "*", "(", "\n", "det_bboxes", "[", ":", ",", "3", "]", "-", "det_bboxes", "[", ":", ",", "1", "]", ")", "\n", "for", "i", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "                ", "fp", "[", "i", ",", "(", "det_areas", ">=", "min_area", ")", "&", "(", "det_areas", "<", "max_area", ")", "]", "=", "1", "\n", "", "", "return", "tp", ",", "fp", "\n", "\n", "", "ious", "=", "bbox_overlaps", "(", "det_bboxes", ",", "gt_bboxes", ")", "\n", "# for each det, the max iou with all gts", "\n", "ious_max", "=", "ious", ".", "max", "(", "axis", "=", "1", ")", "\n", "# for each det, which gt overlaps most with it", "\n", "ious_argmax", "=", "ious", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "# sort all dets in descending order by scores", "\n", "sort_inds", "=", "np", ".", "argsort", "(", "-", "det_bboxes", "[", ":", ",", "-", "1", "]", ")", "\n", "for", "k", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "        ", "gt_covered", "=", "np", ".", "zeros", "(", "num_gts", ",", "dtype", "=", "bool", ")", "\n", "# if no area range is specified, gt_area_ignore is all False", "\n", "if", "min_area", "is", "None", ":", "\n", "            ", "gt_area_ignore", "=", "np", ".", "zeros_like", "(", "gt_ignore_inds", ",", "dtype", "=", "bool", ")", "\n", "", "else", ":", "\n", "            ", "gt_areas", "=", "(", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", ")", "*", "(", "\n", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", ")", "\n", "gt_area_ignore", "=", "(", "gt_areas", "<", "min_area", ")", "|", "(", "gt_areas", ">=", "max_area", ")", "\n", "", "for", "i", "in", "sort_inds", ":", "\n", "            ", "if", "ious_max", "[", "i", "]", ">=", "iou_thr", ":", "\n", "                ", "matched_gt", "=", "ious_argmax", "[", "i", "]", "\n", "if", "not", "(", "gt_ignore_inds", "[", "matched_gt", "]", "\n", "or", "gt_area_ignore", "[", "matched_gt", "]", ")", ":", "\n", "                    ", "if", "not", "gt_covered", "[", "matched_gt", "]", ":", "\n", "                        ", "gt_covered", "[", "matched_gt", "]", "=", "True", "\n", "tp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "# otherwise ignore this detected bbox, tp = 0, fp = 0", "\n", "", "", "", "elif", "min_area", "is", "None", ":", "\n", "                ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "bbox", "=", "det_bboxes", "[", "i", ",", ":", "4", "]", "\n", "area", "=", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ")", "*", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ")", "\n", "if", "area", ">=", "min_area", "and", "area", "<", "max_area", ":", "\n", "                    ", "fp", "[", "k", ",", "i", "]", "=", "1", "\n", "", "", "", "", "return", "tp", ",", "fp", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.mean_ap.get_cls_results": [[240, 265], ["cls_gts.append", "ann.get", "cls_gts_ignore.append", "cls_gts_ignore.append", "numpy.empty"], "function", ["None"], ["", "def", "get_cls_results", "(", "det_results", ",", "annotations", ",", "class_id", ")", ":", "\n", "    ", "\"\"\"Get det results and gt information of a certain class.\n\n    Args:\n        det_results (list[list]): Same as `eval_map()`.\n        annotations (list[dict]): Same as `eval_map()`.\n        class_id (int): ID of a specific class.\n\n    Returns:\n        tuple[list[np.ndarray]]: detected bboxes, gt bboxes, ignored gt bboxes\n    \"\"\"", "\n", "cls_dets", "=", "[", "img_res", "[", "class_id", "]", "for", "img_res", "in", "det_results", "]", "\n", "cls_gts", "=", "[", "]", "\n", "cls_gts_ignore", "=", "[", "]", "\n", "for", "ann", "in", "annotations", ":", "\n", "        ", "gt_inds", "=", "ann", "[", "'labels'", "]", "==", "class_id", "\n", "cls_gts", ".", "append", "(", "ann", "[", "'bboxes'", "]", "[", "gt_inds", ",", ":", "]", ")", "\n", "\n", "if", "ann", ".", "get", "(", "'labels_ignore'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "ignore_inds", "=", "ann", "[", "'labels_ignore'", "]", "==", "class_id", "\n", "cls_gts_ignore", ".", "append", "(", "ann", "[", "'bboxes_ignore'", "]", "[", "ignore_inds", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "cls_gts_ignore", ".", "append", "(", "np", ".", "empty", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n", "", "", "return", "cls_dets", ",", "cls_gts", ",", "cls_gts_ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.mean_ap.eval_map": [[267, 402], ["len", "len", "multiprocessing.Pool", "range", "multiprocessing.Pool.close", "mean_ap.print_map_summary", "len", "len", "len", "mean_ap.get_cls_results", "multiprocessing.Pool.starmap", "tuple", "numpy.zeros", "enumerate", "numpy.vstack", "numpy.argsort", "numpy.cumsum", "numpy.cumsum", "mean_ap.average_precision", "eval_results.append", "numpy.vstack", "numpy.vstack", "range", "callable", "ValueError", "zip", "zip", "numpy.hstack", "numpy.hstack", "numpy.finfo", "numpy.maximum", "numpy.maximum", "num_gts.item.item", "numpy.any", "numpy.array().mean().item", "enumerate", "mean_ap.append", "mean_ap.append", "aps.append", "numpy.sum", "all_ap[].mean", "numpy.array().mean", "range", "range", "numpy.array"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.mean_ap.print_map_summary", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.mean_ap.get_cls_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.mean_ap.average_precision"], ["", "def", "eval_map", "(", "det_results", ",", "\n", "annotations", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "dataset", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "tpfp_fn", "=", "None", ",", "\n", "nproc", "=", "4", ")", ":", "\n", "    ", "\"\"\"Evaluate mAP of a dataset.\n\n    Args:\n        det_results (list[list]): [[cls1_det, cls2_det, ...], ...].\n            The outer list indicates images, and the inner list indicates\n            per-class detected bboxes.\n        annotations (list[dict]): Ground truth annotations where each item of\n            the list indicates an image. Keys of annotations are:\n\n            - `bboxes`: numpy array of shape (n, 4)\n            - `labels`: numpy array of shape (n, )\n            - `bboxes_ignore` (optional): numpy array of shape (k, 4)\n            - `labels_ignore` (optional): numpy array of shape (k, )\n        scale_ranges (list[tuple] | None): Range of scales to be evaluated,\n            in the format [(min1, max1), (min2, max2), ...]. A range of\n            (32, 64) means the area range between (32**2, 64**2).\n            Default: None.\n        iou_thr (float): IoU threshold to be considered as matched.\n            Default: 0.5.\n        dataset (list[str] | str | None): Dataset name or dataset classes,\n            there are minor differences in metrics for different datsets, e.g.\n            \"voc07\", \"imagenet_det\", etc. Default: None.\n        logger (logging.Logger | str | None): The way to print the mAP\n            summary. See `mmcv.utils.print_log()` for details. Default: None.\n        tpfp_fn (callable | None): The function used to determine true/\n            false positives. If None, :func:`tpfp_default` is used as default\n            unless dataset is 'det' or 'vid' (:func:`tpfp_imagenet` in this\n            case). If it is given as a function, then this function is used\n            to evaluate tp & fp. Default None.\n        nproc (int): Processes used for computing TP and FP.\n            Default: 4.\n\n    Returns:\n        tuple: (mAP, [dict, dict, ...])\n    \"\"\"", "\n", "assert", "len", "(", "det_results", ")", "==", "len", "(", "annotations", ")", "\n", "\n", "num_imgs", "=", "len", "(", "det_results", ")", "\n", "num_scales", "=", "len", "(", "scale_ranges", ")", "if", "scale_ranges", "is", "not", "None", "else", "1", "\n", "num_classes", "=", "len", "(", "det_results", "[", "0", "]", ")", "# positive class num", "\n", "area_ranges", "=", "(", "[", "(", "rg", "[", "0", "]", "**", "2", ",", "rg", "[", "1", "]", "**", "2", ")", "for", "rg", "in", "scale_ranges", "]", "\n", "if", "scale_ranges", "is", "not", "None", "else", "None", ")", "\n", "\n", "pool", "=", "Pool", "(", "nproc", ")", "\n", "eval_results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "# get gt and det bboxes of this class", "\n", "        ", "cls_dets", ",", "cls_gts", ",", "cls_gts_ignore", "=", "get_cls_results", "(", "\n", "det_results", ",", "annotations", ",", "i", ")", "\n", "# choose proper function according to datasets to compute tp and fp", "\n", "if", "tpfp_fn", "is", "None", ":", "\n", "            ", "if", "dataset", "in", "[", "'det'", ",", "'vid'", "]", ":", "\n", "                ", "tpfp_fn", "=", "tpfp_imagenet", "\n", "", "else", ":", "\n", "                ", "tpfp_fn", "=", "tpfp_default", "\n", "", "", "if", "not", "callable", "(", "tpfp_fn", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f'tpfp_fn has to be a function or None, but got {tpfp_fn}'", ")", "\n", "\n", "# compute tp and fp for each image with multiple processes", "\n", "", "tpfp", "=", "pool", ".", "starmap", "(", "\n", "tpfp_fn", ",", "\n", "zip", "(", "cls_dets", ",", "cls_gts", ",", "cls_gts_ignore", ",", "\n", "[", "iou_thr", "for", "_", "in", "range", "(", "num_imgs", ")", "]", ",", "\n", "[", "area_ranges", "for", "_", "in", "range", "(", "num_imgs", ")", "]", ")", ")", "\n", "tp", ",", "fp", "=", "tuple", "(", "zip", "(", "*", "tpfp", ")", ")", "\n", "# calculate gt number of each scale", "\n", "# ignored gts or gts beyond the specific scale are not counted", "\n", "num_gts", "=", "np", ".", "zeros", "(", "num_scales", ",", "dtype", "=", "int", ")", "\n", "for", "j", ",", "bbox", "in", "enumerate", "(", "cls_gts", ")", ":", "\n", "            ", "if", "area_ranges", "is", "None", ":", "\n", "                ", "num_gts", "[", "0", "]", "+=", "bbox", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "gt_areas", "=", "(", "bbox", "[", ":", ",", "2", "]", "-", "bbox", "[", ":", ",", "0", "]", ")", "*", "(", "\n", "bbox", "[", ":", ",", "3", "]", "-", "bbox", "[", ":", ",", "1", "]", ")", "\n", "for", "k", ",", "(", "min_area", ",", "max_area", ")", "in", "enumerate", "(", "area_ranges", ")", ":", "\n", "                    ", "num_gts", "[", "k", "]", "+=", "np", ".", "sum", "(", "(", "gt_areas", ">=", "min_area", ")", "\n", "&", "(", "gt_areas", "<", "max_area", ")", ")", "\n", "# sort all det bboxes by score, also sort tp and fp", "\n", "", "", "", "cls_dets", "=", "np", ".", "vstack", "(", "cls_dets", ")", "\n", "num_dets", "=", "cls_dets", ".", "shape", "[", "0", "]", "\n", "sort_inds", "=", "np", ".", "argsort", "(", "-", "cls_dets", "[", ":", ",", "-", "1", "]", ")", "\n", "tp", "=", "np", ".", "hstack", "(", "tp", ")", "[", ":", ",", "sort_inds", "]", "\n", "fp", "=", "np", ".", "hstack", "(", "fp", ")", "[", ":", ",", "sort_inds", "]", "\n", "# calculate recall and precision with tp and fp", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ",", "axis", "=", "1", ")", "\n", "fp", "=", "np", ".", "cumsum", "(", "fp", ",", "axis", "=", "1", ")", "\n", "eps", "=", "np", ".", "finfo", "(", "np", ".", "float32", ")", ".", "eps", "\n", "recalls", "=", "tp", "/", "np", ".", "maximum", "(", "num_gts", "[", ":", ",", "np", ".", "newaxis", "]", ",", "eps", ")", "\n", "precisions", "=", "tp", "/", "np", ".", "maximum", "(", "(", "tp", "+", "fp", ")", ",", "eps", ")", "\n", "# calculate AP", "\n", "if", "scale_ranges", "is", "None", ":", "\n", "            ", "recalls", "=", "recalls", "[", "0", ",", ":", "]", "\n", "precisions", "=", "precisions", "[", "0", ",", ":", "]", "\n", "num_gts", "=", "num_gts", ".", "item", "(", ")", "\n", "", "mode", "=", "'area'", "if", "dataset", "!=", "'voc07'", "else", "'11points'", "\n", "ap", "=", "average_precision", "(", "recalls", ",", "precisions", ",", "mode", ")", "\n", "eval_results", ".", "append", "(", "{", "\n", "'num_gts'", ":", "num_gts", ",", "\n", "'num_dets'", ":", "num_dets", ",", "\n", "'recall'", ":", "recalls", ",", "\n", "'precision'", ":", "precisions", ",", "\n", "'ap'", ":", "ap", "\n", "}", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "if", "scale_ranges", "is", "not", "None", ":", "\n", "# shape (num_classes, num_scales)", "\n", "        ", "all_ap", "=", "np", ".", "vstack", "(", "[", "cls_result", "[", "'ap'", "]", "for", "cls_result", "in", "eval_results", "]", ")", "\n", "all_num_gts", "=", "np", ".", "vstack", "(", "\n", "[", "cls_result", "[", "'num_gts'", "]", "for", "cls_result", "in", "eval_results", "]", ")", "\n", "mean_ap", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "            ", "if", "np", ".", "any", "(", "all_num_gts", "[", ":", ",", "i", "]", ">", "0", ")", ":", "\n", "                ", "mean_ap", ".", "append", "(", "all_ap", "[", "all_num_gts", "[", ":", ",", "i", "]", ">", "0", ",", "i", "]", ".", "mean", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "mean_ap", ".", "append", "(", "0.0", ")", "\n", "", "", "", "else", ":", "\n", "        ", "aps", "=", "[", "]", "\n", "for", "cls_result", "in", "eval_results", ":", "\n", "            ", "if", "cls_result", "[", "'num_gts'", "]", ">", "0", ":", "\n", "                ", "aps", ".", "append", "(", "cls_result", "[", "'ap'", "]", ")", "\n", "", "", "mean_ap", "=", "np", ".", "array", "(", "aps", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "if", "aps", "else", "0.0", "\n", "\n", "", "print_map_summary", "(", "\n", "mean_ap", ",", "eval_results", ",", "dataset", ",", "area_ranges", ",", "logger", "=", "logger", ")", "\n", "\n", "return", "mean_ap", ",", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.mean_ap.print_map_summary": [[404, 470], ["isinstance", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "range", "len", "mmcv.is_str", "isinstance", "range", "table_data.append", "terminaltables.AsciiTable", "mmcv.utils.print_log", "len", "str", "class_names.get_classes", "mmcv.utils.print_log", "table_data.append", "numpy.array", "range"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.get_classes"], ["", "def", "print_map_summary", "(", "mean_ap", ",", "\n", "results", ",", "\n", "dataset", "=", "None", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Print mAP and results of each class.\n\n    A table will be printed to show the gts/dets/recall/AP of each class and\n    the mAP.\n\n    Args:\n        mean_ap (float): Calculated from `eval_map()`.\n        results (list[dict]): Calculated from `eval_map()`.\n        dataset (list[str] | str | None): Dataset name or dataset classes.\n        scale_ranges (list[tuple] | None): Range of scales to be evaluated.\n        logger (logging.Logger | str | None): The way to print the mAP\n            summary. See `mmcv.utils.print_log()` for details. Default: None.\n    \"\"\"", "\n", "\n", "if", "logger", "==", "'silent'", ":", "\n", "        ", "return", "\n", "\n", "", "if", "isinstance", "(", "results", "[", "0", "]", "[", "'ap'", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "num_scales", "=", "len", "(", "results", "[", "0", "]", "[", "'ap'", "]", ")", "\n", "", "else", ":", "\n", "        ", "num_scales", "=", "1", "\n", "\n", "", "if", "scale_ranges", "is", "not", "None", ":", "\n", "        ", "assert", "len", "(", "scale_ranges", ")", "==", "num_scales", "\n", "\n", "", "num_classes", "=", "len", "(", "results", ")", "\n", "\n", "recalls", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "aps", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "num_gts", "=", "np", ".", "zeros", "(", "(", "num_scales", ",", "num_classes", ")", ",", "dtype", "=", "int", ")", "\n", "for", "i", ",", "cls_result", "in", "enumerate", "(", "results", ")", ":", "\n", "        ", "if", "cls_result", "[", "'recall'", "]", ".", "size", ">", "0", ":", "\n", "            ", "recalls", "[", ":", ",", "i", "]", "=", "np", ".", "array", "(", "cls_result", "[", "'recall'", "]", ",", "ndmin", "=", "2", ")", "[", ":", ",", "-", "1", "]", "\n", "", "aps", "[", ":", ",", "i", "]", "=", "cls_result", "[", "'ap'", "]", "\n", "num_gts", "[", ":", ",", "i", "]", "=", "cls_result", "[", "'num_gts'", "]", "\n", "\n", "", "if", "dataset", "is", "None", ":", "\n", "        ", "label_names", "=", "[", "str", "(", "i", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "", "elif", "mmcv", ".", "is_str", "(", "dataset", ")", ":", "\n", "        ", "label_names", "=", "get_classes", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "label_names", "=", "dataset", "\n", "\n", "", "if", "not", "isinstance", "(", "mean_ap", ",", "list", ")", ":", "\n", "        ", "mean_ap", "=", "[", "mean_ap", "]", "\n", "\n", "", "header", "=", "[", "'class'", ",", "'gts'", ",", "'dets'", ",", "'recall'", ",", "'ap'", "]", "\n", "for", "i", "in", "range", "(", "num_scales", ")", ":", "\n", "        ", "if", "scale_ranges", "is", "not", "None", ":", "\n", "            ", "print_log", "(", "f'Scale range {scale_ranges[i]}'", ",", "logger", "=", "logger", ")", "\n", "", "table_data", "=", "[", "header", "]", "\n", "for", "j", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "row_data", "=", "[", "\n", "label_names", "[", "j", "]", ",", "num_gts", "[", "i", ",", "j", "]", ",", "results", "[", "j", "]", "[", "'num_dets'", "]", ",", "\n", "f'{recalls[i, j]:.3f}'", ",", "f'{aps[i, j]:.3f}'", "\n", "]", "\n", "table_data", ".", "append", "(", "row_data", ")", "\n", "", "table_data", ".", "append", "(", "[", "'mAP'", ",", "''", ",", "''", ",", "''", ",", "f'{mean_ap[i]:.3f}'", "]", ")", "\n", "table", "=", "AsciiTable", "(", "table_data", ")", "\n", "table", ".", "inner_footing_row_border", "=", "True", "\n", "print_log", "(", "'\\n'", "+", "table", ".", "table", ",", "logger", "=", "logger", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.recall._recalls": [[10, 41], ["sum", "numpy.zeros", "enumerate", "numpy.fliplr", "numpy.zeros", "enumerate", "numpy.zeros", "range", "numpy.sort", "[].copy", "numpy.zeros", "range", "numpy.hstack", "float", "numpy.hstack", "[].copy.argmax", "max_ious.argmax", "numpy.arange"], "function", ["None"], ["def", "_recalls", "(", "all_ious", ",", "proposal_nums", ",", "thrs", ")", ":", "\n", "\n", "    ", "img_num", "=", "all_ious", ".", "shape", "[", "0", "]", "\n", "total_gt_num", "=", "sum", "(", "[", "ious", ".", "shape", "[", "0", "]", "for", "ious", "in", "all_ious", "]", ")", "\n", "\n", "_ious", "=", "np", ".", "zeros", "(", "(", "proposal_nums", ".", "size", ",", "total_gt_num", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "proposal_num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "        ", "tmp_ious", "=", "np", ".", "zeros", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "img_num", ")", ":", "\n", "            ", "ious", "=", "all_ious", "[", "i", "]", "[", ":", ",", ":", "proposal_num", "]", ".", "copy", "(", ")", "\n", "gt_ious", "=", "np", ".", "zeros", "(", "(", "ious", ".", "shape", "[", "0", "]", ")", ")", "\n", "if", "ious", ".", "size", "==", "0", ":", "\n", "                ", "tmp_ious", "=", "np", ".", "hstack", "(", "(", "tmp_ious", ",", "gt_ious", ")", ")", "\n", "continue", "\n", "", "for", "j", "in", "range", "(", "ious", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "gt_max_overlaps", "=", "ious", ".", "argmax", "(", "axis", "=", "1", ")", "\n", "max_ious", "=", "ious", "[", "np", ".", "arange", "(", "0", ",", "ious", ".", "shape", "[", "0", "]", ")", ",", "gt_max_overlaps", "]", "\n", "gt_idx", "=", "max_ious", ".", "argmax", "(", ")", "\n", "gt_ious", "[", "j", "]", "=", "max_ious", "[", "gt_idx", "]", "\n", "box_idx", "=", "gt_max_overlaps", "[", "gt_idx", "]", "\n", "ious", "[", "gt_idx", ",", ":", "]", "=", "-", "1", "\n", "ious", "[", ":", ",", "box_idx", "]", "=", "-", "1", "\n", "", "tmp_ious", "=", "np", ".", "hstack", "(", "(", "tmp_ious", ",", "gt_ious", ")", ")", "\n", "", "_ious", "[", "k", ",", ":", "]", "=", "tmp_ious", "\n", "\n", "", "_ious", "=", "np", ".", "fliplr", "(", "np", ".", "sort", "(", "_ious", ",", "axis", "=", "1", ")", ")", "\n", "recalls", "=", "np", ".", "zeros", "(", "(", "proposal_nums", ".", "size", ",", "thrs", ".", "size", ")", ")", "\n", "for", "i", ",", "thr", "in", "enumerate", "(", "thrs", ")", ":", "\n", "        ", "recalls", "[", ":", ",", "i", "]", "=", "(", "_ious", ">=", "thr", ")", ".", "sum", "(", "axis", "=", "1", ")", "/", "float", "(", "total_gt_num", ")", "\n", "\n", "", "return", "recalls", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.recall.set_recall_param": [[43, 62], ["isinstance", "numpy.array", "isinstance", "numpy.array", "isinstance", "numpy.array", "numpy.array", "isinstance", "numpy.array"], "function", ["None"], ["", "def", "set_recall_param", "(", "proposal_nums", ",", "iou_thrs", ")", ":", "\n", "    ", "\"\"\"Check proposal_nums and iou_thrs and set correct format.\"\"\"", "\n", "if", "isinstance", "(", "proposal_nums", ",", "Sequence", ")", ":", "\n", "        ", "_proposal_nums", "=", "np", ".", "array", "(", "proposal_nums", ")", "\n", "", "elif", "isinstance", "(", "proposal_nums", ",", "int", ")", ":", "\n", "        ", "_proposal_nums", "=", "np", ".", "array", "(", "[", "proposal_nums", "]", ")", "\n", "", "else", ":", "\n", "        ", "_proposal_nums", "=", "proposal_nums", "\n", "\n", "", "if", "iou_thrs", "is", "None", ":", "\n", "        ", "_iou_thrs", "=", "np", ".", "array", "(", "[", "0.5", "]", ")", "\n", "", "elif", "isinstance", "(", "iou_thrs", ",", "Sequence", ")", ":", "\n", "        ", "_iou_thrs", "=", "np", ".", "array", "(", "iou_thrs", ")", "\n", "", "elif", "isinstance", "(", "iou_thrs", ",", "float", ")", ":", "\n", "        ", "_iou_thrs", "=", "np", ".", "array", "(", "[", "iou_thrs", "]", ")", "\n", "", "else", ":", "\n", "        ", "_iou_thrs", "=", "iou_thrs", "\n", "\n", "", "return", "_proposal_nums", ",", "_iou_thrs", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.recall.eval_recalls": [[64, 107], ["len", "recall.set_recall_param", "range", "numpy.array", "recall._recalls", "recall.print_recall_summary", "len", "min", "np.array.append", "numpy.zeros", "bbox_overlaps.bbox_overlaps", "numpy.argsort"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.recall.set_recall_param", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.recall._recalls", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.recall.print_recall_summary", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.iou2d_calculator.bbox_overlaps"], ["", "def", "eval_recalls", "(", "gts", ",", "\n", "proposals", ",", "\n", "proposal_nums", "=", "None", ",", "\n", "iou_thrs", "=", "0.5", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculate recalls.\n\n    Args:\n        gts (list[ndarray]): a list of arrays of shape (n, 4)\n        proposals (list[ndarray]): a list of arrays of shape (k, 4) or (k, 5)\n        proposal_nums (int | Sequence[int]): Top N proposals to be evaluated.\n        iou_thrs (float | Sequence[float]): IoU thresholds. Default: 0.5.\n        logger (logging.Logger | str | None): The way to print the recall\n            summary. See `mmcv.utils.print_log()` for details. Default: None.\n\n    Returns:\n        ndarray: recalls of different ious and proposal nums\n    \"\"\"", "\n", "\n", "img_num", "=", "len", "(", "gts", ")", "\n", "assert", "img_num", "==", "len", "(", "proposals", ")", "\n", "\n", "proposal_nums", ",", "iou_thrs", "=", "set_recall_param", "(", "proposal_nums", ",", "iou_thrs", ")", "\n", "\n", "all_ious", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "img_num", ")", ":", "\n", "        ", "if", "proposals", "[", "i", "]", ".", "ndim", "==", "2", "and", "proposals", "[", "i", "]", ".", "shape", "[", "1", "]", "==", "5", ":", "\n", "            ", "scores", "=", "proposals", "[", "i", "]", "[", ":", ",", "4", "]", "\n", "sort_idx", "=", "np", ".", "argsort", "(", "scores", ")", "[", ":", ":", "-", "1", "]", "\n", "img_proposal", "=", "proposals", "[", "i", "]", "[", "sort_idx", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "img_proposal", "=", "proposals", "[", "i", "]", "\n", "", "prop_num", "=", "min", "(", "img_proposal", ".", "shape", "[", "0", "]", ",", "proposal_nums", "[", "-", "1", "]", ")", "\n", "if", "gts", "[", "i", "]", "is", "None", "or", "gts", "[", "i", "]", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "ious", "=", "np", ".", "zeros", "(", "(", "0", ",", "img_proposal", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "ious", "=", "bbox_overlaps", "(", "gts", "[", "i", "]", ",", "img_proposal", "[", ":", "prop_num", ",", ":", "4", "]", ")", "\n", "", "all_ious", ".", "append", "(", "ious", ")", "\n", "", "all_ious", "=", "np", ".", "array", "(", "all_ious", ")", "\n", "recalls", "=", "_recalls", "(", "all_ious", ",", "proposal_nums", ",", "iou_thrs", ")", "\n", "\n", "print_recall_summary", "(", "recalls", ",", "proposal_nums", ",", "iou_thrs", ",", "logger", "=", "logger", ")", "\n", "return", "recalls", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.recall.print_recall_summary": [[109, 140], ["numpy.array", "numpy.array", "enumerate", "terminaltables.AsciiTable", "mmcv.utils.print_log", "numpy.arange", "numpy.arange", "iou_thrs[].tolist", "row.insert", "table_data.append", "recalls[].tolist"], "function", ["None"], ["", "def", "print_recall_summary", "(", "recalls", ",", "\n", "proposal_nums", ",", "\n", "iou_thrs", ",", "\n", "row_idxs", "=", "None", ",", "\n", "col_idxs", "=", "None", ",", "\n", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Print recalls in a table.\n\n    Args:\n        recalls (ndarray): calculated from `bbox_recalls`\n        proposal_nums (ndarray or list): top N proposals\n        iou_thrs (ndarray or list): iou thresholds\n        row_idxs (ndarray): which rows(proposal nums) to print\n        col_idxs (ndarray): which cols(iou thresholds) to print\n        logger (logging.Logger | str | None): The way to print the recall\n            summary. See `mmcv.utils.print_log()` for details. Default: None.\n    \"\"\"", "\n", "proposal_nums", "=", "np", ".", "array", "(", "proposal_nums", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "iou_thrs", "=", "np", ".", "array", "(", "iou_thrs", ")", "\n", "if", "row_idxs", "is", "None", ":", "\n", "        ", "row_idxs", "=", "np", ".", "arange", "(", "proposal_nums", ".", "size", ")", "\n", "", "if", "col_idxs", "is", "None", ":", "\n", "        ", "col_idxs", "=", "np", ".", "arange", "(", "iou_thrs", ".", "size", ")", "\n", "", "row_header", "=", "[", "''", "]", "+", "iou_thrs", "[", "col_idxs", "]", ".", "tolist", "(", ")", "\n", "table_data", "=", "[", "row_header", "]", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", "[", "row_idxs", "]", ")", ":", "\n", "        ", "row", "=", "[", "f'{val:.3f}'", "for", "val", "in", "recalls", "[", "row_idxs", "[", "i", "]", ",", "col_idxs", "]", ".", "tolist", "(", ")", "]", "\n", "row", ".", "insert", "(", "0", ",", "num", ")", "\n", "table_data", ".", "append", "(", "row", ")", "\n", "", "table", "=", "AsciiTable", "(", "table_data", ")", "\n", "print_log", "(", "'\\n'", "+", "table", ".", "table", ",", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.recall.plot_num_recall": [[142, 165], ["isinstance", "isinstance", "plt.figure", "plt.plot", "plt.xlabel", "plt.ylabel", "plt.axis", "plt.figure.show", "proposal_nums.tolist", "recalls.tolist", "proposal_nums.max"], "function", ["None"], ["", "def", "plot_num_recall", "(", "recalls", ",", "proposal_nums", ")", ":", "\n", "    ", "\"\"\"Plot Proposal_num-Recalls curve.\n\n    Args:\n        recalls(ndarray or list): shape (k,)\n        proposal_nums(ndarray or list): same shape as `recalls`\n    \"\"\"", "\n", "if", "isinstance", "(", "proposal_nums", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_proposal_nums", "=", "proposal_nums", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_proposal_nums", "=", "proposal_nums", "\n", "", "if", "isinstance", "(", "recalls", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_recalls", "=", "recalls", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_recalls", "=", "recalls", "\n", "\n", "", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "[", "0", "]", "+", "_proposal_nums", ",", "[", "0", "]", "+", "_recalls", ")", "\n", "plt", ".", "xlabel", "(", "'Proposal num'", ")", "\n", "plt", ".", "ylabel", "(", "'Recall'", ")", "\n", "plt", ".", "axis", "(", "[", "0", ",", "proposal_nums", ".", "max", "(", ")", ",", "0", ",", "1", "]", ")", "\n", "f", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.recall.plot_iou_recall": [[167, 190], ["isinstance", "isinstance", "plt.figure", "plt.plot", "plt.xlabel", "plt.ylabel", "plt.axis", "plt.figure.show", "iou_thrs.tolist", "recalls.tolist", "iou_thrs.min"], "function", ["None"], ["", "def", "plot_iou_recall", "(", "recalls", ",", "iou_thrs", ")", ":", "\n", "    ", "\"\"\"Plot IoU-Recalls curve.\n\n    Args:\n        recalls(ndarray or list): shape (k,)\n        iou_thrs(ndarray or list): same shape as `recalls`\n    \"\"\"", "\n", "if", "isinstance", "(", "iou_thrs", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_iou_thrs", "=", "iou_thrs", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_iou_thrs", "=", "iou_thrs", "\n", "", "if", "isinstance", "(", "recalls", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "_recalls", "=", "recalls", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "        ", "_recalls", "=", "recalls", "\n", "\n", "", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "_iou_thrs", "+", "[", "1.0", "]", ",", "_recalls", "+", "[", "0.", "]", ")", "\n", "plt", ".", "xlabel", "(", "'IoU'", ")", "\n", "plt", ".", "ylabel", "(", "'Recall'", ")", "\n", "plt", ".", "axis", "(", "[", "iou_thrs", ".", "min", "(", ")", ",", "1", ",", "0", ",", "1", "]", ")", "\n", "f", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.bbox_overlaps.bbox_overlaps": [[4, 49], ["bboxes1.astype.astype", "bboxes2.astype.astype", "numpy.zeros", "range", "numpy.zeros", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["def", "bbox_overlaps", "(", "bboxes1", ",", "bboxes2", ",", "mode", "=", "'iou'", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Calculate the ious between each bbox of bboxes1 and bboxes2.\n\n    Args:\n        bboxes1(ndarray): shape (n, 4)\n        bboxes2(ndarray): shape (k, 4)\n        mode(str): iou (intersection over union) or iof (intersection\n            over foreground)\n\n    Returns:\n        ious(ndarray): shape (n, k)\n    \"\"\"", "\n", "\n", "assert", "mode", "in", "[", "'iou'", ",", "'iof'", "]", "\n", "\n", "bboxes1", "=", "bboxes1", ".", "astype", "(", "np", ".", "float32", ")", "\n", "bboxes2", "=", "bboxes2", ".", "astype", "(", "np", ".", "float32", ")", "\n", "rows", "=", "bboxes1", ".", "shape", "[", "0", "]", "\n", "cols", "=", "bboxes2", ".", "shape", "[", "0", "]", "\n", "ious", "=", "np", ".", "zeros", "(", "(", "rows", ",", "cols", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "rows", "*", "cols", "==", "0", ":", "\n", "        ", "return", "ious", "\n", "", "exchange", "=", "False", "\n", "if", "bboxes1", ".", "shape", "[", "0", "]", ">", "bboxes2", ".", "shape", "[", "0", "]", ":", "\n", "        ", "bboxes1", ",", "bboxes2", "=", "bboxes2", ",", "bboxes1", "\n", "ious", "=", "np", ".", "zeros", "(", "(", "cols", ",", "rows", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "exchange", "=", "True", "\n", "", "area1", "=", "(", "bboxes1", "[", ":", ",", "2", "]", "-", "bboxes1", "[", ":", ",", "0", "]", ")", "*", "(", "bboxes1", "[", ":", ",", "3", "]", "-", "bboxes1", "[", ":", ",", "1", "]", ")", "\n", "area2", "=", "(", "bboxes2", "[", ":", ",", "2", "]", "-", "bboxes2", "[", ":", ",", "0", "]", ")", "*", "(", "bboxes2", "[", ":", ",", "3", "]", "-", "bboxes2", "[", ":", ",", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "bboxes1", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "x_start", "=", "np", ".", "maximum", "(", "bboxes1", "[", "i", ",", "0", "]", ",", "bboxes2", "[", ":", ",", "0", "]", ")", "\n", "y_start", "=", "np", ".", "maximum", "(", "bboxes1", "[", "i", ",", "1", "]", ",", "bboxes2", "[", ":", ",", "1", "]", ")", "\n", "x_end", "=", "np", ".", "minimum", "(", "bboxes1", "[", "i", ",", "2", "]", ",", "bboxes2", "[", ":", ",", "2", "]", ")", "\n", "y_end", "=", "np", ".", "minimum", "(", "bboxes1", "[", "i", ",", "3", "]", ",", "bboxes2", "[", ":", ",", "3", "]", ")", "\n", "overlap", "=", "np", ".", "maximum", "(", "x_end", "-", "x_start", ",", "0", ")", "*", "np", ".", "maximum", "(", "\n", "y_end", "-", "y_start", ",", "0", ")", "\n", "if", "mode", "==", "'iou'", ":", "\n", "            ", "union", "=", "area1", "[", "i", "]", "+", "area2", "-", "overlap", "\n", "", "else", ":", "\n", "            ", "union", "=", "area1", "[", "i", "]", "if", "not", "exchange", "else", "area2", "\n", "", "union", "=", "np", ".", "maximum", "(", "union", ",", "eps", ")", "\n", "ious", "[", "i", ",", ":", "]", "=", "overlap", "/", "union", "\n", "", "if", "exchange", ":", "\n", "        ", "ious", "=", "ious", ".", "T", "\n", "", "return", "ious", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.class_names.wider_face_classes": [[4, 6], ["None"], "function", ["None"], ["def", "wider_face_classes", "(", ")", ":", "\n", "    ", "return", "[", "'face'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.class_names.voc_classes": [[8, 13], ["None"], "function", ["None"], ["", "def", "voc_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'aeroplane'", ",", "'bicycle'", ",", "'bird'", ",", "'boat'", ",", "'bottle'", ",", "'bus'", ",", "'car'", ",", "'cat'", ",", "\n", "'chair'", ",", "'cow'", ",", "'diningtable'", ",", "'dog'", ",", "'horse'", ",", "'motorbike'", ",", "'person'", ",", "\n", "'pottedplant'", ",", "'sheep'", ",", "'sofa'", ",", "'train'", ",", "'tvmonitor'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.class_names.imagenet_det_classes": [[16, 54], ["None"], "function", ["None"], ["", "def", "imagenet_det_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'accordion'", ",", "'airplane'", ",", "'ant'", ",", "'antelope'", ",", "'apple'", ",", "'armadillo'", ",", "\n", "'artichoke'", ",", "'axe'", ",", "'baby_bed'", ",", "'backpack'", ",", "'bagel'", ",", "'balance_beam'", ",", "\n", "'banana'", ",", "'band_aid'", ",", "'banjo'", ",", "'baseball'", ",", "'basketball'", ",", "'bathing_cap'", ",", "\n", "'beaker'", ",", "'bear'", ",", "'bee'", ",", "'bell_pepper'", ",", "'bench'", ",", "'bicycle'", ",", "'binder'", ",", "\n", "'bird'", ",", "'bookshelf'", ",", "'bow_tie'", ",", "'bow'", ",", "'bowl'", ",", "'brassiere'", ",", "'burrito'", ",", "\n", "'bus'", ",", "'butterfly'", ",", "'camel'", ",", "'can_opener'", ",", "'car'", ",", "'cart'", ",", "'cattle'", ",", "\n", "'cello'", ",", "'centipede'", ",", "'chain_saw'", ",", "'chair'", ",", "'chime'", ",", "'cocktail_shaker'", ",", "\n", "'coffee_maker'", ",", "'computer_keyboard'", ",", "'computer_mouse'", ",", "'corkscrew'", ",", "\n", "'cream'", ",", "'croquet_ball'", ",", "'crutch'", ",", "'cucumber'", ",", "'cup_or_mug'", ",", "'diaper'", ",", "\n", "'digital_clock'", ",", "'dishwasher'", ",", "'dog'", ",", "'domestic_cat'", ",", "'dragonfly'", ",", "\n", "'drum'", ",", "'dumbbell'", ",", "'electric_fan'", ",", "'elephant'", ",", "'face_powder'", ",", "'fig'", ",", "\n", "'filing_cabinet'", ",", "'flower_pot'", ",", "'flute'", ",", "'fox'", ",", "'french_horn'", ",", "'frog'", ",", "\n", "'frying_pan'", ",", "'giant_panda'", ",", "'goldfish'", ",", "'golf_ball'", ",", "'golfcart'", ",", "\n", "'guacamole'", ",", "'guitar'", ",", "'hair_dryer'", ",", "'hair_spray'", ",", "'hamburger'", ",", "\n", "'hammer'", ",", "'hamster'", ",", "'harmonica'", ",", "'harp'", ",", "'hat_with_a_wide_brim'", ",", "\n", "'head_cabbage'", ",", "'helmet'", ",", "'hippopotamus'", ",", "'horizontal_bar'", ",", "'horse'", ",", "\n", "'hotdog'", ",", "'iPod'", ",", "'isopod'", ",", "'jellyfish'", ",", "'koala_bear'", ",", "'ladle'", ",", "\n", "'ladybug'", ",", "'lamp'", ",", "'laptop'", ",", "'lemon'", ",", "'lion'", ",", "'lipstick'", ",", "'lizard'", ",", "\n", "'lobster'", ",", "'maillot'", ",", "'maraca'", ",", "'microphone'", ",", "'microwave'", ",", "'milk_can'", ",", "\n", "'miniskirt'", ",", "'monkey'", ",", "'motorcycle'", ",", "'mushroom'", ",", "'nail'", ",", "'neck_brace'", ",", "\n", "'oboe'", ",", "'orange'", ",", "'otter'", ",", "'pencil_box'", ",", "'pencil_sharpener'", ",", "'perfume'", ",", "\n", "'person'", ",", "'piano'", ",", "'pineapple'", ",", "'ping-pong_ball'", ",", "'pitcher'", ",", "'pizza'", ",", "\n", "'plastic_bag'", ",", "'plate_rack'", ",", "'pomegranate'", ",", "'popsicle'", ",", "'porcupine'", ",", "\n", "'power_drill'", ",", "'pretzel'", ",", "'printer'", ",", "'puck'", ",", "'punching_bag'", ",", "'purse'", ",", "\n", "'rabbit'", ",", "'racket'", ",", "'ray'", ",", "'red_panda'", ",", "'refrigerator'", ",", "\n", "'remote_control'", ",", "'rubber_eraser'", ",", "'rugby_ball'", ",", "'ruler'", ",", "\n", "'salt_or_pepper_shaker'", ",", "'saxophone'", ",", "'scorpion'", ",", "'screwdriver'", ",", "\n", "'seal'", ",", "'sheep'", ",", "'ski'", ",", "'skunk'", ",", "'snail'", ",", "'snake'", ",", "'snowmobile'", ",", "\n", "'snowplow'", ",", "'soap_dispenser'", ",", "'soccer_ball'", ",", "'sofa'", ",", "'spatula'", ",", "\n", "'squirrel'", ",", "'starfish'", ",", "'stethoscope'", ",", "'stove'", ",", "'strainer'", ",", "\n", "'strawberry'", ",", "'stretcher'", ",", "'sunglasses'", ",", "'swimming_trunks'", ",", "'swine'", ",", "\n", "'syringe'", ",", "'table'", ",", "'tape_player'", ",", "'tennis_ball'", ",", "'tick'", ",", "'tie'", ",", "\n", "'tiger'", ",", "'toaster'", ",", "'traffic_light'", ",", "'train'", ",", "'trombone'", ",", "'trumpet'", ",", "\n", "'turtle'", ",", "'tv_or_monitor'", ",", "'unicycle'", ",", "'vacuum'", ",", "'violin'", ",", "\n", "'volleyball'", ",", "'waffle_iron'", ",", "'washer'", ",", "'water_bottle'", ",", "'watercraft'", ",", "\n", "'whale'", ",", "'wine_bottle'", ",", "'zebra'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.class_names.imagenet_vid_classes": [[57, 64], ["None"], "function", ["None"], ["", "def", "imagenet_vid_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'airplane'", ",", "'antelope'", ",", "'bear'", ",", "'bicycle'", ",", "'bird'", ",", "'bus'", ",", "'car'", ",", "\n", "'cattle'", ",", "'dog'", ",", "'domestic_cat'", ",", "'elephant'", ",", "'fox'", ",", "'giant_panda'", ",", "\n", "'hamster'", ",", "'horse'", ",", "'lion'", ",", "'lizard'", ",", "'monkey'", ",", "'motorcycle'", ",", "'rabbit'", ",", "\n", "'red_panda'", ",", "'sheep'", ",", "'snake'", ",", "'squirrel'", ",", "'tiger'", ",", "'train'", ",", "'turtle'", ",", "\n", "'watercraft'", ",", "'whale'", ",", "'zebra'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.class_names.coco_classes": [[67, 69], ["None"], "function", ["None"], ["", "def", "coco_classes", "(", ")", ":", "\n", "    ", "return", "[", "'holothurian'", ",", "'echinus'", ",", "'scallop'", ",", "'starfish'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.class_names.cityscapes_classes": [[71, 75], ["None"], "function", ["None"], ["", "def", "cityscapes_classes", "(", ")", ":", "\n", "    ", "return", "[", "\n", "'person'", ",", "'rider'", ",", "'car'", ",", "'truck'", ",", "'bus'", ",", "'train'", ",", "'motorcycle'", ",", "\n", "'bicycle'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.class_names.get_classes": [[88, 103], ["dataset_aliases.items", "mmcv.is_str", "TypeError", "eval", "ValueError", "type"], "function", ["None"], ["def", "get_classes", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Get class names of a dataset.\"\"\"", "\n", "alias2name", "=", "{", "}", "\n", "for", "name", ",", "aliases", "in", "dataset_aliases", ".", "items", "(", ")", ":", "\n", "        ", "for", "alias", "in", "aliases", ":", "\n", "            ", "alias2name", "[", "alias", "]", "=", "name", "\n", "\n", "", "", "if", "mmcv", ".", "is_str", "(", "dataset", ")", ":", "\n", "        ", "if", "dataset", "in", "alias2name", ":", "\n", "            ", "labels", "=", "eval", "(", "alias2name", "[", "dataset", "]", "+", "'_classes()'", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unrecognized dataset: {dataset}'", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f'dataset must a str, but got {type(dataset)}'", ")", "\n", "", "return", "labels", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.__init__": [[49, 80], ["mmdet.utils.get_root_logger", "isinstance", "TypeError", "ValueError", "warnings.warn", "isinstance", "eval_hooks.EvalHook._init_rule", "type"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook._init_rule"], ["def", "__init__", "(", "self", ",", "\n", "dataloader", ",", "\n", "start", "=", "None", ",", "\n", "interval", "=", "1", ",", "\n", "by_epoch", "=", "True", ",", "\n", "save_best", "=", "None", ",", "\n", "rule", "=", "None", ",", "\n", "**", "eval_kwargs", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "dataloader", ",", "DataLoader", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'dataloader must be a pytorch DataLoader, but got'", "\n", "f' {type(dataloader)}'", ")", "\n", "", "if", "not", "interval", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f'interval must be positive, but got {interval}'", ")", "\n", "", "if", "start", "is", "not", "None", "and", "start", "<", "0", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "f'The evaluation start epoch {start} is smaller than 0, '", "\n", "f'use 0 instead'", ",", "UserWarning", ")", "\n", "start", "=", "0", "\n", "", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "by_epoch", "=", "by_epoch", "\n", "self", ".", "start", "=", "start", "\n", "assert", "isinstance", "(", "save_best", ",", "str", ")", "or", "save_best", "is", "None", "\n", "self", ".", "save_best", "=", "save_best", "\n", "self", ".", "eval_kwargs", "=", "eval_kwargs", "\n", "self", ".", "initial_epoch_flag", "=", "True", "\n", "\n", "self", ".", "logger", "=", "get_root_logger", "(", ")", "\n", "\n", "if", "self", ".", "save_best", "is", "not", "None", ":", "\n", "            ", "self", ".", "_init_rule", "(", "rule", ",", "self", ".", "save_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook._init_rule": [[81, 107], ["KeyError", "any", "any", "ValueError"], "methods", ["None"], ["", "", "def", "_init_rule", "(", "self", ",", "rule", ",", "key_indicator", ")", ":", "\n", "        ", "\"\"\"Initialize rule, key_indicator, comparison_func, and best score.\n\n        Args:\n            rule (str | None): Comparison rule for best score.\n            key_indicator (str | None): Key indicator to determine the\n                comparison rule.\n        \"\"\"", "\n", "if", "rule", "not", "in", "self", ".", "rule_map", "and", "rule", "is", "not", "None", ":", "\n", "            ", "raise", "KeyError", "(", "f'rule must be greater, less or None, '", "\n", "f'but got {rule}.'", ")", "\n", "\n", "", "if", "rule", "is", "None", ":", "\n", "            ", "if", "key_indicator", "!=", "'auto'", ":", "\n", "                ", "if", "any", "(", "key", "in", "key_indicator", "for", "key", "in", "self", ".", "greater_keys", ")", ":", "\n", "                    ", "rule", "=", "'greater'", "\n", "", "elif", "any", "(", "key", "in", "key_indicator", "for", "key", "in", "self", ".", "less_keys", ")", ":", "\n", "                    ", "rule", "=", "'less'", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "f'Cannot infer the rule for key '", "\n", "f'{key_indicator}, thus a specific rule '", "\n", "f'must be specified.'", ")", "\n", "", "", "", "self", ".", "rule", "=", "rule", "\n", "self", ".", "key_indicator", "=", "key_indicator", "\n", "if", "self", ".", "rule", "is", "not", "None", ":", "\n", "            ", "self", ".", "compare_func", "=", "self", ".", "rule_map", "[", "self", ".", "rule", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.before_run": [[108, 114], ["runner.meta.setdefault", "warnings.warn", "dict", "dict"], "methods", ["None"], ["", "", "def", "before_run", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "self", ".", "save_best", "is", "not", "None", ":", "\n", "            ", "if", "runner", ".", "meta", "is", "None", ":", "\n", "                ", "warnings", ".", "warn", "(", "'runner.meta is None. Creating a empty one.'", ")", "\n", "runner", ".", "meta", "=", "dict", "(", ")", "\n", "", "runner", ".", "meta", ".", "setdefault", "(", "'hook_msgs'", ",", "dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.before_train_epoch": [[115, 122], ["eval_hooks.EvalHook.after_train_epoch"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.DistEvalHook.after_train_epoch"], ["", "", "def", "before_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"Evaluate the model only at the start of training.\"\"\"", "\n", "if", "not", "self", ".", "initial_epoch_flag", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "start", "is", "not", "None", "and", "runner", ".", "epoch", ">=", "self", ".", "start", ":", "\n", "            ", "self", ".", "after_train_epoch", "(", "runner", ")", "\n", "", "self", ".", "initial_epoch_flag", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.evaluation_flag": [[123, 141], ["eval_hooks.EvalHook.every_n_epochs"], "methods", ["None"], ["", "def", "evaluation_flag", "(", "self", ",", "runner", ")", ":", "\n", "        ", "\"\"\"Judge whether to perform_evaluation after this epoch.\n\n        Returns:\n            bool: The flag indicating whether to perform evaluation.\n        \"\"\"", "\n", "if", "self", ".", "start", "is", "None", ":", "\n", "            ", "if", "not", "self", ".", "every_n_epochs", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "# No evaluation during the interval epochs.", "\n", "                ", "return", "False", "\n", "", "", "elif", "(", "runner", ".", "epoch", "+", "1", ")", "<", "self", ".", "start", ":", "\n", "# No evaluation if start is larger than the current epoch.", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "# Evaluation only at epochs 3, 5, 7... if start==3 and interval==2", "\n", "            ", "if", "(", "runner", ".", "epoch", "+", "1", "-", "self", ".", "start", ")", "%", "self", ".", "interval", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.after_train_epoch": [[142, 150], ["single_gpu_test", "eval_hooks.EvalHook.evaluate", "eval_hooks.EvalHook.save_best_checkpoint", "eval_hooks.EvalHook.evaluation_flag"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.single_gpu_test", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.save_best_checkpoint", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.evaluation_flag"], ["", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "by_epoch", "or", "not", "self", ".", "evaluation_flag", "(", "runner", ")", ":", "\n", "            ", "return", "\n", "", "from", "mmdet", ".", "apis", "import", "single_gpu_test", "\n", "results", "=", "single_gpu_test", "(", "runner", ".", "model", ",", "self", ".", "dataloader", ",", "show", "=", "False", ")", "\n", "key_score", "=", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "if", "self", ".", "save_best", ":", "\n", "            ", "self", ".", "save_best_checkpoint", "(", "runner", ",", "key_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.after_train_iter": [[151, 159], ["single_gpu_test", "eval_hooks.EvalHook.evaluate", "eval_hooks.EvalHook.save_best_checkpoint", "eval_hooks.EvalHook.every_n_iters"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.single_gpu_test", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.save_best_checkpoint"], ["", "", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "self", ".", "by_epoch", "or", "not", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "", "from", "mmdet", ".", "apis", "import", "single_gpu_test", "\n", "results", "=", "single_gpu_test", "(", "runner", ".", "model", ",", "self", ".", "dataloader", ",", "show", "=", "False", ")", "\n", "key_score", "=", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "if", "self", ".", "save_best", ":", "\n", "            ", "self", ".", "save_best_checkpoint", "(", "runner", ",", "key_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.save_best_checkpoint": [[160, 173], ["runner.meta[].get", "eval_hooks.EvalHook.compare_func", "mmcv.symlink", "eval_hooks.EvalHook.logger.info", "os.join"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.info"], ["", "", "def", "save_best_checkpoint", "(", "self", ",", "runner", ",", "key_score", ")", ":", "\n", "        ", "best_score", "=", "runner", ".", "meta", "[", "'hook_msgs'", "]", ".", "get", "(", "\n", "'best_score'", ",", "self", ".", "init_value_map", "[", "self", ".", "rule", "]", ")", "\n", "if", "self", ".", "compare_func", "(", "key_score", ",", "best_score", ")", ":", "\n", "            ", "best_score", "=", "key_score", "\n", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_score'", "]", "=", "best_score", "\n", "last_ckpt", "=", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'last_ckpt'", "]", "\n", "runner", ".", "meta", "[", "'hook_msgs'", "]", "[", "'best_ckpt'", "]", "=", "last_ckpt", "\n", "mmcv", ".", "symlink", "(", "\n", "last_ckpt", ",", "\n", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "f'best_{self.key_indicator}.pth'", ")", ")", "\n", "time_stamp", "=", "runner", ".", "epoch", "+", "1", "if", "self", ".", "by_epoch", "else", "runner", ".", "iter", "+", "1", "\n", "self", ".", "logger", ".", "info", "(", "f'Now best checkpoint is epoch_{time_stamp}.pth.'", "\n", "f'Best {self.key_indicator} is {best_score:0.4f}'", ")", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.evaluate": [[175, 188], ["eval_hooks.EvalHook.dataloader.dataset.evaluate", "eval_hooks.EvalHook.items", "eval_hooks.EvalHook._init_rule", "list", "eval_hooks.EvalHook.keys"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook._init_rule"], ["", "", "def", "evaluate", "(", "self", ",", "runner", ",", "results", ")", ":", "\n", "        ", "eval_res", "=", "self", ".", "dataloader", ".", "dataset", ".", "evaluate", "(", "\n", "results", ",", "logger", "=", "runner", ".", "logger", ",", "**", "self", ".", "eval_kwargs", ")", "\n", "for", "name", ",", "val", "in", "eval_res", ".", "items", "(", ")", ":", "\n", "            ", "runner", ".", "log_buffer", ".", "output", "[", "name", "]", "=", "val", "\n", "", "runner", ".", "log_buffer", ".", "ready", "=", "True", "\n", "if", "self", ".", "save_best", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "key_indicator", "==", "'auto'", ":", "\n", "# infer from eval_results", "\n", "                ", "self", ".", "_init_rule", "(", "self", ".", "rule", ",", "list", "(", "eval_res", ".", "keys", "(", ")", ")", "[", "0", "]", ")", "\n", "", "return", "eval_res", "[", "self", ".", "key_indicator", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.DistEvalHook.__init__": [[224, 246], ["eval_hooks.EvalHook.__init__"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "\n", "dataloader", ",", "\n", "start", "=", "None", ",", "\n", "interval", "=", "1", ",", "\n", "by_epoch", "=", "True", ",", "\n", "tmpdir", "=", "None", ",", "\n", "gpu_collect", "=", "False", ",", "\n", "save_best", "=", "None", ",", "\n", "rule", "=", "None", ",", "\n", "broadcast_bn_buffer", "=", "True", ",", "\n", "**", "eval_kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "dataloader", ",", "\n", "start", "=", "start", ",", "\n", "interval", "=", "interval", ",", "\n", "by_epoch", "=", "by_epoch", ",", "\n", "save_best", "=", "save_best", ",", "\n", "rule", "=", "rule", ",", "\n", "**", "eval_kwargs", ")", "\n", "self", ".", "broadcast_bn_buffer", "=", "broadcast_bn_buffer", "\n", "self", ".", "tmpdir", "=", "tmpdir", "\n", "self", ".", "gpu_collect", "=", "gpu_collect", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.DistEvalHook._broadcast_bn_buffer": [[247, 260], ["model.named_modules", "isinstance", "torch.broadcast", "torch.broadcast"], "methods", ["None"], ["", "def", "_broadcast_bn_buffer", "(", "self", ",", "runner", ")", ":", "\n", "# Synchronization of BatchNorm's buffer (running_mean", "\n", "# and running_var) is not supported in the DDP of pytorch,", "\n", "# which may cause the inconsistent performance of models in", "\n", "# different ranks, so we broadcast BatchNorm's buffers", "\n", "# of rank 0 to other ranks to avoid this.", "\n", "        ", "if", "self", ".", "broadcast_bn_buffer", ":", "\n", "            ", "model", "=", "runner", ".", "model", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "module", ",", "\n", "_BatchNorm", ")", "and", "module", ".", "track_running_stats", ":", "\n", "                    ", "dist", ".", "broadcast", "(", "module", ".", "running_var", ",", "0", ")", "\n", "dist", ".", "broadcast", "(", "module", ".", "running_mean", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.DistEvalHook.after_train_epoch": [[261, 282], ["multi_gpu_test", "eval_hooks.DistEvalHook._broadcast_bn_buffer", "os.join", "print", "eval_hooks.DistEvalHook.evaluate", "eval_hooks.DistEvalHook.evaluation_flag", "eval_hooks.DistEvalHook.save_best_checkpoint"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.multi_gpu_test", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.DistEvalHook._broadcast_bn_buffer", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.evaluation_flag", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.save_best_checkpoint"], ["", "", "", "", "def", "after_train_epoch", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "not", "self", ".", "by_epoch", "or", "not", "self", ".", "evaluation_flag", "(", "runner", ")", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "broadcast_bn_buffer", ":", "\n", "            ", "self", ".", "_broadcast_bn_buffer", "(", "runner", ")", "\n", "\n", "", "from", "mmdet", ".", "apis", "import", "multi_gpu_test", "\n", "tmpdir", "=", "self", ".", "tmpdir", "\n", "if", "tmpdir", "is", "None", ":", "\n", "            ", "tmpdir", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'.eval_hook'", ")", "\n", "", "results", "=", "multi_gpu_test", "(", "\n", "runner", ".", "model", ",", "\n", "self", ".", "dataloader", ",", "\n", "tmpdir", "=", "tmpdir", ",", "\n", "gpu_collect", "=", "self", ".", "gpu_collect", ")", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "key_score", "=", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "if", "self", ".", "save_best", ":", "\n", "                ", "self", ".", "save_best_checkpoint", "(", "runner", ",", "key_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.DistEvalHook.after_train_iter": [[283, 304], ["multi_gpu_test", "eval_hooks.DistEvalHook._broadcast_bn_buffer", "os.join", "print", "eval_hooks.DistEvalHook.evaluate", "eval_hooks.DistEvalHook.every_n_iters", "eval_hooks.DistEvalHook.save_best_checkpoint"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.multi_gpu_test", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.DistEvalHook._broadcast_bn_buffer", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.eval_hooks.EvalHook.save_best_checkpoint"], ["", "", "", "def", "after_train_iter", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "self", ".", "by_epoch", "or", "not", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "interval", ")", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "broadcast_bn_buffer", ":", "\n", "            ", "self", ".", "_broadcast_bn_buffer", "(", "runner", ")", "\n", "\n", "", "from", "mmdet", ".", "apis", "import", "multi_gpu_test", "\n", "tmpdir", "=", "self", ".", "tmpdir", "\n", "if", "tmpdir", "is", "None", ":", "\n", "            ", "tmpdir", "=", "osp", ".", "join", "(", "runner", ".", "work_dir", ",", "'.eval_hook'", ")", "\n", "", "results", "=", "multi_gpu_test", "(", "\n", "runner", ".", "model", ",", "\n", "self", ".", "dataloader", ",", "\n", "tmpdir", "=", "tmpdir", ",", "\n", "gpu_collect", "=", "self", ".", "gpu_collect", ")", "\n", "if", "runner", ".", "rank", "==", "0", ":", "\n", "            ", "print", "(", "'\\n'", ")", "\n", "key_score", "=", "self", ".", "evaluate", "(", "runner", ",", "results", ")", "\n", "if", "self", ".", "save_best", ":", "\n", "                ", "self", ".", "save_best_checkpoint", "(", "runner", ",", "key_score", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox_flip": [[5, 32], ["bboxes.clone"], "function", ["None"], ["def", "bbox_flip", "(", "bboxes", ",", "img_shape", ",", "direction", "=", "'horizontal'", ")", ":", "\n", "    ", "\"\"\"Flip bboxes horizontally or vertically.\n\n    Args:\n        bboxes (Tensor): Shape (..., 4*k)\n        img_shape (tuple): Image shape.\n        direction (str): Flip direction, options are \"horizontal\", \"vertical\",\n            \"diagonal\". Default: \"horizontal\"\n\n    Returns:\n        Tensor: Flipped bboxes.\n    \"\"\"", "\n", "assert", "bboxes", ".", "shape", "[", "-", "1", "]", "%", "4", "==", "0", "\n", "assert", "direction", "in", "[", "'horizontal'", ",", "'vertical'", ",", "'diagonal'", "]", "\n", "flipped", "=", "bboxes", ".", "clone", "(", ")", "\n", "if", "direction", "==", "'horizontal'", ":", "\n", "        ", "flipped", "[", "...", ",", "0", ":", ":", "4", "]", "=", "img_shape", "[", "1", "]", "-", "bboxes", "[", "...", ",", "2", ":", ":", "4", "]", "\n", "flipped", "[", "...", ",", "2", ":", ":", "4", "]", "=", "img_shape", "[", "1", "]", "-", "bboxes", "[", "...", ",", "0", ":", ":", "4", "]", "\n", "", "elif", "direction", "==", "'vertical'", ":", "\n", "        ", "flipped", "[", "...", ",", "1", ":", ":", "4", "]", "=", "img_shape", "[", "0", "]", "-", "bboxes", "[", "...", ",", "3", ":", ":", "4", "]", "\n", "flipped", "[", "...", ",", "3", ":", ":", "4", "]", "=", "img_shape", "[", "0", "]", "-", "bboxes", "[", "...", ",", "1", ":", ":", "4", "]", "\n", "", "else", ":", "\n", "        ", "flipped", "[", "...", ",", "0", ":", ":", "4", "]", "=", "img_shape", "[", "1", "]", "-", "bboxes", "[", "...", ",", "2", ":", ":", "4", "]", "\n", "flipped", "[", "...", ",", "1", ":", ":", "4", "]", "=", "img_shape", "[", "0", "]", "-", "bboxes", "[", "...", ",", "3", ":", ":", "4", "]", "\n", "flipped", "[", "...", ",", "2", ":", ":", "4", "]", "=", "img_shape", "[", "1", "]", "-", "bboxes", "[", "...", ",", "0", ":", ":", "4", "]", "\n", "flipped", "[", "...", ",", "3", ":", ":", "4", "]", "=", "img_shape", "[", "0", "]", "-", "bboxes", "[", "...", ",", "1", ":", ":", "4", "]", "\n", "", "return", "flipped", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox_mapping": [[34, 44], ["bboxes.new_tensor", "transforms.bbox_flip"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomFlip.bbox_flip"], ["", "def", "bbox_mapping", "(", "bboxes", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "flip", ",", "\n", "flip_direction", "=", "'horizontal'", ")", ":", "\n", "    ", "\"\"\"Map bboxes from the original image scale to testing scale.\"\"\"", "\n", "new_bboxes", "=", "bboxes", "*", "bboxes", ".", "new_tensor", "(", "scale_factor", ")", "\n", "if", "flip", ":", "\n", "        ", "new_bboxes", "=", "bbox_flip", "(", "new_bboxes", ",", "img_shape", ",", "flip_direction", ")", "\n", "", "return", "new_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox_mapping_back": [[46, 56], ["new_bboxes.view", "transforms.bbox_flip", "new_bboxes.view", "new_bboxes.new_tensor"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomFlip.bbox_flip"], ["", "def", "bbox_mapping_back", "(", "bboxes", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "flip", ",", "\n", "flip_direction", "=", "'horizontal'", ")", ":", "\n", "    ", "\"\"\"Map bboxes from testing scale to original image scale.\"\"\"", "\n", "new_bboxes", "=", "bbox_flip", "(", "bboxes", ",", "img_shape", ",", "\n", "flip_direction", ")", "if", "flip", "else", "bboxes", "\n", "new_bboxes", "=", "new_bboxes", ".", "view", "(", "-", "1", ",", "4", ")", "/", "new_bboxes", ".", "new_tensor", "(", "scale_factor", ")", "\n", "return", "new_bboxes", ".", "view", "(", "bboxes", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox2roi": [[58, 78], ["enumerate", "torch.cat", "rois_list.append", "bboxes.size", "bboxes.new_full", "torch.cat", "bboxes.new_zeros", "bboxes.size"], "function", ["None"], ["", "def", "bbox2roi", "(", "bbox_list", ")", ":", "\n", "    ", "\"\"\"Convert a list of bboxes to roi format.\n\n    Args:\n        bbox_list (list[Tensor]): a list of bboxes corresponding to a batch\n            of images.\n\n    Returns:\n        Tensor: shape (n, 5), [batch_ind, x1, y1, x2, y2]\n    \"\"\"", "\n", "rois_list", "=", "[", "]", "\n", "for", "img_id", ",", "bboxes", "in", "enumerate", "(", "bbox_list", ")", ":", "\n", "        ", "if", "bboxes", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "            ", "img_inds", "=", "bboxes", ".", "new_full", "(", "(", "bboxes", ".", "size", "(", "0", ")", ",", "1", ")", ",", "img_id", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "[", "img_inds", ",", "bboxes", "[", ":", ",", ":", "4", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "rois", "=", "bboxes", ".", "new_zeros", "(", "(", "0", ",", "5", ")", ")", "\n", "", "rois_list", ".", "append", "(", "rois", ")", "\n", "", "rois", "=", "torch", ".", "cat", "(", "rois_list", ",", "0", ")", "\n", "return", "rois", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.roi2bbox": [[80, 97], ["torch.unique", "rois[].cpu", "bbox_list.append", "img_id.item"], "function", ["None"], ["", "def", "roi2bbox", "(", "rois", ")", ":", "\n", "    ", "\"\"\"Convert rois to bounding box format.\n\n    Args:\n        rois (torch.Tensor): RoIs with the shape (n, 5) where the first\n            column indicates batch id of each RoI.\n\n    Returns:\n        list[torch.Tensor]: Converted boxes of corresponding rois.\n    \"\"\"", "\n", "bbox_list", "=", "[", "]", "\n", "img_ids", "=", "torch", ".", "unique", "(", "rois", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ",", "sorted", "=", "True", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "        ", "inds", "=", "(", "rois", "[", ":", ",", "0", "]", "==", "img_id", ".", "item", "(", ")", ")", "\n", "bbox", "=", "rois", "[", "inds", ",", "1", ":", "]", "\n", "bbox_list", ".", "append", "(", "bbox", ")", "\n", "", "return", "bbox_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox2result": [[99, 117], ["isinstance", "numpy.zeros", "bboxes.detach().cpu().numpy.detach().cpu().numpy", "labels.detach().cpu().numpy.detach().cpu().numpy", "range", "range", "bboxes.detach().cpu().numpy.detach().cpu", "labels.detach().cpu().numpy.detach().cpu", "bboxes.detach().cpu().numpy.detach", "labels.detach().cpu().numpy.detach"], "function", ["None"], ["", "def", "bbox2result", "(", "bboxes", ",", "labels", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Convert detection results to a list of numpy arrays.\n\n    Args:\n        bboxes (torch.Tensor | np.ndarray): shape (n, 5)\n        labels (torch.Tensor | np.ndarray): shape (n, )\n        num_classes (int): class number, including background class\n\n    Returns:\n        list(ndarray): bbox results of each class\n    \"\"\"", "\n", "if", "bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "[", "np", ".", "zeros", "(", "(", "0", ",", "5", ")", ",", "dtype", "=", "np", ".", "float32", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "bboxes", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "bboxes", "=", "bboxes", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "[", "bboxes", "[", "labels", "==", "i", ",", ":", "]", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.distance2bbox": [[119, 157], ["torch.stack", "max_shape[].type_as", "x1.new_tensor", "torch.cat().flip().unsqueeze", "torch.where", "torch.where", "isinstance", "x1.new_tensor", "x1.new_tensor.size", "torch.where.size", "torch.cat().flip", "torch.cat"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip"], ["", "", "def", "distance2bbox", "(", "points", ",", "distance", ",", "max_shape", "=", "None", ")", ":", "\n", "    ", "\"\"\"Decode distance prediction to bounding box.\n\n    Args:\n        points (Tensor): Shape (B, N, 2) or (N, 2).\n        distance (Tensor): Distance from the given point to 4\n            boundaries (left, top, right, bottom). Shape (B, N, 4) or (N, 4)\n        max_shape (Sequence[int] or torch.Tensor or Sequence[\n            Sequence[int]],optional): Maximum bounds for boxes, specifies\n            (H, W, C) or (H, W). If priors shape is (B, N, 4), then\n            the max_shape should be a Sequence[Sequence[int]]\n            and the length of max_shape should also be B.\n\n    Returns:\n        Tensor: Boxes with shape (N, 4) or (B, N, 4)\n    \"\"\"", "\n", "x1", "=", "points", "[", "...", ",", "0", "]", "-", "distance", "[", "...", ",", "0", "]", "\n", "y1", "=", "points", "[", "...", ",", "1", "]", "-", "distance", "[", "...", ",", "1", "]", "\n", "x2", "=", "points", "[", "...", ",", "0", "]", "+", "distance", "[", "...", ",", "2", "]", "\n", "y2", "=", "points", "[", "...", ",", "1", "]", "+", "distance", "[", "...", ",", "3", "]", "\n", "\n", "bboxes", "=", "torch", ".", "stack", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "-", "1", ")", "\n", "\n", "if", "max_shape", "is", "not", "None", ":", "\n", "        ", "if", "not", "isinstance", "(", "max_shape", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "max_shape", "=", "x1", ".", "new_tensor", "(", "max_shape", ")", "\n", "", "max_shape", "=", "max_shape", "[", "...", ",", ":", "2", "]", ".", "type_as", "(", "x1", ")", "\n", "if", "max_shape", ".", "ndim", "==", "2", ":", "\n", "            ", "assert", "bboxes", ".", "ndim", "==", "3", "\n", "assert", "max_shape", ".", "size", "(", "0", ")", "==", "bboxes", ".", "size", "(", "0", ")", "\n", "\n", "", "min_xy", "=", "x1", ".", "new_tensor", "(", "0", ")", "\n", "max_xy", "=", "torch", ".", "cat", "(", "[", "max_shape", ",", "max_shape", "]", ",", "\n", "dim", "=", "-", "1", ")", ".", "flip", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "bboxes", "=", "torch", ".", "where", "(", "bboxes", "<", "min_xy", ",", "min_xy", ",", "bboxes", ")", "\n", "bboxes", "=", "torch", ".", "where", "(", "bboxes", ">", "max_xy", ",", "max_xy", ",", "bboxes", ")", "\n", "\n", "", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox2distance": [[159, 181], ["torch.stack", "left.clamp.clamp", "top.clamp.clamp", "right.clamp.clamp", "bottom.clamp.clamp"], "function", ["None"], ["", "def", "bbox2distance", "(", "points", ",", "bbox", ",", "max_dis", "=", "None", ",", "eps", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"Decode bounding box based on distances.\n\n    Args:\n        points (Tensor): Shape (n, 2), [x, y].\n        bbox (Tensor): Shape (n, 4), \"xyxy\" format\n        max_dis (float): Upper bound of the distance.\n        eps (float): a small value to ensure target < max_dis, instead <=\n\n    Returns:\n        Tensor: Decoded distances.\n    \"\"\"", "\n", "left", "=", "points", "[", ":", ",", "0", "]", "-", "bbox", "[", ":", ",", "0", "]", "\n", "top", "=", "points", "[", ":", ",", "1", "]", "-", "bbox", "[", ":", ",", "1", "]", "\n", "right", "=", "bbox", "[", ":", ",", "2", "]", "-", "points", "[", ":", ",", "0", "]", "\n", "bottom", "=", "bbox", "[", ":", ",", "3", "]", "-", "points", "[", ":", ",", "1", "]", "\n", "if", "max_dis", "is", "not", "None", ":", "\n", "        ", "left", "=", "left", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_dis", "-", "eps", ")", "\n", "top", "=", "top", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_dis", "-", "eps", ")", "\n", "right", "=", "right", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_dis", "-", "eps", ")", "\n", "bottom", "=", "bottom", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_dis", "-", "eps", ")", "\n", "", "return", "torch", ".", "stack", "(", "[", "left", ",", "top", ",", "right", ",", "bottom", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox_rescale": [[183, 213], ["bboxes.size", "bboxes.size", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "bbox_rescale", "(", "bboxes", ",", "scale_factor", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Rescale bounding box w.r.t. scale_factor.\n\n    Args:\n        bboxes (Tensor): Shape (n, 4) for bboxes or (n, 5) for rois\n        scale_factor (float): rescale factor\n\n    Returns:\n        Tensor: Rescaled bboxes.\n    \"\"\"", "\n", "if", "bboxes", ".", "size", "(", "1", ")", "==", "5", ":", "\n", "        ", "bboxes_", "=", "bboxes", "[", ":", ",", "1", ":", "]", "\n", "inds_", "=", "bboxes", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "bboxes_", "=", "bboxes", "\n", "", "cx", "=", "(", "bboxes_", "[", ":", ",", "0", "]", "+", "bboxes_", "[", ":", ",", "2", "]", ")", "*", "0.5", "\n", "cy", "=", "(", "bboxes_", "[", ":", ",", "1", "]", "+", "bboxes_", "[", ":", ",", "3", "]", ")", "*", "0.5", "\n", "w", "=", "bboxes_", "[", ":", ",", "2", "]", "-", "bboxes_", "[", ":", ",", "0", "]", "\n", "h", "=", "bboxes_", "[", ":", ",", "3", "]", "-", "bboxes_", "[", ":", ",", "1", "]", "\n", "w", "=", "w", "*", "scale_factor", "\n", "h", "=", "h", "*", "scale_factor", "\n", "x1", "=", "cx", "-", "0.5", "*", "w", "\n", "x2", "=", "cx", "+", "0.5", "*", "w", "\n", "y1", "=", "cy", "-", "0.5", "*", "h", "\n", "y2", "=", "cy", "+", "0.5", "*", "h", "\n", "if", "bboxes", ".", "size", "(", "1", ")", "==", "5", ":", "\n", "        ", "rescaled_bboxes", "=", "torch", ".", "stack", "(", "[", "inds_", ",", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "rescaled_bboxes", "=", "torch", ".", "stack", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "return", "rescaled_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox_cxcywh_to_xyxy": [[215, 227], ["bbox.split", "torch.cat"], "function", ["None"], ["", "def", "bbox_cxcywh_to_xyxy", "(", "bbox", ")", ":", "\n", "    ", "\"\"\"Convert bbox coordinates from (cx, cy, w, h) to (x1, y1, x2, y2).\n\n    Args:\n        bbox (Tensor): Shape (n, 4) for bboxes.\n\n    Returns:\n        Tensor: Converted bboxes.\n    \"\"\"", "\n", "cx", ",", "cy", ",", "w", ",", "h", "=", "bbox", ".", "split", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "bbox_new", "=", "[", "(", "cx", "-", "0.5", "*", "w", ")", ",", "(", "cy", "-", "0.5", "*", "h", ")", ",", "(", "cx", "+", "0.5", "*", "w", ")", ",", "(", "cy", "+", "0.5", "*", "h", ")", "]", "\n", "return", "torch", ".", "cat", "(", "bbox_new", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox_xyxy_to_cxcywh": [[229, 241], ["bbox.split", "torch.cat"], "function", ["None"], ["", "def", "bbox_xyxy_to_cxcywh", "(", "bbox", ")", ":", "\n", "    ", "\"\"\"Convert bbox coordinates from (x1, y1, x2, y2) to (cx, cy, w, h).\n\n    Args:\n        bbox (Tensor): Shape (n, 4) for bboxes.\n\n    Returns:\n        Tensor: Converted bboxes.\n    \"\"\"", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", ".", "split", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "bbox_new", "=", "[", "(", "x1", "+", "x2", ")", "/", "2", ",", "(", "y1", "+", "y2", ")", "/", "2", ",", "(", "x2", "-", "x1", ")", ",", "(", "y2", "-", "y1", ")", "]", "\n", "return", "torch", ".", "cat", "(", "bbox_new", ",", "dim", "=", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.demodata.random_boxes": [[7, 42], ["mmdet.utils.util_random.ensure_rng", "mmdet.utils.util_random.ensure_rng.rand().astype", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "torch.from_numpy", "mmdet.utils.util_random.ensure_rng.rand"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.util_random.ensure_rng"], ["def", "random_boxes", "(", "num", "=", "1", ",", "scale", "=", "1", ",", "rng", "=", "None", ")", ":", "\n", "    ", "\"\"\"Simple version of ``kwimage.Boxes.random``\n\n    Returns:\n        Tensor: shape (n, 4) in x1, y1, x2, y2 format.\n\n    References:\n        https://gitlab.kitware.com/computer-vision/kwimage/blob/master/kwimage/structs/boxes.py#L1390\n\n    Example:\n        >>> num = 3\n        >>> scale = 512\n        >>> rng = 0\n        >>> boxes = random_boxes(num, scale, rng)\n        >>> print(boxes)\n        tensor([[280.9925, 278.9802, 308.6148, 366.1769],\n                [216.9113, 330.6978, 224.0446, 456.5878],\n                [405.3632, 196.3221, 493.3953, 270.7942]])\n    \"\"\"", "\n", "rng", "=", "ensure_rng", "(", "rng", ")", "\n", "\n", "tlbr", "=", "rng", ".", "rand", "(", "num", ",", "4", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "tl_x", "=", "np", ".", "minimum", "(", "tlbr", "[", ":", ",", "0", "]", ",", "tlbr", "[", ":", ",", "2", "]", ")", "\n", "tl_y", "=", "np", ".", "minimum", "(", "tlbr", "[", ":", ",", "1", "]", ",", "tlbr", "[", ":", ",", "3", "]", ")", "\n", "br_x", "=", "np", ".", "maximum", "(", "tlbr", "[", ":", ",", "0", "]", ",", "tlbr", "[", ":", ",", "2", "]", ")", "\n", "br_y", "=", "np", ".", "maximum", "(", "tlbr", "[", ":", ",", "1", "]", ",", "tlbr", "[", ":", ",", "3", "]", ")", "\n", "\n", "tlbr", "[", ":", ",", "0", "]", "=", "tl_x", "*", "scale", "\n", "tlbr", "[", ":", ",", "1", "]", "=", "tl_y", "*", "scale", "\n", "tlbr", "[", ":", ",", "2", "]", "=", "br_x", "*", "scale", "\n", "tlbr", "[", ":", ",", "3", "]", "=", "br_y", "*", "scale", "\n", "\n", "boxes", "=", "torch", ".", "from_numpy", "(", "tlbr", ")", "\n", "return", "boxes", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.builder.build_assigner": [[8, 11], ["mmcv.utils.build_from_cfg"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.builder.build_sampler": [[13, 16], ["mmcv.utils.build_from_cfg"], "function", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.builder.build_bbox_coder": [[18, 21], ["mmcv.utils.build_from_cfg"], "function", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.match_costs.builder.build_match_cost": [[6, 9], ["mmcv.utils.build_from_cfg"], "function", ["None"], ["def", "build_anchor_generator", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "return", "build_from_cfg", "(", "cfg", ",", "ANCHOR_GENERATORS", ",", "default_args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.match_costs.match_cost.BBoxL1Cost.__init__": [[27, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "weight", "=", "1.", ",", "box_format", "=", "'xyxy'", ")", ":", "\n", "        ", "self", ".", "weight", "=", "weight", "\n", "assert", "box_format", "in", "[", "'xyxy'", ",", "'xywh'", "]", "\n", "self", ".", "box_format", "=", "box_format", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.match_costs.match_cost.BBoxL1Cost.__call__": [[32, 50], ["torch.cdist", "mmdet.core.bbox.transforms.bbox_xyxy_to_cxcywh", "mmdet.core.bbox.transforms.bbox_cxcywh_to_xyxy"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox_xyxy_to_cxcywh", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox_cxcywh_to_xyxy"], ["", "def", "__call__", "(", "self", ",", "bbox_pred", ",", "gt_bboxes", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\n                [num_query, 4].\n            gt_bboxes (Tensor): Ground truth boxes with normalized\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\n\n        Returns:\n            torch.Tensor: bbox_cost value with weight\n        \"\"\"", "\n", "if", "self", ".", "box_format", "==", "'xywh'", ":", "\n", "            ", "gt_bboxes", "=", "bbox_xyxy_to_cxcywh", "(", "gt_bboxes", ")", "\n", "", "elif", "self", ".", "box_format", "==", "'xyxy'", ":", "\n", "            ", "bbox_pred", "=", "bbox_cxcywh_to_xyxy", "(", "bbox_pred", ")", "\n", "", "bbox_cost", "=", "torch", ".", "cdist", "(", "bbox_pred", ",", "gt_bboxes", ",", "p", "=", "1", ")", "\n", "return", "bbox_cost", "*", "self", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.match_costs.match_cost.FocalLossCost.__init__": [[76, 81], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "weight", "=", "1.", ",", "alpha", "=", "0.25", ",", "gamma", "=", "2", ",", "eps", "=", "1e-12", ")", ":", "\n", "        ", "self", ".", "weight", "=", "weight", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.match_costs.match_cost.FocalLossCost.__call__": [[82, 99], ["cls_pred.sigmoid.sigmoid.sigmoid", "cls_pred.sigmoid.sigmoid.pow"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "cls_pred", ",", "gt_labels", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            cls_pred (Tensor): Predicted classification logits, shape\n                [num_query, num_class].\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\n\n        Returns:\n            torch.Tensor: cls_cost value with weight\n        \"\"\"", "\n", "cls_pred", "=", "cls_pred", ".", "sigmoid", "(", ")", "\n", "neg_cost", "=", "-", "(", "1", "-", "cls_pred", "+", "self", ".", "eps", ")", ".", "log", "(", ")", "*", "(", "\n", "1", "-", "self", ".", "alpha", ")", "*", "cls_pred", ".", "pow", "(", "self", ".", "gamma", ")", "\n", "pos_cost", "=", "-", "(", "cls_pred", "+", "self", ".", "eps", ")", ".", "log", "(", ")", "*", "self", ".", "alpha", "*", "(", "\n", "1", "-", "cls_pred", ")", ".", "pow", "(", "self", ".", "gamma", ")", "\n", "cls_cost", "=", "pos_cost", "[", ":", ",", "gt_labels", "]", "-", "neg_cost", "[", ":", ",", "gt_labels", "]", "\n", "return", "cls_cost", "*", "self", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.match_costs.match_cost.ClassificationCost.__init__": [[123, 125], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "weight", "=", "1.", ")", ":", "\n", "        ", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.match_costs.match_cost.ClassificationCost.__call__": [[126, 143], ["cls_pred.softmax"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "cls_pred", ",", "gt_labels", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            cls_pred (Tensor): Predicted classification logits, shape\n                [num_query, num_class].\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\n\n        Returns:\n            torch.Tensor: cls_cost value with weight\n        \"\"\"", "\n", "# Following the official DETR repo, contrary to the loss that", "\n", "# NLL is used, we approximate it in 1 - cls_score[gt_label].", "\n", "# The 1 is a constant that doesn't change the matching,", "\n", "# so it can be omitted.", "\n", "cls_score", "=", "cls_pred", ".", "softmax", "(", "-", "1", ")", "\n", "cls_cost", "=", "-", "cls_score", "[", ":", ",", "gt_labels", "]", "\n", "return", "cls_cost", "*", "self", ".", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.match_costs.match_cost.IoUCost.__init__": [[164, 167], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "iou_mode", "=", "'giou'", ",", "weight", "=", "1.", ")", ":", "\n", "        ", "self", ".", "weight", "=", "weight", "\n", "self", ".", "iou_mode", "=", "iou_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.match_costs.match_cost.IoUCost.__call__": [[168, 185], ["mmdet.core.bbox.iou_calculators.bbox_overlaps"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.iou2d_calculator.bbox_overlaps"], ["", "def", "__call__", "(", "self", ",", "bboxes", ",", "gt_bboxes", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            bboxes (Tensor): Predicted boxes with unnormalized coordinates\n                (x1, y1, x2, y2). Shape [num_query, 4].\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\n\n        Returns:\n            torch.Tensor: iou_cost value with weight\n        \"\"\"", "\n", "# overlaps: [num_bboxes, num_gt]", "\n", "overlaps", "=", "bbox_overlaps", "(", "\n", "bboxes", ",", "gt_bboxes", ",", "mode", "=", "self", ".", "iou_mode", ",", "is_aligned", "=", "False", ")", "\n", "# The 1 is a constant that doesn't change the matching, so omitted.", "\n", "iou_cost", "=", "-", "overlaps", "\n", "return", "iou_cost", "*", "self", ".", "weight", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.base_sampler.BaseSampler.__init__": [[11, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "num", "=", "num", "\n", "self", ".", "pos_fraction", "=", "pos_fraction", "\n", "self", ".", "neg_pos_ub", "=", "neg_pos_ub", "\n", "self", ".", "add_gt_as_proposals", "=", "add_gt_as_proposals", "\n", "self", ".", "pos_sampler", "=", "self", "\n", "self", ".", "neg_sampler", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.base_sampler.BaseSampler._sample_pos": [[24, 28], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_sample_pos", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample positive samples.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.base_sampler.BaseSampler._sample_neg": [[29, 33], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_sample_neg", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample negative samples.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.base_sampler.BaseSampler.sample": [[34, 102], ["torch.cat.new_zeros", "int", "base_sampler.BaseSampler.pos_sampler._sample_pos", "pos_inds.unique.unique.unique", "pos_inds.unique.unique.numel", "base_sampler.BaseSampler.neg_sampler._sample_neg", "neg_inds.unique.unique.unique", "sampling_result.SamplingResult.SamplingResult", "len", "torch.cat", "assign_result.add_gt_", "torch.cat.new_ones", "torch.cat", "max", "int", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler._sample_pos", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler._sample_neg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.add_gt_"], ["", "def", "sample", "(", "self", ",", "\n", "assign_result", ",", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample positive and negative bboxes.\n\n        This is a simple implementation of bbox sampling given candidates,\n        assigning results and ground truth bboxes.\n\n        Args:\n            assign_result (:obj:`AssignResult`): Bbox assigning results.\n            bboxes (Tensor): Boxes to be sampled from.\n            gt_bboxes (Tensor): Ground truth bboxes.\n            gt_labels (Tensor, optional): Class labels of ground truth bboxes.\n\n        Returns:\n            :obj:`SamplingResult`: Sampling result.\n\n        Example:\n            >>> from mmdet.core.bbox import RandomSampler\n            >>> from mmdet.core.bbox import AssignResult\n            >>> from mmdet.core.bbox.demodata import ensure_rng, random_boxes\n            >>> rng = ensure_rng(None)\n            >>> assign_result = AssignResult.random(rng=rng)\n            >>> bboxes = random_boxes(assign_result.num_preds, rng=rng)\n            >>> gt_bboxes = random_boxes(assign_result.num_gts, rng=rng)\n            >>> gt_labels = None\n            >>> self = RandomSampler(num=32, pos_fraction=0.5, neg_pos_ub=-1,\n            >>>                      add_gt_as_proposals=False)\n            >>> self = self.sample(assign_result, bboxes, gt_bboxes, gt_labels)\n        \"\"\"", "\n", "if", "len", "(", "bboxes", ".", "shape", ")", "<", "2", ":", "\n", "            ", "bboxes", "=", "bboxes", "[", "None", ",", ":", "]", "\n", "\n", "", "bboxes", "=", "bboxes", "[", ":", ",", ":", "4", "]", "\n", "\n", "gt_flags", "=", "bboxes", ".", "new_zeros", "(", "(", "bboxes", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "if", "self", ".", "add_gt_as_proposals", "and", "len", "(", "gt_bboxes", ")", ">", "0", ":", "\n", "            ", "if", "gt_labels", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'gt_labels must be given when add_gt_as_proposals is True'", ")", "\n", "", "bboxes", "=", "torch", ".", "cat", "(", "[", "gt_bboxes", ",", "bboxes", "]", ",", "dim", "=", "0", ")", "\n", "assign_result", ".", "add_gt_", "(", "gt_labels", ")", "\n", "gt_ones", "=", "bboxes", ".", "new_ones", "(", "gt_bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "gt_flags", "=", "torch", ".", "cat", "(", "[", "gt_ones", ",", "gt_flags", "]", ")", "\n", "\n", "", "num_expected_pos", "=", "int", "(", "self", ".", "num", "*", "self", ".", "pos_fraction", ")", "\n", "pos_inds", "=", "self", ".", "pos_sampler", ".", "_sample_pos", "(", "\n", "assign_result", ",", "num_expected_pos", ",", "bboxes", "=", "bboxes", ",", "**", "kwargs", ")", "\n", "# We found that sampled indices have duplicated items occasionally.", "\n", "# (may be a bug of PyTorch)", "\n", "pos_inds", "=", "pos_inds", ".", "unique", "(", ")", "\n", "num_sampled_pos", "=", "pos_inds", ".", "numel", "(", ")", "\n", "num_expected_neg", "=", "self", ".", "num", "-", "num_sampled_pos", "\n", "if", "self", ".", "neg_pos_ub", ">=", "0", ":", "\n", "            ", "_pos", "=", "max", "(", "1", ",", "num_sampled_pos", ")", "\n", "neg_upper_bound", "=", "int", "(", "self", ".", "neg_pos_ub", "*", "_pos", ")", "\n", "if", "num_expected_neg", ">", "neg_upper_bound", ":", "\n", "                ", "num_expected_neg", "=", "neg_upper_bound", "\n", "", "", "neg_inds", "=", "self", ".", "neg_sampler", ".", "_sample_neg", "(", "\n", "assign_result", ",", "num_expected_neg", ",", "bboxes", "=", "bboxes", ",", "**", "kwargs", ")", "\n", "neg_inds", "=", "neg_inds", ".", "unique", "(", ")", "\n", "\n", "sampling_result", "=", "SamplingResult", "(", "pos_inds", ",", "neg_inds", ",", "bboxes", ",", "gt_bboxes", ",", "\n", "assign_result", ",", "gt_flags", ")", "\n", "return", "sampling_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.score_hlr_sampler.ScoreHLRSampler.__init__": [[32, 60], ["base_sampler.BaseSampler.__init__", "hasattr"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "context", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ",", "\n", "k", "=", "0.5", ",", "\n", "bias", "=", "0", ",", "\n", "score_thr", "=", "0.05", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num", ",", "pos_fraction", ",", "neg_pos_ub", ",", "add_gt_as_proposals", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "score_thr", "=", "score_thr", "\n", "self", ".", "iou_thr", "=", "iou_thr", "\n", "self", ".", "context", "=", "context", "\n", "# context of cascade detectors is a list, so distinguish them here.", "\n", "if", "not", "hasattr", "(", "context", ",", "'num_stages'", ")", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", "=", "context", ".", "bbox_roi_extractor", "\n", "self", ".", "bbox_head", "=", "context", ".", "bbox_head", "\n", "self", ".", "with_shared_head", "=", "context", ".", "with_shared_head", "\n", "if", "self", ".", "with_shared_head", ":", "\n", "                ", "self", ".", "shared_head", "=", "context", ".", "shared_head", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "bbox_roi_extractor", "=", "context", ".", "bbox_roi_extractor", "[", "\n", "context", ".", "current_stage", "]", "\n", "self", ".", "bbox_head", "=", "context", ".", "bbox_head", "[", "context", ".", "current_stage", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.score_hlr_sampler.ScoreHLRSampler.random_choice": [[61, 90], ["isinstance", "len", "torch.cuda.is_available", "torch.tensor", "torch.randperm", "rand_inds.cpu().numpy.cpu().numpy.cpu().numpy", "torch.cuda.current_device", "torch.tensor.numel", "rand_inds.cpu().numpy.cpu().numpy.cpu"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "random_choice", "(", "gallery", ",", "num", ")", ":", "\n", "        ", "\"\"\"Randomly select some elements from the gallery.\n\n        If `gallery` is a Tensor, the returned indices will be a Tensor;\n        If `gallery` is a ndarray or list, the returned indices will be a\n        ndarray.\n\n        Args:\n            gallery (Tensor | ndarray | list): indices pool.\n            num (int): expected sample num.\n\n        Returns:\n            Tensor or ndarray: sampled indices.\n        \"\"\"", "\n", "assert", "len", "(", "gallery", ")", ">=", "num", "\n", "\n", "is_tensor", "=", "isinstance", "(", "gallery", ",", "torch", ".", "Tensor", ")", "\n", "if", "not", "is_tensor", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "", "else", ":", "\n", "                ", "device", "=", "'cpu'", "\n", "", "gallery", "=", "torch", ".", "tensor", "(", "gallery", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "", "perm", "=", "torch", ".", "randperm", "(", "gallery", ".", "numel", "(", ")", ",", "device", "=", "gallery", ".", "device", ")", "[", ":", "num", "]", "\n", "rand_inds", "=", "gallery", "[", "perm", "]", "\n", "if", "not", "is_tensor", ":", "\n", "            ", "rand_inds", "=", "rand_inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "rand_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.score_hlr_sampler.ScoreHLRSampler._sample_pos": [[91, 98], ["torch.nonzero().flatten", "torch.nonzero().flatten.numel", "score_hlr_sampler.ScoreHLRSampler.random_choice", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler.random_choice"], ["", "def", "_sample_pos", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Randomly sample some positive samples.\"\"\"", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", ">", "0", ")", ".", "flatten", "(", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", "<=", "num_expected", ":", "\n", "            ", "return", "pos_inds", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "random_choice", "(", "pos_inds", ",", "num_expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.score_hlr_sampler.ScoreHLRSampler._sample_neg": [[99, 214], ["torch.nonzero().flatten", "torch.nonzero().flatten.size", "torch.no_grad", "transforms.bbox2roi", "score_hlr_sampler.ScoreHLRSampler.context._bbox_forward", "[].max", "valid_inds.size", "invalid_inds.size", "min", "min", "torch.nonzero", "score_hlr_sampler.ScoreHLRSampler.bbox_head.loss", "valid_bbox_pred.view.view.view", "score_hlr_sampler.ScoreHLRSampler.bbox_head.bbox_coder.decode", "torch.cat", "mmcv.ops.nms_match", "cls_score.new_zeros", "cls_score.new_zeros.sort", "imp_rank_inds.sort", "cls_score.new_ones", "max", "imp_weights.min", "cls_score.new_ones", "valid_bbox_pred.view.view.size", "g_score.new_tensor", "torch.cat", "ori_selected_loss.sum", "new_loss.sum", "torch.randperm", "torch.nonzero().flatten.new_full", "cls_score.new_ones", "cls_score.softmax", "range", "torch.randperm", "imp_rank[].float", "range", "g_score.size"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox2roi", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode"], ["", "", "def", "_sample_neg", "(", "self", ",", "\n", "assign_result", ",", "\n", "num_expected", ",", "\n", "bboxes", ",", "\n", "feats", "=", "None", ",", "\n", "img_meta", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample negative samples.\n\n        Score-HLR sampler is done in the following steps:\n        1. Take the maximum positive score prediction of each negative samples\n            as s_i.\n        2. Filter out negative samples whose s_i <= score_thr, the left samples\n            are called valid samples.\n        3. Use NMS-Match to divide valid samples into different groups,\n            samples in the same group will greatly overlap with each other\n        4. Rank the matched samples in two-steps to get Score-HLR.\n            (1) In the same group, rank samples with their scores.\n            (2) In the same score rank across different groups,\n                rank samples with their scores again.\n        5. Linearly map Score-HLR to the final label weights.\n\n        Args:\n            assign_result (:obj:`AssignResult`): result of assigner.\n            num_expected (int): Expected number of samples.\n            bboxes (Tensor): bbox to be sampled.\n            feats (Tensor): Features come from FPN.\n            img_meta (dict): Meta information dictionary.\n        \"\"\"", "\n", "neg_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "0", ")", ".", "flatten", "(", ")", "\n", "num_neg", "=", "neg_inds", ".", "size", "(", "0", ")", "\n", "if", "num_neg", "==", "0", ":", "\n", "            ", "return", "neg_inds", ",", "None", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "neg_bboxes", "=", "bboxes", "[", "neg_inds", "]", "\n", "neg_rois", "=", "bbox2roi", "(", "[", "neg_bboxes", "]", ")", "\n", "bbox_result", "=", "self", ".", "context", ".", "_bbox_forward", "(", "feats", ",", "neg_rois", ")", "\n", "cls_score", ",", "bbox_pred", "=", "bbox_result", "[", "'cls_score'", "]", ",", "bbox_result", "[", "\n", "'bbox_pred'", "]", "\n", "\n", "ori_loss", "=", "self", ".", "bbox_head", ".", "loss", "(", "\n", "cls_score", "=", "cls_score", ",", "\n", "bbox_pred", "=", "None", ",", "\n", "rois", "=", "None", ",", "\n", "labels", "=", "neg_inds", ".", "new_full", "(", "(", "num_neg", ",", ")", ",", "\n", "self", ".", "bbox_head", ".", "num_classes", ")", ",", "\n", "label_weights", "=", "cls_score", ".", "new_ones", "(", "num_neg", ")", ",", "\n", "bbox_targets", "=", "None", ",", "\n", "bbox_weights", "=", "None", ",", "\n", "reduction_override", "=", "'none'", ")", "[", "'loss_cls'", "]", "\n", "\n", "# filter out samples with the max score lower than score_thr", "\n", "max_score", ",", "argmax_score", "=", "cls_score", ".", "softmax", "(", "-", "1", ")", "[", ":", ",", ":", "-", "1", "]", ".", "max", "(", "-", "1", ")", "\n", "valid_inds", "=", "(", "max_score", ">", "self", ".", "score_thr", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "invalid_inds", "=", "(", "max_score", "<=", "self", ".", "score_thr", ")", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "num_valid", "=", "valid_inds", ".", "size", "(", "0", ")", "\n", "num_invalid", "=", "invalid_inds", ".", "size", "(", "0", ")", "\n", "\n", "num_expected", "=", "min", "(", "num_neg", ",", "num_expected", ")", "\n", "num_hlr", "=", "min", "(", "num_valid", ",", "num_expected", ")", "\n", "num_rand", "=", "num_expected", "-", "num_hlr", "\n", "if", "num_valid", ">", "0", ":", "\n", "                ", "valid_rois", "=", "neg_rois", "[", "valid_inds", "]", "\n", "valid_max_score", "=", "max_score", "[", "valid_inds", "]", "\n", "valid_argmax_score", "=", "argmax_score", "[", "valid_inds", "]", "\n", "valid_bbox_pred", "=", "bbox_pred", "[", "valid_inds", "]", "\n", "\n", "# valid_bbox_pred shape: [num_valid, #num_classes, 4]", "\n", "valid_bbox_pred", "=", "valid_bbox_pred", ".", "view", "(", "\n", "valid_bbox_pred", ".", "size", "(", "0", ")", ",", "-", "1", ",", "4", ")", "\n", "selected_bbox_pred", "=", "valid_bbox_pred", "[", "range", "(", "num_valid", ")", ",", "\n", "valid_argmax_score", "]", "\n", "pred_bboxes", "=", "self", ".", "bbox_head", ".", "bbox_coder", ".", "decode", "(", "\n", "valid_rois", "[", ":", ",", "1", ":", "]", ",", "selected_bbox_pred", ")", "\n", "pred_bboxes_with_score", "=", "torch", ".", "cat", "(", "\n", "[", "pred_bboxes", ",", "valid_max_score", "[", ":", ",", "None", "]", "]", ",", "-", "1", ")", "\n", "group", "=", "nms_match", "(", "pred_bboxes_with_score", ",", "self", ".", "iou_thr", ")", "\n", "\n", "# imp: importance", "\n", "imp", "=", "cls_score", ".", "new_zeros", "(", "num_valid", ")", "\n", "for", "g", "in", "group", ":", "\n", "                    ", "g_score", "=", "valid_max_score", "[", "g", "]", "\n", "# g_score has already sorted", "\n", "rank", "=", "g_score", ".", "new_tensor", "(", "range", "(", "g_score", ".", "size", "(", "0", ")", ")", ")", "\n", "imp", "[", "g", "]", "=", "num_valid", "-", "rank", "+", "g_score", "\n", "", "_", ",", "imp_rank_inds", "=", "imp", ".", "sort", "(", "descending", "=", "True", ")", "\n", "_", ",", "imp_rank", "=", "imp_rank_inds", ".", "sort", "(", ")", "\n", "hlr_inds", "=", "imp_rank_inds", "[", ":", "num_expected", "]", "\n", "\n", "if", "num_rand", ">", "0", ":", "\n", "                    ", "rand_inds", "=", "torch", ".", "randperm", "(", "num_invalid", ")", "[", ":", "num_rand", "]", "\n", "select_inds", "=", "torch", ".", "cat", "(", "\n", "[", "valid_inds", "[", "hlr_inds", "]", ",", "invalid_inds", "[", "rand_inds", "]", "]", ")", "\n", "", "else", ":", "\n", "                    ", "select_inds", "=", "valid_inds", "[", "hlr_inds", "]", "\n", "\n", "", "neg_label_weights", "=", "cls_score", ".", "new_ones", "(", "num_expected", ")", "\n", "\n", "up_bound", "=", "max", "(", "num_expected", ",", "num_valid", ")", "\n", "imp_weights", "=", "(", "up_bound", "-", "\n", "imp_rank", "[", "hlr_inds", "]", ".", "float", "(", ")", ")", "/", "up_bound", "\n", "neg_label_weights", "[", ":", "num_hlr", "]", "=", "imp_weights", "\n", "neg_label_weights", "[", "num_hlr", ":", "]", "=", "imp_weights", ".", "min", "(", ")", "\n", "neg_label_weights", "=", "(", "self", ".", "bias", "+", "\n", "(", "1", "-", "self", ".", "bias", ")", "*", "neg_label_weights", ")", ".", "pow", "(", "\n", "self", ".", "k", ")", "\n", "ori_selected_loss", "=", "ori_loss", "[", "select_inds", "]", "\n", "new_loss", "=", "ori_selected_loss", "*", "neg_label_weights", "\n", "norm_ratio", "=", "ori_selected_loss", ".", "sum", "(", ")", "/", "new_loss", ".", "sum", "(", ")", "\n", "neg_label_weights", "*=", "norm_ratio", "\n", "", "else", ":", "\n", "                ", "neg_label_weights", "=", "cls_score", ".", "new_ones", "(", "num_expected", ")", "\n", "select_inds", "=", "torch", ".", "randperm", "(", "num_neg", ")", "[", ":", "num_expected", "]", "\n", "\n", "", "return", "neg_inds", "[", "select_inds", "]", ",", "neg_label_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.score_hlr_sampler.ScoreHLRSampler.sample": [[215, 265], ["torch.cat.new_zeros", "int", "score_hlr_sampler.ScoreHLRSampler.pos_sampler._sample_pos", "score_hlr_sampler.ScoreHLRSampler.numel", "score_hlr_sampler.ScoreHLRSampler.neg_sampler._sample_neg", "torch.cat", "assign_result.add_gt_", "torch.cat.new_ones", "torch.cat", "max", "int", "sampling_result.SamplingResult"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler._sample_pos", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler._sample_neg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.add_gt_"], ["", "", "def", "sample", "(", "self", ",", "\n", "assign_result", ",", "\n", "bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", "=", "None", ",", "\n", "img_meta", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample positive and negative bboxes.\n\n        This is a simple implementation of bbox sampling given candidates,\n        assigning results and ground truth bboxes.\n\n        Args:\n            assign_result (:obj:`AssignResult`): Bbox assigning results.\n            bboxes (Tensor): Boxes to be sampled from.\n            gt_bboxes (Tensor): Ground truth bboxes.\n            gt_labels (Tensor, optional): Class labels of ground truth bboxes.\n\n        Returns:\n            tuple[:obj:`SamplingResult`, Tensor]: Sampling result and negetive\n                label weights.\n        \"\"\"", "\n", "bboxes", "=", "bboxes", "[", ":", ",", ":", "4", "]", "\n", "\n", "gt_flags", "=", "bboxes", ".", "new_zeros", "(", "(", "bboxes", ".", "shape", "[", "0", "]", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "if", "self", ".", "add_gt_as_proposals", ":", "\n", "            ", "bboxes", "=", "torch", ".", "cat", "(", "[", "gt_bboxes", ",", "bboxes", "]", ",", "dim", "=", "0", ")", "\n", "assign_result", ".", "add_gt_", "(", "gt_labels", ")", "\n", "gt_ones", "=", "bboxes", ".", "new_ones", "(", "gt_bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "gt_flags", "=", "torch", ".", "cat", "(", "[", "gt_ones", ",", "gt_flags", "]", ")", "\n", "\n", "", "num_expected_pos", "=", "int", "(", "self", ".", "num", "*", "self", ".", "pos_fraction", ")", "\n", "pos_inds", "=", "self", ".", "pos_sampler", ".", "_sample_pos", "(", "\n", "assign_result", ",", "num_expected_pos", ",", "bboxes", "=", "bboxes", ",", "**", "kwargs", ")", "\n", "num_sampled_pos", "=", "pos_inds", ".", "numel", "(", ")", "\n", "num_expected_neg", "=", "self", ".", "num", "-", "num_sampled_pos", "\n", "if", "self", ".", "neg_pos_ub", ">=", "0", ":", "\n", "            ", "_pos", "=", "max", "(", "1", ",", "num_sampled_pos", ")", "\n", "neg_upper_bound", "=", "int", "(", "self", ".", "neg_pos_ub", "*", "_pos", ")", "\n", "if", "num_expected_neg", ">", "neg_upper_bound", ":", "\n", "                ", "num_expected_neg", "=", "neg_upper_bound", "\n", "", "", "neg_inds", ",", "neg_label_weights", "=", "self", ".", "neg_sampler", ".", "_sample_neg", "(", "\n", "assign_result", ",", "\n", "num_expected_neg", ",", "\n", "bboxes", ",", "\n", "img_meta", "=", "img_meta", ",", "\n", "**", "kwargs", ")", "\n", "\n", "return", "SamplingResult", "(", "pos_inds", ",", "neg_inds", ",", "bboxes", ",", "gt_bboxes", ",", "\n", "assign_result", ",", "gt_flags", ")", ",", "neg_label_weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler.__init__": [[20, 30], ["base_sampler.BaseSampler.__init__", "demodata.ensure_rng", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.util_random.ensure_rng"], ["def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "from", "mmdet", ".", "core", ".", "bbox", "import", "demodata", "\n", "super", "(", "RandomSampler", ",", "self", ")", ".", "__init__", "(", "num", ",", "pos_fraction", ",", "neg_pos_ub", ",", "\n", "add_gt_as_proposals", ")", "\n", "self", ".", "rng", "=", "demodata", ".", "ensure_rng", "(", "kwargs", ".", "get", "(", "'rng'", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler.random_choice": [[31, 59], ["isinstance", "len", "torch.cuda.is_available", "torch.tensor", "torch.randperm", "rand_inds.cpu().numpy.cpu().numpy.cpu().numpy", "torch.cuda.current_device", "torch.tensor.numel", "rand_inds.cpu().numpy.cpu().numpy.cpu"], "methods", ["None"], ["", "def", "random_choice", "(", "self", ",", "gallery", ",", "num", ")", ":", "\n", "        ", "\"\"\"Random select some elements from the gallery.\n\n        If `gallery` is a Tensor, the returned indices will be a Tensor;\n        If `gallery` is a ndarray or list, the returned indices will be a\n        ndarray.\n\n        Args:\n            gallery (Tensor | ndarray | list): indices pool.\n            num (int): expected sample num.\n\n        Returns:\n            Tensor or ndarray: sampled indices.\n        \"\"\"", "\n", "assert", "len", "(", "gallery", ")", ">=", "num", "\n", "\n", "is_tensor", "=", "isinstance", "(", "gallery", ",", "torch", ".", "Tensor", ")", "\n", "if", "not", "is_tensor", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "device", "=", "torch", ".", "cuda", ".", "current_device", "(", ")", "\n", "", "else", ":", "\n", "                ", "device", "=", "'cpu'", "\n", "", "gallery", "=", "torch", ".", "tensor", "(", "gallery", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "", "perm", "=", "torch", ".", "randperm", "(", "gallery", ".", "numel", "(", ")", ",", "device", "=", "gallery", ".", "device", ")", "[", ":", "num", "]", "\n", "rand_inds", "=", "gallery", "[", "perm", "]", "\n", "if", "not", "is_tensor", ":", "\n", "            ", "rand_inds", "=", "rand_inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "rand_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler._sample_pos": [[60, 69], ["torch.nonzero", "pos_inds.squeeze.squeeze.numel", "pos_inds.squeeze.squeeze.squeeze", "pos_inds.squeeze.squeeze.numel", "random_sampler.RandomSampler.random_choice"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler.random_choice"], ["", "def", "_sample_pos", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Randomly sample some positive samples.\"\"\"", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", ">", "0", ",", "as_tuple", "=", "False", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "pos_inds", "=", "pos_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "pos_inds", ".", "numel", "(", ")", "<=", "num_expected", ":", "\n", "            ", "return", "pos_inds", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "random_choice", "(", "pos_inds", ",", "num_expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler._sample_neg": [[70, 79], ["torch.nonzero", "neg_inds.squeeze.squeeze.numel", "neg_inds.squeeze.squeeze.squeeze", "len", "random_sampler.RandomSampler.random_choice"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler.random_choice"], ["", "", "def", "_sample_neg", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Randomly sample some negative samples.\"\"\"", "\n", "neg_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "0", ",", "as_tuple", "=", "False", ")", "\n", "if", "neg_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "neg_inds", "=", "neg_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "len", "(", "neg_inds", ")", "<=", "num_expected", ":", "\n", "            ", "return", "neg_inds", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "random_choice", "(", "neg_inds", ",", "num_expected", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.ohem_sampler.OHEMSampler.__init__": [[15, 29], ["base_sampler.BaseSampler.__init__", "hasattr"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "context", ",", "\n", "neg_pos_ub", "=", "-", "1", ",", "\n", "add_gt_as_proposals", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OHEMSampler", ",", "self", ")", ".", "__init__", "(", "num", ",", "pos_fraction", ",", "neg_pos_ub", ",", "\n", "add_gt_as_proposals", ")", "\n", "self", ".", "context", "=", "context", "\n", "if", "not", "hasattr", "(", "self", ".", "context", ",", "'num_stages'", ")", ":", "\n", "            ", "self", ".", "bbox_head", "=", "self", ".", "context", ".", "bbox_head", "\n", "", "else", ":", "\n", "            ", "self", ".", "bbox_head", "=", "self", ".", "context", ".", "bbox_head", "[", "self", ".", "context", ".", "current_stage", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.ohem_sampler.OHEMSampler.hard_mining": [[30, 50], ["torch.no_grad", "transforms.bbox2roi", "loss.topk", "hasattr", "ohem_sampler.OHEMSampler.context._bbox_forward", "ohem_sampler.OHEMSampler.context._bbox_forward", "ohem_sampler.OHEMSampler.bbox_head.loss", "cls_score.new_ones", "cls_score.size"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox2roi"], ["", "", "def", "hard_mining", "(", "self", ",", "inds", ",", "num_expected", ",", "bboxes", ",", "labels", ",", "feats", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "rois", "=", "bbox2roi", "(", "[", "bboxes", "]", ")", "\n", "if", "not", "hasattr", "(", "self", ".", "context", ",", "'num_stages'", ")", ":", "\n", "                ", "bbox_results", "=", "self", ".", "context", ".", "_bbox_forward", "(", "feats", ",", "rois", ")", "\n", "", "else", ":", "\n", "                ", "bbox_results", "=", "self", ".", "context", ".", "_bbox_forward", "(", "\n", "self", ".", "context", ".", "current_stage", ",", "feats", ",", "rois", ")", "\n", "", "cls_score", "=", "bbox_results", "[", "'cls_score'", "]", "\n", "loss", "=", "self", ".", "bbox_head", ".", "loss", "(", "\n", "cls_score", "=", "cls_score", ",", "\n", "bbox_pred", "=", "None", ",", "\n", "rois", "=", "rois", ",", "\n", "labels", "=", "labels", ",", "\n", "label_weights", "=", "cls_score", ".", "new_ones", "(", "cls_score", ".", "size", "(", "0", ")", ")", ",", "\n", "bbox_targets", "=", "None", ",", "\n", "bbox_weights", "=", "None", ",", "\n", "reduction_override", "=", "'none'", ")", "[", "'loss_cls'", "]", "\n", "_", ",", "topk_loss_inds", "=", "loss", ".", "topk", "(", "num_expected", ")", "\n", "", "return", "inds", "[", "topk_loss_inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.ohem_sampler.OHEMSampler._sample_pos": [[51, 78], ["torch.nonzero", "pos_inds.squeeze.squeeze.numel", "pos_inds.squeeze.squeeze.squeeze", "pos_inds.squeeze.squeeze.numel", "ohem_sampler.OHEMSampler.hard_mining"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.ohem_sampler.OHEMSampler.hard_mining"], ["", "def", "_sample_pos", "(", "self", ",", "\n", "assign_result", ",", "\n", "num_expected", ",", "\n", "bboxes", "=", "None", ",", "\n", "feats", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample positive boxes.\n\n        Args:\n            assign_result (:obj:`AssignResult`): Assigned results\n            num_expected (int): Number of expected positive samples\n            bboxes (torch.Tensor, optional): Boxes. Defaults to None.\n            feats (list[torch.Tensor], optional): Multi-level features.\n                Defaults to None.\n\n        Returns:\n            torch.Tensor: Indices  of positive samples\n        \"\"\"", "\n", "# Sample some hard positive samples", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", ">", "0", ",", "as_tuple", "=", "False", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "pos_inds", "=", "pos_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "pos_inds", ".", "numel", "(", ")", "<=", "num_expected", ":", "\n", "            ", "return", "pos_inds", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "hard_mining", "(", "pos_inds", ",", "num_expected", ",", "bboxes", "[", "pos_inds", "]", ",", "\n", "assign_result", ".", "labels", "[", "pos_inds", "]", ",", "feats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.ohem_sampler.OHEMSampler._sample_neg": [[79, 108], ["torch.nonzero", "neg_inds.squeeze.squeeze.numel", "neg_inds.squeeze.squeeze.squeeze", "len", "assign_result.labels.new_empty().fill_", "ohem_sampler.OHEMSampler.hard_mining", "assign_result.labels.new_empty", "neg_inds.squeeze.squeeze.size"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.ohem_sampler.OHEMSampler.hard_mining"], ["", "", "def", "_sample_neg", "(", "self", ",", "\n", "assign_result", ",", "\n", "num_expected", ",", "\n", "bboxes", "=", "None", ",", "\n", "feats", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample negative boxes.\n\n        Args:\n            assign_result (:obj:`AssignResult`): Assigned results\n            num_expected (int): Number of expected negative samples\n            bboxes (torch.Tensor, optional): Boxes. Defaults to None.\n            feats (list[torch.Tensor], optional): Multi-level features.\n                Defaults to None.\n\n        Returns:\n            torch.Tensor: Indices  of negative samples\n        \"\"\"", "\n", "# Sample some hard negative samples", "\n", "neg_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "0", ",", "as_tuple", "=", "False", ")", "\n", "if", "neg_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "neg_inds", "=", "neg_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "len", "(", "neg_inds", ")", "<=", "num_expected", ":", "\n", "            ", "return", "neg_inds", "\n", "", "else", ":", "\n", "            ", "neg_labels", "=", "assign_result", ".", "labels", ".", "new_empty", "(", "\n", "neg_inds", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "self", ".", "bbox_head", ".", "num_classes", ")", "\n", "return", "self", ".", "hard_mining", "(", "neg_inds", ",", "num_expected", ",", "bboxes", "[", "neg_inds", "]", ",", "\n", "neg_labels", ",", "feats", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.instance_balanced_pos_sampler.InstanceBalancedPosSampler._sample_pos": [[13, 56], ["torch.nonzero", "pos_inds.squeeze.squeeze.numel", "pos_inds.squeeze.squeeze.squeeze", "pos_inds.squeeze.squeeze.numel", "assign_result.gt_inds[].unique", "len", "int", "torch.cat", "torch.nonzero", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.append", "len", "numpy.array", "torch.from_numpy().to().long", "torch.cat", "round", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.numel", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.squeeze", "len", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.random_choice", "len", "list", "len", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.random_choice", "len", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.random_choice", "i.item", "torch.from_numpy().to", "float", "set", "set", "pos_inds.squeeze.squeeze.cpu", "instance_balanced_pos_sampler.InstanceBalancedPosSampler.cpu", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to"], ["def", "_sample_pos", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample positive boxes.\n\n        Args:\n            assign_result (:obj:`AssignResult`): The assigned results of boxes.\n            num_expected (int): The number of expected positive samples\n\n        Returns:\n            Tensor or ndarray: sampled indices.\n        \"\"\"", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", ">", "0", ",", "as_tuple", "=", "False", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "pos_inds", "=", "pos_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "pos_inds", ".", "numel", "(", ")", "<=", "num_expected", ":", "\n", "            ", "return", "pos_inds", "\n", "", "else", ":", "\n", "            ", "unique_gt_inds", "=", "assign_result", ".", "gt_inds", "[", "pos_inds", "]", ".", "unique", "(", ")", "\n", "num_gts", "=", "len", "(", "unique_gt_inds", ")", "\n", "num_per_gt", "=", "int", "(", "round", "(", "num_expected", "/", "float", "(", "num_gts", ")", ")", "+", "1", ")", "\n", "sampled_inds", "=", "[", "]", "\n", "for", "i", "in", "unique_gt_inds", ":", "\n", "                ", "inds", "=", "torch", ".", "nonzero", "(", "\n", "assign_result", ".", "gt_inds", "==", "i", ".", "item", "(", ")", ",", "as_tuple", "=", "False", ")", "\n", "if", "inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "                    ", "inds", "=", "inds", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "inds", ")", ">", "num_per_gt", ":", "\n", "                    ", "inds", "=", "self", ".", "random_choice", "(", "inds", ",", "num_per_gt", ")", "\n", "", "sampled_inds", ".", "append", "(", "inds", ")", "\n", "", "sampled_inds", "=", "torch", ".", "cat", "(", "sampled_inds", ")", "\n", "if", "len", "(", "sampled_inds", ")", "<", "num_expected", ":", "\n", "                ", "num_extra", "=", "num_expected", "-", "len", "(", "sampled_inds", ")", "\n", "extra_inds", "=", "np", ".", "array", "(", "\n", "list", "(", "set", "(", "pos_inds", ".", "cpu", "(", ")", ")", "-", "set", "(", "sampled_inds", ".", "cpu", "(", ")", ")", ")", ")", "\n", "if", "len", "(", "extra_inds", ")", ">", "num_extra", ":", "\n", "                    ", "extra_inds", "=", "self", ".", "random_choice", "(", "extra_inds", ",", "num_extra", ")", "\n", "", "extra_inds", "=", "torch", ".", "from_numpy", "(", "extra_inds", ")", ".", "to", "(", "\n", "assign_result", ".", "gt_inds", ".", "device", ")", ".", "long", "(", ")", "\n", "sampled_inds", "=", "torch", ".", "cat", "(", "[", "sampled_inds", ",", "extra_inds", "]", ")", "\n", "", "elif", "len", "(", "sampled_inds", ")", ">", "num_expected", ":", "\n", "                ", "sampled_inds", "=", "self", ".", "random_choice", "(", "sampled_inds", ",", "num_expected", ")", "\n", "", "return", "sampled_inds", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.iou_balanced_neg_sampler.IoUBalancedNegSampler.__init__": [[29, 45], ["random_sampler.RandomSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "floor_thr", "=", "-", "1", ",", "\n", "floor_fraction", "=", "0", ",", "\n", "num_bins", "=", "3", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "IoUBalancedNegSampler", ",", "self", ")", ".", "__init__", "(", "num", ",", "pos_fraction", ",", "\n", "**", "kwargs", ")", "\n", "assert", "floor_thr", ">=", "0", "or", "floor_thr", "==", "-", "1", "\n", "assert", "0", "<=", "floor_fraction", "<=", "1", "\n", "assert", "num_bins", ">=", "1", "\n", "\n", "self", ".", "floor_thr", "=", "floor_thr", "\n", "self", ".", "floor_fraction", "=", "floor_fraction", "\n", "self", ".", "num_bins", "=", "num_bins", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.iou_balanced_neg_sampler.IoUBalancedNegSampler.sample_via_interval": [[46, 87], ["max_overlaps.max", "int", "range", "numpy.concatenate", "set", "list", "numpy.concatenate.append", "len", "numpy.array", "numpy.concatenate", "len", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "numpy.array", "len", "list", "len", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "numpy.where", "numpy.logical_and", "set"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler.random_choice"], ["", "def", "sample_via_interval", "(", "self", ",", "max_overlaps", ",", "full_set", ",", "num_expected", ")", ":", "\n", "        ", "\"\"\"Sample according to the iou interval.\n\n        Args:\n            max_overlaps (torch.Tensor): IoU between bounding boxes and ground\n                truth boxes.\n            full_set (set(int)): A full set of indices of boxes\u3002\n            num_expected (int): Number of expected samples\u3002\n\n        Returns:\n            np.ndarray: Indices  of samples\n        \"\"\"", "\n", "max_iou", "=", "max_overlaps", ".", "max", "(", ")", "\n", "iou_interval", "=", "(", "max_iou", "-", "self", ".", "floor_thr", ")", "/", "self", ".", "num_bins", "\n", "per_num_expected", "=", "int", "(", "num_expected", "/", "self", ".", "num_bins", ")", "\n", "\n", "sampled_inds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_bins", ")", ":", "\n", "            ", "start_iou", "=", "self", ".", "floor_thr", "+", "i", "*", "iou_interval", "\n", "end_iou", "=", "self", ".", "floor_thr", "+", "(", "i", "+", "1", ")", "*", "iou_interval", "\n", "tmp_set", "=", "set", "(", "\n", "np", ".", "where", "(", "\n", "np", ".", "logical_and", "(", "max_overlaps", ">=", "start_iou", ",", "\n", "max_overlaps", "<", "end_iou", ")", ")", "[", "0", "]", ")", "\n", "tmp_inds", "=", "list", "(", "tmp_set", "&", "full_set", ")", "\n", "if", "len", "(", "tmp_inds", ")", ">", "per_num_expected", ":", "\n", "                ", "tmp_sampled_set", "=", "self", ".", "random_choice", "(", "tmp_inds", ",", "\n", "per_num_expected", ")", "\n", "", "else", ":", "\n", "                ", "tmp_sampled_set", "=", "np", ".", "array", "(", "tmp_inds", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "sampled_inds", ".", "append", "(", "tmp_sampled_set", ")", "\n", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "sampled_inds", ")", "\n", "if", "len", "(", "sampled_inds", ")", "<", "num_expected", ":", "\n", "            ", "num_extra", "=", "num_expected", "-", "len", "(", "sampled_inds", ")", "\n", "extra_inds", "=", "np", ".", "array", "(", "list", "(", "full_set", "-", "set", "(", "sampled_inds", ")", ")", ")", "\n", "if", "len", "(", "extra_inds", ")", ">", "num_extra", ":", "\n", "                ", "extra_inds", "=", "self", ".", "random_choice", "(", "extra_inds", ",", "num_extra", ")", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "[", "sampled_inds", ",", "extra_inds", "]", ")", "\n", "\n", "", "return", "sampled_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.iou_balanced_neg_sampler.IoUBalancedNegSampler._sample_neg": [[88, 158], ["torch.nonzero", "neg_inds.squeeze.squeeze.numel", "neg_inds.squeeze.squeeze.squeeze", "len", "assign_result.max_overlaps.cpu().numpy", "set", "list", "list", "int", "numpy.concatenate", "torch.from_numpy().long().to", "neg_inds.squeeze.squeeze.cpu().numpy", "set", "set", "len", "numpy.array", "len", "len", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "numpy.array", "len", "numpy.array", "numpy.concatenate", "assign_result.max_overlaps.cpu", "set", "set", "set", "set", "iou_balanced_neg_sampler.IoUBalancedNegSampler.sample_via_interval", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "len", "list", "len", "iou_balanced_neg_sampler.IoUBalancedNegSampler.random_choice", "torch.from_numpy().long", "neg_inds.squeeze.squeeze.cpu", "numpy.where", "numpy.where", "set", "numpy.logical_and", "numpy.where", "numpy.where", "numpy.where", "set", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.iou_balanced_neg_sampler.IoUBalancedNegSampler.sample_via_interval", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler.random_choice", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.random_sampler.RandomSampler.random_choice"], ["", "def", "_sample_neg", "(", "self", ",", "assign_result", ",", "num_expected", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample negative boxes.\n\n        Args:\n            assign_result (:obj:`AssignResult`): The assigned results of boxes.\n            num_expected (int): The number of expected negative samples\n\n        Returns:\n            Tensor or ndarray: sampled indices.\n        \"\"\"", "\n", "neg_inds", "=", "torch", ".", "nonzero", "(", "assign_result", ".", "gt_inds", "==", "0", ",", "as_tuple", "=", "False", ")", "\n", "if", "neg_inds", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "neg_inds", "=", "neg_inds", ".", "squeeze", "(", "1", ")", "\n", "", "if", "len", "(", "neg_inds", ")", "<=", "num_expected", ":", "\n", "            ", "return", "neg_inds", "\n", "", "else", ":", "\n", "            ", "max_overlaps", "=", "assign_result", ".", "max_overlaps", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# balance sampling for negative samples", "\n", "neg_set", "=", "set", "(", "neg_inds", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "self", ".", "floor_thr", ">", "0", ":", "\n", "                ", "floor_set", "=", "set", "(", "\n", "np", ".", "where", "(", "\n", "np", ".", "logical_and", "(", "max_overlaps", ">=", "0", ",", "\n", "max_overlaps", "<", "self", ".", "floor_thr", ")", ")", "[", "0", "]", ")", "\n", "iou_sampling_set", "=", "set", "(", "\n", "np", ".", "where", "(", "max_overlaps", ">=", "self", ".", "floor_thr", ")", "[", "0", "]", ")", "\n", "", "elif", "self", ".", "floor_thr", "==", "0", ":", "\n", "                ", "floor_set", "=", "set", "(", "np", ".", "where", "(", "max_overlaps", "==", "0", ")", "[", "0", "]", ")", "\n", "iou_sampling_set", "=", "set", "(", "\n", "np", ".", "where", "(", "max_overlaps", ">", "self", ".", "floor_thr", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "floor_set", "=", "set", "(", ")", "\n", "iou_sampling_set", "=", "set", "(", "\n", "np", ".", "where", "(", "max_overlaps", ">", "self", ".", "floor_thr", ")", "[", "0", "]", ")", "\n", "# for sampling interval calculation", "\n", "self", ".", "floor_thr", "=", "0", "\n", "\n", "", "floor_neg_inds", "=", "list", "(", "floor_set", "&", "neg_set", ")", "\n", "iou_sampling_neg_inds", "=", "list", "(", "iou_sampling_set", "&", "neg_set", ")", "\n", "num_expected_iou_sampling", "=", "int", "(", "num_expected", "*", "\n", "(", "1", "-", "self", ".", "floor_fraction", ")", ")", "\n", "if", "len", "(", "iou_sampling_neg_inds", ")", ">", "num_expected_iou_sampling", ":", "\n", "                ", "if", "self", ".", "num_bins", ">=", "2", ":", "\n", "                    ", "iou_sampled_inds", "=", "self", ".", "sample_via_interval", "(", "\n", "max_overlaps", ",", "set", "(", "iou_sampling_neg_inds", ")", ",", "\n", "num_expected_iou_sampling", ")", "\n", "", "else", ":", "\n", "                    ", "iou_sampled_inds", "=", "self", ".", "random_choice", "(", "\n", "iou_sampling_neg_inds", ",", "num_expected_iou_sampling", ")", "\n", "", "", "else", ":", "\n", "                ", "iou_sampled_inds", "=", "np", ".", "array", "(", "\n", "iou_sampling_neg_inds", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "num_expected_floor", "=", "num_expected", "-", "len", "(", "iou_sampled_inds", ")", "\n", "if", "len", "(", "floor_neg_inds", ")", ">", "num_expected_floor", ":", "\n", "                ", "sampled_floor_inds", "=", "self", ".", "random_choice", "(", "\n", "floor_neg_inds", ",", "num_expected_floor", ")", "\n", "", "else", ":", "\n", "                ", "sampled_floor_inds", "=", "np", ".", "array", "(", "floor_neg_inds", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "\n", "(", "sampled_floor_inds", ",", "iou_sampled_inds", ")", ")", "\n", "if", "len", "(", "sampled_inds", ")", "<", "num_expected", ":", "\n", "                ", "num_extra", "=", "num_expected", "-", "len", "(", "sampled_inds", ")", "\n", "extra_inds", "=", "np", ".", "array", "(", "list", "(", "neg_set", "-", "set", "(", "sampled_inds", ")", ")", ")", "\n", "if", "len", "(", "extra_inds", ")", ">", "num_extra", ":", "\n", "                    ", "extra_inds", "=", "self", ".", "random_choice", "(", "extra_inds", ",", "num_extra", ")", "\n", "", "sampled_inds", "=", "np", ".", "concatenate", "(", "(", "sampled_inds", ",", "extra_inds", ")", ")", "\n", "", "sampled_inds", "=", "torch", ".", "from_numpy", "(", "sampled_inds", ")", ".", "long", "(", ")", ".", "to", "(", "\n", "assign_result", ".", "gt_inds", ".", "device", ")", "\n", "return", "sampled_inds", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.combined_sampler.CombinedSampler.__init__": [[9, 13], ["base_sampler.BaseSampler.__init__", "builder.build_sampler", "builder.build_sampler"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.builder.build_sampler", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.builder.build_sampler"], ["def", "__init__", "(", "self", ",", "pos_sampler", ",", "neg_sampler", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CombinedSampler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "pos_sampler", "=", "build_sampler", "(", "pos_sampler", ",", "**", "kwargs", ")", "\n", "self", ".", "neg_sampler", "=", "build_sampler", "(", "neg_sampler", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.combined_sampler.CombinedSampler._sample_pos": [[14, 17], ["None"], "methods", ["None"], ["", "def", "_sample_pos", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample positive samples.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.combined_sampler.CombinedSampler._sample_neg": [[18, 21], ["None"], "methods", ["None"], ["", "def", "_sample_neg", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample negative samples.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.__init__": [[25, 50], ["gt_bboxes.view.view.numel", "torch.empty_like().view", "sampling_result.SamplingResult.pos_assigned_gt_inds.numel", "len", "gt_bboxes.view.view.view", "torch.empty_like"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pos_inds", ",", "neg_inds", ",", "bboxes", ",", "gt_bboxes", ",", "assign_result", ",", "\n", "gt_flags", ")", ":", "\n", "        ", "self", ".", "pos_inds", "=", "pos_inds", "\n", "self", ".", "neg_inds", "=", "neg_inds", "\n", "self", ".", "pos_bboxes", "=", "bboxes", "[", "pos_inds", "]", "\n", "self", ".", "neg_bboxes", "=", "bboxes", "[", "neg_inds", "]", "\n", "self", ".", "pos_is_gt", "=", "gt_flags", "[", "pos_inds", "]", "\n", "\n", "self", ".", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "self", ".", "pos_assigned_gt_inds", "=", "assign_result", ".", "gt_inds", "[", "pos_inds", "]", "-", "1", "\n", "\n", "if", "gt_bboxes", ".", "numel", "(", ")", "==", "0", ":", "\n", "# hack for index error case", "\n", "            ", "assert", "self", ".", "pos_assigned_gt_inds", ".", "numel", "(", ")", "==", "0", "\n", "self", ".", "pos_gt_bboxes", "=", "torch", ".", "empty_like", "(", "gt_bboxes", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "gt_bboxes", ".", "shape", ")", "<", "2", ":", "\n", "                ", "gt_bboxes", "=", "gt_bboxes", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "\n", "", "self", ".", "pos_gt_bboxes", "=", "gt_bboxes", "[", "self", ".", "pos_assigned_gt_inds", ",", ":", "]", "\n", "\n", "", "if", "assign_result", ".", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "pos_gt_labels", "=", "assign_result", ".", "labels", "[", "pos_inds", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "pos_gt_labels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.bboxes": [[51, 55], ["torch.cat"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "bboxes", "(", "self", ")", ":", "\n", "        ", "\"\"\"torch.Tensor: concatenated positive and negative boxes\"\"\"", "\n", "return", "torch", ".", "cat", "(", "[", "self", ".", "pos_bboxes", ",", "self", ".", "neg_bboxes", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to": [[56, 70], ["_dict.items", "isinstance", "value.to"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "\"\"\"Change the device of the data inplace.\n\n        Example:\n            >>> self = SamplingResult.random()\n            >>> print(f'self = {self.to(None)}')\n            >>> # xdoctest: +REQUIRES(--gpu)\n            >>> print(f'self = {self.to(0)}')\n        \"\"\"", "\n", "_dict", "=", "self", ".", "__dict__", "\n", "for", "key", ",", "value", "in", "_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "_dict", "[", "key", "]", "=", "value", ".", "to", "(", "device", ")", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.__nice__": [[71, 78], ["sampling_result.SamplingResult.info.copy", "sampling_result.SamplingResult.pop", "sampling_result.SamplingResult.pop", "sorted", "sampling_result.SamplingResult.items"], "methods", ["None"], ["", "def", "__nice__", "(", "self", ")", ":", "\n", "        ", "data", "=", "self", ".", "info", ".", "copy", "(", ")", "\n", "data", "[", "'pos_bboxes'", "]", "=", "data", ".", "pop", "(", "'pos_bboxes'", ")", ".", "shape", "\n", "data", "[", "'neg_bboxes'", "]", "=", "data", ".", "pop", "(", "'neg_bboxes'", ")", ".", "shape", "\n", "parts", "=", "[", "f\"'{k}': {v!r}\"", "for", "k", ",", "v", "in", "sorted", "(", "data", ".", "items", "(", ")", ")", "]", "\n", "body", "=", "'    '", "+", "',\\n    '", ".", "join", "(", "parts", ")", "\n", "return", "'{\\n'", "+", "body", "+", "'\\n}'", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.info": [[79, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "info", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a dictionary of info about the object.\"\"\"", "\n", "return", "{", "\n", "'pos_inds'", ":", "self", ".", "pos_inds", ",", "\n", "'neg_inds'", ":", "self", ".", "neg_inds", ",", "\n", "'pos_bboxes'", ":", "self", ".", "pos_bboxes", ",", "\n", "'neg_bboxes'", ":", "self", ".", "neg_bboxes", ",", "\n", "'pos_is_gt'", ":", "self", ".", "pos_is_gt", ",", "\n", "'num_gts'", ":", "self", ".", "num_gts", ",", "\n", "'pos_assigned_gt_inds'", ":", "self", ".", "pos_assigned_gt_inds", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.random": [[92, 153], ["demodata.ensure_rng", "AssignResult.random", "demodata.random_boxes", "demodata.random_boxes", "RandomSampler", "RandomSampler.sample", "demodata.ensure_rng.rand", "gt_bboxes.squeeze.squeeze.squeeze", "bboxes.squeeze.squeeze.squeeze"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.util_random.ensure_rng", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.demodata.random_boxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.demodata.random_boxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler.sample"], ["", "@", "classmethod", "\n", "def", "random", "(", "cls", ",", "rng", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            rng (None | int | numpy.random.RandomState): seed or state.\n            kwargs (keyword arguments):\n                - num_preds: number of predicted boxes\n                - num_gts: number of true boxes\n                - p_ignore (float): probability of a predicted box assinged to \\\n                    an ignored truth.\n                - p_assigned (float): probability of a predicted box not being \\\n                    assigned.\n                - p_use_label (float | bool): with labels or not.\n\n        Returns:\n            :obj:`SamplingResult`: Randomly generated sampling result.\n\n        Example:\n            >>> from mmdet.core.bbox.samplers.sampling_result import *  # NOQA\n            >>> self = SamplingResult.random()\n            >>> print(self.__dict__)\n        \"\"\"", "\n", "from", "mmdet", ".", "core", ".", "bbox", ".", "samplers", ".", "random_sampler", "import", "RandomSampler", "\n", "from", "mmdet", ".", "core", ".", "bbox", ".", "assigners", ".", "assign_result", "import", "AssignResult", "\n", "from", "mmdet", ".", "core", ".", "bbox", "import", "demodata", "\n", "rng", "=", "demodata", ".", "ensure_rng", "(", "rng", ")", "\n", "\n", "# make probabalistic?", "\n", "num", "=", "32", "\n", "pos_fraction", "=", "0.5", "\n", "neg_pos_ub", "=", "-", "1", "\n", "\n", "assign_result", "=", "AssignResult", ".", "random", "(", "rng", "=", "rng", ",", "**", "kwargs", ")", "\n", "\n", "# Note we could just compute an assignment", "\n", "bboxes", "=", "demodata", ".", "random_boxes", "(", "assign_result", ".", "num_preds", ",", "rng", "=", "rng", ")", "\n", "gt_bboxes", "=", "demodata", ".", "random_boxes", "(", "assign_result", ".", "num_gts", ",", "rng", "=", "rng", ")", "\n", "\n", "if", "rng", ".", "rand", "(", ")", ">", "0.2", ":", "\n", "# sometimes algorithms squeeze their data, be robust to that", "\n", "            ", "gt_bboxes", "=", "gt_bboxes", ".", "squeeze", "(", ")", "\n", "bboxes", "=", "bboxes", ".", "squeeze", "(", ")", "\n", "\n", "", "if", "assign_result", ".", "labels", "is", "None", ":", "\n", "            ", "gt_labels", "=", "None", "\n", "", "else", ":", "\n", "            ", "gt_labels", "=", "None", "# todo", "\n", "\n", "", "if", "gt_labels", "is", "None", ":", "\n", "            ", "add_gt_as_proposals", "=", "False", "\n", "", "else", ":", "\n", "            ", "add_gt_as_proposals", "=", "True", "# make probabalistic?", "\n", "\n", "", "sampler", "=", "RandomSampler", "(", "\n", "num", ",", "\n", "pos_fraction", ",", "\n", "neg_pos_ub", "=", "neg_pos_ub", ",", "\n", "add_gt_as_proposals", "=", "add_gt_as_proposals", ",", "\n", "rng", "=", "rng", ")", "\n", "self", "=", "sampler", ".", "sample", "(", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "gt_labels", ")", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler.__init__": [[12, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler._sample_pos": [[15, 18], ["None"], "methods", ["None"], ["", "def", "_sample_pos", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample positive samples.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler._sample_neg": [[19, 22], ["None"], "methods", ["None"], ["", "def", "_sample_neg", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Sample negative samples.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.pseudo_sampler.PseudoSampler.sample": [[23, 42], ["torch.nonzero().squeeze().unique", "torch.nonzero().squeeze().unique", "bboxes.new_zeros", "sampling_result.SamplingResult.SamplingResult", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero", "torch.nonzero"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "assign_result", ",", "bboxes", ",", "gt_bboxes", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Directly returns the positive and negative indices  of samples.\n\n        Args:\n            assign_result (:obj:`AssignResult`): Assigned results\n            bboxes (torch.Tensor): Bounding boxes\n            gt_bboxes (torch.Tensor): Ground truth boxes\n\n        Returns:\n            :obj:`SamplingResult`: sampler results\n        \"\"\"", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "\n", "assign_result", ".", "gt_inds", ">", "0", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", "-", "1", ")", ".", "unique", "(", ")", "\n", "neg_inds", "=", "torch", ".", "nonzero", "(", "\n", "assign_result", ".", "gt_inds", "==", "0", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", "-", "1", ")", ".", "unique", "(", ")", "\n", "gt_flags", "=", "bboxes", ".", "new_zeros", "(", "bboxes", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "sampling_result", "=", "SamplingResult", "(", "pos_inds", ",", "neg_inds", ",", "bboxes", ",", "gt_bboxes", ",", "\n", "assign_result", ",", "gt_flags", ")", "\n", "return", "sampling_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.group_sampler.GroupSampler.__init__": [[12, 22], ["hasattr", "dataset.flag.astype", "numpy.bincount", "enumerate", "int", "numpy.ceil"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "samples_per_gpu", "=", "1", ")", ":", "\n", "        ", "assert", "hasattr", "(", "dataset", ",", "'flag'", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "flag", "=", "dataset", ".", "flag", ".", "astype", "(", "np", ".", "int64", ")", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "np", ".", "ceil", "(", "\n", "size", "/", "self", ".", "samples_per_gpu", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.group_sampler.GroupSampler.__iter__": [[23, 46], ["enumerate", "numpy.concatenate", "numpy.concatenate", "indices.astype().tolist.astype().tolist.astype().tolist", "iter", "numpy.random.shuffle", "numpy.concatenate", "indices.astype().tolist.astype().tolist.append", "len", "numpy.where", "len", "len", "numpy.random.permutation", "indices.astype().tolist.astype().tolist.astype", "int", "numpy.random.choice", "range", "numpy.ceil", "len"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "np", ".", "random", ".", "shuffle", "(", "indice", ")", "\n", "num_extra", "=", "int", "(", "np", ".", "ceil", "(", "size", "/", "self", ".", "samples_per_gpu", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "-", "len", "(", "indice", ")", "\n", "indice", "=", "np", ".", "concatenate", "(", "\n", "[", "indice", ",", "np", ".", "random", ".", "choice", "(", "indice", ",", "num_extra", ")", "]", ")", "\n", "indices", ".", "append", "(", "indice", ")", "\n", "", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "[", "\n", "indices", "[", "i", "*", "self", ".", "samples_per_gpu", ":", "(", "i", "+", "1", ")", "*", "self", ".", "samples_per_gpu", "]", "\n", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "\n", "range", "(", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ")", ")", "\n", "]", "\n", "indices", "=", "np", ".", "concatenate", "(", "indices", ")", "\n", "indices", "=", "indices", ".", "astype", "(", "np", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.group_sampler.GroupSampler.__len__": [[47, 49], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.group_sampler.DistributedGroupSampler.__init__": [[72, 100], ["mmcv.runner.get_dist_info", "hasattr", "numpy.bincount", "enumerate", "int", "math.ceil"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "samples_per_gpu", "=", "1", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ",", "\n", "seed", "=", "0", ")", ":", "\n", "        ", "_rank", ",", "_num_replicas", "=", "get_dist_info", "(", ")", "\n", "if", "num_replicas", "is", "None", ":", "\n", "            ", "num_replicas", "=", "_num_replicas", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "rank", "=", "_rank", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "samples_per_gpu", "=", "samples_per_gpu", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "seed", "=", "seed", "if", "seed", "is", "not", "None", "else", "0", "\n", "\n", "assert", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", "\n", "self", ".", "flag", "=", "self", ".", "dataset", ".", "flag", "\n", "self", ".", "group_sizes", "=", "np", ".", "bincount", "(", "self", ".", "flag", ")", "\n", "\n", "self", ".", "num_samples", "=", "0", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "self", ".", "num_samples", "+=", "int", "(", "\n", "math", ".", "ceil", "(", "self", ".", "group_sizes", "[", "i", "]", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "\n", "self", ".", "num_replicas", ")", ")", "*", "self", ".", "samples_per_gpu", "\n", "", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.group_sampler.DistributedGroupSampler.__iter__": [[101, 143], ["torch.Generator", "torch.Generator.manual_seed", "enumerate", "iter", "len", "len", "indice[].tolist", "indice[].tolist.copy", "range", "indice[].tolist.extend", "indices.extend", "list", "range", "numpy.where", "len", "len", "indice[].tolist.extend", "torch.randperm", "int", "len", "list", "math.ceil", "torch.randperm().numpy", "torch.randperm", "int"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", "+", "self", ".", "seed", ")", "\n", "\n", "indices", "=", "[", "]", "\n", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "group_sizes", ")", ":", "\n", "            ", "if", "size", ">", "0", ":", "\n", "                ", "indice", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "i", ")", "[", "0", "]", "\n", "assert", "len", "(", "indice", ")", "==", "size", "\n", "# add .numpy() to avoid bug when selecting indice in parrots.", "\n", "# TODO: check whether torch.randperm() can be replaced by", "\n", "# numpy.random.permutation().", "\n", "indice", "=", "indice", "[", "list", "(", "\n", "torch", ".", "randperm", "(", "int", "(", "size", ")", ",", "generator", "=", "g", ")", ".", "numpy", "(", ")", ")", "]", ".", "tolist", "(", ")", "\n", "extra", "=", "int", "(", "\n", "math", ".", "ceil", "(", "\n", "size", "*", "1.0", "/", "self", ".", "samples_per_gpu", "/", "self", ".", "num_replicas", ")", "\n", ")", "*", "self", ".", "samples_per_gpu", "*", "self", ".", "num_replicas", "-", "len", "(", "indice", ")", "\n", "# pad indice", "\n", "tmp", "=", "indice", ".", "copy", "(", ")", "\n", "for", "_", "in", "range", "(", "extra", "//", "size", ")", ":", "\n", "                    ", "indice", ".", "extend", "(", "tmp", ")", "\n", "", "indice", ".", "extend", "(", "tmp", "[", ":", "extra", "%", "size", "]", ")", "\n", "indices", ".", "extend", "(", "indice", ")", "\n", "\n", "", "", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "indices", "=", "[", "\n", "indices", "[", "j", "]", "for", "i", "in", "list", "(", "\n", "torch", ".", "randperm", "(", "\n", "len", "(", "indices", ")", "//", "self", ".", "samples_per_gpu", ",", "generator", "=", "g", ")", ")", "\n", "for", "j", "in", "range", "(", "i", "*", "self", ".", "samples_per_gpu", ",", "(", "i", "+", "1", ")", "*", "\n", "self", ".", "samples_per_gpu", ")", "\n", "]", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.group_sampler.DistributedGroupSampler.__len__": [[144, 146], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.group_sampler.DistributedGroupSampler.set_epoch": [[147, 149], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.distributed_sampler.DistributedSampler.__init__": [[9, 19], ["torch.utils.data.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "num_replicas", "=", "None", ",", "\n", "rank", "=", "None", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "dataset", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ",", "shuffle", "=", "shuffle", ")", "\n", "# for the compatibility from PyTorch 1.3+", "\n", "self", ".", "seed", "=", "seed", "if", "seed", "is", "not", "None", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.distributed_sampler.DistributedSampler.__iter__": [[20, 40], ["iter", "torch.Generator", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.arange().tolist", "len", "len", "math.ceil", "torch.randperm", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", "+", "self", ".", "seed", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "# in case that indices is shorter than half of total_size", "\n", "", "indices", "=", "(", "indices", "*", "\n", "math", ".", "ceil", "(", "self", ".", "total_size", "/", "len", "(", "indices", ")", ")", ")", "[", ":", "self", ".", "total_size", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.CenterRegionAssigner.__init__": [[93, 106], ["dict", "iou_calculators.build_iou_calculator"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.builder.build_iou_calculator"], ["def", "__init__", "(", "self", ",", "\n", "pos_scale", ",", "\n", "neg_scale", ",", "\n", "min_pos_iof", "=", "1e-2", ",", "\n", "ignore_gt_scale", "=", "0.5", ",", "\n", "foreground_dominate", "=", "False", ",", "\n", "iou_calculator", "=", "dict", "(", "type", "=", "'BboxOverlaps2D'", ")", ")", ":", "\n", "        ", "self", ".", "pos_scale", "=", "pos_scale", "\n", "self", ".", "neg_scale", "=", "neg_scale", "\n", "self", ".", "min_pos_iof", "=", "min_pos_iof", "\n", "self", ".", "ignore_gt_scale", "=", "ignore_gt_scale", "\n", "self", ".", "foreground_dominate", "=", "foreground_dominate", "\n", "self", ".", "iou_calculator", "=", "build_iou_calculator", "(", "iou_calculator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.CenterRegionAssigner.get_gt_priorities": [[107, 124], ["center_region_assigner.bboxes_area", "bboxes_area.sort", "sort_idx.argsort.argsort.argsort"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.bboxes_area"], ["", "def", "get_gt_priorities", "(", "self", ",", "gt_bboxes", ")", ":", "\n", "        ", "\"\"\"Get gt priorities according to their areas.\n\n        Smaller gt has higher priority.\n\n        Args:\n            gt_bboxes (Tensor): Ground truth boxes, shape (k, 4).\n\n        Returns:\n            Tensor: The priority of gts so that gts with larger priority is \\\n              more likely to be assigned. Shape (k, )\n        \"\"\"", "\n", "gt_areas", "=", "bboxes_area", "(", "gt_bboxes", ")", "\n", "# Rank all gt bbox areas. Smaller objects has larger priority", "\n", "_", ",", "sort_idx", "=", "gt_areas", ".", "sort", "(", "descending", "=", "True", ")", "\n", "sort_idx", "=", "sort_idx", ".", "argsort", "(", ")", "\n", "return", "sort_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.CenterRegionAssigner.assign": [[125, 255], ["center_region_assigner.scale_boxes", "center_region_assigner.scale_boxes", "center_region_assigner.is_located_in", "center_region_assigner.CenterRegionAssigner.iou_calculator", "assign_result.AssignResult.AssignResult", "assign_result.AssignResult.AssignResult.set_extra_property", "bboxes.size", "center_region_assigner.CenterRegionAssigner.iou_calculator", "gt_bboxes.size", "bboxes.size", "is_bbox_in_gt_core.new_zeros", "is_bbox_in_gt_core.new_zeros.new_empty", "center_region_assigner.CenterRegionAssigner.get_gt_priorities", "center_region_assigner.CenterRegionAssigner.assign_one_hot_gt_indices", "center_region_assigner.scale_boxes", "center_region_assigner.is_located_in", "is_bbox_in_ignored_gts.any.any.any", "is_bbox_in_gt_core.new_zeros.new_full", "torch.nonzero().squeeze", "is_bbox_in_gt_core.new_zeros.new_empty.clone", "scale_boxes.numel", "torch.nonzero().squeeze.numel", "is_bbox_in_gt_core.new_zeros.new_empty.numel", "torch.nonzero"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.scale_boxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.scale_boxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.is_located_in", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.set_extra_property", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.CenterRegionAssigner.get_gt_priorities", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.CenterRegionAssigner.assign_one_hot_gt_indices", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.scale_boxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.is_located_in"], ["", "def", "assign", "(", "self", ",", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", "=", "None", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign gt to bboxes.\n\n        This method assigns gts to every bbox (proposal/anchor), each bbox \\\n        will be assigned with -1, or a semi-positive number. -1 means \\\n        negative sample, semi-positive number is the index (0-based) of \\\n        assigned gt.\n\n        Args:\n            bboxes (Tensor): Bounding boxes to be assigned, shape(n, 4).\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_bboxes_ignore (tensor, optional): Ground truth bboxes that are\n              labelled as `ignored`, e.g., crowd boxes in COCO.\n            gt_labels (tensor, optional): Label of gt_bboxes, shape (num_gts,).\n\n        Returns:\n            :obj:`AssignResult`: The assigned result. Note that \\\n              shadowed_labels of shape (N, 2) is also added as an \\\n              `assign_result` attribute. `shadowed_labels` is a tensor \\\n              composed of N pairs of anchor_ind, class_label], where N \\\n              is the number of anchors that lie in the outer region of a \\\n              gt, anchor_ind is the shadowed anchor index and class_label \\\n              is the shadowed class label.\n\n        Example:\n            >>> self = CenterRegionAssigner(0.2, 0.2)\n            >>> bboxes = torch.Tensor([[0, 0, 10, 10], [10, 10, 20, 20]])\n            >>> gt_bboxes = torch.Tensor([[0, 0, 10, 10]])\n            >>> assign_result = self.assign(bboxes, gt_bboxes)\n            >>> expected_gt_inds = torch.LongTensor([1, 0])\n            >>> assert torch.all(assign_result.gt_inds == expected_gt_inds)\n        \"\"\"", "\n", "# There are in total 5 steps in the pixel assignment", "\n", "# 1. Find core (the center region, say inner 0.2)", "\n", "#     and shadow (the relatively ourter part, say inner 0.2-0.5)", "\n", "#     regions of every gt.", "\n", "# 2. Find all prior bboxes that lie in gt_core and gt_shadow regions", "\n", "# 3. Assign prior bboxes in gt_core with a one-hot id of the gt in", "\n", "#      the image.", "\n", "#    3.1. For overlapping objects, the prior bboxes in gt_core is", "\n", "#           assigned with the object with smallest area", "\n", "# 4. Assign prior bboxes with class label according to its gt id.", "\n", "#    4.1. Assign -1 to prior bboxes lying in shadowed gts", "\n", "#    4.2. Assign positive prior boxes with the corresponding label", "\n", "# 5. Find pixels lying in the shadow of an object and assign them with", "\n", "#      background label, but set the loss weight of its corresponding", "\n", "#      gt to zero.", "\n", "assert", "bboxes", ".", "size", "(", "1", ")", "==", "4", ",", "'bboxes must have size of 4'", "\n", "# 1. Find core positive and shadow region of every gt", "\n", "gt_core", "=", "scale_boxes", "(", "gt_bboxes", ",", "self", ".", "pos_scale", ")", "\n", "gt_shadow", "=", "scale_boxes", "(", "gt_bboxes", ",", "self", ".", "neg_scale", ")", "\n", "\n", "# 2. Find prior bboxes that lie in gt_core and gt_shadow regions", "\n", "bbox_centers", "=", "(", "bboxes", "[", ":", ",", "2", ":", "4", "]", "+", "bboxes", "[", ":", ",", "0", ":", "2", "]", ")", "/", "2", "\n", "# The center points lie within the gt boxes", "\n", "is_bbox_in_gt", "=", "is_located_in", "(", "bbox_centers", ",", "gt_bboxes", ")", "\n", "# Only calculate bbox and gt_core IoF. This enables small prior bboxes", "\n", "#   to match large gts", "\n", "bbox_and_gt_core_overlaps", "=", "self", ".", "iou_calculator", "(", "\n", "bboxes", ",", "gt_core", ",", "mode", "=", "'iof'", ")", "\n", "# The center point of effective priors should be within the gt box", "\n", "is_bbox_in_gt_core", "=", "is_bbox_in_gt", "&", "(", "\n", "bbox_and_gt_core_overlaps", ">", "self", ".", "min_pos_iof", ")", "# shape (n, k)", "\n", "\n", "is_bbox_in_gt_shadow", "=", "(", "\n", "self", ".", "iou_calculator", "(", "bboxes", ",", "gt_shadow", ",", "mode", "=", "'iof'", ")", ">", "\n", "self", ".", "min_pos_iof", ")", "\n", "# Rule out center effective positive pixels", "\n", "is_bbox_in_gt_shadow", "&=", "(", "~", "is_bbox_in_gt_core", ")", "\n", "\n", "num_gts", ",", "num_bboxes", "=", "gt_bboxes", ".", "size", "(", "0", ")", ",", "bboxes", ".", "size", "(", "0", ")", "\n", "if", "num_gts", "==", "0", "or", "num_bboxes", "==", "0", ":", "\n", "# If no gts exist, assign all pixels to negative", "\n", "            ", "assigned_gt_ids", "=", "is_bbox_in_gt_core", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "pixels_in_gt_shadow", "=", "assigned_gt_ids", ".", "new_empty", "(", "(", "0", ",", "2", ")", ")", "\n", "", "else", ":", "\n", "# Step 3: assign a one-hot gt id to each pixel, and smaller objects", "\n", "#    have high priority to assign the pixel.", "\n", "            ", "sort_idx", "=", "self", ".", "get_gt_priorities", "(", "gt_bboxes", ")", "\n", "assigned_gt_ids", ",", "pixels_in_gt_shadow", "=", "self", ".", "assign_one_hot_gt_indices", "(", "is_bbox_in_gt_core", ",", "\n", "is_bbox_in_gt_shadow", ",", "\n", "gt_priority", "=", "sort_idx", ")", "\n", "\n", "", "if", "gt_bboxes_ignore", "is", "not", "None", "and", "gt_bboxes_ignore", ".", "numel", "(", ")", ">", "0", ":", "\n", "# No ground truth or boxes, return empty assignment", "\n", "            ", "gt_bboxes_ignore", "=", "scale_boxes", "(", "\n", "gt_bboxes_ignore", ",", "scale", "=", "self", ".", "ignore_gt_scale", ")", "\n", "is_bbox_in_ignored_gts", "=", "is_located_in", "(", "bbox_centers", ",", "\n", "gt_bboxes_ignore", ")", "\n", "is_bbox_in_ignored_gts", "=", "is_bbox_in_ignored_gts", ".", "any", "(", "dim", "=", "1", ")", "\n", "assigned_gt_ids", "[", "is_bbox_in_ignored_gts", "]", "=", "-", "1", "\n", "\n", "# 4. Assign prior bboxes with class label according to its gt id.", "\n", "", "assigned_labels", "=", "None", "\n", "shadowed_pixel_labels", "=", "None", "\n", "if", "gt_labels", "is", "not", "None", ":", "\n", "# Default assigned label is the background (-1)", "\n", "            ", "assigned_labels", "=", "assigned_gt_ids", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "-", "1", ")", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "\n", "assigned_gt_ids", ">", "0", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "assigned_labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "assigned_gt_ids", "[", "pos_inds", "]", "\n", "-", "1", "]", "\n", "# 5. Find pixels lying in the shadow of an object", "\n", "", "shadowed_pixel_labels", "=", "pixels_in_gt_shadow", ".", "clone", "(", ")", "\n", "if", "pixels_in_gt_shadow", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "pixel_idx", ",", "gt_idx", "=", "pixels_in_gt_shadow", "[", ":", ",", "0", "]", ",", "pixels_in_gt_shadow", "[", ":", ",", "1", "]", "\n", "assert", "(", "assigned_gt_ids", "[", "pixel_idx", "]", "!=", "gt_idx", ")", ".", "all", "(", ")", ",", "'Some pixels are dually assigned to ignore and gt!'", "\n", "shadowed_pixel_labels", "[", ":", ",", "1", "]", "=", "gt_labels", "[", "gt_idx", "-", "1", "]", "\n", "override", "=", "(", "\n", "assigned_labels", "[", "pixel_idx", "]", "==", "shadowed_pixel_labels", "[", ":", ",", "1", "]", ")", "\n", "if", "self", ".", "foreground_dominate", ":", "\n", "# When a pixel is both positive and shadowed, set it as pos", "\n", "                    ", "shadowed_pixel_labels", "=", "shadowed_pixel_labels", "[", "~", "override", "]", "\n", "", "else", ":", "\n", "# When a pixel is both pos and shadowed, set it as shadowed", "\n", "                    ", "assigned_labels", "[", "pixel_idx", "[", "override", "]", "]", "=", "-", "1", "\n", "assigned_gt_ids", "[", "pixel_idx", "[", "override", "]", "]", "=", "0", "\n", "\n", "", "", "", "assign_result", "=", "AssignResult", "(", "\n", "num_gts", ",", "assigned_gt_ids", ",", "None", ",", "labels", "=", "assigned_labels", ")", "\n", "# Add shadowed_labels as assign_result property. Shape: (num_shadow, 2)", "\n", "assign_result", ".", "set_extra_property", "(", "'shadowed_labels'", ",", "\n", "shadowed_pixel_labels", ")", "\n", "return", "assign_result", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.CenterRegionAssigner.assign_one_hot_gt_indices": [[256, 336], ["is_bbox_in_gt_core.new_zeros", "torch.nonzero", "is_bbox_in_gt_core.new_full", "torch.any", "pair_priority[].max", "torch.cat", "torch.arange", "torch.arange.size", "is_bbox_in_gt_core.sum", "torch.nonzero", "torch.cat.numel", "torch.nonzero"], "methods", ["None"], ["", "def", "assign_one_hot_gt_indices", "(", "self", ",", "\n", "is_bbox_in_gt_core", ",", "\n", "is_bbox_in_gt_shadow", ",", "\n", "gt_priority", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign only one gt index to each prior box.\n\n        Gts with large gt_priority are more likely to be assigned.\n\n        Args:\n            is_bbox_in_gt_core (Tensor): Bool tensor indicating the bbox center\n              is in the core area of a gt (e.g. 0-0.2).\n              Shape: (num_prior, num_gt).\n            is_bbox_in_gt_shadow (Tensor): Bool tensor indicating the bbox\n              center is in the shadowed area of a gt (e.g. 0.2-0.5).\n              Shape: (num_prior, num_gt).\n            gt_priority (Tensor): Priorities of gts. The gt with a higher\n              priority is more likely to be assigned to the bbox when the bbox\n              match with multiple gts. Shape: (num_gt, ).\n\n        Returns:\n            tuple: Returns (assigned_gt_inds, shadowed_gt_inds).\n\n                - assigned_gt_inds: The assigned gt index of each prior bbox \\\n                    (i.e. index from 1 to num_gts). Shape: (num_prior, ).\n                - shadowed_gt_inds: shadowed gt indices. It is a tensor of \\\n                    shape (num_ignore, 2) with first column being the \\\n                    shadowed prior bbox indices and the second column the \\\n                    shadowed gt indices (1-based).\n        \"\"\"", "\n", "num_bboxes", ",", "num_gts", "=", "is_bbox_in_gt_core", ".", "shape", "\n", "\n", "if", "gt_priority", "is", "None", ":", "\n", "            ", "gt_priority", "=", "torch", ".", "arange", "(", "\n", "num_gts", ",", "device", "=", "is_bbox_in_gt_core", ".", "device", ")", "\n", "", "assert", "gt_priority", ".", "size", "(", "0", ")", "==", "num_gts", "\n", "# The bigger gt_priority, the more preferable to be assigned", "\n", "# The assigned inds are by default 0 (background)", "\n", "assigned_gt_inds", "=", "is_bbox_in_gt_core", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "# Shadowed bboxes are assigned to be background. But the corresponding", "\n", "#   label is ignored during loss calculation, which is done through", "\n", "#   shadowed_gt_inds", "\n", "shadowed_gt_inds", "=", "torch", ".", "nonzero", "(", "is_bbox_in_gt_shadow", ",", "as_tuple", "=", "False", ")", "\n", "if", "is_bbox_in_gt_core", ".", "sum", "(", ")", "==", "0", ":", "# No gt match", "\n", "            ", "shadowed_gt_inds", "[", ":", ",", "1", "]", "+=", "1", "# 1-based. For consistency issue", "\n", "return", "assigned_gt_inds", ",", "shadowed_gt_inds", "\n", "\n", "# The priority of each prior box and gt pair. If one prior box is", "\n", "#  matched bo multiple gts. Only the pair with the highest priority", "\n", "#  is saved", "\n", "", "pair_priority", "=", "is_bbox_in_gt_core", ".", "new_full", "(", "(", "num_bboxes", ",", "num_gts", ")", ",", "\n", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# Each bbox could match with multiple gts.", "\n", "# The following codes deal with this situation", "\n", "# Matched  bboxes (to any gt). Shape: (num_pos_anchor, )", "\n", "inds_of_match", "=", "torch", ".", "any", "(", "is_bbox_in_gt_core", ",", "dim", "=", "1", ")", "\n", "# The matched gt index of each positive bbox. Length >= num_pos_anchor", "\n", "#   , since one bbox could match multiple gts", "\n", "matched_bbox_gt_inds", "=", "torch", ".", "nonzero", "(", "\n", "is_bbox_in_gt_core", ",", "as_tuple", "=", "False", ")", "[", ":", ",", "1", "]", "\n", "# Assign priority to each bbox-gt pair.", "\n", "pair_priority", "[", "is_bbox_in_gt_core", "]", "=", "gt_priority", "[", "matched_bbox_gt_inds", "]", "\n", "_", ",", "argmax_priority", "=", "pair_priority", "[", "inds_of_match", "]", ".", "max", "(", "dim", "=", "1", ")", "\n", "assigned_gt_inds", "[", "inds_of_match", "]", "=", "argmax_priority", "+", "1", "# 1-based", "\n", "# Zero-out the assigned anchor box to filter the shadowed gt indices", "\n", "is_bbox_in_gt_core", "[", "inds_of_match", ",", "argmax_priority", "]", "=", "0", "\n", "# Concat the shadowed indices due to overlapping with that out side of", "\n", "#   effective scale. shape: (total_num_ignore, 2)", "\n", "shadowed_gt_inds", "=", "torch", ".", "cat", "(", "\n", "(", "shadowed_gt_inds", ",", "torch", ".", "nonzero", "(", "\n", "is_bbox_in_gt_core", ",", "as_tuple", "=", "False", ")", ")", ",", "\n", "dim", "=", "0", ")", "\n", "# `is_bbox_in_gt_core` should be changed back to keep arguments intact.", "\n", "is_bbox_in_gt_core", "[", "inds_of_match", ",", "argmax_priority", "]", "=", "1", "\n", "# 1-based shadowed gt indices, to be consistent with `assigned_gt_inds`", "\n", "if", "shadowed_gt_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "shadowed_gt_inds", "[", ":", ",", "1", "]", "+=", "1", "\n", "", "return", "assigned_gt_inds", ",", "shadowed_gt_inds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.scale_boxes": [[9, 34], ["torch.zeros_like", "bboxes.size"], "function", ["None"], ["def", "scale_boxes", "(", "bboxes", ",", "scale", ")", ":", "\n", "    ", "\"\"\"Expand an array of boxes by a given scale.\n\n    Args:\n        bboxes (Tensor): Shape (m, 4)\n        scale (float): The scale factor of bboxes\n\n    Returns:\n        (Tensor): Shape (m, 4). Scaled bboxes\n    \"\"\"", "\n", "assert", "bboxes", ".", "size", "(", "1", ")", "==", "4", "\n", "w_half", "=", "(", "bboxes", "[", ":", ",", "2", "]", "-", "bboxes", "[", ":", ",", "0", "]", ")", "*", ".5", "\n", "h_half", "=", "(", "bboxes", "[", ":", ",", "3", "]", "-", "bboxes", "[", ":", ",", "1", "]", ")", "*", ".5", "\n", "x_c", "=", "(", "bboxes", "[", ":", ",", "2", "]", "+", "bboxes", "[", ":", ",", "0", "]", ")", "*", ".5", "\n", "y_c", "=", "(", "bboxes", "[", ":", ",", "3", "]", "+", "bboxes", "[", ":", ",", "1", "]", ")", "*", ".5", "\n", "\n", "w_half", "*=", "scale", "\n", "h_half", "*=", "scale", "\n", "\n", "boxes_scaled", "=", "torch", ".", "zeros_like", "(", "bboxes", ")", "\n", "boxes_scaled", "[", ":", ",", "0", "]", "=", "x_c", "-", "w_half", "\n", "boxes_scaled", "[", ":", ",", "2", "]", "=", "x_c", "+", "w_half", "\n", "boxes_scaled", "[", ":", ",", "1", "]", "=", "y_c", "-", "h_half", "\n", "boxes_scaled", "[", ":", ",", "3", "]", "=", "y_c", "+", "h_half", "\n", "return", "boxes_scaled", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.is_located_in": [[36, 52], ["points.size", "bboxes.size", "points[].unsqueeze", "bboxes[].unsqueeze", "points[].unsqueeze", "bboxes[].unsqueeze", "points[].unsqueeze", "bboxes[].unsqueeze", "points[].unsqueeze", "bboxes[].unsqueeze"], "function", ["None"], ["", "def", "is_located_in", "(", "points", ",", "bboxes", ")", ":", "\n", "    ", "\"\"\"Are points located in bboxes.\n\n    Args:\n      points (Tensor): Points, shape: (m, 2).\n      bboxes (Tensor): Bounding boxes, shape: (n, 4).\n\n    Return:\n      Tensor: Flags indicating if points are located in bboxes, shape: (m, n).\n    \"\"\"", "\n", "assert", "points", ".", "size", "(", "1", ")", "==", "2", "\n", "assert", "bboxes", ".", "size", "(", "1", ")", "==", "4", "\n", "return", "(", "points", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ">", "bboxes", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "0", ")", ")", "&", "(", "points", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "<", "bboxes", "[", ":", ",", "2", "]", ".", "unsqueeze", "(", "0", ")", ")", "&", "(", "points", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", ">", "bboxes", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "0", ")", ")", "&", "(", "points", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", "<", "bboxes", "[", ":", ",", "3", "]", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.center_region_assigner.bboxes_area": [[54, 68], ["bboxes.size"], "function", ["None"], ["", "def", "bboxes_area", "(", "bboxes", ")", ":", "\n", "    ", "\"\"\"Compute the area of an array of bboxes.\n\n    Args:\n        bboxes (Tensor): The coordinates ox bboxes. Shape: (m, 4)\n\n    Returns:\n        Tensor: Area of the bboxes. Shape: (m, )\n    \"\"\"", "\n", "assert", "bboxes", ".", "size", "(", "1", ")", "==", "4", "\n", "w", "=", "(", "bboxes", "[", ":", ",", "2", "]", "-", "bboxes", "[", ":", ",", "0", "]", ")", "\n", "h", "=", "(", "bboxes", "[", ":", ",", "3", "]", "-", "bboxes", "[", ":", ",", "1", "]", ")", "\n", "areas", "=", "w", "*", "h", "\n", "return", "areas", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.approx_max_iou_assigner.ApproxMaxIoUAssigner.__init__": [[39, 58], ["dict", "iou_calculators.build_iou_calculator"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.builder.build_iou_calculator"], ["def", "__init__", "(", "self", ",", "\n", "pos_iou_thr", ",", "\n", "neg_iou_thr", ",", "\n", "min_pos_iou", "=", ".0", ",", "\n", "gt_max_assign_all", "=", "True", ",", "\n", "ignore_iof_thr", "=", "-", "1", ",", "\n", "ignore_wrt_candidates", "=", "True", ",", "\n", "match_low_quality", "=", "True", ",", "\n", "gpu_assign_thr", "=", "-", "1", ",", "\n", "iou_calculator", "=", "dict", "(", "type", "=", "'BboxOverlaps2D'", ")", ")", ":", "\n", "        ", "self", ".", "pos_iou_thr", "=", "pos_iou_thr", "\n", "self", ".", "neg_iou_thr", "=", "neg_iou_thr", "\n", "self", ".", "min_pos_iou", "=", "min_pos_iou", "\n", "self", ".", "gt_max_assign_all", "=", "gt_max_assign_all", "\n", "self", ".", "ignore_iof_thr", "=", "ignore_iof_thr", "\n", "self", ".", "ignore_wrt_candidates", "=", "ignore_wrt_candidates", "\n", "self", ".", "gpu_assign_thr", "=", "gpu_assign_thr", "\n", "self", ".", "match_low_quality", "=", "match_low_quality", "\n", "self", ".", "iou_calculator", "=", "build_iou_calculator", "(", "iou_calculator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.approx_max_iou_assigner.ApproxMaxIoUAssigner.assign": [[59, 146], ["squares.size", "gt_bboxes.cpu.cpu.size", "torch.transpose().contiguous().view", "approx_max_iou_assigner.ApproxMaxIoUAssigner.iou_calculator", "approx_max_iou_assigner.ApproxMaxIoUAssigner.view().max", "torch.transpose", "approx_max_iou_assigner.ApproxMaxIoUAssigner.assign_wrt_overlaps", "approxs.cpu.cpu.new", "approx_max_iou_assigner.ApproxMaxIoUAssigner.assign_wrt_overlaps", "approxs.cpu.cpu.cpu", "gt_bboxes.cpu.cpu.cpu", "approx_max_iou_assigner.ApproxMaxIoUAssigner.gt_inds.to", "approx_max_iou_assigner.ApproxMaxIoUAssigner.max_overlaps.to", "torch.transpose().contiguous", "gt_bboxes_ignore.cpu.cpu.cpu", "gt_labels.cpu.cpu.cpu", "approx_max_iou_assigner.ApproxMaxIoUAssigner.view", "gt_bboxes_ignore.cpu.cpu.numel", "squares.numel", "approx_max_iou_assigner.ApproxMaxIoUAssigner.iou_calculator", "approx_max_iou_assigner.ApproxMaxIoUAssigner.max", "approx_max_iou_assigner.ApproxMaxIoUAssigner.iou_calculator", "approx_max_iou_assigner.ApproxMaxIoUAssigner.max", "approx_max_iou_assigner.ApproxMaxIoUAssigner.labels.to", "torch.transpose", "approxs.cpu.cpu.view"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to"], ["", "def", "assign", "(", "self", ",", "\n", "approxs", ",", "\n", "squares", ",", "\n", "approxs_per_octave", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign gt to approxs.\n\n        This method assign a gt bbox to each group of approxs (bboxes),\n        each group of approxs is represent by a base approx (bbox) and\n        will be assigned with -1, or a semi-positive number.\n        background_label (-1) means negative sample,\n        semi-positive number is the index (0-based) of assigned gt.\n        The assignment is done in following steps, the order matters.\n\n        1. assign every bbox to background_label (-1)\n        2. use the max IoU of each group of approxs to assign\n        2. assign proposals whose iou with all gts < neg_iou_thr to background\n        3. for each bbox, if the iou with its nearest gt >= pos_iou_thr,\n           assign it to that bbox\n        4. for each gt bbox, assign its nearest proposals (may be more than\n           one) to itself\n\n        Args:\n            approxs (Tensor): Bounding boxes to be assigned,\n                shape(approxs_per_octave*n, 4).\n            squares (Tensor): Base Bounding boxes to be assigned,\n                shape(n, 4).\n            approxs_per_octave (int): number of approxs per octave\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`, e.g., crowd boxes in COCO.\n            gt_labels (Tensor, optional): Label of gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "num_squares", "=", "squares", ".", "size", "(", "0", ")", "\n", "num_gts", "=", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "\n", "if", "num_squares", "==", "0", "or", "num_gts", "==", "0", ":", "\n", "# No predictions and/or truth, return empty assignment", "\n", "            ", "overlaps", "=", "approxs", ".", "new", "(", "num_gts", ",", "num_squares", ")", "\n", "assign_result", "=", "self", ".", "assign_wrt_overlaps", "(", "overlaps", ",", "gt_labels", ")", "\n", "return", "assign_result", "\n", "\n", "# re-organize anchors by approxs_per_octave x num_squares", "\n", "", "approxs", "=", "torch", ".", "transpose", "(", "\n", "approxs", ".", "view", "(", "num_squares", ",", "approxs_per_octave", ",", "4", ")", ",", "0", ",", "\n", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", "\n", "assign_on_cpu", "=", "True", "if", "(", "self", ".", "gpu_assign_thr", ">", "0", ")", "and", "(", "\n", "num_gts", ">", "self", ".", "gpu_assign_thr", ")", "else", "False", "\n", "# compute overlap and assign gt on CPU when number of GT is large", "\n", "if", "assign_on_cpu", ":", "\n", "            ", "device", "=", "approxs", ".", "device", "\n", "approxs", "=", "approxs", ".", "cpu", "(", ")", "\n", "gt_bboxes", "=", "gt_bboxes", ".", "cpu", "(", ")", "\n", "if", "gt_bboxes_ignore", "is", "not", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ".", "cpu", "(", ")", "\n", "", "if", "gt_labels", "is", "not", "None", ":", "\n", "                ", "gt_labels", "=", "gt_labels", ".", "cpu", "(", ")", "\n", "", "", "all_overlaps", "=", "self", ".", "iou_calculator", "(", "approxs", ",", "gt_bboxes", ")", "\n", "\n", "overlaps", ",", "_", "=", "all_overlaps", ".", "view", "(", "approxs_per_octave", ",", "num_squares", ",", "\n", "num_gts", ")", ".", "max", "(", "dim", "=", "0", ")", "\n", "overlaps", "=", "torch", ".", "transpose", "(", "overlaps", ",", "0", ",", "1", ")", "\n", "\n", "if", "(", "self", ".", "ignore_iof_thr", ">", "0", "and", "gt_bboxes_ignore", "is", "not", "None", "\n", "and", "gt_bboxes_ignore", ".", "numel", "(", ")", ">", "0", "and", "squares", ".", "numel", "(", ")", ">", "0", ")", ":", "\n", "            ", "if", "self", ".", "ignore_wrt_candidates", ":", "\n", "                ", "ignore_overlaps", "=", "self", ".", "iou_calculator", "(", "\n", "squares", ",", "gt_bboxes_ignore", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "ignore_overlaps", "=", "self", ".", "iou_calculator", "(", "\n", "gt_bboxes_ignore", ",", "squares", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "", "overlaps", "[", ":", ",", "ignore_max_overlaps", ">", "self", ".", "ignore_iof_thr", "]", "=", "-", "1", "\n", "\n", "", "assign_result", "=", "self", ".", "assign_wrt_overlaps", "(", "overlaps", ",", "gt_labels", ")", "\n", "if", "assign_on_cpu", ":", "\n", "            ", "assign_result", ".", "gt_inds", "=", "assign_result", ".", "gt_inds", ".", "to", "(", "device", ")", "\n", "assign_result", ".", "max_overlaps", "=", "assign_result", ".", "max_overlaps", ".", "to", "(", "device", ")", "\n", "if", "assign_result", ".", "labels", "is", "not", "None", ":", "\n", "                ", "assign_result", ".", "labels", "=", "assign_result", ".", "labels", ".", "to", "(", "device", ")", "\n", "", "", "return", "assign_result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.grid_assigner.GridAssigner.__init__": [[30, 41], ["dict", "iou_calculators.build_iou_calculator"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.builder.build_iou_calculator"], ["def", "__init__", "(", "self", ",", "\n", "pos_iou_thr", ",", "\n", "neg_iou_thr", ",", "\n", "min_pos_iou", "=", ".0", ",", "\n", "gt_max_assign_all", "=", "True", ",", "\n", "iou_calculator", "=", "dict", "(", "type", "=", "'BboxOverlaps2D'", ")", ")", ":", "\n", "        ", "self", ".", "pos_iou_thr", "=", "pos_iou_thr", "\n", "self", ".", "neg_iou_thr", "=", "neg_iou_thr", "\n", "self", ".", "min_pos_iou", "=", "min_pos_iou", "\n", "self", ".", "gt_max_assign_all", "=", "gt_max_assign_all", "\n", "self", ".", "iou_calculator", "=", "build_iou_calculator", "(", "iou_calculator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.grid_assigner.GridAssigner.assign": [[42, 156], ["grid_assigner.GridAssigner.iou_calculator", "grid_assigner.GridAssigner.new_full", "grid_assigner.GridAssigner.max", "isinstance", "grid_assigner.GridAssigner.max", "grid_assigner.GridAssigner.max", "range", "assign_result.AssignResult", "gt_bboxes.size", "bboxes.size", "grid_assigner.GridAssigner.new_zeros", "assign_result.AssignResult", "isinstance", "box_responsible_flags.type", "grid_assigner.GridAssigner.new_full.new_full", "torch.nonzero().squeeze", "grid_assigner.GridAssigner.new_full", "torch.nonzero().squeeze.numel", "len", "torch.nonzero", "box_responsible_flags.type", "box_responsible_flags.type"], "methods", ["None"], ["", "def", "assign", "(", "self", ",", "bboxes", ",", "box_responsible_flags", ",", "gt_bboxes", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign gt to bboxes. The process is very much like the max iou\n        assigner, except that positive samples are constrained within the cell\n        that the gt boxes fell in.\n\n        This method assign a gt bbox to every bbox (proposal/anchor), each bbox\n        will be assigned with -1, 0, or a positive number. -1 means don't care,\n        0 means negative sample, positive number is the index (1-based) of\n        assigned gt.\n        The assignment is done in following steps, the order matters.\n\n        1. assign every bbox to -1\n        2. assign proposals whose iou with all gts <= neg_iou_thr to 0\n        3. for each bbox within a cell, if the iou with its nearest gt >\n            pos_iou_thr and the center of that gt falls inside the cell,\n            assign it to that bbox\n        4. for each gt bbox, assign its nearest proposals within the cell the\n            gt bbox falls in to itself.\n\n        Args:\n            bboxes (Tensor): Bounding boxes to be assigned, shape(n, 4).\n            box_responsible_flags (Tensor): flag to indicate whether box is\n                responsible for prediction, shape(n, )\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_labels (Tensor, optional): Label of gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "num_gts", ",", "num_bboxes", "=", "gt_bboxes", ".", "size", "(", "0", ")", ",", "bboxes", ".", "size", "(", "0", ")", "\n", "\n", "# compute iou between all gt and bboxes", "\n", "overlaps", "=", "self", ".", "iou_calculator", "(", "gt_bboxes", ",", "bboxes", ")", "\n", "\n", "# 1. assign -1 by default", "\n", "assigned_gt_inds", "=", "overlaps", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "\n", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "if", "num_gts", "==", "0", "or", "num_bboxes", "==", "0", ":", "\n", "# No ground truth or boxes, return empty assignment", "\n", "            ", "max_overlaps", "=", "overlaps", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ")", "\n", "if", "num_gts", "==", "0", ":", "\n", "# No truth, assign everything to background", "\n", "                ", "assigned_gt_inds", "[", ":", "]", "=", "0", "\n", "", "if", "gt_labels", "is", "None", ":", "\n", "                ", "assigned_labels", "=", "None", "\n", "", "else", ":", "\n", "                ", "assigned_labels", "=", "overlaps", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "\n", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "\n", "assigned_gt_inds", ",", "\n", "max_overlaps", ",", "\n", "labels", "=", "assigned_labels", ")", "\n", "\n", "# 2. assign negative: below", "\n", "# for each anchor, which gt best overlaps with it", "\n", "# for each anchor, the max iou of all gts", "\n", "# shape of max_overlaps == argmax_overlaps == num_bboxes", "\n", "", "max_overlaps", ",", "argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "neg_iou_thr", ",", "float", ")", ":", "\n", "            ", "assigned_gt_inds", "[", "(", "max_overlaps", ">=", "0", ")", "\n", "&", "(", "max_overlaps", "<=", "self", ".", "neg_iou_thr", ")", "]", "=", "0", "\n", "", "elif", "isinstance", "(", "self", ".", "neg_iou_thr", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "assert", "len", "(", "self", ".", "neg_iou_thr", ")", "==", "2", "\n", "assigned_gt_inds", "[", "(", "max_overlaps", ">", "self", ".", "neg_iou_thr", "[", "0", "]", ")", "\n", "&", "(", "max_overlaps", "<=", "self", ".", "neg_iou_thr", "[", "1", "]", ")", "]", "=", "0", "\n", "\n", "# 3. assign positive: falls into responsible cell and above", "\n", "# positive IOU threshold, the order matters.", "\n", "# the prior condition of comparision is to filter out all", "\n", "# unrelated anchors, i.e. not box_responsible_flags", "\n", "", "overlaps", "[", ":", ",", "~", "box_responsible_flags", ".", "type", "(", "torch", ".", "bool", ")", "]", "=", "-", "1.", "\n", "\n", "# calculate max_overlaps again, but this time we only consider IOUs", "\n", "# for anchors responsible for prediction", "\n", "max_overlaps", ",", "argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "\n", "# for each gt, which anchor best overlaps with it", "\n", "# for each gt, the max iou of all proposals", "\n", "# shape of gt_max_overlaps == gt_argmax_overlaps == num_gts", "\n", "gt_max_overlaps", ",", "gt_argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "pos_inds", "=", "(", "max_overlaps", ">", "\n", "self", ".", "pos_iou_thr", ")", "&", "box_responsible_flags", ".", "type", "(", "torch", ".", "bool", ")", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "=", "argmax_overlaps", "[", "pos_inds", "]", "+", "1", "\n", "\n", "# 4. assign positive to max overlapped anchors within responsible cell", "\n", "for", "i", "in", "range", "(", "num_gts", ")", ":", "\n", "            ", "if", "gt_max_overlaps", "[", "i", "]", ">", "self", ".", "min_pos_iou", ":", "\n", "                ", "if", "self", ".", "gt_max_assign_all", ":", "\n", "                    ", "max_iou_inds", "=", "(", "overlaps", "[", "i", ",", ":", "]", "==", "gt_max_overlaps", "[", "i", "]", ")", "&", "box_responsible_flags", ".", "type", "(", "torch", ".", "bool", ")", "\n", "assigned_gt_inds", "[", "max_iou_inds", "]", "=", "i", "+", "1", "\n", "", "elif", "box_responsible_flags", "[", "gt_argmax_overlaps", "[", "i", "]", "]", ":", "\n", "                    ", "assigned_gt_inds", "[", "gt_argmax_overlaps", "[", "i", "]", "]", "=", "i", "+", "1", "\n", "\n", "# assign labels of positive anchors", "\n", "", "", "", "if", "gt_labels", "is", "not", "None", ":", "\n", "            ", "assigned_labels", "=", "assigned_gt_inds", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "-", "1", ")", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "\n", "assigned_gt_inds", ">", "0", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "assigned_labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "-", "1", "]", "\n", "\n", "", "", "else", ":", "\n", "            ", "assigned_labels", "=", "None", "\n", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "assigned_gt_inds", ",", "max_overlaps", ",", "labels", "=", "assigned_labels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.base_assigner.BaseAssigner.assign": [[7, 10], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "assign", "(", "self", ",", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", "=", "None", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign boxes to either a ground truth boxes or a negative boxes.\"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.region_assigner.RegionAssigner.__init__": [[53, 56], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "center_ratio", "=", "0.2", ",", "ignore_ratio", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "center_ratio", "=", "center_ratio", "\n", "self", ".", "ignore_ratio", "=", "ignore_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.region_assigner.RegionAssigner.assign": [[57, 222], ["sum", "len", "torch.sqrt", "torch.sqrt.new_full", "torch.floor", "target_lvls.clamp().long.clamp().long.clamp().long", "range", "range", "range", "torch.cat", "torch.cat", "torch.cat", "mmdet.core.anchor_inside_flags", "assign_result.AssignResult", "gt_bboxes.new_zeros", "gt_bboxes.new_zeros", "assign_result.AssignResult", "float", "gt_bboxes.new_full", "torch.zeros_like", "mlvl_assigned_gt_inds.append", "mlvl_ignore_flags.append", "target_lvls[].item", "region_assigner.calc_region", "region_assigner.calc_region", "region_assigner.anchor_ctr_inside_region_flags", "region_assigner.anchor_ctr_inside_region_flags", "torch.zeros_like", "gt_bboxes.new_full", "target_lvls.clamp().long.clamp().long.clamp", "region_assigner.calc_region", "region_assigner.anchor_ctr_inside_region_flags", "region_assigner.calc_region", "region_assigner.anchor_ctr_inside_region_flags", "torch.log2", "torch.log2"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.anchor.utils.anchor_inside_flags", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.region_assigner.calc_region", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.region_assigner.calc_region", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.region_assigner.anchor_ctr_inside_region_flags", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.region_assigner.anchor_ctr_inside_region_flags", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.region_assigner.calc_region", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.region_assigner.anchor_ctr_inside_region_flags", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.region_assigner.calc_region", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.region_assigner.anchor_ctr_inside_region_flags"], ["", "def", "assign", "(", "self", ",", "\n", "mlvl_anchors", ",", "\n", "mlvl_valid_flags", ",", "\n", "gt_bboxes", ",", "\n", "img_meta", ",", "\n", "featmap_sizes", ",", "\n", "anchor_scale", ",", "\n", "anchor_strides", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_labels", "=", "None", ",", "\n", "allowed_border", "=", "0", ")", ":", "\n", "        ", "\"\"\"Assign gt to anchors.\n\n        This method assign a gt bbox to every bbox (proposal/anchor), each bbox\n        will be assigned with -1, 0, or a positive number. -1 means don't care,\n        0 means negative sample, positive number is the index (1-based) of\n        assigned gt.\n        The assignment is done in following steps, the order matters.\n\n        1. Assign every anchor to 0 (negative)\n        For each gt_bboxes:\n            2. Compute ignore flags based on ignore_region then\n                assign -1 to anchors w.r.t. ignore flags\n            3. Compute pos flags based on center_region then\n               assign gt_bboxes to anchors w.r.t. pos flags\n            4. Compute ignore flags based on adjacent anchor lvl then\n               assign -1 to anchors w.r.t. ignore flags\n            5. Assign anchor outside of image to -1\n\n        Args:\n            mlvl_anchors (list[Tensor]): Multi level anchors.\n            mlvl_valid_flags (list[Tensor]): Multi level valid flags.\n            gt_bboxes (Tensor): Ground truth bboxes of image\n            img_meta (dict): Meta info of image.\n            featmap_sizes (list[Tensor]): Feature mapsize each level\n            anchor_scale (int): Scale of the anchor.\n            anchor_strides (list[int]): Stride of the anchor.\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`, e.g., crowd boxes in COCO.\n            gt_labels (Tensor, optional): Label of gt_bboxes, shape (k, ).\n            allowed_border (int, optional): The border to allow the valid\n                anchor. Defaults to 0.\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "if", "gt_bboxes_ignore", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "num_bboxes", "=", "sum", "(", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "mlvl_anchors", ")", "\n", "\n", "if", "num_gts", "==", "0", "or", "num_bboxes", "==", "0", ":", "\n", "# No ground truth or boxes, return empty assignment", "\n", "            ", "max_overlaps", "=", "gt_bboxes", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ")", "\n", "assigned_gt_inds", "=", "gt_bboxes", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "gt_labels", "is", "None", ":", "\n", "                ", "assigned_labels", "=", "None", "\n", "", "else", ":", "\n", "                ", "assigned_labels", "=", "gt_bboxes", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "\n", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "\n", "assigned_gt_inds", ",", "\n", "max_overlaps", ",", "\n", "labels", "=", "assigned_labels", ")", "\n", "\n", "", "num_lvls", "=", "len", "(", "mlvl_anchors", ")", "\n", "r1", "=", "(", "1", "-", "self", ".", "center_ratio", ")", "/", "2", "\n", "r2", "=", "(", "1", "-", "self", ".", "ignore_ratio", ")", "/", "2", "\n", "\n", "scale", "=", "torch", ".", "sqrt", "(", "(", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", ")", "*", "\n", "(", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", ")", ")", "\n", "min_anchor_size", "=", "scale", ".", "new_full", "(", "\n", "(", "1", ",", ")", ",", "float", "(", "anchor_scale", "*", "anchor_strides", "[", "0", "]", ")", ")", "\n", "target_lvls", "=", "torch", ".", "floor", "(", "\n", "torch", ".", "log2", "(", "scale", ")", "-", "torch", ".", "log2", "(", "min_anchor_size", ")", "+", "0.5", ")", "\n", "target_lvls", "=", "target_lvls", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "num_lvls", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "# 1. assign 0 (negative) by default", "\n", "mlvl_assigned_gt_inds", "=", "[", "]", "\n", "mlvl_ignore_flags", "=", "[", "]", "\n", "for", "lvl", "in", "range", "(", "num_lvls", ")", ":", "\n", "            ", "h", ",", "w", "=", "featmap_sizes", "[", "lvl", "]", "\n", "assert", "h", "*", "w", "==", "mlvl_anchors", "[", "lvl", "]", ".", "shape", "[", "0", "]", "\n", "assigned_gt_inds", "=", "gt_bboxes", ".", "new_full", "(", "(", "h", "*", "w", ",", ")", ",", "\n", "0", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "ignore_flags", "=", "torch", ".", "zeros_like", "(", "assigned_gt_inds", ")", "\n", "mlvl_assigned_gt_inds", ".", "append", "(", "assigned_gt_inds", ")", "\n", "mlvl_ignore_flags", ".", "append", "(", "ignore_flags", ")", "\n", "\n", "", "for", "gt_id", "in", "range", "(", "num_gts", ")", ":", "\n", "            ", "lvl", "=", "target_lvls", "[", "gt_id", "]", ".", "item", "(", ")", "\n", "featmap_size", "=", "featmap_sizes", "[", "lvl", "]", "\n", "stride", "=", "anchor_strides", "[", "lvl", "]", "\n", "anchors", "=", "mlvl_anchors", "[", "lvl", "]", "\n", "gt_bbox", "=", "gt_bboxes", "[", "gt_id", ",", ":", "4", "]", "\n", "\n", "# Compute regions", "\n", "ignore_region", "=", "calc_region", "(", "gt_bbox", ",", "r2", ",", "stride", ",", "featmap_size", ")", "\n", "ctr_region", "=", "calc_region", "(", "gt_bbox", ",", "r1", ",", "stride", ",", "featmap_size", ")", "\n", "\n", "# 2. Assign -1 to ignore flags", "\n", "ignore_flags", "=", "anchor_ctr_inside_region_flags", "(", "\n", "anchors", ",", "stride", ",", "ignore_region", ")", "\n", "mlvl_assigned_gt_inds", "[", "lvl", "]", "[", "ignore_flags", "]", "=", "-", "1", "\n", "\n", "# 3. Assign gt_bboxes to pos flags", "\n", "pos_flags", "=", "anchor_ctr_inside_region_flags", "(", "anchors", ",", "stride", ",", "\n", "ctr_region", ")", "\n", "mlvl_assigned_gt_inds", "[", "lvl", "]", "[", "pos_flags", "]", "=", "gt_id", "+", "1", "\n", "\n", "# 4. Assign -1 to ignore adjacent lvl", "\n", "if", "lvl", ">", "0", ":", "\n", "                ", "d_lvl", "=", "lvl", "-", "1", "\n", "d_anchors", "=", "mlvl_anchors", "[", "d_lvl", "]", "\n", "d_featmap_size", "=", "featmap_sizes", "[", "d_lvl", "]", "\n", "d_stride", "=", "anchor_strides", "[", "d_lvl", "]", "\n", "d_ignore_region", "=", "calc_region", "(", "gt_bbox", ",", "r2", ",", "d_stride", ",", "\n", "d_featmap_size", ")", "\n", "ignore_flags", "=", "anchor_ctr_inside_region_flags", "(", "\n", "d_anchors", ",", "d_stride", ",", "d_ignore_region", ")", "\n", "mlvl_ignore_flags", "[", "d_lvl", "]", "[", "ignore_flags", "]", "=", "1", "\n", "", "if", "lvl", "<", "num_lvls", "-", "1", ":", "\n", "                ", "u_lvl", "=", "lvl", "+", "1", "\n", "u_anchors", "=", "mlvl_anchors", "[", "u_lvl", "]", "\n", "u_featmap_size", "=", "featmap_sizes", "[", "u_lvl", "]", "\n", "u_stride", "=", "anchor_strides", "[", "u_lvl", "]", "\n", "u_ignore_region", "=", "calc_region", "(", "gt_bbox", ",", "r2", ",", "u_stride", ",", "\n", "u_featmap_size", ")", "\n", "ignore_flags", "=", "anchor_ctr_inside_region_flags", "(", "\n", "u_anchors", ",", "u_stride", ",", "u_ignore_region", ")", "\n", "mlvl_ignore_flags", "[", "u_lvl", "]", "[", "ignore_flags", "]", "=", "1", "\n", "\n", "# 4. (cont.) Assign -1 to ignore adjacent lvl", "\n", "", "", "for", "lvl", "in", "range", "(", "num_lvls", ")", ":", "\n", "            ", "ignore_flags", "=", "mlvl_ignore_flags", "[", "lvl", "]", "\n", "mlvl_assigned_gt_inds", "[", "lvl", "]", "[", "ignore_flags", "]", "=", "-", "1", "\n", "\n", "# 5. Assign -1 to anchor outside of image", "\n", "", "flat_assigned_gt_inds", "=", "torch", ".", "cat", "(", "mlvl_assigned_gt_inds", ")", "\n", "flat_anchors", "=", "torch", ".", "cat", "(", "mlvl_anchors", ")", "\n", "flat_valid_flags", "=", "torch", ".", "cat", "(", "mlvl_valid_flags", ")", "\n", "assert", "(", "flat_assigned_gt_inds", ".", "shape", "[", "0", "]", "==", "flat_anchors", ".", "shape", "[", "0", "]", "==", "\n", "flat_valid_flags", ".", "shape", "[", "0", "]", ")", "\n", "inside_flags", "=", "anchor_inside_flags", "(", "flat_anchors", ",", "flat_valid_flags", ",", "\n", "img_meta", "[", "'img_shape'", "]", ",", "\n", "allowed_border", ")", "\n", "outside_flags", "=", "~", "inside_flags", "\n", "flat_assigned_gt_inds", "[", "outside_flags", "]", "=", "-", "1", "\n", "\n", "if", "gt_labels", "is", "not", "None", ":", "\n", "            ", "assigned_labels", "=", "torch", ".", "zeros_like", "(", "flat_assigned_gt_inds", ")", "\n", "pos_flags", "=", "assigned_gt_inds", ">", "0", "\n", "assigned_labels", "[", "pos_flags", "]", "=", "gt_labels", "[", "\n", "flat_assigned_gt_inds", "[", "pos_flags", "]", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "assigned_labels", "=", "None", "\n", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "flat_assigned_gt_inds", ",", "None", ",", "labels", "=", "assigned_labels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.region_assigner.calc_region": [[9, 24], ["torch.round", "torch.round", "torch.round", "torch.round", "x1.clamp.clamp", "y1.clamp.clamp", "x2.clamp.clamp", "y2.clamp.clamp"], "function", ["None"], ["def", "calc_region", "(", "bbox", ",", "ratio", ",", "stride", ",", "featmap_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"Calculate region of the box defined by the ratio, the ratio is from the\n    center of the box to every edge.\"\"\"", "\n", "# project bbox on the feature", "\n", "f_bbox", "=", "bbox", "/", "stride", "\n", "x1", "=", "torch", ".", "round", "(", "(", "1", "-", "ratio", ")", "*", "f_bbox", "[", "0", "]", "+", "ratio", "*", "f_bbox", "[", "2", "]", ")", "\n", "y1", "=", "torch", ".", "round", "(", "(", "1", "-", "ratio", ")", "*", "f_bbox", "[", "1", "]", "+", "ratio", "*", "f_bbox", "[", "3", "]", ")", "\n", "x2", "=", "torch", ".", "round", "(", "ratio", "*", "f_bbox", "[", "0", "]", "+", "(", "1", "-", "ratio", ")", "*", "f_bbox", "[", "2", "]", ")", "\n", "y2", "=", "torch", ".", "round", "(", "ratio", "*", "f_bbox", "[", "1", "]", "+", "(", "1", "-", "ratio", ")", "*", "f_bbox", "[", "3", "]", ")", "\n", "if", "featmap_size", "is", "not", "None", ":", "\n", "        ", "x1", "=", "x1", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "featmap_size", "[", "1", "]", ")", "\n", "y1", "=", "y1", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "featmap_size", "[", "0", "]", ")", "\n", "x2", "=", "x2", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "featmap_size", "[", "1", "]", ")", "\n", "y2", "=", "y2", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "featmap_size", "[", "0", "]", ")", "\n", "", "return", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.region_assigner.anchor_ctr_inside_region_flags": [[26, 34], ["None"], "function", ["None"], ["", "def", "anchor_ctr_inside_region_flags", "(", "anchors", ",", "stride", ",", "region", ")", ":", "\n", "    ", "\"\"\"Get the flag indicate whether anchor centers are inside regions.\"\"\"", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "region", "\n", "f_anchors", "=", "anchors", "/", "stride", "\n", "x", "=", "(", "f_anchors", "[", ":", ",", "0", "]", "+", "f_anchors", "[", ":", ",", "2", "]", ")", "*", "0.5", "\n", "y", "=", "(", "f_anchors", "[", ":", ",", "1", "]", "+", "f_anchors", "[", ":", ",", "3", "]", ")", "*", "0.5", "\n", "flags", "=", "(", "x", ">=", "x1", ")", "&", "(", "x", "<=", "x2", ")", "&", "(", "y", ">=", "y1", ")", "&", "(", "y", "<=", "y2", ")", "\n", "return", "flags", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.hungarian_assigner.HungarianAssigner.__init__": [[44, 51], ["dict", "dict", "dict", "match_costs.build_match_cost", "match_costs.build_match_cost", "match_costs.build_match_cost"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.match_costs.builder.build_match_cost", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.match_costs.builder.build_match_cost", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.match_costs.builder.build_match_cost"], ["def", "__init__", "(", "self", ",", "\n", "cls_cost", "=", "dict", "(", "type", "=", "'ClassificationCost'", ",", "weight", "=", "1.", ")", ",", "\n", "reg_cost", "=", "dict", "(", "type", "=", "'BBoxL1Cost'", ",", "weight", "=", "1.0", ")", ",", "\n", "iou_cost", "=", "dict", "(", "type", "=", "'IoUCost'", ",", "iou_mode", "=", "'giou'", ",", "weight", "=", "1.0", ")", ")", ":", "\n", "        ", "self", ".", "cls_cost", "=", "build_match_cost", "(", "cls_cost", ")", "\n", "self", ".", "reg_cost", "=", "build_match_cost", "(", "reg_cost", ")", "\n", "self", ".", "iou_cost", "=", "build_match_cost", "(", "iou_cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.hungarian_assigner.HungarianAssigner.assign": [[52, 146], ["bbox_pred.new_full", "bbox_pred.new_full", "gt_bboxes.new_tensor().unsqueeze", "hungarian_assigner.HungarianAssigner.cls_cost", "hungarian_assigner.HungarianAssigner.reg_cost", "hungarian_assigner.HungarianAssigner.iou_cost", "cost.detach().cpu.detach().cpu.detach().cpu", "linear_sum_assignment", "torch.from_numpy().to", "torch.from_numpy().to", "assign_result.AssignResult", "gt_bboxes.size", "bbox_pred.size", "assign_result.AssignResult", "transforms.bbox_cxcywh_to_xyxy", "ImportError", "gt_bboxes.new_tensor", "cost.detach().cpu.detach().cpu.detach", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox_cxcywh_to_xyxy"], ["", "def", "assign", "(", "self", ",", "\n", "bbox_pred", ",", "\n", "cls_pred", ",", "\n", "gt_bboxes", ",", "\n", "gt_labels", ",", "\n", "img_meta", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "eps", "=", "1e-7", ")", ":", "\n", "        ", "\"\"\"Computes one-to-one matching based on the weighted costs.\n\n        This method assign each query prediction to a ground truth or\n        background. The `assigned_gt_inds` with -1 means don't care,\n        0 means negative sample, and positive number is the index (1-based)\n        of assigned gt.\n        The assignment is done in the following steps, the order matters.\n\n        1. assign every prediction to -1\n        2. compute the weighted costs\n        3. do Hungarian matching on CPU based on the costs\n        4. assign all to 0 (background) first, then for each matched pair\n           between predictions and gts, treat this prediction as foreground\n           and assign the corresponding gt index (plus 1) to it.\n\n        Args:\n            bbox_pred (Tensor): Predicted boxes with normalized coordinates\n                (cx, cy, w, h), which are all in range [0, 1]. Shape\n                [num_query, 4].\n            cls_pred (Tensor): Predicted classification logits, shape\n                [num_query, num_class].\n            gt_bboxes (Tensor): Ground truth boxes with unnormalized\n                coordinates (x1, y1, x2, y2). Shape [num_gt, 4].\n            gt_labels (Tensor): Label of `gt_bboxes`, shape (num_gt,).\n            img_meta (dict): Meta information for current image.\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`. Default None.\n            eps (int | float, optional): A value added to the denominator for\n                numerical stability. Default 1e-7.\n\n        Returns:\n            :obj:`AssignResult`: The assigned result.\n        \"\"\"", "\n", "assert", "gt_bboxes_ignore", "is", "None", ",", "'Only case when gt_bboxes_ignore is None is supported.'", "\n", "num_gts", ",", "num_bboxes", "=", "gt_bboxes", ".", "size", "(", "0", ")", ",", "bbox_pred", ".", "size", "(", "0", ")", "\n", "\n", "# 1. assign -1 by default", "\n", "assigned_gt_inds", "=", "bbox_pred", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "\n", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "assigned_labels", "=", "bbox_pred", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "\n", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "num_gts", "==", "0", "or", "num_bboxes", "==", "0", ":", "\n", "# No ground truth or boxes, return empty assignment", "\n", "            ", "if", "num_gts", "==", "0", ":", "\n", "# No ground truth, assign all to background", "\n", "                ", "assigned_gt_inds", "[", ":", "]", "=", "0", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "assigned_gt_inds", ",", "None", ",", "labels", "=", "assigned_labels", ")", "\n", "", "img_h", ",", "img_w", ",", "_", "=", "img_meta", "[", "'img_shape'", "]", "\n", "factor", "=", "gt_bboxes", ".", "new_tensor", "(", "[", "img_w", ",", "img_h", ",", "img_w", ",", "\n", "img_h", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# 2. compute the weighted costs", "\n", "# classification and bboxcost.", "\n", "cls_cost", "=", "self", ".", "cls_cost", "(", "cls_pred", ",", "gt_labels", ")", "\n", "# regression L1 cost", "\n", "normalize_gt_bboxes", "=", "gt_bboxes", "/", "factor", "\n", "reg_cost", "=", "self", ".", "reg_cost", "(", "bbox_pred", ",", "normalize_gt_bboxes", ")", "\n", "# regression iou cost, defaultly giou is used in official DETR.", "\n", "bboxes", "=", "bbox_cxcywh_to_xyxy", "(", "bbox_pred", ")", "*", "factor", "\n", "iou_cost", "=", "self", ".", "iou_cost", "(", "bboxes", ",", "gt_bboxes", ")", "\n", "# weighted sum of above three costs", "\n", "cost", "=", "cls_cost", "+", "reg_cost", "+", "iou_cost", "\n", "\n", "# 3. do Hungarian matching on CPU using linear_sum_assignment", "\n", "cost", "=", "cost", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "if", "linear_sum_assignment", "is", "None", ":", "\n", "            ", "raise", "ImportError", "(", "'Please run \"pip install scipy\" '", "\n", "'to install scipy first.'", ")", "\n", "", "matched_row_inds", ",", "matched_col_inds", "=", "linear_sum_assignment", "(", "cost", ")", "\n", "matched_row_inds", "=", "torch", ".", "from_numpy", "(", "matched_row_inds", ")", ".", "to", "(", "\n", "bbox_pred", ".", "device", ")", "\n", "matched_col_inds", "=", "torch", ".", "from_numpy", "(", "matched_col_inds", ")", ".", "to", "(", "\n", "bbox_pred", ".", "device", ")", "\n", "\n", "# 4. assign backgrounds and foregrounds", "\n", "# assign all indices to backgrounds first", "\n", "assigned_gt_inds", "[", ":", "]", "=", "0", "\n", "# assign foregrounds based on matching results", "\n", "assigned_gt_inds", "[", "matched_row_inds", "]", "=", "matched_col_inds", "+", "1", "\n", "assigned_labels", "[", "matched_row_inds", "]", "=", "gt_labels", "[", "matched_col_inds", "]", "\n", "return", "AssignResult", "(", "\n", "num_gts", ",", "assigned_gt_inds", ",", "None", ",", "labels", "=", "assigned_labels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.max_iou_assigner.MaxIoUAssigner.__init__": [[40, 59], ["dict", "iou_calculators.build_iou_calculator"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.builder.build_iou_calculator"], ["def", "__init__", "(", "self", ",", "\n", "pos_iou_thr", ",", "\n", "neg_iou_thr", ",", "\n", "min_pos_iou", "=", ".0", ",", "\n", "gt_max_assign_all", "=", "True", ",", "\n", "ignore_iof_thr", "=", "-", "1", ",", "\n", "ignore_wrt_candidates", "=", "True", ",", "\n", "match_low_quality", "=", "True", ",", "\n", "gpu_assign_thr", "=", "-", "1", ",", "\n", "iou_calculator", "=", "dict", "(", "type", "=", "'BboxOverlaps2D'", ")", ")", ":", "\n", "        ", "self", ".", "pos_iou_thr", "=", "pos_iou_thr", "\n", "self", ".", "neg_iou_thr", "=", "neg_iou_thr", "\n", "self", ".", "min_pos_iou", "=", "min_pos_iou", "\n", "self", ".", "gt_max_assign_all", "=", "gt_max_assign_all", "\n", "self", ".", "ignore_iof_thr", "=", "ignore_iof_thr", "\n", "self", ".", "ignore_wrt_candidates", "=", "ignore_wrt_candidates", "\n", "self", ".", "gpu_assign_thr", "=", "gpu_assign_thr", "\n", "self", ".", "match_low_quality", "=", "match_low_quality", "\n", "self", ".", "iou_calculator", "=", "build_iou_calculator", "(", "iou_calculator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.max_iou_assigner.MaxIoUAssigner.assign": [[60, 126], ["max_iou_assigner.MaxIoUAssigner.iou_calculator", "max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps", "bboxes.cpu.cpu.cpu", "gt_bboxes.cpu.cpu.cpu", "max_iou_assigner.MaxIoUAssigner.gt_inds.to", "max_iou_assigner.MaxIoUAssigner.max_overlaps.to", "gt_bboxes_ignore.cpu.cpu.cpu", "gt_labels.cpu.cpu.cpu", "gt_bboxes_ignore.cpu.cpu.numel", "bboxes.cpu.cpu.numel", "max_iou_assigner.MaxIoUAssigner.iou_calculator", "max_iou_assigner.MaxIoUAssigner.max", "max_iou_assigner.MaxIoUAssigner.iou_calculator", "max_iou_assigner.MaxIoUAssigner.max", "max_iou_assigner.MaxIoUAssigner.labels.to"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to"], ["", "def", "assign", "(", "self", ",", "bboxes", ",", "gt_bboxes", ",", "gt_bboxes_ignore", "=", "None", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign gt to bboxes.\n\n        This method assign a gt bbox to every bbox (proposal/anchor), each bbox\n        will be assigned with -1, or a semi-positive number. -1 means negative\n        sample, semi-positive number is the index (0-based) of assigned gt.\n        The assignment is done in following steps, the order matters.\n\n        1. assign every bbox to the background\n        2. assign proposals whose iou with all gts < neg_iou_thr to 0\n        3. for each bbox, if the iou with its nearest gt >= pos_iou_thr,\n           assign it to that bbox\n        4. for each gt bbox, assign its nearest proposals (may be more than\n           one) to itself\n\n        Args:\n            bboxes (Tensor): Bounding boxes to be assigned, shape(n, 4).\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`, e.g., crowd boxes in COCO.\n            gt_labels (Tensor, optional): Label of gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n\n        Example:\n            >>> self = MaxIoUAssigner(0.5, 0.5)\n            >>> bboxes = torch.Tensor([[0, 0, 10, 10], [10, 10, 20, 20]])\n            >>> gt_bboxes = torch.Tensor([[0, 0, 10, 9]])\n            >>> assign_result = self.assign(bboxes, gt_bboxes)\n            >>> expected_gt_inds = torch.LongTensor([1, 0])\n            >>> assert torch.all(assign_result.gt_inds == expected_gt_inds)\n        \"\"\"", "\n", "assign_on_cpu", "=", "True", "if", "(", "self", ".", "gpu_assign_thr", ">", "0", ")", "and", "(", "\n", "gt_bboxes", ".", "shape", "[", "0", "]", ">", "self", ".", "gpu_assign_thr", ")", "else", "False", "\n", "# compute overlap and assign gt on CPU when number of GT is large", "\n", "if", "assign_on_cpu", ":", "\n", "            ", "device", "=", "bboxes", ".", "device", "\n", "bboxes", "=", "bboxes", ".", "cpu", "(", ")", "\n", "gt_bboxes", "=", "gt_bboxes", ".", "cpu", "(", ")", "\n", "if", "gt_bboxes_ignore", "is", "not", "None", ":", "\n", "                ", "gt_bboxes_ignore", "=", "gt_bboxes_ignore", ".", "cpu", "(", ")", "\n", "", "if", "gt_labels", "is", "not", "None", ":", "\n", "                ", "gt_labels", "=", "gt_labels", ".", "cpu", "(", ")", "\n", "\n", "", "", "overlaps", "=", "self", ".", "iou_calculator", "(", "gt_bboxes", ",", "bboxes", ")", "\n", "\n", "if", "(", "self", ".", "ignore_iof_thr", ">", "0", "and", "gt_bboxes_ignore", "is", "not", "None", "\n", "and", "gt_bboxes_ignore", ".", "numel", "(", ")", ">", "0", "and", "bboxes", ".", "numel", "(", ")", ">", "0", ")", ":", "\n", "            ", "if", "self", ".", "ignore_wrt_candidates", ":", "\n", "                ", "ignore_overlaps", "=", "self", ".", "iou_calculator", "(", "\n", "bboxes", ",", "gt_bboxes_ignore", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "ignore_overlaps", "=", "self", ".", "iou_calculator", "(", "\n", "gt_bboxes_ignore", ",", "bboxes", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "", "overlaps", "[", ":", ",", "ignore_max_overlaps", ">", "self", ".", "ignore_iof_thr", "]", "=", "-", "1", "\n", "\n", "", "assign_result", "=", "self", ".", "assign_wrt_overlaps", "(", "overlaps", ",", "gt_labels", ")", "\n", "if", "assign_on_cpu", ":", "\n", "            ", "assign_result", ".", "gt_inds", "=", "assign_result", ".", "gt_inds", ".", "to", "(", "device", ")", "\n", "assign_result", ".", "max_overlaps", "=", "assign_result", ".", "max_overlaps", ".", "to", "(", "device", ")", "\n", "if", "assign_result", ".", "labels", "is", "not", "None", ":", "\n", "                ", "assign_result", ".", "labels", "=", "assign_result", ".", "labels", ".", "to", "(", "device", ")", "\n", "", "", "return", "assign_result", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.max_iou_assigner.MaxIoUAssigner.assign_wrt_overlaps": [[127, 213], ["overlaps.new_full", "overlaps.max", "overlaps.max", "isinstance", "assign_result.AssignResult", "overlaps.size", "overlaps.size", "overlaps.new_zeros", "assign_result.AssignResult", "isinstance", "range", "overlaps.new_full.new_full", "torch.nonzero().squeeze", "overlaps.new_full", "torch.nonzero().squeeze.numel", "len", "torch.nonzero"], "methods", ["None"], ["", "def", "assign_wrt_overlaps", "(", "self", ",", "overlaps", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign w.r.t. the overlaps of bboxes with gts.\n\n        Args:\n            overlaps (Tensor): Overlaps between k gt_bboxes and n bboxes,\n                shape(k, n).\n            gt_labels (Tensor, optional): Labels of k gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "num_gts", ",", "num_bboxes", "=", "overlaps", ".", "size", "(", "0", ")", ",", "overlaps", ".", "size", "(", "1", ")", "\n", "\n", "# 1. assign -1 by default", "\n", "assigned_gt_inds", "=", "overlaps", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "\n", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "if", "num_gts", "==", "0", "or", "num_bboxes", "==", "0", ":", "\n", "# No ground truth or boxes, return empty assignment", "\n", "            ", "max_overlaps", "=", "overlaps", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ")", "\n", "if", "num_gts", "==", "0", ":", "\n", "# No truth, assign everything to background", "\n", "                ", "assigned_gt_inds", "[", ":", "]", "=", "0", "\n", "", "if", "gt_labels", "is", "None", ":", "\n", "                ", "assigned_labels", "=", "None", "\n", "", "else", ":", "\n", "                ", "assigned_labels", "=", "overlaps", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "\n", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "\n", "assigned_gt_inds", ",", "\n", "max_overlaps", ",", "\n", "labels", "=", "assigned_labels", ")", "\n", "\n", "# for each anchor, which gt best overlaps with it", "\n", "# for each anchor, the max iou of all gts", "\n", "", "max_overlaps", ",", "argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "# for each gt, which anchor best overlaps with it", "\n", "# for each gt, the max iou of all proposals", "\n", "gt_max_overlaps", ",", "gt_argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "# 2. assign negative: below", "\n", "# the negative inds are set to be 0", "\n", "if", "isinstance", "(", "self", ".", "neg_iou_thr", ",", "float", ")", ":", "\n", "            ", "assigned_gt_inds", "[", "(", "max_overlaps", ">=", "0", ")", "\n", "&", "(", "max_overlaps", "<", "self", ".", "neg_iou_thr", ")", "]", "=", "0", "\n", "", "elif", "isinstance", "(", "self", ".", "neg_iou_thr", ",", "tuple", ")", ":", "\n", "            ", "assert", "len", "(", "self", ".", "neg_iou_thr", ")", "==", "2", "\n", "assigned_gt_inds", "[", "(", "max_overlaps", ">=", "self", ".", "neg_iou_thr", "[", "0", "]", ")", "\n", "&", "(", "max_overlaps", "<", "self", ".", "neg_iou_thr", "[", "1", "]", ")", "]", "=", "0", "\n", "\n", "# 3. assign positive: above positive IoU threshold", "\n", "", "pos_inds", "=", "max_overlaps", ">=", "self", ".", "pos_iou_thr", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "=", "argmax_overlaps", "[", "pos_inds", "]", "+", "1", "\n", "\n", "if", "self", ".", "match_low_quality", ":", "\n", "# Low-quality matching will overwrite the assigned_gt_inds assigned", "\n", "# in Step 3. Thus, the assigned gt might not be the best one for", "\n", "# prediction.", "\n", "# For example, if bbox A has 0.9 and 0.8 iou with GT bbox 1 & 2,", "\n", "# bbox 1 will be assigned as the best target for bbox A in step 3.", "\n", "# However, if GT bbox 2's gt_argmax_overlaps = A, bbox A's", "\n", "# assigned_gt_inds will be overwritten to be bbox B.", "\n", "# This might be the reason that it is not used in ROI Heads.", "\n", "            ", "for", "i", "in", "range", "(", "num_gts", ")", ":", "\n", "                ", "if", "gt_max_overlaps", "[", "i", "]", ">=", "self", ".", "min_pos_iou", ":", "\n", "                    ", "if", "self", ".", "gt_max_assign_all", ":", "\n", "                        ", "max_iou_inds", "=", "overlaps", "[", "i", ",", ":", "]", "==", "gt_max_overlaps", "[", "i", "]", "\n", "assigned_gt_inds", "[", "max_iou_inds", "]", "=", "i", "+", "1", "\n", "", "else", ":", "\n", "                        ", "assigned_gt_inds", "[", "gt_argmax_overlaps", "[", "i", "]", "]", "=", "i", "+", "1", "\n", "\n", "", "", "", "", "if", "gt_labels", "is", "not", "None", ":", "\n", "            ", "assigned_labels", "=", "assigned_gt_inds", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "-", "1", ")", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "\n", "assigned_gt_inds", ">", "0", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "assigned_labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "-", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "assigned_labels", "=", "None", "\n", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "assigned_gt_inds", ",", "max_overlaps", ",", "labels", "=", "assigned_labels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.point_assigner.PointAssigner.__init__": [[19, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "scale", "=", "4", ",", "pos_num", "=", "3", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "self", ".", "pos_num", "=", "pos_num", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.point_assigner.PointAssigner.assign": [[23, 134], ["torch.log2().int", "torch.clamp", "points.new_zeros", "points.new_full", "torch.arange", "range", "assign_result.AssignResult", "points.new_full", "assign_result.AssignResult", "torch.log2().int.min", "torch.log2().int.max", "float", "torch.topk", "points.new_full.new_full", "torch.nonzero().squeeze", "points.new_full", "torch.log2", "torch.nonzero().squeeze.numel", "torch.nonzero", "torch.log2", "torch.log2"], "methods", ["None"], ["", "def", "assign", "(", "self", ",", "points", ",", "gt_bboxes", ",", "gt_bboxes_ignore", "=", "None", ",", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign gt to points.\n\n        This method assign a gt bbox to every points set, each points set\n        will be assigned with  the background_label (-1), or a label number.\n        -1 is background, and semi-positive number is the index (0-based) of\n        assigned gt.\n        The assignment is done in following steps, the order matters.\n\n        1. assign every points to the background_label (-1)\n        2. A point is assigned to some gt bbox if\n            (i) the point is within the k closest points to the gt bbox\n            (ii) the distance between this point and the gt is smaller than\n                other gt bboxes\n\n        Args:\n            points (Tensor): points to be assigned, shape(n, 3) while last\n                dimension stands for (x, y, stride).\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`, e.g., crowd boxes in COCO.\n                NOTE: currently unused.\n            gt_labels (Tensor, optional): Label of gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "num_points", "=", "points", ".", "shape", "[", "0", "]", "\n", "num_gts", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "\n", "if", "num_gts", "==", "0", "or", "num_points", "==", "0", ":", "\n", "# If no truth assign everything to the background", "\n", "            ", "assigned_gt_inds", "=", "points", ".", "new_full", "(", "(", "num_points", ",", ")", ",", "\n", "0", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "if", "gt_labels", "is", "None", ":", "\n", "                ", "assigned_labels", "=", "None", "\n", "", "else", ":", "\n", "                ", "assigned_labels", "=", "points", ".", "new_full", "(", "(", "num_points", ",", ")", ",", "\n", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "assigned_gt_inds", ",", "None", ",", "labels", "=", "assigned_labels", ")", "\n", "\n", "", "points_xy", "=", "points", "[", ":", ",", ":", "2", "]", "\n", "points_stride", "=", "points", "[", ":", ",", "2", "]", "\n", "points_lvl", "=", "torch", ".", "log2", "(", "\n", "points_stride", ")", ".", "int", "(", ")", "# [3...,4...,5...,6...,7...]", "\n", "lvl_min", ",", "lvl_max", "=", "points_lvl", ".", "min", "(", ")", ",", "points_lvl", ".", "max", "(", ")", "\n", "\n", "# assign gt box", "\n", "gt_bboxes_xy", "=", "(", "gt_bboxes", "[", ":", ",", ":", "2", "]", "+", "gt_bboxes", "[", ":", ",", "2", ":", "]", ")", "/", "2", "\n", "gt_bboxes_wh", "=", "(", "gt_bboxes", "[", ":", ",", "2", ":", "]", "-", "gt_bboxes", "[", ":", ",", ":", "2", "]", ")", ".", "clamp", "(", "min", "=", "1e-6", ")", "\n", "scale", "=", "self", ".", "scale", "\n", "gt_bboxes_lvl", "=", "(", "(", "torch", ".", "log2", "(", "gt_bboxes_wh", "[", ":", ",", "0", "]", "/", "scale", ")", "+", "\n", "torch", ".", "log2", "(", "gt_bboxes_wh", "[", ":", ",", "1", "]", "/", "scale", ")", ")", "/", "2", ")", ".", "int", "(", ")", "\n", "gt_bboxes_lvl", "=", "torch", ".", "clamp", "(", "gt_bboxes_lvl", ",", "min", "=", "lvl_min", ",", "max", "=", "lvl_max", ")", "\n", "\n", "# stores the assigned gt index of each point", "\n", "assigned_gt_inds", "=", "points", ".", "new_zeros", "(", "(", "num_points", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "# stores the assigned gt dist (to this point) of each point", "\n", "assigned_gt_dist", "=", "points", ".", "new_full", "(", "(", "num_points", ",", ")", ",", "float", "(", "'inf'", ")", ")", "\n", "points_range", "=", "torch", ".", "arange", "(", "points", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "idx", "in", "range", "(", "num_gts", ")", ":", "\n", "            ", "gt_lvl", "=", "gt_bboxes_lvl", "[", "idx", "]", "\n", "# get the index of points in this level", "\n", "lvl_idx", "=", "gt_lvl", "==", "points_lvl", "\n", "points_index", "=", "points_range", "[", "lvl_idx", "]", "\n", "# get the points in this level", "\n", "lvl_points", "=", "points_xy", "[", "lvl_idx", ",", ":", "]", "\n", "# get the center point of gt", "\n", "gt_point", "=", "gt_bboxes_xy", "[", "[", "idx", "]", ",", ":", "]", "\n", "# get width and height of gt", "\n", "gt_wh", "=", "gt_bboxes_wh", "[", "[", "idx", "]", ",", ":", "]", "\n", "# compute the distance between gt center and", "\n", "#   all points in this level", "\n", "points_gt_dist", "=", "(", "(", "lvl_points", "-", "gt_point", ")", "/", "gt_wh", ")", ".", "norm", "(", "dim", "=", "1", ")", "\n", "# find the nearest k points to gt center in this level", "\n", "min_dist", ",", "min_dist_index", "=", "torch", ".", "topk", "(", "\n", "points_gt_dist", ",", "self", ".", "pos_num", ",", "largest", "=", "False", ")", "\n", "# the index of nearest k points to gt center in this level", "\n", "min_dist_points_index", "=", "points_index", "[", "min_dist_index", "]", "\n", "# The less_than_recorded_index stores the index", "\n", "#   of min_dist that is less then the assigned_gt_dist. Where", "\n", "#   assigned_gt_dist stores the dist from previous assigned gt", "\n", "#   (if exist) to each point.", "\n", "less_than_recorded_index", "=", "min_dist", "<", "assigned_gt_dist", "[", "\n", "min_dist_points_index", "]", "\n", "# The min_dist_points_index stores the index of points satisfy:", "\n", "#   (1) it is k nearest to current gt center in this level.", "\n", "#   (2) it is closer to current gt center than other gt center.", "\n", "min_dist_points_index", "=", "min_dist_points_index", "[", "\n", "less_than_recorded_index", "]", "\n", "# assign the result", "\n", "assigned_gt_inds", "[", "min_dist_points_index", "]", "=", "idx", "+", "1", "\n", "assigned_gt_dist", "[", "min_dist_points_index", "]", "=", "min_dist", "[", "\n", "less_than_recorded_index", "]", "\n", "\n", "", "if", "gt_labels", "is", "not", "None", ":", "\n", "            ", "assigned_labels", "=", "assigned_gt_inds", ".", "new_full", "(", "(", "num_points", ",", ")", ",", "-", "1", ")", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "\n", "assigned_gt_inds", ">", "0", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "assigned_labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "-", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "assigned_labels", "=", "None", "\n", "\n", "", "return", "AssignResult", "(", "\n", "num_gts", ",", "assigned_gt_inds", ",", "None", ",", "labels", "=", "assigned_labels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.__init__": [[42, 49], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_gts", ",", "gt_inds", ",", "max_overlaps", ",", "labels", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_gts", "=", "num_gts", "\n", "self", ".", "gt_inds", "=", "gt_inds", "\n", "self", ".", "max_overlaps", "=", "max_overlaps", "\n", "self", ".", "labels", "=", "labels", "\n", "# Interface for possible user-defined properties", "\n", "self", ".", "_extra_properties", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.num_preds": [[50, 54], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_preds", "(", "self", ")", ":", "\n", "        ", "\"\"\"int: the number of predictions in this assignment\"\"\"", "\n", "return", "len", "(", "self", ".", "gt_inds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.set_extra_property": [[55, 59], ["None"], "methods", ["None"], ["", "def", "set_extra_property", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "\"\"\"Set user-defined new property.\"\"\"", "\n", "assert", "key", "not", "in", "self", ".", "info", "\n", "self", ".", "_extra_properties", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.get_extra_property": [[60, 63], ["assign_result.AssignResult._extra_properties.get"], "methods", ["None"], ["", "def", "get_extra_property", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Get user-defined property.\"\"\"", "\n", "return", "self", ".", "_extra_properties", ".", "get", "(", "key", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.info": [[64, 76], ["basic_info.update"], "methods", ["None"], ["", "@", "property", "\n", "def", "info", "(", "self", ")", ":", "\n", "        ", "\"\"\"dict: a dictionary of info about the object\"\"\"", "\n", "basic_info", "=", "{", "\n", "'num_gts'", ":", "self", ".", "num_gts", ",", "\n", "'num_preds'", ":", "self", ".", "num_preds", ",", "\n", "'gt_inds'", ":", "self", ".", "gt_inds", ",", "\n", "'max_overlaps'", ":", "self", ".", "max_overlaps", ",", "\n", "'labels'", ":", "self", ".", "labels", ",", "\n", "}", "\n", "basic_info", ".", "update", "(", "self", ".", "_extra_properties", ")", "\n", "return", "basic_info", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.__nice__": [[77, 95], ["parts.append", "parts.append", "parts.append", "parts.append", "parts.append", "parts.append", "parts.append", "tuple", "tuple", "tuple"], "methods", ["None"], ["", "def", "__nice__", "(", "self", ")", ":", "\n", "        ", "\"\"\"str: a \"nice\" summary string describing this assign result\"\"\"", "\n", "parts", "=", "[", "]", "\n", "parts", ".", "append", "(", "f'num_gts={self.num_gts!r}'", ")", "\n", "if", "self", ".", "gt_inds", "is", "None", ":", "\n", "            ", "parts", ".", "append", "(", "f'gt_inds={self.gt_inds!r}'", ")", "\n", "", "else", ":", "\n", "            ", "parts", ".", "append", "(", "f'gt_inds.shape={tuple(self.gt_inds.shape)!r}'", ")", "\n", "", "if", "self", ".", "max_overlaps", "is", "None", ":", "\n", "            ", "parts", ".", "append", "(", "f'max_overlaps={self.max_overlaps!r}'", ")", "\n", "", "else", ":", "\n", "            ", "parts", ".", "append", "(", "'max_overlaps.shape='", "\n", "f'{tuple(self.max_overlaps.shape)!r}'", ")", "\n", "", "if", "self", ".", "labels", "is", "None", ":", "\n", "            ", "parts", ".", "append", "(", "f'labels={self.labels!r}'", ")", "\n", "", "else", ":", "\n", "            ", "parts", ".", "append", "(", "f'labels.shape={tuple(self.labels.shape)!r}'", ")", "\n", "", "return", "', '", ".", "join", "(", "parts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random": [[96, 189], ["demodata.ensure_rng", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "kwargs.get", "cls", "kwargs.get", "demodata.ensure_rng.randint", "demodata.ensure_rng.randint", "torch.zeros", "torch.zeros", "torch.from_numpy", "torch.from_numpy", "min", "demodata.ensure_rng.shuffle", "assigned_idxs.sort", "torch.zeros", "np.arange", "demodata.ensure_rng.shuffle", "torch.from_numpy", "torch.from_numpy", "torch.zeros", "demodata.ensure_rng.rand", "min", "np.where", "torch.from_numpy", "demodata.ensure_rng.randint", "demodata.ensure_rng.rand", "demodata.ensure_rng.rand", "torch.from_numpy.sum", "demodata.ensure_rng.rand", "torch.zeros", "torch.from_numpy", "demodata.ensure_rng.rand", "demodata.ensure_rng.randint"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.util_random.ensure_rng"], ["", "@", "classmethod", "\n", "def", "random", "(", "cls", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Create random AssignResult for tests or debugging.\n\n        Args:\n            num_preds: number of predicted boxes\n            num_gts: number of true boxes\n            p_ignore (float): probability of a predicted box assinged to an\n                ignored truth\n            p_assigned (float): probability of a predicted box not being\n                assigned\n            p_use_label (float | bool): with labels or not\n            rng (None | int | numpy.random.RandomState): seed or state\n\n        Returns:\n            :obj:`AssignResult`: Randomly generated assign results.\n\n        Example:\n            >>> from mmdet.core.bbox.assigners.assign_result import *  # NOQA\n            >>> self = AssignResult.random()\n            >>> print(self.info)\n        \"\"\"", "\n", "from", "mmdet", ".", "core", ".", "bbox", "import", "demodata", "\n", "rng", "=", "demodata", ".", "ensure_rng", "(", "kwargs", ".", "get", "(", "'rng'", ",", "None", ")", ")", "\n", "\n", "num_gts", "=", "kwargs", ".", "get", "(", "'num_gts'", ",", "None", ")", "\n", "num_preds", "=", "kwargs", ".", "get", "(", "'num_preds'", ",", "None", ")", "\n", "p_ignore", "=", "kwargs", ".", "get", "(", "'p_ignore'", ",", "0.3", ")", "\n", "p_assigned", "=", "kwargs", ".", "get", "(", "'p_assigned'", ",", "0.7", ")", "\n", "p_use_label", "=", "kwargs", ".", "get", "(", "'p_use_label'", ",", "0.5", ")", "\n", "num_classes", "=", "kwargs", ".", "get", "(", "'p_use_label'", ",", "3", ")", "\n", "\n", "if", "num_gts", "is", "None", ":", "\n", "            ", "num_gts", "=", "rng", ".", "randint", "(", "0", ",", "8", ")", "\n", "", "if", "num_preds", "is", "None", ":", "\n", "            ", "num_preds", "=", "rng", ".", "randint", "(", "0", ",", "16", ")", "\n", "\n", "", "if", "num_gts", "==", "0", ":", "\n", "            ", "max_overlaps", "=", "torch", ".", "zeros", "(", "num_preds", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "gt_inds", "=", "torch", ".", "zeros", "(", "num_preds", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "if", "p_use_label", "is", "True", "or", "p_use_label", "<", "rng", ".", "rand", "(", ")", ":", "\n", "                ", "labels", "=", "torch", ".", "zeros", "(", "num_preds", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "", "else", ":", "\n", "                ", "labels", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "import", "numpy", "as", "np", "\n", "# Create an overlap for each predicted box", "\n", "max_overlaps", "=", "torch", ".", "from_numpy", "(", "rng", ".", "rand", "(", "num_preds", ")", ")", "\n", "\n", "# Construct gt_inds for each predicted box", "\n", "is_assigned", "=", "torch", ".", "from_numpy", "(", "rng", ".", "rand", "(", "num_preds", ")", "<", "p_assigned", ")", "\n", "# maximum number of assignments constraints", "\n", "n_assigned", "=", "min", "(", "num_preds", ",", "min", "(", "num_gts", ",", "is_assigned", ".", "sum", "(", ")", ")", ")", "\n", "\n", "assigned_idxs", "=", "np", ".", "where", "(", "is_assigned", ")", "[", "0", "]", "\n", "rng", ".", "shuffle", "(", "assigned_idxs", ")", "\n", "assigned_idxs", "=", "assigned_idxs", "[", "0", ":", "n_assigned", "]", "\n", "assigned_idxs", ".", "sort", "(", ")", "\n", "\n", "is_assigned", "[", ":", "]", "=", "0", "\n", "is_assigned", "[", "assigned_idxs", "]", "=", "True", "\n", "\n", "is_ignore", "=", "torch", ".", "from_numpy", "(", "\n", "rng", ".", "rand", "(", "num_preds", ")", "<", "p_ignore", ")", "&", "is_assigned", "\n", "\n", "gt_inds", "=", "torch", ".", "zeros", "(", "num_preds", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "true_idxs", "=", "np", ".", "arange", "(", "num_gts", ")", "\n", "rng", ".", "shuffle", "(", "true_idxs", ")", "\n", "true_idxs", "=", "torch", ".", "from_numpy", "(", "true_idxs", ")", "\n", "gt_inds", "[", "is_assigned", "]", "=", "true_idxs", "[", ":", "n_assigned", "]", "\n", "\n", "gt_inds", "=", "torch", ".", "from_numpy", "(", "\n", "rng", ".", "randint", "(", "1", ",", "num_gts", "+", "1", ",", "size", "=", "num_preds", ")", ")", "\n", "gt_inds", "[", "is_ignore", "]", "=", "-", "1", "\n", "gt_inds", "[", "~", "is_assigned", "]", "=", "0", "\n", "max_overlaps", "[", "~", "is_assigned", "]", "=", "0", "\n", "\n", "if", "p_use_label", "is", "True", "or", "p_use_label", "<", "rng", ".", "rand", "(", ")", ":", "\n", "                ", "if", "num_classes", "==", "0", ":", "\n", "                    ", "labels", "=", "torch", ".", "zeros", "(", "num_preds", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "", "else", ":", "\n", "                    ", "labels", "=", "torch", ".", "from_numpy", "(", "\n", "# remind that we set FG labels to [0, num_class-1]", "\n", "# since mmdet v2.0", "\n", "# BG cat_id: num_class", "\n", "rng", ".", "randint", "(", "0", ",", "num_classes", ",", "size", "=", "num_preds", ")", ")", "\n", "labels", "[", "~", "is_assigned", "]", "=", "0", "\n", "", "", "else", ":", "\n", "                ", "labels", "=", "None", "\n", "\n", "", "", "self", "=", "cls", "(", "num_gts", ",", "gt_inds", ",", "max_overlaps", ",", "labels", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.add_gt_": [[190, 205], ["torch.arange", "torch.cat", "torch.cat", "torch.cat", "len", "assign_result.AssignResult.max_overlaps.new_ones", "len"], "methods", ["None"], ["", "def", "add_gt_", "(", "self", ",", "gt_labels", ")", ":", "\n", "        ", "\"\"\"Add ground truth as assigned results.\n\n        Args:\n            gt_labels (torch.Tensor): Labels of gt boxes\n        \"\"\"", "\n", "self_inds", "=", "torch", ".", "arange", "(", "\n", "1", ",", "len", "(", "gt_labels", ")", "+", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "gt_labels", ".", "device", ")", "\n", "self", ".", "gt_inds", "=", "torch", ".", "cat", "(", "[", "self_inds", ",", "self", ".", "gt_inds", "]", ")", "\n", "\n", "self", ".", "max_overlaps", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "max_overlaps", ".", "new_ones", "(", "len", "(", "gt_labels", ")", ")", ",", "self", ".", "max_overlaps", "]", ")", "\n", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "labels", "=", "torch", ".", "cat", "(", "[", "gt_labels", ",", "self", ".", "labels", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.__init__": [[23, 30], ["dict", "iou_calculators.build_iou_calculator"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.builder.build_iou_calculator"], ["def", "__init__", "(", "self", ",", "\n", "topk", ",", "\n", "iou_calculator", "=", "dict", "(", "type", "=", "'BboxOverlaps2D'", ")", ",", "\n", "ignore_iof_thr", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "topk", "=", "topk", "\n", "self", ".", "iou_calculator", "=", "build_iou_calculator", "(", "iou_calculator", ")", "\n", "self", ".", "ignore_iof_thr", "=", "ignore_iof_thr", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.atss_assigner.ATSSAssigner.assign": [[33, 179], ["atss_assigner.ATSSAssigner.iou_calculator", "atss_assigner.ATSSAssigner.new_full", "torch.stack", "torch.stack", "enumerate", "torch.cat", "candidate_overlaps.mean", "candidate_overlaps.std", "range", "bboxes_cx.view().expand().contiguous().view", "bboxes_cy.view().expand().contiguous().view", "candidate_idxs.view.view.view", "torch.full_like().t().contiguous().view", "overlaps_inf.view().t.view().t.view().t", "overlaps_inf.view().t.view().t.max", "assign_result.AssignResult", "gt_bboxes.size", "bboxes.size", "atss_assigner.ATSSAssigner.new_zeros", "assign_result.AssignResult", "atss_assigner.ATSSAssigner.iou_calculator", "atss_assigner.ATSSAssigner.max", "min", "distances_per_level.topk", "candidate_idxs.view.view.append", "ep_bboxes_cx[].view", "ep_bboxes_cy[].view", "ep_bboxes_cx[].view", "ep_bboxes_cy[].view", "candidate_idxs.view.view.view", "atss_assigner.ATSSAssigner.t().contiguous().view", "atss_assigner.ATSSAssigner.new_full.new_full", "torch.nonzero().squeeze", "atss_assigner.ATSSAssigner.new_full", "gt_bboxes_ignore.numel", "bboxes.numel", "bboxes_cx.view().expand().contiguous", "bboxes_cy.view().expand().contiguous", "torch.stack().min", "torch.full_like().t().contiguous", "is_pos.view", "overlaps_inf.view().t.view().t.view", "torch.nonzero().squeeze.numel", "torch.arange", "atss_assigner.ATSSAssigner.t().contiguous", "torch.nonzero", "bboxes_cx.view().expand", "bboxes_cy.view().expand", "torch.stack", "torch.full_like().t", "atss_assigner.ATSSAssigner.t", "bboxes_cx.view", "bboxes_cy.view", "torch.full_like"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.expand", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.expand"], ["", "def", "assign", "(", "self", ",", "\n", "bboxes", ",", "\n", "num_level_bboxes", ",", "\n", "gt_bboxes", ",", "\n", "gt_bboxes_ignore", "=", "None", ",", "\n", "gt_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"Assign gt to bboxes.\n\n        The assignment is done in following steps\n\n        1. compute iou between all bbox (bbox of all pyramid levels) and gt\n        2. compute center distance between all bbox and gt\n        3. on each pyramid level, for each gt, select k bbox whose center\n           are closest to the gt center, so we total select k*l bbox as\n           candidates for each gt\n        4. get corresponding iou for the these candidates, and compute the\n           mean and std, set mean + std as the iou threshold\n        5. select these candidates whose iou are greater than or equal to\n           the threshold as positive\n        6. limit the positive sample's center in gt\n\n\n        Args:\n            bboxes (Tensor): Bounding boxes to be assigned, shape(n, 4).\n            num_level_bboxes (List): num of bboxes in each level\n            gt_bboxes (Tensor): Groundtruth boxes, shape (k, 4).\n            gt_bboxes_ignore (Tensor, optional): Ground truth bboxes that are\n                labelled as `ignored`, e.g., crowd boxes in COCO.\n            gt_labels (Tensor, optional): Label of gt_bboxes, shape (k, ).\n\n        Returns:\n            :obj:`AssignResult`: The assign result.\n        \"\"\"", "\n", "INF", "=", "100000000", "\n", "bboxes", "=", "bboxes", "[", ":", ",", ":", "4", "]", "\n", "num_gt", ",", "num_bboxes", "=", "gt_bboxes", ".", "size", "(", "0", ")", ",", "bboxes", ".", "size", "(", "0", ")", "\n", "\n", "# compute iou between all bbox and gt", "\n", "overlaps", "=", "self", ".", "iou_calculator", "(", "bboxes", ",", "gt_bboxes", ")", "\n", "\n", "# assign 0 by default", "\n", "assigned_gt_inds", "=", "overlaps", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "\n", "0", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "if", "num_gt", "==", "0", "or", "num_bboxes", "==", "0", ":", "\n", "# No ground truth or boxes, return empty assignment", "\n", "            ", "max_overlaps", "=", "overlaps", ".", "new_zeros", "(", "(", "num_bboxes", ",", ")", ")", "\n", "if", "num_gt", "==", "0", ":", "\n", "# No truth, assign everything to background", "\n", "                ", "assigned_gt_inds", "[", ":", "]", "=", "0", "\n", "", "if", "gt_labels", "is", "None", ":", "\n", "                ", "assigned_labels", "=", "None", "\n", "", "else", ":", "\n", "                ", "assigned_labels", "=", "overlaps", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "\n", "-", "1", ",", "\n", "dtype", "=", "torch", ".", "long", ")", "\n", "", "return", "AssignResult", "(", "\n", "num_gt", ",", "assigned_gt_inds", ",", "max_overlaps", ",", "labels", "=", "assigned_labels", ")", "\n", "\n", "# compute center distance between all bbox and gt", "\n", "", "gt_cx", "=", "(", "gt_bboxes", "[", ":", ",", "0", "]", "+", "gt_bboxes", "[", ":", ",", "2", "]", ")", "/", "2.0", "\n", "gt_cy", "=", "(", "gt_bboxes", "[", ":", ",", "1", "]", "+", "gt_bboxes", "[", ":", ",", "3", "]", ")", "/", "2.0", "\n", "gt_points", "=", "torch", ".", "stack", "(", "(", "gt_cx", ",", "gt_cy", ")", ",", "dim", "=", "1", ")", "\n", "\n", "bboxes_cx", "=", "(", "bboxes", "[", ":", ",", "0", "]", "+", "bboxes", "[", ":", ",", "2", "]", ")", "/", "2.0", "\n", "bboxes_cy", "=", "(", "bboxes", "[", ":", ",", "1", "]", "+", "bboxes", "[", ":", ",", "3", "]", ")", "/", "2.0", "\n", "bboxes_points", "=", "torch", ".", "stack", "(", "(", "bboxes_cx", ",", "bboxes_cy", ")", ",", "dim", "=", "1", ")", "\n", "\n", "distances", "=", "(", "bboxes_points", "[", ":", ",", "None", ",", ":", "]", "-", "\n", "gt_points", "[", "None", ",", ":", ",", ":", "]", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "\n", "if", "(", "self", ".", "ignore_iof_thr", ">", "0", "and", "gt_bboxes_ignore", "is", "not", "None", "\n", "and", "gt_bboxes_ignore", ".", "numel", "(", ")", ">", "0", "and", "bboxes", ".", "numel", "(", ")", ">", "0", ")", ":", "\n", "            ", "ignore_overlaps", "=", "self", ".", "iou_calculator", "(", "\n", "bboxes", ",", "gt_bboxes_ignore", ",", "mode", "=", "'iof'", ")", "\n", "ignore_max_overlaps", ",", "_", "=", "ignore_overlaps", ".", "max", "(", "dim", "=", "1", ")", "\n", "ignore_idxs", "=", "ignore_max_overlaps", ">", "self", ".", "ignore_iof_thr", "\n", "distances", "[", "ignore_idxs", ",", ":", "]", "=", "INF", "\n", "assigned_gt_inds", "[", "ignore_idxs", "]", "=", "-", "1", "\n", "\n", "# Selecting candidates based on the center distance", "\n", "", "candidate_idxs", "=", "[", "]", "\n", "start_idx", "=", "0", "\n", "for", "level", ",", "bboxes_per_level", "in", "enumerate", "(", "num_level_bboxes", ")", ":", "\n", "# on each pyramid level, for each gt,", "\n", "# select k bbox whose center are closest to the gt center", "\n", "            ", "end_idx", "=", "start_idx", "+", "bboxes_per_level", "\n", "distances_per_level", "=", "distances", "[", "start_idx", ":", "end_idx", ",", ":", "]", "\n", "selectable_k", "=", "min", "(", "self", ".", "topk", ",", "bboxes_per_level", ")", "\n", "_", ",", "topk_idxs_per_level", "=", "distances_per_level", ".", "topk", "(", "\n", "selectable_k", ",", "dim", "=", "0", ",", "largest", "=", "False", ")", "\n", "candidate_idxs", ".", "append", "(", "topk_idxs_per_level", "+", "start_idx", ")", "\n", "start_idx", "=", "end_idx", "\n", "", "candidate_idxs", "=", "torch", ".", "cat", "(", "candidate_idxs", ",", "dim", "=", "0", ")", "\n", "\n", "# get corresponding iou for the these candidates, and compute the", "\n", "# mean and std, set mean + std as the iou threshold", "\n", "candidate_overlaps", "=", "overlaps", "[", "candidate_idxs", ",", "torch", ".", "arange", "(", "num_gt", ")", "]", "\n", "overlaps_mean_per_gt", "=", "candidate_overlaps", ".", "mean", "(", "0", ")", "\n", "overlaps_std_per_gt", "=", "candidate_overlaps", ".", "std", "(", "0", ")", "\n", "overlaps_thr_per_gt", "=", "overlaps_mean_per_gt", "+", "overlaps_std_per_gt", "\n", "\n", "is_pos", "=", "candidate_overlaps", ">=", "overlaps_thr_per_gt", "[", "None", ",", ":", "]", "\n", "\n", "# limit the positive sample's center in gt", "\n", "for", "gt_idx", "in", "range", "(", "num_gt", ")", ":", "\n", "            ", "candidate_idxs", "[", ":", ",", "gt_idx", "]", "+=", "gt_idx", "*", "num_bboxes", "\n", "", "ep_bboxes_cx", "=", "bboxes_cx", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "\n", "num_gt", ",", "num_bboxes", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "ep_bboxes_cy", "=", "bboxes_cy", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "\n", "num_gt", ",", "num_bboxes", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "candidate_idxs", "=", "candidate_idxs", ".", "view", "(", "-", "1", ")", "\n", "\n", "# calculate the left, top, right, bottom distance between positive", "\n", "# bbox center and gt side", "\n", "l_", "=", "ep_bboxes_cx", "[", "candidate_idxs", "]", ".", "view", "(", "-", "1", ",", "num_gt", ")", "-", "gt_bboxes", "[", ":", ",", "0", "]", "\n", "t_", "=", "ep_bboxes_cy", "[", "candidate_idxs", "]", ".", "view", "(", "-", "1", ",", "num_gt", ")", "-", "gt_bboxes", "[", ":", ",", "1", "]", "\n", "r_", "=", "gt_bboxes", "[", ":", ",", "2", "]", "-", "ep_bboxes_cx", "[", "candidate_idxs", "]", ".", "view", "(", "-", "1", ",", "num_gt", ")", "\n", "b_", "=", "gt_bboxes", "[", ":", ",", "3", "]", "-", "ep_bboxes_cy", "[", "candidate_idxs", "]", ".", "view", "(", "-", "1", ",", "num_gt", ")", "\n", "is_in_gts", "=", "torch", ".", "stack", "(", "[", "l_", ",", "t_", ",", "r_", ",", "b_", "]", ",", "dim", "=", "1", ")", ".", "min", "(", "dim", "=", "1", ")", "[", "0", "]", ">", "0.01", "\n", "is_pos", "=", "is_pos", "&", "is_in_gts", "\n", "\n", "# if an anchor box is assigned to multiple gts,", "\n", "# the one with the highest IoU will be selected.", "\n", "overlaps_inf", "=", "torch", ".", "full_like", "(", "overlaps", ",", "\n", "-", "INF", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "index", "=", "candidate_idxs", ".", "view", "(", "-", "1", ")", "[", "is_pos", ".", "view", "(", "-", "1", ")", "]", "\n", "overlaps_inf", "[", "index", "]", "=", "overlaps", ".", "t", "(", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "[", "index", "]", "\n", "overlaps_inf", "=", "overlaps_inf", ".", "view", "(", "num_gt", ",", "-", "1", ")", ".", "t", "(", ")", "\n", "\n", "max_overlaps", ",", "argmax_overlaps", "=", "overlaps_inf", ".", "max", "(", "dim", "=", "1", ")", "\n", "assigned_gt_inds", "[", "\n", "max_overlaps", "!=", "-", "INF", "]", "=", "argmax_overlaps", "[", "max_overlaps", "!=", "-", "INF", "]", "+", "1", "\n", "\n", "if", "gt_labels", "is", "not", "None", ":", "\n", "            ", "assigned_labels", "=", "assigned_gt_inds", ".", "new_full", "(", "(", "num_bboxes", ",", ")", ",", "-", "1", ")", "\n", "pos_inds", "=", "torch", ".", "nonzero", "(", "\n", "assigned_gt_inds", ">", "0", ",", "as_tuple", "=", "False", ")", ".", "squeeze", "(", ")", "\n", "if", "pos_inds", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "assigned_labels", "[", "pos_inds", "]", "=", "gt_labels", "[", "\n", "assigned_gt_inds", "[", "pos_inds", "]", "-", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "assigned_labels", "=", "None", "\n", "", "return", "AssignResult", "(", "\n", "num_gt", ",", "assigned_gt_inds", ",", "max_overlaps", ",", "labels", "=", "assigned_labels", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.tblr_bbox_coder.TBLRBBoxCoder.__init__": [[25, 29], ["base_bbox_coder.BaseBBoxCoder.__init__"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "normalizer", "=", "4.0", ",", "clip_border", "=", "True", ")", ":", "\n", "        ", "super", "(", "BaseBBoxCoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "normalizer", "=", "normalizer", "\n", "self", ".", "clip_border", "=", "clip_border", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.tblr_bbox_coder.TBLRBBoxCoder.encode": [[30, 48], ["tblr_bbox_coder.bboxes2tblr", "bboxes.size", "gt_bboxes.size", "bboxes.size", "gt_bboxes.size"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.tblr_bbox_coder.bboxes2tblr"], ["", "def", "encode", "(", "self", ",", "bboxes", ",", "gt_bboxes", ")", ":", "\n", "        ", "\"\"\"Get box regression transformation deltas that can be used to\n        transform the ``bboxes`` into the ``gt_bboxes`` in the (top, left,\n        bottom, right) order.\n\n        Args:\n            bboxes (torch.Tensor): source boxes, e.g., object proposals.\n            gt_bboxes (torch.Tensor): target of the transformation, e.g.,\n                ground truth boxes.\n\n        Returns:\n            torch.Tensor: Box transformation deltas\n        \"\"\"", "\n", "assert", "bboxes", ".", "size", "(", "0", ")", "==", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "assert", "bboxes", ".", "size", "(", "-", "1", ")", "==", "gt_bboxes", ".", "size", "(", "-", "1", ")", "==", "4", "\n", "encoded_bboxes", "=", "bboxes2tblr", "(", "\n", "bboxes", ",", "gt_bboxes", ",", "normalizer", "=", "self", ".", "normalizer", ")", "\n", "return", "encoded_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.tblr_bbox_coder.TBLRBBoxCoder.decode": [[49, 73], ["tblr_bbox_coder.tblr2bboxes"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.tblr_bbox_coder.tblr2bboxes"], ["", "def", "decode", "(", "self", ",", "bboxes", ",", "pred_bboxes", ",", "max_shape", "=", "None", ")", ":", "\n", "        ", "\"\"\"Apply transformation `pred_bboxes` to `boxes`.\n\n        Args:\n            bboxes (torch.Tensor): Basic boxes.Shape (B, N, 4) or (N, 4)\n            pred_bboxes (torch.Tensor): Encoded boxes with shape\n               (B, N, 4) or (N, 4)\n            max_shape (Sequence[int] or torch.Tensor or Sequence[\n               Sequence[int]],optional): Maximum bounds for boxes, specifies\n               (H, W, C) or (H, W). If bboxes shape is (B, N, 4), then\n               the max_shape should be a Sequence[Sequence[int]]\n               and the length of max_shape should also be B.\n\n        Returns:\n            torch.Tensor: Decoded boxes.\n        \"\"\"", "\n", "decoded_bboxes", "=", "tblr2bboxes", "(", "\n", "bboxes", ",", "\n", "pred_bboxes", ",", "\n", "normalizer", "=", "self", ".", "normalizer", ",", "\n", "max_shape", "=", "max_shape", ",", "\n", "clip_border", "=", "self", ".", "clip_border", ")", "\n", "\n", "return", "decoded_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.tblr_bbox_coder.bboxes2tblr": [[75, 120], ["mmcv.jit", "gts.split", "torch.cat", "isinstance", "torch.tensor", "priors.size", "gts.size", "prior_centers[].unsqueeze", "prior_centers[].unsqueeze", "prior_centers[].unsqueeze", "prior_centers[].unsqueeze", "torch.split", "len"], "function", ["None"], ["", "", "@", "mmcv", ".", "jit", "(", "coderize", "=", "True", ")", "\n", "def", "bboxes2tblr", "(", "priors", ",", "gts", ",", "normalizer", "=", "4.0", ",", "normalize_by_wh", "=", "True", ")", ":", "\n", "    ", "\"\"\"Encode ground truth boxes to tblr coordinate.\n\n    It first convert the gt coordinate to tblr format,\n     (top, bottom, left, right), relative to prior box centers.\n     The tblr coordinate may be normalized by the side length of prior bboxes\n     if `normalize_by_wh` is specified as True, and it is then normalized by\n     the `normalizer` factor.\n\n    Args:\n        priors (Tensor): Prior boxes in point form\n            Shape: (num_proposals,4).\n        gts (Tensor): Coords of ground truth for each prior in point-form\n            Shape: (num_proposals, 4).\n        normalizer (Sequence[float] | float): normalization parameter of\n            encoded boxes. If it is a list, it has to have length = 4.\n            Default: 4.0\n        normalize_by_wh (bool): Whether to normalize tblr coordinate by the\n            side length (wh) of prior bboxes.\n\n    Return:\n        encoded boxes (Tensor), Shape: (num_proposals, 4)\n    \"\"\"", "\n", "\n", "# dist b/t match center and prior's center", "\n", "if", "not", "isinstance", "(", "normalizer", ",", "float", ")", ":", "\n", "        ", "normalizer", "=", "torch", ".", "tensor", "(", "normalizer", ",", "device", "=", "priors", ".", "device", ")", "\n", "assert", "len", "(", "normalizer", ")", "==", "4", ",", "'Normalizer must have length = 4'", "\n", "", "assert", "priors", ".", "size", "(", "0", ")", "==", "gts", ".", "size", "(", "0", ")", "\n", "prior_centers", "=", "(", "priors", "[", ":", ",", "0", ":", "2", "]", "+", "priors", "[", ":", ",", "2", ":", "4", "]", ")", "/", "2", "\n", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "gts", ".", "split", "(", "1", ",", "dim", "=", "1", ")", "\n", "top", "=", "prior_centers", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", "-", "ymin", "\n", "bottom", "=", "ymax", "-", "prior_centers", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "left", "=", "prior_centers", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "-", "xmin", "\n", "right", "=", "xmax", "-", "prior_centers", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", "\n", "loc", "=", "torch", ".", "cat", "(", "(", "top", ",", "bottom", ",", "left", ",", "right", ")", ",", "dim", "=", "1", ")", "\n", "if", "normalize_by_wh", ":", "\n", "# Normalize tblr by anchor width and height", "\n", "        ", "wh", "=", "priors", "[", ":", ",", "2", ":", "4", "]", "-", "priors", "[", ":", ",", "0", ":", "2", "]", "\n", "w", ",", "h", "=", "torch", ".", "split", "(", "wh", ",", "1", ",", "dim", "=", "1", ")", "\n", "loc", "[", ":", ",", ":", "2", "]", "/=", "h", "# tb is normalized by h", "\n", "loc", "[", ":", ",", "2", ":", "]", "/=", "w", "# lr is normalized by w", "\n", "# Normalize tblr by the given normalization factor", "\n", "", "return", "loc", "/", "normalizer", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.tblr_bbox_coder.tblr2bboxes": [[122, 199], ["mmcv.jit", "torch.cat.split", "torch.cat", "isinstance", "torch.tensor", "priors.size", "tblr.size", "torch.split", "torch.cat", "prior_centers[].unsqueeze", "prior_centers[].unsqueeze", "prior_centers[].unsqueeze", "prior_centers[].unsqueeze", "max_shape[].type_as", "priors.new_tensor", "torch.cat().flip().unsqueeze", "torch.where", "torch.where", "len", "priors.size", "tblr.size", "isinstance", "priors.new_tensor", "priors.new_tensor.size", "torch.where.size", "torch.cat().flip", "torch.cat"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip"], ["", "@", "mmcv", ".", "jit", "(", "coderize", "=", "True", ")", "\n", "def", "tblr2bboxes", "(", "priors", ",", "\n", "tblr", ",", "\n", "normalizer", "=", "4.0", ",", "\n", "normalize_by_wh", "=", "True", ",", "\n", "max_shape", "=", "None", ",", "\n", "clip_border", "=", "True", ")", ":", "\n", "    ", "\"\"\"Decode tblr outputs to prediction boxes.\n\n    The process includes 3 steps: 1) De-normalize tblr coordinates by\n    multiplying it with `normalizer`; 2) De-normalize tblr coordinates by the\n    prior bbox width and height if `normalize_by_wh` is `True`; 3) Convert\n    tblr (top, bottom, left, right) pair relative to the center of priors back\n    to (xmin, ymin, xmax, ymax) coordinate.\n\n    Args:\n        priors (Tensor): Prior boxes in point form (x0, y0, x1, y1)\n          Shape: (N,4) or (B, N, 4).\n        tblr (Tensor): Coords of network output in tblr form\n          Shape: (N, 4) or (B, N, 4).\n        normalizer (Sequence[float] | float): Normalization parameter of\n          encoded boxes. By list, it represents the normalization factors at\n          tblr dims. By float, it is the unified normalization factor at all\n          dims. Default: 4.0\n        normalize_by_wh (bool): Whether the tblr coordinates have been\n          normalized by the side length (wh) of prior bboxes.\n        max_shape (Sequence[int] or torch.Tensor or Sequence[\n            Sequence[int]],optional): Maximum bounds for boxes, specifies\n            (H, W, C) or (H, W). If priors shape is (B, N, 4), then\n            the max_shape should be a Sequence[Sequence[int]]\n            and the length of max_shape should also be B.\n        clip_border (bool, optional): Whether clip the objects outside the\n            border of the image. Defaults to True.\n\n    Return:\n        encoded boxes (Tensor): Boxes with shape (N, 4) or (B, N, 4)\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "normalizer", ",", "float", ")", ":", "\n", "        ", "normalizer", "=", "torch", ".", "tensor", "(", "normalizer", ",", "device", "=", "priors", ".", "device", ")", "\n", "assert", "len", "(", "normalizer", ")", "==", "4", ",", "'Normalizer must have length = 4'", "\n", "", "assert", "priors", ".", "size", "(", "0", ")", "==", "tblr", ".", "size", "(", "0", ")", "\n", "if", "priors", ".", "ndim", "==", "3", ":", "\n", "        ", "assert", "priors", ".", "size", "(", "1", ")", "==", "tblr", ".", "size", "(", "1", ")", "\n", "\n", "", "loc_decode", "=", "tblr", "*", "normalizer", "\n", "prior_centers", "=", "(", "priors", "[", "...", ",", "0", ":", "2", "]", "+", "priors", "[", "...", ",", "2", ":", "4", "]", ")", "/", "2", "\n", "if", "normalize_by_wh", ":", "\n", "        ", "wh", "=", "priors", "[", "...", ",", "2", ":", "4", "]", "-", "priors", "[", "...", ",", "0", ":", "2", "]", "\n", "w", ",", "h", "=", "torch", ".", "split", "(", "wh", ",", "1", ",", "dim", "=", "-", "1", ")", "\n", "# Inplace operation with slice would failed for exporting to ONNX", "\n", "th", "=", "h", "*", "loc_decode", "[", "...", ",", ":", "2", "]", "# tb", "\n", "tw", "=", "w", "*", "loc_decode", "[", "...", ",", "2", ":", "]", "# lr", "\n", "loc_decode", "=", "torch", ".", "cat", "(", "[", "th", ",", "tw", "]", ",", "dim", "=", "-", "1", ")", "\n", "# Cannot be exported using onnx when loc_decode.split(1, dim=-1)", "\n", "", "top", ",", "bottom", ",", "left", ",", "right", "=", "loc_decode", ".", "split", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "xmin", "=", "prior_centers", "[", "...", ",", "0", "]", ".", "unsqueeze", "(", "-", "1", ")", "-", "left", "\n", "xmax", "=", "prior_centers", "[", "...", ",", "0", "]", ".", "unsqueeze", "(", "-", "1", ")", "+", "right", "\n", "ymin", "=", "prior_centers", "[", "...", ",", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", "-", "top", "\n", "ymax", "=", "prior_centers", "[", "...", ",", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", "+", "bottom", "\n", "\n", "bboxes", "=", "torch", ".", "cat", "(", "(", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "clip_border", "and", "max_shape", "is", "not", "None", ":", "\n", "        ", "if", "not", "isinstance", "(", "max_shape", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "max_shape", "=", "priors", ".", "new_tensor", "(", "max_shape", ")", "\n", "", "max_shape", "=", "max_shape", "[", "...", ",", ":", "2", "]", ".", "type_as", "(", "priors", ")", "\n", "if", "max_shape", ".", "ndim", "==", "2", ":", "\n", "            ", "assert", "bboxes", ".", "ndim", "==", "3", "\n", "assert", "max_shape", ".", "size", "(", "0", ")", "==", "bboxes", ".", "size", "(", "0", ")", "\n", "\n", "", "min_xy", "=", "priors", ".", "new_tensor", "(", "0", ")", "\n", "max_xy", "=", "torch", ".", "cat", "(", "[", "max_shape", ",", "max_shape", "]", ",", "\n", "dim", "=", "-", "1", ")", ".", "flip", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "bboxes", "=", "torch", ".", "where", "(", "bboxes", "<", "min_xy", ",", "min_xy", ",", "bboxes", ")", "\n", "bboxes", "=", "torch", ".", "where", "(", "bboxes", ">", "max_xy", ",", "max_xy", ",", "bboxes", ")", "\n", "\n", "", "return", "bboxes", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.base_bbox_coder.BaseBBoxCoder.__init__": [[7, 9], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.base_bbox_coder.BaseBBoxCoder.encode": [[10, 13], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "encode", "(", "self", ",", "bboxes", ",", "gt_bboxes", ")", ":", "\n", "        ", "\"\"\"Encode deltas between bboxes and ground truth boxes.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.base_bbox_coder.BaseBBoxCoder.decode": [[14, 18], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "decode", "(", "self", ",", "bboxes", ",", "bboxes_pred", ")", ":", "\n", "        ", "\"\"\"Decode the predicted bboxes according to prediction and base\n        boxes.\"\"\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.pseudo_bbox_coder.PseudoBBoxCoder.__init__": [[9, 11], ["base_bbox_coder.BaseBBoxCoder.__init__"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BaseBBoxCoder", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.pseudo_bbox_coder.PseudoBBoxCoder.encode": [[12, 15], ["None"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "bboxes", ",", "gt_bboxes", ")", ":", "\n", "        ", "\"\"\"torch.Tensor: return the given ``bboxes``\"\"\"", "\n", "return", "gt_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.pseudo_bbox_coder.PseudoBBoxCoder.decode": [[16, 19], ["None"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "bboxes", ",", "pred_bboxes", ")", ":", "\n", "        ", "\"\"\"torch.Tensor: return the given ``pred_bboxes``\"\"\"", "\n", "return", "pred_bboxes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.yolo_bbox_coder.YOLOBBoxCoder.__init__": [[21, 24], ["base_bbox_coder.BaseBBoxCoder.__init__"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "BaseBBoxCoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.yolo_bbox_coder.YOLOBBoxCoder.encode": [[25, 59], ["mmcv.jit", "torch.log", "torch.log", "torch.stack", "bboxes.size", "gt_bboxes.size", "bboxes.size", "gt_bboxes.size"], "methods", ["None"], ["", "@", "mmcv", ".", "jit", "(", "coderize", "=", "True", ")", "\n", "def", "encode", "(", "self", ",", "bboxes", ",", "gt_bboxes", ",", "stride", ")", ":", "\n", "        ", "\"\"\"Get box regression transformation deltas that can be used to\n        transform the ``bboxes`` into the ``gt_bboxes``.\n\n        Args:\n            bboxes (torch.Tensor): Source boxes, e.g., anchors.\n            gt_bboxes (torch.Tensor): Target of the transformation, e.g.,\n                ground-truth boxes.\n            stride (torch.Tensor | int): Stride of bboxes.\n\n        Returns:\n            torch.Tensor: Box transformation deltas\n        \"\"\"", "\n", "\n", "assert", "bboxes", ".", "size", "(", "0", ")", "==", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "assert", "bboxes", ".", "size", "(", "-", "1", ")", "==", "gt_bboxes", ".", "size", "(", "-", "1", ")", "==", "4", "\n", "x_center_gt", "=", "(", "gt_bboxes", "[", "...", ",", "0", "]", "+", "gt_bboxes", "[", "...", ",", "2", "]", ")", "*", "0.5", "\n", "y_center_gt", "=", "(", "gt_bboxes", "[", "...", ",", "1", "]", "+", "gt_bboxes", "[", "...", ",", "3", "]", ")", "*", "0.5", "\n", "w_gt", "=", "gt_bboxes", "[", "...", ",", "2", "]", "-", "gt_bboxes", "[", "...", ",", "0", "]", "\n", "h_gt", "=", "gt_bboxes", "[", "...", ",", "3", "]", "-", "gt_bboxes", "[", "...", ",", "1", "]", "\n", "x_center", "=", "(", "bboxes", "[", "...", ",", "0", "]", "+", "bboxes", "[", "...", ",", "2", "]", ")", "*", "0.5", "\n", "y_center", "=", "(", "bboxes", "[", "...", ",", "1", "]", "+", "bboxes", "[", "...", ",", "3", "]", ")", "*", "0.5", "\n", "w", "=", "bboxes", "[", "...", ",", "2", "]", "-", "bboxes", "[", "...", ",", "0", "]", "\n", "h", "=", "bboxes", "[", "...", ",", "3", "]", "-", "bboxes", "[", "...", ",", "1", "]", "\n", "w_target", "=", "torch", ".", "log", "(", "(", "w_gt", "/", "w", ")", ".", "clamp", "(", "min", "=", "self", ".", "eps", ")", ")", "\n", "h_target", "=", "torch", ".", "log", "(", "(", "h_gt", "/", "h", ")", ".", "clamp", "(", "min", "=", "self", ".", "eps", ")", ")", "\n", "x_center_target", "=", "(", "(", "x_center_gt", "-", "x_center", ")", "/", "stride", "+", "0.5", ")", ".", "clamp", "(", "\n", "self", ".", "eps", ",", "1", "-", "self", ".", "eps", ")", "\n", "y_center_target", "=", "(", "(", "y_center_gt", "-", "y_center", ")", "/", "stride", "+", "0.5", ")", ".", "clamp", "(", "\n", "self", ".", "eps", ",", "1", "-", "self", ".", "eps", ")", "\n", "encoded_bboxes", "=", "torch", ".", "stack", "(", "\n", "[", "x_center_target", ",", "y_center_target", ",", "w_target", ",", "h_target", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "encoded_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.yolo_bbox_coder.YOLOBBoxCoder.decode": [[60, 90], ["mmcv.jit", "torch.stack", "pred_bboxes.size", "bboxes.size", "pred_bboxes.size", "bboxes.size", "torch.exp", "torch.exp"], "methods", ["None"], ["", "@", "mmcv", ".", "jit", "(", "coderize", "=", "True", ")", "\n", "def", "decode", "(", "self", ",", "bboxes", ",", "pred_bboxes", ",", "stride", ")", ":", "\n", "        ", "\"\"\"Apply transformation `pred_bboxes` to `boxes`.\n\n        Args:\n            boxes (torch.Tensor): Basic boxes, e.g. anchors.\n            pred_bboxes (torch.Tensor): Encoded boxes with shape\n            stride (torch.Tensor | int): Strides of bboxes.\n\n        Returns:\n            torch.Tensor: Decoded boxes.\n        \"\"\"", "\n", "assert", "pred_bboxes", ".", "size", "(", "0", ")", "==", "bboxes", ".", "size", "(", "0", ")", "\n", "assert", "pred_bboxes", ".", "size", "(", "-", "1", ")", "==", "bboxes", ".", "size", "(", "-", "1", ")", "==", "4", "\n", "x_center", "=", "(", "bboxes", "[", "...", ",", "0", "]", "+", "bboxes", "[", "...", ",", "2", "]", ")", "*", "0.5", "\n", "y_center", "=", "(", "bboxes", "[", "...", ",", "1", "]", "+", "bboxes", "[", "...", ",", "3", "]", ")", "*", "0.5", "\n", "w", "=", "bboxes", "[", "...", ",", "2", "]", "-", "bboxes", "[", "...", ",", "0", "]", "\n", "h", "=", "bboxes", "[", "...", ",", "3", "]", "-", "bboxes", "[", "...", ",", "1", "]", "\n", "# Get outputs x, y", "\n", "x_center_pred", "=", "(", "pred_bboxes", "[", "...", ",", "0", "]", "-", "0.5", ")", "*", "stride", "+", "x_center", "\n", "y_center_pred", "=", "(", "pred_bboxes", "[", "...", ",", "1", "]", "-", "0.5", ")", "*", "stride", "+", "y_center", "\n", "w_pred", "=", "torch", ".", "exp", "(", "pred_bboxes", "[", "...", ",", "2", "]", ")", "*", "w", "\n", "h_pred", "=", "torch", ".", "exp", "(", "pred_bboxes", "[", "...", ",", "3", "]", ")", "*", "h", "\n", "\n", "decoded_bboxes", "=", "torch", ".", "stack", "(", "\n", "(", "x_center_pred", "-", "w_pred", "/", "2", ",", "y_center_pred", "-", "h_pred", "/", "2", ",", "\n", "x_center_pred", "+", "w_pred", "/", "2", ",", "y_center_pred", "+", "h_pred", "/", "2", ")", ",", "\n", "dim", "=", "-", "1", ")", "\n", "\n", "return", "decoded_bboxes", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.delta_xywh_bbox_coder.DeltaXYWHBBoxCoder.__init__": [[26, 34], ["base_bbox_coder.BaseBBoxCoder.__init__"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "\n", "target_means", "=", "(", "0.", ",", "0.", ",", "0.", ",", "0.", ")", ",", "\n", "target_stds", "=", "(", "1.", ",", "1.", ",", "1.", ",", "1.", ")", ",", "\n", "clip_border", "=", "True", ")", ":", "\n", "        ", "super", "(", "BaseBBoxCoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "means", "=", "target_means", "\n", "self", ".", "stds", "=", "target_stds", "\n", "self", ".", "clip_border", "=", "clip_border", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.delta_xywh_bbox_coder.DeltaXYWHBBoxCoder.encode": [[35, 52], ["delta_xywh_bbox_coder.bbox2delta", "bboxes.size", "gt_bboxes.size", "bboxes.size", "gt_bboxes.size"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.delta_xywh_bbox_coder.bbox2delta"], ["", "def", "encode", "(", "self", ",", "bboxes", ",", "gt_bboxes", ")", ":", "\n", "        ", "\"\"\"Get box regression transformation deltas that can be used to\n        transform the ``bboxes`` into the ``gt_bboxes``.\n\n        Args:\n            bboxes (torch.Tensor): Source boxes, e.g., object proposals.\n            gt_bboxes (torch.Tensor): Target of the transformation, e.g.,\n                ground-truth boxes.\n\n        Returns:\n            torch.Tensor: Box transformation deltas\n        \"\"\"", "\n", "\n", "assert", "bboxes", ".", "size", "(", "0", ")", "==", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "assert", "bboxes", ".", "size", "(", "-", "1", ")", "==", "gt_bboxes", ".", "size", "(", "-", "1", ")", "==", "4", "\n", "encoded_bboxes", "=", "bbox2delta", "(", "bboxes", ",", "gt_bboxes", ",", "self", ".", "means", ",", "self", ".", "stds", ")", "\n", "return", "encoded_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.delta_xywh_bbox_coder.DeltaXYWHBBoxCoder.decode": [[53, 85], ["delta_xywh_bbox_coder.delta2bbox", "pred_bboxes.size", "bboxes.size", "pred_bboxes.size", "bboxes.size"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.delta_xywh_bbox_coder.delta2bbox"], ["", "def", "decode", "(", "self", ",", "\n", "bboxes", ",", "\n", "pred_bboxes", ",", "\n", "max_shape", "=", "None", ",", "\n", "wh_ratio_clip", "=", "16", "/", "1000", ")", ":", "\n", "        ", "\"\"\"Apply transformation `pred_bboxes` to `boxes`.\n\n        Args:\n            bboxes (torch.Tensor): Basic boxes. Shape (B, N, 4) or (N, 4)\n            pred_bboxes (Tensor): Encoded offsets with respect to each roi.\n               Has shape (B, N, num_classes * 4) or (B, N, 4) or\n               (N, num_classes * 4) or (N, 4). Note N = num_anchors * W * H\n               when rois is a grid of anchors.Offset encoding follows [1]_.\n            max_shape (Sequence[int] or torch.Tensor or Sequence[\n               Sequence[int]],optional): Maximum bounds for boxes, specifies\n               (H, W, C) or (H, W). If bboxes shape is (B, N, 4), then\n               the max_shape should be a Sequence[Sequence[int]]\n               and the length of max_shape should also be B.\n            wh_ratio_clip (float, optional): The allowed ratio between\n                width and height.\n\n        Returns:\n            torch.Tensor: Decoded boxes.\n        \"\"\"", "\n", "\n", "assert", "pred_bboxes", ".", "size", "(", "0", ")", "==", "bboxes", ".", "size", "(", "0", ")", "\n", "if", "pred_bboxes", ".", "ndim", "==", "3", ":", "\n", "            ", "assert", "pred_bboxes", ".", "size", "(", "1", ")", "==", "bboxes", ".", "size", "(", "1", ")", "\n", "", "decoded_bboxes", "=", "delta2bbox", "(", "bboxes", ",", "pred_bboxes", ",", "self", ".", "means", ",", "self", ".", "stds", ",", "\n", "max_shape", ",", "wh_ratio_clip", ",", "self", ".", "clip_border", ")", "\n", "\n", "return", "decoded_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.delta_xywh_bbox_coder.bbox2delta": [[87, 131], ["mmcv.jit", "proposals.float.float", "gt.float.float", "torch.log", "torch.log", "torch.stack", "deltas.sub_().div_.new_tensor().unsqueeze", "deltas.sub_().div_.new_tensor().unsqueeze", "deltas.sub_().div_.sub_().div_", "proposals.float.size", "gt.float.size", "deltas.sub_().div_.new_tensor", "deltas.sub_().div_.new_tensor", "deltas.sub_().div_.sub_"], "function", ["None"], ["", "", "@", "mmcv", ".", "jit", "(", "coderize", "=", "True", ")", "\n", "def", "bbox2delta", "(", "proposals", ",", "gt", ",", "means", "=", "(", "0.", ",", "0.", ",", "0.", ",", "0.", ")", ",", "stds", "=", "(", "1.", ",", "1.", ",", "1.", ",", "1.", ")", ")", ":", "\n", "    ", "\"\"\"Compute deltas of proposals w.r.t. gt.\n\n    We usually compute the deltas of x, y, w, h of proposals w.r.t ground\n    truth bboxes to get regression target.\n    This is the inverse function of :func:`delta2bbox`.\n\n    Args:\n        proposals (Tensor): Boxes to be transformed, shape (N, ..., 4)\n        gt (Tensor): Gt bboxes to be used as base, shape (N, ..., 4)\n        means (Sequence[float]): Denormalizing means for delta coordinates\n        stds (Sequence[float]): Denormalizing standard deviation for delta\n            coordinates\n\n    Returns:\n        Tensor: deltas with shape (N, 4), where columns represent dx, dy,\n            dw, dh.\n    \"\"\"", "\n", "assert", "proposals", ".", "size", "(", ")", "==", "gt", ".", "size", "(", ")", "\n", "\n", "proposals", "=", "proposals", ".", "float", "(", ")", "\n", "gt", "=", "gt", ".", "float", "(", ")", "\n", "px", "=", "(", "proposals", "[", "...", ",", "0", "]", "+", "proposals", "[", "...", ",", "2", "]", ")", "*", "0.5", "\n", "py", "=", "(", "proposals", "[", "...", ",", "1", "]", "+", "proposals", "[", "...", ",", "3", "]", ")", "*", "0.5", "\n", "pw", "=", "proposals", "[", "...", ",", "2", "]", "-", "proposals", "[", "...", ",", "0", "]", "\n", "ph", "=", "proposals", "[", "...", ",", "3", "]", "-", "proposals", "[", "...", ",", "1", "]", "\n", "\n", "gx", "=", "(", "gt", "[", "...", ",", "0", "]", "+", "gt", "[", "...", ",", "2", "]", ")", "*", "0.5", "\n", "gy", "=", "(", "gt", "[", "...", ",", "1", "]", "+", "gt", "[", "...", ",", "3", "]", ")", "*", "0.5", "\n", "gw", "=", "gt", "[", "...", ",", "2", "]", "-", "gt", "[", "...", ",", "0", "]", "\n", "gh", "=", "gt", "[", "...", ",", "3", "]", "-", "gt", "[", "...", ",", "1", "]", "\n", "\n", "dx", "=", "(", "gx", "-", "px", ")", "/", "pw", "\n", "dy", "=", "(", "gy", "-", "py", ")", "/", "ph", "\n", "dw", "=", "torch", ".", "log", "(", "gw", "/", "pw", ")", "\n", "dh", "=", "torch", ".", "log", "(", "gh", "/", "ph", ")", "\n", "deltas", "=", "torch", ".", "stack", "(", "[", "dx", ",", "dy", ",", "dw", ",", "dh", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "means", "=", "deltas", ".", "new_tensor", "(", "means", ")", ".", "unsqueeze", "(", "0", ")", "\n", "stds", "=", "deltas", ".", "new_tensor", "(", "stds", ")", ".", "unsqueeze", "(", "0", ")", "\n", "deltas", "=", "deltas", ".", "sub_", "(", "means", ")", ".", "div_", "(", "stds", ")", "\n", "\n", "return", "deltas", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.delta_xywh_bbox_coder.delta2bbox": [[133, 238], ["mmcv.jit", "deltas.new_tensor().view().repeat", "deltas.new_tensor().view().repeat", "numpy.abs", "dw.clamp.clamp", "dh.clamp.clamp", "torch.stack().view", "numpy.log", "dw.clamp.exp", "dh.clamp.exp", "deltas.size", "max_shape[].type_as", "x1.new_tensor", "torch.cat().flip().unsqueeze", "torch.where", "torch.where", "deltas.new_tensor().view", "deltas.size", "deltas.new_tensor().view", "deltas.size", "torch.stack", "isinstance", "x1.new_tensor", "x1.new_tensor.size", "torch.where.size", "torch.cat().flip", "deltas.new_tensor", "deltas.new_tensor", "torch.cat", "deltas.size"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip"], ["", "@", "mmcv", ".", "jit", "(", "coderize", "=", "True", ")", "\n", "def", "delta2bbox", "(", "rois", ",", "\n", "deltas", ",", "\n", "means", "=", "(", "0.", ",", "0.", ",", "0.", ",", "0.", ")", ",", "\n", "stds", "=", "(", "1.", ",", "1.", ",", "1.", ",", "1.", ")", ",", "\n", "max_shape", "=", "None", ",", "\n", "wh_ratio_clip", "=", "16", "/", "1000", ",", "\n", "clip_border", "=", "True", ")", ":", "\n", "    ", "\"\"\"Apply deltas to shift/scale base boxes.\n\n    Typically the rois are anchor or proposed bounding boxes and the deltas are\n    network outputs used to shift/scale those boxes.\n    This is the inverse function of :func:`bbox2delta`.\n\n    Args:\n        rois (Tensor): Boxes to be transformed. Has shape (N, 4) or (B, N, 4)\n        deltas (Tensor): Encoded offsets with respect to each roi.\n            Has shape (B, N, num_classes * 4) or (B, N, 4) or\n            (N, num_classes * 4) or (N, 4). Note N = num_anchors * W * H\n            when rois is a grid of anchors.Offset encoding follows [1]_.\n        means (Sequence[float]): Denormalizing means for delta coordinates\n        stds (Sequence[float]): Denormalizing standard deviation for delta\n            coordinates\n        max_shape (Sequence[int] or torch.Tensor or Sequence[\n            Sequence[int]],optional): Maximum bounds for boxes, specifies\n            (H, W, C) or (H, W). If rois shape is (B, N, 4), then\n            the max_shape should be a Sequence[Sequence[int]]\n            and the length of max_shape should also be B.\n        wh_ratio_clip (float): Maximum aspect ratio for boxes.\n        clip_border (bool, optional): Whether clip the objects outside the\n            border of the image. Defaults to True.\n\n    Returns:\n        Tensor: Boxes with shape (B, N, num_classes * 4) or (B, N, 4) or\n           (N, num_classes * 4) or (N, 4), where 4 represent\n           tl_x, tl_y, br_x, br_y.\n\n    References:\n        .. [1] https://arxiv.org/abs/1311.2524\n\n    Example:\n        >>> rois = torch.Tensor([[ 0.,  0.,  1.,  1.],\n        >>>                      [ 0.,  0.,  1.,  1.],\n        >>>                      [ 0.,  0.,  1.,  1.],\n        >>>                      [ 5.,  5.,  5.,  5.]])\n        >>> deltas = torch.Tensor([[  0.,   0.,   0.,   0.],\n        >>>                        [  1.,   1.,   1.,   1.],\n        >>>                        [  0.,   0.,   2.,  -1.],\n        >>>                        [ 0.7, -1.9, -0.5,  0.3]])\n        >>> delta2bbox(rois, deltas, max_shape=(32, 32, 3))\n        tensor([[0.0000, 0.0000, 1.0000, 1.0000],\n                [0.1409, 0.1409, 2.8591, 2.8591],\n                [0.0000, 0.3161, 4.1945, 0.6839],\n                [5.0000, 5.0000, 5.0000, 5.0000]])\n    \"\"\"", "\n", "means", "=", "deltas", ".", "new_tensor", "(", "means", ")", ".", "view", "(", "1", ",", "\n", "-", "1", ")", ".", "repeat", "(", "1", ",", "\n", "deltas", ".", "size", "(", "-", "1", ")", "//", "4", ")", "\n", "stds", "=", "deltas", ".", "new_tensor", "(", "stds", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "1", ",", "deltas", ".", "size", "(", "-", "1", ")", "//", "4", ")", "\n", "denorm_deltas", "=", "deltas", "*", "stds", "+", "means", "\n", "dx", "=", "denorm_deltas", "[", "...", ",", "0", ":", ":", "4", "]", "\n", "dy", "=", "denorm_deltas", "[", "...", ",", "1", ":", ":", "4", "]", "\n", "dw", "=", "denorm_deltas", "[", "...", ",", "2", ":", ":", "4", "]", "\n", "dh", "=", "denorm_deltas", "[", "...", ",", "3", ":", ":", "4", "]", "\n", "max_ratio", "=", "np", ".", "abs", "(", "np", ".", "log", "(", "wh_ratio_clip", ")", ")", "\n", "dw", "=", "dw", ".", "clamp", "(", "min", "=", "-", "max_ratio", ",", "max", "=", "max_ratio", ")", "\n", "dh", "=", "dh", ".", "clamp", "(", "min", "=", "-", "max_ratio", ",", "max", "=", "max_ratio", ")", "\n", "x1", ",", "y1", "=", "rois", "[", "...", ",", "0", "]", ",", "rois", "[", "...", ",", "1", "]", "\n", "x2", ",", "y2", "=", "rois", "[", "...", ",", "2", "]", ",", "rois", "[", "...", ",", "3", "]", "\n", "# Compute center of each roi", "\n", "px", "=", "(", "(", "x1", "+", "x2", ")", "*", "0.5", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "dx", ")", "\n", "py", "=", "(", "(", "y1", "+", "y2", ")", "*", "0.5", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "dy", ")", "\n", "# Compute width/height of each roi", "\n", "pw", "=", "(", "x2", "-", "x1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "dw", ")", "\n", "ph", "=", "(", "y2", "-", "y1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "dh", ")", "\n", "# Use exp(network energy) to enlarge/shrink each roi", "\n", "gw", "=", "pw", "*", "dw", ".", "exp", "(", ")", "\n", "gh", "=", "ph", "*", "dh", ".", "exp", "(", ")", "\n", "# Use network energy to shift the center of each roi", "\n", "gx", "=", "px", "+", "pw", "*", "dx", "\n", "gy", "=", "py", "+", "ph", "*", "dy", "\n", "# Convert center-xy/width/height to top-left, bottom-right", "\n", "x1", "=", "gx", "-", "gw", "*", "0.5", "\n", "y1", "=", "gy", "-", "gh", "*", "0.5", "\n", "x2", "=", "gx", "+", "gw", "*", "0.5", "\n", "y2", "=", "gy", "+", "gh", "*", "0.5", "\n", "\n", "bboxes", "=", "torch", ".", "stack", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "deltas", ".", "size", "(", ")", ")", "\n", "\n", "if", "clip_border", "and", "max_shape", "is", "not", "None", ":", "\n", "        ", "if", "not", "isinstance", "(", "max_shape", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "max_shape", "=", "x1", ".", "new_tensor", "(", "max_shape", ")", "\n", "", "max_shape", "=", "max_shape", "[", "...", ",", ":", "2", "]", ".", "type_as", "(", "x1", ")", "\n", "if", "max_shape", ".", "ndim", "==", "2", ":", "\n", "            ", "assert", "bboxes", ".", "ndim", "==", "3", "\n", "assert", "max_shape", ".", "size", "(", "0", ")", "==", "bboxes", ".", "size", "(", "0", ")", "\n", "\n", "", "min_xy", "=", "x1", ".", "new_tensor", "(", "0", ")", "\n", "max_xy", "=", "torch", ".", "cat", "(", "\n", "[", "max_shape", "]", "*", "(", "deltas", ".", "size", "(", "-", "1", ")", "//", "2", ")", ",", "\n", "dim", "=", "-", "1", ")", ".", "flip", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "bboxes", "=", "torch", ".", "where", "(", "bboxes", "<", "min_xy", ",", "min_xy", ",", "bboxes", ")", "\n", "bboxes", "=", "torch", ".", "where", "(", "bboxes", ">", "max_xy", ",", "max_xy", ",", "bboxes", ")", "\n", "\n", "", "return", "bboxes", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.bucketing_bbox_coder.BucketingBBoxCoder.__init__": [[34, 48], ["base_bbox_coder.BaseBBoxCoder.__init__"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_buckets", ",", "\n", "scale_factor", ",", "\n", "offset_topk", "=", "2", ",", "\n", "offset_upperbound", "=", "1.0", ",", "\n", "cls_ignore_neighbor", "=", "True", ",", "\n", "clip_border", "=", "True", ")", ":", "\n", "        ", "super", "(", "BucketingBBoxCoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_buckets", "=", "num_buckets", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "offset_topk", "=", "offset_topk", "\n", "self", ".", "offset_upperbound", "=", "offset_upperbound", "\n", "self", ".", "cls_ignore_neighbor", "=", "cls_ignore_neighbor", "\n", "self", ".", "clip_border", "=", "clip_border", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.bucketing_bbox_coder.BucketingBBoxCoder.encode": [[49, 70], ["bucketing_bbox_coder.bbox2bucket", "bboxes.size", "gt_bboxes.size", "bboxes.size", "gt_bboxes.size"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.bucketing_bbox_coder.bbox2bucket"], ["", "def", "encode", "(", "self", ",", "bboxes", ",", "gt_bboxes", ")", ":", "\n", "        ", "\"\"\"Get bucketing estimation and fine regression targets during\n        training.\n\n        Args:\n            bboxes (torch.Tensor): source boxes, e.g., object proposals.\n            gt_bboxes (torch.Tensor): target of the transformation, e.g.,\n                ground truth boxes.\n\n        Returns:\n           encoded_bboxes(tuple[Tensor]): bucketing estimation\n            and fine regression targets and weights\n        \"\"\"", "\n", "\n", "assert", "bboxes", ".", "size", "(", "0", ")", "==", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "assert", "bboxes", ".", "size", "(", "-", "1", ")", "==", "gt_bboxes", ".", "size", "(", "-", "1", ")", "==", "4", "\n", "encoded_bboxes", "=", "bbox2bucket", "(", "bboxes", ",", "gt_bboxes", ",", "self", ".", "num_buckets", ",", "\n", "self", ".", "scale_factor", ",", "self", ".", "offset_topk", ",", "\n", "self", ".", "offset_upperbound", ",", "\n", "self", ".", "cls_ignore_neighbor", ")", "\n", "return", "encoded_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.bucketing_bbox_coder.BucketingBBoxCoder.decode": [[71, 92], ["bucketing_bbox_coder.bucket2bbox", "len", "cls_preds.size", "bboxes.size", "offset_preds.size", "bboxes.size"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.bucketing_bbox_coder.bucket2bbox"], ["", "def", "decode", "(", "self", ",", "bboxes", ",", "pred_bboxes", ",", "max_shape", "=", "None", ")", ":", "\n", "        ", "\"\"\"Apply transformation `pred_bboxes` to `boxes`.\n        Args:\n            boxes (torch.Tensor): Basic boxes.\n            pred_bboxes (torch.Tensor): Predictions for bucketing estimation\n                and fine regression\n            max_shape (tuple[int], optional): Maximum shape of boxes.\n                Defaults to None.\n\n        Returns:\n            torch.Tensor: Decoded boxes.\n        \"\"\"", "\n", "assert", "len", "(", "pred_bboxes", ")", "==", "2", "\n", "cls_preds", ",", "offset_preds", "=", "pred_bboxes", "\n", "assert", "cls_preds", ".", "size", "(", "0", ")", "==", "bboxes", ".", "size", "(", "0", ")", "and", "offset_preds", ".", "size", "(", "\n", "0", ")", "==", "bboxes", ".", "size", "(", "0", ")", "\n", "decoded_bboxes", "=", "bucket2bbox", "(", "bboxes", ",", "cls_preds", ",", "offset_preds", ",", "\n", "self", ".", "num_buckets", ",", "self", ".", "scale_factor", ",", "\n", "max_shape", ",", "self", ".", "clip_border", ")", "\n", "\n", "return", "decoded_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.bucketing_bbox_coder.generat_buckets": [[94, 141], ["mmcv.jit", "transforms.bbox_rescale", "int", "numpy.ceil", "torch.arange().to().float", "torch.arange().to().float", "torch.arange().to().float", "torch.arange().to().float", "torch.arange().to().float", "torch.arange().to().float", "torch.arange().to().float", "torch.arange().to().float", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox_rescale", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to"], ["", "", "@", "mmcv", ".", "jit", "(", "coderize", "=", "True", ")", "\n", "def", "generat_buckets", "(", "proposals", ",", "num_buckets", ",", "scale_factor", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Generate buckets w.r.t bucket number and scale factor of proposals.\n\n    Args:\n        proposals (Tensor): Shape (n, 4)\n        num_buckets (int): Number of buckets.\n        scale_factor (float): Scale factor to rescale proposals.\n\n    Returns:\n        tuple[Tensor]: (bucket_w, bucket_h, l_buckets, r_buckets,\n         t_buckets, d_buckets)\n\n            - bucket_w: Width of buckets on x-axis. Shape (n, ).\n            - bucket_h: Height of buckets on y-axis. Shape (n, ).\n            - l_buckets: Left buckets. Shape (n, ceil(side_num/2)).\n            - r_buckets: Right buckets. Shape (n, ceil(side_num/2)).\n            - t_buckets: Top buckets. Shape (n, ceil(side_num/2)).\n            - d_buckets: Down buckets. Shape (n, ceil(side_num/2)).\n    \"\"\"", "\n", "proposals", "=", "bbox_rescale", "(", "proposals", ",", "scale_factor", ")", "\n", "\n", "# number of buckets in each side", "\n", "side_num", "=", "int", "(", "np", ".", "ceil", "(", "num_buckets", "/", "2.0", ")", ")", "\n", "pw", "=", "proposals", "[", "...", ",", "2", "]", "-", "proposals", "[", "...", ",", "0", "]", "\n", "ph", "=", "proposals", "[", "...", ",", "3", "]", "-", "proposals", "[", "...", ",", "1", "]", "\n", "px1", "=", "proposals", "[", "...", ",", "0", "]", "\n", "py1", "=", "proposals", "[", "...", ",", "1", "]", "\n", "px2", "=", "proposals", "[", "...", ",", "2", "]", "\n", "py2", "=", "proposals", "[", "...", ",", "3", "]", "\n", "\n", "bucket_w", "=", "pw", "/", "num_buckets", "\n", "bucket_h", "=", "ph", "/", "num_buckets", "\n", "\n", "# left buckets", "\n", "l_buckets", "=", "px1", "[", ":", ",", "None", "]", "+", "(", "0.5", "+", "torch", ".", "arange", "(", "\n", "0", ",", "side_num", ")", ".", "to", "(", "proposals", ")", ".", "float", "(", ")", ")", "[", "None", ",", ":", "]", "*", "bucket_w", "[", ":", ",", "None", "]", "\n", "# right buckets", "\n", "r_buckets", "=", "px2", "[", ":", ",", "None", "]", "-", "(", "0.5", "+", "torch", ".", "arange", "(", "\n", "0", ",", "side_num", ")", ".", "to", "(", "proposals", ")", ".", "float", "(", ")", ")", "[", "None", ",", ":", "]", "*", "bucket_w", "[", ":", ",", "None", "]", "\n", "# top buckets", "\n", "t_buckets", "=", "py1", "[", ":", ",", "None", "]", "+", "(", "0.5", "+", "torch", ".", "arange", "(", "\n", "0", ",", "side_num", ")", ".", "to", "(", "proposals", ")", ".", "float", "(", ")", ")", "[", "None", ",", ":", "]", "*", "bucket_h", "[", ":", ",", "None", "]", "\n", "# down buckets", "\n", "d_buckets", "=", "py2", "[", ":", ",", "None", "]", "-", "(", "0.5", "+", "torch", ".", "arange", "(", "\n", "0", ",", "side_num", ")", ".", "to", "(", "proposals", ")", ".", "float", "(", ")", ")", "[", "None", ",", ":", "]", "*", "bucket_h", "[", ":", ",", "None", "]", "\n", "return", "bucket_w", ",", "bucket_h", ",", "l_buckets", ",", "r_buckets", ",", "t_buckets", ",", "d_buckets", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.bucketing_bbox_coder.bbox2bucket": [[143, 265], ["mmcv.jit", "proposals.float.float", "gt.float.float", "bucketing_bbox_coder.generat_buckets", "l_offsets.abs().topk", "r_offsets.abs().topk", "t_offsets.abs().topk", "d_offsets.abs().topk", "l_offsets.new_zeros", "r_offsets.new_zeros", "t_offsets.new_zeros", "d_offsets.new_zeros", "torch.arange().to().long", "torch.arange().to().long", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "torch.stack", "torch.stack", "torch.stack.size", "torch.one_hot().view().float", "torch.cat", "torch.cat", "proposals.float.size", "gt.float.size", "l_offsets.size", "r_offsets.size", "t_offsets.size", "d_offsets.size", "numpy.ceil", "l_offsets.abs", "r_offsets.abs", "t_offsets.abs", "d_offsets.abs", "torch.arange().to", "torch.arange().to", "torch.one_hot().view", "l_offsets.abs", "r_offsets.abs", "t_offsets.abs", "d_offsets.abs", "torch.arange", "torch.arange", "torch.one_hot", "proposals.float.size", "torch.stack.view"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.bucketing_bbox_coder.generat_buckets", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to"], ["", "@", "mmcv", ".", "jit", "(", "coderize", "=", "True", ")", "\n", "def", "bbox2bucket", "(", "proposals", ",", "\n", "gt", ",", "\n", "num_buckets", ",", "\n", "scale_factor", ",", "\n", "offset_topk", "=", "2", ",", "\n", "offset_upperbound", "=", "1.0", ",", "\n", "cls_ignore_neighbor", "=", "True", ")", ":", "\n", "    ", "\"\"\"Generate buckets estimation and fine regression targets.\n\n    Args:\n        proposals (Tensor): Shape (n, 4)\n        gt (Tensor): Shape (n, 4)\n        num_buckets (int): Number of buckets.\n        scale_factor (float): Scale factor to rescale proposals.\n        offset_topk (int): Topk buckets are used to generate\n             bucket fine regression targets. Defaults to 2.\n        offset_upperbound (float): Offset allowance to generate\n             bucket fine regression targets.\n             To avoid too large offset displacements. Defaults to 1.0.\n        cls_ignore_neighbor (bool): Ignore second nearest bucket or Not.\n             Defaults to True.\n\n    Returns:\n        tuple[Tensor]: (offsets, offsets_weights, bucket_labels, cls_weights).\n\n            - offsets: Fine regression targets. \\\n                Shape (n, num_buckets*2).\n            - offsets_weights: Fine regression weights. \\\n                Shape (n, num_buckets*2).\n            - bucket_labels: Bucketing estimation labels. \\\n                Shape (n, num_buckets*2).\n            - cls_weights: Bucketing estimation weights. \\\n                Shape (n, num_buckets*2).\n    \"\"\"", "\n", "assert", "proposals", ".", "size", "(", ")", "==", "gt", ".", "size", "(", ")", "\n", "\n", "# generate buckets", "\n", "proposals", "=", "proposals", ".", "float", "(", ")", "\n", "gt", "=", "gt", ".", "float", "(", ")", "\n", "(", "bucket_w", ",", "bucket_h", ",", "l_buckets", ",", "r_buckets", ",", "t_buckets", ",", "\n", "d_buckets", ")", "=", "generat_buckets", "(", "proposals", ",", "num_buckets", ",", "scale_factor", ")", "\n", "\n", "gx1", "=", "gt", "[", "...", ",", "0", "]", "\n", "gy1", "=", "gt", "[", "...", ",", "1", "]", "\n", "gx2", "=", "gt", "[", "...", ",", "2", "]", "\n", "gy2", "=", "gt", "[", "...", ",", "3", "]", "\n", "\n", "# generate offset targets and weights", "\n", "# offsets from buckets to gts", "\n", "l_offsets", "=", "(", "l_buckets", "-", "gx1", "[", ":", ",", "None", "]", ")", "/", "bucket_w", "[", ":", ",", "None", "]", "\n", "r_offsets", "=", "(", "r_buckets", "-", "gx2", "[", ":", ",", "None", "]", ")", "/", "bucket_w", "[", ":", ",", "None", "]", "\n", "t_offsets", "=", "(", "t_buckets", "-", "gy1", "[", ":", ",", "None", "]", ")", "/", "bucket_h", "[", ":", ",", "None", "]", "\n", "d_offsets", "=", "(", "d_buckets", "-", "gy2", "[", ":", ",", "None", "]", ")", "/", "bucket_h", "[", ":", ",", "None", "]", "\n", "\n", "# select top-k nearset buckets", "\n", "l_topk", ",", "l_label", "=", "l_offsets", ".", "abs", "(", ")", ".", "topk", "(", "\n", "offset_topk", ",", "dim", "=", "1", ",", "largest", "=", "False", ",", "sorted", "=", "True", ")", "\n", "r_topk", ",", "r_label", "=", "r_offsets", ".", "abs", "(", ")", ".", "topk", "(", "\n", "offset_topk", ",", "dim", "=", "1", ",", "largest", "=", "False", ",", "sorted", "=", "True", ")", "\n", "t_topk", ",", "t_label", "=", "t_offsets", ".", "abs", "(", ")", ".", "topk", "(", "\n", "offset_topk", ",", "dim", "=", "1", ",", "largest", "=", "False", ",", "sorted", "=", "True", ")", "\n", "d_topk", ",", "d_label", "=", "d_offsets", ".", "abs", "(", ")", ".", "topk", "(", "\n", "offset_topk", ",", "dim", "=", "1", ",", "largest", "=", "False", ",", "sorted", "=", "True", ")", "\n", "\n", "offset_l_weights", "=", "l_offsets", ".", "new_zeros", "(", "l_offsets", ".", "size", "(", ")", ")", "\n", "offset_r_weights", "=", "r_offsets", ".", "new_zeros", "(", "r_offsets", ".", "size", "(", ")", ")", "\n", "offset_t_weights", "=", "t_offsets", ".", "new_zeros", "(", "t_offsets", ".", "size", "(", ")", ")", "\n", "offset_d_weights", "=", "d_offsets", ".", "new_zeros", "(", "d_offsets", ".", "size", "(", ")", ")", "\n", "inds", "=", "torch", ".", "arange", "(", "0", ",", "proposals", ".", "size", "(", "0", ")", ")", ".", "to", "(", "proposals", ")", ".", "long", "(", ")", "\n", "\n", "# generate offset weights of top-k nearset buckets", "\n", "for", "k", "in", "range", "(", "offset_topk", ")", ":", "\n", "        ", "if", "k", ">=", "1", ":", "\n", "            ", "offset_l_weights", "[", "inds", ",", "l_label", "[", ":", ",", "\n", "k", "]", "]", "=", "(", "l_topk", "[", ":", ",", "k", "]", "<", "\n", "offset_upperbound", ")", ".", "float", "(", ")", "\n", "offset_r_weights", "[", "inds", ",", "r_label", "[", ":", ",", "\n", "k", "]", "]", "=", "(", "r_topk", "[", ":", ",", "k", "]", "<", "\n", "offset_upperbound", ")", ".", "float", "(", ")", "\n", "offset_t_weights", "[", "inds", ",", "t_label", "[", ":", ",", "\n", "k", "]", "]", "=", "(", "t_topk", "[", ":", ",", "k", "]", "<", "\n", "offset_upperbound", ")", ".", "float", "(", ")", "\n", "offset_d_weights", "[", "inds", ",", "d_label", "[", ":", ",", "\n", "k", "]", "]", "=", "(", "d_topk", "[", ":", ",", "k", "]", "<", "\n", "offset_upperbound", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "offset_l_weights", "[", "inds", ",", "l_label", "[", ":", ",", "k", "]", "]", "=", "1.0", "\n", "offset_r_weights", "[", "inds", ",", "r_label", "[", ":", ",", "k", "]", "]", "=", "1.0", "\n", "offset_t_weights", "[", "inds", ",", "t_label", "[", ":", ",", "k", "]", "]", "=", "1.0", "\n", "offset_d_weights", "[", "inds", ",", "d_label", "[", ":", ",", "k", "]", "]", "=", "1.0", "\n", "\n", "", "", "offsets", "=", "torch", ".", "cat", "(", "[", "l_offsets", ",", "r_offsets", ",", "t_offsets", ",", "d_offsets", "]", ",", "dim", "=", "-", "1", ")", "\n", "offsets_weights", "=", "torch", ".", "cat", "(", "[", "\n", "offset_l_weights", ",", "offset_r_weights", ",", "offset_t_weights", ",", "offset_d_weights", "\n", "]", ",", "\n", "dim", "=", "-", "1", ")", "\n", "\n", "# generate bucket labels and weight", "\n", "side_num", "=", "int", "(", "np", ".", "ceil", "(", "num_buckets", "/", "2.0", ")", ")", "\n", "labels", "=", "torch", ".", "stack", "(", "\n", "[", "l_label", "[", ":", ",", "0", "]", ",", "r_label", "[", ":", ",", "0", "]", ",", "t_label", "[", ":", ",", "0", "]", ",", "d_label", "[", ":", ",", "0", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "batch_size", "=", "labels", ".", "size", "(", "0", ")", "\n", "bucket_labels", "=", "F", ".", "one_hot", "(", "labels", ".", "view", "(", "-", "1", ")", ",", "side_num", ")", ".", "view", "(", "batch_size", ",", "\n", "-", "1", ")", ".", "float", "(", ")", "\n", "bucket_cls_l_weights", "=", "(", "l_offsets", ".", "abs", "(", ")", "<", "1", ")", ".", "float", "(", ")", "\n", "bucket_cls_r_weights", "=", "(", "r_offsets", ".", "abs", "(", ")", "<", "1", ")", ".", "float", "(", ")", "\n", "bucket_cls_t_weights", "=", "(", "t_offsets", ".", "abs", "(", ")", "<", "1", ")", ".", "float", "(", ")", "\n", "bucket_cls_d_weights", "=", "(", "d_offsets", ".", "abs", "(", ")", "<", "1", ")", ".", "float", "(", ")", "\n", "bucket_cls_weights", "=", "torch", ".", "cat", "(", "[", "\n", "bucket_cls_l_weights", ",", "bucket_cls_r_weights", ",", "bucket_cls_t_weights", ",", "\n", "bucket_cls_d_weights", "\n", "]", ",", "\n", "dim", "=", "-", "1", ")", "\n", "# ignore second nearest buckets for cls if necessary", "\n", "if", "cls_ignore_neighbor", ":", "\n", "        ", "bucket_cls_weights", "=", "(", "~", "(", "(", "bucket_cls_weights", "==", "1", ")", "&", "\n", "(", "bucket_labels", "==", "0", ")", ")", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "        ", "bucket_cls_weights", "[", ":", "]", "=", "1.0", "\n", "", "return", "offsets", ",", "offsets_weights", ",", "bucket_labels", ",", "bucket_cls_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.bucketing_bbox_coder.bucket2bbox": [[267, 351], ["mmcv.jit", "int", "cls_preds.view.view", "offset_preds.view.view", "torch.softmax", "F.softmax.topk", "transforms.bbox_rescale", "offset_preds.view.view", "torch.arange().to().long", "torch.arange().to().long", "torch.cat", "torch.cat", "loc_confidence.view().mean.view().mean", "numpy.ceil", "x1.clamp.clamp", "y1.clamp.clamp", "x2.clamp.clamp", "y2.clamp.clamp", "top2_neighbor_inds.float", "torch.arange().to", "torch.arange().to", "loc_confidence.view().mean.view", "score_inds_l.float", "score_inds_r.float", "score_inds_t.float", "score_inds_d.float", "torch.arange", "torch.arange", "proposals.size"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.bbox.transforms.bbox_rescale", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to"], ["", "@", "mmcv", ".", "jit", "(", "coderize", "=", "True", ")", "\n", "def", "bucket2bbox", "(", "proposals", ",", "\n", "cls_preds", ",", "\n", "offset_preds", ",", "\n", "num_buckets", ",", "\n", "scale_factor", "=", "1.0", ",", "\n", "max_shape", "=", "None", ",", "\n", "clip_border", "=", "True", ")", ":", "\n", "    ", "\"\"\"Apply bucketing estimation (cls preds) and fine regression (offset\n    preds) to generate det bboxes.\n\n    Args:\n        proposals (Tensor): Boxes to be transformed. Shape (n, 4)\n        cls_preds (Tensor): bucketing estimation. Shape (n, num_buckets*2).\n        offset_preds (Tensor): fine regression. Shape (n, num_buckets*2).\n        num_buckets (int): Number of buckets.\n        scale_factor (float): Scale factor to rescale proposals.\n        max_shape (tuple[int, int]): Maximum bounds for boxes. specifies (H, W)\n        clip_border (bool, optional): Whether clip the objects outside the\n            border of the image. Defaults to True.\n\n    Returns:\n        tuple[Tensor]: (bboxes, loc_confidence).\n\n            - bboxes: predicted bboxes. Shape (n, 4)\n            - loc_confidence: localization confidence of predicted bboxes.\n                Shape (n,).\n    \"\"\"", "\n", "\n", "side_num", "=", "int", "(", "np", ".", "ceil", "(", "num_buckets", "/", "2.0", ")", ")", "\n", "cls_preds", "=", "cls_preds", ".", "view", "(", "-", "1", ",", "side_num", ")", "\n", "offset_preds", "=", "offset_preds", ".", "view", "(", "-", "1", ",", "side_num", ")", "\n", "\n", "scores", "=", "F", ".", "softmax", "(", "cls_preds", ",", "dim", "=", "1", ")", "\n", "score_topk", ",", "score_label", "=", "scores", ".", "topk", "(", "2", ",", "dim", "=", "1", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "\n", "\n", "rescaled_proposals", "=", "bbox_rescale", "(", "proposals", ",", "scale_factor", ")", "\n", "\n", "pw", "=", "rescaled_proposals", "[", "...", ",", "2", "]", "-", "rescaled_proposals", "[", "...", ",", "0", "]", "\n", "ph", "=", "rescaled_proposals", "[", "...", ",", "3", "]", "-", "rescaled_proposals", "[", "...", ",", "1", "]", "\n", "px1", "=", "rescaled_proposals", "[", "...", ",", "0", "]", "\n", "py1", "=", "rescaled_proposals", "[", "...", ",", "1", "]", "\n", "px2", "=", "rescaled_proposals", "[", "...", ",", "2", "]", "\n", "py2", "=", "rescaled_proposals", "[", "...", ",", "3", "]", "\n", "\n", "bucket_w", "=", "pw", "/", "num_buckets", "\n", "bucket_h", "=", "ph", "/", "num_buckets", "\n", "\n", "score_inds_l", "=", "score_label", "[", "0", ":", ":", "4", ",", "0", "]", "\n", "score_inds_r", "=", "score_label", "[", "1", ":", ":", "4", ",", "0", "]", "\n", "score_inds_t", "=", "score_label", "[", "2", ":", ":", "4", ",", "0", "]", "\n", "score_inds_d", "=", "score_label", "[", "3", ":", ":", "4", ",", "0", "]", "\n", "l_buckets", "=", "px1", "+", "(", "0.5", "+", "score_inds_l", ".", "float", "(", ")", ")", "*", "bucket_w", "\n", "r_buckets", "=", "px2", "-", "(", "0.5", "+", "score_inds_r", ".", "float", "(", ")", ")", "*", "bucket_w", "\n", "t_buckets", "=", "py1", "+", "(", "0.5", "+", "score_inds_t", ".", "float", "(", ")", ")", "*", "bucket_h", "\n", "d_buckets", "=", "py2", "-", "(", "0.5", "+", "score_inds_d", ".", "float", "(", ")", ")", "*", "bucket_h", "\n", "\n", "offsets", "=", "offset_preds", ".", "view", "(", "-", "1", ",", "4", ",", "side_num", ")", "\n", "inds", "=", "torch", ".", "arange", "(", "proposals", ".", "size", "(", "0", ")", ")", ".", "to", "(", "proposals", ")", ".", "long", "(", ")", "\n", "l_offsets", "=", "offsets", "[", ":", ",", "0", ",", ":", "]", "[", "inds", ",", "score_inds_l", "]", "\n", "r_offsets", "=", "offsets", "[", ":", ",", "1", ",", ":", "]", "[", "inds", ",", "score_inds_r", "]", "\n", "t_offsets", "=", "offsets", "[", ":", ",", "2", ",", ":", "]", "[", "inds", ",", "score_inds_t", "]", "\n", "d_offsets", "=", "offsets", "[", ":", ",", "3", ",", ":", "]", "[", "inds", ",", "score_inds_d", "]", "\n", "\n", "x1", "=", "l_buckets", "-", "l_offsets", "*", "bucket_w", "\n", "x2", "=", "r_buckets", "-", "r_offsets", "*", "bucket_w", "\n", "y1", "=", "t_buckets", "-", "t_offsets", "*", "bucket_h", "\n", "y2", "=", "d_buckets", "-", "d_offsets", "*", "bucket_h", "\n", "\n", "if", "clip_border", "and", "max_shape", "is", "not", "None", ":", "\n", "        ", "x1", "=", "x1", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_shape", "[", "1", "]", "-", "1", ")", "\n", "y1", "=", "y1", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_shape", "[", "0", "]", "-", "1", ")", "\n", "x2", "=", "x2", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_shape", "[", "1", "]", "-", "1", ")", "\n", "y2", "=", "y2", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_shape", "[", "0", "]", "-", "1", ")", "\n", "", "bboxes", "=", "torch", ".", "cat", "(", "[", "x1", "[", ":", ",", "None", "]", ",", "y1", "[", ":", ",", "None", "]", ",", "x2", "[", ":", ",", "None", "]", ",", "y2", "[", ":", ",", "None", "]", "]", ",", "\n", "dim", "=", "-", "1", ")", "\n", "\n", "# bucketing guided rescoring", "\n", "loc_confidence", "=", "score_topk", "[", ":", ",", "0", "]", "\n", "top2_neighbor_inds", "=", "(", "score_label", "[", ":", ",", "0", "]", "-", "score_label", "[", ":", ",", "1", "]", ")", ".", "abs", "(", ")", "==", "1", "\n", "loc_confidence", "+=", "score_topk", "[", ":", ",", "1", "]", "*", "top2_neighbor_inds", ".", "float", "(", ")", "\n", "loc_confidence", "=", "loc_confidence", ".", "view", "(", "-", "1", ",", "4", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "return", "bboxes", ",", "loc_confidence", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.__init__": [[33, 39], ["base_bbox_coder.BaseBBoxCoder.__init__"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "\n", "target_means", "=", "(", "0.", ",", "0.", ",", "0.", ",", "0.", ")", ",", "\n", "target_stds", "=", "(", "1.", ",", "1.", ",", "1.", ",", "1.", ")", ")", ":", "\n", "        ", "super", "(", "BaseBBoxCoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "means", "=", "target_means", "\n", "self", ".", "stds", "=", "target_stds", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.encode": [[40, 57], ["legacy_delta_xywh_bbox_coder.legacy_bbox2delta", "bboxes.size", "gt_bboxes.size", "bboxes.size", "gt_bboxes.size"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.legacy_bbox2delta"], ["", "def", "encode", "(", "self", ",", "bboxes", ",", "gt_bboxes", ")", ":", "\n", "        ", "\"\"\"Get box regression transformation deltas that can be used to\n        transform the ``bboxes`` into the ``gt_bboxes``.\n\n        Args:\n            bboxes (torch.Tensor): source boxes, e.g., object proposals.\n            gt_bboxes (torch.Tensor): target of the transformation, e.g.,\n                ground-truth boxes.\n\n        Returns:\n            torch.Tensor: Box transformation deltas\n        \"\"\"", "\n", "assert", "bboxes", ".", "size", "(", "0", ")", "==", "gt_bboxes", ".", "size", "(", "0", ")", "\n", "assert", "bboxes", ".", "size", "(", "-", "1", ")", "==", "gt_bboxes", ".", "size", "(", "-", "1", ")", "==", "4", "\n", "encoded_bboxes", "=", "legacy_bbox2delta", "(", "bboxes", ",", "gt_bboxes", ",", "self", ".", "means", ",", "\n", "self", ".", "stds", ")", "\n", "return", "encoded_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode": [[58, 81], ["legacy_delta_xywh_bbox_coder.legacy_delta2bbox", "pred_bboxes.size", "bboxes.size"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.legacy_delta2bbox"], ["", "def", "decode", "(", "self", ",", "\n", "bboxes", ",", "\n", "pred_bboxes", ",", "\n", "max_shape", "=", "None", ",", "\n", "wh_ratio_clip", "=", "16", "/", "1000", ")", ":", "\n", "        ", "\"\"\"Apply transformation `pred_bboxes` to `boxes`.\n\n        Args:\n            boxes (torch.Tensor): Basic boxes.\n            pred_bboxes (torch.Tensor): Encoded boxes with shape\n            max_shape (tuple[int], optional): Maximum shape of boxes.\n                Defaults to None.\n            wh_ratio_clip (float, optional): The allowed ratio between\n                width and height.\n\n        Returns:\n            torch.Tensor: Decoded boxes.\n        \"\"\"", "\n", "assert", "pred_bboxes", ".", "size", "(", "0", ")", "==", "bboxes", ".", "size", "(", "0", ")", "\n", "decoded_bboxes", "=", "legacy_delta2bbox", "(", "bboxes", ",", "pred_bboxes", ",", "self", ".", "means", ",", "\n", "self", ".", "stds", ",", "max_shape", ",", "wh_ratio_clip", ")", "\n", "\n", "return", "decoded_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.legacy_bbox2delta": [[83, 130], ["mmcv.jit", "proposals.float.float", "gt.float.float", "torch.log", "torch.log", "torch.stack", "deltas.sub_().div_.new_tensor().unsqueeze", "deltas.sub_().div_.new_tensor().unsqueeze", "deltas.sub_().div_.sub_().div_", "proposals.float.size", "gt.float.size", "deltas.sub_().div_.new_tensor", "deltas.sub_().div_.new_tensor", "deltas.sub_().div_.sub_"], "function", ["None"], ["", "", "@", "mmcv", ".", "jit", "(", "coderize", "=", "True", ")", "\n", "def", "legacy_bbox2delta", "(", "proposals", ",", "\n", "gt", ",", "\n", "means", "=", "(", "0.", ",", "0.", ",", "0.", ",", "0.", ")", ",", "\n", "stds", "=", "(", "1.", ",", "1.", ",", "1.", ",", "1.", ")", ")", ":", "\n", "    ", "\"\"\"Compute deltas of proposals w.r.t. gt in the MMDet V1.x manner.\n\n    We usually compute the deltas of x, y, w, h of proposals w.r.t ground\n    truth bboxes to get regression target.\n    This is the inverse function of `delta2bbox()`\n\n    Args:\n        proposals (Tensor): Boxes to be transformed, shape (N, ..., 4)\n        gt (Tensor): Gt bboxes to be used as base, shape (N, ..., 4)\n        means (Sequence[float]): Denormalizing means for delta coordinates\n        stds (Sequence[float]): Denormalizing standard deviation for delta\n            coordinates\n\n    Returns:\n        Tensor: deltas with shape (N, 4), where columns represent dx, dy,\n            dw, dh.\n    \"\"\"", "\n", "assert", "proposals", ".", "size", "(", ")", "==", "gt", ".", "size", "(", ")", "\n", "\n", "proposals", "=", "proposals", ".", "float", "(", ")", "\n", "gt", "=", "gt", ".", "float", "(", ")", "\n", "px", "=", "(", "proposals", "[", "...", ",", "0", "]", "+", "proposals", "[", "...", ",", "2", "]", ")", "*", "0.5", "\n", "py", "=", "(", "proposals", "[", "...", ",", "1", "]", "+", "proposals", "[", "...", ",", "3", "]", ")", "*", "0.5", "\n", "pw", "=", "proposals", "[", "...", ",", "2", "]", "-", "proposals", "[", "...", ",", "0", "]", "+", "1.0", "\n", "ph", "=", "proposals", "[", "...", ",", "3", "]", "-", "proposals", "[", "...", ",", "1", "]", "+", "1.0", "\n", "\n", "gx", "=", "(", "gt", "[", "...", ",", "0", "]", "+", "gt", "[", "...", ",", "2", "]", ")", "*", "0.5", "\n", "gy", "=", "(", "gt", "[", "...", ",", "1", "]", "+", "gt", "[", "...", ",", "3", "]", ")", "*", "0.5", "\n", "gw", "=", "gt", "[", "...", ",", "2", "]", "-", "gt", "[", "...", ",", "0", "]", "+", "1.0", "\n", "gh", "=", "gt", "[", "...", ",", "3", "]", "-", "gt", "[", "...", ",", "1", "]", "+", "1.0", "\n", "\n", "dx", "=", "(", "gx", "-", "px", ")", "/", "pw", "\n", "dy", "=", "(", "gy", "-", "py", ")", "/", "ph", "\n", "dw", "=", "torch", ".", "log", "(", "gw", "/", "pw", ")", "\n", "dh", "=", "torch", ".", "log", "(", "gh", "/", "ph", ")", "\n", "deltas", "=", "torch", ".", "stack", "(", "[", "dx", ",", "dy", ",", "dw", ",", "dh", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "means", "=", "deltas", ".", "new_tensor", "(", "means", ")", ".", "unsqueeze", "(", "0", ")", "\n", "stds", "=", "deltas", ".", "new_tensor", "(", "stds", ")", ".", "unsqueeze", "(", "0", ")", "\n", "deltas", "=", "deltas", ".", "sub_", "(", "means", ")", ".", "div_", "(", "stds", ")", "\n", "\n", "return", "deltas", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.legacy_delta2bbox": [[132, 216], ["mmcv.jit", "deltas.new_tensor().repeat", "deltas.new_tensor().repeat", "numpy.abs", "dw.clamp.clamp", "dh.clamp.clamp", "torch.stack().view_as", "numpy.log", "dw.clamp.exp", "dh.clamp.exp", "x1.clamp.clamp", "y1.clamp.clamp", "x2.clamp.clamp", "y2.clamp.clamp", "deltas.new_tensor", "deltas.size", "deltas.new_tensor", "deltas.size", "torch.stack"], "function", ["None"], ["", "@", "mmcv", ".", "jit", "(", "coderize", "=", "True", ")", "\n", "def", "legacy_delta2bbox", "(", "rois", ",", "\n", "deltas", ",", "\n", "means", "=", "(", "0.", ",", "0.", ",", "0.", ",", "0.", ")", ",", "\n", "stds", "=", "(", "1.", ",", "1.", ",", "1.", ",", "1.", ")", ",", "\n", "max_shape", "=", "None", ",", "\n", "wh_ratio_clip", "=", "16", "/", "1000", ")", ":", "\n", "    ", "\"\"\"Apply deltas to shift/scale base boxes in the MMDet V1.x manner.\n\n    Typically the rois are anchor or proposed bounding boxes and the deltas are\n    network outputs used to shift/scale those boxes.\n    This is the inverse function of `bbox2delta()`\n\n    Args:\n        rois (Tensor): Boxes to be transformed. Has shape (N, 4)\n        deltas (Tensor): Encoded offsets with respect to each roi.\n            Has shape (N, 4 * num_classes). Note N = num_anchors * W * H when\n            rois is a grid of anchors. Offset encoding follows [1]_.\n        means (Sequence[float]): Denormalizing means for delta coordinates\n        stds (Sequence[float]): Denormalizing standard deviation for delta\n            coordinates\n        max_shape (tuple[int, int]): Maximum bounds for boxes. specifies (H, W)\n        wh_ratio_clip (float): Maximum aspect ratio for boxes.\n\n    Returns:\n        Tensor: Boxes with shape (N, 4), where columns represent\n            tl_x, tl_y, br_x, br_y.\n\n    References:\n        .. [1] https://arxiv.org/abs/1311.2524\n\n    Example:\n        >>> rois = torch.Tensor([[ 0.,  0.,  1.,  1.],\n        >>>                      [ 0.,  0.,  1.,  1.],\n        >>>                      [ 0.,  0.,  1.,  1.],\n        >>>                      [ 5.,  5.,  5.,  5.]])\n        >>> deltas = torch.Tensor([[  0.,   0.,   0.,   0.],\n        >>>                        [  1.,   1.,   1.,   1.],\n        >>>                        [  0.,   0.,   2.,  -1.],\n        >>>                        [ 0.7, -1.9, -0.5,  0.3]])\n        >>> legacy_delta2bbox(rois, deltas, max_shape=(32, 32))\n        tensor([[0.0000, 0.0000, 1.5000, 1.5000],\n                [0.0000, 0.0000, 5.2183, 5.2183],\n                [0.0000, 0.1321, 7.8891, 0.8679],\n                [5.3967, 2.4251, 6.0033, 3.7749]])\n    \"\"\"", "\n", "means", "=", "deltas", ".", "new_tensor", "(", "means", ")", ".", "repeat", "(", "1", ",", "deltas", ".", "size", "(", "1", ")", "//", "4", ")", "\n", "stds", "=", "deltas", ".", "new_tensor", "(", "stds", ")", ".", "repeat", "(", "1", ",", "deltas", ".", "size", "(", "1", ")", "//", "4", ")", "\n", "denorm_deltas", "=", "deltas", "*", "stds", "+", "means", "\n", "dx", "=", "denorm_deltas", "[", ":", ",", "0", ":", ":", "4", "]", "\n", "dy", "=", "denorm_deltas", "[", ":", ",", "1", ":", ":", "4", "]", "\n", "dw", "=", "denorm_deltas", "[", ":", ",", "2", ":", ":", "4", "]", "\n", "dh", "=", "denorm_deltas", "[", ":", ",", "3", ":", ":", "4", "]", "\n", "max_ratio", "=", "np", ".", "abs", "(", "np", ".", "log", "(", "wh_ratio_clip", ")", ")", "\n", "dw", "=", "dw", ".", "clamp", "(", "min", "=", "-", "max_ratio", ",", "max", "=", "max_ratio", ")", "\n", "dh", "=", "dh", ".", "clamp", "(", "min", "=", "-", "max_ratio", ",", "max", "=", "max_ratio", ")", "\n", "# Compute center of each roi", "\n", "px", "=", "(", "(", "rois", "[", ":", ",", "0", "]", "+", "rois", "[", ":", ",", "2", "]", ")", "*", "0.5", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "dx", ")", "\n", "py", "=", "(", "(", "rois", "[", ":", ",", "1", "]", "+", "rois", "[", ":", ",", "3", "]", ")", "*", "0.5", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "dy", ")", "\n", "# Compute width/height of each roi", "\n", "pw", "=", "(", "rois", "[", ":", ",", "2", "]", "-", "rois", "[", ":", ",", "0", "]", "+", "1.0", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "dw", ")", "\n", "ph", "=", "(", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", "+", "1.0", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "dh", ")", "\n", "# Use exp(network energy) to enlarge/shrink each roi", "\n", "gw", "=", "pw", "*", "dw", ".", "exp", "(", ")", "\n", "gh", "=", "ph", "*", "dh", ".", "exp", "(", ")", "\n", "# Use network energy to shift the center of each roi", "\n", "gx", "=", "px", "+", "pw", "*", "dx", "\n", "gy", "=", "py", "+", "ph", "*", "dy", "\n", "# Convert center-xy/width/height to top-left, bottom-right", "\n", "\n", "# The true legacy box coder should +- 0.5 here.", "\n", "# However, current implementation improves the performance when testing", "\n", "# the models trained in MMDetection 1.X (~0.5 bbox AP, 0.2 mask AP)", "\n", "x1", "=", "gx", "-", "gw", "*", "0.5", "\n", "y1", "=", "gy", "-", "gh", "*", "0.5", "\n", "x2", "=", "gx", "+", "gw", "*", "0.5", "\n", "y2", "=", "gy", "+", "gh", "*", "0.5", "\n", "if", "max_shape", "is", "not", "None", ":", "\n", "        ", "x1", "=", "x1", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_shape", "[", "1", "]", "-", "1", ")", "\n", "y1", "=", "y1", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_shape", "[", "0", "]", "-", "1", ")", "\n", "x2", "=", "x2", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_shape", "[", "1", "]", "-", "1", ")", "\n", "y2", "=", "y2", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_shape", "[", "0", "]", "-", "1", ")", "\n", "", "bboxes", "=", "torch", ".", "stack", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "dim", "=", "-", "1", ")", ".", "view_as", "(", "deltas", ")", "\n", "return", "bboxes", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.iou2d_calculator.BboxOverlaps2D.__call__": [[10, 36], ["iou2d_calculator.bbox_overlaps", "bboxes1.size", "bboxes2.size", "bboxes2.size", "bboxes1.size"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.iou2d_calculator.bbox_overlaps"], ["def", "__call__", "(", "self", ",", "bboxes1", ",", "bboxes2", ",", "mode", "=", "'iou'", ",", "is_aligned", "=", "False", ")", ":", "\n", "        ", "\"\"\"Calculate IoU between 2D bboxes.\n\n        Args:\n            bboxes1 (Tensor): bboxes have shape (m, 4) in <x1, y1, x2, y2>\n                format, or shape (m, 5) in <x1, y1, x2, y2, score> format.\n            bboxes2 (Tensor): bboxes have shape (m, 4) in <x1, y1, x2, y2>\n                format, shape (m, 5) in <x1, y1, x2, y2, score> format, or be\n                empty. If ``is_aligned `` is ``True``, then m and n must be\n                equal.\n            mode (str): \"iou\" (intersection over union), \"iof\" (intersection\n                over foreground), or \"giou\" (generalized intersection over\n                union).\n            is_aligned (bool, optional): If True, then m and n must be equal.\n                Default False.\n\n        Returns:\n            Tensor: shape (m, n) if ``is_aligned `` is False else shape (m,)\n        \"\"\"", "\n", "assert", "bboxes1", ".", "size", "(", "-", "1", ")", "in", "[", "0", ",", "4", ",", "5", "]", "\n", "assert", "bboxes2", ".", "size", "(", "-", "1", ")", "in", "[", "0", ",", "4", ",", "5", "]", "\n", "if", "bboxes2", ".", "size", "(", "-", "1", ")", "==", "5", ":", "\n", "            ", "bboxes2", "=", "bboxes2", "[", "...", ",", ":", "4", "]", "\n", "", "if", "bboxes1", ".", "size", "(", "-", "1", ")", "==", "5", ":", "\n", "            ", "bboxes1", "=", "bboxes1", "[", "...", ",", ":", "4", "]", "\n", "", "return", "bbox_overlaps", "(", "bboxes1", ",", "bboxes2", ",", "mode", ",", "is_aligned", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.iou2d_calculator.BboxOverlaps2D.__repr__": [[37, 41], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"str: a string describing the module\"\"\"", "\n", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "+", "'()'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.iou2d_calculator.bbox_overlaps": [[43, 160], ["bboxes1.size", "bboxes2.size", "torch.max.new_tensor", "torch.max", "torch.max", "torch.max", "torch.min", "torch.max", "torch.min", "bboxes1.size", "bboxes1.size", "bboxes2.size", "bboxes2.size", "bboxes1.new", "bboxes1.new", "torch.min", "torch.max", "torch.min", "torch.max"], "function", ["None"], ["", "", "def", "bbox_overlaps", "(", "bboxes1", ",", "bboxes2", ",", "mode", "=", "'iou'", ",", "is_aligned", "=", "False", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Calculate overlap between two set of bboxes.\n\n    If ``is_aligned `` is ``False``, then calculate the overlaps between each\n    bbox of bboxes1 and bboxes2, otherwise the overlaps between each aligned\n    pair of bboxes1 and bboxes2.\n\n    Args:\n        bboxes1 (Tensor): shape (B, m, 4) in <x1, y1, x2, y2> format or empty.\n        bboxes2 (Tensor): shape (B, n, 4) in <x1, y1, x2, y2> format or empty.\n            B indicates the batch dim, in shape (B1, B2, ..., Bn).\n            If ``is_aligned `` is ``True``, then m and n must be equal.\n        mode (str): \"iou\" (intersection over union), \"iof\" (intersection over\n            foreground) or \"giou\" (generalized intersection over union).\n            Default \"iou\".\n        is_aligned (bool, optional): If True, then m and n must be equal.\n            Default False.\n        eps (float, optional): A value added to the denominator for numerical\n            stability. Default 1e-6.\n\n    Returns:\n        Tensor: shape (m, n) if ``is_aligned `` is False else shape (m,)\n\n    Example:\n        >>> bboxes1 = torch.FloatTensor([\n        >>>     [0, 0, 10, 10],\n        >>>     [10, 10, 20, 20],\n        >>>     [32, 32, 38, 42],\n        >>> ])\n        >>> bboxes2 = torch.FloatTensor([\n        >>>     [0, 0, 10, 20],\n        >>>     [0, 10, 10, 19],\n        >>>     [10, 10, 20, 20],\n        >>> ])\n        >>> overlaps = bbox_overlaps(bboxes1, bboxes2)\n        >>> assert overlaps.shape == (3, 3)\n        >>> overlaps = bbox_overlaps(bboxes1, bboxes2, is_aligned=True)\n        >>> assert overlaps.shape == (3, )\n\n    Example:\n        >>> empty = torch.empty(0, 4)\n        >>> nonempty = torch.FloatTensor([[0, 0, 10, 9]])\n        >>> assert tuple(bbox_overlaps(empty, nonempty).shape) == (0, 1)\n        >>> assert tuple(bbox_overlaps(nonempty, empty).shape) == (1, 0)\n        >>> assert tuple(bbox_overlaps(empty, empty).shape) == (0, 0)\n    \"\"\"", "\n", "\n", "assert", "mode", "in", "[", "'iou'", ",", "'iof'", ",", "'giou'", "]", ",", "f'Unsupported mode {mode}'", "\n", "# Either the boxes are empty or the length of boxes' last dimension is 4", "\n", "assert", "(", "bboxes1", ".", "size", "(", "-", "1", ")", "==", "4", "or", "bboxes1", ".", "size", "(", "0", ")", "==", "0", ")", "\n", "assert", "(", "bboxes2", ".", "size", "(", "-", "1", ")", "==", "4", "or", "bboxes2", ".", "size", "(", "0", ")", "==", "0", ")", "\n", "\n", "# Batch dim must be the same", "\n", "# Batch dim: (B1, B2, ... Bn)", "\n", "assert", "bboxes1", ".", "shape", "[", ":", "-", "2", "]", "==", "bboxes2", ".", "shape", "[", ":", "-", "2", "]", "\n", "batch_shape", "=", "bboxes1", ".", "shape", "[", ":", "-", "2", "]", "\n", "\n", "rows", "=", "bboxes1", ".", "size", "(", "-", "2", ")", "\n", "cols", "=", "bboxes2", ".", "size", "(", "-", "2", ")", "\n", "if", "is_aligned", ":", "\n", "        ", "assert", "rows", "==", "cols", "\n", "\n", "", "if", "rows", "*", "cols", "==", "0", ":", "\n", "        ", "if", "is_aligned", ":", "\n", "            ", "return", "bboxes1", ".", "new", "(", "batch_shape", "+", "(", "rows", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "bboxes1", ".", "new", "(", "batch_shape", "+", "(", "rows", ",", "cols", ")", ")", "\n", "\n", "", "", "area1", "=", "(", "bboxes1", "[", "...", ",", "2", "]", "-", "bboxes1", "[", "...", ",", "0", "]", ")", "*", "(", "\n", "bboxes1", "[", "...", ",", "3", "]", "-", "bboxes1", "[", "...", ",", "1", "]", ")", "\n", "area2", "=", "(", "bboxes2", "[", "...", ",", "2", "]", "-", "bboxes2", "[", "...", ",", "0", "]", ")", "*", "(", "\n", "bboxes2", "[", "...", ",", "3", "]", "-", "bboxes2", "[", "...", ",", "1", "]", ")", "\n", "\n", "if", "is_aligned", ":", "\n", "        ", "lt", "=", "torch", ".", "max", "(", "bboxes1", "[", "...", ",", ":", "2", "]", ",", "bboxes2", "[", "...", ",", ":", "2", "]", ")", "# [B, rows, 2]", "\n", "rb", "=", "torch", ".", "min", "(", "bboxes1", "[", "...", ",", "2", ":", "]", ",", "bboxes2", "[", "...", ",", "2", ":", "]", ")", "# [B, rows, 2]", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [B, rows, 2]", "\n", "overlap", "=", "wh", "[", "...", ",", "0", "]", "*", "wh", "[", "...", ",", "1", "]", "\n", "\n", "if", "mode", "in", "[", "'iou'", ",", "'giou'", "]", ":", "\n", "            ", "union", "=", "area1", "+", "area2", "-", "overlap", "\n", "", "else", ":", "\n", "            ", "union", "=", "area1", "\n", "", "if", "mode", "==", "'giou'", ":", "\n", "            ", "enclosed_lt", "=", "torch", ".", "min", "(", "bboxes1", "[", "...", ",", ":", "2", "]", ",", "bboxes2", "[", "...", ",", ":", "2", "]", ")", "\n", "enclosed_rb", "=", "torch", ".", "max", "(", "bboxes1", "[", "...", ",", "2", ":", "]", ",", "bboxes2", "[", "...", ",", "2", ":", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "lt", "=", "torch", ".", "max", "(", "bboxes1", "[", "...", ",", ":", ",", "None", ",", ":", "2", "]", ",", "\n", "bboxes2", "[", "...", ",", "None", ",", ":", ",", ":", "2", "]", ")", "# [B, rows, cols, 2]", "\n", "rb", "=", "torch", ".", "min", "(", "bboxes1", "[", "...", ",", ":", ",", "None", ",", "2", ":", "]", ",", "\n", "bboxes2", "[", "...", ",", "None", ",", ":", ",", "2", ":", "]", ")", "# [B, rows, cols, 2]", "\n", "\n", "wh", "=", "(", "rb", "-", "lt", ")", ".", "clamp", "(", "min", "=", "0", ")", "# [B, rows, cols, 2]", "\n", "overlap", "=", "wh", "[", "...", ",", "0", "]", "*", "wh", "[", "...", ",", "1", "]", "\n", "\n", "if", "mode", "in", "[", "'iou'", ",", "'giou'", "]", ":", "\n", "            ", "union", "=", "area1", "[", "...", ",", "None", "]", "+", "area2", "[", "...", ",", "None", ",", ":", "]", "-", "overlap", "\n", "", "else", ":", "\n", "            ", "union", "=", "area1", "[", "...", ",", "None", "]", "\n", "", "if", "mode", "==", "'giou'", ":", "\n", "            ", "enclosed_lt", "=", "torch", ".", "min", "(", "bboxes1", "[", "...", ",", ":", ",", "None", ",", ":", "2", "]", ",", "\n", "bboxes2", "[", "...", ",", "None", ",", ":", ",", ":", "2", "]", ")", "\n", "enclosed_rb", "=", "torch", ".", "max", "(", "bboxes1", "[", "...", ",", ":", ",", "None", ",", "2", ":", "]", ",", "\n", "bboxes2", "[", "...", ",", "None", ",", ":", ",", "2", ":", "]", ")", "\n", "\n", "", "", "eps", "=", "union", ".", "new_tensor", "(", "[", "eps", "]", ")", "\n", "union", "=", "torch", ".", "max", "(", "union", ",", "eps", ")", "\n", "ious", "=", "overlap", "/", "union", "\n", "if", "mode", "in", "[", "'iou'", ",", "'iof'", "]", ":", "\n", "        ", "return", "ious", "\n", "# calculate gious", "\n", "", "enclose_wh", "=", "(", "enclosed_rb", "-", "enclosed_lt", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "enclose_area", "=", "enclose_wh", "[", "...", ",", "0", "]", "*", "enclose_wh", "[", "...", ",", "1", "]", "\n", "enclose_area", "=", "torch", ".", "max", "(", "enclose_area", ",", "eps", ")", "\n", "gious", "=", "ious", "-", "(", "enclose_area", "-", "union", ")", "/", "enclose_area", "\n", "return", "gious", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.iou_calculators.builder.build_iou_calculator": [[6, 9], ["mmcv.utils.build_from_cfg"], "function", ["None"], ["def", "build_anchor_generator", "(", "cfg", ",", "default_args", "=", "None", ")", ":", "\n", "    ", "return", "build_from_cfg", "(", "cfg", ",", "ANCHOR_GENERATORS", ",", "default_args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.__init__": [[55, 105], ["custom.CustomDataset.get_classes", "custom.CustomDataset.load_annotations", "pipelines.Compose", "custom.CustomDataset.load_proposals", "custom.CustomDataset._filter_imgs", "custom.CustomDataset._set_group_flag", "os.isabs", "os.join", "os.join", "os.join", "os.join", "os.isabs", "os.isabs", "os.isabs"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.get_classes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.lvis.LVISV1Dataset.load_annotations", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.load_proposals", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.xml_style.XMLDataset._filter_imgs", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset._set_group_flag"], ["def", "__init__", "(", "self", ",", "\n", "ann_file", ",", "\n", "pipeline", ",", "\n", "classes", "=", "None", ",", "\n", "data_root", "=", "None", ",", "\n", "img_prefix", "=", "''", ",", "\n", "seg_prefix", "=", "None", ",", "\n", "proposal_file", "=", "None", ",", "\n", "test_mode", "=", "False", ",", "\n", "filter_empty_gt", "=", "True", ")", ":", "\n", "        ", "self", ".", "ann_file", "=", "ann_file", "\n", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "img_prefix", "=", "img_prefix", "\n", "self", ".", "seg_prefix", "=", "seg_prefix", "\n", "self", ".", "proposal_file", "=", "proposal_file", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "self", ".", "filter_empty_gt", "=", "filter_empty_gt", "\n", "self", ".", "CLASSES", "=", "self", ".", "get_classes", "(", "classes", ")", "\n", "\n", "# join paths if data_root is specified", "\n", "if", "self", ".", "data_root", "is", "not", "None", ":", "\n", "            ", "if", "not", "osp", ".", "isabs", "(", "self", ".", "ann_file", ")", ":", "\n", "                ", "self", ".", "ann_file", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "ann_file", ")", "\n", "", "if", "not", "(", "self", ".", "img_prefix", "is", "None", "or", "osp", ".", "isabs", "(", "self", ".", "img_prefix", ")", ")", ":", "\n", "                ", "self", ".", "img_prefix", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "img_prefix", ")", "\n", "", "if", "not", "(", "self", ".", "seg_prefix", "is", "None", "or", "osp", ".", "isabs", "(", "self", ".", "seg_prefix", ")", ")", ":", "\n", "                ", "self", ".", "seg_prefix", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "self", ".", "seg_prefix", ")", "\n", "", "if", "not", "(", "self", ".", "proposal_file", "is", "None", "\n", "or", "osp", ".", "isabs", "(", "self", ".", "proposal_file", ")", ")", ":", "\n", "                ", "self", ".", "proposal_file", "=", "osp", ".", "join", "(", "self", ".", "data_root", ",", "\n", "self", ".", "proposal_file", ")", "\n", "# load annotations (and proposals)", "\n", "", "", "self", ".", "data_infos", "=", "self", ".", "load_annotations", "(", "self", ".", "ann_file", ")", "\n", "\n", "if", "self", ".", "proposal_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "proposals", "=", "self", ".", "load_proposals", "(", "self", ".", "proposal_file", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "proposals", "=", "None", "\n", "\n", "# filter images too small and containing no annotations", "\n", "", "if", "not", "test_mode", ":", "\n", "            ", "valid_inds", "=", "self", ".", "_filter_imgs", "(", ")", "\n", "self", ".", "data_infos", "=", "[", "self", ".", "data_infos", "[", "i", "]", "for", "i", "in", "valid_inds", "]", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "                ", "self", ".", "proposals", "=", "[", "self", ".", "proposals", "[", "i", "]", "for", "i", "in", "valid_inds", "]", "\n", "# set group flag for the sampler", "\n", "", "self", ".", "_set_group_flag", "(", ")", "\n", "\n", "# processing pipeline", "\n", "", "self", ".", "pipeline", "=", "Compose", "(", "pipeline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.__len__": [[106, 109], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Total number of samples of data.\"\"\"", "\n", "return", "len", "(", "self", ".", "data_infos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.load_annotations": [[110, 113], ["mmcv.load"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "\"\"\"Load annotation from annotation file.\"\"\"", "\n", "return", "mmcv", ".", "load", "(", "ann_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.load_proposals": [[114, 117], ["mmcv.load"], "methods", ["None"], ["", "def", "load_proposals", "(", "self", ",", "proposal_file", ")", ":", "\n", "        ", "\"\"\"Load proposal from proposal file.\"\"\"", "\n", "return", "mmcv", ".", "load", "(", "proposal_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.get_ann_info": [[118, 129], ["None"], "methods", ["None"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get annotation by index.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Annotation info of specified index.\n        \"\"\"", "\n", "\n", "return", "self", ".", "data_infos", "[", "idx", "]", "[", "'ann'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.get_cat_ids": [[130, 141], ["[].astype().tolist", "[].astype"], "methods", ["None"], ["", "def", "get_cat_ids", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get category ids by index.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            list[int]: All categories in the image of specified index.\n        \"\"\"", "\n", "\n", "return", "self", ".", "data_infos", "[", "idx", "]", "[", "'ann'", "]", "[", "'labels'", "]", ".", "astype", "(", "np", ".", "int", ")", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.pre_pipeline": [[142, 150], ["None"], "methods", ["None"], ["", "def", "pre_pipeline", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Prepare results dict for pipeline.\"\"\"", "\n", "results", "[", "'img_prefix'", "]", "=", "self", ".", "img_prefix", "\n", "results", "[", "'seg_prefix'", "]", "=", "self", ".", "seg_prefix", "\n", "results", "[", "'proposal_file'", "]", "=", "self", ".", "proposal_file", "\n", "results", "[", "'bbox_fields'", "]", "=", "[", "]", "\n", "results", "[", "'mask_fields'", "]", "=", "[", "]", "\n", "results", "[", "'seg_fields'", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset._filter_imgs": [[151, 161], ["enumerate", "warnings.warn", "min", "valid_inds.append"], "methods", ["None"], ["", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small.\"\"\"", "\n", "if", "self", ".", "filter_empty_gt", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'CustomDataset does not support filtering empty gt images.'", ")", "\n", "", "valid_inds", "=", "[", "]", "\n", "for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "data_infos", ")", ":", "\n", "            ", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", ">=", "min_size", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n", "", "", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset._set_group_flag": [[162, 173], ["numpy.zeros", "range", "len", "len"], "methods", ["None"], ["", "def", "_set_group_flag", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set flag according to image aspect ratio.\n\n        Images with aspect ratio greater than 1 will be set as group 1,\n        otherwise group 0.\n        \"\"\"", "\n", "self", ".", "flag", "=", "np", ".", "zeros", "(", "len", "(", "self", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "img_info", "=", "self", ".", "data_infos", "[", "i", "]", "\n", "if", "img_info", "[", "'width'", "]", "/", "img_info", "[", "'height'", "]", ">", "1", ":", "\n", "                ", "self", ".", "flag", "[", "i", "]", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset._rand_another": [[174, 178], ["numpy.random.choice", "numpy.where"], "methods", ["None"], ["", "", "", "def", "_rand_another", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get another random index from the same group as the given index.\"\"\"", "\n", "pool", "=", "np", ".", "where", "(", "self", ".", "flag", "==", "self", ".", "flag", "[", "idx", "]", ")", "[", "0", "]", "\n", "return", "np", ".", "random", ".", "choice", "(", "pool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.__getitem__": [[179, 198], ["custom.CustomDataset.prepare_test_img", "custom.CustomDataset.prepare_train_img", "custom.CustomDataset._rand_another"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.prepare_test_img", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.prepare_train_img", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset._rand_another"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get training/test data after pipeline.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Training/test data (with annotation if `test_mode` is set \\\n                True).\n        \"\"\"", "\n", "\n", "if", "self", ".", "test_mode", ":", "\n", "            ", "return", "self", ".", "prepare_test_img", "(", "idx", ")", "\n", "", "while", "True", ":", "\n", "            ", "data", "=", "self", ".", "prepare_train_img", "(", "idx", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "idx", "=", "self", ".", "_rand_another", "(", "idx", ")", "\n", "continue", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.prepare_train_img": [[199, 217], ["custom.CustomDataset.get_ann_info", "dict", "custom.CustomDataset.pre_pipeline", "custom.CustomDataset.pipeline"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.xml_style.XMLDataset.get_ann_info", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.pre_pipeline"], ["", "", "def", "prepare_train_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get training data and annotations after pipeline.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Training data and annotation after pipeline with new keys \\\n                introduced by pipeline.\n        \"\"\"", "\n", "\n", "img_info", "=", "self", ".", "data_infos", "[", "idx", "]", "\n", "ann_info", "=", "self", ".", "get_ann_info", "(", "idx", ")", "\n", "results", "=", "dict", "(", "img_info", "=", "img_info", ",", "ann_info", "=", "ann_info", ")", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "results", "[", "'proposals'", "]", "=", "self", ".", "proposals", "[", "idx", "]", "\n", "", "self", ".", "pre_pipeline", "(", "results", ")", "\n", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.prepare_test_img": [[218, 235], ["dict", "custom.CustomDataset.pre_pipeline", "custom.CustomDataset.pipeline"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.pre_pipeline"], ["", "def", "prepare_test_img", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get testing data  after pipeline.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Testing data after pipeline with new keys introduced by \\\n                pipeline.\n        \"\"\"", "\n", "\n", "img_info", "=", "self", ".", "data_infos", "[", "idx", "]", "\n", "results", "=", "dict", "(", "img_info", "=", "img_info", ")", "\n", "if", "self", ".", "proposals", "is", "not", "None", ":", "\n", "            ", "results", "[", "'proposals'", "]", "=", "self", ".", "proposals", "[", "idx", "]", "\n", "", "self", ".", "pre_pipeline", "(", "results", ")", "\n", "return", "self", ".", "pipeline", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.get_classes": [[236, 262], ["isinstance", "mmcv.list_from_file", "isinstance", "ValueError", "type"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_classes", "(", "cls", ",", "classes", "=", "None", ")", ":", "\n", "        ", "\"\"\"Get class names of current dataset.\n\n        Args:\n            classes (Sequence[str] | str | None): If classes is None, use\n                default CLASSES defined by builtin dataset. If classes is a\n                string, take it as a file name. The file contains the name of\n                classes where each line contains one class name. If classes is\n                a tuple or list, override the CLASSES defined by the dataset.\n\n        Returns:\n            tuple[str] or list[str]: Names of categories of the dataset.\n        \"\"\"", "\n", "if", "classes", "is", "None", ":", "\n", "            ", "return", "cls", ".", "CLASSES", "\n", "\n", "", "if", "isinstance", "(", "classes", ",", "str", ")", ":", "\n", "# take it as a file path", "\n", "            ", "class_names", "=", "mmcv", ".", "list_from_file", "(", "classes", ")", "\n", "", "elif", "isinstance", "(", "classes", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "class_names", "=", "classes", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f'Unsupported type {type(classes)} of classes.'", ")", "\n", "\n", "", "return", "class_names", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.format_results": [[263, 265], ["None"], "methods", ["None"], ["", "def", "format_results", "(", "self", ",", "results", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Place holder to format result to dataset specific output.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.evaluate": [[266, 324], ["collections.OrderedDict", "isinstance", "KeyError", "custom.CustomDataset.get_ann_info", "isinstance", "isinstance", "len", "range", "mmcv.utils.print_log", "mmdet.core.eval_map", "mean_aps.append", "round", "sum", "len", "mmdet.core.eval_recalls", "enumerate", "len", "enumerate", "mmdet.core.eval_recalls.mean", "enumerate", "int"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.xml_style.XMLDataset.get_ann_info", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.mean_ap.eval_map", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.recall.eval_recalls"], ["", "def", "evaluate", "(", "self", ",", "\n", "results", ",", "\n", "metric", "=", "'mAP'", ",", "\n", "logger", "=", "None", ",", "\n", "proposal_nums", "=", "(", "100", ",", "300", ",", "1000", ")", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "scale_ranges", "=", "None", ")", ":", "\n", "        ", "\"\"\"Evaluate the dataset.\n\n        Args:\n            results (list): Testing results of the dataset.\n            metric (str | list[str]): Metrics to be evaluated.\n            logger (logging.Logger | None | str): Logger used for printing\n                related information during evaluation. Default: None.\n            proposal_nums (Sequence[int]): Proposal number used for evaluating\n                recalls, such as recall@100, recall@1000.\n                Default: (100, 300, 1000).\n            iou_thr (float | list[float]): IoU threshold. Default: 0.5.\n            scale_ranges (list[tuple] | None): Scale ranges for evaluating mAP.\n                Default: None.\n        \"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "metric", ",", "str", ")", ":", "\n", "            ", "assert", "len", "(", "metric", ")", "==", "1", "\n", "metric", "=", "metric", "[", "0", "]", "\n", "", "allowed_metrics", "=", "[", "'mAP'", ",", "'recall'", "]", "\n", "if", "metric", "not", "in", "allowed_metrics", ":", "\n", "            ", "raise", "KeyError", "(", "f'metric {metric} is not supported'", ")", "\n", "", "annotations", "=", "[", "self", ".", "get_ann_info", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", "]", "\n", "eval_results", "=", "OrderedDict", "(", ")", "\n", "iou_thrs", "=", "[", "iou_thr", "]", "if", "isinstance", "(", "iou_thr", ",", "float", ")", "else", "iou_thr", "\n", "if", "metric", "==", "'mAP'", ":", "\n", "            ", "assert", "isinstance", "(", "iou_thrs", ",", "list", ")", "\n", "mean_aps", "=", "[", "]", "\n", "for", "iou_thr", "in", "iou_thrs", ":", "\n", "                ", "print_log", "(", "f'\\n{\"-\" * 15}iou_thr: {iou_thr}{\"-\" * 15}'", ")", "\n", "mean_ap", ",", "_", "=", "eval_map", "(", "\n", "results", ",", "\n", "annotations", ",", "\n", "scale_ranges", "=", "scale_ranges", ",", "\n", "iou_thr", "=", "iou_thr", ",", "\n", "dataset", "=", "self", ".", "CLASSES", ",", "\n", "logger", "=", "logger", ")", "\n", "mean_aps", ".", "append", "(", "mean_ap", ")", "\n", "eval_results", "[", "f'AP{int(iou_thr * 100):02d}'", "]", "=", "round", "(", "mean_ap", ",", "3", ")", "\n", "", "eval_results", "[", "'mAP'", "]", "=", "sum", "(", "mean_aps", ")", "/", "len", "(", "mean_aps", ")", "\n", "", "elif", "metric", "==", "'recall'", ":", "\n", "            ", "gt_bboxes", "=", "[", "ann", "[", "'bboxes'", "]", "for", "ann", "in", "annotations", "]", "\n", "recalls", "=", "eval_recalls", "(", "\n", "gt_bboxes", ",", "results", ",", "proposal_nums", ",", "iou_thr", ",", "logger", "=", "logger", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "                ", "for", "j", ",", "iou", "in", "enumerate", "(", "iou_thrs", ")", ":", "\n", "                    ", "eval_results", "[", "f'recall@{num}@{iou}'", "]", "=", "recalls", "[", "i", ",", "j", "]", "\n", "", "", "if", "recalls", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "                ", "ar", "=", "recalls", ".", "mean", "(", "axis", "=", "1", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "                    ", "eval_results", "[", "f'AR@{num}'", "]", "=", "ar", "[", "i", "]", "\n", "", "", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.load_annotations": [[29, 60], ["pycocotools.coco.COCO", "coco.CocoDataset.coco.get_cat_ids", "coco.CocoDataset.coco.get_img_ids", "AssertionError", "data_infos.append", "coco.CocoDataset.coco.get_ann_ids", "total_ann_ids.extend", "len", "len", "getattr", "enumerate", "coco.CocoDataset.coco.load_imgs", "set"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.get_cat_ids"], ["def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "\"\"\"Load annotation from COCO style annotation file.\n\n        Args:\n            ann_file (str): Path of annotation file.\n\n        Returns:\n            list[dict]: Annotation info from COCO api.\n        \"\"\"", "\n", "if", "not", "getattr", "(", "pycocotools", ",", "'__version__'", ",", "'0'", ")", ">=", "'12.0.2'", ":", "\n", "            ", "raise", "AssertionError", "(", "\n", "'Incompatible version of pycocotools is installed. '", "\n", "'Run pip uninstall pycocotools first. Then run pip '", "\n", "'install mmpycocotools to install open-mmlab forked '", "\n", "'pycocotools.'", ")", "\n", "\n", "", "self", ".", "coco", "=", "COCO", "(", "ann_file", ")", "\n", "self", ".", "cat_ids", "=", "self", ".", "coco", ".", "get_cat_ids", "(", "cat_names", "=", "self", ".", "CLASSES", ")", "\n", "self", ".", "cat2label", "=", "{", "cat_id", ":", "i", "for", "i", ",", "cat_id", "in", "enumerate", "(", "self", ".", "cat_ids", ")", "}", "\n", "self", ".", "img_ids", "=", "self", ".", "coco", ".", "get_img_ids", "(", ")", "\n", "data_infos", "=", "[", "]", "\n", "total_ann_ids", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "img_ids", ":", "\n", "            ", "info", "=", "self", ".", "coco", ".", "load_imgs", "(", "[", "i", "]", ")", "[", "0", "]", "\n", "info", "[", "'filename'", "]", "=", "info", "[", "'file_name'", "]", "\n", "data_infos", ".", "append", "(", "info", ")", "\n", "ann_ids", "=", "self", ".", "coco", ".", "get_ann_ids", "(", "img_ids", "=", "[", "i", "]", ")", "\n", "total_ann_ids", ".", "extend", "(", "ann_ids", ")", "\n", "", "assert", "len", "(", "set", "(", "total_ann_ids", ")", ")", "==", "len", "(", "\n", "total_ann_ids", ")", ",", "f\"Annotation ids in '{ann_file}' are not unique!\"", "\n", "return", "data_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.get_ann_info": [[61, 77], ["coco.CocoDataset.coco.get_ann_ids", "coco.CocoDataset.coco.load_anns", "coco.CocoDataset._parse_ann_info"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.cityscapes.CityscapesDataset._parse_ann_info"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get COCO annotation by index.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Annotation info of specified index.\n        \"\"\"", "\n", "# img_id = self.data_infos[idx]['id']", "\n", "img_id", "=", "self", ".", "data_infos", "[", "idx", "]", "[", "'file_name'", "]", "[", ":", "-", "4", "]", "\n", "# print(img_id)", "\n", "# img_id = self.data_infos[idx]['id']", "\n", "ann_ids", "=", "self", ".", "coco", ".", "get_ann_ids", "(", "img_ids", "=", "[", "img_id", "]", ")", "\n", "ann_info", "=", "self", ".", "coco", ".", "load_anns", "(", "ann_ids", ")", "\n", "return", "self", ".", "_parse_ann_info", "(", "self", ".", "data_infos", "[", "idx", "]", ",", "ann_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.get_cat_ids": [[78, 92], ["coco.CocoDataset.coco.get_ann_ids", "coco.CocoDataset.coco.load_anns"], "methods", ["None"], ["", "def", "get_cat_ids", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get COCO category ids by index.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            list[int]: All categories in the image of specified index.\n        \"\"\"", "\n", "img_id", "=", "self", ".", "data_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "# img_id = self.data_infos[idx]['file_name'][:-4]", "\n", "ann_ids", "=", "self", ".", "coco", ".", "get_ann_ids", "(", "img_ids", "=", "[", "img_id", "]", ")", "\n", "ann_info", "=", "self", ".", "coco", ".", "load_anns", "(", "ann_ids", ")", "\n", "return", "[", "ann", "[", "'category_id'", "]", "for", "ann", "in", "ann_info", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset._filter_imgs": [[93, 116], ["set", "set", "enumerate", "enumerate", "set", "min", "valid_inds.append", "valid_img_ids.append", "coco.CocoDataset.coco.anns.values"], "methods", ["None"], ["", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small or without ground truths.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n", "# obtain images that contain annotation", "\n", "ids_with_ann", "=", "set", "(", "_", "[", "'image_id'", "]", "for", "_", "in", "self", ".", "coco", ".", "anns", ".", "values", "(", ")", ")", "\n", "# obtain images that contain annotations of the required categories", "\n", "ids_in_cat", "=", "set", "(", ")", "\n", "for", "i", ",", "class_id", "in", "enumerate", "(", "self", ".", "cat_ids", ")", ":", "\n", "            ", "ids_in_cat", "|=", "set", "(", "self", ".", "coco", ".", "cat_img_map", "[", "class_id", "]", ")", "\n", "# merge the image id sets of the two conditions and use the merged set", "\n", "# to filter out images if self.filter_empty_gt=True", "\n", "", "ids_in_cat", "&=", "ids_with_ann", "\n", "\n", "valid_img_ids", "=", "[", "]", "\n", "for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "data_infos", ")", ":", "\n", "            ", "img_id", "=", "self", ".", "img_ids", "[", "i", "]", "\n", "if", "self", ".", "filter_empty_gt", "and", "img_id", "not", "in", "ids_in_cat", ":", "\n", "                ", "continue", "\n", "", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", ">=", "min_size", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n", "valid_img_ids", ".", "append", "(", "img_id", ")", "\n", "", "", "self", ".", "img_ids", "=", "valid_img_ids", "\n", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset._parse_ann_info": [[117, 175], ["enumerate", "img_info[].replace", "dict", "dict.get", "max", "max", "dict.get", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros.append", "numpy.zeros.append", "numpy.array.append", "gt_masks_ann.append", "min", "max", "min", "max", "dict.get"], "methods", ["None"], ["", "def", "_parse_ann_info", "(", "self", ",", "img_info", ",", "ann_info", ")", ":", "\n", "        ", "\"\"\"Parse bbox and mask annotation.\n\n        Args:\n            ann_info (list[dict]): Annotation info of an image.\n            with_mask (bool): Whether to parse mask annotations.\n\n        Returns:\n            dict: A dict containing the following keys: bboxes, bboxes_ignore,\\\n                labels, masks, seg_map. \"masks\" are raw annotations and not \\\n                decoded into binary masks.\n        \"\"\"", "\n", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_bboxes_ignore", "=", "[", "]", "\n", "gt_masks_ann", "=", "[", "]", "\n", "for", "i", ",", "ann", "in", "enumerate", "(", "ann_info", ")", ":", "\n", "            ", "if", "ann", ".", "get", "(", "'ignore'", ",", "False", ")", ":", "\n", "                ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "inter_w", "=", "max", "(", "0", ",", "min", "(", "x1", "+", "w", ",", "img_info", "[", "'width'", "]", ")", "-", "max", "(", "x1", ",", "0", ")", ")", "\n", "inter_h", "=", "max", "(", "0", ",", "min", "(", "y1", "+", "h", ",", "img_info", "[", "'height'", "]", ")", "-", "max", "(", "y1", ",", "0", ")", ")", "\n", "if", "inter_w", "*", "inter_h", "==", "0", ":", "\n", "                ", "continue", "\n", "", "if", "ann", "[", "'area'", "]", "<=", "0", "or", "w", "<", "1", "or", "h", "<", "1", ":", "\n", "                ", "continue", "\n", "", "if", "ann", "[", "'category_id'", "]", "not", "in", "self", ".", "cat_ids", ":", "\n", "                ", "continue", "\n", "", "bbox", "=", "[", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", "]", "\n", "if", "ann", ".", "get", "(", "'iscrowd'", ",", "False", ")", ":", "\n", "                ", "gt_bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "", "else", ":", "\n", "                ", "gt_bboxes", ".", "append", "(", "bbox", ")", "\n", "gt_labels", ".", "append", "(", "self", ".", "cat2label", "[", "ann", "[", "'category_id'", "]", "]", ")", "\n", "gt_masks_ann", ".", "append", "(", "ann", ".", "get", "(", "'segmentation'", ",", "None", ")", ")", "\n", "\n", "", "", "if", "gt_bboxes", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "array", "(", "gt_bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "gt_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "", "if", "gt_bboxes_ignore", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "array", "(", "gt_bboxes_ignore", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "            ", "gt_bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "seg_map", "=", "img_info", "[", "'filename'", "]", ".", "replace", "(", "'jpg'", ",", "'png'", ")", "\n", "\n", "ann", "=", "dict", "(", "\n", "bboxes", "=", "gt_bboxes", ",", "\n", "labels", "=", "gt_labels", ",", "\n", "bboxes_ignore", "=", "gt_bboxes_ignore", ",", "\n", "masks", "=", "gt_masks_ann", ",", "\n", "seg_map", "=", "seg_map", ")", "\n", "\n", "return", "ann", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.xyxy2xywh": [[176, 194], ["bbox.tolist"], "methods", ["None"], ["", "def", "xyxy2xywh", "(", "self", ",", "bbox", ")", ":", "\n", "        ", "\"\"\"Convert ``xyxy`` style bounding boxes to ``xywh`` style for COCO\n        evaluation.\n\n        Args:\n            bbox (numpy.ndarray): The bounding boxes, shape (4, ), in\n                ``xyxy`` order.\n\n        Returns:\n            list[float]: The converted bounding boxes, in ``xywh`` order.\n        \"\"\"", "\n", "\n", "_bbox", "=", "bbox", ".", "tolist", "(", ")", "\n", "return", "[", "\n", "_bbox", "[", "0", "]", ",", "\n", "_bbox", "[", "1", "]", ",", "\n", "_bbox", "[", "2", "]", "-", "_bbox", "[", "0", "]", ",", "\n", "_bbox", "[", "3", "]", "-", "_bbox", "[", "1", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset._proposal2json": [[196, 210], ["range", "len", "range", "dict", "coco.CocoDataset.xyxy2xywh", "float", "json_results.append"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.xyxy2xywh"], ["", "def", "_proposal2json", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Convert proposal results to COCO json style.\"\"\"", "\n", "json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "img_id", "=", "self", ".", "img_ids", "[", "idx", "]", "\n", "bboxes", "=", "results", "[", "idx", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "self", ".", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "1", "\n", "json_results", ".", "append", "(", "data", ")", "\n", "", "", "return", "json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset._det2json": [[211, 256], ["range", "len", "range", "coco.CocoDataset.coco.load_imgs", "len", "range", "dict", "int", "coco.CocoDataset.xyxy2xywh", "float", "csv_writer.writerow", "json_results.append", "str", "float", "round", "round", "round", "round"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.xyxy2xywh"], ["", "def", "_det2json", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Convert detection results to COCO json style.\"\"\"", "\n", "json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "img_id", "=", "self", ".", "img_ids", "[", "idx", "]", "\n", "info", "=", "self", ".", "coco", ".", "load_imgs", "(", "[", "img_id", "]", ")", "[", "0", "]", "\n", "info", "[", "'filename'", "]", "=", "info", "[", "'file_name'", "]", "\n", "# print(info['filename'],type(img_id))", "\n", "result", "=", "results", "[", "idx", "]", "\n", "for", "label", "in", "range", "(", "len", "(", "result", ")", ")", ":", "\n", "                ", "bboxes", "=", "result", "[", "label", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "int", "(", "img_id", ")", "\n", "data", "[", "'bbox'", "]", "=", "self", ".", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "self", ".", "cat_ids", "[", "label", "]", "\n", "label1", "=", "data", "[", "'category_id'", "]", "\n", "if", "label1", "==", "1", ":", "\n", "                        ", "name", "=", "'holothurian'", "\n", "", "elif", "label1", "==", "2", ":", "\n", "                        ", "name", "=", "'echinus'", "\n", "", "elif", "label1", "==", "3", ":", "\n", "                        ", "name", "=", "'scallop'", "\n", "", "else", ":", "\n", "                        ", "name", "=", "'starfish'", "\n", "", "bbox", "=", "bboxes", "[", "i", "]", "\n", "# print(label1)", "\n", "# print(name)", "\n", "out_file", "=", "info", "\n", "# print(out_file)", "\n", "# print(float(bboxes[i][4]))", "\n", "# print(bbox)", "\n", "\n", "\n", "csv_writer", ".", "writerow", "(", "\n", "[", "name", ",", "str", "(", "info", "[", "'filename'", "]", "[", ":", "-", "4", "]", ")", ",", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", ",", "round", "(", "bbox", "[", "0", "]", ")", ",", "round", "(", "bbox", "[", "1", "]", ")", ",", "round", "(", "bbox", "[", "2", "]", ")", ",", "\n", "round", "(", "bbox", "[", "3", "]", ")", "]", ")", "\n", "#", "\n", "#", "\n", "#", "\n", "\n", "\n", "json_results", ".", "append", "(", "data", ")", "\n", "", "", "", "return", "json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset._segm2json": [[257, 294], ["range", "len", "range", "len", "range", "isinstance", "range", "dict", "coco.CocoDataset.xyxy2xywh", "float", "bbox_json_results.append", "dict", "coco.CocoDataset.xyxy2xywh", "float", "isinstance", "segm_json_results.append", "[].decode"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.xyxy2xywh", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.xyxy2xywh", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode"], ["", "def", "_segm2json", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Convert instance segmentation results to COCO json style.\"\"\"", "\n", "bbox_json_results", "=", "[", "]", "\n", "segm_json_results", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "img_id", "=", "self", ".", "img_ids", "[", "idx", "]", "\n", "det", ",", "seg", "=", "results", "[", "idx", "]", "\n", "for", "label", "in", "range", "(", "len", "(", "det", ")", ")", ":", "\n", "# bbox results", "\n", "                ", "bboxes", "=", "det", "[", "label", "]", "\n", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "self", ".", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "bboxes", "[", "i", "]", "[", "4", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "self", ".", "cat_ids", "[", "label", "]", "\n", "bbox_json_results", ".", "append", "(", "data", ")", "\n", "\n", "# segm results", "\n", "# some detectors use different scores for bbox and mask", "\n", "", "if", "isinstance", "(", "seg", ",", "tuple", ")", ":", "\n", "                    ", "segms", "=", "seg", "[", "0", "]", "[", "label", "]", "\n", "mask_score", "=", "seg", "[", "1", "]", "[", "label", "]", "\n", "", "else", ":", "\n", "                    ", "segms", "=", "seg", "[", "label", "]", "\n", "mask_score", "=", "[", "bbox", "[", "4", "]", "for", "bbox", "in", "bboxes", "]", "\n", "", "for", "i", "in", "range", "(", "bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "data", "=", "dict", "(", ")", "\n", "data", "[", "'image_id'", "]", "=", "img_id", "\n", "data", "[", "'bbox'", "]", "=", "self", ".", "xyxy2xywh", "(", "bboxes", "[", "i", "]", ")", "\n", "data", "[", "'score'", "]", "=", "float", "(", "mask_score", "[", "i", "]", ")", "\n", "data", "[", "'category_id'", "]", "=", "self", ".", "cat_ids", "[", "label", "]", "\n", "if", "isinstance", "(", "segms", "[", "i", "]", "[", "'counts'", "]", ",", "bytes", ")", ":", "\n", "                       ", "segms", "[", "i", "]", "[", "'counts'", "]", "=", "segms", "[", "i", "]", "[", "'counts'", "]", ".", "decode", "(", ")", "\n", "", "data", "[", "'segmentation'", "]", "=", "segms", "[", "i", "]", "\n", "segm_json_results", ".", "append", "(", "data", ")", "\n", "", "", "", "return", "bbox_json_results", ",", "segm_json_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.results2json": [[295, 335], ["dict", "isinstance", "coco.CocoDataset._det2json", "mmcv.dump", "isinstance", "coco.CocoDataset._segm2json", "mmcv.dump", "mmcv.dump", "isinstance", "coco.CocoDataset._proposal2json", "mmcv.dump", "TypeError"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset._det2json", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset._segm2json", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset._proposal2json"], ["", "def", "results2json", "(", "self", ",", "results", ",", "outfile_prefix", ")", ":", "\n", "        ", "\"\"\"Dump the detection results to a COCO style json file.\n\n        There are 3 types of results: proposals, bbox predictions, mask\n        predictions, and they have different data types. This method will\n        automatically recognize the type, and dump them to json files.\n\n        Args:\n            results (list[list | tuple | ndarray]): Testing results of the\n                dataset.\n            outfile_prefix (str): The filename prefix of the json files. If the\n                prefix is \"somepath/xxx\", the json files will be named\n                \"somepath/xxx.bbox.json\", \"somepath/xxx.segm.json\",\n                \"somepath/xxx.proposal.json\".\n\n        Returns:\n            dict[str: str]: Possible keys are \"bbox\", \"segm\", \"proposal\", and \\\n                values are corresponding filenames.\n        \"\"\"", "\n", "result_files", "=", "dict", "(", ")", "\n", "if", "isinstance", "(", "results", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "json_results", "=", "self", ".", "_det2json", "(", "results", ")", "\n", "result_files", "[", "'bbox'", "]", "=", "f'{outfile_prefix}.bbox.json'", "\n", "\n", "result_files", "[", "'proposal'", "]", "=", "f'{outfile_prefix}.bbox.json'", "\n", "mmcv", ".", "dump", "(", "json_results", ",", "result_files", "[", "'bbox'", "]", ")", "\n", "", "elif", "isinstance", "(", "results", "[", "0", "]", ",", "tuple", ")", ":", "\n", "            ", "json_results", "=", "self", ".", "_segm2json", "(", "results", ")", "\n", "result_files", "[", "'bbox'", "]", "=", "f'{outfile_prefix}.bbox.json'", "\n", "result_files", "[", "'proposal'", "]", "=", "f'{outfile_prefix}.bbox.json'", "\n", "result_files", "[", "'segm'", "]", "=", "f'{outfile_prefix}.segm.json'", "\n", "mmcv", ".", "dump", "(", "json_results", "[", "0", "]", ",", "result_files", "[", "'bbox'", "]", ")", "\n", "mmcv", ".", "dump", "(", "json_results", "[", "1", "]", ",", "result_files", "[", "'segm'", "]", ")", "\n", "", "elif", "isinstance", "(", "results", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "json_results", "=", "self", ".", "_proposal2json", "(", "results", ")", "\n", "result_files", "[", "'proposal'", "]", "=", "f'{outfile_prefix}.proposal.json'", "\n", "mmcv", ".", "dump", "(", "json_results", ",", "result_files", "[", "'proposal'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'invalid type of results'", ")", "\n", "", "return", "result_files", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.fast_eval_recall": [[336, 359], ["range", "mmdet.core.eval_recalls", "mmdet.core.eval_recalls.mean", "len", "coco.CocoDataset.coco.get_ann_ids", "coco.CocoDataset.coco.load_anns", "numpy.array", "gt_bboxes.append", "len", "gt_bboxes.append", "numpy.zeros.append", "numpy.zeros", "numpy.zeros", "ann.get"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.recall.eval_recalls"], ["", "def", "fast_eval_recall", "(", "self", ",", "results", ",", "proposal_nums", ",", "iou_thrs", ",", "logger", "=", "None", ")", ":", "\n", "        ", "gt_bboxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "img_ids", ")", ")", ":", "\n", "            ", "ann_ids", "=", "self", ".", "coco", ".", "get_ann_ids", "(", "img_ids", "=", "self", ".", "img_ids", "[", "i", "]", ")", "\n", "ann_info", "=", "self", ".", "coco", ".", "load_anns", "(", "ann_ids", ")", "\n", "if", "len", "(", "ann_info", ")", "==", "0", ":", "\n", "                ", "gt_bboxes", ".", "append", "(", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", ")", "\n", "continue", "\n", "", "bboxes", "=", "[", "]", "\n", "for", "ann", "in", "ann_info", ":", "\n", "                ", "if", "ann", ".", "get", "(", "'ignore'", ",", "False", ")", "or", "ann", "[", "'iscrowd'", "]", ":", "\n", "                    ", "continue", "\n", "", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "bboxes", ".", "append", "(", "[", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", "]", ")", "\n", "", "bboxes", "=", "np", ".", "array", "(", "bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "bboxes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "", "gt_bboxes", ".", "append", "(", "bboxes", ")", "\n", "\n", "", "recalls", "=", "eval_recalls", "(", "\n", "gt_bboxes", ",", "results", ",", "proposal_nums", ",", "iou_thrs", ",", "logger", "=", "logger", ")", "\n", "ar", "=", "recalls", ".", "mean", "(", "axis", "=", "1", ")", "\n", "return", "ar", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.format_results": [[360, 386], ["isinstance", "coco.CocoDataset.results2json", "len", "len", "len", "len", "tempfile.TemporaryDirectory", "os.join"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.results2json"], ["", "def", "format_results", "(", "self", ",", "results", ",", "jsonfile_prefix", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Format the results to json (standard format for COCO evaluation).\n\n        Args:\n            results (list[tuple | numpy.ndarray]): Testing results of the\n                dataset.\n            jsonfile_prefix (str | None): The prefix of json files. It includes\n                the file path and the prefix of filename, e.g., \"a/b/prefix\".\n                If not specified, a temp file will be created. Default: None.\n\n        Returns:\n            tuple: (result_files, tmp_dir), result_files is a dict containing \\\n                the json filepaths, tmp_dir is the temporal directory created \\\n                for saving json files when jsonfile_prefix is not specified.\n        \"\"\"", "\n", "assert", "isinstance", "(", "results", ",", "list", ")", ",", "'results must be a list'", "\n", "assert", "len", "(", "results", ")", "==", "len", "(", "self", ")", ",", "(", "\n", "'The length of results is not equal to the dataset len: {} != {}'", ".", "\n", "format", "(", "len", "(", "results", ")", ",", "len", "(", "self", ")", ")", ")", "\n", "if", "jsonfile_prefix", "is", "None", ":", "\n", "            ", "tmp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "jsonfile_prefix", "=", "osp", ".", "join", "(", "tmp_dir", ".", "name", ",", "'results'", ")", "\n", "", "else", ":", "\n", "            ", "tmp_dir", "=", "None", "\n", "", "result_files", "=", "self", ".", "results2json", "(", "results", ",", "jsonfile_prefix", ")", "\n", "return", "result_files", ",", "tmp_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.evaluate": [[387, 569], ["coco.CocoDataset.format_results", "collections.OrderedDict", "isinstance", "numpy.linspace", "mmcv.utils.print_log", "pycocotools.cocoeval.COCOeval", "list", "tmp_dir.cleanup", "KeyError", "isinstance", "coco.CocoDataset.fast_eval_recall", "enumerate", "mmcv.utils.print_log", "KeyError", "cocoGt.loadRes", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize", "pycocotools.cocoeval.COCOeval.evaluate", "pycocotools.cocoeval.COCOeval.accumulate", "pycocotools.cocoeval.COCOeval.summarize", "int", "log_msg.append", "mmcv.utils.print_log", "float", "enumerate", "min", "list", "itertools.zip_longest", "terminaltables.AsciiTable", "mmcv.utils.print_log", "float", "numpy.round", "KeyError", "len", "results_per_category.append", "itertools.chain", "coco.CocoDataset.coco.loadCats", "numpy.mean", "float", "len", "range", "float"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.cityscapes.CityscapesDataset.format_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.fast_eval_recall", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate"], ["", "def", "evaluate", "(", "self", ",", "\n", "results", ",", "\n", "metric", "=", "'bbox'", ",", "\n", "logger", "=", "None", ",", "\n", "jsonfile_prefix", "=", "None", ",", "\n", "classwise", "=", "False", ",", "\n", "proposal_nums", "=", "(", "100", ",", "300", ",", "1000", ")", ",", "\n", "iou_thrs", "=", "None", ",", "\n", "metric_items", "=", "None", ")", ":", "\n", "        ", "\"\"\"Evaluation in COCO protocol.\n\n        Args:\n            results (list[list | tuple]): Testing results of the dataset.\n            metric (str | list[str]): Metrics to be evaluated. Options are\n                'bbox', 'segm', 'proposal', 'proposal_fast'.\n            logger (logging.Logger | str | None): Logger used for printing\n                related information during evaluation. Default: None.\n            jsonfile_prefix (str | None): The prefix of json files. It includes\n                the file path and the prefix of filename, e.g., \"a/b/prefix\".\n                If not specified, a temp file will be created. Default: None.\n            classwise (bool): Whether to evaluating the AP for each class.\n            proposal_nums (Sequence[int]): Proposal number used for evaluating\n                recalls, such as recall@100, recall@1000.\n                Default: (100, 300, 1000).\n            iou_thrs (Sequence[float], optional): IoU threshold used for\n                evaluating recalls/mAPs. If set to a list, the average of all\n                IoUs will also be computed. If not specified, [0.50, 0.55,\n                0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95] will be used.\n                Default: None.\n            metric_items (list[str] | str, optional): Metric items that will\n                be returned. If not specified, ``['AR@100', 'AR@300',\n                'AR@1000', 'AR_s@1000', 'AR_m@1000', 'AR_l@1000' ]`` will be\n                used when ``metric=='proposal'``, ``['mAP', 'mAP_50', 'mAP_75',\n                'mAP_s', 'mAP_m', 'mAP_l']`` will be used when\n                ``metric=='bbox' or metric=='segm'``.\n\n        Returns:\n            dict[str, float]: COCO style evaluation metric.\n        \"\"\"", "\n", "\n", "metrics", "=", "metric", "if", "isinstance", "(", "metric", ",", "list", ")", "else", "[", "metric", "]", "\n", "allowed_metrics", "=", "[", "'bbox'", ",", "'segm'", ",", "'proposal'", ",", "'proposal_fast'", "]", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "if", "metric", "not", "in", "allowed_metrics", ":", "\n", "                ", "raise", "KeyError", "(", "f'metric {metric} is not supported'", ")", "\n", "", "", "if", "iou_thrs", "is", "None", ":", "\n", "            ", "iou_thrs", "=", "np", ".", "linspace", "(", "\n", ".5", ",", "0.95", ",", "int", "(", "np", ".", "round", "(", "(", "0.95", "-", ".5", ")", "/", ".05", ")", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "", "if", "metric_items", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "metric_items", ",", "list", ")", ":", "\n", "                ", "metric_items", "=", "[", "metric_items", "]", "\n", "\n", "", "", "result_files", ",", "tmp_dir", "=", "self", ".", "format_results", "(", "results", ",", "jsonfile_prefix", ")", "\n", "\n", "eval_results", "=", "OrderedDict", "(", ")", "\n", "cocoGt", "=", "self", ".", "coco", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "msg", "=", "f'Evaluating {metric}...'", "\n", "if", "logger", "is", "None", ":", "\n", "                ", "msg", "=", "'\\n'", "+", "msg", "\n", "", "print_log", "(", "msg", ",", "logger", "=", "logger", ")", "\n", "\n", "if", "metric", "==", "'proposal_fast'", ":", "\n", "                ", "ar", "=", "self", ".", "fast_eval_recall", "(", "\n", "results", ",", "proposal_nums", ",", "iou_thrs", ",", "logger", "=", "'silent'", ")", "\n", "log_msg", "=", "[", "]", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "                    ", "eval_results", "[", "f'AR@{num}'", "]", "=", "ar", "[", "i", "]", "\n", "log_msg", ".", "append", "(", "f'\\nAR@{num}\\t{ar[i]:.4f}'", ")", "\n", "", "log_msg", "=", "''", ".", "join", "(", "log_msg", ")", "\n", "print_log", "(", "log_msg", ",", "logger", "=", "logger", ")", "\n", "continue", "\n", "\n", "", "if", "metric", "not", "in", "result_files", ":", "\n", "                ", "raise", "KeyError", "(", "f'{metric} is not in results'", ")", "\n", "", "try", ":", "\n", "                ", "cocoDt", "=", "cocoGt", ".", "loadRes", "(", "result_files", "[", "metric", "]", ")", "\n", "", "except", "IndexError", ":", "\n", "                ", "print_log", "(", "\n", "'The testing results of the whole dataset is empty.'", ",", "\n", "logger", "=", "logger", ",", "\n", "level", "=", "logging", ".", "ERROR", ")", "\n", "break", "\n", "\n", "", "iou_type", "=", "'bbox'", "if", "metric", "==", "'proposal'", "else", "metric", "\n", "cocoEval", "=", "COCOeval", "(", "cocoGt", ",", "cocoDt", ",", "iou_type", ")", "\n", "cocoEval", ".", "params", ".", "catIds", "=", "self", ".", "cat_ids", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "self", ".", "img_ids", "\n", "cocoEval", ".", "params", ".", "maxDets", "=", "list", "(", "proposal_nums", ")", "\n", "cocoEval", ".", "params", ".", "iouThrs", "=", "iou_thrs", "\n", "# mapping of cocoEval.stats", "\n", "coco_metric_names", "=", "{", "\n", "'mAP'", ":", "0", ",", "\n", "'mAP_50'", ":", "1", ",", "\n", "'mAP_75'", ":", "2", ",", "\n", "'mAP_s'", ":", "3", ",", "\n", "'mAP_m'", ":", "4", ",", "\n", "'mAP_l'", ":", "5", ",", "\n", "'AR@100'", ":", "6", ",", "\n", "'AR@300'", ":", "7", ",", "\n", "'AR@1000'", ":", "8", ",", "\n", "'AR_s@1000'", ":", "9", ",", "\n", "'AR_m@1000'", ":", "10", ",", "\n", "'AR_l@1000'", ":", "11", "\n", "}", "\n", "if", "metric_items", "is", "not", "None", ":", "\n", "                ", "for", "metric_item", "in", "metric_items", ":", "\n", "                    ", "if", "metric_item", "not", "in", "coco_metric_names", ":", "\n", "                        ", "raise", "KeyError", "(", "\n", "f'metric item {metric_item} is not supported'", ")", "\n", "\n", "", "", "", "if", "metric", "==", "'proposal'", ":", "\n", "                ", "cocoEval", ".", "params", ".", "useCats", "=", "0", "\n", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "if", "metric_items", "is", "None", ":", "\n", "                    ", "metric_items", "=", "[", "\n", "'AR@100'", ",", "'AR@300'", ",", "'AR@1000'", ",", "'AR_s@1000'", ",", "\n", "'AR_m@1000'", ",", "'AR_l@1000'", "\n", "]", "\n", "\n", "", "for", "item", "in", "metric_items", ":", "\n", "                    ", "val", "=", "float", "(", "\n", "f'{cocoEval.stats[coco_metric_names[item]]:.3f}'", ")", "\n", "eval_results", "[", "item", "]", "=", "val", "\n", "", "", "else", ":", "\n", "                ", "cocoEval", ".", "evaluate", "(", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "cocoEval", ".", "summarize", "(", ")", "\n", "if", "classwise", ":", "# Compute per-category AP", "\n", "# Compute per-category AP", "\n", "# from https://github.com/facebookresearch/detectron2/", "\n", "                    ", "precisions", "=", "cocoEval", ".", "eval", "[", "'precision'", "]", "\n", "# precision: (iou, recall, cls, area range, max dets)", "\n", "assert", "len", "(", "self", ".", "cat_ids", ")", "==", "precisions", ".", "shape", "[", "2", "]", "\n", "\n", "results_per_category", "=", "[", "]", "\n", "for", "idx", ",", "catId", "in", "enumerate", "(", "self", ".", "cat_ids", ")", ":", "\n", "# area range index 0: all area ranges", "\n", "# max dets index -1: typically 100 per image", "\n", "                        ", "nm", "=", "self", ".", "coco", ".", "loadCats", "(", "catId", ")", "[", "0", "]", "\n", "precision", "=", "precisions", "[", ":", ",", ":", ",", "idx", ",", "0", ",", "-", "1", "]", "\n", "precision", "=", "precision", "[", "precision", ">", "-", "1", "]", "\n", "if", "precision", ".", "size", ":", "\n", "                            ", "ap", "=", "np", ".", "mean", "(", "precision", ")", "\n", "", "else", ":", "\n", "                            ", "ap", "=", "float", "(", "'nan'", ")", "\n", "", "results_per_category", ".", "append", "(", "\n", "(", "f'{nm[\"name\"]}'", ",", "f'{float(ap):0.3f}'", ")", ")", "\n", "\n", "", "num_columns", "=", "min", "(", "6", ",", "len", "(", "results_per_category", ")", "*", "2", ")", "\n", "results_flatten", "=", "list", "(", "\n", "itertools", ".", "chain", "(", "*", "results_per_category", ")", ")", "\n", "headers", "=", "[", "'category'", ",", "'AP'", "]", "*", "(", "num_columns", "//", "2", ")", "\n", "results_2d", "=", "itertools", ".", "zip_longest", "(", "*", "[", "\n", "results_flatten", "[", "i", ":", ":", "num_columns", "]", "\n", "for", "i", "in", "range", "(", "num_columns", ")", "\n", "]", ")", "\n", "table_data", "=", "[", "headers", "]", "\n", "table_data", "+=", "[", "result", "for", "result", "in", "results_2d", "]", "\n", "table", "=", "AsciiTable", "(", "table_data", ")", "\n", "print_log", "(", "'\\n'", "+", "table", ".", "table", ",", "logger", "=", "logger", ")", "\n", "\n", "", "if", "metric_items", "is", "None", ":", "\n", "                    ", "metric_items", "=", "[", "\n", "'mAP'", ",", "'mAP_50'", ",", "'mAP_75'", ",", "'mAP_s'", ",", "'mAP_m'", ",", "'mAP_l'", "\n", "]", "\n", "\n", "", "for", "metric_item", "in", "metric_items", ":", "\n", "                    ", "key", "=", "f'{metric}_{metric_item}'", "\n", "val", "=", "float", "(", "\n", "f'{cocoEval.stats[coco_metric_names[metric_item]]:.3f}'", "\n", ")", "\n", "eval_results", "[", "key", "]", "=", "val", "\n", "", "ap", "=", "cocoEval", ".", "stats", "[", ":", "6", "]", "\n", "eval_results", "[", "f'{metric}_mAP_copypaste'", "]", "=", "(", "\n", "f'{ap[0]:.3f} {ap[1]:.3f} {ap[2]:.3f} {ap[3]:.3f} '", "\n", "f'{ap[4]:.3f} {ap[5]:.3f}'", ")", "\n", "", "", "if", "tmp_dir", "is", "not", "None", ":", "\n", "            ", "tmp_dir", ".", "cleanup", "(", ")", "\n", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.cityscapes.CityscapesDataset._filter_imgs": [[25, 52], ["set", "set", "enumerate", "enumerate", "set", "cityscapes.CityscapesDataset.coco.getAnnIds", "cityscapes.CityscapesDataset.coco.loadAnns", "all", "min", "valid_inds.append", "valid_img_ids.append", "cityscapes.CityscapesDataset.coco.anns.values"], "methods", ["None"], ["return", "files", "\n", "\n", "\n", "", "def", "collect_annotations", "(", "files", ",", "nproc", "=", "1", ")", ":", "\n", "    ", "print", "(", "'Loading annotation images'", ")", "\n", "if", "nproc", ">", "1", ":", "\n", "        ", "images", "=", "mmcv", ".", "track_parallel_progress", "(", "\n", "load_img_info", ",", "files", ",", "nproc", "=", "nproc", ")", "\n", "", "else", ":", "\n", "        ", "images", "=", "mmcv", ".", "track_progress", "(", "load_img_info", ",", "files", ")", "\n", "\n", "", "return", "images", "\n", "\n", "\n", "", "def", "load_img_info", "(", "files", ")", ":", "\n", "    ", "img_file", ",", "inst_file", ",", "segm_file", "=", "files", "\n", "inst_img", "=", "mmcv", ".", "imread", "(", "inst_file", ",", "'unchanged'", ")", "\n", "# ids < 24 are stuff labels (filtering them first is about 5% faster)", "\n", "unique_inst_ids", "=", "np", ".", "unique", "(", "inst_img", "[", "inst_img", ">=", "24", "]", ")", "\n", "anno_info", "=", "[", "]", "\n", "for", "inst_id", "in", "unique_inst_ids", ":", "\n", "# For non-crowd annotations, inst_id // 1000 is the label_id", "\n", "# Crowd annotations have <1000 instance ids", "\n", "        ", "label_id", "=", "inst_id", "//", "1000", "if", "inst_id", ">=", "1000", "else", "inst_id", "\n", "label", "=", "CSLabels", ".", "id2label", "[", "label_id", "]", "\n", "if", "not", "label", ".", "hasInstances", "or", "label", ".", "ignoreInEval", ":", "\n", "            ", "continue", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.cityscapes.CityscapesDataset._parse_ann_info": [[53, 106], ["enumerate", "dict", "dict.get", "dict.get", "numpy.array", "numpy.array", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros.append", "numpy.zeros.append", "numpy.array.append", "gt_masks_ann.append"], "methods", ["None"], ["", "category_id", "=", "label", ".", "id", "\n", "iscrowd", "=", "int", "(", "inst_id", "<", "1000", ")", "\n", "mask", "=", "np", ".", "asarray", "(", "inst_img", "==", "inst_id", ",", "dtype", "=", "np", ".", "uint8", ",", "order", "=", "'F'", ")", "\n", "mask_rle", "=", "maskUtils", ".", "encode", "(", "mask", "[", ":", ",", ":", ",", "None", "]", ")", "[", "0", "]", "\n", "\n", "area", "=", "maskUtils", ".", "area", "(", "mask_rle", ")", "\n", "# convert to COCO style XYWH format", "\n", "bbox", "=", "maskUtils", ".", "toBbox", "(", "mask_rle", ")", "\n", "\n", "# for json encoding", "\n", "mask_rle", "[", "'counts'", "]", "=", "mask_rle", "[", "'counts'", "]", ".", "decode", "(", ")", "\n", "\n", "anno", "=", "dict", "(", "\n", "iscrowd", "=", "iscrowd", ",", "\n", "category_id", "=", "category_id", ",", "\n", "bbox", "=", "bbox", ".", "tolist", "(", ")", ",", "\n", "area", "=", "area", ".", "tolist", "(", ")", ",", "\n", "segmentation", "=", "mask_rle", ")", "\n", "anno_info", ".", "append", "(", "anno", ")", "\n", "", "video_name", "=", "osp", ".", "basename", "(", "osp", ".", "dirname", "(", "img_file", ")", ")", "\n", "img_info", "=", "dict", "(", "\n", "# remove img_prefix for filename", "\n", "file_name", "=", "osp", ".", "join", "(", "video_name", ",", "osp", ".", "basename", "(", "img_file", ")", ")", ",", "\n", "height", "=", "inst_img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "inst_img", ".", "shape", "[", "1", "]", ",", "\n", "anno_info", "=", "anno_info", ",", "\n", "segm_file", "=", "osp", ".", "join", "(", "video_name", ",", "osp", ".", "basename", "(", "segm_file", ")", ")", ")", "\n", "\n", "return", "img_info", "\n", "\n", "\n", "", "def", "cvt_annotations", "(", "image_infos", ",", "out_json_name", ")", ":", "\n", "    ", "out_json", "=", "dict", "(", ")", "\n", "img_id", "=", "0", "\n", "ann_id", "=", "0", "\n", "out_json", "[", "'images'", "]", "=", "[", "]", "\n", "out_json", "[", "'categories'", "]", "=", "[", "]", "\n", "out_json", "[", "'annotations'", "]", "=", "[", "]", "\n", "for", "image_info", "in", "image_infos", ":", "\n", "        ", "image_info", "[", "'id'", "]", "=", "img_id", "\n", "anno_infos", "=", "image_info", ".", "pop", "(", "'anno_info'", ")", "\n", "out_json", "[", "'images'", "]", ".", "append", "(", "image_info", ")", "\n", "for", "anno_info", "in", "anno_infos", ":", "\n", "            ", "anno_info", "[", "'image_id'", "]", "=", "img_id", "\n", "anno_info", "[", "'id'", "]", "=", "ann_id", "\n", "out_json", "[", "'annotations'", "]", ".", "append", "(", "anno_info", ")", "\n", "ann_id", "+=", "1", "\n", "", "img_id", "+=", "1", "\n", "", "for", "label", "in", "CSLabels", ".", "labels", ":", "\n", "        ", "if", "label", ".", "hasInstances", "and", "not", "label", ".", "ignoreInEval", ":", "\n", "            ", "cat", "=", "dict", "(", "id", "=", "label", ".", "id", ",", "name", "=", "label", ".", "name", ")", "\n", "out_json", "[", "'categories'", "]", ".", "append", "(", "cat", ")", "\n", "\n", "", "", "if", "len", "(", "out_json", "[", "'annotations'", "]", ")", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.cityscapes.CityscapesDataset.results2txt": [[107, 172], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "mmcv.ProgressBar", "range", "len", "len", "os.join", "os.join", "numpy.vstack", "isinstance", "numpy.concatenate", "len", "mmcv.ProgressBar.update", "result_files.append", "ImportError", "os.splitext", "os.splitext", "mmcv.concat_list", "mmcv.concat_list", "numpy.full", "len", "len", "len", "open", "range", "os.basename", "os.basename", "enumerate", "pycocotools.decode().astype", "os.join", "os.join", "mmcv.imwrite", "fout.write", "pycocotools.decode", "os.basename", "os.basename"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode"], ["        ", "out_json", ".", "pop", "(", "'annotations'", ")", "\n", "\n", "", "mmcv", ".", "dump", "(", "out_json", ",", "out_json_name", ")", "\n", "return", "out_json", "\n", "\n", "\n", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Convert Cityscapes annotations to COCO format'", ")", "\n", "parser", ".", "add_argument", "(", "'cityscapes_path'", ",", "help", "=", "'cityscapes data path'", ")", "\n", "parser", ".", "add_argument", "(", "'--img-dir'", ",", "default", "=", "'leftImg8bit'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--gt-dir'", ",", "default", "=", "'gtFine'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--out-dir'", ",", "help", "=", "'output path'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--nproc'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'number of process'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "cityscapes_path", "=", "args", ".", "cityscapes_path", "\n", "out_dir", "=", "args", ".", "out_dir", "if", "args", ".", "out_dir", "else", "cityscapes_path", "\n", "mmcv", ".", "mkdir_or_exist", "(", "out_dir", ")", "\n", "\n", "img_dir", "=", "osp", ".", "join", "(", "cityscapes_path", ",", "args", ".", "img_dir", ")", "\n", "gt_dir", "=", "osp", ".", "join", "(", "cityscapes_path", ",", "args", ".", "gt_dir", ")", "\n", "\n", "set_name", "=", "dict", "(", "\n", "train", "=", "'instancesonly_filtered_gtFine_train.json'", ",", "\n", "val", "=", "'instancesonly_filtered_gtFine_val.json'", ",", "\n", "test", "=", "'instancesonly_filtered_gtFine_test.json'", ")", "\n", "\n", "for", "split", ",", "json_name", "in", "set_name", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "f'Converting {split} into {json_name}'", ")", "\n", "with", "mmcv", ".", "Timer", "(", "\n", "print_tmpl", "=", "'It took {}s to convert Cityscapes annotation'", ")", ":", "\n", "            ", "files", "=", "collect_files", "(", "\n", "osp", ".", "join", "(", "img_dir", ",", "split", ")", ",", "osp", ".", "join", "(", "gt_dir", ",", "split", ")", ")", "\n", "image_infos", "=", "collect_annotations", "(", "files", ",", "nproc", "=", "args", ".", "nproc", ")", "\n", "cvt_annotations", "(", "image_infos", ",", "osp", ".", "join", "(", "out_dir", ",", "json_name", ")", ")", "\n", "\n", "\n", "", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.cityscapes.CityscapesDataset.format_results": [[173, 206], ["isinstance", "isinstance", "cityscapes.CityscapesDataset.results2txt", "len", "len", "len", "len", "len", "len", "len", "len", "tempfile.TemporaryDirectory", "os.join", "os.join"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.cityscapes.CityscapesDataset.results2txt"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.cityscapes.CityscapesDataset.evaluate": [[207, 273], ["numpy.arange", "dict", "isinstance", "metric.copy", "dict.update", "metrics.remove", "len", "coco.CocoDataset", "coco.CocoDataset.load_annotations", "dict.update", "cityscapes.CityscapesDataset._evaluate_cityscapes", "coco.CocoDataset.evaluate"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.lvis.LVISV1Dataset.load_annotations", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.cityscapes.CityscapesDataset._evaluate_cityscapes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.cityscapes.CityscapesDataset._evaluate_cityscapes": [[274, 335], ["mmcv.utils.print_log", "cityscapes.CityscapesDataset.format_results", "collections.OrderedDict", "mmcv.utils.print_log", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.abspath", "os.path.abspath", "os.path.abspath", "os.path.abspath", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "glob.glob", "len", "os.join", "os.join", "os.join", "os.join", "cityscapes.CityscapesDataset.img_prefix.replace", "predictionImgList.append", "CSEval.evaluateImgLists", "tmp_dir.cleanup", "ImportError", "CSEval.getPrediction"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.cityscapes.CityscapesDataset.format_results"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.wider_face.WIDERFaceDataset.__init__": [[19, 21], ["xml_style.XMLDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "WIDERFaceDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.wider_face.WIDERFaceDataset.load_annotations": [[22, 52], ["mmcv.list_from_file", "os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.find", "int", "int", "data_infos.append", "ET.parse.getroot.find", "dict", "tree.getroot.find.find", "tree.getroot.find.find", "os.join"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "\"\"\"Load annotation from WIDERFace XML style annotation file.\n\n        Args:\n            ann_file (str): Path of XML file.\n\n        Returns:\n            list[dict]: Annotation info from XML file.\n        \"\"\"", "\n", "\n", "data_infos", "=", "[", "]", "\n", "img_ids", "=", "mmcv", ".", "list_from_file", "(", "ann_file", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "filename", "=", "f'{img_id}.jpg'", "\n", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'Annotations'", ",", "\n", "f'{img_id}.xml'", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "size", "=", "root", ".", "find", "(", "'size'", ")", "\n", "width", "=", "int", "(", "size", ".", "find", "(", "'width'", ")", ".", "text", ")", "\n", "height", "=", "int", "(", "size", ".", "find", "(", "'height'", ")", ".", "text", ")", "\n", "folder", "=", "root", ".", "find", "(", "'folder'", ")", ".", "text", "\n", "data_infos", ".", "append", "(", "\n", "dict", "(", "\n", "id", "=", "img_id", ",", "\n", "filename", "=", "osp", ".", "join", "(", "folder", ",", "filename", ")", ",", "\n", "width", "=", "width", ",", "\n", "height", "=", "height", ")", ")", "\n", "\n", "", "return", "data_infos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.xml_style.XMLDataset.__init__": [[22, 28], ["custom.CustomDataset.__init__", "kwargs.get", "enumerate"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "min_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "self", ".", "CLASSES", "or", "kwargs", ".", "get", "(", "\n", "'classes'", ",", "None", ")", ",", "'CLASSES in `XMLDataset` can not be None.'", "\n", "super", "(", "XMLDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "cat2label", "=", "{", "cat", ":", "i", "for", "i", ",", "cat", "in", "enumerate", "(", "self", ".", "CLASSES", ")", "}", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.xml_style.XMLDataset.load_annotations": [[29, 60], ["mmcv.list_from_file", "os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.find", "data_infos.append", "int", "int", "os.join", "PIL.Image.open", "dict", "tree.getroot.find.find", "tree.getroot.find.find"], "methods", ["None"], ["", "def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "\"\"\"Load annotation from XML style ann_file.\n\n        Args:\n            ann_file (str): Path of XML file.\n\n        Returns:\n            list[dict]: Annotation info from XML file.\n        \"\"\"", "\n", "\n", "data_infos", "=", "[", "]", "\n", "img_ids", "=", "mmcv", ".", "list_from_file", "(", "ann_file", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "            ", "filename", "=", "f'JPEGImages/{img_id}.jpg'", "\n", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'Annotations'", ",", "\n", "f'{img_id}.xml'", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "size", "=", "root", ".", "find", "(", "'size'", ")", "\n", "if", "size", "is", "not", "None", ":", "\n", "                ", "width", "=", "int", "(", "size", ".", "find", "(", "'width'", ")", ".", "text", ")", "\n", "height", "=", "int", "(", "size", ".", "find", "(", "'height'", ")", ".", "text", ")", "\n", "", "else", ":", "\n", "                ", "img_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'JPEGImages'", ",", "\n", "'{}.jpg'", ".", "format", "(", "img_id", ")", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "width", ",", "height", "=", "img", ".", "size", "\n", "", "data_infos", ".", "append", "(", "\n", "dict", "(", "id", "=", "img_id", ",", "filename", "=", "filename", ",", "width", "=", "width", ",", "height", "=", "height", ")", ")", "\n", "\n", "", "return", "data_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.xml_style.XMLDataset._filter_imgs": [[61, 81], ["enumerate", "min", "os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.findall", "valid_inds.append", "obj.find", "valid_inds.append"], "methods", ["None"], ["", "def", "_filter_imgs", "(", "self", ",", "min_size", "=", "32", ")", ":", "\n", "        ", "\"\"\"Filter images too small or without annotation.\"\"\"", "\n", "valid_inds", "=", "[", "]", "\n", "for", "i", ",", "img_info", "in", "enumerate", "(", "self", ".", "data_infos", ")", ":", "\n", "            ", "if", "min", "(", "img_info", "[", "'width'", "]", ",", "img_info", "[", "'height'", "]", ")", "<", "min_size", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "filter_empty_gt", ":", "\n", "                ", "img_id", "=", "img_info", "[", "'id'", "]", "\n", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'Annotations'", ",", "\n", "f'{img_id}.xml'", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "for", "obj", "in", "root", ".", "findall", "(", "'object'", ")", ":", "\n", "                    ", "name", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "if", "name", "in", "self", ".", "CLASSES", ":", "\n", "                        ", "valid_inds", ".", "append", "(", "i", ")", "\n", "break", "\n", "", "", "", "else", ":", "\n", "                ", "valid_inds", ".", "append", "(", "i", ")", "\n", "", "", "return", "valid_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.xml_style.XMLDataset.get_ann_info": [[82, 147], ["os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.findall", "dict", "obj.find", "obj.find", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array", "obj.find", "int", "int", "int", "int", "int", "numpy.zeros.append", "numpy.array.append", "numpy.zeros.append", "numpy.array.append", "numpy.array", "numpy.array", "numpy.zeros.astype", "numpy.array.astype", "numpy.zeros.astype", "numpy.array.astype", "float", "float", "float", "float", "obj.find.find", "obj.find.find", "obj.find.find", "obj.find.find"], "methods", ["None"], ["", "def", "get_ann_info", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get annotation from XML file by index.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            dict: Annotation info of specified index.\n        \"\"\"", "\n", "\n", "img_id", "=", "self", ".", "data_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'Annotations'", ",", "f'{img_id}.xml'", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "bboxes", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "bboxes_ignore", "=", "[", "]", "\n", "labels_ignore", "=", "[", "]", "\n", "for", "obj", "in", "root", ".", "findall", "(", "'object'", ")", ":", "\n", "            ", "name", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "if", "name", "not", "in", "self", ".", "CLASSES", ":", "\n", "                ", "continue", "\n", "", "label", "=", "self", ".", "cat2label", "[", "name", "]", "\n", "difficult", "=", "obj", ".", "find", "(", "'difficult'", ")", "\n", "difficult", "=", "0", "if", "difficult", "is", "None", "else", "int", "(", "difficult", ".", "text", ")", "\n", "bnd_box", "=", "obj", ".", "find", "(", "'bndbox'", ")", "\n", "# TODO: check whether it is necessary to use int", "\n", "# Coordinates may be float type", "\n", "bbox", "=", "[", "\n", "int", "(", "float", "(", "bnd_box", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ")", ",", "\n", "int", "(", "float", "(", "bnd_box", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ")", ",", "\n", "int", "(", "float", "(", "bnd_box", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ")", ",", "\n", "int", "(", "float", "(", "bnd_box", ".", "find", "(", "'ymax'", ")", ".", "text", ")", ")", "\n", "]", "\n", "ignore", "=", "False", "\n", "if", "self", ".", "min_size", ":", "\n", "                ", "assert", "not", "self", ".", "test_mode", "\n", "w", "=", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "\n", "h", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "\n", "if", "w", "<", "self", ".", "min_size", "or", "h", "<", "self", ".", "min_size", ":", "\n", "                    ", "ignore", "=", "True", "\n", "", "", "if", "difficult", "or", "ignore", ":", "\n", "                ", "bboxes_ignore", ".", "append", "(", "bbox", ")", "\n", "labels_ignore", ".", "append", "(", "label", ")", "\n", "", "else", ":", "\n", "                ", "bboxes", ".", "append", "(", "bbox", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "", "if", "not", "bboxes", ":", "\n", "            ", "bboxes", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "bboxes", "=", "np", ".", "array", "(", "bboxes", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "", "if", "not", "bboxes_ignore", ":", "\n", "            ", "bboxes_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", "4", ")", ")", "\n", "labels_ignore", "=", "np", ".", "zeros", "(", "(", "0", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "bboxes_ignore", "=", "np", ".", "array", "(", "bboxes_ignore", ",", "ndmin", "=", "2", ")", "-", "1", "\n", "labels_ignore", "=", "np", ".", "array", "(", "labels_ignore", ")", "\n", "", "ann", "=", "dict", "(", "\n", "bboxes", "=", "bboxes", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "labels", "=", "labels", ".", "astype", "(", "np", ".", "int64", ")", ",", "\n", "bboxes_ignore", "=", "bboxes_ignore", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "labels_ignore", "=", "labels_ignore", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "return", "ann", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.xml_style.XMLDataset.get_cat_ids": [[148, 171], ["os.join", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.findall", "cat_ids.append", "obj.find"], "methods", ["None"], ["", "def", "get_cat_ids", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get category ids in XML file by index.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            list[int]: All categories in the image of specified index.\n        \"\"\"", "\n", "\n", "cat_ids", "=", "[", "]", "\n", "img_id", "=", "self", ".", "data_infos", "[", "idx", "]", "[", "'id'", "]", "\n", "xml_path", "=", "osp", ".", "join", "(", "self", ".", "img_prefix", ",", "'Annotations'", ",", "f'{img_id}.xml'", ")", "\n", "tree", "=", "ET", ".", "parse", "(", "xml_path", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "for", "obj", "in", "root", ".", "findall", "(", "'object'", ")", ":", "\n", "            ", "name", "=", "obj", ".", "find", "(", "'name'", ")", ".", "text", "\n", "if", "name", "not", "in", "self", ".", "CLASSES", ":", "\n", "                ", "continue", "\n", "", "label", "=", "self", ".", "cat2label", "[", "name", "]", "\n", "cat_ids", ".", "append", "(", "label", ")", "\n", "\n", "", "return", "cat_ids", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder._concat_dataset": [[26, 51], ["cfg.get", "cfg.get", "cfg.get", "cfg.get", "len", "range", "ConcatDataset", "copy.deepcopy", "isinstance", "isinstance", "isinstance", "datasets.append", "copy.deepcopy.pop", "builder.build_dataset"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset": [[53, 74], ["isinstance", "ConcatDataset", "ConcatDataset", "builder.build_dataset", "cfg.get", "RepeatDataset", "builder.build_dataset", "builder.build_dataset", "ClassBalancedDataset", "isinstance", "builder.build_dataset", "cfg.get", "builder._concat_dataset", "mmcv.utils.build_from_cfg"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder._concat_dataset"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataloader": [[76, 136], ["mmcv.runner.get_dist_info", "torch.utils.data.DataLoader", "functools.partial", "samplers.DistributedGroupSampler", "samplers.DistributedSampler", "samplers.GroupSampler", "functools.partial"], "function", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.worker_init_fn": [[138, 144], ["numpy.random.seed", "random.seed"], "function", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.ConcatDataset.__init__": [[27, 45], ["torch.utils.data.dataset.ConcatDataset.__init__", "hasattr", "any", "range", "numpy.concatenate", "NotImplementedError", "len", "flags.append", "isinstance", "len", "NotImplementedError", "set", "type"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ",", "separate_eval", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", "datasets", ")", "\n", "self", ".", "CLASSES", "=", "datasets", "[", "0", "]", ".", "CLASSES", "\n", "self", ".", "separate_eval", "=", "separate_eval", "\n", "if", "not", "separate_eval", ":", "\n", "            ", "if", "any", "(", "[", "isinstance", "(", "ds", ",", "CocoDataset", ")", "for", "ds", "in", "datasets", "]", ")", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "'Evaluating concatenated CocoDataset as a whole is not'", "\n", "' supported! Please set \"separate_eval=True\"'", ")", "\n", "", "elif", "len", "(", "set", "(", "[", "type", "(", "ds", ")", "for", "ds", "in", "datasets", "]", ")", ")", "!=", "1", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "'All the datasets should have same types'", ")", "\n", "\n", "", "", "if", "hasattr", "(", "datasets", "[", "0", "]", ",", "'flag'", ")", ":", "\n", "            ", "flags", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "datasets", ")", ")", ":", "\n", "                ", "flags", ".", "append", "(", "datasets", "[", "i", "]", ".", "flag", ")", "\n", "", "self", ".", "flag", "=", "np", ".", "concatenate", "(", "flags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.ConcatDataset.get_cat_ids": [[46, 67], ["bisect.bisect_right", "dataset_wrappers.ConcatDataset.datasets[].get_cat_ids", "len", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.get_cat_ids"], ["", "", "def", "get_cat_ids", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get category ids of concatenated dataset by index.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            list[int]: All categories in the image of specified index.\n        \"\"\"", "\n", "\n", "if", "idx", "<", "0", ":", "\n", "            ", "if", "-", "idx", ">", "len", "(", "self", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'absolute value of index should not exceed dataset length'", ")", "\n", "", "idx", "=", "len", "(", "self", ")", "+", "idx", "\n", "", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "idx", ")", "\n", "if", "dataset_idx", "==", "0", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "", "else", ":", "\n", "            ", "sample_idx", "=", "idx", "-", "self", ".", "cumulative_sizes", "[", "dataset_idx", "-", "1", "]", "\n", "", "return", "self", ".", "datasets", "[", "dataset_idx", "]", ".", "get_cat_ids", "(", "sample_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.ConcatDataset.evaluate": [[68, 125], ["len", "hasattr", "dict", "zip", "any", "len", "mmcv.utils.print_log", "dataset.evaluate", "dataset.evaluate.items", "NotImplementedError", "type", "dict.update", "isinstance", "len", "NotImplementedError", "sum", "dataset_wrappers.ConcatDataset.datasets[].evaluate", "set", "len", "type"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate"], ["", "def", "evaluate", "(", "self", ",", "results", ",", "logger", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Evaluate the results.\n\n        Args:\n            results (list[list | tuple]): Testing results of the dataset.\n            logger (logging.Logger | str | None): Logger used for printing\n                related information during evaluation. Default: None.\n\n        Returns:\n            dict[str: float]: AP results of the total dataset or each separate\n            dataset if `self.separate_eval=True`.\n        \"\"\"", "\n", "assert", "len", "(", "results", ")", "==", "self", ".", "cumulative_sizes", "[", "-", "1", "]", ",", "(", "'Dataset and results have different sizes: '", "\n", "f'{self.cumulative_sizes[-1]} v.s. {len(results)}'", ")", "\n", "\n", "# Check whether all the datasets support evaluation", "\n", "for", "dataset", "in", "self", ".", "datasets", ":", "\n", "            ", "assert", "hasattr", "(", "dataset", ",", "'evaluate'", ")", ",", "f'{type(dataset)} does not implement evaluate function'", "\n", "\n", "", "if", "self", ".", "separate_eval", ":", "\n", "            ", "dataset_idx", "=", "-", "1", "\n", "total_eval_results", "=", "dict", "(", ")", "\n", "for", "size", ",", "dataset", "in", "zip", "(", "self", ".", "cumulative_sizes", ",", "self", ".", "datasets", ")", ":", "\n", "                ", "start_idx", "=", "0", "if", "dataset_idx", "==", "-", "1", "else", "self", ".", "cumulative_sizes", "[", "dataset_idx", "]", "\n", "end_idx", "=", "self", ".", "cumulative_sizes", "[", "dataset_idx", "+", "1", "]", "\n", "\n", "results_per_dataset", "=", "results", "[", "start_idx", ":", "end_idx", "]", "\n", "print_log", "(", "\n", "f'\\nEvaluateing {dataset.ann_file} with '", "\n", "f'{len(results_per_dataset)} images now'", ",", "\n", "logger", "=", "logger", ")", "\n", "\n", "eval_results_per_dataset", "=", "dataset", ".", "evaluate", "(", "\n", "results_per_dataset", ",", "logger", "=", "logger", ",", "**", "kwargs", ")", "\n", "dataset_idx", "+=", "1", "\n", "for", "k", ",", "v", "in", "eval_results_per_dataset", ".", "items", "(", ")", ":", "\n", "                    ", "total_eval_results", ".", "update", "(", "{", "f'{dataset_idx}_{k}'", ":", "v", "}", ")", "\n", "\n", "", "", "return", "total_eval_results", "\n", "", "elif", "any", "(", "[", "isinstance", "(", "ds", ",", "CocoDataset", ")", "for", "ds", "in", "self", ".", "datasets", "]", ")", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'Evaluating concatenated CocoDataset as a whole is not'", "\n", "' supported! Please set \"separate_eval=True\"'", ")", "\n", "", "elif", "len", "(", "set", "(", "[", "type", "(", "ds", ")", "for", "ds", "in", "self", ".", "datasets", "]", ")", ")", "!=", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'All the datasets should have same types'", ")", "\n", "", "else", ":", "\n", "            ", "original_data_infos", "=", "self", ".", "datasets", "[", "0", "]", ".", "data_infos", "\n", "self", ".", "datasets", "[", "0", "]", ".", "data_infos", "=", "sum", "(", "\n", "[", "dataset", ".", "data_infos", "for", "dataset", "in", "self", ".", "datasets", "]", ",", "[", "]", ")", "\n", "eval_results", "=", "self", ".", "datasets", "[", "0", "]", ".", "evaluate", "(", "\n", "results", ",", "logger", "=", "logger", ",", "**", "kwargs", ")", "\n", "self", ".", "datasets", "[", "0", "]", ".", "data_infos", "=", "original_data_infos", "\n", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.__init__": [[141, 149], ["hasattr", "len", "numpy.tile"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "times", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "times", "=", "times", "\n", "self", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "if", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", ":", "\n", "            ", "self", ".", "flag", "=", "np", ".", "tile", "(", "self", ".", "dataset", ".", "flag", ",", "times", ")", "\n", "\n", "", "self", ".", "_ori_len", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.__getitem__": [[150, 152], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "idx", "%", "self", ".", "_ori_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.get_cat_ids": [[153, 164], ["dataset_wrappers.RepeatDataset.dataset.get_cat_ids"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.get_cat_ids"], ["", "def", "get_cat_ids", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Get category ids of repeat dataset by index.\n\n        Args:\n            idx (int): Index of data.\n\n        Returns:\n            list[int]: All categories in the image of specified index.\n        \"\"\"", "\n", "\n", "return", "self", ".", "dataset", ".", "get_cat_ids", "(", "idx", "%", "self", ".", "_ori_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.__len__": [[165, 168], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Length after repetition.\"\"\"", "\n", "return", "self", ".", "times", "*", "self", ".", "_ori_len", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.ClassBalancedDataset.__init__": [[208, 226], ["dataset_wrappers.ClassBalancedDataset._get_repeat_factors", "enumerate", "hasattr", "numpy.asarray", "repeat_indices.extend", "zip", "flags.extend", "len", "len", "math.ceil", "int", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.ClassBalancedDataset._get_repeat_factors"], ["def", "__init__", "(", "self", ",", "dataset", ",", "oversample_thr", ",", "filter_empty_gt", "=", "True", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "oversample_thr", "=", "oversample_thr", "\n", "self", ".", "filter_empty_gt", "=", "filter_empty_gt", "\n", "self", ".", "CLASSES", "=", "dataset", ".", "CLASSES", "\n", "\n", "repeat_factors", "=", "self", ".", "_get_repeat_factors", "(", "dataset", ",", "oversample_thr", ")", "\n", "repeat_indices", "=", "[", "]", "\n", "for", "dataset_idx", ",", "repeat_factor", "in", "enumerate", "(", "repeat_factors", ")", ":", "\n", "            ", "repeat_indices", ".", "extend", "(", "[", "dataset_idx", "]", "*", "math", ".", "ceil", "(", "repeat_factor", ")", ")", "\n", "", "self", ".", "repeat_indices", "=", "repeat_indices", "\n", "\n", "flags", "=", "[", "]", "\n", "if", "hasattr", "(", "self", ".", "dataset", ",", "'flag'", ")", ":", "\n", "            ", "for", "flag", ",", "repeat_factor", "in", "zip", "(", "self", ".", "dataset", ".", "flag", ",", "repeat_factors", ")", ":", "\n", "                ", "flags", ".", "extend", "(", "[", "flag", "]", "*", "int", "(", "math", ".", "ceil", "(", "repeat_factor", ")", ")", ")", "\n", "", "assert", "len", "(", "flags", ")", "==", "len", "(", "repeat_indices", ")", "\n", "", "self", ".", "flag", "=", "np", ".", "asarray", "(", "flags", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.ClassBalancedDataset._get_repeat_factors": [[227, 275], ["collections.defaultdict", "len", "range", "collections.defaultdict.items", "range", "set", "max", "set", "repeat_factors.append", "dataset_wrappers.ClassBalancedDataset.dataset.get_cat_ids", "set", "math.sqrt", "collections.defaultdict.items", "dataset_wrappers.ClassBalancedDataset.dataset.get_cat_ids", "set", "len", "max", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.get_cat_ids", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.get_cat_ids"], ["", "def", "_get_repeat_factors", "(", "self", ",", "dataset", ",", "repeat_thr", ")", ":", "\n", "        ", "\"\"\"Get repeat factor for each images in the dataset.\n\n        Args:\n            dataset (:obj:`CustomDataset`): The dataset\n            repeat_thr (float): The threshold of frequency. If an image\n                contains the categories whose frequency below the threshold,\n                it would be repeated.\n\n        Returns:\n            list[float]: The repeat factors for each images in the dataset.\n        \"\"\"", "\n", "\n", "# 1. For each category c, compute the fraction # of images", "\n", "#   that contain it: f(c)", "\n", "category_freq", "=", "defaultdict", "(", "int", ")", "\n", "num_images", "=", "len", "(", "dataset", ")", "\n", "for", "idx", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "cat_ids", "=", "set", "(", "self", ".", "dataset", ".", "get_cat_ids", "(", "idx", ")", ")", "\n", "if", "len", "(", "cat_ids", ")", "==", "0", "and", "not", "self", ".", "filter_empty_gt", ":", "\n", "                ", "cat_ids", "=", "set", "(", "[", "len", "(", "self", ".", "CLASSES", ")", "]", ")", "\n", "", "for", "cat_id", "in", "cat_ids", ":", "\n", "                ", "category_freq", "[", "cat_id", "]", "+=", "1", "\n", "", "", "for", "k", ",", "v", "in", "category_freq", ".", "items", "(", ")", ":", "\n", "            ", "category_freq", "[", "k", "]", "=", "v", "/", "num_images", "\n", "\n", "# 2. For each category c, compute the category-level repeat factor:", "\n", "#    r(c) = max(1, sqrt(t/f(c)))", "\n", "", "category_repeat", "=", "{", "\n", "cat_id", ":", "max", "(", "1.0", ",", "math", ".", "sqrt", "(", "repeat_thr", "/", "cat_freq", ")", ")", "\n", "for", "cat_id", ",", "cat_freq", "in", "category_freq", ".", "items", "(", ")", "\n", "}", "\n", "\n", "# 3. For each image I, compute the image-level repeat factor:", "\n", "#    r(I) = max_{c in I} r(c)", "\n", "repeat_factors", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "cat_ids", "=", "set", "(", "self", ".", "dataset", ".", "get_cat_ids", "(", "idx", ")", ")", "\n", "if", "len", "(", "cat_ids", ")", "==", "0", "and", "not", "self", ".", "filter_empty_gt", ":", "\n", "                ", "cat_ids", "=", "set", "(", "[", "len", "(", "self", ".", "CLASSES", ")", "]", ")", "\n", "", "repeat_factor", "=", "1", "\n", "if", "len", "(", "cat_ids", ")", ">", "0", ":", "\n", "                ", "repeat_factor", "=", "max", "(", "\n", "{", "category_repeat", "[", "cat_id", "]", "\n", "for", "cat_id", "in", "cat_ids", "}", ")", "\n", "", "repeat_factors", ".", "append", "(", "repeat_factor", ")", "\n", "\n", "", "return", "repeat_factors", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.ClassBalancedDataset.__getitem__": [[276, 279], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "ori_index", "=", "self", ".", "repeat_indices", "[", "idx", "]", "\n", "return", "self", ".", "dataset", "[", "ori_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.ClassBalancedDataset.__len__": [[280, 283], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Length after repetition.\"\"\"", "\n", "return", "len", "(", "self", ".", "repeat_indices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.lvis.LVISV05Dataset.load_annotations": [[268, 308], ["LVIS", "lvis.LVISV05Dataset.coco.get_cat_ids", "lvis.LVISV05Dataset.coco.get_img_ids", "info[].startswith", "data_infos.append", "AssertionError", "ImportError", "enumerate", "lvis.LVISV05Dataset.coco.load_imgs"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.get_cat_ids"], ["def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "\"\"\"Load annotation from lvis style annotation file.\n\n        Args:\n            ann_file (str): Path of annotation file.\n\n        Returns:\n            list[dict]: Annotation info from LVIS api.\n        \"\"\"", "\n", "\n", "try", ":", "\n", "            ", "import", "lvis", "\n", "assert", "lvis", ".", "__version__", ">=", "'10.5.3'", "\n", "from", "lvis", "import", "LVIS", "\n", "", "except", "AssertionError", ":", "\n", "            ", "raise", "AssertionError", "(", "'Incompatible version of lvis is installed. '", "\n", "'Run pip uninstall lvis first. Then run pip '", "\n", "'install mmlvis to install open-mmlab forked '", "\n", "'lvis. '", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Package lvis is not installed. Please run pip '", "\n", "'install mmlvis to install open-mmlab forked '", "\n", "'lvis.'", ")", "\n", "", "self", ".", "coco", "=", "LVIS", "(", "ann_file", ")", "\n", "self", ".", "cat_ids", "=", "self", ".", "coco", ".", "get_cat_ids", "(", ")", "\n", "self", ".", "cat2label", "=", "{", "cat_id", ":", "i", "for", "i", ",", "cat_id", "in", "enumerate", "(", "self", ".", "cat_ids", ")", "}", "\n", "self", ".", "img_ids", "=", "self", ".", "coco", ".", "get_img_ids", "(", ")", "\n", "data_infos", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "img_ids", ":", "\n", "            ", "info", "=", "self", ".", "coco", ".", "load_imgs", "(", "[", "i", "]", ")", "[", "0", "]", "\n", "if", "info", "[", "'file_name'", "]", ".", "startswith", "(", "'COCO'", ")", ":", "\n", "# Convert form the COCO 2014 file naming convention of", "\n", "# COCO_[train/val/test]2014_000000000000.jpg to the 2017", "\n", "# naming convention of 000000000000.jpg", "\n", "# (LVIS v1 will fix this naming issue)", "\n", "                ", "info", "[", "'filename'", "]", "=", "info", "[", "'file_name'", "]", "[", "-", "16", ":", "]", "\n", "", "else", ":", "\n", "                ", "info", "[", "'filename'", "]", "=", "info", "[", "'file_name'", "]", "\n", "", "data_infos", ".", "append", "(", "info", ")", "\n", "", "return", "data_infos", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.lvis.LVISV05Dataset.evaluate": [[309, 466], ["numpy.arange", "isinstance", "lvis.LVISV05Dataset.results2json", "collections.OrderedDict", "len", "len", "len", "len", "isinstance", "tempfile.TemporaryDirectory", "os.join", "mmcv.utils.print_log", "LVISEval", "LVISEval.print_results", "tempfile.TemporaryDirectory.cleanup", "AssertionError", "ImportError", "KeyError", "lvis.LVISV05Dataset.fast_eval_recall", "enumerate", "mmcv.utils.print_log", "KeyError", "LVISResults", "list", "LVISEval.evaluate", "LVISEval.accumulate", "LVISEval.summarize", "LVISEval.get_results().items", "LVISEval.evaluate", "LVISEval.accumulate", "LVISEval.summarize", "LVISEval.get_results", "LVISEval.get_results.items", "log_msg.append", "mmcv.utils.print_log", "k.startswith", "enumerate", "min", "list", "itertools.zip_longest", "terminaltables.AsciiTable", "mmcv.utils.print_log", "k.startswith", "LVISEval.get_results", "float", "len", "results_per_category.append", "itertools.chain", "float", "lvis.LVISV05Dataset.coco.load_cats", "numpy.mean", "float", "len", "float", "LVISEval.get_results.items", "k.startswith", "float", "float", "range", "float"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.results2json", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.coco.CocoDataset.fast_eval_recall", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.get_results", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.analysis_tools.robustness_eval.get_results"], ["", "def", "evaluate", "(", "self", ",", "\n", "results", ",", "\n", "metric", "=", "'bbox'", ",", "\n", "logger", "=", "None", ",", "\n", "jsonfile_prefix", "=", "None", ",", "\n", "classwise", "=", "False", ",", "\n", "proposal_nums", "=", "(", "100", ",", "300", ",", "1000", ")", ",", "\n", "iou_thrs", "=", "np", ".", "arange", "(", "0.5", ",", "0.96", ",", "0.05", ")", ")", ":", "\n", "        ", "\"\"\"Evaluation in LVIS protocol.\n\n        Args:\n            results (list[list | tuple]): Testing results of the dataset.\n            metric (str | list[str]): Metrics to be evaluated. Options are\n                'bbox', 'segm', 'proposal', 'proposal_fast'.\n            logger (logging.Logger | str | None): Logger used for printing\n                related information during evaluation. Default: None.\n            jsonfile_prefix (str | None):\n            classwise (bool): Whether to evaluating the AP for each class.\n            proposal_nums (Sequence[int]): Proposal number used for evaluating\n                recalls, such as recall@100, recall@1000.\n                Default: (100, 300, 1000).\n            iou_thrs (Sequence[float]): IoU threshold used for evaluating\n                recalls. If set to a list, the average recall of all IoUs will\n                also be computed. Default: 0.5.\n\n        Returns:\n            dict[str, float]: LVIS style metrics.\n        \"\"\"", "\n", "\n", "try", ":", "\n", "            ", "import", "lvis", "\n", "assert", "lvis", ".", "__version__", ">=", "'10.5.3'", "\n", "from", "lvis", "import", "LVISResults", ",", "LVISEval", "\n", "", "except", "AssertionError", ":", "\n", "            ", "raise", "AssertionError", "(", "'Incompatible version of lvis is installed. '", "\n", "'Run pip uninstall lvis first. Then run pip '", "\n", "'install mmlvis to install open-mmlab forked '", "\n", "'lvis. '", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Package lvis is not installed. Please run pip '", "\n", "'install mmlvis to install open-mmlab forked '", "\n", "'lvis.'", ")", "\n", "", "assert", "isinstance", "(", "results", ",", "list", ")", ",", "'results must be a list'", "\n", "assert", "len", "(", "results", ")", "==", "len", "(", "self", ")", ",", "(", "\n", "'The length of results is not equal to the dataset len: {} != {}'", ".", "\n", "format", "(", "len", "(", "results", ")", ",", "len", "(", "self", ")", ")", ")", "\n", "\n", "metrics", "=", "metric", "if", "isinstance", "(", "metric", ",", "list", ")", "else", "[", "metric", "]", "\n", "allowed_metrics", "=", "[", "'bbox'", ",", "'segm'", ",", "'proposal'", ",", "'proposal_fast'", "]", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "if", "metric", "not", "in", "allowed_metrics", ":", "\n", "                ", "raise", "KeyError", "(", "'metric {} is not supported'", ".", "format", "(", "metric", ")", ")", "\n", "\n", "", "", "if", "jsonfile_prefix", "is", "None", ":", "\n", "            ", "tmp_dir", "=", "tempfile", ".", "TemporaryDirectory", "(", ")", "\n", "jsonfile_prefix", "=", "osp", ".", "join", "(", "tmp_dir", ".", "name", ",", "'results'", ")", "\n", "", "else", ":", "\n", "            ", "tmp_dir", "=", "None", "\n", "", "result_files", "=", "self", ".", "results2json", "(", "results", ",", "jsonfile_prefix", ")", "\n", "\n", "eval_results", "=", "OrderedDict", "(", ")", "\n", "# get original api", "\n", "lvis_gt", "=", "self", ".", "coco", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "msg", "=", "'Evaluating {}...'", ".", "format", "(", "metric", ")", "\n", "if", "logger", "is", "None", ":", "\n", "                ", "msg", "=", "'\\n'", "+", "msg", "\n", "", "print_log", "(", "msg", ",", "logger", "=", "logger", ")", "\n", "\n", "if", "metric", "==", "'proposal_fast'", ":", "\n", "                ", "ar", "=", "self", ".", "fast_eval_recall", "(", "\n", "results", ",", "proposal_nums", ",", "iou_thrs", ",", "logger", "=", "'silent'", ")", "\n", "log_msg", "=", "[", "]", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "                    ", "eval_results", "[", "'AR@{}'", ".", "format", "(", "num", ")", "]", "=", "ar", "[", "i", "]", "\n", "log_msg", ".", "append", "(", "'\\nAR@{}\\t{:.4f}'", ".", "format", "(", "num", ",", "ar", "[", "i", "]", ")", ")", "\n", "", "log_msg", "=", "''", ".", "join", "(", "log_msg", ")", "\n", "print_log", "(", "log_msg", ",", "logger", "=", "logger", ")", "\n", "continue", "\n", "\n", "", "if", "metric", "not", "in", "result_files", ":", "\n", "                ", "raise", "KeyError", "(", "'{} is not in results'", ".", "format", "(", "metric", ")", ")", "\n", "", "try", ":", "\n", "                ", "lvis_dt", "=", "LVISResults", "(", "lvis_gt", ",", "result_files", "[", "metric", "]", ")", "\n", "", "except", "IndexError", ":", "\n", "                ", "print_log", "(", "\n", "'The testing results of the whole dataset is empty.'", ",", "\n", "logger", "=", "logger", ",", "\n", "level", "=", "logging", ".", "ERROR", ")", "\n", "break", "\n", "\n", "", "iou_type", "=", "'bbox'", "if", "metric", "==", "'proposal'", "else", "metric", "\n", "lvis_eval", "=", "LVISEval", "(", "lvis_gt", ",", "lvis_dt", ",", "iou_type", ")", "\n", "lvis_eval", ".", "params", ".", "imgIds", "=", "self", ".", "img_ids", "\n", "if", "metric", "==", "'proposal'", ":", "\n", "                ", "lvis_eval", ".", "params", ".", "useCats", "=", "0", "\n", "lvis_eval", ".", "params", ".", "maxDets", "=", "list", "(", "proposal_nums", ")", "\n", "lvis_eval", ".", "evaluate", "(", ")", "\n", "lvis_eval", ".", "accumulate", "(", ")", "\n", "lvis_eval", ".", "summarize", "(", ")", "\n", "for", "k", ",", "v", "in", "lvis_eval", ".", "get_results", "(", ")", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", ".", "startswith", "(", "'AR'", ")", ":", "\n", "                        ", "val", "=", "float", "(", "'{:.3f}'", ".", "format", "(", "float", "(", "v", ")", ")", ")", "\n", "eval_results", "[", "k", "]", "=", "val", "\n", "", "", "", "else", ":", "\n", "                ", "lvis_eval", ".", "evaluate", "(", ")", "\n", "lvis_eval", ".", "accumulate", "(", ")", "\n", "lvis_eval", ".", "summarize", "(", ")", "\n", "lvis_results", "=", "lvis_eval", ".", "get_results", "(", ")", "\n", "if", "classwise", ":", "# Compute per-category AP", "\n", "# Compute per-category AP", "\n", "# from https://github.com/facebookresearch/detectron2/", "\n", "                    ", "precisions", "=", "lvis_eval", ".", "eval", "[", "'precision'", "]", "\n", "# precision: (iou, recall, cls, area range, max dets)", "\n", "assert", "len", "(", "self", ".", "cat_ids", ")", "==", "precisions", ".", "shape", "[", "2", "]", "\n", "\n", "results_per_category", "=", "[", "]", "\n", "for", "idx", ",", "catId", "in", "enumerate", "(", "self", ".", "cat_ids", ")", ":", "\n", "# area range index 0: all area ranges", "\n", "# max dets index -1: typically 100 per image", "\n", "                        ", "nm", "=", "self", ".", "coco", ".", "load_cats", "(", "catId", ")", "[", "0", "]", "\n", "precision", "=", "precisions", "[", ":", ",", ":", ",", "idx", ",", "0", ",", "-", "1", "]", "\n", "precision", "=", "precision", "[", "precision", ">", "-", "1", "]", "\n", "if", "precision", ".", "size", ":", "\n", "                            ", "ap", "=", "np", ".", "mean", "(", "precision", ")", "\n", "", "else", ":", "\n", "                            ", "ap", "=", "float", "(", "'nan'", ")", "\n", "", "results_per_category", ".", "append", "(", "\n", "(", "f'{nm[\"name\"]}'", ",", "f'{float(ap):0.3f}'", ")", ")", "\n", "\n", "", "num_columns", "=", "min", "(", "6", ",", "len", "(", "results_per_category", ")", "*", "2", ")", "\n", "results_flatten", "=", "list", "(", "\n", "itertools", ".", "chain", "(", "*", "results_per_category", ")", ")", "\n", "headers", "=", "[", "'category'", ",", "'AP'", "]", "*", "(", "num_columns", "//", "2", ")", "\n", "results_2d", "=", "itertools", ".", "zip_longest", "(", "*", "[", "\n", "results_flatten", "[", "i", ":", ":", "num_columns", "]", "\n", "for", "i", "in", "range", "(", "num_columns", ")", "\n", "]", ")", "\n", "table_data", "=", "[", "headers", "]", "\n", "table_data", "+=", "[", "result", "for", "result", "in", "results_2d", "]", "\n", "table", "=", "AsciiTable", "(", "table_data", ")", "\n", "print_log", "(", "'\\n'", "+", "table", ".", "table", ",", "logger", "=", "logger", ")", "\n", "\n", "", "for", "k", ",", "v", "in", "lvis_results", ".", "items", "(", ")", ":", "\n", "                    ", "if", "k", ".", "startswith", "(", "'AP'", ")", ":", "\n", "                        ", "key", "=", "'{}_{}'", ".", "format", "(", "metric", ",", "k", ")", "\n", "val", "=", "float", "(", "'{:.3f}'", ".", "format", "(", "float", "(", "v", ")", ")", ")", "\n", "eval_results", "[", "key", "]", "=", "val", "\n", "", "", "ap_summary", "=", "' '", ".", "join", "(", "[", "\n", "'{}:{:.3f}'", ".", "format", "(", "k", ",", "float", "(", "v", ")", ")", "\n", "for", "k", ",", "v", "in", "lvis_results", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "'AP'", ")", "\n", "]", ")", "\n", "eval_results", "[", "'{}_mAP_copypaste'", ".", "format", "(", "metric", ")", "]", "=", "ap_summary", "\n", "", "lvis_eval", ".", "print_results", "(", ")", "\n", "", "if", "tmp_dir", "is", "not", "None", ":", "\n", "            ", "tmp_dir", ".", "cleanup", "(", ")", "\n", "", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.lvis.LVISV1Dataset.load_annotations": [[715, 743], ["LVIS", "lvis.LVISV1Dataset.coco.get_cat_ids", "lvis.LVISV1Dataset.coco.get_img_ids", "info[].replace", "data_infos.append", "AssertionError", "ImportError", "enumerate", "lvis.LVISV1Dataset.coco.load_imgs"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.dataset_wrappers.RepeatDataset.get_cat_ids"], ["def", "load_annotations", "(", "self", ",", "ann_file", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "lvis", "\n", "assert", "lvis", ".", "__version__", ">=", "'10.5.3'", "\n", "from", "lvis", "import", "LVIS", "\n", "", "except", "AssertionError", ":", "\n", "            ", "raise", "AssertionError", "(", "'Incompatible version of lvis is installed. '", "\n", "'Run pip uninstall lvis first. Then run pip '", "\n", "'install mmlvis to install open-mmlab forked '", "\n", "'lvis. '", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Package lvis is not installed. Please run pip '", "\n", "'install mmlvis to install open-mmlab forked '", "\n", "'lvis.'", ")", "\n", "", "self", ".", "coco", "=", "LVIS", "(", "ann_file", ")", "\n", "self", ".", "cat_ids", "=", "self", ".", "coco", ".", "get_cat_ids", "(", ")", "\n", "self", ".", "cat2label", "=", "{", "cat_id", ":", "i", "for", "i", ",", "cat_id", "in", "enumerate", "(", "self", ".", "cat_ids", ")", "}", "\n", "self", ".", "img_ids", "=", "self", ".", "coco", ".", "get_img_ids", "(", ")", "\n", "data_infos", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "img_ids", ":", "\n", "            ", "info", "=", "self", ".", "coco", ".", "load_imgs", "(", "[", "i", "]", ")", "[", "0", "]", "\n", "# coco_url is used in LVISv1 instead of file_name", "\n", "# e.g. http://images.cocodataset.org/train2017/000000391895.jpg", "\n", "# train/val split in specified in url", "\n", "info", "[", "'filename'", "]", "=", "info", "[", "'coco_url'", "]", ".", "replace", "(", "\n", "'http://images.cocodataset.org/'", ",", "''", ")", "\n", "data_infos", ".", "append", "(", "info", ")", "\n", "", "return", "data_infos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.NumClassCheckHook._check_head": [[117, 138], ["runner.logger.warning", "model.named_modules", "hasattr", "isinstance", "len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.NumClassCheckHook.before_train_epoch": [[144, 151], ["utils.NumClassCheckHook._check_head"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.NumClassCheckHook._check_head"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.NumClassCheckHook.before_val_epoch": [[152, 159], ["utils.NumClassCheckHook._check_head"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.NumClassCheckHook._check_head"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.replace_ImageToTensor": [[13, 71], ["copy.deepcopy", "enumerate", "utils.replace_ImageToTensor", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.replace_ImageToTensor"], ["ort_custom_op_path", "=", "get_onnxruntime_op_path", "(", ")", "\n", "", "except", "(", "ImportError", ",", "ModuleNotFoundError", ")", ":", "\n", "    ", "warnings", ".", "warn", "(", "'If input model has custom op from mmcv, \\\n        you may have to build mmcv with ONNXRuntime from source.'", ")", "\n", "\n", "\n", "", "class", "WrapFunction", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Wrap the function to be tested for torch.onnx.export tracking.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "wrapped_function", ")", ":", "\n", "        ", "super", "(", "WrapFunction", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "wrapped_function", "=", "wrapped_function", "\n", "\n", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "wrapped_function", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "", "def", "ort_validate", "(", "model", ",", "feats", ",", "onnx_io", "=", "'tmp.onnx'", ")", ":", "\n", "    ", "\"\"\"Validate the output of the onnxruntime backend is the same as the output\n    generated by torch.\n\n    Args:\n        model (nn.Module): the model to be verified\n        feats (list(torch.Tensor) | torch.Tensor): the input of model\n        onnx_io (str): the name of onnx output file\n    \"\"\"", "\n", "model", ".", "cpu", "(", ")", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "torch", ".", "onnx", ".", "export", "(", "\n", "model", ",", "\n", "feats", ",", "\n", "onnx_io", ",", "\n", "export_params", "=", "True", ",", "\n", "keep_initializers_as_inputs", "=", "True", ",", "\n", "do_constant_folding", "=", "True", ",", "\n", "verbose", "=", "False", ",", "\n", "opset_version", "=", "11", ")", "\n", "\n", "", "onnx_outputs", "=", "verify_model", "(", "feats", ")", "\n", "\n", "torch_outputs", "=", "convert_result_list", "(", "model", ".", "forward", "(", "feats", ")", ")", "\n", "torch_outputs", "=", "[", "\n", "torch_output", ".", "detach", "(", ")", ".", "numpy", "(", ")", "for", "torch_output", "in", "torch_outputs", "\n", "]", "\n", "\n", "# match torch_outputs and onnx_outputs", "\n", "for", "i", "in", "range", "(", "len", "(", "onnx_outputs", ")", ")", ":", "\n", "        ", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "torch_outputs", "[", "i", "]", ",", "onnx_outputs", "[", "i", "]", ",", "rtol", "=", "1e-03", ",", "atol", "=", "1e-05", ")", "\n", "\n", "\n", "", "", "def", "verify_model", "(", "feat", ",", "onnx_io", "=", "'tmp.onnx'", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.get_loading_pipeline": [[73, 112], ["mmdet.datasets.builder.PIPELINES.get", "len", "loading_pipeline_cfg.append"], "function", ["None"], ["\n", "\n", "onnx_model", "=", "onnx", ".", "load", "(", "onnx_io", ")", "\n", "onnx", ".", "checker", ".", "check_model", "(", "onnx_model", ")", "\n", "\n", "session_options", "=", "ort", ".", "SessionOptions", "(", ")", "\n", "# register custom op for onnxruntime", "\n", "if", "osp", ".", "exists", "(", "ort_custom_op_path", ")", ":", "\n", "        ", "session_options", ".", "register_custom_ops_library", "(", "ort_custom_op_path", ")", "\n", "", "sess", "=", "ort", ".", "InferenceSession", "(", "onnx_io", ",", "session_options", ")", "\n", "if", "isinstance", "(", "feat", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "onnx_outputs", "=", "sess", ".", "run", "(", "None", ",", "\n", "{", "sess", ".", "get_inputs", "(", ")", "[", "0", "]", ".", "name", ":", "feat", ".", "numpy", "(", ")", "}", ")", "\n", "", "else", ":", "\n", "        ", "onnx_outputs", "=", "sess", ".", "run", "(", "None", ",", "{", "\n", "sess", ".", "get_inputs", "(", ")", "[", "i", "]", ".", "name", ":", "feat", "[", "i", "]", ".", "numpy", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "feat", ")", ")", "\n", "}", ")", "\n", "", "return", "onnx_outputs", "\n", "\n", "\n", "", "def", "convert_result_list", "(", "outputs", ")", ":", "\n", "    ", "\"\"\"Convert the torch forward outputs containing tuple or list to a list\n    only containing torch.Tensor.\n\n    Args:\n        output (list(Tensor) | tuple(list(Tensor) | ...): the outputs\n        in torch env, maybe containing nested structures such as list\n        or tuple.\n\n    Returns:\n        list(Tensor): a list only containing torch.Tensor\n    \"\"\"", "\n", "# recursive end condition", "\n", "if", "isinstance", "(", "outputs", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "[", "outputs", "]", "\n", "\n", "", "ret", "=", "[", "]", "\n", "for", "sub", "in", "outputs", ":", "\n", "        ", "ret", "+=", "convert_result_list", "(", "sub", ")", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.__init__": [[18, 26], ["xml_style.XMLDataset.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "VOCDataset", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "'VOC2007'", "in", "self", ".", "img_prefix", ":", "\n", "            ", "self", ".", "year", "=", "2007", "\n", "", "elif", "'VOC2012'", "in", "self", ".", "img_prefix", ":", "\n", "            ", "self", ".", "year", "=", "2012", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot infer dataset year from img_prefix'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.voc.VOCDataset.evaluate": [[27, 94], ["collections.OrderedDict", "isinstance", "KeyError", "voc.VOCDataset.get_ann_info", "isinstance", "isinstance", "len", "range", "mmcv.utils.print_log", "mmdet.core.eval_map", "mean_aps.append", "round", "sum", "len", "mmdet.core.eval_recalls", "enumerate", "len", "enumerate", "mmdet.core.eval_recalls.mean", "enumerate", "int"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.xml_style.XMLDataset.get_ann_info", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.mean_ap.eval_map", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.evaluation.recall.eval_recalls"], ["", "", "def", "evaluate", "(", "self", ",", "\n", "results", ",", "\n", "metric", "=", "'mAP'", ",", "\n", "logger", "=", "None", ",", "\n", "proposal_nums", "=", "(", "100", ",", "300", ",", "1000", ")", ",", "\n", "iou_thr", "=", "0.5", ",", "\n", "scale_ranges", "=", "None", ")", ":", "\n", "        ", "\"\"\"Evaluate in VOC protocol.\n\n        Args:\n            results (list[list | tuple]): Testing results of the dataset.\n            metric (str | list[str]): Metrics to be evaluated. Options are\n                'mAP', 'recall'.\n            logger (logging.Logger | str, optional): Logger used for printing\n                related information during evaluation. Default: None.\n            proposal_nums (Sequence[int]): Proposal number used for evaluating\n                recalls, such as recall@100, recall@1000.\n                Default: (100, 300, 1000).\n            iou_thr (float | list[float]): IoU threshold. Default: 0.5.\n            scale_ranges (list[tuple], optional): Scale ranges for evaluating\n                mAP. If not specified, all bounding boxes would be included in\n                evaluation. Default: None.\n\n        Returns:\n            dict[str, float]: AP/recall metrics.\n        \"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "metric", ",", "str", ")", ":", "\n", "            ", "assert", "len", "(", "metric", ")", "==", "1", "\n", "metric", "=", "metric", "[", "0", "]", "\n", "", "allowed_metrics", "=", "[", "'mAP'", ",", "'recall'", "]", "\n", "if", "metric", "not", "in", "allowed_metrics", ":", "\n", "            ", "raise", "KeyError", "(", "f'metric {metric} is not supported'", ")", "\n", "", "annotations", "=", "[", "self", ".", "get_ann_info", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", "]", "\n", "eval_results", "=", "OrderedDict", "(", ")", "\n", "iou_thrs", "=", "[", "iou_thr", "]", "if", "isinstance", "(", "iou_thr", ",", "float", ")", "else", "iou_thr", "\n", "if", "metric", "==", "'mAP'", ":", "\n", "            ", "assert", "isinstance", "(", "iou_thrs", ",", "list", ")", "\n", "if", "self", ".", "year", "==", "2007", ":", "\n", "                ", "ds_name", "=", "'voc07'", "\n", "", "else", ":", "\n", "                ", "ds_name", "=", "self", ".", "CLASSES", "\n", "", "mean_aps", "=", "[", "]", "\n", "for", "iou_thr", "in", "iou_thrs", ":", "\n", "                ", "print_log", "(", "f'\\n{\"-\" * 15}iou_thr: {iou_thr}{\"-\" * 15}'", ")", "\n", "mean_ap", ",", "_", "=", "eval_map", "(", "\n", "results", ",", "\n", "annotations", ",", "\n", "scale_ranges", "=", "None", ",", "\n", "iou_thr", "=", "iou_thr", ",", "\n", "dataset", "=", "ds_name", ",", "\n", "logger", "=", "logger", ")", "\n", "mean_aps", ".", "append", "(", "mean_ap", ")", "\n", "eval_results", "[", "f'AP{int(iou_thr * 100):02d}'", "]", "=", "round", "(", "mean_ap", ",", "3", ")", "\n", "", "eval_results", "[", "'mAP'", "]", "=", "sum", "(", "mean_aps", ")", "/", "len", "(", "mean_aps", ")", "\n", "", "elif", "metric", "==", "'recall'", ":", "\n", "            ", "gt_bboxes", "=", "[", "ann", "[", "'bboxes'", "]", "for", "ann", "in", "annotations", "]", "\n", "recalls", "=", "eval_recalls", "(", "\n", "gt_bboxes", ",", "results", ",", "proposal_nums", ",", "iou_thr", ",", "logger", "=", "logger", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "                ", "for", "j", ",", "iou", "in", "enumerate", "(", "iou_thr", ")", ":", "\n", "                    ", "eval_results", "[", "f'recall@{num}@{iou}'", "]", "=", "recalls", "[", "i", ",", "j", "]", "\n", "", "", "if", "recalls", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "                ", "ar", "=", "recalls", ".", "mean", "(", "axis", "=", "1", ")", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "proposal_nums", ")", ":", "\n", "                    ", "eval_results", "[", "f'AR@{num}'", "]", "=", "ar", "[", "i", "]", "\n", "", "", "", "return", "eval_results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.SPNoise.__init__": [[28, 30], ["None"], "methods", ["None"], ["flipped", "[", "...", ",", "1", ":", ":", "4", "]", "=", "img_shape", "[", "0", "]", "-", "bboxes", "[", "...", ",", "3", ":", ":", "4", "]", "\n", "flipped", "[", "...", ",", "2", ":", ":", "4", "]", "=", "img_shape", "[", "1", "]", "-", "bboxes", "[", "...", ",", "0", ":", ":", "4", "]", "\n", "flipped", "[", "...", ",", "3", ":", ":", "4", "]", "=", "img_shape", "[", "0", "]", "-", "bboxes", "[", "...", ",", "1", ":", ":", "4", "]", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.SPNoise.__call__": [[31, 43], ["numpy.random.random", "skimage.util.random_noise"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random"], ["", "return", "flipped", "\n", "\n", "\n", "", "def", "bbox_mapping", "(", "bboxes", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n", "flip", ",", "\n", "flip_direction", "=", "'horizontal'", ")", ":", "\n", "    ", "\"\"\"Map bboxes from the original image scale to testing scale.\"\"\"", "\n", "new_bboxes", "=", "bboxes", "*", "bboxes", ".", "new_tensor", "(", "scale_factor", ")", "\n", "if", "flip", ":", "\n", "        ", "new_bboxes", "=", "bbox_flip", "(", "new_bboxes", ",", "img_shape", ",", "flip_direction", ")", "\n", "", "return", "new_bboxes", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.GaussNoise.__init__": [[46, 48], ["None"], "methods", ["None"], ["", "def", "bbox_mapping_back", "(", "bboxes", ",", "\n", "img_shape", ",", "\n", "scale_factor", ",", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.GaussNoise.__call__": [[49, 63], ["numpy.random.random", "skimage.util.random_noise", "skimage.io.imshow", "matplotlib.show"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random"], ["flip", ",", "\n", "flip_direction", "=", "'horizontal'", ")", ":", "\n", "    ", "\"\"\"Map bboxes from testing scale to original image scale.\"\"\"", "\n", "new_bboxes", "=", "bbox_flip", "(", "bboxes", ",", "img_shape", ",", "\n", "flip_direction", ")", "if", "flip", "else", "bboxes", "\n", "new_bboxes", "=", "new_bboxes", ".", "view", "(", "-", "1", ",", "4", ")", "/", "new_bboxes", ".", "new_tensor", "(", "scale_factor", ")", "\n", "return", "new_bboxes", ".", "view", "(", "bboxes", ".", "shape", ")", "\n", "\n", "\n", "", "def", "bbox2roi", "(", "bbox_list", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.MixUp.__init__": [[67, 73], ["None"], "methods", ["None"], ["\n", "rois_list", "=", "[", "]", "\n", "for", "img_id", ",", "bboxes", "in", "enumerate", "(", "bbox_list", ")", ":", "\n", "        ", "if", "bboxes", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "            ", "img_inds", "=", "bboxes", ".", "new_full", "(", "(", "bboxes", ".", "size", "(", "0", ")", ",", "1", ")", ",", "img_id", ")", "\n", "rois", "=", "torch", ".", "cat", "(", "[", "img_inds", ",", "bboxes", "[", ":", ",", ":", "4", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.MixUp.__call__": [[74, 97], ["max", "max", "numpy.zeros", "mixup_image.astype.astype.astype", "numpy.vstack", "numpy.hstack", "numpy.random.random", "img1.astype", "transforms.MixUp.img2.astype"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.assigners.assign_result.AssignResult.random"], ["            ", "rois", "=", "bboxes", ".", "new_zeros", "(", "(", "0", ",", "5", ")", ")", "\n", "", "rois_list", ".", "append", "(", "rois", ")", "\n", "", "rois", "=", "torch", ".", "cat", "(", "rois_list", ",", "0", ")", "\n", "return", "rois", "\n", "\n", "\n", "", "def", "roi2bbox", "(", "rois", ")", ":", "\n", "    ", "\"\"\"Convert rois to bounding box format.\n\n    Args:\n        rois (torch.Tensor): RoIs with the shape (n, 5) where the first\n            column indicates batch id of each RoI.\n\n    Returns:\n        list[torch.Tensor]: Converted boxes of corresponding rois.\n    \"\"\"", "\n", "bbox_list", "=", "[", "]", "\n", "img_ids", "=", "torch", ".", "unique", "(", "rois", "[", ":", ",", "0", "]", ".", "cpu", "(", ")", ",", "sorted", "=", "True", ")", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "        ", "inds", "=", "(", "rois", "[", ":", ",", "0", "]", "==", "img_id", ".", "item", "(", ")", ")", "\n", "bbox", "=", "rois", "[", "inds", ",", "1", ":", "]", "\n", "bbox_list", ".", "append", "(", "bbox", ")", "\n", "", "return", "bbox_list", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize.__init__": [[140, 171], ["isinstance", "mmcv.is_list_of", "len"], "methods", ["None"], ["bboxes", "=", "torch", ".", "stack", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "-", "1", ")", "\n", "\n", "if", "max_shape", "is", "not", "None", ":", "\n", "        ", "if", "not", "isinstance", "(", "max_shape", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "max_shape", "=", "x1", ".", "new_tensor", "(", "max_shape", ")", "\n", "", "max_shape", "=", "max_shape", "[", "...", ",", ":", "2", "]", ".", "type_as", "(", "x1", ")", "\n", "if", "max_shape", ".", "ndim", "==", "2", ":", "\n", "            ", "assert", "bboxes", ".", "ndim", "==", "3", "\n", "assert", "max_shape", ".", "size", "(", "0", ")", "==", "bboxes", ".", "size", "(", "0", ")", "\n", "\n", "", "min_xy", "=", "x1", ".", "new_tensor", "(", "0", ")", "\n", "max_xy", "=", "torch", ".", "cat", "(", "[", "max_shape", ",", "max_shape", "]", ",", "\n", "dim", "=", "-", "1", ")", ".", "flip", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "2", ")", "\n", "bboxes", "=", "torch", ".", "where", "(", "bboxes", "<", "min_xy", ",", "min_xy", ",", "bboxes", ")", "\n", "bboxes", "=", "torch", ".", "where", "(", "bboxes", ">", "max_xy", ",", "max_xy", ",", "bboxes", ")", "\n", "\n", "", "return", "bboxes", "\n", "\n", "\n", "", "def", "bbox2distance", "(", "points", ",", "bbox", ",", "max_dis", "=", "None", ",", "eps", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"Decode bounding box based on distances.\n\n    Args:\n        points (Tensor): Shape (n, 2), [x, y].\n        bbox (Tensor): Shape (n, 4), \"xyxy\" format\n        max_dis (float): Upper bound of the distance.\n        eps (float): a small value to ensure target < max_dis, instead <=\n\n    Returns:\n        Tensor: Decoded distances.\n    \"\"\"", "\n", "left", "=", "points", "[", ":", ",", "0", "]", "-", "bbox", "[", ":", ",", "0", "]", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize.random_select": [[172, 189], ["mmcv.is_list_of", "numpy.random.randint", "len"], "methods", ["None"], ["top", "=", "points", "[", ":", ",", "1", "]", "-", "bbox", "[", ":", ",", "1", "]", "\n", "right", "=", "bbox", "[", ":", ",", "2", "]", "-", "points", "[", ":", ",", "0", "]", "\n", "bottom", "=", "bbox", "[", ":", ",", "3", "]", "-", "points", "[", ":", ",", "1", "]", "\n", "if", "max_dis", "is", "not", "None", ":", "\n", "        ", "left", "=", "left", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_dis", "-", "eps", ")", "\n", "top", "=", "top", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_dis", "-", "eps", ")", "\n", "right", "=", "right", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_dis", "-", "eps", ")", "\n", "bottom", "=", "bottom", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "max_dis", "-", "eps", ")", "\n", "", "return", "torch", ".", "stack", "(", "[", "left", ",", "top", ",", "right", ",", "bottom", "]", ",", "-", "1", ")", "\n", "\n", "\n", "", "def", "bbox_rescale", "(", "bboxes", ",", "scale_factor", "=", "1.0", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize.random_sample": [[190, 216], ["numpy.random.randint", "numpy.random.randint", "mmcv.is_list_of", "max", "min", "min", "min", "len", "max", "max"], "methods", ["None"], ["\n", "if", "bboxes", ".", "size", "(", "1", ")", "==", "5", ":", "\n", "        ", "bboxes_", "=", "bboxes", "[", ":", ",", "1", ":", "]", "\n", "inds_", "=", "bboxes", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "bboxes_", "=", "bboxes", "\n", "", "cx", "=", "(", "bboxes_", "[", ":", ",", "0", "]", "+", "bboxes_", "[", ":", ",", "2", "]", ")", "*", "0.5", "\n", "cy", "=", "(", "bboxes_", "[", ":", ",", "1", "]", "+", "bboxes_", "[", ":", ",", "3", "]", ")", "*", "0.5", "\n", "w", "=", "bboxes_", "[", ":", ",", "2", "]", "-", "bboxes_", "[", ":", ",", "0", "]", "\n", "h", "=", "bboxes_", "[", ":", ",", "3", "]", "-", "bboxes_", "[", ":", ",", "1", "]", "\n", "w", "=", "w", "*", "scale_factor", "\n", "h", "=", "h", "*", "scale_factor", "\n", "x1", "=", "cx", "-", "0.5", "*", "w", "\n", "x2", "=", "cx", "+", "0.5", "*", "w", "\n", "y1", "=", "cy", "-", "0.5", "*", "h", "\n", "y2", "=", "cy", "+", "0.5", "*", "h", "\n", "if", "bboxes", ".", "size", "(", "1", ")", "==", "5", ":", "\n", "        ", "rescaled_bboxes", "=", "torch", ".", "stack", "(", "[", "inds_", ",", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "rescaled_bboxes", "=", "torch", ".", "stack", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "return", "rescaled_bboxes", "\n", "\n", "\n", "", "def", "bbox_cxcywh_to_xyxy", "(", "bbox", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize.random_sample_ratio": [[217, 243], ["isinstance", "int", "int", "len", "numpy.random.random_sample"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize.random_sample"], ["\n", "cx", ",", "cy", ",", "w", ",", "h", "=", "bbox", ".", "split", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "bbox_new", "=", "[", "(", "cx", "-", "0.5", "*", "w", ")", ",", "(", "cy", "-", "0.5", "*", "h", ")", ",", "(", "cx", "+", "0.5", "*", "w", ")", ",", "(", "cy", "+", "0.5", "*", "h", ")", "]", "\n", "return", "torch", ".", "cat", "(", "bbox_new", ",", "dim", "=", "-", "1", ")", "\n", "\n", "\n", "", "def", "bbox_xyxy_to_cxcywh", "(", "bbox", ")", ":", "\n", "    ", "\"\"\"Convert bbox coordinates from (x1, y1, x2, y2) to (cx, cy, w, h).\n\n    Args:\n        bbox (Tensor): Shape (n, 4) for bboxes.\n\n    Returns:\n        Tensor: Converted bboxes.\n    \"\"\"", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", ".", "split", "(", "(", "1", ",", "1", ",", "1", ",", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "bbox_new", "=", "[", "(", "x1", "+", "x2", ")", "/", "2", ",", "(", "y1", "+", "y2", ")", "/", "2", ",", "(", "x2", "-", "x1", ")", ",", "(", "y2", "-", "y1", ")", "]", "\n", "return", "torch", ".", "cat", "(", "bbox_new", ",", "dim", "=", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize._random_scale": [[244, 276], ["transforms.Resize.random_sample_ratio", "len", "transforms.Resize.random_sample", "transforms.Resize.random_select"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize.random_sample_ratio", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize.random_sample", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize.random_select"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize._resize_img": [[277, 307], ["results.get", "numpy.array", "mmcv.imrescale", "mmcv.imresize"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize._resize_bboxes": [[308, 317], ["results.get", "numpy.clip", "numpy.clip"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize._resize_masks": [[318, 327], ["results.get", "results[].rescale", "results[].resize"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.rescale", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.resize"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize._resize_seg": [[328, 344], ["results.get", "mmcv.imrescale", "mmcv.imresize"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize.__call__": [[345, 381], ["transforms.Resize._resize_img", "transforms.Resize._resize_bboxes", "transforms.Resize._resize_masks", "transforms.Resize._resize_seg", "isinstance", "tuple", "transforms.Resize._random_scale", "results.pop", "transforms.Resize._random_scale", "results.pop", "int"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize._resize_img", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize._resize_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize._resize_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize._resize_seg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize._random_scale", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize._random_scale"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Resize.__repr__": [[382, 390], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomFlip.__init__": [[430, 455], ["isinstance", "isinstance", "isinstance", "mmcv.is_list_of", "isinstance", "isinstance", "sum", "mmcv.is_list_of", "set().issubset", "ValueError", "len", "len", "ValueError", "set", "set"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomFlip.bbox_flip": [[456, 489], ["bboxes.copy", "ValueError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomFlip.__call__": [[490, 544], ["isinstance", "isinstance", "numpy.random.choice", "results.get", "results.get", "results.get", "results.get", "mmcv.imflip", "transforms.RandomFlip.bbox_flip", "results[].flip", "mmcv.imflip", "sum", "len", "len"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomFlip.bbox_flip", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.flip"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomFlip.__repr__": [[545, 547], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Pad.__init__": [[563, 570], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Pad._pad_img": [[571, 584], ["results.get", "mmcv.impad", "mmcv.impad_to_multiple"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Pad._pad_masks": [[585, 590], ["results.get", "results[].pad"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.pad"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Pad._pad_seg": [[591, 597], ["results.get", "mmcv.impad"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Pad.__call__": [[598, 611], ["transforms.Pad._pad_img", "transforms.Pad._pad_masks", "transforms.Pad._pad_seg"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Pad._pad_img", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Pad._pad_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Pad._pad_seg"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Pad.__repr__": [[612, 618], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Normalize.__init__": [[633, 637], ["numpy.array", "numpy.array"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Normalize.__call__": [[638, 654], ["results.get", "dict", "mmcv.imnormalize"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Normalize.__repr__": [[655, 659], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCrop.__init__": [[696, 723], ["ValueError", "isinstance", "isinstance"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCrop._crop_data": [[725, 789], ["results.get", "results.get", "results.get", "max", "max", "numpy.random.randint", "numpy.random.randint", "numpy.array", "transforms.RandomCrop.bbox2label.get", "transforms.RandomCrop.bbox2mask.get", "numpy.clip", "numpy.clip", "[].crop", "valid_inds.any", "numpy.asarray", "valid_inds.nonzero"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.crop"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCrop._get_crop_size": [[790, 819], ["min", "min", "numpy.random.randint", "numpy.random.randint", "min", "min", "min", "min", "int", "int", "numpy.asarray", "int", "int", "numpy.random.rand"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCrop.__call__": [[820, 835], ["transforms.RandomCrop._get_crop_size", "transforms.RandomCrop._crop_data"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCrop._get_crop_size", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCrop._crop_data"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCrop.__repr__": [[836, 843], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.SegRescale.__init__": [[856, 859], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.SegRescale.__call__": [[860, 878], ["results.get", "mmcv.imrescale"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.SegRescale.__repr__": [[879, 881], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.PhotoMetricDistortion.__init__": [[905, 914], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.PhotoMetricDistortion.__call__": [[915, 977], ["numpy.random.randint", "numpy.random.randint", "mmcv.bgr2hsv", "numpy.random.randint", "numpy.random.randint", "mmcv.hsv2bgr", "numpy.random.randint", "numpy.random.uniform", "numpy.random.randint", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.randint", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.permutation"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.PhotoMetricDistortion.__repr__": [[978, 987], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Expand.__init__": [[1003, 1018], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Expand.__call__": [[1019, 1072], ["numpy.random.uniform", "numpy.all", "int", "int", "results.get", "results.get", "results.get", "numpy.random.uniform", "numpy.empty", "numpy.full.fill", "numpy.full", "numpy.random.uniform", "numpy.random.uniform", "results[].expand", "numpy.full", "numpy.tile().astype", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.tile"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.expand"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Expand.__repr__": [[1073, 1079], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.MinIoURandomCrop.__init__": [[1101, 1117], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.MinIoURandomCrop.__call__": [[1119, 1212], ["numpy.concatenate", "numpy.random.choice", "range", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.array", "mmdet.core.evaluation.bbox_overlaps.bbox_overlaps().reshape", "results.get", "len", "transforms.MinIoURandomCrop.__call__.is_center_of_bboxes_in_patch"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.MinIoURandomCrop.__repr__": [[1213, 1219], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Corrupt.__init__": [[1233, 1236], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Corrupt.__call__": [[1237, 1257], ["corrupt", "RuntimeError", "results[].astype"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Corrupt.__repr__": [[1258, 1263], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Albu.__init__": [[1308, 1350], ["copy.deepcopy", "Compose", "RuntimeError", "copy.deepcopy", "copy.deepcopy", "isinstance", "copy.deepcopy.Albu.albu_builder", "copy.deepcopy.Albu.albu_builder", "copy.deepcopy.Albu.keymap_to_albu.items"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Albu.albu_builder", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Albu.albu_builder"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Albu.albu_builder": [[1351, 1384], ["cfg.copy", "cfg.copy.pop", "mmcv.is_str", "getattr.", "isinstance", "getattr", "inspect.isclass", "RuntimeError", "TypeError", "transforms.Albu.albu_builder", "type"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Albu.albu_builder"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Albu.mapper": [[1385, 1401], ["zip", "d.keys", "d.values", "keymap.get"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Albu.__call__": [[1402, 1463], ["transforms.Albu.mapper", "transforms.Albu.aug", "transforms.Albu.mapper", "isinstance", "isinstance", "isinstance", "results[].reshape", "isinstance", "results[].astype", "numpy.arange", "NotImplementedError", "numpy.array", "numpy.array", "len", "numpy.array", "numpy.array", "ori_masks.__class__", "len"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Albu.mapper", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Albu.mapper"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.Albu.__repr__": [[1464, 1467], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad.__init__": [[1557, 1600], ["isinstance", "isinstance", "isinstance"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad._get_border": [[1601, 1619], ["pow", "numpy.ceil", "numpy.log2", "int", "numpy.ceil"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad._filter_boxes": [[1620, 1635], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad._crop_image_and_paste": [[1636, 1686], ["max", "min", "max", "min", "numpy.array", "numpy.zeros", "range", "slice", "slice", "numpy.array", "int", "int", "int", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad._train_aug": [[1687, 1754], ["numpy.random.choice", "int", "int", "transforms.RandomCenterCropPad._get_border", "transforms.RandomCenterCropPad._get_border", "range", "numpy.random.randint", "numpy.random.randint", "transforms.RandomCenterCropPad._crop_image_and_paste", "transforms.RandomCenterCropPad._filter_boxes", "results.get", "results.get", "transforms.RandomCenterCropPad._filter_boxes", "NotImplementedError", "transforms.RandomCenterCropPad.any", "len", "numpy.clip", "numpy.clip", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad._get_border", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad._get_border", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad._crop_image_and_paste", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad._filter_boxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad._filter_boxes"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad._test_aug": [[1755, 1787], ["transforms.RandomCenterCropPad._crop_image_and_paste", "NotImplementedError", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad._crop_image_and_paste"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad.__call__": [[1788, 1799], ["len", "transforms.RandomCenterCropPad._test_aug", "transforms.RandomCenterCropPad._train_aug"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad._test_aug", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad._train_aug"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.RandomCenterCropPad.__repr__": [[1800, 1812], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.CutOut.__init__": [[1838, 1858], ["isinstance", "isinstance", "isinstance", "isinstance", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.CutOut.__call__": [[1859, 1878], ["numpy.random.randint", "range", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "len", "int", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.CutOut.__repr__": [[1879, 1886], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.BBoxJitter_ratio.__init__": [[1889, 1894], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.transforms.BBoxJitter_ratio.__call__": [[1895, 1927], ["numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.rand", "numpy.clip", "numpy.clip"], "methods", ["None"], []], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.instaboost.InstaBoost.__init__": [[15, 35], ["instaboost.InstaBoostConfig", "ImportError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "action_candidate", "=", "(", "'normal'", ",", "'horizontal'", ",", "'skip'", ")", ",", "\n", "action_prob", "=", "(", "1", ",", "0", ",", "0", ")", ",", "\n", "scale", "=", "(", "0.8", ",", "1.2", ")", ",", "\n", "dx", "=", "15", ",", "\n", "dy", "=", "15", ",", "\n", "theta", "=", "(", "-", "1", ",", "1", ")", ",", "\n", "color_prob", "=", "0.5", ",", "\n", "hflag", "=", "False", ",", "\n", "aug_ratio", "=", "0.5", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "instaboostfast", "as", "instaboost", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "'Please run \"pip install instaboostfast\" '", "\n", "'to install instaboostfast first for instaboost augmentation.'", ")", "\n", "", "self", ".", "cfg", "=", "instaboost", ".", "InstaBoostConfig", "(", "action_candidate", ",", "action_prob", ",", "\n", "scale", ",", "dx", ",", "dy", ",", "theta", ",", "\n", "color_prob", ",", "hflag", ")", "\n", "self", ".", "aug_ratio", "=", "aug_ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.instaboost.InstaBoost._load_anns": [[36, 57], ["len", "range", "anns.append"], "methods", ["None"], ["", "def", "_load_anns", "(", "self", ",", "results", ")", ":", "\n", "        ", "labels", "=", "results", "[", "'ann_info'", "]", "[", "'labels'", "]", "\n", "masks", "=", "results", "[", "'ann_info'", "]", "[", "'masks'", "]", "\n", "bboxes", "=", "results", "[", "'ann_info'", "]", "[", "'bboxes'", "]", "\n", "n", "=", "len", "(", "labels", ")", "\n", "\n", "anns", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "label", "=", "labels", "[", "i", "]", "\n", "bbox", "=", "bboxes", "[", "i", "]", "\n", "mask", "=", "masks", "[", "i", "]", "\n", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "bbox", "\n", "# assert (x2 - x1) >= 1 and (y2 - y1) >= 1", "\n", "bbox", "=", "[", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", "]", "\n", "anns", ".", "append", "(", "{", "\n", "'category_id'", ":", "label", ",", "\n", "'segmentation'", ":", "mask", ",", "\n", "'bbox'", ":", "bbox", "\n", "}", ")", "\n", "\n", "", "return", "anns", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.instaboost.InstaBoost._parse_anns": [[58, 78], ["numpy.array", "numpy.array", "numpy.array.append", "numpy.array.append", "gt_masks_ann.append"], "methods", ["None"], ["", "def", "_parse_anns", "(", "self", ",", "results", ",", "anns", ",", "img", ")", ":", "\n", "        ", "gt_bboxes", "=", "[", "]", "\n", "gt_labels", "=", "[", "]", "\n", "gt_masks_ann", "=", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "            ", "x1", ",", "y1", ",", "w", ",", "h", "=", "ann", "[", "'bbox'", "]", "\n", "# TODO: more essential bug need to be fixed in instaboost", "\n", "if", "w", "<=", "0", "or", "h", "<=", "0", ":", "\n", "                ", "continue", "\n", "", "bbox", "=", "[", "x1", ",", "y1", ",", "x1", "+", "w", ",", "y1", "+", "h", "]", "\n", "gt_bboxes", ".", "append", "(", "bbox", ")", "\n", "gt_labels", ".", "append", "(", "ann", "[", "'category_id'", "]", ")", "\n", "gt_masks_ann", ".", "append", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "", "gt_bboxes", "=", "np", ".", "array", "(", "gt_bboxes", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "gt_labels", "=", "np", ".", "array", "(", "gt_labels", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "results", "[", "'ann_info'", "]", "[", "'labels'", "]", "=", "gt_labels", "\n", "results", "[", "'ann_info'", "]", "[", "'bboxes'", "]", "=", "gt_bboxes", "\n", "results", "[", "'ann_info'", "]", "[", "'masks'", "]", "=", "gt_masks_ann", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.instaboost.InstaBoost.__call__": [[79, 94], ["instaboost.InstaBoost._load_anns", "numpy.random.choice", "instaboost.InstaBoost._parse_anns", "instaboost.get_new_data", "img.astype", "img.astype", "ImportError"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.instaboost.InstaBoost._load_anns", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.instaboost.InstaBoost._parse_anns"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "img", "=", "results", "[", "'img'", "]", "\n", "orig_type", "=", "img", ".", "dtype", "\n", "anns", "=", "self", ".", "_load_anns", "(", "results", ")", "\n", "if", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ",", "p", "=", "[", "1", "-", "self", ".", "aug_ratio", ",", "self", ".", "aug_ratio", "]", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "import", "instaboostfast", "as", "instaboost", "\n", "", "except", "ImportError", ":", "\n", "                ", "raise", "ImportError", "(", "'Please run \"pip install instaboostfast\" '", "\n", "'to install instaboostfast first.'", ")", "\n", "", "anns", ",", "img", "=", "instaboost", ".", "get_new_data", "(", "\n", "anns", ",", "img", ".", "astype", "(", "np", ".", "uint8", ")", ",", "self", ".", "cfg", ",", "background", "=", "None", ")", "\n", "\n", "", "results", "=", "self", ".", "_parse_anns", "(", "results", ",", "anns", ",", "img", ".", "astype", "(", "orig_type", ")", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.instaboost.InstaBoost.__repr__": [[95, 99], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(cfg={self.cfg}, aug_ratio={self.aug_ratio})'", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.AutoAugment.__init__": [[89, 102], ["copy.deepcopy", "isinstance", "compose.Compose", "len", "isinstance", "len", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "policies", ")", ":", "\n", "        ", "assert", "isinstance", "(", "policies", ",", "list", ")", "and", "len", "(", "policies", ")", ">", "0", ",", "'Policies must be a non-empty list.'", "\n", "for", "policy", "in", "policies", ":", "\n", "            ", "assert", "isinstance", "(", "policy", ",", "list", ")", "and", "len", "(", "policy", ")", ">", "0", ",", "'Each policy in policies must be a non-empty list.'", "\n", "for", "augment", "in", "policy", ":", "\n", "                ", "assert", "isinstance", "(", "augment", ",", "dict", ")", "and", "'type'", "in", "augment", ",", "'Each specific augmentation must be a dict with key'", "' \"type\".'", "\n", "\n", "", "", "self", ".", "policies", "=", "copy", ".", "deepcopy", "(", "policies", ")", "\n", "self", ".", "transforms", "=", "[", "Compose", "(", "policy", ")", "for", "policy", "in", "self", ".", "policies", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.AutoAugment.__call__": [[103, 106], ["numpy.random.choice", "numpy.random.choice."], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "transform", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "transforms", ")", "\n", "return", "transform", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.AutoAugment.__repr__": [[107, 109], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}(policies={self.policies})'", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Shear.__init__": [[135, 178], ["isinstance", "isinstance", "numpy.all", "isinstance", "auto_augment.level_to_value", "tuple", "isinstance", "type", "tuple", "ValueError", "type", "len", "float", "len", "float"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.level_to_value"], ["def", "__init__", "(", "self", ",", "\n", "level", ",", "\n", "img_fill_val", "=", "128", ",", "\n", "seg_ignore_label", "=", "255", ",", "\n", "prob", "=", "0.5", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "max_shear_magnitude", "=", "0.3", ",", "\n", "random_negative_prob", "=", "0.5", ",", "\n", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "assert", "isinstance", "(", "level", ",", "(", "int", ",", "float", ")", ")", ",", "'The level must be type '", "f'int or float, got {type(level)}.'", "\n", "assert", "0", "<=", "level", "<=", "_MAX_LEVEL", ",", "'The level should be in range '", "f'[0,{_MAX_LEVEL}], got {level}.'", "\n", "if", "isinstance", "(", "img_fill_val", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "img_fill_val", "=", "tuple", "(", "[", "float", "(", "img_fill_val", ")", "]", "*", "3", ")", "\n", "", "elif", "isinstance", "(", "img_fill_val", ",", "tuple", ")", ":", "\n", "            ", "assert", "len", "(", "img_fill_val", ")", "==", "3", ",", "'img_fill_val as tuple must '", "f'have 3 elements. got {len(img_fill_val)}.'", "\n", "img_fill_val", "=", "tuple", "(", "[", "float", "(", "val", ")", "for", "val", "in", "img_fill_val", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'img_fill_val must be float or tuple with 3 elements.'", ")", "\n", "", "assert", "np", ".", "all", "(", "[", "0", "<=", "val", "<=", "255", "for", "val", "in", "img_fill_val", "]", ")", ",", "'all '", "'elements of img_fill_val should between range [0,255].'", "f'got {img_fill_val}.'", "\n", "assert", "0", "<=", "prob", "<=", "1.0", ",", "'The probability of shear should be in '", "f'range [0,1]. got {prob}.'", "\n", "assert", "direction", "in", "(", "'horizontal'", ",", "'vertical'", ")", ",", "'direction must '", "f'in be either \"horizontal\" or \"vertical\". got {direction}.'", "\n", "assert", "isinstance", "(", "max_shear_magnitude", ",", "float", ")", ",", "'max_shear_magnitude '", "f'should be type float. got {type(max_shear_magnitude)}.'", "\n", "assert", "0.", "<=", "max_shear_magnitude", "<=", "1.", ",", "'Defaultly '", "'max_shear_magnitude should be in range [0,1]. '", "f'got {max_shear_magnitude}.'", "\n", "self", ".", "level", "=", "level", "\n", "self", ".", "magnitude", "=", "level_to_value", "(", "level", ",", "max_shear_magnitude", ")", "\n", "self", ".", "img_fill_val", "=", "img_fill_val", "\n", "self", ".", "seg_ignore_label", "=", "seg_ignore_label", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "direction", "=", "direction", "\n", "self", ".", "max_shear_magnitude", "=", "max_shear_magnitude", "\n", "self", ".", "random_negative_prob", "=", "random_negative_prob", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Shear._shear_img": [[179, 202], ["results.get", "mmcv.imshear", "mmcv.imshear.astype"], "methods", ["None"], ["", "def", "_shear_img", "(", "self", ",", "\n", "results", ",", "\n", "magnitude", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "\"\"\"Shear the image.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n            magnitude (int | float): The magnitude used for shear.\n            direction (str): The direction for shear, either \"horizontal\"\n                or \"vertical\".\n            interpolation (str): Same as in :func:`mmcv.imshear`.\n        \"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'img_fields'", ",", "[", "'img'", "]", ")", ":", "\n", "            ", "img", "=", "results", "[", "key", "]", "\n", "img_sheared", "=", "mmcv", ".", "imshear", "(", "\n", "img", ",", "\n", "magnitude", ",", "\n", "direction", ",", "\n", "border_value", "=", "self", ".", "img_fill_val", ",", "\n", "interpolation", "=", "interpolation", ")", "\n", "results", "[", "key", "]", "=", "img_sheared", ".", "astype", "(", "img", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Shear._shear_bboxes": [[203, 232], ["results.get", "numpy.stack().astype", "numpy.stack().astype", "numpy.split", "numpy.stack", "coordinates[].transpose().astype", "numpy.matmul", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.stack().astype", "numpy.stack", "numpy.stack", "coordinates[].transpose", "numpy.stack"], "methods", ["None"], ["", "", "def", "_shear_bboxes", "(", "self", ",", "results", ",", "magnitude", ")", ":", "\n", "        ", "\"\"\"Shear the bboxes.\"\"\"", "\n", "h", ",", "w", ",", "c", "=", "results", "[", "'img_shape'", "]", "\n", "if", "self", ".", "direction", "==", "'horizontal'", ":", "\n", "            ", "shear_matrix", "=", "np", ".", "stack", "(", "[", "[", "1", ",", "magnitude", "]", ",", "\n", "[", "0", ",", "1", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "# [2, 2]", "\n", "", "else", ":", "\n", "            ", "shear_matrix", "=", "np", ".", "stack", "(", "[", "[", "1", ",", "0", "]", ",", "[", "magnitude", ",", "\n", "1", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "for", "key", "in", "results", ".", "get", "(", "'bbox_fields'", ",", "[", "]", ")", ":", "\n", "            ", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", "=", "np", ".", "split", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "key", "]", ".", "shape", "[", "-", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "coordinates", "=", "np", ".", "stack", "(", "[", "[", "min_x", ",", "min_y", "]", ",", "[", "max_x", ",", "min_y", "]", ",", "\n", "[", "min_x", ",", "max_y", "]", ",", "\n", "[", "max_x", ",", "max_y", "]", "]", ")", "# [4, 2, nb_box, 1]", "\n", "coordinates", "=", "coordinates", "[", "...", ",", "0", "]", ".", "transpose", "(", "\n", "(", "2", ",", "1", ",", "0", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "# [nb_box, 2, 4]", "\n", "new_coords", "=", "np", ".", "matmul", "(", "shear_matrix", "[", "None", ",", ":", ",", ":", "]", ",", "\n", "coordinates", ")", "# [nb_box, 2, 4]", "\n", "min_x", "=", "np", ".", "min", "(", "new_coords", "[", ":", ",", "0", ",", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "min_y", "=", "np", ".", "min", "(", "new_coords", "[", ":", ",", "1", ",", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "max_x", "=", "np", ".", "max", "(", "new_coords", "[", ":", ",", "0", ",", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "max_y", "=", "np", ".", "max", "(", "new_coords", "[", ":", ",", "1", ",", ":", "]", ",", "axis", "=", "-", "1", ")", "\n", "min_x", "=", "np", ".", "clip", "(", "min_x", ",", "a_min", "=", "0", ",", "a_max", "=", "w", ")", "\n", "min_y", "=", "np", ".", "clip", "(", "min_y", ",", "a_min", "=", "0", ",", "a_max", "=", "h", ")", "\n", "max_x", "=", "np", ".", "clip", "(", "max_x", ",", "a_min", "=", "min_x", ",", "a_max", "=", "w", ")", "\n", "max_y", "=", "np", ".", "clip", "(", "max_y", ",", "a_min", "=", "min_y", ",", "a_max", "=", "h", ")", "\n", "results", "[", "key", "]", "=", "np", ".", "stack", "(", "[", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", "]", ",", "\n", "axis", "=", "-", "1", ")", ".", "astype", "(", "results", "[", "key", "]", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Shear._shear_masks": [[233, 248], ["results.get", "masks.shear"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.shear"], ["", "", "def", "_shear_masks", "(", "self", ",", "\n", "results", ",", "\n", "magnitude", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "fill_val", "=", "0", ",", "\n", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "\"\"\"Shear the masks.\"\"\"", "\n", "h", ",", "w", ",", "c", "=", "results", "[", "'img_shape'", "]", "\n", "for", "key", "in", "results", ".", "get", "(", "'mask_fields'", ",", "[", "]", ")", ":", "\n", "            ", "masks", "=", "results", "[", "key", "]", "\n", "results", "[", "key", "]", "=", "masks", ".", "shear", "(", "(", "h", ",", "w", ")", ",", "\n", "magnitude", ",", "\n", "direction", ",", "\n", "border_value", "=", "fill_val", ",", "\n", "interpolation", "=", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Shear._shear_seg": [[249, 264], ["results.get", "mmcv.imshear().astype", "mmcv.imshear"], "methods", ["None"], ["", "", "def", "_shear_seg", "(", "self", ",", "\n", "results", ",", "\n", "magnitude", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "fill_val", "=", "255", ",", "\n", "interpolation", "=", "'bilinear'", ")", ":", "\n", "        ", "\"\"\"Shear the segmentation maps.\"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "seg", "=", "results", "[", "key", "]", "\n", "results", "[", "key", "]", "=", "mmcv", ".", "imshear", "(", "\n", "seg", ",", "\n", "magnitude", ",", "\n", "direction", ",", "\n", "border_value", "=", "fill_val", ",", "\n", "interpolation", "=", "interpolation", ")", ".", "astype", "(", "seg", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Shear._filter_invalid": [[265, 283], ["auto_augment.bbox2fields", "results.get", "bbox2label.get", "bbox2mask.get", "numpy.nonzero"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.bbox2fields"], ["", "", "def", "_filter_invalid", "(", "self", ",", "results", ",", "min_bbox_size", "=", "0", ")", ":", "\n", "        ", "\"\"\"Filter bboxes and corresponding masks too small after shear\n        augmentation.\"\"\"", "\n", "bbox2label", ",", "bbox2mask", ",", "_", "=", "bbox2fields", "(", ")", "\n", "for", "key", "in", "results", ".", "get", "(", "'bbox_fields'", ",", "[", "]", ")", ":", "\n", "            ", "bbox_w", "=", "results", "[", "key", "]", "[", ":", ",", "2", "]", "-", "results", "[", "key", "]", "[", ":", ",", "0", "]", "\n", "bbox_h", "=", "results", "[", "key", "]", "[", ":", ",", "3", "]", "-", "results", "[", "key", "]", "[", ":", ",", "1", "]", "\n", "valid_inds", "=", "(", "bbox_w", ">", "min_bbox_size", ")", "&", "(", "bbox_h", ">", "min_bbox_size", ")", "\n", "valid_inds", "=", "np", ".", "nonzero", "(", "valid_inds", ")", "[", "0", "]", "\n", "results", "[", "key", "]", "=", "results", "[", "key", "]", "[", "valid_inds", "]", "\n", "# label fields. e.g. gt_labels and gt_labels_ignore", "\n", "label_key", "=", "bbox2label", ".", "get", "(", "key", ")", "\n", "if", "label_key", "in", "results", ":", "\n", "                ", "results", "[", "label_key", "]", "=", "results", "[", "label_key", "]", "[", "valid_inds", "]", "\n", "# mask fields, e.g. gt_masks and gt_masks_ignore", "\n", "", "mask_key", "=", "bbox2mask", ".", "get", "(", "key", ")", "\n", "if", "mask_key", "in", "results", ":", "\n", "                ", "results", "[", "mask_key", "]", "=", "results", "[", "mask_key", "]", "[", "valid_inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Shear.__call__": [[284, 314], ["auto_augment.random_negative", "auto_augment.Shear._shear_img", "auto_augment.Shear._shear_bboxes", "auto_augment.Shear._shear_masks", "auto_augment.Shear._shear_seg", "auto_augment.Shear._filter_invalid", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.random_negative", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Shear._shear_img", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Shear._shear_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Shear._shear_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Shear._shear_seg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate._filter_invalid"], ["", "", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to shear images, bounding boxes, masks and semantic\n        segmentation maps.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Sheared results.\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "return", "results", "\n", "", "magnitude", "=", "random_negative", "(", "self", ".", "magnitude", ",", "self", ".", "random_negative_prob", ")", "\n", "self", ".", "_shear_img", "(", "results", ",", "magnitude", ",", "self", ".", "direction", ",", "self", ".", "interpolation", ")", "\n", "self", ".", "_shear_bboxes", "(", "results", ",", "magnitude", ")", "\n", "# fill_val set to 0 for background of mask.", "\n", "self", ".", "_shear_masks", "(", "\n", "results", ",", "\n", "magnitude", ",", "\n", "self", ".", "direction", ",", "\n", "fill_val", "=", "0", ",", "\n", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "self", ".", "_shear_seg", "(", "\n", "results", ",", "\n", "magnitude", ",", "\n", "self", ".", "direction", ",", "\n", "fill_val", "=", "self", ".", "seg_ignore_label", ",", "\n", "interpolation", "=", "self", ".", "interpolation", ")", "\n", "self", ".", "_filter_invalid", "(", "results", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Shear.__repr__": [[315, 326], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(level={self.level}, '", "\n", "repr_str", "+=", "f'img_fill_val={self.img_fill_val}, '", "\n", "repr_str", "+=", "f'seg_ignore_label={self.seg_ignore_label}, '", "\n", "repr_str", "+=", "f'prob={self.prob}, '", "\n", "repr_str", "+=", "f'direction={self.direction}, '", "\n", "repr_str", "+=", "f'max_shear_magnitude={self.max_shear_magnitude}, '", "\n", "repr_str", "+=", "f'random_negative_prob={self.random_negative_prob}, '", "\n", "repr_str", "+=", "f'interpolation={self.interpolation})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Rotate.__init__": [[355, 405], ["isinstance", "isinstance", "isinstance", "isinstance", "numpy.all", "isinstance", "auto_augment.level_to_value", "isinstance", "tuple", "isinstance", "type", "type", "tuple", "ValueError", "type", "len", "len", "len", "type", "float", "len", "float"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.level_to_value"], ["def", "__init__", "(", "self", ",", "\n", "level", ",", "\n", "scale", "=", "1", ",", "\n", "center", "=", "None", ",", "\n", "img_fill_val", "=", "128", ",", "\n", "seg_ignore_label", "=", "255", ",", "\n", "prob", "=", "0.5", ",", "\n", "max_rotate_angle", "=", "30", ",", "\n", "random_negative_prob", "=", "0.5", ")", ":", "\n", "        ", "assert", "isinstance", "(", "level", ",", "(", "int", ",", "float", ")", ")", ",", "f'The level must be type int or float. got {type(level)}.'", "\n", "assert", "0", "<=", "level", "<=", "_MAX_LEVEL", ",", "f'The level should be in range (0,{_MAX_LEVEL}]. got {level}.'", "\n", "assert", "isinstance", "(", "scale", ",", "(", "int", ",", "float", ")", ")", ",", "f'The scale must be type int or float. got type {type(scale)}.'", "\n", "if", "isinstance", "(", "center", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "center", "=", "(", "center", ",", "center", ")", "\n", "", "elif", "isinstance", "(", "center", ",", "tuple", ")", ":", "\n", "            ", "assert", "len", "(", "center", ")", "==", "2", ",", "'center with type tuple must have '", "f'2 elements. got {len(center)} elements.'", "\n", "", "else", ":", "\n", "            ", "assert", "center", "is", "None", ",", "'center must be None or type int, '", "f'float or tuple, got type {type(center)}.'", "\n", "", "if", "isinstance", "(", "img_fill_val", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "img_fill_val", "=", "tuple", "(", "[", "float", "(", "img_fill_val", ")", "]", "*", "3", ")", "\n", "", "elif", "isinstance", "(", "img_fill_val", ",", "tuple", ")", ":", "\n", "            ", "assert", "len", "(", "img_fill_val", ")", "==", "3", ",", "'img_fill_val as tuple must '", "f'have 3 elements. got {len(img_fill_val)}.'", "\n", "img_fill_val", "=", "tuple", "(", "[", "float", "(", "val", ")", "for", "val", "in", "img_fill_val", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'img_fill_val must be float or tuple with 3 elements.'", ")", "\n", "", "assert", "np", ".", "all", "(", "[", "0", "<=", "val", "<=", "255", "for", "val", "in", "img_fill_val", "]", ")", ",", "'all elements of img_fill_val should between range [0,255]. '", "f'got {img_fill_val}.'", "\n", "assert", "0", "<=", "prob", "<=", "1.0", ",", "'The probability should be in range [0,1]. '", "'got {prob}.'", "\n", "assert", "isinstance", "(", "max_rotate_angle", ",", "(", "int", ",", "float", ")", ")", ",", "'max_rotate_angle '", "f'should be type int or float. got type {type(max_rotate_angle)}.'", "\n", "self", ".", "level", "=", "level", "\n", "self", ".", "scale", "=", "scale", "\n", "# Rotation angle in degrees. Positive values mean", "\n", "# clockwise rotation.", "\n", "self", ".", "angle", "=", "level_to_value", "(", "level", ",", "max_rotate_angle", ")", "\n", "self", ".", "center", "=", "center", "\n", "self", ".", "img_fill_val", "=", "img_fill_val", "\n", "self", ".", "seg_ignore_label", "=", "seg_ignore_label", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "max_rotate_angle", "=", "max_rotate_angle", "\n", "self", ".", "random_negative_prob", "=", "random_negative_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Rotate._rotate_img": [[406, 423], ["results.get", "results[].copy", "mmcv.imrotate", "mmcv.imrotate.astype"], "methods", ["None"], ["", "def", "_rotate_img", "(", "self", ",", "results", ",", "angle", ",", "center", "=", "None", ",", "scale", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"Rotate the image.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n            angle (float): Rotation angle in degrees, positive values\n                mean clockwise rotation. Same in ``mmcv.imrotate``.\n            center (tuple[float], optional): Center point (w, h) of the\n                rotation. Same in ``mmcv.imrotate``.\n            scale (int | float): Isotropic scale factor. Same in\n                ``mmcv.imrotate``.\n        \"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'img_fields'", ",", "[", "'img'", "]", ")", ":", "\n", "            ", "img", "=", "results", "[", "key", "]", ".", "copy", "(", ")", "\n", "img_rotated", "=", "mmcv", ".", "imrotate", "(", "\n", "img", ",", "angle", ",", "center", ",", "scale", ",", "border_value", "=", "self", ".", "img_fill_val", ")", "\n", "results", "[", "key", "]", "=", "img_rotated", ".", "astype", "(", "img", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Rotate._rotate_bboxes": [[424, 458], ["results.get", "numpy.split", "numpy.stack", "numpy.concatenate", "coordinates.transpose.transpose.transpose", "numpy.matmul", "numpy.stack().astype", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.ones", "numpy.stack"], "methods", ["None"], ["", "", "def", "_rotate_bboxes", "(", "self", ",", "results", ",", "rotate_matrix", ")", ":", "\n", "        ", "\"\"\"Rotate the bboxes.\"\"\"", "\n", "h", ",", "w", ",", "c", "=", "results", "[", "'img_shape'", "]", "\n", "for", "key", "in", "results", ".", "get", "(", "'bbox_fields'", ",", "[", "]", ")", ":", "\n", "            ", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", "=", "np", ".", "split", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "key", "]", ".", "shape", "[", "-", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "coordinates", "=", "np", ".", "stack", "(", "[", "[", "min_x", ",", "min_y", "]", ",", "[", "max_x", ",", "min_y", "]", ",", "\n", "[", "min_x", ",", "max_y", "]", ",", "\n", "[", "max_x", ",", "max_y", "]", "]", ")", "# [4, 2, nb_bbox, 1]", "\n", "# pad 1 to convert from format [x, y] to homogeneous", "\n", "# coordinates format [x, y, 1]", "\n", "coordinates", "=", "np", ".", "concatenate", "(", "\n", "(", "coordinates", ",", "\n", "np", ".", "ones", "(", "(", "4", ",", "1", ",", "coordinates", ".", "shape", "[", "2", "]", ",", "1", ")", ",", "coordinates", ".", "dtype", ")", ")", ",", "\n", "axis", "=", "1", ")", "# [4, 3, nb_bbox, 1]", "\n", "coordinates", "=", "coordinates", ".", "transpose", "(", "\n", "(", "2", ",", "0", ",", "1", ",", "3", ")", ")", "# [nb_bbox, 4, 3, 1]", "\n", "rotated_coords", "=", "np", ".", "matmul", "(", "rotate_matrix", ",", "\n", "coordinates", ")", "# [nb_bbox, 4, 2, 1]", "\n", "rotated_coords", "=", "rotated_coords", "[", "...", ",", "0", "]", "# [nb_bbox, 4, 2]", "\n", "min_x", ",", "min_y", "=", "np", ".", "min", "(", "\n", "rotated_coords", "[", ":", ",", ":", ",", "0", "]", ",", "axis", "=", "1", ")", ",", "np", ".", "min", "(", "\n", "rotated_coords", "[", ":", ",", ":", ",", "1", "]", ",", "axis", "=", "1", ")", "\n", "max_x", ",", "max_y", "=", "np", ".", "max", "(", "\n", "rotated_coords", "[", ":", ",", ":", ",", "0", "]", ",", "axis", "=", "1", ")", ",", "np", ".", "max", "(", "\n", "rotated_coords", "[", ":", ",", ":", ",", "1", "]", ",", "axis", "=", "1", ")", "\n", "min_x", ",", "min_y", "=", "np", ".", "clip", "(", "\n", "min_x", ",", "a_min", "=", "0", ",", "a_max", "=", "w", ")", ",", "np", ".", "clip", "(", "\n", "min_y", ",", "a_min", "=", "0", ",", "a_max", "=", "h", ")", "\n", "max_x", ",", "max_y", "=", "np", ".", "clip", "(", "\n", "max_x", ",", "a_min", "=", "min_x", ",", "a_max", "=", "w", ")", ",", "np", ".", "clip", "(", "\n", "max_y", ",", "a_min", "=", "min_y", ",", "a_max", "=", "h", ")", "\n", "results", "[", "key", "]", "=", "np", ".", "stack", "(", "[", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", "]", ",", "\n", "axis", "=", "-", "1", ")", ".", "astype", "(", "results", "[", "key", "]", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Rotate._rotate_masks": [[459, 470], ["results.get", "masks.rotate"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.rotate"], ["", "", "def", "_rotate_masks", "(", "self", ",", "\n", "results", ",", "\n", "angle", ",", "\n", "center", "=", "None", ",", "\n", "scale", "=", "1.0", ",", "\n", "fill_val", "=", "0", ")", ":", "\n", "        ", "\"\"\"Rotate the masks.\"\"\"", "\n", "h", ",", "w", ",", "c", "=", "results", "[", "'img_shape'", "]", "\n", "for", "key", "in", "results", ".", "get", "(", "'mask_fields'", ",", "[", "]", ")", ":", "\n", "            ", "masks", "=", "results", "[", "key", "]", "\n", "results", "[", "key", "]", "=", "masks", ".", "rotate", "(", "(", "h", ",", "w", ")", ",", "angle", ",", "center", ",", "scale", ",", "fill_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Rotate._rotate_seg": [[471, 483], ["results.get", "results[].copy", "mmcv.imrotate().astype", "mmcv.imrotate"], "methods", ["None"], ["", "", "def", "_rotate_seg", "(", "self", ",", "\n", "results", ",", "\n", "angle", ",", "\n", "center", "=", "None", ",", "\n", "scale", "=", "1.0", ",", "\n", "fill_val", "=", "255", ")", ":", "\n", "        ", "\"\"\"Rotate the segmentation map.\"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "seg", "=", "results", "[", "key", "]", ".", "copy", "(", ")", "\n", "results", "[", "key", "]", "=", "mmcv", ".", "imrotate", "(", "\n", "seg", ",", "angle", ",", "center", ",", "scale", ",", "\n", "border_value", "=", "fill_val", ")", ".", "astype", "(", "seg", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Rotate._filter_invalid": [[484, 502], ["auto_augment.bbox2fields", "results.get", "bbox2label.get", "bbox2mask.get", "numpy.nonzero"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.bbox2fields"], ["", "", "def", "_filter_invalid", "(", "self", ",", "results", ",", "min_bbox_size", "=", "0", ")", ":", "\n", "        ", "\"\"\"Filter bboxes and corresponding masks too small after rotate\n        augmentation.\"\"\"", "\n", "bbox2label", ",", "bbox2mask", ",", "_", "=", "bbox2fields", "(", ")", "\n", "for", "key", "in", "results", ".", "get", "(", "'bbox_fields'", ",", "[", "]", ")", ":", "\n", "            ", "bbox_w", "=", "results", "[", "key", "]", "[", ":", ",", "2", "]", "-", "results", "[", "key", "]", "[", ":", ",", "0", "]", "\n", "bbox_h", "=", "results", "[", "key", "]", "[", ":", ",", "3", "]", "-", "results", "[", "key", "]", "[", ":", ",", "1", "]", "\n", "valid_inds", "=", "(", "bbox_w", ">", "min_bbox_size", ")", "&", "(", "bbox_h", ">", "min_bbox_size", ")", "\n", "valid_inds", "=", "np", ".", "nonzero", "(", "valid_inds", ")", "[", "0", "]", "\n", "results", "[", "key", "]", "=", "results", "[", "key", "]", "[", "valid_inds", "]", "\n", "# label fields. e.g. gt_labels and gt_labels_ignore", "\n", "label_key", "=", "bbox2label", ".", "get", "(", "key", ")", "\n", "if", "label_key", "in", "results", ":", "\n", "                ", "results", "[", "label_key", "]", "=", "results", "[", "label_key", "]", "[", "valid_inds", "]", "\n", "# mask fields, e.g. gt_masks and gt_masks_ignore", "\n", "", "mask_key", "=", "bbox2mask", ".", "get", "(", "key", ")", "\n", "if", "mask_key", "in", "results", ":", "\n", "                ", "results", "[", "mask_key", "]", "=", "results", "[", "mask_key", "]", "[", "valid_inds", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Rotate.__call__": [[503, 528], ["auto_augment.random_negative", "auto_augment.Rotate._rotate_img", "cv2.getRotationMatrix2D", "auto_augment.Rotate._rotate_bboxes", "auto_augment.Rotate._rotate_masks", "auto_augment.Rotate._rotate_seg", "auto_augment.Rotate._filter_invalid", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.random_negative", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Rotate._rotate_img", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Rotate._rotate_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Rotate._rotate_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Rotate._rotate_seg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate._filter_invalid"], ["", "", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to rotate images, bounding boxes, masks and semantic\n        segmentation maps.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Rotated results.\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "return", "results", "\n", "", "h", ",", "w", "=", "results", "[", "'img'", "]", ".", "shape", "[", ":", "2", "]", "\n", "center", "=", "self", ".", "center", "\n", "if", "center", "is", "None", ":", "\n", "            ", "center", "=", "(", "(", "w", "-", "1", ")", "*", "0.5", ",", "(", "h", "-", "1", ")", "*", "0.5", ")", "\n", "", "angle", "=", "random_negative", "(", "self", ".", "angle", ",", "self", ".", "random_negative_prob", ")", "\n", "self", ".", "_rotate_img", "(", "results", ",", "angle", ",", "center", ",", "self", ".", "scale", ")", "\n", "rotate_matrix", "=", "cv2", ".", "getRotationMatrix2D", "(", "center", ",", "-", "angle", ",", "self", ".", "scale", ")", "\n", "self", ".", "_rotate_bboxes", "(", "results", ",", "rotate_matrix", ")", "\n", "self", ".", "_rotate_masks", "(", "results", ",", "angle", ",", "center", ",", "self", ".", "scale", ",", "fill_val", "=", "0", ")", "\n", "self", ".", "_rotate_seg", "(", "\n", "results", ",", "angle", ",", "center", ",", "self", ".", "scale", ",", "fill_val", "=", "self", ".", "seg_ignore_label", ")", "\n", "self", ".", "_filter_invalid", "(", "results", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Rotate.__repr__": [[529, 540], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(level={self.level}, '", "\n", "repr_str", "+=", "f'scale={self.scale}, '", "\n", "repr_str", "+=", "f'center={self.center}, '", "\n", "repr_str", "+=", "f'img_fill_val={self.img_fill_val}, '", "\n", "repr_str", "+=", "f'seg_ignore_label={self.seg_ignore_label}, '", "\n", "repr_str", "+=", "f'prob={self.prob}, '", "\n", "repr_str", "+=", "f'max_rotate_angle={self.max_rotate_angle}, '", "\n", "repr_str", "+=", "f'random_negative_prob={self.random_negative_prob})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate.__init__": [[569, 609], ["isinstance", "isinstance", "numpy.all", "isinstance", "int", "tuple", "isinstance", "auto_augment.level_to_value", "tuple", "ValueError", "len", "float", "float"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.level_to_value"], ["def", "__init__", "(", "self", ",", "\n", "level", ",", "\n", "prob", "=", "0.5", ",", "\n", "img_fill_val", "=", "128", ",", "\n", "seg_ignore_label", "=", "255", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "max_translate_offset", "=", "250.", ",", "\n", "random_negative_prob", "=", "0.5", ",", "\n", "min_size", "=", "0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "level", ",", "(", "int", ",", "float", ")", ")", ",", "'The level must be type int or float.'", "\n", "assert", "0", "<=", "level", "<=", "_MAX_LEVEL", ",", "'The level used for calculating Translate\\'s offset should be '", "'in range [0,_MAX_LEVEL]'", "\n", "assert", "0", "<=", "prob", "<=", "1.0", ",", "'The probability of translation should be in range [0, 1].'", "\n", "if", "isinstance", "(", "img_fill_val", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "            ", "img_fill_val", "=", "tuple", "(", "[", "float", "(", "img_fill_val", ")", "]", "*", "3", ")", "\n", "", "elif", "isinstance", "(", "img_fill_val", ",", "tuple", ")", ":", "\n", "            ", "assert", "len", "(", "img_fill_val", ")", "==", "3", ",", "'img_fill_val as tuple must have 3 elements.'", "\n", "img_fill_val", "=", "tuple", "(", "[", "float", "(", "val", ")", "for", "val", "in", "img_fill_val", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'img_fill_val must be type float or tuple.'", ")", "\n", "", "assert", "np", ".", "all", "(", "[", "0", "<=", "val", "<=", "255", "for", "val", "in", "img_fill_val", "]", ")", ",", "'all elements of img_fill_val should between range [0,255].'", "\n", "assert", "direction", "in", "(", "'horizontal'", ",", "'vertical'", ")", ",", "'direction should be \"horizontal\" or \"vertical\".'", "\n", "assert", "isinstance", "(", "max_translate_offset", ",", "(", "int", ",", "float", ")", ")", ",", "'The max_translate_offset must be type int or float.'", "\n", "# the offset used for translation", "\n", "self", ".", "offset", "=", "int", "(", "level_to_value", "(", "level", ",", "max_translate_offset", ")", ")", "\n", "self", ".", "level", "=", "level", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "img_fill_val", "=", "img_fill_val", "\n", "self", ".", "seg_ignore_label", "=", "seg_ignore_label", "\n", "self", ".", "direction", "=", "direction", "\n", "self", ".", "max_translate_offset", "=", "max_translate_offset", "\n", "self", ".", "random_negative_prob", "=", "random_negative_prob", "\n", "self", ".", "min_size", "=", "min_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate._translate_img": [[610, 623], ["results.get", "results[].copy", "mmcv.imtranslate().astype", "mmcv.imtranslate"], "methods", ["None"], ["", "def", "_translate_img", "(", "self", ",", "results", ",", "offset", ",", "direction", "=", "'horizontal'", ")", ":", "\n", "        ", "\"\"\"Translate the image.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n            offset (int | float): The offset for translate.\n            direction (str): The translate direction, either \"horizontal\"\n                or \"vertical\".\n        \"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'img_fields'", ",", "[", "'img'", "]", ")", ":", "\n", "            ", "img", "=", "results", "[", "key", "]", ".", "copy", "(", ")", "\n", "results", "[", "key", "]", "=", "mmcv", ".", "imtranslate", "(", "\n", "img", ",", "offset", ",", "direction", ",", "self", ".", "img_fill_val", ")", ".", "astype", "(", "img", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate._translate_bboxes": [[624, 641], ["results.get", "numpy.split", "numpy.concatenate", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum"], "methods", ["None"], ["", "", "def", "_translate_bboxes", "(", "self", ",", "results", ",", "offset", ")", ":", "\n", "        ", "\"\"\"Shift bboxes horizontally or vertically, according to offset.\"\"\"", "\n", "h", ",", "w", ",", "c", "=", "results", "[", "'img_shape'", "]", "\n", "for", "key", "in", "results", ".", "get", "(", "'bbox_fields'", ",", "[", "]", ")", ":", "\n", "            ", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", "=", "np", ".", "split", "(", "\n", "results", "[", "key", "]", ",", "results", "[", "key", "]", ".", "shape", "[", "-", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "if", "self", ".", "direction", "==", "'horizontal'", ":", "\n", "                ", "min_x", "=", "np", ".", "maximum", "(", "0", ",", "min_x", "+", "offset", ")", "\n", "max_x", "=", "np", ".", "minimum", "(", "w", ",", "max_x", "+", "offset", ")", "\n", "", "elif", "self", ".", "direction", "==", "'vertical'", ":", "\n", "                ", "min_y", "=", "np", ".", "maximum", "(", "0", ",", "min_y", "+", "offset", ")", "\n", "max_y", "=", "np", ".", "minimum", "(", "h", ",", "max_y", "+", "offset", ")", "\n", "\n", "# the boxes translated outside of image will be filtered along with", "\n", "# the corresponding masks, by invoking ``_filter_invalid``.", "\n", "", "results", "[", "key", "]", "=", "np", ".", "concatenate", "(", "[", "min_x", ",", "min_y", ",", "max_x", ",", "max_y", "]", ",", "\n", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate._translate_masks": [[642, 652], ["results.get", "masks.translate"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.structures.PolygonMasks.translate"], ["", "", "def", "_translate_masks", "(", "self", ",", "\n", "results", ",", "\n", "offset", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "fill_val", "=", "0", ")", ":", "\n", "        ", "\"\"\"Translate masks horizontally or vertically.\"\"\"", "\n", "h", ",", "w", ",", "c", "=", "results", "[", "'img_shape'", "]", "\n", "for", "key", "in", "results", ".", "get", "(", "'mask_fields'", ",", "[", "]", ")", ":", "\n", "            ", "masks", "=", "results", "[", "key", "]", "\n", "results", "[", "key", "]", "=", "masks", ".", "translate", "(", "(", "h", ",", "w", ")", ",", "offset", ",", "direction", ",", "fill_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate._translate_seg": [[653, 663], ["results.get", "results[].copy", "mmcv.imtranslate().astype", "mmcv.imtranslate"], "methods", ["None"], ["", "", "def", "_translate_seg", "(", "self", ",", "\n", "results", ",", "\n", "offset", ",", "\n", "direction", "=", "'horizontal'", ",", "\n", "fill_val", "=", "255", ")", ":", "\n", "        ", "\"\"\"Translate segmentation maps horizontally or vertically.\"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'seg_fields'", ",", "[", "]", ")", ":", "\n", "            ", "seg", "=", "results", "[", "key", "]", ".", "copy", "(", ")", "\n", "results", "[", "key", "]", "=", "mmcv", ".", "imtranslate", "(", "seg", ",", "offset", ",", "direction", ",", "\n", "fill_val", ")", ".", "astype", "(", "seg", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate._filter_invalid": [[664, 682], ["auto_augment.bbox2fields", "results.get", "bbox2label.get", "bbox2mask.get", "numpy.nonzero"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.bbox2fields"], ["", "", "def", "_filter_invalid", "(", "self", ",", "results", ",", "min_size", "=", "0", ")", ":", "\n", "        ", "\"\"\"Filter bboxes and masks too small or translated out of image.\"\"\"", "\n", "bbox2label", ",", "bbox2mask", ",", "_", "=", "bbox2fields", "(", ")", "\n", "for", "key", "in", "results", ".", "get", "(", "'bbox_fields'", ",", "[", "]", ")", ":", "\n", "            ", "bbox_w", "=", "results", "[", "key", "]", "[", ":", ",", "2", "]", "-", "results", "[", "key", "]", "[", ":", ",", "0", "]", "\n", "bbox_h", "=", "results", "[", "key", "]", "[", ":", ",", "3", "]", "-", "results", "[", "key", "]", "[", ":", ",", "1", "]", "\n", "valid_inds", "=", "(", "bbox_w", ">", "min_size", ")", "&", "(", "bbox_h", ">", "min_size", ")", "\n", "valid_inds", "=", "np", ".", "nonzero", "(", "valid_inds", ")", "[", "0", "]", "\n", "results", "[", "key", "]", "=", "results", "[", "key", "]", "[", "valid_inds", "]", "\n", "# label fields. e.g. gt_labels and gt_labels_ignore", "\n", "label_key", "=", "bbox2label", ".", "get", "(", "key", ")", "\n", "if", "label_key", "in", "results", ":", "\n", "                ", "results", "[", "label_key", "]", "=", "results", "[", "label_key", "]", "[", "valid_inds", "]", "\n", "# mask fields, e.g. gt_masks and gt_masks_ignore", "\n", "", "mask_key", "=", "bbox2mask", ".", "get", "(", "key", ")", "\n", "if", "mask_key", "in", "results", ":", "\n", "                ", "results", "[", "mask_key", "]", "=", "results", "[", "mask_key", "]", "[", "valid_inds", "]", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate.__call__": [[683, 706], ["auto_augment.random_negative", "auto_augment.Translate._translate_img", "auto_augment.Translate._translate_bboxes", "auto_augment.Translate._translate_masks", "auto_augment.Translate._translate_seg", "auto_augment.Translate._filter_invalid", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.random_negative", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate._translate_img", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate._translate_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate._translate_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate._translate_seg", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.Translate._filter_invalid"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to translate images, bounding boxes, masks and\n        semantic segmentation maps.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Translated results.\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "return", "results", "\n", "", "offset", "=", "random_negative", "(", "self", ".", "offset", ",", "self", ".", "random_negative_prob", ")", "\n", "self", ".", "_translate_img", "(", "results", ",", "offset", ",", "self", ".", "direction", ")", "\n", "self", ".", "_translate_bboxes", "(", "results", ",", "offset", ")", "\n", "# fill_val defaultly 0 for BitmapMasks and None for PolygonMasks.", "\n", "self", ".", "_translate_masks", "(", "results", ",", "offset", ",", "self", ".", "direction", ")", "\n", "# fill_val set to ``seg_ignore_label`` for the ignored value", "\n", "# of segmentation map.", "\n", "self", ".", "_translate_seg", "(", "\n", "results", ",", "offset", ",", "self", ".", "direction", ",", "fill_val", "=", "self", ".", "seg_ignore_label", ")", "\n", "self", ".", "_filter_invalid", "(", "results", ",", "min_size", "=", "self", ".", "min_size", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.ColorTransform.__init__": [[718, 728], ["isinstance", "auto_augment.enhance_level_to_value"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.enhance_level_to_value"], ["def", "__init__", "(", "self", ",", "level", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "assert", "isinstance", "(", "level", ",", "(", "int", ",", "float", ")", ")", ",", "'The level must be type int or float.'", "\n", "assert", "0", "<=", "level", "<=", "_MAX_LEVEL", ",", "'The level should be in range [0,_MAX_LEVEL].'", "\n", "assert", "0", "<=", "prob", "<=", "1.0", ",", "'The probability should be in range [0,1].'", "\n", "self", ".", "level", "=", "level", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "factor", "=", "enhance_level_to_value", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.ColorTransform._adjust_color_img": [[729, 735], ["results.get", "mmcv.adjust_color().astype", "mmcv.adjust_color"], "methods", ["None"], ["", "def", "_adjust_color_img", "(", "self", ",", "results", ",", "factor", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"Apply Color transformation to image.\"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'img_fields'", ",", "[", "'img'", "]", ")", ":", "\n", "# NOTE defaultly the image should be BGR format", "\n", "            ", "img", "=", "results", "[", "key", "]", "\n", "results", "[", "key", "]", "=", "mmcv", ".", "adjust_color", "(", "img", ",", "factor", ")", ".", "astype", "(", "img", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.ColorTransform.__call__": [[736, 749], ["auto_augment.ColorTransform._adjust_color_img", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.ColorTransform._adjust_color_img"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function for Color transformation.\n\n        Args:\n            results (dict): Result dict from loading pipeline.\n\n        Returns:\n            dict: Colored results.\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "return", "results", "\n", "", "self", ".", "_adjust_color_img", "(", "results", ",", "self", ".", "factor", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.ColorTransform.__repr__": [[750, 755], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(level={self.level}, '", "\n", "repr_str", "+=", "f'prob={self.prob})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.EqualizeTransform.__init__": [[766, 770], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "assert", "0", "<=", "prob", "<=", "1.0", ",", "'The probability should be in range [0,1].'", "\n", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.EqualizeTransform._imequalize": [[771, 776], ["results.get", "mmcv.imequalize().astype", "mmcv.imequalize"], "methods", ["None"], ["", "def", "_imequalize", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Equalizes the histogram of one image.\"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'img_fields'", ",", "[", "'img'", "]", ")", ":", "\n", "            ", "img", "=", "results", "[", "key", "]", "\n", "results", "[", "key", "]", "=", "mmcv", ".", "imequalize", "(", "img", ")", ".", "astype", "(", "img", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.EqualizeTransform.__call__": [[777, 790], ["auto_augment.EqualizeTransform._imequalize", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.EqualizeTransform._imequalize"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function for Equalize transformation.\n\n        Args:\n            results (dict): Results dict from loading pipeline.\n\n        Returns:\n            dict: Results after the transformation.\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "return", "results", "\n", "", "self", ".", "_imequalize", "(", "results", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.EqualizeTransform.__repr__": [[791, 794], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(prob={self.prob})'", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.BrightnessTransform.__init__": [[806, 816], ["isinstance", "auto_augment.enhance_level_to_value"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.enhance_level_to_value"], ["def", "__init__", "(", "self", ",", "level", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "assert", "isinstance", "(", "level", ",", "(", "int", ",", "float", ")", ")", ",", "'The level must be type int or float.'", "\n", "assert", "0", "<=", "level", "<=", "_MAX_LEVEL", ",", "'The level should be in range [0,_MAX_LEVEL].'", "\n", "assert", "0", "<=", "prob", "<=", "1.0", ",", "'The probability should be in range [0,1].'", "\n", "self", ".", "level", "=", "level", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "factor", "=", "enhance_level_to_value", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.BrightnessTransform._adjust_brightness_img": [[817, 823], ["results.get", "mmcv.adjust_brightness().astype", "mmcv.adjust_brightness"], "methods", ["None"], ["", "def", "_adjust_brightness_img", "(", "self", ",", "results", ",", "factor", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"Adjust the brightness of image.\"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'img_fields'", ",", "[", "'img'", "]", ")", ":", "\n", "            ", "img", "=", "results", "[", "key", "]", "\n", "results", "[", "key", "]", "=", "mmcv", ".", "adjust_brightness", "(", "img", ",", "\n", "factor", ")", ".", "astype", "(", "img", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.BrightnessTransform.__call__": [[824, 837], ["auto_augment.BrightnessTransform._adjust_brightness_img", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.BrightnessTransform._adjust_brightness_img"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function for Brightness transformation.\n\n        Args:\n            results (dict): Results dict from loading pipeline.\n\n        Returns:\n            dict: Results after the transformation.\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "return", "results", "\n", "", "self", ".", "_adjust_brightness_img", "(", "results", ",", "self", ".", "factor", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.BrightnessTransform.__repr__": [[838, 843], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(level={self.level}, '", "\n", "repr_str", "+=", "f'prob={self.prob})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.ContrastTransform.__init__": [[855, 865], ["isinstance", "auto_augment.enhance_level_to_value"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.enhance_level_to_value"], ["def", "__init__", "(", "self", ",", "level", ",", "prob", "=", "0.5", ")", ":", "\n", "        ", "assert", "isinstance", "(", "level", ",", "(", "int", ",", "float", ")", ")", ",", "'The level must be type int or float.'", "\n", "assert", "0", "<=", "level", "<=", "_MAX_LEVEL", ",", "'The level should be in range [0,_MAX_LEVEL].'", "\n", "assert", "0", "<=", "prob", "<=", "1.0", ",", "'The probability should be in range [0,1].'", "\n", "self", ".", "level", "=", "level", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "factor", "=", "enhance_level_to_value", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.ContrastTransform._adjust_contrast_img": [[866, 871], ["results.get", "mmcv.adjust_contrast().astype", "mmcv.adjust_contrast"], "methods", ["None"], ["", "def", "_adjust_contrast_img", "(", "self", ",", "results", ",", "factor", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"Adjust the image contrast.\"\"\"", "\n", "for", "key", "in", "results", ".", "get", "(", "'img_fields'", ",", "[", "'img'", "]", ")", ":", "\n", "            ", "img", "=", "results", "[", "key", "]", "\n", "results", "[", "key", "]", "=", "mmcv", ".", "adjust_contrast", "(", "img", ",", "factor", ")", ".", "astype", "(", "img", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.ContrastTransform.__call__": [[872, 885], ["auto_augment.ContrastTransform._adjust_contrast_img", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.ContrastTransform._adjust_contrast_img"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function for Contrast transformation.\n\n        Args:\n            results (dict): Results dict from loading pipeline.\n\n        Returns:\n            dict: Results after the transformation.\n        \"\"\"", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "return", "results", "\n", "", "self", ".", "_adjust_contrast_img", "(", "results", ",", "self", ".", "factor", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.ContrastTransform.__repr__": [[886, 891], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(level={self.level}, '", "\n", "repr_str", "+=", "f'prob={self.prob})'", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.level_to_value": [[13, 16], ["None"], "function", ["None"], ["def", "level_to_value", "(", "level", ",", "max_value", ")", ":", "\n", "    ", "\"\"\"Map from level to values based on max_value.\"\"\"", "\n", "return", "(", "level", "/", "_MAX_LEVEL", ")", "*", "max_value", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.enhance_level_to_value": [[18, 21], ["None"], "function", ["None"], ["", "def", "enhance_level_to_value", "(", "level", ",", "a", "=", "1.8", ",", "b", "=", "0.1", ")", ":", "\n", "    ", "\"\"\"Map from level to values.\"\"\"", "\n", "return", "(", "level", "/", "_MAX_LEVEL", ")", "*", "a", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.random_negative": [[23, 26], ["numpy.random.rand"], "function", ["None"], ["", "def", "random_negative", "(", "value", ",", "random_negative_prob", ")", ":", "\n", "    ", "\"\"\"Randomly negate value based on random_negative_prob.\"\"\"", "\n", "return", "-", "value", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "random_negative_prob", "else", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.auto_augment.bbox2fields": [[28, 43], ["None"], "function", ["None"], ["", "def", "bbox2fields", "(", ")", ":", "\n", "    ", "\"\"\"The key correspondence from bboxes to labels, masks and\n    segmentations.\"\"\"", "\n", "bbox2label", "=", "{", "\n", "'gt_bboxes'", ":", "'gt_labels'", ",", "\n", "'gt_bboxes_ignore'", ":", "'gt_labels_ignore'", "\n", "}", "\n", "bbox2mask", "=", "{", "\n", "'gt_bboxes'", ":", "'gt_masks'", ",", "\n", "'gt_bboxes_ignore'", ":", "'gt_masks_ignore'", "\n", "}", "\n", "bbox2seg", "=", "{", "\n", "'gt_bboxes'", ":", "'gt_semantic_seg'", ",", "\n", "}", "\n", "return", "bbox2label", ",", "bbox2mask", ",", "bbox2seg", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.test_time_aug.MultiScaleFlipAug.__init__": [[52, 82], ["compose.Compose", "mmcv.is_list_of", "mmcv.is_list_of", "isinstance", "warnings.warn", "warnings.warn", "isinstance", "isinstance", "any"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "transforms", ",", "\n", "img_scale", "=", "None", ",", "\n", "scale_factor", "=", "None", ",", "\n", "flip", "=", "False", ",", "\n", "flip_direction", "=", "'horizontal'", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "Compose", "(", "transforms", ")", "\n", "assert", "(", "img_scale", "is", "None", ")", "^", "(", "scale_factor", "is", "None", ")", ",", "(", "\n", "'Must have but only one variable can be setted'", ")", "\n", "if", "img_scale", "is", "not", "None", ":", "\n", "            ", "self", ".", "img_scale", "=", "img_scale", "if", "isinstance", "(", "img_scale", ",", "\n", "list", ")", "else", "[", "img_scale", "]", "\n", "self", ".", "scale_key", "=", "'scale'", "\n", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "img_scale", ",", "tuple", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "img_scale", "=", "scale_factor", "if", "isinstance", "(", "\n", "scale_factor", ",", "list", ")", "else", "[", "scale_factor", "]", "\n", "self", ".", "scale_key", "=", "'scale_factor'", "\n", "\n", "", "self", ".", "flip", "=", "flip", "\n", "self", ".", "flip_direction", "=", "flip_direction", "if", "isinstance", "(", "\n", "flip_direction", ",", "list", ")", "else", "[", "flip_direction", "]", "\n", "assert", "mmcv", ".", "is_list_of", "(", "self", ".", "flip_direction", ",", "str", ")", "\n", "if", "not", "self", ".", "flip", "and", "self", ".", "flip_direction", "!=", "[", "'horizontal'", "]", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'flip_direction has no effect when flip is set to False'", ")", "\n", "", "if", "(", "self", ".", "flip", "\n", "and", "not", "any", "(", "[", "t", "[", "'type'", "]", "==", "'RandomFlip'", "for", "t", "in", "transforms", "]", ")", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "'flip has no effect when RandomFlip is not in transforms'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.test_time_aug.MultiScaleFlipAug.__call__": [[83, 113], ["test_time_aug.MultiScaleFlipAug.items", "results.copy", "test_time_aug.MultiScaleFlipAug.transforms", "aug_data.append", "aug_data_dict[].append"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to apply test time augment transforms on results.\n\n        Args:\n            results (dict): Result dict contains the data to transform.\n\n        Returns:\n           dict[str: list]: The augmented data, where each value is wrapped\n               into a list.\n        \"\"\"", "\n", "\n", "aug_data", "=", "[", "]", "\n", "flip_args", "=", "[", "(", "False", ",", "None", ")", "]", "\n", "if", "self", ".", "flip", ":", "\n", "            ", "flip_args", "+=", "[", "(", "True", ",", "direction", ")", "\n", "for", "direction", "in", "self", ".", "flip_direction", "]", "\n", "", "for", "scale", "in", "self", ".", "img_scale", ":", "\n", "            ", "for", "flip", ",", "direction", "in", "flip_args", ":", "\n", "                ", "_results", "=", "results", ".", "copy", "(", ")", "\n", "_results", "[", "self", ".", "scale_key", "]", "=", "scale", "\n", "_results", "[", "'flip'", "]", "=", "flip", "\n", "_results", "[", "'flip_direction'", "]", "=", "direction", "\n", "data", "=", "self", ".", "transforms", "(", "_results", ")", "\n", "aug_data", ".", "append", "(", "data", ")", "\n", "# list of dict to dict of list", "\n", "", "", "aug_data_dict", "=", "{", "key", ":", "[", "]", "for", "key", "in", "aug_data", "[", "0", "]", "}", "\n", "for", "data", "in", "aug_data", ":", "\n", "            ", "for", "key", ",", "val", "in", "data", ".", "items", "(", ")", ":", "\n", "                ", "aug_data_dict", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "", "return", "aug_data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.test_time_aug.MultiScaleFlipAug.__repr__": [[114, 120], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(transforms={self.transforms}, '", "\n", "repr_str", "+=", "f'img_scale={self.img_scale}, flip={self.flip}, '", "\n", "repr_str", "+=", "f'flip_direction={self.flip_direction})'", "\n", "return", "repr_str", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadImageFromFile.__init__": [[31, 39], ["dict", "file_client_args.copy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "to_float32", "=", "False", ",", "\n", "color_type", "=", "'color'", ",", "\n", "file_client_args", "=", "dict", "(", "backend", "=", "'disk'", ")", ")", ":", "\n", "        ", "self", ".", "to_float32", "=", "to_float32", "\n", "self", ".", "color_type", "=", "color_type", "\n", "self", ".", "file_client_args", "=", "file_client_args", ".", "copy", "(", ")", "\n", "self", ".", "file_client", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadImageFromFile.__call__": [[40, 71], ["loading.LoadImageFromFile.file_client.get", "mmcv.imfrombytes", "mmcv.FileClient", "os.join", "img.astype.astype.astype"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call functions to load image and get image meta information.\n\n        Args:\n            results (dict): Result dict from :obj:`mmdet.CustomDataset`.\n\n        Returns:\n            dict: The dict contains loaded image and meta information.\n        \"\"\"", "\n", "\n", "if", "self", ".", "file_client", "is", "None", ":", "\n", "            ", "self", ".", "file_client", "=", "mmcv", ".", "FileClient", "(", "**", "self", ".", "file_client_args", ")", "\n", "\n", "", "if", "results", "[", "'img_prefix'", "]", "is", "not", "None", ":", "\n", "            ", "filename", "=", "osp", ".", "join", "(", "results", "[", "'img_prefix'", "]", ",", "\n", "results", "[", "'img_info'", "]", "[", "'filename'", "]", ")", "\n", "", "else", ":", "\n", "            ", "filename", "=", "results", "[", "'img_info'", "]", "[", "'filename'", "]", "\n", "\n", "", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "filename", ")", "\n", "img", "=", "mmcv", ".", "imfrombytes", "(", "img_bytes", ",", "flag", "=", "self", ".", "color_type", ")", "\n", "if", "self", ".", "to_float32", ":", "\n", "            ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "results", "[", "'filename'", "]", "=", "filename", "\n", "results", "[", "'ori_filename'", "]", "=", "results", "[", "'img_info'", "]", "[", "'filename'", "]", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadImageFromFile.__repr__": [[72, 78], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "(", "f'{self.__class__.__name__}('", "\n", "f'to_float32={self.to_float32}, '", "\n", "f\"color_type='{self.color_type}', \"", "\n", "f'file_client_args={self.file_client_args})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadImageFromWebcam.__call__": [[88, 110], ["img.astype.astype.astype"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call functions to add image meta information.\n\n        Args:\n            results (dict): Result dict with Webcam read image in\n                ``results['img']``.\n\n        Returns:\n            dict: The dict contains loaded image and meta information.\n        \"\"\"", "\n", "\n", "img", "=", "results", "[", "'img'", "]", "\n", "if", "self", ".", "to_float32", ":", "\n", "            ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "results", "[", "'filename'", "]", "=", "None", "\n", "results", "[", "'ori_filename'", "]", "=", "None", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadMultiChannelImageFromFiles.__init__": [[133, 141], ["dict", "file_client_args.copy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "to_float32", "=", "False", ",", "\n", "color_type", "=", "'unchanged'", ",", "\n", "file_client_args", "=", "dict", "(", "backend", "=", "'disk'", ")", ")", ":", "\n", "        ", "self", ".", "to_float32", "=", "to_float32", "\n", "self", ".", "color_type", "=", "color_type", "\n", "self", ".", "file_client_args", "=", "file_client_args", ".", "copy", "(", ")", "\n", "self", ".", "file_client", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadMultiChannelImageFromFiles.__call__": [[142, 186], ["numpy.stack", "dict", "mmcv.FileClient", "loading.LoadMultiChannelImageFromFiles.file_client.get", "img.astype.astype.append", "img.astype.astype.astype", "os.join", "mmcv.imfrombytes", "len", "numpy.zeros", "numpy.ones"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call functions to load multiple images and get images meta\n        information.\n\n        Args:\n            results (dict): Result dict from :obj:`mmdet.CustomDataset`.\n\n        Returns:\n            dict: The dict contains loaded images and meta information.\n        \"\"\"", "\n", "\n", "if", "self", ".", "file_client", "is", "None", ":", "\n", "            ", "self", ".", "file_client", "=", "mmcv", ".", "FileClient", "(", "**", "self", ".", "file_client_args", ")", "\n", "\n", "", "if", "results", "[", "'img_prefix'", "]", "is", "not", "None", ":", "\n", "            ", "filename", "=", "[", "\n", "osp", ".", "join", "(", "results", "[", "'img_prefix'", "]", ",", "fname", ")", "\n", "for", "fname", "in", "results", "[", "'img_info'", "]", "[", "'filename'", "]", "\n", "]", "\n", "", "else", ":", "\n", "            ", "filename", "=", "results", "[", "'img_info'", "]", "[", "'filename'", "]", "\n", "\n", "", "img", "=", "[", "]", "\n", "for", "name", "in", "filename", ":", "\n", "            ", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "name", ")", "\n", "img", ".", "append", "(", "mmcv", ".", "imfrombytes", "(", "img_bytes", ",", "flag", "=", "self", ".", "color_type", ")", ")", "\n", "", "img", "=", "np", ".", "stack", "(", "img", ",", "axis", "=", "-", "1", ")", "\n", "if", "self", ".", "to_float32", ":", "\n", "            ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "results", "[", "'filename'", "]", "=", "filename", "\n", "results", "[", "'ori_filename'", "]", "=", "results", "[", "'img_info'", "]", "[", "'filename'", "]", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "# Set initial values for default meta_keys", "\n", "results", "[", "'pad_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'scale_factor'", "]", "=", "1.0", "\n", "num_channels", "=", "1", "if", "len", "(", "img", ".", "shape", ")", "<", "3", "else", "img", ".", "shape", "[", "2", "]", "\n", "results", "[", "'img_norm_cfg'", "]", "=", "dict", "(", "\n", "mean", "=", "np", ".", "zeros", "(", "num_channels", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "std", "=", "np", ".", "ones", "(", "num_channels", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "to_rgb", "=", "False", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadMultiChannelImageFromFiles.__repr__": [[187, 193], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "(", "f'{self.__class__.__name__}('", "\n", "f'to_float32={self.to_float32}, '", "\n", "f\"color_type='{self.color_type}', \"", "\n", "f'file_client_args={self.file_client_args})'", ")", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations.__init__": [[215, 229], ["dict", "file_client_args.copy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "with_bbox", "=", "True", ",", "\n", "with_label", "=", "True", ",", "\n", "with_mask", "=", "False", ",", "\n", "with_seg", "=", "False", ",", "\n", "poly2mask", "=", "True", ",", "\n", "file_client_args", "=", "dict", "(", "backend", "=", "'disk'", ")", ")", ":", "\n", "        ", "self", ".", "with_bbox", "=", "with_bbox", "\n", "self", ".", "with_label", "=", "with_label", "\n", "self", ".", "with_mask", "=", "with_mask", "\n", "self", ".", "with_seg", "=", "with_seg", "\n", "self", ".", "poly2mask", "=", "poly2mask", "\n", "self", ".", "file_client_args", "=", "file_client_args", ".", "copy", "(", ")", "\n", "self", ".", "file_client", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._load_bboxes": [[230, 249], ["ann_info[].copy", "ann_info.get", "results[].append", "ann_info.get.copy", "results[].append"], "methods", ["None"], ["", "def", "_load_bboxes", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Private function to load bounding box annotations.\n\n        Args:\n            results (dict): Result dict from :obj:`mmdet.CustomDataset`.\n\n        Returns:\n            dict: The dict contains loaded bounding box annotations.\n        \"\"\"", "\n", "\n", "ann_info", "=", "results", "[", "'ann_info'", "]", "\n", "results", "[", "'gt_bboxes'", "]", "=", "ann_info", "[", "'bboxes'", "]", ".", "copy", "(", ")", "\n", "\n", "gt_bboxes_ignore", "=", "ann_info", ".", "get", "(", "'bboxes_ignore'", ",", "None", ")", "\n", "if", "gt_bboxes_ignore", "is", "not", "None", ":", "\n", "            ", "results", "[", "'gt_bboxes_ignore'", "]", "=", "gt_bboxes_ignore", ".", "copy", "(", ")", "\n", "results", "[", "'bbox_fields'", "]", ".", "append", "(", "'gt_bboxes_ignore'", ")", "\n", "", "results", "[", "'bbox_fields'", "]", ".", "append", "(", "'gt_bboxes'", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._load_labels": [[250, 262], ["[].copy"], "methods", ["None"], ["", "def", "_load_labels", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Private function to load label annotations.\n\n        Args:\n            results (dict): Result dict from :obj:`mmdet.CustomDataset`.\n\n        Returns:\n            dict: The dict contains loaded label annotations.\n        \"\"\"", "\n", "\n", "results", "[", "'gt_labels'", "]", "=", "results", "[", "'ann_info'", "]", "[", "'labels'", "]", ".", "copy", "(", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._poly2mask": [[263, 289], ["isinstance", "pycocotools.decode", "pycocotools.frPyObjects", "pycocotools.merge", "isinstance", "pycocotools.frPyObjects"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode"], ["", "def", "_poly2mask", "(", "self", ",", "mask_ann", ",", "img_h", ",", "img_w", ")", ":", "\n", "        ", "\"\"\"Private function to convert masks represented with polygon to\n        bitmaps.\n\n        Args:\n            mask_ann (list | dict): Polygon mask annotation input.\n            img_h (int): The height of output mask.\n            img_w (int): The width of output mask.\n\n        Returns:\n            numpy.ndarray: The decode bitmap mask of shape (img_h, img_w).\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "mask_ann", ",", "list", ")", ":", "\n", "# polygon -- a single object might consist of multiple parts", "\n", "# we merge all parts into one mask rle code", "\n", "            ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "mask_ann", ",", "img_h", ",", "img_w", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "", "elif", "isinstance", "(", "mask_ann", "[", "'counts'", "]", ",", "list", ")", ":", "\n", "# uncompressed RLE", "\n", "            ", "rle", "=", "maskUtils", ".", "frPyObjects", "(", "mask_ann", ",", "img_h", ",", "img_w", ")", "\n", "", "else", ":", "\n", "# rle", "\n", "            ", "rle", "=", "mask_ann", "\n", "", "mask", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations.process_polygons": [[290, 306], ["numpy.array", "valid_polygons.append", "len", "len"], "methods", ["None"], ["", "def", "process_polygons", "(", "self", ",", "polygons", ")", ":", "\n", "        ", "\"\"\"Convert polygons to list of ndarray and filter invalid polygons.\n\n        Args:\n            polygons (list[list]): Polygons of one instance.\n\n        Returns:\n            list[numpy.ndarray]: Processed polygons.\n        \"\"\"", "\n", "\n", "polygons", "=", "[", "np", ".", "array", "(", "p", ")", "for", "p", "in", "polygons", "]", "\n", "valid_polygons", "=", "[", "]", "\n", "for", "polygon", "in", "polygons", ":", "\n", "            ", "if", "len", "(", "polygon", ")", "%", "2", "==", "0", "and", "len", "(", "polygon", ")", ">=", "6", ":", "\n", "                ", "valid_polygons", ".", "append", "(", "polygon", ")", "\n", "", "", "return", "valid_polygons", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._load_masks": [[307, 331], ["results[].append", "mmdet.core.BitmapMasks", "mmdet.core.PolygonMasks", "loading.LoadAnnotations._poly2mask", "loading.LoadAnnotations.process_polygons"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._poly2mask", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations.process_polygons"], ["", "def", "_load_masks", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Private function to load mask annotations.\n\n        Args:\n            results (dict): Result dict from :obj:`mmdet.CustomDataset`.\n\n        Returns:\n            dict: The dict contains loaded mask annotations.\n                If ``self.poly2mask`` is set ``True``, `gt_mask` will contain\n                :obj:`PolygonMasks`. Otherwise, :obj:`BitmapMasks` is used.\n        \"\"\"", "\n", "\n", "h", ",", "w", "=", "results", "[", "'img_info'", "]", "[", "'height'", "]", ",", "results", "[", "'img_info'", "]", "[", "'width'", "]", "\n", "gt_masks", "=", "results", "[", "'ann_info'", "]", "[", "'masks'", "]", "\n", "if", "self", ".", "poly2mask", ":", "\n", "            ", "gt_masks", "=", "BitmapMasks", "(", "\n", "[", "self", ".", "_poly2mask", "(", "mask", ",", "h", ",", "w", ")", "for", "mask", "in", "gt_masks", "]", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "            ", "gt_masks", "=", "PolygonMasks", "(", "\n", "[", "self", ".", "process_polygons", "(", "polygons", ")", "for", "polygons", "in", "gt_masks", "]", ",", "h", ",", "\n", "w", ")", "\n", "", "results", "[", "'gt_masks'", "]", "=", "gt_masks", "\n", "results", "[", "'mask_fields'", "]", ".", "append", "(", "'gt_masks'", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._load_semantic_seg": [[332, 352], ["os.join", "loading.LoadAnnotations.file_client.get", "mmcv.imfrombytes().squeeze", "results[].append", "mmcv.FileClient", "mmcv.imfrombytes"], "methods", ["None"], ["", "def", "_load_semantic_seg", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Private function to load semantic segmentation annotations.\n\n        Args:\n            results (dict): Result dict from :obj:`dataset`.\n\n        Returns:\n            dict: The dict contains loaded semantic segmentation annotations.\n        \"\"\"", "\n", "\n", "if", "self", ".", "file_client", "is", "None", ":", "\n", "            ", "self", ".", "file_client", "=", "mmcv", ".", "FileClient", "(", "**", "self", ".", "file_client_args", ")", "\n", "\n", "", "filename", "=", "osp", ".", "join", "(", "results", "[", "'seg_prefix'", "]", ",", "\n", "results", "[", "'ann_info'", "]", "[", "'seg_map'", "]", ")", "\n", "img_bytes", "=", "self", ".", "file_client", ".", "get", "(", "filename", ")", "\n", "results", "[", "'gt_semantic_seg'", "]", "=", "mmcv", ".", "imfrombytes", "(", "\n", "img_bytes", ",", "flag", "=", "'unchanged'", ")", ".", "squeeze", "(", ")", "\n", "results", "[", "'seg_fields'", "]", ".", "append", "(", "'gt_semantic_seg'", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations.__call__": [[353, 375], ["loading.LoadAnnotations._load_bboxes", "loading.LoadAnnotations._load_labels", "loading.LoadAnnotations._load_masks", "loading.LoadAnnotations._load_semantic_seg"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._load_bboxes", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._load_labels", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._load_masks", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations._load_semantic_seg"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to load multiple types annotations.\n\n        Args:\n            results (dict): Result dict from :obj:`mmdet.CustomDataset`.\n\n        Returns:\n            dict: The dict contains loaded bounding box, label, mask and\n                semantic segmentation annotations.\n        \"\"\"", "\n", "\n", "if", "self", ".", "with_bbox", ":", "\n", "            ", "results", "=", "self", ".", "_load_bboxes", "(", "results", ")", "\n", "if", "results", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "", "if", "self", ".", "with_label", ":", "\n", "            ", "results", "=", "self", ".", "_load_labels", "(", "results", ")", "\n", "", "if", "self", ".", "with_mask", ":", "\n", "            ", "results", "=", "self", ".", "_load_masks", "(", "results", ")", "\n", "", "if", "self", ".", "with_seg", ":", "\n", "            ", "results", "=", "self", ".", "_load_semantic_seg", "(", "results", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadAnnotations.__repr__": [[376, 385], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "repr_str", "=", "self", ".", "__class__", ".", "__name__", "\n", "repr_str", "+=", "f'(with_bbox={self.with_bbox}, '", "\n", "repr_str", "+=", "f'with_label={self.with_label}, '", "\n", "repr_str", "+=", "f'with_mask={self.with_mask}, '", "\n", "repr_str", "+=", "f'with_seg={self.with_seg}, '", "\n", "repr_str", "+=", "f'poly2mask={self.poly2mask}, '", "\n", "repr_str", "+=", "f'poly2mask={self.file_client_args})'", "\n", "return", "repr_str", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadProposals.__init__": [[398, 400], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_max_proposals", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_max_proposals", "=", "num_max_proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadProposals.__call__": [[401, 426], ["results[].append", "AssertionError", "len", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to load proposals from file.\n\n        Args:\n            results (dict): Result dict from :obj:`mmdet.CustomDataset`.\n\n        Returns:\n            dict: The dict contains loaded proposal annotations.\n        \"\"\"", "\n", "\n", "proposals", "=", "results", "[", "'proposals'", "]", "\n", "if", "proposals", ".", "shape", "[", "1", "]", "not", "in", "(", "4", ",", "5", ")", ":", "\n", "            ", "raise", "AssertionError", "(", "\n", "'proposals should have shapes (n, 4) or (n, 5), '", "\n", "f'but found {proposals.shape}'", ")", "\n", "", "proposals", "=", "proposals", "[", ":", ",", ":", "4", "]", "\n", "\n", "if", "self", ".", "num_max_proposals", "is", "not", "None", ":", "\n", "            ", "proposals", "=", "proposals", "[", ":", "self", ".", "num_max_proposals", "]", "\n", "\n", "", "if", "len", "(", "proposals", ")", "==", "0", ":", "\n", "            ", "proposals", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", ",", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "results", "[", "'proposals'", "]", "=", "proposals", "\n", "results", "[", "'bbox_fields'", "]", ".", "append", "(", "'proposals'", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.LoadProposals.__repr__": [[427, 430], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(num_max_proposals={self.num_max_proposals})'", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.FilterAnnotations.__init__": [[441, 444], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "min_gt_bbox_wh", ")", ":", "\n", "# TODO: add more filter options", "\n", "        ", "self", ".", "min_gt_bbox_wh", "=", "min_gt_bbox_wh", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.loading.FilterAnnotations.__call__": [[445, 459], ["keep.any"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "assert", "'gt_bboxes'", "in", "results", "\n", "gt_bboxes", "=", "results", "[", "'gt_bboxes'", "]", "\n", "w", "=", "gt_bboxes", "[", ":", ",", "2", "]", "-", "gt_bboxes", "[", ":", ",", "0", "]", "\n", "h", "=", "gt_bboxes", "[", ":", ",", "3", "]", "-", "gt_bboxes", "[", ":", ",", "1", "]", "\n", "keep", "=", "(", "w", ">", "self", ".", "min_gt_bbox_wh", "[", "0", "]", ")", "&", "(", "h", ">", "self", ".", "min_gt_bbox_wh", "[", "1", "]", ")", "\n", "if", "not", "keep", ".", "any", "(", ")", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "keys", "=", "(", "'gt_bboxes'", ",", "'gt_labels'", ",", "'gt_masks'", ",", "'gt_semantic_seg'", ")", "\n", "for", "key", "in", "keys", ":", "\n", "                ", "if", "key", "in", "results", ":", "\n", "                    ", "results", "[", "key", "]", "=", "results", "[", "key", "]", "[", "keep", "]", "\n", "", "", "return", "results", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.ToTensor.__init__": [[44, 46], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "keys", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.ToTensor.__call__": [[47, 60], ["formating.to_tensor"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.to_tensor"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to convert data in results to :obj:`torch.Tensor`.\n\n        Args:\n            results (dict): Result dict contains the data to convert.\n\n        Returns:\n            dict: The result dict contains the data converted\n                to :obj:`torch.Tensor`.\n        \"\"\"", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "results", "[", "key", "]", "=", "to_tensor", "(", "results", "[", "key", "]", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.ToTensor.__repr__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(keys={self.keys})'", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.ImageToTensor.__init__": [[77, 79], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "keys", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.ImageToTensor.__call__": [[80, 97], ["formating.to_tensor", "len", "numpy.expand_dims", "numpy.expand_dims.transpose"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.to_tensor"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to convert image in results to :obj:`torch.Tensor` and\n        transpose the channel order.\n\n        Args:\n            results (dict): Result dict contains the image data to convert.\n\n        Returns:\n            dict: The result dict contains the image converted\n                to :obj:`torch.Tensor` and transposed to (C, H, W) order.\n        \"\"\"", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "img", "=", "results", "[", "key", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", "<", "3", ":", "\n", "                ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "-", "1", ")", "\n", "", "results", "[", "key", "]", "=", "to_tensor", "(", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.ImageToTensor.__repr__": [[98, 100], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(keys={self.keys})'", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.Transpose.__init__": [[111, 114], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "keys", ",", "order", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "self", ".", "order", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.Transpose.__call__": [[115, 128], ["results[].transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to transpose the channel order of data in results.\n\n        Args:\n            results (dict): Result dict contains the data to transpose.\n\n        Returns:\n            dict: The result dict contains the data transposed to \\\n                ``self.order``.\n        \"\"\"", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "results", "[", "key", "]", "=", "results", "[", "key", "]", ".", "transpose", "(", "self", ".", "order", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.Transpose.__repr__": [[129, 132], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(keys={self.keys}, order={self.order})'", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.ToDataContainer.__init__": [[146, 150], ["dict", "dict", "dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "fields", "=", "(", "dict", "(", "key", "=", "'img'", ",", "stack", "=", "True", ")", ",", "dict", "(", "key", "=", "'gt_bboxes'", ")", ",", "\n", "dict", "(", "key", "=", "'gt_labels'", ")", ")", ")", ":", "\n", "        ", "self", ".", "fields", "=", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.ToDataContainer.__call__": [[151, 168], ["field.copy.copy.copy", "field.copy.copy.pop", "mmcv.parallel.DataContainer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to convert data in results to\n        :obj:`mmcv.DataContainer`.\n\n        Args:\n            results (dict): Result dict contains the data to convert.\n\n        Returns:\n            dict: The result dict contains the data converted to \\\n                :obj:`mmcv.DataContainer`.\n        \"\"\"", "\n", "\n", "for", "field", "in", "self", ".", "fields", ":", "\n", "            ", "field", "=", "field", ".", "copy", "(", ")", "\n", "key", "=", "field", ".", "pop", "(", "'key'", ")", "\n", "results", "[", "key", "]", "=", "DC", "(", "results", "[", "key", "]", ",", "**", "field", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.ToDataContainer.__repr__": [[169, 171], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(fields={self.fields})'", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.DefaultFormatBundle.__call__": [[191, 220], ["formating.DefaultFormatBundle._add_default_meta_keys", "numpy.ascontiguousarray", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "mmcv.parallel.DataContainer", "len", "numpy.expand_dims", "numpy.expand_dims.transpose", "formating.to_tensor", "formating.to_tensor", "formating.to_tensor"], "methods", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.DefaultFormatBundle._add_default_meta_keys", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.to_tensor", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.to_tensor", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.to_tensor"], ["def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to transform and format common fields in results.\n\n        Args:\n            results (dict): Result dict contains the data to convert.\n\n        Returns:\n            dict: The result dict contains the data that is formatted with \\\n                default bundle.\n        \"\"\"", "\n", "\n", "if", "'img'", "in", "results", ":", "\n", "            ", "img", "=", "results", "[", "'img'", "]", "\n", "# add default meta keys", "\n", "results", "=", "self", ".", "_add_default_meta_keys", "(", "results", ")", "\n", "if", "len", "(", "img", ".", "shape", ")", "<", "3", ":", "\n", "                ", "img", "=", "np", ".", "expand_dims", "(", "img", ",", "-", "1", ")", "\n", "", "img", "=", "np", ".", "ascontiguousarray", "(", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "results", "[", "'img'", "]", "=", "DC", "(", "to_tensor", "(", "img", ")", ",", "stack", "=", "True", ")", "\n", "", "for", "key", "in", "[", "'proposals'", ",", "'gt_bboxes'", ",", "'gt_bboxes_ignore'", ",", "'gt_labels'", "]", ":", "\n", "            ", "if", "key", "not", "in", "results", ":", "\n", "                ", "continue", "\n", "", "results", "[", "key", "]", "=", "DC", "(", "to_tensor", "(", "results", "[", "key", "]", ")", ")", "\n", "", "if", "'gt_masks'", "in", "results", ":", "\n", "            ", "results", "[", "'gt_masks'", "]", "=", "DC", "(", "results", "[", "'gt_masks'", "]", ",", "cpu_only", "=", "True", ")", "\n", "", "if", "'gt_semantic_seg'", "in", "results", ":", "\n", "            ", "results", "[", "'gt_semantic_seg'", "]", "=", "DC", "(", "\n", "to_tensor", "(", "results", "[", "'gt_semantic_seg'", "]", "[", "None", ",", "...", "]", ")", ",", "stack", "=", "True", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.DefaultFormatBundle._add_default_meta_keys": [[221, 245], ["results.setdefault", "results.setdefault", "results.setdefault", "dict", "len", "numpy.zeros", "numpy.ones"], "methods", ["None"], ["", "def", "_add_default_meta_keys", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Add default meta keys.\n\n        We set default meta keys including `pad_shape`, `scale_factor` and\n        `img_norm_cfg` to avoid the case where no `Resize`, `Normalize` and\n        `Pad` are implemented during the whole pipeline.\n\n        Args:\n            results (dict): Result dict contains the data to convert.\n\n        Returns:\n            results (dict): Updated result dict contains the data to convert.\n        \"\"\"", "\n", "img", "=", "results", "[", "'img'", "]", "\n", "results", ".", "setdefault", "(", "'pad_shape'", ",", "img", ".", "shape", ")", "\n", "results", ".", "setdefault", "(", "'scale_factor'", ",", "1.0", ")", "\n", "num_channels", "=", "1", "if", "len", "(", "img", ".", "shape", ")", "<", "3", "else", "img", ".", "shape", "[", "2", "]", "\n", "results", ".", "setdefault", "(", "\n", "'img_norm_cfg'", ",", "\n", "dict", "(", "\n", "mean", "=", "np", ".", "zeros", "(", "num_channels", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "std", "=", "np", ".", "ones", "(", "num_channels", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "to_rgb", "=", "False", ")", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.DefaultFormatBundle.__repr__": [[246, 248], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.Collect.__init__": [[290, 297], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "keys", ",", "\n", "meta_keys", "=", "(", "'filename'", ",", "'ori_filename'", ",", "'ori_shape'", ",", "\n", "'img_shape'", ",", "'pad_shape'", ",", "'scale_factor'", ",", "'flip'", ",", "\n", "'flip_direction'", ",", "'img_norm_cfg'", ")", ")", ":", "\n", "        ", "self", ".", "keys", "=", "keys", "\n", "self", ".", "meta_keys", "=", "meta_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.Collect.__call__": [[298, 320], ["mmcv.parallel.DataContainer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to collect keys in results. The keys in ``meta_keys``\n        will be converted to :obj:mmcv.DataContainer.\n\n        Args:\n            results (dict): Result dict contains the data to collect.\n\n        Returns:\n            dict: The result dict contains the following keys\n\n                - keys in``self.keys``\n                - ``img_metas``\n        \"\"\"", "\n", "\n", "data", "=", "{", "}", "\n", "img_meta", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "meta_keys", ":", "\n", "            ", "img_meta", "[", "key", "]", "=", "results", "[", "key", "]", "\n", "", "data", "[", "'img_metas'", "]", "=", "DC", "(", "img_meta", ",", "cpu_only", "=", "True", ")", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "data", "[", "key", "]", "=", "results", "[", "key", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.Collect.__repr__": [[321, 324], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "f'(keys={self.keys}, meta_keys={self.meta_keys})'", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.WrapFieldsToLists.__call__": [[347, 362], ["results.items"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to wrap fields into lists.\n\n        Args:\n            results (dict): Result dict contains the data to wrap.\n\n        Returns:\n            dict: The result dict where value of ``self.keys`` are wrapped \\\n                into list.\n        \"\"\"", "\n", "\n", "# Wrap dict fields into lists", "\n", "for", "key", ",", "val", "in", "results", ".", "items", "(", ")", ":", "\n", "            ", "results", "[", "key", "]", "=", "[", "val", "]", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.WrapFieldsToLists.__repr__": [[363, 365], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f'{self.__class__.__name__}()'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.formating.to_tensor": [[11, 34], ["isinstance", "isinstance", "torch.from_numpy", "isinstance", "torch.tensor", "isinstance", "mmcv.is_str", "torch.LongTensor", "isinstance", "torch.FloatTensor", "TypeError", "type"], "function", ["None"], ["def", "to_tensor", "(", "data", ")", ":", "\n", "    ", "\"\"\"Convert objects of various python types to :obj:`torch.Tensor`.\n\n    Supported types are: :class:`numpy.ndarray`, :class:`torch.Tensor`,\n    :class:`Sequence`, :class:`int` and :class:`float`.\n\n    Args:\n        data (torch.Tensor | numpy.ndarray | Sequence | int | float): Data to\n            be converted.\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "data", "\n", "", "elif", "isinstance", "(", "data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "Sequence", ")", "and", "not", "mmcv", ".", "is_str", "(", "data", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "data", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "int", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "[", "data", "]", ")", "\n", "", "elif", "isinstance", "(", "data", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "FloatTensor", "(", "[", "data", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "f'type {type(data)} cannot be converted to tensor.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__init__": [[17, 28], ["isinstance", "isinstance", "mmcv.utils.build_from_cfg", "compose.Compose.transforms.append", "callable", "compose.Compose.transforms.append", "TypeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "assert", "isinstance", "(", "transforms", ",", "collections", ".", "abc", ".", "Sequence", ")", "\n", "self", ".", "transforms", "=", "[", "]", "\n", "for", "transform", "in", "transforms", ":", "\n", "            ", "if", "isinstance", "(", "transform", ",", "dict", ")", ":", "\n", "                ", "transform", "=", "build_from_cfg", "(", "transform", ",", "PIPELINES", ")", "\n", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "elif", "callable", "(", "transform", ")", ":", "\n", "                ", "self", ".", "transforms", ".", "append", "(", "transform", ")", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "'transform must be callable or a dict'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__call__": [[29, 44], ["t"], "methods", ["None"], ["", "", "", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"Call function to apply transforms sequentially.\n\n        Args:\n            data (dict): A result dict contains the data to transform.\n\n        Returns:\n           dict: Transformed data.\n        \"\"\"", "\n", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "data", "=", "t", "(", "data", ")", "\n", "if", "data", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.pipelines.compose.Compose.__repr__": [[45, 52], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "format_string", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "format_string", "+=", "'\\n'", "\n", "format_string", "+=", "f'    {t}'", "\n", "", "format_string", "+=", "'\\n)'", "\n", "return", "format_string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.inference.LoadImage.__call__": [[62, 87], ["warnings.simplefilter", "warnings.warn", "isinstance", "mmcv.imread"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "results", ")", ":", "\n", "        ", "\"\"\"Call function to load images into results.\n\n        Args:\n            results (dict): A result dict contains the file name\n                of the image to be read.\n        Returns:\n            dict: ``results`` will be returned containing loaded image.\n        \"\"\"", "\n", "warnings", ".", "simplefilter", "(", "'once'", ")", "\n", "warnings", ".", "warn", "(", "'`LoadImage` is deprecated and will be removed in '", "\n", "'future releases. You may use `LoadImageFromWebcam` '", "\n", "'from `mmdet.datasets.pipelines.` instead.'", ")", "\n", "if", "isinstance", "(", "results", "[", "'img'", "]", ",", "str", ")", ":", "\n", "            ", "results", "[", "'filename'", "]", "=", "results", "[", "'img'", "]", "\n", "results", "[", "'ori_filename'", "]", "=", "results", "[", "'img'", "]", "\n", "", "else", ":", "\n", "            ", "results", "[", "'filename'", "]", "=", "None", "\n", "results", "[", "'ori_filename'", "]", "=", "None", "\n", "", "img", "=", "mmcv", ".", "imread", "(", "results", "[", "'img'", "]", ")", "\n", "results", "[", "'img'", "]", "=", "img", "\n", "results", "[", "'img_fields'", "]", "=", "[", "'img'", "]", "\n", "results", "[", "'img_shape'", "]", "=", "img", ".", "shape", "\n", "results", "[", "'ori_shape'", "]", "=", "img", ".", "shape", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.inference.init_detector": [[16, 54], ["isinstance", "mmdet.models.build_detector", "mmdet.models.build_detector.to", "mmdet.models.build_detector.eval", "mmcv.Config.fromfile", "mmcv.Config.fromfile.merge_from_dict", "mmcv.runner.load_checkpoint", "isinstance", "TypeError", "mmcv.Config.fromfile.get", "mmcv.runner.load_checkpoint.get", "warnings.simplefilter", "warnings.warn", "mmdet.core.get_classes", "type"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.samplers.sampling_result.SamplingResult.to", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.custom.CustomDataset.get_classes"], ["def", "init_detector", "(", "config", ",", "checkpoint", "=", "None", ",", "device", "=", "'cuda:0'", ",", "cfg_options", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initialize a detector from config file.\n\n    Args:\n        config (str or :obj:`mmcv.Config`): Config file path or the config\n            object.\n        checkpoint (str, optional): Checkpoint path. If left as None, the model\n            will not load any weights.\n        cfg_options (dict): Options to override some settings in the used\n            config.\n\n    Returns:\n        nn.Module: The constructed detector.\n    \"\"\"", "\n", "if", "isinstance", "(", "config", ",", "str", ")", ":", "\n", "        ", "config", "=", "mmcv", ".", "Config", ".", "fromfile", "(", "config", ")", "\n", "", "elif", "not", "isinstance", "(", "config", ",", "mmcv", ".", "Config", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'config must be a filename or Config object, '", "\n", "f'but got {type(config)}'", ")", "\n", "", "if", "cfg_options", "is", "not", "None", ":", "\n", "        ", "config", ".", "merge_from_dict", "(", "cfg_options", ")", "\n", "", "config", ".", "model", ".", "pretrained", "=", "None", "\n", "config", ".", "model", ".", "train_cfg", "=", "None", "\n", "model", "=", "build_detector", "(", "config", ".", "model", ",", "test_cfg", "=", "config", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "if", "checkpoint", "is", "not", "None", ":", "\n", "        ", "map_loc", "=", "'cpu'", "if", "device", "==", "'cpu'", "else", "None", "\n", "checkpoint", "=", "load_checkpoint", "(", "model", ",", "checkpoint", ",", "map_location", "=", "map_loc", ")", "\n", "if", "'CLASSES'", "in", "checkpoint", ".", "get", "(", "'meta'", ",", "{", "}", ")", ":", "\n", "            ", "model", ".", "CLASSES", "=", "checkpoint", "[", "'meta'", "]", "[", "'CLASSES'", "]", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "simplefilter", "(", "'once'", ")", "\n", "warnings", ".", "warn", "(", "'Class names are not saved in the checkpoint\\'s '", "\n", "'meta data, use COCO classes by default.'", ")", "\n", "model", ".", "CLASSES", "=", "get_classes", "(", "'coco'", ")", "\n", "", "", "model", ".", "cfg", "=", "config", "# save the config in the model for convenience", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.inference.inference_detector": [[89, 153], ["isinstance", "isinstance", "mmdet.datasets.replace_ImageToTensor", "mmdet.datasets.pipelines.Compose", "mmcv.parallel.collate", "next", "cfg.copy.copy", "isinstance", "mmdet.datasets.pipelines.Compose.", "datas.append", "next", "model.modules", "torch.no_grad", "model", "model.parameters", "dict", "dict", "len", "model.parameters", "mmcv.parallel.scatter", "isinstance", "dict"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.replace_ImageToTensor"], ["", "", "def", "inference_detector", "(", "model", ",", "imgs", ")", ":", "\n", "    ", "\"\"\"Inference image(s) with the detector.\n\n    Args:\n        model (nn.Module): The loaded detector.\n        imgs (str/ndarray or list[str/ndarray] or tuple[str/ndarray]):\n           Either image files or loaded images.\n\n    Returns:\n        If imgs is a list or tuple, the same length list type results\n        will be returned, otherwise return the detection results directly.\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "imgs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "is_batch", "=", "True", "\n", "", "else", ":", "\n", "        ", "imgs", "=", "[", "imgs", "]", "\n", "is_batch", "=", "False", "\n", "\n", "", "cfg", "=", "model", ".", "cfg", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "# model device", "\n", "\n", "if", "isinstance", "(", "imgs", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "# set loading pipeline type", "\n", "cfg", ".", "data", ".", "test", ".", "pipeline", "[", "0", "]", ".", "type", "=", "'LoadImageFromWebcam'", "\n", "\n", "", "cfg", ".", "data", ".", "test", ".", "pipeline", "=", "replace_ImageToTensor", "(", "cfg", ".", "data", ".", "test", ".", "pipeline", ")", "\n", "test_pipeline", "=", "Compose", "(", "cfg", ".", "data", ".", "test", ".", "pipeline", ")", "\n", "\n", "datas", "=", "[", "]", "\n", "for", "img", "in", "imgs", ":", "\n", "# prepare data", "\n", "        ", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "# directly add img", "\n", "            ", "data", "=", "dict", "(", "img", "=", "img", ")", "\n", "", "else", ":", "\n", "# add information into dict", "\n", "            ", "data", "=", "dict", "(", "img_info", "=", "dict", "(", "filename", "=", "img", ")", ",", "img_prefix", "=", "None", ")", "\n", "# build the data pipeline", "\n", "", "data", "=", "test_pipeline", "(", "data", ")", "\n", "datas", ".", "append", "(", "data", ")", "\n", "\n", "", "data", "=", "collate", "(", "datas", ",", "samples_per_gpu", "=", "len", "(", "imgs", ")", ")", "\n", "# just get the actual data from DataContainer", "\n", "data", "[", "'img_metas'", "]", "=", "[", "img_metas", ".", "data", "[", "0", "]", "for", "img_metas", "in", "data", "[", "'img_metas'", "]", "]", "\n", "data", "[", "'img'", "]", "=", "[", "img", ".", "data", "[", "0", "]", "for", "img", "in", "data", "[", "'img'", "]", "]", "\n", "if", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "\n", "# scatter to specified GPU", "\n", "        ", "data", "=", "scatter", "(", "data", ",", "[", "device", "]", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "            ", "assert", "not", "isinstance", "(", "\n", "m", ",", "RoIPool", "\n", ")", ",", "'CPU inference with RoIPool is not supported currently.'", "\n", "\n", "# forward the model", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "results", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "\n", "", "if", "not", "is_batch", ":", "\n", "        ", "return", "results", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.inference.show_result_pyplot": [[189, 218], ["hasattr", "model.show_result"], "function", ["None"], ["", "def", "show_result_pyplot", "(", "model", ",", "\n", "img", ",", "\n", "result", ",", "\n", "score_thr", "=", "0.3", ",", "\n", "title", "=", "'result'", ",", "\n", "wait_time", "=", "0", ")", ":", "\n", "    ", "\"\"\"Visualize the detection results on the image.\n\n    Args:\n        model (nn.Module): The loaded detector.\n        img (str or np.ndarray): Image filename or loaded image.\n        result (tuple[list] or list): The detection result, can be either\n            (bbox, segm) or just bbox.\n        score_thr (float): The threshold to visualize the bboxes and masks.\n        title (str): Title of the pyplot figure.\n        wait_time (float): Value of waitKey param.\n                Default: 0.\n    \"\"\"", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "", "model", ".", "show_result", "(", "\n", "img", ",", "\n", "result", ",", "\n", "score_thr", "=", "score_thr", ",", "\n", "show", "=", "True", ",", "\n", "wait_time", "=", "wait_time", ",", "\n", "win_name", "=", "title", ",", "\n", "bbox_color", "=", "(", "72", ",", "101", ",", "241", ")", ",", "\n", "text_color", "=", "(", "72", ",", "101", ",", "241", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.train.set_random_seed": [[18, 35], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["from", "mmdet", ".", "utils", "import", "collect_env", ",", "get_root_logger", "\n", "\n", "\n", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a detector'", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'train config file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--work-dir'", ",", "help", "=", "'the dir to save logs and models'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--resume-from'", ",", "help", "=", "'the checkpoint file to resume from'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--no-validate'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether not to evaluate the checkpoint during training'", ")", "\n", "group_gpus", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "group_gpus", ".", "add_argument", "(", "\n", "'--gpus'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "'number of gpus to use '", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.train.train_detector": [[37, 171], ["mmdet.utils.get_root_logger", "mmcv.runner.build_optimizer", "mmcv.runner.build_runner", "cfg.get", "mmcv.runner.build_runner.register_training_hooks", "cfg.get", "mmcv.runner.build_runner.run", "isinstance", "mmdet.utils.get_root_logger.warning", "mmdet.datasets.build_dataloader", "cfg.get", "mmcv.parallel.MMDistributedDataParallel", "mmcv.parallel.MMDataParallel", "warnings.warn", "mmcv.runner.Fp16OptimizerHook", "cfg.get", "isinstance", "cfg.data.val.pop", "mmdet.datasets.build_dataset", "mmdet.datasets.build_dataloader", "cfg.get", "mmcv.runner.build_runner.register_hook", "isinstance", "mmcv.runner.build_runner.resume", "mmdet.utils.get_root_logger.warning", "mmdet.utils.get_root_logger.warning", "len", "mmcv.parallel.MMDataParallel.cuda", "mmcv.parallel.MMDataParallel.cuda", "dict", "mmcv.runner.OptimizerHook", "mmcv.runner.build_runner.register_hook", "mmdet.datasets.replace_ImageToTensor", "dict", "eval_hook", "isinstance", "hook_cfg.copy.copy", "hook_cfg.copy.pop", "mmcv.utils.build_from_cfg", "mmcv.runner.build_runner.register_hook", "mmcv.runner.build_runner.load_checkpoint", "mmcv.runner.DistSamplerSeedHook", "type", "torch.cuda.current_device", "type"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.utils.logger.get_root_logger", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataset", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.builder.build_dataloader", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.datasets.utils.replace_ImageToTensor"], ["group_gpus", ".", "add_argument", "(", "\n", "'--gpu-ids'", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "'+'", ",", "\n", "help", "=", "'ids of gpus to use '", "\n", "'(only applicable to non-distributed training)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--deterministic'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to set deterministic options for CUDNN backend.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file (deprecate), '", "\n", "'change to --cfg-options instead.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-options'", ",", "\n", "nargs", "=", "'+'", ",", "\n", "action", "=", "DictAction", ",", "\n", "help", "=", "'override some settings in the used config, the key-value pair '", "\n", "'in xxx=yyy format will be merged into config file. If the value to '", "\n", "'be overwritten is a list, it should be like key=\"[a,b]\" or key=a,b '", "\n", "'It also allows nested list/tuple values, e.g. key=\"[(a,b),(c,d)]\" '", "\n", "'Note that the quotation marks are necessary and that no white space '", "\n", "'is allowed.'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--launcher'", ",", "\n", "choices", "=", "[", "'none'", ",", "'pytorch'", ",", "'slurm'", ",", "'mpi'", "]", ",", "\n", "default", "=", "'none'", ",", "\n", "help", "=", "'job launcher'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "'LOCAL_RANK'", "not", "in", "os", ".", "environ", ":", "\n", "        ", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "local_rank", ")", "\n", "\n", "", "if", "args", ".", "options", "and", "args", ".", "cfg_options", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'--options and --cfg-options cannot be both '", "\n", "'specified, --options is deprecated in favor of --cfg-options'", ")", "\n", "", "if", "args", ".", "options", ":", "\n", "        ", "warnings", ".", "warn", "(", "'--options is deprecated in favor of --cfg-options'", ")", "\n", "args", ".", "cfg_options", "=", "args", ".", "options", "\n", "\n", "", "return", "args", "\n", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config", ")", "\n", "if", "args", ".", "cfg_options", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_dict", "(", "args", ".", "cfg_options", ")", "\n", "# import modules from string list.", "\n", "", "if", "cfg", ".", "get", "(", "'custom_imports'", ",", "None", ")", ":", "\n", "        ", "from", "mmcv", ".", "utils", "import", "import_modules_from_strings", "\n", "import_modules_from_strings", "(", "**", "cfg", "[", "'custom_imports'", "]", ")", "\n", "# set cudnn_benchmark", "\n", "", "if", "cfg", ".", "get", "(", "'cudnn_benchmark'", ",", "False", ")", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# work_dir is determined in this priority: CLI > segment in file > filename", "\n", "", "if", "args", ".", "work_dir", "is", "not", "None", ":", "\n", "# update configs according to CLI args if args.work_dir is not None", "\n", "        ", "cfg", ".", "work_dir", "=", "args", ".", "work_dir", "\n", "", "elif", "cfg", ".", "get", "(", "'work_dir'", ",", "None", ")", "is", "None", ":", "\n", "# use config filename as default work_dir if cfg.work_dir is None", "\n", "        ", "cfg", ".", "work_dir", "=", "osp", ".", "join", "(", "'./work_dirs'", ",", "\n", "osp", ".", "splitext", "(", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", "[", "0", "]", ")", "\n", "", "if", "args", ".", "resume_from", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "resume_from", "=", "args", ".", "resume_from", "\n", "", "if", "args", ".", "gpu_ids", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "args", ".", "gpu_ids", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "gpu_ids", "=", "range", "(", "1", ")", "if", "args", ".", "gpus", "is", "None", "else", "range", "(", "args", ".", "gpus", ")", "\n", "\n", "# init distributed env first, since logger depends on the dist info.", "\n", "", "if", "args", ".", "launcher", "==", "'none'", ":", "\n", "        ", "distributed", "=", "False", "\n", "", "else", ":", "\n", "        ", "distributed", "=", "True", "\n", "init_dist", "(", "args", ".", "launcher", ",", "**", "cfg", ".", "dist_params", ")", "\n", "# re-set gpu_ids with distributed training mode", "\n", "_", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "cfg", ".", "gpu_ids", "=", "range", "(", "world_size", ")", "\n", "\n", "# create work_dir", "\n", "", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "abspath", "(", "cfg", ".", "work_dir", ")", ")", "\n", "# dump config", "\n", "cfg", ".", "dump", "(", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "osp", ".", "basename", "(", "args", ".", "config", ")", ")", ")", "\n", "# init the logger before other steps", "\n", "timestamp", "=", "time", ".", "strftime", "(", "'%Y%m%d_%H%M%S'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "log_file", "=", "osp", ".", "join", "(", "cfg", ".", "work_dir", ",", "f'{timestamp}.log'", ")", "\n", "logger", "=", "get_root_logger", "(", "log_file", "=", "log_file", ",", "log_level", "=", "cfg", ".", "log_level", ")", "\n", "\n", "# init the meta dict to record some important information such as", "\n", "# environment info and seed, which will be logged", "\n", "meta", "=", "dict", "(", ")", "\n", "# log env info", "\n", "env_info_dict", "=", "collect_env", "(", ")", "\n", "env_info", "=", "'\\n'", ".", "join", "(", "[", "(", "f'{k}: {v}'", ")", "for", "k", ",", "v", "in", "env_info_dict", ".", "items", "(", ")", "]", ")", "\n", "dash_line", "=", "'-'", "*", "60", "+", "'\\n'", "\n", "logger", ".", "info", "(", "'Environment info:\\n'", "+", "dash_line", "+", "env_info", "+", "'\\n'", "+", "\n", "dash_line", ")", "\n", "meta", "[", "'env_info'", "]", "=", "env_info", "\n", "meta", "[", "'config'", "]", "=", "cfg", ".", "pretty_text", "\n", "# log some basic info", "\n", "logger", ".", "info", "(", "f'Distributed training: {distributed}'", ")", "\n", "logger", ".", "info", "(", "f'Config:\\n{cfg.pretty_text}'", ")", "\n", "\n", "# set random seeds", "\n", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "f'Set random seed to {args.seed}, '", "\n", "f'deterministic: {args.deterministic}'", ")", "\n", "set_random_seed", "(", "args", ".", "seed", ",", "deterministic", "=", "args", ".", "deterministic", ")", "\n", "", "cfg", ".", "seed", "=", "args", ".", "seed", "\n", "meta", "[", "'seed'", "]", "=", "args", ".", "seed", "\n", "meta", "[", "'exp_name'", "]", "=", "osp", ".", "basename", "(", "args", ".", "config", ")", "\n", "\n", "model", "=", "build_detector", "(", "\n", "cfg", ".", "model", ",", "\n", "train_cfg", "=", "cfg", ".", "get", "(", "'train_cfg'", ")", ",", "\n", "test_cfg", "=", "cfg", ".", "get", "(", "'test_cfg'", ")", ")", "\n", "\n", "datasets", "=", "[", "build_dataset", "(", "cfg", ".", "data", ".", "train", ")", "]", "\n", "if", "len", "(", "cfg", ".", "workflow", ")", "==", "2", ":", "\n", "        ", "val_dataset", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "data", ".", "val", ")", "\n", "val_dataset", ".", "pipeline", "=", "cfg", ".", "data", ".", "train", ".", "pipeline", "\n", "datasets", ".", "append", "(", "build_dataset", "(", "val_dataset", ")", ")", "\n", "", "if", "cfg", ".", "checkpoint_config", "is", "not", "None", ":", "\n", "# save mmdet version, config file content and class names in", "\n", "# checkpoints as meta data", "\n", "        ", "cfg", ".", "checkpoint_config", ".", "meta", "=", "dict", "(", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.single_gpu_test": [[16, 68], ["model.eval", "mmcv.ProgressBar", "enumerate", "len", "len", "isinstance", "results.extend", "range", "torch.no_grad", "torch.no_grad", "model", "mmcv.image.tensor2imgs", "enumerate", "mmcv.ProgressBar.update", "isinstance", "len", "len", "zip", "mmcv.imresize", "model.module.show_result", "os.join", "mmdet.core.encode_mask_results"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.utils.encode_mask_results"], ["def", "single_gpu_test", "(", "model", ",", "\n", "data_loader", ",", "\n", "show", "=", "False", ",", "\n", "out_dir", "=", "None", ",", "\n", "show_score_thr", "=", "0.3", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "\n", "", "batch_size", "=", "len", "(", "result", ")", "\n", "if", "show", "or", "out_dir", ":", "\n", "            ", "if", "batch_size", "==", "1", "and", "isinstance", "(", "data", "[", "'img'", "]", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "img_tensor", "=", "data", "[", "'img'", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "img_tensor", "=", "data", "[", "'img'", "]", "[", "0", "]", ".", "data", "[", "0", "]", "\n", "", "img_metas", "=", "data", "[", "'img_metas'", "]", "[", "0", "]", ".", "data", "[", "0", "]", "\n", "imgs", "=", "tensor2imgs", "(", "img_tensor", ",", "**", "img_metas", "[", "0", "]", "[", "'img_norm_cfg'", "]", ")", "\n", "assert", "len", "(", "imgs", ")", "==", "len", "(", "img_metas", ")", "\n", "\n", "for", "i", ",", "(", "img", ",", "img_meta", ")", "in", "enumerate", "(", "zip", "(", "imgs", ",", "img_metas", ")", ")", ":", "\n", "                ", "h", ",", "w", ",", "_", "=", "img_meta", "[", "'img_shape'", "]", "\n", "img_show", "=", "img", "[", ":", "h", ",", ":", "w", ",", ":", "]", "\n", "\n", "ori_h", ",", "ori_w", "=", "img_meta", "[", "'ori_shape'", "]", "[", ":", "-", "1", "]", "\n", "img_show", "=", "mmcv", ".", "imresize", "(", "img_show", ",", "(", "ori_w", ",", "ori_h", ")", ")", "\n", "\n", "if", "out_dir", ":", "\n", "                    ", "out_file", "=", "osp", ".", "join", "(", "out_dir", ",", "img_meta", "[", "'ori_filename'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "out_file", "=", "None", "\n", "\n", "", "model", ".", "module", ".", "show_result", "(", "\n", "img_show", ",", "\n", "result", "[", "i", "]", ",", "\n", "show", "=", "show", ",", "\n", "out_file", "=", "out_file", ",", "\n", "score_thr", "=", "show_score_thr", ")", "\n", "\n", "# encode mask results", "\n", "", "", "if", "isinstance", "(", "result", "[", "0", "]", ",", "tuple", ")", ":", "\n", "            ", "result", "=", "[", "(", "bbox_results", ",", "encode_mask_results", "(", "mask_results", ")", ")", "\n", "for", "bbox_results", ",", "mask_results", "in", "result", "]", "\n", "\n", "", "results", ".", "extend", "(", "result", ")", "\n", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "prog_bar", ".", "update", "(", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.multi_gpu_test": [[70, 116], ["model.eval", "mmcv.runner.get_dist_info", "time.sleep", "enumerate", "mmcv.ProgressBar", "collect_results_cpu.extend", "test.collect_results_gpu", "test.collect_results_cpu", "len", "torch.no_grad", "torch.no_grad", "model", "isinstance", "len", "range", "len", "len", "mmcv.ProgressBar.update", "mmdet.core.encode_mask_results"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.collect_results_gpu", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.collect_results_cpu", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.mask.utils.encode_mask_results"], ["", "def", "multi_gpu_test", "(", "model", ",", "data_loader", ",", "tmpdir", "=", "None", ",", "gpu_collect", "=", "False", ")", ":", "\n", "    ", "\"\"\"Test model with multiple gpus.\n\n    This method tests model with multiple gpus and collects the results\n    under two different modes: gpu and cpu modes. By setting 'gpu_collect=True'\n    it encodes results to gpu tensors and use gpu communication for results\n    collection. On cpu mode it saves the results on different gpus to 'tmpdir'\n    and collects them by the rank 0 worker.\n\n    Args:\n        model (nn.Module): Model to be tested.\n        data_loader (nn.Dataloader): Pytorch data loader.\n        tmpdir (str): Path of directory to save the temporary results from\n            different gpus under cpu mode.\n        gpu_collect (bool): Option to use either gpu or cpu to collect results.\n\n    Returns:\n        list: The prediction results.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "results", "=", "[", "]", "\n", "dataset", "=", "data_loader", ".", "dataset", "\n", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "prog_bar", "=", "mmcv", ".", "ProgressBar", "(", "len", "(", "dataset", ")", ")", "\n", "", "time", ".", "sleep", "(", "2", ")", "# This line can prevent deadlock problem in some cases.", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "result", "=", "model", "(", "return_loss", "=", "False", ",", "rescale", "=", "True", ",", "**", "data", ")", "\n", "# encode mask results", "\n", "if", "isinstance", "(", "result", "[", "0", "]", ",", "tuple", ")", ":", "\n", "                ", "result", "=", "[", "(", "bbox_results", ",", "encode_mask_results", "(", "mask_results", ")", ")", "\n", "for", "bbox_results", ",", "mask_results", "in", "result", "]", "\n", "", "", "results", ".", "extend", "(", "result", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "batch_size", "=", "len", "(", "result", ")", "\n", "for", "_", "in", "range", "(", "batch_size", "*", "world_size", ")", ":", "\n", "                ", "prog_bar", ".", "update", "(", ")", "\n", "\n", "# collect results from all ranks", "\n", "", "", "", "if", "gpu_collect", ":", "\n", "        ", "results", "=", "collect_results_gpu", "(", "results", ",", "len", "(", "dataset", ")", ")", "\n", "", "else", ":", "\n", "        ", "results", "=", "collect_results_cpu", "(", "results", ",", "len", "(", "dataset", ")", ",", "tmpdir", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.collect_results_cpu": [[118, 159], ["mmcv.runner.get_dist_info", "mmcv.dump", "torch.barrier", "torch.full", "torch.full", "torch.broadcast", "torch.full.cpu().numpy().tobytes().decode().rstrip", "mmcv.mkdir_or_exist", "os.join", "range", "zip", "shutil.rmtree", "mmcv.mkdir_or_exist", "tempfile.mkdtemp", "torch.tensor", "torch.tensor", "os.join", "part_list.append", "ordered_results.extend", "bytearray", "torch.full.cpu().numpy().tobytes().decode", "mmcv.load", "list", "torch.tensor.encode", "len", "torch.full.cpu().numpy().tobytes", "torch.full.cpu().numpy", "torch.full.cpu"], "function", ["home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.decode", "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.coder.legacy_delta_xywh_bbox_coder.LegacyDeltaXYWHBBoxCoder.encode"], ["", "def", "collect_results_cpu", "(", "result_part", ",", "size", ",", "tmpdir", "=", "None", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# create a tmp dir if it is not specified", "\n", "if", "tmpdir", "is", "None", ":", "\n", "        ", "MAX_LEN", "=", "512", "\n", "# 32 is whitespace", "\n", "dir_tensor", "=", "torch", ".", "full", "(", "(", "MAX_LEN", ",", ")", ",", "\n", "32", ",", "\n", "dtype", "=", "torch", ".", "uint8", ",", "\n", "device", "=", "'cuda'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "mmcv", ".", "mkdir_or_exist", "(", "'.dist_test'", ")", "\n", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", "dir", "=", "'.dist_test'", ")", "\n", "tmpdir", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "tmpdir", ".", "encode", "(", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "dir_tensor", "[", ":", "len", "(", "tmpdir", ")", "]", "=", "tmpdir", "\n", "", "dist", ".", "broadcast", "(", "dir_tensor", ",", "0", ")", "\n", "tmpdir", "=", "dir_tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ".", "decode", "(", ")", ".", "rstrip", "(", ")", "\n", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "tmpdir", ")", "\n", "# dump the part result to the dir", "\n", "", "mmcv", ".", "dump", "(", "result_part", ",", "osp", ".", "join", "(", "tmpdir", ",", "f'part_{rank}.pkl'", ")", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "# collect all parts", "\n", "if", "rank", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "else", ":", "\n", "# load results of all parts from tmp dir", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "part_file", "=", "osp", ".", "join", "(", "tmpdir", ",", "f'part_{i}.pkl'", ")", "\n", "part_list", ".", "append", "(", "mmcv", ".", "load", "(", "part_file", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "# remove tmp dir", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "return", "ordered_results", "\n", "\n"]], "home.repos.pwc.inspect_result.Boese0601_2021-National-Underwater-Robotics-Vision-Optics.apis.test.collect_results_gpu": [[161, 192], ["mmcv.runner.get_dist_info", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.all_gather", "torch.tensor().max", "torch.tensor().max", "torch.zeros", "torch.zeros", "torch.all_gather", "bytearray", "torch.tensor.clone", "torch.tensor.new_zeros", "zip", "zip", "pickle.dumps", "range", "torch.tensor", "torch.tensor", "range", "part_list.append", "ordered_results.extend", "pickle.loads", "list", "recv[].cpu().numpy().tobytes", "recv[].cpu().numpy", "recv[].cpu"], "function", ["None"], ["", "", "def", "collect_results_gpu", "(", "result_part", ",", "size", ")", ":", "\n", "    ", "rank", ",", "world_size", "=", "get_dist_info", "(", ")", "\n", "# dump result part to tensor with pickle", "\n", "part_tensor", "=", "torch", ".", "tensor", "(", "\n", "bytearray", "(", "pickle", ".", "dumps", "(", "result_part", ")", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "# gather all result part tensor shape", "\n", "shape_tensor", "=", "torch", ".", "tensor", "(", "part_tensor", ".", "shape", ",", "device", "=", "'cuda'", ")", "\n", "shape_list", "=", "[", "shape_tensor", ".", "clone", "(", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "shape_list", ",", "shape_tensor", ")", "\n", "# padding result part tensor to max length", "\n", "shape_max", "=", "torch", ".", "tensor", "(", "shape_list", ")", ".", "max", "(", ")", "\n", "part_send", "=", "torch", ".", "zeros", "(", "shape_max", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "'cuda'", ")", "\n", "part_send", "[", ":", "shape_tensor", "[", "0", "]", "]", "=", "part_tensor", "\n", "part_recv_list", "=", "[", "\n", "part_tensor", ".", "new_zeros", "(", "shape_max", ")", "for", "_", "in", "range", "(", "world_size", ")", "\n", "]", "\n", "# gather all result part", "\n", "dist", ".", "all_gather", "(", "part_recv_list", ",", "part_send", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "part_list", "=", "[", "]", "\n", "for", "recv", ",", "shape", "in", "zip", "(", "part_recv_list", ",", "shape_list", ")", ":", "\n", "            ", "part_list", ".", "append", "(", "\n", "pickle", ".", "loads", "(", "recv", "[", ":", "shape", "[", "0", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", ")", ")", "\n", "# sort the results", "\n", "", "ordered_results", "=", "[", "]", "\n", "for", "res", "in", "zip", "(", "*", "part_list", ")", ":", "\n", "            ", "ordered_results", ".", "extend", "(", "list", "(", "res", ")", ")", "\n", "# the dataloader may pad some samples", "\n", "", "ordered_results", "=", "ordered_results", "[", ":", "size", "]", "\n", "return", "ordered_results", "\n", "", "", ""]]}