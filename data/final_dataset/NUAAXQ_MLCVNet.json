{"home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.demo.preprocess_point_cloud": [[32, 41], ["numpy.percentile", "numpy.concatenate", "pc_util.random_sampling", "numpy.expand_dims", "pc_util.random_sampling.astype", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.random_sampling"], ["def", "preprocess_point_cloud", "(", "point_cloud", ")", ":", "\n", "    ", "''' Prepare the numpy point cloud (N,3) for forward pass '''", "\n", "point_cloud", "=", "point_cloud", "[", ":", ",", "0", ":", "3", "]", "# do not use color for now", "\n", "floor_height", "=", "np", ".", "percentile", "(", "point_cloud", "[", ":", ",", "2", "]", ",", "0.99", ")", "\n", "height", "=", "point_cloud", "[", ":", ",", "2", "]", "-", "floor_height", "\n", "point_cloud", "=", "np", ".", "concatenate", "(", "[", "point_cloud", ",", "np", ".", "expand_dims", "(", "height", ",", "1", ")", "]", ",", "1", ")", "# (N,4) or (N,7)", "\n", "point_cloud", "=", "random_sampling", "(", "point_cloud", ",", "FLAGS", ".", "num_point", ")", "\n", "pc", "=", "np", ".", "expand_dims", "(", "point_cloud", ".", "astype", "(", "np", ".", "float32", ")", ",", "0", ")", "# (1,40000,4)", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.eval.log_string": [[63, 67], ["DUMP_FOUT.write", "DUMP_FOUT.flush", "print"], "function", ["None"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "DUMP_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "DUMP_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.eval.my_worker_init_fn": [[69, 71], ["numpy.random.seed", "numpy.random.get_state"], "function", ["None"], ["", "def", "my_worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.eval.evaluate_one_epoch": [[130, 177], ["net.eval", "enumerate", "sorted", "enumerate", "ap_helper.APCalculator", "criterion", "ap_helper.parse_predictions", "ap_helper.parse_groundtruths", "stat_dict.keys", "eval.log_string", "print", "ap_calculator.compute_metrics", "float", "print", "batch_data_label[].to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "ap_calculator.step", "eval.log_string", "end_points[].item", "float"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.eval.eval", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.parse_groundtruths", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.log_string", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.APCalculator.compute_metrics", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.log_string"], ["def", "evaluate_one_epoch", "(", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "\n", "ap_calculator_list", "=", "[", "APCalculator", "(", "iou_thresh", ",", "DATASET_CONFIG", ".", "class2type", ")", "for", "iou_thresh", "in", "AP_IOU_THRESHOLDS", "]", "\n", "net", ".", "eval", "(", ")", "# set model to eval mode (for bn and dp)", "\n", "for", "batch_idx", ",", "batch_data_label", "in", "enumerate", "(", "TEST_DATALOADER", ")", ":", "\n", "        ", "if", "batch_idx", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Eval batch: %d'", "%", "(", "batch_idx", ")", ")", "\n", "", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "batch_data_label", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "\n", "# Forward pass", "\n", "", "inputs", "=", "{", "'point_clouds'", ":", "batch_data_label", "[", "'point_clouds'", "]", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "end_points", "=", "net", "(", "inputs", ")", "\n", "\n", "# Compute loss", "\n", "", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points", ")", "\n", "end_points", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", "\n", "", "loss", ",", "end_points", "=", "criterion", "(", "end_points", ",", "DATASET_CONFIG", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "for", "key", "in", "end_points", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "batch_pred_map_cls", "=", "parse_predictions", "(", "end_points", ",", "CONFIG_DICT", ")", "\n", "batch_gt_map_cls", "=", "parse_groundtruths", "(", "end_points", ",", "CONFIG_DICT", ")", "\n", "for", "ap_calculator", "in", "ap_calculator_list", ":", "\n", "            ", "ap_calculator", ".", "step", "(", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", "\n", "\n", "\n", "# Log statistics", "\n", "", "", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "log_string", "(", "'eval mean %s: %f'", "%", "(", "key", ",", "stat_dict", "[", "key", "]", "/", "(", "float", "(", "batch_idx", "+", "1", ")", ")", ")", ")", "\n", "\n", "# Evaluate average precision", "\n", "", "for", "i", ",", "ap_calculator", "in", "enumerate", "(", "ap_calculator_list", ")", ":", "\n", "        ", "print", "(", "'-'", "*", "10", ",", "'iou_thresh: %f'", "%", "(", "AP_IOU_THRESHOLDS", "[", "i", "]", ")", ",", "'-'", "*", "10", ")", "\n", "metrics_dict", "=", "ap_calculator", ".", "compute_metrics", "(", ")", "\n", "for", "key", "in", "metrics_dict", ":", "\n", "            ", "log_string", "(", "'eval %s: %f'", "%", "(", "key", ",", "metrics_dict", "[", "key", "]", ")", ")", "\n", "\n", "", "", "mean_loss", "=", "stat_dict", "[", "'loss'", "]", "/", "float", "(", "batch_idx", "+", "1", ")", "\n", "return", "mean_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.eval.eval": [[179, 185], ["eval.log_string", "numpy.random.seed", "eval.evaluate_one_epoch", "str", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.log_string", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.evaluate_one_epoch"], ["", "def", "eval", "(", ")", ":", "\n", "    ", "log_string", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "# Reset numpy seed.", "\n", "# REF: https://github.com/pytorch/pytorch/issues/5059", "\n", "np", ".", "random", ".", "seed", "(", ")", "\n", "loss", "=", "evaluate_one_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.log_string": [[101, 105], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["None"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "DUMP_DIR", ")", ":", "os", ".", "mkdir", "(", "DUMP_DIR", ")", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.my_worker_init_fn": [[108, 110], ["numpy.random.seed", "numpy.random.get_state"], "function", ["None"], ["def", "my_worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.get_current_lr": [[190, 196], ["enumerate"], "function", ["None"], ["def", "get_current_lr", "(", "epoch", ")", ":", "\n", "    ", "lr", "=", "BASE_LEARNING_RATE", "\n", "for", "i", ",", "lr_decay_epoch", "in", "enumerate", "(", "LR_DECAY_STEPS", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epoch", ":", "\n", "            ", "lr", "*=", "LR_DECAY_RATES", "[", "i", "]", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.adjust_learning_rate": [[197, 201], ["train.get_current_lr"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.get_current_lr"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "lr", "=", "get_current_lr", "(", "epoch", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.train_one_epoch": [[215, 251], ["train.adjust_learning_rate", "bnm_scheduler.step", "net.train", "enumerate", "optimizer.zero_grad", "net", "criterion", "loss.backward", "optimizer.step", "batch_data_label[].to", "train.log_string", "TRAIN_VISUALIZER.log_scalars", "sorted", "end_points[].item", "stat_dict.keys", "train.log_string", "len"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.adjust_learning_rate", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.train", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.log_string", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.tf_visualizer.Visualizer.log_scalars", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.log_string"], ["def", "train_one_epoch", "(", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "adjust_learning_rate", "(", "optimizer", ",", "EPOCH_CNT", ")", "\n", "bnm_scheduler", ".", "step", "(", ")", "# decay BN momentum", "\n", "net", ".", "train", "(", ")", "# set model to training mode", "\n", "for", "batch_idx", ",", "batch_data_label", "in", "enumerate", "(", "TRAIN_DATALOADER", ")", ":", "\n", "        ", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "batch_data_label", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "\n", "# Forward pass", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "inputs", "=", "{", "'point_clouds'", ":", "batch_data_label", "[", "'point_clouds'", "]", "}", "\n", "end_points", "=", "net", "(", "inputs", ")", "\n", "\n", "# Compute loss and gradients, update parameters.", "\n", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points", ")", "\n", "end_points", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", "\n", "", "loss", ",", "end_points", "=", "criterion", "(", "end_points", ",", "DATASET_CONFIG", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "for", "key", "in", "end_points", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "batch_interval", "=", "10", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "batch_interval", "==", "0", ":", "\n", "            ", "log_string", "(", "' ---- batch: %03d ----'", "%", "(", "batch_idx", "+", "1", ")", ")", "\n", "TRAIN_VISUALIZER", ".", "log_scalars", "(", "{", "key", ":", "stat_dict", "[", "key", "]", "/", "batch_interval", "for", "key", "in", "stat_dict", "}", ",", "\n", "(", "EPOCH_CNT", "*", "len", "(", "TRAIN_DATALOADER", ")", "+", "batch_idx", ")", "*", "BATCH_SIZE", ")", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "log_string", "(", "'mean %s: %f'", "%", "(", "key", ",", "stat_dict", "[", "key", "]", "/", "batch_interval", ")", ")", "\n", "stat_dict", "[", "key", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.evaluate_one_epoch": [[252, 301], ["ap_helper.APCalculator", "net.eval", "enumerate", "TEST_VISUALIZER.log_scalars", "sorted", "ap_helper.APCalculator.compute_metrics", "criterion", "ap_helper.parse_predictions", "ap_helper.parse_groundtruths", "ap_helper.APCalculator.step", "stat_dict.keys", "train.log_string", "train.log_string", "float", "print", "batch_data_label[].to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "MODEL.dump_results", "end_points[].item", "float", "len", "float"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.eval.eval", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.tf_visualizer.Visualizer.log_scalars", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.APCalculator.compute_metrics", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.parse_groundtruths", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.log_string", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.log_string", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.dump_helper.dump_results"], ["", "", "", "", "def", "evaluate_one_epoch", "(", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "ap_calculator", "=", "APCalculator", "(", "ap_iou_thresh", "=", "FLAGS", ".", "ap_iou_thresh", ",", "\n", "class2type_map", "=", "DATASET_CONFIG", ".", "class2type", ")", "\n", "net", ".", "eval", "(", ")", "# set model to eval mode (for bn and dp)", "\n", "for", "batch_idx", ",", "batch_data_label", "in", "enumerate", "(", "TEST_DATALOADER", ")", ":", "\n", "        ", "if", "batch_idx", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Eval batch: %d'", "%", "(", "batch_idx", ")", ")", "\n", "", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "batch_data_label", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "\n", "# Forward pass", "\n", "", "inputs", "=", "{", "'point_clouds'", ":", "batch_data_label", "[", "'point_clouds'", "]", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "end_points", "=", "net", "(", "inputs", ")", "\n", "\n", "# Compute loss", "\n", "", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points", ")", "\n", "end_points", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", "\n", "", "loss", ",", "end_points", "=", "criterion", "(", "end_points", ",", "DATASET_CONFIG", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "for", "key", "in", "end_points", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "batch_pred_map_cls", "=", "parse_predictions", "(", "end_points", ",", "CONFIG_DICT", ")", "\n", "batch_gt_map_cls", "=", "parse_groundtruths", "(", "end_points", ",", "CONFIG_DICT", ")", "\n", "ap_calculator", ".", "step", "(", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", "\n", "\n", "# Dump evaluation results for visualization", "\n", "if", "FLAGS", ".", "dump_results", "and", "batch_idx", "==", "0", "and", "EPOCH_CNT", "%", "10", "==", "0", ":", "\n", "            ", "MODEL", ".", "dump_results", "(", "end_points", ",", "DUMP_DIR", ",", "DATASET_CONFIG", ")", "\n", "\n", "# Log statistics", "\n", "", "", "TEST_VISUALIZER", ".", "log_scalars", "(", "{", "key", ":", "stat_dict", "[", "key", "]", "/", "float", "(", "batch_idx", "+", "1", ")", "for", "key", "in", "stat_dict", "}", ",", "\n", "(", "EPOCH_CNT", "+", "1", ")", "*", "len", "(", "TRAIN_DATALOADER", ")", "*", "BATCH_SIZE", ")", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "log_string", "(", "'eval mean %s: %f'", "%", "(", "key", ",", "stat_dict", "[", "key", "]", "/", "(", "float", "(", "batch_idx", "+", "1", ")", ")", ")", ")", "\n", "\n", "# Evaluate average precision", "\n", "", "metrics_dict", "=", "ap_calculator", ".", "compute_metrics", "(", ")", "\n", "for", "key", "in", "metrics_dict", ":", "\n", "        ", "log_string", "(", "'eval %s: %f'", "%", "(", "key", ",", "metrics_dict", "[", "key", "]", ")", ")", "\n", "\n", "", "mean_loss", "=", "stat_dict", "[", "'loss'", "]", "/", "float", "(", "batch_idx", "+", "1", ")", "\n", "return", "mean_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.train": [[303, 329], ["range", "train.log_string", "train.log_string", "train.log_string", "train.log_string", "numpy.random.seed", "train.train_one_epoch", "torch.save", "torch.save", "torch.save", "str", "train.evaluate_one_epoch", "optimizer.state_dict", "net.module.state_dict", "os.path.join", "train.get_current_lr", "bnm_scheduler.lmbd", "datetime.datetime.now", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.log_string", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.log_string", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.log_string", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.log_string", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.train_one_epoch", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.evaluate_one_epoch", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.get_current_lr"], ["", "def", "train", "(", "start_epoch", ")", ":", "\n", "    ", "global", "EPOCH_CNT", "\n", "min_loss", "=", "1e10", "\n", "loss", "=", "0", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "MAX_EPOCH", ")", ":", "\n", "        ", "EPOCH_CNT", "=", "epoch", "\n", "log_string", "(", "'**** EPOCH %03d ****'", "%", "(", "epoch", ")", ")", "\n", "log_string", "(", "'Current learning rate: %f'", "%", "(", "get_current_lr", "(", "epoch", ")", ")", ")", "\n", "log_string", "(", "'Current BN decay momentum: %f'", "%", "(", "bnm_scheduler", ".", "lmbd", "(", "bnm_scheduler", ".", "last_epoch", ")", ")", ")", "\n", "log_string", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "# Reset numpy seed.", "\n", "# REF: https://github.com/pytorch/pytorch/issues/5059", "\n", "np", ".", "random", ".", "seed", "(", ")", "\n", "train_one_epoch", "(", ")", "\n", "if", "EPOCH_CNT", "==", "0", "or", "EPOCH_CNT", "%", "10", "==", "9", ":", "# Eval every 10 epochs", "\n", "            ", "loss", "=", "evaluate_one_epoch", "(", ")", "\n", "# Save checkpoint", "\n", "", "save_dict", "=", "{", "'epoch'", ":", "epoch", "+", "1", ",", "# after training one epoch, the start_epoch should be epoch+1", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss'", ":", "loss", ",", "\n", "}", "\n", "try", ":", "# with nn.DataParallel() the net is added as a submodule of DataParallel", "\n", "            ", "save_dict", "[", "'model_state_dict'", "]", "=", "net", ".", "module", ".", "state_dict", "(", ")", "\n", "", "except", ":", "\n", "            ", "save_dict", "[", "'model_state_dict'", "]", "=", "net", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'checkpoint.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nms.nms_2d": [[13, 43], ["numpy.argsort", "pick.append", "range", "numpy.delete", "max", "max", "min", "min", "print", "suppress.append"], "function", ["None"], ["def", "nms_2d", "(", "boxes", ",", "overlap_threshold", ")", ":", "\n", "    ", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "2", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "score", "=", "boxes", "[", ":", ",", "4", "]", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "\n", "I", "=", "np", ".", "argsort", "(", "score", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "suppress", "=", "[", "last", "-", "1", "]", "\n", "for", "pos", "in", "range", "(", "last", "-", "1", ")", ":", "\n", "            ", "j", "=", "I", "[", "pos", "]", "\n", "xx1", "=", "max", "(", "x1", "[", "i", "]", ",", "x1", "[", "j", "]", ")", "\n", "yy1", "=", "max", "(", "y1", "[", "i", "]", ",", "y1", "[", "j", "]", ")", "\n", "xx2", "=", "min", "(", "x2", "[", "i", "]", ",", "x2", "[", "j", "]", ")", "\n", "yy2", "=", "min", "(", "y2", "[", "i", "]", ",", "y2", "[", "j", "]", ")", "\n", "w", "=", "xx2", "-", "xx1", "\n", "h", "=", "yy2", "-", "yy1", "\n", "if", "(", "w", ">", "0", "and", "h", ">", "0", ")", ":", "\n", "                ", "o", "=", "w", "*", "h", "/", "area", "[", "j", "]", "\n", "print", "(", "'Overlap is'", ",", "o", ")", "\n", "if", "(", "o", ">", "overlap_threshold", ")", ":", "\n", "                    ", "suppress", ".", "append", "(", "pos", ")", "\n", "", "", "", "I", "=", "np", ".", "delete", "(", "I", ",", "suppress", ")", "\n", "", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nms.nms_2d_faster": [[44, 76], ["numpy.argsort", "pick.append", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.delete", "numpy.concatenate", "numpy.where"], "function", ["None"], ["", "def", "nms_2d_faster", "(", "boxes", ",", "overlap_threshold", ",", "old_type", "=", "False", ")", ":", "\n", "    ", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "2", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "score", "=", "boxes", "[", ":", ",", "4", "]", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "\n", "I", "=", "np", ".", "argsort", "(", "score", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "0", ",", "xx2", "-", "xx1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0", ",", "yy2", "-", "yy1", ")", "\n", "\n", "if", "old_type", ":", "\n", "            ", "o", "=", "(", "w", "*", "h", ")", "/", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "inter", "=", "w", "*", "h", "\n", "o", "=", "inter", "/", "(", "area", "[", "i", "]", "+", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "-", "inter", ")", "\n", "\n", "", "I", "=", "np", ".", "delete", "(", "I", ",", "np", ".", "concatenate", "(", "(", "[", "last", "-", "1", "]", ",", "np", ".", "where", "(", "o", ">", "overlap_threshold", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nms.nms_3d_faster": [[77, 114], ["numpy.argsort", "pick.append", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.delete", "numpy.concatenate", "numpy.where"], "function", ["None"], ["", "def", "nms_3d_faster", "(", "boxes", ",", "overlap_threshold", ",", "old_type", "=", "False", ")", ":", "\n", "    ", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "z1", "=", "boxes", "[", ":", ",", "2", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "4", "]", "\n", "z2", "=", "boxes", "[", ":", ",", "5", "]", "\n", "score", "=", "boxes", "[", ":", ",", "6", "]", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "*", "(", "z2", "-", "z1", ")", "\n", "\n", "I", "=", "np", ".", "argsort", "(", "score", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz1", "=", "np", ".", "maximum", "(", "z1", "[", "i", "]", ",", "z1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz2", "=", "np", ".", "minimum", "(", "z2", "[", "i", "]", ",", "z2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "\n", "l", "=", "np", ".", "maximum", "(", "0", ",", "xx2", "-", "xx1", ")", "\n", "w", "=", "np", ".", "maximum", "(", "0", ",", "yy2", "-", "yy1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0", ",", "zz2", "-", "zz1", ")", "\n", "\n", "if", "old_type", ":", "\n", "            ", "o", "=", "(", "l", "*", "w", "*", "h", ")", "/", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "inter", "=", "l", "*", "w", "*", "h", "\n", "o", "=", "inter", "/", "(", "area", "[", "i", "]", "+", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "-", "inter", ")", "\n", "\n", "", "I", "=", "np", ".", "delete", "(", "I", ",", "np", ".", "concatenate", "(", "(", "[", "last", "-", "1", "]", ",", "np", ".", "where", "(", "o", ">", "overlap_threshold", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nms.nms_3d_faster_samecls": [[115, 156], ["numpy.argsort", "pick.append", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.delete", "numpy.concatenate", "numpy.where"], "function", ["None"], ["", "def", "nms_3d_faster_samecls", "(", "boxes", ",", "overlap_threshold", ",", "old_type", "=", "False", ")", ":", "\n", "    ", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "z1", "=", "boxes", "[", ":", ",", "2", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "4", "]", "\n", "z2", "=", "boxes", "[", ":", ",", "5", "]", "\n", "score", "=", "boxes", "[", ":", ",", "6", "]", "\n", "cls", "=", "boxes", "[", ":", ",", "7", "]", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "*", "(", "z2", "-", "z1", ")", "\n", "\n", "I", "=", "np", ".", "argsort", "(", "score", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz1", "=", "np", ".", "maximum", "(", "z1", "[", "i", "]", ",", "z1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz2", "=", "np", ".", "minimum", "(", "z2", "[", "i", "]", ",", "z2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "cls1", "=", "cls", "[", "i", "]", "\n", "cls2", "=", "cls", "[", "I", "[", ":", "last", "-", "1", "]", "]", "\n", "\n", "l", "=", "np", ".", "maximum", "(", "0", ",", "xx2", "-", "xx1", ")", "\n", "w", "=", "np", ".", "maximum", "(", "0", ",", "yy2", "-", "yy1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0", ",", "zz2", "-", "zz1", ")", "\n", "\n", "if", "old_type", ":", "\n", "            ", "o", "=", "(", "l", "*", "w", "*", "h", ")", "/", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "inter", "=", "l", "*", "w", "*", "h", "\n", "o", "=", "inter", "/", "(", "area", "[", "i", "]", "+", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "-", "inter", ")", "\n", "", "o", "=", "o", "*", "(", "cls1", "==", "cls2", ")", "\n", "\n", "I", "=", "np", ".", "delete", "(", "I", ",", "np", ".", "concatenate", "(", "(", "[", "last", "-", "1", "]", ",", "np", ".", "where", "(", "o", ">", "overlap_threshold", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nms.nms_crnr_dist": [[158, 174], ["numpy.argsort", "pick.append", "numpy.delete", "scores.append", "numpy.concatenate", "pc_util.bbox_corner_dist_measure", "numpy.where", "numpy.array"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.bbox_corner_dist_measure"], ["", "def", "nms_crnr_dist", "(", "boxes", ",", "conf", ",", "overlap_threshold", ")", ":", "\n", "\n", "    ", "I", "=", "np", ".", "argsort", "(", "conf", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "for", "ind", "in", "I", "[", ":", "-", "1", "]", ":", "\n", "            ", "scores", ".", "append", "(", "bbox_corner_dist_measure", "(", "boxes", "[", "i", ",", ":", "]", ",", "boxes", "[", "ind", ",", ":", "]", ")", ")", "\n", "\n", "", "I", "=", "np", ".", "delete", "(", "I", ",", "np", ".", "concatenate", "(", "(", "[", "last", "-", "1", "]", ",", "np", ".", "where", "(", "np", ".", "array", "(", "scores", ")", ">", "overlap_threshold", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.random_sampling": [[35, 44], ["numpy.random.choice"], "function", ["None"], ["def", "random_sampling", "(", "pc", ",", "num_sample", ",", "replace", "=", "None", ",", "return_choices", "=", "False", ")", ":", "\n", "    ", "\"\"\" Input is NxC, output is num_samplexC\n    \"\"\"", "\n", "if", "replace", "is", "None", ":", "replace", "=", "(", "pc", ".", "shape", "[", "0", "]", "<", "num_sample", ")", "\n", "choices", "=", "np", ".", "random", ".", "choice", "(", "pc", ".", "shape", "[", "0", "]", ",", "num_sample", ",", "replace", "=", "replace", ")", "\n", "if", "return_choices", ":", "\n", "        ", "return", "pc", "[", "choices", "]", ",", "choices", "\n", "", "else", ":", "\n", "        ", "return", "pc", "[", "choices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.point_cloud_to_volume_batch": [[49, 64], ["range", "pc_util.point_cloud_to_volume", "numpy.vstack", "numpy.concatenate", "numpy.squeeze", "vol_list.append", "vol_list.append", "point_cloud_to_volume.flatten", "numpy.expand_dims", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.point_cloud_to_volume"], ["", "", "def", "point_cloud_to_volume_batch", "(", "point_clouds", ",", "vsize", "=", "12", ",", "radius", "=", "1.0", ",", "flatten", "=", "True", ")", ":", "\n", "    ", "\"\"\" Input is BxNx3 batch of point cloud\n        Output is Bx(vsize^3)\n    \"\"\"", "\n", "vol_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "point_clouds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "vol", "=", "point_cloud_to_volume", "(", "np", ".", "squeeze", "(", "point_clouds", "[", "b", ",", ":", ",", ":", "]", ")", ",", "vsize", ",", "radius", ")", "\n", "if", "flatten", ":", "\n", "            ", "vol_list", ".", "append", "(", "vol", ".", "flatten", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "vol_list", ".", "append", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "vol", ",", "-", "1", ")", ",", "0", ")", ")", "\n", "", "", "if", "flatten", ":", "\n", "        ", "return", "np", ".", "vstack", "(", "vol_list", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "vol_list", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.point_cloud_to_volume": [[66, 77], ["numpy.zeros", "locations.astype.astype", "float"], "function", ["None"], ["", "", "def", "point_cloud_to_volume", "(", "points", ",", "vsize", ",", "radius", "=", "1.0", ")", ":", "\n", "    ", "\"\"\" input is Nx3 points.\n        output is vsize*vsize*vsize\n        assumes points are in range [-radius, radius]\n    \"\"\"", "\n", "vol", "=", "np", ".", "zeros", "(", "(", "vsize", ",", "vsize", ",", "vsize", ")", ")", "\n", "voxel", "=", "2", "*", "radius", "/", "float", "(", "vsize", ")", "\n", "locations", "=", "(", "points", "+", "radius", ")", "/", "voxel", "\n", "locations", "=", "locations", ".", "astype", "(", "int", ")", "\n", "vol", "[", "locations", "[", ":", ",", "0", "]", ",", "locations", "[", ":", ",", "1", "]", ",", "locations", "[", ":", ",", "2", "]", "]", "=", "1.0", "\n", "return", "vol", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.volume_to_point_cloud": [[78, 94], ["range", "numpy.vstack", "range", "len", "numpy.zeros", "range", "np.vstack.append", "numpy.array"], "function", ["None"], ["", "def", "volume_to_point_cloud", "(", "vol", ")", ":", "\n", "    ", "\"\"\" vol is occupancy grid (value = 0 or 1) of size vsize*vsize*vsize\n        return Nx3 numpy array.\n    \"\"\"", "\n", "vsize", "=", "vol", ".", "shape", "[", "0", "]", "\n", "assert", "(", "vol", ".", "shape", "[", "1", "]", "==", "vsize", "and", "vol", ".", "shape", "[", "1", "]", "==", "vsize", ")", "\n", "points", "=", "[", "]", "\n", "for", "a", "in", "range", "(", "vsize", ")", ":", "\n", "        ", "for", "b", "in", "range", "(", "vsize", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "vsize", ")", ":", "\n", "                ", "if", "vol", "[", "a", ",", "b", ",", "c", "]", "==", "1", ":", "\n", "                    ", "points", ".", "append", "(", "np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", ")", "\n", "", "", "", "", "if", "len", "(", "points", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "0", ",", "3", ")", ")", "\n", "", "points", "=", "np", ".", "vstack", "(", "points", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.point_cloud_to_volume_v2_batch": [[95, 105], ["range", "numpy.concatenate", "pc_util.point_cloud_to_volume_v2", "vol_list.append", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.point_cloud_to_volume_v2"], ["", "def", "point_cloud_to_volume_v2_batch", "(", "point_clouds", ",", "vsize", "=", "12", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" Input is BxNx3 a batch of point cloud\n        Output is BxVxVxVxnum_samplex3\n        Added on Feb 19\n    \"\"\"", "\n", "vol_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "point_clouds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "vol", "=", "point_cloud_to_volume_v2", "(", "point_clouds", "[", "b", ",", ":", ",", ":", "]", ",", "vsize", ",", "radius", ",", "num_sample", ")", "\n", "vol_list", ".", "append", "(", "np", ".", "expand_dims", "(", "vol", ",", "0", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "vol_list", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.point_cloud_to_volume_v2": [[106, 143], ["numpy.zeros", "locations.astype.astype", "range", "range", "float", "tuple", "loc2pc[].append", "range", "range", "numpy.zeros", "numpy.vstack", "pc_util.random_sampling", "numpy.lib.pad", "numpy.array"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.random_sampling"], ["", "def", "point_cloud_to_volume_v2", "(", "points", ",", "vsize", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" input is Nx3 points\n        output is vsize*vsize*vsize*num_sample*3\n        assumes points are in range [-radius, radius]\n        samples num_sample points in each voxel, if there are less than\n        num_sample points, replicate the points\n        Added on Feb 19\n    \"\"\"", "\n", "vol", "=", "np", ".", "zeros", "(", "(", "vsize", ",", "vsize", ",", "vsize", ",", "num_sample", ",", "3", ")", ")", "\n", "voxel", "=", "2", "*", "radius", "/", "float", "(", "vsize", ")", "\n", "locations", "=", "(", "points", "+", "radius", ")", "/", "voxel", "\n", "locations", "=", "locations", ".", "astype", "(", "int", ")", "\n", "loc2pc", "=", "{", "}", "\n", "for", "n", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "loc", "=", "tuple", "(", "locations", "[", "n", ",", ":", "]", ")", "\n", "if", "loc", "not", "in", "loc2pc", ":", "\n", "            ", "loc2pc", "[", "loc", "]", "=", "[", "]", "\n", "", "loc2pc", "[", "loc", "]", ".", "append", "(", "points", "[", "n", ",", ":", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "vsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "vsize", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "vsize", ")", ":", "\n", "                ", "if", "(", "i", ",", "j", ",", "k", ")", "not", "in", "loc2pc", ":", "\n", "                    ", "vol", "[", "i", ",", "j", ",", "k", ",", ":", ",", ":", "]", "=", "np", ".", "zeros", "(", "(", "num_sample", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                    ", "pc", "=", "loc2pc", "[", "(", "i", ",", "j", ",", "k", ")", "]", "# a list of (3,) arrays", "\n", "pc", "=", "np", ".", "vstack", "(", "pc", ")", "# kx3", "\n", "# Sample/pad to num_sample points", "\n", "if", "pc", ".", "shape", "[", "0", "]", ">", "num_sample", ":", "\n", "                        ", "pc", "=", "random_sampling", "(", "pc", ",", "num_sample", ",", "False", ")", "\n", "", "elif", "pc", ".", "shape", "[", "0", "]", "<", "num_sample", ":", "\n", "                        ", "pc", "=", "np", ".", "lib", ".", "pad", "(", "pc", ",", "(", "(", "0", ",", "num_sample", "-", "pc", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "# Normalize", "\n", "", "pc_center", "=", "(", "np", ".", "array", "(", "[", "i", ",", "j", ",", "k", "]", ")", "+", "0.5", ")", "*", "voxel", "-", "radius", "\n", "pc", "=", "(", "pc", "-", "pc_center", ")", "/", "voxel", "# shift and scale", "\n", "vol", "[", "i", ",", "j", ",", "k", ",", ":", ",", ":", "]", "=", "pc", "\n", "", "", "", "", "return", "vol", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.point_cloud_to_image_batch": [[144, 154], ["range", "numpy.concatenate", "pc_util.point_cloud_to_image", "img_list.append", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.point_cloud_to_image"], ["", "def", "point_cloud_to_image_batch", "(", "point_clouds", ",", "imgsize", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" Input is BxNx3 a batch of point cloud\n        Output is BxIxIxnum_samplex3\n        Added on Feb 19\n    \"\"\"", "\n", "img_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "point_clouds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "img", "=", "point_cloud_to_image", "(", "point_clouds", "[", "b", ",", ":", ",", ":", "]", ",", "imgsize", ",", "radius", ",", "num_sample", ")", "\n", "img_list", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "img_list", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.point_cloud_to_image": [[156, 189], ["numpy.zeros", "locations.astype.astype", "range", "range", "float", "tuple", "loc2pc[].append", "range", "numpy.zeros", "numpy.vstack", "pc_util.random_sampling", "numpy.lib.pad", "numpy.array"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.random_sampling"], ["", "def", "point_cloud_to_image", "(", "points", ",", "imgsize", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" input is Nx3 points\n        output is imgsize*imgsize*num_sample*3\n        assumes points are in range [-radius, radius]\n        samples num_sample points in each pixel, if there are less than\n        num_sample points, replicate the points\n        Added on Feb 19\n    \"\"\"", "\n", "img", "=", "np", ".", "zeros", "(", "(", "imgsize", ",", "imgsize", ",", "num_sample", ",", "3", ")", ")", "\n", "pixel", "=", "2", "*", "radius", "/", "float", "(", "imgsize", ")", "\n", "locations", "=", "(", "points", "[", ":", ",", "0", ":", "2", "]", "+", "radius", ")", "/", "pixel", "# Nx2", "\n", "locations", "=", "locations", ".", "astype", "(", "int", ")", "\n", "loc2pc", "=", "{", "}", "\n", "for", "n", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "loc", "=", "tuple", "(", "locations", "[", "n", ",", ":", "]", ")", "\n", "if", "loc", "not", "in", "loc2pc", ":", "\n", "            ", "loc2pc", "[", "loc", "]", "=", "[", "]", "\n", "", "loc2pc", "[", "loc", "]", ".", "append", "(", "points", "[", "n", ",", ":", "]", ")", "\n", "", "for", "i", "in", "range", "(", "imgsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "imgsize", ")", ":", "\n", "            ", "if", "(", "i", ",", "j", ")", "not", "in", "loc2pc", ":", "\n", "                ", "img", "[", "i", ",", "j", ",", ":", ",", ":", "]", "=", "np", ".", "zeros", "(", "(", "num_sample", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                ", "pc", "=", "loc2pc", "[", "(", "i", ",", "j", ")", "]", "\n", "pc", "=", "np", ".", "vstack", "(", "pc", ")", "\n", "if", "pc", ".", "shape", "[", "0", "]", ">", "num_sample", ":", "\n", "                    ", "pc", "=", "random_sampling", "(", "pc", ",", "num_sample", ",", "False", ")", "\n", "", "elif", "pc", ".", "shape", "[", "0", "]", "<", "num_sample", ":", "\n", "                    ", "pc", "=", "np", ".", "lib", ".", "pad", "(", "pc", ",", "(", "(", "0", ",", "num_sample", "-", "pc", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "", "pc_center", "=", "(", "np", ".", "array", "(", "[", "i", ",", "j", "]", ")", "+", "0.5", ")", "*", "pixel", "-", "radius", "\n", "pc", "[", ":", ",", "0", ":", "2", "]", "=", "(", "pc", "[", ":", ",", "0", ":", "2", "]", "-", "pc_center", ")", "/", "pixel", "\n", "img", "[", "i", ",", "j", ",", ":", ",", ":", "]", "=", "pc", "\n", "", "", "", "return", "img", "\n", "# ----------------------------------------", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.read_ply_scannet": [[194, 200], ["PlyData.read", "numpy.array"], "function", ["None"], ["", "def", "read_ply_scannet", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ point cloud from filename PLY file \"\"\"", "\n", "plydata", "=", "PlyData", ".", "read", "(", "filename", ")", "\n", "pc", "=", "plydata", "[", "'vertex'", "]", ".", "data", "\n", "pc_array", "=", "np", ".", "array", "(", "[", "[", "x", ",", "y", ",", "z", "]", "for", "x", ",", "y", ",", "z", ",", "r", ",", "g", ",", "b", ",", "i", "in", "pc", "]", ")", "\n", "return", "pc_array", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.read_ply": [[201, 207], ["PlyData.read", "numpy.array"], "function", ["None"], ["", "def", "read_ply", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ point cloud from filename PLY file \"\"\"", "\n", "plydata", "=", "PlyData", ".", "read", "(", "filename", ")", "\n", "pc", "=", "plydata", "[", "'vertex'", "]", ".", "data", "\n", "pc_array", "=", "np", ".", "array", "(", "[", "[", "x", ",", "y", ",", "z", "]", "for", "x", ",", "y", ",", "z", "in", "pc", "]", ")", "\n", "return", "pc_array", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_ply": [[209, 215], ["numpy.array", "PlyElement.describe", "PlyData().write", "range", "PlyData"], "function", ["None"], ["", "def", "write_ply", "(", "points", ",", "filename", ",", "text", "=", "True", ")", ":", "\n", "    ", "\"\"\" input: Nx3, write points to filename as PLY format. \"\"\"", "\n", "points", "=", "[", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ")", "for", "i", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", "]", "\n", "vertex", "=", "np", ".", "array", "(", "points", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", "]", ")", "\n", "el", "=", "PlyElement", ".", "describe", "(", "vertex", ",", "'vertex'", ",", "comments", "=", "[", "'vertices'", "]", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "text", "=", "text", ")", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_ply_color": [[216, 236], ["labels.astype.astype", "range", "numpy.array", "PlyElement.describe", "PlyData().write", "colormap", "np.array.append", "numpy.max", "numpy.max", "range", "int", "PlyData", "float"], "function", ["None"], ["", "def", "write_ply_color", "(", "points", ",", "labels", ",", "filename", ",", "num_classes", "=", "None", ",", "colormap", "=", "pyplot", ".", "cm", ".", "jet", ")", ":", "\n", "    ", "\"\"\" Color (N,3) points with labels (N) within range 0 ~ num_classes-1 as OBJ file \"\"\"", "\n", "labels", "=", "labels", ".", "astype", "(", "int", ")", "\n", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "if", "num_classes", "is", "None", ":", "\n", "        ", "num_classes", "=", "np", ".", "max", "(", "labels", ")", "+", "1", "\n", "", "else", ":", "\n", "        ", "assert", "(", "num_classes", ">", "np", ".", "max", "(", "labels", ")", ")", "\n", "\n", "", "vertex", "=", "[", "]", "\n", "#colors = [pyplot.cm.jet(i/float(num_classes)) for i in range(num_classes)]    ", "\n", "colors", "=", "[", "colormap", "(", "i", "/", "float", "(", "num_classes", ")", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "c", "=", "colors", "[", "labels", "[", "i", "]", "]", "\n", "c", "=", "[", "int", "(", "x", "*", "255", ")", "for", "x", "in", "c", "]", "\n", "vertex", ".", "append", "(", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ",", "c", "[", "0", "]", ",", "c", "[", "1", "]", ",", "c", "[", "2", "]", ")", ")", "\n", "", "vertex", "=", "np", ".", "array", "(", "vertex", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", ",", "(", "'red'", ",", "'u1'", ")", ",", "(", "'green'", ",", "'u1'", ")", ",", "(", "'blue'", ",", "'u1'", ")", "]", ")", "\n", "\n", "el", "=", "PlyElement", ".", "describe", "(", "vertex", ",", "'vertex'", ",", "comments", "=", "[", "'vertices'", "]", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "text", "=", "True", ")", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_ply_rgb": [[237, 246], ["colors.astype.astype", "open", "range", "open.close", "open.write"], "function", ["None"], ["", "def", "write_ply_rgb", "(", "points", ",", "colors", ",", "out_filename", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "\"\"\" Color (N,3) points with RGB colors (N,3) within range [0,255] as OBJ file \"\"\"", "\n", "colors", "=", "colors", ".", "astype", "(", "int", ")", "\n", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "fout", "=", "open", "(", "out_filename", ",", "'w'", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "c", "=", "colors", "[", "i", ",", ":", "]", "\n", "fout", ".", "write", "(", "'v %f %f %f %d %d %d\\n'", "%", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ",", "c", "[", "0", "]", ",", "c", "[", "1", "]", ",", "c", "[", "2", "]", ")", ")", "\n", "", "fout", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.pyplot_draw_point_cloud": [[251, 260], ["plt.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel"], "function", ["None"], ["", "def", "pyplot_draw_point_cloud", "(", "points", ",", "output_filename", ")", ":", "\n", "    ", "\"\"\" points is a Nx3 numpy array \"\"\"", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "scatter", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "'x'", ")", "\n", "ax", ".", "set_ylabel", "(", "'y'", ")", "\n", "ax", ".", "set_zlabel", "(", "'z'", ")", "\n", "#savefig(output_filename)", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.pyplot_draw_volume": [[262, 268], ["pc_util.volume_to_point_cloud", "pc_util.pyplot_draw_point_cloud"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.volume_to_point_cloud", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.pyplot_draw_point_cloud"], ["", "def", "pyplot_draw_volume", "(", "vol", ",", "output_filename", ")", ":", "\n", "    ", "\"\"\" vol is of size vsize*vsize*vsize\n        output an image to output_filename\n    \"\"\"", "\n", "points", "=", "volume_to_point_cloud", "(", "vol", ")", "\n", "pyplot_draw_point_cloud", "(", "points", ",", "output_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.rotate_point_cloud": [[272, 284], ["points.mean", "numpy.array", "numpy.dot", "numpy.sin", "numpy.cos", "numpy.random.uniform"], "function", ["None"], ["", "def", "rotate_point_cloud", "(", "points", ",", "rotation_matrix", "=", "None", ")", ":", "\n", "    ", "\"\"\" Input: (n,3), Output: (n,3) \"\"\"", "\n", "# Rotate in-place around Z axis.", "\n", "if", "rotation_matrix", "is", "None", ":", "\n", "        ", "rotation_angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "sinval", ",", "cosval", "=", "np", ".", "sin", "(", "rotation_angle", ")", ",", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "sinval", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "cosval", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "", "ctr", "=", "points", ".", "mean", "(", "axis", "=", "0", ")", "\n", "rotated_data", "=", "np", ".", "dot", "(", "points", "-", "ctr", ",", "rotation_matrix", ")", "+", "ctr", "\n", "return", "rotated_data", ",", "rotation_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.rotate_pc_along_y": [[285, 294], ["numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "numpy.transpose"], "function", ["None"], ["", "def", "rotate_pc_along_y", "(", "pc", ",", "rot_angle", ")", ":", "\n", "    ", "''' Input ps is NxC points with first 3 channels as XYZ\n        z is facing forward, x is left ward, y is downward\n    '''", "\n", "cosval", "=", "np", ".", "cos", "(", "rot_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rot_angle", ")", "\n", "rotmat", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "-", "sinval", "]", ",", "[", "sinval", ",", "cosval", "]", "]", ")", "\n", "pc", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "np", ".", "dot", "(", "pc", "[", ":", ",", "[", "0", ",", "2", "]", "]", ",", "np", ".", "transpose", "(", "rotmat", ")", ")", "\n", "return", "pc", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.roty": [[295, 302], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "def", "roty", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the y-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "0", ",", "s", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "s", ",", "0", ",", "c", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.roty_batch": [[303, 318], ["numpy.zeros", "numpy.cos", "numpy.sin", "tuple", "list"], "function", ["None"], ["", "def", "roty_batch", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the y-axis.\n    t: (x1,x2,...xn)\n    return: (x1,x2,...,xn,3,3)\n    \"\"\"", "\n", "input_shape", "=", "t", ".", "shape", "\n", "output", "=", "np", ".", "zeros", "(", "tuple", "(", "list", "(", "input_shape", ")", "+", "[", "3", ",", "3", "]", ")", ")", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "output", "[", "...", ",", "0", ",", "0", "]", "=", "c", "\n", "output", "[", "...", ",", "0", ",", "2", "]", "=", "s", "\n", "output", "[", "...", ",", "1", ",", "1", "]", "=", "1", "\n", "output", "[", "...", ",", "2", ",", "0", "]", "=", "-", "s", "\n", "output", "[", "...", ",", "2", ",", "2", "]", "=", "c", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.rotz": [[319, 326], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "def", "rotz", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the z-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "-", "s", ",", "0", "]", ",", "\n", "[", "s", ",", "c", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.bbox_corner_dist_measure": [[331, 352], ["range", "max", "print", "sum", "numpy.linalg.norm().sum", "numpy.linalg.norm", "range", "range", "numpy.linalg.norm"], "function", ["None"], ["", "def", "bbox_corner_dist_measure", "(", "crnr1", ",", "crnr2", ")", ":", "\n", "    ", "\"\"\" compute distance between box corners to replace iou\n    Args:\n        crnr1, crnr2: Nx3 points of box corners in camera axis (y points down)\n        output is a scalar between 0 and 1        \n    \"\"\"", "\n", "\n", "dist", "=", "sys", ".", "maxsize", "\n", "for", "y", "in", "range", "(", "4", ")", ":", "\n", "        ", "rows", "=", "(", "[", "(", "x", "+", "y", ")", "%", "4", "for", "x", "in", "range", "(", "4", ")", "]", "+", "[", "4", "+", "(", "x", "+", "y", ")", "%", "4", "for", "x", "in", "range", "(", "4", ")", "]", ")", "\n", "d_", "=", "np", ".", "linalg", ".", "norm", "(", "crnr2", "[", "rows", ",", ":", "]", "-", "crnr1", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", "/", "8.0", "\n", "if", "d_", "<", "dist", ":", "\n", "            ", "dist", "=", "d_", "\n", "\n", "", "", "u", "=", "sum", "(", "[", "np", ".", "linalg", ".", "norm", "(", "x", "[", "0", ",", ":", "]", "-", "x", "[", "6", ",", ":", "]", ")", "for", "x", "in", "[", "crnr1", ",", "crnr2", "]", "]", ")", "/", "2.0", "\n", "\n", "measure", "=", "max", "(", "1.0", "-", "dist", "/", "u", ",", "0", ")", "\n", "print", "(", "measure", ")", "\n", "\n", "\n", "return", "measure", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.point_cloud_to_bbox": [[354, 365], ["numpy.concatenate", "len", "points.min", "points.max"], "function", ["None"], ["", "def", "point_cloud_to_bbox", "(", "points", ")", ":", "\n", "    ", "\"\"\" Extract the axis aligned box from a pcl or batch of pcls\n    Args:\n        points: Nx3 points or BxNx3\n        output is 6 dim: xyz pos of center and 3 lengths        \n    \"\"\"", "\n", "which_dim", "=", "len", "(", "points", ".", "shape", ")", "-", "2", "# first dim if a single cloud and second if batch", "\n", "mn", ",", "mx", "=", "points", ".", "min", "(", "which_dim", ")", ",", "points", ".", "max", "(", "which_dim", ")", "\n", "lengths", "=", "mx", "-", "mn", "\n", "cntr", "=", "0.5", "*", "(", "mn", "+", "mx", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "cntr", ",", "lengths", "]", ",", "axis", "=", "which_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_bbox": [[366, 396], ["trimesh.scene.Scene", "trimesh.util.concatenate", "trimesh.io.export.export_mesh", "numpy.eye", "trimesh.creation.box", "trimesh.scene.Scene.add_geometry", "trimesh.scene.Scene.dump", "pc_util.write_bbox.convert_box_to_trimesh_fmt"], "function", ["None"], ["", "def", "write_bbox", "(", "scene_bbox", ",", "out_filename", ")", ":", "\n", "    ", "\"\"\"Export scene bbox to meshes\n    Args:\n        scene_bbox: (N x 6 numpy array): xyz pos of center and 3 lengths\n        out_filename: (string) filename\n\n    Note:\n        To visualize the boxes in MeshLab.\n        1. Select the objects (the boxes)\n        2. Filters -> Polygon and Quad Mesh -> Turn into Quad-Dominant Mesh\n        3. Select Wireframe view.\n    \"\"\"", "\n", "def", "convert_box_to_trimesh_fmt", "(", "box", ")", ":", "\n", "        ", "ctr", "=", "box", "[", ":", "3", "]", "\n", "lengths", "=", "box", "[", "3", ":", "]", "\n", "trns", "=", "np", ".", "eye", "(", "4", ")", "\n", "trns", "[", "0", ":", "3", ",", "3", "]", "=", "ctr", "\n", "trns", "[", "3", ",", "3", "]", "=", "1.0", "\n", "box_trimesh_fmt", "=", "trimesh", ".", "creation", ".", "box", "(", "lengths", ",", "trns", ")", "\n", "return", "box_trimesh_fmt", "\n", "\n", "", "scene", "=", "trimesh", ".", "scene", ".", "Scene", "(", ")", "\n", "for", "box", "in", "scene_bbox", ":", "\n", "        ", "scene", ".", "add_geometry", "(", "convert_box_to_trimesh_fmt", "(", "box", ")", ")", "\n", "\n", "", "mesh_list", "=", "trimesh", ".", "util", ".", "concatenate", "(", "scene", ".", "dump", "(", ")", ")", "\n", "# save to ply file    ", "\n", "trimesh", ".", "io", ".", "export", ".", "export_mesh", "(", "mesh_list", ",", "out_filename", ",", "file_type", "=", "'ply'", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_oriented_bbox": [[397, 434], ["trimesh.scene.Scene", "trimesh.util.concatenate", "trimesh.io.export.export_mesh", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.array", "numpy.eye", "pc_util.write_oriented_bbox.heading2rotmat"], "function", ["None"], ["", "def", "write_oriented_bbox", "(", "scene_bbox", ",", "out_filename", ")", ":", "\n", "    ", "\"\"\"Export oriented (around Z axis) scene bbox to meshes\n    Args:\n        scene_bbox: (N x 7 numpy array): xyz pos of center and 3 lengths (dx,dy,dz)\n            and heading angle around Z axis.\n            Y forward, X right, Z upward. heading angle of positive X is 0,\n            heading angle of positive Y is 90 degrees.\n        out_filename: (string) filename\n    \"\"\"", "\n", "def", "heading2rotmat", "(", "heading_angle", ")", ":", "\n", "        ", "pass", "\n", "rotmat", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "rotmat", "[", "2", ",", "2", "]", "=", "1", "\n", "cosval", "=", "np", ".", "cos", "(", "heading_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "heading_angle", ")", "\n", "rotmat", "[", "0", ":", "2", ",", "0", ":", "2", "]", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "-", "sinval", "]", ",", "[", "sinval", ",", "cosval", "]", "]", ")", "\n", "return", "rotmat", "\n", "\n", "", "def", "convert_oriented_box_to_trimesh_fmt", "(", "box", ")", ":", "\n", "        ", "ctr", "=", "box", "[", ":", "3", "]", "\n", "lengths", "=", "box", "[", "3", ":", "6", "]", "\n", "trns", "=", "np", ".", "eye", "(", "4", ")", "\n", "trns", "[", "0", ":", "3", ",", "3", "]", "=", "ctr", "\n", "trns", "[", "3", ",", "3", "]", "=", "1.0", "\n", "trns", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "heading2rotmat", "(", "box", "[", "6", "]", ")", "\n", "box_trimesh_fmt", "=", "trimesh", ".", "creation", ".", "box", "(", "lengths", ",", "trns", ")", "\n", "return", "box_trimesh_fmt", "\n", "\n", "", "scene", "=", "trimesh", ".", "scene", ".", "Scene", "(", ")", "\n", "for", "box", "in", "scene_bbox", ":", "\n", "        ", "scene", ".", "add_geometry", "(", "convert_oriented_box_to_trimesh_fmt", "(", "box", ")", ")", "\n", "\n", "", "mesh_list", "=", "trimesh", ".", "util", ".", "concatenate", "(", "scene", ".", "dump", "(", ")", ")", "\n", "# save to ply file    ", "\n", "trimesh", ".", "io", ".", "export", ".", "export_mesh", "(", "mesh_list", ",", "out_filename", ",", "file_type", "=", "'ply'", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_oriented_bbox_camera_coord": [[435, 473], ["trimesh.scene.Scene", "trimesh.util.concatenate", "trimesh.io.export.export_mesh", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.array", "numpy.array", "numpy.eye", "pc_util.write_oriented_bbox.heading2rotmat"], "function", ["None"], ["", "def", "write_oriented_bbox_camera_coord", "(", "scene_bbox", ",", "out_filename", ")", ":", "\n", "    ", "\"\"\"Export oriented (around Y axis) scene bbox to meshes\n    Args:\n        scene_bbox: (N x 7 numpy array): xyz pos of center and 3 lengths (dx,dy,dz)\n            and heading angle around Y axis.\n            Z forward, X rightward, Y downward. heading angle of positive X is 0,\n            heading angle of negative Z is 90 degrees.\n        out_filename: (string) filename\n    \"\"\"", "\n", "def", "heading2rotmat", "(", "heading_angle", ")", ":", "\n", "        ", "pass", "\n", "rotmat", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "rotmat", "[", "1", ",", "1", "]", "=", "1", "\n", "cosval", "=", "np", ".", "cos", "(", "heading_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "heading_angle", ")", "\n", "rotmat", "[", "0", ",", ":", "]", "=", "np", ".", "array", "(", "[", "cosval", ",", "0", ",", "sinval", "]", ")", "\n", "rotmat", "[", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "-", "sinval", ",", "0", ",", "cosval", "]", ")", "\n", "return", "rotmat", "\n", "\n", "", "def", "convert_oriented_box_to_trimesh_fmt", "(", "box", ")", ":", "\n", "        ", "ctr", "=", "box", "[", ":", "3", "]", "\n", "lengths", "=", "box", "[", "3", ":", "6", "]", "\n", "trns", "=", "np", ".", "eye", "(", "4", ")", "\n", "trns", "[", "0", ":", "3", ",", "3", "]", "=", "ctr", "\n", "trns", "[", "3", ",", "3", "]", "=", "1.0", "\n", "trns", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "heading2rotmat", "(", "box", "[", "6", "]", ")", "\n", "box_trimesh_fmt", "=", "trimesh", ".", "creation", ".", "box", "(", "lengths", ",", "trns", ")", "\n", "return", "box_trimesh_fmt", "\n", "\n", "", "scene", "=", "trimesh", ".", "scene", ".", "Scene", "(", ")", "\n", "for", "box", "in", "scene_bbox", ":", "\n", "        ", "scene", ".", "add_geometry", "(", "convert_oriented_box_to_trimesh_fmt", "(", "box", ")", ")", "\n", "\n", "", "mesh_list", "=", "trimesh", ".", "util", ".", "concatenate", "(", "scene", ".", "dump", "(", ")", ")", "\n", "# save to ply file    ", "\n", "trimesh", ".", "io", ".", "export", ".", "export_mesh", "(", "mesh_list", ",", "out_filename", ",", "file_type", "=", "'ply'", ")", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_lines_as_cylinders": [[474, 493], ["trimesh.scene.Scene", "trimesh.util.concatenate", "trimesh.io.export.export_mesh", "trimesh.geometry.align_vectors", "numpy.sqrt", "trimesh.scene.Scene.add_geometry", "trimesh.scene.Scene.dump", "numpy.dot", "trimesh.creation.cylinder"], "function", ["None"], ["", "def", "write_lines_as_cylinders", "(", "pcl", ",", "filename", ",", "rad", "=", "0.005", ",", "res", "=", "64", ")", ":", "\n", "    ", "\"\"\"Create lines represented as cylinders connecting pairs of 3D points\n    Args:\n        pcl: (N x 2 x 3 numpy array): N pairs of xyz pos             \n        filename: (string) filename for the output mesh (ply) file\n        rad: radius for the cylinder\n        res: number of sections used to create the cylinder\n    \"\"\"", "\n", "scene", "=", "trimesh", ".", "scene", ".", "Scene", "(", ")", "\n", "for", "src", ",", "tgt", "in", "pcl", ":", "\n", "# compute line", "\n", "        ", "vec", "=", "tgt", "-", "src", "\n", "M", "=", "trimesh", ".", "geometry", ".", "align_vectors", "(", "[", "0", ",", "0", ",", "1", "]", ",", "vec", ",", "False", ")", "\n", "vec", "=", "tgt", "-", "src", "# compute again since align_vectors modifies vec in-place!", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "0.5", "*", "src", "+", "0.5", "*", "tgt", "\n", "height", "=", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "vec", ",", "vec", ")", ")", "\n", "scene", ".", "add_geometry", "(", "trimesh", ".", "creation", ".", "cylinder", "(", "radius", "=", "rad", ",", "height", "=", "height", ",", "sections", "=", "res", ",", "transform", "=", "M", ")", ")", "\n", "", "mesh_list", "=", "trimesh", ".", "util", ".", "concatenate", "(", "scene", ".", "dump", "(", ")", ")", "\n", "trimesh", ".", "io", ".", "export", ".", "export_mesh", "(", "mesh_list", ",", "'%s.ply'", "%", "(", "filename", ")", ",", "file_type", "=", "'ply'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.metric_util.multi_scene_precision_recall": [[27, 55], ["range", "torch.is_tensor", "torch.is_tensor", "numpy.ones", "numpy.ones", "metric_util.single_scene_precision_recall", "metric_util.precision_recall"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.metric_util.single_scene_precision_recall", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.metric_util.precision_recall"], ["def", "multi_scene_precision_recall", "(", "labels", ",", "pred", ",", "iou_thresh", ",", "conf_thresh", ",", "label_mask", ",", "pred_mask", "=", "None", ")", ":", "\n", "    ", "'''\n    Args:\n        labels: (B, N, 6)\n        pred: (B, M, 6)\n        iou_thresh: scalar\n        conf_thresh: scalar\n        label_mask: (B, N,) with values in 0 or 1 to indicate which GT boxes to consider.\n        pred_mask: (B, M,) with values in 0 or 1 to indicate which PRED boxes to consider.\n    Returns:\n        TP,FP,FN,Precision,Recall\n    '''", "\n", "# Make sure the masks are not Torch tensor, otherwise the mask==1 returns uint8 array instead", "\n", "# of True/False array as in numpy", "\n", "assert", "(", "not", "torch", ".", "is_tensor", "(", "label_mask", ")", ")", "\n", "assert", "(", "not", "torch", ".", "is_tensor", "(", "pred_mask", ")", ")", "\n", "TP", ",", "FP", ",", "FN", "=", "0", ",", "0", ",", "0", "\n", "if", "label_mask", "is", "None", ":", "label_mask", "=", "np", ".", "ones", "(", "(", "labels", ".", "shape", "[", "0", "]", ",", "labels", ".", "shape", "[", "1", "]", ")", ")", "\n", "if", "pred_mask", "is", "None", ":", "pred_mask", "=", "np", ".", "ones", "(", "(", "pred", ".", "shape", "[", "0", "]", ",", "pred", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "batch_idx", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "TP_i", ",", "FP_i", ",", "FN_i", "=", "single_scene_precision_recall", "(", "labels", "[", "batch_idx", ",", "label_mask", "[", "batch_idx", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "pred", "[", "batch_idx", ",", "pred_mask", "[", "batch_idx", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "iou_thresh", ",", "conf_thresh", ")", "\n", "TP", "+=", "TP_i", "\n", "FP", "+=", "FP_i", "\n", "FN", "+=", "FN_i", "\n", "\n", "", "return", "TP", ",", "FP", ",", "FN", ",", "precision_recall", "(", "TP", ",", "FP", ",", "FN", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.metric_util.single_scene_precision_recall": [[57, 93], ["numpy.zeros", "range", "good_match_arr.any().sum", "range", "good_match_arr.any().sum", "metric_util.calc_iou", "good_match_arr.any", "good_match_arr.any", "numpy.where"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.metric_util.calc_iou"], ["", "def", "single_scene_precision_recall", "(", "labels", ",", "pred", ",", "iou_thresh", ",", "conf_thresh", ")", ":", "\n", "    ", "\"\"\"Compute P and R for predicted bounding boxes. Ignores classes!\n    Args:\n        labels: (N x bbox) ground-truth bounding boxes (6 dims) \n        pred: (M x (bbox + conf)) predicted bboxes with confidence and maybe classification\n    Returns:\n        TP, FP, FN\n    \"\"\"", "\n", "\n", "\n", "# for each pred box with high conf (C), compute IoU with all gt boxes. ", "\n", "# TP = number of times IoU > th ; FP = C - TP ", "\n", "# FN - number of scene objects without good match", "\n", "\n", "gt_bboxes", "=", "labels", "[", ":", ",", ":", "6", "]", "\n", "\n", "num_scene_bboxes", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "conf", "=", "pred", "[", ":", ",", "6", "]", "\n", "\n", "conf_pred_bbox", "=", "pred", "[", "np", ".", "where", "(", "conf", ">", "conf_thresh", ")", "[", "0", "]", ",", ":", "6", "]", "\n", "num_conf_pred_bboxes", "=", "conf_pred_bbox", ".", "shape", "[", "0", "]", "\n", "\n", "# init an array to keep iou between generated and scene bboxes", "\n", "iou_arr", "=", "np", ".", "zeros", "(", "[", "num_conf_pred_bboxes", ",", "num_scene_bboxes", "]", ")", "\n", "for", "g_idx", "in", "range", "(", "num_conf_pred_bboxes", ")", ":", "\n", "        ", "for", "s_idx", "in", "range", "(", "num_scene_bboxes", ")", ":", "\n", "            ", "iou_arr", "[", "g_idx", ",", "s_idx", "]", "=", "calc_iou", "(", "conf_pred_bbox", "[", "g_idx", ",", ":", "]", ",", "gt_bboxes", "[", "s_idx", ",", ":", "]", ")", "\n", "\n", "\n", "", "", "good_match_arr", "=", "(", "iou_arr", ">=", "iou_thresh", ")", "\n", "\n", "TP", "=", "good_match_arr", ".", "any", "(", "axis", "=", "1", ")", ".", "sum", "(", ")", "\n", "FP", "=", "num_conf_pred_bboxes", "-", "TP", "\n", "FN", "=", "num_scene_bboxes", "-", "good_match_arr", ".", "any", "(", "axis", "=", "0", ")", ".", "sum", "(", ")", "\n", "\n", "return", "TP", ",", "FP", ",", "FN", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.metric_util.precision_recall": [[95, 99], ["None"], "function", ["None"], ["", "def", "precision_recall", "(", "TP", ",", "FP", ",", "FN", ")", ":", "\n", "    ", "Prec", "=", "1.0", "*", "TP", "/", "(", "TP", "+", "FP", ")", "if", "TP", "+", "FP", ">", "0", "else", "0", "\n", "Rec", "=", "1.0", "*", "TP", "/", "(", "TP", "+", "FN", ")", "\n", "return", "Prec", ",", "Rec", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.metric_util.calc_iou": [[101, 124], ["numpy.array().min", "numpy.array().max", "box_a[].prod", "box_b[].prod", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "calc_iou", "(", "box_a", ",", "box_b", ")", ":", "\n", "    ", "\"\"\"Computes IoU of two axis aligned bboxes.\n    Args:\n        box_a, box_b: 6D of center and lengths        \n    Returns:\n        iou\n    \"\"\"", "\n", "\n", "max_a", "=", "box_a", "[", "0", ":", "3", "]", "+", "box_a", "[", "3", ":", "6", "]", "/", "2", "\n", "max_b", "=", "box_b", "[", "0", ":", "3", "]", "+", "box_b", "[", "3", ":", "6", "]", "/", "2", "\n", "min_max", "=", "np", ".", "array", "(", "[", "max_a", ",", "max_b", "]", ")", ".", "min", "(", "0", ")", "\n", "\n", "min_a", "=", "box_a", "[", "0", ":", "3", "]", "-", "box_a", "[", "3", ":", "6", "]", "/", "2", "\n", "min_b", "=", "box_b", "[", "0", ":", "3", "]", "-", "box_b", "[", "3", ":", "6", "]", "/", "2", "\n", "max_min", "=", "np", ".", "array", "(", "[", "min_a", ",", "min_b", "]", ")", ".", "max", "(", "0", ")", "\n", "if", "not", "(", "(", "min_max", ">", "max_min", ")", ".", "all", "(", ")", ")", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "intersection", "=", "(", "min_max", "-", "max_min", ")", ".", "prod", "(", ")", "\n", "vol_a", "=", "box_a", "[", "3", ":", "6", "]", ".", "prod", "(", ")", "\n", "vol_b", "=", "box_b", "[", "3", ":", "6", "]", ".", "prod", "(", ")", "\n", "union", "=", "vol_a", "+", "vol_b", "-", "intersection", "\n", "return", "1.0", "*", "intersection", "/", "union", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.tf_logger.Logger.__init__": [[17, 20], ["tensorflow.summary.FileWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.tf_logger.Logger.scalar_summary": [[21, 25], ["tensorflow.Summary", "tf_logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.tf_logger.Logger.image_summary": [[26, 48], ["enumerate", "tensorflow.Summary", "tf_logger.Logger.writer.add_summary", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "tensorflow.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["None"], ["", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a list of images.\"\"\"", "\n", "\n", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "            ", "try", ":", "\n", "                ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'%s/%d'", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.tf_logger.Logger.histo_summary": [[49, 76], ["numpy.histogram", "tensorflow.HistogramProto", "float", "float", "int", "float", "float", "tensorflow.Summary", "tf_logger.Logger.writer.add_summary", "tf_logger.Logger.writer.flush", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tensorflow.HistogramProto.bucket_limit.append", "tensorflow.HistogramProto.bucket.append", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "1000", ")", ":", "\n", "        ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "            ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "            ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.polygon_clip": [[16, 63], ["box_util.polygon_clip.inside"], "function", ["None"], ["def", "polygon_clip", "(", "subjectPolygon", ",", "clipPolygon", ")", ":", "\n", "   ", "\"\"\" Clip a polygon with another polygon.\n\n   Ref: https://rosettacode.org/wiki/Sutherland-Hodgman_polygon_clipping#Python\n\n   Args:\n     subjectPolygon: a list of (x,y) 2d points, any polygon.\n     clipPolygon: a list of (x,y) 2d points, has to be *convex*\n   Note:\n     **points have to be counter-clockwise ordered**\n\n   Return:\n     a list of (x,y) vertex point for the intersection polygon.\n   \"\"\"", "\n", "def", "inside", "(", "p", ")", ":", "\n", "      ", "return", "(", "cp2", "[", "0", "]", "-", "cp1", "[", "0", "]", ")", "*", "(", "p", "[", "1", "]", "-", "cp1", "[", "1", "]", ")", ">", "(", "cp2", "[", "1", "]", "-", "cp1", "[", "1", "]", ")", "*", "(", "p", "[", "0", "]", "-", "cp1", "[", "0", "]", ")", "\n", "\n", "", "def", "computeIntersection", "(", ")", ":", "\n", "      ", "dc", "=", "[", "cp1", "[", "0", "]", "-", "cp2", "[", "0", "]", ",", "cp1", "[", "1", "]", "-", "cp2", "[", "1", "]", "]", "\n", "dp", "=", "[", "s", "[", "0", "]", "-", "e", "[", "0", "]", ",", "s", "[", "1", "]", "-", "e", "[", "1", "]", "]", "\n", "n1", "=", "cp1", "[", "0", "]", "*", "cp2", "[", "1", "]", "-", "cp1", "[", "1", "]", "*", "cp2", "[", "0", "]", "\n", "n2", "=", "s", "[", "0", "]", "*", "e", "[", "1", "]", "-", "s", "[", "1", "]", "*", "e", "[", "0", "]", "\n", "n3", "=", "1.0", "/", "(", "dc", "[", "0", "]", "*", "dp", "[", "1", "]", "-", "dc", "[", "1", "]", "*", "dp", "[", "0", "]", ")", "\n", "return", "[", "(", "n1", "*", "dp", "[", "0", "]", "-", "n2", "*", "dc", "[", "0", "]", ")", "*", "n3", ",", "(", "n1", "*", "dp", "[", "1", "]", "-", "n2", "*", "dc", "[", "1", "]", ")", "*", "n3", "]", "\n", "\n", "", "outputList", "=", "subjectPolygon", "\n", "cp1", "=", "clipPolygon", "[", "-", "1", "]", "\n", "\n", "for", "clipVertex", "in", "clipPolygon", ":", "\n", "      ", "cp2", "=", "clipVertex", "\n", "inputList", "=", "outputList", "\n", "outputList", "=", "[", "]", "\n", "s", "=", "inputList", "[", "-", "1", "]", "\n", "\n", "for", "subjectVertex", "in", "inputList", ":", "\n", "         ", "e", "=", "subjectVertex", "\n", "if", "inside", "(", "e", ")", ":", "\n", "            ", "if", "not", "inside", "(", "s", ")", ":", "\n", "               ", "outputList", ".", "append", "(", "computeIntersection", "(", ")", ")", "\n", "", "outputList", ".", "append", "(", "e", ")", "\n", "", "elif", "inside", "(", "s", ")", ":", "\n", "            ", "outputList", ".", "append", "(", "computeIntersection", "(", ")", ")", "\n", "", "s", "=", "e", "\n", "", "cp1", "=", "cp2", "\n", "if", "len", "(", "outputList", ")", "==", "0", ":", "\n", "          ", "return", "None", "\n", "", "", "return", "(", "outputList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.poly_area": [[64, 67], ["numpy.abs", "numpy.dot", "numpy.dot", "numpy.roll", "numpy.roll"], "function", ["None"], ["", "def", "poly_area", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\" Ref: http://stackoverflow.com/questions/24467972/calculate-area-of-polygon-given-x-y-coordinates \"\"\"", "\n", "return", "0.5", "*", "np", ".", "abs", "(", "np", ".", "dot", "(", "x", ",", "np", ".", "roll", "(", "y", ",", "1", ")", ")", "-", "np", ".", "dot", "(", "y", ",", "np", ".", "roll", "(", "x", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.convex_hull_intersection": [[68, 79], ["box_util.polygon_clip", "scipy.spatial.ConvexHull"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.polygon_clip"], ["", "def", "convex_hull_intersection", "(", "p1", ",", "p2", ")", ":", "\n", "    ", "\"\"\" Compute area of two convex hull's intersection area.\n        p1,p2 are a list of (x,y) tuples of hull vertices.\n        return a list of (x,y) for the intersection and its volume\n    \"\"\"", "\n", "inter_p", "=", "polygon_clip", "(", "p1", ",", "p2", ")", "\n", "if", "inter_p", "is", "not", "None", ":", "\n", "        ", "hull_inter", "=", "ConvexHull", "(", "inter_p", ")", "\n", "return", "inter_p", ",", "hull_inter", ".", "volume", "\n", "", "else", ":", "\n", "        ", "return", "None", ",", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.box3d_vol": [[80, 86], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "", "def", "box3d_vol", "(", "corners", ")", ":", "\n", "    ", "''' corners: (8,3) no assumption on axis direction '''", "\n", "a", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "0", ",", ":", "]", "-", "corners", "[", "1", ",", ":", "]", ")", "**", "2", ")", ")", "\n", "b", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "1", ",", ":", "]", "-", "corners", "[", "2", ",", ":", "]", ")", "**", "2", ")", ")", "\n", "c", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "0", ",", ":", "]", "-", "corners", "[", "4", ",", ":", "]", ")", "**", "2", ")", ")", "\n", "return", "a", "*", "b", "*", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.is_clockwise": [[87, 91], ["numpy.dot", "numpy.dot", "numpy.roll", "numpy.roll"], "function", ["None"], ["", "def", "is_clockwise", "(", "p", ")", ":", "\n", "    ", "x", "=", "p", "[", ":", ",", "0", "]", "\n", "y", "=", "p", "[", ":", ",", "1", "]", "\n", "return", "np", ".", "dot", "(", "x", ",", "np", ".", "roll", "(", "y", ",", "1", ")", ")", "-", "np", ".", "dot", "(", "y", ",", "np", ".", "roll", "(", "x", ",", "1", ")", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.box3d_iou": [[92, 118], ["box_util.poly_area", "box_util.poly_area", "box_util.convex_hull_intersection", "min", "max", "box_util.box3d_vol", "box_util.box3d_vol", "max", "range", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.poly_area", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.poly_area", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.convex_hull_intersection", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.box3d_vol", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.box3d_vol"], ["", "def", "box3d_iou", "(", "corners1", ",", "corners2", ")", ":", "\n", "    ", "''' Compute 3D bounding box IoU.\n\n    Input:\n        corners1: numpy array (8,3), assume up direction is negative Y\n        corners2: numpy array (8,3), assume up direction is negative Y\n    Output:\n        iou: 3D bounding box IoU\n        iou_2d: bird's eye view 2D bounding box IoU\n\n    todo (rqi): add more description on corner points' orders.\n    '''", "\n", "# corner points are in counter clockwise order", "\n", "rect1", "=", "[", "(", "corners1", "[", "i", ",", "0", "]", ",", "corners1", "[", "i", ",", "2", "]", ")", "for", "i", "in", "range", "(", "3", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "rect2", "=", "[", "(", "corners2", "[", "i", ",", "0", "]", ",", "corners2", "[", "i", ",", "2", "]", ")", "for", "i", "in", "range", "(", "3", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "area1", "=", "poly_area", "(", "np", ".", "array", "(", "rect1", ")", "[", ":", ",", "0", "]", ",", "np", ".", "array", "(", "rect1", ")", "[", ":", ",", "1", "]", ")", "\n", "area2", "=", "poly_area", "(", "np", ".", "array", "(", "rect2", ")", "[", ":", ",", "0", "]", ",", "np", ".", "array", "(", "rect2", ")", "[", ":", ",", "1", "]", ")", "\n", "inter", ",", "inter_area", "=", "convex_hull_intersection", "(", "rect1", ",", "rect2", ")", "\n", "iou_2d", "=", "inter_area", "/", "(", "area1", "+", "area2", "-", "inter_area", ")", "\n", "ymax", "=", "min", "(", "corners1", "[", "0", ",", "1", "]", ",", "corners2", "[", "0", ",", "1", "]", ")", "\n", "ymin", "=", "max", "(", "corners1", "[", "4", ",", "1", "]", ",", "corners2", "[", "4", ",", "1", "]", ")", "\n", "inter_vol", "=", "inter_area", "*", "max", "(", "0.0", ",", "ymax", "-", "ymin", ")", "\n", "vol1", "=", "box3d_vol", "(", "corners1", ")", "\n", "vol2", "=", "box3d_vol", "(", "corners2", ")", "\n", "iou", "=", "inter_vol", "/", "(", "vol1", "+", "vol2", "-", "inter_vol", ")", "\n", "return", "iou", ",", "iou_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.get_iou": [[120, 169], ["max", "max", "min", "min", "float"], "function", ["None"], ["", "def", "get_iou", "(", "bb1", ",", "bb2", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the Intersection over Union (IoU) of two 2D bounding boxes.\n\n    Parameters\n    ----------\n    bb1 : dict\n        Keys: {'x1', 'x2', 'y1', 'y2'}\n        The (x1, y1) position is at the top left corner,\n        the (x2, y2) position is at the bottom right corner\n    bb2 : dict\n        Keys: {'x1', 'x2', 'y1', 'y2'}\n        The (x, y) position is at the top left corner,\n        the (x2, y2) position is at the bottom right corner\n\n    Returns\n    -------\n    float\n        in [0, 1]\n    \"\"\"", "\n", "assert", "bb1", "[", "'x1'", "]", "<", "bb1", "[", "'x2'", "]", "\n", "assert", "bb1", "[", "'y1'", "]", "<", "bb1", "[", "'y2'", "]", "\n", "assert", "bb2", "[", "'x1'", "]", "<", "bb2", "[", "'x2'", "]", "\n", "assert", "bb2", "[", "'y1'", "]", "<", "bb2", "[", "'y2'", "]", "\n", "\n", "# determine the coordinates of the intersection rectangle", "\n", "x_left", "=", "max", "(", "bb1", "[", "'x1'", "]", ",", "bb2", "[", "'x1'", "]", ")", "\n", "y_top", "=", "max", "(", "bb1", "[", "'y1'", "]", ",", "bb2", "[", "'y1'", "]", ")", "\n", "x_right", "=", "min", "(", "bb1", "[", "'x2'", "]", ",", "bb2", "[", "'x2'", "]", ")", "\n", "y_bottom", "=", "min", "(", "bb1", "[", "'y2'", "]", ",", "bb2", "[", "'y2'", "]", ")", "\n", "\n", "if", "x_right", "<", "x_left", "or", "y_bottom", "<", "y_top", ":", "\n", "        ", "return", "0.0", "\n", "\n", "# The intersection of two axis-aligned bounding boxes is always an", "\n", "# axis-aligned bounding box", "\n", "", "intersection_area", "=", "(", "x_right", "-", "x_left", ")", "*", "(", "y_bottom", "-", "y_top", ")", "\n", "\n", "# compute the area of both AABBs", "\n", "bb1_area", "=", "(", "bb1", "[", "'x2'", "]", "-", "bb1", "[", "'x1'", "]", ")", "*", "(", "bb1", "[", "'y2'", "]", "-", "bb1", "[", "'y1'", "]", ")", "\n", "bb2_area", "=", "(", "bb2", "[", "'x2'", "]", "-", "bb2", "[", "'x1'", "]", ")", "*", "(", "bb2", "[", "'y2'", "]", "-", "bb2", "[", "'y1'", "]", ")", "\n", "\n", "# compute the intersection over union by taking the intersection", "\n", "# area and dividing it by the sum of prediction + ground-truth", "\n", "# areas - the interesection area", "\n", "iou", "=", "intersection_area", "/", "float", "(", "bb1_area", "+", "bb2_area", "-", "intersection_area", ")", "\n", "assert", "iou", ">=", "0.0", "\n", "assert", "iou", "<=", "1.0", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.box2d_iou": [[170, 181], ["box_util.get_iou"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.get_iou"], ["", "def", "box2d_iou", "(", "box1", ",", "box2", ")", ":", "\n", "    ", "''' Compute 2D bounding box IoU.\n\n    Input:\n        box1: tuple of (xmin,ymin,xmax,ymax)\n        box2: tuple of (xmin,ymin,xmax,ymax)\n    Output:\n        iou: 2D IoU scalar\n    '''", "\n", "return", "get_iou", "(", "{", "'x1'", ":", "box1", "[", "0", "]", ",", "'y1'", ":", "box1", "[", "1", "]", ",", "'x2'", ":", "box1", "[", "2", "]", ",", "'y2'", ":", "box1", "[", "3", "]", "}", ",", "{", "'x1'", ":", "box2", "[", "0", "]", ",", "'y1'", ":", "box2", "[", "1", "]", ",", "'x2'", ":", "box2", "[", "2", "]", ",", "'y2'", ":", "box2", "[", "3", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.roty": [[185, 192], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["", "def", "roty", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the y-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "0", ",", "s", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "s", ",", "0", ",", "c", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.roty_batch": [[193, 208], ["numpy.zeros", "numpy.cos", "numpy.sin", "tuple", "list"], "function", ["None"], ["", "def", "roty_batch", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the y-axis.\n    t: (x1,x2,...xn)\n    return: (x1,x2,...,xn,3,3)\n    \"\"\"", "\n", "input_shape", "=", "t", ".", "shape", "\n", "output", "=", "np", ".", "zeros", "(", "tuple", "(", "list", "(", "input_shape", ")", "+", "[", "3", ",", "3", "]", ")", ")", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "output", "[", "...", ",", "0", ",", "0", "]", "=", "c", "\n", "output", "[", "...", ",", "0", ",", "2", "]", "=", "s", "\n", "output", "[", "...", ",", "1", ",", "1", "]", "=", "1", "\n", "output", "[", "...", ",", "2", ",", "0", "]", "=", "-", "s", "\n", "output", "[", "...", ",", "2", ",", "2", "]", "=", "c", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.get_3d_box": [[210, 226], ["box_util.roty", "numpy.dot", "numpy.transpose", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.roty"], ["", "def", "get_3d_box", "(", "box_size", ",", "heading_angle", ",", "center", ")", ":", "\n", "    ", "''' box_size is array(l,w,h), heading_angle is radius clockwise from pos x axis, center is xyz of box center\n        output (8,3) array for 3D box cornders\n        Similar to utils/compute_orientation_3d\n    '''", "\n", "R", "=", "roty", "(", "heading_angle", ")", "\n", "l", ",", "w", ",", "h", "=", "box_size", "\n", "x_corners", "=", "[", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", "]", ";", "\n", "y_corners", "=", "[", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", "]", ";", "\n", "z_corners", "=", "[", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ",", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", "]", ";", "\n", "corners_3d", "=", "np", ".", "dot", "(", "R", ",", "np", ".", "vstack", "(", "[", "x_corners", ",", "y_corners", ",", "z_corners", "]", ")", ")", "\n", "corners_3d", "[", "0", ",", ":", "]", "=", "corners_3d", "[", "0", ",", ":", "]", "+", "center", "[", "0", "]", ";", "\n", "corners_3d", "[", "1", ",", ":", "]", "=", "corners_3d", "[", "1", ",", ":", "]", "+", "center", "[", "1", "]", ";", "\n", "corners_3d", "[", "2", ",", ":", "]", "=", "corners_3d", "[", "2", ",", ":", "]", "+", "center", "[", "2", "]", ";", "\n", "corners_3d", "=", "np", ".", "transpose", "(", "corners_3d", ")", "\n", "return", "corners_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.get_3d_box_batch": [[227, 248], ["box_util.roty_batch", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.matmul", "numpy.expand_dims", "tuple", "len", "numpy.transpose", "range", "len", "tuple", "list", "len"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.roty_batch"], ["", "def", "get_3d_box_batch", "(", "box_size", ",", "heading_angle", ",", "center", ")", ":", "\n", "    ", "''' box_size: [x1,x2,...,xn,3]\n        heading_angle: [x1,x2,...,xn]\n        center: [x1,x2,...,xn,3]\n    Return:\n        [x1,x3,...,xn,8,3]\n    '''", "\n", "input_shape", "=", "heading_angle", ".", "shape", "\n", "R", "=", "roty_batch", "(", "heading_angle", ")", "\n", "l", "=", "np", ".", "expand_dims", "(", "box_size", "[", "...", ",", "0", "]", ",", "-", "1", ")", "# [x1,...,xn,1]", "\n", "w", "=", "np", ".", "expand_dims", "(", "box_size", "[", "...", ",", "1", "]", ",", "-", "1", ")", "\n", "h", "=", "np", ".", "expand_dims", "(", "box_size", "[", "...", ",", "2", "]", ",", "-", "1", ")", "\n", "corners_3d", "=", "np", ".", "zeros", "(", "tuple", "(", "list", "(", "input_shape", ")", "+", "[", "8", ",", "3", "]", ")", ")", "\n", "corners_3d", "[", "...", ",", ":", ",", "0", "]", "=", "np", ".", "concatenate", "(", "(", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ")", ",", "-", "1", ")", "\n", "corners_3d", "[", "...", ",", ":", ",", "1", "]", "=", "np", ".", "concatenate", "(", "(", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ")", ",", "-", "1", ")", "\n", "corners_3d", "[", "...", ",", ":", ",", "2", "]", "=", "np", ".", "concatenate", "(", "(", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ",", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ")", ",", "-", "1", ")", "\n", "tlist", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "input_shape", ")", ")", "]", "\n", "tlist", "+=", "[", "len", "(", "input_shape", ")", "+", "1", ",", "len", "(", "input_shape", ")", "]", "\n", "corners_3d", "=", "np", ".", "matmul", "(", "corners_3d", ",", "np", ".", "transpose", "(", "R", ",", "tuple", "(", "tlist", ")", ")", ")", "\n", "corners_3d", "+=", "np", ".", "expand_dims", "(", "center", ",", "-", "2", ")", "\n", "return", "corners_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.tf_visualizer.Visualizer.__init__": [[16, 25], ["tf_logger.Logger", "os.path.join", "os.path.join", "open", "time.strftime", "log_file.write"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "name", "=", "'train'", ")", ":", "\n", "# self.opt = opt", "\n", "#self.logger = tf_logger.Logger(os.path.join(opt.logging_dir, opt.name))", "\n", "#self.log_name = os.path.join(opt.checkpoint_dir, opt.name, 'loss_log.txt')", "\n", "        ", "self", ".", "logger", "=", "tf_logger", ".", "Logger", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir", ",", "name", ")", ")", "\n", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir", ",", "'tf_visualizer_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.tf_visualizer.Visualizer.log_images": [[27, 31], ["visuals.items", "tf_visualizer.Visualizer.logger.image_summary"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.tf_logger.Logger.image_summary"], ["", "", "def", "log_images", "(", "self", ",", "visuals", ",", "step", ")", ":", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "logger", ".", "image_summary", "(", "\n", "label", ",", "[", "image_numpy", "]", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.tf_visualizer.Visualizer.log_scalars": [[33, 36], ["scalars.items", "tf_visualizer.Visualizer.logger.scalar_summary"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.tf_logger.Logger.scalar_summary"], ["", "", "def", "log_scalars", "(", "self", ",", "scalars", ",", "step", ")", ":", "\n", "        ", "for", "label", ",", "val", "in", "scalars", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "logger", ".", "scalar_summary", "(", "label", ",", "val", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.tf_visualizer.Visualizer.plot_current_points": [[38, 40], ["None"], "methods", ["None"], ["", "", "def", "plot_current_points", "(", "self", ",", "points", ",", "disp_offset", "=", "10", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.tf_visualizer.Visualizer.print_current_scalars": [[42, 50], ["scalars.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "def", "print_current_scalars", "(", "self", ",", "epoch", ",", "i", ",", "scalars", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d) '", "%", "(", "epoch", ",", "i", ")", "\n", "for", "k", ",", "v", "in", "scalars", ".", "items", "(", ")", ":", "\n", "            ", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nn_distance.huber_loss": [[15, 33], ["torch.abs", "torch.abs", "torch.clamp", "torch.clamp"], "function", ["None"], ["def", "huber_loss", "(", "error", ",", "delta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        error: Torch tensor (d1,d2,...,dk)\n    Returns:\n        loss: Torch tensor (d1,d2,...,dk)\n\n    x = error = pred - gt or dist(pred,gt)\n    0.5 * |x|^2                 if |x|<=d\n    0.5 * d^2 + d * (|x|-d)     if |x|>d\n    Ref: https://github.com/charlesq34/frustum-pointnets/blob/master/models/model_util.py\n    \"\"\"", "\n", "abs_error", "=", "torch", ".", "abs", "(", "error", ")", "\n", "#quadratic = torch.min(abs_error, torch.FloatTensor([delta]))", "\n", "quadratic", "=", "torch", ".", "clamp", "(", "abs_error", ",", "max", "=", "delta", ")", "\n", "linear", "=", "(", "abs_error", "-", "quadratic", ")", "\n", "loss", "=", "0.5", "*", "quadratic", "**", "2", "+", "delta", "*", "linear", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nn_distance.nn_distance": [[34, 62], ["pc1.unsqueeze().repeat", "pc2.unsqueeze().repeat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "pc1.unsqueeze", "pc2.unsqueeze", "nn_distance.huber_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nn_distance.huber_loss"], ["", "def", "nn_distance", "(", "pc1", ",", "pc2", ",", "l1smooth", "=", "False", ",", "delta", "=", "1.0", ",", "l1", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        pc1: (B,N,C) torch tensor\n        pc2: (B,M,C) torch tensor\n        l1smooth: bool, whether to use l1smooth loss\n        delta: scalar, the delta used in l1smooth loss\n    Output:\n        dist1: (B,N) torch float32 tensor\n        idx1: (B,N) torch int64 tensor\n        dist2: (B,M) torch float32 tensor\n        idx2: (B,M) torch int64 tensor\n    \"\"\"", "\n", "N", "=", "pc1", ".", "shape", "[", "1", "]", "\n", "M", "=", "pc2", ".", "shape", "[", "1", "]", "\n", "pc1_expand_tile", "=", "pc1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "M", ",", "1", ")", "\n", "pc2_expand_tile", "=", "pc2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "N", ",", "1", ",", "1", ")", "\n", "pc_diff", "=", "pc1_expand_tile", "-", "pc2_expand_tile", "\n", "\n", "if", "l1smooth", ":", "\n", "        ", "pc_dist", "=", "torch", ".", "sum", "(", "huber_loss", "(", "pc_diff", ",", "delta", ")", ",", "dim", "=", "-", "1", ")", "# (B,N,M)", "\n", "", "elif", "l1", ":", "\n", "        ", "pc_dist", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "pc_diff", ")", ",", "dim", "=", "-", "1", ")", "# (B,N,M)", "\n", "", "else", ":", "\n", "        ", "pc_dist", "=", "torch", ".", "sum", "(", "pc_diff", "**", "2", ",", "dim", "=", "-", "1", ")", "# (B,N,M)", "\n", "", "dist1", ",", "idx1", "=", "torch", ".", "min", "(", "pc_dist", ",", "dim", "=", "2", ")", "# (B,N)", "\n", "dist2", ",", "idx2", "=", "torch", ".", "min", "(", "pc_dist", ",", "dim", "=", "1", ")", "# (B,M)", "\n", "return", "dist1", ",", "idx1", ",", "dist2", ",", "idx2", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nn_distance.demo_nn_distance": [[63, 91], ["numpy.random.seed", "numpy.random.random", "numpy.random.random", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "nn_distance.nn_distance", "print", "print", "numpy.zeros", "range", "print", "print", "print", "nn_distance.nn_distance", "print", "print", "numpy.zeros", "range", "print", "np.random.random.astype", "np.random.random.astype", "range", "range", "numpy.sum", "numpy.abs", "numpy.minimum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nn_distance.nn_distance", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nn_distance.nn_distance"], ["", "def", "demo_nn_distance", "(", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "pc1arr", "=", "np", ".", "random", ".", "random", "(", "(", "1", ",", "5", ",", "3", ")", ")", "\n", "pc2arr", "=", "np", ".", "random", ".", "random", "(", "(", "1", ",", "6", ",", "3", ")", ")", "\n", "pc1", "=", "torch", ".", "from_numpy", "(", "pc1arr", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "pc2", "=", "torch", ".", "from_numpy", "(", "pc2arr", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "dist1", ",", "idx1", ",", "dist2", ",", "idx2", "=", "nn_distance", "(", "pc1", ",", "pc2", ")", "\n", "print", "(", "dist1", ")", "\n", "print", "(", "idx1", ")", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "5", ",", "6", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "6", ")", ":", "\n", "            ", "dist", "[", "i", ",", "j", "]", "=", "np", ".", "sum", "(", "(", "pc1arr", "[", "0", ",", "i", ",", ":", "]", "-", "pc2arr", "[", "0", ",", "j", ",", ":", "]", ")", "**", "2", ")", "\n", "", "", "print", "(", "dist", ")", "\n", "print", "(", "'-'", "*", "30", ")", "\n", "print", "(", "'L1smooth dists:'", ")", "\n", "dist1", ",", "idx1", ",", "dist2", ",", "idx2", "=", "nn_distance", "(", "pc1", ",", "pc2", ",", "True", ")", "\n", "print", "(", "dist1", ")", "\n", "print", "(", "idx1", ")", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "5", ",", "6", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "6", ")", ":", "\n", "            ", "error", "=", "np", ".", "abs", "(", "pc1arr", "[", "0", ",", "i", ",", ":", "]", "-", "pc2arr", "[", "0", ",", "j", ",", ":", "]", ")", "\n", "quad", "=", "np", ".", "minimum", "(", "error", ",", "1.0", ")", "\n", "linear", "=", "error", "-", "quad", "\n", "loss", "=", "0.5", "*", "quad", "**", "2", "+", "1.0", "*", "linear", "\n", "dist", "[", "i", ",", "j", "]", "=", "np", ".", "sum", "(", "loss", ")", "\n", "", "", "print", "(", "dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.voc_ap": [[24, 56], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n    Compute VOC AP given precision and recall.\n    If use_07_metric is true, uses the\n    VOC 07 11 point method (default:False).\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.get_iou": [[61, 68], ["metric_util.calc_iou"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.metric_util.calc_iou"], ["def", "get_iou", "(", "bb1", ",", "bb2", ")", ":", "\n", "    ", "\"\"\" Compute IoU of two bounding boxes.\n        ** Define your bod IoU function HERE **\n    \"\"\"", "\n", "#pass", "\n", "iou3d", "=", "calc_iou", "(", "bb1", ",", "bb2", ")", "\n", "return", "iou3d", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.get_iou_obb": [[70, 73], ["box_util.box3d_iou"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.box3d_iou"], ["def", "get_iou_obb", "(", "bb1", ",", "bb2", ")", ":", "\n", "    ", "iou3d", ",", "iou2d", "=", "box3d_iou", "(", "bb1", ",", "bb2", ")", "\n", "return", "iou3d", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.get_iou_main": [[74, 76], ["get_iou_func"], "function", ["None"], ["", "def", "get_iou_main", "(", "get_iou_func", ",", "args", ")", ":", "\n", "    ", "return", "get_iou_func", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.eval_det_cls": [[77, 162], ["gt.keys", "pred.keys", "pred.keys", "numpy.array", "numpy.array", "numpy.argsort", "numpy.sort", "len", "numpy.zeros", "numpy.zeros", "range", "numpy.cumsum", "numpy.cumsum", "eval_det.voc_ap", "numpy.array", "len", "BB[].astype", "R[].astype", "float", "numpy.maximum", "len", "image_ids.append", "np.array.append", "np.array.append", "range", "numpy.array", "eval_det.get_iou_main", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.voc_ap", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.get_iou_main"], ["", "def", "eval_det_cls", "(", "pred", ",", "gt", ",", "ovthresh", "=", "0.25", ",", "use_07_metric", "=", "False", ",", "get_iou_func", "=", "get_iou", ")", ":", "\n", "    ", "\"\"\" Generic functions to compute precision/recall for object detection\n        for a single class.\n        Input:\n            pred: map of {img_id: [(bbox, score)]} where bbox is numpy array\n            gt: map of {img_id: [bbox]}\n            ovthresh: scalar, iou threshold\n            use_07_metric: bool, if True use VOC07 11 point method\n        Output:\n            rec: numpy array of length nd\n            prec: numpy array of length nd\n            ap: scalar, average precision\n    \"\"\"", "\n", "\n", "# construct gt objects", "\n", "class_recs", "=", "{", "}", "# {img_id: {'bbox': bbox list, 'det': matched list}}", "\n", "npos", "=", "0", "\n", "for", "img_id", "in", "gt", ".", "keys", "(", ")", ":", "\n", "        ", "bbox", "=", "np", ".", "array", "(", "gt", "[", "img_id", "]", ")", "\n", "det", "=", "[", "False", "]", "*", "len", "(", "bbox", ")", "\n", "npos", "+=", "len", "(", "bbox", ")", "\n", "class_recs", "[", "img_id", "]", "=", "{", "'bbox'", ":", "bbox", ",", "'det'", ":", "det", "}", "\n", "# pad empty list to all other imgids", "\n", "", "for", "img_id", "in", "pred", ".", "keys", "(", ")", ":", "\n", "        ", "if", "img_id", "not", "in", "gt", ":", "\n", "            ", "class_recs", "[", "img_id", "]", "=", "{", "'bbox'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "'det'", ":", "[", "]", "}", "\n", "\n", "# construct dets", "\n", "", "", "image_ids", "=", "[", "]", "\n", "confidence", "=", "[", "]", "\n", "BB", "=", "[", "]", "\n", "for", "img_id", "in", "pred", ".", "keys", "(", ")", ":", "\n", "        ", "for", "box", ",", "score", "in", "pred", "[", "img_id", "]", ":", "\n", "            ", "image_ids", ".", "append", "(", "img_id", ")", "\n", "confidence", ".", "append", "(", "score", ")", "\n", "BB", ".", "append", "(", "box", ")", "\n", "", "", "confidence", "=", "np", ".", "array", "(", "confidence", ")", "\n", "BB", "=", "np", ".", "array", "(", "BB", ")", "# (nd,4 or 8,3 or 6)", "\n", "\n", "# sort by confidence", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "sorted_scores", "=", "np", ".", "sort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", "...", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "#if d%100==0: print(d)", "\n", "        ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", "...", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "'bbox'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "            ", "for", "j", "in", "range", "(", "BBGT", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "iou", "=", "get_iou_main", "(", "get_iou_func", ",", "(", "bb", ",", "BBGT", "[", "j", ",", "...", "]", ")", ")", "\n", "if", "iou", ">", "ovmax", ":", "\n", "                    ", "ovmax", "=", "iou", "\n", "jmax", "=", "j", "\n", "\n", "#print d, ovmax", "\n", "", "", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "            ", "if", "not", "R", "[", "'det'", "]", "[", "jmax", "]", ":", "\n", "                ", "tp", "[", "d", "]", "=", "1.", "\n", "R", "[", "'det'", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.", "\n", "\n", "# compute precision recall", "\n", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "#print('NPOS: ', npos)", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "rec", ",", "prec", ",", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.eval_det_cls_wrapper": [[163, 167], ["eval_det.eval_det_cls"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.eval_det_cls"], ["", "def", "eval_det_cls_wrapper", "(", "arguments", ")", ":", "\n", "    ", "pred", ",", "gt", ",", "ovthresh", ",", "use_07_metric", ",", "get_iou_func", "=", "arguments", "\n", "rec", ",", "prec", ",", "ap", "=", "eval_det_cls", "(", "pred", ",", "gt", ",", "ovthresh", ",", "use_07_metric", ",", "get_iou_func", ")", "\n", "return", "(", "rec", ",", "prec", ",", "ap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.eval_det": [[168, 208], ["pred_all.keys", "gt_all.keys", "gt.keys", "print", "eval_det.eval_det_cls", "print", "[].append", "[].append"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.eval_det_cls"], ["", "def", "eval_det", "(", "pred_all", ",", "gt_all", ",", "ovthresh", "=", "0.25", ",", "use_07_metric", "=", "False", ",", "get_iou_func", "=", "get_iou", ")", ":", "\n", "    ", "\"\"\" Generic functions to compute precision/recall for object detection\n        for multiple classes.\n        Input:\n            pred_all: map of {img_id: [(classname, bbox, score)]}\n            gt_all: map of {img_id: [(classname, bbox)]}\n            ovthresh: scalar, iou threshold\n            use_07_metric: bool, if true use VOC07 11 point method\n        Output:\n            rec: {classname: rec}\n            prec: {classname: prec_all}\n            ap: {classname: scalar}\n    \"\"\"", "\n", "pred", "=", "{", "}", "# map {classname: pred}", "\n", "gt", "=", "{", "}", "# map {classname: gt}", "\n", "for", "img_id", "in", "pred_all", ".", "keys", "(", ")", ":", "\n", "        ", "for", "classname", ",", "bbox", ",", "score", "in", "pred_all", "[", "img_id", "]", ":", "\n", "            ", "if", "classname", "not", "in", "pred", ":", "pred", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "pred", "[", "classname", "]", ":", "\n", "                ", "pred", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "if", "classname", "not", "in", "gt", ":", "gt", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "gt", "[", "classname", "]", ":", "\n", "                ", "gt", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "pred", "[", "classname", "]", "[", "img_id", "]", ".", "append", "(", "(", "bbox", ",", "score", ")", ")", "\n", "", "", "for", "img_id", "in", "gt_all", ".", "keys", "(", ")", ":", "\n", "        ", "for", "classname", ",", "bbox", "in", "gt_all", "[", "img_id", "]", ":", "\n", "            ", "if", "classname", "not", "in", "gt", ":", "gt", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "gt", "[", "classname", "]", ":", "\n", "                ", "gt", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "gt", "[", "classname", "]", "[", "img_id", "]", ".", "append", "(", "bbox", ")", "\n", "\n", "", "", "rec", "=", "{", "}", "\n", "prec", "=", "{", "}", "\n", "ap", "=", "{", "}", "\n", "for", "classname", "in", "gt", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "'Computing AP for class: '", ",", "classname", ")", "\n", "rec", "[", "classname", "]", ",", "prec", "[", "classname", "]", ",", "ap", "[", "classname", "]", "=", "eval_det_cls", "(", "pred", "[", "classname", "]", ",", "gt", "[", "classname", "]", ",", "ovthresh", ",", "use_07_metric", ",", "get_iou_func", ")", "\n", "print", "(", "classname", ",", "ap", "[", "classname", "]", ")", "\n", "\n", "", "return", "rec", ",", "prec", ",", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.eval_det_multiprocessing": [[210, 257], ["pred_all.keys", "gt_all.keys", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "enumerate", "gt.keys", "print", "[].append", "[].append", "gt.keys"], "function", ["None"], ["def", "eval_det_multiprocessing", "(", "pred_all", ",", "gt_all", ",", "ovthresh", "=", "0.25", ",", "use_07_metric", "=", "False", ",", "get_iou_func", "=", "get_iou", ")", ":", "\n", "    ", "\"\"\" Generic functions to compute precision/recall for object detection\n        for multiple classes.\n        Input:\n            pred_all: map of {img_id: [(classname, bbox, score)]}\n            gt_all: map of {img_id: [(classname, bbox)]}\n            ovthresh: scalar, iou threshold\n            use_07_metric: bool, if true use VOC07 11 point method\n        Output:\n            rec: {classname: rec}\n            prec: {classname: prec_all}\n            ap: {classname: scalar}\n    \"\"\"", "\n", "pred", "=", "{", "}", "# map {classname: pred}", "\n", "gt", "=", "{", "}", "# map {classname: gt}", "\n", "for", "img_id", "in", "pred_all", ".", "keys", "(", ")", ":", "\n", "        ", "for", "classname", ",", "bbox", ",", "score", "in", "pred_all", "[", "img_id", "]", ":", "\n", "            ", "if", "classname", "not", "in", "pred", ":", "pred", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "pred", "[", "classname", "]", ":", "\n", "                ", "pred", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "if", "classname", "not", "in", "gt", ":", "gt", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "gt", "[", "classname", "]", ":", "\n", "                ", "gt", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "pred", "[", "classname", "]", "[", "img_id", "]", ".", "append", "(", "(", "bbox", ",", "score", ")", ")", "\n", "", "", "for", "img_id", "in", "gt_all", ".", "keys", "(", ")", ":", "\n", "        ", "for", "classname", ",", "bbox", "in", "gt_all", "[", "img_id", "]", ":", "\n", "            ", "if", "classname", "not", "in", "gt", ":", "gt", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "gt", "[", "classname", "]", ":", "\n", "                ", "gt", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "gt", "[", "classname", "]", "[", "img_id", "]", ".", "append", "(", "bbox", ")", "\n", "\n", "", "", "rec", "=", "{", "}", "\n", "prec", "=", "{", "}", "\n", "ap", "=", "{", "}", "\n", "p", "=", "Pool", "(", "processes", "=", "10", ")", "\n", "ret_values", "=", "p", ".", "map", "(", "eval_det_cls_wrapper", ",", "[", "(", "pred", "[", "classname", "]", ",", "gt", "[", "classname", "]", ",", "ovthresh", ",", "use_07_metric", ",", "get_iou_func", ")", "for", "classname", "in", "gt", ".", "keys", "(", ")", "if", "classname", "in", "pred", "]", ")", "\n", "p", ".", "close", "(", ")", "\n", "for", "i", ",", "classname", "in", "enumerate", "(", "gt", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "classname", "in", "pred", ":", "\n", "            ", "rec", "[", "classname", "]", ",", "prec", "[", "classname", "]", ",", "ap", "[", "classname", "]", "=", "ret_values", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "rec", "[", "classname", "]", "=", "0", "\n", "prec", "[", "classname", "]", "=", "0", "\n", "ap", "[", "classname", "]", "=", "0", "\n", "", "print", "(", "classname", ",", "ap", "[", "classname", "]", ")", "\n", "\n", "", "return", "rec", ",", "prec", ",", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.rotate_val_scans.transform": [[15, 44], ["open().readlines", "numpy.array().reshape", "numpy.ones", "numpy.dot", "PlyData.read.write", "open", "plyfile.PlyData.read", "numpy.zeros", "np.array().reshape.transpose", "os.path.join", "open", "numpy.array", "float", "line.rstrip().strip().split", "line.rstrip().strip", "line.rstrip"], "function", ["None"], ["def", "transform", "(", "file_name", ",", "mesh_file", ",", "meta_file", ",", "new_dir", ")", ":", "\n", "\n", "#1.load point cloud", "\n", "    ", "with", "open", "(", "mesh_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "'vertex'", "]", ".", "count", "\n", "mesh_vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "6", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "mesh_vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'x'", "]", "\n", "mesh_vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'y'", "]", "\n", "mesh_vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'z'", "]", "\n", "\n", "#2.apply transformation", "\n", "## Load scene axis alignment matrix", "\n", "", "lines", "=", "open", "(", "meta_file", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "'axisAlignment'", "in", "line", ":", "\n", "            ", "axis_align_matrix", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "rstrip", "(", ")", ".", "strip", "(", "'axisAlignment = '", ")", ".", "split", "(", "' '", ")", "]", "\n", "", "", "axis_align_matrix", "=", "np", ".", "array", "(", "axis_align_matrix", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "pts", "=", "np", ".", "ones", "(", "(", "mesh_vertices", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "pts", "[", ":", ",", "0", ":", "3", "]", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "\n", "pts", "=", "np", ".", "dot", "(", "pts", ",", "axis_align_matrix", ".", "transpose", "(", ")", ")", "# Nx4", "\n", "\n", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'x'", "]", "=", "pts", "[", ":", ",", "0", "]", "\n", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'y'", "]", "=", "pts", "[", ":", ",", "1", "]", "\n", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'z'", "]", "=", "pts", "[", ":", ",", "2", "]", "\n", "\n", "#3.save transformed meshes", "\n", "plydata", ".", "write", "(", "os", ".", "path", ".", "join", "(", "new_dir", ",", "file_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.rotate_val_scans.main": [[46, 65], ["open().readlines", "os.path.exists", "os.makedirs", "line.strip.strip", "print", "os.path.join", "os.path.join", "rotate_val_scans.transform", "open"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.rotate_val_scans.transform"], ["", "def", "main", "(", ")", ":", "\n", "## you need first put all the val meshes into \"base_dir\"", "\n", "    ", "base_dir", "=", "'D:/MLCVNet/scannet/scans'", "\n", "new_dir", "=", "'D:/MLCVNet/scannet/scans_val_transformed'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "new_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "new_dir", ")", "\n", "\n", "", "file_val", "=", "\"D:/MLCVNet/scannet/meta_data/scannetv2_val.txt\"", "\n", "lines", "=", "open", "(", "file_val", ")", ".", "readlines", "(", ")", "\n", "\n", "## transform meshes one by one", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", "'\\n'", ")", "\n", "print", "(", "line", ")", "\n", "file_name", "=", "line", "+", "'_vh_clean_2.ply'", "\n", "meta_file", "=", "line", "+", "'.txt'", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "line", ",", "file_name", ")", "\n", "meta_file", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "line", ",", "meta_file", ")", "\n", "transform", "(", "file_name", ",", "file_path", ",", "meta_file", ",", "new_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.batch_load_scannet_data.export_one_scan": [[26, 57], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "load_scannet_data.export", "numpy.logical_not", "len", "print", "numpy.in1d", "print", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.in1d", "numpy.unique", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.load_scannet_data.export"], ["def", "export_one_scan", "(", "scan_name", ",", "output_filename_prefix", ")", ":", "\n", "    ", "mesh_file", "=", "os", ".", "path", ".", "join", "(", "SCANNET_DIR", ",", "scan_name", ",", "scan_name", "+", "'_vh_clean_2.ply'", ")", "\n", "agg_file", "=", "os", ".", "path", ".", "join", "(", "SCANNET_DIR", ",", "scan_name", ",", "scan_name", "+", "'.aggregation.json'", ")", "\n", "seg_file", "=", "os", ".", "path", ".", "join", "(", "SCANNET_DIR", ",", "scan_name", ",", "scan_name", "+", "'_vh_clean_2.0.010000.segs.json'", ")", "\n", "meta_file", "=", "os", ".", "path", ".", "join", "(", "SCANNET_DIR", ",", "scan_name", ",", "scan_name", "+", "'.txt'", ")", "# includes axisAlignment info for the train set scans.   ", "\n", "mesh_vertices", ",", "semantic_labels", ",", "instance_labels", ",", "instance_bboxes", ",", "instance2semantic", "=", "export", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ",", "LABEL_MAP_FILE", ",", "None", ")", "\n", "\n", "mask", "=", "np", ".", "logical_not", "(", "np", ".", "in1d", "(", "semantic_labels", ",", "DONOTCARE_CLASS_IDS", ")", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "mask", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "mask", "]", "\n", "instance_labels", "=", "instance_labels", "[", "mask", "]", "\n", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "instance_labels", ")", ")", "\n", "print", "(", "'Num of instances: '", ",", "num_instances", ")", "\n", "\n", "bbox_mask", "=", "np", ".", "in1d", "(", "instance_bboxes", "[", ":", ",", "-", "1", "]", ",", "OBJ_CLASS_IDS", ")", "\n", "instance_bboxes", "=", "instance_bboxes", "[", "bbox_mask", ",", ":", "]", "\n", "print", "(", "'Num of care instances: '", ",", "instance_bboxes", ".", "shape", "[", "0", "]", ")", "\n", "\n", "N", "=", "mesh_vertices", ".", "shape", "[", "0", "]", "\n", "if", "N", ">", "MAX_NUM_POINT", ":", "\n", "        ", "choices", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "MAX_NUM_POINT", ",", "replace", "=", "False", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "choices", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "choices", "]", "\n", "instance_labels", "=", "instance_labels", "[", "choices", "]", "\n", "\n", "", "np", ".", "save", "(", "output_filename_prefix", "+", "'_vert.npy'", ",", "mesh_vertices", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_sem_label.npy'", ",", "semantic_labels", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_ins_label.npy'", ",", "instance_labels", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_bbox.npy'", ",", "instance_bboxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.batch_load_scannet_data.batch_export": [[58, 77], ["os.path.exists", "print", "os.mkdir", "print", "print", "print", "os.path.join", "os.path.isfile", "print", "datetime.datetime.now", "print", "print", "batch_load_scannet_data.export_one_scan", "print"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.batch_load_scannet_data.export_one_scan"], ["", "def", "batch_export", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "OUTPUT_FOLDER", ")", ":", "\n", "        ", "print", "(", "'Creating new data folder: {}'", ".", "format", "(", "OUTPUT_FOLDER", ")", ")", "\n", "os", ".", "mkdir", "(", "OUTPUT_FOLDER", ")", "\n", "\n", "", "for", "scan_name", "in", "TRAIN_SCAN_NAMES", ":", "\n", "        ", "print", "(", "'-'", "*", "20", "+", "'begin'", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "scan_name", ")", "\n", "output_filename_prefix", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_FOLDER", ",", "scan_name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "output_filename_prefix", "+", "'_vert.npy'", ")", ":", "\n", "            ", "print", "(", "'File already exists. skipping.'", ")", "\n", "print", "(", "'-'", "*", "20", "+", "'done'", ")", "\n", "continue", "\n", "", "try", ":", "\n", "            ", "export_one_scan", "(", "scan_name", ",", "output_filename_prefix", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'Failed export scan: %s'", "%", "(", "scan_name", ")", ")", "\n", "", "print", "(", "'-'", "*", "20", "+", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.__init__": [[16, 31], ["numpy.array", "range", "numpy.load", "enumerate", "os.path.join", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_class", "=", "18", "\n", "self", ".", "num_heading_bin", "=", "1", "\n", "self", ".", "num_size_cluster", "=", "18", "\n", "\n", "self", ".", "type2class", "=", "{", "'cabinet'", ":", "0", ",", "'bed'", ":", "1", ",", "'chair'", ":", "2", ",", "'sofa'", ":", "3", ",", "'table'", ":", "4", ",", "'door'", ":", "5", ",", "\n", "'window'", ":", "6", ",", "'bookshelf'", ":", "7", ",", "'picture'", ":", "8", ",", "'counter'", ":", "9", ",", "'desk'", ":", "10", ",", "'curtain'", ":", "11", ",", "\n", "'refrigerator'", ":", "12", ",", "'showercurtrain'", ":", "13", ",", "'toilet'", ":", "14", ",", "'sink'", ":", "15", ",", "'bathtub'", ":", "16", ",", "'garbagebin'", ":", "17", "}", "\n", "self", ".", "class2type", "=", "{", "self", ".", "type2class", "[", "t", "]", ":", "t", "for", "t", "in", "self", ".", "type2class", "}", "\n", "self", ".", "nyu40ids", "=", "np", ".", "array", "(", "[", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "14", ",", "16", ",", "24", ",", "28", ",", "33", ",", "34", ",", "36", ",", "39", "]", ")", "\n", "self", ".", "nyu40id2class", "=", "{", "nyu40id", ":", "i", "for", "i", ",", "nyu40id", "in", "enumerate", "(", "list", "(", "self", ".", "nyu40ids", ")", ")", "}", "\n", "self", ".", "mean_size_arr", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'scannet/meta_data/scannet_means.npz'", ")", ")", "[", "'arr_0'", "]", "\n", "self", ".", "type_mean_size", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_size_cluster", ")", ":", "\n", "            ", "self", ".", "type_mean_size", "[", "self", ".", "class2type", "[", "i", "]", "]", "=", "self", ".", "mean_size_arr", "[", "i", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.angle2class": [[32, 44], ["None"], "methods", ["None"], ["", "", "def", "angle2class", "(", "self", ",", "angle", ")", ":", "\n", "        ", "''' Convert continuous angle to discrete class\n            [optinal] also small regression number from  \n            class center angle to current angle.\n           \n            angle is from 0-2pi (or -pi~pi), class center at 0, 1*(2pi/N), 2*(2pi/N) ...  (N-1)*(2pi/N)\n            return is class of int32 of 0,1,...,N-1 and a number such that\n                class*(2pi/N) + number = angle\n\n            NOT USED.\n        '''", "\n", "assert", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.class2angle": [[45, 50], ["None"], "methods", ["None"], ["", "def", "class2angle", "(", "self", ",", "pred_cls", ",", "residual", ",", "to_label_format", "=", "True", ")", ":", "\n", "        ", "''' Inverse function to angle2class.\n        \n        As ScanNet only has axis-alined boxes so angles are always 0. '''", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.size2class": [[51, 56], ["None"], "methods", ["None"], ["", "def", "size2class", "(", "self", ",", "size", ",", "type_name", ")", ":", "\n", "        ", "''' Convert 3D box size (l,w,h) to size class and size residual '''", "\n", "size_class", "=", "self", ".", "type2class", "[", "type_name", "]", "\n", "size_residual", "=", "size", "-", "self", ".", "type_mean_size", "[", "type_name", "]", "\n", "return", "size_class", ",", "size_residual", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.class2size": [[57, 60], ["None"], "methods", ["None"], ["", "def", "class2size", "(", "self", ",", "pred_cls", ",", "residual", ")", ":", "\n", "        ", "''' Inverse function to size2class '''", "\n", "return", "self", ".", "mean_size_arr", "[", "pred_cls", ",", ":", "]", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.param2obb": [[61, 69], ["model_util_scannet.ScannetDatasetConfig.class2angle", "model_util_scannet.ScannetDatasetConfig.class2size", "numpy.zeros", "int"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.class2angle", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.class2size"], ["", "def", "param2obb", "(", "self", ",", "center", ",", "heading_class", ",", "heading_residual", ",", "size_class", ",", "size_residual", ")", ":", "\n", "        ", "heading_angle", "=", "self", ".", "class2angle", "(", "heading_class", ",", "heading_residual", ")", "\n", "box_size", "=", "self", ".", "class2size", "(", "int", "(", "size_class", ")", ",", "size_residual", ")", "\n", "obb", "=", "np", ".", "zeros", "(", "(", "7", ",", ")", ")", "\n", "obb", "[", "0", ":", "3", "]", "=", "center", "\n", "obb", "[", "3", ":", "6", "]", "=", "box_size", "\n", "obb", "[", "6", "]", "=", "heading_angle", "*", "-", "1", "\n", "return", "obb", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.rotate_aligned_boxes": [[70, 92], ["numpy.dot", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.stack", "numpy.concatenate", "numpy.transpose", "numpy.zeros", "numpy.dot", "numpy.max", "numpy.max", "numpy.transpose"], "function", ["None"], ["", "", "def", "rotate_aligned_boxes", "(", "input_boxes", ",", "rot_mat", ")", ":", "\n", "    ", "centers", ",", "lengths", "=", "input_boxes", "[", ":", ",", "0", ":", "3", "]", ",", "input_boxes", "[", ":", ",", "3", ":", "6", "]", "\n", "new_centers", "=", "np", ".", "dot", "(", "centers", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "\n", "dx", ",", "dy", "=", "lengths", "[", ":", ",", "0", "]", "/", "2.0", ",", "lengths", "[", ":", ",", "1", "]", "/", "2.0", "\n", "new_x", "=", "np", ".", "zeros", "(", "(", "dx", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "new_y", "=", "np", ".", "zeros", "(", "(", "dx", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "\n", "for", "i", ",", "crnr", "in", "enumerate", "(", "[", "(", "-", "1", ",", "-", "1", ")", ",", "(", "1", ",", "-", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", "]", ")", ":", "\n", "        ", "crnrs", "=", "np", ".", "zeros", "(", "(", "dx", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "crnrs", "[", ":", ",", "0", "]", "=", "crnr", "[", "0", "]", "*", "dx", "\n", "crnrs", "[", ":", ",", "1", "]", "=", "crnr", "[", "1", "]", "*", "dy", "\n", "crnrs", "=", "np", ".", "dot", "(", "crnrs", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "new_x", "[", ":", ",", "i", "]", "=", "crnrs", "[", ":", ",", "0", "]", "\n", "new_y", "[", ":", ",", "i", "]", "=", "crnrs", "[", ":", ",", "1", "]", "\n", "\n", "\n", "", "new_dx", "=", "2.0", "*", "np", ".", "max", "(", "new_x", ",", "1", ")", "\n", "new_dy", "=", "2.0", "*", "np", ".", "max", "(", "new_y", ",", "1", ")", "\n", "new_lengths", "=", "np", ".", "stack", "(", "(", "new_dx", ",", "new_dy", ",", "lengths", "[", ":", ",", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "new_centers", ",", "new_lengths", "]", ",", "axis", "=", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.load_scannet_data.read_aggregation": [[26, 43], ["os.path.isfile", "open", "json.load", "len", "range", "label_to_segs[].extend"], "function", ["None"], ["def", "read_aggregation", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "object_id_to_segs", "=", "{", "}", "\n", "label_to_segs", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "'segGroups'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'objectId'", "]", "+", "1", "# instance ids should be 1-indexed", "\n", "label", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'label'", "]", "\n", "segs", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'segments'", "]", "\n", "object_id_to_segs", "[", "object_id", "]", "=", "segs", "\n", "if", "label", "in", "label_to_segs", ":", "\n", "                ", "label_to_segs", "[", "label", "]", ".", "extend", "(", "segs", ")", "\n", "", "else", ":", "\n", "                ", "label_to_segs", "[", "label", "]", "=", "segs", "\n", "", "", "", "return", "object_id_to_segs", ",", "label_to_segs", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.load_scannet_data.read_segmentation": [[45, 58], ["os.path.isfile", "open", "json.load", "len", "range", "seg_to_verts[].append"], "function", ["None"], ["", "def", "read_segmentation", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "seg_to_verts", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_verts", "=", "len", "(", "data", "[", "'segIndices'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_verts", ")", ":", "\n", "            ", "seg_id", "=", "data", "[", "'segIndices'", "]", "[", "i", "]", "\n", "if", "seg_id", "in", "seg_to_verts", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", "=", "[", "i", "]", "\n", "", "", "", "return", "seg_to_verts", ",", "num_verts", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.load_scannet_data.export": [[60, 130], ["scannet_utils.read_label_mapping", "scannet_utils.read_mesh_vertices_rgb", "open().readlines", "np.array().reshape", "np.ones", "np.dot", "load_scannet_data.read_aggregation", "load_scannet_data.read_segmentation", "np.zeros", "label_to_segs.items", "np.zeros", "len", "object_id_to_segs.items", "np.zeros", "np.array().reshape.transpose", "np.unique", "np.min", "np.min", "np.min", "np.max", "np.max", "np.max", "np.array", "np.save", "np.save", "np.save", "np.save", "open", "np.array", "list", "len", "float", "object_id_to_segs.keys", "line.rstrip().strip().split", "line.rstrip().strip", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.scannet_utils.read_label_mapping", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.scannet_utils.read_mesh_vertices_rgb", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.load_scannet_data.read_aggregation", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.load_scannet_data.read_segmentation"], ["", "def", "export", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ",", "label_map_file", ",", "output_file", "=", "None", ")", ":", "\n", "    ", "\"\"\" points are XYZ RGB (RGB in 0-255),\n    semantic label as nyu40 ids,\n    instance label as 1-#instance,\n    box as (cx,cy,cz,dx,dy,dz,semantic_label)\n    \"\"\"", "\n", "label_map", "=", "scannet_utils", ".", "read_label_mapping", "(", "label_map_file", ",", "\n", "label_from", "=", "'raw_category'", ",", "label_to", "=", "'nyu40id'", ")", "\n", "mesh_vertices", "=", "scannet_utils", ".", "read_mesh_vertices_rgb", "(", "mesh_file", ")", "\n", "\n", "# Load scene axis alignment matrix", "\n", "lines", "=", "open", "(", "meta_file", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "'axisAlignment'", "in", "line", ":", "\n", "            ", "axis_align_matrix", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "rstrip", "(", ")", ".", "strip", "(", "'axisAlignment = '", ")", ".", "split", "(", "' '", ")", "]", "\n", "break", "\n", "", "", "axis_align_matrix", "=", "np", ".", "array", "(", "axis_align_matrix", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "pts", "=", "np", ".", "ones", "(", "(", "mesh_vertices", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "pts", "[", ":", ",", "0", ":", "3", "]", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "\n", "pts", "=", "np", ".", "dot", "(", "pts", ",", "axis_align_matrix", ".", "transpose", "(", ")", ")", "# Nx4", "\n", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "=", "pts", "[", ":", ",", "0", ":", "3", "]", "\n", "\n", "# Load semantic and instance labels", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "object_id_to_label_id", "=", "{", "}", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "label_map", "[", "label", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "", "", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "object_id_to_segs", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "instance_ids", "[", "verts", "]", "=", "object_id", "\n", "if", "object_id", "not", "in", "object_id_to_label_id", ":", "\n", "                ", "object_id_to_label_id", "[", "object_id", "]", "=", "label_ids", "[", "verts", "]", "[", "0", "]", "\n", "", "", "", "instance_bboxes", "=", "np", ".", "zeros", "(", "(", "num_instances", ",", "7", ")", ")", "\n", "for", "obj_id", "in", "object_id_to_segs", ":", "\n", "        ", "label_id", "=", "object_id_to_label_id", "[", "obj_id", "]", "\n", "obj_pc", "=", "mesh_vertices", "[", "instance_ids", "==", "obj_id", ",", "0", ":", "3", "]", "\n", "if", "len", "(", "obj_pc", ")", "==", "0", ":", "continue", "\n", "# Compute axis aligned box", "\n", "# An axis aligned bounding box is parameterized by", "\n", "# (cx,cy,cz) and (dx,dy,dz) and label id", "\n", "# where (cx,cy,cz) is the center point of the box,", "\n", "# dx is the x-axis length of the box.", "\n", "xmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "bbox", "=", "np", ".", "array", "(", "[", "(", "xmin", "+", "xmax", ")", "/", "2", ",", "(", "ymin", "+", "ymax", ")", "/", "2", ",", "(", "zmin", "+", "zmax", ")", "/", "2", ",", "\n", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ",", "zmax", "-", "zmin", ",", "label_id", "]", ")", "\n", "# NOTE: this assumes obj_id is in 1,2,3,.,,,.NUM_INSTANCES", "\n", "instance_bboxes", "[", "obj_id", "-", "1", ",", ":", "]", "=", "bbox", "\n", "\n", "", "if", "output_file", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "output_file", "+", "'_vert.npy'", ",", "mesh_vertices", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_sem_label.npy'", ",", "label_ids", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_ins_label.npy'", ",", "instance_ids", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_bbox.npy'", ",", "instance_bboxes", ")", "\n", "\n", "", "return", "mesh_vertices", ",", "label_ids", ",", "instance_ids", ",", "instance_bboxes", ",", "object_id_to_label_id", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.load_scannet_data.main": [[131, 144], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "load_scannet_data.export", "os.path.split"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.load_scannet_data.export"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--scan_path'", ",", "required", "=", "True", ",", "help", "=", "'path to scannet scene (e.g., data/ScanNet/v2/scene0000_00'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_file'", ",", "required", "=", "True", ",", "help", "=", "'output file'", ")", "\n", "parser", ".", "add_argument", "(", "'--label_map_file'", ",", "required", "=", "True", ",", "help", "=", "'path to scannetv2-labels.combined.tsv'", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "scan_name", "=", "os", ".", "path", ".", "split", "(", "opt", ".", "scan_path", ")", "[", "-", "1", "]", "\n", "mesh_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "scan_path", ",", "scan_name", "+", "'_vh_clean_2.ply'", ")", "\n", "agg_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "scan_path", ",", "scan_name", "+", "'.aggregation.json'", ")", "\n", "seg_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "scan_path", ",", "scan_name", "+", "'_vh_clean_2.0.010000.segs.json'", ")", "\n", "meta_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "scan_path", ",", "scan_name", "+", "'.txt'", ")", "# includes axisAlignment info for the train set scans.", "\n", "export", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ",", "opt", ".", "label_map_file", ",", "opt", ".", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.scannet_utils.represents_int": [[25, 32], ["int"], "function", ["None"], ["", "def", "represents_int", "(", "s", ")", ":", "\n", "    ", "''' if string s represents an int. '''", "\n", "try", ":", "\n", "        ", "int", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.scannet_utils.read_label_mapping": [[34, 44], ["os.path.isfile", "dict", "scannet_utils.represents_int", "open", "csv.DictReader", "int", "list", "int", "dict.keys", "dict.items"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.scannet_utils.represents_int"], ["", "", "def", "read_label_mapping", "(", "filename", ",", "label_from", "=", "'raw_category'", ",", "label_to", "=", "'nyu40id'", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "mapping", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "csvfile", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ",", "delimiter", "=", "'\\t'", ")", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "mapping", "[", "row", "[", "label_from", "]", "]", "=", "int", "(", "row", "[", "label_to", "]", ")", "\n", "", "", "if", "represents_int", "(", "list", "(", "mapping", ".", "keys", "(", ")", ")", "[", "0", "]", ")", ":", "\n", "        ", "mapping", "=", "{", "int", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "mapping", ".", "items", "(", ")", "}", "\n", "", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.scannet_utils.read_mesh_vertices": [[45, 57], ["os.path.isfile", "open", "PlyData.read", "np.zeros"], "function", ["None"], ["", "def", "read_mesh_vertices", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ for each vertex.\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "'vertex'", "]", ".", "count", "\n", "vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'x'", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'y'", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'z'", "]", "\n", "", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.scannet_utils.read_mesh_vertices_rgb": [[58, 74], ["os.path.isfile", "open", "PlyData.read", "np.zeros"], "function", ["None"], ["", "def", "read_mesh_vertices_rgb", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ RGB for each vertex.\n    Note: RGB values are in 0-255\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "'vertex'", "]", ".", "count", "\n", "vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "6", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'x'", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'y'", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'z'", "]", "\n", "vertices", "[", ":", ",", "3", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'red'", "]", "\n", "vertices", "[", ":", ",", "4", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'green'", "]", "\n", "vertices", "[", ":", ",", "5", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'blue'", "]", "\n", "", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.scannet_detection_dataset.ScannetDetectionDataset.__init__": [[29, 56], ["os.path.join", "list", "set", "os.path.join", "len", "print", "len", "print", "open", "f.read().splitlines", "os.path.basename", "os.listdir", "x.startswith", "len", "f.read"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "split_set", "=", "'train'", ",", "num_points", "=", "20000", ",", "\n", "use_color", "=", "False", ",", "use_height", "=", "False", ",", "augment", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "'scannet_train_detection_data'", ")", "\n", "all_scan_names", "=", "list", "(", "set", "(", "[", "os", ".", "path", ".", "basename", "(", "x", ")", "[", "0", ":", "12", "]", "for", "x", "in", "os", ".", "listdir", "(", "self", ".", "data_path", ")", "if", "x", ".", "startswith", "(", "'scene'", ")", "]", ")", ")", "\n", "if", "split_set", "==", "'all'", ":", "\n", "            ", "self", ".", "scan_names", "=", "all_scan_names", "\n", "", "elif", "split_set", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "split_filenames", "=", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'scannet/meta_data'", ",", "\n", "'scannetv2_{}.txt'", ".", "format", "(", "split_set", ")", ")", "\n", "with", "open", "(", "split_filenames", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "scan_names", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# remove unavailiable scans", "\n", "", "num_scans", "=", "len", "(", "self", ".", "scan_names", ")", "\n", "self", ".", "scan_names", "=", "[", "sname", "for", "sname", "in", "self", ".", "scan_names", "if", "sname", "in", "all_scan_names", "]", "\n", "print", "(", "'kept {} scans out of {}'", ".", "format", "(", "len", "(", "self", ".", "scan_names", ")", ",", "num_scans", ")", ")", "\n", "num_scans", "=", "len", "(", "self", ".", "scan_names", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'illegal split name'", ")", "\n", "return", "\n", "\n", "", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "use_color", "=", "use_color", "\n", "self", ".", "use_height", "=", "use_height", "\n", "self", ".", "augment", "=", "augment", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.scannet_detection_dataset.ScannetDetectionDataset.__len__": [[57, 59], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "scan_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.scannet_detection_dataset.ScannetDetectionDataset.__getitem__": [[60, 173], ["numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pc_util.random_sampling", "numpy.zeros", "numpy.zeros", "numpy.unique", "numpy.tile", "numpy.concatenate.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.tile.astype", "numpy.zeros.astype", "numpy.array().astype", "numpy.percentile", "numpy.concatenate", "pc_util.rotz", "numpy.dot", "model_util_scannet.rotate_aligned_boxes", "model_util_scannet.rotate_aligned_boxes.astype", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.random.random", "numpy.random.random", "numpy.transpose", "numpy.where", "numpy.array", "numpy.expand_dims", "numpy.where", "numpy.random.random", "x.min", "x.max"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.random_sampling", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.rotz", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.rotate_aligned_boxes"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dict with following keys:\n            point_clouds: (N,3+C)\n            center_label: (MAX_NUM_OBJ,3) for GT box center XYZ\n            sem_cls_label: (MAX_NUM_OBJ,) semantic class index\n            angle_class_label: (MAX_NUM_OBJ,) with int values in 0,...,NUM_HEADING_BIN-1\n            angle_residual_label: (MAX_NUM_OBJ,)\n            size_classe_label: (MAX_NUM_OBJ,) with int values in 0,...,NUM_SIZE_CLUSTER\n            size_residual_label: (MAX_NUM_OBJ,3)\n            box_label_mask: (MAX_NUM_OBJ) as 0/1 with 1 indicating a unique box\n            point_votes: (N,3) with votes XYZ\n            point_votes_mask: (N,) with 0/1 with 1 indicating the point is in one of the object's OBB.\n            scan_idx: int scan index in scan_names list\n            pcl_color: unused\n        \"\"\"", "\n", "\n", "scan_name", "=", "self", ".", "scan_names", "[", "idx", "]", "\n", "mesh_vertices", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "scan_name", ")", "+", "'_vert.npy'", ")", "\n", "instance_labels", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "scan_name", ")", "+", "'_ins_label.npy'", ")", "\n", "semantic_labels", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "scan_name", ")", "+", "'_sem_label.npy'", ")", "\n", "instance_bboxes", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "scan_name", ")", "+", "'_bbox.npy'", ")", "\n", "\n", "if", "not", "self", ".", "use_color", ":", "\n", "            ", "point_cloud", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "# do not use color for now", "\n", "pcl_color", "=", "mesh_vertices", "[", ":", ",", "3", ":", "6", "]", "\n", "", "else", ":", "\n", "            ", "point_cloud", "=", "mesh_vertices", "[", ":", ",", "0", ":", "6", "]", "\n", "point_cloud", "[", ":", ",", "3", ":", "]", "=", "(", "point_cloud", "[", ":", ",", "3", ":", "]", "-", "MEAN_COLOR_RGB", ")", "/", "256.0", "\n", "\n", "", "if", "self", ".", "use_height", ":", "\n", "            ", "floor_height", "=", "np", ".", "percentile", "(", "point_cloud", "[", ":", ",", "2", "]", ",", "0.99", ")", "\n", "height", "=", "point_cloud", "[", ":", ",", "2", "]", "-", "floor_height", "\n", "point_cloud", "=", "np", ".", "concatenate", "(", "[", "point_cloud", ",", "np", ".", "expand_dims", "(", "height", ",", "1", ")", "]", ",", "1", ")", "\n", "\n", "# ------------------------------- LABELS ------------------------------        ", "\n", "", "target_bboxes", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", "6", ")", ")", "\n", "target_bboxes_mask", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ")", ")", "\n", "angle_classes", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", ")", ")", "\n", "angle_residuals", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", ")", ")", "\n", "size_classes", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", ")", ")", "\n", "size_residuals", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", "3", ")", ")", "\n", "\n", "point_cloud", ",", "choices", "=", "pc_util", ".", "random_sampling", "(", "point_cloud", ",", "\n", "self", ".", "num_points", ",", "return_choices", "=", "True", ")", "\n", "instance_labels", "=", "instance_labels", "[", "choices", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "choices", "]", "\n", "\n", "pcl_color", "=", "pcl_color", "[", "choices", "]", "\n", "\n", "target_bboxes_mask", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "=", "1", "\n", "target_bboxes", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "instance_bboxes", "[", ":", ",", "0", ":", "6", "]", "\n", "\n", "# ------------------------------- DATA AUGMENTATION ------------------------------        ", "\n", "if", "self", ".", "augment", ":", "\n", "            ", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "# Flipping along the YZ plane", "\n", "                ", "point_cloud", "[", ":", ",", "0", "]", "=", "-", "1", "*", "point_cloud", "[", ":", ",", "0", "]", "\n", "target_bboxes", "[", ":", ",", "0", "]", "=", "-", "1", "*", "target_bboxes", "[", ":", ",", "0", "]", "\n", "\n", "", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "# Flipping along the XZ plane", "\n", "                ", "point_cloud", "[", ":", ",", "1", "]", "=", "-", "1", "*", "point_cloud", "[", ":", ",", "1", "]", "\n", "target_bboxes", "[", ":", ",", "1", "]", "=", "-", "1", "*", "target_bboxes", "[", ":", ",", "1", "]", "\n", "\n", "# Rotation along up-axis/Z-axis", "\n", "", "rot_angle", "=", "(", "np", ".", "random", ".", "random", "(", ")", "*", "np", ".", "pi", "/", "18", ")", "-", "np", ".", "pi", "/", "36", "# -5 ~ +5 degree", "\n", "rot_mat", "=", "pc_util", ".", "rotz", "(", "rot_angle", ")", "\n", "point_cloud", "[", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "point_cloud", "[", ":", ",", "0", ":", "3", "]", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "target_bboxes", "=", "rotate_aligned_boxes", "(", "target_bboxes", ",", "rot_mat", ")", "\n", "\n", "# compute votes *AFTER* augmentation", "\n", "# generate votes", "\n", "# Note: since there's no map between bbox instance labels and", "\n", "# pc instance_labels (it had been filtered ", "\n", "# in the data preparation step) we'll compute the instance bbox", "\n", "# from the points sharing the same instance label. ", "\n", "", "point_votes", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_points", ",", "3", "]", ")", "\n", "point_votes_mask", "=", "np", ".", "zeros", "(", "self", ".", "num_points", ")", "\n", "for", "i_instance", "in", "np", ".", "unique", "(", "instance_labels", ")", ":", "\n", "# find all points belong to that instance", "\n", "            ", "ind", "=", "np", ".", "where", "(", "instance_labels", "==", "i_instance", ")", "[", "0", "]", "\n", "# find the semantic label            ", "\n", "if", "semantic_labels", "[", "ind", "[", "0", "]", "]", "in", "DC", ".", "nyu40ids", ":", "\n", "                ", "x", "=", "point_cloud", "[", "ind", ",", ":", "3", "]", "\n", "center", "=", "0.5", "*", "(", "x", ".", "min", "(", "0", ")", "+", "x", ".", "max", "(", "0", ")", ")", "\n", "point_votes", "[", "ind", ",", ":", "]", "=", "center", "-", "x", "\n", "point_votes_mask", "[", "ind", "]", "=", "1.0", "\n", "", "", "point_votes", "=", "np", ".", "tile", "(", "point_votes", ",", "(", "1", ",", "3", ")", ")", "# make 3 votes identical ", "\n", "\n", "class_ind", "=", "[", "np", ".", "where", "(", "DC", ".", "nyu40ids", "==", "x", ")", "[", "0", "]", "[", "0", "]", "for", "x", "in", "instance_bboxes", "[", ":", ",", "-", "1", "]", "]", "\n", "# NOTE: set size class as semantic class. Consider use size2class.", "\n", "size_classes", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "=", "class_ind", "\n", "size_residuals", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "target_bboxes", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", ",", "3", ":", "6", "]", "-", "DC", ".", "mean_size_arr", "[", "class_ind", ",", ":", "]", "\n", "\n", "ret_dict", "=", "{", "}", "\n", "ret_dict", "[", "'point_clouds'", "]", "=", "point_cloud", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'center_label'", "]", "=", "target_bboxes", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", "0", ":", "3", "]", "\n", "ret_dict", "[", "'heading_class_label'", "]", "=", "angle_classes", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ret_dict", "[", "'heading_residual_label'", "]", "=", "angle_residuals", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'size_class_label'", "]", "=", "size_classes", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ret_dict", "[", "'size_residual_label'", "]", "=", "size_residuals", ".", "astype", "(", "np", ".", "float32", ")", "\n", "target_bboxes_semcls", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ")", ")", "\n", "target_bboxes_semcls", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "=", "[", "DC", ".", "nyu40id2class", "[", "x", "]", "for", "x", "in", "instance_bboxes", "[", ":", ",", "-", "1", "]", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "]", "\n", "ret_dict", "[", "'sem_cls_label'", "]", "=", "target_bboxes_semcls", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ret_dict", "[", "'box_label_mask'", "]", "=", "target_bboxes_mask", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'vote_label'", "]", "=", "point_votes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'vote_label_mask'", "]", "=", "point_votes_mask", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ret_dict", "[", "'scan_idx'", "]", "=", "np", ".", "array", "(", "idx", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ret_dict", "[", "'pcl_color'", "]", "=", "pcl_color", "\n", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.scannet_detection_dataset.viz_votes": [[176, 185], ["pc_util.write_ply", "pc_util.write_ply"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_ply"], ["", "", "def", "viz_votes", "(", "pc", ",", "point_votes", ",", "point_votes_mask", ",", "name", "=", "''", ")", ":", "\n", "    ", "\"\"\" Visualize point votes and point votes mask labels\n    pc: (N,3 or 6), point_votes: (N,9), point_votes_mask: (N,)\n    \"\"\"", "\n", "inds", "=", "(", "point_votes_mask", "==", "1", ")", "\n", "pc_obj", "=", "pc", "[", "inds", ",", "0", ":", "3", "]", "\n", "pc_obj_voted1", "=", "pc_obj", "+", "point_votes", "[", "inds", ",", "0", ":", "3", "]", "\n", "pc_util", ".", "write_ply", "(", "pc_obj", ",", "'pc_obj{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "pc_util", ".", "write_ply", "(", "pc_obj_voted1", ",", "'pc_obj_voted1{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.scannet_detection_dataset.viz_obb": [[186, 211], ["range", "pc_util.write_oriented_bbox", "pc_util.write_ply", "numpy.zeros", "print", "oriented_boxes.append"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_oriented_bbox", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_ply"], ["", "def", "viz_obb", "(", "pc", ",", "label", ",", "mask", ",", "angle_classes", ",", "angle_residuals", ",", "\n", "size_classes", ",", "size_residuals", ",", "name", "=", "''", ")", ":", "\n", "    ", "\"\"\" Visualize oriented bounding box ground truth\n    pc: (N,3)\n    label: (K,3)  K == MAX_NUM_OBJ\n    mask: (K,)\n    angle_classes: (K,)\n    angle_residuals: (K,)\n    size_classes: (K,)\n    size_residuals: (K,3)\n    \"\"\"", "\n", "oriented_boxes", "=", "[", "]", "\n", "K", "=", "label", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "if", "mask", "[", "i", "]", "==", "0", ":", "continue", "\n", "obb", "=", "np", ".", "zeros", "(", "7", ")", "\n", "obb", "[", "0", ":", "3", "]", "=", "label", "[", "i", ",", "0", ":", "3", "]", "\n", "heading_angle", "=", "0", "# hard code to 0", "\n", "box_size", "=", "DC", ".", "mean_size_arr", "[", "size_classes", "[", "i", "]", ",", ":", "]", "+", "size_residuals", "[", "i", ",", ":", "]", "\n", "obb", "[", "3", ":", "6", "]", "=", "box_size", "\n", "obb", "[", "6", "]", "=", "-", "1", "*", "heading_angle", "\n", "print", "(", "obb", ")", "\n", "oriented_boxes", ".", "append", "(", "obb", ")", "\n", "", "pc_util", ".", "write_oriented_bbox", "(", "oriented_boxes", ",", "'gt_obbs{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "pc_util", ".", "write_ply", "(", "label", "[", "mask", "==", "1", ",", ":", "]", ",", "'gt_centroids{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.backbone_module.Pointnet2Backbone.__init__": [[32, 73], ["torch.Module.__init__", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetFPModule", "pointnet2_modules.PointnetFPModule"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "self", ",", "input_feature_dim", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sa1", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "2048", ",", "\n", "radius", "=", "0.2", ",", "\n", "nsample", "=", "64", ",", "\n", "mlp", "=", "[", "input_feature_dim", ",", "64", ",", "64", ",", "128", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa2", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "1024", ",", "\n", "radius", "=", "0.4", ",", "\n", "nsample", "=", "32", ",", "\n", "mlp", "=", "[", "128", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa3", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "512", ",", "\n", "radius", "=", "0.8", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "256", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa4", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "256", ",", "\n", "radius", "=", "1.2", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "256", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "fp1", "=", "PointnetFPModule", "(", "mlp", "=", "[", "256", "+", "256", ",", "256", ",", "256", "]", ")", "\n", "self", ".", "fp2", "=", "PointnetFPModule", "(", "mlp", "=", "[", "256", "+", "256", ",", "256", ",", "256", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.backbone_module.Pointnet2Backbone._break_up_pc": [[74, 82], ["pc[].contiguous", "pc[].transpose().contiguous", "pc.size", "pc[].transpose"], "methods", ["None"], ["", "def", "_break_up_pc", "(", "self", ",", "pc", ")", ":", "\n", "        ", "xyz", "=", "pc", "[", "...", ",", "0", ":", "3", "]", ".", "contiguous", "(", ")", "\n", "features", "=", "(", "\n", "pc", "[", "...", ",", "3", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "pc", ".", "size", "(", "-", "1", ")", ">", "3", "else", "None", "\n", ")", "\n", "\n", "return", "xyz", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.backbone_module.Pointnet2Backbone.forward": [[83, 134], ["backbone_module.Pointnet2Backbone._break_up_pc", "backbone_module.Pointnet2Backbone.sa1", "backbone_module.Pointnet2Backbone.sa2", "backbone_module.Pointnet2Backbone.sa3", "backbone_module.Pointnet2Backbone.sa4", "backbone_module.Pointnet2Backbone.fp1", "backbone_module.Pointnet2Backbone.fp2"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.backbone_module.Pointnet2Backbone._break_up_pc"], ["", "def", "forward", "(", "self", ",", "pointcloud", ":", "torch", ".", "cuda", ".", "FloatTensor", ",", "end_points", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n            Forward pass of the network\n\n            Parameters\n            ----------\n            pointcloud: Variable(torch.cuda.FloatTensor)\n                (B, N, 3 + input_feature_dim) tensor\n                Point cloud to run predicts on\n                Each point in the point-cloud MUST\n                be formated as (x, y, z, features...)\n\n            Returns\n            ----------\n            end_points: {XXX_xyz, XXX_features, XXX_inds}\n                XXX_xyz: float32 Tensor of shape (B,K,3)\n                XXX_features: float32 Tensor of shape (B,K,D)\n                XXX-inds: int64 Tensor of shape (B,K) values in [0,N-1]\n        \"\"\"", "\n", "if", "not", "end_points", ":", "end_points", "=", "{", "}", "\n", "batch_size", "=", "pointcloud", ".", "shape", "[", "0", "]", "\n", "\n", "xyz", ",", "features", "=", "self", ".", "_break_up_pc", "(", "pointcloud", ")", "\n", "\n", "# --------- 4 SET ABSTRACTION LAYERS ---------", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa1", "(", "xyz", ",", "features", ")", "\n", "end_points", "[", "'sa1_inds'", "]", "=", "fps_inds", "\n", "end_points", "[", "'sa1_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa1_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa2", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,1023", "\n", "end_points", "[", "'sa2_inds'", "]", "=", "fps_inds", "\n", "end_points", "[", "'sa2_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa2_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa3", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,511", "\n", "end_points", "[", "'sa3_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa3_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa4", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,255", "\n", "end_points", "[", "'sa4_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa4_features'", "]", "=", "features", "\n", "\n", "# --------- 2 FEATURE UPSAMPLING LAYERS --------", "\n", "features", "=", "self", ".", "fp1", "(", "end_points", "[", "'sa3_xyz'", "]", ",", "end_points", "[", "'sa4_xyz'", "]", ",", "end_points", "[", "'sa3_features'", "]", ",", "end_points", "[", "'sa4_features'", "]", ")", "\n", "features", "=", "self", ".", "fp2", "(", "end_points", "[", "'sa2_xyz'", "]", ",", "end_points", "[", "'sa3_xyz'", "]", ",", "end_points", "[", "'sa2_features'", "]", ",", "features", ")", "\n", "end_points", "[", "'fp2_features'", "]", "=", "features", "\n", "end_points", "[", "'fp2_xyz'", "]", "=", "end_points", "[", "'sa2_xyz'", "]", "\n", "num_seed", "=", "end_points", "[", "'fp2_xyz'", "]", ".", "shape", "[", "1", "]", "\n", "end_points", "[", "'fp2_inds'", "]", "=", "end_points", "[", "'sa1_inds'", "]", "[", ":", ",", "0", ":", "num_seed", "]", "# indices among the entire input point clouds", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.voting_module.VotingModule.__init__": [[18, 39], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "CGNL.SpatialCGNL", "int"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vote_factor", ",", "seed_feature_dim", ")", ":", "\n", "        ", "\"\"\" Votes generation from seed point features.\n\n        Args:\n            vote_facotr: int\n                number of votes generated from each seed point\n            seed_feature_dim: int\n                number of channels of seed point features\n            vote_feature_dim: int\n                number of channels of vote features\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vote_factor", "=", "vote_factor", "\n", "self", ".", "in_dim", "=", "seed_feature_dim", "\n", "self", ".", "out_dim", "=", "self", ".", "in_dim", "# due to residual feature, in_dim has to be == out_dim", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "self", ".", "in_dim", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "self", ".", "in_dim", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "(", "3", "+", "self", ".", "out_dim", ")", "*", "self", ".", "vote_factor", ",", "1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_dim", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_dim", ")", "\n", "self", ".", "sa1", "=", "SpatialCGNL", "(", "self", ".", "in_dim", ",", "int", "(", "self", ".", "in_dim", "/", "2", ")", ",", "use_scale", "=", "False", ",", "groups", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.voting_module.VotingModule.forward": [[41, 75], ["seed_features.view", "voting_module.VotingModule.sa1", "net.transpose().view.transpose().view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "voting_module.VotingModule.conv3", "net.transpose().view.transpose().view.transpose().view", "vote_xyz.contiguous().view.contiguous().view.contiguous().view", "vote_features.transpose().contiguous.transpose().contiguous.contiguous().view", "vote_features.transpose().contiguous.transpose().contiguous.transpose().contiguous", "voting_module.VotingModule.bn1", "voting_module.VotingModule.bn2", "seed_xyz.unsqueeze", "seed_features.transpose().unsqueeze", "voting_module.VotingModule.conv1", "voting_module.VotingModule.conv2", "net.transpose().view.transpose().view.transpose", "vote_xyz.contiguous().view.contiguous().view.contiguous", "vote_features.transpose().contiguous.transpose().contiguous.contiguous", "vote_features.transpose().contiguous.transpose().contiguous.transpose", "seed_features.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "seed_xyz", ",", "seed_features", ")", ":", "\n", "        ", "\"\"\" Forward pass.\n\n        Arguments:\n            seed_xyz: (batch_size, num_seed, 3) Pytorch tensor\n            seed_features: (batch_size, feature_dim, num_seed) Pytorch tensor\n        Returns:\n            vote_xyz: (batch_size, num_seed*vote_factor, 3)\n            vote_features: (batch_size, vote_feature_dim, num_seed*vote_factor)\n        \"\"\"", "\n", "batch_size", "=", "seed_xyz", ".", "shape", "[", "0", "]", "\n", "num_seed", "=", "seed_xyz", ".", "shape", "[", "1", "]", "\n", "num_vote", "=", "num_seed", "*", "self", ".", "vote_factor", "\n", "\n", "\n", "feature_dim", "=", "seed_features", ".", "shape", "[", "1", "]", "\n", "net", "=", "seed_features", ".", "view", "(", "batch_size", ",", "feature_dim", ",", "32", ",", "32", ")", "\n", "net", "=", "self", ".", "sa1", "(", "net", ")", "\n", "net", "=", "net", ".", "view", "(", "batch_size", ",", "feature_dim", ",", "num_seed", ")", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "net", ")", ")", ")", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "net", ")", ")", ")", "\n", "net", "=", "self", ".", "conv3", "(", "net", ")", "# (batch_size, (3+out_dim)*vote_factor, num_seed)", "\n", "\n", "net", "=", "net", ".", "transpose", "(", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "num_seed", ",", "self", ".", "vote_factor", ",", "3", "+", "self", ".", "out_dim", ")", "\n", "offset", "=", "net", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "vote_xyz", "=", "seed_xyz", ".", "unsqueeze", "(", "2", ")", "+", "offset", "\n", "vote_xyz", "=", "vote_xyz", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "num_vote", ",", "3", ")", "\n", "\n", "residual_features", "=", "net", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "# (batch_size, num_seed, vote_factor, out_dim)", "\n", "vote_features", "=", "seed_features", ".", "transpose", "(", "2", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", "+", "residual_features", "\n", "vote_features", "=", "vote_features", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "num_vote", ",", "self", ".", "out_dim", ")", "\n", "vote_features", "=", "vote_features", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "vote_xyz", ",", "vote_features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.mlcvnet.MLCVNet.__init__": [[45, 68], ["torch.Module.__init__", "backbone_module.Pointnet2Backbone", "voting_module.VotingModule", "proposal_module.ProposalModule"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "0", ",", "num_proposal", "=", "128", ",", "vote_factor", "=", "1", ",", "sampling", "=", "'vote_fps'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "assert", "(", "mean_size_arr", ".", "shape", "[", "0", "]", "==", "self", ".", "num_size_cluster", ")", "\n", "self", ".", "input_feature_dim", "=", "input_feature_dim", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "vote_factor", "=", "vote_factor", "\n", "self", ".", "sampling", "=", "sampling", "\n", "\n", "# Backbone point feature learning", "\n", "self", ".", "backbone_net", "=", "Pointnet2Backbone", "(", "input_feature_dim", "=", "self", ".", "input_feature_dim", ")", "\n", "\n", "# Hough voting", "\n", "self", ".", "vgen", "=", "VotingModule", "(", "self", ".", "vote_factor", ",", "256", ")", "\n", "\n", "# Vote aggregation and detection", "\n", "self", ".", "pnet", "=", "ProposalModule", "(", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "sampling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.mlcvnet.MLCVNet.forward": [[69, 105], ["mlcvnet.MLCVNet.backbone_net", "mlcvnet.MLCVNet.vgen", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "features.div.div.div", "mlcvnet.MLCVNet.pnet", "torch.norm.unsqueeze", "torch.norm.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Forward pass of the network\n\n        Args:\n            inputs: dict\n                {point_clouds}\n\n                point_clouds: Variable(torch.cuda.FloatTensor)\n                    (B, N, 3 + input_channels) tensor\n                    Point cloud to run predicts on\n                    Each point in the point-cloud MUST\n                    be formated as (x, y, z, features...)\n        Returns:\n            end_points: dict\n        \"\"\"", "\n", "end_points", "=", "{", "}", "\n", "batch_size", "=", "inputs", "[", "'point_clouds'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "end_points", "=", "self", ".", "backbone_net", "(", "inputs", "[", "'point_clouds'", "]", ",", "end_points", ")", "\n", "\n", "# --------- HOUGH VOTING ---------", "\n", "xyz", "=", "end_points", "[", "'fp2_xyz'", "]", "\n", "features", "=", "end_points", "[", "'fp2_features'", "]", "\n", "end_points", "[", "'seed_inds'", "]", "=", "end_points", "[", "'fp2_inds'", "]", "\n", "end_points", "[", "'seed_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'seed_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", "=", "self", ".", "vgen", "(", "xyz", ",", "features", ")", "\n", "features_norm", "=", "torch", ".", "norm", "(", "features", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "features", "=", "features", ".", "div", "(", "features_norm", ".", "unsqueeze", "(", "1", ")", ")", "\n", "end_points", "[", "'vote_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'vote_features'", "]", "=", "features", "\n", "\n", "end_points", "=", "self", ".", "pnet", "(", "xyz", ",", "features", ",", "end_points", ")", "\n", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.APCalculator.__init__": [[240, 250], ["ap_helper.APCalculator.reset"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.APCalculator.reset"], ["def", "__init__", "(", "self", ",", "ap_iou_thresh", "=", "0.25", ",", "class2type_map", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            ap_iou_thresh: float between 0 and 1.0\n                IoU threshold to judge whether a prediction is positive.\n            class2type_map: [optional] dict {class_int:class_name}\n        \"\"\"", "\n", "self", ".", "ap_iou_thresh", "=", "ap_iou_thresh", "\n", "self", ".", "class2type_map", "=", "class2type_map", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.APCalculator.step": [[251, 266], ["len", "range", "len"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", ":", "\n", "        ", "\"\"\" Accumulate one batch of prediction and groundtruth.\n        \n        Args:\n            batch_pred_map_cls: a list of lists [[(pred_cls, pred_box_params, score),...],...]\n            batch_gt_map_cls: a list of lists [[(gt_cls, gt_box_params),...],...]\n                should have the same length with batch_pred_map_cls (batch_size)\n        \"\"\"", "\n", "\n", "bsize", "=", "len", "(", "batch_pred_map_cls", ")", "\n", "assert", "(", "bsize", "==", "len", "(", "batch_gt_map_cls", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "self", ".", "gt_map_cls", "[", "self", ".", "scan_cnt", "]", "=", "batch_gt_map_cls", "[", "i", "]", "\n", "self", ".", "pred_map_cls", "[", "self", ".", "scan_cnt", "]", "=", "batch_pred_map_cls", "[", "i", "]", "\n", "self", ".", "scan_cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.APCalculator.compute_metrics": [[267, 287], ["eval_det.eval_det_multiprocessing", "sorted", "numpy.mean", "sorted", "numpy.mean", "ap.keys", "list", "ap.keys", "str", "ap.values", "str", "rec_list.append", "rec_list.append"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.eval_det.eval_det_multiprocessing"], ["", "", "def", "compute_metrics", "(", "self", ")", ":", "\n", "        ", "\"\"\" Use accumulated predictions and groundtruths to compute Average Precision.\n        \"\"\"", "\n", "rec", ",", "prec", ",", "ap", "=", "eval_det_multiprocessing", "(", "self", ".", "pred_map_cls", ",", "self", ".", "gt_map_cls", ",", "ovthresh", "=", "self", ".", "ap_iou_thresh", ",", "get_iou_func", "=", "get_iou_obb", ")", "\n", "ret_dict", "=", "{", "}", "\n", "for", "key", "in", "sorted", "(", "ap", ".", "keys", "(", ")", ")", ":", "\n", "            ", "clsname", "=", "self", ".", "class2type_map", "[", "key", "]", "if", "self", ".", "class2type_map", "else", "str", "(", "key", ")", "\n", "ret_dict", "[", "'%s Average Precision'", "%", "(", "clsname", ")", "]", "=", "ap", "[", "key", "]", "\n", "", "ret_dict", "[", "'mAP'", "]", "=", "np", ".", "mean", "(", "list", "(", "ap", ".", "values", "(", ")", ")", ")", "\n", "rec_list", "=", "[", "]", "\n", "for", "key", "in", "sorted", "(", "ap", ".", "keys", "(", ")", ")", ":", "\n", "            ", "clsname", "=", "self", ".", "class2type_map", "[", "key", "]", "if", "self", ".", "class2type_map", "else", "str", "(", "key", ")", "\n", "try", ":", "\n", "                ", "ret_dict", "[", "'%s Recall'", "%", "(", "clsname", ")", "]", "=", "rec", "[", "key", "]", "[", "-", "1", "]", "\n", "rec_list", ".", "append", "(", "rec", "[", "key", "]", "[", "-", "1", "]", ")", "\n", "", "except", ":", "\n", "                ", "ret_dict", "[", "'%s Recall'", "%", "(", "clsname", ")", "]", "=", "0", "\n", "rec_list", ".", "append", "(", "0", ")", "\n", "", "", "ret_dict", "[", "'AR'", "]", "=", "np", ".", "mean", "(", "rec_list", ")", "\n", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.APCalculator.reset": [[288, 292], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "gt_map_cls", "=", "{", "}", "# {scan_id: [(classname, bbox)]}", "\n", "self", ".", "pred_map_cls", "=", "{", "}", "# {scan_id: [(classname, bbox, score)]}", "\n", "self", ".", "scan_cnt", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.in_hull": [[22, 27], ["isinstance", "Delaunay", "Delaunay.find_simplex"], "function", ["None"], ["def", "in_hull", "(", "p", ",", "hull", ")", ":", "\n", "    ", "from", "scipy", ".", "spatial", "import", "Delaunay", "\n", "if", "not", "isinstance", "(", "hull", ",", "Delaunay", ")", ":", "\n", "        ", "hull", "=", "Delaunay", "(", "hull", ")", "\n", "", "return", "hull", ".", "find_simplex", "(", "p", ")", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.extract_pc_in_box3d": [[28, 32], ["ap_helper.in_hull"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.in_hull"], ["", "def", "extract_pc_in_box3d", "(", "pc", ",", "box3d", ")", ":", "\n", "    ", "''' pc: (N,3), box3d: (8,3) '''", "\n", "box3d_roi_inds", "=", "in_hull", "(", "pc", "[", ":", ",", "0", ":", "3", "]", ",", "box3d", ")", "\n", "return", "pc", "[", "box3d_roi_inds", ",", ":", "]", ",", "box3d_roi_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.flip_axis_to_camera": [[33, 41], ["numpy.copy"], "function", ["None"], ["", "def", "flip_axis_to_camera", "(", "pc", ")", ":", "\n", "    ", "''' Flip X-right,Y-forward,Z-up to X-right,Y-down,Z-forward\n    Input and output are both (N,3) array\n    '''", "\n", "pc2", "=", "np", ".", "copy", "(", "pc", ")", "\n", "pc2", "[", "...", ",", "[", "0", ",", "1", ",", "2", "]", "]", "=", "pc2", "[", "...", ",", "[", "0", ",", "2", ",", "1", "]", "]", "# cam X,Y,Z = depth X,-Z,Y", "\n", "pc2", "[", "...", ",", "1", "]", "*=", "-", "1", "\n", "return", "pc2", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.flip_axis_to_depth": [[42, 47], ["numpy.copy"], "function", ["None"], ["", "def", "flip_axis_to_depth", "(", "pc", ")", ":", "\n", "    ", "pc2", "=", "np", ".", "copy", "(", "pc", ")", "\n", "pc2", "[", "...", ",", "[", "0", ",", "1", ",", "2", "]", "]", "=", "pc2", "[", "...", ",", "[", "0", ",", "2", ",", "1", "]", "]", "# depth X,Y,Z = cam X,Z,-Y", "\n", "pc2", "[", "...", ",", "2", "]", "*=", "-", "1", "\n", "return", "pc2", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.softmax": [[48, 54], ["numpy.exp", "numpy.sum", "numpy.max", "len", "len"], "function", ["None"], ["", "def", "softmax", "(", "x", ")", ":", "\n", "    ", "''' Numpy function for softmax'''", "\n", "shape", "=", "x", ".", "shape", "\n", "probs", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ",", "axis", "=", "len", "(", "shape", ")", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "probs", "/=", "np", ".", "sum", "(", "probs", ",", "axis", "=", "len", "(", "shape", ")", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.parse_predictions": [[55, 193], ["torch.argmax", "torch.gather", "torch.gather.squeeze_", "torch.argmax", "torch.gather", "torch.gather.squeeze_", "torch.argmax", "ap_helper.softmax", "numpy.max", "numpy.zeros", "ap_helper.flip_axis_to_camera", "range", "numpy.ones", "end_points[].detach().cpu().numpy", "range", "torch.argmax.unsqueeze", "torch.argmax.unsqueeze().unsqueeze().repeat", "end_points[].detach().cpu().numpy", "pred_center.detach().cpu().numpy", "range", "range", "ap_helper.softmax", "numpy.zeros", "range", "config_dict[].class2angle", "config_dict[].class2size", "box_util.get_3d_box", "end_points[].cpu().numpy", "range", "end_points[].detach().cpu", "numpy.zeros", "range", "nms.nms_2d_faster", "numpy.zeros", "range", "range", "batch_pred_map_cls.append", "batch_pred_map_cls.append", "torch.argmax.unsqueeze().unsqueeze", "end_points[].detach().cpu", "pred_center.detach().cpu", "pred_heading_class[].detach().cpu().numpy", "pred_heading_residual[].detach().cpu().numpy", "int", "pred_size_residual[].detach().cpu().numpy", "ap_helper.flip_axis_to_depth", "ap_helper.extract_pc_in_box3d", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.where", "len", "numpy.zeros", "range", "nms.nms_3d_faster", "numpy.zeros", "range", "pred_size_class[].detach().cpu().numpy", "end_points[].cpu", "len", "end_points[].detach", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.where", "len", "numpy.zeros", "range", "nms.nms_3d_faster_samecls", "torch.argmax.unsqueeze", "end_points[].detach", "pred_center.detach", "pred_heading_class[].detach().cpu", "pred_heading_residual[].detach().cpu", "pred_size_residual[].detach().cpu", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.where", "len", "range", "pred_sem_cls[].item", "range", "pred_size_class[].detach().cpu", "pred_heading_class[].detach", "pred_heading_residual[].detach", "pred_size_residual[].detach", "pred_size_class[].detach"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.dump_helper.softmax", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.flip_axis_to_camera", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.dump_helper.softmax", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.class2angle", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.class2size", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.get_3d_box", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nms.nms_2d_faster", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.flip_axis_to_depth", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.extract_pc_in_box3d", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nms.nms_3d_faster", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nms.nms_3d_faster_samecls"], ["", "def", "parse_predictions", "(", "end_points", ",", "config_dict", ")", ":", "\n", "    ", "\"\"\" Parse predictions to OBB parameters and suppress overlapping boxes\n    \n    Args:\n        end_points: dict\n            {point_clouds, center, heading_scores, heading_residuals,\n            size_scores, size_residuals, sem_cls_scores}\n        config_dict: dict\n            {dataset_config, remove_empty_box, use_3d_nms, nms_iou,\n            use_old_type_nms, conf_thresh, per_class_proposal}\n\n    Returns:\n        batch_pred_map_cls: a list of len == batch size (BS)\n            [pred_list_i], i = 0, 1, ..., BS-1\n            where pred_list_i = [(pred_sem_cls, box_params, box_score)_j]\n            where j = 0, ..., num of valid detections - 1 from sample input i\n    \"\"\"", "\n", "pred_center", "=", "end_points", "[", "'center'", "]", "# B,num_proposal,3", "\n", "pred_heading_class", "=", "torch", ".", "argmax", "(", "end_points", "[", "'heading_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "torch", ".", "gather", "(", "end_points", "[", "'heading_residuals'", "]", ",", "2", ",", "\n", "pred_heading_class", ".", "unsqueeze", "(", "-", "1", ")", ")", "# B,num_proposal,1", "\n", "pred_heading_residual", ".", "squeeze_", "(", "2", ")", "\n", "pred_size_class", "=", "torch", ".", "argmax", "(", "end_points", "[", "'size_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_size_residual", "=", "torch", ".", "gather", "(", "end_points", "[", "'size_residuals'", "]", ",", "2", ",", "\n", "pred_size_class", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "# B,num_proposal,1,3", "\n", "pred_size_residual", ".", "squeeze_", "(", "2", ")", "\n", "pred_sem_cls", "=", "torch", ".", "argmax", "(", "end_points", "[", "'sem_cls_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "sem_cls_probs", "=", "softmax", "(", "end_points", "[", "'sem_cls_scores'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "# B,num_proposal,10", "\n", "pred_sem_cls_prob", "=", "np", ".", "max", "(", "sem_cls_probs", ",", "-", "1", ")", "# B,num_proposal", "\n", "\n", "num_proposal", "=", "pred_center", ".", "shape", "[", "1", "]", "\n", "# Since we operate in upright_depth coord for points, while util functions", "\n", "# assume upright_camera coord.", "\n", "bsize", "=", "pred_center", ".", "shape", "[", "0", "]", "\n", "pred_corners_3d_upright_camera", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "num_proposal", ",", "8", ",", "3", ")", ")", "\n", "pred_center_upright_camera", "=", "flip_axis_to_camera", "(", "pred_center", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_proposal", ")", ":", "\n", "            ", "heading_angle", "=", "config_dict", "[", "'dataset_config'", "]", ".", "class2angle", "(", "pred_heading_class", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "pred_heading_residual", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "box_size", "=", "config_dict", "[", "'dataset_config'", "]", ".", "class2size", "(", "int", "(", "pred_size_class", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "pred_size_residual", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "corners_3d_upright_camera", "=", "get_3d_box", "(", "box_size", ",", "heading_angle", ",", "pred_center_upright_camera", "[", "i", ",", "j", ",", ":", "]", ")", "\n", "pred_corners_3d_upright_camera", "[", "i", ",", "j", "]", "=", "corners_3d_upright_camera", "\n", "\n", "", "", "K", "=", "pred_center", ".", "shape", "[", "1", "]", "# K==num_proposal", "\n", "nonempty_box_mask", "=", "np", ".", "ones", "(", "(", "bsize", ",", "K", ")", ")", "\n", "\n", "if", "config_dict", "[", "'remove_empty_box'", "]", ":", "\n", "# -------------------------------------", "\n", "# Remove predicted boxes without any point within them..", "\n", "        ", "batch_pc", "=", "end_points", "[", "'point_clouds'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", "0", ":", "3", "]", "# B,N,3", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "pc", "=", "batch_pc", "[", "i", ",", ":", ",", ":", "]", "# (N,3)", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "box3d", "=", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", ":", "]", "# (8,3)", "\n", "box3d", "=", "flip_axis_to_depth", "(", "box3d", ")", "\n", "pc_in_box", ",", "inds", "=", "extract_pc_in_box3d", "(", "pc", ",", "box3d", ")", "\n", "if", "len", "(", "pc_in_box", ")", "<", "5", ":", "\n", "                    ", "nonempty_box_mask", "[", "i", ",", "j", "]", "=", "0", "\n", "# -------------------------------------", "\n", "\n", "", "", "", "", "obj_logits", "=", "end_points", "[", "'objectness_scores'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "obj_prob", "=", "softmax", "(", "obj_logits", ")", "[", ":", ",", ":", ",", "1", "]", "# (B,K)", "\n", "if", "not", "config_dict", "[", "'use_3d_nms'", "]", ":", "\n", "# ---------- NMS input: pred_with_prob in (B,K,7) -----------", "\n", "        ", "pred_mask", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "K", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "boxes_2d_with_prob", "=", "np", ".", "zeros", "(", "(", "K", ",", "5", ")", ")", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "boxes_2d_with_prob", "[", "j", ",", "0", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_2d_with_prob", "[", "j", ",", "2", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_2d_with_prob", "[", "j", ",", "1", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_2d_with_prob", "[", "j", ",", "3", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_2d_with_prob", "[", "j", ",", "4", "]", "=", "obj_prob", "[", "i", ",", "j", "]", "\n", "", "nonempty_box_inds", "=", "np", ".", "where", "(", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ")", "[", "0", "]", "\n", "pick", "=", "nms_2d_faster", "(", "boxes_2d_with_prob", "[", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "config_dict", "[", "'nms_iou'", "]", ",", "config_dict", "[", "'use_old_type_nms'", "]", ")", "\n", "assert", "(", "len", "(", "pick", ")", ">", "0", ")", "\n", "pred_mask", "[", "i", ",", "nonempty_box_inds", "[", "pick", "]", "]", "=", "1", "\n", "", "end_points", "[", "'pred_mask'", "]", "=", "pred_mask", "\n", "# ---------- NMS output: pred_mask in (B,K) -----------", "\n", "", "elif", "config_dict", "[", "'use_3d_nms'", "]", "and", "(", "not", "config_dict", "[", "'cls_nms'", "]", ")", ":", "\n", "# ---------- NMS input: pred_with_prob in (B,K,7) -----------", "\n", "        ", "pred_mask", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "K", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "boxes_3d_with_prob", "=", "np", ".", "zeros", "(", "(", "K", ",", "7", ")", ")", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "boxes_3d_with_prob", "[", "j", ",", "0", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "1", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "1", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "2", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "3", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "4", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "1", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "5", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "6", "]", "=", "obj_prob", "[", "i", ",", "j", "]", "\n", "", "nonempty_box_inds", "=", "np", ".", "where", "(", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ")", "[", "0", "]", "\n", "pick", "=", "nms_3d_faster", "(", "boxes_3d_with_prob", "[", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "config_dict", "[", "'nms_iou'", "]", ",", "config_dict", "[", "'use_old_type_nms'", "]", ")", "\n", "assert", "(", "len", "(", "pick", ")", ">", "0", ")", "\n", "pred_mask", "[", "i", ",", "nonempty_box_inds", "[", "pick", "]", "]", "=", "1", "\n", "", "end_points", "[", "'pred_mask'", "]", "=", "pred_mask", "\n", "# ---------- NMS output: pred_mask in (B,K) -----------", "\n", "", "elif", "config_dict", "[", "'use_3d_nms'", "]", "and", "config_dict", "[", "'cls_nms'", "]", ":", "\n", "# ---------- NMS input: pred_with_prob in (B,K,8) -----------", "\n", "        ", "pred_mask", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "K", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "boxes_3d_with_prob", "=", "np", ".", "zeros", "(", "(", "K", ",", "8", ")", ")", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "boxes_3d_with_prob", "[", "j", ",", "0", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "1", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "1", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "2", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "3", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "4", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "1", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "5", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "6", "]", "=", "obj_prob", "[", "i", ",", "j", "]", "\n", "boxes_3d_with_prob", "[", "j", ",", "7", "]", "=", "pred_sem_cls", "[", "i", ",", "j", "]", "# only suppress if the two boxes are of the same class!!", "\n", "", "nonempty_box_inds", "=", "np", ".", "where", "(", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ")", "[", "0", "]", "\n", "pick", "=", "nms_3d_faster_samecls", "(", "boxes_3d_with_prob", "[", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "config_dict", "[", "'nms_iou'", "]", ",", "config_dict", "[", "'use_old_type_nms'", "]", ")", "\n", "assert", "(", "len", "(", "pick", ")", ">", "0", ")", "\n", "pred_mask", "[", "i", ",", "nonempty_box_inds", "[", "pick", "]", "]", "=", "1", "\n", "", "end_points", "[", "'pred_mask'", "]", "=", "pred_mask", "\n", "# ---------- NMS output: pred_mask in (B,K) -----------", "\n", "\n", "", "batch_pred_map_cls", "=", "[", "]", "# a list (len: batch_size) of list (len: num of predictions per sample) of tuples of pred_cls, pred_box and conf (0-1)", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "        ", "if", "config_dict", "[", "'per_class_proposal'", "]", ":", "\n", "            ", "cur_list", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "config_dict", "[", "'dataset_config'", "]", ".", "num_class", ")", ":", "\n", "                ", "cur_list", "+=", "[", "(", "ii", ",", "pred_corners_3d_upright_camera", "[", "i", ",", "j", "]", ",", "sem_cls_probs", "[", "i", ",", "j", ",", "ii", "]", "*", "obj_prob", "[", "i", ",", "j", "]", ")", "for", "j", "in", "range", "(", "pred_center", ".", "shape", "[", "1", "]", ")", "if", "pred_mask", "[", "i", ",", "j", "]", "==", "1", "and", "obj_prob", "[", "i", ",", "j", "]", ">", "config_dict", "[", "'conf_thresh'", "]", "]", "\n", "", "batch_pred_map_cls", ".", "append", "(", "cur_list", ")", "\n", "", "else", ":", "\n", "            ", "batch_pred_map_cls", ".", "append", "(", "[", "(", "pred_sem_cls", "[", "i", ",", "j", "]", ".", "item", "(", ")", ",", "pred_corners_3d_upright_camera", "[", "i", ",", "j", "]", ",", "obj_prob", "[", "i", ",", "j", "]", ")", "for", "j", "in", "range", "(", "pred_center", ".", "shape", "[", "1", "]", ")", "if", "pred_mask", "[", "i", ",", "j", "]", "==", "1", "and", "obj_prob", "[", "i", ",", "j", "]", ">", "config_dict", "[", "'conf_thresh'", "]", "]", ")", "\n", "", "", "end_points", "[", "'batch_pred_map_cls'", "]", "=", "batch_pred_map_cls", "\n", "\n", "return", "batch_pred_map_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.parse_groundtruths": [[194, 237], ["numpy.zeros", "ap_helper.flip_axis_to_camera", "range", "range", "center_label[].detach().cpu().numpy", "range", "batch_gt_map_cls.append", "config_dict[].class2angle", "config_dict[].class2size", "box_util.get_3d_box", "center_label[].detach().cpu", "heading_class_label[].detach().cpu().numpy", "heading_residual_label[].detach().cpu().numpy", "int", "size_residual_label[].detach().cpu().numpy", "size_class_label[].detach().cpu().numpy", "sem_cls_label[].item", "range", "center_label[].detach", "heading_class_label[].detach().cpu", "heading_residual_label[].detach().cpu", "size_residual_label[].detach().cpu", "size_class_label[].detach().cpu", "heading_class_label[].detach", "heading_residual_label[].detach", "size_residual_label[].detach", "size_class_label[].detach"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.ap_helper.flip_axis_to_camera", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.class2angle", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.class2size", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.box_util.get_3d_box"], ["", "def", "parse_groundtruths", "(", "end_points", ",", "config_dict", ")", ":", "\n", "    ", "\"\"\" Parse groundtruth labels to OBB parameters.\n    \n    Args:\n        end_points: dict\n            {center_label, heading_class_label, heading_residual_label,\n            size_class_label, size_residual_label, sem_cls_label,\n            box_label_mask}\n        config_dict: dict\n            {dataset_config}\n\n    Returns:\n        batch_gt_map_cls: a list  of len == batch_size (BS)\n            [gt_list_i], i = 0, 1, ..., BS-1\n            where gt_list_i = [(gt_sem_cls, gt_box_params)_j]\n            where j = 0, ..., num of objects - 1 at sample input i\n    \"\"\"", "\n", "center_label", "=", "end_points", "[", "'center_label'", "]", "\n", "heading_class_label", "=", "end_points", "[", "'heading_class_label'", "]", "\n", "heading_residual_label", "=", "end_points", "[", "'heading_residual_label'", "]", "\n", "size_class_label", "=", "end_points", "[", "'size_class_label'", "]", "\n", "size_residual_label", "=", "end_points", "[", "'size_residual_label'", "]", "\n", "box_label_mask", "=", "end_points", "[", "'box_label_mask'", "]", "\n", "sem_cls_label", "=", "end_points", "[", "'sem_cls_label'", "]", "\n", "bsize", "=", "center_label", ".", "shape", "[", "0", "]", "\n", "\n", "K2", "=", "center_label", ".", "shape", "[", "1", "]", "# K2==MAX_NUM_OBJ", "\n", "gt_corners_3d_upright_camera", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "K2", ",", "8", ",", "3", ")", ")", "\n", "gt_center_upright_camera", "=", "flip_axis_to_camera", "(", "center_label", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "K2", ")", ":", "\n", "            ", "if", "box_label_mask", "[", "i", ",", "j", "]", "==", "0", ":", "continue", "\n", "heading_angle", "=", "config_dict", "[", "'dataset_config'", "]", ".", "class2angle", "(", "heading_class_label", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "heading_residual_label", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "box_size", "=", "config_dict", "[", "'dataset_config'", "]", ".", "class2size", "(", "int", "(", "size_class_label", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "size_residual_label", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "corners_3d_upright_camera", "=", "get_3d_box", "(", "box_size", ",", "heading_angle", ",", "gt_center_upright_camera", "[", "i", ",", "j", ",", ":", "]", ")", "\n", "gt_corners_3d_upright_camera", "[", "i", ",", "j", "]", "=", "corners_3d_upright_camera", "\n", "\n", "", "", "batch_gt_map_cls", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "        ", "batch_gt_map_cls", ".", "append", "(", "[", "(", "sem_cls_label", "[", "i", ",", "j", "]", ".", "item", "(", ")", ",", "gt_corners_3d_upright_camera", "[", "i", ",", "j", "]", ")", "for", "j", "in", "range", "(", "gt_corners_3d_upright_camera", ".", "shape", "[", "1", "]", ")", "if", "box_label_mask", "[", "i", ",", "j", "]", "==", "1", "]", ")", "\n", "", "end_points", "[", "'batch_gt_map_cls'", "]", "=", "batch_gt_map_cls", "\n", "\n", "return", "batch_gt_map_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.dump_helper.softmax": [[17, 23], ["numpy.exp", "numpy.sum", "numpy.max", "len", "len"], "function", ["None"], ["def", "softmax", "(", "x", ")", ":", "\n", "    ", "''' Numpy function for softmax'''", "\n", "shape", "=", "x", ".", "shape", "\n", "probs", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ",", "axis", "=", "len", "(", "shape", ")", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "probs", "/=", "np", ".", "sum", "(", "probs", ",", "axis", "=", "len", "(", "shape", ")", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.dump_helper.dump_results": [[24, 134], ["end_points[].cpu().numpy", "end_points[].detach().cpu().numpy", "end_points[].detach().cpu().numpy", "end_points[].detach().cpu().numpy", "torch.argmax", "torch.gather", "pred_heading_class.detach().cpu().numpy.detach().cpu().numpy", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy", "torch.argmax", "torch.gather", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy", "range", "end_points[].cpu().numpy", "end_points[].cpu().numpy", "end_points[].cpu().numpy", "end_points[].cpu().numpy", "end_points[].cpu().numpy", "end_points[].cpu().numpy", "end_points[].detach().cpu().numpy", "end_points[].detach().cpu().numpy", "range", "os.path.exists", "os.system", "end_points[].detach().cpu().numpy", "end_points[].detach().cpu().numpy", "end_points[].detach().cpu().numpy", "pred_heading_class.detach().cpu().numpy.unsqueeze", "torch.argmax.unsqueeze().unsqueeze().repeat", "pc_util.write_ply", "pc_util.write_ply_color", "range", "range", "range", "end_points[].cpu", "end_points[].detach().cpu", "end_points[].detach().cpu", "end_points[].detach().cpu", "pred_heading_class.detach().cpu().numpy.detach().cpu", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu", "dump_helper.softmax", "numpy.sum", "range", "end_points[].cpu", "end_points[].cpu", "end_points[].cpu", "end_points[].cpu", "end_points[].cpu", "end_points[].cpu", "end_points[].detach().cpu", "end_points[].detach().cpu", "numpy.sum", "pc_util.write_ply", "numpy.sum", "pc_util.write_ply", "os.path.join", "os.path.join", "config.param2obb", "np.vstack.append", "len", "numpy.vstack", "pc_util.write_oriented_bbox", "open", "open.close", "open", "open.close", "end_points[].detach().cpu", "end_points[].detach().cpu", "end_points[].detach().cpu", "torch.argmax.unsqueeze().unsqueeze", "config.param2obb", "np.vstack.append", "len", "numpy.vstack", "torch.argmax", "pred_sem_cls.detach().cpu().numpy.detach().cpu().numpy", "numpy.unique", "os.path.join", "os.path.join", "tuple", "os.path.join", "os.path.join", "open.write", "open.write", "open.write", "open.write", "os.path.join", "open.write", "open.write", "open.write", "end_points[].detach", "end_points[].detach", "end_points[].detach", "pred_heading_class.detach().cpu().numpy.detach", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze().detach", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze().detach", "tuple", "numpy.logical_and", "numpy.logical_and", "end_points[].detach", "end_points[].detach", "end_points[].detach", "end_points[].detach", "end_points[].detach", "torch.argmax.unsqueeze", "pred_sem_cls.detach().cpu().numpy.detach().cpu", "numpy.sum", "pc_util.write_oriented_bbox", "str", "str", "str", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze", "os.path.join", "str", "str", "pred_sem_cls.detach().cpu().numpy.detach", "list", "list", "t[].flatten", "t[].flatten"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_ply_color", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.dump_helper.softmax", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.param2obb", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_oriented_bbox", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.scannet.model_util_scannet.ScannetDatasetConfig.param2obb", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.pc_util.write_oriented_bbox"], ["", "def", "dump_results", "(", "end_points", ",", "dump_dir", ",", "config", ",", "inference_switch", "=", "False", ")", ":", "\n", "    ", "''' Dump results.\n\n    Args:\n        end_points: dict\n            {..., pred_mask}\n            pred_mask is a binary mask array of size (batch_size, num_proposal) computed by running NMS and empty box removal\n    Returns:\n        None\n    '''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_dir", ")", ":", "\n", "        ", "os", ".", "system", "(", "'mkdir %s'", "%", "(", "dump_dir", ")", ")", "\n", "\n", "# INPUT", "\n", "", "point_clouds", "=", "end_points", "[", "'point_clouds'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "batch_size", "=", "point_clouds", ".", "shape", "[", "0", "]", "\n", "\n", "# NETWORK OUTPUTS", "\n", "seed_xyz", "=", "end_points", "[", "'seed_xyz'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,num_seed,3)", "\n", "if", "'vote_xyz'", "in", "end_points", ":", "\n", "        ", "aggregated_vote_xyz", "=", "end_points", "[", "'aggregated_vote_xyz'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vote_xyz", "=", "end_points", "[", "'vote_xyz'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,num_seed,3)", "\n", "aggregated_vote_xyz", "=", "end_points", "[", "'aggregated_vote_xyz'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "objectness_scores", "=", "end_points", "[", "'objectness_scores'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,K,2)", "\n", "pred_center", "=", "end_points", "[", "'center'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,K,3)", "\n", "pred_heading_class", "=", "torch", ".", "argmax", "(", "end_points", "[", "'heading_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "torch", ".", "gather", "(", "end_points", "[", "'heading_residuals'", "]", ",", "2", ",", "pred_heading_class", ".", "unsqueeze", "(", "-", "1", ")", ")", "# B,num_proposal,1", "\n", "pred_heading_class", "=", "pred_heading_class", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "pred_heading_residual", ".", "squeeze", "(", "2", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,num_proposal", "\n", "pred_size_class", "=", "torch", ".", "argmax", "(", "end_points", "[", "'size_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_size_residual", "=", "torch", ".", "gather", "(", "end_points", "[", "'size_residuals'", "]", ",", "2", ",", "pred_size_class", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "# B,num_proposal,1,3", "\n", "pred_size_residual", "=", "pred_size_residual", ".", "squeeze", "(", "2", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,num_proposal,3", "\n", "\n", "# OTHERS", "\n", "pred_mask", "=", "end_points", "[", "'pred_mask'", "]", "# B,num_proposal", "\n", "idx_beg", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "objectness_prob", "=", "softmax", "(", "objectness_scores", "[", "i", ",", ":", ",", ":", "]", ")", "[", ":", ",", "1", "]", "# (K,)", "\n", "\n", "# Dump predicted bounding boxes", "\n", "if", "np", ".", "sum", "(", "objectness_prob", ">", "DUMP_CONF_THRESH", ")", ">", "0", ":", "\n", "            ", "num_proposal", "=", "pred_center", ".", "shape", "[", "1", "]", "\n", "obbs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_proposal", ")", ":", "\n", "                ", "obb", "=", "config", ".", "param2obb", "(", "pred_center", "[", "i", ",", "j", ",", "0", ":", "3", "]", ",", "pred_heading_class", "[", "i", ",", "j", "]", ",", "pred_heading_residual", "[", "i", ",", "j", "]", ",", "\n", "pred_size_class", "[", "i", ",", "j", "]", ",", "pred_size_residual", "[", "i", ",", "j", "]", ")", "\n", "obbs", ".", "append", "(", "obb", ")", "\n", "", "if", "len", "(", "obbs", ")", ">", "0", ":", "\n", "                ", "obbs", "=", "np", ".", "vstack", "(", "tuple", "(", "obbs", ")", ")", "# (num_proposal, 7)", "\n", "# Output boxes according to their semantic labels", "\n", "pred_sem_cls", "=", "torch", ".", "argmax", "(", "end_points", "[", "'sem_cls_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_sem_cls", "=", "pred_sem_cls", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "l", "in", "np", ".", "unique", "(", "pred_sem_cls", "[", "i", ",", ":", "]", ")", ":", "\n", "                    ", "mask", "=", "np", ".", "logical_and", "(", "objectness_prob", ">", "DUMP_CONF_THRESH", ",", "pred_mask", "[", "i", ",", ":", "]", "==", "1", ")", "\n", "mask", "=", "np", ".", "logical_and", "(", "mask", "==", "True", ",", "pred_sem_cls", "[", "i", ",", ":", "]", "==", "l", ")", "\n", "if", "np", ".", "sum", "(", "mask", ")", ">", "0", ":", "\n", "                        ", "pc_util", ".", "write_oriented_bbox", "(", "obbs", "[", "mask", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%d_pred_confident_nms_bbox.ply'", "%", "(", "l", ")", ")", ")", "\n", "\n", "# Return if it is at inference time. No dumping of groundtruths", "\n", "", "", "", "", "", "if", "inference_switch", ":", "\n", "        ", "return", "\n", "\n", "# LABELS", "\n", "", "gt_center", "=", "end_points", "[", "'center_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,MAX_NUM_OBJ,3)", "\n", "gt_mask", "=", "end_points", "[", "'box_label_mask'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,K2", "\n", "gt_heading_class", "=", "end_points", "[", "'heading_class_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,K2", "\n", "gt_heading_residual", "=", "end_points", "[", "'heading_residual_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,K2", "\n", "gt_size_class", "=", "end_points", "[", "'size_class_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,K2", "\n", "gt_size_residual", "=", "end_points", "[", "'size_residual_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,K2,3", "\n", "objectness_label", "=", "end_points", "[", "'objectness_label'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,K,)", "\n", "objectness_mask", "=", "end_points", "[", "'objectness_mask'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,K,)", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "if", "np", ".", "sum", "(", "objectness_label", "[", "i", ",", ":", "]", ")", ">", "0", ":", "\n", "            ", "pc_util", ".", "write_ply", "(", "pred_center", "[", "i", ",", "objectness_label", "[", "i", ",", ":", "]", ">", "0", ",", "0", ":", "3", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%06d_gt_positive_proposal_pc.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "", "if", "np", ".", "sum", "(", "objectness_mask", "[", "i", ",", ":", "]", ")", ">", "0", ":", "\n", "            ", "pc_util", ".", "write_ply", "(", "pred_center", "[", "i", ",", "objectness_mask", "[", "i", ",", ":", "]", ">", "0", ",", "0", ":", "3", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%06d_gt_mask_proposal_pc.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "", "pc_util", ".", "write_ply", "(", "gt_center", "[", "i", ",", ":", ",", "0", ":", "3", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%06d_gt_centroid_pc.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "pc_util", ".", "write_ply_color", "(", "pred_center", "[", "i", ",", ":", ",", "0", ":", "3", "]", ",", "objectness_label", "[", "i", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%06d_proposal_pc_objectness_label.obj'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "\n", "# Dump GT bounding boxes", "\n", "obbs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "gt_center", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "gt_mask", "[", "i", ",", "j", "]", "==", "0", ":", "continue", "\n", "obb", "=", "config", ".", "param2obb", "(", "gt_center", "[", "i", ",", "j", ",", "0", ":", "3", "]", ",", "gt_heading_class", "[", "i", ",", "j", "]", ",", "gt_heading_residual", "[", "i", ",", "j", "]", ",", "\n", "gt_size_class", "[", "i", ",", "j", "]", ",", "gt_size_residual", "[", "i", ",", "j", "]", ")", "\n", "obbs", ".", "append", "(", "obb", ")", "\n", "", "if", "len", "(", "obbs", ")", ">", "0", ":", "\n", "            ", "obbs", "=", "np", ".", "vstack", "(", "tuple", "(", "obbs", ")", ")", "# (num_gt_objects, 7)", "\n", "pc_util", ".", "write_oriented_bbox", "(", "obbs", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%06d_gt_bbox.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "\n", "# OPTIONALL, also dump prediction and gt details", "\n", "", "", "if", "'batch_pred_map_cls'", "in", "end_points", ":", "\n", "        ", "for", "ii", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "fout", "=", "open", "(", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%06d_pred_map_cls.txt'", "%", "(", "ii", ")", ")", ",", "'w'", ")", "\n", "for", "t", "in", "end_points", "[", "'batch_pred_map_cls'", "]", "[", "ii", "]", ":", "\n", "                ", "fout", ".", "write", "(", "str", "(", "t", "[", "0", "]", ")", "+", "' '", ")", "\n", "fout", ".", "write", "(", "\",\"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "list", "(", "t", "[", "1", "]", ".", "flatten", "(", ")", ")", "]", ")", ")", "\n", "fout", ".", "write", "(", "' '", "+", "str", "(", "t", "[", "2", "]", ")", ")", "\n", "fout", ".", "write", "(", "'\\n'", ")", "\n", "", "fout", ".", "close", "(", ")", "\n", "", "", "if", "'batch_gt_map_cls'", "in", "end_points", ":", "\n", "        ", "for", "ii", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "fout", "=", "open", "(", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%06d_gt_map_cls.txt'", "%", "(", "ii", ")", ")", ",", "'w'", ")", "\n", "for", "t", "in", "end_points", "[", "'batch_gt_map_cls'", "]", "[", "ii", "]", ":", "\n", "                ", "fout", ".", "write", "(", "str", "(", "t", "[", "0", "]", ")", "+", "' '", ")", "\n", "fout", ".", "write", "(", "\",\"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "list", "(", "t", "[", "1", "]", ".", "flatten", "(", ")", ")", "]", ")", ")", "\n", "fout", ".", "write", "(", "'\\n'", ")", "\n", "", "fout", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.loss_helper.compute_vote_loss": [[21, 67], ["end_points[].long", "torch.gather", "torch.gather", "end_points[].long.view().repeat", "torch.gather", "torch.gather", "end_points[].repeat", "vote_xyz.view", "torch.gather.view", "nn_distance.nn_distance", "torch.min", "torch.min", "votes_dist.view.view", "torch.sum", "torch.sum", "end_points[].long.view", "torch.sum", "torch.sum", "torch.gather.float", "torch.gather.float"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nn_distance.nn_distance"], ["def", "compute_vote_loss", "(", "end_points", ")", ":", "\n", "    ", "\"\"\" Compute vote loss: Match predicted votes to GT votes.\n\n    Args:\n        end_points: dict (read-only)\n    \n    Returns:\n        vote_loss: scalar Tensor\n            \n    Overall idea:\n        If the seed point belongs to an object (votes_label_mask == 1),\n        then we require it to vote for the object center.\n\n        Each seed point may vote for multiple translations v1,v2,v3\n        A seed point may also be in the boxes of multiple objects:\n        o1,o2,o3 with corresponding GT votes c1,c2,c3\n\n        Then the loss for this seed point is:\n            min(d(v_i,c_j)) for i=1,2,3 and j=1,2,3\n    \"\"\"", "\n", "\n", "# Load ground truth votes and assign them to seed points", "\n", "batch_size", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "0", "]", "\n", "num_seed", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "1", "]", "# B,num_seed,3", "\n", "vote_xyz", "=", "end_points", "[", "'vote_xyz'", "]", "# B,num_seed*vote_factor,3", "\n", "seed_inds", "=", "end_points", "[", "'seed_inds'", "]", ".", "long", "(", ")", "# B,num_seed in [0,num_points-1]", "\n", "\n", "# Get groundtruth votes for the seed points", "\n", "# vote_label_mask: Use gather to select B,num_seed from B,num_point", "\n", "#   non-object point has no GT vote mask = 0, object point has mask = 1", "\n", "# vote_label: Use gather to select B,num_seed,9 from B,num_point,9", "\n", "#   with inds in shape B,num_seed,9 and 9 = GT_VOTE_FACTOR * 3", "\n", "seed_gt_votes_mask", "=", "torch", ".", "gather", "(", "end_points", "[", "'vote_label_mask'", "]", ",", "1", ",", "seed_inds", ")", "\n", "seed_inds_expand", "=", "seed_inds", ".", "view", "(", "batch_size", ",", "num_seed", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "3", "*", "GT_VOTE_FACTOR", ")", "\n", "seed_gt_votes", "=", "torch", ".", "gather", "(", "end_points", "[", "'vote_label'", "]", ",", "1", ",", "seed_inds_expand", ")", "\n", "seed_gt_votes", "+=", "end_points", "[", "'seed_xyz'", "]", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", "\n", "\n", "# Compute the min of min of distance", "\n", "vote_xyz_reshape", "=", "vote_xyz", ".", "view", "(", "batch_size", "*", "num_seed", ",", "-", "1", ",", "3", ")", "# from B,num_seed*vote_factor,3 to B*num_seed,vote_factor,3", "\n", "seed_gt_votes_reshape", "=", "seed_gt_votes", ".", "view", "(", "batch_size", "*", "num_seed", ",", "GT_VOTE_FACTOR", ",", "3", ")", "# from B,num_seed,3*GT_VOTE_FACTOR to B*num_seed,GT_VOTE_FACTOR,3", "\n", "# A predicted vote to no where is not penalized as long as there is a good vote near the GT vote.", "\n", "dist1", ",", "_", ",", "dist2", ",", "_", "=", "nn_distance", "(", "vote_xyz_reshape", ",", "seed_gt_votes_reshape", ",", "l1", "=", "True", ")", "\n", "votes_dist", ",", "_", "=", "torch", ".", "min", "(", "dist2", ",", "dim", "=", "1", ")", "# (B*num_seed,vote_factor) to (B*num_seed,)", "\n", "votes_dist", "=", "votes_dist", ".", "view", "(", "batch_size", ",", "num_seed", ")", "\n", "vote_loss", "=", "torch", ".", "sum", "(", "votes_dist", "*", "seed_gt_votes_mask", ".", "float", "(", ")", ")", "/", "(", "torch", ".", "sum", "(", "seed_gt_votes_mask", ".", "float", "(", ")", ")", "+", "1e-6", ")", "\n", "return", "vote_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.loss_helper.compute_objectness_loss": [[68, 109], ["nn_distance.nn_distance", "torch.sqrt", "torch.sqrt", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.Tensor().cuda", "torch.Tensor().cuda", "objectness_scores.transpose", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.sum", "torch.sum", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nn_distance.nn_distance"], ["", "def", "compute_objectness_loss", "(", "end_points", ")", ":", "\n", "    ", "\"\"\" Compute objectness loss for the proposals.\n\n    Args:\n        end_points: dict (read-only)\n\n    Returns:\n        objectness_loss: scalar Tensor\n        objectness_label: (batch_size, num_seed) Tensor with value 0 or 1\n        objectness_mask: (batch_size, num_seed) Tensor with value 0 or 1\n        object_assignment: (batch_size, num_seed) Tensor with long int\n            within [0,num_gt_object-1]\n    \"\"\"", "\n", "# Associate proposal and GT objects by point-to-point distances", "\n", "aggregated_vote_xyz", "=", "end_points", "[", "'aggregated_vote_xyz'", "]", "\n", "gt_center", "=", "end_points", "[", "'center_label'", "]", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "B", "=", "gt_center", ".", "shape", "[", "0", "]", "\n", "K", "=", "aggregated_vote_xyz", ".", "shape", "[", "1", "]", "\n", "K2", "=", "gt_center", ".", "shape", "[", "1", "]", "\n", "dist1", ",", "ind1", ",", "dist2", ",", "_", "=", "nn_distance", "(", "aggregated_vote_xyz", ",", "gt_center", ")", "# dist1: BxK, dist2: BxK2", "\n", "\n", "# Generate objectness label and mask", "\n", "# objectness_label: 1 if pred object center is within NEAR_THRESHOLD of any GT object", "\n", "# objectness_mask: 0 if pred object center is in gray zone (DONOTCARE), 1 otherwise", "\n", "euclidean_dist1", "=", "torch", ".", "sqrt", "(", "dist1", "+", "1e-6", ")", "\n", "objectness_label", "=", "torch", ".", "zeros", "(", "(", "B", ",", "K", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "objectness_mask", "=", "torch", ".", "ones", "(", "(", "B", ",", "K", ")", ")", ".", "cuda", "(", ")", "\n", "objectness_label", "[", "euclidean_dist1", "<", "NEAR_THRESHOLD", "]", "=", "1", "\n", "objectness_mask", "[", "euclidean_dist1", "<", "NEAR_THRESHOLD", "]", "=", "1", "\n", "objectness_mask", "[", "euclidean_dist1", ">", "FAR_THRESHOLD", "]", "=", "1", "\n", "\n", "# Compute objectness loss", "\n", "objectness_scores", "=", "end_points", "[", "'objectness_scores'", "]", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "torch", ".", "Tensor", "(", "OBJECTNESS_CLS_WEIGHTS", ")", ".", "cuda", "(", ")", ",", "reduction", "=", "'none'", ")", "\n", "objectness_loss", "=", "criterion", "(", "objectness_scores", ".", "transpose", "(", "2", ",", "1", ")", ",", "objectness_label", ")", "\n", "objectness_loss", "=", "torch", ".", "sum", "(", "objectness_loss", "*", "objectness_mask", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask", ")", "+", "1e-6", ")", "\n", "\n", "# Set assignment", "\n", "object_assignment", "=", "ind1", "# (B,K) with values in 0,1,...,K2-1", "\n", "\n", "return", "objectness_loss", ",", "objectness_label", ",", "objectness_mask", ",", "object_assignment", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.loss_helper.compute_box_and_sem_cls_loss": [[110, 185], ["nn_distance.nn_distance", "end_points[].float", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.gather", "torch.gather", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_.scatter_", "nn_distance.huber_loss", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.gather", "torch.gather", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_.scatter_", "torch.cuda.FloatTensor().zero_.unsqueeze().repeat", "torch.sum", "torch.sum", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "end_points[].transpose", "torch.sum", "torch.sum", "torch.gather.unsqueeze", "torch.sum", "torch.sum", "end_points[].transpose", "torch.sum", "torch.sum", "object_assignment.unsqueeze().repeat", "torch.gather.unsqueeze", "nn_distance.huber_loss", "torch.sum", "torch.sum", "end_points[].transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor().zero_.unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "object_assignment.unsqueeze", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "mean_size_arr.astype"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nn_distance.nn_distance", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nn_distance.huber_loss", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.utils.nn_distance.huber_loss"], ["", "def", "compute_box_and_sem_cls_loss", "(", "end_points", ",", "config", ")", ":", "\n", "    ", "\"\"\" Compute 3D bounding box and semantic classification loss.\n\n    Args:\n        end_points: dict (read-only)\n\n    Returns:\n        center_loss\n        heading_cls_loss\n        heading_reg_loss\n        size_cls_loss\n        size_reg_loss\n        sem_cls_loss\n    \"\"\"", "\n", "\n", "num_heading_bin", "=", "config", ".", "num_heading_bin", "\n", "num_size_cluster", "=", "config", ".", "num_size_cluster", "\n", "num_class", "=", "config", ".", "num_class", "\n", "mean_size_arr", "=", "config", ".", "mean_size_arr", "\n", "\n", "object_assignment", "=", "end_points", "[", "'object_assignment'", "]", "\n", "batch_size", "=", "object_assignment", ".", "shape", "[", "0", "]", "\n", "\n", "# Compute center loss", "\n", "pred_center", "=", "end_points", "[", "'center'", "]", "\n", "gt_center", "=", "end_points", "[", "'center_label'", "]", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "dist1", ",", "ind1", ",", "dist2", ",", "_", "=", "nn_distance", "(", "pred_center", ",", "gt_center", ")", "# dist1: BxK, dist2: BxK2", "\n", "box_label_mask", "=", "end_points", "[", "'box_label_mask'", "]", "\n", "objectness_label", "=", "end_points", "[", "'objectness_label'", "]", ".", "float", "(", ")", "\n", "centroid_reg_loss1", "=", "torch", ".", "sum", "(", "dist1", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "centroid_reg_loss2", "=", "torch", ".", "sum", "(", "dist2", "*", "box_label_mask", ")", "/", "(", "torch", ".", "sum", "(", "box_label_mask", ")", "+", "1e-6", ")", "\n", "center_loss", "=", "centroid_reg_loss1", "+", "centroid_reg_loss2", "\n", "\n", "# Compute heading loss", "\n", "heading_class_label", "=", "torch", ".", "gather", "(", "end_points", "[", "'heading_class_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_heading_class", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "heading_class_loss", "=", "criterion_heading_class", "(", "end_points", "[", "'heading_scores'", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "heading_class_label", ")", "# (B,K)", "\n", "heading_class_loss", "=", "torch", ".", "sum", "(", "heading_class_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "heading_residual_label", "=", "torch", ".", "gather", "(", "end_points", "[", "'heading_residual_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "heading_residual_normalized_label", "=", "heading_residual_label", "/", "(", "np", ".", "pi", "/", "num_heading_bin", ")", "\n", "\n", "# Ref: https://discuss.pytorch.org/t/convert-int-into-one-hot-format/507/3", "\n", "heading_label_one_hot", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "heading_class_label", ".", "shape", "[", "1", "]", ",", "num_heading_bin", ")", ".", "zero_", "(", ")", "\n", "heading_label_one_hot", ".", "scatter_", "(", "2", ",", "heading_class_label", ".", "unsqueeze", "(", "-", "1", ")", ",", "1", ")", "# src==1 so it's *one-hot* (B,K,num_heading_bin)", "\n", "heading_residual_normalized_loss", "=", "huber_loss", "(", "torch", ".", "sum", "(", "end_points", "[", "'heading_residuals_normalized'", "]", "*", "heading_label_one_hot", ",", "-", "1", ")", "-", "heading_residual_normalized_label", ",", "delta", "=", "1.0", ")", "# (B,K)", "\n", "heading_residual_normalized_loss", "=", "torch", ".", "sum", "(", "heading_residual_normalized_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "# Compute size loss", "\n", "size_class_label", "=", "torch", ".", "gather", "(", "end_points", "[", "'size_class_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_size_class", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "size_class_loss", "=", "criterion_size_class", "(", "end_points", "[", "'size_scores'", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "size_class_label", ")", "# (B,K)", "\n", "size_class_loss", "=", "torch", ".", "sum", "(", "size_class_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "size_residual_label", "=", "torch", ".", "gather", "(", "end_points", "[", "'size_residual_label'", "]", ",", "1", ",", "object_assignment", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", ")", "# select (B,K,3) from (B,K2,3)", "\n", "size_label_one_hot", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "size_class_label", ".", "shape", "[", "1", "]", ",", "num_size_cluster", ")", ".", "zero_", "(", ")", "\n", "size_label_one_hot", ".", "scatter_", "(", "2", ",", "size_class_label", ".", "unsqueeze", "(", "-", "1", ")", ",", "1", ")", "# src==1 so it's *one-hot* (B,K,num_size_cluster)", "\n", "size_label_one_hot_tiled", "=", "size_label_one_hot", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", "# (B,K,num_size_cluster,3)", "\n", "predicted_size_residual_normalized", "=", "torch", ".", "sum", "(", "end_points", "[", "'size_residuals_normalized'", "]", "*", "size_label_one_hot_tiled", ",", "2", ")", "# (B,K,3)", "\n", "\n", "mean_size_arr_expanded", "=", "torch", ".", "from_numpy", "(", "mean_size_arr", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "# (1,1,num_size_cluster,3) ", "\n", "mean_size_label", "=", "torch", ".", "sum", "(", "size_label_one_hot_tiled", "*", "mean_size_arr_expanded", ",", "2", ")", "# (B,K,3)", "\n", "size_residual_label_normalized", "=", "size_residual_label", "/", "mean_size_label", "# (B,K,3)", "\n", "size_residual_normalized_loss", "=", "torch", ".", "mean", "(", "huber_loss", "(", "predicted_size_residual_normalized", "-", "size_residual_label_normalized", ",", "delta", "=", "1.0", ")", ",", "-", "1", ")", "# (B,K,3) -> (B,K)", "\n", "size_residual_normalized_loss", "=", "torch", ".", "sum", "(", "size_residual_normalized_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "# 3.4 Semantic cls loss", "\n", "sem_cls_label", "=", "torch", ".", "gather", "(", "end_points", "[", "'sem_cls_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_sem_cls", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "sem_cls_loss", "=", "criterion_sem_cls", "(", "end_points", "[", "'sem_cls_scores'", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "sem_cls_label", ")", "# (B,K)", "\n", "sem_cls_loss", "=", "torch", ".", "sum", "(", "sem_cls_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "return", "center_loss", ",", "heading_class_loss", ",", "heading_residual_normalized_loss", ",", "size_class_loss", ",", "size_residual_normalized_loss", ",", "sem_cls_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.loss_helper.get_loss": [[186, 251], ["loss_helper.compute_vote_loss", "loss_helper.compute_objectness_loss", "loss_helper.compute_box_and_sem_cls_loss", "torch.argmax", "torch.argmax", "torch.sum", "torch.sum", "float", "torch.sum", "torch.sum", "objectness_label.float().cuda", "torch.sum", "torch.sum", "float", "torch.sum", "torch.sum", "objectness_mask.float", "objectness_label.float", "objectness_label.long"], "function", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.loss_helper.compute_vote_loss", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.loss_helper.compute_objectness_loss", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.loss_helper.compute_box_and_sem_cls_loss"], ["", "def", "get_loss", "(", "end_points", ",", "config", ")", ":", "\n", "    ", "\"\"\" Loss functions\n\n    Args:\n        end_points: dict\n            {   \n                seed_xyz, seed_inds, vote_xyz,\n                center,\n                heading_scores, heading_residuals_normalized,\n                size_scores, size_residuals_normalized,\n                sem_cls_scores, #seed_logits,#\n                center_label,\n                heading_class_label, heading_residual_label,\n                size_class_label, size_residual_label,\n                sem_cls_label,\n                box_label_mask,\n                vote_label, vote_label_mask\n            }\n        config: dataset config instance\n    Returns:\n        loss: pytorch scalar tensor\n        end_points: dict\n    \"\"\"", "\n", "\n", "# Vote loss", "\n", "vote_loss", "=", "compute_vote_loss", "(", "end_points", ")", "\n", "end_points", "[", "'vote_loss'", "]", "=", "vote_loss", "\n", "\n", "# Obj loss", "\n", "objectness_loss", ",", "objectness_label", ",", "objectness_mask", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points", ")", "\n", "end_points", "[", "'objectness_loss'", "]", "=", "objectness_loss", "\n", "end_points", "[", "'objectness_label'", "]", "=", "objectness_label", "\n", "end_points", "[", "'objectness_mask'", "]", "=", "objectness_mask", "\n", "end_points", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "total_num_proposal", "=", "objectness_label", ".", "shape", "[", "0", "]", "*", "objectness_label", ".", "shape", "[", "1", "]", "\n", "end_points", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points", "[", "'pos_ratio'", "]", "\n", "\n", "# Box loss and sem cls loss", "\n", "center_loss", ",", "heading_cls_loss", ",", "heading_reg_loss", ",", "size_cls_loss", ",", "size_reg_loss", ",", "sem_cls_loss", "=", "compute_box_and_sem_cls_loss", "(", "end_points", ",", "config", ")", "\n", "end_points", "[", "'center_loss'", "]", "=", "center_loss", "\n", "end_points", "[", "'heading_cls_loss'", "]", "=", "heading_cls_loss", "\n", "end_points", "[", "'heading_reg_loss'", "]", "=", "heading_reg_loss", "\n", "end_points", "[", "'size_cls_loss'", "]", "=", "size_cls_loss", "\n", "end_points", "[", "'size_reg_loss'", "]", "=", "size_reg_loss", "\n", "end_points", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss", "\n", "box_loss", "=", "center_loss", "+", "0.1", "*", "heading_cls_loss", "+", "heading_reg_loss", "+", "0.1", "*", "size_cls_loss", "+", "size_reg_loss", "\n", "end_points", "[", "'box_loss'", "]", "=", "box_loss", "\n", "\n", "# Final loss function", "\n", "loss", "=", "vote_loss", "+", "0.5", "*", "objectness_loss", "+", "box_loss", "+", "0.1", "*", "sem_cls_loss", "\n", "loss", "*=", "10", "\n", "end_points", "[", "'loss'", "]", "=", "loss", "\n", "\n", "# --------------------------------------------", "\n", "# Some other statistics", "\n", "obj_pred_val", "=", "torch", ".", "argmax", "(", "end_points", "[", "'objectness_scores'", "]", ",", "2", ")", "# B,K", "\n", "obj_acc", "=", "torch", ".", "sum", "(", "(", "obj_pred_val", "==", "objectness_label", ".", "long", "(", ")", ")", ".", "float", "(", ")", "*", "objectness_mask", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask", ")", "+", "1e-6", ")", "\n", "end_points", "[", "'obj_acc'", "]", "=", "obj_acc", "\n", "\n", "return", "loss", ",", "end_points", "\n", "", ""]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNLQ.__init__": [[21, 43], ["torch.nn.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.GroupNorm", "print", "print"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "use_scale", "=", "False", ",", "groups", "=", "None", ")", ":", "\n", "        ", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "groups", "=", "groups", "\n", "\n", "super", "(", "SpatialCGNLQ", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# conv theta", "\n", "self", ".", "t", "=", "nn", ".", "Conv1d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "# conv phi", "\n", "self", ".", "p", "=", "nn", ".", "Conv1d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "# conv g", "\n", "self", ".", "g", "=", "nn", ".", "Conv1d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "# conv z", "\n", "self", ".", "z", "=", "nn", ".", "Conv1d", "(", "planes", ",", "inplanes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "groups", "=", "self", ".", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "gn", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "self", ".", "groups", ",", "num_channels", "=", "inplanes", ")", "\n", "\n", "if", "self", ".", "use_scale", ":", "\n", "            ", "print", "(", "\"=> WARN: SpatialCGNL block uses 'SCALE'\"", ",", "'yellow'", ")", "\n", "", "if", "self", ".", "groups", ":", "\n", "            ", "print", "(", "\"=> WARN: SpatialCGNL block uses '{}' groups\"", ".", "format", "(", "self", ".", "groups", ")", ",", "'yellow'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNLQ.kernel": [[44, 68], ["t.view.view.view", "p.view.view.view", "g.view.view.view", "torch.bmm", "torch.bmm", "x.view.view.view", "att.div.div.div"], "methods", ["None"], ["", "", "def", "kernel", "(", "self", ",", "t", ",", "p", ",", "g", ",", "b", ",", "c", ",", "h", ")", ":", "\n", "        ", "\"\"\"The linear kernel (dot production).\n\n        Args:\n            t: output of conv theata\n            p: output of conv phi\n            g: output of conv g\n            b: batch size\n            c: channels number\n            h: height of featuremaps\n        \"\"\"", "\n", "t", "=", "t", ".", "view", "(", "b", ",", "1", ",", "c", "*", "h", ")", "\n", "p", "=", "p", ".", "view", "(", "b", ",", "1", ",", "c", "*", "h", ")", "\n", "g", "=", "g", ".", "view", "(", "b", ",", "c", "*", "h", ",", "1", ")", "\n", "\n", "att", "=", "torch", ".", "bmm", "(", "p", ",", "g", ")", "\n", "\n", "if", "self", ".", "use_scale", ":", "\n", "            ", "att", "=", "att", ".", "div", "(", "(", "c", "*", "h", ")", "**", "0.5", ")", "\n", "\n", "", "x", "=", "torch", ".", "bmm", "(", "att", ",", "t", ")", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "h", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNLQ.forward": [[69, 101], ["CGNL.SpatialCGNLQ.t", "CGNL.SpatialCGNLQ.p", "CGNL.SpatialCGNLQ.g", "CGNL.SpatialCGNLQ.size", "CGNL.SpatialCGNLQ.z", "int", "torch.split", "torch.split", "torch.split", "range", "torch.cat", "CGNL.SpatialCGNLQ.kernel", "CGNL.SpatialCGNLQ.gn", "CGNL.SpatialCGNLQ.kernel", "_t_sequences.append"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNLx.kernel", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNLx.kernel"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "residual", "=", "x", "\n", "\n", "t", "=", "self", ".", "t", "(", "x", ")", "\n", "p", "=", "self", ".", "p", "(", "x", ")", "\n", "g", "=", "self", ".", "g", "(", "x", ")", "\n", "\n", "b", ",", "c", ",", "h", "=", "t", ".", "size", "(", ")", "\n", "\n", "if", "self", ".", "groups", "and", "self", ".", "groups", ">", "1", ":", "\n", "            ", "_c", "=", "int", "(", "c", "/", "self", ".", "groups", ")", "\n", "\n", "ts", "=", "torch", ".", "split", "(", "t", ",", "split_size_or_sections", "=", "_c", ",", "dim", "=", "1", ")", "\n", "ps", "=", "torch", ".", "split", "(", "p", ",", "split_size_or_sections", "=", "_c", ",", "dim", "=", "1", ")", "\n", "gs", "=", "torch", ".", "split", "(", "g", ",", "split_size_or_sections", "=", "_c", ",", "dim", "=", "1", ")", "\n", "\n", "_t_sequences", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "groups", ")", ":", "\n", "                ", "_x", "=", "self", ".", "kernel", "(", "ts", "[", "i", "]", ",", "ps", "[", "i", "]", ",", "gs", "[", "i", "]", ",", "\n", "b", ",", "_c", ",", "h", ")", "\n", "_t_sequences", ".", "append", "(", "_x", ")", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "_t_sequences", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "kernel", "(", "t", ",", "p", ",", "g", ",", "\n", "b", ",", "c", ",", "h", ")", "\n", "\n", "", "x", "=", "self", ".", "z", "(", "x", ")", "\n", "x", "=", "self", ".", "gn", "(", "x", ")", "+", "residual", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNL.__init__": [[105, 127], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "print", "print"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "use_scale", "=", "False", ",", "groups", "=", "None", ")", ":", "\n", "        ", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "groups", "=", "groups", "\n", "\n", "super", "(", "SpatialCGNL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# conv theta", "\n", "self", ".", "t", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "# conv phi", "\n", "self", ".", "p", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "# conv g", "\n", "self", ".", "g", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "# conv z", "\n", "self", ".", "z", "=", "nn", ".", "Conv2d", "(", "planes", ",", "inplanes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "groups", "=", "self", ".", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "gn", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "self", ".", "groups", ",", "num_channels", "=", "inplanes", ")", "\n", "\n", "if", "self", ".", "use_scale", ":", "\n", "            ", "print", "(", "\"=> WARN: SpatialCGNL block uses 'SCALE'\"", ",", "'yellow'", ")", "\n", "", "if", "self", ".", "groups", ":", "\n", "            ", "print", "(", "\"=> WARN: SpatialCGNL block uses '{}' groups\"", ".", "format", "(", "self", ".", "groups", ")", ",", "'yellow'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNL.kernel": [[128, 153], ["t.view.view.view", "p.view.view.view", "g.view.view.view", "torch.bmm", "torch.bmm", "x.view.view.view", "att.div.div.div"], "methods", ["None"], ["", "", "def", "kernel", "(", "self", ",", "t", ",", "p", ",", "g", ",", "b", ",", "c", ",", "h", ",", "w", ")", ":", "\n", "        ", "\"\"\"The linear kernel (dot production).\n\n        Args:\n            t: output of conv theata\n            p: output of conv phi\n            g: output of conv g\n            b: batch size\n            c: channels number\n            h: height of featuremaps\n            w: width of featuremaps\n        \"\"\"", "\n", "t", "=", "t", ".", "view", "(", "b", ",", "1", ",", "c", "*", "h", "*", "w", ")", "\n", "p", "=", "p", ".", "view", "(", "b", ",", "1", ",", "c", "*", "h", "*", "w", ")", "\n", "g", "=", "g", ".", "view", "(", "b", ",", "c", "*", "h", "*", "w", ",", "1", ")", "\n", "\n", "att", "=", "torch", ".", "bmm", "(", "p", ",", "g", ")", "\n", "\n", "if", "self", ".", "use_scale", ":", "\n", "            ", "att", "=", "att", ".", "div", "(", "(", "c", "*", "h", "*", "w", ")", "**", "0.5", ")", "\n", "\n", "", "x", "=", "torch", ".", "bmm", "(", "att", ",", "t", ")", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNL.forward": [[154, 185], ["CGNL.SpatialCGNL.t", "CGNL.SpatialCGNL.p", "CGNL.SpatialCGNL.g", "CGNL.SpatialCGNL.size", "CGNL.SpatialCGNL.z", "int", "torch.split", "torch.split", "torch.split", "range", "torch.cat", "CGNL.SpatialCGNL.kernel", "CGNL.SpatialCGNL.gn", "CGNL.SpatialCGNL.kernel", "_t_sequences.append"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNLx.kernel", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNLx.kernel"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "t", "=", "self", ".", "t", "(", "x", ")", "\n", "p", "=", "self", ".", "p", "(", "x", ")", "\n", "g", "=", "self", ".", "g", "(", "x", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "t", ".", "size", "(", ")", "\n", "\n", "if", "self", ".", "groups", "and", "self", ".", "groups", ">", "1", ":", "\n", "            ", "_c", "=", "int", "(", "c", "/", "self", ".", "groups", ")", "\n", "\n", "ts", "=", "torch", ".", "split", "(", "t", ",", "split_size_or_sections", "=", "_c", ",", "dim", "=", "1", ")", "\n", "ps", "=", "torch", ".", "split", "(", "p", ",", "split_size_or_sections", "=", "_c", ",", "dim", "=", "1", ")", "\n", "gs", "=", "torch", ".", "split", "(", "g", ",", "split_size_or_sections", "=", "_c", ",", "dim", "=", "1", ")", "\n", "\n", "_t_sequences", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "groups", ")", ":", "\n", "                ", "_x", "=", "self", ".", "kernel", "(", "ts", "[", "i", "]", ",", "ps", "[", "i", "]", ",", "gs", "[", "i", "]", ",", "\n", "b", ",", "_c", ",", "h", ",", "w", ")", "\n", "_t_sequences", ".", "append", "(", "_x", ")", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "_t_sequences", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "kernel", "(", "t", ",", "p", ",", "g", ",", "\n", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "", "x", "=", "self", ".", "z", "(", "x", ")", "\n", "x", "=", "self", ".", "gn", "(", "x", ")", "+", "residual", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNLx.__init__": [[190, 216], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.GroupNorm", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "use_scale", "=", "False", ",", "groups", "=", "None", ",", "order", "=", "2", ")", ":", "\n", "        ", "self", ".", "use_scale", "=", "use_scale", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "order", "=", "order", "\n", "\n", "super", "(", "SpatialCGNLx", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# conv theta", "\n", "self", ".", "t", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "# conv phi", "\n", "self", ".", "p", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "# conv g", "\n", "self", ".", "g", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "# conv z", "\n", "self", ".", "z", "=", "nn", ".", "Conv2d", "(", "planes", ",", "inplanes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "\n", "groups", "=", "self", ".", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "gn", "=", "nn", ".", "GroupNorm", "(", "num_groups", "=", "self", ".", "groups", ",", "num_channels", "=", "inplanes", ")", "\n", "\n", "if", "self", ".", "use_scale", ":", "\n", "            ", "print", "(", "\"=> WARN: SpatialCGNLx block uses 'SCALE'\"", ",", "'yellow'", ")", "\n", "", "if", "self", ".", "groups", ":", "\n", "            ", "print", "(", "\"=> WARN: SpatialCGNLx block uses '{}' groups\"", ".", "format", "(", "self", ".", "groups", ")", ",", "'yellow'", ")", "\n", "\n", "", "print", "(", "'=> WARN: The Taylor expansion order in SpatialCGNLx block is {}'", ".", "format", "(", "self", ".", "order", ")", ",", "'yellow'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNLx.kernel": [[217, 284], ["t.view.view.view", "p.view.view.view", "g.view.view.view", "torch.Tensor().fill_", "torch.exp", "range", "torch.cat", "torch.cat", "torch.bmm", "att.div.div.view", "torch.bmm", "x.view.view.view", "torch.mul", "torch.sqrt", "t.view.view.pow().mul", "p.view.view.pow().mul", "torch.cat.append", "torch.cat.append", "att.div.div.div", "int", "torch.Tensor", "torch.div", "torch.sqrt.cuda", "torch.pow", "math.factorial", "t.view.view.pow", "p.view.view.pow"], "methods", ["None"], ["", "def", "kernel", "(", "self", ",", "t", ",", "p", ",", "g", ",", "b", ",", "c", ",", "h", ",", "w", ")", ":", "\n", "        ", "\"\"\"The non-linear kernel (Gaussian RBF).\n\n        Args:\n            t: output of conv theata\n            p: output of conv phi\n            g: output of conv g\n            b: batch size\n            c: channels number\n            h: height of featuremaps\n            w: width of featuremaps\n        \"\"\"", "\n", "\n", "t", "=", "t", ".", "view", "(", "b", ",", "1", ",", "c", "*", "h", "*", "w", ")", "\n", "p", "=", "p", ".", "view", "(", "b", ",", "1", ",", "c", "*", "h", "*", "w", ")", "\n", "g", "=", "g", ".", "view", "(", "b", ",", "c", "*", "h", "*", "w", ",", "1", ")", "\n", "\n", "# gamma", "\n", "gamma", "=", "torch", ".", "Tensor", "(", "1", ")", ".", "fill_", "(", "1e-4", ")", "\n", "\n", "# NOTE:", "\n", "# We want to keep the high-order feature spaces in Taylor expansion to ", "\n", "# rich the feature representation, so the l2 norm is not used here.", "\n", "# ", "\n", "# Under the above precondition, the \u03b2 should be calculated ", "\n", "# by \u03b2 = exp(\u2212\u03b3(\u2225\u03b8\u2225^2 +\u2225\u03c6\u2225^2)). ", "\n", "# But in the experiments, we found training becomes very difficult. ", "\n", "# So we simplify the implementation to ", "\n", "# ease the gradient computation through calculating the \u03b2 = exp(\u22122\u03b3).", "\n", "\n", "# beta", "\n", "beta", "=", "torch", ".", "exp", "(", "-", "2", "*", "gamma", ")", "\n", "\n", "t_taylor", "=", "[", "]", "\n", "p_taylor", "=", "[", "]", "\n", "for", "order", "in", "range", "(", "self", ".", "order", "+", "1", ")", ":", "\n", "# alpha", "\n", "            ", "alpha", "=", "torch", ".", "mul", "(", "\n", "torch", ".", "div", "(", "\n", "torch", ".", "pow", "(", "\n", "(", "2", "*", "gamma", ")", ",", "\n", "order", ")", ",", "\n", "math", ".", "factorial", "(", "order", ")", ")", ",", "\n", "beta", ")", "\n", "\n", "alpha", "=", "torch", ".", "sqrt", "(", "\n", "alpha", ".", "cuda", "(", ")", ")", "\n", "\n", "_t", "=", "t", ".", "pow", "(", "order", ")", ".", "mul", "(", "alpha", ")", "\n", "_p", "=", "p", ".", "pow", "(", "order", ")", ".", "mul", "(", "alpha", ")", "\n", "\n", "t_taylor", ".", "append", "(", "_t", ")", "\n", "p_taylor", ".", "append", "(", "_p", ")", "\n", "\n", "", "t_taylor", "=", "torch", ".", "cat", "(", "t_taylor", ",", "dim", "=", "1", ")", "\n", "p_taylor", "=", "torch", ".", "cat", "(", "p_taylor", ",", "dim", "=", "1", ")", "\n", "\n", "att", "=", "torch", ".", "bmm", "(", "p_taylor", ",", "g", ")", "\n", "\n", "if", "self", ".", "use_scale", ":", "\n", "            ", "att", "=", "att", ".", "div", "(", "(", "c", "*", "h", "*", "w", ")", "**", "0.5", ")", "\n", "\n", "", "att", "=", "att", ".", "view", "(", "b", ",", "1", ",", "int", "(", "self", ".", "order", "+", "1", ")", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "att", ",", "t_taylor", ")", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNLx.forward": [[285, 316], ["CGNL.SpatialCGNLx.t", "CGNL.SpatialCGNLx.p", "CGNL.SpatialCGNLx.g", "CGNL.SpatialCGNLx.size", "CGNL.SpatialCGNLx.z", "int", "torch.split", "torch.split", "torch.split", "range", "torch.cat", "CGNL.SpatialCGNLx.kernel", "CGNL.SpatialCGNLx.gn", "CGNL.SpatialCGNLx.kernel", "_t_sequences.append"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNLx.kernel", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialCGNLx.kernel"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "t", "=", "self", ".", "t", "(", "x", ")", "\n", "p", "=", "self", ".", "p", "(", "x", ")", "\n", "g", "=", "self", ".", "g", "(", "x", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "t", ".", "size", "(", ")", "\n", "\n", "if", "self", ".", "groups", "and", "self", ".", "groups", ">", "1", ":", "\n", "            ", "_c", "=", "int", "(", "c", "/", "self", ".", "groups", ")", "\n", "\n", "ts", "=", "torch", ".", "split", "(", "t", ",", "split_size_or_sections", "=", "_c", ",", "dim", "=", "1", ")", "\n", "ps", "=", "torch", ".", "split", "(", "p", ",", "split_size_or_sections", "=", "_c", ",", "dim", "=", "1", ")", "\n", "gs", "=", "torch", ".", "split", "(", "g", ",", "split_size_or_sections", "=", "_c", ",", "dim", "=", "1", ")", "\n", "\n", "_t_sequences", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "groups", ")", ":", "\n", "                ", "_x", "=", "self", ".", "kernel", "(", "ts", "[", "i", "]", ",", "ps", "[", "i", "]", ",", "gs", "[", "i", "]", ",", "\n", "b", ",", "_c", ",", "h", ",", "w", ")", "\n", "_t_sequences", ".", "append", "(", "_x", ")", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "_t_sequences", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "kernel", "(", "t", ",", "p", ",", "g", ",", "\n", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "", "x", "=", "self", ".", "z", "(", "x", ")", "\n", "x", "=", "self", ".", "gn", "(", "x", ")", "+", "residual", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialNL.__init__": [[322, 335], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Softmax", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "print"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "use_scale", "=", "False", ")", ":", "\n", "        ", "self", ".", "use_scale", "=", "use_scale", "\n", "\n", "super", "(", "SpatialNL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "t", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "p", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "g", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "2", ")", "\n", "self", ".", "z", "=", "nn", ".", "Conv2d", "(", "planes", ",", "inplanes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "\n", "if", "self", ".", "use_scale", ":", "\n", "            ", "print", "(", "\"=> WARN: SpatialNL block uses 'SCALE' before softmax\"", ",", "'yellow'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.CGNL.SpatialNL.forward": [[336, 365], ["CGNL.SpatialNL.t", "CGNL.SpatialNL.p", "CGNL.SpatialNL.g", "t.view().permute.view().permute.size", "t.view().permute.view().permute.view().permute", "p.view.view.view", "g.view().permute.view().permute.view().permute", "torch.bmm", "CGNL.SpatialNL.softmax", "torch.bmm", "CGNL.SpatialNL.permute", "CGNL.SpatialNL.contiguous", "CGNL.SpatialNL.view", "CGNL.SpatialNL.z", "att.div.div.div", "CGNL.SpatialNL.bn", "t.view().permute.view().permute.view", "g.view().permute.view().permute.view"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.dump_helper.softmax"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "t", "=", "self", ".", "t", "(", "x", ")", "\n", "p", "=", "self", ".", "p", "(", "x", ")", "\n", "g", "=", "self", ".", "g", "(", "x", ")", "\n", "\n", "b", ",", "c", ",", "h", ",", "w", "=", "t", ".", "size", "(", ")", "\n", "\n", "t", "=", "t", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "p", "=", "p", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "g", "=", "g", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "att", "=", "torch", ".", "bmm", "(", "t", ",", "p", ")", "\n", "\n", "if", "self", ".", "use_scale", ":", "\n", "            ", "att", "=", "att", ".", "div", "(", "c", "**", "0.5", ")", "\n", "\n", "", "att", "=", "self", ".", "softmax", "(", "att", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "att", ",", "g", ")", "\n", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "\n", "x", "=", "self", ".", "z", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "+", "residual", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.proposal_module.ProposalModule.__init__": [[49, 81], ["torch.Module.__init__", "pointnet2_modules.PointnetSAModuleVotes", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "CGNL.SpatialCGNL", "CGNL.SpatialCGNL", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "num_proposal", ",", "sampling", ",", "seed_feat_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "sampling", "=", "sampling", "\n", "self", ".", "seed_feat_dim", "=", "seed_feat_dim", "\n", "\n", "# Vote clustering", "\n", "self", ".", "vote_aggregation", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "self", ".", "num_proposal", ",", "\n", "radius", "=", "0.3", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "self", ".", "seed_feat_dim", ",", "128", ",", "128", ",", "128", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "# Object proposal/detection", "\n", "# Objectness scores (2), center residual (3),", "\n", "# heading class+residual (num_heading_bin*2), size class+residual(num_size_cluster*4)", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "2", "+", "3", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "*", "4", "+", "self", ".", "num_class", ",", "1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "sa1", "=", "SpatialCGNL", "(", "128", ",", "int", "(", "128", "/", "2", ")", ",", "use_scale", "=", "False", ",", "groups", "=", "4", ")", "\n", "self", ".", "sa2", "=", "SpatialCGNL", "(", "128", ",", "int", "(", "128", "/", "2", ")", ",", "use_scale", "=", "False", ",", "groups", "=", "4", ")", "\n", "self", ".", "gs_conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "512", ",", "128", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.proposal_module.ProposalModule.forward": [[82, 132], ["features.contiguous().view.contiguous().view.contiguous().view", "proposal_module.ProposalModule.sa1", "proposal_module.ProposalModule.sa2", "proposal_module.ProposalModule.contiguous().view", "features.contiguous().view.contiguous().view.contiguous().view", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "proposal_module.ProposalModule.gs_conv1", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "proposal_module.ProposalModule.conv3", "proposal_module.decode_scores", "proposal_module.ProposalModule.vote_aggregation", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "proposal_module.ProposalModule.bn1", "proposal_module.ProposalModule.bn2", "pointnet2_utils.furthest_point_sample", "proposal_module.ProposalModule.vote_aggregation", "features.contiguous().view.contiguous().view.contiguous", "proposal_module.ProposalModule.contiguous", "features.contiguous().view.contiguous().view.contiguous", "features.contiguous().view.contiguous().view.size", "seed_features.size", "torch.sigmoid.expand", "torch.sigmoid.expand", "torch.sigmoid.expand", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "proposal_module.ProposalModule.conv1", "proposal_module.ProposalModule.conv2", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "proposal_module.ProposalModule.vote_aggregation", "log_string", "exit", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.proposal_module.decode_scores", "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.None.train.log_string"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "features", ",", "end_points", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            xyz: (B,K,3)\n            features: (B,C,K)\n        Returns:\n            scores: (B,num_proposal,2+3+NH*2+NS*4) \n        \"\"\"", "\n", "if", "self", ".", "sampling", "==", "'vote_fps'", ":", "\n", "# Farthest point sampling (FPS) on votes", "\n", "            ", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "vote_aggregation", "(", "xyz", ",", "features", ")", "\n", "sample_inds", "=", "fps_inds", "\n", "", "elif", "self", ".", "sampling", "==", "'seed_fps'", ":", "\n", "# FPS on seed and choose the votes corresponding to the seeds", "\n", "# This gets us a slightly better coverage of *object* votes than vote_fps (which tends to get more cluster votes)", "\n", "            ", "sample_inds", "=", "pointnet2_utils", ".", "furthest_point_sample", "(", "end_points", "[", "'seed_xyz'", "]", ",", "self", ".", "num_proposal", ")", "\n", "xyz", ",", "features", ",", "_", "=", "self", ".", "vote_aggregation", "(", "xyz", ",", "features", ",", "sample_inds", ")", "\n", "", "elif", "self", ".", "sampling", "==", "'random'", ":", "\n", "# Random sampling from the votes", "\n", "            ", "num_seed", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "1", "]", "\n", "batch_size", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "0", "]", "\n", "sample_inds", "=", "torch", ".", "randint", "(", "0", ",", "num_seed", ",", "(", "batch_size", ",", "self", ".", "num_proposal", ")", ",", "dtype", "=", "torch", ".", "int", ")", ".", "cuda", "(", ")", "\n", "xyz", ",", "features", ",", "_", "=", "self", ".", "vote_aggregation", "(", "xyz", ",", "features", ",", "sample_inds", ")", "\n", "", "else", ":", "\n", "            ", "log_string", "(", "'Unknown sampling strategy: %s. Exiting!'", "%", "(", "self", ".", "sampling", ")", ")", "\n", "exit", "(", ")", "\n", "", "end_points", "[", "'aggregated_vote_xyz'", "]", "=", "xyz", "# (batch_size, num_proposal, 3)", "\n", "end_points", "[", "'aggregated_vote_inds'", "]", "=", "sample_inds", "# (batch_size, num_proposal,) # should be 0,1,2,...,num_proposal", "\n", "\n", "feature_dim", "=", "features", ".", "shape", "[", "1", "]", "\n", "batch_size", "=", "features", ".", "shape", "[", "0", "]", "\n", "features", "=", "features", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "feature_dim", ",", "16", ",", "16", ")", "\n", "net", "=", "self", ".", "sa1", "(", "features", ")", "\n", "net", "=", "self", ".", "sa2", "(", "net", ")", "\n", "net", "=", "net", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "feature_dim", ",", "self", ".", "num_proposal", ")", "\n", "features", "=", "features", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "feature_dim", ",", "self", ".", "num_proposal", ")", "\n", "seed_features", "=", "end_points", "[", "'seed_features'", "]", "\n", "global_features_2", "=", "F", ".", "max_pool1d", "(", "features", ",", "kernel_size", "=", "features", ".", "size", "(", "2", ")", ")", "# (B, 128, 1)", "\n", "global_features_1", "=", "F", ".", "max_pool1d", "(", "seed_features", ",", "kernel_size", "=", "seed_features", ".", "size", "(", "2", ")", ")", "# (B, 256, 1)", "\n", "global_features", "=", "torch", ".", "cat", "(", "(", "global_features_1", ",", "global_features_2", ")", ",", "1", ")", "# (B, 256+128, 1)", "\n", "global_features", "=", "torch", ".", "cat", "(", "(", "global_features", ".", "expand", "(", "features", ".", "shape", "[", "0", "]", ",", "256", "+", "128", ",", "256", ")", ",", "net", ")", ",", "1", ")", "\n", "global_features", "=", "self", ".", "gs_conv1", "(", "global_features", ")", "\n", "global_features", "=", "torch", ".", "sigmoid", "(", "torch", ".", "log", "(", "torch", ".", "abs", "(", "global_features", ")", ")", ")", "\n", "net", "=", "net", "*", "global_features", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "net", ")", ")", ")", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "net", ")", ")", ")", "\n", "net", "=", "self", ".", "conv3", "(", "net", ")", "# (batch_size, 2+3+num_heading_bin*2+num_size_cluster*4, num_proposal)", "\n", "\n", "end_points", "=", "decode_scores", "(", "net", ",", "end_points", ",", "self", ".", "num_class", ",", "self", ".", "num_heading_bin", ",", "self", ".", "num_size_cluster", ",", "self", ".", "mean_size_arr", ")", "\n", "return", "end_points", "\n", "", "", ""]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.models.proposal_module.decode_scores": [[19, 46], ["net.transpose", "net_transposed[].view", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mean_size_arr.astype"], "function", ["None"], ["def", "decode_scores", "(", "net", ",", "end_points", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ")", ":", "\n", "    ", "net_transposed", "=", "net", ".", "transpose", "(", "2", ",", "1", ")", "# (batch_size, 1024, ..)", "\n", "batch_size", "=", "net_transposed", ".", "shape", "[", "0", "]", "\n", "num_proposal", "=", "net_transposed", ".", "shape", "[", "1", "]", "\n", "\n", "objectness_scores", "=", "net_transposed", "[", ":", ",", ":", ",", "0", ":", "2", "]", "\n", "end_points", "[", "'objectness_scores'", "]", "=", "objectness_scores", "\n", "\n", "base_xyz", "=", "end_points", "[", "'aggregated_vote_xyz'", "]", "# (batch_size, num_proposal, 3)", "\n", "center", "=", "base_xyz", "+", "net_transposed", "[", ":", ",", ":", ",", "2", ":", "5", "]", "# (batch_size, num_proposal, 3)", "\n", "end_points", "[", "'center'", "]", "=", "center", "\n", "\n", "heading_scores", "=", "net_transposed", "[", ":", ",", ":", ",", "5", ":", "5", "+", "num_heading_bin", "]", "\n", "heading_residuals_normalized", "=", "net_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", ":", "5", "+", "num_heading_bin", "*", "2", "]", "\n", "end_points", "[", "'heading_scores'", "]", "=", "heading_scores", "# Bxnum_proposalxnum_heading_bin", "\n", "end_points", "[", "'heading_residuals_normalized'", "]", "=", "heading_residuals_normalized", "# Bxnum_proposalxnum_heading_bin (should be -1 to 1)", "\n", "end_points", "[", "'heading_residuals'", "]", "=", "heading_residuals_normalized", "*", "(", "np", ".", "pi", "/", "num_heading_bin", ")", "# Bxnum_proposalxnum_heading_bin", "\n", "\n", "size_scores", "=", "net_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", "*", "2", ":", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "]", "\n", "size_residuals_normalized", "=", "net_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", ":", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "*", "4", "]", ".", "view", "(", "[", "batch_size", ",", "num_proposal", ",", "num_size_cluster", ",", "3", "]", ")", "# Bxnum_proposalxnum_size_clusterx3", "\n", "end_points", "[", "'size_scores'", "]", "=", "size_scores", "\n", "end_points", "[", "'size_residuals_normalized'", "]", "=", "size_residuals_normalized", "\n", "end_points", "[", "'size_residuals'", "]", "=", "size_residuals_normalized", "*", "torch", ".", "from_numpy", "(", "mean_size_arr", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "sem_cls_scores", "=", "net_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "*", "4", ":", "]", "# Bxnum_proposalx10", "\n", "end_points", "[", "'sem_cls_scores'", "]", "=", "sem_cls_scores", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_modules._PointnetSAModuleBase.__init__": [[28, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "None", "\n", "self", ".", "groupers", "=", "None", "\n", "self", ".", "mlps", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_modules._PointnetSAModuleBase.forward": [[34, 76], ["xyz.transpose().contiguous", "range", "pointnet2_utils.gather_operation().transpose().contiguous", "len", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "new_features.squeeze.squeeze.squeeze", "new_features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.transpose", "pointnet2_utils.gather_operation().transpose", "new_features.squeeze.squeeze.size", "pointnet2_utils.gather_operation", "pointnet2_utils.furthest_point_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "\n", "features", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            (B, N, 3) tensor of the xyz coordinates of the features\n        features : torch.Tensor\n            (B, N, C) tensor of the descriptors of the the features\n\n        Returns\n        -------\n        new_xyz : torch.Tensor\n            (B, npoint, 3) tensor of the new features' xyz\n        new_features : torch.Tensor\n            (B, npoint, \\sum_k(mlps[k][-1])) tensor of the new_features descriptors\n        \"\"\"", "\n", "\n", "new_features_list", "=", "[", "]", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "\n", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "\n", "xyz", ",", "new_xyz", ",", "features", "\n", ")", "# (B, C, npoint, nsample)", "\n", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "\n", "new_features", "\n", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "new_xyz", ",", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_modules.PointnetSAModuleMSG.__init__": [[95, 125], ["pointnet2_modules._PointnetSAModuleBase.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "pointnet2_modules.PointnetSAModuleMSG.groupers.append", "pointnet2_modules.PointnetSAModuleMSG.mlps.append", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "npoint", ":", "int", ",", "\n", "radii", ":", "List", "[", "float", "]", ",", "\n", "nsamples", ":", "List", "[", "int", "]", ",", "\n", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "\n", "sample_uniformly", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "radii", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "mlps", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ",", "sample_uniformly", "=", "sample_uniformly", ")", "\n", "if", "npoint", "is", "not", "None", "else", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "self", ".", "mlps", ".", "append", "(", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_modules.PointnetSAModule.__init__": [[144, 161], ["pointnet2_modules.PointnetSAModuleMSG.__init__"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mlp", ":", "List", "[", "int", "]", ",", "\n", "npoint", ":", "int", "=", "None", ",", "\n", "radius", ":", "float", "=", "None", ",", "\n", "nsample", ":", "int", "=", "None", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "mlps", "=", "[", "mlp", "]", ",", "\n", "npoint", "=", "npoint", ",", "\n", "radii", "=", "[", "radius", "]", ",", "\n", "nsamples", "=", "[", "nsample", "]", ",", "\n", "bn", "=", "bn", ",", "\n", "use_xyz", "=", "use_xyz", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_modules.PointnetSAModuleVotes.__init__": [[168, 208], ["torch.Module.__init__", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll", "len"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mlp", ":", "List", "[", "int", "]", ",", "\n", "npoint", ":", "int", "=", "None", ",", "\n", "radius", ":", "float", "=", "None", ",", "\n", "nsample", ":", "int", "=", "None", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "\n", "pooling", ":", "str", "=", "'max'", ",", "\n", "sigma", ":", "float", "=", "None", ",", "# for RBF pooling", "\n", "normalize_xyz", ":", "bool", "=", "False", ",", "# noramlize local XYZ with radius", "\n", "sample_uniformly", ":", "bool", "=", "False", ",", "\n", "ret_unique_cnt", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "nsample", "=", "nsample", "\n", "self", ".", "pooling", "=", "pooling", "\n", "self", ".", "mlp_module", "=", "None", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "self", ".", "sigma", "=", "sigma", "\n", "if", "self", ".", "sigma", "is", "None", ":", "\n", "            ", "self", ".", "sigma", "=", "self", ".", "radius", "/", "2", "\n", "", "self", ".", "normalize_xyz", "=", "normalize_xyz", "\n", "self", ".", "ret_unique_cnt", "=", "ret_unique_cnt", "\n", "\n", "if", "npoint", "is", "not", "None", ":", "\n", "            ", "self", ".", "grouper", "=", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "\n", "use_xyz", "=", "use_xyz", ",", "ret_grouped_xyz", "=", "True", ",", "normalize_xyz", "=", "normalize_xyz", ",", "\n", "sample_uniformly", "=", "sample_uniformly", ",", "ret_unique_cnt", "=", "ret_unique_cnt", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "grouper", "=", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ",", "ret_grouped_xyz", "=", "True", ")", "\n", "\n", "", "mlp_spec", "=", "mlp", "\n", "if", "use_xyz", "and", "len", "(", "mlp_spec", ")", ">", "0", ":", "\n", "            ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "", "self", ".", "mlp_module", "=", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_modules.PointnetSAModuleVotes.forward": [[210, 273], ["xyz.transpose().contiguous", "pointnet2_modules.PointnetSAModuleVotes.mlp_module", "torch.avg_pool2d.squeeze", "pointnet2_utils.furthest_point_sample", "pointnet2_utils.gather_operation().transpose().contiguous", "pointnet2_modules.PointnetSAModuleVotes.grouper", "pointnet2_modules.PointnetSAModuleVotes.grouper", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "xyz.transpose", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pointnet2_utils.gather_operation().transpose", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.avg_pool2d.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "pointnet2_utils.gather_operation", "torch.avg_pool2d.size", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "grouped_xyz.pow().sum", "grouped_xyz.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "\n", "features", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "inds", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            (B, N, 3) tensor of the xyz coordinates of the features\n        features : torch.Tensor\n            (B, C, N) tensor of the descriptors of the the features\n        inds : torch.Tensor\n            (B, npoint) tensor that stores index to the xyz points (values in 0-N-1)\n\n        Returns\n        -------\n        new_xyz : torch.Tensor\n            (B, npoint, 3) tensor of the new features' xyz\n        new_features : torch.Tensor\n            (B, \\sum_k(mlps[k][-1]), npoint) tensor of the new_features descriptors\n        inds: torch.Tensor\n            (B, npoint) tensor of the inds\n        \"\"\"", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "inds", "is", "None", ":", "\n", "            ", "inds", "=", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "inds", ".", "shape", "[", "1", "]", "==", "self", ".", "npoint", ")", "\n", "", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "inds", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "if", "not", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "grouped_features", ",", "grouped_xyz", "=", "self", ".", "grouper", "(", "\n", "xyz", ",", "new_xyz", ",", "features", "\n", ")", "# (B, C, npoint, nsample)", "\n", "", "else", ":", "\n", "            ", "grouped_features", ",", "grouped_xyz", ",", "unique_cnt", "=", "self", ".", "grouper", "(", "\n", "xyz", ",", "new_xyz", ",", "features", "\n", ")", "# (B, C, npoint, nsample), (B,3,npoint,nsample), (B,npoint)", "\n", "\n", "", "new_features", "=", "self", ".", "mlp_module", "(", "\n", "grouped_features", "\n", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "if", "self", ".", "pooling", "==", "'max'", ":", "\n", "            ", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pooling", "==", "'avg'", ":", "\n", "            ", "new_features", "=", "F", ".", "avg_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pooling", "==", "'rbf'", ":", "\n", "# Use radial basis function kernel for weighted sum of features (normalized by nsample and sigma)", "\n", "# Ref: https://en.wikipedia.org/wiki/Radial_basis_function_kernel", "\n", "            ", "rbf", "=", "torch", ".", "exp", "(", "-", "1", "*", "grouped_xyz", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "False", ")", "/", "(", "self", ".", "sigma", "**", "2", ")", "/", "2", ")", "# (B, npoint, nsample)", "\n", "new_features", "=", "torch", ".", "sum", "(", "new_features", "*", "rbf", ".", "unsqueeze", "(", "1", ")", ",", "-", "1", ",", "keepdim", "=", "True", ")", "/", "float", "(", "self", ".", "nsample", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "\n", "if", "not", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "return", "new_xyz", ",", "new_features", ",", "inds", "\n", "", "else", ":", "\n", "            ", "return", "new_xyz", ",", "new_features", ",", "inds", ",", "unique_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_modules.PointnetSAModuleMSGVotes.__init__": [[278, 308], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "pointnet2_modules.PointnetSAModuleMSGVotes.groupers.append", "pointnet2_modules.PointnetSAModuleMSGVotes.mlps.append", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "\n", "npoint", ":", "int", ",", "\n", "radii", ":", "List", "[", "float", "]", ",", "\n", "nsamples", ":", "List", "[", "int", "]", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "\n", "sample_uniformly", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "len", "(", "mlps", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "radii", ")", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ",", "sample_uniformly", "=", "sample_uniformly", ")", "\n", "if", "npoint", "is", "not", "None", "else", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "self", ".", "mlps", ".", "append", "(", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_modules.PointnetSAModuleMSGVotes.forward": [[309, 354], ["xyz.transpose().contiguous", "range", "pointnet2_utils.furthest_point_sample", "pointnet2_utils.gather_operation().transpose().contiguous", "len", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "new_features.squeeze.squeeze.squeeze", "new_features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.transpose", "pointnet2_utils.gather_operation().transpose", "new_features.squeeze.squeeze.size", "pointnet2_utils.gather_operation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "\n", "features", ":", "torch", ".", "Tensor", "=", "None", ",", "inds", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            (B, N, 3) tensor of the xyz coordinates of the features\n        features : torch.Tensor\n            (B, C, C) tensor of the descriptors of the the features\n        inds : torch.Tensor\n            (B, npoint) tensor that stores index to the xyz points (values in 0-N-1)\n\n        Returns\n        -------\n        new_xyz : torch.Tensor\n            (B, npoint, 3) tensor of the new features' xyz\n        new_features : torch.Tensor\n            (B, \\sum_k(mlps[k][-1]), npoint) tensor of the new_features descriptors\n        inds: torch.Tensor\n            (B, npoint) tensor of the inds\n        \"\"\"", "\n", "new_features_list", "=", "[", "]", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "inds", "is", "None", ":", "\n", "            ", "inds", "=", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", "", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "inds", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "\n", "xyz", ",", "new_xyz", ",", "features", "\n", ")", "# (B, C, npoint, nsample)", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "\n", "new_features", "\n", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "new_xyz", ",", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", ",", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_modules.PointnetFPModule.__init__": [[367, 370], ["torch.Module.__init__", "pytorch_utils.SharedMLP"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "bn", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "pt_utils", ".", "SharedMLP", "(", "mlp", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_modules.PointnetFPModule.forward": [[371, 417], ["torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "pointnet2_modules.PointnetFPModule.mlp", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "pointnet2_utils.three_nn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pointnet2_utils.three_interpolate", "known_feats.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unknown.size", "known_feats.size"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ",", "\n", "unknow_feats", ":", "torch", ".", "Tensor", ",", "known_feats", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        unknown : torch.Tensor\n            (B, n, 3) tensor of the xyz positions of the unknown features\n        known : torch.Tensor\n            (B, m, 3) tensor of the xyz positions of the known features\n        unknow_feats : torch.Tensor\n            (B, C1, n) tensor of the features to be propigated to\n        known_feats : torch.Tensor\n            (B, C2, m) tensor of features to be propigated\n\n        Returns\n        -------\n        new_features : torch.Tensor\n            (B, mlp[-1], n) tensor of the features of the unknown features\n        \"\"\"", "\n", "\n", "if", "known", "is", "not", "None", ":", "\n", "            ", "dist", ",", "idx", "=", "pointnet2_utils", ".", "three_nn", "(", "unknown", ",", "known", ")", "\n", "dist_recip", "=", "1.0", "/", "(", "dist", "+", "1e-8", ")", "\n", "norm", "=", "torch", ".", "sum", "(", "dist_recip", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "dist_recip", "/", "norm", "\n", "\n", "interpolated_feats", "=", "pointnet2_utils", ".", "three_interpolate", "(", "\n", "known_feats", ",", "idx", ",", "weight", "\n", ")", "\n", "", "else", ":", "\n", "            ", "interpolated_feats", "=", "known_feats", ".", "expand", "(", "\n", "*", "known_feats", ".", "size", "(", ")", "[", "0", ":", "2", "]", ",", "unknown", ".", "size", "(", "1", ")", "\n", ")", "\n", "\n", "", "if", "unknow_feats", "is", "not", "None", ":", "\n", "            ", "new_features", "=", "torch", ".", "cat", "(", "[", "interpolated_feats", ",", "unknow_feats", "]", ",", "\n", "dim", "=", "1", ")", "#(B, C2 + C1, n)", "\n", "", "else", ":", "\n", "            ", "new_features", "=", "interpolated_feats", "\n", "\n", "", "new_features", "=", "new_features", ".", "unsqueeze", "(", "-", "1", ")", "\n", "new_features", "=", "self", ".", "mlp", "(", "new_features", ")", "\n", "\n", "return", "new_features", ".", "squeeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_modules.PointnetLFPModuleMSG.__init__": [[422, 453], ["torch.Module.__init__", "pytorch_utils.SharedMLP", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "pointnet2_modules.PointnetLFPModuleMSG.groupers.append", "pointnet2_modules.PointnetLFPModuleMSG.mlps.append", "pointnet2_utils.QueryAndGroup", "pytorch_utils.SharedMLP"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "\n", "radii", ":", "List", "[", "float", "]", ",", "\n", "nsamples", ":", "List", "[", "int", "]", ",", "\n", "post_mlp", ":", "List", "[", "int", "]", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "\n", "sample_uniformly", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "len", "(", "mlps", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "radii", ")", ")", "\n", "\n", "self", ".", "post_mlp", "=", "pt_utils", ".", "SharedMLP", "(", "post_mlp", ",", "bn", "=", "bn", ")", "\n", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ",", "\n", "sample_uniformly", "=", "sample_uniformly", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "self", ".", "mlps", ".", "append", "(", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_modules.PointnetLFPModuleMSG.forward": [[454, 497], ["range", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "len", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "pointnet2_modules.PointnetLFPModuleMSG.post_mlp", "new_features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "xyz2", ":", "torch", ".", "Tensor", ",", "xyz1", ":", "torch", ".", "Tensor", ",", "\n", "features2", ":", "torch", ".", "Tensor", ",", "features1", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "r\"\"\" Propagate features from xyz1 to xyz2.\n        Parameters\n        ----------\n        xyz2 : torch.Tensor\n            (B, N2, 3) tensor of the xyz coordinates of the features\n        xyz1 : torch.Tensor\n            (B, N1, 3) tensor of the xyz coordinates of the features\n        features2 : torch.Tensor\n            (B, C2, N2) tensor of the descriptors of the the features\n        features1 : torch.Tensor\n            (B, C1, N1) tensor of the descriptors of the the features\n\n        Returns\n        -------\n        new_features1 : torch.Tensor\n            (B, \\sum_k(mlps[k][-1]), N1) tensor of the new_features descriptors\n        \"\"\"", "\n", "new_features_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "\n", "xyz1", ",", "xyz2", ",", "features1", "\n", ")", "# (B, C1, N2, nsample)", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "\n", "new_features", "\n", ")", "# (B, mlp[-1], N2, nsample)", "\n", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], N2, 1)", "\n", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], N2)", "\n", "\n", "if", "features2", "is", "not", "None", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "[", "new_features", ",", "features2", "]", ",", "\n", "dim", "=", "1", ")", "#(B, mlp[-1] + C2, N2)", "\n", "\n", "", "new_features", "=", "new_features", ".", "unsqueeze", "(", "-", "1", ")", "\n", "new_features", "=", "self", ".", "post_mlp", "(", "new_features", ")", "\n", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.RandomDropout.__init__": [[41, 45], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", "RandomDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.RandomDropout.forward": [[46, 49], ["pytorch_utils.feature_dropout_no_scaling", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "theta", "=", "torch", ".", "Tensor", "(", "1", ")", ".", "uniform_", "(", "0", ",", "self", ".", "p", ")", "[", "0", "]", "\n", "return", "pt_utils", ".", "feature_dropout_no_scaling", "(", "X", ",", "theta", ",", "self", ".", "train", ",", "self", ".", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.FurthestPointSampling.forward": [[52, 72], ["_ext.furthest_point_sampling"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz", ",", "npoint", ")", ":", "\n", "# type: (Any, torch.Tensor, int) -> torch.Tensor", "\n", "        ", "r\"\"\"\n        Uses iterative furthest point sampling to select a set of npoint features that have the largest\n        minimum distance\n\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            (B, N, 3) tensor where N > npoint\n        npoint : int32\n            number of features in the sampled set\n\n        Returns\n        -------\n        torch.Tensor\n            (B, npoint) tensor containing the set\n        \"\"\"", "\n", "return", "_ext", ".", "furthest_point_sampling", "(", "xyz", ",", "npoint", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.FurthestPointSampling.backward": [[73, 76], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "xyz", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.GatherOperation.forward": [[82, 106], ["features.size", "_ext.gather_points"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "idx", ")", ":", "\n", "# type: (Any, torch.Tensor, torch.Tensor) -> torch.Tensor", "\n", "        ", "r\"\"\"\n\n        Parameters\n        ----------\n        features : torch.Tensor\n            (B, C, N) tensor\n\n        idx : torch.Tensor\n            (B, npoint) tensor of the features to gather\n\n        Returns\n        -------\n        torch.Tensor\n            (B, C, npoint) tensor\n        \"\"\"", "\n", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "C", ",", "N", ")", "\n", "\n", "return", "_ext", ".", "gather_points", "(", "features", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.GatherOperation.backward": [[107, 113], ["_ext.gather_points_grad", "grad_out.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "idx", ",", "C", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "\n", "grad_features", "=", "_ext", ".", "gather_points_grad", "(", "grad_out", ".", "contiguous", "(", ")", ",", "idx", ",", "N", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.ThreeNN.forward": [[119, 141], ["_ext.three_nn", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "unknown", ",", "known", ")", ":", "\n", "# type: (Any, torch.Tensor, torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]", "\n", "        ", "r\"\"\"\n            Find the three nearest neighbors of unknown in known\n        Parameters\n        ----------\n        unknown : torch.Tensor\n            (B, n, 3) tensor of known features\n        known : torch.Tensor\n            (B, m, 3) tensor of unknown features\n\n        Returns\n        -------\n        dist : torch.Tensor\n            (B, n, 3) l2 distance to the three nearest neighbors\n        idx : torch.Tensor\n            (B, n, 3) index of 3 nearest neighbors\n        \"\"\"", "\n", "dist2", ",", "idx", "=", "_ext", ".", "three_nn", "(", "unknown", ",", "known", ")", "\n", "\n", "return", "torch", ".", "sqrt", "(", "dist2", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.ThreeNN.backward": [[142, 145], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ",", "b", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.ThreeInterpolate.forward": [[151, 176], ["features.size", "idx.size", "_ext.three_interpolate"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "idx", ",", "weight", ")", ":", "\n", "# type(Any, torch.Tensor, torch.Tensor, torch.Tensor) -> Torch.Tensor", "\n", "        ", "r\"\"\"\n            Performs weight linear interpolation on 3 features\n        Parameters\n        ----------\n        features : torch.Tensor\n            (B, c, m) Features descriptors to be interpolated from\n        idx : torch.Tensor\n            (B, n, 3) three nearest neighbors of the target features in features\n        weight : torch.Tensor\n            (B, n, 3) weights\n\n        Returns\n        -------\n        torch.Tensor\n            (B, c, n) tensor of the interpolated features\n        \"\"\"", "\n", "B", ",", "c", ",", "m", "=", "features", ".", "size", "(", ")", "\n", "n", "=", "idx", ".", "size", "(", "1", ")", "\n", "\n", "ctx", ".", "three_interpolate_for_backward", "=", "(", "idx", ",", "weight", ",", "m", ")", "\n", "\n", "return", "_ext", ".", "three_interpolate", "(", "features", ",", "idx", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.ThreeInterpolate.backward": [[177, 202], ["_ext.three_interpolate_grad", "grad_out.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "# type: (Any, torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        grad_out : torch.Tensor\n            (B, c, n) tensor with gradients of ouputs\n\n        Returns\n        -------\n        grad_features : torch.Tensor\n            (B, c, m) tensor with gradients of features\n\n        None\n\n        None\n        \"\"\"", "\n", "idx", ",", "weight", ",", "m", "=", "ctx", ".", "three_interpolate_for_backward", "\n", "\n", "grad_features", "=", "_ext", ".", "three_interpolate_grad", "(", "\n", "grad_out", ".", "contiguous", "(", ")", ",", "idx", ",", "weight", ",", "m", "\n", ")", "\n", "\n", "return", "grad_features", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.GroupingOperation.forward": [[208, 231], ["idx.size", "features.size", "_ext.group_points"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "idx", ")", ":", "\n", "# type: (Any, torch.Tensor, torch.Tensor) -> torch.Tensor", "\n", "        ", "r\"\"\"\n\n        Parameters\n        ----------\n        features : torch.Tensor\n            (B, C, N) tensor of features to group\n        idx : torch.Tensor\n            (B, npoint, nsample) tensor containing the indicies of features to group with\n\n        Returns\n        -------\n        torch.Tensor\n            (B, C, npoint, nsample) tensor\n        \"\"\"", "\n", "B", ",", "nfeatures", ",", "nsample", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "N", ")", "\n", "\n", "return", "_ext", ".", "group_points", "(", "features", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.GroupingOperation.backward": [[232, 253], ["_ext.group_points_grad", "grad_out.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "# type: (Any, torch.tensor) -> Tuple[torch.Tensor, torch.Tensor]", "\n", "        ", "r\"\"\"\n\n        Parameters\n        ----------\n        grad_out : torch.Tensor\n            (B, C, npoint, nsample) tensor of the gradients of the output from forward\n\n        Returns\n        -------\n        torch.Tensor\n            (B, C, N) gradient of the features\n        None\n        \"\"\"", "\n", "idx", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "\n", "grad_features", "=", "_ext", ".", "group_points_grad", "(", "grad_out", ".", "contiguous", "(", ")", ",", "idx", ",", "N", ")", "\n", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.BallQuery.forward": [[259, 281], ["_ext.ball_query"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", ":", "\n", "# type: (Any, float, int, torch.Tensor, torch.Tensor) -> torch.Tensor", "\n", "        ", "r\"\"\"\n\n        Parameters\n        ----------\n        radius : float\n            radius of the balls\n        nsample : int\n            maximum number of features in the balls\n        xyz : torch.Tensor\n            (B, N, 3) xyz coordinates of the features\n        new_xyz : torch.Tensor\n            (B, npoint, 3) centers of the ball query\n\n        Returns\n        -------\n        torch.Tensor\n            (B, npoint, nsample) tensor with the indicies of the features that form the query balls\n        \"\"\"", "\n", "return", "_ext", ".", "ball_query", "(", "new_xyz", ",", "xyz", ",", "radius", ",", "nsample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.BallQuery.backward": [[282, 285], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.QueryAndGroup.__init__": [[302, 312], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "self", ",", "radius", ",", "nsample", ",", "use_xyz", "=", "True", ",", "ret_grouped_xyz", "=", "False", ",", "normalize_xyz", "=", "False", ",", "sample_uniformly", "=", "False", ",", "ret_unique_cnt", "=", "False", ")", ":", "\n", "# type: (QueryAndGroup, float, int, bool) -> None", "\n", "        ", "super", "(", "QueryAndGroup", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radius", ",", "self", ".", "nsample", ",", "self", ".", "use_xyz", "=", "radius", ",", "nsample", ",", "use_xyz", "\n", "self", ".", "ret_grouped_xyz", "=", "ret_grouped_xyz", "\n", "self", ".", "normalize_xyz", "=", "normalize_xyz", "\n", "self", ".", "sample_uniformly", "=", "sample_uniformly", "\n", "self", ".", "ret_unique_cnt", "=", "ret_unique_cnt", "\n", "if", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "assert", "(", "self", ".", "sample_uniformly", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.QueryAndGroup.forward": [[313, 373], ["ball_query", "xyz.transpose().contiguous", "grouping_operation", "new_xyz.transpose().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "grouping_operation", "ret.append", "ret.append", "len", "tuple", "range", "xyz.transpose", "new_xyz.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "xyz", ",", "new_xyz", ",", "features", "=", "None", ")", ":", "\n", "# type: (QueryAndGroup, torch.Tensor. torch.Tensor, torch.Tensor) -> Tuple[Torch.Tensor]", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            xyz coordinates of the features (B, N, 3)\n        new_xyz : torch.Tensor\n            centriods (B, npoint, 3)\n        features : torch.Tensor\n            Descriptors of the features (B, C, N)\n\n        Returns\n        -------\n        new_features : torch.Tensor\n            (B, 3 + C, npoint, nsample) tensor\n        \"\"\"", "\n", "idx", "=", "ball_query", "(", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "\n", "if", "self", ".", "sample_uniformly", ":", "\n", "            ", "unique_cnt", "=", "torch", ".", "zeros", "(", "(", "idx", ".", "shape", "[", "0", "]", ",", "idx", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "i_batch", "in", "range", "(", "idx", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "i_region", "in", "range", "(", "idx", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "unique_ind", "=", "torch", ".", "unique", "(", "idx", "[", "i_batch", ",", "i_region", ",", ":", "]", ")", "\n", "num_unique", "=", "unique_ind", ".", "shape", "[", "0", "]", "\n", "unique_cnt", "[", "i_batch", ",", "i_region", "]", "=", "num_unique", "\n", "sample_ind", "=", "torch", ".", "randint", "(", "0", ",", "num_unique", ",", "(", "self", ".", "nsample", "-", "num_unique", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_ind", "=", "torch", ".", "cat", "(", "(", "unique_ind", ",", "unique_ind", "[", "sample_ind", "]", ")", ")", "\n", "idx", "[", "i_batch", ",", "i_region", ",", ":", "]", "=", "all_ind", "\n", "\n", "\n", "", "", "", "xyz_trans", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "grouped_xyz", "=", "grouping_operation", "(", "xyz_trans", ",", "idx", ")", "# (B, 3, npoint, nsample)", "\n", "grouped_xyz", "-=", "new_xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "if", "self", ".", "normalize_xyz", ":", "\n", "            ", "grouped_xyz", "/=", "self", ".", "radius", "\n", "\n", "", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "grouping_operation", "(", "features", ",", "idx", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "\n", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", "\n", ")", "# (B, C + 3, npoint, nsample)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "assert", "(", "\n", "self", ".", "use_xyz", "\n", ")", ",", "\"Cannot have not features and not use xyz as a feature!\"", "\n", "new_features", "=", "grouped_xyz", "\n", "\n", "", "ret", "=", "[", "new_features", "]", "\n", "if", "self", ".", "ret_grouped_xyz", ":", "\n", "            ", "ret", ".", "append", "(", "grouped_xyz", ")", "\n", "", "if", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "ret", ".", "append", "(", "unique_cnt", ")", "\n", "", "if", "len", "(", "ret", ")", "==", "1", ":", "\n", "            ", "return", "ret", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.GroupAll.__init__": [[383, 387], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["def", "__init__", "(", "self", ",", "use_xyz", "=", "True", ",", "ret_grouped_xyz", "=", "False", ")", ":", "\n", "# type: (GroupAll, bool) -> None", "\n", "        ", "super", "(", "GroupAll", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_utils.GroupAll.forward": [[388, 422], ["xyz.transpose().unsqueeze", "features.unsqueeze", "xyz.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "new_xyz", ",", "features", "=", "None", ")", ":", "\n", "# type: (GroupAll, torch.Tensor, torch.Tensor, torch.Tensor) -> Tuple[torch.Tensor]", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            xyz coordinates of the features (B, N, 3)\n        new_xyz : torch.Tensor\n            Ignored\n        features : torch.Tensor\n            Descriptors of the features (B, C, N)\n\n        Returns\n        -------\n        new_features : torch.Tensor\n            (B, C + 3, 1, N) tensor\n        \"\"\"", "\n", "\n", "grouped_xyz", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "features", ".", "unsqueeze", "(", "2", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "\n", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", "\n", ")", "# (B, 3 + C, 1, N)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "new_features", "=", "grouped_xyz", "\n", "\n", "", "if", "self", ".", "ret_grouped_xyz", ":", "\n", "            ", "return", "new_features", ",", "grouped_xyz", "\n", "", "else", ":", "\n", "            ", "return", "new_features", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.SharedMLP.__init__": [[13, 35], ["torch.ReLU", "torch.ReLU", "torch.Sequential.__init__", "range", "pytorch_utils.SharedMLP.add_module", "len", "pytorch_utils.Conv2d"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ":", "List", "[", "int", "]", ",", "\n", "*", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "first", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\n", "name", "+", "'layer{}'", ".", "format", "(", "i", ")", ",", "\n", "Conv2d", "(", "\n", "args", "[", "i", "]", ",", "\n", "args", "[", "i", "+", "1", "]", ",", "\n", "bn", "=", "(", "not", "first", "or", "not", "preact", "or", "(", "i", "!=", "0", ")", ")", "and", "bn", ",", "\n", "activation", "=", "activation", "\n", "if", "(", "not", "first", "or", "not", "preact", "or", "(", "i", "!=", "0", ")", ")", "else", "None", ",", "\n", "preact", "=", "preact", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils._BNBase.__init__": [[41, 47], ["torch.Sequential.__init__", "pytorch_utils._BNBase.add_module", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "batch_norm"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "batch_norm", "=", "None", ",", "name", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "name", "+", "\"bn\"", ",", "batch_norm", "(", "in_size", ")", ")", "\n", "\n", "nn", ".", "init", ".", "constant_", "(", "self", "[", "0", "]", ".", "weight", ",", "1.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", "[", "0", "]", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BatchNorm1d.__init__": [[51, 53], ["pytorch_utils._BNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ":", "int", ",", "*", ",", "name", ":", "str", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_size", ",", "batch_norm", "=", "nn", ".", "BatchNorm1d", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BatchNorm2d.__init__": [[57, 59], ["pytorch_utils._BNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ":", "int", ",", "name", ":", "str", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_size", ",", "batch_norm", "=", "nn", ".", "BatchNorm2d", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BatchNorm3d.__init__": [[63, 65], ["pytorch_utils._BNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ":", "int", ",", "name", ":", "str", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_size", ",", "batch_norm", "=", "nn", ".", "BatchNorm3d", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils._ConvBase.__init__": [[69, 121], ["torch.Sequential.__init__", "conv", "init", "pytorch_utils._ConvBase.add_module", "torch.init.constant_", "torch.init.constant_", "batch_norm", "batch_norm", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "None", ",", "\n", "batch_norm", "=", "None", ",", "\n", "bias", "=", "True", ",", "\n", "preact", "=", "False", ",", "\n", "name", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "bias", "=", "bias", "and", "(", "not", "bn", ")", "\n", "conv_unit", "=", "conv", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "bias", "\n", ")", "\n", "init", "(", "conv_unit", ".", "weight", ")", "\n", "if", "bias", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "conv_unit", ".", "bias", ",", "0", ")", "\n", "\n", "", "if", "bn", ":", "\n", "            ", "if", "not", "preact", ":", "\n", "                ", "bn_unit", "=", "batch_norm", "(", "out_size", ")", "\n", "", "else", ":", "\n", "                ", "bn_unit", "=", "batch_norm", "(", "in_size", ")", "\n", "\n", "", "", "if", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "bn_unit", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n", "", "", "self", ".", "add_module", "(", "name", "+", "'conv'", ",", "conv_unit", ")", "\n", "\n", "if", "not", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "bn_unit", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.Conv1d.__init__": [[125, 154], ["torch.ReLU", "torch.ReLU", "pytorch_utils._ConvBase.__init__"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "kernel_size", ":", "int", "=", "1", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "padding", ":", "int", "=", "0", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "nn", ".", "Conv1d", ",", "\n", "batch_norm", "=", "BatchNorm1d", ",", "\n", "bias", "=", "bias", ",", "\n", "preact", "=", "preact", ",", "\n", "name", "=", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.Conv2d.__init__": [[159, 188], ["torch.ReLU", "torch.ReLU", "pytorch_utils._ConvBase.__init__"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "kernel_size", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "0", ",", "0", ")", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "nn", ".", "Conv2d", ",", "\n", "batch_norm", "=", "BatchNorm2d", ",", "\n", "bias", "=", "bias", ",", "\n", "preact", "=", "preact", ",", "\n", "name", "=", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.Conv3d.__init__": [[193, 222], ["torch.ReLU", "torch.ReLU", "pytorch_utils._ConvBase.__init__"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "kernel_size", ":", "Tuple", "[", "int", ",", "int", ",", "int", "]", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "stride", ":", "Tuple", "[", "int", ",", "int", ",", "int", "]", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", ":", "Tuple", "[", "int", ",", "int", ",", "int", "]", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "nn", ".", "Conv3d", ",", "\n", "batch_norm", "=", "BatchNorm3d", ",", "\n", "bias", "=", "bias", ",", "\n", "preact", "=", "preact", ",", "\n", "name", "=", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.FC.__init__": [[227, 261], ["torch.ReLU", "torch.ReLU", "torch.Sequential.__init__", "torch.Linear", "torch.Linear", "pytorch_utils.FC.add_module", "init", "torch.init.constant_", "torch.init.constant_", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.BatchNorm1d", "pytorch_utils.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "None", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "fc", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ",", "bias", "=", "not", "bn", ")", "\n", "if", "init", "is", "not", "None", ":", "\n", "            ", "init", "(", "fc", ".", "weight", ")", "\n", "", "if", "not", "bn", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "fc", ".", "bias", ",", "0", ")", "\n", "\n", "", "if", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "BatchNorm1d", "(", "in_size", ")", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n", "", "", "self", ".", "add_module", "(", "name", "+", "'fc'", ",", "fc", ")", "\n", "\n", "if", "not", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "BatchNorm1d", "(", "out_size", ")", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.__init__": [[273, 290], ["pytorch_utils.BNMomentumScheduler.step", "isinstance", "RuntimeError", "type"], "methods", ["home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.step"], ["    ", "def", "__init__", "(", "\n", "self", ",", "model", ",", "bn_lambda", ",", "last_epoch", "=", "-", "1", ",", "\n", "setter", "=", "set_bn_momentum_default", "\n", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Class '{}' is not a PyTorch nn Module\"", ".", "format", "(", "\n", "type", "(", "model", ")", ".", "__name__", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "setter", "=", "setter", "\n", "self", ".", "lmbd", "=", "bn_lambda", "\n", "\n", "self", ".", "step", "(", "last_epoch", "+", "1", ")", "\n", "self", ".", "last_epoch", "=", "last_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.BNMomentumScheduler.step": [[291, 297], ["pytorch_utils.BNMomentumScheduler.model.apply", "pytorch_utils.BNMomentumScheduler.setter", "pytorch_utils.BNMomentumScheduler.lmbd"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "\n", "", "self", ".", "last_epoch", "=", "epoch", "\n", "self", ".", "model", ".", "apply", "(", "self", ".", "setter", "(", "self", ".", "lmbd", "(", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pytorch_utils.set_bn_momentum_default": [[262, 269], ["isinstance"], "function", ["None"], ["", "", "", "", "def", "set_bn_momentum_default", "(", "bn_momentum", ")", ":", "\n", "\n", "    ", "def", "fn", "(", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "            ", "m", ".", "momentum", "=", "bn_momentum", "\n", "\n", "", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.NUAAXQ_MLCVNet.pointnet2.pointnet2_test.test_interpolation_grad": [[18, 31], ["torch.randn().float().cuda", "torch.autograd.gradcheck", "torch.from_numpy().int().cuda", "torch.from_numpy().float().cuda", "pointnet2_utils.three_interpolate", "torch.randn().float", "torch.from_numpy().int", "torch.from_numpy().float", "torch.randn", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array"], "function", ["None"], ["def", "test_interpolation_grad", "(", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "feat_dim", "=", "2", "\n", "m", "=", "4", "\n", "feats", "=", "torch", ".", "randn", "(", "batch_size", ",", "feat_dim", ",", "m", ",", "requires_grad", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "def", "interpolate_func", "(", "inputs", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "1", ",", "2", ",", "3", "]", "]", "]", ")", ")", ".", "int", "(", ")", ".", "cuda", "(", ")", "\n", "weight", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "2", ",", "2", ",", "2", "]", "]", "]", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "interpolated_feats", "=", "pointnet2_utils", ".", "three_interpolate", "(", "inputs", ",", "idx", ",", "weight", ")", "\n", "return", "interpolated_feats", "\n", "\n", "", "assert", "(", "gradcheck", "(", "interpolate_func", ",", "feats", ",", "atol", "=", "1e-1", ",", "rtol", "=", "1e-1", ")", ")", "\n", "\n"]]}