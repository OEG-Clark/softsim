{"home.repos.pwc.inspect_result.microsoft_bidr.None.inference.prediction": [[22, 60], ["os.makedirs", "torch.utils.data.dataloader.DataLoader", "len", "logger.info", "logger.info", "logger.info", "torch.nn.DataParallel.eval", "enumerate", "torch.nn.DataParallel", "tqdm.tqdm", "inputs.items", "len", "len", "len", "torch.utils.data.sampler.SequentialSampler", "isinstance", "torch.no_grad", "len", "v.to", "torch.nn.DataParallel.", "logits.detach().cpu().numpy.detach().cpu().numpy", "torch.nn.DataParallel.", "logits.detach().cpu().numpy.detach().cpu().numpy", "logits.detach().cpu().numpy.detach().cpu", "logits.detach().cpu().numpy.detach().cpu", "logits.detach().cpu().numpy.detach", "logits.detach().cpu().numpy.detach"], "function", ["None"], ["def", "prediction", "(", "model", ",", "data_collator", ",", "args", ",", "test_dataset", ",", "embedding_memmap", ",", "ids_memmap", ",", "is_query", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "args", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "sampler", "=", "SequentialSampler", "(", "test_dataset", ")", ",", "\n", "batch_size", "=", "args", ".", "eval_batch_size", "*", "args", ".", "n_gpu", ",", "\n", "collate_fn", "=", "data_collator", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "if", "args", ".", "n_gpu", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "batch_size", "=", "test_dataloader", ".", "batch_size", "\n", "num_examples", "=", "len", "(", "test_dataloader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "\"***** Running *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "num_examples", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "batch_size", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "write_index", "=", "0", "\n", "for", "step", ",", "(", "inputs", ",", "ids", ")", "in", "enumerate", "(", "tqdm", "(", "test_dataloader", ")", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "inputs", "[", "k", "]", "=", "v", ".", "to", "(", "args", ".", "device", ")", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "not", "is_query", ":", "\n", "                ", "logits", "=", "model", "(", "is_query", "=", "is_query", ",", "**", "inputs", ")", "\n", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "logits", "=", "model", "(", "is_query", "=", "is_query", ",", "**", "inputs", ")", "\n", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "", "write_size", "=", "len", "(", "logits", ")", "\n", "assert", "write_size", "==", "len", "(", "ids", ")", "\n", "embedding_memmap", "[", "write_index", ":", "write_index", "+", "write_size", "]", "=", "logits", "\n", "ids_memmap", "[", "write_index", ":", "write_index", "+", "write_size", "]", "=", "ids", "\n", "write_index", "+=", "write_size", "\n", "", "assert", "write_index", "==", "len", "(", "embedding_memmap", ")", "==", "len", "(", "ids_memmap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.None.inference.query_inference": [[61, 81], ["os.path.exists", "dataset.dataset.single_get_collate_function", "dataset.dataset.SequenceDataset", "os.path.exists", "numpy.memmap", "numpy.memmap", "inference.prediction", "open", "print", "os.remove", "dataset.dataset.TextTokenIdsCache", "len", "len"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.single_get_collate_function", "home.repos.pwc.inspect_result.microsoft_bidr.None.inference.prediction"], ["", "def", "query_inference", "(", "model", ",", "args", ",", "embedding_size", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "query_memmap_path", "+", "'_finished.flag'", ")", ":", "\n", "        ", "print", "(", "f\"{args.query_memmap_path} exists, skip inference\"", ")", "\n", "return", "\n", "", "query_collator", "=", "single_get_collate_function", "(", "args", ".", "max_query_length", ")", "\n", "query_dataset", "=", "SequenceDataset", "(", "\n", "ids_cache", "=", "TextTokenIdsCache", "(", "data_dir", "=", "args", ".", "preprocess_dir", ",", "prefix", "=", "f\"{args.mode}-query\"", ")", ",", "\n", "max_seq_length", "=", "args", ".", "max_query_length", "\n", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "query_memmap_path", ")", ":", "os", ".", "remove", "(", "args", ".", "query_memmap_path", ")", "\n", "query_memmap", "=", "np", ".", "memmap", "(", "args", ".", "query_memmap_path", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "mode", "=", "\"w+\"", ",", "shape", "=", "(", "len", "(", "query_dataset", ")", ",", "embedding_size", ")", ")", "\n", "queryids_memmap", "=", "np", ".", "memmap", "(", "args", ".", "queryids_memmap_path", ",", "\n", "dtype", "=", "np", ".", "int32", ",", "mode", "=", "\"w+\"", ",", "shape", "=", "(", "len", "(", "query_dataset", ")", ",", ")", ")", "\n", "\n", "prediction", "(", "model", ",", "query_collator", ",", "args", ",", "\n", "query_dataset", ",", "query_memmap", ",", "queryids_memmap", ",", "is_query", "=", "True", ")", "\n", "\n", "open", "(", "args", ".", "query_memmap_path", "+", "'_finished.flag'", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.None.inference.doc_inference": [[82, 105], ["os.path.exists", "dataset.dataset.single_get_collate_function", "dataset.dataset.TextTokenIdsCache", "list", "dataset.dataset.SubsetSeqDataset", "os.path.exists", "numpy.memmap", "numpy.memmap", "inference.prediction", "open", "print", "range", "os.remove", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.single_get_collate_function", "home.repos.pwc.inspect_result.microsoft_bidr.None.inference.prediction"], ["", "def", "doc_inference", "(", "model", ",", "args", ",", "embedding_size", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "doc_memmap_path", "+", "'_finished.flag'", ")", ":", "\n", "        ", "print", "(", "f\"{args.doc_memmap_path} exists, skip inference\"", ")", "\n", "return", "\n", "", "doc_collator", "=", "single_get_collate_function", "(", "args", ".", "max_doc_length", ")", "\n", "ids_cache", "=", "TextTokenIdsCache", "(", "data_dir", "=", "args", ".", "preprocess_dir", ",", "prefix", "=", "\"passages\"", ")", "\n", "subset", "=", "list", "(", "range", "(", "len", "(", "ids_cache", ")", ")", ")", "\n", "doc_dataset", "=", "SubsetSeqDataset", "(", "\n", "subset", "=", "subset", ",", "\n", "ids_cache", "=", "ids_cache", ",", "\n", "max_seq_length", "=", "args", ".", "max_doc_length", "\n", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "doc_memmap_path", ")", ":", "os", ".", "remove", "(", "args", ".", "doc_memmap_path", ")", "\n", "\n", "doc_memmap", "=", "np", ".", "memmap", "(", "args", ".", "doc_memmap_path", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "mode", "=", "\"w+\"", ",", "shape", "=", "(", "len", "(", "doc_dataset", ")", ",", "embedding_size", ")", ")", "\n", "docid_memmap", "=", "np", ".", "memmap", "(", "args", ".", "docid_memmap_path", ",", "\n", "dtype", "=", "np", ".", "int32", ",", "mode", "=", "\"w+\"", ",", "shape", "=", "(", "len", "(", "doc_dataset", ")", ",", ")", ")", "\n", "prediction", "(", "model", ",", "doc_collator", ",", "args", ",", "\n", "doc_dataset", ",", "doc_memmap", ",", "docid_memmap", ",", "is_query", "=", "False", "\n", ")", "\n", "open", "(", "args", ".", "doc_memmap_path", "+", "'_finished.flag'", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.None.inference.main": [[107, 148], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.device", "torch.cuda.device_count", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "logger.info", "os.makedirs", "transformers.RobertaConfig.from_pretrained", "model.model.RobertaDot", "model.to.load_state_dict", "model.to.to", "inference.doc_inference", "inference.query_inference", "os.path.join", "torch.load", "parser.parse_args.gpu_rank.split", "torch.cuda.is_available", "os.path.join"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.None.inference.doc_inference", "home.repos.pwc.inspect_result.microsoft_bidr.None.inference.query_inference"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_type\"", ",", "choices", "=", "[", "\"passage\"", ",", "'doc'", "]", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--preprocess_dir\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_query_length\"", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_doc_length\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"train\"", ",", "\"dev\"", ",", "\"test\"", ",", "\"test2019\"", ",", "\"test2020\"", "]", ",", "default", "=", "'dev'", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_path\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "default", "=", "'evaluate/'", ")", "\n", "parser", ".", "add_argument", "(", "\"--root_output_dir\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "default", "=", "'./data'", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu_rank\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "default", "=", "None", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "gpu_rank", "is", "not", "None", ":", "\n", "        ", "gpus", "=", "','", ".", "join", "(", "args", ".", "gpu_rank", ".", "split", "(", "'_'", ")", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpus", "\n", "", "args", ".", "device", "=", "torch", ".", "device", "(", "\n", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "args", ".", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "print", "(", "f'------------------------use dataset: {args.preprocess_dir}------------------------'", ")", "\n", "args", ".", "output_dir", "=", "os", ".", "path", ".", "join", "(", "f\"{args.root_output_dir}/{args.data_type}/\"", ",", "args", ".", "output_dir", ")", "\n", "\n", "args", ".", "doc_memmap_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"passages.memmap\"", ")", "\n", "args", ".", "docid_memmap_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"passages-id.memmap\"", ")", "\n", "args", ".", "query_memmap_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{args.mode}-query.memmap\"", ")", "\n", "args", ".", "queryids_memmap_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{args.mode}-query-id.memmap\"", ")", "\n", "\n", "logger", ".", "info", "(", "args", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "config", "=", "RobertaConfig", ".", "from_pretrained", "(", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_path", ",", "'config.json'", ")", ",", "gradient_checkpointing", "=", "False", ")", "\n", "model", "=", "RobertaDot", "(", "config", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_path", ",", "'pytorch_model.bin'", ")", ")", ")", "\n", "\n", "output_embedding_size", "=", "model", ".", "output_embedding_size", "\n", "model", "=", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "doc_inference", "(", "model", ",", "args", ",", "output_embedding_size", ")", "\n", "query_inference", "(", "model", ",", "args", ",", "output_embedding_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.None.train.train": [[26, 160], ["utils.utils.setuplogging", "logger.info", "str", "utils.utils.setup_worker", "torch.device", "torch.device", "torch.device", "utils.utils.init_config", "model.model.RobertaDotTrainModel.from_pretrained", "RobertaDotTrainModel.from_pretrained.to", "torch.nn.parallel.DistributedDataParallel", "dataset.dataloader.DataloaderForSubGraphHard", "utils.utils.create_optimizer_and_scheduler", "time.time", "range", "torch.load", "torch.load", "torch.load", "print", "RobertaDotTrainModel.from_pretrained.load_state_dict", "int", "torch.nn.parallel.DistributedDataParallel.train", "enumerate", "logging.info", "torch.barrier", "sys.exc_info", "traceback.print_tb", "logging.info", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "bool", "os.path.join", "torch.load.keys", "os.path.join", "dataset.dataset.TextTokenIdsCache", "dataset.dataset.TextTokenIdsCache", "len", "torch.nn.parallel.DistributedDataParallel.module.query_emb", "torch.nn.parallel.DistributedDataParallel", "batch_loss.item", "batch_match_loss.item", "batch_loss.backward", "torch.barrier", "os.path.join", "pathlib.Path().mkdir", "torch.save", "torch.save", "torch.save", "utils.utils.init_config.to_json_file", "logging.info", "torch.load.items", "torch.nn.parallel.DistributedDataParallel.module.body_emb", "k_emb.detach", "n_emb.detach", "utils.utils.dist_gather_tensor", "utils.utils.dist_gather_tensor", "utils.utils.dist_gather_tensor", "isinstance", "batch_match_quant_loss.item", "batch_l2loss.item", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "scheduler.step", "optimizer.zero_grad", "RobertaDotTrainModel.from_pretrained.state_dict", "os.path.join", "os.path.join", "x.cuda", "torch.nn.parallel.DistributedDataParallel.module.quant", "torch.nn.parallel.DistributedDataParallel.module.body_emb", "torch.nn.parallel.DistributedDataParallel.module.quant", "torch.nn.parallel.DistributedDataParallel.module.quant", "torch.nn.parallel.DistributedDataParallel.module.quant", "utils.utils.dist_gather_tensor", "utils.utils.dist_gather_tensor", "RobertaDotTrainModel.from_pretrained.parameters", "logging.info", "os.path.join", "pathlib.Path().mkdir", "torch.save", "torch.save", "torch.save", "utils.utils.init_config.to_json_file", "logging.info", "time.time", "pathlib.Path", "RobertaDotTrainModel.from_pretrained.state_dict", "os.path.join", "os.path.join", "pathlib.Path"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.setuplogging", "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.setup_worker", "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.init_config", "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.create_optimizer_and_scheduler", "home.repos.pwc.inspect_result.microsoft_bidr.None.train.train", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.BaseModelDot.query_emb", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.BaseModelDot.body_emb", "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.dist_gather_tensor", "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.dist_gather_tensor", "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.dist_gather_tensor", "home.repos.pwc.inspect_result.microsoft_bidr.utils.lamb.Lamb.step", "home.repos.pwc.inspect_result.microsoft_bidr.utils.lamb.Lamb.step", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.quant", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.BaseModelDot.body_emb", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.quant", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.quant", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.quant", "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.dist_gather_tensor", "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.dist_gather_tensor"], ["def", "train", "(", "local_rank", ",", "model_args", ",", "data_args", ",", "training_args", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "setuplogging", "(", ")", "\n", "logger", ".", "info", "(", "f\"Training/evaluation parameters {training_args}\"", ")", "\n", "\n", "os", ".", "environ", "[", "\"RANK\"", "]", "=", "str", "(", "local_rank", ")", "\n", "setup_worker", "(", "local_rank", ",", "training_args", ".", "world_size", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ",", "\n", "local_rank", ")", "\n", "\n", "config", "=", "init_config", "(", "model_args", ",", "data_args", ",", "training_args", ")", "\n", "model", "=", "RobertaDotTrainModel", ".", "from_pretrained", "(", "\n", "model_args", ".", "model_name_or_path", ",", "\n", "from_tf", "=", "bool", "(", "\".ckpt\"", "in", "model_args", ".", "model_name_or_path", ")", ",", "\n", "config", "=", "config", "\n", ")", "\n", "if", "model_args", ".", "pq_path", "is", "not", "None", ":", "\n", "            ", "pq_ckpt", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "model_args", ".", "pq_path", ",", "'pytorch_model.bin'", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "pq_ckpt", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pq_ckpt", ".", "items", "(", ")", "if", "k", "in", "(", "'rotate'", ",", "'codebook'", ")", "}", "\n", "print", "(", "'loading...'", ",", "pq_ckpt", ".", "keys", "(", ")", ")", "\n", "model", ".", "load_state_dict", "(", "pq_ckpt", ",", "strict", "=", "False", ")", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "ddp_model", "=", "DDP", "(", "model", ",", "\n", "device_ids", "=", "[", "local_rank", "]", ",", "\n", "output_device", "=", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ")", "\n", "\n", "dataloader", "=", "DataloaderForSubGraphHard", "(", "\n", "args", "=", "training_args", ",", "\n", "rel_file", "=", "os", ".", "path", ".", "join", "(", "data_args", ".", "data_dir", ",", "\"train-qrel.tsv\"", ")", ",", "\n", "rank_file", "=", "data_args", ".", "hardneg_json", ",", "\n", "queryids_cache", "=", "TextTokenIdsCache", "(", "data_dir", "=", "data_args", ".", "data_dir", ",", "prefix", "=", "\"train-query\"", ")", ",", "\n", "max_query_length", "=", "data_args", ".", "max_query_length", ",", "\n", "docids_cache", "=", "TextTokenIdsCache", "(", "data_dir", "=", "data_args", ".", "data_dir", ",", "prefix", "=", "\"passages\"", ")", ",", "\n", "max_doc_length", "=", "data_args", ".", "max_doc_length", ",", "\n", "local_rank", "=", "local_rank", ",", "\n", "world_size", "=", "training_args", ".", "world_size", ",", "\n", "enable_prefetch", "=", "True", ",", "\n", "random_seed", "=", "training_args", ".", "seed", ",", "\n", "enable_gpu", "=", "True", ",", "\n", "infer_path", "=", "training_args", ".", "infer_path", "\n", ")", "\n", "\n", "all_step_num", "=", "len", "(", "dataloader", ")", "*", "training_args", ".", "num_train_epochs", "//", "(", "training_args", ".", "per_device_train_batch_size", "*", "training_args", ".", "world_size", ")", "\n", "optimizer", ",", "scheduler", "=", "create_optimizer_and_scheduler", "(", "training_args", ",", "ddp_model", ",", "all_step_num", ")", "\n", "\n", "global_step", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "loss", ",", "match_loss", ",", "match_quant_loss", ",", "l2_loss", "=", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "for", "ep", "in", "range", "(", "int", "(", "training_args", ".", "num_train_epochs", ")", ")", ":", "\n", "            ", "ddp_model", ".", "train", "(", ")", "\n", "for", "step", ",", "sample", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "                ", "input_query_ids", ",", "query_attention_mask", ",", "input_doc_ids", ",", "doc_attention_mask", ",", "neg_doc_ids", ",", "neg_doc_attention_mask", ",", "rel_pair_mask", ",", "hard_pair_mask", ",", "q_emb", ",", "k_emb", ",", "n_emb", "=", "(", "x", ".", "cuda", "(", "device", "=", "device", ",", "non_blocking", "=", "True", ")", "if", "x", "is", "not", "None", "else", "None", "for", "x", "in", "sample", ")", "\n", "\n", "q_vecs", "=", "ddp_model", ".", "module", ".", "query_emb", "(", "input_query_ids", ",", "query_attention_mask", ")", "\n", "if", "not", "training_args", ".", "fix_doc_emb", ":", "\n", "                    ", "k_vecs", "=", "ddp_model", ".", "module", ".", "body_emb", "(", "input_doc_ids", ",", "doc_attention_mask", ")", "\n", "quant_k", "=", "ddp_model", ".", "module", ".", "quant", "(", "k_vecs", ")", "if", "training_args", ".", "use_pq", "else", "None", "\n", "n_vecs", "=", "ddp_model", ".", "module", ".", "body_emb", "(", "neg_doc_ids", ",", "neg_doc_attention_mask", ")", "if", "neg_doc_ids", "is", "not", "None", "else", "None", "\n", "quant_n", "=", "ddp_model", ".", "module", ".", "quant", "(", "n_vecs", ")", "if", "training_args", ".", "use_pq", "else", "None", "\n", "", "else", ":", "\n", "                    ", "k_vecs", "=", "k_emb", ".", "detach", "(", ")", "\n", "n_vecs", "=", "n_emb", ".", "detach", "(", ")", "\n", "quant_k", "=", "ddp_model", ".", "module", ".", "quant", "(", "k_vecs", ")", "if", "training_args", ".", "use_pq", "else", "None", "\n", "quant_n", "=", "ddp_model", ".", "module", ".", "quant", "(", "n_vecs", ")", "if", "training_args", ".", "use_pq", "else", "None", "\n", "\n", "", "if", "training_args", ".", "world_size", ">", "1", ":", "\n", "                    ", "q_vecs", "=", "dist_gather_tensor", "(", "q_vecs", ",", "training_args", ".", "world_size", ",", "local_rank", ")", "\n", "k_vecs", "=", "dist_gather_tensor", "(", "k_vecs", ",", "training_args", ".", "world_size", ",", "local_rank", ")", "\n", "n_vecs", "=", "dist_gather_tensor", "(", "n_vecs", ",", "training_args", ".", "world_size", ",", "local_rank", ")", "\n", "if", "training_args", ".", "use_pq", ":", "\n", "                        ", "quant_k", "=", "dist_gather_tensor", "(", "quant_k", ",", "training_args", ".", "world_size", ",", "local_rank", ")", "\n", "quant_n", "=", "dist_gather_tensor", "(", "quant_n", ",", "training_args", ".", "world_size", ",", "local_rank", ")", "\n", "\n", "", "", "batch_loss", ",", "batch_match_loss", ",", "batch_match_quant_loss", ",", "batch_l2loss", "=", "ddp_model", "(", "q_vecs", ",", "k_vecs", ",", "n_vecs", ",", "\n", "rel_pair_mask", "=", "rel_pair_mask", ",", "hard_pair_mask", "=", "hard_pair_mask", ",", "\n", "loss_method", "=", "training_args", ".", "loss_method", ",", "\n", "temperature", "=", "training_args", ".", "temperature", ",", "\n", "hard_k", "=", "quant_k", ",", "hard_n", "=", "quant_n", ",", "quant_weight", "=", "training_args", ".", "quantloss_weight", ")", "\n", "\n", "loss", "+=", "batch_loss", ".", "item", "(", ")", "\n", "match_loss", "+=", "batch_match_loss", ".", "item", "(", ")", "\n", "if", "not", "isinstance", "(", "batch_match_quant_loss", ",", "float", ")", ":", "\n", "                    ", "match_quant_loss", "+=", "batch_match_quant_loss", ".", "item", "(", ")", "\n", "l2_loss", "+=", "batch_l2loss", ".", "item", "(", ")", "\n", "\n", "", "batch_loss", ".", "backward", "(", ")", "\n", "if", "training_args", ".", "max_grad_norm", "!=", "-", "1", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "training_args", ".", "max_grad_norm", ")", "\n", "\n", "", "if", "(", "step", "+", "1", ")", "%", "training_args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                    ", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "global_step", "+=", "1", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "global_step", "%", "training_args", ".", "logging_steps", "==", "0", ":", "\n", "                        ", "logging", ".", "info", "(", "'[{}] step:{}, lr:{}, train_loss: {:.5f} = {:.5f} + {:.5f} + {:.5f}'", ".", "\n", "format", "(", "local_rank", ",", "\n", "global_step", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "loss", "/", "training_args", ".", "logging_steps", ",", "\n", "match_loss", "/", "training_args", ".", "logging_steps", ",", "\n", "match_quant_loss", "/", "training_args", ".", "logging_steps", ",", "\n", "l2_loss", "/", "training_args", ".", "logging_steps", ")", ")", "\n", "loss", ",", "match_loss", ",", "match_quant_loss", ",", "l2_loss", "=", "0.0", ",", "0.0", ",", "0.0", ",", "0.0", "\n", "\n", "", "if", "global_step", "%", "training_args", ".", "save_steps", "==", "0", "and", "local_rank", "==", "0", ":", "\n", "                        ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "data_args", ".", "save_model_path", ",", "\n", "f'{data_args.savename}/{global_step}/'", ")", "\n", "Path", "(", "ckpt_path", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "'pytorch_model.bin'", ")", ")", "\n", "config", ".", "to_json_file", "(", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "'config.json'", ")", ")", "\n", "logging", ".", "info", "(", "f\"Model saved to {ckpt_path}\"", ")", "\n", "", "", "dist", ".", "barrier", "(", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"train time:{}\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "if", "local_rank", "==", "0", "and", "ep", "%", "1", "==", "0", ":", "\n", "                ", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "data_args", ".", "save_model_path", ",", "\n", "f'{data_args.savename}/{ep}/'", ")", "\n", "Path", "(", "ckpt_path", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "'pytorch_model.bin'", ")", ")", "\n", "config", ".", "to_json_file", "(", "os", ".", "path", ".", "join", "(", "ckpt_path", ",", "'config.json'", ")", ")", "\n", "logging", ".", "info", "(", "f\"Model saved to {ckpt_path}\"", ")", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "", "", "except", ":", "\n", "        ", "error_type", ",", "error_value", ",", "error_trace", "=", "sys", ".", "exc_info", "(", ")", "\n", "traceback", ".", "print_tb", "(", "error_trace", ")", "\n", "logging", ".", "info", "(", "error_value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.None.train.main": [[162, 183], ["utils.utils.setuplogging", "transformers.HfArgumentParser", "transformers.HfArgumentParser.parse_args_into_dataclasses", "logging.info", "logging.info", "logging.info", "training_args.gpu_rank.split", "train.train", "torch.spawn"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.setuplogging", "home.repos.pwc.inspect_result.microsoft_bidr.None.train.train"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "setuplogging", "(", ")", "\n", "parser", "=", "HfArgumentParser", "(", "(", "ModelArguments", ",", "DataTrainingArguments", ",", "MyTrainingArguments", ")", ")", "\n", "model_args", ",", "data_args", ",", "training_args", "=", "parser", ".", "parse_args_into_dataclasses", "(", ")", "\n", "\n", "gpus", "=", "','", ".", "join", "(", "training_args", ".", "gpu_rank", ".", "split", "(", "'_'", ")", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "gpus", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'localhost'", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "training_args", ".", "master_port", "\n", "\n", "logging", ".", "info", "(", "training_args", ")", "\n", "logging", ".", "info", "(", "model_args", ")", "\n", "logging", ".", "info", "(", "data_args", ")", "\n", "\n", "if", "training_args", ".", "world_size", "==", "1", ":", "\n", "        ", "train", "(", "0", ",", "model_args", ",", "data_args", ",", "training_args", ")", "\n", "", "else", ":", "\n", "        ", "mp", ".", "spawn", "(", "train", ",", "\n", "args", "=", "(", "model_args", ",", "data_args", ",", "training_args", ")", ",", "\n", "nprocs", "=", "training_args", ".", "world_size", ",", "\n", "join", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.lamb.Lamb.__init__": [[45, 59], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.model.model.RobertaDot.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-6", ",", "\n", "weight_decay", "=", "0", ",", "adam", "=", "False", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "self", ".", "adam", "=", "adam", "\n", "super", "(", "Lamb", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.lamb.Lamb.step": [[60, 124], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.pow().sum().sqrt().clamp", "adam_step.pow().sum().sqrt", "p.data.add_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "exp_avg_sq.sqrt().add", "adam_step.add_", "exp_avg.mul_", "exp_avg_sq.mul_", "p.data.pow().sum().sqrt", "adam_step.pow().sum", "exp_avg_sq.sqrt", "p.data.pow().sum", "adam_step.pow", "p.data.pow"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Lamb does not support sparse gradients, consider SparseAdam instad.'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# m_t", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "# v_t", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "\n", "# Paper v3 does not use debiasing.", "\n", "# Apply bias to lr to avoid broadcast.", "\n", "step_size", "=", "group", "[", "'lr'", "]", "# * math.sqrt(bias_correction2) / bias_correction1", "\n", "\n", "weight_norm", "=", "p", ".", "data", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", ".", "clamp", "(", "0", ",", "10", ")", "\n", "\n", "adam_step", "=", "exp_avg", "/", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add", "(", "group", "[", "'eps'", "]", ")", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "adam_step", ".", "add_", "(", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "adam_norm", "=", "adam_step", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", ".", "sqrt", "(", ")", "\n", "if", "weight_norm", "==", "0", "or", "adam_norm", "==", "0", ":", "\n", "                    ", "trust_ratio", "=", "1", "\n", "", "else", ":", "\n", "                    ", "trust_ratio", "=", "weight_norm", "/", "adam_norm", "\n", "", "state", "[", "'weight_norm'", "]", "=", "weight_norm", "\n", "state", "[", "'adam_norm'", "]", "=", "adam_norm", "\n", "state", "[", "'trust_ratio'", "]", "=", "trust_ratio", "\n", "if", "self", ".", "adam", ":", "\n", "                    ", "trust_ratio", "=", "1", "\n", "\n", "", "p", ".", "data", ".", "add_", "(", "-", "step_size", "*", "trust_ratio", ",", "adam_step", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.lamb.log_lamb_rs": [[11, 23], ["collections.defaultdict", "collections.defaultdict.items", "event_writer.add_histogram", "torch.tensor", "results[].append"], "function", ["None"], ["def", "log_lamb_rs", "(", "optimizer", ":", "Optimizer", ",", "event_writer", ":", "SummaryWriter", ",", "token_count", ":", "int", ")", ":", "\n", "    ", "\"\"\"Log a histogram of trust ratio scalars in across layers.\"\"\"", "\n", "results", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "            ", "state", "=", "optimizer", ".", "state", "[", "p", "]", "\n", "for", "i", "in", "(", "'weight_norm'", ",", "'adam_norm'", ",", "'trust_ratio'", ")", ":", "\n", "                ", "if", "i", "in", "state", ":", "\n", "                    ", "results", "[", "i", "]", ".", "append", "(", "state", "[", "i", "]", ")", "\n", "\n", "", "", "", "", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "event_writer", ".", "add_histogram", "(", "f'lamb/{k}'", ",", "torch", ".", "tensor", "(", "v", ")", ",", "token_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.load_reference_from_stream": [[12, 39], ["int", "l.strip().split.strip().split", "l.strip().split.strip().split", "IOError", "int", "qids_to_relevant_passageids[].append", "int", "qids_to_relevant_passageids[].append", "l.strip().split.strip", "l.strip().split.strip", "int", "int"], "function", ["None"], ["def", "load_reference_from_stream", "(", "f", ")", ":", "\n", "    ", "\"\"\"Load Reference reference relevant passages\n    Args:f (stream): stream to load.\n    Returns:qids_to_relevant_passageids (dict): dictionary mapping from query_id (int) to relevant passages (list of ints). \n    \"\"\"", "\n", "qids_to_relevant_passageids", "=", "{", "}", "\n", "for", "l", "in", "f", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "EVAL_DOC", ":", "\n", "                ", "l", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "", "qid", "=", "int", "(", "l", "[", "0", "]", ")", "\n", "if", "qid", "in", "qids_to_relevant_passageids", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "qids_to_relevant_passageids", "[", "qid", "]", "=", "[", "]", "\n", "", "if", "EVAL_DOC", ":", "\n", "                ", "assert", "l", "[", "2", "]", "[", "0", "]", "==", "\"D\"", "\n", "if", "int", "(", "l", "[", "3", "]", ")", ">=", "1", ":", "\n", "                    ", "qids_to_relevant_passageids", "[", "qid", "]", ".", "append", "(", "int", "(", "l", "[", "2", "]", "[", "1", ":", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "int", "(", "l", "[", "3", "]", ")", ">=", "1", ":", "\n", "                    ", "qids_to_relevant_passageids", "[", "qid", "]", ".", "append", "(", "int", "(", "l", "[", "2", "]", ")", ")", "\n", "", "", "", "except", ":", "\n", "            ", "raise", "IOError", "(", "'\\\"%s\\\" is not valid format'", "%", "l", ")", "\n", "", "", "return", "qids_to_relevant_passageids", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.load_reference": [[40, 48], ["open", "msmarco_eval.load_reference_from_stream"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.load_reference_from_stream"], ["", "def", "load_reference", "(", "path_to_reference", ")", ":", "\n", "    ", "\"\"\"Load Reference reference relevant passages\n    Args:path_to_reference (str): path to a file to load.\n    Returns:qids_to_relevant_passageids (dict): dictionary mapping from query_id (int) to relevant passages (list of ints). \n    \"\"\"", "\n", "with", "open", "(", "path_to_reference", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "qids_to_relevant_passageids", "=", "load_reference_from_stream", "(", "f", ")", "\n", "", "return", "qids_to_relevant_passageids", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.load_candidate_from_stream": [[49, 75], ["l.strip().split.strip().split", "int", "int", "int", "int", "IOError", "l.strip().split.strip"], "function", ["None"], ["", "def", "load_candidate_from_stream", "(", "f", ")", ":", "\n", "    ", "\"\"\"Load candidate data from a stream.\n    Args:f (stream): stream to load.\n    Returns:qid_to_ranked_candidate_passages (dict): dictionary mapping from query_id (int) to a list of 1000 passage ids(int) ranked by relevance and importance\n    \"\"\"", "\n", "qid_to_ranked_candidate_passages", "=", "{", "}", "\n", "for", "l", "in", "f", ":", "\n", "        ", "try", ":", "\n", "            ", "l", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "qid", "=", "int", "(", "l", "[", "0", "]", ")", "\n", "if", "EVAL_DOC", ":", "\n", "                ", "assert", "l", "[", "1", "]", "[", "0", "]", "==", "\"D\"", "\n", "pid", "=", "int", "(", "l", "[", "1", "]", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "pid", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "", "rank", "=", "int", "(", "l", "[", "2", "]", ")", "\n", "if", "qid", "in", "qid_to_ranked_candidate_passages", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "# By default, all PIDs in the list of 1000 are 0. Only override those that are given", "\n", "                ", "tmp", "=", "[", "0", "]", "*", "20000", "\n", "qid_to_ranked_candidate_passages", "[", "qid", "]", "=", "tmp", "\n", "", "qid_to_ranked_candidate_passages", "[", "qid", "]", "[", "rank", "-", "1", "]", "=", "pid", "\n", "", "except", ":", "\n", "            ", "raise", "IOError", "(", "'\\\"%s\\\" is not valid format'", "%", "l", ")", "\n", "", "", "return", "qid_to_ranked_candidate_passages", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.load_candidate": [[76, 85], ["open", "msmarco_eval.load_candidate_from_stream"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.load_candidate_from_stream"], ["", "def", "load_candidate", "(", "path_to_candidate", ")", ":", "\n", "    ", "\"\"\"Load candidate data from a file.\n    Args:path_to_candidate (str): path to file to load.\n    Returns:qid_to_ranked_candidate_passages (dict): dictionary mapping from query_id (int) to a list of 1000 passage ids(int) ranked by relevance and importance\n    \"\"\"", "\n", "\n", "with", "open", "(", "path_to_candidate", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "qid_to_ranked_candidate_passages", "=", "load_candidate_from_stream", "(", "f", ")", "\n", "", "return", "qid_to_ranked_candidate_passages", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.quality_checks_qids": [[86, 114], ["set", "set", "qids_to_ranked_candidate_passages.keys", "qids_to_relevant_passageids.keys", "set", "len", "collections.Counter().items", "set", "list", "collections.Counter"], "function", ["None"], ["", "def", "quality_checks_qids", "(", "qids_to_relevant_passageids", ",", "qids_to_ranked_candidate_passages", ")", ":", "\n", "    ", "\"\"\"Perform quality checks on the dictionaries\n\n    Args:\n    p_qids_to_relevant_passageids (dict): dictionary of query-passage mapping\n        Dict as read in with load_reference or load_reference_from_stream\n    p_qids_to_ranked_candidate_passages (dict): dictionary of query-passage candidates\n    Returns:\n        bool,str: Boolean whether allowed, message to be shown in case of a problem\n    \"\"\"", "\n", "message", "=", "''", "\n", "allowed", "=", "True", "\n", "\n", "# Create sets of the QIDs for the submitted and reference queries", "\n", "candidate_set", "=", "set", "(", "qids_to_ranked_candidate_passages", ".", "keys", "(", ")", ")", "\n", "ref_set", "=", "set", "(", "qids_to_relevant_passageids", ".", "keys", "(", ")", ")", "\n", "\n", "# Check that we do not have multiple passages per query", "\n", "for", "qid", "in", "qids_to_ranked_candidate_passages", ":", "\n", "# Remove all zeros from the candidates", "\n", "        ", "duplicate_pids", "=", "set", "(", "[", "item", "for", "item", ",", "count", "in", "Counter", "(", "qids_to_ranked_candidate_passages", "[", "qid", "]", ")", ".", "items", "(", ")", "if", "count", ">", "1", "]", ")", "\n", "\n", "if", "len", "(", "duplicate_pids", "-", "set", "(", "[", "0", "]", ")", ")", ">", "0", ":", "\n", "            ", "message", "=", "\"Cannot rank a passage multiple times for a single query. QID={qid}, PID={pid}\"", ".", "format", "(", "\n", "qid", "=", "qid", ",", "pid", "=", "list", "(", "duplicate_pids", ")", "[", "0", "]", ")", "\n", "allowed", "=", "False", "\n", "\n", "", "", "return", "allowed", ",", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.dcg_score": [[115, 119], ["numpy.log2", "numpy.sum", "numpy.arange", "len"], "function", ["None"], ["", "def", "dcg_score", "(", "y_true", ")", ":", "\n", "    ", "gains", "=", "2", "**", "y_true", "-", "1", "\n", "discounts", "=", "np", ".", "log2", "(", "np", ".", "arange", "(", "len", "(", "y_true", ")", ")", "+", "2", ")", "\n", "return", "np", ".", "sum", "(", "gains", "/", "discounts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.compute_metrics": [[123, 163], ["print", "enumerate", "len", "len", "IOError", "len", "print", "ranking.append", "range", "enumerate", "len", "ranking.pop", "ranking.append", "len", "len", "set.intersection", "set", "set", "set"], "function", ["None"], ["", "def", "compute_metrics", "(", "qids_to_relevant_passageids", ",", "qids_to_ranked_candidate_passages", ",", "MRR_cutoff", ",", "Recall_cutoff", ")", ":", "\n", "    ", "\"\"\"Compute MRR metric\n    Args:    \n    p_qids_to_relevant_passageids (dict): dictionary of query-passage mapping\n        Dict as read in with load_reference or load_reference_from_stream\n    p_qids_to_ranked_candidate_passages (dict): dictionary of query-passage candidates\n    Returns:\n        dict: dictionary of metrics {'MRR': <MRR Score>}\n    \"\"\"", "\n", "MRR", "=", "0.0", "\n", "Recall", "=", "[", "0.0", "]", "*", "len", "(", "Recall_cutoff", ")", "\n", "ranking", "=", "[", "]", "\n", "for", "qid", "in", "qids_to_ranked_candidate_passages", ":", "\n", "        ", "if", "qid", "in", "qids_to_relevant_passageids", ":", "\n", "\n", "            ", "ranking", ".", "append", "(", "0", ")", "\n", "target_pid", "=", "qids_to_relevant_passageids", "[", "qid", "]", "\n", "candidate_pid", "=", "qids_to_ranked_candidate_passages", "[", "qid", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "MRR_cutoff", ")", ":", "\n", "                ", "if", "candidate_pid", "[", "i", "]", "in", "target_pid", ":", "\n", "                    ", "MRR", "+=", "1", "/", "(", "i", "+", "1", ")", "\n", "ranking", ".", "pop", "(", ")", "\n", "ranking", ".", "append", "(", "i", "+", "1", ")", "\n", "break", "\n", "\n", "", "", "for", "i", ",", "k", "in", "enumerate", "(", "Recall_cutoff", ")", ":", "\n", "                ", "Recall", "[", "i", "]", "+=", "(", "len", "(", "set", ".", "intersection", "(", "set", "(", "target_pid", ")", ",", "set", "(", "candidate_pid", "[", ":", "k", "]", ")", ")", ")", "/", "len", "(", "set", "(", "target_pid", ")", ")", ")", "\n", "\n", "", "", "", "if", "len", "(", "ranking", ")", "==", "0", ":", "\n", "        ", "raise", "IOError", "(", "\"No matching QIDs found. Are you sure you are scoring the evaluation set?\"", ")", "\n", "\n", "", "MRR", "=", "MRR", "/", "len", "(", "qids_to_relevant_passageids", ")", "\n", "Recall", "=", "[", "x", "/", "len", "(", "qids_to_relevant_passageids", ")", "for", "x", "in", "Recall", "]", "\n", "\n", "print", "(", "f'MRR@{MRR_cutoff}:{MRR}'", ")", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "Recall_cutoff", ")", ":", "\n", "        ", "print", "(", "f'Recall@{k}:{Recall[i]}'", ")", "\n", "\n", "", "return", "MRR", ",", "Recall", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.compute_metrics_from_files": [[164, 188], ["msmarco_eval.load_reference", "msmarco_eval.load_candidate", "msmarco_eval.compute_metrics", "msmarco_eval.quality_checks_qids", "print"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.load_reference", "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.load_candidate", "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.compute_metrics", "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.quality_checks_qids"], ["", "def", "compute_metrics_from_files", "(", "path_to_reference", ",", "path_to_candidate", ",", "MRR_cutoff", ",", "Recall_cutoff", ",", "perform_checks", "=", "True", ")", ":", "\n", "    ", "\"\"\"Compute MRR metric\n    Args:    \n    p_path_to_reference_file (str): path to reference file.\n        Reference file should contain lines in the following format:\n            QUERYID\\tPASSAGEID\n            Where PASSAGEID is a relevant passage for a query. Note QUERYID can repeat on different lines with different PASSAGEIDs\n    p_path_to_candidate_file (str): path to candidate file.\n        Candidate file sould contain lines in the following format:\n            QUERYID\\tPASSAGEID1\\tRank\n            If a user wishes to use the TREC format please run the script with a -t flag at the end. If this flag is used the expected format is \n            QUERYID\\tITER\\tDOCNO\\tRANK\\tSIM\\tRUNID \n            Where the values are separated by tabs and ranked in order of relevance \n    Returns:\n        dict: dictionary of metrics {'MRR': <MRR Score>}\n    \"\"\"", "\n", "\n", "qids_to_relevant_passageids", "=", "load_reference", "(", "path_to_reference", ")", "\n", "qids_to_ranked_candidate_passages", "=", "load_candidate", "(", "path_to_candidate", ")", "\n", "if", "perform_checks", ":", "\n", "        ", "allowed", ",", "message", "=", "quality_checks_qids", "(", "qids_to_relevant_passageids", ",", "qids_to_ranked_candidate_passages", ")", "\n", "if", "message", "!=", "''", ":", "print", "(", "message", ")", "\n", "\n", "", "return", "compute_metrics", "(", "qids_to_relevant_passageids", ",", "qids_to_ranked_candidate_passages", ",", "MRR_cutoff", ",", "Recall_cutoff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.main": [[189, 213], ["print", "len", "msmarco_eval.compute_metrics_from_files", "print", "sorted", "print", "print", "exit", "len", "print", "int"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.compute_metrics_from_files"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Command line:\n    python msmarco_eval_ranking.py <path_to_reference_file> <path_to_candidate_file>\n    \"\"\"", "\n", "print", "(", "\"Eval Started\"", ")", "\n", "if", "len", "(", "sys", ".", "argv", ")", "in", "[", "3", ",", "4", "]", ":", "\n", "        ", "path_to_reference", "=", "sys", ".", "argv", "[", "1", "]", "\n", "path_to_candidate", "=", "sys", ".", "argv", "[", "2", "]", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "4", ":", "\n", "            ", "global", "MaxMRRRank", "\n", "if", "sys", ".", "argv", "[", "3", "]", "==", "\"doc\"", ":", "\n", "                ", "global", "EVAL_DOC", "\n", "MaxMRRRank", ",", "EVAL_DOC", "=", "100", ",", "True", "\n", "", "else", ":", "\n", "                ", "MaxMRRRank", "=", "int", "(", "sys", ".", "argv", "[", "3", "]", ")", "\n", "", "", "metrics", "=", "compute_metrics_from_files", "(", "path_to_reference", ",", "path_to_candidate", ")", "\n", "print", "(", "'#####################'", ")", "\n", "for", "metric", "in", "sorted", "(", "metrics", ")", ":", "\n", "            ", "print", "(", "'{}: {}'", ".", "format", "(", "metric", ",", "metrics", "[", "metric", "]", ")", ")", "\n", "", "print", "(", "'#####################'", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Usage: msmarco_eval_ranking.py <reference ranking> <candidate ranking> [MaxMRRRank or DocEval]'", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.is_main_process": [[13, 15], ["None"], "function", ["None"], ["def", "is_main_process", "(", "local_rank", ")", ":", "\n", "    ", "return", "local_rank", "in", "[", "-", "1", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.setuplogging": [[17, 30], ["logging.getLogger().setLevel", "logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.hasHandlers", "logging.getLogger.addHandler", "logging.getLogger.handlers.clear", "logging.getLogger"], "function", ["None"], ["", "def", "setuplogging", "(", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "# silent transformers", "\n", "    ", "logging", ".", "getLogger", "(", "\"transformers\"", ")", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "root", "=", "logging", ".", "getLogger", "(", ")", "\n", "root", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"[%(levelname)s %(asctime)s] %(message)s\"", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "if", "(", "root", ".", "hasHandlers", "(", ")", ")", ":", "\n", "        ", "root", ".", "handlers", ".", "clear", "(", ")", "# otherwise logging have multi output", "\n", "", "root", ".", "addHandler", "(", "handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.setup_worker": [[31, 42], ["torch.init_process_group", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_worker", "(", "rank", ",", "world_size", ")", ":", "\n", "# initialize the process group", "\n", "    ", "dist", ".", "init_process_group", "(", "\n", "\"nccl\"", ",", "\n", "rank", "=", "rank", ",", "\n", "world_size", "=", "world_size", ",", "\n", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", ")", "\n", "torch", ".", "manual_seed", "(", "42", ")", "\n", "np", ".", "random", ".", "seed", "(", "42", ")", "\n", "random", ".", "seed", "(", "42", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.gather_vecs": [[44, 50], ["torch.all_gather", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "gather_vecs", "(", "tensor_list", ",", "broadcast_vecs", ",", "start_inx", ",", "end_inx", ")", ":", "\n", "    ", "dist", ".", "all_gather", "(", "tensor_list", ",", "broadcast_vecs", ")", "\n", "all_vecs", "=", "torch", ".", "cat", "(", "tensor_list", ",", "dim", "=", "0", ")", "\n", "if", "start_inx", "is", "not", "None", "and", "end_inx", "is", "not", "None", ":", "\n", "        ", "all_vecs", "[", "start_inx", ":", "end_inx", "]", "=", "broadcast_vecs", "\n", "", "return", "all_vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.dist_gather_tensor": [[51, 57], ["torch.all_gather", "torch.cat", "torch.cat", "torch.empty_like", "torch.empty_like", "range"], "function", ["None"], ["", "def", "dist_gather_tensor", "(", "vecs", ",", "world_size", ",", "local_rank", ")", ":", "\n", "    ", "all_tensors", "=", "[", "torch", ".", "empty_like", "(", "vecs", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "all_tensors", ",", "vecs", ")", "\n", "all_tensors", "[", "local_rank", "]", "=", "vecs", "\n", "all_tensors", "=", "torch", ".", "cat", "(", "all_tensors", ",", "dim", "=", "0", ")", "\n", "return", "all_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.create_optimizer_and_scheduler": [[58, 91], ["transformers.get_linear_schedule_with_warmup", "transformers.AdamW", "utils.lamb.Lamb", "NotImplementedError", "model.named_parameters", "model.named_parameters", "any", "any"], "function", ["None"], ["", "def", "create_optimizer_and_scheduler", "(", "args", ",", "model", ",", "num_training_steps", ":", "int", ")", ":", "\n", "    ", "no_decay", "=", "[", "\"bias\"", ",", "\"LayerNorm.weight\"", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "\"weight_decay\"", ":", "args", ".", "weight_decay", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "\"weight_decay\"", ":", "0.0", ",", "\n", "}", ",", "\n", "]", "\n", "if", "args", ".", "optimizer_str", "==", "\"adamw\"", ":", "\n", "        ", "optimizer", "=", "AdamW", "(", "\n", "optimizer_grouped_parameters", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "betas", "=", "(", "args", ".", "adam_beta1", ",", "args", ".", "adam_beta2", ")", ",", "\n", "eps", "=", "args", ".", "adam_epsilon", ",", "\n", ")", "\n", "", "elif", "args", ".", "optimizer_str", "==", "\"lamb\"", ":", "\n", "        ", "optimizer", "=", "Lamb", "(", "\n", "optimizer_grouped_parameters", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "eps", "=", "args", ".", "adam_epsilon", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Optimizer must be adamw or lamb\"", ")", "\n", "\n", "", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "\n", "optimizer", ",", "num_warmup_steps", "=", "args", ".", "warmup_steps", ",", "num_training_steps", "=", "num_training_steps", "\n", ")", "\n", "\n", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.utils.utils.init_config": [[93, 116], ["transformers.RobertaConfig.from_pretrained"], "function", ["None"], ["", "def", "init_config", "(", "model_args", ",", "data_args", ",", "training_args", ")", ":", "\n", "    ", "config", "=", "RobertaConfig", ".", "from_pretrained", "(", "\n", "'roberta-base'", ",", "\n", "finetuning_task", "=", "\"msmarco\"", ",", "\n", "gradient_checkpointing", "=", "model_args", ".", "gradient_checkpointing", ")", "\n", "\n", "if", "model_args", ".", "num_hidden_layers", "!=", "-", "1", ":", "\n", "        ", "config", ".", "num_hidden_layers", "=", "model_args", ".", "num_hidden_layers", "\n", "", "if", "model_args", ".", "output_embedding_size", "!=", "-", "1", ":", "\n", "        ", "config", ".", "output_embedding_size", "=", "model_args", ".", "output_embedding_size", "\n", "", "else", ":", "\n", "        ", "config", ".", "output_embedding_size", "=", "config", ".", "hidden_size", "\n", "\n", "", "config", ".", "use_linear", "=", "training_args", ".", "use_linear", "\n", "config", ".", "fix_doc_emb", "=", "training_args", ".", "fix_doc_emb", "\n", "config", ".", "use_pq", "=", "training_args", ".", "use_pq", "\n", "config", ".", "partition", "=", "training_args", ".", "partition", "\n", "config", ".", "centroids", "=", "training_args", ".", "centroids", "\n", "config", ".", "init_index_path", "=", "training_args", ".", "init_index_path", "\n", "\n", "config", ".", "gradient_checkpointing", "=", "model_args", ".", "gradient_checkpointing", "\n", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.test.lightweight_ann.load_index": [[24, 52], ["faiss.read_index", "faiss.downcast_index", "faiss.copy_array_to_vector", "faiss.index_cpu_to_gpu.remove_ids", "faiss.index_cpu_to_gpu.add", "faiss.StandardGpuResources", "faiss.StandardGpuResources.setTempMemory", "faiss.GpuClonerOptions", "isinstance", "logger.info", "faiss.index_cpu_to_gpu", "centroid_embeds.detach().cpu().numpy().ravel", "faiss.IDSelectorRange", "int", "logger.warning", "len", "centroid_embeds.detach().cpu().numpy", "faiss.downcast_index", "centroid_embeds.detach().cpu", "centroid_embeds.detach"], "function", ["None"], ["def", "load_index", "(", "index_path", ",", "use_cuda", ",", "faiss_gpu_index", ",", "centroid_embeds", "=", "None", ",", "doc_embeddings", "=", "None", ")", ":", "\n", "    ", "index", "=", "faiss", ".", "read_index", "(", "index_path", ")", "\n", "\n", "if", "centroid_embeds", "is", "not", "None", ":", "\n", "        ", "ivf_index", "=", "faiss", ".", "downcast_index", "(", "index", ".", "index", ")", "\n", "faiss", ".", "copy_array_to_vector", "(", "\n", "centroid_embeds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "ravel", "(", ")", ",", "\n", "ivf_index", ".", "pq", ".", "centroids", ")", "\n", "index", ".", "remove_ids", "(", "faiss", ".", "IDSelectorRange", "(", "0", ",", "len", "(", "doc_embeddings", ")", ")", ")", "\n", "index", ".", "add", "(", "doc_embeddings", ")", "\n", "\n", "", "if", "use_cuda", ":", "\n", "        ", "res", "=", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "res", ".", "setTempMemory", "(", "1024", "*", "1024", "*", "1024", ")", "\n", "co", "=", "faiss", ".", "GpuClonerOptions", "(", ")", "\n", "if", "isinstance", "(", "index", ",", "faiss", ".", "IndexPreTransform", ")", ":", "\n", "            ", "subvec_num", "=", "faiss", ".", "downcast_index", "(", "index", ".", "index", ")", ".", "pq", ".", "M", "\n", "", "else", ":", "\n", "            ", "subvec_num", "=", "index", ".", "pq", ".", "M", "\n", "", "if", "int", "(", "subvec_num", ")", ">=", "56", ":", "\n", "            ", "co", ".", "useFloat16", "=", "True", "\n", "", "else", ":", "\n", "            ", "co", ".", "useFloat16", "=", "False", "\n", "", "logger", ".", "info", "(", "f\"subvec_num: {subvec_num}; useFloat16: {co.useFloat16}\"", ")", "\n", "if", "co", ".", "useFloat16", ":", "\n", "            ", "logger", ".", "warning", "(", "\"If the number of subvectors >= 56 and gpu search is turned on, Faiss uses float16 and therefore there is very little performance loss. You can use cpu search to obtain the best ranking effectiveness\"", ")", "\n", "", "index", "=", "faiss", ".", "index_cpu_to_gpu", "(", "res", ",", "faiss_gpu_index", ",", "index", ",", "co", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.test.lightweight_ann.search": [[54, 71], ["math.ceil", "tqdm.tqdm", "print", "range", "min", "numpy.array", "time.time", "index.search", "all_search_results.extend", "all_scores.extend", "len", "len", "time.time", "batch_results.tolist", "score.tolist", "len"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.test.lightweight_ann.search"], ["", "def", "search", "(", "index", ",", "args", ",", "embedding", ",", "batch_size", ")", ":", "\n", "    ", "import", "math", "\n", "batch_num", "=", "math", ".", "ceil", "(", "len", "(", "embedding", ")", "/", "batch_size", ")", "\n", "all_scores", "=", "[", "]", "\n", "all_search_results", "=", "[", "]", "\n", "search_time", "=", "0.0", "\n", "for", "step", "in", "tqdm", "(", "range", "(", "batch_num", ")", ")", ":", "\n", "        ", "start", "=", "batch_size", "*", "step", "\n", "end", "=", "min", "(", "batch_size", "*", "(", "step", "+", "1", ")", ",", "len", "(", "embedding", ")", ")", "\n", "batch_emb", "=", "np", ".", "array", "(", "embedding", "[", "start", ":", "end", "]", ")", "\n", "temp_t", "=", "time", ".", "time", "(", ")", "\n", "score", ",", "batch_results", "=", "index", ".", "search", "(", "batch_emb", ",", "args", ".", "topk", ")", "\n", "search_time", "+=", "time", ".", "time", "(", ")", "-", "temp_t", "\n", "all_search_results", ".", "extend", "(", "batch_results", ".", "tolist", "(", ")", ")", "\n", "all_scores", ".", "extend", "(", "score", ".", "tolist", "(", ")", ")", "\n", "", "print", "(", "'searching time:'", ",", "search_time", ",", "search_time", "/", "len", "(", "embedding", ")", ")", "\n", "return", "all_scores", ",", "all_search_results", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.test.lightweight_ann.faiss_search": [[73, 135], ["os.path.join", "lightweight_ann.load_index", "time.time", "lightweight_ann.search", "print", "os.path.join", "os.path.join", "torch.load", "lightweight_ann.load_index", "faiss.write_index", "os.path.exists", "print", "faiss.StandardGpuResources", "faiss.StandardGpuResources.setTempMemory", "faiss.GpuClonerOptions", "faiss.omp_set_num_threads", "faiss.index_cpu_to_gpu", "faiss.index_factory.train", "faiss.index_factory.add", "faiss.index_gpu_to_cpu", "faiss.write_index", "faiss.omp_set_num_threads", "open", "zip", "utils.msmarco_eval.compute_metrics_from_files", "dataset.dataset.load_rel", "zip", "json.dump", "os.path.join", "faiss.index_factory", "faiss.index_factory", "time.time", "len", "enumerate", "list", "open", "time.time", "outputfile.write", "filter", "os.path.join"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.test.lightweight_ann.load_index", "home.repos.pwc.inspect_result.microsoft_bidr.test.lightweight_ann.search", "home.repos.pwc.inspect_result.microsoft_bidr.test.lightweight_ann.load_index", "home.repos.pwc.inspect_result.microsoft_bidr.None.train.train", "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.compute_metrics_from_files", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.load_rel"], ["", "def", "faiss_search", "(", "args", ",", "doc_embeddings", ",", "query_embeddings", ",", "query_ids", ",", "embed_size", "=", "768", ")", ":", "\n", "    ", "save_index_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"OPQ{args.subvector_num},PQ{args.subvector_num}x8.index\"", ")", "\n", "if", "args", ".", "index", "==", "'pq'", ":", "\n", "        ", "save_index_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"PQ{args.subvector_num}x8.index\"", ")", "\n", "\n", "", "if", "args", ".", "init_index_path", "is", "not", "None", ":", "\n", "        ", "ckpt", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "ckpt_path", ",", "'pytorch_model.bin'", ")", ")", "\n", "centroid_embeds", "=", "ckpt", "[", "'codebook'", "]", "\n", "index", "=", "load_index", "(", "args", ".", "init_index_path", ",", "use_cuda", "=", "args", ".", "gpu_search", ",", "faiss_gpu_index", "=", "0", ",", "\n", "centroid_embeds", "=", "centroid_embeds", ",", "doc_embeddings", "=", "doc_embeddings", ")", "\n", "# index = faiss.index_gpu_to_cpu(index)", "\n", "faiss", ".", "write_index", "(", "index", ",", "save_index_path", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_index_path", ")", ":", "\n", "        ", "print", "(", "'creating index------------'", ")", "\n", "res", "=", "faiss", ".", "StandardGpuResources", "(", ")", "\n", "res", ".", "setTempMemory", "(", "1024", "*", "1024", "*", "512", ")", "\n", "co", "=", "faiss", ".", "GpuClonerOptions", "(", ")", "\n", "co", ".", "useFloat16", "=", "args", ".", "subvector_num", ">=", "56", "\n", "\n", "faiss", ".", "omp_set_num_threads", "(", "32", ")", "\n", "dim", "=", "embed_size", "\n", "if", "args", ".", "index", "==", "'pq'", ":", "\n", "            ", "index", "=", "faiss", ".", "index_factory", "(", "dim", ",", "\n", "f\"PQ{args.subvector_num}x8\"", ",", "faiss", ".", "METRIC_INNER_PRODUCT", ")", "\n", "", "else", ":", "\n", "            ", "index", "=", "faiss", ".", "index_factory", "(", "dim", ",", "\n", "f\"OPQ{args.subvector_num},PQ{args.subvector_num}x8\"", ",", "faiss", ".", "METRIC_INNER_PRODUCT", ")", "\n", "", "index", ".", "verbose", "=", "True", "\n", "index", "=", "faiss", ".", "index_cpu_to_gpu", "(", "res", ",", "0", ",", "index", ",", "co", ")", "\n", "index", ".", "train", "(", "doc_embeddings", ")", "\n", "\n", "index", ".", "add", "(", "doc_embeddings", ")", "\n", "index", "=", "faiss", ".", "index_gpu_to_cpu", "(", "index", ")", "\n", "faiss", ".", "write_index", "(", "index", ",", "save_index_path", ")", "\n", "\n", "", "index", "=", "load_index", "(", "save_index_path", ",", "use_cuda", "=", "args", ".", "gpu_search", ",", "faiss_gpu_index", "=", "0", ")", "\n", "if", "not", "args", ".", "gpu_search", ":", "\n", "        ", "faiss", ".", "omp_set_num_threads", "(", "32", ")", "\n", "\n", "", "stme", "=", "time", ".", "time", "(", ")", "\n", "scores", ",", "topk", "=", "search", "(", "index", ",", "args", ",", "query_embeddings", ",", "batch_size", "=", "32", ")", "\n", "print", "(", "'searching costs:'", ",", "time", ".", "time", "(", ")", "-", "stme", ",", "(", "time", ".", "time", "(", ")", "-", "stme", ")", "/", "len", "(", "query_embeddings", ")", ")", "\n", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{args.mode}.rank_{args.topk}_score_faiss_{args.index}.tsv\"", ")", "\n", "with", "open", "(", "file_name", ",", "'w'", ")", "as", "outputfile", ":", "\n", "        ", "for", "qid", ",", "score", ",", "neighbors", "in", "zip", "(", "query_ids", ",", "scores", ",", "topk", ")", ":", "\n", "            ", "for", "idx", ",", "pid", "in", "enumerate", "(", "neighbors", ")", ":", "\n", "                ", "outputfile", ".", "write", "(", "f\"{qid}\\t{pid}\\t{idx + 1}\\t{score[idx]}\\n\"", ")", "\n", "\n", "", "", "", "path_to_reference", "=", "f'./data/{args.data_type}/preprocess/{args.mode}-qrel.tsv'", "\n", "\n", "if", "args", ".", "mode", "!=", "'train'", ":", "\n", "        ", "MRR", ",", "Recalls", "=", "compute_metrics_from_files", "(", "path_to_reference", ",", "file_name", ",", "args", ".", "MRR_cutoff", ",", "args", ".", "Recall_cutoff", ")", "\n", "\n", "", "if", "args", ".", "save_hardneg_to_json", ":", "\n", "        ", "rel_dict", "=", "load_rel", "(", "path_to_reference", ")", "\n", "neg_dict", "=", "{", "}", "\n", "for", "qid", ",", "neighbors", "in", "zip", "(", "query_ids", ",", "topk", ")", ":", "\n", "            ", "neg", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "not", "in", "rel_dict", "[", "qid", "]", ",", "neighbors", ")", ")", "\n", "neg_dict", "[", "qid", "]", "=", "neg", "\n", "", "json", ".", "dump", "(", "neg_dict", ",", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{args.mode}_hardneg.json\"", ")", ",", "'w'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.test.lightweight_ann.main": [[137, 181], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logger.info", "os.makedirs", "numpy.memmap", "doc_embeddings.reshape.reshape", "numpy.memmap", "query_embeddings.reshape.reshape", "list", "lightweight_ann.faiss_search", "os.path.join", "os.path.join", "range", "len"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.test.lightweight_ann.faiss_search"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--ckpt_path\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_type\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--subvector_num\"", ",", "type", "=", "int", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu_search\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--index\"", ",", "type", "=", "str", ",", "default", "=", "'opq'", ")", "\n", "parser", ".", "add_argument", "(", "\"--topk\"", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "type", "=", "str", ",", "default", "=", "'dev'", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_hardneg_to_json\"", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--doc_file\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--query_file\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--init_index_path\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--MRR_cutoff\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--Recall_cutoff\"", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "5", ",", "10", ",", "30", ",", "50", ",", "100", "]", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "\n", "os", ".", "makedirs", "(", "args", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "args", ".", "doc_file", "is", "None", ":", "\n", "        ", "args", ".", "doc_embed_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"passages.memmap\"", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "doc_embed_path", "=", "args", ".", "doc_file", "\n", "", "if", "args", ".", "query_file", "is", "None", ":", "\n", "        ", "args", ".", "query_embed_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{args.mode}-query.memmap\"", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "query_embed_path", "=", "args", ".", "query_file", "\n", "\n", "", "embed_size", "=", "768", "\n", "\n", "doc_embeddings", "=", "np", ".", "memmap", "(", "args", ".", "doc_embed_path", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "mode", "=", "\"r\"", ")", "\n", "doc_embeddings", "=", "doc_embeddings", ".", "reshape", "(", "-", "1", ",", "embed_size", ")", "\n", "\n", "query_embeddings", "=", "np", ".", "memmap", "(", "args", ".", "query_embed_path", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "mode", "=", "\"r\"", ")", "\n", "query_embeddings", "=", "query_embeddings", ".", "reshape", "(", "-", "1", ",", "768", ")", "\n", "query_ids", "=", "list", "(", "range", "(", "len", "(", "query_embeddings", ")", ")", ")", "\n", "\n", "faiss_search", "(", "args", ",", "doc_embeddings", ",", "query_embeddings", ",", "query_ids", ",", "embed_size", "=", "768", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.test.post_verification.load_q_k_score": [[14, 29], ["open", "line.strip().split", "len", "[].append", "[].append", "int", "int", "int", "float", "print", "line.strip"], "function", ["None"], ["def", "load_q_k_score", "(", "file", ",", "topk", "=", "10000", ")", ":", "\n", "    ", "q_k_score", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "q", ",", "k", ",", "rank", ",", "score", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "q", ",", "k", ",", "rank", ",", "score", "=", "int", "(", "q", ")", ",", "int", "(", "k", ")", ",", "int", "(", "rank", ")", ",", "float", "(", "score", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "line", ")", "\n", "# exit(0)", "\n", "", "if", "q", "not", "in", "q_k_score", ":", "\n", "            ", "q_k_score", "[", "q", "]", "=", "(", "[", "]", ",", "[", "]", ")", "\n", "", "if", "len", "(", "q_k_score", "[", "q", "]", "[", "0", "]", ")", "<", "topk", ":", "\n", "            ", "q_k_score", "[", "q", "]", "[", "0", "]", ".", "append", "(", "k", ")", "\n", "q_k_score", "[", "q", "]", "[", "1", "]", ".", "append", "(", "score", ")", "\n", "", "", "return", "q_k_score", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.test.post_verification.main": [[30, 132], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "os.path.join", "numpy.memmap", "numpy.memmap", "doc_embeddings.reshape.reshape", "numpy.memmap", "query_embeddings.reshape.reshape", "numpy.memmap", "post_verification.load_q_k_score", "enumerate", "enumerate", "print", "post_verification.load_q_k_score", "dict", "load_q_k_score.keys", "open", "dict.keys", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "load_q_k_score.keys", "enumerate", "enumerate", "utils.msmarco_eval.compute_metrics_from_files", "zip", "print", "zip", "temp_s.append", "numpy.argsort", "numpy.array", "open.write", "numpy.matmul", "f.write"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.test.post_verification.load_q_k_score", "home.repos.pwc.inspect_result.microsoft_bidr.test.post_verification.load_q_k_score", "home.repos.pwc.inspect_result.microsoft_bidr.utils.msmarco_eval.compute_metrics_from_files"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_type\"", ",", "choices", "=", "[", "\"passage\"", ",", "'doc'", ",", "'trec_doc'", ",", "'quora'", "]", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--mode\"", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "\"train\"", ",", "\"dev\"", ",", "\"test\"", ",", "\"lead\"", ",", "\"test2019\"", ",", "\"test2020\"", "]", ",", "default", "=", "'dev'", ")", "\n", "parser", ".", "add_argument", "(", "\"--topk\"", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--candidate_from_ann\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--sparse_weight\"", ",", "type", "=", "float", ",", "required", "=", "False", ",", "default", "=", "0.3", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_embedding_size\"", ",", "type", "=", "int", ",", "required", "=", "False", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "\"--root_output_dir\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "default", "=", "'./data'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--doc_file\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--query_file\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "default", "=", "None", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--MRR_cutoff\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--Recall_cutoff\"", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "5", ",", "10", ",", "30", ",", "50", ",", "100", "]", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "output_dir", "=", "os", ".", "path", ".", "join", "(", "f\"{args.root_output_dir}/{args.data_type}/\"", ",", "args", ".", "output_dir", ")", "\n", "args", ".", "output_score_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{args.mode}.dense_score.tsv\"", ")", "\n", "args", ".", "output_rank_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{args.mode}.post_verifiaction.tsv\"", ")", "\n", "\n", "if", "args", ".", "query_file", "is", "None", ":", "\n", "        ", "args", ".", "query_memmap_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{args.mode}-query.memmap\"", ")", "\n", "args", ".", "queryids_memmap_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f\"{args.mode}-query-id.memmap\"", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "query_memmap_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "query_file", ",", "f\"{args.mode}-query.memmap\"", ")", "\n", "args", ".", "queryids_memmap_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "query_file", ",", "f\"{args.mode}-query-id.memmap\"", ")", "\n", "\n", "", "if", "args", ".", "doc_file", "is", "None", ":", "\n", "        ", "args", ".", "doc_memmap_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"passages.memmap\"", ")", "\n", "args", ".", "docid_memmap_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"passages-id.memmap\"", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "doc_memmap_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "doc_file", ",", "\"passages.memmap\"", ")", "\n", "args", ".", "docid_memmap_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "doc_file", ",", "\"passages-id.memmap\"", ")", "\n", "\n", "", "doc_embeddings", "=", "np", ".", "memmap", "(", "args", ".", "doc_memmap_path", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "mode", "=", "\"r\"", ")", "\n", "doc_ids", "=", "np", ".", "memmap", "(", "args", ".", "docid_memmap_path", ",", "\n", "dtype", "=", "np", ".", "int32", ",", "mode", "=", "\"r\"", ")", "\n", "doc_embeddings", "=", "doc_embeddings", ".", "reshape", "(", "-", "1", ",", "args", ".", "output_embedding_size", ")", "\n", "\n", "query_embeddings", "=", "np", ".", "memmap", "(", "args", ".", "query_memmap_path", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "mode", "=", "\"r\"", ")", "\n", "query_embeddings", "=", "query_embeddings", ".", "reshape", "(", "-", "1", ",", "args", ".", "output_embedding_size", ")", "\n", "\n", "query_ids", "=", "np", ".", "memmap", "(", "args", ".", "queryids_memmap_path", ",", "\n", "dtype", "=", "np", ".", "int32", ",", "mode", "=", "\"r\"", ")", "\n", "\n", "q_k_score", "=", "load_q_k_score", "(", "args", ".", "candidate_from_ann", ",", "args", ".", "topk", ")", "\n", "\n", "docid2inx", "=", "{", "}", "\n", "for", "i", ",", "id", "in", "enumerate", "(", "doc_ids", ")", ":", "\n", "        ", "docid2inx", "[", "id", "]", "=", "i", "\n", "", "qid2inx", "=", "{", "}", "\n", "for", "i", ",", "id", "in", "enumerate", "(", "query_ids", ")", ":", "\n", "        ", "qid2inx", "[", "id", "]", "=", "i", "\n", "\n", "", "print", "(", "'predicing----------------------'", ")", "\n", "with", "open", "(", "args", ".", "output_score_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "count", "=", "0", "\n", "for", "q", "in", "q_k_score", ".", "keys", "(", ")", ":", "\n", "            ", "ks", ",", "scores", "=", "q_k_score", "[", "q", "]", "\n", "\n", "qinx", "=", "[", "qid2inx", "[", "q", "]", "]", "\n", "ksinx", "=", "[", "docid2inx", "[", "x", "]", "for", "x", "in", "ks", "]", "\n", "q_emb", "=", "query_embeddings", "[", "qinx", "]", "\n", "ks_emb", "=", "doc_embeddings", "[", "ksinx", "]", "\n", "\n", "rank_score", "=", "np", ".", "matmul", "(", "q_emb", ",", "ks_emb", ".", "T", ")", "[", "0", "]", "\n", "for", "k", ",", "s2", "in", "zip", "(", "ks", ",", "rank_score", ")", ":", "\n", "                ", "f", ".", "write", "(", "f\"{q}\\t{k}\\t-1\\t{s2}\\n\"", ")", "\n", "", "", "count", "+=", "1", "\n", "if", "count", "%", "500", "==", "0", ":", "\n", "            ", "print", "(", "f'---{count}---'", ")", "\n", "\n", "", "", "rerank_q_k_score", "=", "load_q_k_score", "(", "args", ".", "output_score_file", ")", "\n", "final_q_k_score", "=", "dict", "(", ")", "\n", "for", "q", "in", "q_k_score", ".", "keys", "(", ")", ":", "\n", "        ", "ks1", ",", "scores1", "=", "q_k_score", "[", "q", "]", "\n", "ks2", ",", "scores2", "=", "rerank_q_k_score", "[", "q", "]", "\n", "temp_s", "=", "[", "]", "\n", "for", "i", ",", "(", "s1", ",", "s2", ")", "in", "enumerate", "(", "zip", "(", "scores1", ",", "scores2", ")", ")", ":", "\n", "            ", "assert", "ks1", "[", "i", "]", "==", "ks2", "[", "i", "]", "\n", "s", "=", "s2", "+", "args", ".", "sparse_weight", "*", "s1", "\n", "temp_s", ".", "append", "(", "s", ")", "\n", "", "final_q_k_score", "[", "q", "]", "=", "(", "ks1", ",", "temp_s", ")", "\n", "\n", "\n", "", "outputfile", "=", "open", "(", "args", ".", "output_rank_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "\n", "for", "q", "in", "final_q_k_score", ".", "keys", "(", ")", ":", "\n", "        ", "ks", ",", "final_score", "=", "final_q_k_score", "[", "q", "]", "\n", "sorted_inx", "=", "np", ".", "argsort", "(", "final_score", ")", "[", ":", ":", "-", "1", "]", "\n", "sorted_ks", "=", "np", ".", "array", "(", "ks", ")", "[", "sorted_inx", "]", "\n", "\n", "for", "idx", ",", "k", "in", "enumerate", "(", "sorted_ks", ")", ":", "\n", "            ", "outputfile", ".", "write", "(", "f\"{q}\\t{k}\\t{idx + 1}\\t{final_score[idx]}\\n\"", ")", "\n", "\n", "", "", "if", "args", ".", "mode", "!=", "'train'", ":", "\n", "        ", "path_to_reference", "=", "f'./data/{args.data_type}/preprocess/{args.mode}-qrel.tsv'", "\n", "MRR", ",", "Recalls", "=", "compute_metrics_from_files", "(", "path_to_reference", ",", "args", ".", "output_rank_file", ",", "args", ".", "MRR_cutoff", ",", "args", ".", "Recall_cutoff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.TextTokenIdsCache.__init__": [[16, 32], ["json.load", "open", "numpy.memmap", "numpy.load", "len", "numpy.memmap", "numpy.load", "numpy.dtype", "numpy.dtype"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "prefix", ")", ":", "\n", "        ", "meta", "=", "json", ".", "load", "(", "open", "(", "f\"{data_dir}/{prefix}_meta\"", ")", ")", "\n", "self", ".", "total_number", "=", "meta", "[", "'total_number'", "]", "\n", "self", ".", "max_seq_len", "=", "meta", "[", "'embedding_size'", "]", "\n", "try", ":", "\n", "            ", "self", ".", "ids_arr", "=", "np", ".", "memmap", "(", "f\"{data_dir}/{prefix}.memmap\"", ",", "\n", "shape", "=", "(", "self", ".", "total_number", ",", "self", ".", "max_seq_len", ")", ",", "\n", "dtype", "=", "np", ".", "dtype", "(", "meta", "[", "'type'", "]", ")", ",", "mode", "=", "\"r\"", ")", "\n", "self", ".", "lengths_arr", "=", "np", ".", "load", "(", "f\"{data_dir}/{prefix}_length.npy\"", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "self", ".", "ids_arr", "=", "np", ".", "memmap", "(", "f\"{data_dir}/memmap/{prefix}.memmap\"", ",", "\n", "shape", "=", "(", "self", ".", "total_number", ",", "self", ".", "max_seq_len", ")", ",", "\n", "dtype", "=", "np", ".", "dtype", "(", "meta", "[", "'type'", "]", ")", ",", "mode", "=", "\"r\"", ")", "\n", "self", ".", "lengths_arr", "=", "np", ".", "load", "(", "f\"{data_dir}/memmap/{prefix}_length.npy\"", ")", "\n", "\n", "", "assert", "len", "(", "self", ".", "lengths_arr", ")", "==", "self", ".", "total_number", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.TextTokenIdsCache.__len__": [[33, 35], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_number", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.TextTokenIdsCache.__getitem__": [[36, 38], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "ids_arr", "[", "item", ",", ":", "self", ".", "lengths_arr", "[", "item", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.SequenceDataset.__init__": [[41, 44], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ids_cache", ",", "max_seq_length", ")", ":", "\n", "        ", "self", ".", "ids_cache", "=", "ids_cache", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.SequenceDataset.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids_cache", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.SequenceDataset.__getitem__": [[48, 60], ["dataset.SequenceDataset.ids_cache[].tolist", "min", "len", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "input_ids", "=", "self", ".", "ids_cache", "[", "item", "]", ".", "tolist", "(", ")", "\n", "seq_length", "=", "min", "(", "self", ".", "max_seq_length", "-", "1", ",", "len", "(", "input_ids", ")", "-", "1", ")", "\n", "input_ids", "=", "[", "input_ids", "[", "0", "]", "]", "+", "input_ids", "[", "1", ":", "seq_length", "]", "+", "[", "input_ids", "[", "-", "1", "]", "]", "\n", "attention_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "ret_val", "=", "{", "\n", "\"input_ids\"", ":", "input_ids", ",", "\n", "\"attention_mask\"", ":", "attention_mask", ",", "\n", "\"id\"", ":", "item", ",", "\n", "}", "\n", "return", "ret_val", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.SubsetSeqDataset.__init__": [[63, 66], ["sorted", "dataset.SequenceDataset", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "subset", ":", "List", "[", "int", "]", ",", "ids_cache", ",", "max_seq_length", ")", ":", "\n", "        ", "self", ".", "subset", "=", "sorted", "(", "list", "(", "subset", ")", ")", "\n", "self", ".", "alldataset", "=", "SequenceDataset", "(", "ids_cache", ",", "max_seq_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.SubsetSeqDataset.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.SubsetSeqDataset.__getitem__": [[70, 72], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "alldataset", "[", "self", ".", "subset", "[", "item", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.load_rel": [[74, 81], ["collections.defaultdict", "tqdm.tqdm", "open", "line.split", "reldict[].add", "int", "int", "os.path.split"], "function", ["None"], ["", "", "def", "load_rel", "(", "rel_path", ")", ":", "\n", "    ", "reldict", "=", "defaultdict", "(", "set", ")", "\n", "for", "line", "in", "tqdm", "(", "open", "(", "rel_path", ")", ",", "desc", "=", "os", ".", "path", ".", "split", "(", "rel_path", ")", "[", "1", "]", ")", ":", "\n", "        ", "qid", ",", "_", ",", "pid", ",", "_", "=", "line", ".", "split", "(", ")", "\n", "qid", ",", "pid", "=", "int", "(", "qid", ")", ",", "int", "(", "pid", ")", "\n", "reldict", "[", "qid", "]", ".", "add", "(", "pid", ")", "\n", "", "return", "reldict", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.load_rel_list": [[82, 89], ["collections.defaultdict", "tqdm.tqdm", "open", "line.split", "reldict[].append", "int", "int", "os.path.split"], "function", ["None"], ["", "def", "load_rel_list", "(", "rel_path", ")", ":", "\n", "    ", "reldict", "=", "defaultdict", "(", "list", ")", "\n", "for", "line", "in", "tqdm", "(", "open", "(", "rel_path", ")", ",", "desc", "=", "os", ".", "path", ".", "split", "(", "rel_path", ")", "[", "1", "]", ")", ":", "\n", "        ", "qid", ",", "_", ",", "pid", ",", "_", "=", "line", ".", "split", "(", ")", "\n", "qid", ",", "pid", "=", "int", "(", "qid", ")", ",", "int", "(", "pid", ")", "\n", "reldict", "[", "qid", "]", ".", "append", "(", "pid", ")", "\n", "", "return", "reldict", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.load_rank": [[90, 98], ["collections.defaultdict", "tqdm.tqdm", "dict", "open", "line.split", "rankdict[].append", "int", "int", "os.path.split"], "function", ["None"], ["", "def", "load_rank", "(", "rank_path", ")", ":", "\n", "    ", "rankdict", "=", "defaultdict", "(", "list", ")", "\n", "for", "line", "in", "tqdm", "(", "open", "(", "rank_path", ")", ",", "desc", "=", "os", ".", "path", ".", "split", "(", "rank_path", ")", "[", "1", "]", ")", ":", "\n", "        ", "qid", ",", "pid", ",", "_", "=", "line", ".", "split", "(", ")", "\n", "qid", ",", "pid", "=", "int", "(", "qid", ")", ",", "int", "(", "pid", ")", "\n", "rankdict", "[", "qid", "]", ".", "append", "(", "pid", ")", "\n", "\n", "", "return", "dict", "(", "rankdict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.single_get_collate_function": [[100, 120], ["dataset.pack_tensor_2D", "dataset.pack_tensor_2D"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.pack_tensor_2D", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.pack_tensor_2D"], ["", "def", "single_get_collate_function", "(", "max_seq_length", ",", "padding", "=", "False", ")", ":", "\n", "    ", "cnt", "=", "0", "\n", "def", "collate_function", "(", "batch", ")", ":", "\n", "        ", "nonlocal", "cnt", "\n", "length", "=", "None", "\n", "if", "cnt", "<", "10", "or", "padding", ":", "\n", "            ", "length", "=", "max_seq_length", "\n", "cnt", "+=", "1", "\n", "\n", "", "input_ids", "=", "[", "x", "[", "\"input_ids\"", "]", "for", "x", "in", "batch", "]", "\n", "attention_mask", "=", "[", "x", "[", "\"attention_mask\"", "]", "for", "x", "in", "batch", "]", "\n", "data", "=", "{", "\n", "\"input_ids\"", ":", "pack_tensor_2D", "(", "input_ids", ",", "default", "=", "1", ",", "\n", "dtype", "=", "torch", ".", "int64", ",", "length", "=", "length", ")", ",", "\n", "\"attention_mask\"", ":", "pack_tensor_2D", "(", "attention_mask", ",", "default", "=", "0", ",", "\n", "dtype", "=", "torch", ".", "int64", ",", "length", "=", "length", ")", ",", "\n", "}", "\n", "ids", "=", "[", "x", "[", "'id'", "]", "for", "x", "in", "batch", "]", "\n", "return", "data", ",", "ids", "\n", "", "return", "collate_function", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.pack_tensor_2D": [[121, 128], ["len", "enumerate", "max", "torch.ones", "torch.tensor", "len", "len"], "function", ["None"], ["", "def", "pack_tensor_2D", "(", "lstlst", ",", "default", ",", "dtype", ",", "length", "=", "None", ")", ":", "\n", "    ", "batch_size", "=", "len", "(", "lstlst", ")", "\n", "length", "=", "length", "if", "length", "is", "not", "None", "else", "max", "(", "len", "(", "l", ")", "for", "l", "in", "lstlst", ")", "\n", "tensor", "=", "default", "*", "torch", ".", "ones", "(", "(", "batch_size", ",", "length", ")", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "lstlst", ")", ":", "\n", "        ", "tensor", "[", "i", ",", ":", "len", "(", "l", ")", "]", "=", "torch", ".", "tensor", "(", "l", ",", "dtype", "=", "dtype", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.pad_input_ids": [[15, 30], ["len"], "function", ["None"], ["def", "pad_input_ids", "(", "input_ids", ",", "max_length", ",", "\n", "pad_on_left", "=", "False", ",", "\n", "pad_token", "=", "0", ")", ":", "\n", "    ", "padding_length", "=", "max_length", "-", "len", "(", "input_ids", ")", "\n", "padding_id", "=", "[", "pad_token", "]", "*", "padding_length", "\n", "\n", "if", "padding_length", "<=", "0", ":", "\n", "        ", "input_ids", "=", "input_ids", "[", ":", "max_length", "]", "\n", "", "else", ":", "\n", "        ", "if", "pad_on_left", ":", "\n", "            ", "input_ids", "=", "padding_id", "+", "input_ids", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "input_ids", "+", "padding_id", "\n", "\n", "", "", "return", "input_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.tokenize_to_file": [[32, 63], ["transformers.AutoTokenizer.from_pretrained", "os.makedirs", "numpy.memmap", "numpy.memmap", "numpy.memmap", "tqdm.tqdm", "enumerate", "tqdm.tqdm.close", "print", "os.path.join", "os.path.join", "os.path.join", "open", "line_fn", "tqdm.tqdm.update"], "function", ["None"], ["", "def", "tokenize_to_file", "(", "args", ",", "in_path", ",", "output_dir", ",", "line_fn", ",", "max_length", ",", "begin_idx", ",", "end_idx", ")", ":", "\n", "    ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "\n", "args", ".", "model_name_or_path", ",", "do_lower_case", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "data_cnt", "=", "end_idx", "-", "begin_idx", "\n", "ids_array", "=", "np", ".", "memmap", "(", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"ids.memmap\"", ")", ",", "\n", "shape", "=", "(", "data_cnt", ",", ")", ",", "mode", "=", "'w+'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "token_ids_array", "=", "np", ".", "memmap", "(", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"token_ids.memmap\"", ")", ",", "\n", "shape", "=", "(", "data_cnt", ",", "max_length", ")", ",", "mode", "=", "'w+'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "token_length_array", "=", "np", ".", "memmap", "(", "\n", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"lengths.memmap\"", ")", ",", "\n", "shape", "=", "(", "data_cnt", ",", ")", ",", "mode", "=", "'w+'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "end_idx", "-", "begin_idx", ",", "desc", "=", "f\"Tokenizing\"", ")", "\n", "ids_dict", "=", "[", "]", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "open", "(", "in_path", ",", "'r'", ")", ")", ":", "\n", "        ", "if", "idx", "<", "begin_idx", ":", "\n", "            ", "continue", "\n", "", "if", "idx", ">=", "end_idx", ":", "\n", "            ", "break", "\n", "", "qid_or_pid", ",", "token_ids", ",", "length", "=", "line_fn", "(", "args", ",", "line", ",", "tokenizer", ")", "\n", "write_idx", "=", "idx", "-", "begin_idx", "\n", "ids_array", "[", "write_idx", "]", "=", "qid_or_pid", "\n", "token_ids_array", "[", "write_idx", ",", ":", "]", "=", "token_ids", "\n", "token_length_array", "[", "write_idx", "]", "=", "length", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "", "pbar", ".", "close", "(", ")", "\n", "assert", "write_idx", "==", "data_cnt", "-", "1", "\n", "\n", "print", "(", "begin_idx", ",", "end_idx", ",", "write_idx", ",", "data_cnt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.multi_file_process": [[65, 84], ["subprocess.check_output().decode", "print", "int", "range", "multiprocessing.Pool", "multiprocessing.Pool.starmap", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "round", "round", "run_arguments.append", "subprocess.check_output", "subprocess.check_output().decode.split", "preprocess.QueryPreprocessingFn", "preprocess.PassagePreprocessingFn"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.QueryPreprocessingFn", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.PassagePreprocessingFn"], ["", "def", "multi_file_process", "(", "args", ",", "num_process", ",", "in_path", ",", "out_path", ",", "line_fn", ",", "max_length", ")", ":", "\n", "    ", "output_linecnt", "=", "subprocess", ".", "check_output", "(", "[", "\"wc\"", ",", "\"-l\"", ",", "in_path", "]", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "print", "(", "\"line cnt\"", ",", "output_linecnt", ")", "\n", "all_linecnt", "=", "int", "(", "output_linecnt", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "run_arguments", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_process", ")", ":", "\n", "        ", "begin_idx", "=", "round", "(", "all_linecnt", "*", "i", "/", "num_process", ")", "\n", "end_idx", "=", "round", "(", "all_linecnt", "*", "(", "i", "+", "1", ")", "/", "num_process", ")", "\n", "output_dir", "=", "f\"{out_path}_split_{i}\"", "\n", "run_arguments", ".", "append", "(", "(", "\n", "args", ",", "in_path", ",", "output_dir", ",", "line_fn", ",", "\n", "max_length", ",", "begin_idx", ",", "end_idx", "\n", ")", ")", "\n", "", "pool", "=", "multiprocessing", ".", "Pool", "(", "processes", "=", "num_process", ")", "\n", "pool", ".", "starmap", "(", "tokenize_to_file", ",", "run_arguments", ")", "\n", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "splits_dir", "=", "[", "a", "[", "2", "]", "for", "a", "in", "run_arguments", "]", "\n", "return", "splits_dir", ",", "all_linecnt", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.write_query_rel": [[86, 189], ["print", "os.path.join", "print", "os.path.join", "print", "preprocess.multi_file_process", "print", "numpy.memmap", "print", "numpy.save", "os.path.join", "print", "print", "print", "int", "set", "os.path.join", "print", "open", "len", "numpy.memmap", "numpy.memmap", "split_token_ids_array.reshape.reshape", "numpy.memmap", "print", "zip", "len", "len", "len", "len", "numpy.array", "open", "pickle.dump", "open", "json.dump", "print", "open", "open", "print", "str", "set.add", "os.path.join", "os.path.join", "len", "os.path.join", "len", "len", "len", "token_length_array.append", "str", "os.path.join", "int", "qrel_output.write", "subprocess.check_output().decode().split", "int", "print", "line.strip().split", "line.split", "int", "str", "str", "int", "subprocess.check_output().decode", "line.split", "str", "line.strip", "str", "subprocess.check_output", "str", "str"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.multi_file_process"], ["", "def", "write_query_rel", "(", "args", ",", "pid2offset", ",", "qid2offset_file", ",", "query_file", ",", "positive_id_file", ",", "out_query_file", ",", "standard_qrel_file", ")", ":", "\n", "\n", "    ", "print", "(", "\"Writing query files \"", "+", "str", "(", "out_query_file", ")", "+", "\n", "\" and \"", "+", "str", "(", "standard_qrel_file", ")", ")", "\n", "query_collection_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "query_file", ")", "\n", "if", "positive_id_file", "is", "None", ":", "\n", "        ", "query_positive_id", "=", "None", "\n", "valid_query_num", "=", "int", "(", "subprocess", ".", "check_output", "(", "\n", "[", "\"wc\"", ",", "\"-l\"", ",", "query_collection_path", "]", ")", ".", "decode", "(", "\"utf-8\"", ")", ".", "split", "(", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "query_positive_id", "=", "set", "(", ")", "\n", "query_positive_id_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "data_dir", ",", "\n", "positive_id_file", ",", "\n", ")", "\n", "\n", "print", "(", "\"Loading query_2_pos_docid\"", ")", "\n", "for", "line", "in", "open", "(", "query_positive_id_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", ":", "\n", "            ", "query_positive_id", ".", "add", "(", "int", "(", "line", ".", "split", "(", ")", "[", "0", "]", ")", ")", "\n", "", "valid_query_num", "=", "len", "(", "query_positive_id", ")", "\n", "\n", "", "print", "(", "'query num:'", ",", "valid_query_num", ")", "\n", "\n", "out_query_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_data_dir", ",", "out_query_file", ",", ")", "\n", "\n", "qid2offset", "=", "{", "}", "\n", "\n", "print", "(", "'start query file split processing'", ")", "\n", "splits_dir_lst", ",", "_", "=", "multi_file_process", "(", "\n", "args", ",", "args", ".", "threads", ",", "query_collection_path", ",", "\n", "out_query_path", ",", "QueryPreprocessingFn", ",", "\n", "args", ".", "max_query_length", "\n", ")", "\n", "\n", "print", "(", "'start merging splits'", ")", "\n", "\n", "token_ids_array", "=", "np", ".", "memmap", "(", "\n", "out_query_path", "+", "\".memmap\"", ",", "\n", "shape", "=", "(", "valid_query_num", ",", "args", ".", "max_query_length", ")", ",", "mode", "=", "'w+'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "token_length_array", "=", "[", "]", "\n", "\n", "idx", "=", "0", "\n", "for", "split_dir", "in", "splits_dir_lst", ":", "\n", "        ", "ids_array", "=", "np", ".", "memmap", "(", "\n", "os", ".", "path", ".", "join", "(", "split_dir", ",", "\"ids.memmap\"", ")", ",", "mode", "=", "'r'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "split_token_ids_array", "=", "np", ".", "memmap", "(", "\n", "os", ".", "path", ".", "join", "(", "split_dir", ",", "\"token_ids.memmap\"", ")", ",", "mode", "=", "'r'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "split_token_ids_array", "=", "split_token_ids_array", ".", "reshape", "(", "len", "(", "ids_array", ")", ",", "-", "1", ")", "\n", "split_token_length_array", "=", "np", ".", "memmap", "(", "\n", "os", ".", "path", ".", "join", "(", "split_dir", ",", "\"lengths.memmap\"", ")", ",", "mode", "=", "'r'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "print", "(", "split_dir", ",", "len", "(", "ids_array", ")", ",", "len", "(", "split_token_ids_array", ")", ",", "len", "(", "split_token_length_array", ")", ")", "\n", "for", "q_id", ",", "token_ids", ",", "length", "in", "zip", "(", "ids_array", ",", "split_token_ids_array", ",", "split_token_length_array", ")", ":", "\n", "            ", "if", "query_positive_id", "is", "not", "None", "and", "q_id", "not", "in", "query_positive_id", ":", "\n", "# exclude the query as it is not in label set", "\n", "                ", "continue", "\n", "", "token_ids_array", "[", "idx", ",", ":", "]", "=", "token_ids", "\n", "token_length_array", ".", "append", "(", "length", ")", "\n", "qid2offset", "[", "q_id", "]", "=", "idx", "\n", "idx", "+=", "1", "\n", "if", "idx", "<", "3", ":", "\n", "                ", "print", "(", "str", "(", "idx", ")", "+", "\" \"", "+", "str", "(", "q_id", ")", ")", "\n", "", "", "", "print", "(", "len", "(", "token_length_array", ")", ",", "len", "(", "token_ids_array", ")", ",", "idx", ")", "\n", "assert", "len", "(", "token_length_array", ")", "==", "len", "(", "token_ids_array", ")", "==", "idx", "\n", "np", ".", "save", "(", "out_query_path", "+", "\"_length.npy\"", ",", "np", ".", "array", "(", "token_length_array", ")", ")", "\n", "\n", "qid2offset_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "out_data_dir", ",", "\n", "qid2offset_file", ",", "\n", ")", "\n", "with", "open", "(", "qid2offset_path", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "qid2offset", ",", "handle", ",", "protocol", "=", "4", ")", "\n", "", "print", "(", "\"done saving qid2offset\"", ")", "\n", "\n", "print", "(", "\"Total lines written: \"", "+", "str", "(", "idx", ")", ")", "\n", "meta", "=", "{", "'type'", ":", "'int32'", ",", "'total_number'", ":", "idx", ",", "\n", "'embedding_size'", ":", "args", ".", "max_query_length", "}", "\n", "with", "open", "(", "out_query_path", "+", "\"_meta\"", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "meta", ",", "f", ")", "\n", "\n", "", "if", "positive_id_file", "is", "None", ":", "\n", "        ", "print", "(", "\"No qrels file provided\"", ")", "\n", "return", "\n", "", "print", "(", "\"Writing qrels\"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_data_dir", ",", "standard_qrel_file", ")", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "qrel_output", ":", "\n", "        ", "out_line_count", "=", "0", "\n", "for", "line", "in", "open", "(", "query_positive_id_path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", ":", "\n", "            ", "if", "'quora'", "in", "args", ".", "data_dir", ":", "\n", "                ", "topicid", ",", "_", ",", "docid", ",", "rel", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "'\\t'", ")", "\n", "", "else", ":", "\n", "                ", "topicid", ",", "_", ",", "docid", ",", "rel", "=", "line", ".", "split", "(", ")", "\n", "", "topicid", "=", "int", "(", "topicid", ")", "\n", "if", "args", ".", "data_type", "==", "0", ":", "\n", "                ", "docid", "=", "int", "(", "docid", "[", "1", ":", "]", ")", "\n", "", "elif", "args", ".", "data_type", "==", "1", ":", "\n", "                ", "docid", "=", "int", "(", "docid", ")", "\n", "", "else", ":", "\n", "                ", "docid", "=", "docid", "\n", "", "qrel_output", ".", "write", "(", "str", "(", "qid2offset", "[", "topicid", "]", ")", "+", "\n", "\"\\t0\\t\"", "+", "str", "(", "pid2offset", "[", "docid", "]", ")", "+", "\n", "\"\\t\"", "+", "rel", "+", "\"\\n\"", ")", "\n", "out_line_count", "+=", "1", "\n", "", "print", "(", "\"Total lines written: \"", "+", "str", "(", "out_line_count", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.preprocess": [[191, 303], ["os.path.join", "os.path.exists", "print", "preprocess.multi_file_process", "numpy.memmap", "print", "numpy.save", "print", "os.path.join", "print", "os.path.join", "print", "numpy.memmap", "numpy.memmap", "split_token_ids_array.reshape.reshape", "numpy.memmap", "zip", "len", "len", "numpy.array", "open", "json.dump", "open", "pickle.dump", "preprocess.write_query_rel", "preprocess.write_query_rel", "os.path.join", "os.path.join", "os.path.join", "len", "os.path.join", "token_length_array.append", "str", "preprocess.write_query_rel", "preprocess.write_query_rel", "print", "str", "str"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.multi_file_process", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.write_query_rel", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.write_query_rel", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.write_query_rel", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.write_query_rel"], ["", "", "def", "preprocess", "(", "args", ")", ":", "\n", "\n", "    ", "pid2offset", "=", "{", "}", "\n", "if", "args", ".", "data_type", "==", "0", ":", "\n", "        ", "in_passage_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "data_dir", ",", "\n", "\"msmarco-docs.tsv\"", ",", "\n", ")", "\n", "", "elif", "args", ".", "data_type", "==", "1", ":", "\n", "        ", "in_passage_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "data_dir", ",", "\n", "\"collection.tsv\"", ",", "\n", ")", "\n", "\n", "", "out_passage_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "out_data_dir", ",", "\n", "\"passages\"", ",", "\n", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_passage_path", ")", ":", "\n", "        ", "print", "(", "\"preprocessed data already exist, exit preprocessing\"", ")", "\n", "return", "\n", "\n", "", "print", "(", "'start passage file split processing'", ")", "\n", "splits_dir_lst", ",", "all_linecnt", "=", "multi_file_process", "(", "\n", "args", ",", "args", ".", "threads", ",", "in_passage_path", ",", "\n", "out_passage_path", ",", "PassagePreprocessingFn", ",", "\n", "args", ".", "max_seq_length", "\n", ")", "\n", "\n", "token_ids_array", "=", "np", ".", "memmap", "(", "\n", "out_passage_path", "+", "\".memmap\"", ",", "\n", "shape", "=", "(", "all_linecnt", ",", "args", ".", "max_seq_length", ")", ",", "mode", "=", "'w+'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "token_length_array", "=", "[", "]", "\n", "\n", "idx", "=", "0", "\n", "out_line_count", "=", "0", "\n", "print", "(", "'start merging splits'", ")", "\n", "for", "split_dir", "in", "splits_dir_lst", ":", "\n", "        ", "ids_array", "=", "np", ".", "memmap", "(", "\n", "os", ".", "path", ".", "join", "(", "split_dir", ",", "\"ids.memmap\"", ")", ",", "mode", "=", "'r'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "split_token_ids_array", "=", "np", ".", "memmap", "(", "\n", "os", ".", "path", ".", "join", "(", "split_dir", ",", "\"token_ids.memmap\"", ")", ",", "mode", "=", "'r'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "split_token_ids_array", "=", "split_token_ids_array", ".", "reshape", "(", "len", "(", "ids_array", ")", ",", "-", "1", ")", "\n", "split_token_length_array", "=", "np", ".", "memmap", "(", "\n", "os", ".", "path", ".", "join", "(", "split_dir", ",", "\"lengths.memmap\"", ")", ",", "mode", "=", "'r'", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "p_id", ",", "token_ids", ",", "length", "in", "zip", "(", "ids_array", ",", "split_token_ids_array", ",", "split_token_length_array", ")", ":", "\n", "            ", "token_ids_array", "[", "idx", ",", ":", "]", "=", "token_ids", "\n", "token_length_array", ".", "append", "(", "length", ")", "\n", "pid2offset", "[", "p_id", "]", "=", "idx", "\n", "idx", "+=", "1", "\n", "if", "idx", "<", "3", ":", "\n", "                ", "print", "(", "str", "(", "idx", ")", "+", "\" \"", "+", "str", "(", "p_id", ")", ")", "\n", "", "out_line_count", "+=", "1", "\n", "", "", "assert", "len", "(", "token_length_array", ")", "==", "len", "(", "token_ids_array", ")", "==", "idx", "\n", "np", ".", "save", "(", "out_passage_path", "+", "\"_length.npy\"", ",", "np", ".", "array", "(", "token_length_array", ")", ")", "\n", "\n", "print", "(", "\"Total lines written: \"", "+", "str", "(", "out_line_count", ")", ")", "\n", "meta", "=", "{", "\n", "'type'", ":", "'int32'", ",", "\n", "'total_number'", ":", "out_line_count", ",", "\n", "'embedding_size'", ":", "args", ".", "max_seq_length", "}", "\n", "with", "open", "(", "out_passage_path", "+", "\"_meta\"", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "meta", ",", "f", ")", "\n", "\n", "", "pid2offset_path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "out_data_dir", ",", "\n", "\"pid2offset.pickle\"", ",", "\n", ")", "\n", "with", "open", "(", "pid2offset_path", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "pid2offset", ",", "handle", ",", "protocol", "=", "4", ")", "\n", "\n", "", "print", "(", "\"done saving pid2offset\"", ")", "\n", "\n", "if", "args", ".", "data_type", "==", "0", ":", "\n", "\n", "        ", "write_query_rel", "(", "\n", "args", ",", "\n", "pid2offset", ",", "\n", "\"train-qid2offset.pickle\"", ",", "\n", "\"msmarco-doctrain-queries.tsv\"", ",", "\n", "\"msmarco-doctrain-qrels.tsv\"", ",", "\n", "\"train-query\"", ",", "\n", "\"train-qrel.tsv\"", ")", "\n", "\n", "write_query_rel", "(", "\n", "args", ",", "\n", "pid2offset", ",", "\n", "\"dev-qid2offset.pickle\"", ",", "\n", "\"msmarco-docdev-queries.tsv\"", ",", "\n", "\"msmarco-docdev-qrels.tsv\"", ",", "\n", "\"dev-query\"", ",", "\n", "\"dev-qrel.tsv\"", ")", "\n", "\n", "", "elif", "args", ".", "data_type", "==", "1", ":", "\n", "        ", "write_query_rel", "(", "\n", "args", ",", "\n", "pid2offset", ",", "\n", "\"train-qid2offset.pickle\"", ",", "\n", "\"queries.train.tsv\"", ",", "\n", "\"qrels.train.tsv\"", ",", "\n", "\"train-query\"", ",", "\n", "\"train-qrel.tsv\"", ")", "\n", "\n", "write_query_rel", "(", "\n", "args", ",", "\n", "pid2offset", ",", "\n", "\"dev-qid2offset.pickle\"", ",", "\n", "\"queries.dev.small.tsv\"", ",", "\n", "\"qrels.dev.small.tsv\"", ",", "\n", "\"dev-query\"", ",", "\n", "\"dev-qrel.tsv\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.PassagePreprocessingFn": [[305, 338], ["tokenizer.encode", "min", "preprocess.pad_input_ids", "line.strip.split", "int", "line_arr[].rstrip", "line_arr[].rstrip", "line_arr[].rstrip", "len", "line.strip.strip", "line.strip.split", "int", "line_arr[].rstrip"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.pad_input_ids"], ["", "", "def", "PassagePreprocessingFn", "(", "args", ",", "line", ",", "tokenizer", ")", ":", "\n", "    ", "if", "args", ".", "data_type", "==", "0", ":", "\n", "        ", "line_arr", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "p_id", "=", "int", "(", "line_arr", "[", "0", "]", "[", "1", ":", "]", ")", "# remove \"D\"", "\n", "\n", "url", "=", "line_arr", "[", "1", "]", ".", "rstrip", "(", ")", "\n", "title", "=", "line_arr", "[", "2", "]", ".", "rstrip", "(", ")", "\n", "p_text", "=", "line_arr", "[", "3", "]", ".", "rstrip", "(", ")", "\n", "# NOTE: This linke is copied from ANCE, ", "\n", "# but I think it's better to use <s> as the separator, ", "\n", "full_text", "=", "url", "+", "\"<sep>\"", "+", "title", "+", "\"<sep>\"", "+", "p_text", "\n", "# keep only first 10000 characters, should be sufficient for any", "\n", "# experiment that uses less than 500 - 1k tokens", "\n", "full_text", "=", "full_text", "[", ":", "args", ".", "max_doc_character", "]", "\n", "", "elif", "args", ".", "data_type", "==", "1", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "line_arr", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "p_id", "=", "int", "(", "line_arr", "[", "0", "]", ")", "\n", "\n", "p_text", "=", "line_arr", "[", "-", "1", "]", ".", "rstrip", "(", ")", "\n", "full_text", "=", "p_text", "[", ":", "args", ".", "max_doc_character", "]", "\n", "\n", "", "passage", "=", "tokenizer", ".", "encode", "(", "\n", "full_text", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", "max_length", "=", "args", ".", "max_seq_length", ",", "\n", "truncation", "=", "True", "\n", ")", "\n", "\n", "passage_len", "=", "min", "(", "len", "(", "passage", ")", ",", "args", ".", "max_seq_length", ")", "\n", "input_id_b", "=", "pad_input_ids", "(", "passage", ",", "args", ".", "max_seq_length", ")", "\n", "\n", "return", "p_id", ",", "input_id_b", ",", "passage_len", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.QueryPreprocessingFn": [[340, 354], ["line.split", "int", "tokenizer.encode", "min", "preprocess.pad_input_ids", "line_arr[].rstrip", "len"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.pad_input_ids"], ["", "def", "QueryPreprocessingFn", "(", "args", ",", "line", ",", "tokenizer", ")", ":", "\n", "    ", "line_arr", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "q_id", "=", "int", "(", "line_arr", "[", "0", "]", ")", "\n", "\n", "passage", "=", "tokenizer", ".", "encode", "(", "\n", "line_arr", "[", "1", "]", ".", "rstrip", "(", ")", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", "max_length", "=", "args", ".", "max_query_length", ",", "\n", "truncation", "=", "True", "\n", ")", "\n", "passage_len", "=", "min", "(", "len", "(", "passage", ")", ",", "args", ".", "max_query_length", ")", "\n", "input_id_b", "=", "pad_input_ids", "(", "passage", ",", "args", ".", "max_query_length", ")", "\n", "\n", "return", "q_id", ",", "input_id_b", ",", "passage_len", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.get_arguments": [[356, 395], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model_name_or_path\"", ",", "\n", "default", "=", "\"roberta-base\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_seq_length\"", ",", "\n", "default", "=", "512", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"The maximum total input sequence length after tokenization. Sequences longer \"", "\n", "\"than this will be truncated, sequences shorter will be padded.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_query_length\"", ",", "\n", "default", "=", "64", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"The maximum total input sequence length after tokenization. Sequences longer \"", "\n", "\"than this will be truncated, sequences shorter will be padded.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_doc_character\"", ",", "\n", "default", "=", "10000", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"used before tokenizer to save tokenizer latency\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data_type\"", ",", "\n", "default", "=", "1", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"0 for doc, 1 for passage\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--threads\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.main": [[397, 412], ["preprocess.get_arguments", "preprocess.preprocess", "preprocess.preprocess", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.get_arguments", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.preprocess", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.preprocess.preprocess"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_arguments", "(", ")", "\n", "args", ".", "data_type", "=", "0", "\n", "args", ".", "data_dir", "=", "\"./data/doc/dataset\"", "\n", "args", ".", "out_data_dir", "=", "\"./data/doc/preprocess\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "out_data_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "out_data_dir", ")", "\n", "", "preprocess", "(", "args", ")", "\n", "\n", "args", ".", "data_type", "=", "1", "\n", "args", ".", "data_dir", "=", "\"./data/passage/dataset\"", "\n", "args", ".", "out_data_dir", "=", "\"./data/passage/preprocess\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "out_data_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "out_data_dir", ")", "\n", "", "preprocess", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.__init__": [[22, 75], ["dataset.dataset.load_rel", "dataset.dataset.SequenceDataset", "dataset.dataset.SequenceDataset", "list", "range", "logging.info", "dataloader.DataloaderForSubGraphHard.init_graph", "dataloader.DataloaderForSubGraphHard.random_negative_sample", "len", "len", "dataloader.DataloaderForSubGraphHard.query2pos.items", "logging.info", "dataloader.DataloaderForSubGraphHard.init_doc_embedding", "len", "dataloader.DataloaderForSubGraphHard.query2pos.keys", "len"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataset.load_rel", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.init_graph", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.random_negative_sample", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.init_doc_embedding"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "rel_file", ",", "\n", "rank_file", ",", "\n", "queryids_cache", ",", "max_query_length", ",", "\n", "docids_cache", ",", "max_doc_length", ",", "\n", "local_rank", ",", "\n", "world_size", ",", "\n", "infer_path", "=", "None", ",", "\n", "query_length", "=", "None", ",", "\n", "doc_length", "=", "None", ",", "\n", "enable_prefetch", "=", "True", ",", "\n", "random_seed", "=", "42", ",", "\n", "enable_gpu", "=", "True", ")", ":", "\n", "        ", "'''\n        Args:\n        '''", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "query2pos", "=", "load_rel", "(", "rel_file", ")", "\n", "self", ".", "query_dataset", "=", "SequenceDataset", "(", "queryids_cache", ",", "max_query_length", ")", "\n", "self", ".", "doc_dataset", "=", "SequenceDataset", "(", "docids_cache", ",", "max_doc_length", ")", "\n", "self", ".", "docs_list", "=", "list", "(", "range", "(", "len", "(", "self", ".", "doc_dataset", ")", ")", ")", "\n", "\n", "if", "rank_file", "is", "not", "None", ":", "\n", "            ", "logging", ".", "info", "(", "f'************ construct the bipartite graph based on: {rank_file} ************'", ")", "\n", "self", ".", "query2neg", ",", "self", ".", "neg2query", "=", "self", ".", "init_graph", "(", "rank_file", ",", "mink", "=", "args", ".", "mink", ",", "maxk", "=", "args", ".", "maxk", ",", "\n", "n2_mink", "=", "args", ".", "n2_mink", ",", "n2_mak", "=", "args", ".", "n2_maxk", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "query2neg", "=", "self", ".", "random_negative_sample", "(", "self", ".", "query2pos", ".", "keys", "(", ")", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "query2pos", ")", ">", "len", "(", "self", ".", "query2neg", ")", ":", "\n", "            ", "query2pos", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "query2pos", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "in", "self", ".", "query2neg", ":", "\n", "                    ", "query2pos", "[", "k", "]", "=", "v", "\n", "", "", "self", ".", "query2pos", "=", "query2pos", "\n", "logging", ".", "info", "(", "f'************ please confirm the number of query in hardneg_json: {len(self.query2neg)} ************'", ")", "\n", "\n", "", "assert", "args", ".", "per_query_neg_num", ">", "0", "\n", "self", ".", "hard_num", "=", "args", ".", "per_query_neg_num", "\n", "self", ".", "query_length", "=", "query_length", "\n", "self", ".", "doc_length", "=", "doc_length", "\n", "\n", "self", ".", "local_rank", "=", "local_rank", "\n", "self", ".", "batch_size", "=", "world_size", "*", "args", ".", "per_device_train_batch_size", "\n", "self", ".", "enable_prefetch", "=", "enable_prefetch", "\n", "self", ".", "random_seed", "=", "random_seed", "\n", "self", ".", "enable_gpu", "=", "enable_gpu", "\n", "\n", "self", ".", "path_num", "=", "args", ".", "patch_num", "\n", "self", ".", "patch_batch_size", "=", "self", ".", "batch_size", "//", "self", ".", "path_num", "\n", "if", "args", ".", "fix_doc_emb", ":", "\n", "            ", "self", ".", "init_doc_embedding", "(", "infer_path", ",", "infer_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.random_negative_sample": [[76, 82], ["random.sample", "set"], "methods", ["None"], ["", "", "def", "random_negative_sample", "(", "self", ",", "queries", ")", ":", "\n", "        ", "query2neg", "=", "{", "}", "\n", "for", "q", "in", "queries", ":", "\n", "            ", "neg", "=", "random", ".", "sample", "(", "self", ".", "docs_list", ",", "100", ")", "\n", "query2neg", "[", "q", "]", "=", "set", "(", "neg", ")", "\n", "", "return", "query2neg", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.init_graph": [[83, 102], ["json.load", "json.load.items", "collections.defaultdict", "json.load.items", "open", "int", "set", "int", "int", "int", "neg2query[].add"], "methods", ["None"], ["", "def", "init_graph", "(", "self", ",", "rank_file", ",", "mink", "=", "0", ",", "maxk", "=", "200", ",", "n2_mink", "=", "0", ",", "n2_mak", "=", "200", ")", ":", "\n", "        ", "rankdict", "=", "json", ".", "load", "(", "open", "(", "rank_file", ")", ")", "\n", "# print(f'loaded hardneg file:{rank_file}')", "\n", "query2neg", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "rankdict", ".", "items", "(", ")", ":", "\n", "            ", "k", "=", "int", "(", "k", ")", "\n", "v", "=", "[", "int", "(", "_", ")", "for", "_", "in", "v", "]", "\n", "v", "=", "v", "[", "mink", ":", "maxk", "]", "\n", "query2neg", "[", "k", "]", "=", "set", "(", "v", ")", "\n", "\n", "", "neg2query", "=", "defaultdict", "(", "set", ")", "\n", "for", "k", ",", "v", "in", "rankdict", ".", "items", "(", ")", ":", "\n", "            ", "k", "=", "int", "(", "k", ")", "\n", "v", "=", "[", "int", "(", "_", ")", "for", "_", "in", "v", "]", "\n", "v", "=", "v", "[", "n2_mink", ":", "n2_mak", "]", "\n", "for", "neg", "in", "v", ":", "\n", "                ", "neg2query", "[", "neg", "]", ".", "add", "(", "k", ")", "\n", "\n", "", "", "return", "query2neg", ",", "neg2query", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.__len__": [[103, 105], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "query2pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.set_seed": [[106, 109], ["random.seed"], "methods", ["None"], ["", "def", "set_seed", "(", "self", ")", ":", "\n", "        ", "random", ".", "seed", "(", "self", ".", "random_seed", ")", "\n", "self", ".", "random_seed", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.init_query_set": [[110, 118], ["list", "dataloader.DataloaderForSubGraphHard.set_seed", "set", "dataloader.DataloaderForSubGraphHard.query2pos.keys", "len", "len"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.set_seed"], ["", "def", "init_query_set", "(", "self", ")", ":", "\n", "        ", "self", ".", "query_set", "=", "list", "(", "self", ".", "query2pos", ".", "keys", "(", ")", ")", "\n", "self", ".", "set_seed", "(", ")", "\n", "\n", "self", ".", "batch_num", "=", "len", "(", "self", ".", "query_set", ")", "//", "self", ".", "batch_size", "\n", "if", "len", "(", "self", ".", "query_set", ")", "%", "self", ".", "batch_size", ">=", "self", ".", "args", ".", "world_size", ":", "\n", "            ", "self", ".", "batch_num", "+=", "1", "\n", "", "self", ".", "query_set", "=", "set", "(", "self", ".", "query_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.init_doc_embedding": [[119, 128], ["numpy.memmap", "numpy.memmap", "numpy.memmap.reshape", "enumerate", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "init_doc_embedding", "(", "self", ",", "doc_path", ",", "query_path", ")", ":", "\n", "        ", "doc_embeddings", "=", "np", ".", "memmap", "(", "os", ".", "path", ".", "join", "(", "doc_path", ",", "\"passages.memmap\"", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ",", "mode", "=", "\"r\"", ")", "\n", "doc_ids", "=", "np", ".", "memmap", "(", "os", ".", "path", ".", "join", "(", "doc_path", ",", "\"passages-id.memmap\"", ")", ",", "\n", "dtype", "=", "np", ".", "int32", ",", "mode", "=", "\"r\"", ")", "\n", "self", ".", "doc_embeddings", "=", "doc_embeddings", ".", "reshape", "(", "-", "1", ",", "768", ")", "\n", "self", ".", "doc_emb_index", "=", "{", "}", "\n", "for", "i", ",", "id", "in", "enumerate", "(", "doc_ids", ")", ":", "\n", "            ", "self", ".", "doc_emb_index", "[", "id", "]", "=", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.__iter__": [[129, 148], ["logging.info", "dataloader.DataloaderForSubGraphHard.init_query_set", "logging.info", "dataloader.DataloaderForSubGraphHard.start_async", "dataloader.DataloaderForSubGraphHard.generate_batch", "dataloader.DataloaderForSubGraphHard.outputs.__iter__", "sys.exc_info", "traceback.print_tb", "logging.info", "dataloader.DataloaderForSubGraphHard.pool.shutdown", "len"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.init_query_set", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.start_async", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.generate_batch", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.__iter__"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Implement IterableDataset method to provide data iterator.\"\"\"", "\n", "logging", ".", "info", "(", "'__iter__'", ")", "\n", "try", ":", "\n", "            ", "self", ".", "init_query_set", "(", ")", "\n", "logging", ".", "info", "(", "f'{self.local_rank}, query num: {len(self.query_set)}'", ")", "\n", "self", ".", "end", "=", "False", "\n", "", "except", ":", "\n", "            ", "error_type", ",", "error_value", ",", "error_trace", "=", "sys", ".", "exc_info", "(", ")", "\n", "traceback", ".", "print_tb", "(", "error_trace", ")", "\n", "logging", ".", "info", "(", "error_value", ")", "\n", "self", ".", "pool", ".", "shutdown", "(", "wait", "=", "False", ")", "\n", "raise", "\n", "", "if", "self", ".", "enable_prefetch", ":", "\n", "            ", "self", ".", "start_async", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "outputs", "=", "self", ".", "generate_batch", "(", ")", "\n", "self", ".", "outputs", "=", "self", ".", "outputs", ".", "__iter__", "(", ")", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.start_async": [[149, 156], ["logging.info", "queue.Queue", "concurrent.futures.ThreadPoolExecutor", "dataloader.DataloaderForSubGraphHard.pool.submit"], "methods", ["None"], ["", "def", "start_async", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "f'{self.local_rank}: start async...'", ")", "\n", "self", ".", "aval_count", "=", "0", "\n", "self", ".", "end", "=", "False", "\n", "self", ".", "outputs", "=", "Queue", "(", "10", ")", "\n", "self", ".", "pool", "=", "ThreadPoolExecutor", "(", "1", ")", "\n", "self", ".", "pool", ".", "submit", "(", "self", ".", "_produce", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.__next__": [[157, 170], ["dataloader.DataloaderForSubGraphHard.outputs.get", "dataloader.DataloaderForSubGraphHard.outputs.task_done", "dataloader.DataloaderForSubGraphHard.outputs.__next__"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.__next__"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "enable_prefetch", ":", "\n", "            ", "if", "self", ".", "end", "and", "self", ".", "aval_count", "==", "0", ":", "\n", "                ", "raise", "StopIteration", "\n", "", "next_batch", "=", "self", ".", "outputs", ".", "get", "(", ")", "\n", "self", ".", "outputs", ".", "task_done", "(", ")", "\n", "self", ".", "aval_count", "-=", "1", "\n", "return", "next_batch", "\n", "", "else", ":", "\n", "            ", "next_data", "=", "self", ".", "outputs", ".", "__next__", "(", ")", "\n", "if", "self", ".", "end", ":", "\n", "                ", "raise", "StopIteration", "\n", "", "return", "next_data", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard._produce": [[171, 185], ["torch.cuda.set_device", "dataloader.DataloaderForSubGraphHard.generate_batch", "dataloader.DataloaderForSubGraphHard.outputs.put", "sys.exc_info", "traceback.print_tb", "logging.info", "dataloader.DataloaderForSubGraphHard.pool.shutdown"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.generate_batch"], ["", "", "def", "_produce", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "enable_gpu", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "local_rank", ")", "\n", "", "try", ":", "\n", "            ", "batch_gen", "=", "self", ".", "generate_batch", "(", ")", "\n", "for", "batch", "in", "batch_gen", ":", "\n", "                ", "self", ".", "outputs", ".", "put", "(", "batch", ")", "\n", "self", ".", "aval_count", "+=", "1", "\n", "", "", "except", ":", "\n", "            ", "error_type", ",", "error_value", ",", "error_trace", "=", "sys", ".", "exc_info", "(", ")", "\n", "traceback", ".", "print_tb", "(", "error_trace", ")", "\n", "logging", ".", "info", "(", "error_value", ")", "\n", "self", ".", "pool", ".", "shutdown", "(", "wait", "=", "False", ")", "\n", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.generate_batch": [[186, 193], ["dataloader.DataloaderForSubGraphHard.random_batch", "dataloader.DataloaderForSubGraphHard.subgraph_batch", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.random_batch", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.subgraph_batch"], ["", "", "def", "generate_batch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "generate_batch_method", "==", "'random'", ":", "\n", "            ", "return", "self", ".", "random_batch", "(", ")", "\n", "", "elif", "self", ".", "args", ".", "generate_batch_method", "in", "(", "'random_walk'", ",", "'snow_sample'", ")", ":", "\n", "            ", "return", "self", ".", "subgraph_batch", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f'{self.args.generate_batch_method}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.random_batch": [[194, 205], ["range", "len", "len", "random.sample", "list", "set", "dataloader.DataloaderForSubGraphHard.get_data_by_qids"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.get_data_by_qids"], ["", "", "def", "random_batch", "(", "self", ")", ":", "\n", "        ", "for", "b", "in", "range", "(", "self", ".", "batch_num", ")", ":", "\n", "            ", "assert", "len", "(", "self", ".", "query_set", ")", "!=", "0", "\n", "# self.set_seed()", "\n", "if", "len", "(", "self", ".", "query_set", ")", ">=", "self", ".", "batch_size", ":", "\n", "                ", "qids", "=", "random", ".", "sample", "(", "self", ".", "query_set", ",", "self", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "                ", "qids", "=", "list", "(", "self", ".", "query_set", ")", "\n", "", "self", ".", "query_set", "=", "self", ".", "query_set", "-", "set", "(", "qids", ")", "\n", "yield", "self", ".", "get_data_by_qids", "(", "qids", ")", "\n", "", "self", ".", "end", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.get_data_by_qids": [[206, 228], ["dataloader.DataloaderForSubGraphHard.data_collate", "queries_data.append", "docs_data.append", "hard_docs_data.extend", "random.sample", "random.sample", "len", "random.sample", "random.sample", "list", "len"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.data_collate"], ["", "def", "get_data_by_qids", "(", "self", ",", "qids", ")", ":", "\n", "        ", "queries_data", "=", "[", "]", "\n", "docs_data", "=", "[", "]", "\n", "hard_docs_data", "=", "[", "]", "\n", "for", "qid", "in", "qids", ":", "\n", "            ", "pid", "=", "random", ".", "sample", "(", "self", ".", "query2pos", "[", "qid", "]", ",", "1", ")", "[", "0", "]", "\n", "q_data", "=", "self", ".", "query_dataset", "[", "qid", "]", "\n", "d_data", "=", "self", ".", "doc_dataset", "[", "pid", "]", "\n", "if", "self", ".", "query2neg", "is", "None", ":", "\n", "                ", "hardpids", "=", "random", ".", "sample", "(", "self", ".", "docs_list", ",", "self", ".", "hard_num", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "hard_num", ">", "len", "(", "self", ".", "query2neg", "[", "qid", "]", ")", ":", "\n", "                    ", "hardpids", "=", "random", ".", "sample", "(", "self", ".", "docs_list", ",", "self", ".", "hard_num", "-", "len", "(", "self", ".", "query2neg", "[", "qid", "]", ")", ")", "\n", "hardpids", "=", "hardpids", "+", "list", "(", "self", ".", "query2neg", "[", "qid", "]", ")", "\n", "", "else", ":", "\n", "                    ", "hardpids", "=", "random", ".", "sample", "(", "self", ".", "query2neg", "[", "qid", "]", ",", "self", ".", "hard_num", ")", "\n", "\n", "", "", "hard_d_data", "=", "[", "self", ".", "doc_dataset", "[", "hardpid", "]", "for", "hardpid", "in", "hardpids", "]", "\n", "queries_data", ".", "append", "(", "q_data", ")", "\n", "docs_data", ".", "append", "(", "d_data", ")", "\n", "hard_docs_data", ".", "extend", "(", "hard_d_data", ")", "\n", "", "return", "self", ".", "data_collate", "(", "queries_data", ",", "docs_data", ",", "hard_docs_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.get_qid": [[229, 243], ["len", "dataloader.DataloaderForSubGraphHard.node_queue.append", "dataloader.DataloaderForSubGraphHard.node_queue.pop", "random.sample", "random.sample", "dataloader.DataloaderForSubGraphHard.node_queue.pop"], "methods", ["None"], ["", "def", "get_qid", "(", "self", ",", "search_method", ",", "cur_q_num", ")", ":", "\n", "        ", "if", "cur_q_num", "%", "self", ".", "patch_batch_size", "==", "0", ":", "\n", "            ", "return", "random", ".", "sample", "(", "self", ".", "query_set", ",", "1", ")", "[", "0", "]", "\n", "\n", "", "if", "len", "(", "self", ".", "node_queue", ")", "==", "0", ":", "\n", "            ", "qid", "=", "random", ".", "sample", "(", "self", ".", "query_set", ",", "1", ")", "[", "0", "]", "\n", "self", ".", "node_queue", ".", "append", "(", "qid", ")", "\n", "\n", "", "if", "search_method", "==", "'random_walk'", ":", "\n", "            ", "return", "self", ".", "node_queue", ".", "pop", "(", ")", "\n", "", "elif", "search_method", "in", "(", "'snow_sample'", ")", ":", "\n", "            ", "return", "self", ".", "node_queue", ".", "pop", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.subgraph_batch": [[244, 289], ["range", "print", "set", "set", "dataloader.DataloaderForSubGraphHard.get_qid", "dataloader.DataloaderForSubGraphHard.query_set.discard", "set.add", "set.add", "dataloader.DataloaderForSubGraphHard.node_queue.extend", "queries_data.append", "docs_data.append", "hard_docs_data.extend", "dataloader.DataloaderForSubGraphHard.data_collate", "len", "len", "len", "dataloader.DataloaderForSubGraphHard.get_qid", "random.sample", "len", "random.sample", "random.sample", "set.add", "len", "list", "list", "range", "len", "temp_qs.append", "len"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.get_qid", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.data_collate", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.get_qid"], ["", "", "def", "subgraph_batch", "(", "self", ")", ":", "\n", "        ", "for", "b", "in", "range", "(", "self", ".", "batch_num", ")", ":", "\n", "# self.set_seed()", "\n", "            ", "queries_data", "=", "[", "]", "\n", "docs_data", "=", "[", "]", "\n", "hard_docs_data", "=", "[", "]", "\n", "qids_order", "=", "set", "(", ")", "\n", "nids_order", "=", "set", "(", ")", "\n", "self", ".", "node_queue", "=", "[", "]", "\n", "\n", "while", "len", "(", "queries_data", ")", "<", "self", ".", "batch_size", "and", "len", "(", "self", ".", "query_set", ")", ">", "0", ":", "\n", "                ", "qid", "=", "self", ".", "get_qid", "(", "self", ".", "args", ".", "generate_batch_method", ",", "len", "(", "qids_order", ")", ")", "\n", "while", "qid", "in", "qids_order", ":", "\n", "                    ", "qid", "=", "self", ".", "get_qid", "(", "self", ".", "args", ".", "generate_batch_method", ",", "len", "(", "qids_order", ")", ")", "\n", "", "self", ".", "query_set", ".", "discard", "(", "qid", ")", "\n", "\n", "qids_order", ".", "add", "(", "qid", ")", "\n", "pid", "=", "random", ".", "sample", "(", "self", ".", "query2pos", "[", "qid", "]", ",", "1", ")", "[", "0", "]", "\n", "nids_order", ".", "add", "(", "pid", ")", "\n", "\n", "temp_neg_set", "=", "self", ".", "query2neg", "[", "qid", "]", "-", "nids_order", "\n", "if", "len", "(", "temp_neg_set", ")", "<", "self", ".", "hard_num", ":", "\n", "                    ", "rand_negs", "=", "random", ".", "sample", "(", "list", "(", "range", "(", "len", "(", "self", ".", "doc_dataset", ")", ")", ")", ",", "self", ".", "hard_num", "-", "len", "(", "temp_neg_set", ")", ")", "\n", "hardpids", "=", "list", "(", "temp_neg_set", ")", "+", "rand_negs", "\n", "", "else", ":", "\n", "                    ", "hardpids", "=", "random", ".", "sample", "(", "temp_neg_set", ",", "self", ".", "hard_num", ")", "\n", "\n", "", "temp_qs", "=", "[", "]", "\n", "for", "hn", "in", "hardpids", ":", "\n", "                    ", "nids_order", ".", "add", "(", "hn", ")", "\n", "for", "q", "in", "self", ".", "neg2query", "[", "hn", "]", ":", "\n", "                        ", "if", "q", "not", "in", "qids_order", "and", "q", "in", "self", ".", "query_set", ":", "\n", "                            ", "temp_qs", ".", "append", "(", "q", ")", "\n", "", "", "", "self", ".", "node_queue", ".", "extend", "(", "temp_qs", ")", "\n", "\n", "q_data", "=", "self", ".", "query_dataset", "[", "qid", "]", "\n", "d_data", "=", "self", ".", "doc_dataset", "[", "pid", "]", "\n", "hard_d_data", "=", "[", "self", ".", "doc_dataset", "[", "hardpid", "]", "for", "hardpid", "in", "hardpids", "]", "\n", "queries_data", ".", "append", "(", "q_data", ")", "\n", "docs_data", ".", "append", "(", "d_data", ")", "\n", "hard_docs_data", ".", "extend", "(", "hard_d_data", ")", "\n", "\n", "", "yield", "self", ".", "data_collate", "(", "queries_data", ",", "docs_data", ",", "hard_docs_data", ")", "\n", "", "self", ".", "end", "=", "True", "\n", "print", "(", "f'{self.local_rank}: end'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.pack_tensor_2D": [[291, 305], ["torch.zeros", "torch.zeros", "enumerate", "max", "zip", "torch.tensor", "torch.tensor", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "pack_tensor_2D", "(", "tokens_and_id", ",", "length", "=", "None", ")", ":", "\n", "        ", "tokens_ids", "=", "[", "x", "[", "'input_ids'", "]", "for", "x", "in", "tokens_and_id", "]", "\n", "mask", "=", "[", "x", "[", "'attention_mask'", "]", "for", "x", "in", "tokens_and_id", "]", "\n", "item_ids", "=", "[", "x", "[", "'id'", "]", "for", "x", "in", "tokens_and_id", "]", "\n", "\n", "length", "=", "length", "if", "length", "is", "not", "None", "else", "max", "(", "len", "(", "l", ")", "for", "l", "in", "tokens_ids", ")", "\n", "token_tensor", "=", "torch", ".", "zeros", "(", "(", "len", "(", "tokens_ids", ")", ",", "length", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "mask_tensor", "=", "torch", ".", "zeros", "(", "(", "len", "(", "mask", ")", ",", "length", ")", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "for", "i", ",", "(", "t", ",", "m", ")", "in", "enumerate", "(", "zip", "(", "tokens_ids", ",", "mask", ")", ")", ":", "\n", "            ", "token_tensor", "[", "i", ",", ":", "len", "(", "t", ")", "]", "=", "torch", ".", "tensor", "(", "t", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "mask_tensor", "[", "i", ",", ":", "len", "(", "t", ")", "]", "=", "torch", ".", "tensor", "(", "m", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "", "return", "token_tensor", ",", "mask_tensor", ",", "item_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.data_collate": [[307, 357], ["dataloader.DataloaderForSubGraphHard.pack_tensor_2D", "dataloader.DataloaderForSubGraphHard.pack_tensor_2D", "dataloader.DataloaderForSubGraphHard.pack_tensor_2D", "torch.FloatTensor", "torch.FloatTensor", "len", "torch.FloatTensor", "torch.FloatTensor", "x.cuda"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.pack_tensor_2D", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.pack_tensor_2D", "home.repos.pwc.inspect_result.microsoft_bidr.dataset.dataloader.DataloaderForSubGraphHard.pack_tensor_2D"], ["", "def", "data_collate", "(", "self", ",", "queries_data", ",", "docs_data", ",", "hard_docs_data", ")", ":", "\n", "        ", "input_query_ids", ",", "query_attention_mask", ",", "qids", "=", "self", ".", "pack_tensor_2D", "(", "queries_data", ",", "length", "=", "self", ".", "query_length", ")", "\n", "input_doc_ids", ",", "doc_attention_mask", ",", "dids", "=", "self", ".", "pack_tensor_2D", "(", "docs_data", ",", "length", "=", "self", ".", "doc_length", ")", "\n", "neg_doc_ids", ",", "neg_doc_attention_mask", ",", "nids", "=", "self", ".", "pack_tensor_2D", "(", "hard_docs_data", ",", "length", "=", "self", ".", "doc_length", ")", "\n", "\n", "num_per_gpu", "=", "len", "(", "qids", ")", "//", "self", ".", "args", ".", "world_size", "\n", "all_num", "=", "num_per_gpu", "*", "self", ".", "args", ".", "world_size", "\n", "self", ".", "start_inx", "=", "num_per_gpu", "*", "self", ".", "local_rank", "\n", "self", ".", "end_inx", "=", "num_per_gpu", "*", "(", "1", "+", "self", ".", "local_rank", ")", "\n", "self", ".", "nstart_inx", "=", "num_per_gpu", "*", "self", ".", "local_rank", "*", "self", ".", "hard_num", "\n", "self", ".", "nend_inx", "=", "num_per_gpu", "*", "(", "self", ".", "local_rank", "+", "1", ")", "*", "self", ".", "hard_num", "\n", "\n", "qids", "=", "qids", "[", ":", "all_num", "]", "\n", "dids", "=", "dids", "[", ":", "all_num", "]", "\n", "nids", "=", "nids", "[", ":", "all_num", "*", "self", ".", "hard_num", "]", "\n", "\n", "rel_pair_mask", "=", "[", "[", "1", "if", "docid", "not", "in", "self", ".", "query2pos", "[", "qid", "]", "else", "0", "\n", "for", "docid", "in", "dids", "]", "\n", "for", "qid", "in", "qids", "]", "\n", "hard_pair_mask", "=", "[", "[", "1", "if", "docid", "not", "in", "self", ".", "query2pos", "[", "qid", "]", "else", "0", "\n", "for", "docid", "in", "nids", "]", "\n", "for", "qid", "in", "qids", "]", "\n", "rel_pair_mask", "=", "torch", ".", "FloatTensor", "(", "rel_pair_mask", ")", "\n", "hard_pair_mask", "=", "torch", ".", "FloatTensor", "(", "hard_pair_mask", ")", "\n", "\n", "q_emb", ",", "d_emb", ",", "n_emb", "=", "None", ",", "None", ",", "None", "\n", "if", "self", ".", "args", ".", "fix_doc_emb", ":", "\n", "            ", "if", "self", ".", "doc_emb_index", "is", "not", "None", ":", "\n", "                ", "doc_emb_inxs", "=", "[", "self", ".", "doc_emb_index", "[", "x", "]", "for", "x", "in", "dids", "]", "\n", "d_emb", "=", "self", ".", "doc_embeddings", "[", "doc_emb_inxs", "]", "\n", "", "else", ":", "\n", "                ", "d_emb", "=", "self", ".", "doc_embeddings", "[", "dids", "]", "\n", "", "d_emb", "=", "torch", ".", "FloatTensor", "(", "d_emb", ")", "\n", "\n", "if", "self", ".", "doc_emb_index", "is", "not", "None", ":", "\n", "                ", "doc_emb_inxs", "=", "[", "self", ".", "doc_emb_index", "[", "x", "]", "for", "x", "in", "nids", "]", "\n", "n_emb", "=", "self", ".", "doc_embeddings", "[", "doc_emb_inxs", "]", "\n", "", "else", ":", "\n", "                ", "n_emb", "=", "self", ".", "doc_embeddings", "[", "nids", "]", "\n", "", "n_emb", "=", "torch", ".", "FloatTensor", "(", "n_emb", ")", "\n", "\n", "", "batch_data", "=", "(", "\n", "input_query_ids", "[", "self", ".", "start_inx", ":", "self", ".", "end_inx", "]", ",", "query_attention_mask", "[", "self", ".", "start_inx", ":", "self", ".", "end_inx", "]", ",", "\n", "input_doc_ids", "[", "self", ".", "start_inx", ":", "self", ".", "end_inx", "]", ",", "doc_attention_mask", "[", "self", ".", "start_inx", ":", "self", ".", "end_inx", "]", ",", "\n", "neg_doc_ids", "[", "self", ".", "nstart_inx", ":", "self", ".", "nend_inx", "]", ",", "neg_doc_attention_mask", "[", "self", ".", "nstart_inx", ":", "self", ".", "nend_inx", "]", ",", "\n", "rel_pair_mask", ",", "hard_pair_mask", ",", "q_emb", ",", "d_emb", ",", "n_emb", ")", "\n", "if", "self", ".", "enable_gpu", ":", "\n", "            ", "batch_data", "=", "(", "x", ".", "cuda", "(", ")", "if", "x", "is", "not", "None", "else", "None", "for", "x", "in", "batch_data", ")", "\n", "\n", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.BaseModelDot._init_weights": [[17, 20], ["isinstance", "module.weight.data.normal_"], "methods", ["None"], ["    ", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ",", "nn", ".", "Conv1d", ")", ")", ":", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.BaseModelDot.masked_mean": [[21, 25], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.sum().float", "mask.unsqueeze().float", "mask.sum", "mask.unsqueeze"], "methods", ["None"], ["", "", "def", "masked_mean", "(", "self", ",", "t", ",", "mask", ")", ":", "\n", "        ", "s", "=", "torch", ".", "sum", "(", "t", "*", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "float", "(", ")", ",", "axis", "=", "1", ")", "\n", "d", "=", "mask", ".", "sum", "(", "axis", "=", "1", ",", "keepdim", "=", "True", ")", ".", "float", "(", ")", "\n", "return", "s", "/", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.BaseModelDot._text_encode": [[26, 28], ["None"], "methods", ["None"], ["", "def", "_text_encode", "(", "self", ",", "input_ids", ",", "attention_mask", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.BaseModelDot.query_emb": [[29, 39], ["model.BaseModelDot._text_encode", "model.BaseModelDot.masked_mean", "model.BaseModelDot.norm", "model.BaseModelDot.contiguous", "model.BaseModelDot.embeddingHead"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.model.model.RobertaDot._text_encode", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.BaseModelDot.masked_mean"], ["", "def", "query_emb", "(", "self", ",", "input_ids", ",", "attention_mask", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "_text_encode", "(", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ")", "\n", "full_emb", "=", "self", ".", "masked_mean", "(", "outputs", ",", "attention_mask", ")", "\n", "\n", "if", "self", ".", "embeddingHead", "is", "not", "None", ":", "\n", "            ", "query", "=", "self", ".", "norm", "(", "self", ".", "embeddingHead", "(", "full_emb", ")", ")", "\n", "", "else", ":", "\n", "            ", "query", "=", "full_emb", ".", "contiguous", "(", ")", "\n", "", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.BaseModelDot.body_emb": [[40, 42], ["model.BaseModelDot.query_emb"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.model.model.BaseModelDot.query_emb"], ["", "def", "body_emb", "(", "self", ",", "input_ids", ",", "attention_mask", ")", ":", "\n", "        ", "return", "self", ".", "query_emb", "(", "input_ids", ",", "attention_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.BaseModelDot.forward": [[43, 49], ["len", "model.BaseModelDot.query_emb", "model.BaseModelDot.body_emb"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.model.model.BaseModelDot.query_emb", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.BaseModelDot.body_emb"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "is_query", ",", "*", "args", ")", ":", "\n", "        ", "assert", "len", "(", "args", ")", "==", "0", "\n", "if", "is_query", ":", "\n", "            ", "return", "self", ".", "query_emb", "(", "input_ids", ",", "attention_mask", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "body_emb", "(", "input_ids", ",", "attention_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.init_pq": [[52, 85], ["print", "torch.nn.Parameter().type", "torch.nn.Parameter().type", "print", "faiss.read_index", "faiss.downcast_VectorTransform", "isinstance", "faiss.vector_to_array().reshape", "torch.nn.Parameter", "torch.nn.Parameter", "faiss.downcast_index", "faiss.vector_to_array", "centroid_embeds.reshape.reshape.reshape", "torch.nn.Parameter", "torch.nn.Parameter", "faiss.read_index.chain.at", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "print", "faiss.read_index", "faiss.vector_to_array", "centroid_embeds.reshape.reshape.reshape", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "faiss.vector_to_array", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty", "torch.empty", "torch.empty", "torch.empty"], "methods", ["None"], ["    ", "def", "init_pq", "(", "self", ",", "embedding_size", "=", "768", ",", "partition", "=", "96", ",", "centroids", "=", "256", ",", "init_index_path", "=", "None", ",", "train_rotate", "=", "False", ")", ":", "\n", "        ", "self", ".", "rotate", "=", "None", "\n", "if", "init_index_path", "is", "not", "None", ":", "\n", "            ", "if", "'OPQ'", "in", "init_index_path", ":", "\n", "                ", "print", "(", "f'loading codebook from OPQ index: {init_index_path}'", ")", "\n", "opq_index", "=", "faiss", ".", "read_index", "(", "init_index_path", ")", "\n", "vt", "=", "faiss", ".", "downcast_VectorTransform", "(", "opq_index", ".", "chain", ".", "at", "(", "0", ")", ")", "\n", "assert", "isinstance", "(", "vt", ",", "faiss", ".", "LinearTransform", ")", "\n", "opq_transform", "=", "faiss", ".", "vector_to_array", "(", "vt", ".", "A", ")", ".", "reshape", "(", "vt", ".", "d_out", ",", "vt", ".", "d_in", ")", "\n", "self", ".", "rotate", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "opq_transform", ")", ",", "requires_grad", "=", "train_rotate", ")", "\n", "\n", "ivf_index", "=", "faiss", ".", "downcast_index", "(", "opq_index", ".", "index", ")", "\n", "centroid_embeds", "=", "faiss", ".", "vector_to_array", "(", "ivf_index", ".", "pq", ".", "centroids", ")", "\n", "centroid_embeds", "=", "centroid_embeds", ".", "reshape", "(", "ivf_index", ".", "pq", ".", "M", ",", "ivf_index", ".", "pq", ".", "ksub", ",", "ivf_index", ".", "pq", ".", "dsub", ")", "\n", "self", ".", "partition", "=", "ivf_index", ".", "pq", ".", "M", "\n", "self", ".", "codebook", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "centroid_embeds", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "elif", "'PQ'", "in", "init_index_path", ":", "\n", "                ", "self", ".", "rotate", "=", "None", "\n", "print", "(", "f'loading codebook from PQ index: {init_index_path}'", ")", "\n", "pq_index", "=", "faiss", ".", "read_index", "(", "init_index_path", ")", "\n", "centroid_embeds", "=", "faiss", ".", "vector_to_array", "(", "pq_index", ".", "pq", ".", "centroids", ")", "\n", "centroid_embeds", "=", "centroid_embeds", ".", "reshape", "(", "pq_index", ".", "pq", ".", "M", ",", "pq_index", ".", "pq", ".", "ksub", ",", "pq_index", ".", "pq", ".", "dsub", ")", "\n", "self", ".", "partition", "=", "pq_index", ".", "pq", ".", "M", "\n", "self", ".", "codebook", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "centroid_embeds", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "f'init the codebook {partition}-{centroids}'", ")", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "codebook", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "empty", "(", "partition", ",", "centroids", ",", "\n", "embedding_size", "//", "partition", ")", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", ")", ".", "type", "(", "\n", "torch", ".", "FloatTensor", ")", "\n", "self", ".", "rotate", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.rotate_vec": [[86, 90], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "rotate_vec", "(", "self", ",", "vecs", ")", ":", "\n", "        ", "if", "self", ".", "rotate", "is", "None", ":", "\n", "            ", "return", "vecs", "\n", "", "return", "torch", ".", "matmul", "(", "vecs", ",", "self", ".", "rotate", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.code_selection": [[91, 97], ["vecs.view.view.view", "model.ContrasPQ.codebook.unsqueeze().expand", "torch.softmax", "torch.softmax", "vecs.view.view.size", "vecs.view.view.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model.ContrasPQ.codebook.unsqueeze", "vecs.view.view.unsqueeze"], "methods", ["None"], ["", "def", "code_selection", "(", "self", ",", "vecs", ")", ":", "\n", "        ", "vecs", "=", "vecs", ".", "view", "(", "vecs", ".", "size", "(", "0", ")", ",", "self", ".", "partition", ",", "-", "1", ")", "# B P D", "\n", "codebook", "=", "self", ".", "codebook", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "vecs", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "# B P K D", "\n", "proba", "=", "-", "torch", ".", "sum", "(", "(", "vecs", ".", "unsqueeze", "(", "-", "2", ")", "-", "codebook", ")", "**", "2", ",", "-", "1", ")", "# B P K", "\n", "proba", "=", "F", ".", "softmax", "(", "proba", ",", "-", "1", ")", "\n", "return", "proba", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.STEstimator": [[98, 102], ["torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "proba.max", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like().scatter_.detach", "torch.zeros_like().scatter_.detach", "proba.detach"], "methods", ["None"], ["", "def", "STEstimator", "(", "self", ",", "proba", ")", ":", "\n", "        ", "index", "=", "proba", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "proba_hard", "=", "torch", ".", "zeros_like", "(", "proba", ",", "device", "=", "proba", ".", "device", ",", "dtype", "=", "proba", ".", "dtype", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "return", "proba_hard", ".", "detach", "(", ")", "-", "proba", ".", "detach", "(", ")", "+", "proba", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.hard_vecs": [[103, 110], ["model.ContrasPQ.STEstimator", "proba.unsqueeze.unsqueeze.unsqueeze", "model.ContrasPQ.codebook.unsqueeze().expand", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "hard_vecs.view.view.view", "proba.unsqueeze.unsqueeze.size", "proba.unsqueeze.unsqueeze.size", "model.ContrasPQ.codebook.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.STEstimator"], ["", "def", "hard_vecs", "(", "self", ",", "proba", ")", ":", "\n", "        ", "proba", "=", "self", ".", "STEstimator", "(", "proba", ")", "# B P K", "\n", "proba", "=", "proba", ".", "unsqueeze", "(", "2", ")", "# B P 1 K", "\n", "codebook", "=", "self", ".", "codebook", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "proba", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "# B P K D", "\n", "hard_vecs", "=", "torch", ".", "matmul", "(", "proba", ",", "codebook", ")", ".", "squeeze", "(", "2", ")", "# B P D", "\n", "hard_vecs", "=", "hard_vecs", ".", "view", "(", "proba", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# B L", "\n", "return", "hard_vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.quant": [[111, 116], ["model.ContrasPQ.rotate_vec", "model.ContrasPQ.code_selection", "model.ContrasPQ.hard_vecs"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.rotate_vec", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.code_selection", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.hard_vecs"], ["", "def", "quant", "(", "self", ",", "vecs", ")", ":", "\n", "        ", "vecs", "=", "self", ".", "rotate_vec", "(", "vecs", ")", "\n", "prob", "=", "self", ".", "code_selection", "(", "vecs", ")", "\n", "hard_vecs", "=", "self", ".", "hard_vecs", "(", "prob", ")", "\n", "return", "hard_vecs", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.quantization_loss": [[117, 119], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "quantization_loss", "(", "self", ",", "vec", ",", "quant_vec", ")", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "(", "vec", "-", "quant_vec", ")", "**", "2", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.RobertaDot.__init__": [[122, 146], ["torch.nn.Module.__init__", "RobertaPreTrainedModel.__init__", "torch.nn.Module.__init__", "hasattr", "model.RobertaDot.apply", "transformers.RobertaModel", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "model.RobertaDot.init_pq"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.model.model.RobertaDot.__init__", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.RobertaDot.__init__", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.RobertaDot.__init__", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.init_pq"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "BaseModelDot", ".", "__init__", "(", "self", ")", "\n", "RobertaPreTrainedModel", ".", "__init__", "(", "self", ",", "config", ")", "\n", "ContrasPQ", ".", "__init__", "(", "self", ")", "\n", "\n", "if", "int", "(", "transformers", ".", "__version__", "[", "0", "]", ")", "==", "4", ":", "\n", "            ", "config", ".", "return_dict", "=", "False", "\n", "\n", "", "if", "hasattr", "(", "config", ",", "\"output_embedding_size\"", ")", ":", "\n", "            ", "self", ".", "output_embedding_size", "=", "config", ".", "output_embedding_size", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_embedding_size", "=", "config", ".", "hidden_size", "\n", "\n", "", "if", "config", ".", "use_linear", ":", "\n", "            ", "self", ".", "embeddingHead", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "output_embedding_size", ")", "\n", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "self", ".", "output_embedding_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embeddingHead", "=", "None", "\n", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ",", "add_pooling_layer", "=", "False", ")", "\n", "if", "config", ".", "use_pq", ":", "\n", "            ", "self", ".", "init_pq", "(", "self", ".", "output_embedding_size", ",", "config", ".", "partition", ",", "config", ".", "centroids", ",", "config", ".", "init_index_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.RobertaDot._text_encode": [[147, 151], ["model.RobertaDot.roberta"], "methods", ["None"], ["", "", "def", "_text_encode", "(", "self", ",", "input_ids", ",", "attention_mask", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ")", "\n", "return", "outputs", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.microsoft_bidr.model.model.RobertaDotTrainModel.forward": [[154, 209], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.diagonal().view", "torch.diagonal().view", "torch.diagonal().view", "torch.diagonal().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log_softmax", "torch.log_softmax", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cross_entropy.mean", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cross_entropy", "torch.cross_entropy", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cross_entropy", "torch.cross_entropy", "score.masked_fill.masked_fill.size", "model.RobertaDotTrainModel.rotate_vec", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "score.masked_fill.masked_fill.masked_fill", "torch.cross_entropy", "torch.cross_entropy", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "quant_score.masked_fill.masked_fill.masked_fill", "score.masked_fill.masked_fill.size", "model.RobertaDotTrainModel.quantization_loss", "model.RobertaDotTrainModel.quantization_loss"], "methods", ["home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.rotate_vec", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.quantization_loss", "home.repos.pwc.inspect_result.microsoft_bidr.model.model.ContrasPQ.quantization_loss"], ["    ", "def", "forward", "(", "self", ",", "all_q", ",", "all_k", ",", "all_n", ",", "\n", "rel_pair_mask", "=", "None", ",", "hard_pair_mask", "=", "None", ",", "\n", "loss_method", "=", "'multi_ce'", ",", "\n", "temperature", "=", "1", ",", "\n", "hard_k", "=", "None", ",", "hard_n", "=", "None", ",", "quant_weight", "=", "1e-6", ")", ":", "\n", "\n", "        ", "if", "loss_method", "==", "'nce'", ":", "\n", "            ", "score", "=", "torch", ".", "matmul", "(", "all_q", ",", "all_k", ".", "T", ")", "\n", "positive_score", "=", "torch", ".", "diagonal", "(", "score", ",", "0", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "neg_score", "=", "score", "*", "(", "1", "-", "torch", ".", "eye", "(", "score", ".", "size", "(", "0", ")", ",", "dtype", "=", "score", ".", "dtype", ",", "device", "=", "score", ".", "device", ")", ")", "\n", "max_neg", "=", "torch", ".", "max", "(", "neg_score", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "logit_matrix", "=", "torch", ".", "cat", "(", "[", "positive_score", ",", "max_neg", "]", ",", "dim", "=", "-", "1", ")", "# [B, 2]", "\n", "lsm", "=", "F", ".", "log_softmax", "(", "logit_matrix", ",", "dim", "=", "1", ")", "\n", "loss", "=", "-", "1.0", "*", "lsm", "[", ":", ",", "0", "]", "\n", "return", "loss", ".", "mean", "(", ")", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "elif", "loss_method", "==", "'inbatch'", ":", "\n", "            ", "score", "=", "torch", ".", "matmul", "(", "all_q", ",", "all_k", ".", "T", ")", "\n", "score", "=", "score", "/", "temperature", "\n", "labels", "=", "torch", ".", "arange", "(", "start", "=", "0", ",", "end", "=", "score", ".", "shape", "[", "0", "]", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "score", ".", "device", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "score", ",", "labels", ")", "\n", "return", "loss", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "elif", "loss_method", "==", "'multi_ce'", ":", "\n", "            ", "score", "=", "torch", ".", "matmul", "(", "all_q", ",", "all_k", ".", "T", ")", "#B B", "\n", "n_score", "=", "torch", ".", "matmul", "(", "all_q", ",", "all_n", ".", "T", ")", "#B BN", "\n", "score", "=", "torch", ".", "cat", "(", "[", "score", ",", "n_score", "]", ",", "dim", "=", "-", "1", ")", "#B B+BN", "\n", "\n", "if", "hard_k", "is", "not", "None", ":", "\n", "                ", "rotate_q", "=", "self", ".", "rotate_vec", "(", "all_q", ")", "\n", "quant_score", "=", "torch", ".", "matmul", "(", "rotate_q", ",", "hard_k", ".", "T", ")", "\n", "quant_nscore", "=", "torch", ".", "matmul", "(", "rotate_q", ",", "hard_n", ".", "T", ")", "\n", "quant_score", "=", "torch", ".", "cat", "(", "[", "quant_score", ",", "quant_nscore", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "rel_pair_mask", "is", "not", "None", "and", "hard_pair_mask", "is", "not", "None", ":", "\n", "                ", "rel_pair_mask", "=", "rel_pair_mask", "+", "torch", ".", "eye", "(", "score", ".", "size", "(", "0", ")", ",", "dtype", "=", "score", ".", "dtype", ",", "device", "=", "score", ".", "device", ")", "\n", "mask", "=", "torch", ".", "cat", "(", "[", "rel_pair_mask", ",", "hard_pair_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "score", "=", "score", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "10000", ")", "\n", "if", "hard_k", "is", "not", "None", ":", "\n", "                    ", "quant_score", "=", "quant_score", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "10000", ")", "\n", "\n", "", "", "score", "=", "score", "/", "temperature", "\n", "labels", "=", "torch", ".", "arange", "(", "start", "=", "0", ",", "end", "=", "score", ".", "shape", "[", "0", "]", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "device", "=", "score", ".", "device", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "score", ",", "labels", ")", "\n", "\n", "if", "hard_k", "is", "not", "None", ":", "\n", "                ", "quant_score", "=", "quant_score", "/", "temperature", "\n", "qloss", "=", "F", ".", "cross_entropy", "(", "quant_score", ",", "labels", ")", "\n", "quant_loss", "=", "quant_weight", "*", "(", "self", ".", "quantization_loss", "(", "all_k", ",", "hard_k", ")", "+", "self", ".", "quantization_loss", "(", "all_n", ",", "hard_n", ")", ")", "\n", "all_loss", "=", "loss", "+", "qloss", "+", "quant_loss", "\n", "return", "all_loss", ",", "loss", ",", "qloss", ",", "quant_loss", "\n", "", "else", ":", "\n", "                ", "return", "loss", ",", "loss", ",", "0.", ",", "0.", "\n", "\n"]]}