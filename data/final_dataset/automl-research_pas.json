{"home.repos.pwc.inspect_result.automl-research_pas.None.logging_util.SizedTimedRotatingFileHandler.__init__": [[32, 44], ["logging.TimedRotatingFileHandler.__init__", "logging.TimedRotatingFileHandler.__init__", "logging.TimedRotatingFileHandler.__init__"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["def", "__init__", "(", "self", ",", "filename", ",", "mode", "=", "'a'", ",", "maxBytes", "=", "0", ",", "backupCount", "=", "0", ",", "encoding", "=", "None", ",", "\n", "delay", "=", "0", ",", "when", "=", "'h'", ",", "interval", "=", "1", ",", "utc", "=", "False", ")", ":", "\n", "# If rotation/rollover is wanted, it doesn't make sense to use another", "\n", "# mode. If for example 'w' were specified, then if there were multiple", "\n", "# runs of the calling application, the logs from previous runs would be", "\n", "# lost if the 'w' is respected, because the log file would be truncated", "\n", "# on each run.", "\n", "        ", "if", "maxBytes", ">", "0", ":", "\n", "            ", "mode", "=", "'a'", "\n", "", "handlers", ".", "TimedRotatingFileHandler", ".", "__init__", "(", "\n", "self", ",", "filename", ",", "when", ",", "interval", ",", "backupCount", ",", "encoding", ",", "delay", ",", "utc", ")", "\n", "self", ".", "maxBytes", "=", "maxBytes", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.logging_util.SizedTimedRotatingFileHandler.shouldRollover": [[45, 63], ["int", "logging_util.SizedTimedRotatingFileHandler._open", "logging_util.SizedTimedRotatingFileHandler.stream.seek", "time.time", "logging_util.SizedTimedRotatingFileHandler.format", "logging_util.SizedTimedRotatingFileHandler.stream.tell", "len"], "methods", ["None"], ["", "def", "shouldRollover", "(", "self", ",", "record", ")", ":", "\n", "        ", "\"\"\"\n        Determine if rollover should occur.\n\n        Basically, see if the supplied record would cause the file to exceed\n        the size limit we have.\n        \"\"\"", "\n", "if", "self", ".", "stream", "is", "None", ":", "# delay was set...", "\n", "            ", "self", ".", "stream", "=", "self", ".", "_open", "(", ")", "\n", "", "if", "self", ".", "maxBytes", ">", "0", ":", "# are we rolling over?", "\n", "            ", "msg", "=", "\"%s\\n\"", "%", "self", ".", "format", "(", "record", ")", "\n", "self", ".", "stream", ".", "seek", "(", "0", ",", "2", ")", "#due to non-posix-compliant Windows feature", "\n", "if", "self", ".", "stream", ".", "tell", "(", ")", "+", "len", "(", "msg", ")", ">=", "self", ".", "maxBytes", ":", "\n", "                ", "return", "1", "\n", "", "", "t", "=", "int", "(", "time", ".", "time", "(", ")", ")", "\n", "if", "t", ">=", "self", ".", "rolloverAt", ":", "\n", "            ", "return", "1", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.logging_util.demo_SizedTimedRotatingFileHandler": [[64, 77], ["logging.getLogger", "logging.getLogger", "logging.getLogger", "logging.getLogger.setLevel", "logging_util.SizedTimedRotatingFileHandler", "logging.getLogger.addHandler", "range", "time.sleep", "logging.getLogger.debug"], "function", ["None"], ["", "", "def", "demo_SizedTimedRotatingFileHandler", "(", ")", ":", "\n", "    ", "log_filename", "=", "'test_log/log_rotate'", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'MyLogger'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "handler", "=", "SizedTimedRotatingFileHandler", "(", "\n", "log_filename", ",", "maxBytes", "=", "100", ",", "backupCount", "=", "5", ",", "\n", "when", "=", "'s'", ",", "interval", "=", "10", ",", "\n", "# encoding='bz2',  # uncomment for bz2 compression", "\n", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "for", "i", "in", "range", "(", "10000", ")", ":", "\n", "        ", "time", ".", "sleep", "(", "0.1", ")", "\n", "logger", ".", "debug", "(", "'i=%d'", "%", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.logging_util.init_logger": [[78, 111], ["logging.getLogger", "logging.getLogger", "logging.getLogger", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.StreamHandler", "logging.StreamHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.Formatter", "logging.Formatter", "logging.FileHandler.setFormatter", "logging.StreamHandler.setFormatter", "logging_util.SizedTimedRotatingFileHandler", "SizedTimedRotatingFileHandler.setLevel", "SizedTimedRotatingFileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["", "", "def", "init_logger", "(", "logger_name", "=", "''", ",", "log_file", "=", "''", ",", "log_level", "=", "''", ",", "print_console", "=", "False", ")", ":", "\n", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "log_level", ")", "\n", "\n", "# create a file handler", "\n", "handler", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "\n", "error_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "error_handler", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "# create a logging format", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(name)s-logging.%(levelname)s-%(thread)d-%(asctime)s-%(message)s'", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "error_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "daily_handler", "=", "SizedTimedRotatingFileHandler", "(", "log_file", ",", "when", "=", "'midnight'", ")", "\n", "daily_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "daily_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "# add the handlers to the logger", "\n", "#logger.addHandler(handler)", "\n", "logger", ".", "addHandler", "(", "error_handler", ")", "\n", "logger", ".", "addHandler", "(", "daily_handler", ")", "\n", "\n", "if", "print_console", ":", "\n", "        ", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "console_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pyg_gnn_layer.GeoLayer.__init__": [[13, 64], ["torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "pyg_gnn_layer.GeoLayer.reset_parameters", "message_passing.MessagePassing.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "message_passing.MessagePassing.__init__", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "pyg_gnn_layer.GeoLayer.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "heads", "=", "1", ",", "\n", "concat", "=", "True", ",", "\n", "negative_slope", "=", "0.2", ",", "\n", "dropout", "=", "0", ",", "\n", "bias", "=", "True", ",", "\n", "att_type", "=", "\"gat\"", ",", "\n", "agg_type", "=", "\"sum\"", ",", "\n", "pool_dim", "=", "0", ")", ":", "\n", "        ", "if", "agg_type", "in", "[", "\"sum\"", ",", "\"mlp\"", "]", ":", "\n", "            ", "super", "(", "GeoLayer", ",", "self", ")", ".", "__init__", "(", "'add'", ")", "\n", "", "elif", "agg_type", "in", "[", "\"mean\"", ",", "\"max\"", "]", ":", "\n", "            ", "super", "(", "GeoLayer", ",", "self", ")", ".", "__init__", "(", "agg_type", ")", "\n", "", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "heads", "=", "heads", "\n", "self", ".", "concat", "=", "concat", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "att_type", "=", "att_type", "\n", "self", ".", "agg_type", "=", "agg_type", "\n", "\n", "# GCN weight", "\n", "#self.gcn_weight = None", "\n", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "heads", "*", "out_channels", ")", ")", "\n", "self", ".", "att", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "heads", ",", "2", "*", "out_channels", ")", ")", "\n", "\n", "if", "bias", "and", "concat", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "heads", "*", "out_channels", ")", ")", "\n", "", "elif", "bias", "and", "not", "concat", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "if", "self", ".", "att_type", "in", "[", "\"generalized_linear\"", "]", ":", "\n", "            ", "self", ".", "general_att_layer", "=", "torch", ".", "nn", ".", "Linear", "(", "out_channels", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "#if self.agg_type in [\"mean\", \"max\", \"mlp\"]:", "\n", "#    if pool_dim <= 0:", "\n", "#        pool_dim = 128", "\n", "#self.pool_dim = pool_dim", "\n", "#if pool_dim != 0:", "\n", "#    self.pool_layer = torch.nn.ModuleList()", "\n", "#    self.pool_layer.append(torch.nn.Linear(self.out_channels, self.pool_dim))", "\n", "#    self.pool_layer.append(torch.nn.Linear(self.pool_dim, self.out_channels))", "\n", "#else:", "\n", "#    pass", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pyg_gnn_layer.GeoLayer.norm": [[65, 82], ["pyg_gnn_layer.GeoLayer.", "torch_scatter.scatter_add", "torch_scatter.scatter_add.pow", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "edge_index.size", "float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "norm", "(", "edge_index", ",", "num_nodes", ",", "edge_weight", ",", "improved", "=", "False", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "if", "edge_weight", "is", "None", ":", "\n", "            ", "edge_weight", "=", "torch", ".", "ones", "(", "(", "edge_index", ".", "size", "(", "1", ")", ",", ")", ",", "\n", "dtype", "=", "dtype", ",", "\n", "device", "=", "edge_index", ".", "device", ")", "\n", "\n", "", "fill_value", "=", "1", "if", "not", "improved", "else", "2", "\n", "edge_index", ",", "edge_weight", "=", "add_remaining_self_loops", "(", "\n", "edge_index", ",", "edge_weight", ",", "fill_value", ",", "num_nodes", ")", "\n", "\n", "row", ",", "col", "=", "edge_index", "\n", "deg", "=", "scatter_add", "(", "edge_weight", ",", "row", ",", "dim", "=", "0", ",", "dim_size", "=", "num_nodes", ")", "\n", "deg_inv_sqrt", "=", "deg", ".", "pow", "(", "-", "0.5", ")", "\n", "deg_inv_sqrt", "[", "deg_inv_sqrt", "==", "float", "(", "'inf'", ")", "]", "=", "0", "\n", "\n", "return", "edge_index", ",", "deg_inv_sqrt", "[", "row", "]", "*", "edge_weight", "*", "deg_inv_sqrt", "[", "col", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pyg_gnn_layer.GeoLayer.reset_parameters": [[83, 90], ["torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.zeros", "torch_geometric.nn.inits.glorot"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "weight", ")", "\n", "glorot", "(", "self", ".", "att", ")", "\n", "zeros", "(", "self", ".", "bias", ")", "\n", "\n", "if", "self", ".", "att_type", "in", "[", "\"generalized_linear\"", "]", ":", "\n", "            ", "glorot", "(", "self", ".", "general_att_layer", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pyg_gnn_layer.GeoLayer.forward": [[96, 109], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "pyg_gnn_layer.GeoLayer.propagate", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "pyg_gnn_layer.GeoLayer.", "pyg_gnn_layer.GeoLayer.", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.mm().view.size", "torch.mm().view.size", "torch.mm().view.size", "torch.mm().view.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.propagate"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "size", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "size", "is", "None", "and", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "            ", "edge_index", ",", "_", "=", "remove_self_loops", "(", "edge_index", ")", "\n", "edge_index", ",", "_", "=", "add_self_loops", "(", "edge_index", ",", "num_nodes", "=", "x", ".", "size", "(", "0", ")", ")", "\n", "# prepare", "\n", "", "if", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "            ", "x", "=", "torch", ".", "mm", "(", "x", ",", "self", ".", "weight", ")", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "(", "None", "if", "x", "[", "0", "]", "is", "None", "else", "torch", ".", "matmul", "(", "x", "[", "0", "]", ",", "self", ".", "weight", ")", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "out_channels", ")", ",", "\n", "None", "if", "x", "[", "1", "]", "is", "None", "else", "torch", ".", "matmul", "(", "x", "[", "1", "]", ",", "self", ".", "weight", ")", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "out_channels", ")", ")", "\n", "", "num_nodes", "=", "x", ".", "size", "(", "0", ")", "if", "torch", ".", "is_tensor", "(", "x", ")", "else", "size", "[", "0", "]", "\n", "return", "self", ".", "propagate", "(", "edge_index", ",", "size", "=", "size", ",", "x", "=", "x", ",", "num_nodes", "=", "num_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pyg_gnn_layer.GeoLayer.message": [[110, 134], ["pyg_gnn_layer.GeoLayer.apply_attention", "torch_geometric.utils.softmax", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.view"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.pyg_gnn_layer.GeoLayer.apply_attention"], ["", "def", "message", "(", "self", ",", "x_i", ",", "x_j", ",", "edge_index", ",", "num_nodes", ")", ":", "\n", "\n", "        ", "if", "self", ".", "att_type", "==", "\"const\"", ":", "\n", "            ", "if", "self", ".", "training", "and", "self", ".", "dropout", ">", "0", ":", "\n", "                ", "x_j", "=", "F", ".", "dropout", "(", "x_j", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "True", ")", "\n", "", "neighbor", "=", "x_j", "\n", "#elif self.att_type == \"gcn\":", "\n", "#    if self.gcn_weight is None or self.gcn_weight.size(0) != x_j.size(0):  # \u5bf9\u4e8e\u4e0d\u540c\u7684\u56fegcn_weight\u9700\u8981\u91cd\u65b0\u8ba1\u7b97", "\n", "#        _, norm = self.norm(edge_index, num_nodes, None)", "\n", "#        self.gcn_weight = norm", "\n", "#    neighbor = self.gcn_weight.view(-1, 1, 1) * x_j", "\n", "", "else", ":", "\n", "# Compute attention coefficients.", "\n", "            ", "alpha", "=", "self", ".", "apply_attention", "(", "edge_index", ",", "num_nodes", ",", "x_i", ",", "x_j", ")", "\n", "alpha", "=", "softmax", "(", "alpha", ",", "edge_index", "[", "0", "]", ",", "ptr", "=", "None", ",", "num_nodes", "=", "num_nodes", ")", "\n", "# Sample attention coefficients stochastically.", "\n", "if", "self", ".", "training", "and", "self", ".", "dropout", ">", "0", ":", "\n", "                ", "alpha", "=", "F", ".", "dropout", "(", "alpha", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "True", ")", "\n", "\n", "", "neighbor", "=", "x_j", "*", "alpha", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "1", ")", "\n", "#if self.pool_dim > 0:", "\n", "#    for layer in self.pool_layer:", "\n", "#        neighbor = layer(neighbor)", "\n", "", "return", "neighbor", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pyg_gnn_layer.GeoLayer.apply_attention": [[135, 171], ["torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "al.sum", "ar.sum", "pyg_gnn_layer.GeoLayer.sum", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "pyg_gnn_layer.GeoLayer.general_att_layer", "Exception"], "methods", ["None"], ["", "def", "apply_attention", "(", "self", ",", "edge_index", ",", "num_nodes", ",", "x_i", ",", "x_j", ")", ":", "\n", "        ", "if", "self", ".", "att_type", "==", "\"gat\"", ":", "\n", "            ", "alpha", "=", "(", "torch", ".", "cat", "(", "[", "x_i", ",", "x_j", "]", ",", "dim", "=", "-", "1", ")", "*", "self", ".", "att", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "alpha", "=", "F", ".", "leaky_relu", "(", "alpha", ",", "self", ".", "negative_slope", ")", "\n", "\n", "", "elif", "self", ".", "att_type", "==", "\"gat_sym\"", ":", "\n", "            ", "wl", "=", "self", ".", "att", "[", ":", ",", ":", ",", ":", "self", ".", "out_channels", "]", "# weight left", "\n", "wr", "=", "self", ".", "att", "[", ":", ",", ":", ",", "self", ".", "out_channels", ":", "]", "# weight right", "\n", "alpha", "=", "(", "x_i", "*", "wl", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "+", "(", "x_j", "*", "wr", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "alpha_2", "=", "(", "x_j", "*", "wl", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "+", "(", "x_i", "*", "wr", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "alpha", "=", "F", ".", "leaky_relu", "(", "alpha", ",", "self", ".", "negative_slope", ")", "+", "F", ".", "leaky_relu", "(", "alpha_2", ",", "self", ".", "negative_slope", ")", "\n", "\n", "", "elif", "self", ".", "att_type", "==", "\"linear\"", ":", "\n", "            ", "wl", "=", "self", ".", "att", "[", ":", ",", ":", ",", ":", "self", ".", "out_channels", "]", "# weight left", "\n", "wr", "=", "self", ".", "att", "[", ":", ",", ":", ",", "self", ".", "out_channels", ":", "]", "# weight right", "\n", "al", "=", "x_j", "*", "wl", "\n", "ar", "=", "x_j", "*", "wr", "\n", "alpha", "=", "al", ".", "sum", "(", "dim", "=", "-", "1", ")", "+", "ar", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "alpha", "=", "torch", ".", "tanh", "(", "alpha", ")", "\n", "", "elif", "self", ".", "att_type", "==", "\"cos\"", ":", "\n", "            ", "wl", "=", "self", ".", "att", "[", ":", ",", ":", ",", ":", "self", ".", "out_channels", "]", "# weight left", "\n", "wr", "=", "self", ".", "att", "[", ":", ",", ":", ",", "self", ".", "out_channels", ":", "]", "# weight right", "\n", "alpha", "=", "x_i", "*", "wl", "*", "x_j", "*", "wr", "\n", "alpha", "=", "alpha", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "elif", "self", ".", "att_type", "==", "\"generalized_linear\"", ":", "\n", "            ", "wl", "=", "self", ".", "att", "[", ":", ",", ":", ",", ":", "self", ".", "out_channels", "]", "# weight left", "\n", "wr", "=", "self", ".", "att", "[", ":", ",", ":", ",", "self", ".", "out_channels", ":", "]", "# weight right", "\n", "al", "=", "x_i", "*", "wl", "\n", "ar", "=", "x_j", "*", "wr", "\n", "alpha", "=", "al", "+", "ar", "\n", "alpha", "=", "torch", ".", "tanh", "(", "alpha", ")", "\n", "alpha", "=", "self", ".", "general_att_layer", "(", "alpha", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Wrong attention type:\"", ",", "self", ".", "att_type", ")", "\n", "", "return", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pyg_gnn_layer.GeoLayer.update": [[172, 181], ["aggr_out.mean.mean.view", "aggr_out.mean.mean.mean"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "\n", "        ", "if", "self", ".", "concat", "is", "True", ":", "\n", "            ", "aggr_out", "=", "aggr_out", ".", "view", "(", "-", "1", ",", "self", ".", "heads", "*", "self", ".", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "aggr_out", "=", "aggr_out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "aggr_out", "=", "aggr_out", "+", "self", ".", "bias", "\n", "", "return", "aggr_out", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pyg_gnn_layer.GeoLayer.__repr__": [[182, 186], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {}, heads={})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "in_channels", ",", "\n", "self", ".", "out_channels", ",", "self", ".", "heads", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.Breadth.__init__": [[29, 32], ["super().__init__", "torch_geometric.nn.GATConv"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "Breadth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gatconv", "=", "GATConv", "(", "in_dim", ",", "out_dim", ",", "heads", "=", "1", ")", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.Breadth.reset_parameters": [[32, 34], ["geniepath.Breadth.gatconv.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "gatconv", ".", "reset_parameters", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.Breadth.forward": [[34, 37], ["torch.tanh", "geniepath.Breadth.gatconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "torch", ".", "tanh", "(", "self", ".", "gatconv", "(", "x", ",", "edge_index", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.Depth.__init__": [[40, 43], ["super().__init__", "torch.nn.LSTM"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "hidden", ")", ":", "\n", "        ", "super", "(", "Depth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lstm", "=", "torch", ".", "nn", ".", "LSTM", "(", "in_dim", ",", "hidden", ",", "1", ",", "bias", "=", "False", ")", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.Depth.reset_parameters": [[43, 45], ["geniepath.Depth.lstm.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "lstm", ".", "reset_parameters", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "h", ",", "c", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.Depth.forward": [[45, 48], ["geniepath.Depth.lstm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "h", ",", "c", ")", ":", "\n", "        ", "x", ",", "(", "h", ",", "c", ")", "=", "self", ".", "lstm", "(", "x", ",", "(", "h", ",", "c", ")", ")", "\n", "return", "x", ",", "(", "h", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.GeniePathLayer.__init__": [[51, 58], ["super().__init__", "geniepath.Breadth", "geniepath.Depth"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "hidden", ")", ":", "\n", "        ", "super", "(", "GeniePathLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "breadth_func", "=", "Breadth", "(", "in_dim", ",", "hidden", ")", "\n", "self", ".", "depth_func", "=", "Depth", "(", "hidden", ",", "hidden", ")", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "hidden", "=", "hidden", "\n", "self", ".", "lstm_hidden", "=", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.GeniePathLayer.reset_parameters": [[59, 62], ["geniepath.GeniePathLayer.breadth_func.reset_parameters", "geniepath.GeniePathLayer.depth_func.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters", "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "breadth_func", ".", "reset_parameters", "(", ")", "\n", "self", ".", "depth_func", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.GeniePathLayer.forward": [[63, 71], ["torch.zeros", "torch.zeros", "geniepath.GeniePathLayer.breadth_func", "geniepath.GeniePathLayer.depth_func"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "h", "=", "torch", ".", "zeros", "(", "1", ",", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "lstm_hidden", ",", "device", "=", "x", ".", "device", ")", "\n", "c", "=", "torch", ".", "zeros", "(", "1", ",", "x", ".", "shape", "[", "0", "]", ",", "self", ".", "lstm_hidden", ",", "device", "=", "x", ".", "device", ")", "\n", "x", "=", "self", ".", "breadth_func", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "x", "[", "None", ",", ":", "]", "\n", "x", ",", "(", "h", ",", "c", ")", "=", "self", ".", "depth_func", "(", "x", ",", "h", ",", "c", ")", "\n", "x", "=", "x", "[", "0", "]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.GeniePath.__init__": [[74, 80], ["super().__init__", "torch.nn.Linear", "torch.nn.ModuleList", "torch.nn.Linear", "geniepath.GeniePathLayer", "range"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "GeniePath", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin1", "=", "torch", ".", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", "\n", "self", ".", "gplayers", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "GeniePathLayer", "(", "dim", ")", "for", "i", "in", "range", "(", "layer_num", ")", "]", ")", "\n", "self", ".", "lin2", "=", "torch", ".", "nn", ".", "Linear", "(", "dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.GeniePath.forward": [[81, 89], ["geniepath.GeniePath.lin1", "torch.zeros", "torch.zeros", "enumerate", "geniepath.GeniePath.lin2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "self", ".", "lin1", "(", "x", ")", "\n", "h", "=", "torch", ".", "zeros", "(", "1", ",", "x", ".", "shape", "[", "0", "]", ",", "lstm_hidden", ",", "device", "=", "x", ".", "device", ")", "\n", "c", "=", "torch", ".", "zeros", "(", "1", ",", "x", ".", "shape", "[", "0", "]", ",", "lstm_hidden", ",", "device", "=", "x", ".", "device", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "self", ".", "gplayers", ")", ":", "\n", "            ", "x", ",", "(", "h", ",", "c", ")", "=", "self", ".", "gplayers", "[", "i", "]", "(", "x", ",", "edge_index", ",", "h", ",", "c", ")", "\n", "", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.GeniePathLazy.__init__": [[92, 100], ["super().__init__", "torch.nn.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "geniepath.Breadth", "geniepath.Depth", "range", "range"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "GeniePathLazy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lin1", "=", "torch", ".", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", "\n", "self", ".", "breadths", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "Breadth", "(", "dim", ",", "dim", ")", "for", "i", "in", "range", "(", "layer_num", ")", "]", ")", "\n", "self", ".", "depths", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "Depth", "(", "dim", "*", "2", ",", "lstm_hidden", ")", "for", "i", "in", "range", "(", "layer_num", ")", "]", ")", "\n", "self", ".", "lin2", "=", "torch", ".", "nn", ".", "Linear", "(", "dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.GeniePathLazy.forward": [[101, 114], ["geniepath.GeniePathLazy.lin1", "torch.zeros", "torch.zeros", "enumerate", "enumerate", "geniepath.GeniePathLazy.lin2", "h_tmps.append", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "self", ".", "lin1", "(", "x", ")", "\n", "h", "=", "torch", ".", "zeros", "(", "1", ",", "x", ".", "shape", "[", "0", "]", ",", "lstm_hidden", ",", "device", "=", "x", ".", "device", ")", "\n", "c", "=", "torch", ".", "zeros", "(", "1", ",", "x", ".", "shape", "[", "0", "]", ",", "lstm_hidden", ",", "device", "=", "x", ".", "device", ")", "\n", "h_tmps", "=", "[", "]", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "self", ".", "breadths", ")", ":", "\n", "            ", "h_tmps", ".", "append", "(", "self", ".", "breadths", "[", "i", "]", "(", "x", ",", "edge_index", ")", ")", "\n", "", "x", "=", "x", "[", "None", ",", ":", "]", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "self", ".", "depths", ")", ":", "\n", "            ", "in_cat", "=", "torch", ".", "cat", "(", "(", "h_tmps", "[", "i", "]", "[", "None", ",", ":", "]", ",", "x", ")", ",", "-", "1", ")", "\n", "x", ",", "(", "h", ",", "c", ")", "=", "self", ".", "depths", "[", "i", "]", "(", "in_cat", ",", "h", ",", "c", ")", "\n", "", "x", "=", "self", ".", "lin2", "(", "x", "[", "0", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.train": [[124, 138], ["model.train", "data.to.to", "optimizer.zero_grad", "loss_op", "loss_op.backward", "optimizer.step", "len", "model", "loss_op.item"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.train"], ["", "", "def", "train", "(", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "total_loss", "=", "0", "\n", "for", "data", "in", "train_loader", ":", "\n", "        ", "num_graphs", "=", "data", ".", "num_graphs", "\n", "data", ".", "batch", "=", "None", "\n", "data", "=", "data", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "loss_op", "(", "model", "(", "data", ".", "x", ",", "data", ".", "edge_index", ")", ",", "data", ".", "y", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "num_graphs", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "return", "total_loss", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.test": [[140, 152], ["model.eval", "ys.append", "preds.append", "torch.cat().numpy", "torch.cat().numpy", "sklearn.metrics.f1_score", "torch.no_grad", "model", "pred.sum", "data.x.to", "data.edge_index.to", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "test", "(", "loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "ys", ",", "preds", "=", "[", "]", ",", "[", "]", "\n", "for", "data", "in", "loader", ":", "\n", "        ", "ys", ".", "append", "(", "data", ".", "y", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "out", "=", "model", "(", "data", ".", "x", ".", "to", "(", "device", ")", ",", "data", ".", "edge_index", ".", "to", "(", "device", ")", ")", "\n", "", "preds", ".", "append", "(", "(", "out", ">", "0", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "", "y", ",", "pred", "=", "torch", ".", "cat", "(", "ys", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", ",", "torch", ".", "cat", "(", "preds", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "return", "f1_score", "(", "y", ",", "pred", ",", "average", "=", "'micro'", ")", "if", "pred", ".", "sum", "(", ")", ">", "0", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.agg_zoo.GAT_mix.forward": [[17, 82], ["isinstance", "agg_zoo.GAT_mix.propagate", "isinstance", "agg_zoo.GAT_mix.lin_l().view", "agg_zoo.GAT_mix.lin_l().view", "isinstance", "out.mean.mean.view", "out.mean.mean.mean", "isinstance", "x.dim", "x[].dim", "agg_zoo.GAT_mix.lin_r().view", "agg_zoo.GAT_mix.size", "agg_zoo.GAT_mix.", "agg_zoo.GAT_mix.", "isinstance", "isinstance", "agg_zoo.GAT_mix.lin_l", "agg_zoo.GAT_mix.lin_l", "agg_zoo.GAT_mix.size", "torch_sparse.set_diag", "agg_zoo.GAT_mix.lin_r", "torch_sparse.set_diag.set_value"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.propagate"], ["    ", "def", "forward", "(", "self", ",", "x", ":", "Union", "[", "Tensor", ",", "OptPairTensor", "]", ",", "edge_index", ":", "Adj", ",", "\n", "size", ":", "Size", "=", "None", ",", "return_attention_weights", "=", "None", ",", "edge_weight", ":", "OptTensor", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n\n        Args:\n            return_attention_weights (bool, optional): If set to :obj:`True`,\n                will additionally return the tuple\n                :obj:`(edge_index, attention_weights)`, holding the computed\n                attention weights for each edge. (default: :obj:`None`)\n        \"\"\"", "\n", "H", ",", "C", "=", "self", ".", "heads", ",", "self", ".", "out_channels", "\n", "\n", "x_l", ":", "OptTensor", "=", "None", "\n", "x_r", ":", "OptTensor", "=", "None", "\n", "alpha_l", ":", "OptTensor", "=", "None", "\n", "alpha_r", ":", "OptTensor", "=", "None", "\n", "if", "isinstance", "(", "x", ",", "Tensor", ")", ":", "\n", "            ", "assert", "x", ".", "dim", "(", ")", "==", "2", ",", "'Static graphs not supported in `GATConv`.'", "\n", "x_l", "=", "x_r", "=", "self", ".", "lin_l", "(", "x", ")", ".", "view", "(", "-", "1", ",", "H", ",", "C", ")", "\n", "alpha_l", "=", "alpha_r", "=", "(", "x_l", "*", "self", ".", "att_l", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_l", ",", "x_r", "=", "x", "[", "0", "]", ",", "x", "[", "1", "]", "\n", "assert", "x", "[", "0", "]", ".", "dim", "(", ")", "==", "2", ",", "'Static graphs not supported in `GATConv`.'", "\n", "x_l", "=", "self", ".", "lin_l", "(", "x_l", ")", ".", "view", "(", "-", "1", ",", "H", ",", "C", ")", "\n", "alpha_l", "=", "(", "x_l", "*", "self", ".", "att_l", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "if", "x_r", "is", "not", "None", ":", "\n", "                ", "x_r", "=", "self", ".", "lin_r", "(", "x_r", ")", ".", "view", "(", "-", "1", ",", "H", ",", "C", ")", "\n", "alpha_r", "=", "(", "x_r", "*", "self", ".", "att_r", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "assert", "x_l", "is", "not", "None", "\n", "assert", "alpha_l", "is", "not", "None", "\n", "self", ".", "add_self_loops", "=", "False", "\n", "if", "self", ".", "add_self_loops", ":", "\n", "            ", "if", "isinstance", "(", "edge_index", ",", "Tensor", ")", ":", "\n", "                ", "num_nodes", "=", "x_l", ".", "size", "(", "0", ")", "\n", "num_nodes", "=", "size", "[", "1", "]", "if", "size", "is", "not", "None", "else", "num_nodes", "\n", "num_nodes", "=", "x_r", ".", "size", "(", "0", ")", "if", "x_r", "is", "not", "None", "else", "num_nodes", "\n", "edge_index", ",", "_", "=", "remove_self_loops", "(", "edge_index", ")", "\n", "edge_index", ",", "_", "=", "add_self_loops", "(", "edge_index", ",", "num_nodes", "=", "num_nodes", ")", "\n", "", "elif", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n", "                ", "edge_index", "=", "set_diag", "(", "edge_index", ")", "\n", "\n", "# propagate_type: (x: OptPairTensor, alpha: OptPairTensor)", "\n", "", "", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "(", "x_l", ",", "x_r", ")", ",", "\n", "alpha", "=", "(", "alpha_l", ",", "alpha_r", ")", ",", "size", "=", "size", ",", "edge_weight", "=", "edge_weight", ")", "\n", "\n", "alpha", "=", "self", ".", "_alpha", "\n", "self", ".", "_alpha", "=", "None", "\n", "\n", "if", "self", ".", "concat", ":", "\n", "            ", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "heads", "*", "self", ".", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "+=", "self", ".", "bias", "\n", "\n", "", "if", "isinstance", "(", "return_attention_weights", ",", "bool", ")", ":", "\n", "            ", "assert", "alpha", "is", "not", "None", "\n", "if", "isinstance", "(", "edge_index", ",", "Tensor", ")", ":", "\n", "                ", "return", "out", ",", "(", "edge_index", ",", "alpha", ")", "\n", "", "elif", "isinstance", "(", "edge_index", ",", "SparseTensor", ")", ":", "\n", "                ", "return", "out", ",", "edge_index", ".", "set_value", "(", "alpha", ",", "layout", "=", "'coo'", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.agg_zoo.GAT_mix.message": [[83, 96], ["torch.leaky_relu", "torch.leaky_relu", "torch_geometric.utils.softmax", "torch.dropout", "torch.dropout", "torch.dropout.unsqueeze", "x1.view().t", "x1.view"], "methods", ["None"], ["", "", "def", "message", "(", "self", ",", "x_j", ":", "Tensor", ",", "alpha_j", ":", "Tensor", ",", "edge_weight", ":", "Tensor", ",", "alpha_i", ":", "OptTensor", ",", "\n", "index", ":", "Tensor", ",", "ptr", ":", "OptTensor", ",", "size_i", ":", "Optional", "[", "int", "]", ")", "->", "Tensor", ":", "\n", "        ", "alpha", "=", "alpha_j", "if", "alpha_i", "is", "None", "else", "alpha_j", "+", "alpha_i", "\n", "alpha", "=", "F", ".", "leaky_relu", "(", "alpha", ",", "self", ".", "negative_slope", ")", "\n", "alpha", "=", "softmax", "(", "alpha", ",", "index", ",", "ptr", ",", "size_i", ")", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "alpha", "=", "F", ".", "dropout", "(", "alpha", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x1", "=", "x_j", "*", "alpha", ".", "unsqueeze", "(", "-", "1", ")", "\n", "if", "edge_weight", "is", "None", ":", "\n", "            ", "return", "x1", "\n", "", "else", ":", "\n", "            ", "x2", "=", "(", "x1", ".", "view", "(", "-", "1", ",", "self", ".", "heads", "*", "self", ".", "out_channels", ")", ".", "t", "(", ")", "*", "edge_weight", ")", ".", "t", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "out_channels", ")", "\n", "return", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.agg_zoo.SAGE_mix.forward": [[98, 116], ["isinstance", "agg_zoo.SAGE_mix.propagate", "agg_zoo.SAGE_mix.lin_l", "agg_zoo.SAGE_mix.lin_r", "torch.normalize", "torch.normalize"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.propagate"], ["    ", "def", "forward", "(", "self", ",", "x", ":", "Union", "[", "Tensor", ",", "OptPairTensor", "]", ",", "edge_index", ":", "Adj", ",", "\n", "size", ":", "Size", "=", "None", ",", "edge_weight", ":", "OptTensor", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "isinstance", "(", "x", ",", "Tensor", ")", ":", "\n", "            ", "x", ":", "OptPairTensor", "=", "(", "x", ",", "x", ")", "\n", "\n", "# propagate_type: (x: OptPairTensor)", "\n", "", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "size", "=", "size", ",", "edge_weight", "=", "edge_weight", ")", "\n", "out", "=", "self", ".", "lin_l", "(", "out", ")", "\n", "\n", "x_r", "=", "x", "[", "1", "]", "\n", "if", "x_r", "is", "not", "None", ":", "\n", "            ", "out", "+=", "self", ".", "lin_r", "(", "x_r", ")", "\n", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "out", "=", "F", ".", "normalize", "(", "out", ",", "p", "=", "2.", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.agg_zoo.SAGE_mix.message": [[117, 119], ["edge_weight.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ":", "Tensor", ",", "edge_weight", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "x_j", "if", "edge_weight", "is", "None", "else", "edge_weight", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.agg_zoo.GIN_mix.forward": [[121, 135], ["isinstance", "agg_zoo.GIN_mix.propagate", "agg_zoo.GIN_mix.nn"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.propagate"], ["    ", "def", "forward", "(", "self", ",", "x", ":", "Union", "[", "Tensor", ",", "OptPairTensor", "]", ",", "edge_index", ":", "Adj", ",", "\n", "size", ":", "Size", "=", "None", ",", "edge_weight", ":", "OptTensor", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "isinstance", "(", "x", ",", "Tensor", ")", ":", "\n", "            ", "x", ":", "OptPairTensor", "=", "(", "x", ",", "x", ")", "\n", "\n", "# propagate_type: (x: OptPairTensor)", "\n", "", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "size", "=", "size", ",", "edge_weight", "=", "edge_weight", ")", "\n", "\n", "x_r", "=", "x", "[", "1", "]", "\n", "if", "x_r", "is", "not", "None", ":", "\n", "            ", "out", "+=", "(", "1", "+", "self", ".", "eps", ")", "*", "x_r", "\n", "\n", "", "return", "self", ".", "nn", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.agg_zoo.GIN_mix.message": [[136, 138], ["edge_weight.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ":", "Tensor", ",", "edge_weight", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "x_j", "if", "edge_weight", "is", "None", "else", "edge_weight", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.agg_zoo.Geolayer_mix.forward": [[140, 155], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "agg_zoo.Geolayer_mix.propagate", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.mm().view.size", "torch.mm().view.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.propagate"], ["    ", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "size", "=", "None", ",", "edge_weight", ":", "OptTensor", "=", "None", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "# rm self loop", "\n", "# if size is None and torch.is_tensor(x):", "\n", "#     edge_index, _ = remove_self_loops(edge_index)", "\n", "#     edge_index, _ = add_self_loops(edge_index, num_nodes=x.size(0))", "\n", "\n", "# prepare", "\n", "if", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "            ", "x", "=", "torch", ".", "mm", "(", "x", ",", "self", ".", "weight", ")", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "out_channels", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "(", "None", "if", "x", "[", "0", "]", "is", "None", "else", "torch", ".", "matmul", "(", "x", "[", "0", "]", ",", "self", ".", "weight", ")", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "out_channels", ")", ",", "\n", "None", "if", "x", "[", "1", "]", "is", "None", "else", "torch", ".", "matmul", "(", "x", "[", "1", "]", ",", "self", ".", "weight", ")", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "out_channels", ")", ")", "\n", "", "num_nodes", "=", "x", ".", "size", "(", "0", ")", "if", "torch", ".", "is_tensor", "(", "x", ")", "else", "size", "[", "0", "]", "\n", "return", "self", ".", "propagate", "(", "edge_index", ",", "size", "=", "size", ",", "x", "=", "x", ",", "num_nodes", "=", "num_nodes", ",", "edge_weight", "=", "edge_weight", ")", "\n", "", "def", "message", "(", "self", ",", "x_i", ",", "x_j", ",", "edge_index", ",", "num_nodes", ",", "edge_weight", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.agg_zoo.Geolayer_mix.message": [[155, 178], ["agg_zoo.Geolayer_mix.apply_attention", "torch_geometric.utils.softmax", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.view", "neighbor.view().t", "neighbor.view"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.pyg_gnn_layer.GeoLayer.apply_attention"], ["", "def", "message", "(", "self", ",", "x_i", ",", "x_j", ",", "edge_index", ",", "num_nodes", ",", "edge_weight", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "att_type", "==", "\"const\"", ":", "\n", "            ", "if", "self", ".", "training", "and", "self", ".", "dropout", ">", "0", ":", "\n", "                ", "x_j", "=", "F", ".", "dropout", "(", "x_j", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "True", ")", "\n", "", "neighbor", "=", "x_j", "\n", "\n", "", "else", ":", "\n", "# Compute attention coefficients.", "\n", "            ", "alpha", "=", "self", ".", "apply_attention", "(", "edge_index", ",", "num_nodes", ",", "x_i", ",", "x_j", ")", "\n", "alpha", "=", "softmax", "(", "alpha", ",", "edge_index", "[", "0", "]", ",", "ptr", "=", "None", ",", "num_nodes", "=", "num_nodes", ")", "\n", "# Sample attention coefficients stochastically.", "\n", "if", "self", ".", "training", "and", "self", ".", "dropout", ">", "0", ":", "\n", "                ", "alpha", "=", "F", ".", "dropout", "(", "alpha", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "True", ")", "\n", "\n", "", "neighbor", "=", "x_j", "*", "alpha", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "1", ")", "\n", "# if self.pool_dim > 0:", "\n", "#    for layer in self.pool_layer:", "\n", "#        neighbor = layer(neighbor)", "\n", "", "if", "edge_weight", "is", "None", ":", "\n", "            ", "return", "neighbor", "\n", "", "else", ":", "\n", "            ", "x2", "=", "(", "neighbor", ".", "view", "(", "-", "1", ",", "self", ".", "heads", "*", "self", ".", "out_channels", ")", ".", "t", "(", ")", "*", "edge_weight", ")", ".", "t", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "heads", ",", "self", ".", "out_channels", ")", "\n", "return", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.NaMixedOp.__init__": [[35, 47], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_search.NaMixedOp._ops.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "model_search.NaMixedOp._ops_linear.append"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "with_linear", ")", ":", "\n", "    ", "super", "(", "NaMixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "primitive", "in", "NA_PRIMITIVES", ":", "\n", "      ", "op", "=", "NA_OPS", "[", "primitive", "]", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n", "if", "with_linear", ":", "\n", "        ", "self", ".", "_ops_linear", "=", "nn", ".", "ModuleList", "(", ")", "\n", "op_linear", "=", "torch", ".", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "_ops_linear", ".", "append", "(", "op_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.NaMixedOp.forward": [[50, 61], ["sum", "zip", "zip", "mixed_res.append", "mixed_res.append", "op", "op", "linear"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ",", "edge_index", ",", "edge_weights", ",", "with_linear", ")", ":", "\n", "    ", "mixed_res", "=", "[", "]", "\n", "if", "with_linear", ":", "\n", "      ", "for", "w", ",", "op", ",", "linear", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ",", "self", ".", "_ops_linear", ")", ":", "\n", "        ", "mixed_res", ".", "append", "(", "w", "*", "(", "op", "(", "x", ",", "edge_index", ",", "edge_weight", "=", "edge_weights", ")", "+", "linear", "(", "x", ")", ")", ")", "\n", "# print('with linear')", "\n", "", "", "else", ":", "\n", "      ", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ":", "\n", "        ", "mixed_res", ".", "append", "(", "w", "*", "(", "op", "(", "x", ",", "edge_index", ",", "edge_weight", "=", "edge_weights", ")", ")", ")", "\n", "# print('without linear')", "\n", "", "", "return", "sum", "(", "mixed_res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.LaMixedOp.__init__": [[66, 72], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_search.LaMixedOp._ops.append"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["  ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "num_layers", "=", "None", ")", ":", "\n", "    ", "super", "(", "LaMixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "LA_PRIMITIVES", ":", "\n", "      ", "op", "=", "LA_OPS", "[", "primitive", "]", "(", "hidden_size", ",", "num_layers", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.LaMixedOp.forward": [[73, 79], ["zip", "sum", "mixed_res.append", "torch.elu", "torch.elu", "torch.elu", "op"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "    ", "mixed_res", "=", "[", "]", "\n", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ":", "\n", "# mixed_res.append(w * F.relu(op(x)))", "\n", "      ", "mixed_res", ".", "append", "(", "w", "*", "F", ".", "elu", "(", "op", "(", "x", ")", ")", ")", "\n", "", "return", "sum", "(", "mixed_res", ")", "\n", "", "", "def", "index_to_mask", "(", "index", ",", "size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.PoolingMixedOp.__init__": [[85, 91], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_search.PoolingMixedOp._ops.append"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden", ",", "ratio", ",", "num_nodes", "=", "0", ")", ":", "\n", "        ", "super", "(", "PoolingMixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "POOL_PRIMITIVES", ":", "\n", "            ", "op", "=", "POOL_OPS", "[", "primitive", "]", "(", "hidden", ",", "ratio", ",", "num_nodes", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.PoolingMixedOp.forward": [[92, 109], ["zip", "pooling_zoo.filter_perm", "op", "new_x.append", "new_edge_weight.append", "new_perm.append", "sum", "sum", "sum", "model_search.index_to_mask", "x.size"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.filter_perm", "home.repos.pwc.inspect_result.automl-research_pas.None.utils.index_to_mask"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weights", ",", "data", ",", "batch", ",", "mask", ",", "weights", ")", ":", "\n", "        ", "new_x", "=", "[", "]", "\n", "new_edge_weight", "=", "[", "]", "\n", "new_perm", "=", "[", "]", "\n", "# neither add or ewmove self_loop, so edge_index remain unchanged.", "\n", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ":", "\n", "# mixed_res.append(w * F.relu(op(x)))", "\n", "            ", "x_tmp", ",", "edge_index", ",", "edge_weight_tmp", ",", "batch", ",", "perm", "=", "op", "(", "x", ",", "edge_index", ",", "edge_weights", ",", "data", ",", "batch", ",", "mask", ")", "\n", "#print(perm.size(), w)", "\n", "new_x", ".", "append", "(", "x_tmp", "*", "w", ")", "\n", "new_edge_weight", ".", "append", "(", "w", "*", "edge_weight_tmp", ")", "\n", "new_perm", ".", "append", "(", "w", "*", "index_to_mask", "(", "perm", ",", "x", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "\n", "#remove nodes with perm", "\n", "", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "perm", "=", "filter_perm", "(", "sum", "(", "new_x", ")", ",", "edge_index", ",", "sum", "(", "new_edge_weight", ")", ",", "batch", ",", "sum", "(", "new_perm", ")", ",", "th", "=", "0.01", ")", "\n", "return", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "perm", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.ReadoutMixedOp.__init__": [[112, 118], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_search.ReadoutMixedOp._ops.append"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden", ")", ":", "\n", "        ", "super", "(", "ReadoutMixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "READOUT_PRIMITIVES", ":", "\n", "            ", "op", "=", "READOUT_OPS", "[", "primitive", "]", "(", "hidden", ")", "\n", "self", ".", "_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.ReadoutMixedOp.forward": [[119, 126], ["zip", "sum", "mixed_res.append", "op"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "batch", ",", "mask", ",", "weights", ")", ":", "\n", "        ", "mixed_res", "=", "[", "]", "\n", "for", "w", ",", "op", "in", "zip", "(", "weights", ",", "self", ".", "_ops", ")", ":", "\n", "            ", "tmp_res", "=", "w", "*", "op", "(", "x", ",", "batch", ",", "mask", ")", "\n", "# print('readout', tmp_res.size())", "\n", "mixed_res", ".", "append", "(", "tmp_res", ")", "\n", "", "return", "sum", "(", "mixed_res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.ActMixedOp.__init__": [[128, 136], ["torch.Module.__init__", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "model_search.act_map", "model_search.act_map"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.automl-research_pas.None.model.act_map", "home.repos.pwc.inspect_result.automl-research_pas.None.model.act_map"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ActMixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "for", "primitive", "in", "ACT_PRIMITIVES", ":", "\n", "            ", "if", "primitive", "==", "'linear'", ":", "\n", "                ", "self", ".", "_ops", "[", "primitive", "]", "=", "act_map", "(", "primitive", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_ops", "[", "primitive", "]", "=", "act_map", "(", "primitive", ")", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.ActMixedOp.forward": [[137, 143], ["range", "sum", "len", "mixed_res.append"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ")", ":", "\n", "        ", "mixed_res", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "ACT_PRIMITIVES", ")", ")", ":", "\n", "            ", "mixed_res", ".", "append", "(", "weights", "[", "i", "]", "*", "self", ".", "_ops", "[", "ACT_PRIMITIVES", "[", "i", "]", "]", "(", "x", ")", ")", "\n", "", "return", "sum", "(", "mixed_res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network.__init__": [[146, 207], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model_search.LaMixedOp", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model_search.Network._initialize_alphas", "model_search.Network.gnn_layers.append", "model_search.Network.act_ops.append", "model_search.Network.readout_layers.append", "model_search.Network.pooling_layers.append", "model_search.NaMixedOp", "model_search.ActMixedOp", "model_search.ReadoutMixedOp", "model_search.PoolingMixedOp"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network._initialize_alphas"], ["  ", "def", "__init__", "(", "self", ",", "criterion", ",", "in_dim", ",", "out_dim", ",", "hidden_size", ",", "num_layers", "=", "3", ",", "dropout", "=", "0.5", ",", "epsilon", "=", "0.0", ",", "args", "=", "None", ",", "with_conv_linear", "=", "False", ",", "num_nodes", "=", "0", ")", ":", "\n", "    ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "_criterion", "=", "criterion", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "with_linear", "=", "with_conv_linear", "\n", "self", ".", "explore_num", "=", "0", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "temp", "=", "args", ".", "temp", "\n", "self", ".", "_loc_mean", "=", "args", ".", "loc_mean", "\n", "self", ".", "_loc_std", "=", "args", ".", "loc_std", "\n", "\n", "\n", "if", "num_layers", "==", "1", ":", "\n", "        ", "self", ".", "pooling_ratio", "=", "[", "0.1", "]", "\n", "", "elif", "num_layers", "==", "2", ":", "\n", "        ", "self", ".", "pooling_ratio", "=", "[", "0.25", ",", "0.25", "]", "\n", "", "elif", "num_layers", "==", "3", ":", "\n", "        ", "self", ".", "pooling_ratio", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "", "elif", "num_layers", "==", "4", ":", "\n", "        ", "self", ".", "pooling_ratio", "=", "[", "0.6", ",", "0.6", ",", "0.6", ",", "0.6", "]", "\n", "", "elif", "num_layers", "==", "5", ":", "\n", "        ", "self", ".", "pooling_ratio", "=", "[", "0.7", ",", "0.7", ",", "0.7", ",", "0.7", ",", "0.7", "]", "\n", "", "elif", "num_layers", "==", "6", ":", "\n", "        ", "self", ".", "pooling_ratio", "=", "[", "0.8", ",", "0.8", ",", "0.8", ",", "0.8", ",", "0.8", ",", "0.8", "]", "\n", "\n", "", "self", ".", "lin1", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_size", ")", "\n", "\n", "# node aggregator op", "\n", "self", ".", "gnn_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "self", ".", "gnn_layers", ".", "append", "(", "NaMixedOp", "(", "hidden_size", ",", "hidden_size", ",", "self", ".", "with_linear", ")", ")", "\n", "\n", "#act op", "\n", "", "self", ".", "act_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "self", ".", "act_ops", ".", "append", "(", "ActMixedOp", "(", ")", ")", "\n", "\n", "#readoutop", "\n", "", "self", ".", "readout_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", "+", "1", ")", ":", "\n", "        ", "self", ".", "readout_layers", ".", "append", "(", "ReadoutMixedOp", "(", "hidden_size", ")", ")", "\n", "\n", "#pooling ops", "\n", "", "self", ".", "pooling_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "self", ".", "pooling_layers", ".", "append", "(", "PoolingMixedOp", "(", "hidden_size", ",", "self", ".", "pooling_ratio", "[", "i", "]", ",", "num_nodes", "=", "self", ".", "num_nodes", ")", ")", "\n", "\n", "#graph representation aggregator op", "\n", "", "self", ".", "layer6", "=", "LaMixedOp", "(", "hidden_size", ",", "num_layers", "+", "1", ")", "\n", "\n", "self", ".", "lin_output", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "out_dim", ")", "\n", "\n", "self", ".", "_initialize_alphas", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network._get_categ_mask": [[209, 216], ["torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax.", "torch.nn.Softmax.", "torch.nn.Softmax.", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like().uniform_.log", "torch.zeros_like().uniform_.log", "torch.zeros_like().uniform_.log"], "methods", ["None"], ["", "def", "_get_categ_mask", "(", "self", ",", "alpha", ")", ":", "\n", "# log_alpha = torch.log(alpha)", "\n", "      ", "log_alpha", "=", "alpha", "\n", "u", "=", "torch", ".", "zeros_like", "(", "log_alpha", ")", ".", "uniform_", "(", ")", "\n", "softmax", "=", "torch", ".", "nn", ".", "Softmax", "(", "-", "1", ")", "\n", "one_hot", "=", "softmax", "(", "(", "log_alpha", "+", "(", "-", "(", "(", "-", "(", "u", ".", "log", "(", ")", ")", ")", ".", "log", "(", ")", ")", ")", ")", "/", "self", ".", "temp", ")", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network.get_one_hot_alpha": [[217, 225], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "range", "torch.zeros_like.size", "torch.zeros_like.size", "torch.zeros_like.size"], "methods", ["None"], ["", "def", "get_one_hot_alpha", "(", "self", ",", "alpha", ")", ":", "\n", "      ", "one_hot_alpha", "=", "torch", ".", "zeros_like", "(", "alpha", ",", "device", "=", "alpha", ".", "device", ")", "\n", "idx", "=", "torch", ".", "argmax", "(", "alpha", ",", "dim", "=", "-", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "one_hot_alpha", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "one_hot_alpha", "[", "i", ",", "idx", "[", "i", "]", "]", "=", "1.0", "\n", "\n", "", "return", "one_hot_alpha", "\n", "", "def", "forward", "(", "self", ",", "data", ",", "discrete", "=", "False", ",", "mode", "=", "'none'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network.forward": [[225, 286], ["model_search.Network.", "torch.elu", "torch.elu", "torch.elu", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "torch.ones().float", "graph_representations.append", "range", "model_search.Network.layer6", "torch.elu", "torch.elu", "torch.elu", "torch.dropout", "torch.dropout", "torch.dropout", "model_search.Network.classifier", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "model_search.Network._get_categ_mask", "model_search.Network._get_categ_mask", "model_search.Network._get_categ_mask", "model_search.Network._get_categ_mask", "model_search.Network._get_categ_mask", "model_search.Network.get_one_hot_alpha", "model_search.Network.get_one_hot_alpha", "model_search.Network.get_one_hot_alpha", "model_search.Network.get_one_hot_alpha", "model_search.Network.get_one_hot_alpha", "model_search.Network.lin1", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm.", "torch.dropout", "torch.dropout", "torch.dropout", "graph_representations.append", "model_search.Network.lin_output", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.elu", "torch.elu", "torch.elu", "torch.elu.size", "torch.elu.size", "edge_index.size"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network._get_categ_mask", "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network._get_categ_mask", "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network._get_categ_mask", "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network._get_categ_mask", "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network._get_categ_mask", "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network.get_one_hot_alpha", "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network.get_one_hot_alpha", "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network.get_one_hot_alpha", "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network.get_one_hot_alpha", "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network.get_one_hot_alpha"], ["", "def", "forward", "(", "self", ",", "data", ",", "discrete", "=", "False", ",", "mode", "=", "'none'", ")", ":", "\n", "    ", "self", ".", "args", ".", "search_act", "=", "False", "\n", "with_linear", "=", "self", ".", "with_linear", "\n", "x", ",", "edge_index", "=", "data", ".", "x", ",", "data", ".", "edge_index", "\n", "batch", "=", "data", ".", "batch", "\n", "# edge_index, _ = remove_self_loops(edge_index)", "\n", "edge_index", ",", "_", "=", "add_self_loops", "(", "edge_index", ",", "num_nodes", "=", "x", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "args", ".", "model_type", "==", "'darts'", ":", "\n", "        ", "na_alphas", "=", "F", ".", "softmax", "(", "self", ".", "log_na_alphas", ",", "dim", "=", "-", "1", ")", "\n", "la_alphas", "=", "F", ".", "softmax", "(", "self", ".", "log_la_alphas", ",", "dim", "=", "-", "1", ")", "\n", "pool_alphas", "=", "F", ".", "softmax", "(", "self", ".", "log_pool_alphas", ",", "dim", "=", "-", "1", ")", "\n", "readout_alphas", "=", "F", ".", "softmax", "(", "self", ".", "log_readout_alphas", ",", "dim", "=", "-", "1", ")", "\n", "act_alphas", "=", "F", ".", "softmax", "(", "self", ".", "log_act_alphas", ",", "dim", "=", "-", "1", ")", "\n", "# print('DARTS: sampled arch in train w', self._sparse(na_alphas, act_alphas, pool_alphas, readout_alphas, la_alphas))", "\n", "", "else", ":", "\n", "\n", "        ", "na_alphas", "=", "self", ".", "_get_categ_mask", "(", "self", ".", "log_na_alphas", ")", "\n", "# sc_alphas = self._get_categ_mask(self.log_sc_alphas)", "\n", "la_alphas", "=", "self", ".", "_get_categ_mask", "(", "self", ".", "log_la_alphas", ")", "\n", "pool_alphas", "=", "self", ".", "_get_categ_mask", "(", "self", ".", "log_pool_alphas", ")", "\n", "readout_alphas", "=", "self", ".", "_get_categ_mask", "(", "self", ".", "log_readout_alphas", ")", "\n", "act_alphas", "=", "self", ".", "_get_categ_mask", "(", "self", ".", "log_act_alphas", ")", "\n", "# print('alpha in train w:',self._arch_parameters)", "\n", "# print('sampled arch in train w', self._sparse(na_alphas, act_alphas, pool_alphas, readout_alphas, la_alphas))", "\n", "\n", "", "if", "mode", "==", "'evaluate_single_path'", ":", "\n", "        ", "na_alphas", "=", "self", ".", "get_one_hot_alpha", "(", "na_alphas", ")", "\n", "la_alphas", "=", "self", ".", "get_one_hot_alpha", "(", "la_alphas", ")", "\n", "pool_alphas", "=", "self", ".", "get_one_hot_alpha", "(", "pool_alphas", ")", "\n", "readout_alphas", "=", "self", ".", "get_one_hot_alpha", "(", "readout_alphas", ")", "\n", "act_alphas", "=", "self", ".", "get_one_hot_alpha", "(", "act_alphas", ")", "\n", "\n", "", "graph_representations", "=", "[", "]", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "lin1", "(", "x", ")", ")", "\n", "edge_weights", "=", "torch", ".", "ones", "(", "edge_index", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "edge_index", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "\n", "graph_representations", ".", "append", "(", "self", ".", "readout_layers", "[", "0", "]", "(", "x", ",", "batch", ",", "None", ",", "readout_alphas", "[", "0", "]", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "        ", "x", "=", "self", ".", "gnn_layers", "[", "i", "]", "(", "x", ",", "na_alphas", "[", "i", "]", ",", "edge_index", ",", "edge_weights", ",", "with_linear", ")", "\n", "#print('evaluate data {}-th gnn:'.format(i), x.size(), batch.size())", "\n", "\n", "if", "self", ".", "args", ".", "search_act", ":", "\n", "            ", "x", "=", "self", ".", "act_ops", "[", "i", "]", "(", "x", ",", "act_alphas", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "elu", "(", "x", ")", "\n", "", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "normalized_shape", "=", "x", ".", "size", "(", ")", ",", "elementwise_affine", "=", "False", ")", "\n", "x", "=", "layer_norm", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "x", ",", "edge_index", ",", "edge_weights", ",", "batch", ",", "_", "=", "self", ".", "pooling_layers", "[", "i", "]", "(", "x", ",", "edge_index", ",", "edge_weights", ",", "data", ",", "batch", ",", "None", ",", "pool_alphas", "[", "i", "]", ")", "\n", "graph_representations", ".", "append", "(", "self", ".", "readout_layers", "[", "i", "+", "1", "]", "(", "x", ",", "batch", ",", "None", ",", "readout_alphas", "[", "i", "+", "1", "]", ")", ")", "\n", "", "x5", "=", "self", ".", "layer6", "(", "graph_representations", ",", "la_alphas", "[", "0", "]", ")", "\n", "\n", "x5", "=", "F", ".", "elu", "(", "self", ".", "lin_output", "(", "x5", ")", ")", "\n", "x5", "=", "F", ".", "dropout", "(", "x5", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "x5", ")", "\n", "\n", "return", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", ",", "[", "na_alphas", ",", "act_alphas", ",", "pool_alphas", ",", "readout_alphas", ",", "la_alphas", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network._initialize_alphas": [[289, 323], ["len", "len", "len", "len", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.ones().normal_().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.ones().normal_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "_initialize_alphas", "(", "self", ")", ":", "\n", "    ", "num_na_ops", "=", "len", "(", "NA_PRIMITIVES", ")", "\n", "num_la_ops", "=", "len", "(", "LA_PRIMITIVES", ")", "\n", "num_pool_ops", "=", "len", "(", "POOL_PRIMITIVES", ")", "\n", "num_readout_ops", "=", "len", "(", "READOUT_PRIMITIVES", ")", "\n", "num_act_ops", "=", "len", "(", "ACT_PRIMITIVES", ")", "\n", "\n", "if", "self", ".", "args", ".", "model_type", "==", "'darts'", ":", "\n", "        ", "self", ".", "log_na_alphas", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "self", ".", "num_layers", ",", "num_na_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "log_act_alphas", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "self", ".", "num_layers", ",", "num_act_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "log_pool_alphas", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "self", ".", "num_layers", ",", "num_pool_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "log_readout_alphas", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "self", ".", "num_layers", "+", "1", ",", "num_readout_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "log_la_alphas", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "1", ",", "num_la_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "log_na_alphas", "=", "Variable", "(", "\n", "torch", ".", "ones", "(", "self", ".", "num_layers", ",", "num_na_ops", ")", ".", "normal_", "(", "self", ".", "_loc_mean", ",", "self", ".", "_loc_std", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "log_act_alphas", "=", "Variable", "(", "\n", "torch", ".", "ones", "(", "self", ".", "num_layers", ",", "num_act_ops", ")", ".", "normal_", "(", "self", ".", "_loc_mean", ",", "self", ".", "_loc_std", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "log_pool_alphas", "=", "Variable", "(", "\n", "torch", ".", "ones", "(", "self", ".", "num_layers", ",", "num_pool_ops", ")", ".", "normal_", "(", "self", ".", "_loc_mean", ",", "self", ".", "_loc_std", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "log_readout_alphas", "=", "Variable", "(", "\n", "torch", ".", "ones", "(", "self", ".", "num_layers", "+", "1", ",", "num_readout_ops", ")", ".", "normal_", "(", "self", ".", "_loc_mean", ",", "self", ".", "_loc_std", ")", ".", "cuda", "(", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "\n", "self", ".", "log_la_alphas", "=", "Variable", "(", "torch", ".", "ones", "(", "1", ",", "num_la_ops", ")", ".", "normal_", "(", "self", ".", "_loc_mean", ",", "self", ".", "_loc_std", ")", ".", "cuda", "(", ")", ",", "\n", "requires_grad", "=", "True", ")", "\n", "\n", "", "self", ".", "_arch_parameters", "=", "[", "\n", "self", ".", "log_na_alphas", ",", "\n", "self", ".", "log_act_alphas", ",", "\n", "self", ".", "log_pool_alphas", ",", "\n", "self", ".", "log_readout_alphas", ",", "\n", "self", ".", "log_la_alphas", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network.arch_parameters": [[325, 327], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network._sparse": [[328, 352], ["torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "gene.append", "gene.append", "gene.append", "gene.append", "gene.append"], "methods", ["None"], ["", "def", "_sparse", "(", "self", ",", "na_weights", ",", "act_alphas", ",", "pool_alphas", ",", "readout_alphas", ",", "la_weights", ")", ":", "\n", "      ", "gene", "=", "[", "]", "\n", "na_indices", "=", "torch", ".", "argmax", "(", "na_weights", ",", "dim", "=", "-", "1", ")", "\n", "for", "k", "in", "na_indices", ":", "\n", "          ", "gene", ".", "append", "(", "NA_PRIMITIVES", "[", "k", "]", ")", "\n", "#sc_indices = sc_weights.argmax(dim=-1)", "\n", "\n", "", "act_indices", "=", "torch", ".", "argmax", "(", "act_alphas", ",", "dim", "=", "-", "1", ")", "\n", "for", "k", "in", "act_indices", ":", "\n", "          ", "gene", ".", "append", "(", "ACT_PRIMITIVES", "[", "k", "]", ")", "\n", "\n", "", "pooling_indices", "=", "torch", ".", "argmax", "(", "pool_alphas", ",", "dim", "=", "-", "1", ")", "\n", "for", "k", "in", "pooling_indices", ":", "\n", "          ", "gene", ".", "append", "(", "POOL_PRIMITIVES", "[", "k", "]", ")", "\n", "#la_indices = la_weights.argmax(dim=-1)", "\n", "\n", "", "readout_indices", "=", "torch", ".", "argmax", "(", "readout_alphas", ",", "dim", "=", "-", "1", ")", "\n", "for", "k", "in", "readout_indices", ":", "\n", "          ", "gene", ".", "append", "(", "READOUT_PRIMITIVES", "[", "k", "]", ")", "\n", "\n", "", "la_indices", "=", "torch", ".", "argmax", "(", "la_weights", ",", "dim", "=", "-", "1", ")", "\n", "for", "k", "in", "la_indices", ":", "\n", "          ", "gene", ".", "append", "(", "LA_PRIMITIVES", "[", "k", "]", ")", "\n", "", "return", "'||'", ".", "join", "(", "gene", ")", "\n", "", "def", "genotype", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network.genotype": [[352, 362], ["model_search.Network._sparse", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax().data.cpu", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network._sparse"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "\n", "\n", "\n", "    ", "gene", "=", "self", ".", "_sparse", "(", "F", ".", "softmax", "(", "self", ".", "log_na_alphas", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ",", "\n", "F", ".", "softmax", "(", "self", ".", "log_act_alphas", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ",", "\n", "F", ".", "softmax", "(", "self", ".", "log_pool_alphas", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ",", "\n", "F", ".", "softmax", "(", "self", ".", "log_readout_alphas", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ",", "\n", "F", ".", "softmax", "(", "self", ".", "log_la_alphas", ",", "dim", "=", "-", "1", ")", ".", "data", ".", "cpu", "(", ")", ")", "\n", "return", "gene", "\n", "", "", ""]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.act_map": [[13, 32], ["Exception"], "function", ["None"], ["def", "act_map", "(", "act", ")", ":", "\n", "    ", "if", "act", "==", "\"linear\"", ":", "\n", "        ", "return", "lambda", "x", ":", "x", "\n", "", "if", "act", "==", "\"elu\"", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "ELU", "\n", "", "elif", "act", "==", "\"sigmoid\"", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "Sigmoid", "\n", "", "elif", "act", "==", "\"tanh\"", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "Tanh", "\n", "", "elif", "act", "==", "\"relu\"", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "ReLU", "\n", "", "elif", "act", "==", "\"relu6\"", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "ReLU6", "\n", "", "elif", "act", "==", "\"softplus\"", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "Softplus", "\n", "", "elif", "act", "==", "\"leaky_relu\"", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "LeakyReLU", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"wrong activate function\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.index_to_mask": [[79, 84], ["torch.zeros", "torch.zeros", "torch.zeros", "index.fill_().type", "index.fill_"], "function", ["None"], ["", "", "def", "index_to_mask", "(", "index", ",", "size", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "zeros", "(", "size", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "index", ".", "device", ")", "\n", "new_index", "=", "index", ".", "fill_", "(", "index", "[", "0", "]", ")", ".", "type", "(", "torch", ".", "long", ")", "\n", "mask", "[", "new_index", "]", "=", "1.0", "\n", "return", "mask", "\n", "", "class", "PoolingMixedOp", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.train_search.main": [[71, 163], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "os.path.join", "os.path.join", "logging_util.init_logger", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.info", "model_search.Network", "print", "model.cuda.cuda", "logging.info", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "range", "logging.shutdown", "os.path.exists", "os.path.exists", "utils.create_exp_dir", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "dataset.load_data", "utils.count_parameters_in_MB", "model.cuda.parameters", "model.cuda.arch_parameters", "float", "float", "time.time", "train_search.train_graph", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "train_search.infer_graph", "train_search.infer_graph", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "utils.save", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "torch.optim.lr_scheduler.CosineAnnealingLR.get_lr", "logging.info", "model.cuda.genotype", "logging.info", "logging.info", "print", "logging.info", "print", "os.path.join", "os.path.join", "glob.glob"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.logging_util.init_logger", "home.repos.pwc.inspect_result.automl-research_pas.None.utils.create_exp_dir", "home.repos.pwc.inspect_result.automl-research_pas.None.dataset.load_data", "home.repos.pwc.inspect_result.automl-research_pas.None.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.automl-research_pas.None.model.NetworkGNN.arch_parameters", "home.repos.pwc.inspect_result.automl-research_pas.None.train4tune.train_graph", "home.repos.pwc.inspect_result.automl-research_pas.None.train4tune.infer_graph", "home.repos.pwc.inspect_result.automl-research_pas.None.train4tune.infer_graph", "home.repos.pwc.inspect_result.automl-research_pas.None.utils.save", "home.repos.pwc.inspect_result.automl-research_pas.None.model_search.Network.genotype"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "device", "\n", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "args", ".", "gpu", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "args", ".", "save", "=", "'logs/search-{}'", ".", "format", "(", "args", ".", "save", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save", ")", ":", "\n", "        ", "utils", ".", "create_exp_dir", "(", "args", ".", "save", ",", "scripts_to_save", "=", "glob", ".", "glob", "(", "'*.py'", ")", ")", "\n", "\n", "", "log_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'log.txt'", ")", "\n", "init_logger", "(", "''", ",", "log_filename", ",", "logging", ".", "INFO", ",", "False", ")", "\n", "print", "(", "'*************log_filename=%s************'", "%", "log_filename", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "logging", ".", "info", "(", "\"args = %s\"", ",", "args", ".", "__dict__", ")", "\n", "num_features", "=", "num_classes", "=", "0", "\n", "\n", "if", "args", ".", "data", "in", "args", ".", "graph_classification_dataset", ":", "\n", "        ", "data", ",", "num_nodes", "=", "load_data", "(", "args", ".", "data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "split_seed", "=", "args", ".", "seed", ")", "\n", "num_features", "=", "data", "[", "0", "]", ".", "num_features", "\n", "if", "args", ".", "data", "==", "'COLORS-3'", ":", "\n", "            ", "num_classes", "=", "11", "\n", "", "else", ":", "\n", "            ", "num_classes", "=", "data", "[", "0", "]", ".", "num_classes", "\n", "\n", "", "", "hidden_size", "=", "args", ".", "hidden_size", "\n", "\n", "criterion", "=", "F", ".", "nll_loss", "\n", "\n", "# criterion = criterion.cuda()", "\n", "model", "=", "Network", "(", "criterion", ",", "num_features", ",", "num_classes", ",", "hidden_size", ",", "epsilon", "=", "args", ".", "epsilon", ",", "\n", "args", "=", "args", ",", "with_conv_linear", "=", "args", ".", "with_conv_linear", ",", "num_layers", "=", "args", ".", "num_layers", ",", "num_nodes", "=", "num_nodes", ")", "\n", "print", "(", "'with_conv_linear: '", ",", "args", ".", "with_conv_linear", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\"param size = %fMB\"", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "learning_rate", ",", "\n", "# momentum=args.momentum,", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", ")", "\n", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "model", ".", "arch_parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "arch_learning_rate", ",", "\n", "# betas=(0.5, 0.999),", "\n", "weight_decay", "=", "args", ".", "arch_weight_decay", ")", "#fix lr in arch_optimizer", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "float", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "learning_rate_min", ")", "\n", "scheduler_arch", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "arch_optimizer", ",", "float", "(", "args", ".", "epochs", ")", ",", "eta_min", "=", "args", ".", "arch_learning_rate_min", ")", "\n", "# scheduler_arch = torch.optim.lr_scheduler.ExponentialLR(arch_optimizer, 0.98)", "\n", "# architect = Architect(model, args) # arch_parameter.", "\n", "test_acc_with_time", "=", "[", "]", "\n", "cur_t", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "t1", "=", "time", ".", "time", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "arch_lr", "=", "scheduler_arch", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "if", "epoch", "%", "1", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'epoch %d lr %e'", ",", "epoch", ",", "lr", ")", "\n", "genotype", "=", "model", ".", "genotype", "(", ")", "\n", "logging", ".", "info", "(", "'genotype = %s'", ",", "genotype", ")", "\n", "\n", "", "train_acc", ",", "train_obj", "=", "train_graph", "(", "data", ",", "model", ",", "criterion", ",", "optimizer", ",", "arch_optimizer", ",", "lr", ",", "arch_lr", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "# valid_acc, valid_obj = infer(data, model, criterion, test=False)", "\n", "# test_acc, test_obj = infer(data, model, criterion, test=True)", "\n", "valid_obj", ",", "valid_acc", ",", "test_obj", ",", "test_acc", "=", "infer_graph", "(", "data", ",", "model", ",", "criterion", ")", "\n", "s_valid_obj", ",", "s_valid_acc", ",", "s_test_obj", ",", "s_test_acc", "=", "infer_graph", "(", "data", ",", "model", ",", "criterion", ",", "mode", "=", "'evaluate_single_path'", ")", "\n", "scheduler_arch", ".", "step", "(", ")", "\n", "\n", "if", "epoch", "%", "1", "==", "0", ":", "\n", "            ", "logging", ".", "info", "(", "'epoch=%s, train_acc=%f, train_loss=%f, valid_acc=%f, valid_loss=%f, test_acc=%f, test_loss=%f, explore_num=%s'", ",", "epoch", ",", "train_acc", ",", "train_obj", ",", "valid_acc", ",", "valid_obj", ",", "test_acc", ",", "test_obj", ",", "model", ".", "explore_num", ")", "\n", "print", "(", "'epoch={}, train_acc={:.04f}, train_loss={:.04f},valid_acc={:.04f}, valid_loss={:.04f},test_acc={:.04f},test_loss={:.04f}, explore_num={}'", ".", "\n", "format", "(", "epoch", ",", "train_acc", ",", "train_obj", ",", "valid_acc", ",", "valid_obj", ",", "test_acc", ",", "test_obj", ",", "model", ".", "explore_num", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'single path evaluate. epoch=%s, valid_acc=%f, valid_loss=%f, test_acc=%f, test_loss=%f, explore_num=%s'", ",", "epoch", ",", "s_valid_acc", ",", "s_valid_obj", ",", "s_test_acc", ",", "s_test_obj", ",", "model", ".", "explore_num", ")", "\n", "print", "(", "'single_path evaluation.  epoch={}, valid_acc={:.04f}, valid_loss={:.04f},test_acc={:.04f},test_loss={:.04f}, explore_num={}'", ".", "\n", "format", "(", "epoch", ",", "s_valid_acc", ",", "s_valid_obj", ",", "s_test_acc", ",", "s_test_obj", ",", "model", ".", "explore_num", ")", ")", "\n", "", "utils", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "\n", "", "logging", ".", "shutdown", "(", ")", "\n", "return", "genotype", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.train_search.train_graph": [[164, 213], ["model.train", "print", "list", "list", "range", "zip", "zip", "range", "model_optimizer.zero_grad", "data[].__len__", "range", "range", "cycle", "range", "cycle", "model_optimizer.zero_grad", "arch_optimizer.zero_grad", "[].to", "model", "output.to.to", "[].eq().sum().item", "print", "criterion.item", "arch_optimizer.zero_grad", "criterion.backward", "model_optimizer.step", "arch_optimizer.step", "[].to", "model_optimizer.zero_grad", "arch_optimizer.zero_grad", "model", "output.to.to", "criterion", "criterion.backward", "arch_optimizer.step", "len", "len", "criterion", "criterion", "[].to.y.view", "[].eq().sum", "[].to.y.long", "[].to.y.view", "criterion.item", "[].eq", "[].to.y.view", "output.to.max"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.train"], ["", "def", "train_graph", "(", "data", ",", "model", ",", "criterion", ",", "model_optimizer", ",", "arch_optimizer", ",", "lr", ",", "arch_lr", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "total_loss", "=", "0", "\n", "accuracy", "=", "0", "\n", "# data:[dataset, train_dataset, val_dataset, test_dataset, train_loader, val_loader, test_loader", "\n", "train_iters", "=", "data", "[", "4", "]", ".", "__len__", "(", ")", "//", "args", ".", "w_update_epoch", "+", "1", "\n", "print", "(", "'train_iters:{},train_data_num:{}'", ".", "format", "(", "train_iters", ",", "range", "(", "train_iters", "*", "args", ".", "w_update_epoch", ")", ")", ")", "\n", "from", "itertools", "import", "cycle", "\n", "zip_train_data", "=", "list", "(", "zip", "(", "range", "(", "train_iters", "*", "args", ".", "w_update_epoch", ")", ",", "cycle", "(", "data", "[", "4", "]", ")", ")", ")", "\n", "zip_valid_data", "=", "list", "(", "zip", "(", "range", "(", "train_iters", ")", ",", "cycle", "(", "data", "[", "5", "]", ")", ")", ")", "\n", "\n", "# for train_data, valid_data in zip_list:", "\n", "for", "iter", "in", "range", "(", "train_iters", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "args", ".", "w_update_epoch", ")", ":", "\n", "            ", "model_optimizer", ".", "zero_grad", "(", ")", "\n", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "train_data", "=", "zip_train_data", "[", "iter", "*", "args", ".", "w_update_epoch", "+", "i", "]", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "output", ",", "sample_z", "=", "model", "(", "train_data", ")", "\n", "output", "=", "output", ".", "to", "(", "device", ")", "\n", "accuracy", "+=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "eq", "(", "train_data", ".", "y", ".", "view", "(", "-", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "#error loss and resource loss", "\n", "if", "args", ".", "data", "==", "'COLORS-3'", ":", "\n", "# error_loss = (output-train_data.y.long()).pow(2).mean()", "\n", "                ", "error_loss", "=", "criterion", "(", "output", ",", "train_data", ".", "y", ".", "long", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "error_loss", "=", "criterion", "(", "output", ",", "train_data", ".", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "", "print", "(", "'loss:{:.08f}'", ".", "format", "(", "error_loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "total_loss", "+=", "error_loss", ".", "item", "(", ")", "\n", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "error_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "model_optimizer", ".", "step", "(", ")", "\n", "", "model_optimizer", ".", "zero_grad", "(", ")", "\n", "if", "args", ".", "alpha_mode", "==", "'train_loss'", ":", "\n", "            ", "arch_optimizer", ".", "step", "(", ")", "\n", "", "if", "args", ".", "alpha_mode", "==", "'valid_loss'", ":", "\n", "            ", "valid_data", "=", "zip_valid_data", "[", "iter", "]", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "model_optimizer", ".", "zero_grad", "(", ")", "\n", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "_", "=", "model", "(", "valid_data", ")", "\n", "output", "=", "output", ".", "to", "(", "device", ")", "\n", "\n", "error_loss", "=", "criterion", "(", "output", ",", "valid_data", ".", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "error_loss", ".", "backward", "(", ")", "\n", "arch_optimizer", ".", "step", "(", ")", "\n", "", "", "return", "accuracy", "/", "len", "(", "data", "[", "4", "]", ".", "dataset", ")", ",", "total_loss", "/", "len", "(", "data", "[", "4", "]", ".", "dataset", ")", "\n", "", "def", "infer_graph", "(", "data_", ",", "model", ",", "criterion", ",", "mode", "=", "'none'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.train_search.infer_graph": [[213, 247], ["model.eval", "val_data.to.to", "criterion.item", "[].eq().sum().item", "test_data.to.to", "criterion.item", "[].eq().sum().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "logits.to.to", "criterion", "criterion", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "logits.to.to", "criterion", "criterion", "len", "len", "len", "len", "target.long", "[].eq().sum", "target.long", "[].eq().sum", "[].eq", "[].eq", "target.view", "target.view", "logits.to.max", "logits.to.max"], "function", ["None"], ["", "def", "infer_graph", "(", "data_", ",", "model", ",", "criterion", ",", "mode", "=", "'none'", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "valid_loss", ",", "test_loss", "=", "0", ",", "0", "\n", "valid_acc", ",", "test_acc", "=", "0", ",", "0", "\n", "\n", "for", "val_data", "in", "data_", "[", "5", "]", ":", "\n", "        ", "val_data", "=", "val_data", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", ",", "_", "=", "model", "(", "val_data", ",", "mode", "=", "mode", ")", "\n", "logits", "=", "logits", ".", "to", "(", "device", ")", "\n", "", "target", "=", "val_data", ".", "y", "\n", "if", "args", ".", "data", "==", "'COLORS-3'", ":", "\n", "# loss = (logits-target.long()).pow(2).mean()", "\n", "            ", "loss", "=", "criterion", "(", "logits", ",", "target", ".", "long", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "", "valid_loss", "+=", "loss", ".", "item", "(", ")", "\n", "valid_acc", "+=", "logits", ".", "max", "(", "1", ")", "[", "1", "]", ".", "eq", "(", "target", ".", "view", "(", "-", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "for", "test_data", "in", "data_", "[", "6", "]", ":", "\n", "        ", "test_data", "=", "test_data", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", ",", "_", "=", "model", "(", "test_data", ",", "mode", "=", "mode", ")", "\n", "logits", "=", "logits", ".", "to", "(", "device", ")", "\n", "", "target", "=", "test_data", ".", "y", "\n", "if", "args", ".", "data", "==", "'COLORS-3'", ":", "\n", "            ", "loss", "=", "criterion", "(", "logits", ",", "target", ".", "long", "(", ")", ")", "\n", "# loss = (logits-target.long()).pow(2).mean()", "\n", "", "else", ":", "\n", "            ", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "", "test_loss", "+=", "loss", ".", "item", "(", ")", "\n", "test_acc", "+=", "logits", ".", "max", "(", "1", ")", "[", "1", "]", ".", "eq", "(", "target", ".", "view", "(", "-", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "return", "valid_loss", "/", "len", "(", "data_", "[", "5", "]", ".", "dataset", ")", ",", "valid_acc", "/", "len", "(", "data_", "[", "5", "]", ".", "dataset", ")", ",", "test_loss", "/", "len", "(", "data_", "[", "6", "]", ".", "dataset", ")", ",", "test_acc", "/", "len", "(", "data_", "[", "6", "]", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.train_search.run_by_seed": [[249, 263], ["range", "open", "open.write", "open.close", "print", "print", "numpy.random.randint", "train_search.main", "res.append", "time.strftime", "time.strftime"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.train4tune.main"], ["", "def", "run_by_seed", "(", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "num_sampled_archs", ")", ":", "\n", "        ", "print", "(", "'searched {}-th for {}...'", ".", "format", "(", "i", "+", "1", ",", "args", ".", "data", ")", ")", "\n", "args", ".", "save", "=", "'{}-{}'", ".", "format", "(", "args", ".", "data", ",", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", ")", "\n", "seed", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "10000", ")", "\n", "args", ".", "seed", "=", "seed", "\n", "genotype", "=", "main", "(", ")", "\n", "res", ".", "append", "(", "'seed={},genotype={},saved_dir={}'", ".", "format", "(", "seed", ",", "genotype", ",", "args", ".", "save", ")", ")", "\n", "", "filename", "=", "'./exp_res/%s-searched_res-%s-eps%s-reg%s.txt'", "%", "(", "args", ".", "data", ",", "time", ".", "strftime", "(", "'%Y%m%d-%H%M%S'", ")", ",", "args", ".", "epsilon", ",", "args", ".", "weight_decay", ")", "\n", "fw", "=", "open", "(", "filename", ",", "'w+'", ")", "\n", "fw", ".", "write", "(", "'\\n'", ".", "join", "(", "res", ")", ")", "\n", "fw", ".", "close", "(", ")", "\n", "print", "(", "'searched res for {} saved in {}'", ".", "format", "(", "args", ".", "data", ",", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.ASAPooling_mix.forward": [[17, 88], ["torch_scatter.scatter.size", "torch_scatter.scatter", "pooling_zoo.ASAPooling_mix.att().view", "torch.leaky_relu", "torch.leaky_relu", "torch_geometric.utils.softmax", "torch.dropout", "torch.dropout", "torch_scatter.scatter", "pooling_zoo.ASAPooling_mix.gnn_score().sigmoid().view", "torch_geometric.nn.pool.topk_pool.topk", "pooling_zoo.ASAPooling_mix.", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.stack.new_zeros", "torch.stack.new_zeros", "pooling_zoo.ASAPooling_mix.gnn_intra_cluster", "pooling_zoo.ASAPooling_mix.lin", "torch.dropout.view", "torch_sparse.SparseTensor", "torch_sparse.SparseTensor", "A.remove_diag.remove_diag.coo", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "torch_scatter.scatter.size", "pooling_zoo.ASAPooling_mix.att", "pooling_zoo.ASAPooling_mix.gnn_score().sigmoid", "fitness[].view", "A.remove_diag.remove_diag.fill_diag", "A.remove_diag.remove_diag.remove_diag", "pooling_zoo.ASAPooling_mix.view", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.stack.size", "torch.stack.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_sparse.SparseTensor.t", "pooling_zoo.ASAPooling_mix.gnn_score"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", "=", "None", ",", "batch", "=", "None", ",", "add_self_loop", "=", "False", ",", "remove_self_loop", "=", "False", ",", "ft", "=", "False", ")", ":", "\n", "        ", "N", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "if", "self", ".", "add_self_loops", ":", "\n", "            ", "edge_index", ",", "edge_weight", "=", "add_remaining_self_loops", "(", "\n", "edge_index", ",", "edge_weight", ",", "fill_value", "=", "1", ")", "\n", "# edge_index, edge_weight, fill_value=1, num_nodes=N)", "\n", "", "if", "edge_weight", "==", "None", ":", "\n", "            ", "edge_weight", "=", "torch", ".", "ones", "(", "edge_index", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "\n", "", "if", "batch", "is", "None", ":", "\n", "            ", "batch", "=", "edge_index", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "x_pool", "=", "x", "\n", "if", "self", ".", "GNN", "is", "not", "None", ":", "\n", "            ", "x_pool", "=", "self", ".", "gnn_intra_cluster", "(", "x", "=", "x", ",", "edge_index", "=", "edge_index", ",", "\n", "edge_weight", "=", "edge_weight", ")", "\n", "\n", "", "x_pool_j", "=", "x_pool", "[", "edge_index", "[", "0", "]", "]", "\n", "x_q", "=", "scatter", "(", "x_pool_j", ",", "edge_index", "[", "1", "]", ",", "dim", "=", "0", ",", "reduce", "=", "'max'", ")", "#Eq.5 in ASAP", "\n", "x_q", "=", "self", ".", "lin", "(", "x_q", ")", "[", "edge_index", "[", "1", "]", "]", "#Wm_i in Eq.6", "\n", "\n", "score", "=", "self", ".", "att", "(", "torch", ".", "cat", "(", "[", "x_q", ",", "x_pool_j", "]", ",", "dim", "=", "-", "1", ")", ")", ".", "view", "(", "-", "1", ")", "#W * \\sigma(Wm_i || xj) in Eq.6", "\n", "score", "=", "F", ".", "leaky_relu", "(", "score", ",", "self", ".", "negative_slope", ")", "\n", "score", "=", "softmax", "(", "score", ",", "edge_index", "[", "1", "]", ",", "num_nodes", "=", "N", ")", "#Eq.6", "\n", "\n", "# Sample attention coefficients stochastically.", "\n", "score", "=", "F", ".", "dropout", "(", "score", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "v_j", "=", "x", "[", "edge_index", "[", "0", "]", "]", "*", "score", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "scatter", "(", "v_j", ",", "edge_index", "[", "1", "]", ",", "dim", "=", "0", ",", "reduce", "=", "'add'", ")", "#Eq.7", "\n", "\n", "# Cluster selection.", "\n", "fitness", "=", "self", ".", "gnn_score", "(", "x", ",", "edge_index", ",", "edge_weight", "=", "edge_weight", ")", ".", "sigmoid", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "perm", "=", "topk", "(", "fitness", ",", "self", ".", "ratio", ",", "batch", ")", "\n", "if", "ft", ":", "\n", "            ", "x", "=", "x", "[", "perm", "]", "*", "fitness", "[", "perm", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "batch", "=", "batch", "[", "perm", "]", "\n", "# edge_index, edge_attr = filter_adj(edge_index, None, perm,", "\n", "#                                    num_nodes=score.size(0))", "\n", "# Graph coarsening.", "\n", "row", ",", "col", "=", "edge_index", "\n", "A", "=", "SparseTensor", "(", "row", "=", "row", ",", "col", "=", "col", ",", "value", "=", "edge_weight", ",", "\n", "sparse_sizes", "=", "(", "N", ",", "N", ")", ")", "\n", "S", "=", "SparseTensor", "(", "row", "=", "row", ",", "col", "=", "col", ",", "value", "=", "score", ",", "sparse_sizes", "=", "(", "N", ",", "N", ")", ")", "\n", "S", "=", "S", "[", ":", ",", "perm", "]", "\n", "\n", "A", "=", "S", ".", "t", "(", ")", "@", "A", "@", "S", "\n", "\n", "if", "self", ".", "add_self_loops", ":", "\n", "                ", "A", "=", "A", ".", "fill_diag", "(", "1.", ")", "\n", "", "else", ":", "\n", "                ", "A", "=", "A", ".", "remove_diag", "(", ")", "\n", "\n", "", "row", ",", "col", ",", "edge_weight", "=", "A", ".", "coo", "(", ")", "\n", "edge_index", "=", "torch", ".", "stack", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", "\n", "\n", "return", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "perm", "\n", "\n", "", "else", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "fitness", ")", "\n", "mask", "[", "perm", "]", "=", "1", "\n", "\n", "x1", "=", "x", "*", "fitness", ".", "view", "(", "-", "1", ",", "1", ")", "#x:[node_num, feature_dim] mask:[node_num]", "\n", "x2", "=", "x1", "*", "mask", ".", "view", "(", "-", "1", ",", "1", ")", "#for these unselected nodes, set features to zero", "\n", "\n", "new_edge_weights", "=", "mask", "[", "edge_index", "[", "0", "]", "]", "+", "mask", "[", "edge_index", "[", "1", "]", "]", "\n", "edges_mask", "=", "torch", ".", "where", "(", "new_edge_weights", "!=", "2", ",", "torch", ".", "zeros", "(", "1", ",", "device", "=", "edge_index", ".", "device", ")", ",", "torch", ".", "ones", "(", "1", ",", "device", "=", "edge_index", ".", "device", ")", ")", "\n", "edge_weight2", "=", "edge_weight", "*", "edges_mask", "\n", "\n", "return", "x2", ",", "edge_index", ",", "edge_weight2", ",", "batch", ",", "perm", "\n", "", "", "", "class", "SAGPool_mix", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.SAGPool_mix.__init__": [[89, 109], ["super().__init__", "pooling_zoo.SAGPool_mix.reset_parameters", "torch_geometric.nn.GCNConv", "torch.nn.Sequential", "torch.nn.Sequential", "torch_geometric.nn.GraphConv", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.Linear", "torch.nn.Linear", "int", "int"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "ratio", "=", "0.5", ",", "gnn_type", "=", "'gcn'", ",", "min_score", "=", "None", ",", "\n", "multiplier", "=", "1", ",", "nonlinearity", "=", "torch", ".", "tanh", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SAGPool_mix", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gnn_type", "=", "gnn_type", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "ratio", "=", "ratio", "\n", "if", "gnn_type", "==", "'gcn'", ":", "\n", "            ", "self", ".", "gnn", "=", "GCNConv", "(", "in_channels", ",", "1", ")", "\n", "", "elif", "gnn_type", "==", "'mlp'", ":", "\n", "            ", "self", ".", "gnn", "=", "Sequential", "(", "\n", "Linear", "(", "in_channels", ",", "int", "(", "in_channels", "//", "2", ")", ")", ",", "\n", "ELU", "(", ")", ",", "\n", "Linear", "(", "int", "(", "in_channels", "//", "2", ")", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gnn", "=", "GraphConv", "(", "in_channels", ",", "1", ")", "\n", "", "self", ".", "min_score", "=", "min_score", "\n", "self", ".", "multiplier", "=", "multiplier", "\n", "self", ".", "nonlinearity", "=", "nonlinearity", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.SAGPool_mix.reset_parameters": [[110, 112], ["torch_geometric.nn.inits.reset"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.utils.AvgrageMeter.reset"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "reset", "(", "self", ".", "gnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.SAGPool_mix.forward": [[113, 158], ["torch_geometric.nn.pool.topk_pool.topk", "pooling_zoo.SAGPool_mix.", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "edge_index.new_zeros", "attn.unsqueeze", "pooling_zoo.SAGPool_mix.gnn().view", "pooling_zoo.SAGPool_mix.gnn().view", "pooling_zoo.SAGPool_mix.nonlinearity", "torch_geometric.utils.softmax", "torch_geometric.nn.pool.topk_pool.filter_adj", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "x.size", "attn.dim", "score[].view", "torch_geometric.utils.softmax.view", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "edge_index.size", "pooling_zoo.SAGPool_mix.gnn", "pooling_zoo.SAGPool_mix.gnn", "torch_geometric.utils.softmax.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", "=", "None", ",", "edge_attr", "=", "None", ",", "batch", "=", "None", ",", "attn", "=", "None", ",", "add_self_loop", "=", "False", ",", "remove_self_loop", "=", "False", ",", "ft", "=", "False", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "add_self_loop", ":", "\n", "            ", "edge_index", ",", "edge_weight", "=", "add_remaining_self_loops", "(", "\n", "edge_index", ",", "edge_weight", ",", "fill_value", "=", "1", ")", "\n", "\n", "", "if", "edge_weight", "==", "None", ":", "\n", "            ", "edge_weight", "=", "torch", ".", "ones", "(", "edge_index", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "\n", "", "if", "batch", "is", "None", ":", "\n", "            ", "batch", "=", "edge_index", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "attn", "=", "x", "if", "attn", "is", "None", "else", "attn", "\n", "attn", "=", "attn", ".", "unsqueeze", "(", "-", "1", ")", "if", "attn", ".", "dim", "(", ")", "==", "1", "else", "attn", "\n", "if", "self", ".", "gnn_type", "==", "'mlp'", ":", "\n", "            ", "score", "=", "self", ".", "gnn", "(", "attn", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "self", ".", "gnn", "(", "attn", ",", "edge_index", ",", "edge_weight", "=", "edge_weight", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "if", "self", ".", "min_score", "is", "None", ":", "\n", "            ", "score", "=", "self", ".", "nonlinearity", "(", "score", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "softmax", "(", "score", ",", "batch", ")", "\n", "\n", "", "perm", "=", "topk", "(", "score", ",", "self", ".", "ratio", ",", "batch", ",", "self", ".", "min_score", ")", "\n", "if", "ft", ":", "\n", "            ", "x", "=", "x", "[", "perm", "]", "*", "score", "[", "perm", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "multiplier", "*", "x", "if", "self", ".", "multiplier", "!=", "1", "else", "x", "\n", "batch", "=", "batch", "[", "perm", "]", "\n", "edge_index", ",", "edge_attr", "=", "filter_adj", "(", "edge_index", ",", "edge_attr", ",", "perm", ",", "\n", "num_nodes", "=", "score", ".", "size", "(", "0", ")", ")", "\n", "return", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "perm", "\n", "", "else", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "score", ")", "\n", "mask", "[", "perm", "]", "=", "1", "\n", "x1", "=", "x", "*", "score", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "x2", "=", "x1", "*", "mask", ".", "view", "(", "-", "1", ",", "1", ")", "#for these unselected nodes, set features to zero", "\n", "\n", "#edge_weights", "\n", "new_edge_weights", "=", "mask", "[", "edge_index", "[", "0", "]", "]", "+", "mask", "[", "edge_index", "[", "1", "]", "]", "\n", "edges_mask", "=", "torch", ".", "where", "(", "new_edge_weights", "!=", "2", ",", "torch", ".", "zeros", "(", "1", ",", "device", "=", "edge_index", ".", "device", ")", ",", "torch", ".", "ones", "(", "1", ",", "device", "=", "edge_index", ".", "device", ")", ")", "\n", "edge_weight2", "=", "edge_weight", "*", "edges_mask", "\n", "\n", "\n", "return", "x2", ",", "edge_index", ",", "edge_weight2", ",", "batch", ",", "perm", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.TOPKpooling_mix.forward": [[160, 202], ["torch_geometric.nn.pool.topk_pool.topk", "edge_index.new_zeros", "pooling_zoo.TOPKpooling_mix.", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "attn.unsqueeze", "pooling_zoo.TOPKpooling_mix.nonlinearity", "torch_geometric.utils.softmax", "torch_geometric.nn.pool.topk_pool.filter_adj", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "x.size", "attn.dim", "score[].view", "torch_geometric.utils.softmax.view", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "edge_index.size", "pooling_zoo.TOPKpooling_mix.weight.norm", "torch_geometric.utils.softmax.size"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.pyg_gnn_layer.GeoLayer.norm"], ["    ", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", "=", "None", ",", "edge_attr", "=", "None", ",", "batch", "=", "None", ",", "attn", "=", "None", ",", "add_self_loop", "=", "False", ",", "remove_self_loop", "=", "False", ",", "ft", "=", "False", ")", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "batch", "is", "None", ":", "\n", "            ", "batch", "=", "edge_index", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "", "if", "add_self_loop", ":", "\n", "            ", "edge_index", ",", "edge_weight", "=", "add_remaining_self_loops", "(", "\n", "edge_index", ",", "edge_weight", ",", "fill_value", "=", "1", ")", "\n", "\n", "", "if", "edge_weight", "==", "None", ":", "\n", "            ", "edge_weight", "=", "torch", ".", "ones", "(", "edge_index", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "\n", "", "attn", "=", "x", "if", "attn", "is", "None", "else", "attn", "\n", "attn", "=", "attn", ".", "unsqueeze", "(", "-", "1", ")", "if", "attn", ".", "dim", "(", ")", "==", "1", "else", "attn", "\n", "score", "=", "(", "attn", "*", "self", ".", "weight", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "min_score", "is", "None", ":", "\n", "            ", "score", "=", "self", ".", "nonlinearity", "(", "score", "/", "self", ".", "weight", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "softmax", "(", "score", ",", "batch", ")", "\n", "\n", "", "perm", "=", "topk", "(", "score", ",", "self", ".", "ratio", ",", "batch", ",", "self", ".", "min_score", ")", "\n", "if", "ft", ":", "\n", "            ", "x", "=", "x", "[", "perm", "]", "*", "score", "[", "perm", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "multiplier", "*", "x", "if", "self", ".", "multiplier", "!=", "1", "else", "x", "\n", "\n", "batch", "=", "batch", "[", "perm", "]", "\n", "edge_index", ",", "edge_attr", "=", "filter_adj", "(", "edge_index", ",", "edge_attr", ",", "perm", ",", "\n", "num_nodes", "=", "score", ".", "size", "(", "0", ")", ")", "\n", "\n", "return", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "perm", "\n", "", "else", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "score", ")", "\n", "mask", "[", "perm", "]", "=", "1", "\n", "x1", "=", "x", "*", "score", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "x2", "=", "x1", "*", "mask", ".", "view", "(", "-", "1", ",", "1", ")", "#for these unselected nodes, set features to zero", "\n", "\n", "#edge_weights", "\n", "new_edge_weights", "=", "mask", "[", "edge_index", "[", "0", "]", "]", "+", "mask", "[", "edge_index", "[", "1", "]", "]", "\n", "edges_mask", "=", "torch", ".", "where", "(", "new_edge_weights", "!=", "2", ",", "torch", ".", "zeros", "(", "1", ",", "device", "=", "edge_index", ".", "device", ")", ",", "torch", ".", "ones", "(", "1", ",", "device", "=", "edge_index", ".", "device", ")", ")", "\n", "edge_weight2", "=", "edge_weight", "*", "edges_mask", "\n", "\n", "return", "x2", ",", "edge_index", ",", "edge_weight2", ",", "batch", ",", "perm", "\n", "", "", "", "class", "Hoppooling_mix", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Hoppooling_mix.__init__": [[203, 207], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "ratio", ",", "walk_length", "=", "3", ")", ":", "\n", "        ", "super", "(", "Hoppooling_mix", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "walk_length", "=", "walk_length", "\n", "self", ".", "pooling_ratio", "=", "ratio", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Hoppooling_mix.reset_parameters": [[207, 209], ["None"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "batch", "=", "None", ",", "edge_weight", "=", "None", ",", "edge_attr", "=", "None", ",", "ft", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Hoppooling_mix.forward": [[209, 247], ["torch_scatter.scatter_add", "k_hops.append", "range", "sum", "torch_geometric.nn.pool.topk_pool.topk", "edge_index.new_zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch_scatter.scatter_add", "k_hops.append", "print", "torch_geometric.nn.pool.topk_pool.filter_adj", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "x.size", "int", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "edge_index.size", "sum.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "batch", "=", "None", ",", "edge_weight", "=", "None", ",", "edge_attr", "=", "None", ",", "ft", "=", "False", ")", ":", "\n", "        ", "if", "batch", "is", "None", ":", "\n", "            ", "batch", "=", "edge_index", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "", "if", "edge_weight", "==", "None", ":", "\n", "            ", "edge_weight", "=", "torch", ".", "ones", "(", "edge_index", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "", "k_hops", "=", "[", "]", "\n", "num_nodes_1hop", "=", "scatter_add", "(", "edge_weight", ",", "edge_index", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "k_hops", ".", "append", "(", "num_nodes_1hop", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "self", ".", "walk_length", ")", "-", "1", ")", ":", "\n", "            ", "num_nodes_1hop", "=", "scatter_add", "(", "num_nodes_1hop", "[", "edge_index", "[", "1", "]", "]", "*", "edge_weight", ",", "edge_index", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "k_hops", ".", "append", "(", "num_nodes_1hop", ")", "\n", "\n", "# x = scatter_add(x[edge_index[1]] * edge_weight, edge_index[0], dim=0)", "\n", "# score = num_nodes_1hop", "\n", "", "score", "=", "sum", "(", "k_hops", ")", "\n", "perm", "=", "topk", "(", "score", ",", "self", ".", "pooling_ratio", ",", "batch", ")", "\n", "if", "perm", "==", "None", ":", "\n", "            ", "print", "(", "score", ")", "\n", "", "if", "ft", ":", "\n", "            ", "x", "=", "x", "[", "perm", "]", "\n", "batch", "=", "batch", "[", "perm", "]", "\n", "edge_index", ",", "edge_attr", "=", "filter_adj", "(", "edge_index", ",", "edge_attr", ",", "perm", ",", "\n", "num_nodes", "=", "score", ".", "size", "(", "0", ")", ")", "\n", "\n", "return", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "perm", "\n", "\n", "", "else", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "score", ")", "\n", "mask", "[", "perm", "]", "=", "1", "\n", "x2", "=", "x", "*", "mask", ".", "view", "(", "-", "1", ",", "1", ")", "# for these unselected nodes, set features to zero", "\n", "\n", "# edge_weights", "\n", "new_edge_weights", "=", "mask", "[", "edge_index", "[", "0", "]", "]", "+", "mask", "[", "edge_index", "[", "1", "]", "]", "\n", "edges_mask", "=", "torch", ".", "where", "(", "new_edge_weights", "!=", "2", ",", "torch", ".", "zeros", "(", "1", ",", "device", "=", "edge_index", ".", "device", ")", ",", "\n", "torch", ".", "ones", "(", "1", ",", "device", "=", "edge_index", ".", "device", ")", ")", "\n", "edge_weight2", "=", "edge_weight", "*", "edges_mask", "\n", "\n", "return", "x2", ",", "edge_index", ",", "edge_weight2", ",", "batch", ",", "perm", "\n", "", "", "", "class", "Gappool_Mixed", "(", "MessagePassing", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.__init__": [[248, 252], ["torch_geometric.nn.conv.MessagePassing.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "ratio", ")", ":", "\n", "        ", "super", "(", "Gappool_Mixed", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pooling_ratio", "=", "ratio", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "in_channels", ",", "1", ")", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters": [[252, 254], ["pooling_zoo.Gappool_Mixed.linear.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "linear", ".", "reset_parameters", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "batch", "=", "None", ",", "edge_weight", "=", "None", ",", "edge_attr", "=", "None", ",", "ft", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.forward": [[254, 284], ["pooling_zoo.Gappool_Mixed.propagate", "pooling_zoo.Gappool_Mixed.reshape", "torch_geometric.nn.pool.topk_pool.topk", "edge_index.new_zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "pooling_zoo.Gappool_Mixed.linear", "pooling_zoo.Gappool_Mixed.size", "torch_geometric.nn.pool.topk_pool.filter_adj", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.where", "torch.where", "torch.where", "torch.where", "x.size", "score[].view", "pooling_zoo.Gappool_Mixed.reshape.view", "torch.zeros_like.view", "torch.zeros_like.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "edge_index.size", "pooling_zoo.Gappool_Mixed.reshape.size"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.propagate"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "batch", "=", "None", ",", "edge_weight", "=", "None", ",", "edge_attr", "=", "None", ",", "ft", "=", "False", ")", ":", "\n", "        ", "if", "batch", "is", "None", ":", "\n", "            ", "batch", "=", "edge_index", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "if", "edge_weight", "==", "None", ":", "\n", "            ", "edge_weight", "=", "torch", ".", "ones", "(", "edge_index", ".", "size", "(", ")", "[", "1", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "# score = W \\times sigma_{(x_u - x_j)^2} \\times 0.5", "\n", "", "gap", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "edge_weight", "=", "edge_weight", ")", "\n", "gap", "=", "self", ".", "linear", "(", "gap", ")", "/", "2", "\n", "score", "=", "gap", ".", "reshape", "(", "gap", ".", "size", "(", "0", ")", ")", "\n", "perm", "=", "topk", "(", "score", ",", "self", ".", "pooling_ratio", ",", "batch", ")", "\n", "if", "ft", ":", "\n", "            ", "x", "=", "x", "[", "perm", "]", "*", "score", "[", "perm", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "batch", "=", "batch", "[", "perm", "]", "\n", "edge_index", ",", "edge_attr", "=", "filter_adj", "(", "edge_index", ",", "edge_attr", ",", "perm", ",", "\n", "num_nodes", "=", "score", ".", "size", "(", "0", ")", ")", "\n", "\n", "return", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "perm", "\n", "", "else", ":", "\n", "            ", "mask", "=", "torch", ".", "zeros_like", "(", "score", ")", "\n", "mask", "[", "perm", "]", "=", "1", "\n", "x1", "=", "x", "*", "score", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "x2", "=", "x1", "*", "mask", ".", "view", "(", "-", "1", ",", "1", ")", "# for these unselected nodes, set features to zero", "\n", "\n", "# edge_weights", "\n", "new_edge_weights", "=", "mask", "[", "edge_index", "[", "0", "]", "]", "+", "mask", "[", "edge_index", "[", "1", "]", "]", "\n", "edges_mask", "=", "torch", ".", "where", "(", "new_edge_weights", "!=", "2", ",", "torch", ".", "zeros", "(", "1", ",", "device", "=", "edge_index", ".", "device", ")", ",", "\n", "torch", ".", "ones", "(", "1", ",", "device", "=", "edge_index", ".", "device", ")", ")", "\n", "edge_weight2", "=", "edge_weight", "*", "edges_mask", "\n", "return", "x2", ",", "edge_index", ",", "edge_weight2", ",", "batch", ",", "perm", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.message": [[285, 288], ["edge_weight.view"], "methods", ["None"], ["", "", "def", "message", "(", "self", ",", "x_i", ",", "x_j", ",", "edge_weight", ")", ":", "\n", "        ", "out", "=", "(", "x_i", "-", "x_j", ")", "*", "(", "x_i", "-", "x_j", ")", "\n", "return", "out", "if", "edge_weight", "is", "None", "else", "out", "*", "edge_weight", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.filter_features": [[289, 298], ["torch.norm", "torch.norm", "torch_geometric.nn.pool.topk_pool.topk", "torch_geometric.nn.pool.topk_pool.filter_adj", "torch.norm.size"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.pyg_gnn_layer.GeoLayer.norm", "home.repos.pwc.inspect_result.automl-research_pas.None.pyg_gnn_layer.GeoLayer.norm"], ["", "", "def", "filter_features", "(", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "th", "=", "0.001", ")", ":", "\n", "    ", "score", "=", "torch", ".", "norm", "(", "x", ",", "p", "=", "1", ",", "dim", "=", "1", ")", "\n", "perm", "=", "topk", "(", "score", ",", "0", ",", "batch", ",", "min_score", "=", "th", ")", "\n", "x", "=", "x", "[", "perm", "]", "\n", "batch", "=", "batch", "[", "perm", "]", "\n", "edge_index", ",", "edge_weight", "=", "filter_adj", "(", "edge_index", ",", "edge_weight", ",", "perm", ",", "\n", "num_nodes", "=", "score", ".", "size", "(", "0", ")", ")", "\n", "# print('pool after mixed pooling: {},{}', x.size(0), edge_index.size(1))", "\n", "return", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "perm", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.filter_perm": [[299, 307], ["torch_geometric.nn.pool.topk_pool.topk", "torch_geometric.nn.pool.topk_pool.filter_adj", "perm_ori.size"], "function", ["None"], ["", "def", "filter_perm", "(", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "perm_ori", ",", "th", "=", "0.001", ")", ":", "\n", "    ", "perm", "=", "topk", "(", "perm_ori", ",", "0", ",", "batch", ",", "min_score", "=", "th", ")", "\n", "x", "=", "x", "[", "perm", "]", "\n", "batch", "=", "batch", "[", "perm", "]", "\n", "edge_index", ",", "edge_weight", "=", "filter_adj", "(", "edge_index", ",", "edge_weight", ",", "perm", ",", "\n", "num_nodes", "=", "perm_ori", ".", "size", "(", "0", ")", ")", "\n", "# print('pool after mixed pooling: {},{}', x.size(0), edge_index.size(1))", "\n", "return", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "perm", "\n", "", ""]], "home.repos.pwc.inspect_result.automl-research_pas.None.dataset.HandleNodeAttention.__call__": [[14, 18], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "data", ".", "attn", "=", "torch", ".", "softmax", "(", "data", ".", "x", "[", ":", ",", "0", "]", ",", "dim", "=", "0", ")", "\n", "data", ".", "x", "=", "data", ".", "x", "[", ":", ",", "1", ":", "]", "\n", "return", "data", "\n", "", "", "def", "index_to_mask", "(", "index", ",", "size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.dataset.NormalizedDegree.__init__": [[23, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.dataset.NormalizedDegree.__call__": [[27, 32], ["torch_geometric.utils.degree", "torch_geometric.utils.degree.view"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "deg", "=", "degree", "(", "data", ".", "edge_index", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "deg", "=", "(", "deg", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "data", ".", "x", "=", "deg", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.dataset.index_to_mask": [[18, 22], ["torch.zeros", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "", "def", "index_to_mask", "(", "index", ",", "size", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "zeros", "(", "size", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "index", ".", "device", ")", "\n", "mask", "[", "index", "]", "=", "1", "\n", "return", "mask", "\n", "", "class", "NormalizedDegree", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.dataset.derive_colors": [[33, 51], ["Counter", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "range", "print", "torch.tensor.append", "len", "len", "int", "print", "torch.zeros.sum", "data.y.item", "torch.where", "torch.where", "torch.where", "len"], "function", ["None"], ["", "", "def", "derive_colors", "(", "dataset", ",", "ratio", "=", "0.1", ")", ":", "\n", "    ", "labels", "=", "[", "]", "\n", "for", "data", "in", "dataset", ":", "\n", "        ", "labels", ".", "append", "(", "data", ".", "y", ".", "item", "(", ")", ")", "\n", "\n", "", "from", "collections", "import", "Counter", "\n", "count_labels", "=", "Counter", "(", "labels", ")", "\n", "print", "(", "count_labels", ")", "\n", "data_mask", "=", "torch", ".", "zeros", "(", "len", "(", "labels", ")", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "data", ".", "y", ".", "device", ")", "\n", "\n", "labels", "=", "torch", ".", "tensor", "(", "labels", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "count_labels", ")", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "where", "(", "labels", "==", "i", ")", "[", "0", "]", "\n", "sampled_idx", "=", "int", "(", "count_labels", "[", "i", "]", "*", "ratio", ")", "\n", "print", "(", "i", ",", "sampled_idx", ",", "len", "(", "idx", ")", ")", "\n", "data_mask", "[", "idx", "[", ":", "sampled_idx", "]", "]", "=", "1", "\n", "", "print", "(", "data_mask", ".", "sum", "(", ")", ")", "\n", "return", "dataset", "[", "data_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.dataset.load_data": [[53, 105], ["os.join", "sklearn.model_selection.StratifiedKFold", "print", "torch_geometric.data.DataLoader", "torch_geometric.data.DataLoader", "torch_geometric.data.DataLoader", "os.dirname", "torch_geometric.datasets.TUDataset", "dataset.derive_colors", "torch_geometric.datasets.TUDataset", "max", "min", "min", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat", "torch.cat", "torch.cat", "os.realpath", "max", "torch_geometric.OneHotDegree", "torch.cat().to", "torch.cat().to", "torch.cat().to", "dataset.NormalizedDegree", "int", "int", "sklearn.model_selection.StratifiedKFold.split", "len", "len", "len", "dataset.HandleNodeAttention", "torch_geometric.utils.degree", "degs[].max().item", "torch.cat().to.mean().item", "torch.cat().to.std().item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "len", "degs[].max", "torch.cat().to.mean", "torch.cat().to.std", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.dataset.derive_colors"], ["", "def", "load_data", "(", "dataset_name", "=", "'DD'", ",", "cleaned", "=", "False", ",", "split_seed", "=", "12345", ",", "batch_size", "=", "32", ",", "remove_large_graph", "=", "True", ")", ":", "\n", "\n", "    ", "path", "=", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "osp", ".", "realpath", "(", "__file__", ")", ")", ",", "'..'", ",", "'data'", ")", "\n", "if", "dataset_name", "==", "'COLORS-3'", ":", "\n", "        ", "dataset", "=", "TUDataset", "(", "path", ",", "'COLORS-3'", ",", "use_node_attr", "=", "True", ",", "\n", "transform", "=", "HandleNodeAttention", "(", ")", ")", "\n", "dataset", "=", "derive_colors", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "dataset", "=", "TUDataset", "(", "path", ",", "dataset_name", ",", "cleaned", "=", "cleaned", ")", "\n", "", "dataset", ".", "data", ".", "edge_attr", "=", "None", "\n", "#load and process", "\n", "if", "dataset", ".", "data", ".", "x", "is", "None", ":", "\n", "        ", "max_degree", "=", "0", "\n", "degs", "=", "[", "]", "\n", "for", "data", "in", "dataset", ":", "\n", "            ", "degs", "+=", "[", "degree", "(", "data", ".", "edge_index", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", "]", "\n", "max_degree", "=", "max", "(", "max_degree", ",", "degs", "[", "-", "1", "]", ".", "max", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "max_degree", "<", "1000", ":", "\n", "            ", "dataset", ".", "transform", "=", "T", ".", "OneHotDegree", "(", "max_degree", ")", "\n", "", "else", ":", "\n", "            ", "deg", "=", "torch", ".", "cat", "(", "degs", ",", "dim", "=", "0", ")", ".", "to", "(", "torch", ".", "float", ")", "\n", "mean", ",", "std", "=", "deg", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "deg", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "dataset", ".", "transform", "=", "NormalizedDegree", "(", "mean", ",", "std", ")", "\n", "\n", "#for diffpool method: remove latge graphs", "\n", "", "", "num_nodes", "=", "max_num_nodes", "=", "0", "\n", "for", "data", "in", "dataset", ":", "\n", "        ", "num_nodes", "+=", "data", ".", "num_nodes", "\n", "max_num_nodes", "=", "max", "(", "data", ".", "num_nodes", ",", "max_num_nodes", ")", "\n", "\n", "# # Filter out a few really large graphs in order to apply DiffPool.", "\n", "", "if", "dataset_name", "==", "'REDDIT-BINARY'", ":", "\n", "        ", "num_nodes", "=", "min", "(", "int", "(", "num_nodes", "/", "len", "(", "dataset", ")", "*", "1.5", ")", ",", "max_num_nodes", ")", "\n", "", "else", ":", "\n", "        ", "num_nodes", "=", "min", "(", "int", "(", "num_nodes", "/", "len", "(", "dataset", ")", "*", "5", ")", ",", "max_num_nodes", ")", "\n", "\n", "\n", "#split 811", "\n", "", "skf", "=", "StratifiedKFold", "(", "10", ",", "shuffle", "=", "True", ",", "random_state", "=", "split_seed", ")", "\n", "idx", "=", "[", "torch", ".", "from_numpy", "(", "i", ")", "for", "_", ",", "i", "in", "skf", ".", "split", "(", "torch", ".", "zeros", "(", "len", "(", "dataset", ")", ")", ",", "dataset", ".", "data", ".", "y", "[", ":", "len", "(", "dataset", ")", "]", ")", "]", "\n", "split", "=", "[", "cat", "(", "idx", "[", ":", "8", "]", ",", "0", ")", ",", "cat", "(", "idx", "[", "8", ":", "9", "]", ",", "0", ")", ",", "cat", "(", "idx", "[", "9", ":", "]", ",", "0", ")", "]", "\n", "\n", "train_dataset", "=", "dataset", "[", "split", "[", "0", "]", "]", "\n", "val_dataset", "=", "dataset", "[", "split", "[", "1", "]", "]", "\n", "test_dataset", "=", "dataset", "[", "split", "[", "2", "]", "]", "\n", "print", "(", "'train:{}, val:{}, test:{}'", ".", "format", "(", "len", "(", "train_dataset", ")", ",", "len", "(", "val_dataset", ")", ",", "len", "(", "test_dataset", ")", ")", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_dataset", ",", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "return", "[", "dataset", ",", "train_dataset", ",", "val_dataset", ",", "test_dataset", ",", "train_loader", ",", "val_loader", ",", "test_loader", "]", ",", "num_nodes", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.dataset.load_k_fold": [[106, 133], ["print", "sklearn.model_selection.StratifiedKFold", "sklearn.model_selection.StratifiedKFold.split", "range", "torch.zeros", "torch.zeros", "torch.zeros", "test_indices.append", "torch.ones", "torch.ones", "torch.ones", "train_mask.nonzero().view.nonzero().view", "data_ith.append", "data_ith.append", "data_ith.append", "data_10fold.append", "len", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "range", "len", "torch_geometric.data.DataLoader", "torch_geometric.data.DataLoader", "torch_geometric.data.DataLoader", "len", "train_mask.nonzero().view.nonzero", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "load_k_fold", "(", "dataset", ",", "folds", ",", "batch_size", ")", ":", "\n", "    ", "print", "(", "'10fold split'", ")", "\n", "skf", "=", "StratifiedKFold", "(", "folds", ",", "shuffle", "=", "True", ",", "random_state", "=", "12345", ")", "\n", "\n", "test_indices", ",", "train_indices", "=", "[", "]", ",", "[", "]", "\n", "for", "_", ",", "idx", "in", "skf", ".", "split", "(", "torch", ".", "zeros", "(", "len", "(", "dataset", ")", ")", ",", "dataset", ".", "data", ".", "y", "[", ":", "len", "(", "dataset", ")", "]", ")", ":", "\n", "        ", "test_indices", ".", "append", "(", "torch", ".", "from_numpy", "(", "idx", ")", ".", "to", "(", "torch", ".", "long", ")", ")", "\n", "\n", "", "val_indices", "=", "[", "test_indices", "[", "i", "-", "1", "]", "for", "i", "in", "range", "(", "folds", ")", "]", "\n", "\n", "data_10fold", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "folds", ")", ":", "\n", "        ", "data_ith", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "#align with 811 split process.", "\n", "train_mask", "=", "torch", ".", "ones", "(", "len", "(", "dataset", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "train_mask", "[", "test_indices", "[", "i", "]", "]", "=", "0", "\n", "train_mask", "[", "val_indices", "[", "i", "]", "]", "=", "0", "\n", "# train_indices.append(train_mask.nonzero().view(-1))", "\n", "# print('start_idx:', torch.where(train_mask == 1)[0][0], torch.where(val_indices[i]==1)[0][0], torch.where(test_indices[i]==1)[0][0])", "\n", "\n", "train_mask", "=", "train_mask", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "data_ith", ".", "append", "(", "DataLoader", "(", "dataset", "[", "train_mask", "]", ",", "batch_size", ",", "shuffle", "=", "True", ")", ")", "\n", "data_ith", ".", "append", "(", "DataLoader", "(", "dataset", "[", "val_indices", "[", "i", "]", "]", ",", "batch_size", ",", "shuffle", "=", "True", ")", ")", "\n", "data_ith", ".", "append", "(", "DataLoader", "(", "dataset", "[", "test_indices", "[", "i", "]", "]", ",", "batch_size", ",", "shuffle", "=", "True", ")", ")", "\n", "data_10fold", ".", "append", "(", "data_ith", ")", "\n", "\n", "", "return", "data_10fold", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.fine_tune.ARGS.__init__": [[79, 81], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ARGS", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.fine_tune.get_args": [[31, 77], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "random.seed", "torch.cuda.manual_seed_all", "torch.manual_seed", "numpy.random.seed", "os.environ.setdefault", "str"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"sane\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'gpu device id'", ")", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "'../data'", ",", "help", "=", "'location of the data corpus'", ")", "\n", "parser", ".", "add_argument", "(", "'--arch_filename'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'given the location of searched res'", ")", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'given the specific of searched res'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_layers'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'num of GNN layers in SANE'", ")", "\n", "parser", ".", "add_argument", "(", "'--tune_topK'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'whether to tune topK archs'", ")", "\n", "parser", ".", "add_argument", "(", "'--record_time'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'whether to tune topK archs'", ")", "\n", "parser", ".", "add_argument", "(", "'--with_linear'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'whether to use linear in NaOp'", ")", "\n", "parser", ".", "add_argument", "(", "'--with_layernorm'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'whether to use layer norm'", ")", "\n", "parser", ".", "add_argument", "(", "'--with_layernorm_learnable'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'use the learnable layer norm'", ")", "\n", "parser", ".", "add_argument", "(", "'--BN'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'use BN.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'batch size of data.'", ")", "\n", "parser", ".", "add_argument", "(", "'--is_mlp'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'is_mlp'", ")", "\n", "parser", ".", "add_argument", "(", "'--ft_weight_decay'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'with weight decay in finetune stage.'", ")", "\n", "parser", ".", "add_argument", "(", "'--ft_dropout'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'with dropout in finetune stage'", ")", "\n", "parser", ".", "add_argument", "(", "'--ft_mode'", ",", "type", "=", "str", ",", "default", "=", "'10fold'", ",", "choices", "=", "[", "'811'", ",", "'622'", ",", "'10fold'", "]", ",", "help", "=", "'data split function.'", ")", "\n", "parser", ".", "add_argument", "(", "'--hyper_epoch'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'hyper epoch in hyperopt.'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'training epochs for each model'", ")", "\n", "parser", ".", "add_argument", "(", "'--cos_lr'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'use cos lr.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_min'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'use cos lr.'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_info'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'print training info in each epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--withoutjk'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'remove la aggregtor'", ")", "\n", "parser", ".", "add_argument", "(", "'--search_act'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'search act in supernet.'", ")", "\n", "parser", ".", "add_argument", "(", "'--one_pooling'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'only one pooling layers after 2th layer.'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'seed for finetune'", ")", "\n", "parser", ".", "add_argument", "(", "'--remove_pooling'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'remove pooling block.'", ")", "\n", "parser", ".", "add_argument", "(", "'--remove_readout'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'remove readout block. Only search the last readout block.'", ")", "\n", "parser", ".", "add_argument", "(", "'--remove_jk'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'remove ensemble block. In the last readout block,use global sum. Graph representation = Z3'", ")", "\n", "parser", ".", "add_argument", "(", "'--fixpooling'", ",", "type", "=", "str", ",", "default", "=", "'null'", ",", "\n", "help", "=", "'use fixed pooling functions'", ")", "\n", "parser", ".", "add_argument", "(", "'--fixjk'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'use concat,rather than search from 3 ops.'", ")", "\n", "\n", "global", "args1", "\n", "args1", "=", "parser", ".", "parse_args", "(", ")", "\n", "random", ".", "seed", "(", "args1", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args1", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args1", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args1", ".", "seed", ")", "\n", "os", ".", "environ", ".", "setdefault", "(", "\"HYPEROPT_FMIN_SEED\"", ",", "str", "(", "args1", ".", "seed", ")", ")", "\n", "", "class", "ARGS", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.fine_tune.generate_args": [[82, 109], ["fine_tune.ARGS", "arg_map.items", "args1.__dict__.items", "setattr", "setattr", "setattr"], "function", ["None"], ["", "", "def", "generate_args", "(", "arg_map", ")", ":", "\n", "    ", "args", "=", "ARGS", "(", ")", "\n", "for", "k", ",", "v", "in", "arg_map", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "k", ",", "v", ")", "\n", "", "for", "k", ",", "v", "in", "args1", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "k", ",", "v", ")", "\n", "", "setattr", "(", "args", ",", "'rnd_num'", ",", "1", ")", "\n", "\n", "# args.ft_mode = args1.ft_mode", "\n", "if", "args1", ".", "ft_dropout", ":", "\n", "        ", "args", ".", "in_dropout", "=", "args", ".", "in_dropout", "/", "10.0", "\n", "args", ".", "out_dropout", "=", "args", ".", "out_dropout", "/", "10.0", "\n", "", "else", ":", "\n", "        ", "args", ".", "in_dropout", "=", "args", ".", "out_dropout", "=", "0", "\n", "\n", "", "if", "args1", ".", "ft_weight_decay", ":", "\n", "        ", "args", ".", "weight_decay", "=", "10", "**", "args", ".", "weight_decay", "\n", "", "else", ":", "\n", "        ", "args", ".", "weight_decay", "=", "0", "\n", "\n", "", "args", ".", "graph_classification_dataset", "=", "graph_classification_dataset", "\n", "args", ".", "node_classification_dataset", "=", "node_classification_dataset", "\n", "\n", "args", ".", "grad_clip", "=", "5", "\n", "args", ".", "momentum", "=", "0.9", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.fine_tune.objective": [[110, 121], ["fine_tune.generate_args", "train4tune.main", "print", "round", "time.time"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.fine_tune.generate_args", "home.repos.pwc.inspect_result.automl-research_pas.None.train4tune.main"], ["", "def", "objective", "(", "args", ")", ":", "\n", "    ", "args", "=", "generate_args", "(", "args", ")", "\n", "\n", "vali_acc", ",", "test_acc", ",", "test_std", ",", "args", "=", "main", "(", "args", ")", "\n", "print", "(", "args", ")", "\n", "return", "{", "\n", "'loss'", ":", "-", "vali_acc", ",", "\n", "'test_acc'", ":", "test_acc", ",", "\n", "'test_std'", ":", "test_std", ",", "\n", "'status'", ":", "STATUS_OK", ",", "\n", "'eval_time'", ":", "round", "(", "time", ".", "time", "(", ")", ",", "2", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.fine_tune.run_fine_tune": [[123, 217], ["time.strftime", "os.path.join", "logging_util.init_logger", "open().readlines", "set", "enumerate", "print", "os.path.exists", "os.mkdir", "hyperopt.hp.choice", "hyperopt.hp.choice", "hyperopt.hp.choice", "hyperopt.hp.choice", "hyperopt.hp.uniform", "open", "args1.arch_filename.split", "print", "logging.info", "l.strip().split", "l.strip", "time.time", "hyperopt.Trials", "hyperopt.fmin", "hyperopt.space_eval", "fine_tune.generate_args", "print", "print", "range", "numpy.array", "numpy.array", "range", "print", "test_res.append", "logging.info", "logging.info", "len", "parts[].split", "logging.info", "set.add", "train4tune.main", "print", "np.array.append", "np.array.append", "print", "open", "pickle.dump", "logging.info", "traceback.print_exc", "len", "len", "l.strip", "l.strip", "hyperopt.partial", "record_time_res.append", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "len", "l.strip", "int"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.logging_util.init_logger", "home.repos.pwc.inspect_result.automl-research_pas.None.fine_tune.generate_args", "home.repos.pwc.inspect_result.automl-research_pas.None.train4tune.main"], ["", "def", "run_fine_tune", "(", ")", ":", "\n", "\n", "    ", "tune_str", "=", "time", ".", "strftime", "(", "'%Y%m%d-%H%M%S'", ")", "\n", "path", "=", "'logs/tune-%s_%s'", "%", "(", "args1", ".", "data", ",", "tune_str", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "log_filename", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'log.txt'", ")", "\n", "init_logger", "(", "'fine-tune'", ",", "log_filename", ",", "logging", ".", "INFO", ",", "False", ")", "\n", "\n", "lines", "=", "open", "(", "args1", ".", "arch_filename", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "\n", "suffix", "=", "args1", ".", "arch_filename", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "# need to re-write the suffix?", "\n", "\n", "test_res", "=", "[", "]", "\n", "arch_set", "=", "set", "(", ")", "\n", "\n", "if", "args1", ".", "search_act", ":", "\n", "#search act in train supernet. Finetune stage remove act search.", "\n", "        ", "sane_space", "[", "'activation'", "]", "=", "hp", ".", "choice", "(", "\"act\"", ",", "[", "0", "]", ")", "\n", "\n", "", "if", "not", "args1", ".", "ft_weight_decay", ":", "\n", "        ", "sane_space", "[", "'weight_decay'", "]", "=", "hp", ".", "choice", "(", "\"wr\"", ",", "[", "0", "]", ")", "\n", "", "if", "not", "args1", ".", "ft_dropout", ":", "\n", "        ", "sane_space", "[", "'in_dropout'", "]", "=", "hp", ".", "choice", "(", "'in_dropout'", ",", "[", "0", "]", ")", "\n", "sane_space", "[", "'out_dropout'", "]", "=", "hp", ".", "choice", "(", "'out_dropout'", ",", "[", "0", "]", ")", "\n", "", "if", "args1", ".", "data", "in", "[", "'COLLAB'", ",", "'REDDIT-MULTI-5K'", ",", "'NCI1'", ",", "'NCI109'", "]", ":", "\n", "        ", "sane_space", "[", "'learning_rate'", "]", "=", "hp", ".", "uniform", "(", "\"lr\"", ",", "0.005", ",", "0.02", ")", "\n", "", "for", "ind", ",", "l", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "'**********process {}-th/{}, logfilename={}**************'", ".", "format", "(", "ind", "+", "1", ",", "len", "(", "lines", ")", ",", "log_filename", ")", ")", "\n", "logging", ".", "info", "(", "'**********process {}-th/{}**************8'", ".", "format", "(", "ind", "+", "1", ",", "len", "(", "lines", ")", ")", ")", "\n", "res", "=", "{", "}", "\n", "#iterate each searched architecture", "\n", "parts", "=", "l", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "\n", "arch", "=", "parts", "[", "1", "]", ".", "split", "(", "'='", ")", "[", "1", "]", "\n", "args1", ".", "arch", "=", "arch", "\n", "if", "arch", "in", "arch_set", ":", "\n", "                ", "logging", ".", "info", "(", "'the %s-th arch %s already searched....info=%s'", ",", "ind", "+", "1", ",", "arch", ",", "l", ".", "strip", "(", ")", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                ", "arch_set", ".", "add", "(", "arch", ")", "\n", "", "res", "[", "'searched_info'", "]", "=", "l", ".", "strip", "(", ")", "\n", "\n", "# start = time.time()", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "trials", "=", "Trials", "(", ")", "\n", "#tune with validation acc, and report the test accuracy with the best validation acc", "\n", "best", "=", "fmin", "(", "objective", ",", "sane_space", ",", "algo", "=", "partial", "(", "tpe", ".", "suggest", ",", "n_startup_jobs", "=", "int", "(", "args1", ".", "hyper_epoch", "/", "5", ")", ")", ",", "max_evals", "=", "args1", ".", "hyper_epoch", ",", "trials", "=", "trials", ")", "\n", "\n", "space", "=", "hyperopt", ".", "space_eval", "(", "sane_space", ",", "best", ")", "\n", "args", "=", "generate_args", "(", "space", ")", "\n", "print", "(", "'best space is '", ",", "args", ".", "__dict__", ")", "\n", "res", "[", "'tuned_args'", "]", "=", "args", ".", "__dict__", "\n", "\n", "record_time_res", "=", "[", "]", "\n", "c_vali_acc", ",", "c_test_acc", "=", "0", ",", "0", "\n", "#report the test acc with the best vali acc", "\n", "for", "d", "in", "trials", ".", "results", ":", "\n", "                ", "if", "-", "d", "[", "'loss'", "]", ">", "c_vali_acc", ":", "\n", "                    ", "c_vali_acc", "=", "-", "d", "[", "'loss'", "]", "\n", "c_test_acc", "=", "d", "[", "'test_acc'", "]", "\n", "record_time_res", ".", "append", "(", "'%s,%s,%s'", "%", "(", "d", "[", "'eval_time'", "]", "-", "start", ",", "c_vali_acc", ",", "c_test_acc", ")", ")", "\n", "\n", "", "", "res", "[", "'test_acc'", "]", "=", "c_test_acc", "\n", "print", "(", "'test_acc={}'", ".", "format", "(", "c_test_acc", ")", ")", "\n", "\n", "#cal std and record the best results.", "\n", "test_accs", "=", "[", "]", "\n", "test_stds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "# args.epochs = 100", "\n", "                ", "vali_acc", ",", "t_acc", ",", "t_std", ",", "test_args", "=", "main", "(", "args", ")", "\n", "print", "(", "'cal std: times:{}, valid_Acc:{}, test_acc:{:.04f}+-{:.04f}'", ".", "format", "(", "i", ",", "vali_acc", ",", "t_acc", ",", "t_std", ")", ")", "\n", "test_accs", ".", "append", "(", "t_acc", ")", "\n", "test_stds", ".", "append", "(", "t_std", ")", "\n", "", "test_accs", "=", "np", ".", "array", "(", "test_accs", ")", "\n", "test_stds", "=", "np", ".", "array", "(", "test_stds", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                ", "print", "(", "'Train from scratch {}/5: Test_acc:{:.04f}+-{:.04f}'", ".", "format", "(", "i", ",", "test_accs", "[", "i", "]", ",", "test_stds", "[", "i", "]", ")", ")", "\n", "", "print", "(", "'test_results_5_times:{:.04f}+-{:.04f}'", ".", "format", "(", "np", ".", "mean", "(", "test_accs", ")", ",", "np", ".", "std", "(", "test_accs", ")", ")", ")", "\n", "res", "[", "'accs_train_from_scratch'", "]", "=", "test_accs", "\n", "res", "[", "'stds_train_from_scratch'", "]", "=", "test_stds", "\n", "test_res", ".", "append", "(", "res", ")", "\n", "\n", "with", "open", "(", "'tuned_res/%s_res_%s_%s.pkl'", "%", "(", "args1", ".", "data", ",", "tune_str", ",", "suffix", ")", ",", "'wb+'", ")", "as", "fw", ":", "\n", "                ", "pickle", ".", "dump", "(", "test_res", ",", "fw", ")", "\n", "", "logging", ".", "info", "(", "'test_results of 5 times:{:.04f}+-{:.04f}'", ".", "format", "(", "np", ".", "mean", "(", "test_accs", ")", ",", "np", ".", "std", "(", "test_accs", ")", ")", ")", "\n", "logging", ".", "info", "(", "'**********finish {}-th/{}**************8'", ".", "format", "(", "ind", "+", "1", ",", "len", "(", "lines", ")", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "logging", ".", "info", "(", "'errror occured for %s-th, arch_info=%s, error=%s'", ",", "ind", "+", "1", ",", "l", ".", "strip", "(", ")", ",", "e", ")", "\n", "import", "traceback", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "", "", "print", "(", "'finsh tunining {} archs, saved in {}'", ".", "format", "(", "len", "(", "arch_set", ")", ",", "\n", "'tuned_res/%s_res_%s_%s.pkl'", "%", "(", "args1", ".", "data", ",", "tune_str", ",", "suffix", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.NaOp.__init__": [[30, 39], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "model.act_map"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.automl-research_pas.None.model.act_map"], ["  ", "def", "__init__", "(", "self", ",", "primitive", ",", "in_dim", ",", "out_dim", ",", "act", ",", "with_linear", "=", "False", ",", "with_act", "=", "True", ")", ":", "\n", "    ", "super", "(", "NaOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_op", "=", "NA_OPS", "[", "primitive", "]", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "op_linear", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "if", "not", "with_act", ":", "\n", "      ", "act", "=", "'linear'", "\n", "", "self", ".", "act", "=", "act_map", "(", "act", ")", "\n", "self", ".", "with_linear", "=", "with_linear", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.NaOp.reset_params": [[40, 43], ["model.NaOp._op.reset_params", "model.NaOp.op_linear.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Pooling_func.reset_params", "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "    ", "self", ".", "_op", ".", "reset_params", "(", ")", "\n", "self", ".", "op_linear", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.NaOp.forward": [[44, 49], ["model.NaOp.act", "model.NaOp.act", "model.NaOp._op", "model.NaOp._op", "model.NaOp.op_linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weights", ")", ":", "\n", "    ", "if", "self", ".", "with_linear", ":", "\n", "      ", "return", "self", ".", "act", "(", "self", ".", "_op", "(", "x", ",", "edge_index", ",", "edge_weight", "=", "edge_weights", ")", "+", "self", ".", "op_linear", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "act", "(", "self", ".", "_op", "(", "x", ",", "edge_index", ",", "edge_weight", "=", "edge_weights", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.LaOp.__init__": [[53, 57], ["torch.Module.__init__", "model.act_map"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__", "home.repos.pwc.inspect_result.automl-research_pas.None.model.act_map"], ["  ", "def", "__init__", "(", "self", ",", "primitive", ",", "hidden_size", ",", "act", ",", "num_layers", "=", "None", ")", ":", "\n", "    ", "super", "(", "LaOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_op", "=", "LA_OPS", "[", "primitive", "]", "(", "hidden_size", ",", "num_layers", ")", "\n", "self", ".", "act", "=", "act_map", "(", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.LaOp.reset_params": [[58, 60], ["model.LaOp._op.reset_params"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Pooling_func.reset_params"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "    ", "self", ".", "_op", ".", "reset_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.LaOp.forward": [[61, 64], ["model.LaOp._op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# return self.act(self._op(x))", "\n", "    ", "return", "self", ".", "_op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.PoolingOp.__init__": [[67, 71], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["  ", "def", "__init__", "(", "self", ",", "primitive", ",", "hidden", ",", "ratio", ",", "num_nodes", "=", "0", ")", ":", "\n", "    ", "super", "(", "PoolingOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_op", "=", "POOL_OPS", "[", "primitive", "]", "(", "hidden", ",", "ratio", ",", "num_nodes", ")", "\n", "self", ".", "primitive", "=", "primitive", "\n", "", "def", "reset_params", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.PoolingOp.reset_params": [[71, 73], ["model.PoolingOp._op.reset_params"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Pooling_func.reset_params"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "    ", "self", ".", "_op", ".", "reset_params", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weights", ",", "data", ",", "batch", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.PoolingOp.forward": [[73, 76], ["model.PoolingOp._op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weights", ",", "data", ",", "batch", ",", "mask", ")", ":", "\n", "    ", "new_x", ",", "new_edge_index", ",", "_", ",", "new_batch", ",", "_", "=", "self", ".", "_op", "(", "x", ",", "edge_index", ",", "edge_weights", ",", "data", ",", "batch", ",", "mask", ",", "ft", "=", "True", ")", "\n", "return", "new_x", ",", "new_edge_index", ",", "new_batch", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.ReadoutOp.__init__": [[79, 82], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["  ", "def", "__init__", "(", "self", ",", "primitive", ",", "hidden", ")", ":", "\n", "    ", "super", "(", "ReadoutOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_op", "=", "READOUT_OPS", "[", "primitive", "]", "(", "hidden", ")", "\n", "", "def", "reset_params", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.ReadoutOp.reset_params": [[82, 84], ["model.ReadoutOp._op.reset_params"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Pooling_func.reset_params"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "    ", "self", ".", "_op", ".", "reset_params", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "batch", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.ReadoutOp.forward": [[84, 87], ["model.ReadoutOp._op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "batch", ",", "mask", ")", ":", "\n", "\n", "    ", "return", "self", ".", "_op", "(", "x", ",", "batch", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.NetworkGNN.__init__": [[92, 142], ["torch.Module.__init__", "genotype.split", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model.LaOp", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "model.NaOp", "model.PoolingOp", "model.ReadoutOp", "model.NetworkGNN.lns_learnable.append", "range", "range", "range", "range", "range", "range", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ",", "criterion", ",", "in_dim", ",", "out_dim", ",", "hidden_size", ",", "num_layers", "=", "3", ",", "in_dropout", "=", "0.5", ",", "out_dropout", "=", "0.5", ",", "act", "=", "'elu'", ",", "args", "=", "None", ",", "is_mlp", "=", "False", ",", "num_nodes", "=", "0", ")", ":", "\n", "    ", "super", "(", "NetworkGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "genotype", "=", "genotype", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "in_dropout", "=", "in_dropout", "\n", "self", ".", "out_dropout", "=", "out_dropout", "\n", "self", ".", "_criterion", "=", "criterion", "\n", "ops", "=", "genotype", ".", "split", "(", "'||'", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "pooling_ratios", "=", "[", "[", "0.1", "]", ",", "[", "0.25", ",", "0.25", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.6", ",", "0.6", ",", "0.6", ",", "0.6", "]", ",", "[", "0.7", ",", "0.7", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "[", "0.8", ",", "0.8", ",", "0.8", ",", "0.8", ",", "0.8", ",", "0.8", "]", "]", "\n", "if", "self", ".", "args", ".", "data", "in", "[", "'NCI1'", ",", "'NCI109'", "]", ":", "\n", "      ", "self", ".", "pooling_ratios", "=", "[", "[", "0.1", "]", ",", "[", "0.5", ",", "0.5", "]", ",", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "[", "0.6", ",", "0.6", ",", "0.6", ",", "0.6", "]", ",", "[", "0.7", ",", "0.7", ",", "0.7", ",", "0.7", ",", "0.7", "]", ",", "\n", "[", "0.8", ",", "0.8", ",", "0.8", ",", "0.8", ",", "0.8", ",", "0.8", "]", "]", "\n", "\n", "", "self", ".", "bn", "=", "BatchNorm1d", "(", "hidden_size", ")", "\n", "self", ".", "pooling_ratio", "=", "self", ".", "pooling_ratios", "[", "num_layers", "-", "1", "]", "\n", "\n", "#node aggregator op", "\n", "self", ".", "lin1", "=", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_size", ")", "\n", "if", "self", ".", "args", ".", "search_act", ":", "\n", "      ", "act", "=", "ops", "[", "num_layers", ":", "num_layers", "*", "2", "]", "\n", "", "else", ":", "\n", "      ", "act", "=", "[", "act", "for", "i", "in", "range", "(", "num_layers", ")", "]", "\n", "", "self", ".", "gnn_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "NaOp", "(", "ops", "[", "i", "]", ",", "hidden_size", ",", "hidden_size", ",", "act", "[", "i", "]", ",", "with_linear", "=", "args", ".", "with_linear", ")", "for", "i", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "\n", "if", "self", ".", "args", ".", "remove_pooling", ":", "\n", "      ", "poolops", "=", "[", "'none'", "for", "i", "in", "range", "(", "num_layers", ")", "]", "\n", "", "else", ":", "\n", "      ", "poolops", "=", "[", "ops", "[", "num_layers", "*", "2", "+", "i", "]", "for", "i", "in", "range", "(", "num_layers", ")", "]", "\n", "\n", "", "self", ".", "pooling_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "PoolingOp", "(", "poolops", "[", "i", "]", ",", "hidden_size", ",", "self", ".", "pooling_ratio", "[", "i", "]", ")", "for", "i", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "\n", "self", ".", "readout_layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "ReadoutOp", "(", "ops", "[", "num_layers", "*", "3", "+", "i", "]", ",", "hidden_size", ")", "for", "i", "in", "range", "(", "num_layers", "+", "1", ")", "]", ")", "\n", "\n", "#learnable_LN", "\n", "if", "self", ".", "args", ".", "with_layernorm_learnable", ":", "\n", "      ", "self", ".", "lns_learnable", "=", "torch", ".", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "        ", "self", ".", "lns_learnable", ".", "append", "(", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_size", ")", ")", "\n", "\n", "", "", "self", ".", "layer6", "=", "LaOp", "(", "ops", "[", "-", "1", "]", ",", "hidden_size", ",", "'linear'", ",", "num_layers", "+", "1", ")", "\n", "\n", "self", ".", "lin_output", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.NetworkGNN.reset_params": [[144, 158], ["model.NetworkGNN.lin1.reset_parameters", "range", "range", "model.NetworkGNN.layer6.reset_params", "model.NetworkGNN.lin_output.reset_parameters", "model.NetworkGNN.classifier.reset_parameters", "model.NetworkGNN.gnn_layers[].reset_params", "model.NetworkGNN.pooling_layers[].reset_params", "model.NetworkGNN.readout_layers[].reset_params"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters", "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Pooling_func.reset_params", "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters", "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters", "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Pooling_func.reset_params", "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Pooling_func.reset_params", "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Pooling_func.reset_params"], ["", "def", "reset_params", "(", "self", ")", ":", "\n", "\n", "    ", "self", ".", "lin1", ".", "reset_parameters", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "      ", "self", ".", "gnn_layers", "[", "i", "]", ".", "reset_params", "(", ")", "\n", "self", ".", "pooling_layers", "[", "i", "]", ".", "reset_params", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_layers", "+", "1", ")", ":", "\n", "        ", "self", ".", "readout_layers", "[", "i", "]", ".", "reset_params", "(", ")", "\n", "\n", "", "self", ".", "layer6", ".", "reset_params", "(", ")", "\n", "self", ".", "lin_output", ".", "reset_parameters", "(", ")", "\n", "self", ".", "classifier", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.NetworkGNN.forward": [[159, 191], ["torch.elu", "torch.elu", "torch.elu", "graph_representations.append", "torch.dropout", "torch.dropout", "torch.dropout", "range", "model.NetworkGNN.layer6", "torch.elu", "torch.elu", "torch.elu", "torch.dropout", "torch.dropout", "torch.dropout", "model.NetworkGNN.classifier", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "model.NetworkGNN.lin1", "torch.dropout", "torch.dropout", "torch.dropout", "graph_representations.append", "model.NetworkGNN.lin_output", "model.NetworkGNN.bn", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm.", "nn.LayerNorm.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ")", ":", "\n", "    ", "x", ",", "edge_index", ",", "batch", "=", "data", ".", "x", ",", "data", ".", "edge_index", ",", "data", ".", "batch", "\n", "graph_representations", "=", "[", "]", "\n", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "lin1", "(", "x", ")", ")", "\n", "graph_representations", ".", "append", "(", "self", ".", "readout_layers", "[", "0", "]", "(", "x", ",", "batch", ",", "None", ")", ")", "\n", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "in_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "# edge_weights = torch.ones(edge_index.size()[1], device=edge_index.device).float()", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "      ", "x", "=", "self", ".", "gnn_layers", "[", "i", "]", "(", "x", ",", "edge_index", ",", "edge_weights", "=", "None", ")", "\n", "# print('evaluate data {}-th gnn:'.format(i), x.size(), batch.size())", "\n", "if", "self", ".", "args", ".", "with_layernorm_learnable", ":", "\n", "        ", "x", "=", "self", ".", "lns_learnable", "[", "i", "]", "(", "x", ")", "\n", "", "elif", "self", ".", "args", ".", "with_layernorm", ":", "\n", "        ", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "normalized_shape", "=", "x", ".", "size", "(", ")", ",", "elementwise_affine", "=", "False", ")", "\n", "x", "=", "layer_norm", "(", "x", ")", "\n", "", "if", "self", ".", "args", ".", "BN", ":", "\n", "        ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "in_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "x", ",", "edge_index", ",", "batch", ",", "_", "=", "self", ".", "pooling_layers", "[", "i", "]", "(", "x", ",", "edge_index", ",", "None", ",", "data", ",", "batch", ",", "None", ")", "\n", "\n", "graph_representations", ".", "append", "(", "self", ".", "readout_layers", "[", "i", "+", "1", "]", "(", "x", ",", "batch", ",", "None", ")", ")", "\n", "\n", "", "x5", "=", "self", ".", "layer6", "(", "graph_representations", ")", "\n", "\n", "x5", "=", "F", ".", "elu", "(", "self", ".", "lin_output", "(", "x5", ")", ")", "\n", "x5", "=", "F", ".", "dropout", "(", "x5", ",", "p", "=", "self", ".", "out_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "logits", "=", "self", ".", "classifier", "(", "x5", ")", "\n", "return", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.NetworkGNN._loss": [[192, 194], ["model.NetworkGNN._criterion"], "methods", ["None"], ["", "def", "_loss", "(", "self", ",", "logits", ",", "target", ")", ":", "\n", "    ", "return", "self", ".", "_criterion", "(", "logits", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.NetworkGNN.arch_parameters": [[197, 199], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.model.act_map": [[8, 27], ["Exception"], "function", ["None"], ["def", "act_map", "(", "act", ")", ":", "\n", "  ", "if", "act", "==", "\"linear\"", ":", "\n", "    ", "return", "lambda", "x", ":", "x", "\n", "", "elif", "act", "==", "\"elu\"", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "functional", ".", "elu", "\n", "", "elif", "act", "==", "\"sigmoid\"", ":", "\n", "    ", "return", "torch", ".", "sigmoid", "\n", "", "elif", "act", "==", "\"tanh\"", ":", "\n", "    ", "return", "torch", ".", "tanh", "\n", "", "elif", "act", "==", "\"relu\"", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "functional", ".", "relu", "\n", "", "elif", "act", "==", "\"relu6\"", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "functional", ".", "relu6", "\n", "", "elif", "act", "==", "\"softplus\"", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "functional", ".", "softplus", "\n", "", "elif", "act", "==", "\"leaky_relu\"", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "functional", ".", "leaky_relu", "\n", "", "else", ":", "\n", "    ", "raise", "Exception", "(", "\"wrong activate function\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.NaAggregator.__init__": [[77, 110], ["torch.Module.__init__", "agg_zoo.SAGE_mix", "torch_geometric.nn.GCNConv", "agg_zoo.GAT_mix", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "agg_zoo.GIN_mix", "agg_zoo.Geolayer_mix", "agg_zoo.Geolayer_mix", "geniepath.GeniePathLayer", "torch_geometric.nn.SGConv", "torch_geometric.nn.GraphConv", "torch_geometric.nn.LEConv", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "int", "aggregator.split", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.ELU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "aggregator", ")", ":", "\n", "    ", "super", "(", "NaAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#aggregator, K = agg_str.split('_')", "\n", "self", ".", "aggregator", "=", "aggregator", "\n", "if", "'sage'", "==", "aggregator", ":", "\n", "# self._op = SAGEConv(in_dim, out_dim, normalize=True)", "\n", "      ", "self", ".", "_op", "=", "SAGE_mix", "(", "in_dim", ",", "out_dim", ")", "\n", "", "if", "'gcn'", "==", "aggregator", ":", "\n", "      ", "self", ".", "_op", "=", "GCNConv", "(", "in_dim", ",", "out_dim", ")", "\n", "", "if", "'gat'", "==", "aggregator", ":", "\n", "      ", "heads", "=", "2", "\n", "out_dim", "/=", "heads", "\n", "self", ".", "_op", "=", "GAT_mix", "(", "in_dim", ",", "int", "(", "out_dim", ")", ",", "heads", "=", "heads", ",", "dropout", "=", "0.5", ")", "\n", "", "if", "'gin'", "==", "aggregator", ":", "\n", "      ", "nn1", "=", "Sequential", "(", "Linear", "(", "in_dim", ",", "out_dim", ")", ",", "ELU", "(", ")", ",", "Linear", "(", "out_dim", ",", "out_dim", ")", ")", "\n", "self", ".", "_op", "=", "GIN_mix", "(", "nn1", ")", "\n", "", "if", "aggregator", "in", "[", "'gat_sym'", ",", "'cos'", ",", "'linear'", ",", "'generalized_linear'", "]", ":", "\n", "      ", "heads", "=", "2", "\n", "out_dim", "/=", "heads", "\n", "self", ".", "_op", "=", "Geolayer_mix", "(", "in_dim", ",", "int", "(", "out_dim", ")", ",", "heads", "=", "heads", ",", "att_type", "=", "aggregator", ",", "dropout", "=", "0.5", ")", "\n", "", "if", "aggregator", "in", "[", "'sum'", ",", "'max'", "]", ":", "\n", "      ", "self", ".", "_op", "=", "Geolayer_mix", "(", "in_dim", ",", "out_dim", ",", "att_type", "=", "'const'", ",", "agg_type", "=", "aggregator", ",", "dropout", "=", "0.5", ")", "\n", "", "if", "aggregator", "in", "[", "'geniepath'", "]", ":", "\n", "      ", "self", ".", "_op", "=", "GeniePathLayer", "(", "in_dim", ",", "out_dim", ")", "\n", "", "if", "aggregator", "==", "'sgc'", ":", "\n", "        ", "self", ".", "_op", "=", "SGConv", "(", "in_dim", ",", "out_dim", ")", "\n", "", "if", "'graphconv'", "in", "aggregator", ":", "\n", "      ", "aggr", "=", "aggregator", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "\n", "self", ".", "_op", "=", "GraphConv", "(", "in_dim", ",", "out_dim", ",", "aggr", "=", "aggr", ")", "\n", "", "if", "aggregator", "==", "'leconv'", ":", "\n", "        ", "self", ".", "_op", "=", "LEConv", "(", "in_dim", ",", "out_dim", ")", "\n", "", "if", "aggregator", "==", "'mlp'", ":", "\n", "      ", "self", ".", "_op", "=", "Sequential", "(", "Linear", "(", "in_dim", ",", "out_dim", ")", ",", "ELU", "(", ")", ",", "Linear", "(", "out_dim", ",", "out_dim", ")", ")", "\n", "", "", "def", "reset_params", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.NaAggregator.reset_params": [[110, 115], ["torch_geometric.nn.inits.reset", "op_graph_classification.NaAggregator._op.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.utils.AvgrageMeter.reset", "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters"], ["", "", "def", "reset_params", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "aggregator", "==", "'mlp'", ":", "\n", "      ", "reset", "(", "self", ".", "_op", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "_op", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.NaAggregator.forward": [[116, 121], ["op_graph_classification.NaAggregator._op", "op_graph_classification.NaAggregator._op"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", "=", "None", ")", ":", "\n", "    ", "if", "self", ".", "aggregator", "==", "'mlp'", ":", "\n", "      ", "return", "self", ".", "_op", "(", "x", ")", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "_op", "(", "x", ",", "edge_index", ",", "edge_weight", "=", "edge_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.LaAggregator.__init__": [[125, 134], ["torch.Module.__init__", "torch_geometric.nn.JumpingKnowledge", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["  ", "def", "__init__", "(", "self", ",", "mode", ",", "hidden_size", ",", "num_layers", "=", "3", ")", ":", "\n", "    ", "super", "(", "LaAggregator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "if", "self", ".", "mode", "in", "[", "'lstm'", ",", "'max'", ",", "'cat'", "]", ":", "\n", "      ", "self", ".", "jump", "=", "JumpingKnowledge", "(", "mode", ",", "channels", "=", "hidden_size", ",", "num_layers", "=", "num_layers", ")", "\n", "", "if", "mode", "==", "'cat'", ":", "\n", "        ", "self", ".", "lin", "=", "Linear", "(", "hidden_size", "*", "num_layers", ",", "hidden_size", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "lin", "=", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "", "", "def", "reset_params", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.LaAggregator.reset_params": [[134, 136], ["op_graph_classification.LaAggregator.lin.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters"], ["", "", "def", "reset_params", "(", "self", ")", ":", "\n", "    ", "self", ".", "lin", ".", "reset_parameters", "(", ")", "\n", "", "def", "forward", "(", "self", ",", "xs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.LaAggregator.forward": [[136, 143], ["op_graph_classification.LaAggregator.lin", "torch.elu", "torch.elu", "torch.elu", "op_graph_classification.LaAggregator.lin", "op_graph_classification.LaAggregator.jump", "torch.elu", "torch.elu", "torch.elu", "op_graph_classification.LaAggregator.lin", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.stack().sum", "torch.elu", "torch.elu", "torch.elu", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xs", ")", ":", "\n", "    ", "if", "self", ".", "mode", "in", "[", "'lstm'", ",", "'max'", ",", "'cat'", "]", ":", "\n", "      ", "return", "self", ".", "lin", "(", "F", ".", "elu", "(", "self", ".", "jump", "(", "xs", ")", ")", ")", "\n", "", "elif", "self", ".", "mode", "==", "'sum'", ":", "\n", "      ", "return", "self", ".", "lin", "(", "F", ".", "elu", "(", "torch", ".", "stack", "(", "xs", ",", "dim", "=", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", ")", "\n", "", "elif", "self", ".", "mode", "==", "'mean'", ":", "\n", "      ", "return", "self", ".", "lin", "(", "F", ".", "elu", "(", "torch", ".", "stack", "(", "xs", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Readout_func.__init__": [[145, 178], ["torch.Module.__init__", "torch_geometric.nn.GlobalAttention", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch_geometric.nn.Set2Set", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["  ", "def", "__init__", "(", "self", ",", "readout_op", ",", "hidden", ")", ":", "\n", "\n", "    ", "super", "(", "Readout_func", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "readout_op", "=", "readout_op", "\n", "\n", "if", "readout_op", "==", "'mean'", ":", "\n", "      ", "self", ".", "readout", "=", "global_mean_pool", "\n", "\n", "", "elif", "readout_op", "==", "'max'", ":", "\n", "      ", "self", ".", "readout", "=", "global_max_pool", "\n", "\n", "", "elif", "readout_op", "==", "'add'", ":", "\n", "      ", "self", ".", "readout", "=", "global_add_pool", "\n", "\n", "", "elif", "readout_op", "==", "'att'", ":", "\n", "      ", "self", ".", "readout", "=", "GlobalAttention", "(", "Linear", "(", "hidden", ",", "1", ")", ")", "\n", "\n", "", "elif", "readout_op", "==", "'set2set'", ":", "\n", "      ", "processing_steps", "=", "2", "\n", "self", ".", "readout", "=", "Set2Set", "(", "hidden", ",", "processing_steps", "=", "processing_steps", ")", "\n", "self", ".", "s2s_lin", "=", "Linear", "(", "hidden", "*", "processing_steps", ",", "hidden", ")", "\n", "\n", "\n", "", "elif", "readout_op", "==", "'sort'", ":", "\n", "      ", "self", ".", "readout", "=", "global_sort_pool", "\n", "self", ".", "k", "=", "10", "\n", "self", ".", "sort_conv", "=", "Conv1d", "(", "hidden", ",", "hidden", ",", "5", ")", "#kernel size 3, output size: hidden,", "\n", "self", ".", "sort_lin", "=", "Linear", "(", "hidden", "*", "(", "self", ".", "k", "-", "5", "+", "1", ")", ",", "hidden", ")", "\n", "", "elif", "readout_op", "==", "'mema'", ":", "\n", "      ", "self", ".", "readout", "=", "global_mean_pool", "\n", "self", ".", "lin", "=", "Linear", "(", "hidden", "*", "2", ",", "hidden", ")", "\n", "", "elif", "readout_op", "==", "'none'", ":", "\n", "      ", "self", ".", "readout", "=", "global_mean_pool", "\n", "# elif self.readout_op == 'mlp':", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Readout_func.reset_params": [[180, 190], ["op_graph_classification.Readout_func.sort_conv.reset_parameters", "op_graph_classification.Readout_func.sort_lin.reset_parameters", "op_graph_classification.Readout_func.readout.reset_parameters", "op_graph_classification.Readout_func.s2s_lin.reset_parameters", "op_graph_classification.Readout_func.lin.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters", "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters", "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters", "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters", "home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters"], ["", "", "def", "reset_params", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "readout_op", "==", "'sort'", ":", "\n", "      ", "self", ".", "sort_conv", ".", "reset_parameters", "(", ")", "\n", "self", ".", "sort_lin", ".", "reset_parameters", "(", ")", "\n", "", "if", "self", ".", "readout_op", "in", "[", "'set2set'", ",", "'att'", "]", ":", "\n", "      ", "self", ".", "readout", ".", "reset_parameters", "(", ")", "\n", "", "if", "self", ".", "readout_op", "==", "'set2set'", ":", "\n", "      ", "self", ".", "s2s_lin", ".", "reset_parameters", "(", ")", "\n", "", "if", "self", ".", "readout_op", "==", "'mema'", ":", "\n", "      ", "self", ".", "lin", ".", "reset_parameters", "(", ")", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "batch", ",", "mask", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Readout_func.forward": [[190, 214], ["op_graph_classification.Readout_func.readout", "op_graph_classification.Readout_func.mul", "op_graph_classification.Readout_func.readout", "op_graph_classification.Readout_func.view().permute", "torch.elu", "torch.elu", "torch.elu", "op_graph_classification.Readout_func.view", "op_graph_classification.Readout_func.sort_lin", "op_graph_classification.Readout_func.sort_conv", "len", "torch_geometric.nn.global_mean_pool", "torch_geometric.nn.global_max_pool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "op_graph_classification.Readout_func.lin", "op_graph_classification.Readout_func.readout", "op_graph_classification.Readout_func.view", "op_graph_classification.Readout_func.s2s_lin", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "batch", ",", "mask", ")", ":", "\n", "#sparse data", "\n", "    ", "if", "self", ".", "readout_op", "==", "'none'", ":", "\n", "      ", "x", "=", "self", ".", "readout", "(", "x", ",", "batch", ")", "\n", "return", "x", ".", "mul", "(", "0.", ")", "\n", "# return None", "\n", "", "elif", "self", ".", "readout_op", "==", "'sort'", ":", "\n", "      ", "x", "=", "self", ".", "readout", "(", "x", ",", "batch", ",", "self", ".", "k", ")", "\n", "x", "=", "x", ".", "view", "(", "len", "(", "x", ")", ",", "self", ".", "k", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "F", ".", "elu", "(", "self", ".", "sort_conv", "(", "x", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "len", "(", "x", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "sort_lin", "(", "x", ")", "\n", "return", "x", "\n", "", "elif", "self", ".", "readout_op", "==", "'mema'", ":", "\n", "      ", "x1", "=", "global_mean_pool", "(", "x", ",", "batch", ")", "\n", "x2", "=", "global_max_pool", "(", "x", ",", "batch", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", "]", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "self", ".", "lin", "(", "x", ")", "\n", "return", "x", "\n", "", "else", ":", "\n", "      ", "x", "=", "self", ".", "readout", "(", "x", ",", "batch", ")", "\n", "if", "self", ".", "readout_op", "==", "'set2set'", ":", "\n", "        ", "x", "=", "self", ".", "s2s_lin", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Pooling_func.__init__": [[218, 241], ["torch.Module.__init__", "pooling_zoo.SAGPool_mix", "pooling_zoo.SAGPool_mix", "pooling_zoo.SAGPool_mix", "int", "pooling_zoo.Hoppooling_mix", "pooling_zoo.Gappool_Mixed", "op.split", "pooling_zoo.TOPKpooling_mix", "pooling_zoo.ASAPooling_mix"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["  ", "def", "__init__", "(", "self", ",", "hidden", ",", "ratio", ",", "op", ",", "dropout", "=", "0.6", ",", "num_nodes", "=", "0", ")", ":", "\n", "    ", "super", "(", "Pooling_func", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "op", "=", "op", "\n", "self", ".", "max_num_nodes", "=", "num_nodes", "\n", "if", "op", "==", "'sagpool'", ":", "\n", "      ", "self", ".", "_op", "=", "SAGPool_mix", "(", "hidden", ",", "ratio", "=", "ratio", ",", "gnn_type", "=", "'gcn'", ")", "\n", "", "elif", "op", "==", "'mlppool'", ":", "\n", "      ", "self", ".", "_op", "=", "SAGPool_mix", "(", "hidden", ",", "ratio", "=", "ratio", ",", "gnn_type", "=", "'mlp'", ")", "\n", "", "elif", "op", "==", "'graphconv'", ":", "\n", "      ", "self", ".", "_op", "=", "SAGPool_mix", "(", "hidden", ",", "ratio", "=", "ratio", ",", "gnn_type", "=", "'graphconv'", ")", "\n", "\n", "", "elif", "'hop'", "in", "op", ":", "\n", "      ", "hop_num", "=", "int", "(", "op", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "self", ".", "_op", "=", "Hoppooling_mix", "(", "hidden", ",", "ratio", "=", "ratio", ",", "walk_length", "=", "hop_num", ")", "\n", "", "elif", "op", "==", "'gappool'", ":", "\n", "      ", "self", ".", "_op", "=", "Gappool_Mixed", "(", "hidden", ",", "ratio", "=", "ratio", ")", "\n", "", "elif", "op", "==", "'topkpool'", ":", "\n", "# self._op = TopKPooling(hidden, ratio)", "\n", "      ", "self", ".", "_op", "=", "TOPKpooling_mix", "(", "hidden", ",", "ratio", "=", "ratio", ")", "\n", "\n", "", "elif", "op", "==", "'asappool'", ":", "\n", "# self._op = ASAPooling(hidden, ratio, dropout=dropout)", "\n", "      ", "self", ".", "_op", "=", "ASAPooling_mix", "(", "hidden", ",", "ratio", "=", "ratio", ",", "dropout", "=", "dropout", ")", "\n", "", "", "def", "reset_params", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Pooling_func.reset_params": [[241, 244], ["op_graph_classification.Pooling_func._op.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.pooling_zoo.Gappool_Mixed.reset_parameters"], ["", "", "def", "reset_params", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "op", "!=", "'none'", ":", "\n", "      ", "self", ".", "_op", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.op_graph_classification.Pooling_func.forward": [[245, 254], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x.size", "op_graph_classification.Pooling_func._op", "x.get_device"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weights", ",", "data", ",", "batch", ",", "mask", ",", "ft", "=", "False", ")", ":", "\n", "    ", "if", "self", ".", "op", "==", "'none'", ":", "\n", "      ", "perm", "=", "torch", ".", "ones", "(", "x", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "x", ".", "get_device", "(", ")", ")", "\n", "return", "x", ",", "edge_index", ",", "edge_weights", ",", "batch", ",", "perm", "\n", "\n", "", "elif", "self", ".", "op", "in", "[", "'asappool'", ",", "'topkpool'", ",", "'sagpool'", ",", "'mlppool'", ",", "'hoppool_1'", ",", "'hoppool_2'", ",", "'hoppool_3'", ",", "'gappool'", ",", "'graphconv'", "]", ":", "\n", "# print('operations:', self.op)", "\n", "      ", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "perm", "=", "self", ".", "_op", "(", "x", "=", "x", ",", "edge_index", "=", "edge_index", ",", "edge_weight", "=", "edge_weights", ",", "batch", "=", "batch", ",", "ft", "=", "ft", ")", "\n", "return", "x", ",", "edge_index", ",", "edge_weight", ",", "batch", ",", "perm", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.MyDumper.increase_indent": [[14, 16], ["super().increase_indent"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.utils.MyDumper.increase_indent"], ["    ", "def", "increase_indent", "(", "self", ",", "flow", "=", "False", ",", "indentless", "=", "False", ")", ":", "\n", "        ", "return", "super", "(", "MyDumper", ",", "self", ")", ".", "increase_indent", "(", "flow", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.EVLocalAvg.__init__": [[19, 45], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "window", "=", "5", ",", "ev_freq", "=", "2", ",", "total_epochs", "=", "50", ")", ":", "\n", "        ", "\"\"\" Keep track of the eigenvalues local average.\n        Args:\n            window (int): number of elements used to compute local average.\n                Default: 5\n            ev_freq (int): frequency used to compute eigenvalues. Default:\n                every 2 epochs\n            total_epochs (int): total number of epochs that DARTS runs.\n                Default: 50\n        \"\"\"", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "ev_freq", "=", "ev_freq", "\n", "self", ".", "epochs", "=", "total_epochs", "\n", "\n", "self", ".", "stop_search", "=", "False", "\n", "self", ".", "stop_epoch", "=", "total_epochs", "-", "1", "\n", "self", ".", "stop_genotype", "=", "None", "\n", "\n", "self", ".", "ev", "=", "[", "]", "\n", "self", ".", "ev_local_avg", "=", "[", "]", "\n", "self", ".", "genotypes", "=", "{", "}", "\n", "self", ".", "la_epochs", "=", "{", "}", "\n", "\n", "# start and end index of the local average window", "\n", "self", ".", "la_start_idx", "=", "0", "\n", "self", ".", "la_end_idx", "=", "self", ".", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.EVLocalAvg.reset": [[46, 51], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "ev", "=", "[", "]", "\n", "self", ".", "ev_local_avg", "=", "[", "]", "\n", "self", ".", "genotypes", "=", "{", "}", "\n", "self", ".", "la_epochs", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.EVLocalAvg.update": [[52, 95], ["utils.EVLocalAvg.ev.append", "utils.EVLocalAvg.genotypes.update", "utils.EVLocalAvg.la_epochs.update", "len", "int", "len", "utils.EVLocalAvg.ev_local_avg.append", "utils.EVLocalAvg.ev_local_avg.append", "len", "int", "utils.EVLocalAvg.la_epochs.update", "numpy.ceil", "numpy.mean", "len", "numpy.mean", "int", "numpy.ceil", "range", "int", "utils.EVLocalAvg.ev_local_avg.append", "int", "numpy.ceil", "len", "numpy.mean", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.update"], ["", "def", "update", "(", "self", ",", "epoch", ",", "ev", ",", "genotype", ")", ":", "\n", "        ", "\"\"\" Method to update the local average list.\n        Args:\n            epoch (int): current epoch\n            ev (float): current dominant eigenvalue\n            genotype (namedtuple): current genotype\n        \"\"\"", "\n", "self", ".", "ev", ".", "append", "(", "ev", ")", "\n", "self", ".", "genotypes", ".", "update", "(", "{", "epoch", ":", "genotype", "}", ")", "\n", "# set the stop_genotype to the current genotype in case the early stop", "\n", "# procedure decides not to early stop", "\n", "self", ".", "stop_genotype", "=", "genotype", "\n", "\n", "# since the local average computation starts after the dominant", "\n", "# eigenvalue in the first epoch is already computed we have to wait", "\n", "# at least until we have 3 eigenvalues in the list.", "\n", "if", "(", "len", "(", "self", ".", "ev", ")", ">=", "int", "(", "np", ".", "ceil", "(", "self", ".", "window", "/", "2", ")", ")", ")", "and", "(", "epoch", "<", "self", ".", "epochs", "-", "1", ")", ":", "\n", "# start sliding the window as soon as the number of eigenvalues in", "\n", "# the list becomes equal to the window size", "\n", "            ", "if", "len", "(", "self", ".", "ev", ")", "<", "self", ".", "window", ":", "\n", "                ", "self", ".", "ev_local_avg", ".", "append", "(", "np", ".", "mean", "(", "self", ".", "ev", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "len", "(", "self", ".", "ev", "[", "self", ".", "la_start_idx", ":", "self", ".", "la_end_idx", "]", ")", "==", "self", ".", "window", "\n", "self", ".", "ev_local_avg", ".", "append", "(", "np", ".", "mean", "(", "self", ".", "ev", "[", "self", ".", "la_start_idx", ":", "self", ".", "la_end_idx", "]", ")", ")", "\n", "self", ".", "la_start_idx", "+=", "1", "\n", "self", ".", "la_end_idx", "+=", "1", "\n", "\n", "# keep track of the offset between the current epoch and the epoch", "\n", "# corresponding to the local average. NOTE: in the end the size of", "\n", "# self.ev and self.ev_local_avg should be equal", "\n", "", "self", ".", "la_epochs", ".", "update", "(", "{", "epoch", ":", "int", "(", "epoch", "-", "int", "(", "self", ".", "ev_freq", "*", "np", ".", "floor", "(", "self", ".", "window", "/", "2", ")", ")", ")", "}", ")", "\n", "\n", "", "elif", "len", "(", "self", ".", "ev", ")", "<", "int", "(", "np", ".", "ceil", "(", "self", ".", "window", "/", "2", ")", ")", ":", "\n", "            ", "self", ".", "la_epochs", ".", "update", "(", "{", "epoch", ":", "-", "1", "}", ")", "\n", "\n", "# since there is an offset between the current epoch and the local", "\n", "# average epoch, loop in the last epoch to compute the local average of", "\n", "# these number of elements: window, window - 1, window - 2, ..., ceil(window/2)", "\n", "", "elif", "epoch", "==", "self", ".", "epochs", "-", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "int", "(", "np", ".", "ceil", "(", "self", ".", "window", "/", "2", ")", ")", ")", ":", "\n", "                ", "assert", "len", "(", "self", ".", "ev", "[", "self", ".", "la_start_idx", ":", "self", ".", "la_end_idx", "]", ")", "==", "self", ".", "window", "-", "i", "\n", "self", ".", "ev_local_avg", ".", "append", "(", "np", ".", "mean", "(", "self", ".", "ev", "[", "self", ".", "la_start_idx", ":", "self", ".", "la_end_idx", "+", "1", "]", ")", ")", "\n", "self", ".", "la_start_idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.EVLocalAvg.early_stop": [[96, 119], ["int", "int"], "methods", ["None"], ["", "", "", "def", "early_stop", "(", "self", ",", "epoch", ",", "factor", "=", "1.18", ",", "es_start_epoch", "=", "10", ",", "delta", "=", "4", ")", ":", "\n", "        ", "\"\"\" Early stopping criterion\n        Args:\n            epoch (int): current epoch\n            factor (float): threshold factor for the ration between the current\n                and prefious eigenvalue. Default: 1.3\n            es_start_epoch (int): until this epoch do not consider early\n                stopping. Default: 20\n            delta (int): factor influencing which previous local average we\n                consider for early stopping. Default: 2\n        \"\"\"", "\n", "if", "int", "(", "self", ".", "la_epochs", "[", "epoch", "]", "-", "self", ".", "ev_freq", "*", "delta", ")", ">=", "es_start_epoch", ":", "\n", "# the current local average corresponds to ", "\n", "# epoch - int(self.ev_freq*np.floor(self.window/2))", "\n", "            ", "current_la", "=", "self", ".", "ev_local_avg", "[", "-", "1", "]", "\n", "# by default take the local average corresponding to epoch", "\n", "# delta*self.ev_freq", "\n", "previous_la", "=", "self", ".", "ev_local_avg", "[", "-", "1", "-", "delta", "]", "\n", "\n", "self", ".", "stop_search", "=", "current_la", "/", "previous_la", ">", "factor", "\n", "if", "self", ".", "stop_search", ":", "\n", "                ", "self", ".", "stop_epoch", "=", "int", "(", "self", ".", "la_epochs", "[", "epoch", "]", "-", "self", ".", "ev_freq", "*", "delta", ")", "\n", "self", ".", "stop_genotype", "=", "self", ".", "genotypes", "[", "self", ".", "stop_epoch", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.AvgrageMeter.__init__": [[122, 124], ["utils.AvgrageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.utils.AvgrageMeter.reset"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.AvgrageMeter.reset": [[125, 129], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.AvgrageMeter.update": [[130, 134], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "cnt", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.Cutout.__init__": [[159, 161], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.Cutout.__call__": [[162, 178], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.accuracy_origin": [[135, 149], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy_origin", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "\n", "  ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "    ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.accuracy": [[150, 158], ["sklearn.metrics.f1_score", "res.append", "res.append"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "\n", "    ", "f1_res", "=", "f1_score", "(", "output", ",", "target", ",", "average", "=", "'micro'", ")", "\n", "#cal_f1", "\n", "res", "=", "[", "]", "\n", "res", ".", "append", "(", "f1_res", ")", "\n", "res", ".", "append", "(", "f1_res", ")", "\n", "return", "res", "\n", "", "class", "Cutout", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils._data_transforms_cifar10": [[179, 197], ["torchvision.Compose", "torchvision.Compose", "transforms.Compose.transforms.append", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "utils.Cutout", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "_data_transforms_cifar10", "(", "args", ")", ":", "\n", "  ", "CIFAR_MEAN", "=", "[", "0.49139968", ",", "0.48215827", ",", "0.44653124", "]", "\n", "CIFAR_STD", "=", "[", "0.24703233", ",", "0.24348505", ",", "0.26158768", "]", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "if", "args", ".", "cutout", ":", "\n", "    ", "train_transform", ".", "transforms", ".", "append", "(", "Cutout", "(", "args", ".", "cutout_length", ")", ")", "\n", "\n", "", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "CIFAR_MEAN", ",", "CIFAR_STD", ")", ",", "\n", "]", ")", "\n", "return", "train_transform", ",", "valid_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.count_parameters_in_MB": [[198, 200], ["numpy.sum", "numpy.prod", "v.size", "model.named_parameters"], "function", ["None"], ["", "def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "  ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "name", ",", "v", "in", "model", ".", "named_parameters", "(", ")", "if", "\"auxiliary\"", "not", "in", "name", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.save_checkpoint": [[201, 209], ["os.path.join", "os.path.join", "torch.save", "os.path.join", "os.path.join", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.utils.save"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "save", ",", "epoch", ",", "task_id", ")", ":", "\n", "    ", "filename", "=", "\"checkpoint_{}_{}.pth.tar\"", ".", "format", "(", "task_id", ",", "epoch", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "filename", ")", "\n", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "best_filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "'model_best.pth.tar'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.load_checkpoint": [[210, 229], ["os.path.join", "os.path.join", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "architect.optimizer.load_state_dict"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.utils.load"], ["", "", "def", "load_checkpoint", "(", "model", ",", "optimizer", ",", "architect", ",", "save", ",", "la_tracker", ",", "epoch", ",", "task_id", ")", ":", "\n", "    ", "filename", "=", "\"checkpoint_{}_{}.pth.tar\"", ".", "format", "(", "task_id", ",", "epoch", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "save", ",", "filename", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "model", ".", "alphas_normal", ".", "data", "=", "checkpoint", "[", "'alphas_normal'", "]", "\n", "model", ".", "alphas_reduce", ".", "data", "=", "checkpoint", "[", "'alphas_reduce'", "]", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "architect", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'arch_optimizer'", "]", ")", "\n", "la_tracker", ".", "ev", "=", "checkpoint", "[", "'ev'", "]", "\n", "la_tracker", ".", "ev_local_avg", "=", "checkpoint", "[", "'ev_local_avg'", "]", "\n", "la_tracker", ".", "genotypes", "=", "checkpoint", "[", "'genotypes'", "]", "\n", "la_tracker", ".", "la_epochs", "=", "checkpoint", "[", "'la_epochs'", "]", "\n", "la_tracker", ".", "la_start_idx", "=", "checkpoint", "[", "'la_start_idx'", "]", "\n", "la_tracker", ".", "la_end_idx", "=", "checkpoint", "[", "'la_end_idx'", "]", "\n", "lr", "=", "checkpoint", "[", "'lr'", "]", "\n", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.save": [[230, 232], ["torch.save", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.utils.save"], ["", "def", "save", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.load": [[233, 235], ["model.load_state_dict", "torch.load"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.utils.load"], ["", "def", "load", "(", "model", ",", "model_path", ")", ":", "\n", "  ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.drop_path": [[236, 243], ["torch.autograd.Variable", "x.div_", "x.mul_", "torch.cuda.FloatTensor().bernoulli_", "torch.cuda.FloatTensor", "x.size"], "function", ["None"], ["", "def", "drop_path", "(", "x", ",", "drop_prob", ")", ":", "\n", "  ", "if", "drop_prob", ">", "0.", ":", "\n", "    ", "keep_prob", "=", "1.", "-", "drop_prob", "\n", "mask", "=", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "bernoulli_", "(", "keep_prob", ")", ")", "\n", "x", ".", "div_", "(", "keep_prob", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.create_exp_dir": [[244, 254], ["print", "os.path.exists", "os.path.exists", "os.mkdir", "os.mkdir", "os.mkdir", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "shutil.copyfile", "os.path.basename", "os.path.basename"], "function", ["None"], ["", "def", "create_exp_dir", "(", "path", ",", "scripts_to_save", "=", "None", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "    ", "os", ".", "mkdir", "(", "path", ")", "\n", "", "print", "(", "'Experiment dir : {}'", ".", "format", "(", "path", ")", ")", "\n", "\n", "if", "scripts_to_save", "is", "not", "None", ":", "\n", "    ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ")", ")", "\n", "for", "script", "in", "scripts_to_save", ":", "\n", "      ", "dst_file", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'scripts'", ",", "os", ".", "path", ".", "basename", "(", "script", ")", ")", "\n", "shutil", ".", "copyfile", "(", "script", ",", "dst_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.index_to_mask": [[255, 259], ["torch.zeros"], "function", ["None"], ["", "", "", "def", "index_to_mask", "(", "index", ",", "size", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "zeros", "(", "size", ",", "dtype", "=", "torch", ".", "bool", ",", "device", "=", "index", ".", "device", ")", "\n", "mask", "[", "index", "]", "=", "1", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.gen_uniform_60_20_20_split": [[260, 264], ["sklearn.model_selection.StratifiedKFold", "torch.from_numpy", "torch.cat", "torch.cat", "torch.cat", "sklearn.model_selection.StratifiedKFold.split"], "function", ["None"], ["", "def", "gen_uniform_60_20_20_split", "(", "data", ")", ":", "\n", "    ", "skf", "=", "StratifiedKFold", "(", "5", ",", "shuffle", "=", "True", ",", "random_state", "=", "12345", ")", "\n", "idx", "=", "[", "torch", ".", "from_numpy", "(", "i", ")", "for", "_", ",", "i", "in", "skf", ".", "split", "(", "data", ".", "y", ",", "data", ".", "y", ")", "]", "\n", "return", "cat", "(", "idx", "[", ":", "3", "]", ",", "0", ")", ",", "cat", "(", "idx", "[", "3", ":", "4", "]", ",", "0", ")", ",", "cat", "(", "idx", "[", "4", ":", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.save_load_split": [[265, 280], ["gen_splits", "utils.index_to_mask", "utils.index_to_mask", "utils.index_to_mask"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.utils.index_to_mask", "home.repos.pwc.inspect_result.automl-research_pas.None.utils.index_to_mask", "home.repos.pwc.inspect_result.automl-research_pas.None.utils.index_to_mask"], ["", "def", "save_load_split", "(", "data", ",", "raw_dir", ",", "run", ",", "gen_splits", ")", ":", "\n", "    ", "prefix", "=", "gen_splits", ".", "__name__", "[", "4", ":", "-", "6", "]", "\n", "# path = osp.join(raw_dir, '..', '{}_{:03d}.pt'.format(prefix, run))", "\n", "#", "\n", "# if osp.exists(path):", "\n", "#     split = torch.load(path)", "\n", "# else:", "\n", "#     split = gen_splits(data)", "\n", "#     torch.save(split, path)", "\n", "split", "=", "gen_splits", "(", "data", ")", "\n", "data", ".", "train_mask", "=", "index_to_mask", "(", "split", "[", "0", "]", ",", "data", ".", "num_nodes", ")", "\n", "data", ".", "val_mask", "=", "index_to_mask", "(", "split", "[", "1", "]", ",", "data", ".", "num_nodes", ")", "\n", "data", ".", "test_mask", "=", "index_to_mask", "(", "split", "[", "2", "]", ",", "data", ".", "num_nodes", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.write_yaml_results_eval": [[281, 316], ["os.path.join", "os.path.join", "str", "str", "open", "yaml.load", "yaml.load.keys", "yaml.load.update", "open", "yaml.dump", "result[].keys", "result[].update", "open", "yaml.dump", "[].append", "[].update"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.utils.load", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.update"], ["", "def", "write_yaml_results_eval", "(", "args", ",", "results_file", ",", "result_to_log", ")", ":", "\n", "  ", "setting", "=", "'_'", ".", "join", "(", "[", "args", ".", "space", ",", "args", ".", "data", "]", ")", "\n", "regularization", "=", "'_'", ".", "join", "(", "\n", "[", "str", "(", "args", ".", "search_dp", ")", ",", "str", "(", "args", ".", "search_wd", ")", "]", "\n", ")", "\n", "results_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "results_file", "+", "'.yaml'", ")", "\n", "\n", "try", ":", "\n", "    ", "with", "open", "(", "results_file", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "result", "=", "yaml", ".", "load", "(", "f", ")", "\n", "", "if", "setting", "in", "result", ".", "keys", "(", ")", ":", "\n", "      ", "if", "regularization", "in", "result", "[", "setting", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "args", ".", "search_task_id", "in", "result", "[", "setting", "]", "[", "regularization", "]", ":", "\n", "          ", "result", "[", "setting", "]", "[", "regularization", "]", "[", "args", ".", "search_task_id", "]", ".", "append", "(", "result_to_log", ")", "\n", "", "else", ":", "\n", "          ", "result", "[", "setting", "]", "[", "regularization", "]", ".", "update", "(", "{", "args", ".", "search_task_id", ":", "\n", "[", "result_to_log", "]", "}", ")", "\n", "", "", "else", ":", "\n", "        ", "result", "[", "setting", "]", ".", "update", "(", "{", "regularization", ":", "{", "args", ".", "search_task_id", ":", "\n", "[", "result_to_log", "]", "}", "}", ")", "\n", "", "", "else", ":", "\n", "      ", "result", ".", "update", "(", "{", "setting", ":", "{", "regularization", ":", "{", "args", ".", "search_task_id", ":", "\n", "[", "result_to_log", "]", "}", "}", "}", ")", "\n", "", "with", "open", "(", "results_file", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "yaml", ".", "dump", "(", "result", ",", "f", ",", "Dumper", "=", "MyDumper", ",", "default_flow_style", "=", "False", ")", "\n", "", "", "except", "(", "AttributeError", ",", "FileNotFoundError", ")", "as", "e", ":", "\n", "    ", "result", "=", "{", "\n", "setting", ":", "{", "\n", "regularization", ":", "{", "\n", "args", ".", "search_task_id", ":", "[", "result_to_log", "]", "\n", "}", "\n", "}", "\n", "}", "\n", "with", "open", "(", "results_file", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "yaml", ".", "dump", "(", "result", ",", "f", ",", "Dumper", "=", "MyDumper", ",", "default_flow_style", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.utils.write_yaml_results": [[317, 346], ["os.path.join", "os.path.join", "str", "str", "open", "yaml.load", "yaml.load.keys", "yaml.load.update", "open", "yaml.dump", "result[].keys", "[].update", "result[].update", "open", "yaml.dump"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.utils.load", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.update"], ["", "", "", "def", "write_yaml_results", "(", "args", ",", "results_file", ",", "result_to_log", ")", ":", "\n", "  ", "setting", "=", "'_'", ".", "join", "(", "[", "args", ".", "space", ",", "args", ".", "data", "]", ")", "\n", "regularization", "=", "'_'", ".", "join", "(", "\n", "[", "str", "(", "args", ".", "drop_path_prob", ")", ",", "str", "(", "args", ".", "weight_decay", ")", "]", "\n", ")", "\n", "results_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save", ",", "results_file", "+", "'.yaml'", ")", "\n", "\n", "try", ":", "\n", "    ", "with", "open", "(", "results_file", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "result", "=", "yaml", ".", "load", "(", "f", ")", "\n", "", "if", "setting", "in", "result", ".", "keys", "(", ")", ":", "\n", "      ", "if", "regularization", "in", "result", "[", "setting", "]", ".", "keys", "(", ")", ":", "\n", "        ", "result", "[", "setting", "]", "[", "regularization", "]", ".", "update", "(", "{", "args", ".", "task_id", ":", "result_to_log", "}", ")", "\n", "", "else", ":", "\n", "        ", "result", "[", "setting", "]", ".", "update", "(", "{", "regularization", ":", "{", "args", ".", "task_id", ":", "result_to_log", "}", "}", ")", "\n", "", "", "else", ":", "\n", "      ", "result", ".", "update", "(", "{", "setting", ":", "{", "regularization", ":", "{", "args", ".", "task_id", ":", "result_to_log", "}", "}", "}", ")", "\n", "", "with", "open", "(", "results_file", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "yaml", ".", "dump", "(", "result", ",", "f", ",", "Dumper", "=", "MyDumper", ",", "default_flow_style", "=", "False", ")", "\n", "", "", "except", "(", "AttributeError", ",", "FileNotFoundError", ")", "as", "e", ":", "\n", "    ", "result", "=", "{", "\n", "setting", ":", "{", "\n", "regularization", ":", "{", "\n", "args", ".", "task_id", ":", "result_to_log", "\n", "}", "\n", "}", "\n", "}", "\n", "with", "open", "(", "results_file", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "yaml", ".", "dump", "(", "result", ",", "f", ",", "Dumper", "=", "MyDumper", ",", "default_flow_style", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.train4tune.main": [[30, 223], ["time.strftime", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "model.NetworkGNN", "model.cuda.cuda", "logging.info", "print", "os.path.exists", "os.mkdir", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "logging.info", "sys.exit", "dataset.load_data", "utils.count_parameters_in_MB", "utils.count_parameters_in_MB", "enumerate", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view.max", "print", "train4tune.main.get_optimizer"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.dataset.load_data", "home.repos.pwc.inspect_result.automl-research_pas.None.utils.count_parameters_in_MB", "home.repos.pwc.inspect_result.automl-research_pas.None.utils.count_parameters_in_MB"], ["def", "main", "(", "exp_args", ")", ":", "\n", "    ", "global", "train_args", "\n", "train_args", "=", "exp_args", "\n", "\n", "tune_str", "=", "time", ".", "strftime", "(", "'%Y%m%d-%H%M%S'", ")", "\n", "train_args", ".", "save", "=", "'logs/tune-{}-{}'", ".", "format", "(", "train_args", ".", "data", ",", "tune_str", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "train_args", ".", "save", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "train_args", ".", "save", ")", "\n", "\n", "", "global", "device", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'no gpu device available'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "\n", "\n", "#np.random.seed(train_args.seed)", "\n", "", "torch", ".", "cuda", ".", "set_device", "(", "train_args", ".", "gpu", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "torch", ".", "manual_seed", "(", "train_args", ".", "seed", ")", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "train_args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "train_args", ".", "seed", ")", "\n", "# np.random.seed(train_args.seed)", "\n", "# torch.backends.cudnn.deterministic = True", "\n", "\n", "num_features", "=", "num_classes", "=", "0", "\n", "# if train_args.data == 'Amazon_Computers':", "\n", "#     data = Amazon('../data/AmazonComputers', 'Computers')", "\n", "# elif train_args.data == 'Amazon_Photo':", "\n", "#     data = Amazon('../data/AmazonPhoto', 'Photo')", "\n", "# elif train_args.data == 'Coauthor_Physics':", "\n", "#     data = Coauthor('../data/CoauthorPhysics', 'Physics')", "\n", "#", "\n", "# elif train_args.data == 'Coauthor_CS':", "\n", "#     data = Coauthor('../data/CoauthorCS', 'CS')", "\n", "#", "\n", "# elif train_args.data == 'Cora_Full':", "\n", "#     dataset = CoraFull('../data/Cora_Full')", "\n", "# elif train_args.data == 'PubMed':", "\n", "#     data = Planetoid('../data/', 'PubMed')", "\n", "# elif train_args.data == 'Cora':", "\n", "#     data = Planetoid('../data/', 'Cora')", "\n", "# elif train_args.data == 'CiteSeer':", "\n", "#     data = Planetoid('../data/', 'CiteSeer')", "\n", "# elif train_args.data == 'PPI':", "\n", "#     train_dataset = PPI('../data/PPI', split='train')", "\n", "#     val_dataset = PPI('../data/PPI', split='val')", "\n", "#     test_dataset = PPI('../data/PPI', split='test')", "\n", "#     num_features = train_dataset.num_features", "\n", "#     num_classes = train_dataset.num_classes", "\n", "#     ppi_train_loader = DataLoader(train_dataset, batch_size=1, shuffle=True)", "\n", "#     ppi_val_loader = DataLoader(val_dataset, batch_size=2, shuffle=False)", "\n", "#     ppi_test_loader = DataLoader(test_dataset, batch_size=2, shuffle=False)", "\n", "#     print('load PPI done!')", "\n", "#     data = [ppi_train_loader, ppi_val_loader, ppi_test_loader]", "\n", "\n", "if", "train_args", ".", "data", "in", "train_args", ".", "graph_classification_dataset", ":", "\n", "        ", "data", ",", "num_nodes", "=", "load_data", "(", "train_args", ".", "data", ",", "batch_size", "=", "train_args", ".", "batch_size", ")", "\n", "num_features", "=", "data", "[", "0", "]", ".", "num_features", "\n", "num_classes", "=", "data", "[", "0", "]", ".", "num_classes", "\n", "if", "train_args", ".", "data", "==", "'COLORS-3'", ":", "\n", "            ", "num_classes", "=", "11", "\n", "", "", "hidden_size", "=", "train_args", ".", "hidden_size", "\n", "\n", "\n", "genotype", "=", "train_args", ".", "arch", "\n", "# if train_args.data == 'PPI':", "\n", "#     criterion = nn.BCEWithLogitsLoss()", "\n", "#     criterion = criterion.cuda()", "\n", "# else:", "\n", "criterion", "=", "F", ".", "nll_loss", "\n", "\n", "model", "=", "Network", "(", "genotype", ",", "criterion", ",", "num_features", ",", "num_classes", ",", "hidden_size", ",", "\n", "num_layers", "=", "train_args", ".", "num_layers", ",", "in_dropout", "=", "train_args", ".", "in_dropout", ",", "out_dropout", "=", "train_args", ".", "out_dropout", ",", "\n", "act", "=", "train_args", ".", "activation", ",", "args", "=", "exp_args", ",", "is_mlp", "=", "train_args", ".", "is_mlp", ",", "num_nodes", "=", "num_nodes", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\"genotype=%s, param size = %fMB, args=%s\"", ",", "genotype", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ",", "train_args", ".", "__dict__", ")", "\n", "print", "(", "'param size = %fMB'", ",", "utils", ".", "count_parameters_in_MB", "(", "model", ")", ")", "\n", "def", "get_optimizer", "(", ")", ":", "\n", "        ", "if", "train_args", ".", "optimizer", "==", "'adam'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "train_args", ".", "learning_rate", ",", "\n", "# momentum=train_args.momentum,", "\n", "weight_decay", "=", "train_args", ".", "weight_decay", "\n", ")", "\n", "", "elif", "train_args", ".", "optimizer", "==", "'sgd'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "train_args", ".", "learning_rate", ",", "\n", "momentum", "=", "train_args", ".", "momentum", ",", "\n", "weight_decay", "=", "train_args", ".", "weight_decay", "\n", ")", "\n", "", "elif", "train_args", ".", "optimizer", "==", "'adagrad'", ":", "\n", "            ", "optimizer", "=", "torch", ".", "optim", ".", "Adagrad", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "train_args", ".", "learning_rate", ",", "\n", "weight_decay", "=", "train_args", ".", "weight_decay", "\n", ")", "\n", "", "return", "optimizer", "\n", "# scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, float(train_args.epochs))", "\n", "", "if", "train_args", ".", "ft_mode", "==", "'10fold'", "and", "train_args", ".", "data", "in", "train_args", ".", "graph_classification_dataset", ":", "\n", "        ", "valid_losses", "=", "[", "]", "\n", "valid_accs", "=", "[", "]", "\n", "test_accs", "=", "[", "]", "\n", "\n", "folds", "=", "10", "\n", "for", "fold", ",", "data", "in", "enumerate", "(", "load_k_fold", "(", "data", "[", "0", "]", ",", "folds", ",", "train_args", ".", "batch_size", ")", ")", ":", "\n", "\n", "            ", "model", ".", "reset_params", "(", ")", "\n", "optimizer", "=", "get_optimizer", "(", ")", "\n", "if", "train_args", ".", "cos_lr", ":", "\n", "                ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "float", "(", "train_args", ".", "epochs", ")", ",", "eta_min", "=", "train_args", ".", "lr_min", ")", "\n", "", "print", "(", "'#####Fold={}, train/val/test:{},{},{}'", ".", "format", "(", "fold", ",", "len", "(", "data", "[", "4", "]", ".", "dataset", ")", ",", "len", "(", "data", "[", "5", "]", ".", "dataset", ")", ",", "len", "(", "data", "[", "5", "]", ".", "dataset", ")", ")", ")", "\n", "for", "epoch", "in", "range", "(", "train_args", ".", "epochs", ")", ":", "\n", "                ", "train_acc", ",", "train_obj", "=", "train_graph", "(", "data", ",", "model", ",", "criterion", ",", "optimizer", ")", "\n", "if", "train_args", ".", "cos_lr", ":", "\n", "                    ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "valid_acc", ",", "valid_obj", "=", "infer_graph", "(", "data", ",", "model", ",", "criterion", ")", "\n", "test_acc", ",", "test_obj", "=", "infer_graph", "(", "data", ",", "model", ",", "criterion", ",", "test", "=", "True", ")", "\n", "valid_accs", ".", "append", "(", "valid_acc", ")", "\n", "valid_losses", ".", "append", "(", "valid_obj", ")", "\n", "test_accs", ".", "append", "(", "test_acc", ")", "\n", "if", "epoch", "%", "10", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "'fold=%s,epoch=%s, lr=%s, train_obj=%s, train_acc=%f, valid_acc=%s'", ",", "fold", ",", "epoch", ",", "\n", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "if", "train_args", ".", "cos_lr", "else", "train_args", ".", "learning_rate", ",", "train_obj", ",", "train_acc", ",", "valid_acc", ")", "\n", "print", "(", "'fold={},epoch={}, lr={}, train_obj={:.08f}, train_acc={:.04f}, valid_loss={:.08f},valid_acc={:.04f},test_acc={:.04f}'", ".", "format", "(", "\n", "fold", ",", "epoch", ",", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "if", "train_args", ".", "cos_lr", "else", "train_args", ".", "learning_rate", ",", "\n", "train_obj", ",", "train_acc", ",", "valid_obj", ",", "valid_acc", ",", "test_acc", ")", ")", "\n", "\n", "", "if", "train_args", ".", "show_info", ":", "\n", "                    ", "print", "(", "'fold={},epoch={}, lr={}, train_obj={:.08f}, train_acc={:.04f}, valid_loss={:.08f},valid_acc={:.04f},test_acc={:.04f}'", ".", "format", "(", "\n", "fold", ",", "epoch", ",", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "if", "train_args", ".", "cos_lr", "else", "train_args", ".", "learning_rate", ",", "\n", "train_obj", ",", "train_acc", ",", "valid_obj", ",", "valid_acc", ",", "test_acc", ")", ")", "\n", "\n", "", "utils", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "train_args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "\n", "# valid_losses, valid_accs, test_accs = torch.tensor(valid_losses), torch.tensor(valid_accs), torch.tensor(test_accs)", "\n", "", "", "valid_losses", "=", "torch", ".", "tensor", "(", "valid_losses", ")", ".", "view", "(", "10", ",", "train_args", ".", "epochs", ")", "\n", "valid_accs", "=", "torch", ".", "tensor", "(", "valid_accs", ")", ".", "view", "(", "10", ",", "train_args", ".", "epochs", ")", "\n", "test_accs", "=", "torch", ".", "tensor", "(", "test_accs", ")", ".", "view", "(", "10", ",", "train_args", ".", "epochs", ")", "\n", "\n", "# min valid loss", "\n", "# valid_losses, argmin = valid_losses.min(dim=-1)", "\n", "# test_accs = test_accs[torch.arange(10, dtype=torch.long), argmin]", "\n", "# valid_accs = valid_accs[torch.arange(10, dtype=torch.long), argmin]", "\n", "# print('test_accs:', test_accs)", "\n", "\n", "# max_valid_acc", "\n", "valid_accs", ",", "argmax", "=", "valid_accs", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "valid_losses", "=", "valid_losses", "[", "torch", ".", "arange", "(", "10", ",", "dtype", "=", "torch", ".", "long", ")", ",", "argmax", "]", "\n", "test_accs", "=", "test_accs", "[", "torch", ".", "arange", "(", "10", ",", "dtype", "=", "torch", ".", "long", ")", ",", "argmax", "]", "\n", "print", "(", "'test_accs:'", ",", "test_accs", ")", "\n", "\n", "return", "valid_accs", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "test_accs", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "test_accs", ".", "std", "(", ")", ".", "item", "(", ")", ",", "train_args", "\n", "", "else", ":", "#811 split", "\n", "        ", "optimizer", "=", "get_optimizer", "(", ")", "\n", "model", ".", "reset_params", "(", ")", "\n", "min_valid_loss", "=", "float", "(", "\"inf\"", ")", "\n", "best_valid_acc", "=", "0", "\n", "best_test_acc", "=", "0", "\n", "\n", "if", "train_args", ".", "cos_lr", ":", "\n", "            ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "float", "(", "train_args", ".", "epochs", ")", ",", "eta_min", "=", "0.0001", ")", "\n", "", "for", "epoch", "in", "range", "(", "train_args", ".", "epochs", ")", ":", "\n", "            ", "train_acc", ",", "train_obj", "=", "train_graph", "(", "data", ",", "model", ",", "criterion", ",", "optimizer", ")", "\n", "\n", "if", "train_args", ".", "cos_lr", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "\n", "", "valid_acc", ",", "valid_obj", "=", "infer_graph", "(", "data", ",", "model", ",", "criterion", ")", "\n", "test_acc", ",", "test_obj", "=", "infer_graph", "(", "data", ",", "model", ",", "criterion", ",", "test", "=", "True", ")", "\n", "if", "valid_obj", "<", "min_valid_loss", ":", "\n", "                ", "min_valid_loss", "=", "valid_obj", "\n", "best_valid_acc", "=", "valid_acc", "\n", "best_test_acc", "=", "test_acc", "\n", "", "if", "epoch", "%", "10", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "'epoch=%s, lr=%s, train_obj=%s, train_acc=%f, valid_acc=%s'", ",", "\n", "epoch", ",", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "if", "train_args", ".", "cos_lr", "else", "train_args", ".", "learning_rate", ",", "\n", "train_obj", ",", "train_acc", ",", "valid_acc", ")", "\n", "", "if", "train_args", ".", "show_info", ":", "\n", "                ", "print", "(", "'epoch={}, lr={}, train_obj={:.08f}, train_acc={:.04f}, valid_loss={:.08f},valid_acc={:.04f},test_acc={:.04f}'", ".", "format", "(", "\n", "epoch", ",", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "if", "train_args", ".", "cos_lr", "else", "train_args", ".", "learning_rate", ",", "\n", "train_obj", ",", "train_acc", ",", "valid_obj", ",", "valid_acc", ",", "test_acc", ")", ")", "\n", "\n", "", "utils", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "train_args", ".", "save", ",", "'weights.pt'", ")", ")", "\n", "\n", "", "return", "best_valid_acc", ",", "best_test_acc", ",", "0", ",", "train_args", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.train4tune.train_graph": [[225, 250], ["model.train", "train_data.to.to", "model_optimizer.zero_grad", "model().to", "[].eq().sum().item", "criterion.item", "criterion.backward", "model_optimizer.step", "criterion", "criterion", "len", "len", "model", "[].eq().sum", "train_data.to.y.long", "train_data.to.y.view", "[].eq", "train_data.to.y.view", "model().to.max"], "function", ["home.repos.pwc.inspect_result.automl-research_pas.None.geniepath.train"], ["", "", "def", "train_graph", "(", "data", ",", "model", ",", "criterion", ",", "model_optimizer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "total_loss", "=", "0", "\n", "accuracy", "=", "0", "\n", "\n", "# data:[dataset, train_dataset, val_dataset, test_dataset, train_loader, val_loader, test_loader]", "\n", "for", "train_data", "in", "data", "[", "4", "]", ":", "\n", "\n", "        ", "train_data", "=", "train_data", ".", "to", "(", "device", ")", "\n", "model_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "output", "=", "model", "(", "train_data", ")", ".", "to", "(", "device", ")", "\n", "accuracy", "+=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "eq", "(", "train_data", ".", "y", ".", "view", "(", "-", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "#error loss and resource loss", "\n", "if", "train_args", ".", "data", "==", "'COLORS-3'", ":", "\n", "            ", "error_loss", "=", "criterion", "(", "output", ",", "train_data", ".", "y", ".", "long", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "error_loss", "=", "criterion", "(", "output", ",", "train_data", ".", "y", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "", "total_loss", "+=", "error_loss", ".", "item", "(", ")", "\n", "\n", "error_loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "model_optimizer", ".", "step", "(", ")", "\n", "", "return", "accuracy", "/", "len", "(", "data", "[", "4", "]", ".", "dataset", ")", ",", "total_loss", "/", "len", "(", "data", "[", "4", "]", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.train4tune.infer_graph": [[251, 272], ["model.eval", "val_data.to.to", "criterion.item", "[].eq().sum().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model().to", "criterion", "criterion", "len", "len", "target.long", "[].eq().sum", "model", "[].eq", "target.view", "model().to.max"], "function", ["None"], ["", "def", "infer_graph", "(", "data_", ",", "model", ",", "criterion", ",", "test", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "total_loss", "=", "0", "\n", "accuracy", "=", "0", "\n", "#for valid or test.", "\n", "if", "test", ":", "\n", "        ", "data", "=", "data_", "[", "6", "]", "\n", "", "else", ":", "\n", "        ", "data", "=", "data_", "[", "5", "]", "\n", "", "for", "val_data", "in", "data", ":", "\n", "        ", "val_data", "=", "val_data", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "model", "(", "val_data", ")", ".", "to", "(", "device", ")", "\n", "", "target", "=", "val_data", ".", "y", "\n", "if", "train_args", ".", "data", "==", "'COLORS-3'", ":", "\n", "            ", "loss", "=", "criterion", "(", "logits", ",", "target", ".", "long", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "criterion", "(", "logits", ",", "target", ")", "\n", "", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "accuracy", "+=", "logits", ".", "max", "(", "1", ")", "[", "1", "]", ".", "eq", "(", "target", ".", "view", "(", "-", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "return", "accuracy", "/", "len", "(", "data", ".", "dataset", ")", ",", "total_loss", "/", "len", "(", "data", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__": [[36, 53], ["super().__init__", "getargspec", "enumerate", "getargspec"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.__init__"], ["    ", "def", "__init__", "(", "self", ",", "aggr", "=", "'add'", ",", "flow", "=", "'source_to_target'", ")", ":", "\n", "        ", "super", "(", "MessagePassing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "aggr", "=", "aggr", "\n", "assert", "self", ".", "aggr", "in", "[", "'add'", ",", "'mean'", ",", "'max'", "]", "\n", "\n", "self", ".", "flow", "=", "flow", "\n", "assert", "self", ".", "flow", "in", "[", "'source_to_target'", ",", "'target_to_source'", "]", "\n", "\n", "self", ".", "__message_args__", "=", "getargspec", "(", "self", ".", "message", ")", "[", "0", "]", "[", "1", ":", "]", "\n", "self", ".", "__special_args__", "=", "[", "(", "i", ",", "arg", ")", "\n", "for", "i", ",", "arg", "in", "enumerate", "(", "self", ".", "__message_args__", ")", "\n", "if", "arg", "in", "special_args", "]", "\n", "self", ".", "__message_args__", "=", "[", "\n", "arg", "for", "arg", "in", "self", ".", "__message_args__", "if", "arg", "not", "in", "special_args", "\n", "]", "\n", "self", ".", "__update_args__", "=", "getargspec", "(", "self", ".", "update", ")", "[", "0", "]", "[", "2", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.propagate": [[54, 123], ["message_passing.MessagePassing.message", "message_passing.MessagePassing.update", "list", "len", "message_passing.scatter_", "ij.keys", "kwargs.get", "message_args.append", "ij.keys", "message_args.insert", "message_args.insert", "message_args.append", "torch.index_select", "message_args.append", "kwargs.get", "isinstance", "isinstance", "torch.index_select.size", "torch.index_select.size", "ValueError", "len", "tmp[].size", "tmp[].size", "ValueError"], "methods", ["home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.message", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.update", "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.scatter_"], ["", "def", "propagate", "(", "self", ",", "edge_index", ",", "size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"The initial call to start propagating messages.\n\n        Args:\n            edge_index (Tensor): The indices of a general (sparse) assignment\n                matrix with shape :obj:`[N, M]` (can be directed or\n                undirected).\n            size (list or tuple, optional): The size :obj:`[N, M]` of the\n                assignment matrix. If set to :obj:`None`, the size is tried to\n                get automatically inferrred. (default: :obj:`None`)\n            **kwargs: Any additional data which is needed to construct messages\n                and to update node embeddings.\n        \"\"\"", "\n", "\n", "size", "=", "[", "None", ",", "None", "]", "if", "size", "is", "None", "else", "list", "(", "size", ")", "\n", "assert", "len", "(", "size", ")", "==", "2", "\n", "\n", "i", ",", "j", "=", "(", "0", ",", "1", ")", "if", "self", ".", "flow", "==", "'target_to_source'", "else", "(", "1", ",", "0", ")", "\n", "ij", "=", "{", "\"_i\"", ":", "i", ",", "\"_j\"", ":", "j", "}", "\n", "\n", "message_args", "=", "[", "]", "\n", "for", "arg", "in", "self", ".", "__message_args__", ":", "\n", "            ", "if", "arg", "[", "-", "2", ":", "]", "in", "ij", ".", "keys", "(", ")", ":", "\n", "                ", "tmp", "=", "kwargs", ".", "get", "(", "arg", "[", ":", "-", "2", "]", ",", "None", ")", "\n", "if", "tmp", "is", "None", ":", "# pragma: no cover", "\n", "                    ", "message_args", ".", "append", "(", "tmp", ")", "\n", "", "else", ":", "\n", "                    ", "idx", "=", "ij", "[", "arg", "[", "-", "2", ":", "]", "]", "\n", "if", "isinstance", "(", "tmp", ",", "tuple", ")", "or", "isinstance", "(", "tmp", ",", "list", ")", ":", "\n", "                        ", "assert", "len", "(", "tmp", ")", "==", "2", "\n", "if", "tmp", "[", "1", "-", "idx", "]", "is", "not", "None", ":", "\n", "                            ", "if", "size", "[", "1", "-", "idx", "]", "is", "None", ":", "\n", "                                ", "size", "[", "1", "-", "idx", "]", "=", "tmp", "[", "1", "-", "idx", "]", ".", "size", "(", "0", ")", "\n", "", "if", "size", "[", "1", "-", "idx", "]", "!=", "tmp", "[", "1", "-", "idx", "]", ".", "size", "(", "0", ")", ":", "\n", "                                ", "raise", "ValueError", "(", "__size_error_msg__", ")", "\n", "", "", "tmp", "=", "tmp", "[", "idx", "]", "\n", "\n", "", "if", "size", "[", "idx", "]", "is", "None", ":", "\n", "                        ", "size", "[", "idx", "]", "=", "tmp", ".", "size", "(", "0", ")", "\n", "", "if", "size", "[", "idx", "]", "!=", "tmp", ".", "size", "(", "0", ")", ":", "\n", "                        ", "raise", "ValueError", "(", "__size_error_msg__", ")", "\n", "\n", "", "tmp", "=", "torch", ".", "index_select", "(", "tmp", ",", "0", ",", "edge_index", "[", "idx", "]", ")", "\n", "message_args", ".", "append", "(", "tmp", ")", "\n", "", "", "else", ":", "\n", "                ", "message_args", ".", "append", "(", "kwargs", ".", "get", "(", "arg", ",", "None", ")", ")", "\n", "\n", "", "", "size", "[", "0", "]", "=", "size", "[", "1", "]", "if", "size", "[", "0", "]", "is", "None", "else", "size", "[", "0", "]", "\n", "size", "[", "1", "]", "=", "size", "[", "0", "]", "if", "size", "[", "1", "]", "is", "None", "else", "size", "[", "1", "]", "\n", "\n", "kwargs", "[", "'edge_index'", "]", "=", "edge_index", "\n", "kwargs", "[", "'size'", "]", "=", "size", "\n", "\n", "for", "(", "idx", ",", "arg", ")", "in", "self", ".", "__special_args__", ":", "\n", "            ", "if", "arg", "[", "-", "2", ":", "]", "in", "ij", ".", "keys", "(", ")", ":", "\n", "                ", "message_args", ".", "insert", "(", "idx", ",", "kwargs", "[", "arg", "[", ":", "-", "2", "]", "]", "[", "ij", "[", "arg", "[", "-", "2", ":", "]", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "message_args", ".", "insert", "(", "idx", ",", "kwargs", "[", "arg", "]", ")", "\n", "\n", "", "", "update_args", "=", "[", "kwargs", "[", "arg", "]", "for", "arg", "in", "self", ".", "__update_args__", "]", "\n", "\n", "out", "=", "self", ".", "message", "(", "*", "message_args", ")", "\n", "if", "self", ".", "aggr", "in", "[", "\"add\"", ",", "\"mean\"", ",", "\"max\"", "]", ":", "\n", "            ", "out", "=", "scatter_", "(", "self", ".", "aggr", ",", "out", ",", "edge_index", "[", "i", "]", ",", "dim_size", "=", "size", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "out", "=", "self", ".", "update", "(", "out", ",", "*", "update_args", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.message": [[124, 133], ["None"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ")", ":", "# pragma: no cover", "\n", "        ", "r\"\"\"Constructs messages in analogy to :math:`\\phi_{\\mathbf{\\Theta}}`\n        for each edge in :math:`(i,j) \\in \\mathcal{E}`.\n        Can take any argument which was initially passed to :meth:`propagate`.\n        In addition, features can be lifted to the source node :math:`i` and\n        target node :math:`j` by appending :obj:`_i` or :obj:`_j` to the\n        variable name, *.e.g.* :obj:`x_i` and :obj:`x_j`.\"\"\"", "\n", "\n", "return", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.MessagePassing.update": [[134, 142], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "aggr_out", ")", ":", "# pragma: no cover", "\n", "        ", "r\"\"\"Updates node embeddings in analogy to\n        :math:`\\gamma_{\\mathbf{\\Theta}}` for each node\n        :math:`i \\in \\mathcal{V}`.\n        Takes in the output of aggregation as first argument and any argument\n        which was initially passed to :meth:`propagate`.\"\"\"", "\n", "\n", "return", "aggr_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.automl-research_pas.None.message_passing.scatter_": [[15, 33], ["getattr", "getattr.", "isinstance", "torch.is_floating_point", "getattr."], "function", ["None"], ["def", "scatter_", "(", "name", ",", "src", ",", "index", ",", "dim", "=", "0", ",", "dim_size", "=", "None", ")", ":", "\n", "    ", "assert", "name", "in", "[", "'add'", ",", "'mean'", ",", "'max'", "]", "\n", "\n", "if", "name", "==", "'max'", ":", "\n", "        ", "op", "=", "torch", ".", "finfo", "if", "torch", ".", "is_floating_point", "(", "src", ")", "else", "torch", ".", "iinfo", "\n", "fill_value", "=", "op", "(", "src", ".", "dtype", ")", ".", "min", "\n", "", "else", ":", "\n", "        ", "fill_value", "=", "0", "\n", "\n", "", "op", "=", "getattr", "(", "torch_scatter", ",", "'scatter_{}'", ".", "format", "(", "name", ")", ")", "\n", "out", "=", "op", "(", "src", ",", "index", ",", "dim", ",", "None", ",", "dim_size", ")", "\n", "if", "isinstance", "(", "out", ",", "tuple", ")", ":", "\n", "        ", "out", "=", "out", "[", "0", "]", "\n", "\n", "", "if", "name", "==", "'max'", ":", "\n", "        ", "out", "[", "out", "==", "fill_value", "]", "=", "0", "\n", "\n", "", "return", "out", "\n", "\n"]]}