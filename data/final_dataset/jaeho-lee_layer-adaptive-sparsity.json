{"home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.dataloaders.dataset_loader": [[7, 14], ["print", "get_cifar10_loaders", "ValueError", "str"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.datasets.cifar10.get_cifar10_loaders"], ["def", "dataset_loader", "(", "model", ",", "batch_size", "=", "100", ",", "num_workers", "=", "5", ")", ":", "\n", "    ", "if", "model", "in", "cifar10_strings", ":", "\n", "        ", "print", "(", "\"Loading CIFAR-10 with batch size \"", "+", "str", "(", "batch_size", ")", ")", "\n", "train_loader", ",", "test_loader", "=", "get_cifar10_loaders", "(", "data_route", ",", "batch_size", ",", "num_workers", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Model not implemented :P'", ")", "\n", "", "return", "train_loader", ",", "test_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.train.trainer_loader": [[5, 7], ["None"], "function", ["None"], ["def", "trainer_loader", "(", ")", ":", "\n", "    ", "return", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.train.initialize_weight": [[8, 13], ["next", "iter", "next", "torch.no_grad", "torch.no_grad", "model", "model.parameters", "batch[].to"], "function", ["None"], ["", "def", "initialize_weight", "(", "model", ",", "loader", ")", ":", "\n", "    ", "batch", "=", "next", "(", "iter", "(", "loader", ")", ")", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", "(", "batch", "[", "0", "]", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.train.train": [[14, 80], ["model.train", "train.test", "train.test", "print", "model.parameters", "next", "model.parameters", "enumerate", "enumerate", "x.to.to", "y.to.to", "opt.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.backward", "opt.step", "sched.step", "x.to.to", "y.to.to", "opt.zero_grad", "model", "torch.cross_entropy", "F.cross_entropy.backward", "opt.step", "train.test", "train.test", "print", "train.test", "train.test", "print", "results_log.append", "numpy.savetxt", "results_log.append", "numpy.savetxt"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.train.train", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.test", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.test", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.test", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.test", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.test", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.test"], ["", "", "def", "train", "(", "model", ",", "optpack", ",", "train_loader", ",", "test_loader", ",", "print_steps", "=", "-", "1", ",", "log_results", "=", "False", ",", "log_path", "=", "'log.txt'", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "opt", "=", "optpack", "[", "\"optimizer\"", "]", "(", "model", ".", "parameters", "(", ")", ")", "\n", "if", "optpack", "[", "\"scheduler\"", "]", "is", "not", "None", ":", "\n", "        ", "sched", "=", "optpack", "[", "\"scheduler\"", "]", "(", "opt", ")", "\n", "", "else", ":", "\n", "        ", "sched", "=", "None", "\n", "", "num_steps", "=", "optpack", "[", "\"steps\"", "]", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n", "results_log", "=", "[", "]", "\n", "training_step", "=", "0", "\n", "\n", "if", "sched", "is", "not", "None", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "training_step", "+=", "1", "\n", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "yhat", "=", "model", "(", "x", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "yhat", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "sched", ".", "step", "(", ")", "\n", "\n", "if", "print_steps", "!=", "-", "1", "and", "training_step", "%", "print_steps", "==", "0", ":", "\n", "                    ", "train_acc", ",", "train_loss", "=", "test", "(", "model", ",", "train_loader", ")", "\n", "test_acc", ",", "test_loss", "=", "test", "(", "model", ",", "test_loader", ")", "\n", "print", "(", "f'Steps: {training_step}/{num_steps} \\t Train acc: {train_acc:.2f} \\t Test acc: {test_acc:.2f}'", ",", "end", "=", "'\\r'", ")", "\n", "if", "log_results", ":", "\n", "                        ", "results_log", ".", "append", "(", "[", "test_acc", ",", "test_loss", ",", "train_acc", ",", "train_loss", "]", ")", "\n", "np", ".", "savetxt", "(", "log_path", ",", "results_log", ")", "\n", "", "", "if", "training_step", ">=", "num_steps", ":", "\n", "                    ", "break", "\n", "", "", "if", "training_step", ">=", "num_steps", ":", "\n", "                ", "break", "\n", "", "", "", "else", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "training_step", "+=", "1", "\n", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "yhat", "=", "model", "(", "x", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "yhat", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "if", "print_steps", "!=", "-", "1", "and", "training_step", "%", "print_steps", "==", "0", ":", "\n", "                    ", "train_acc", ",", "train_loss", "=", "test", "(", "model", ",", "train_loader", ")", "\n", "test_acc", ",", "test_loss", "=", "test", "(", "model", ",", "test_loader", ")", "\n", "print", "(", "f'Steps: {training_step}/{num_steps} \\t Train acc: {train_acc:.2f} \\t Test acc: {test_acc:.2f}'", ",", "end", "=", "'\\r'", ")", "\n", "if", "log_results", ":", "\n", "                        ", "results_log", ".", "append", "(", "[", "test_acc", ",", "test_loss", ",", "train_acc", ",", "train_loss", "]", ")", "\n", "np", ".", "savetxt", "(", "log_path", ",", "results_log", ")", "\n", "", "", "if", "training_step", ">=", "num_steps", ":", "\n", "                    ", "break", "\n", "", "", "if", "training_step", ">=", "num_steps", ":", "\n", "                ", "break", "\n", "", "", "", "train_acc", ",", "train_loss", "=", "test", "(", "model", ",", "train_loader", ")", "\n", "test_acc", ",", "test_loss", "=", "test", "(", "model", ",", "test_loader", ")", "\n", "print", "(", "f'Train acc: {train_acc:.2f}\\t Test acc: {test_acc:.2f}'", ")", "\n", "return", "[", "test_acc", ",", "test_loss", ",", "train_acc", ",", "train_loss", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.train.test": [[81, 103], ["model.eval", "enumerate", "model.train", "next", "x.to.to", "y.to.to", "pred.eq().sum().item", "len", "model.parameters", "torch.no_grad", "torch.no_grad", "model", "model.max", "torch.cross_entropy", "len", "pred.eq().sum", "pred.eq"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.train.train"], ["", "def", "test", "(", "model", ",", "loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "device", "=", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n", "correct", "=", "0", "\n", "loss", "=", "0", "\n", "total", "=", "0", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "loader", ")", ":", "\n", "        ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "yhat", "=", "model", "(", "x", ")", "\n", "_", ",", "pred", "=", "yhat", ".", "max", "(", "1", ")", "\n", "", "correct", "+=", "pred", ".", "eq", "(", "y", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "loss", "+=", "F", ".", "cross_entropy", "(", "yhat", ",", "y", ")", "*", "len", "(", "x", ")", "\n", "total", "+=", "len", "(", "x", ")", "\n", "", "acc", "=", "correct", "/", "total", "*", "100.0", "\n", "loss", "=", "loss", "/", "total", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "return", "acc", ",", "loss", "", "", ""]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.modelloaders.model_and_opt_loader": [[8, 71], ["tools.pruners.prune_weights_reparam", "ValueError", "VGG16().to", "functools.partial", "functools.partial", "ResNet18().to", "VGG16", "functools.partial", "functools.partial", "DenseNet121().to", "ResNet18", "functools.partial", "functools.partial", "EfficientNetB0().to", "ValueError", "DenseNet121", "functools.partial", "functools.partial", "EfficientNetB0"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners.prune_weights_reparam", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.vgg.VGG16", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.ResNet18", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet121", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.EfficientNetB0"], ["def", "model_and_opt_loader", "(", "model_string", ",", "DEVICE", ")", ":", "\n", "    ", "if", "DEVICE", "==", "None", ":", "\n", "        ", "raise", "ValueError", "(", "'No cuda device!'", ")", "\n", "", "if", "model_string", "==", "'vgg16'", ":", "\n", "        ", "model", "=", "VGG16", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "amount", "=", "0.20", "\n", "batch_size", "=", "100", "\n", "opt_pre", "=", "{", "\n", "\"optimizer\"", ":", "partial", "(", "optim", ".", "AdamW", ",", "lr", "=", "0.0003", ")", ",", "\n", "\"steps\"", ":", "50000", ",", "\n", "\"scheduler\"", ":", "None", "\n", "}", "\n", "opt_post", "=", "{", "\n", "\"optimizer\"", ":", "partial", "(", "optim", ".", "AdamW", ",", "lr", "=", "0.0003", ")", ",", "\n", "\"steps\"", ":", "40000", ",", "\n", "\"scheduler\"", ":", "None", "\n", "}", "\n", "", "elif", "model_string", "==", "'resnet18'", ":", "\n", "        ", "model", "=", "ResNet18", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "amount", "=", "0.20", "\n", "batch_size", "=", "100", "\n", "opt_pre", "=", "{", "\n", "\"optimizer\"", ":", "partial", "(", "optim", ".", "AdamW", ",", "lr", "=", "0.0003", ")", ",", "\n", "\"steps\"", ":", "50000", ",", "\n", "\"scheduler\"", ":", "None", "\n", "}", "\n", "opt_post", "=", "{", "\n", "\"optimizer\"", ":", "partial", "(", "optim", ".", "AdamW", ",", "lr", "=", "0.0003", ")", ",", "\n", "\"steps\"", ":", "40000", ",", "\n", "\"scheduler\"", ":", "None", "\n", "}", "\n", "", "elif", "model_string", "==", "'densenet'", ":", "\n", "        ", "model", "=", "DenseNet121", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "amount", "=", "0.20", "\n", "batch_size", "=", "100", "\n", "opt_pre", "=", "{", "\n", "\"optimizer\"", ":", "partial", "(", "optim", ".", "AdamW", ",", "lr", "=", "0.0003", ")", ",", "\n", "\"steps\"", ":", "80000", ",", "\n", "\"scheduler\"", ":", "None", "\n", "}", "\n", "opt_post", "=", "{", "\n", "\"optimizer\"", ":", "partial", "(", "optim", ".", "AdamW", ",", "lr", "=", "0.0003", ")", ",", "\n", "\"steps\"", ":", "60000", ",", "\n", "\"scheduler\"", ":", "None", "\n", "}", "\n", "", "elif", "model_string", "==", "'effnet'", ":", "\n", "        ", "model", "=", "EfficientNetB0", "(", ")", ".", "to", "(", "DEVICE", ")", "\n", "amount", "=", "0.20", "\n", "batch_size", "=", "100", "\n", "opt_pre", "=", "{", "\n", "\"optimizer\"", ":", "partial", "(", "optim", ".", "AdamW", ",", "lr", "=", "0.0003", ")", ",", "\n", "\"steps\"", ":", "50000", ",", "\n", "\"scheduler\"", ":", "None", "\n", "}", "\n", "opt_post", "=", "{", "\n", "\"optimizer\"", ":", "partial", "(", "optim", ".", "AdamW", ",", "lr", "=", "0.0003", ")", ",", "\n", "\"steps\"", ":", "40000", ",", "\n", "\"scheduler\"", ":", "None", "\n", "}", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown model'", ")", "\n", "", "prune_weights_reparam", "(", "model", ")", "\n", "return", "model", ",", "amount", ",", "batch_size", ",", "opt_pre", ",", "opt_post", "", "", ""]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners.weight_pruner_loader": [[6, 22], ["ValueError"], "function", ["None"], ["def", "weight_pruner_loader", "(", "pruner_string", ")", ":", "\n", "    ", "\"\"\"\n    Gives you the pruning methods: LAMP, Glob, Unif, Unif+, and ERK\n    \"\"\"", "\n", "if", "pruner_string", "==", "'lamp'", ":", "\n", "        ", "return", "prune_weights_lamp", "\n", "", "elif", "pruner_string", "==", "'glob'", ":", "\n", "        ", "return", "prune_weights_global", "\n", "", "elif", "pruner_string", "==", "'unif'", ":", "\n", "        ", "return", "prune_weights_uniform", "\n", "", "elif", "pruner_string", "==", "'unifplus'", ":", "\n", "        ", "return", "prune_weights_unifplus", "\n", "", "elif", "pruner_string", "==", "'erk'", ":", "\n", "        ", "return", "prune_weights_erk", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown pruner'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners.prune_weights_reparam": [[28, 32], ["tools.utils.get_modules", "torch.nn.utils.prune.identity"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_modules"], ["def", "prune_weights_reparam", "(", "model", ")", ":", "\n", "    ", "module_list", "=", "get_modules", "(", "model", ")", "\n", "for", "m", "in", "module_list", ":", "\n", "        ", "prune", ".", "identity", "(", "m", ",", "name", "=", "\"weight\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners.prune_weights_l1predefined": [[33, 37], ["tools.utils.get_modules", "enumerate", "torch.nn.utils.prune.l1_unstructured", "float"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_modules"], ["", "", "def", "prune_weights_l1predefined", "(", "model", ",", "amounts", ")", ":", "\n", "    ", "mlist", "=", "get_modules", "(", "model", ")", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "mlist", ")", ":", "\n", "        ", "prune", ".", "l1_unstructured", "(", "m", ",", "name", "=", "\"weight\"", ",", "amount", "=", "float", "(", "amounts", "[", "idx", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners.prune_weights_global": [[42, 45], ["pruners._extract_weight_tuples", "torch.nn.utils.prune.global_unstructured"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._extract_weight_tuples"], ["def", "prune_weights_global", "(", "model", ",", "amount", ")", ":", "\n", "    ", "parameters_to_prune", "=", "_extract_weight_tuples", "(", "model", ")", "\n", "prune", ".", "global_unstructured", "(", "parameters_to_prune", ",", "pruning_method", "=", "prune", ".", "L1Unstructured", ",", "amount", "=", "amount", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners.prune_weights_lamp": [[46, 50], ["pruners._compute_lamp_amounts", "pruners.prune_weights_l1predefined"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._compute_lamp_amounts", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners.prune_weights_l1predefined"], ["", "def", "prune_weights_lamp", "(", "model", ",", "amount", ")", ":", "\n", "    ", "assert", "amount", "<=", "1", "\n", "amounts", "=", "_compute_lamp_amounts", "(", "model", ",", "amount", ")", "\n", "prune_weights_l1predefined", "(", "model", ",", "amounts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners.prune_weights_uniform": [[51, 56], ["tools.utils.get_modules", "torch.nn.utils.prune.l1_unstructured"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_modules"], ["", "def", "prune_weights_uniform", "(", "model", ",", "amount", ")", ":", "\n", "    ", "module_list", "=", "get_modules", "(", "model", ")", "\n", "assert", "amount", "<=", "1", "# Can be updated later to handle > 1.", "\n", "for", "m", "in", "module_list", ":", "\n", "        ", "prune", ".", "l1_unstructured", "(", "m", ",", "name", "=", "\"weight\"", ",", "amount", "=", "amount", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners.prune_weights_unifplus": [[57, 61], ["pruners._compute_unifplus_amounts", "pruners.prune_weights_l1predefined"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._compute_unifplus_amounts", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners.prune_weights_l1predefined"], ["", "", "def", "prune_weights_unifplus", "(", "model", ",", "amount", ")", ":", "\n", "    ", "assert", "amount", "<=", "1", "\n", "amounts", "=", "_compute_unifplus_amounts", "(", "model", ",", "amount", ")", "\n", "prune_weights_l1predefined", "(", "model", ",", "amounts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners.prune_weights_erk": [[62, 66], ["pruners._compute_erk_amounts", "pruners.prune_weights_l1predefined"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._compute_erk_amounts", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners.prune_weights_l1predefined"], ["", "def", "prune_weights_erk", "(", "model", ",", "amount", ")", ":", "\n", "    ", "assert", "amount", "<=", "1", "\n", "amounts", "=", "_compute_erk_amounts", "(", "model", ",", "amount", ")", "\n", "prune_weights_l1predefined", "(", "model", ",", "amounts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._extract_weight_tuples": [[72, 78], ["tools.utils.get_modules", "tuple"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_modules"], ["def", "_extract_weight_tuples", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    Gives you well-packed weight tensors for global pruning.\n    \"\"\"", "\n", "mlist", "=", "get_modules", "(", "model", ")", "\n", "return", "tuple", "(", "[", "(", "m", ",", "'weight'", ")", "for", "m", "in", "mlist", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._compute_unifplus_amounts": [[79, 119], ["tools.utils.get_weights", "pruners._count_unmasked_weights", "pruners._count_total_weights", "numpy.round", "numpy.round", "wlist[].dim", "amounts.append", "numpy.round", "numpy.round", "_count_unmasked_weights.sum", "unmaskeds[].sum", "ValueError", "amounts.extend", "amounts.append", "amounts.extend", "_count_unmasked_weights.sum", "amounts.extend", "amounts.append", "amounts.extend", "unmaskeds[].sum", "ValueError", "unmaskeds[].sum", "ValueError", "_count_unmasked_weights.size", "_count_unmasked_weights.size", "_count_unmasked_weights.size", "_count_unmasked_weights.size"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_weights", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._count_unmasked_weights", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._count_total_weights"], ["", "def", "_compute_unifplus_amounts", "(", "model", ",", "amount", ")", ":", "\n", "    ", "\"\"\"\n    Compute # of weights to prune in each layer.\n    \"\"\"", "\n", "amounts", "=", "[", "]", "\n", "wlist", "=", "get_weights", "(", "model", ")", "\n", "unmaskeds", "=", "_count_unmasked_weights", "(", "model", ")", "\n", "totals", "=", "_count_total_weights", "(", "model", ")", "\n", "\n", "last_layer_minimum", "=", "np", ".", "round", "(", "totals", "[", "-", "1", "]", "*", "0.2", ")", "# Minimum number of last-layer weights to keep", "\n", "total_to_prune", "=", "np", ".", "round", "(", "unmaskeds", ".", "sum", "(", ")", "*", "amount", ")", "\n", "\n", "if", "wlist", "[", "0", "]", ".", "dim", "(", ")", "==", "4", ":", "\n", "        ", "amounts", ".", "append", "(", "0", ")", "# Leave the first layer unpruned.", "\n", "frac_to_prune", "=", "(", "total_to_prune", "*", "1.0", ")", "/", "(", "unmaskeds", "[", "1", ":", "]", ".", "sum", "(", ")", ")", "\n", "if", "frac_to_prune", ">", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Cannot be pruned further by the Unif+ scheme! (first layer exception)\"", ")", "\n", "", "last_layer_to_surv_planned", "=", "np", ".", "round", "(", "(", "1.0", "-", "frac_to_prune", ")", "*", "unmaskeds", "[", "-", "1", "]", ")", "\n", "if", "last_layer_to_surv_planned", "<", "last_layer_minimum", ":", "\n", "            ", "last_layer_to_prune", "=", "unmaskeds", "[", "-", "1", "]", "-", "last_layer_minimum", "\n", "frac_to_prune_middle", "=", "(", "(", "total_to_prune", "-", "last_layer_to_prune", ")", "*", "1.0", ")", "/", "(", "unmaskeds", "[", "1", ":", "-", "1", "]", ".", "sum", "(", ")", ")", "\n", "if", "frac_to_prune_middle", ">", "1.0", ":", "\n", "                ", "raise", "ValueError", "(", "\"Cannot be pruned further by the Unif+ scheme! (first+last layer exception)\"", ")", "\n", "", "amounts", ".", "extend", "(", "[", "frac_to_prune_middle", "]", "*", "(", "unmaskeds", ".", "size", "(", "0", ")", "-", "2", ")", ")", "\n", "amounts", ".", "append", "(", "(", "last_layer_to_prune", "*", "1.0", ")", "/", "unmaskeds", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "amounts", ".", "extend", "(", "[", "frac_to_prune", "]", "*", "(", "unmaskeds", ".", "size", "(", "0", ")", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "frac_to_prune", "=", "(", "total_to_prune", "*", "1.0", ")", "/", "(", "unmaskeds", ".", "sum", "(", ")", ")", "\n", "last_layer_to_surv_planned", "=", "np", ".", "round", "(", "(", "1.0", "-", "frac_to_prune", ")", "*", "unmaskeds", "[", "-", "1", "]", ")", "\n", "if", "last_layer_to_surv_planned", "<", "last_layer_minimum", ":", "\n", "            ", "last_layer_to_prune", "=", "unmaskeds", "[", "-", "1", "]", "-", "last_layer_minimum", "\n", "frac_to_prune_middle", "=", "(", "(", "total_to_prune", "-", "last_layer_to_prune", ")", "*", "1.0", ")", "/", "(", "unmaskeds", "[", ":", "-", "1", "]", ".", "sum", "(", ")", ")", "\n", "if", "frac_to_prune_middle", ">", "1.0", ":", "\n", "                ", "raise", "ValueError", "(", "\"Cannot be pruned further by the Unif+ scheme! (last layer exception)\"", ")", "\n", "", "amounts", ".", "extend", "(", "[", "frac_to_prune_middle", "]", "*", "(", "unmaskeds", ".", "size", "(", "0", ")", "-", "1", ")", ")", "\n", "amounts", ".", "append", "(", "(", "last_layer_to_prune", "*", "1.0", ")", "/", "unmaskeds", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "amounts", ".", "extend", "(", "[", "frac_to_prune", "]", "*", "(", "unmaskeds", ".", "size", "(", "0", ")", ")", ")", "\n", "", "", "return", "amounts", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._compute_erk_amounts": [[120, 125], ["pruners._count_unmasked_weights", "pruners._compute_erks", "pruners._amounts_from_eps"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._count_unmasked_weights", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._compute_erks", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._amounts_from_eps"], ["", "def", "_compute_erk_amounts", "(", "model", ",", "amount", ")", ":", "\n", "    ", "unmaskeds", "=", "_count_unmasked_weights", "(", "model", ")", "\n", "erks", "=", "_compute_erks", "(", "model", ")", "\n", "\n", "return", "_amounts_from_eps", "(", "unmaskeds", ",", "erks", ",", "amount", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._amounts_from_eps": [[126, 161], ["ers.size", "torch.zeros", "torch.zeros", "range", "unmaskeds.sum", "torch.round", "range", "ers_of_prunables.sum"], "function", ["None"], ["", "def", "_amounts_from_eps", "(", "unmaskeds", ",", "ers", ",", "amount", ")", ":", "\n", "    ", "num_layers", "=", "ers", ".", "size", "(", "0", ")", "\n", "layers_to_keep_dense", "=", "torch", ".", "zeros", "(", "num_layers", ")", "\n", "total_to_survive", "=", "(", "1.0", "-", "amount", ")", "*", "unmaskeds", ".", "sum", "(", ")", "# Total to keep.", "\n", "\n", "# Determine some layers to keep dense.", "\n", "is_eps_invalid", "=", "True", "\n", "while", "is_eps_invalid", ":", "\n", "        ", "unmasked_among_prunables", "=", "(", "unmaskeds", "*", "(", "1", "-", "layers_to_keep_dense", ")", ")", ".", "sum", "(", ")", "\n", "to_survive_among_prunables", "=", "total_to_survive", "-", "(", "layers_to_keep_dense", "*", "unmaskeds", ")", ".", "sum", "(", ")", "\n", "\n", "ers_of_prunables", "=", "ers", "*", "(", "1.0", "-", "layers_to_keep_dense", ")", "\n", "survs_of_prunables", "=", "torch", ".", "round", "(", "to_survive_among_prunables", "*", "ers_of_prunables", "/", "ers_of_prunables", ".", "sum", "(", ")", ")", "\n", "\n", "layer_to_make_dense", "=", "-", "1", "\n", "max_ratio", "=", "1.0", "\n", "for", "idx", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "if", "layers_to_keep_dense", "[", "idx", "]", "==", "0", ":", "\n", "                ", "if", "survs_of_prunables", "[", "idx", "]", "/", "unmaskeds", "[", "idx", "]", ">", "max_ratio", ":", "\n", "                    ", "layer_to_make_dense", "=", "idx", "\n", "max_ratio", "=", "survs_of_prunables", "[", "idx", "]", "/", "unmaskeds", "[", "idx", "]", "\n", "\n", "", "", "", "if", "layer_to_make_dense", "==", "-", "1", ":", "\n", "            ", "is_eps_invalid", "=", "False", "\n", "", "else", ":", "\n", "            ", "layers_to_keep_dense", "[", "layer_to_make_dense", "]", "=", "1", "\n", "\n", "", "", "amounts", "=", "torch", ".", "zeros", "(", "num_layers", ")", "\n", "\n", "for", "idx", "in", "range", "(", "num_layers", ")", ":", "\n", "        ", "if", "layers_to_keep_dense", "[", "idx", "]", "==", "1", ":", "\n", "            ", "amounts", "[", "idx", "]", "=", "0.0", "\n", "", "else", ":", "\n", "            ", "amounts", "[", "idx", "]", "=", "1.0", "-", "(", "survs_of_prunables", "[", "idx", "]", "/", "unmaskeds", "[", "idx", "]", ")", "\n", "", "", "return", "amounts", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._compute_lamp_amounts": [[162, 181], ["pruners._count_unmasked_weights", "int", "torch.cat", "torch.topk", "enumerate", "numpy.round", "_normalize_scores().view", "torch.ge().sum", "amounts.append", "tools.utils.get_weights", "_count_unmasked_weights.sum", "pruners._normalize_scores", "torch.ge", "torch.ones().to", "torch.ones", "score.size"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._count_unmasked_weights", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_weights", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._normalize_scores"], ["", "def", "_compute_lamp_amounts", "(", "model", ",", "amount", ")", ":", "\n", "    ", "\"\"\"\n    Compute normalization schemes.\n    \"\"\"", "\n", "unmaskeds", "=", "_count_unmasked_weights", "(", "model", ")", "\n", "num_surv", "=", "int", "(", "np", ".", "round", "(", "unmaskeds", ".", "sum", "(", ")", "*", "(", "1.0", "-", "amount", ")", ")", ")", "\n", "\n", "flattened_scores", "=", "[", "_normalize_scores", "(", "w", "**", "2", ")", ".", "view", "(", "-", "1", ")", "for", "w", "in", "get_weights", "(", "model", ")", "]", "\n", "concat_scores", "=", "torch", ".", "cat", "(", "flattened_scores", ",", "dim", "=", "0", ")", "\n", "topks", ",", "_", "=", "torch", ".", "topk", "(", "concat_scores", ",", "num_surv", ")", "\n", "threshold", "=", "topks", "[", "-", "1", "]", "\n", "\n", "# We don't care much about tiebreakers, for now.", "\n", "final_survs", "=", "[", "torch", ".", "ge", "(", "score", ",", "threshold", "*", "torch", ".", "ones", "(", "score", ".", "size", "(", ")", ")", ".", "to", "(", "score", ".", "device", ")", ")", ".", "sum", "(", ")", "for", "score", "in", "flattened_scores", "]", "\n", "amounts", "=", "[", "]", "\n", "for", "idx", ",", "final_surv", "in", "enumerate", "(", "final_survs", ")", ":", "\n", "        ", "amounts", ".", "append", "(", "1.0", "-", "(", "final_surv", "/", "unmaskeds", "[", "idx", "]", ")", ")", "\n", "\n", "", "return", "amounts", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._compute_erks": [[182, 191], ["tools.utils.get_weights", "torch.zeros", "enumerate", "len", "w.dim", "w.size", "w.size", "w.size", "w.size", "w.size", "w.size"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_weights"], ["", "def", "_compute_erks", "(", "model", ")", ":", "\n", "    ", "wlist", "=", "get_weights", "(", "model", ")", "\n", "erks", "=", "torch", ".", "zeros", "(", "len", "(", "wlist", ")", ")", "\n", "for", "idx", ",", "w", "in", "enumerate", "(", "wlist", ")", ":", "\n", "        ", "if", "w", ".", "dim", "(", ")", "==", "4", ":", "\n", "            ", "erks", "[", "idx", "]", "=", "w", ".", "size", "(", "0", ")", "+", "w", ".", "size", "(", "1", ")", "+", "w", ".", "size", "(", "2", ")", "+", "w", ".", "size", "(", "3", ")", "\n", "", "else", ":", "\n", "            ", "erks", "[", "idx", "]", "=", "w", ".", "size", "(", "0", ")", "+", "w", ".", "size", "(", "1", ")", "\n", "", "", "return", "erks", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._count_unmasked_weights": [[192, 201], ["tools.utils.get_modules", "torch.FloatTensor", "unmaskeds.append", "m.weight_mask.sum"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_modules"], ["", "def", "_count_unmasked_weights", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    Return a 1-dimensional tensor of #unmasked weights.\n    \"\"\"", "\n", "mlist", "=", "get_modules", "(", "model", ")", "\n", "unmaskeds", "=", "[", "]", "\n", "for", "m", "in", "mlist", ":", "\n", "        ", "unmaskeds", ".", "append", "(", "m", ".", "weight_mask", ".", "sum", "(", ")", ")", "\n", "", "return", "torch", ".", "FloatTensor", "(", "unmaskeds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._count_total_weights": [[202, 211], ["tools.utils.get_weights", "torch.FloatTensor", "numels.append", "w.numel"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_weights"], ["", "def", "_count_total_weights", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    Return a 1-dimensional tensor of #total weights.\n    \"\"\"", "\n", "wlist", "=", "get_weights", "(", "model", ")", "\n", "numels", "=", "[", "]", "\n", "for", "w", "in", "wlist", ":", "\n", "        ", "numels", ".", "append", "(", "w", ".", "numel", "(", ")", ")", "\n", "", "return", "torch", ".", "FloatTensor", "(", "numels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.pruners._normalize_scores": [[212, 229], ["scores.view().sort", "sorted_scores.cumsum", "torch.zeros", "torch.zeros", "torch.zeros.view", "scores.sum", "scores.view", "len"], "function", ["None"], ["", "def", "_normalize_scores", "(", "scores", ")", ":", "\n", "    ", "\"\"\"\n    Normalizing scheme for LAMP.\n    \"\"\"", "\n", "# sort scores in an ascending order", "\n", "sorted_scores", ",", "sorted_idx", "=", "scores", ".", "view", "(", "-", "1", ")", ".", "sort", "(", "descending", "=", "False", ")", "\n", "# compute cumulative sum", "\n", "scores_cumsum_temp", "=", "sorted_scores", ".", "cumsum", "(", "dim", "=", "0", ")", "\n", "scores_cumsum", "=", "torch", ".", "zeros", "(", "scores_cumsum_temp", ".", "shape", ",", "device", "=", "scores", ".", "device", ")", "\n", "scores_cumsum", "[", "1", ":", "]", "=", "scores_cumsum_temp", "[", ":", "len", "(", "scores_cumsum_temp", ")", "-", "1", "]", "\n", "# normalize by cumulative sum", "\n", "sorted_scores", "/=", "(", "scores", ".", "sum", "(", ")", "-", "scores_cumsum", ")", "\n", "# tidy up and output", "\n", "new_scores", "=", "torch", ".", "zeros", "(", "scores_cumsum", ".", "shape", ",", "device", "=", "scores", ".", "device", ")", "\n", "new_scores", "[", "sorted_idx", "]", "=", "sorted_scores", "\n", "\n", "return", "new_scores", ".", "view", "(", "scores", ".", "shape", ")", "", "", ""]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils._is_prunable_module": [[7, 9], ["isinstance", "isinstance"], "function", ["None"], ["def", "_is_prunable_module", "(", "m", ")", ":", "\n", "    ", "return", "(", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils._get_sparsity": [[10, 14], ["tsr.numel", "tsr.nonzero().size", "tsr.nonzero"], "function", ["None"], ["", "def", "_get_sparsity", "(", "tsr", ")", ":", "\n", "    ", "total", "=", "tsr", ".", "numel", "(", ")", "\n", "nnz", "=", "tsr", ".", "nonzero", "(", ")", ".", "size", "(", "0", ")", "\n", "return", "nnz", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils._get_nnz": [[15, 17], ["tsr.nonzero().size", "tsr.nonzero"], "function", ["None"], ["", "def", "_get_nnz", "(", "tsr", ")", ":", "\n", "    ", "return", "tsr", ".", "nonzero", "(", ")", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_weights": [[20, 26], ["model.modules", "utils._is_prunable_module", "weights.append"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils._is_prunable_module"], ["", "def", "get_weights", "(", "model", ")", ":", "\n", "    ", "weights", "=", "[", "]", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "_is_prunable_module", "(", "m", ")", ":", "\n", "            ", "weights", ".", "append", "(", "m", ".", "weight", ")", "\n", "", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_convweights": [[27, 33], ["model.modules", "isinstance", "weights.append"], "function", ["None"], ["", "def", "get_convweights", "(", "model", ")", ":", "\n", "    ", "weights", "=", "[", "]", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "weights", ".", "append", "(", "m", ".", "weight", ")", "\n", "", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_modules": [[34, 40], ["model.modules", "utils._is_prunable_module", "modules.append"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils._is_prunable_module"], ["", "def", "get_modules", "(", "model", ")", ":", "\n", "    ", "modules", "=", "[", "]", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "_is_prunable_module", "(", "m", ")", ":", "\n", "            ", "modules", ".", "append", "(", "m", ")", "\n", "", "", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_convmodules": [[41, 47], ["model.modules", "isinstance", "modules.append"], "function", ["None"], ["", "def", "get_convmodules", "(", "model", ")", ":", "\n", "    ", "modules", "=", "[", "]", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "modules", ".", "append", "(", "m", ")", "\n", "", "", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_copied_modules": [[48, 54], ["model.modules", "utils._is_prunable_module", "modules.append", "copy.deepcopy().cpu", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils._is_prunable_module"], ["", "def", "get_copied_modules", "(", "model", ")", ":", "\n", "    ", "modules", "=", "[", "]", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "_is_prunable_module", "(", "m", ")", ":", "\n", "            ", "modules", ".", "append", "(", "deepcopy", "(", "m", ")", ".", "cpu", "(", ")", ")", "\n", "", "", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_model_sparsity": [[55, 63], ["model.modules", "utils._is_prunable_module", "m.weight.data.numel", "m.weight.data.nonzero().size", "m.weight.data.nonzero"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils._is_prunable_module"], ["", "def", "get_model_sparsity", "(", "model", ")", ":", "\n", "    ", "prunables", "=", "0", "\n", "nnzs", "=", "0", "\n", "for", "m", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "_is_prunable_module", "(", "m", ")", ":", "\n", "            ", "prunables", "+=", "m", ".", "weight", ".", "data", ".", "numel", "(", ")", "\n", "nnzs", "+=", "m", ".", "weight", ".", "data", ".", "nonzero", "(", ")", ".", "size", "(", "0", ")", "\n", "", "", "return", "nnzs", "/", "prunables", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_sparsities": [[64, 66], ["utils._get_sparsity", "model.modules", "utils._is_prunable_module"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils._get_sparsity", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils._is_prunable_module"], ["", "def", "get_sparsities", "(", "model", ")", ":", "\n", "    ", "return", "[", "_get_sparsity", "(", "m", ".", "weight", ".", "data", ")", "for", "m", "in", "model", ".", "modules", "(", ")", "if", "_is_prunable_module", "(", "m", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils.get_nnzs": [[67, 69], ["utils._get_nnz", "model.modules", "utils._is_prunable_module"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils._get_nnz", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.tools.utils._is_prunable_module"], ["", "def", "get_nnzs", "(", "model", ")", ":", "\n", "    ", "return", "[", "_get_nnz", "(", "m", ".", "weight", ".", "data", ")", "for", "m", "in", "model", ".", "modules", "(", ")", "if", "_is_prunable_module", "(", "m", ")", "]", "", "", ""]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.datasets.cifar10.get_cifar10_loaders": [[8, 19], ["torchvision.Compose", "torchvision.Compose", "torchvision.CIFAR10", "torchvision.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor"], "function", ["None"], ["def", "get_cifar10_loaders", "(", "data_route", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "    ", "tfm_train", "=", "T", ".", "Compose", "(", "[", "T", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "T", ".", "RandomHorizontalFlip", "(", ")", ",", "T", ".", "ToTensor", "(", ")", ",", "cifar_nm", "]", ")", "\n", "tfm_test", "=", "T", ".", "Compose", "(", "[", "T", ".", "ToTensor", "(", ")", ",", "cifar_nm", "]", ")", "\n", "\n", "train_set", "=", "dts", ".", "CIFAR10", "(", "data_route", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "tfm_train", ")", "\n", "test_set", "=", "dts", ".", "CIFAR10", "(", "data_route", ",", "train", "=", "False", ",", "download", "=", "False", ",", "transform", "=", "tfm_test", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", "", "", ""]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.vgg.VGG.__init__": [[14, 18], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.EfficientNet._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ",", "use_bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ",", "use_bn", ")", "\n", "self", ".", "classifier", "=", "Linear", "(", "512", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.vgg.VGG.forward": [[19, 24], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.vgg.VGG._make_layers": [[25, 39], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ",", "use_bn", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "]", "\n", "if", "use_bn", ":", "\n", "                    ", "layers", "+=", "[", "BatchNorm2d", "(", "x", ")", "]", "\n", "", "layers", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.vgg.VGG11": [[41, 43], ["vgg.VGG"], "function", ["None"], ["", "", "def", "VGG11", "(", "use_bn", "=", "True", ")", ":", "\n", "    ", "return", "VGG", "(", "'VGG11'", ",", "use_bn", ")", "\n", "", "def", "VGG13", "(", "use_bn", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.vgg.VGG13": [[43, 45], ["vgg.VGG"], "function", ["None"], ["", "def", "VGG13", "(", "use_bn", "=", "True", ")", ":", "\n", "    ", "return", "VGG", "(", "'VGG13'", ",", "use_bn", ")", "\n", "", "def", "VGG16", "(", "use_bn", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.vgg.VGG16": [[45, 47], ["vgg.VGG"], "function", ["None"], ["", "def", "VGG16", "(", "use_bn", "=", "True", ")", ":", "\n", "    ", "return", "VGG", "(", "'VGG16'", ",", "use_bn", ")", "\n", "", "def", "VGG19", "(", "use_bn", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.vgg.VGG19": [[47, 49], ["vgg.VGG"], "function", ["None"], ["", "def", "VGG19", "(", "use_bn", "=", "True", ")", ":", "\n", "    ", "return", "VGG", "(", "'VGG19'", ",", "use_bn", ")", "", "", ""]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.SE.__init__": [[22, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "se_channels", ")", ":", "\n", "        ", "super", "(", "SE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "se1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "se_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "se2", "=", "nn", ".", "Conv2d", "(", "se_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.SE.forward": [[29, 35], ["torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "efficientnet.swish", "efficientnet.SE.se2().sigmoid", "efficientnet.SE.se1", "efficientnet.SE.se2"], "methods", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.swish"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "x", ",", "(", "1", ",", "1", ")", ")", "\n", "out", "=", "swish", "(", "self", ".", "se1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "se2", "(", "out", ")", ".", "sigmoid", "(", ")", "\n", "out", "=", "x", "*", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.Block.__init__": [[40, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "int", "efficientnet.SE", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "expand_ratio", "=", "1", ",", "\n", "se_ratio", "=", "0.", ",", "\n", "drop_rate", "=", "0.", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "self", ".", "expand_ratio", "=", "expand_ratio", "\n", "\n", "# Expansion", "\n", "channels", "=", "expand_ratio", "*", "in_channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "\n", "channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "\n", "# Depthwise conv", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "channels", ",", "\n", "channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "(", "1", "if", "kernel_size", "==", "3", "else", "2", ")", ",", "\n", "groups", "=", "channels", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "channels", ")", "\n", "\n", "# SE layers", "\n", "se_channels", "=", "int", "(", "in_channels", "*", "se_ratio", ")", "\n", "self", ".", "se", "=", "SE", "(", "channels", ",", "se_channels", ")", "\n", "\n", "# Output", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "# Skip connection if in and out shapes are the same (MV-V2 style)", "\n", "self", ".", "has_skip", "=", "(", "stride", "==", "1", ")", "and", "(", "in_channels", "==", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.Block.forward": [[89, 99], ["efficientnet.swish", "efficientnet.Block.se", "efficientnet.Block.bn3", "efficientnet.swish", "efficientnet.Block.bn2", "efficientnet.Block.conv3", "efficientnet.Block.bn1", "efficientnet.Block.conv2", "efficientnet.drop_connect", "efficientnet.Block.conv1"], "methods", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.swish", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.swish", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.drop_connect"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "if", "self", ".", "expand_ratio", "==", "1", "else", "swish", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "swish", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "se", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "if", "self", ".", "has_skip", ":", "\n", "            ", "if", "self", ".", "training", "and", "self", ".", "drop_rate", ">", "0", ":", "\n", "                ", "out", "=", "drop_connect", "(", "out", ",", "self", ".", "drop_rate", ")", "\n", "", "out", "=", "out", "+", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.EfficientNet.__init__": [[102, 114], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "efficientnet.EfficientNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.EfficientNet._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "EfficientNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "\n", "32", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_channels", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cfg", "[", "'out_channels'", "]", "[", "-", "1", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.EfficientNet._make_layers": [[115, 135], ["sum", "zip", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "efficientnet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "cfg", "=", "[", "self", ".", "cfg", "[", "k", "]", "for", "k", "in", "[", "'expansion'", ",", "'out_channels'", ",", "'num_blocks'", ",", "'kernel_size'", ",", "\n", "'stride'", "]", "]", "\n", "b", "=", "0", "\n", "blocks", "=", "sum", "(", "self", ".", "cfg", "[", "'num_blocks'", "]", ")", "\n", "for", "expansion", ",", "out_channels", ",", "num_blocks", ",", "kernel_size", ",", "stride", "in", "zip", "(", "*", "cfg", ")", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "drop_rate", "=", "self", ".", "cfg", "[", "'drop_connect_rate'", "]", "*", "b", "/", "blocks", "\n", "layers", ".", "append", "(", "\n", "Block", "(", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "expansion", ",", "\n", "se_ratio", "=", "0.25", ",", "\n", "drop_rate", "=", "drop_rate", ")", ")", "\n", "in_channels", "=", "out_channels", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.EfficientNet.forward": [[136, 146], ["efficientnet.swish", "efficientnet.EfficientNet.layers", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.dropout.view", "efficientnet.EfficientNet.linear", "efficientnet.EfficientNet.bn1", "torch.dropout.size", "torch.dropout", "torch.dropout", "torch.dropout", "efficientnet.EfficientNet.conv1"], "methods", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.swish"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "swish", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "1", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "dropout_rate", "=", "self", ".", "cfg", "[", "'dropout_rate'", "]", "\n", "if", "self", ".", "training", "and", "dropout_rate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "dropout_rate", ")", "\n", "", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.swish": [[6, 8], ["x.sigmoid"], "function", ["None"], ["def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "x", ".", "sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.drop_connect": [[10, 17], ["torch.empty", "torch.empty", "torch.empty", "torch.empty.bernoulli_", "x.div_", "x.mul_"], "function", ["None"], ["", "def", "drop_connect", "(", "x", ",", "drop_ratio", ")", ":", "\n", "    ", "keep_ratio", "=", "1.0", "-", "drop_ratio", "\n", "mask", "=", "torch", ".", "empty", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "mask", ".", "bernoulli_", "(", "keep_ratio", ")", "\n", "x", ".", "div_", "(", "keep_ratio", ")", "\n", "x", ".", "mul_", "(", "mask", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.EfficientNetB0": [[148, 159], ["efficientnet.EfficientNet"], "function", ["None"], ["", "", "def", "EfficientNetB0", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'num_blocks'", ":", "[", "1", ",", "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "1", "]", ",", "\n", "'expansion'", ":", "[", "1", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", ",", "6", "]", ",", "\n", "'out_channels'", ":", "[", "16", ",", "24", ",", "40", ",", "80", ",", "112", ",", "192", ",", "320", "]", ",", "\n", "'kernel_size'", ":", "[", "3", ",", "3", ",", "5", ",", "3", ",", "5", ",", "5", ",", "3", "]", ",", "\n", "'stride'", ":", "[", "1", ",", "2", ",", "2", ",", "2", ",", "1", ",", "2", ",", "1", "]", ",", "\n", "'dropout_rate'", ":", "0.2", ",", "\n", "'drop_connect_rate'", ":", "0.2", ",", "\n", "}", "\n", "return", "EfficientNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.test": [[161, 166], ["efficientnet.EfficientNetB0", "torch.randn", "torch.randn", "torch.randn", "EfficientNetB0.", "print"], "function", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.efficientnet.EfficientNetB0"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "EfficientNetB0", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.BasicBlock.__init__": [[8, 20], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.BasicBlock.forward": [[22, 28], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.Bottleneck.__init__": [[34, 48], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.Bottleneck.forward": [[50, 57], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.ResNet.__init__": [[60, 71], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.ResNet._make_layer": [[72, 79], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.ResNet.forward": [[80, 90], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.ResNet18": [[92, 94], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.ResNet34": [[95, 97], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.ResNet50": [[98, 100], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.ResNet101": [[101, 103], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.resnet.ResNet152": [[104, 106], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "", "", ""]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.Bottleneck.__init__": [[8, 14], ["torch.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "in_planes", ",", "4", "*", "growth_rate", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm2d", "(", "4", "*", "growth_rate", ")", "\n", "self", ".", "conv2", "=", "Conv2d", "(", "4", "*", "growth_rate", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.Bottleneck.forward": [[14, 19], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.Transition.__init__": [[21, 25], ["torch.Module.__init__", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.Transition.forward": [[26, 30], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet.__init__": [[32, 62], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet._make_dense_layers": [[63, 69], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet.forward": [[70, 80], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jaeho-lee_layer-adaptive-sparsity.models.densenet.DenseNet121": [[81, 83], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "", "", ""]]}