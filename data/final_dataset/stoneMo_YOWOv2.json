{"home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.parse_cfg": [[4, 35], ["open", "open.readline", "open.close", "fp.readline.rstrip", "open.readline", "blocks.append", "open.readline", "dict", "fp.readline.lstrip().rstrip", "fp.readline.split", "key.strip.strip", "value.strip.strip", "blocks.append", "fp.readline.lstrip"], "function", ["None"], ["def", "parse_cfg", "(", "cfgfile", ")", ":", "\n", "    ", "blocks", "=", "[", "]", "\n", "fp", "=", "open", "(", "cfgfile", ",", "'r'", ")", "\n", "block", "=", "None", "\n", "line", "=", "fp", ".", "readline", "(", ")", "\n", "while", "line", "!=", "''", ":", "\n", "        ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "if", "line", "==", "''", "or", "line", "[", "0", "]", "==", "'#'", ":", "\n", "            ", "line", "=", "fp", ".", "readline", "(", ")", "\n", "continue", "\n", "", "elif", "line", "[", "0", "]", "==", "'['", ":", "\n", "            ", "if", "block", ":", "\n", "                ", "blocks", ".", "append", "(", "block", ")", "\n", "", "block", "=", "dict", "(", ")", "\n", "block", "[", "'type'", "]", "=", "line", ".", "lstrip", "(", "'['", ")", ".", "rstrip", "(", "']'", ")", "\n", "# set default value", "\n", "if", "block", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "block", "[", "'batch_normalize'", "]", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "key", ",", "value", "=", "line", ".", "split", "(", "'='", ")", "\n", "key", "=", "key", ".", "strip", "(", ")", "\n", "if", "key", "==", "'type'", ":", "\n", "                ", "key", "=", "'_type'", "\n", "", "value", "=", "value", ".", "strip", "(", ")", "\n", "block", "[", "key", "]", "=", "value", "\n", "", "line", "=", "fp", ".", "readline", "(", ")", "\n", "\n", "", "if", "block", ":", "\n", "        ", "blocks", ".", "append", "(", "block", ")", "\n", "", "fp", ".", "close", "(", ")", "\n", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.print_cfg": [[36, 152], ["print", "int", "int", "int", "int", "int", "int", "print", "out_widths.append", "out_heights.append", "out_filters.append", "int", "int", "print", "out_widths.append", "out_heights.append", "out_filters.append", "print", "out_widths.append", "out_heights.append", "out_filters.append", "print", "out_widths.append", "out_heights.append", "out_filters.append", "print", "out_widths.append", "out_heights.append", "out_filters.append", "int", "print", "out_widths.append", "out_heights.append", "out_filters.append", "block[].split", "out_widths.append", "out_heights.append", "out_filters.append", "len", "print", "print", "out_widths.append", "out_heights.append", "out_filters.append", "int", "len", "print", "int", "print", "out_widths.append", "out_heights.append", "out_filters.append", "int", "int", "int", "print", "out_widths.append", "out_heights.append", "out_filters.append", "print"], "function", ["None"], ["", "def", "print_cfg", "(", "blocks", ")", ":", "\n", "    ", "print", "(", "'layer     filters    size              input                output'", ")", ";", "\n", "prev_width", "=", "416", "\n", "prev_height", "=", "416", "\n", "prev_filters", "=", "3", "\n", "out_filters", "=", "[", "]", "\n", "out_widths", "=", "[", "]", "\n", "out_heights", "=", "[", "]", "\n", "ind", "=", "-", "2", "\n", "for", "block", "in", "blocks", ":", "\n", "        ", "ind", "=", "ind", "+", "1", "\n", "if", "block", "[", "'type'", "]", "==", "'net'", ":", "\n", "            ", "prev_width", "=", "int", "(", "block", "[", "'width'", "]", ")", "\n", "prev_height", "=", "int", "(", "block", "[", "'height'", "]", ")", "\n", "continue", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "            ", "filters", "=", "int", "(", "block", "[", "'filters'", "]", ")", "\n", "kernel_size", "=", "int", "(", "block", "[", "'size'", "]", ")", "\n", "stride", "=", "int", "(", "block", "[", "'stride'", "]", ")", "\n", "is_pad", "=", "int", "(", "block", "[", "'pad'", "]", ")", "\n", "pad", "=", "(", "kernel_size", "-", "1", ")", "/", "2", "if", "is_pad", "else", "0", "\n", "width", "=", "(", "prev_width", "+", "2", "*", "pad", "-", "kernel_size", ")", "/", "stride", "+", "1", "\n", "height", "=", "(", "prev_height", "+", "2", "*", "pad", "-", "kernel_size", ")", "/", "stride", "+", "1", "\n", "print", "(", "'%5d %-6s %4d  %d x %d / %d   %3d x %3d x%4d   ->   %3d x %3d x%4d'", "%", "(", "ind", ",", "'conv'", ",", "filters", ",", "kernel_size", ",", "kernel_size", ",", "stride", ",", "prev_width", ",", "prev_height", ",", "prev_filters", ",", "width", ",", "height", ",", "filters", ")", ")", "\n", "prev_width", "=", "width", "\n", "prev_height", "=", "height", "\n", "prev_filters", "=", "filters", "\n", "out_widths", ".", "append", "(", "prev_width", ")", "\n", "out_heights", ".", "append", "(", "prev_height", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'maxpool'", ":", "\n", "            ", "pool_size", "=", "int", "(", "block", "[", "'size'", "]", ")", "\n", "stride", "=", "int", "(", "block", "[", "'stride'", "]", ")", "\n", "width", "=", "prev_width", "/", "stride", "\n", "height", "=", "prev_height", "/", "stride", "\n", "print", "(", "'%5d %-6s       %d x %d / %d   %3d x %3d x%4d   ->   %3d x %3d x%4d'", "%", "(", "ind", ",", "'max'", ",", "pool_size", ",", "pool_size", ",", "stride", ",", "prev_width", ",", "prev_height", ",", "prev_filters", ",", "width", ",", "height", ",", "filters", ")", ")", "\n", "prev_width", "=", "width", "\n", "prev_height", "=", "height", "\n", "prev_filters", "=", "filters", "\n", "out_widths", ".", "append", "(", "prev_width", ")", "\n", "out_heights", ".", "append", "(", "prev_height", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'avgpool'", ":", "\n", "            ", "width", "=", "1", "\n", "height", "=", "1", "\n", "print", "(", "'%5d %-6s                   %3d x %3d x%4d   ->  %3d'", "%", "(", "ind", ",", "'avg'", ",", "prev_width", ",", "prev_height", ",", "prev_filters", ",", "prev_filters", ")", ")", "\n", "prev_width", "=", "width", "\n", "prev_height", "=", "height", "\n", "prev_filters", "=", "filters", "\n", "out_widths", ".", "append", "(", "prev_width", ")", "\n", "out_heights", ".", "append", "(", "prev_height", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'softmax'", ":", "\n", "            ", "print", "(", "'%5d %-6s                                    ->  %3d'", "%", "(", "ind", ",", "'softmax'", ",", "prev_filters", ")", ")", "\n", "out_widths", ".", "append", "(", "prev_width", ")", "\n", "out_heights", ".", "append", "(", "prev_height", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'cost'", ":", "\n", "            ", "print", "(", "'%5d %-6s                                     ->  %3d'", "%", "(", "ind", ",", "'cost'", ",", "prev_filters", ")", ")", "\n", "out_widths", ".", "append", "(", "prev_width", ")", "\n", "out_heights", ".", "append", "(", "prev_height", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'reorg'", ":", "\n", "            ", "stride", "=", "int", "(", "block", "[", "'stride'", "]", ")", "\n", "filters", "=", "stride", "*", "stride", "*", "prev_filters", "\n", "width", "=", "prev_width", "/", "stride", "\n", "height", "=", "prev_height", "/", "stride", "\n", "print", "(", "'%5d %-6s             / %d   %3d x %3d x%4d   ->   %3d x %3d x%4d'", "%", "(", "ind", ",", "'reorg'", ",", "stride", ",", "prev_width", ",", "prev_height", ",", "prev_filters", ",", "width", ",", "height", ",", "filters", ")", ")", "\n", "prev_width", "=", "width", "\n", "prev_height", "=", "height", "\n", "prev_filters", "=", "filters", "\n", "out_widths", ".", "append", "(", "prev_width", ")", "\n", "out_heights", ".", "append", "(", "prev_height", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'route'", ":", "\n", "            ", "layers", "=", "block", "[", "'layers'", "]", ".", "split", "(", "','", ")", "\n", "layers", "=", "[", "int", "(", "i", ")", "if", "int", "(", "i", ")", ">", "0", "else", "int", "(", "i", ")", "+", "ind", "for", "i", "in", "layers", "]", "\n", "if", "len", "(", "layers", ")", "==", "1", ":", "\n", "                ", "print", "(", "'%5d %-6s %d'", "%", "(", "ind", ",", "'route'", ",", "layers", "[", "0", "]", ")", ")", "\n", "prev_width", "=", "out_widths", "[", "layers", "[", "0", "]", "]", "\n", "prev_height", "=", "out_heights", "[", "layers", "[", "0", "]", "]", "\n", "prev_filters", "=", "out_filters", "[", "layers", "[", "0", "]", "]", "\n", "", "elif", "len", "(", "layers", ")", "==", "2", ":", "\n", "                ", "print", "(", "'%5d %-6s %d %d'", "%", "(", "ind", ",", "'route'", ",", "layers", "[", "0", "]", ",", "layers", "[", "1", "]", ")", ")", "\n", "prev_width", "=", "out_widths", "[", "layers", "[", "0", "]", "]", "\n", "prev_height", "=", "out_heights", "[", "layers", "[", "0", "]", "]", "\n", "assert", "(", "prev_width", "==", "out_widths", "[", "layers", "[", "1", "]", "]", ")", "\n", "assert", "(", "prev_height", "==", "out_heights", "[", "layers", "[", "1", "]", "]", ")", "\n", "prev_filters", "=", "out_filters", "[", "layers", "[", "0", "]", "]", "+", "out_filters", "[", "layers", "[", "1", "]", "]", "\n", "", "out_widths", ".", "append", "(", "prev_width", ")", "\n", "out_heights", ".", "append", "(", "prev_height", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'region'", ":", "\n", "            ", "print", "(", "'%5d %-6s'", "%", "(", "ind", ",", "'detection'", ")", ")", "\n", "out_widths", ".", "append", "(", "prev_width", ")", "\n", "out_heights", ".", "append", "(", "prev_height", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'shortcut'", ":", "\n", "            ", "from_id", "=", "int", "(", "block", "[", "'from'", "]", ")", "\n", "from_id", "=", "from_id", "if", "from_id", ">", "0", "else", "from_id", "+", "ind", "\n", "print", "(", "'%5d %-6s %d'", "%", "(", "ind", ",", "'shortcut'", ",", "from_id", ")", ")", "\n", "prev_width", "=", "out_widths", "[", "from_id", "]", "\n", "prev_height", "=", "out_heights", "[", "from_id", "]", "\n", "prev_filters", "=", "out_filters", "[", "from_id", "]", "\n", "out_widths", ".", "append", "(", "prev_width", ")", "\n", "out_heights", ".", "append", "(", "prev_height", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'connected'", ":", "\n", "            ", "filters", "=", "int", "(", "block", "[", "'output'", "]", ")", "\n", "print", "(", "'%5d %-6s                            %d  ->  %3d'", "%", "(", "ind", ",", "'connected'", ",", "prev_filters", ",", "filters", ")", ")", "\n", "prev_filters", "=", "filters", "\n", "out_widths", ".", "append", "(", "1", ")", "\n", "out_heights", ".", "append", "(", "1", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'unknown type %s'", "%", "(", "block", "[", "'type'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_conv": [[160, 167], ["utils.convert2cpu().numpy().tofile", "utils.convert2cpu().numpy().tofile", "conv_model.bias.data.numpy().tofile", "conv_model.weight.data.numpy().tofile", "utils.convert2cpu().numpy", "utils.convert2cpu().numpy", "conv_model.bias.data.numpy", "conv_model.weight.data.numpy", "utils.convert2cpu", "utils.convert2cpu"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu"], ["", "", "", "def", "save_conv", "(", "fp", ",", "conv_model", ")", ":", "\n", "    ", "if", "conv_model", ".", "bias", ".", "is_cuda", ":", "\n", "        ", "convert2cpu", "(", "conv_model", ".", "bias", ".", "data", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "convert2cpu", "(", "conv_model", ".", "weight", ".", "data", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "", "else", ":", "\n", "        ", "conv_model", ".", "bias", ".", "data", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "conv_model", ".", "weight", ".", "data", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_conv_bn": [[178, 191], ["utils.convert2cpu().numpy().tofile", "utils.convert2cpu().numpy().tofile", "utils.convert2cpu().numpy().tofile", "utils.convert2cpu().numpy().tofile", "utils.convert2cpu().numpy().tofile", "bn_model.bias.data.numpy().tofile", "bn_model.weight.data.numpy().tofile", "bn_model.running_mean.numpy().tofile", "bn_model.running_var.numpy().tofile", "conv_model.weight.data.numpy().tofile", "utils.convert2cpu().numpy", "utils.convert2cpu().numpy", "utils.convert2cpu().numpy", "utils.convert2cpu().numpy", "utils.convert2cpu().numpy", "bn_model.bias.data.numpy", "bn_model.weight.data.numpy", "bn_model.running_mean.numpy", "bn_model.running_var.numpy", "conv_model.weight.data.numpy", "utils.convert2cpu", "utils.convert2cpu", "utils.convert2cpu", "utils.convert2cpu", "utils.convert2cpu"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu"], ["", "", "def", "save_conv_bn", "(", "fp", ",", "conv_model", ",", "bn_model", ")", ":", "\n", "    ", "if", "bn_model", ".", "bias", ".", "is_cuda", ":", "\n", "        ", "convert2cpu", "(", "bn_model", ".", "bias", ".", "data", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "convert2cpu", "(", "bn_model", ".", "weight", ".", "data", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "convert2cpu", "(", "bn_model", ".", "running_mean", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "convert2cpu", "(", "bn_model", ".", "running_var", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "convert2cpu", "(", "conv_model", ".", "weight", ".", "data", ")", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "", "else", ":", "\n", "        ", "bn_model", ".", "bias", ".", "data", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "bn_model", ".", "weight", ".", "data", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "bn_model", ".", "running_mean", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "bn_model", ".", "running_var", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "conv_model", ".", "weight", ".", "data", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_conv": [[192, 201], ["conv_model.weight.numel", "conv_model.bias.numel", "conv_model.bias.data.copy_", "conv_model.weight.data.copy_", "torch.from_numpy", "torch.reshape", "torch.from_numpy"], "function", ["None"], ["", "", "def", "load_conv", "(", "buf", ",", "start", ",", "conv_model", ")", ":", "\n", "    ", "num_w", "=", "conv_model", ".", "weight", ".", "numel", "(", ")", "\n", "num_b", "=", "conv_model", ".", "bias", ".", "numel", "(", ")", "\n", "conv_model", ".", "bias", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "buf", "[", "start", ":", "start", "+", "num_b", "]", ")", ")", ";", "start", "=", "start", "+", "num_b", "\n", "conv_model", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "reshape", "(", "torch", ".", "from_numpy", "(", "buf", "[", "start", ":", "start", "+", "num_w", "]", ")", ",", "(", "\n", "conv_model", ".", "weight", ".", "shape", "[", "0", "]", ",", "conv_model", ".", "weight", ".", "shape", "[", "1", "]", ",", "conv_model", ".", "weight", ".", "shape", "[", "2", "]", ",", "conv_model", ".", "weight", ".", "shape", "[", "3", "]", ")", ")", ")", ";", "\n", "start", "=", "start", "+", "num_w", "\n", "#conv_model.weight.data.copy_(torch.from_numpy(buf[start:start+num_w])); start = start + num_w", "\n", "return", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_conv_bn": [[202, 214], ["conv_model.weight.numel", "bn_model.bias.numel", "bn_model.bias.data.copy_", "bn_model.weight.data.copy_", "bn_model.running_mean.copy_", "bn_model.running_var.copy_", "conv_model.weight.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.reshape", "torch.from_numpy"], "function", ["None"], ["", "def", "load_conv_bn", "(", "buf", ",", "start", ",", "conv_model", ",", "bn_model", ")", ":", "\n", "    ", "num_w", "=", "conv_model", ".", "weight", ".", "numel", "(", ")", "\n", "num_b", "=", "bn_model", ".", "bias", ".", "numel", "(", ")", "\n", "bn_model", ".", "bias", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "buf", "[", "start", ":", "start", "+", "num_b", "]", ")", ")", ";", "start", "=", "start", "+", "num_b", "\n", "bn_model", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "buf", "[", "start", ":", "start", "+", "num_b", "]", ")", ")", ";", "start", "=", "start", "+", "num_b", "\n", "bn_model", ".", "running_mean", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "buf", "[", "start", ":", "start", "+", "num_b", "]", ")", ")", ";", "start", "=", "start", "+", "num_b", "\n", "bn_model", ".", "running_var", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "buf", "[", "start", ":", "start", "+", "num_b", "]", ")", ")", ";", "start", "=", "start", "+", "num_b", "\n", "conv_model", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "reshape", "(", "torch", ".", "from_numpy", "(", "buf", "[", "start", ":", "start", "+", "num_w", "]", ")", ",", "(", "\n", "conv_model", ".", "weight", ".", "shape", "[", "0", "]", ",", "conv_model", ".", "weight", ".", "shape", "[", "1", "]", ",", "conv_model", ".", "weight", ".", "shape", "[", "2", "]", ",", "conv_model", ".", "weight", ".", "shape", "[", "3", "]", ")", ")", ")", ";", "\n", "start", "=", "start", "+", "num_w", "\n", "#conv_model.weight.data.copy_(torch.from_numpy(buf[start:start+num_w])); start = start + num_w", "\n", "return", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_fc": [[217, 223], ["fc_model.weight.numel", "fc_model.bias.numel", "fc_model.bias.data.copy_", "fc_model.weight.data.copy_", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "load_fc", "(", "buf", ",", "start", ",", "fc_model", ")", ":", "\n", "    ", "num_w", "=", "fc_model", ".", "weight", ".", "numel", "(", ")", "\n", "num_b", "=", "fc_model", ".", "bias", ".", "numel", "(", ")", "\n", "fc_model", ".", "bias", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "buf", "[", "start", ":", "start", "+", "num_b", "]", ")", ")", ";", "start", "=", "start", "+", "num_b", "\n", "fc_model", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "buf", "[", "start", ":", "start", "+", "num_w", "]", ")", ")", ";", "start", "=", "start", "+", "num_w", "\n", "return", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_fc": [[224, 227], ["fc_model.bias.data.numpy().tofile", "fc_model.weight.data.numpy().tofile", "fc_model.bias.data.numpy", "fc_model.weight.data.numpy"], "function", ["None"], ["", "def", "save_fc", "(", "fp", ",", "fc_model", ")", ":", "\n", "    ", "fc_model", ".", "bias", ".", "data", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "fc_model", ".", "weight", ".", "data", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.BalancedCrossEntropy.WeightedCrossEntropy": [[9, 18], ["loss.sum", "numpy.dot", "numpy.expand_dims", "numpy.log2", "numpy.log2"], "function", ["None"], ["def", "WeightedCrossEntropy", "(", "logits", ",", "label", ",", "weight", ")", ":", "\n", "    ", "'''\n    :param logits:  net's output, which has reshaped [batch size,num_class]\n    :param label:   Ground Truth which is ont hot encoing and has typr format of [batch size, num_class]\n    :param weight:  a vector that describes every catagory's coefficent whose shape is (num_class,)\n    :return: a scalar \n    '''", "\n", "loss", "=", "np", ".", "dot", "(", "np", ".", "log2", "(", "logits", ")", "*", "label", ",", "np", ".", "expand_dims", "(", "weight", ",", "axis", "=", "1", ")", ")", "+", "np", ".", "log2", "(", "1", "-", "logits", ")", "*", "(", "1", "-", "label", ")", "\n", "return", "loss", ".", "sum", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.opts.parse_opts": [[4, 26], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_opts", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--n_classes'", ",", "default", "=", "24", ",", "type", "=", "int", ",", "help", "=", "'Number of classes (ucf101-24: 24, jhmdb-21: 21)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'ucf101-24'", ",", "type", "=", "str", ",", "help", "=", "'Select dataset from (ucf101-24, jhmdb-21)'", ")", "\n", "parser", ".", "add_argument", "(", "'--begin_epoch'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'Training begins at this epoch. Previous trained model indicated by resume_path is loaded.'", ")", "\n", "parser", ".", "add_argument", "(", "'--end_epoch'", ",", "default", "=", "25", ",", "type", "=", "int", ",", "help", "=", "'Training ends at this epoch.'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Continue training from pretrained (.pth)'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_cfg'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Configuration related to data'", ")", "\n", "parser", ".", "add_argument", "(", "'--cfg_file'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Configuration file'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone_3d'", ",", "default", "=", "'resnext101'", ",", "type", "=", "str", ",", "help", "=", "'(resnext101 | resnet101 | resnet50 | resnet18 | mobilenet_2x | mobilenetv2_1x | shufflenet_2x | shufflenetv2_2x'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone_3d_weights'", ",", "default", "=", "'weights/resnet-18-kinetics.pth'", ",", "type", "=", "str", ",", "help", "=", "'Load pretrained weights for 3d_backbone'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_backbone_3d'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, 3d_backbone is frozen, else it is finetuned.'", ")", "\n", "parser", ".", "set_defaults", "(", "freeze_backbone_3d", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone_2d'", ",", "default", "=", "'darknet19'", ",", "type", "=", "str", ",", "help", "=", "'Currently there is only darknet19'", ")", "\n", "parser", ".", "add_argument", "(", "'--backbone_2d_weights'", ",", "default", "=", "'weights/yolo.weights'", ",", "type", "=", "str", ",", "help", "=", "'Load pretrained weights for 3d_backbone'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_backbone_2d'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, 2d_backbone is frozen, else it is finetuned.'", ")", "\n", "parser", ".", "set_defaults", "(", "freeze_backbone_2d", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, model is not trained, but only evaluated.'", ")", "\n", "parser", ".", "set_defaults", "(", "evaluate", "=", "False", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "", "", ""]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.MaxPoolStride1.__init__": [[13, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MaxPoolStride1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.MaxPoolStride1.forward": [[16, 19], ["torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.pad", "torch.pad", "torch.pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "max_pool2d", "(", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "mode", "=", "'replicate'", ")", ",", "2", ",", "stride", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.Reorg.__init__": [[21, 24], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "Reorg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.Reorg.forward": [[24, 40], ["x.view.view.data.size", "x.view.view.data.size", "x.view.view.data.size", "x.view.view.data.size", "x.view.view.view().transpose().contiguous", "x.view.view.view().transpose().contiguous", "x.view.view.view().transpose().contiguous", "x.view.view.view", "x.view.view.data.dim", "x.view.view.view().transpose", "x.view.view.view().transpose", "x.view.view.view().transpose", "x.view.view.view", "x.view.view.view", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "stride", "=", "self", ".", "stride", "\n", "assert", "(", "x", ".", "data", ".", "dim", "(", ")", "==", "4", ")", "\n", "B", "=", "x", ".", "data", ".", "size", "(", "0", ")", "\n", "C", "=", "x", ".", "data", ".", "size", "(", "1", ")", "\n", "H", "=", "x", ".", "data", ".", "size", "(", "2", ")", "\n", "W", "=", "x", ".", "data", ".", "size", "(", "3", ")", "\n", "assert", "(", "H", "%", "stride", "==", "0", ")", "\n", "assert", "(", "W", "%", "stride", "==", "0", ")", "\n", "ws", "=", "stride", "\n", "hs", "=", "stride", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "H", "//", "hs", ",", "hs", ",", "W", "//", "ws", ",", "ws", ")", ".", "transpose", "(", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "H", "//", "hs", "*", "W", "//", "ws", ",", "hs", "*", "ws", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "hs", "*", "ws", ",", "H", "//", "hs", ",", "W", "//", "ws", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "hs", "*", "ws", "*", "C", ",", "H", "//", "hs", ",", "W", "//", "ws", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.GlobalAvgPool2d.__init__": [[42, 44], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.GlobalAvgPool2d.forward": [[45, 53], ["x.view.view.data.size", "x.view.view.data.size", "x.view.view.data.size", "x.view.view.data.size", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", "=", "x", ".", "data", ".", "size", "(", "0", ")", "\n", "C", "=", "x", ".", "data", ".", "size", "(", "1", ")", "\n", "H", "=", "x", ".", "data", ".", "size", "(", "2", ")", "\n", "W", "=", "x", ".", "data", ".", "size", "(", "3", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "H", ",", "W", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.EmptyModule.__init__": [[56, 58], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EmptyModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.EmptyModule.forward": [[59, 61], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.BasicBlock.__init__": [[89, 98], ["torch.Module.__init__", "linknet.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "linknet.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.conv3x3x3", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.conv3x3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.BasicBlock.forward": [[99, 116], ["linknet.BasicBlock.conv1", "linknet.BasicBlock.bn1", "linknet.BasicBlock.relu", "linknet.BasicBlock.conv2", "linknet.BasicBlock.bn2", "linknet.BasicBlock.relu", "linknet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.LinkNet.__init__": [[120, 227], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "linknet.LinkNet._make_layer", "linknet.LinkNet._make_layer", "linknet.LinkNet._make_layer", "linknet.LinkNet._make_layer", "linknet.LinkNet.modules", "cfg.parse_cfg", "linknet.LinkNet.create_network", "int", "int", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "len", "len"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.parse_cfg", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.Darknet.create_network"], ["    ", "def", "__init__", "(", "self", ",", "cfgfile", ",", "\n", "block", "=", "BasicBlock", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "shortcut_type", "=", "'A'", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "LinkNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# create Resnet-18", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "shortcut_type", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "\n", "# self.resnet_models = self.create_network(self.blocks) # merge conv, bn,leaky", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# create Darknet-19", "\n", "", "", "self", ".", "blocks", "=", "parse_cfg", "(", "cfgfile", ")", "\n", "self", ".", "model_2d", "=", "self", ".", "create_network", "(", "self", ".", "blocks", ")", "# merge conv, bn,leaky", "\n", "self", ".", "loss", "=", "self", ".", "model_2d", "[", "len", "(", "self", ".", "model_2d", ")", "-", "1", "]", "\n", "\n", "self", ".", "width", "=", "int", "(", "self", ".", "blocks", "[", "0", "]", "[", "'width'", "]", ")", "\n", "self", ".", "height", "=", "int", "(", "self", ".", "blocks", "[", "0", "]", "[", "'height'", "]", ")", "\n", "\n", "if", "self", ".", "blocks", "[", "(", "len", "(", "self", ".", "blocks", ")", "-", "1", ")", "]", "[", "'type'", "]", "==", "'region'", ":", "\n", "            ", "self", ".", "anchors", "=", "self", ".", "loss", ".", "anchors", "\n", "self", ".", "num_anchors", "=", "self", ".", "loss", ".", "num_anchors", "\n", "self", ".", "anchor_step", "=", "self", ".", "loss", ".", "anchor_step", "\n", "self", ".", "num_classes", "=", "self", ".", "loss", ".", "num_classes", "\n", "\n", "", "self", ".", "header", "=", "torch", ".", "IntTensor", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "seen", "=", "0", "\n", "\n", "# link conv layers", "\n", "self", ".", "link_cov_1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "64", ",", "32", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv3d", "(", "32", ",", "64", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", ")", "\n", "\n", "self", ".", "link_cov_2", "=", "nn", ".", "Sequential", "(", "\n", "\n", "nn", ".", "Conv3d", "(", "128", ",", "64", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv3d", "(", "64", ",", "128", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "link_cov_3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "256", ",", "128", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv3d", "(", "128", ",", "256", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.LinkNet.forward": [[229, 411], ["dict", "linknet.LinkNet.conv1", "linknet.LinkNet.bn1", "linknet.LinkNet.relu", "linknet.LinkNet.maxpool", "linknet.LinkNet.layer1", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "linknet.LinkNet.link_cov_1", "linknet.LinkNet.layer2", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "linknet.LinkNet.link_cov_2", "linknet.LinkNet.layer3", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "linknet.LinkNet.link_cov_3", "linknet.LinkNet.layer4", "block[].split", "len", "int", "int", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "print", "int", "int", "torch.relu", "torch.relu", "torch.relu", "print"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input2D", ",", "input3D", ")", ":", "\n", "        ", "outputs", "=", "dict", "(", ")", "\n", "# input 2D has a shape like 3X224X224, input 3D has a shape like 3X16X224X224", "\n", "# Darknet19-conv1", "\n", "x2", "=", "self", ".", "model_2d", "[", "0", "]", "(", "input2D", ")", "\n", "outputs", "[", "0", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "1", "]", "(", "x2", ")", "# output shape 32X112X112", "\n", "outputs", "[", "1", "]", "=", "x2", "\n", "#print(\"Darknet19-conv1:\",x2.shape)", "\n", "\n", "# Resnet18-conv1", "\n", "x3", "=", "self", ".", "conv1", "(", "input3D", ")", "\n", "x3", "=", "self", ".", "bn1", "(", "x3", ")", "\n", "x3", "=", "self", ".", "relu", "(", "x3", ")", "\n", "x3", "=", "self", ".", "maxpool", "(", "x3", ")", "# output shape 64X8X56X56", "\n", "#print(\"Resnet18-conv1:\",x3.shape)", "\n", "\n", "# Darknet19-conv2", "\n", "x2", "=", "self", ".", "model_2d", "[", "2", "]", "(", "x2", ")", "\n", "outputs", "[", "2", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "3", "]", "(", "x2", ")", "# output shape 64X56X56", "\n", "outputs", "[", "3", "]", "=", "x2", "\n", "#print(\"Darknet19-conv2:\",x2.shape)", "\n", "\n", "# Resnet18-conv2", "\n", "x3", "=", "self", ".", "layer1", "(", "x3", ")", "# output shape 64X8X56X56", "\n", "#print(\"Resnet18-conv2:\",x3.shape)", "\n", "\n", "\n", "# expand x2 to 64X8X56X56 ", "\n", "expand_x2", "=", "torch", ".", "unsqueeze", "(", "x2", ",", "2", ")", "\n", "# print(\"expand_x2:\", expand_x2.shape)", "\n", "expand_x2", "=", "torch", ".", "cat", "(", "(", "expand_x2", ",", "expand_x2", ")", ",", "2", ")", "\n", "# print(\"expand_x2:\", expand_x2.shape)", "\n", "expand_x2", "=", "torch", ".", "cat", "(", "(", "expand_x2", ",", "expand_x2", ")", ",", "2", ")", "\n", "# print(\"expand_x2:\", expand_x2.shape)", "\n", "expand_x2", "=", "torch", ".", "cat", "(", "(", "expand_x2", ",", "expand_x2", ")", ",", "2", ")", "#expand_x2 is 64X8X56X56", "\n", "# print(\"expand_x2:\", expand_x2.shape)", "\n", "\n", "# We can add convolutional layer here. For Resnet18 it is the same size so I use only addition here", "\n", "expand_x2", "=", "self", ".", "link_cov_1", "(", "expand_x2", ")", "\n", "# print(\"expand_x2:\", expand_x2.shape)", "\n", "# add expand_x2 to x3", "\n", "x3", "=", "x3", "+", "expand_x2", "\n", "\n", "# Darknet19-conv3", "\n", "x2", "=", "self", ".", "model_2d", "[", "4", "]", "(", "x2", ")", "\n", "outputs", "[", "4", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "5", "]", "(", "x2", ")", "\n", "outputs", "[", "5", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "6", "]", "(", "x2", ")", "\n", "outputs", "[", "6", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "7", "]", "(", "x2", ")", "# output shape 128X28X28", "\n", "outputs", "[", "7", "]", "=", "x2", "\n", "#print(\"Darknet19-conv3:\",x2.shape)", "\n", "\n", "# Resnet18-conv3", "\n", "x3", "=", "self", ".", "layer2", "(", "x3", ")", "# output shape 128X4X28X28", "\n", "#print(\"Resnet18-conv3:\",x3.shape)", "\n", "\n", "# expand x2 to 128X4X28X28 ", "\n", "expand_x2", "=", "torch", ".", "unsqueeze", "(", "x2", ",", "2", ")", "\n", "expand_x2", "=", "torch", ".", "cat", "(", "(", "expand_x2", ",", "expand_x2", ")", ",", "2", ")", "\n", "# print(\"expand_x2:\", expand_x2.shape)", "\n", "expand_x2", "=", "torch", ".", "cat", "(", "(", "expand_x2", ",", "expand_x2", ")", ",", "2", ")", "\n", "#print(\"expand_x2:\", expand_x2.shape) # expand_x2 is 128X4X28X28", "\n", "\n", "# We can add convolutional layer here. For Resnet18 it is the same size so I use only addition here", "\n", "expand_x2", "=", "self", ".", "link_cov_2", "(", "expand_x2", ")", "\n", "# print(\"expand_x2:\", expand_x2.shape)", "\n", "\n", "# add expand_x2 to x3", "\n", "x3", "=", "x3", "+", "expand_x2", "\n", "\n", "# Darknet19-conv4", "\n", "x2", "=", "self", ".", "model_2d", "[", "8", "]", "(", "x2", ")", "\n", "outputs", "[", "8", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "9", "]", "(", "x2", ")", "\n", "outputs", "[", "9", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "10", "]", "(", "x2", ")", "\n", "outputs", "[", "10", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "11", "]", "(", "x2", ")", "# output shape 256X14X14", "\n", "outputs", "[", "11", "]", "=", "x2", "\n", "#print(\"Darknet19-conv4:\",x2.shape)", "\n", "\n", "# Resnet18-conv4", "\n", "x3", "=", "self", ".", "layer3", "(", "x3", ")", "# output shape 256X2X14X14", "\n", "#print(\"Resnet18-conv4:\",x3.shape)", "\n", "\n", "# expand x2 to 128X4X28X28 ", "\n", "expand_x2", "=", "torch", ".", "unsqueeze", "(", "x2", ",", "2", ")", "\n", "expand_x2", "=", "torch", ".", "cat", "(", "(", "expand_x2", ",", "expand_x2", ")", ",", "2", ")", "\n", "#print(\"expand_x2:\", expand_x2.shape) # expand_x2 is 256X2X14X14", "\n", "\n", "# We can add convolutional layer here. For Resnet18 it is the same size so I use only addition here", "\n", "expand_x2", "=", "self", ".", "link_cov_3", "(", "expand_x2", ")", "\n", "#print(\"expand_x2:\", expand_x2.shape)", "\n", "\n", "# add expand_x2 to x3", "\n", "x3", "=", "x3", "+", "expand_x2", "\n", "\n", "\n", "# Darknet19-conv5", "\n", "x2", "=", "self", ".", "model_2d", "[", "12", "]", "(", "x2", ")", "\n", "outputs", "[", "12", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "13", "]", "(", "x2", ")", "\n", "outputs", "[", "13", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "14", "]", "(", "x2", ")", "\n", "outputs", "[", "14", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "15", "]", "(", "x2", ")", "\n", "outputs", "[", "15", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "16", "]", "(", "x2", ")", "\n", "outputs", "[", "16", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "17", "]", "(", "x2", ")", "# output shape 512X7X7", "\n", "outputs", "[", "17", "]", "=", "x2", "\n", "#print(\"Darknet19-conv5:\",x2.shape)", "\n", "\n", "# Resnet18-conv5", "\n", "x3", "=", "self", ".", "layer4", "(", "x3", ")", "# output shape 512X1X7X7", "\n", "#print(\"Resnet18-conv5:\",x3.shape)", "\n", "\n", "# Darknet19-conv6", "\n", "x2", "=", "self", ".", "model_2d", "[", "18", "]", "(", "x2", ")", "\n", "outputs", "[", "18", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "19", "]", "(", "x2", ")", "\n", "outputs", "[", "19", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "20", "]", "(", "x2", ")", "\n", "outputs", "[", "20", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "21", "]", "(", "x2", ")", "\n", "outputs", "[", "21", "]", "=", "x2", "\n", "x2", "=", "self", ".", "model_2d", "[", "22", "]", "(", "x2", ")", "# output shape 1024X7X7", "\n", "outputs", "[", "22", "]", "=", "x2", "\n", "#print(\"Darknet19-conv6:\",x2.shape)", "\n", "\n", "\n", "ind", "=", "-", "2", "\n", "self", ".", "loss", "=", "None", "\n", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "ind", "=", "ind", "+", "1", "\n", "if", "ind", "<=", "22", ":", "\n", "              ", "continue", "\n", "#if ind > 0:", "\n", "#    return x", "\n", "\n", "", "if", "block", "[", "'type'", "]", "==", "'net'", ":", "\n", "                ", "continue", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'convolutional'", "or", "block", "[", "'type'", "]", "==", "'maxpool'", "or", "block", "[", "'type'", "]", "==", "'reorg'", "or", "block", "[", "'type'", "]", "==", "'avgpool'", "or", "block", "[", "'type'", "]", "==", "'softmax'", "or", "block", "[", "'type'", "]", "==", "'connected'", ":", "\n", "                ", "x2", "=", "self", ".", "model_2d", "[", "ind", "]", "(", "x2", ")", "\n", "outputs", "[", "ind", "]", "=", "x2", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'route'", ":", "\n", "                ", "layers", "=", "block", "[", "'layers'", "]", ".", "split", "(", "','", ")", "\n", "layers", "=", "[", "int", "(", "i", ")", "if", "int", "(", "i", ")", ">", "0", "else", "int", "(", "i", ")", "+", "ind", "for", "i", "in", "layers", "]", "\n", "if", "len", "(", "layers", ")", "==", "1", ":", "\n", "                    ", "x2", "=", "outputs", "[", "layers", "[", "0", "]", "]", "\n", "outputs", "[", "ind", "]", "=", "x2", "\n", "", "elif", "len", "(", "layers", ")", "==", "2", ":", "\n", "                    ", "x_1", "=", "outputs", "[", "layers", "[", "0", "]", "]", "\n", "x_2", "=", "outputs", "[", "layers", "[", "1", "]", "]", "\n", "x2", "=", "torch", ".", "cat", "(", "(", "x_1", ",", "x_2", ")", ",", "1", ")", "\n", "outputs", "[", "ind", "]", "=", "x2", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'shortcut'", ":", "\n", "                ", "from_layer", "=", "int", "(", "block", "[", "'from'", "]", ")", "\n", "activation", "=", "block", "[", "'activation'", "]", "\n", "from_layer", "=", "from_layer", "if", "from_layer", ">", "0", "else", "from_layer", "+", "ind", "\n", "x_1", "=", "outputs", "[", "from_layer", "]", "\n", "x_2", "=", "outputs", "[", "ind", "-", "1", "]", "\n", "x2", "=", "x_1", "+", "x_2", "\n", "if", "activation", "==", "'leaky'", ":", "\n", "                    ", "x2", "=", "F", ".", "leaky_relu", "(", "x", ",", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'relu'", ":", "\n", "                    ", "x2", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "outputs", "[", "ind", "]", "=", "x2", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'region'", ":", "\n", "                ", "continue", "\n", "print", "(", "\"LOSSS\"", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'cost'", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "print", "(", "'unknown type %s'", "%", "(", "block", "[", "'type'", "]", ")", ")", "\n", "# print(x.shape)", "\n", "", "", "return", "x2", ",", "x3", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.LinkNet.print_network": [[412, 414], ["cfg.print_cfg"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.print_cfg"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "print_cfg", "(", "self", ".", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.LinkNet.create_network": [[415, 527], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "int", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "out_filters.append", "torch.ModuleList.append", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "int", "int", "out_filters.append", "torch.ModuleList.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential.add_module", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "linknet.MaxPoolStride1", "linknet.GlobalAvgPool2d", "out_filters.append", "torch.ModuleList.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "torch.Softmax", "out_filters.append", "torch.ModuleList.append", "out_filters.append", "torch.ModuleList.append", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "int", "out_filters.append", "torch.ModuleList.append", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "linknet.Reorg", "block[].split", "len", "out_filters.append", "torch.ModuleList.append", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "len", "linknet.EmptyModule", "len", "out_filters.append", "torch.ModuleList.append", "int", "len", "linknet.EmptyModule", "int", "out_filters.append", "torch.ModuleList.append", "int", "int", "torch.Linear", "torch.Linear", "torch.Linear", "region_loss.RegionLoss", "block[].split", "int", "int", "float", "float", "float", "float", "out_filters.append", "torch.ModuleList.append", "print", "torch.Sequential", "torch.Sequential", "torch.Sequential", "float", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "create_network", "(", "self", ",", "blocks", ")", ":", "\n", "        ", "models", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "prev_filters", "=", "3", "\n", "out_filters", "=", "[", "]", "\n", "conv_id", "=", "0", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "if", "block", "[", "'type'", "]", "==", "'net'", ":", "\n", "                ", "prev_filters", "=", "int", "(", "block", "[", "'channels'", "]", ")", "\n", "continue", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "conv_id", "=", "conv_id", "+", "1", "\n", "batch_normalize", "=", "int", "(", "block", "[", "'batch_normalize'", "]", ")", "\n", "filters", "=", "int", "(", "block", "[", "'filters'", "]", ")", "\n", "kernel_size", "=", "int", "(", "block", "[", "'size'", "]", ")", "\n", "stride", "=", "int", "(", "block", "[", "'stride'", "]", ")", "\n", "is_pad", "=", "int", "(", "block", "[", "'pad'", "]", ")", "\n", "pad", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "if", "is_pad", "else", "0", "\n", "activation", "=", "block", "[", "'activation'", "]", "\n", "model", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "batch_normalize", ":", "\n", "                    ", "model", ".", "add_module", "(", "'conv{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "Conv2d", "(", "prev_filters", ",", "filters", ",", "kernel_size", ",", "stride", ",", "pad", ",", "bias", "=", "False", ")", ")", "\n", "model", ".", "add_module", "(", "'bn{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "BatchNorm2d", "(", "filters", ")", ")", "\n", "#model.add_module('bn{0}'.format(conv_id), BN2d(filters))", "\n", "", "else", ":", "\n", "                    ", "model", ".", "add_module", "(", "'conv{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "Conv2d", "(", "prev_filters", ",", "filters", ",", "kernel_size", ",", "stride", ",", "pad", ")", ")", "\n", "", "if", "activation", "==", "'leaky'", ":", "\n", "                    ", "model", ".", "add_module", "(", "'leaky{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "", "elif", "activation", "==", "'relu'", ":", "\n", "                    ", "model", ".", "add_module", "(", "'relu{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "prev_filters", "=", "filters", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'maxpool'", ":", "\n", "                ", "pool_size", "=", "int", "(", "block", "[", "'size'", "]", ")", "\n", "stride", "=", "int", "(", "block", "[", "'stride'", "]", ")", "\n", "if", "stride", ">", "1", ":", "\n", "                    ", "model", "=", "nn", ".", "MaxPool2d", "(", "pool_size", ",", "stride", ")", "\n", "", "else", ":", "\n", "                    ", "model", "=", "MaxPoolStride1", "(", ")", "\n", "", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'avgpool'", ":", "\n", "                ", "model", "=", "GlobalAvgPool2d", "(", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'softmax'", ":", "\n", "                ", "model", "=", "nn", ".", "Softmax", "(", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'cost'", ":", "\n", "                ", "if", "block", "[", "'_type'", "]", "==", "'sse'", ":", "\n", "                    ", "model", "=", "nn", ".", "MSELoss", "(", "size_average", "=", "True", ")", "\n", "", "elif", "block", "[", "'_type'", "]", "==", "'L1'", ":", "\n", "                    ", "model", "=", "nn", ".", "L1Loss", "(", "size_average", "=", "True", ")", "\n", "", "elif", "block", "[", "'_type'", "]", "==", "'smooth'", ":", "\n", "                    ", "model", "=", "nn", ".", "SmoothL1Loss", "(", "size_average", "=", "True", ")", "\n", "", "out_filters", ".", "append", "(", "1", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'reorg'", ":", "\n", "                ", "stride", "=", "int", "(", "block", "[", "'stride'", "]", ")", "\n", "prev_filters", "=", "stride", "*", "stride", "*", "prev_filters", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "Reorg", "(", "stride", ")", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'route'", ":", "\n", "                ", "layers", "=", "block", "[", "'layers'", "]", ".", "split", "(", "','", ")", "\n", "ind", "=", "len", "(", "models", ")", "\n", "layers", "=", "[", "int", "(", "i", ")", "if", "int", "(", "i", ")", ">", "0", "else", "int", "(", "i", ")", "+", "ind", "for", "i", "in", "layers", "]", "\n", "if", "len", "(", "layers", ")", "==", "1", ":", "\n", "                    ", "prev_filters", "=", "out_filters", "[", "layers", "[", "0", "]", "]", "\n", "", "elif", "len", "(", "layers", ")", "==", "2", ":", "\n", "                    ", "assert", "(", "layers", "[", "0", "]", "==", "ind", "-", "1", ")", "\n", "prev_filters", "=", "out_filters", "[", "layers", "[", "0", "]", "]", "+", "out_filters", "[", "layers", "[", "1", "]", "]", "\n", "", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "EmptyModule", "(", ")", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'shortcut'", ":", "\n", "                ", "ind", "=", "len", "(", "models", ")", "\n", "prev_filters", "=", "out_filters", "[", "ind", "-", "1", "]", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "EmptyModule", "(", ")", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'connected'", ":", "\n", "                ", "filters", "=", "int", "(", "block", "[", "'output'", "]", ")", "\n", "if", "block", "[", "'activation'", "]", "==", "'linear'", ":", "\n", "                    ", "model", "=", "nn", ".", "Linear", "(", "prev_filters", ",", "filters", ")", "\n", "", "elif", "block", "[", "'activation'", "]", "==", "'leaky'", ":", "\n", "                    ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "prev_filters", ",", "filters", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "", "elif", "block", "[", "'activation'", "]", "==", "'relu'", ":", "\n", "                    ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "prev_filters", ",", "filters", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "prev_filters", "=", "filters", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'region'", ":", "\n", "                ", "loss", "=", "RegionLoss", "(", ")", "\n", "anchors", "=", "block", "[", "'anchors'", "]", ".", "split", "(", "','", ")", "\n", "loss", ".", "anchors", "=", "[", "float", "(", "i", ")", "for", "i", "in", "anchors", "]", "\n", "loss", ".", "num_classes", "=", "int", "(", "block", "[", "'classes'", "]", ")", "\n", "loss", ".", "num_anchors", "=", "int", "(", "block", "[", "'num'", "]", ")", "\n", "loss", ".", "anchor_step", "=", "len", "(", "loss", ".", "anchors", ")", "//", "loss", ".", "num_anchors", "\n", "loss", ".", "object_scale", "=", "float", "(", "block", "[", "'object_scale'", "]", ")", "\n", "loss", ".", "noobject_scale", "=", "float", "(", "block", "[", "'noobject_scale'", "]", ")", "\n", "loss", ".", "class_scale", "=", "float", "(", "block", "[", "'class_scale'", "]", ")", "\n", "loss", ".", "coord_scale", "=", "float", "(", "block", "[", "'coord_scale'", "]", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "loss", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'unknown type %s'", "%", "(", "block", "[", "'type'", "]", ")", ")", "\n", "\n", "", "", "return", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.LinkNet.load_weights": [[528, 575], ["open", "numpy.fromfile", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.fromfile", "open.close", "int", "cfg.load_conv_bn", "cfg.load_conv", "cfg.load_fc", "cfg.load_fc", "print"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_conv_bn", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_conv", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_fc", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_fc"], ["", "def", "load_weights", "(", "self", ",", "weightfile", ")", ":", "\n", "        ", "fp", "=", "open", "(", "weightfile", ",", "'rb'", ")", "\n", "header", "=", "np", ".", "fromfile", "(", "fp", ",", "count", "=", "4", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "header", "=", "torch", ".", "from_numpy", "(", "header", ")", "\n", "self", ".", "seen", "=", "self", ".", "header", "[", "3", "]", "\n", "buf", "=", "np", ".", "fromfile", "(", "fp", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp", ".", "close", "(", ")", "\n", "\n", "start", "=", "0", "\n", "ind", "=", "-", "2", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "if", "start", ">=", "buf", ".", "size", ":", "\n", "                ", "break", "\n", "", "ind", "=", "ind", "+", "1", "\n", "if", "block", "[", "'type'", "]", "==", "'net'", ":", "\n", "                ", "continue", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "model", "=", "self", ".", "model_2d", "[", "ind", "]", "\n", "batch_normalize", "=", "int", "(", "block", "[", "'batch_normalize'", "]", ")", "\n", "if", "batch_normalize", ":", "\n", "                    ", "start", "=", "load_conv_bn", "(", "buf", ",", "start", ",", "model", "[", "0", "]", ",", "model", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "start", "=", "load_conv", "(", "buf", ",", "start", ",", "model", "[", "0", "]", ")", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'connected'", ":", "\n", "                ", "model", "=", "self", ".", "model_2d", "[", "ind", "]", "\n", "if", "block", "[", "'activation'", "]", "!=", "'linear'", ":", "\n", "                    ", "start", "=", "load_fc", "(", "buf", ",", "start", ",", "model", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "start", "=", "load_fc", "(", "buf", ",", "start", ",", "model", ")", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'maxpool'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'reorg'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'route'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'shortcut'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'region'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'avgpool'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'softmax'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'cost'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "print", "(", "'unknown type %s'", "%", "(", "block", "[", "'type'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.LinkNet.save_weights": [[577, 622], ["open", "header.numpy().tofile", "range", "open.close", "len", "header.numpy", "int", "cfg.save_conv_bn", "cfg.save_conv", "cfg.save_fc", "cfg.save_fc", "print"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_conv_bn", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_conv", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_fc", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_fc"], ["", "", "", "def", "save_weights", "(", "self", ",", "outfile", ",", "cutoff", "=", "0", ")", ":", "\n", "        ", "if", "cutoff", "<=", "0", ":", "\n", "            ", "cutoff", "=", "len", "(", "self", ".", "blocks", ")", "-", "1", "\n", "\n", "", "fp", "=", "open", "(", "outfile", ",", "'wb'", ")", "\n", "self", ".", "header", "[", "3", "]", "=", "self", ".", "seen", "\n", "header", "=", "self", ".", "header", "\n", "header", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "\n", "ind", "=", "-", "1", "\n", "for", "blockId", "in", "range", "(", "1", ",", "cutoff", "+", "1", ")", ":", "\n", "            ", "ind", "=", "ind", "+", "1", "\n", "block", "=", "self", ".", "blocks", "[", "blockId", "]", "\n", "if", "block", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "model", "=", "self", ".", "model_2d", "[", "ind", "]", "\n", "batch_normalize", "=", "int", "(", "block", "[", "'batch_normalize'", "]", ")", "\n", "if", "batch_normalize", ":", "\n", "                    ", "save_conv_bn", "(", "fp", ",", "model", "[", "0", "]", ",", "model", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "save_conv", "(", "fp", ",", "model", "[", "0", "]", ")", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'connected'", ":", "\n", "                ", "model", "=", "self", ".", "model_2d", "[", "ind", "]", "\n", "if", "block", "[", "'activation'", "]", "!=", "'linear'", ":", "\n", "                    ", "save_fc", "(", "fc", ",", "model", ")", "\n", "", "else", ":", "\n", "                    ", "save_fc", "(", "fc", ",", "model", "[", "0", "]", ")", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'maxpool'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'reorg'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'route'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'shortcut'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'region'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'avgpool'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'softmax'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'cost'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "print", "(", "'unknown type %s'", "%", "(", "block", "[", "'type'", "]", ")", ")", "\n", "", "", "fp", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.LinkNet._make_layer": [[623, 647], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "shortcut_type", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.conv3x3x3": [[62, 71], ["torch.Conv3d"], "function", ["None"], ["", "", "def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.downsample_basic_block": [[73, 84], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.get_fine_tuning_parameters": [[648, 668], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'classifier'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.linknet.resnet18": [[673, 678], ["ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.scale_image_channel": [[13, 18], ["list", "cs[].point", "PIL.Image.merge", "im.split", "tuple"], "function", ["None"], ["def", "scale_image_channel", "(", "im", ",", "c", ",", "v", ")", ":", "\n", "    ", "cs", "=", "list", "(", "im", ".", "split", "(", ")", ")", "\n", "cs", "[", "c", "]", "=", "cs", "[", "c", "]", ".", "point", "(", "lambda", "i", ":", "i", "*", "v", ")", "\n", "out", "=", "Image", ".", "merge", "(", "im", ".", "mode", ",", "tuple", "(", "cs", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.distort_image": [[19, 38], ["im.convert.convert", "list", "cs[].point", "cs[].point", "cs[].point", "PIL.Image.merge", "im.convert.convert", "im.convert.split", "tuple"], "function", ["None"], ["", "def", "distort_image", "(", "im", ",", "hue", ",", "sat", ",", "val", ")", ":", "\n", "    ", "im", "=", "im", ".", "convert", "(", "'HSV'", ")", "\n", "cs", "=", "list", "(", "im", ".", "split", "(", ")", ")", "\n", "cs", "[", "1", "]", "=", "cs", "[", "1", "]", ".", "point", "(", "lambda", "i", ":", "i", "*", "sat", ")", "\n", "cs", "[", "2", "]", "=", "cs", "[", "2", "]", ".", "point", "(", "lambda", "i", ":", "i", "*", "val", ")", "\n", "\n", "def", "change_hue", "(", "x", ")", ":", "\n", "        ", "x", "+=", "hue", "*", "255", "\n", "if", "x", ">", "255", ":", "\n", "            ", "x", "-=", "255", "\n", "", "if", "x", "<", "0", ":", "\n", "            ", "x", "+=", "255", "\n", "", "return", "x", "\n", "", "cs", "[", "0", "]", "=", "cs", "[", "0", "]", ".", "point", "(", "change_hue", ")", "\n", "im", "=", "Image", ".", "merge", "(", "im", ".", "mode", ",", "tuple", "(", "cs", ")", ")", "\n", "\n", "im", "=", "im", ".", "convert", "(", "'RGB'", ")", "\n", "#constrain_image(im)", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.rand_scale": [[39, 44], ["random.uniform", "random.randint"], "function", ["None"], ["", "def", "rand_scale", "(", "s", ")", ":", "\n", "    ", "scale", "=", "random", ".", "uniform", "(", "1", ",", "s", ")", "\n", "if", "(", "random", ".", "randint", "(", "1", ",", "10000", ")", "%", "2", ")", ":", "\n", "        ", "return", "scale", "\n", "", "return", "1.", "/", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.random_distort_image": [[45, 49], ["clip.distort_image"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.distort_image"], ["", "def", "random_distort_image", "(", "im", ",", "dhue", ",", "dsat", ",", "dexp", ")", ":", "\n", "\n", "    ", "res", "=", "distort_image", "(", "im", ",", "dhue", ",", "dsat", ",", "dexp", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.data_augmentation": [[50, 89], ["int", "int", "random.randint", "random.randint", "random.randint", "random.randint", "random.uniform", "clip.rand_scale", "clip.rand_scale", "float", "float", "random.randint", "img.crop", "img.resize", "clip.random_distort_image", "float", "float", "img.transpose"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.rand_scale", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.rand_scale", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.random_distort_image"], ["", "def", "data_augmentation", "(", "clip", ",", "shape", ",", "jitter", ",", "hue", ",", "saturation", ",", "exposure", ")", ":", "\n", "# Initialize Random Variables", "\n", "    ", "oh", "=", "clip", "[", "0", "]", ".", "height", "\n", "ow", "=", "clip", "[", "0", "]", ".", "width", "\n", "\n", "dw", "=", "int", "(", "ow", "*", "jitter", ")", "\n", "dh", "=", "int", "(", "oh", "*", "jitter", ")", "\n", "\n", "pleft", "=", "random", ".", "randint", "(", "-", "dw", ",", "dw", ")", "\n", "pright", "=", "random", ".", "randint", "(", "-", "dw", ",", "dw", ")", "\n", "ptop", "=", "random", ".", "randint", "(", "-", "dh", ",", "dh", ")", "\n", "pbot", "=", "random", ".", "randint", "(", "-", "dh", ",", "dh", ")", "\n", "\n", "swidth", "=", "ow", "-", "pleft", "-", "pright", "\n", "sheight", "=", "oh", "-", "ptop", "-", "pbot", "\n", "\n", "sx", "=", "float", "(", "swidth", ")", "/", "ow", "\n", "sy", "=", "float", "(", "sheight", ")", "/", "oh", "\n", "\n", "dx", "=", "(", "float", "(", "pleft", ")", "/", "ow", ")", "/", "sx", "\n", "dy", "=", "(", "float", "(", "ptop", ")", "/", "oh", ")", "/", "sy", "\n", "\n", "flip", "=", "random", ".", "randint", "(", "1", ",", "10000", ")", "%", "2", "\n", "\n", "dhue", "=", "random", ".", "uniform", "(", "-", "hue", ",", "hue", ")", "\n", "dsat", "=", "rand_scale", "(", "saturation", ")", "\n", "dexp", "=", "rand_scale", "(", "exposure", ")", "\n", "\n", "# Augment", "\n", "cropped", "=", "[", "img", ".", "crop", "(", "(", "pleft", ",", "ptop", ",", "pleft", "+", "swidth", "-", "1", ",", "ptop", "+", "sheight", "-", "1", ")", ")", "for", "img", "in", "clip", "]", "\n", "\n", "sized", "=", "[", "img", ".", "resize", "(", "shape", ")", "for", "img", "in", "cropped", "]", "\n", "\n", "if", "flip", ":", "\n", "        ", "sized", "=", "[", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "for", "img", "in", "sized", "]", "\n", "\n", "", "clip", "=", "[", "random_distort_image", "(", "img", ",", "dhue", ",", "dsat", ",", "dexp", ")", "for", "img", "in", "sized", "]", "\n", "\n", "return", "clip", ",", "flip", ",", "dx", ",", "dy", ",", "sx", ",", "sy", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.fill_truth_detection": [[91, 140], ["numpy.zeros", "os.path.getsize", "numpy.reshape", "numpy.loadtxt", "numpy.reshape", "range", "range", "min", "min", "min", "min", "max", "max", "max", "max"], "function", ["None"], ["", "def", "fill_truth_detection", "(", "labpath", ",", "w", ",", "h", ",", "flip", ",", "dx", ",", "dy", ",", "sx", ",", "sy", ")", ":", "\n", "    ", "max_boxes", "=", "50", "\n", "label", "=", "np", ".", "zeros", "(", "(", "max_boxes", ",", "5", ")", ")", "\n", "if", "os", ".", "path", ".", "getsize", "(", "labpath", ")", ":", "\n", "        ", "bs", "=", "np", ".", "loadtxt", "(", "labpath", ")", "\n", "if", "bs", "is", "None", ":", "\n", "            ", "return", "label", "\n", "", "bs", "=", "np", ".", "reshape", "(", "bs", ",", "(", "-", "1", ",", "5", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "bs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "cx", "=", "(", "bs", "[", "i", "]", "[", "1", "]", "+", "bs", "[", "i", "]", "[", "3", "]", ")", "/", "(", "2", "*", "320", ")", "\n", "cy", "=", "(", "bs", "[", "i", "]", "[", "2", "]", "+", "bs", "[", "i", "]", "[", "4", "]", ")", "/", "(", "2", "*", "240", ")", "\n", "imgw", "=", "(", "bs", "[", "i", "]", "[", "3", "]", "-", "bs", "[", "i", "]", "[", "1", "]", ")", "/", "320", "\n", "imgh", "=", "(", "bs", "[", "i", "]", "[", "4", "]", "-", "bs", "[", "i", "]", "[", "2", "]", ")", "/", "240", "\n", "bs", "[", "i", "]", "[", "0", "]", "=", "bs", "[", "i", "]", "[", "0", "]", "-", "1", "\n", "bs", "[", "i", "]", "[", "1", "]", "=", "cx", "\n", "bs", "[", "i", "]", "[", "2", "]", "=", "cy", "\n", "bs", "[", "i", "]", "[", "3", "]", "=", "imgw", "\n", "bs", "[", "i", "]", "[", "4", "]", "=", "imgh", "\n", "\n", "", "cc", "=", "0", "\n", "for", "i", "in", "range", "(", "bs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "x1", "=", "bs", "[", "i", "]", "[", "1", "]", "-", "bs", "[", "i", "]", "[", "3", "]", "/", "2", "\n", "y1", "=", "bs", "[", "i", "]", "[", "2", "]", "-", "bs", "[", "i", "]", "[", "4", "]", "/", "2", "\n", "x2", "=", "bs", "[", "i", "]", "[", "1", "]", "+", "bs", "[", "i", "]", "[", "3", "]", "/", "2", "\n", "y2", "=", "bs", "[", "i", "]", "[", "2", "]", "+", "bs", "[", "i", "]", "[", "4", "]", "/", "2", "\n", "\n", "x1", "=", "min", "(", "0.999", ",", "max", "(", "0", ",", "x1", "*", "sx", "-", "dx", ")", ")", "\n", "y1", "=", "min", "(", "0.999", ",", "max", "(", "0", ",", "y1", "*", "sy", "-", "dy", ")", ")", "\n", "x2", "=", "min", "(", "0.999", ",", "max", "(", "0", ",", "x2", "*", "sx", "-", "dx", ")", ")", "\n", "y2", "=", "min", "(", "0.999", ",", "max", "(", "0", ",", "y2", "*", "sy", "-", "dy", ")", ")", "\n", "\n", "bs", "[", "i", "]", "[", "1", "]", "=", "(", "x1", "+", "x2", ")", "/", "2", "\n", "bs", "[", "i", "]", "[", "2", "]", "=", "(", "y1", "+", "y2", ")", "/", "2", "\n", "bs", "[", "i", "]", "[", "3", "]", "=", "(", "x2", "-", "x1", ")", "\n", "bs", "[", "i", "]", "[", "4", "]", "=", "(", "y2", "-", "y1", ")", "\n", "\n", "if", "flip", ":", "\n", "                ", "bs", "[", "i", "]", "[", "1", "]", "=", "0.999", "-", "bs", "[", "i", "]", "[", "1", "]", "\n", "\n", "", "if", "bs", "[", "i", "]", "[", "3", "]", "<", "0.001", "or", "bs", "[", "i", "]", "[", "4", "]", "<", "0.001", ":", "\n", "                ", "continue", "\n", "", "label", "[", "cc", "]", "=", "bs", "[", "i", "]", "\n", "cc", "+=", "1", "\n", "if", "cc", ">=", "50", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "label", "=", "np", ".", "reshape", "(", "label", ",", "(", "-", "1", ")", ")", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.load_data_detection": [[141, 214], ["imgpath.split", "len", "int", "os.path.join", "reversed", "os.path.join", "os.path.join", "len", "random.randint", "range", "clip.append", "clip.data_augmentation", "clip.fill_truth_detection", "torch.from_numpy", "torch.zeros", "torch.zeros.view", "torch.zeros.numel", "imgpath.replace", "os.listdir", "len", "os.path.join", "os.path.join", "PIL.Image.open().convert", "torch.from_numpy", "os.listdir", "utils.read_truths_args().astype", "torch.zeros", "PIL.Image.open", "utils.read_truths_args"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.data_augmentation", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.fill_truth_detection", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.read_truths_args"], ["", "def", "load_data_detection", "(", "base_path", ",", "imgpath", ",", "train", ",", "train_dur", ",", "shape", ",", "dataset_use", "=", "'ucf101-24'", ",", "jitter", "=", "0.2", ",", "hue", "=", "0.1", ",", "saturation", "=", "1.5", ",", "exposure", "=", "1.5", ")", ":", "\n", "# clip loading and  data augmentation", "\n", "# if dataset_use == 'ucf101-24':", "\n", "#     base_path = \"/usr/home/sut/datasets/ucf24\"", "\n", "# else:", "\n", "#     base_path = \"/usr/home/sut/Tim-Documents/jhmdb/data/jhmdb\"", "\n", "    ", "im_split", "=", "imgpath", ".", "split", "(", "'/'", ")", "\n", "num_parts", "=", "len", "(", "im_split", ")", "\n", "im_ind", "=", "int", "(", "im_split", "[", "num_parts", "-", "1", "]", "[", "0", ":", "5", "]", ")", "\n", "\n", "if", "dataset_use", "==", "'jhmdb-21'", ":", "\n", "#print(imgpath)", "\n", "        ", "labpath", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'labels'", ",", "imgpath", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "labpath", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'labels'", ",", "im_split", "[", "0", "]", ",", "im_split", "[", "1", "]", ",", "'{:05d}.txt'", ".", "format", "(", "im_ind", ")", ")", "\n", "\n", "", "img_folder", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'rgb-images'", ",", "im_split", "[", "0", "]", ",", "im_split", "[", "1", "]", ")", "\n", "\n", "if", "dataset_use", "==", "'ucf101-24'", ":", "\n", "        ", "max_num", "=", "len", "(", "os", ".", "listdir", "(", "img_folder", ")", ")", "\n", "", "else", ":", "\n", "        ", "max_num", "=", "len", "(", "os", ".", "listdir", "(", "img_folder", ")", ")", "-", "1", "\n", "if", "max_num", "==", "41", ":", "\n", "            ", "max_num", "=", "40", "\n", "\n", "", "", "clip", "=", "[", "]", "\n", "\n", "### We change downsampling rate throughout training as a ###", "\n", "### temporal augmentation, which brings around 1-2 frame ###", "\n", "### mAP. During test time it is set to 1.                ###", "\n", "d", "=", "1", "\n", "if", "train", ":", "\n", "        ", "d", "=", "random", ".", "randint", "(", "1", ",", "2", ")", "\n", "\n", "", "for", "i", "in", "reversed", "(", "range", "(", "train_dur", ")", ")", ":", "\n", "# make it as a loop", "\n", "        ", "i_temp", "=", "im_ind", "-", "i", "*", "d", "\n", "while", "i_temp", "<", "1", ":", "\n", "            ", "i_temp", "=", "max_num", "+", "i_temp", "\n", "", "while", "i_temp", ">", "max_num", ":", "\n", "            ", "i_temp", "=", "i_temp", "-", "max_num", "\n", "\n", "", "if", "dataset_use", "==", "'ucf101-24'", ":", "\n", "            ", "path_tmp", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'rgb-images'", ",", "im_split", "[", "0", "]", ",", "im_split", "[", "1", "]", ",", "'{:05d}.jpg'", ".", "format", "(", "i_temp", ")", ")", "\n", "", "else", ":", "\n", "            ", "path_tmp", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'rgb-images'", ",", "im_split", "[", "0", "]", ",", "im_split", "[", "1", "]", ",", "'{:05d}.png'", ".", "format", "(", "i_temp", ")", ")", "\n", "\n", "", "clip", ".", "append", "(", "Image", ".", "open", "(", "path_tmp", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "", "if", "train", ":", "# Apply augmentation", "\n", "        ", "clip", ",", "flip", ",", "dx", ",", "dy", ",", "sx", ",", "sy", "=", "data_augmentation", "(", "clip", ",", "shape", ",", "jitter", ",", "hue", ",", "saturation", ",", "exposure", ")", "\n", "label", "=", "fill_truth_detection", "(", "labpath", ",", "clip", "[", "0", "]", ".", "width", ",", "clip", "[", "0", "]", ".", "height", ",", "flip", ",", "dx", ",", "dy", ",", "1.", "/", "sx", ",", "1.", "/", "sy", ")", "\n", "label", "=", "torch", ".", "from_numpy", "(", "label", ")", "\n", "\n", "", "else", ":", "# No augmentation", "\n", "        ", "label", "=", "torch", ".", "zeros", "(", "50", "*", "5", ")", "\n", "try", ":", "\n", "            ", "tmp", "=", "torch", ".", "from_numpy", "(", "read_truths_args", "(", "labpath", ",", "8.0", "/", "clip", "[", "0", "]", ".", "width", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "tmp", "=", "torch", ".", "zeros", "(", "1", ",", "5", ")", "\n", "\n", "", "tmp", "=", "tmp", ".", "view", "(", "-", "1", ")", "\n", "tsz", "=", "tmp", ".", "numel", "(", ")", "\n", "\n", "if", "tsz", ">", "50", "*", "5", ":", "\n", "            ", "label", "=", "tmp", "[", "0", ":", "50", "*", "5", "]", "\n", "", "elif", "tsz", ">", "0", ":", "\n", "            ", "label", "[", "0", ":", "tsz", "]", "=", "tmp", "\n", "\n", "", "", "if", "train", ":", "\n", "        ", "return", "clip", ",", "label", "\n", "", "else", ":", "\n", "        ", "return", "im_split", "[", "0", "]", "+", "'_'", "+", "im_split", "[", "1", "]", "+", "'_'", "+", "im_split", "[", "2", "]", ",", "clip", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.load_data_detection_test": [[215, 220], ["clip.get_clip"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.video_mAP.get_clip"], ["", "", "def", "load_data_detection_test", "(", "root", ",", "imgpath", ",", "train_dur", ",", "num_samples", ")", ":", "\n", "\n", "    ", "clip", ",", "label", "=", "get_clip", "(", "root", ",", "imgpath", ",", "train_dur", ",", "num_samples", ")", "\n", "\n", "return", "clip", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.get_clip": [[221, 259], ["imgpath.split", "len", "int", "os.path.join", "os.path.join", "len", "reversed", "torch.zeros", "torch.zeros", "tmp.view.view", "tmp.view.numel", "os.listdir", "range", "os.path.join", "clip.append", "PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "get_clip", "(", "root", ",", "imgpath", ",", "train_dur", ",", "num_samples", ")", ":", "\n", "\n", "    ", "im_split", "=", "imgpath", ".", "split", "(", "'/'", ")", "\n", "num_parts", "=", "len", "(", "im_split", ")", "\n", "im_ind", "=", "int", "(", "im_split", "[", "num_parts", "-", "1", "]", "[", "0", ":", "5", "]", ")", "\n", "\n", "# for UCF101 dataset", "\n", "base_path", "=", "\"/usr/home/sut/datasets/ucf24\"", "\n", "labpath", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'labels'", ",", "im_split", "[", "6", "]", ",", "im_split", "[", "7", "]", ",", "'{:05d}.txt'", ".", "format", "(", "im_ind", ")", ")", "\n", "img_folder", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'rgb-images'", ",", "im_split", "[", "6", "]", ",", "im_split", "[", "7", "]", ")", "\n", "\n", "# for arbitrary videos", "\n", "max_num", "=", "len", "(", "os", ".", "listdir", "(", "img_folder", ")", ")", "\n", "\n", "clip", "=", "[", "]", "\n", "for", "i", "in", "reversed", "(", "range", "(", "train_dur", ")", ")", ":", "\n", "# the clip is created with the trained sample(image) being placed as the last image and 7 adjacent images before it", "\n", "        ", "i_temp", "=", "im_ind", "-", "i", "\n", "if", "i_temp", "<", "1", ":", "\n", "            ", "i_temp", "=", "1", "\n", "", "if", "i_temp", ">", "max_num", ":", "\n", "            ", "i_temp", "=", "max_num", "\n", "\n", "", "path_tmp", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'rgb-images'", ",", "im_split", "[", "6", "]", ",", "im_split", "[", "7", "]", ",", "'{:05d}.jpg'", ".", "format", "(", "i_temp", ")", ")", "\n", "\n", "clip", ".", "append", "(", "Image", ".", "open", "(", "path_tmp", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "", "label", "=", "torch", ".", "zeros", "(", "50", "*", "5", ")", "\n", "tmp", "=", "torch", ".", "zeros", "(", "1", ",", "5", ")", "\n", "tmp", "=", "tmp", ".", "view", "(", "-", "1", ")", "\n", "tsz", "=", "tmp", ".", "numel", "(", ")", "\n", "\n", "if", "tsz", ">", "50", "*", "5", ":", "\n", "        ", "label", "=", "tmp", "[", "0", ":", "50", "*", "5", "]", "\n", "", "elif", "tsz", ">", "0", ":", "\n", "        ", "label", "[", "0", ":", "tsz", "]", "=", "tmp", "\n", "\n", "", "return", "clip", ",", "label", "\n", "", ""]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.eval_results.compute_score_one_class": [[6, 22], ["numpy.zeros", "range", "range", "utils.bbox_iou"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.bbox_iou"], ["def", "compute_score_one_class", "(", "bbox1", ",", "bbox2", ",", "w_iou", "=", "1.0", ",", "w_scores", "=", "1.0", ",", "w_scores_mul", "=", "0.5", ")", ":", "\n", "# bbx: <x1> <y1> <x2> <y2> <class score>", "\n", "    ", "n_bbox1", "=", "bbox1", ".", "shape", "[", "0", "]", "\n", "n_bbox2", "=", "bbox2", ".", "shape", "[", "0", "]", "\n", "# for saving all possible scores between each two bbxes in successive frames", "\n", "scores", "=", "np", ".", "zeros", "(", "[", "n_bbox1", ",", "n_bbox2", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "n_bbox1", ")", ":", "\n", "        ", "box1", "=", "bbox1", "[", "i", ",", ":", "4", "]", "\n", "for", "j", "in", "range", "(", "n_bbox2", ")", ":", "\n", "            ", "box2", "=", "bbox2", "[", "j", ",", ":", "4", "]", "\n", "bbox_iou_frames", "=", "bbox_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "True", ")", "\n", "sum_score_frames", "=", "bbox1", "[", "i", ",", "4", "]", "+", "bbox2", "[", "j", ",", "4", "]", "\n", "mul_score_frames", "=", "bbox1", "[", "i", ",", "4", "]", "*", "bbox2", "[", "j", ",", "4", "]", "\n", "scores", "[", "i", ",", "j", "]", "=", "w_iou", "*", "bbox_iou_frames", "+", "w_scores", "*", "sum_score_frames", "+", "w_scores_mul", "*", "mul_score_frames", "\n", "\n", "", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.eval_results.link_bbxes_between_frames": [[23, 88], ["len", "range", "len", "numpy.zeros", "eval_results.compute_score_one_class", "numpy.any", "range", "numpy.argmax", "range", "numpy.empty", "range", "res.append", "numpy.array", "ind_notempty.append", "len", "range", "range", "numpy.zeros", "numpy.max", "numpy.argmax", "numpy.ones", "numpy.arange", "numpy.delete", "len", "numpy.ones", "numpy.delete", "numpy.delete", "numpy.abs", "numpy.argmin", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.eval_results.compute_score_one_class"], ["", "def", "link_bbxes_between_frames", "(", "bbox_list", ",", "w_iou", "=", "1.0", ",", "w_scores", "=", "1.0", ",", "w_scores_mul", "=", "0.5", ")", ":", "\n", "# bbx_list: list of bounding boxes <x1> <y1> <x2> <y2> <class score>", "\n", "# check no empty detections", "\n", "    ", "ind_notempty", "=", "[", "]", "\n", "nfr", "=", "len", "(", "bbox_list", ")", "\n", "for", "i", "in", "range", "(", "nfr", ")", ":", "\n", "        ", "if", "np", ".", "array", "(", "bbox_list", "[", "i", "]", ")", ".", "size", ":", "\n", "            ", "ind_notempty", ".", "append", "(", "i", ")", "\n", "# no detections at all", "\n", "", "", "if", "not", "ind_notempty", ":", "\n", "        ", "return", "[", "]", "\n", "# miss some frames", "\n", "", "elif", "len", "(", "ind_notempty", ")", "!=", "nfr", ":", "\n", "        ", "for", "i", "in", "range", "(", "nfr", ")", ":", "\n", "            ", "if", "not", "np", ".", "array", "(", "bbox_list", "[", "i", "]", ")", ".", "size", ":", "\n", "# copy the nearest detections to fill in the missing frames", "\n", "                ", "ind_dis", "=", "np", ".", "abs", "(", "np", ".", "array", "(", "ind_notempty", ")", "-", "i", ")", "\n", "nn", "=", "np", ".", "argmin", "(", "ind_dis", ")", "\n", "bbox_list", "[", "i", "]", "=", "bbox_list", "[", "ind_notempty", "[", "nn", "]", "]", "\n", "\n", "\n", "", "", "", "detect", "=", "bbox_list", "\n", "nframes", "=", "len", "(", "detect", ")", "\n", "res", "=", "[", "]", "\n", "\n", "isempty_vertex", "=", "np", ".", "zeros", "(", "[", "nframes", ",", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "edge_scores", "=", "[", "compute_score_one_class", "(", "detect", "[", "i", "]", ",", "detect", "[", "i", "+", "1", "]", ",", "w_iou", "=", "w_iou", ",", "w_scores", "=", "w_scores", ",", "w_scores_mul", "=", "w_scores_mul", ")", "for", "i", "in", "range", "(", "nframes", "-", "1", ")", "]", "\n", "copy_edge_scores", "=", "edge_scores", "\n", "\n", "while", "not", "np", ".", "any", "(", "isempty_vertex", ")", ":", "\n", "# initialize", "\n", "        ", "scores", "=", "[", "np", ".", "zeros", "(", "[", "d", ".", "shape", "[", "0", "]", ",", "]", ",", "dtype", "=", "np", ".", "float32", ")", "for", "d", "in", "detect", "]", "\n", "index", "=", "[", "np", ".", "nan", "*", "np", ".", "ones", "(", "[", "d", ".", "shape", "[", "0", "]", ",", "]", ",", "dtype", "=", "np", ".", "float32", ")", "for", "d", "in", "detect", "]", "\n", "# viterbi", "\n", "# from the second last frame back", "\n", "for", "i", "in", "range", "(", "nframes", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "edge_score", "=", "edge_scores", "[", "i", "]", "+", "scores", "[", "i", "+", "1", "]", "\n", "# find the maximum score for each bbox in the i-th frame and the corresponding index", "\n", "scores", "[", "i", "]", "=", "np", ".", "max", "(", "edge_score", ",", "axis", "=", "1", ")", "\n", "index", "[", "i", "]", "=", "np", ".", "argmax", "(", "edge_score", ",", "axis", "=", "1", ")", "\n", "# decode", "\n", "", "idx", "=", "-", "np", ".", "ones", "(", "[", "nframes", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "idx", "[", "0", "]", "=", "np", ".", "argmax", "(", "scores", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "nframes", "-", "1", ")", ":", "\n", "            ", "idx", "[", "i", "+", "1", "]", "=", "index", "[", "i", "]", "[", "idx", "[", "i", "]", "]", "\n", "# remove covered boxes and build output structures", "\n", "", "this", "=", "np", ".", "empty", "(", "(", "nframes", ",", "6", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "this", "[", ":", ",", "0", "]", "=", "1", "+", "np", ".", "arange", "(", "nframes", ")", "\n", "for", "i", "in", "range", "(", "nframes", ")", ":", "\n", "            ", "j", "=", "idx", "[", "i", "]", "\n", "iouscore", "=", "0", "\n", "if", "i", "<", "nframes", "-", "1", ":", "\n", "                ", "iouscore", "=", "copy_edge_scores", "[", "i", "]", "[", "j", ",", "idx", "[", "i", "+", "1", "]", "]", "-", "bbox_list", "[", "i", "]", "[", "j", ",", "4", "]", "-", "bbox_list", "[", "i", "+", "1", "]", "[", "idx", "[", "i", "+", "1", "]", ",", "4", "]", "\n", "\n", "", "if", "i", "<", "nframes", "-", "1", ":", "edge_scores", "[", "i", "]", "=", "np", ".", "delete", "(", "edge_scores", "[", "i", "]", ",", "j", ",", "0", ")", "\n", "if", "i", ">", "0", ":", "edge_scores", "[", "i", "-", "1", "]", "=", "np", ".", "delete", "(", "edge_scores", "[", "i", "-", "1", "]", ",", "j", ",", "1", ")", "\n", "this", "[", "i", ",", "1", ":", "5", "]", "=", "detect", "[", "i", "]", "[", "j", ",", ":", "4", "]", "\n", "this", "[", "i", ",", "5", "]", "=", "detect", "[", "i", "]", "[", "j", ",", "4", "]", "\n", "detect", "[", "i", "]", "=", "np", ".", "delete", "(", "detect", "[", "i", "]", ",", "j", ",", "0", ")", "\n", "isempty_vertex", "[", "i", "]", "=", "(", "detect", "[", "i", "]", ".", "size", "==", "0", ")", "# it is true when there is no detection in any frame", "\n", "", "res", ".", "append", "(", "this", ")", "\n", "if", "len", "(", "res", ")", "==", "3", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.eval_results.link_video_one_class": [[90, 117], ["eval_results.link_bbxes_between_frames", "len", "range", "utils.nms_3d", "len", "numpy.mean", "numpy.array", "range", "temporal_check", "len"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.eval_results.link_bbxes_between_frames", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.nms_3d"], ["", "def", "link_video_one_class", "(", "vid_det", ",", "bNMS3d", "=", "False", ",", "gtlen", "=", "None", ")", ":", "\n", "    ", "'''\n    linking for one class in a video (in full length)\n    vid_det: a list of [frame_index, [bbox cls_score]]\n    gtlen: the mean length of gt in training set\n    return a list of tube [array[frame_index, x1,y1,x2,y2, cls_score]]\n    '''", "\n", "# list of bbox information [[bbox in frame 1], [bbox in frame 2], ...]", "\n", "vdets", "=", "[", "vid_det", "[", "i", "]", "[", "1", "]", "for", "i", "in", "range", "(", "len", "(", "vid_det", ")", ")", "]", "\n", "vres", "=", "link_bbxes_between_frames", "(", "vdets", ")", "\n", "if", "len", "(", "vres", ")", "!=", "0", ":", "\n", "        ", "if", "bNMS3d", ":", "\n", "            ", "tube", "=", "[", "b", "[", ":", ",", ":", "5", "]", "for", "b", "in", "vres", "]", "\n", "# compute score for each tube", "\n", "tube_scores", "=", "[", "np", ".", "mean", "(", "b", "[", ":", ",", "5", "]", ")", "for", "b", "in", "vres", "]", "\n", "dets", "=", "[", "(", "tube", "[", "t", "]", ",", "tube_scores", "[", "t", "]", ")", "for", "t", "in", "range", "(", "len", "(", "tube", ")", ")", "]", "\n", "# nms for tubes", "\n", "keep", "=", "nms_3d", "(", "dets", ",", "0.3", ")", "# bug for nms3dt", "\n", "if", "np", ".", "array", "(", "keep", ")", ".", "size", ":", "\n", "                ", "vres_keep", "=", "[", "vres", "[", "k", "]", "for", "k", "in", "keep", "]", "\n", "# max subarray with penalization -|Lc-L|/Lc", "\n", "if", "gtlen", ":", "\n", "                    ", "vres", "=", "temporal_check", "(", "vres_keep", ",", "gtlen", ")", "\n", "", "else", ":", "\n", "                    ", "vres", "=", "vres_keep", "\n", "\n", "", "", "", "", "return", "vres", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.eval_results.video_ap_one_class": [[119, 181], ["numpy.argsort", "numpy.empty", "len", "enumerate", "utils.voc_ap", "eval_results.link_video_one_class", "pred.append", "numpy.array", "enumerate", "float", "float", "float", "float", "len", "len", "numpy.mean", "gt_this.append", "gt_this_index.append", "numpy.array", "numpy.argmax", "numpy.array", "utils.iou3dt", "numpy.array", "numpy.array", "numpy.array", "utils.iou3d", "utils.iou3d", "utils.iou3d", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.voc_ap", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.eval_results.link_video_one_class", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.iou3dt", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.iou3d", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.iou3d", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.iou3d"], ["", "def", "video_ap_one_class", "(", "gt", ",", "pred_videos", ",", "iou_thresh", "=", "0.2", ",", "bTemporal", "=", "False", ",", "gtlen", "=", "None", ")", ":", "\n", "    ", "'''\n    gt: [ video_index, array[frame_index, x1,y1,x2,y2] ]\n    pred_videos: [ video_index, [ [frame_index, [[x1,y1,x2,y2, score]] ] ] ]\n    '''", "\n", "# link for prediction", "\n", "pred", "=", "[", "]", "\n", "for", "pred_v", "in", "pred_videos", ":", "\n", "        ", "video_index", "=", "pred_v", "[", "0", "]", "\n", "pred_link_v", "=", "link_video_one_class", "(", "pred_v", "[", "1", "]", ",", "True", ",", "gtlen", ")", "# [array<frame_index, x1,y1,x2,y2, cls_score>]", "\n", "for", "tube", "in", "pred_link_v", ":", "\n", "            ", "pred", ".", "append", "(", "(", "video_index", ",", "tube", ")", ")", "\n", "\n", "# sort tubes according to scores (descending order)", "\n", "", "", "argsort_scores", "=", "np", ".", "argsort", "(", "-", "np", ".", "array", "(", "[", "np", ".", "mean", "(", "b", "[", ":", ",", "5", "]", ")", "for", "_", ",", "b", "in", "pred", "]", ")", ")", "\n", "pr", "=", "np", ".", "empty", "(", "(", "len", "(", "pred", ")", "+", "1", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# precision, recall", "\n", "pr", "[", "0", ",", "0", "]", "=", "1.0", "\n", "pr", "[", "0", ",", "1", "]", "=", "0.0", "\n", "fn", "=", "len", "(", "gt", ")", "#sum([len(a[1]) for a in gt])", "\n", "fp", "=", "0", "\n", "tp", "=", "0", "\n", "\n", "gt_v_index", "=", "[", "g", "[", "0", "]", "for", "g", "in", "gt", "]", "\n", "for", "i", ",", "k", "in", "enumerate", "(", "argsort_scores", ")", ":", "\n", "# if i % 100 == 0:", "\n", "#     print (\"%6.2f%% boxes processed, %d positives found, %d remain\" %(100*float(i)/argsort_scores.size, tp, fn))", "\n", "        ", "video_index", ",", "boxes", "=", "pred", "[", "k", "]", "\n", "ispositive", "=", "False", "\n", "if", "video_index", "in", "gt_v_index", ":", "\n", "            ", "gt_this_index", ",", "gt_this", "=", "[", "]", ",", "[", "]", "\n", "for", "j", ",", "g", "in", "enumerate", "(", "gt", ")", ":", "\n", "                ", "if", "g", "[", "0", "]", "==", "video_index", ":", "\n", "                    ", "gt_this", ".", "append", "(", "g", "[", "1", "]", ")", "\n", "gt_this_index", ".", "append", "(", "j", ")", "\n", "", "", "if", "len", "(", "gt_this", ")", ">", "0", ":", "\n", "                ", "if", "bTemporal", ":", "\n", "                    ", "iou", "=", "np", ".", "array", "(", "[", "iou3dt", "(", "np", ".", "array", "(", "g", ")", ",", "boxes", "[", ":", ",", ":", "5", "]", ")", "for", "g", "in", "gt_this", "]", ")", "\n", "", "else", ":", "\n", "                    ", "if", "boxes", ".", "shape", "[", "0", "]", ">", "gt_this", "[", "0", "]", ".", "shape", "[", "0", "]", ":", "\n", "# in case some frame don't have gt ", "\n", "                        ", "iou", "=", "np", ".", "array", "(", "[", "iou3d", "(", "g", ",", "boxes", "[", "int", "(", "g", "[", "0", ",", "0", "]", "-", "1", ")", ":", "int", "(", "g", "[", "-", "1", ",", "0", "]", ")", ",", ":", "5", "]", ")", "for", "g", "in", "gt_this", "]", ")", "\n", "", "elif", "boxes", ".", "shape", "[", "0", "]", "<", "gt_this", "[", "0", "]", ".", "shape", "[", "0", "]", ":", "\n", "# in flow case ", "\n", "                        ", "iou", "=", "np", ".", "array", "(", "[", "iou3d", "(", "g", "[", "int", "(", "boxes", "[", "0", ",", "0", "]", "-", "1", ")", ":", "int", "(", "boxes", "[", "-", "1", ",", "0", "]", ")", ",", ":", "]", ",", "boxes", "[", ":", ",", ":", "5", "]", ")", "for", "g", "in", "gt_this", "]", ")", "\n", "", "else", ":", "\n", "                        ", "iou", "=", "np", ".", "array", "(", "[", "iou3d", "(", "g", ",", "boxes", "[", ":", ",", ":", "5", "]", ")", "for", "g", "in", "gt_this", "]", ")", "\n", "\n", "", "", "if", "iou", ".", "size", ">", "0", ":", "# on ucf101 if invalid annotation ....", "\n", "                    ", "argmax", "=", "np", ".", "argmax", "(", "iou", ")", "\n", "if", "iou", "[", "argmax", "]", ">=", "iou_thresh", ":", "\n", "                        ", "ispositive", "=", "True", "\n", "del", "gt", "[", "gt_this_index", "[", "argmax", "]", "]", "\n", "", "", "", "", "if", "ispositive", ":", "\n", "            ", "tp", "+=", "1", "\n", "fn", "-=", "1", "\n", "", "else", ":", "\n", "            ", "fp", "+=", "1", "\n", "", "pr", "[", "i", "+", "1", ",", "0", "]", "=", "float", "(", "tp", ")", "/", "float", "(", "tp", "+", "fp", ")", "\n", "pr", "[", "i", "+", "1", ",", "1", "]", "=", "float", "(", "tp", ")", "/", "float", "(", "tp", "+", "fn", "+", "0.00001", ")", "\n", "", "ap", "=", "voc_ap", "(", "pr", ")", "\n", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.eval_results.gt_to_videts": [[183, 194], ["list", "list.sort", "range", "gt_v.keys", "len", "range", "len", "res.append"], "function", ["None"], ["", "def", "gt_to_videts", "(", "gt_v", ")", ":", "\n", "# return  [label, video_index, [[frame_index, x1,y1,x2,y2], [], []] ]", "\n", "    ", "keys", "=", "list", "(", "gt_v", ".", "keys", "(", ")", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "keys", ")", ")", ":", "\n", "# annotation of the video: tubes and gt_classes", "\n", "        ", "v_annot", "=", "gt_v", "[", "keys", "[", "i", "]", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "v_annot", "[", "'tubes'", "]", ")", ")", ":", "\n", "            ", "res", ".", "append", "(", "[", "v_annot", "[", "'gt_classes'", "]", ",", "i", "+", "1", ",", "v_annot", "[", "'tubes'", "]", "[", "j", "]", "]", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.eval_results.evaluate_videoAP": [[196, 248], ["eval_results.gt_to_videts", "eval_results.evaluate_videoAP.imagebox_to_videts"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.eval_results.gt_to_videts"], ["", "def", "evaluate_videoAP", "(", "gt_videos", ",", "all_boxes", ",", "CLASSES", ",", "iou_thresh", "=", "0.2", ",", "bTemporal", "=", "False", ",", "prior_length", "=", "None", ")", ":", "\n", "    ", "'''\n    gt_videos: {vname:{tubes: [[frame_index, x1,y1,x2,y2]], gt_classes: vlabel}} \n    all_boxes: {imgname:{cls_ind:array[x1,y1,x2,y2, cls_score]}}\n    '''", "\n", "def", "imagebox_to_videts", "(", "img_boxes", ",", "CLASSES", ")", ":", "\n", "# image names", "\n", "        ", "keys", "=", "list", "(", "all_boxes", ".", "keys", "(", ")", ")", "\n", "keys", ".", "sort", "(", ")", "\n", "res", "=", "[", "]", "\n", "# without 'background'", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "CLASSES", "[", "0", ":", "]", ")", ":", "\n", "            ", "v_cnt", "=", "1", "\n", "frame_index", "=", "1", "\n", "v_dets", "=", "[", "]", "\n", "cls_ind", "+=", "1", "\n", "# get the directory path of images", "\n", "preVideo", "=", "os", ".", "path", ".", "dirname", "(", "keys", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "keys", ")", ")", ":", "\n", "                ", "curVideo", "=", "os", ".", "path", ".", "dirname", "(", "keys", "[", "i", "]", ")", "\n", "img_cls_dets", "=", "img_boxes", "[", "keys", "[", "i", "]", "]", "[", "cls_ind", "]", "\n", "v_dets", ".", "append", "(", "[", "frame_index", ",", "img_cls_dets", "]", ")", "\n", "frame_index", "+=", "1", "\n", "if", "preVideo", "!=", "curVideo", ":", "\n", "                    ", "preVideo", "=", "curVideo", "\n", "frame_index", "=", "1", "\n", "# tmp_dets = v_dets[-1]", "\n", "del", "v_dets", "[", "-", "1", "]", "\n", "res", ".", "append", "(", "[", "cls_ind", ",", "v_cnt", ",", "v_dets", "]", ")", "\n", "v_cnt", "+=", "1", "\n", "v_dets", "=", "[", "]", "\n", "# v_dets.append(tmp_dets)", "\n", "v_dets", ".", "append", "(", "[", "frame_index", ",", "img_cls_dets", "]", ")", "\n", "frame_index", "+=", "1", "\n", "# the last video", "\n", "# print('num of videos:{}'.format(v_cnt))", "\n", "", "", "res", ".", "append", "(", "[", "cls_ind", ",", "v_cnt", ",", "v_dets", "]", ")", "\n", "", "return", "res", "\n", "\n", "", "gt_videos_format", "=", "gt_to_videts", "(", "gt_videos", ")", "\n", "pred_videos_format", "=", "imagebox_to_videts", "(", "all_boxes", ",", "CLASSES", ")", "\n", "ap_all", "=", "[", "]", "\n", "for", "cls_ind", ",", "cls", "in", "enumerate", "(", "CLASSES", "[", "0", ":", "]", ")", ":", "\n", "        ", "cls_ind", "+=", "1", "\n", "# [ video_index, [[frame_index, x1,y1,x2,y2]] ]", "\n", "gt", "=", "[", "g", "[", "1", ":", "]", "for", "g", "in", "gt_videos_format", "if", "g", "[", "0", "]", "==", "cls_ind", "]", "\n", "pred_cls", "=", "[", "p", "[", "1", ":", "]", "for", "p", "in", "pred_videos_format", "if", "p", "[", "0", "]", "==", "cls_ind", "]", "\n", "cls_len", "=", "None", "\n", "ap", "=", "video_ap_one_class", "(", "gt", ",", "pred_cls", ",", "iou_thresh", ",", "bTemporal", ",", "cls_len", ")", "\n", "ap_all", ".", "append", "(", "ap", ")", "\n", "\n", "", "return", "ap_all", "\n", "", ""]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.train.adjust_learning_rate": [[124, 137], ["range", "len", "len"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "batch", ")", ":", "\n", "    ", "lr", "=", "learning_rate", "\n", "for", "i", "in", "range", "(", "len", "(", "steps", ")", ")", ":", "\n", "        ", "scale", "=", "scales", "[", "i", "]", "if", "i", "<", "len", "(", "scales", ")", "else", "1", "\n", "if", "batch", ">=", "steps", "[", "i", "]", ":", "\n", "            ", "lr", "=", "lr", "*", "scale", "\n", "if", "batch", "==", "steps", "[", "i", "]", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "            ", "break", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "/", "batch_size", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.train.train": [[140, 197], ["time.time", "region_loss.l_x.reset", "region_loss.l_y.reset", "region_loss.l_w.reset", "region_loss.l_h.reset", "region_loss.l_conf.reset", "region_loss.l_cls.reset", "region_loss.l_total.reset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train.adjust_learning_rate", "utils.logging", "model.train", "enumerate", "time.time", "utils.logging", "print", "dataset.listDataset", "train.adjust_learning_rate", "optimizer.zero_grad", "model", "region_loss", "region_loss.backward", "optimizer.step", "data.cuda.cuda", "data.cuda.data.size", "region_loss.l_x.reset", "region_loss.l_y.reset", "region_loss.l_w.reset", "region_loss.l_h.reset", "region_loss.l_conf.reset", "region_loss.l_cls.reset", "region_loss.l_total.reset", "torchvision.transforms.Compose", "len", "torchvision.transforms.ToTensor"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.train.adjust_learning_rate", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.logging", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.train.train", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.logging", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.train.adjust_learning_rate", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset"], ["", "def", "train", "(", "epoch", ")", ":", "\n", "    ", "global", "processed_batches", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "cur_model", "=", "model", ".", "module", "\n", "region_loss", ".", "l_x", ".", "reset", "(", ")", "\n", "region_loss", ".", "l_y", ".", "reset", "(", ")", "\n", "region_loss", ".", "l_w", ".", "reset", "(", ")", "\n", "region_loss", ".", "l_h", ".", "reset", "(", ")", "\n", "region_loss", ".", "l_conf", ".", "reset", "(", ")", "\n", "region_loss", ".", "l_cls", ".", "reset", "(", ")", "\n", "region_loss", ".", "l_total", ".", "reset", "(", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ".", "listDataset", "(", "basepath", ",", "trainlist", ",", "dataset_use", "=", "dataset_use", ",", "shape", "=", "(", "init_width", ",", "init_height", ")", ",", "\n", "shuffle", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ",", "\n", "train", "=", "True", ",", "\n", "seen", "=", "cur_model", ".", "seen", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "clip_duration", "=", "clip_duration", ",", "\n", "num_workers", "=", "num_workers", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "lr", "=", "adjust_learning_rate", "(", "optimizer", ",", "processed_batches", ")", "\n", "logging", "(", "'training at epoch %d, lr %f'", "%", "(", "epoch", ",", "lr", ")", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "processed_batches", ")", "\n", "processed_batches", "=", "processed_batches", "+", "1", "\n", "\n", "if", "use_cuda", ":", "\n", "            ", "data", "=", "data", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "region_loss", ".", "seen", "=", "region_loss", ".", "seen", "+", "data", ".", "data", ".", "size", "(", "0", ")", "\n", "loss", "=", "region_loss", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# save result every 1000 batches", "\n", "if", "processed_batches", "%", "500", "==", "0", ":", "# From time to time, reset averagemeters to see improvements", "\n", "            ", "region_loss", ".", "l_x", ".", "reset", "(", ")", "\n", "region_loss", ".", "l_y", ".", "reset", "(", ")", "\n", "region_loss", ".", "l_w", ".", "reset", "(", ")", "\n", "region_loss", ".", "l_h", ".", "reset", "(", ")", "\n", "region_loss", ".", "l_conf", ".", "reset", "(", ")", "\n", "region_loss", ".", "l_cls", ".", "reset", "(", ")", "\n", "region_loss", ".", "l_total", ".", "reset", "(", ")", "\n", "\n", "", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "logging", "(", "'trained with %f samples/s'", "%", "(", "len", "(", "train_loader", ".", "dataset", ")", "/", "(", "t1", "-", "t0", ")", ")", ")", "\n", "print", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.train.test": [[200, 312], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.logging", "model.eval", "enumerate", "print", "print", "range", "dataset.listDataset", "utils.file_lines", "data.cuda.cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "utils.get_region_boxes", "range", "utils.logging", "torchvision.transforms.Compose", "model", "output.size", "utils.nms", "target[].view", "train.test.truths_length"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.logging", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.file_lines", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.get_region_boxes", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.logging", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.nms"], ["", "def", "test", "(", "epoch", ")", ":", "\n", "    ", "def", "truths_length", "(", "truths", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "            ", "if", "truths", "[", "i", "]", "[", "1", "]", "==", "0", ":", "\n", "                ", "return", "i", "\n", "\n", "", "", "", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ".", "listDataset", "(", "basepath", ",", "testlist", ",", "dataset_use", "=", "dataset_use", ",", "shape", "=", "(", "init_width", ",", "init_height", ")", ",", "\n", "shuffle", "=", "False", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", ",", "train", "=", "False", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "num_classes", "=", "region_loss", ".", "num_classes", "\n", "anchors", "=", "region_loss", ".", "anchors", "\n", "num_anchors", "=", "region_loss", ".", "num_anchors", "\n", "conf_thresh_valid", "=", "0.005", "\n", "total", "=", "0.0", "\n", "proposals", "=", "0.0", "\n", "correct", "=", "0.0", "\n", "fscore", "=", "0.0", "\n", "\n", "correct_classification", "=", "0.0", "\n", "total_detected", "=", "0.0", "\n", "\n", "nbatch", "=", "file_lines", "(", "testlist", ")", "//", "batch_size", "\n", "\n", "logging", "(", "'validation at epoch %d'", "%", "(", "epoch", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "frame_idx", ",", "data", ",", "target", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "if", "use_cuda", ":", "\n", "            ", "data", "=", "data", ".", "cuda", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "data", ")", ".", "data", "\n", "all_boxes", "=", "get_region_boxes", "(", "output", ",", "conf_thresh_valid", ",", "num_classes", ",", "anchors", ",", "num_anchors", ",", "0", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "output", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "boxes", "=", "all_boxes", "[", "i", "]", "\n", "boxes", "=", "nms", "(", "boxes", ",", "nms_thresh", ")", "\n", "if", "dataset_use", "==", "'ucf101-24'", ":", "\n", "                    ", "detection_path", "=", "os", ".", "path", ".", "join", "(", "'ucf_detections'", ",", "'detections_'", "+", "str", "(", "epoch", ")", ",", "frame_idx", "[", "i", "]", ")", "\n", "current_dir", "=", "os", ".", "path", ".", "join", "(", "'ucf_detections'", ",", "'detections_'", "+", "str", "(", "epoch", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'ucf_detections'", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "'ucf_detections'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "current_dir", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "current_dir", ")", "\n", "", "", "else", ":", "\n", "                    ", "detection_path", "=", "os", ".", "path", ".", "join", "(", "'jhmdb_detections'", ",", "'detections_'", "+", "str", "(", "epoch", ")", ",", "frame_idx", "[", "i", "]", ")", "\n", "current_dir", "=", "os", ".", "path", ".", "join", "(", "'jhmdb_detections'", ",", "'detections_'", "+", "str", "(", "epoch", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'jhmdb_detections'", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "'jhmdb_detections'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "current_dir", ")", ":", "\n", "                        ", "os", ".", "mkdir", "(", "current_dir", ")", "\n", "\n", "", "", "with", "open", "(", "detection_path", ",", "'w+'", ")", "as", "f_detect", ":", "\n", "                    ", "for", "box", "in", "boxes", ":", "\n", "                        ", "x1", "=", "round", "(", "float", "(", "box", "[", "0", "]", "-", "box", "[", "2", "]", "/", "2.0", ")", "*", "320.0", ")", "\n", "y1", "=", "round", "(", "float", "(", "box", "[", "1", "]", "-", "box", "[", "3", "]", "/", "2.0", ")", "*", "240.0", ")", "\n", "x2", "=", "round", "(", "float", "(", "box", "[", "0", "]", "+", "box", "[", "2", "]", "/", "2.0", ")", "*", "320.0", ")", "\n", "y2", "=", "round", "(", "float", "(", "box", "[", "1", "]", "+", "box", "[", "3", "]", "/", "2.0", ")", "*", "240.0", ")", "\n", "\n", "det_conf", "=", "float", "(", "box", "[", "4", "]", ")", "\n", "for", "j", "in", "range", "(", "(", "len", "(", "box", ")", "-", "5", ")", "//", "2", ")", ":", "\n", "                            ", "cls_conf", "=", "float", "(", "box", "[", "5", "+", "2", "*", "j", "]", ".", "item", "(", ")", ")", "\n", "\n", "if", "type", "(", "box", "[", "6", "+", "2", "*", "j", "]", ")", "==", "torch", ".", "Tensor", ":", "\n", "                                ", "cls_id", "=", "int", "(", "box", "[", "6", "+", "2", "*", "j", "]", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "                                ", "cls_id", "=", "int", "(", "box", "[", "6", "+", "2", "*", "j", "]", ")", "\n", "", "prob", "=", "det_conf", "*", "cls_conf", "\n", "\n", "f_detect", ".", "write", "(", "str", "(", "int", "(", "box", "[", "6", "]", ")", "+", "1", ")", "+", "' '", "+", "str", "(", "prob", ")", "+", "' '", "+", "str", "(", "x1", ")", "+", "' '", "+", "str", "(", "y1", ")", "+", "' '", "+", "str", "(", "x2", ")", "+", "' '", "+", "str", "(", "y2", ")", "+", "'\\n'", ")", "\n", "", "", "", "truths", "=", "target", "[", "i", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "num_gts", "=", "truths_length", "(", "truths", ")", "\n", "\n", "total", "=", "total", "+", "num_gts", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "                    ", "if", "boxes", "[", "i", "]", "[", "4", "]", ">", "0.25", ":", "\n", "                        ", "proposals", "=", "proposals", "+", "1", "\n", "\n", "", "", "for", "i", "in", "range", "(", "num_gts", ")", ":", "\n", "                    ", "box_gt", "=", "[", "truths", "[", "i", "]", "[", "1", "]", ",", "truths", "[", "i", "]", "[", "2", "]", ",", "truths", "[", "i", "]", "[", "3", "]", ",", "truths", "[", "i", "]", "[", "4", "]", ",", "1.0", ",", "1.0", ",", "truths", "[", "i", "]", "[", "0", "]", "]", "\n", "best_iou", "=", "0", "\n", "best_j", "=", "-", "1", "\n", "for", "j", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "                        ", "iou", "=", "bbox_iou", "(", "box_gt", ",", "boxes", "[", "j", "]", ",", "x1y1x2y2", "=", "False", ")", "\n", "if", "iou", ">", "best_iou", ":", "\n", "                            ", "best_j", "=", "j", "\n", "best_iou", "=", "iou", "\n", "\n", "", "", "if", "best_iou", ">", "iou_thresh", ":", "\n", "                        ", "total_detected", "+=", "1", "\n", "if", "int", "(", "boxes", "[", "best_j", "]", "[", "6", "]", ")", "==", "box_gt", "[", "6", "]", ":", "\n", "                            ", "correct_classification", "+=", "1", "\n", "\n", "", "", "if", "best_iou", ">", "iou_thresh", "and", "int", "(", "boxes", "[", "best_j", "]", "[", "6", "]", ")", "==", "box_gt", "[", "6", "]", ":", "\n", "                        ", "correct", "=", "correct", "+", "1", "\n", "\n", "", "", "", "precision", "=", "1.0", "*", "correct", "/", "(", "proposals", "+", "eps", ")", "\n", "recall", "=", "1.0", "*", "correct", "/", "(", "total", "+", "eps", ")", "\n", "fscore", "=", "2.0", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", "+", "eps", ")", "\n", "logging", "(", "\"[%d/%d] precision: %f, recall: %f, fscore: %f\"", "%", "(", "batch_idx", ",", "nbatch", ",", "precision", ",", "recall", ",", "fscore", ")", ")", "\n", "\n", "", "", "classification_accuracy", "=", "1.0", "*", "correct_classification", "/", "(", "total_detected", "+", "eps", ")", "\n", "locolization_recall", "=", "1.0", "*", "total_detected", "/", "(", "total", "+", "eps", ")", "\n", "\n", "print", "(", "\"Classification accuracy: %.3f\"", "%", "classification_accuracy", ")", "\n", "print", "(", "\"Locolization recall: %.3f\"", "%", "locolization_recall", ")", "\n", "\n", "return", "fscore", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfam.CAM_Module.__init__": [[14, 21], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "CAM_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "\n", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfam.CAM_Module.forward": [[21, 42], ["x.size", "x.view", "x.view().permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "cfam.CAM_Module.softmax", "x.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "[].expand_as", "x.view", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.softmax"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X C X H X W )\n            returns :\n                out : attention value + input feature\n                attention: B X C X C\n        \"\"\"", "\n", "m_batchsize", ",", "C", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", "\n", "proj_key", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "\n", "energy_new", "=", "torch", ".", "max", "(", "energy", ",", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ".", "expand_as", "(", "energy", ")", "-", "energy", "\n", "attention", "=", "self", ".", "softmax", "(", "energy_new", ")", "\n", "proj_value", "=", "x", ".", "view", "(", "m_batchsize", ",", "C", ",", "-", "1", ")", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "attention", ",", "proj_value", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "C", ",", "height", ",", "width", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfam.CFAMBlock.__init__": [[45, 63], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "cfam.CAM_Module", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "CFAMBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "inter_channels", "=", "1024", "\n", "self", ".", "conv_bn_relu1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "inter_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inter_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "conv_bn_relu2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "inter_channels", ",", "inter_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inter_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "sc", "=", "CAM_Module", "(", "inter_channels", ")", "\n", "\n", "self", ".", "conv_bn_relu3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "inter_channels", ",", "inter_channels", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inter_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "conv_out", "=", "nn", ".", "Sequential", "(", "nn", ".", "Dropout2d", "(", "0.1", ",", "False", ")", ",", "nn", ".", "Conv2d", "(", "inter_channels", ",", "out_channels", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfam.CFAMBlock.forward": [[64, 73], ["cfam.CFAMBlock.conv_bn_relu1", "cfam.CFAMBlock.conv_bn_relu2", "cfam.CFAMBlock.sc", "cfam.CFAMBlock.conv_bn_relu3", "cfam.CFAMBlock.conv_out"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "conv_bn_relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_bn_relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "sc", "(", "x", ")", "\n", "x", "=", "self", ".", "conv_bn_relu3", "(", "x", ")", "\n", "output", "=", "self", ".", "conv_out", "(", "x", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.region_loss.RegionLoss.__init__": [[140, 160], ["torch.Module.__init__", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "len"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "0", ",", "anchors", "=", "[", "]", ",", "batch", "=", "16", ",", "num_anchors", "=", "1", ")", ":", "\n", "        ", "super", "(", "RegionLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "batch", "=", "batch", "\n", "self", ".", "anchors", "=", "anchors", "\n", "self", ".", "num_anchors", "=", "num_anchors", "\n", "self", ".", "anchor_step", "=", "len", "(", "anchors", ")", "//", "num_anchors", "# each anchor has 2 parameters", "\n", "self", ".", "coord_scale", "=", "1", "\n", "self", ".", "noobject_scale", "=", "1", "\n", "self", ".", "object_scale", "=", "5", "\n", "self", ".", "class_scale", "=", "1", "\n", "self", ".", "thresh", "=", "0.6", "\n", "self", ".", "seen", "=", "0", "\n", "self", ".", "l_x", "=", "AverageMeter", "(", ")", "\n", "self", ".", "l_y", "=", "AverageMeter", "(", ")", "\n", "self", ".", "l_w", "=", "AverageMeter", "(", ")", "\n", "self", ".", "l_h", "=", "AverageMeter", "(", ")", "\n", "self", ".", "l_conf", "=", "AverageMeter", "(", ")", "\n", "self", ".", "l_cls", "=", "AverageMeter", "(", ")", "\n", "self", ".", "l_total", "=", "AverageMeter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.region_loss.RegionLoss.forward": [[162, 290], ["time.time", "output.view.view.data.size", "output.view.view.data.size", "output.view.view.data.size", "output.view.view.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "output.view.view.index_select().view", "output.view.view.index_select().view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "output.view.view.index_select", "cls[].view.view().transpose().contiguous().view", "time.time", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.linspace().repeat().repeat().view().cuda", "torch.linspace().repeat().repeat().view().cuda", "torch.linspace().repeat().repeat().view().cuda", "torch.linspace().repeat().repeat().view().cuda", "torch.linspace().repeat().t().repeat().view().cuda", "torch.linspace().repeat().t().repeat().view().cuda", "torch.linspace().repeat().t().repeat().view().cuda", "torch.linspace().repeat().t().repeat().view().cuda", "torch.Tensor().view().index_select().cuda", "torch.Tensor().view().index_select().cuda", "torch.Tensor().view().index_select().cuda", "torch.Tensor().view().index_select().cuda", "torch.Tensor().view().index_select().cuda", "torch.Tensor().view().index_select().cuda", "torch.Tensor().view().index_select().cuda", "torch.Tensor().view().index_select().cuda", "anchor_w.repeat().repeat().view.repeat().repeat().view.repeat().repeat().view", "anchor_h.repeat().repeat().view.repeat().repeat().view.repeat().repeat().view", "torch.sigmoid.data.view", "torch.sigmoid.data.view", "torch.sigmoid.data.view", "torch.sigmoid.data.view", "output.view.index_select().view.data.view", "output.view.index_select().view.data.view", "utils.convert2cpu", "time.time", "region_loss.build_targets", "int", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "cls[].view", "time.time", "FocalLoss.FocalLoss.FocalLoss", "time.time", "region_loss.RegionLoss.l_x.update", "region_loss.RegionLoss.l_y.update", "region_loss.RegionLoss.l_w.update", "region_loss.RegionLoss.l_h.update", "region_loss.RegionLoss.l_conf.update", "region_loss.RegionLoss.l_cls.update", "region_loss.RegionLoss.l_total.update", "print", "output.view.view.index_select().view", "output.view.view.index_select().view", "output.view.view.index_select().view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "utils.convert2cpu.transpose().contiguous().view", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "[].long().cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda().sqrt", "torch.autograd.Variable.cuda().sqrt", "torch.autograd.Variable.view().repeat().cuda", "torch.autograd.Variable.view().repeat().cuda", "FocalLoss.FocalLoss.FocalLoss.", "loss_x.data.item", "loss_y.data.item", "loss_w.data.item", "loss_h.data.item", "loss_conf.data.item", "loss_cls.data.item", "loss.data.item", "print", "print", "print", "print", "print", "print", "output.view.view.index_select", "output.view.view.index_select", "torch.linspace().long().cuda", "torch.linspace().long().cuda", "torch.linspace().long().cuda", "torch.linspace().long().cuda", "cls[].view.view().transpose().contiguous", "torch.linspace().repeat().repeat().view", "torch.linspace().repeat().repeat().view", "torch.linspace().repeat().repeat().view", "torch.linspace().repeat().repeat().view", "torch.linspace().repeat().t().repeat().view", "torch.linspace().repeat().t().repeat().view", "torch.linspace().repeat().t().repeat().view", "torch.linspace().repeat().t().repeat().view", "torch.Tensor().view().index_select", "torch.Tensor().view().index_select", "torch.Tensor().view().index_select", "torch.Tensor().view().index_select", "torch.Tensor().view().index_select", "torch.Tensor().view().index_select", "torch.Tensor().view().index_select", "torch.Tensor().view().index_select", "anchor_w.repeat().repeat().view.repeat().repeat().view.repeat().repeat", "anchor_h.repeat().repeat().view.repeat().repeat().view.repeat().repeat", "torch.MSELoss", "torch.MSELoss", "output.view.view.index_select", "output.view.view.index_select", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "output.view.view.index_select", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "utils.convert2cpu.transpose().contiguous", "[].long", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.view().repeat", "torch.autograd.Variable.view().repeat", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.autograd.Variable", "torch.autograd.Variable", "torch.linspace().long", "torch.linspace().long", "torch.linspace().long", "torch.linspace().long", "cls[].view.view().transpose", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().repeat", "torch.linspace().repeat().t().repeat", "torch.linspace().repeat().t().repeat", "torch.linspace().repeat().t().repeat", "torch.linspace().repeat().t().repeat", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "anchor_w.repeat().repeat().view.repeat().repeat().view.repeat", "anchor_h.repeat().repeat().view.repeat().repeat().view.repeat", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "torch.cuda.LongTensor", "utils.convert2cpu.transpose", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "cls[].view.view", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat().t", "torch.linspace().repeat().t", "torch.linspace().repeat().t", "torch.linspace().repeat().t", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.autograd.Variable.view", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace().repeat", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.region_loss.build_targets", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.update"], ["", "def", "forward", "(", "self", ",", "output", ",", "target", ")", ":", "\n", "# output : B*A*(4+1+num_classes)*H*W", "\n", "# B: number of batches", "\n", "# A: number of anchors", "\n", "# 4: 4 parameters for each bounding box", "\n", "# 1: confidence score", "\n", "# num_classes", "\n", "# H: height of the image (in grids)", "\n", "# W: width of the image (in grids)", "\n", "# for each grid cell, there are A*(4+1+num_classes) parameters", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "nB", "=", "output", ".", "data", ".", "size", "(", "0", ")", "\n", "nA", "=", "self", ".", "num_anchors", "\n", "nC", "=", "self", ".", "num_classes", "\n", "nH", "=", "output", ".", "data", ".", "size", "(", "2", ")", "\n", "nW", "=", "output", ".", "data", ".", "size", "(", "3", ")", "\n", "\n", "# resize the output (all parameters for each anchor can be reached)", "\n", "output", "=", "output", ".", "view", "(", "nB", ",", "nA", ",", "(", "5", "+", "nC", ")", ",", "nH", ",", "nW", ")", "\n", "# anchor's parameter tx", "\n", "x", "=", "torch", ".", "sigmoid", "(", "output", ".", "index_select", "(", "2", ",", "Variable", "(", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "0", "]", ")", ")", ")", ".", "view", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", ")", "\n", "# anchor's parameter ty", "\n", "y", "=", "torch", ".", "sigmoid", "(", "output", ".", "index_select", "(", "2", ",", "Variable", "(", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "1", "]", ")", ")", ")", ".", "view", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", ")", "\n", "# anchor's parameter tw", "\n", "w", "=", "output", ".", "index_select", "(", "2", ",", "Variable", "(", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "2", "]", ")", ")", ")", ".", "view", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "# anchor's parameter th", "\n", "h", "=", "output", ".", "index_select", "(", "2", ",", "Variable", "(", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "3", "]", ")", ")", ")", ".", "view", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "# confidence score for each anchor", "\n", "conf", "=", "torch", ".", "sigmoid", "(", "output", ".", "index_select", "(", "2", ",", "Variable", "(", "torch", ".", "cuda", ".", "LongTensor", "(", "[", "4", "]", ")", ")", ")", ".", "view", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", ")", "\n", "# anchor's parameter class label", "\n", "cls", "=", "output", ".", "index_select", "(", "2", ",", "Variable", "(", "torch", ".", "linspace", "(", "5", ",", "5", "+", "nC", "-", "1", ",", "nC", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", ")", "\n", "# resize the data structure so that for every anchor there is a class label in the last dimension", "\n", "cls", "=", "cls", ".", "view", "(", "nB", "*", "nA", ",", "nC", ",", "nH", "*", "nW", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nB", "*", "nA", "*", "nH", "*", "nW", ",", "nC", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "\n", "# for the prediction of localization of each bounding box, there exist 4 parameters (tx, ty, tw, th)", "\n", "pred_boxes", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "4", ",", "nB", "*", "nA", "*", "nH", "*", "nW", ")", "\n", "# tx and ty", "\n", "grid_x", "=", "torch", ".", "linspace", "(", "0", ",", "nW", "-", "1", ",", "nW", ")", ".", "repeat", "(", "nH", ",", "1", ")", ".", "repeat", "(", "nB", "*", "nA", ",", "1", ",", "1", ")", ".", "view", "(", "nB", "*", "nA", "*", "nH", "*", "nW", ")", ".", "cuda", "(", ")", "\n", "grid_y", "=", "torch", ".", "linspace", "(", "0", ",", "nH", "-", "1", ",", "nH", ")", ".", "repeat", "(", "nW", ",", "1", ")", ".", "t", "(", ")", ".", "repeat", "(", "nB", "*", "nA", ",", "1", ",", "1", ")", ".", "view", "(", "nB", "*", "nA", "*", "nH", "*", "nW", ")", ".", "cuda", "(", ")", "\n", "# for each anchor there are anchor_step variables (with the structure num_anchor*anchor_step)", "\n", "# for each row(anchor), the first variable is anchor's width, second is anchor's height", "\n", "# pw and ph", "\n", "anchor_w", "=", "torch", ".", "Tensor", "(", "self", ".", "anchors", ")", ".", "view", "(", "nA", ",", "self", ".", "anchor_step", ")", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ")", ".", "cuda", "(", ")", "\n", "anchor_h", "=", "torch", ".", "Tensor", "(", "self", ".", "anchors", ")", ".", "view", "(", "nA", ",", "self", ".", "anchor_step", ")", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "# for each pixel (grid) repeat the above process (obtain width and height of each grid)", "\n", "anchor_w", "=", "anchor_w", ".", "repeat", "(", "nB", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "nH", "*", "nW", ")", ".", "view", "(", "nB", "*", "nA", "*", "nH", "*", "nW", ")", "\n", "anchor_h", "=", "anchor_h", ".", "repeat", "(", "nB", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "nH", "*", "nW", ")", ".", "view", "(", "nB", "*", "nA", "*", "nH", "*", "nW", ")", "\n", "# prediction of bounding box localization", "\n", "# x.data and y.data: top left corner of the anchor", "\n", "# grid_x, grid_y: tx and ty predictions made by yowo", "\n", "\n", "x_data", "=", "x", ".", "data", ".", "view", "(", "-", "1", ")", "\n", "y_data", "=", "y", ".", "data", ".", "view", "(", "-", "1", ")", "\n", "w_data", "=", "w", ".", "data", ".", "view", "(", "-", "1", ")", "\n", "h_data", "=", "h", ".", "data", ".", "view", "(", "-", "1", ")", "\n", "\n", "pred_boxes", "[", "0", "]", "=", "x_data", "+", "grid_x", "# bx", "\n", "pred_boxes", "[", "1", "]", "=", "y_data", "+", "grid_y", "# by", "\n", "pred_boxes", "[", "2", "]", "=", "torch", ".", "exp", "(", "w_data", ")", "*", "anchor_w", "# bw", "\n", "pred_boxes", "[", "3", "]", "=", "torch", ".", "exp", "(", "h_data", ")", "*", "anchor_h", "# bh", "\n", "# the size -1 is inferred from other dimensions", "\n", "# pred_boxes (nB*nA*nH*nW, 4)", "\n", "pred_boxes", "=", "convert2cpu", "(", "pred_boxes", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "4", ")", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "\n", "nGT", ",", "nCorrect", ",", "coord_mask", ",", "conf_mask", ",", "cls_mask", ",", "tx", ",", "ty", ",", "tw", ",", "th", ",", "tconf", ",", "tcls", "=", "build_targets", "(", "pred_boxes", ",", "target", ".", "data", ",", "self", ".", "anchors", ",", "nA", ",", "nC", ",", "nH", ",", "nW", ",", "self", ".", "noobject_scale", ",", "self", ".", "object_scale", ",", "self", ".", "thresh", ",", "self", ".", "seen", ")", "\n", "cls_mask", "=", "(", "cls_mask", "==", "1", ")", "\n", "#  keep those with high box confidence scores (greater than 0.25) as our final predictions", "\n", "nProposals", "=", "int", "(", "(", "conf", ">", "0.25", ")", ".", "sum", "(", ")", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "tx", "=", "Variable", "(", "tx", ".", "cuda", "(", ")", ")", "\n", "ty", "=", "Variable", "(", "ty", ".", "cuda", "(", ")", ")", "\n", "tw", "=", "Variable", "(", "tw", ".", "cuda", "(", ")", ")", "\n", "th", "=", "Variable", "(", "th", ".", "cuda", "(", ")", ")", "\n", "tconf", "=", "Variable", "(", "tconf", ".", "cuda", "(", ")", ")", "\n", "tcls", "=", "Variable", "(", "tcls", ".", "view", "(", "-", "1", ")", "[", "cls_mask", ".", "view", "(", "-", "1", ")", "]", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "coord_mask", "=", "Variable", "(", "coord_mask", ".", "cuda", "(", ")", ")", "\n", "conf_mask", "=", "Variable", "(", "conf_mask", ".", "cuda", "(", ")", ".", "sqrt", "(", ")", ")", "\n", "cls_mask", "=", "Variable", "(", "cls_mask", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "nC", ")", ".", "cuda", "(", ")", ")", "\n", "cls", "=", "cls", "[", "cls_mask", "]", ".", "view", "(", "-", "1", ",", "nC", ")", "\n", "\n", "t3", "=", "time", ".", "time", "(", ")", "\n", "\n", "# losses between predictions and targets (ground truth)", "\n", "# In total 6 aspects are considered as losses: ", "\n", "# 4 for bounding box location, 2 for prediction confidence and classification seperately", "\n", "loss_x", "=", "self", ".", "coord_scale", "*", "nn", ".", "SmoothL1Loss", "(", "reduction", "=", "'sum'", ")", "(", "x", "*", "coord_mask", ",", "tx", "*", "coord_mask", ")", "/", "2.0", "\n", "loss_y", "=", "self", ".", "coord_scale", "*", "nn", ".", "SmoothL1Loss", "(", "reduction", "=", "'sum'", ")", "(", "y", "*", "coord_mask", ",", "ty", "*", "coord_mask", ")", "/", "2.0", "\n", "loss_w", "=", "self", ".", "coord_scale", "*", "nn", ".", "SmoothL1Loss", "(", "reduction", "=", "'sum'", ")", "(", "w", "*", "coord_mask", ",", "tw", "*", "coord_mask", ")", "/", "2.0", "\n", "loss_h", "=", "self", ".", "coord_scale", "*", "nn", ".", "SmoothL1Loss", "(", "reduction", "=", "'sum'", ")", "(", "h", "*", "coord_mask", ",", "th", "*", "coord_mask", ")", "/", "2.0", "\n", "loss_conf", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "'sum'", ")", "(", "conf", "*", "conf_mask", ",", "tconf", "*", "conf_mask", ")", "/", "2.0", "\n", "\n", "# try focal loss with gamma = 2", "\n", "FL", "=", "FocalLoss", "(", "class_num", "=", "24", ",", "gamma", "=", "2", ",", "size_average", "=", "False", ")", "\n", "loss_cls", "=", "self", ".", "class_scale", "*", "FL", "(", "cls", ",", "tcls", ")", "\n", "\n", "# sum of loss", "\n", "loss", "=", "loss_x", "+", "loss_y", "+", "loss_w", "+", "loss_h", "+", "loss_conf", "+", "loss_cls", "\n", "#print(loss)", "\n", "t4", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "l_x", ".", "update", "(", "loss_x", ".", "data", ".", "item", "(", ")", ",", "self", ".", "batch", ")", "\n", "self", ".", "l_y", ".", "update", "(", "loss_y", ".", "data", ".", "item", "(", ")", ",", "self", ".", "batch", ")", "\n", "self", ".", "l_w", ".", "update", "(", "loss_w", ".", "data", ".", "item", "(", ")", ",", "self", ".", "batch", ")", "\n", "self", ".", "l_h", ".", "update", "(", "loss_h", ".", "data", ".", "item", "(", ")", ",", "self", ".", "batch", ")", "\n", "self", ".", "l_conf", ".", "update", "(", "loss_conf", ".", "data", ".", "item", "(", ")", ",", "self", ".", "batch", ")", "\n", "self", ".", "l_cls", ".", "update", "(", "loss_cls", ".", "data", ".", "item", "(", ")", ",", "self", ".", "batch", ")", "\n", "self", ".", "l_total", ".", "update", "(", "loss", ".", "data", ".", "item", "(", ")", ",", "self", ".", "batch", ")", "\n", "\n", "\n", "if", "False", ":", "\n", "            ", "print", "(", "'-----------------------------------'", ")", "\n", "print", "(", "'        activation : %f'", "%", "(", "t1", "-", "t0", ")", ")", "\n", "print", "(", "' create pred_boxes : %f'", "%", "(", "t2", "-", "t1", ")", ")", "\n", "print", "(", "'     build targets : %f'", "%", "(", "t3", "-", "t2", ")", ")", "\n", "print", "(", "'       create loss : %f'", "%", "(", "t4", "-", "t3", ")", ")", "\n", "print", "(", "'             total : %f'", "%", "(", "t4", "-", "t0", ")", ")", "\n", "", "print", "(", "'%d: nGT %d, recall %d, proposals %d, loss: x %.2f(%.2f), '", "\n", "'y %.2f(%.2f), w %.2f(%.2f), h %.2f(%.2f), conf %.2f(%.2f), '", "\n", "'cls %.2f(%.2f), total %.2f(%.2f)'", "\n", "%", "(", "self", ".", "seen", ",", "nGT", ",", "nCorrect", ",", "nProposals", ",", "self", ".", "l_x", ".", "val", ",", "self", ".", "l_x", ".", "avg", ",", "\n", "self", ".", "l_y", ".", "val", ",", "self", ".", "l_y", ".", "avg", ",", "self", ".", "l_w", ".", "val", ",", "self", ".", "l_w", ".", "avg", ",", "\n", "self", ".", "l_h", ".", "val", ",", "self", ".", "l_h", ".", "avg", ",", "self", ".", "l_conf", ".", "val", ",", "self", ".", "l_conf", ".", "avg", ",", "\n", "self", ".", "l_cls", ".", "val", ",", "self", ".", "l_cls", ".", "avg", ",", "self", ".", "l_total", ".", "val", ",", "self", ".", "l_total", ".", "avg", ")", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.region_loss.build_targets": [[12, 136], ["target.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "builtins.range", "builtins.range", "len", "torch.ones", "torch.ones", "pred_boxes[].t", "torch.zeros", "torch.zeros", "builtins.range", "conf_mask.view", "conf_mask_t[].view", "torch.zeros.zero_", "torch.zeros.zero_", "torch.zeros.fill_", "builtins.range", "torch.FloatTensor().repeat().t", "torch.FloatTensor().repeat().t", "torch.max", "torch.max", "torch.FloatTensor().view().index_select().view().repeat", "torch.FloatTensor().view().index_select().view().repeat", "torch.FloatTensor().view().index_select().view().repeat", "torch.FloatTensor().view().index_select().view().repeat", "torch.FloatTensor().view().index_select().view().repeat.fill_", "torch.FloatTensor().view().index_select().view().repeat.fill_", "int", "int", "builtins.range", "math.log", "math.log", "utils.bbox_iou", "utils.bbox_ious", "utils.bbox_iou", "torch.FloatTensor().repeat", "torch.FloatTensor().repeat", "torch.FloatTensor().view().index_select().view", "torch.FloatTensor().view().index_select().view", "torch.FloatTensor().view().index_select().view", "torch.FloatTensor().view().index_select().view", "pow", "pow", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().view().index_select", "torch.FloatTensor().view().index_select", "torch.FloatTensor().view().index_select", "torch.FloatTensor().view().index_select", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor().view", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.bbox_iou", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.bbox_ious", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.bbox_iou"], ["def", "build_targets", "(", "pred_boxes", ",", "target", ",", "anchors", ",", "num_anchors", ",", "num_classes", ",", "nH", ",", "nW", ",", "noobject_scale", ",", "object_scale", ",", "sil_thresh", ",", "seen", ")", ":", "\n", "# nH, nW here are number of grids in y and x directions (7, 7 here)", "\n", "    ", "nB", "=", "target", ".", "size", "(", "0", ")", "# batch size", "\n", "nA", "=", "num_anchors", "# 5 for our case", "\n", "nC", "=", "num_classes", "\n", "anchor_step", "=", "len", "(", "anchors", ")", "//", "num_anchors", "\n", "conf_mask", "=", "torch", ".", "ones", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "*", "noobject_scale", "\n", "coord_mask", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "cls_mask", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "tx", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "ty", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "tw", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "th", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "tconf", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "tcls", "=", "torch", ".", "zeros", "(", "nB", ",", "nA", ",", "nH", ",", "nW", ")", "\n", "\n", "# for each grid there are nA anchors", "\n", "# nAnchors is the number of anchor for one image", "\n", "nAnchors", "=", "nA", "*", "nH", "*", "nW", "\n", "nPixels", "=", "nH", "*", "nW", "\n", "# for each image", "\n", "for", "b", "in", "xrange", "(", "nB", ")", ":", "\n", "# get all anchor boxes in one image", "\n", "# (4 * nAnchors)", "\n", "        ", "cur_pred_boxes", "=", "pred_boxes", "[", "b", "*", "nAnchors", ":", "(", "b", "+", "1", ")", "*", "nAnchors", "]", ".", "t", "(", ")", "\n", "# initialize iou score for each anchor", "\n", "cur_ious", "=", "torch", ".", "zeros", "(", "nAnchors", ")", "\n", "for", "t", "in", "xrange", "(", "50", ")", ":", "\n", "# for each anchor 4 coordinate parameters, already in the coordinate system for the whole image", "\n", "# this loop is for anchors in each image", "\n", "# for each anchor 5 parameters are available (class, x, y, w, h)", "\n", "            ", "if", "target", "[", "b", "]", "[", "t", "*", "5", "+", "1", "]", "==", "0", ":", "\n", "                ", "break", "\n", "", "gx", "=", "target", "[", "b", "]", "[", "t", "*", "5", "+", "1", "]", "*", "nW", "\n", "gy", "=", "target", "[", "b", "]", "[", "t", "*", "5", "+", "2", "]", "*", "nH", "\n", "gw", "=", "target", "[", "b", "]", "[", "t", "*", "5", "+", "3", "]", "*", "nW", "\n", "gh", "=", "target", "[", "b", "]", "[", "t", "*", "5", "+", "4", "]", "*", "nH", "\n", "# groud truth boxes", "\n", "cur_gt_boxes", "=", "torch", ".", "FloatTensor", "(", "[", "gx", ",", "gy", ",", "gw", ",", "gh", "]", ")", ".", "repeat", "(", "nAnchors", ",", "1", ")", ".", "t", "(", ")", "\n", "# bbox_ious is the iou value between orediction and groud truth", "\n", "cur_ious", "=", "torch", ".", "max", "(", "cur_ious", ",", "bbox_ious", "(", "cur_pred_boxes", ",", "cur_gt_boxes", ",", "x1y1x2y2", "=", "False", ")", ")", "\n", "# if iou > a given threshold, it is seen as it includes an object", "\n", "# conf_mask[b][cur_ious>sil_thresh] = 0", "\n", "", "conf_mask_t", "=", "conf_mask", ".", "view", "(", "nB", ",", "-", "1", ")", "\n", "conf_mask_t", "[", "b", "]", "[", "cur_ious", ">", "sil_thresh", "]", "=", "0", "\n", "conf_mask_tt", "=", "conf_mask_t", "[", "b", "]", ".", "view", "(", "nA", ",", "nH", ",", "nW", ")", "\n", "conf_mask", "[", "b", "]", "=", "conf_mask_tt", "\n", "\n", "", "if", "seen", "<", "12800", ":", "\n", "       ", "if", "anchor_step", "==", "4", ":", "\n", "           ", "tx", "=", "torch", ".", "FloatTensor", "(", "anchors", ")", ".", "view", "(", "nA", ",", "anchor_step", ")", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ")", ".", "view", "(", "1", ",", "nA", ",", "1", ",", "1", ")", ".", "repeat", "(", "nB", ",", "1", ",", "nH", ",", "nW", ")", "\n", "ty", "=", "torch", ".", "FloatTensor", "(", "anchors", ")", ".", "view", "(", "num_anchors", ",", "anchor_step", ")", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ")", ".", "view", "(", "1", ",", "nA", ",", "1", ",", "1", ")", ".", "repeat", "(", "nB", ",", "1", ",", "nH", ",", "nW", ")", "\n", "", "else", ":", "\n", "           ", "tx", ".", "fill_", "(", "0.5", ")", "\n", "ty", ".", "fill_", "(", "0.5", ")", "\n", "", "tw", ".", "zero_", "(", ")", "\n", "th", ".", "zero_", "(", ")", "\n", "coord_mask", ".", "fill_", "(", "1", ")", "\n", "\n", "# number of ground truth", "\n", "", "nGT", "=", "0", "\n", "nCorrect", "=", "0", "\n", "for", "b", "in", "xrange", "(", "nB", ")", ":", "\n", "# anchors for one batch (at least batch size, and for some specific classes, there might exist more than one anchor)", "\n", "        ", "for", "t", "in", "xrange", "(", "50", ")", ":", "\n", "            ", "if", "target", "[", "b", "]", "[", "t", "*", "5", "+", "1", "]", "==", "0", ":", "\n", "                ", "break", "\n", "", "nGT", "=", "nGT", "+", "1", "\n", "best_iou", "=", "0.0", "\n", "best_n", "=", "-", "1", "\n", "min_dist", "=", "10000", "\n", "# the values saved in target is ratios", "\n", "# times by the width and height of the output feature maps nW and nH", "\n", "gx", "=", "target", "[", "b", "]", "[", "t", "*", "5", "+", "1", "]", "*", "nW", "\n", "gy", "=", "target", "[", "b", "]", "[", "t", "*", "5", "+", "2", "]", "*", "nH", "\n", "gi", "=", "int", "(", "gx", ")", "\n", "gj", "=", "int", "(", "gy", ")", "\n", "gw", "=", "target", "[", "b", "]", "[", "t", "*", "5", "+", "3", "]", "*", "nW", "\n", "gh", "=", "target", "[", "b", "]", "[", "t", "*", "5", "+", "4", "]", "*", "nH", "\n", "gt_box", "=", "[", "0", ",", "0", ",", "gw", ",", "gh", "]", "\n", "for", "n", "in", "xrange", "(", "nA", ")", ":", "\n", "# get anchor parameters (2 values)", "\n", "                ", "aw", "=", "anchors", "[", "anchor_step", "*", "n", "]", "\n", "ah", "=", "anchors", "[", "anchor_step", "*", "n", "+", "1", "]", "\n", "anchor_box", "=", "[", "0", ",", "0", ",", "aw", ",", "ah", "]", "\n", "# only consider the size (width and height) of the anchor box", "\n", "iou", "=", "bbox_iou", "(", "anchor_box", ",", "gt_box", ",", "x1y1x2y2", "=", "False", ")", "\n", "if", "anchor_step", "==", "4", ":", "\n", "                    ", "ax", "=", "anchors", "[", "anchor_step", "*", "n", "+", "2", "]", "\n", "ay", "=", "anchors", "[", "anchor_step", "*", "n", "+", "3", "]", "\n", "dist", "=", "pow", "(", "(", "(", "gi", "+", "ax", ")", "-", "gx", ")", ",", "2", ")", "+", "pow", "(", "(", "(", "gj", "+", "ay", ")", "-", "gy", ")", ",", "2", ")", "\n", "# get the best anchor form with the highest iou", "\n", "", "if", "iou", ">", "best_iou", ":", "\n", "                    ", "best_iou", "=", "iou", "\n", "best_n", "=", "n", "\n", "", "elif", "anchor_step", "==", "4", "and", "iou", "==", "best_iou", "and", "dist", "<", "min_dist", ":", "\n", "                    ", "best_iou", "=", "iou", "\n", "best_n", "=", "n", "\n", "min_dist", "=", "dist", "\n", "\n", "# then we determine the parameters for an anchor (4 values together)", "\n", "", "", "gt_box", "=", "[", "gx", ",", "gy", ",", "gw", ",", "gh", "]", "\n", "# find corresponding prediction box", "\n", "pred_box", "=", "pred_boxes", "[", "b", "*", "nAnchors", "+", "best_n", "*", "nPixels", "+", "gj", "*", "nW", "+", "gi", "]", "\n", "\n", "# only consider the best anchor box, for each image", "\n", "coord_mask", "[", "b", "]", "[", "best_n", "]", "[", "gj", "]", "[", "gi", "]", "=", "1", "\n", "cls_mask", "[", "b", "]", "[", "best_n", "]", "[", "gj", "]", "[", "gi", "]", "=", "1", "\n", "# in this cell of the output feature map, there exists an object", "\n", "conf_mask", "[", "b", "]", "[", "best_n", "]", "[", "gj", "]", "[", "gi", "]", "=", "object_scale", "\n", "tx", "[", "b", "]", "[", "best_n", "]", "[", "gj", "]", "[", "gi", "]", "=", "target", "[", "b", "]", "[", "t", "*", "5", "+", "1", "]", "*", "nW", "-", "gi", "\n", "ty", "[", "b", "]", "[", "best_n", "]", "[", "gj", "]", "[", "gi", "]", "=", "target", "[", "b", "]", "[", "t", "*", "5", "+", "2", "]", "*", "nH", "-", "gj", "\n", "tw", "[", "b", "]", "[", "best_n", "]", "[", "gj", "]", "[", "gi", "]", "=", "math", ".", "log", "(", "gw", "/", "anchors", "[", "anchor_step", "*", "best_n", "]", ")", "\n", "th", "[", "b", "]", "[", "best_n", "]", "[", "gj", "]", "[", "gi", "]", "=", "math", ".", "log", "(", "gh", "/", "anchors", "[", "anchor_step", "*", "best_n", "+", "1", "]", ")", "\n", "iou", "=", "bbox_iou", "(", "gt_box", ",", "pred_box", ",", "x1y1x2y2", "=", "False", ")", "# best_iou", "\n", "# confidence equals to iou of the corresponding anchor", "\n", "tconf", "[", "b", "]", "[", "best_n", "]", "[", "gj", "]", "[", "gi", "]", "=", "iou", "\n", "tcls", "[", "b", "]", "[", "best_n", "]", "[", "gj", "]", "[", "gi", "]", "=", "target", "[", "b", "]", "[", "t", "*", "5", "]", "\n", "# if ious larger than 0.5, we justify it as a correct prediction", "\n", "if", "iou", ">", "0.5", ":", "\n", "                ", "nCorrect", "=", "nCorrect", "+", "1", "\n", "\n", "# true values are returned", "\n", "", "", "", "return", "nGT", ",", "nCorrect", ",", "coord_mask", ",", "conf_mask", ",", "cls_mask", ",", "tx", ",", "ty", ",", "tw", ",", "th", ",", "tconf", ",", "tcls", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.dataset.listDataset.__init__": [[16, 37], ["len", "open", "file.readlines", "random.shuffle"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base", ",", "root", ",", "dataset_use", "=", "'ucf101-24'", ",", "shape", "=", "None", ",", "shuffle", "=", "True", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "train", "=", "False", ",", "seen", "=", "0", ",", "batch_size", "=", "64", ",", "\n", "clip_duration", "=", "16", ",", "num_workers", "=", "4", ")", ":", "\n", "        ", "with", "open", "(", "root", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "self", ".", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "\n", "", "if", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "lines", ")", "\n", "\n", "", "self", ".", "base_path", "=", "base", "\n", "self", ".", "dataset_use", "=", "dataset_use", "\n", "self", ".", "nSamples", "=", "len", "(", "self", ".", "lines", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "seen", "=", "seen", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "clip_duration", "=", "clip_duration", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.dataset.listDataset.__len__": [[38, 40], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.dataset.listDataset.__getitem__": [[41, 74], ["dataset.listDataset.lines[].rstrip", "torch.cat().view().permute", "len", "torch.cat().view().permute.load_data_detection", "torch.cat().view().permute.load_data_detection", "dataset.listDataset.target_transform", "img.resize", "dataset.listDataset.transform", "torch.cat().view", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.load_data_detection", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.load_data_detection"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "imgpath", "=", "self", ".", "lines", "[", "index", "]", ".", "rstrip", "(", ")", "\n", "\n", "self", ".", "shape", "=", "(", "224", ",", "224", ")", "\n", "\n", "if", "self", ".", "train", ":", "# For Training", "\n", "            ", "jitter", "=", "0.2", "\n", "hue", "=", "0.1", "\n", "saturation", "=", "1.5", "\n", "exposure", "=", "1.5", "\n", "\n", "clip", ",", "label", "=", "load_data_detection", "(", "self", ".", "base_path", ",", "imgpath", ",", "self", ".", "train", ",", "self", ".", "clip_duration", ",", "self", ".", "shape", ",", "self", ".", "dataset_use", ",", "jitter", ",", "hue", ",", "saturation", ",", "exposure", ")", "\n", "\n", "", "else", ":", "# For Testing", "\n", "            ", "frame_idx", ",", "clip", ",", "label", "=", "load_data_detection", "(", "self", ".", "base_path", ",", "imgpath", ",", "False", ",", "self", ".", "clip_duration", ",", "self", ".", "shape", ",", "self", ".", "dataset_use", ")", "\n", "clip", "=", "[", "img", ".", "resize", "(", "self", ".", "shape", ")", "for", "img", "in", "clip", "]", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "clip", "=", "[", "self", ".", "transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "\n", "# (self.duration, -1) + self.shape = (8, -1, 224, 224)", "\n", "", "clip", "=", "torch", ".", "cat", "(", "clip", ",", "0", ")", ".", "view", "(", "(", "self", ".", "clip_duration", ",", "-", "1", ")", "+", "self", ".", "shape", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "self", ".", "seen", "=", "self", ".", "seen", "+", "self", ".", "num_workers", "\n", "\n", "if", "self", ".", "train", ":", "\n", "            ", "return", "(", "clip", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "frame_idx", ",", "clip", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.dataset.testData.__init__": [[78, 97], ["sorted", "len", "glob.glob", "random.shuffle", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "shape", "=", "None", ",", "shuffle", "=", "False", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "train", "=", "False", ",", "seen", "=", "0", ",", "batch_size", "=", "64", ",", "\n", "clip_duration", "=", "16", ",", "num_workers", "=", "4", ")", ":", "\n", "       ", "self", ".", "root", "=", "root", "\n", "self", ".", "imgpaths", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'*.jpg'", ")", ")", ")", "\n", "\n", "if", "shuffle", ":", "\n", "           ", "random", ".", "shuffle", "(", "self", ".", "lines", ")", "\n", "\n", "", "self", ".", "nSamples", "=", "len", "(", "self", ".", "imgpaths", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "shape", "=", "shape", "\n", "self", ".", "seen", "=", "seen", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "clip_duration", "=", "clip_duration", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.dataset.testData.__len__": [[98, 100], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nSamples", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.dataset.testData.__getitem__": [[101, 118], ["torch.cat().view().permute.load_data_detection_test", "torch.cat().view().permute", "len", "img.resize", "dataset.testData.target_transform", "dataset.testData.transform", "torch.cat().view", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.clip.load_data_detection_test"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "imgpath", "=", "self", ".", "imgpaths", "[", "index", "]", "\n", "\n", "clip", ",", "label", "=", "load_data_detection_test", "(", "self", ".", "root", ",", "imgpath", ",", "self", ".", "clip_duration", ",", "self", ".", "nSamples", ")", "\n", "clip", "=", "[", "img", ".", "resize", "(", "self", ".", "shape", ")", "for", "img", "in", "clip", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "clip", "=", "[", "self", ".", "transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "\n", "", "clip", "=", "torch", ".", "cat", "(", "clip", ",", "0", ")", ".", "view", "(", "(", "self", ".", "clip_duration", ",", "-", "1", ")", "+", "self", ".", "shape", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "self", ".", "seen", "=", "self", ".", "seen", "+", "self", ".", "num_workers", "\n", "return", "clip", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.EffectiveNumberofObjectClass.labels_to_class_weights": [[4, 13], ["numpy.concatenate", "labels[].astype", "numpy.bincount", "torch.Tensor"], "function", ["None"], ["def", "labels_to_class_weights", "(", "labels", ",", "beta", ",", "nc", "=", "80", ")", ":", "\n", "# Get class weights (inverse frequency) from training labels", "\n", "    ", "labels", "=", "np", ".", "concatenate", "(", "labels", ",", "0", ")", "# labels.shape = (866643, 5) for COCO", "\n", "lasses", "=", "labels", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "# labels = [class xywh]", "\n", "weights", "=", "np", ".", "bincount", "(", "classes", ",", "minlength", "=", "nc", ")", "# occurences per class", "\n", "weights", "[", "weights", "==", "0", "]", "=", "1", "# replace empty bins with 1", "\n", "wpo", "=", "1", "-", "(", "beta", "**", "weights", ")", "\n", "weights", "=", "wpo", "/", "(", "1", "-", "beta", ")", "\n", "return", "torch", ".", "Tensor", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.EffectiveNumberofObjectClass.WeightedCrossEntropy": [[15, 24], ["loss.sum", "numpy.dot", "numpy.expand_dims", "numpy.log2", "numpy.log2"], "function", ["None"], ["", "def", "WeightedCrossEntropy", "(", "logits", ",", "label", ",", "weight", ")", ":", "\n", "    ", "'''\n    :param logits:  net's output, which has reshaped [batch size,num_class]\n    :param label:   Ground Truth which is ont hot encoing and has typr format of [batch size, num_class]\n    :param weight:  a vector that describes every catagory's coefficent whose shape is (num_class,)\n    :return: a scalar \n    '''", "\n", "loss", "=", "np", ".", "dot", "(", "np", ".", "log2", "(", "logits", ")", "*", "label", ",", "np", ".", "expand_dims", "(", "weight", ",", "axis", "=", "1", ")", ")", "+", "np", ".", "log2", "(", "1", "-", "logits", ")", "*", "(", "1", "-", "label", ")", "\n", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.EffectiveNumberofObjectClass.ENOCCrossEntropy": [[25, 28], ["EffectiveNumberofObjectClass.labels_to_class_weights", "EffectiveNumberofObjectClass.WeightedCrossEntropy"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.InverseClassFrequency.labels_to_class_weights", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.InverseClassFrequency.WeightedCrossEntropy"], ["", "def", "ENOCCrossEntropy", "(", "logits", ",", "label", ",", "labels", ",", "beta", "=", "0.5", ")", ":", "\n", "    ", "weights", "=", "labels_to_class_weights", "(", "labels", ",", "beta", ")", "\n", "return", "WeightedCrossEntropy", "(", "logits", ",", "label", ",", "weights", ")", "", "", ""]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.MaxPoolStride1.__init__": [[10, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MaxPoolStride1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.MaxPoolStride1.forward": [[13, 16], ["torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.pad", "torch.pad", "torch.pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "max_pool2d", "(", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "mode", "=", "'replicate'", ")", ",", "2", ",", "stride", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.Reorg.__init__": [[18, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "Reorg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.Reorg.forward": [[21, 37], ["x.view.view.data.size", "x.view.view.data.size", "x.view.view.data.size", "x.view.view.data.size", "x.view.view.view().transpose().contiguous", "x.view.view.view().transpose().contiguous", "x.view.view.view().transpose().contiguous", "x.view.view.view", "x.view.view.data.dim", "x.view.view.view().transpose", "x.view.view.view().transpose", "x.view.view.view().transpose", "x.view.view.view", "x.view.view.view", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "stride", "=", "self", ".", "stride", "\n", "assert", "(", "x", ".", "data", ".", "dim", "(", ")", "==", "4", ")", "\n", "B", "=", "x", ".", "data", ".", "size", "(", "0", ")", "\n", "C", "=", "x", ".", "data", ".", "size", "(", "1", ")", "\n", "H", "=", "x", ".", "data", ".", "size", "(", "2", ")", "\n", "W", "=", "x", ".", "data", ".", "size", "(", "3", ")", "\n", "assert", "(", "H", "%", "stride", "==", "0", ")", "\n", "assert", "(", "W", "%", "stride", "==", "0", ")", "\n", "ws", "=", "stride", "\n", "hs", "=", "stride", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "H", "//", "hs", ",", "hs", ",", "W", "//", "ws", ",", "ws", ")", ".", "transpose", "(", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "H", "//", "hs", "*", "W", "//", "ws", ",", "hs", "*", "ws", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "hs", "*", "ws", ",", "H", "//", "hs", ",", "W", "//", "ws", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "hs", "*", "ws", "*", "C", ",", "H", "//", "hs", ",", "W", "//", "ws", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.GlobalAvgPool2d.__init__": [[39, 41], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.GlobalAvgPool2d.forward": [[42, 50], ["x.view.view.data.size", "x.view.view.data.size", "x.view.view.data.size", "x.view.view.data.size", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", "=", "x", ".", "data", ".", "size", "(", "0", ")", "\n", "C", "=", "x", ".", "data", ".", "size", "(", "1", ")", "\n", "H", "=", "x", ".", "data", ".", "size", "(", "2", ")", "\n", "W", "=", "x", ".", "data", ".", "size", "(", "3", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "H", ",", "W", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.EmptyModule.__init__": [[53, 55], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EmptyModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.EmptyModule.forward": [[56, 58], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.Darknet.__init__": [[61, 78], ["torch.Module.__init__", "cfg.parse_cfg", "darknet.Darknet.create_network", "int", "int", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "len", "len"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.parse_cfg", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.Darknet.create_network"], ["    ", "def", "__init__", "(", "self", ",", "cfgfile", ")", ":", "\n", "        ", "super", "(", "Darknet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "blocks", "=", "parse_cfg", "(", "cfgfile", ")", "\n", "self", ".", "models", "=", "self", ".", "create_network", "(", "self", ".", "blocks", ")", "# merge conv, bn,leaky", "\n", "self", ".", "loss", "=", "self", ".", "models", "[", "len", "(", "self", ".", "models", ")", "-", "1", "]", "\n", "\n", "self", ".", "width", "=", "int", "(", "self", ".", "blocks", "[", "0", "]", "[", "'width'", "]", ")", "\n", "self", ".", "height", "=", "int", "(", "self", ".", "blocks", "[", "0", "]", "[", "'height'", "]", ")", "\n", "\n", "if", "self", ".", "blocks", "[", "(", "len", "(", "self", ".", "blocks", ")", "-", "1", ")", "]", "[", "'type'", "]", "==", "'region'", ":", "\n", "            ", "self", ".", "anchors", "=", "self", ".", "loss", ".", "anchors", "\n", "self", ".", "num_anchors", "=", "self", ".", "loss", ".", "num_anchors", "\n", "self", ".", "anchor_step", "=", "self", ".", "loss", ".", "anchor_step", "\n", "self", ".", "num_classes", "=", "self", ".", "loss", ".", "num_classes", "\n", "\n", "", "self", ".", "header", "=", "torch", ".", "IntTensor", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "seen", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.Darknet.forward": [[79, 142], ["dict", "print", "print", "print", "block[].split", "print", "print", "len", "print", "int", "int", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "print", "print", "int", "int", "torch.relu", "torch.relu", "torch.relu", "print"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ind", "=", "-", "2", "\n", "self", ".", "loss", "=", "None", "\n", "outputs", "=", "dict", "(", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "ind", "=", "ind", "+", "1", "\n", "#if ind > 0:", "\n", "#    return x", "\n", "\n", "if", "block", "[", "'type'", "]", "==", "'net'", ":", "\n", "                ", "continue", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'convolutional'", "or", "block", "[", "'type'", "]", "==", "'maxpool'", "or", "block", "[", "'type'", "]", "==", "'reorg'", "or", "block", "[", "'type'", "]", "==", "'avgpool'", "or", "block", "[", "'type'", "]", "==", "'softmax'", "or", "block", "[", "'type'", "]", "==", "'connected'", ":", "\n", "                ", "print", "(", "\"ind:\"", ",", "ind", ")", "\n", "x", "=", "self", ".", "models", "[", "ind", "]", "(", "x", ")", "\n", "print", "(", "\"x_shape:\"", ",", "x", ".", "shape", ")", "\n", "outputs", "[", "ind", "]", "=", "x", "\n", "# print(\"output:\", outputs)", "\n", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'route'", ":", "\n", "                ", "print", "(", "\"route debugging!\"", ")", "\n", "layers", "=", "block", "[", "'layers'", "]", ".", "split", "(", "','", ")", "\n", "print", "(", "\"layers:\"", ",", "layers", ")", "\n", "layers", "=", "[", "int", "(", "i", ")", "if", "int", "(", "i", ")", ">", "0", "else", "int", "(", "i", ")", "+", "ind", "for", "i", "in", "layers", "]", "\n", "print", "(", "\"layers:\"", ",", "layers", ")", "\n", "\n", "if", "len", "(", "layers", ")", "==", "1", ":", "\n", "                    ", "print", "(", "\"ind_route:\"", ",", "ind", ")", "\n", "x", "=", "outputs", "[", "layers", "[", "0", "]", "]", "#layer 16 # [10, 512, 14, 14]", "\n", "outputs", "[", "ind", "]", "=", "x", "\n", "\n", "", "elif", "len", "(", "layers", ")", "==", "2", ":", "\n", "\n", "                    ", "x1", "=", "outputs", "[", "layers", "[", "0", "]", "]", "#layer 27 # [10, 256, 7, 7]]", "\n", "\n", "x2", "=", "outputs", "[", "layers", "[", "1", "]", "]", "#layer 24 # [10, 1024, 7, 7]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "1", ")", "# [10, 1280, 7, 7]", "\n", "\n", "outputs", "[", "ind", "]", "=", "x", "\n", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'shortcut'", ":", "\n", "# print(\"shortcut debugging!\")", "\n", "                ", "from_layer", "=", "int", "(", "block", "[", "'from'", "]", ")", "\n", "activation", "=", "block", "[", "'activation'", "]", "\n", "from_layer", "=", "from_layer", "if", "from_layer", ">", "0", "else", "from_layer", "+", "ind", "\n", "x1", "=", "outputs", "[", "from_layer", "]", "\n", "x2", "=", "outputs", "[", "ind", "-", "1", "]", "\n", "x", "=", "x1", "+", "x2", "\n", "if", "activation", "==", "'leaky'", ":", "\n", "                    ", "x", "=", "F", ".", "leaky_relu", "(", "x", ",", "0.1", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation", "==", "'relu'", ":", "\n", "                    ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "outputs", "[", "ind", "]", "=", "x", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'region'", ":", "\n", "                ", "print", "(", "\"loss:\"", ",", "ind", ")", "\n", "continue", "\n", "print", "(", "\"LOSSS\"", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'cost'", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "print", "(", "'unknown type %s'", "%", "(", "block", "[", "'type'", "]", ")", ")", "\n", "# print(x.shape)", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.Darknet.print_network": [[143, 145], ["cfg.print_cfg"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.print_cfg"], ["", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "print_cfg", "(", "self", ".", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.Darknet.create_network": [[146, 264], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "int", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "out_filters.append", "torch.ModuleList.append", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "int", "int", "out_filters.append", "torch.ModuleList.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential.add_module", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "darknet.MaxPoolStride1", "darknet.GlobalAvgPool2d", "out_filters.append", "torch.ModuleList.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "torch.Softmax", "out_filters.append", "torch.ModuleList.append", "out_filters.append", "torch.ModuleList.append", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "int", "out_filters.append", "torch.ModuleList.append", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "darknet.Reorg", "block[].split", "print", "len", "print", "print", "out_filters.append", "torch.ModuleList.append", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "len", "darknet.EmptyModule", "len", "out_filters.append", "torch.ModuleList.append", "int", "len", "darknet.EmptyModule", "int", "out_filters.append", "torch.ModuleList.append", "int", "int", "torch.Linear", "torch.Linear", "torch.Linear", "region_loss.RegionLoss", "block[].split", "int", "int", "float", "float", "float", "float", "out_filters.append", "torch.ModuleList.append", "print", "torch.Sequential", "torch.Sequential", "torch.Sequential", "float", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "create_network", "(", "self", ",", "blocks", ")", ":", "\n", "        ", "models", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "prev_filters", "=", "3", "\n", "out_filters", "=", "[", "]", "\n", "conv_id", "=", "0", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "if", "block", "[", "'type'", "]", "==", "'net'", ":", "\n", "                ", "prev_filters", "=", "int", "(", "block", "[", "'channels'", "]", ")", "\n", "continue", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "conv_id", "=", "conv_id", "+", "1", "\n", "batch_normalize", "=", "int", "(", "block", "[", "'batch_normalize'", "]", ")", "\n", "filters", "=", "int", "(", "block", "[", "'filters'", "]", ")", "\n", "kernel_size", "=", "int", "(", "block", "[", "'size'", "]", ")", "\n", "stride", "=", "int", "(", "block", "[", "'stride'", "]", ")", "\n", "is_pad", "=", "int", "(", "block", "[", "'pad'", "]", ")", "\n", "pad", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "if", "is_pad", "else", "0", "\n", "activation", "=", "block", "[", "'activation'", "]", "\n", "model", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "batch_normalize", ":", "\n", "                    ", "model", ".", "add_module", "(", "'conv{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "Conv2d", "(", "prev_filters", ",", "filters", ",", "kernel_size", ",", "stride", ",", "pad", ",", "bias", "=", "False", ")", ")", "\n", "model", ".", "add_module", "(", "'bn{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "BatchNorm2d", "(", "filters", ")", ")", "\n", "#model.add_module('bn{0}'.format(conv_id), BN2d(filters))", "\n", "", "else", ":", "\n", "                    ", "model", ".", "add_module", "(", "'conv{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "Conv2d", "(", "prev_filters", ",", "filters", ",", "kernel_size", ",", "stride", ",", "pad", ")", ")", "\n", "", "if", "activation", "==", "'leaky'", ":", "\n", "                    ", "model", ".", "add_module", "(", "'leaky{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "", "elif", "activation", "==", "'relu'", ":", "\n", "                    ", "model", ".", "add_module", "(", "'relu{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "prev_filters", "=", "filters", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'maxpool'", ":", "\n", "                ", "pool_size", "=", "int", "(", "block", "[", "'size'", "]", ")", "\n", "stride", "=", "int", "(", "block", "[", "'stride'", "]", ")", "\n", "if", "stride", ">", "1", ":", "\n", "                    ", "model", "=", "nn", ".", "MaxPool2d", "(", "pool_size", ",", "stride", ")", "\n", "", "else", ":", "\n", "                    ", "model", "=", "MaxPoolStride1", "(", ")", "\n", "", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'avgpool'", ":", "\n", "                ", "model", "=", "GlobalAvgPool2d", "(", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'softmax'", ":", "\n", "                ", "model", "=", "nn", ".", "Softmax", "(", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'cost'", ":", "\n", "                ", "if", "block", "[", "'_type'", "]", "==", "'sse'", ":", "\n", "                    ", "model", "=", "nn", ".", "MSELoss", "(", "size_average", "=", "True", ")", "\n", "", "elif", "block", "[", "'_type'", "]", "==", "'L1'", ":", "\n", "                    ", "model", "=", "nn", ".", "L1Loss", "(", "size_average", "=", "True", ")", "\n", "", "elif", "block", "[", "'_type'", "]", "==", "'smooth'", ":", "\n", "                    ", "model", "=", "nn", ".", "SmoothL1Loss", "(", "size_average", "=", "True", ")", "\n", "", "out_filters", ".", "append", "(", "1", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'reorg'", ":", "\n", "                ", "stride", "=", "int", "(", "block", "[", "'stride'", "]", ")", "\n", "prev_filters", "=", "stride", "*", "stride", "*", "prev_filters", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "Reorg", "(", "stride", ")", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'route'", ":", "\n", "                ", "layers", "=", "block", "[", "'layers'", "]", ".", "split", "(", "','", ")", "\n", "print", "(", "\"layers:\"", ",", "layers", ")", "\n", "ind", "=", "len", "(", "models", ")", "\n", "print", "(", "\"ind:\"", ",", "ind", ")", "\n", "layers", "=", "[", "int", "(", "i", ")", "if", "int", "(", "i", ")", ">", "0", "else", "int", "(", "i", ")", "+", "ind", "for", "i", "in", "layers", "]", "\n", "print", "(", "\"layers:\"", ",", "layers", ")", "\n", "if", "len", "(", "layers", ")", "==", "1", ":", "\n", "                    ", "prev_filters", "=", "out_filters", "[", "layers", "[", "0", "]", "]", "\n", "\n", "", "elif", "len", "(", "layers", ")", "==", "2", ":", "\n", "                    ", "assert", "(", "layers", "[", "0", "]", "==", "ind", "-", "1", ")", "\n", "prev_filters", "=", "out_filters", "[", "layers", "[", "0", "]", "]", "+", "out_filters", "[", "layers", "[", "1", "]", "]", "\n", "\n", "", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "\n", "models", ".", "append", "(", "EmptyModule", "(", ")", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'shortcut'", ":", "\n", "                ", "ind", "=", "len", "(", "models", ")", "\n", "prev_filters", "=", "out_filters", "[", "ind", "-", "1", "]", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "EmptyModule", "(", ")", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'connected'", ":", "\n", "                ", "filters", "=", "int", "(", "block", "[", "'output'", "]", ")", "\n", "if", "block", "[", "'activation'", "]", "==", "'linear'", ":", "\n", "                    ", "model", "=", "nn", ".", "Linear", "(", "prev_filters", ",", "filters", ")", "\n", "", "elif", "block", "[", "'activation'", "]", "==", "'leaky'", ":", "\n", "                    ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "prev_filters", ",", "filters", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "", "elif", "block", "[", "'activation'", "]", "==", "'relu'", ":", "\n", "                    ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "prev_filters", ",", "filters", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "prev_filters", "=", "filters", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'region'", ":", "\n", "                ", "loss", "=", "RegionLoss", "(", ")", "\n", "anchors", "=", "block", "[", "'anchors'", "]", ".", "split", "(", "','", ")", "\n", "loss", ".", "anchors", "=", "[", "float", "(", "i", ")", "for", "i", "in", "anchors", "]", "\n", "loss", ".", "num_classes", "=", "int", "(", "block", "[", "'classes'", "]", ")", "\n", "loss", ".", "num_anchors", "=", "int", "(", "block", "[", "'num'", "]", ")", "\n", "loss", ".", "anchor_step", "=", "len", "(", "loss", ".", "anchors", ")", "//", "loss", ".", "num_anchors", "\n", "loss", ".", "object_scale", "=", "float", "(", "block", "[", "'object_scale'", "]", ")", "\n", "loss", ".", "noobject_scale", "=", "float", "(", "block", "[", "'noobject_scale'", "]", ")", "\n", "loss", ".", "class_scale", "=", "float", "(", "block", "[", "'class_scale'", "]", ")", "\n", "loss", ".", "coord_scale", "=", "float", "(", "block", "[", "'coord_scale'", "]", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "loss", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'unknown type %s'", "%", "(", "block", "[", "'type'", "]", ")", ")", "\n", "\n", "", "", "return", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.Darknet.load_weights": [[265, 312], ["open", "numpy.fromfile", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.fromfile", "open.close", "int", "cfg.load_conv_bn", "cfg.load_conv", "cfg.load_fc", "cfg.load_fc", "print"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_conv_bn", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_conv", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_fc", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_fc"], ["", "def", "load_weights", "(", "self", ",", "weightfile", ")", ":", "\n", "        ", "fp", "=", "open", "(", "weightfile", ",", "'rb'", ")", "\n", "header", "=", "np", ".", "fromfile", "(", "fp", ",", "count", "=", "4", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "header", "=", "torch", ".", "from_numpy", "(", "header", ")", "\n", "self", ".", "seen", "=", "self", ".", "header", "[", "3", "]", "\n", "buf", "=", "np", ".", "fromfile", "(", "fp", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp", ".", "close", "(", ")", "\n", "\n", "start", "=", "0", "\n", "ind", "=", "-", "2", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "if", "start", ">=", "buf", ".", "size", ":", "\n", "                ", "break", "\n", "", "ind", "=", "ind", "+", "1", "\n", "if", "block", "[", "'type'", "]", "==", "'net'", ":", "\n", "                ", "continue", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "model", "=", "self", ".", "models", "[", "ind", "]", "\n", "batch_normalize", "=", "int", "(", "block", "[", "'batch_normalize'", "]", ")", "\n", "if", "batch_normalize", ":", "\n", "                    ", "start", "=", "load_conv_bn", "(", "buf", ",", "start", ",", "model", "[", "0", "]", ",", "model", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "start", "=", "load_conv", "(", "buf", ",", "start", ",", "model", "[", "0", "]", ")", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'connected'", ":", "\n", "                ", "model", "=", "self", ".", "models", "[", "ind", "]", "\n", "if", "block", "[", "'activation'", "]", "!=", "'linear'", ":", "\n", "                    ", "start", "=", "load_fc", "(", "buf", ",", "start", ",", "model", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "start", "=", "load_fc", "(", "buf", ",", "start", ",", "model", ")", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'maxpool'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'reorg'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'route'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'shortcut'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'region'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'avgpool'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'softmax'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'cost'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "print", "(", "'unknown type %s'", "%", "(", "block", "[", "'type'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.darknet.Darknet.save_weights": [[314, 359], ["open", "header.numpy().tofile", "range", "open.close", "len", "header.numpy", "int", "cfg.save_conv_bn", "cfg.save_conv", "cfg.save_fc", "cfg.save_fc", "print"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_conv_bn", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_conv", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_fc", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_fc"], ["", "", "", "def", "save_weights", "(", "self", ",", "outfile", ",", "cutoff", "=", "0", ")", ":", "\n", "        ", "if", "cutoff", "<=", "0", ":", "\n", "            ", "cutoff", "=", "len", "(", "self", ".", "blocks", ")", "-", "1", "\n", "\n", "", "fp", "=", "open", "(", "outfile", ",", "'wb'", ")", "\n", "self", ".", "header", "[", "3", "]", "=", "self", ".", "seen", "\n", "header", "=", "self", ".", "header", "\n", "header", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "\n", "ind", "=", "-", "1", "\n", "for", "blockId", "in", "range", "(", "1", ",", "cutoff", "+", "1", ")", ":", "\n", "            ", "ind", "=", "ind", "+", "1", "\n", "block", "=", "self", ".", "blocks", "[", "blockId", "]", "\n", "if", "block", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "model", "=", "self", ".", "models", "[", "ind", "]", "\n", "batch_normalize", "=", "int", "(", "block", "[", "'batch_normalize'", "]", ")", "\n", "if", "batch_normalize", ":", "\n", "                    ", "save_conv_bn", "(", "fp", ",", "model", "[", "0", "]", ",", "model", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "save_conv", "(", "fp", ",", "model", "[", "0", "]", ")", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'connected'", ":", "\n", "                ", "model", "=", "self", ".", "models", "[", "ind", "]", "\n", "if", "block", "[", "'activation'", "]", "!=", "'linear'", ":", "\n", "                    ", "save_fc", "(", "fc", ",", "model", ")", "\n", "", "else", ":", "\n", "                    ", "save_fc", "(", "fc", ",", "model", "[", "0", "]", ")", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'maxpool'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'reorg'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'route'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'shortcut'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'region'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'avgpool'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'softmax'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'cost'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "print", "(", "'unknown type %s'", "%", "(", "block", "[", "'type'", "]", ")", ")", "\n", "", "", "fp", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.model.YOWOL.__init__": [[20, 101], ["torch.Module.__init__", "linknet.LinkNet", "cfam.CFAMBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.YOWOL.model.state_dict", "model.YOWOL.update", "model.YOWOL.model.load_state_dict", "model.YOWOL.model.load_weights", "pretrained_3d_backbone[].items"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.Darknet.load_weights"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "YOWOL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "opt", "=", "opt", "\n", "\n", "# ##### 2D Backbone #####", "\n", "# if opt.backbone_2d == \"darknet\":", "\n", "#     self.backbone_2d = darknet.Darknet(\"cfg/yolo.cfg\")", "\n", "#     num_ch_2d = 425 # Number of output channels for backbone_2d", "\n", "# else:", "\n", "#     raise ValueError(\"Wrong backbone_2d model is requested. Please select\\", "\n", "#                       it from [darknet]\")", "\n", "# if opt.backbone_2d_weights:# load pretrained weights on COCO dataset", "\n", "#     self.backbone_2d.load_weights(opt.backbone_2d_weights) ", "\n", "\n", "# ##### 3D Backbone #####", "\n", "# if opt.backbone_3d == \"resnext101\":", "\n", "#     self.backbone_3d = resnext.resnext101()", "\n", "#     num_ch_3d = 2048 # Number of output channels for backbone_3d", "\n", "# elif opt.backbone_3d == \"resnet18\":", "\n", "#     self.backbone_3d = resnet.resnet18(shortcut_type='A')", "\n", "#     num_ch_3d = 512 # Number of output channels for backbone_3d", "\n", "# elif opt.backbone_3d == \"resnet50\":", "\n", "#     self.backbone_3d = resnet.resnet50(shortcut_type='B')", "\n", "#     num_ch_3d = 2048 # Number of output channels for backbone_3d", "\n", "# elif opt.backbone_3d == \"resnet101\":", "\n", "#     self.backbone_3d = resnet.resnet101(shortcut_type='B')", "\n", "#     num_ch_3d = 2048 # Number of output channels for backbone_3d", "\n", "# elif opt.backbone_3d == \"mobilenet_2x\":", "\n", "#     self.backbone_3d = mobilenet.get_model(width_mult=2.0)", "\n", "#     num_ch_3d = 2048 # Number of output channels for backbone_3d", "\n", "# elif opt.backbone_3d == \"mobilenetv2_1x\":", "\n", "#     self.backbone_3d = mobilenetv2.get_model(width_mult=1.0)", "\n", "#     num_ch_3d = 1280 # Number of output channels for backbone_3d", "\n", "# elif opt.backbone_3d == \"shufflenet_2x\":", "\n", "#     self.backbone_3d = shufflenet.get_model(groups=3,   width_mult=2.0)", "\n", "#     num_ch_3d = 1920 # Number of output channels for backbone_3d", "\n", "# elif opt.backbone_3d == \"shufflenetv2_2x\":", "\n", "#     self.backbone_3d = shufflenetv2.get_model(width_mult=2.0)", "\n", "#     num_ch_3d = 2048 # Number of output channels for backbone_3d", "\n", "# else:", "\n", "#     raise ValueError(\"Wrong backbone_3d model is requested. Please select it from [resnext101, resnet101, \\", "\n", "#                      resnet50, resnet18, mobilenet_2x, mobilenetv2_1x, shufflenet_2x, shufflenetv2_2x]\")", "\n", "# if opt.backbone_3d_weights:# load pretrained weights on Kinetics-600 dataset", "\n", "#     self.backbone_3d = self.backbone_3d.cuda()", "\n", "#     self.backbone_3d = nn.DataParallel(self.backbone_3d, device_ids=None) # Because the pretrained backbone models are saved in Dataparalled mode", "\n", "#     pretrained_3d_backbone = torch.load(opt.backbone_3d_weights)", "\n", "#     backbone_3d_dict = self.backbone_3d.state_dict()", "\n", "#     pretrained_3d_backbone_dict = {k: v for k, v in pretrained_3d_backbone['state_dict'].items() if k in backbone_3d_dict} # 1. filter out unnecessary keys", "\n", "#     backbone_3d_dict.update(pretrained_3d_backbone_dict) # 2. overwrite entries in the existing state dict", "\n", "#     self.backbone_3d.load_state_dict(backbone_3d_dict) # 3. load the new state dict", "\n", "#     self.backbone_3d = self.backbone_3d.module # remove the dataparallel wrapper", "\n", "\n", "\n", "self", ".", "model", "=", "LinkNet", "(", "\"cfg/yolo.cfg\"", ")", "\n", "\n", "if", "opt", ".", "backbone_3d_weights", ":", "# load pretrained weights on Kinetics-600 dataset", "\n", "# self.model = self.model.cuda()", "\n", "            ", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "self", ".", "model", ",", "device_ids", "=", "None", ")", "# Because the pretrained backbone models are saved in Dataparalled mode", "\n", "pretrained_3d_backbone", "=", "torch", ".", "load", "(", "opt", ".", "backbone_3d_weights", ",", "map_location", "=", "\"cpu\"", ")", "\n", "# print(pretrained_3d_backbone)", "\n", "backbone_3d_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "\n", "pretrained_3d_backbone_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "pretrained_3d_backbone", "[", "'state_dict'", "]", ".", "items", "(", ")", "if", "k", "in", "backbone_3d_dict", "}", "# 1. filter out unnecessary keys", "\n", "\n", "backbone_3d_dict", ".", "update", "(", "pretrained_3d_backbone_dict", ")", "# 2. overwrite entries in the existing state dict", "\n", "\n", "self", ".", "model", ".", "load_state_dict", "(", "backbone_3d_dict", ")", "# 3. load the new state dict", "\n", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "module", "# remove the dataparallel wrapper", "\n", "\n", "num_ch_3d", "=", "512", "# Number of output channels for backbone_3d", "\n", "\n", "", "if", "opt", ".", "backbone_2d_weights", ":", "# load pretrained weights on COCO dataset        ", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "opt", ".", "backbone_2d_weights", ")", "\n", "num_ch_2d", "=", "425", "# Number of output channels for backbone_2d", "\n", "\n", "##### Attention & Final Conv #####", "\n", "", "self", ".", "cfam", "=", "CFAMBlock", "(", "num_ch_2d", "+", "num_ch_3d", ",", "1024", ")", "\n", "self", ".", "conv_final", "=", "nn", ".", "Conv2d", "(", "1024", ",", "5", "*", "(", "opt", ".", "n_classes", "+", "4", "+", "1", ")", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "seen", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.model.YOWOL.forward": [[103, 116], ["model.YOWOL.model", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.YOWOL.cfam", "model.YOWOL.conv_final"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x_3d", "=", "input", "# Input clip", "\n", "x_2d", "=", "input", "[", ":", ",", ":", ",", "-", "1", ",", ":", ",", ":", "]", "# Last frame of the clip that is read", "\n", "\n", "x_2d", ",", "x_3d", "=", "self", ".", "model", "(", "x_2d", ",", "x_3d", ")", "\n", "x_3d", "=", "torch", ".", "squeeze", "(", "x_3d", ",", "dim", "=", "2", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_3d", ",", "x_2d", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "cfam", "(", "x", ")", "\n", "\n", "out", "=", "self", ".", "conv_final", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.model.get_fine_tuning_parameters": [[118, 141], ["model.named_parameters", "ft_module_names.append", "ft_module_names.append", "ft_module_names.append", "ft_module_names.append", "ft_module_names.append", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "opt", ")", ":", "\n", "    ", "ft_module_names", "=", "[", "'cfam'", ",", "'conv_final'", "]", "# Always fine tune 'cfam' and 'conv_final'", "\n", "if", "not", "opt", ".", "freeze_backbone_2d", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'backbone_2d'", ")", "# Fine tune complete backbone_3d", "\n", "", "else", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'backbone_2d.models.29'", ")", "# Fine tune only layer 29 and 30", "\n", "ft_module_names", ".", "append", "(", "'backbone_2d.models.30'", ")", "# Fine tune only layer 29 and 30", "\n", "\n", "", "if", "not", "opt", ".", "freeze_backbone_3d", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'backbone_3d'", ")", "# Fine tune complete backbone_3d", "\n", "", "else", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'backbone_3d.layer4'", ")", "# Fine tune only layer 4", "\n", "\n", "", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "            ", "if", "ft_module", "in", "k", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.video_mAP.testData.__init__": [[108, 119], ["sorted", "glob.glob", "sorted", "os.path.join", "glob.glob", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "shape", "=", "None", ",", "transform", "=", "None", ",", "clip_duration", "=", "16", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root", "\n", "if", "dataset", "==", "'ucf101-24'", ":", "\n", "            ", "self", ".", "label_paths", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'*.jpg'", ")", ")", ")", "\n", "", "elif", "dataset", "==", "'jhmdb-21'", ":", "\n", "            ", "self", ".", "label_paths", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'*.png'", ")", ")", ")", "\n", "\n", "", "self", ".", "shape", "=", "shape", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "clip_duration", "=", "clip_duration", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.video_mAP.testData.__len__": [[120, 122], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "label_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.video_mAP.testData.__getitem__": [[123, 136], ["video_mAP.get_clip", "torch.cat().view().permute", "torch.cat().view().permute", "torch.cat().view().permute", "torch.cat().view().permute", "len", "img.resize", "video_mAP.testData.transform", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.video_mAP.get_clip"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "assert", "index", "<=", "len", "(", "self", ")", ",", "'index range error'", "\n", "label_path", "=", "self", ".", "label_paths", "[", "index", "]", "\n", "\n", "clip", ",", "label", ",", "img_name", "=", "get_clip", "(", "self", ".", "root", ",", "label_path", ",", "self", ".", "clip_duration", ",", "dataset", ")", "\n", "clip", "=", "[", "img", ".", "resize", "(", "self", ".", "shape", ")", "for", "img", "in", "clip", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "clip", "=", "[", "self", ".", "transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "\n", "", "clip", "=", "torch", ".", "cat", "(", "clip", ",", "0", ")", ".", "view", "(", "(", "self", ".", "clip_duration", ",", "-", "1", ")", "+", "self", ".", "shape", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "return", "clip", ",", "label", ",", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.video_mAP.get_clip": [[63, 106], ["imgpath.split", "len", "int", "os.path.join", "os.path.join", "len", "reversed", "torch.zeros", "torch.zeros", "torch.zeros.view", "torch.zeros.numel", "os.path.join", "os.listdir", "range", "clip.append", "torch.from_numpy", "torch.from_numpy", "os.path.join", "os.path.join", "Image.open().convert", "utils.read_truths_args().astype", "torch.zeros", "torch.zeros", "os.path.join", "Image.open", "utils.read_truths_args"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.read_truths_args"], ["", "def", "get_clip", "(", "root", ",", "imgpath", ",", "train_dur", ",", "dataset", ")", ":", "\n", "    ", "im_split", "=", "imgpath", ".", "split", "(", "'/'", ")", "\n", "num_parts", "=", "len", "(", "im_split", ")", "\n", "class_name", "=", "im_split", "[", "-", "3", "]", "\n", "file_name", "=", "im_split", "[", "-", "2", "]", "\n", "im_ind", "=", "int", "(", "im_split", "[", "num_parts", "-", "1", "]", "[", "0", ":", "5", "]", ")", "\n", "if", "dataset", "==", "'ucf101-24'", ":", "\n", "        ", "img_name", "=", "os", ".", "path", ".", "join", "(", "class_name", ",", "file_name", ",", "'{:05d}.jpg'", ".", "format", "(", "im_ind", ")", ")", "\n", "", "elif", "dataset", "==", "'jhmdb-21'", ":", "\n", "        ", "img_name", "=", "os", ".", "path", ".", "join", "(", "class_name", ",", "file_name", ",", "'{:05d}.png'", ".", "format", "(", "im_ind", ")", ")", "\n", "", "labpath", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'labels'", ",", "class_name", ",", "file_name", ",", "'{:05d}.txt'", ".", "format", "(", "im_ind", ")", ")", "\n", "img_folder", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'rgb-images'", ",", "class_name", ",", "file_name", ")", "\n", "max_num", "=", "len", "(", "os", ".", "listdir", "(", "img_folder", ")", ")", "\n", "clip", "=", "[", "]", "\n", "\n", "for", "i", "in", "reversed", "(", "range", "(", "train_dur", ")", ")", ":", "\n", "        ", "i_img", "=", "im_ind", "-", "i", "*", "1", "\n", "if", "i_img", "<", "1", ":", "\n", "            ", "i_img", "=", "1", "\n", "", "elif", "i_img", ">", "max_num", ":", "\n", "            ", "i_img", "=", "max_num", "\n", "\n", "", "if", "dataset", "==", "'ucf101-24'", ":", "\n", "            ", "path_tmp", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'rgb-images'", ",", "class_name", ",", "file_name", ",", "'{:05d}.jpg'", ".", "format", "(", "i_img", ")", ")", "\n", "", "elif", "dataset", "==", "'jhmdb-21'", ":", "\n", "            ", "path_tmp", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'rgb-images'", ",", "class_name", ",", "file_name", ",", "'{:05d}.png'", ".", "format", "(", "i_img", ")", ")", "\n", "", "clip", ".", "append", "(", "Image", ".", "open", "(", "path_tmp", ")", ".", "convert", "(", "'RGB'", ")", ")", "\n", "\n", "", "label", "=", "torch", ".", "zeros", "(", "50", "*", "5", ")", "\n", "try", ":", "\n", "        ", "tmp", "=", "torch", ".", "from_numpy", "(", "read_truths_args", "(", "labpath", ",", "8.0", "/", "clip", "[", "0", "]", ".", "width", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "tmp", "=", "torch", ".", "zeros", "(", "1", ",", "5", ")", "\n", "\n", "", "tmp", "=", "tmp", ".", "view", "(", "-", "1", ")", "\n", "tsz", "=", "tmp", ".", "numel", "(", ")", "\n", "\n", "if", "tsz", ">", "50", "*", "5", ":", "\n", "        ", "label", "=", "tmp", "[", "0", ":", "50", "*", "5", "]", "\n", "", "elif", "tsz", ">", "0", ":", "\n", "        ", "label", "[", "0", ":", "tsz", "]", "=", "tmp", "\n", "\n", "", "return", "clip", ",", "label", ",", "img_name", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.video_mAP.video_mAP_ucf": [[137, 234], ["range", "range", "open", "file.readlines", "scipy.io.loadmat", "print", "line.rstrip.rstrip", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "print", "print", "line.rstrip.rstrip", "video_testlist.append", "len", "range", "numpy.array", "video_mAP.testData", "eval_results.evaluate_videoAP", "range", "all_gt_boxes.append", "os.path.join", "Variable.cuda", "torch.no_grad", "torch.no_grad", "Variable", "utils.get_region_boxes_video", "range", "gt_boxes.append", "gt_boxes.append", "gt_boxes.append", "gt_boxes.append", "gt_boxes.append", "gt_one_tube.append", "torchvision.transforms.Compose", "model", "output.size", "utils.nms", "len", "range", "int", "float", "float", "numpy.zeros", "range", "float", "float", "float", "float", "torchvision.transforms.ToTensor", "max", "max", "min", "min", "float", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.eval_results.evaluate_videoAP", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.get_region_boxes_video", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.nms"], ["", "", "def", "video_mAP_ucf", "(", ")", ":", "\n", "    ", "\"\"\"\n    Calculate video_mAP over the test dataset\n    \"\"\"", "\n", "def", "truths_length", "(", "truths", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "            ", "if", "truths", "[", "i", "]", "[", "1", "]", "==", "0", ":", "\n", "                ", "return", "i", "\n", "\n", "", "", "", "CLASSES", "=", "(", "'Basketball'", ",", "'BasketballDunk'", ",", "'Biking'", ",", "'CliffDiving'", ",", "'CricketBowling'", ",", "\n", "'Diving'", ",", "'Fencing'", ",", "'FloorGymnastics'", ",", "'GolfSwing'", ",", "'HorseRiding'", ",", "\n", "'IceDancing'", ",", "'LongJump'", ",", "'PoleVault'", ",", "'RopeClimbing'", ",", "'SalsaSpin'", ",", "\n", "'SkateBoarding'", ",", "'Skiing'", ",", "'Skijet'", ",", "'SoccerJuggling'", ",", "'Surfing'", ",", "\n", "'TennisSwing'", ",", "'TrampolineJumping'", ",", "'VolleyballSpiking'", ",", "'WalkingWithDog'", ")", "\n", "\n", "video_testlist", "=", "[", "]", "\n", "with", "open", "(", "testlist", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "video_testlist", ".", "append", "(", "line", ")", "\n", "\n", "", "", "detected_boxes", "=", "{", "}", "\n", "gt_videos", "=", "{", "}", "\n", "\n", "gt_data", "=", "loadmat", "(", "gt_file", ")", "[", "'annot'", "]", "\n", "n_videos", "=", "gt_data", ".", "shape", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "n_videos", ")", ":", "\n", "        ", "video_name", "=", "gt_data", "[", "0", "]", "[", "i", "]", "[", "1", "]", "[", "0", "]", "\n", "if", "video_name", "in", "video_testlist", ":", "\n", "            ", "n_tubes", "=", "len", "(", "gt_data", "[", "0", "]", "[", "i", "]", "[", "2", "]", "[", "0", "]", ")", "\n", "v_annotation", "=", "{", "}", "\n", "all_gt_boxes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "n_tubes", ")", ":", "\n", "                ", "gt_one_tube", "=", "[", "]", "\n", "tube_start_frame", "=", "gt_data", "[", "0", "]", "[", "i", "]", "[", "2", "]", "[", "0", "]", "[", "j", "]", "[", "1", "]", "[", "0", "]", "[", "0", "]", "\n", "tube_end_frame", "=", "gt_data", "[", "0", "]", "[", "i", "]", "[", "2", "]", "[", "0", "]", "[", "j", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "tube_class", "=", "gt_data", "[", "0", "]", "[", "i", "]", "[", "2", "]", "[", "0", "]", "[", "j", "]", "[", "2", "]", "[", "0", "]", "[", "0", "]", "\n", "tube_data", "=", "gt_data", "[", "0", "]", "[", "i", "]", "[", "2", "]", "[", "0", "]", "[", "j", "]", "[", "3", "]", "\n", "tube_length", "=", "tube_end_frame", "-", "tube_start_frame", "+", "1", "\n", "\n", "for", "k", "in", "range", "(", "tube_length", ")", ":", "\n", "                    ", "gt_boxes", "=", "[", "]", "\n", "gt_boxes", ".", "append", "(", "int", "(", "tube_start_frame", "+", "k", ")", ")", "\n", "gt_boxes", ".", "append", "(", "float", "(", "tube_data", "[", "k", "]", "[", "0", "]", ")", ")", "\n", "gt_boxes", ".", "append", "(", "float", "(", "tube_data", "[", "k", "]", "[", "1", "]", ")", ")", "\n", "gt_boxes", ".", "append", "(", "float", "(", "tube_data", "[", "k", "]", "[", "0", "]", ")", "+", "float", "(", "tube_data", "[", "k", "]", "[", "2", "]", ")", ")", "\n", "gt_boxes", ".", "append", "(", "float", "(", "tube_data", "[", "k", "]", "[", "1", "]", ")", "+", "float", "(", "tube_data", "[", "k", "]", "[", "3", "]", ")", ")", "\n", "gt_one_tube", ".", "append", "(", "gt_boxes", ")", "\n", "", "all_gt_boxes", ".", "append", "(", "gt_one_tube", ")", "\n", "\n", "", "v_annotation", "[", "'gt_classes'", "]", "=", "tube_class", "\n", "v_annotation", "[", "'tubes'", "]", "=", "np", ".", "array", "(", "all_gt_boxes", ")", "\n", "gt_videos", "[", "video_name", "]", "=", "v_annotation", "\n", "\n", "", "", "for", "line", "in", "lines", ":", "\n", "        ", "print", "(", "line", ")", "\n", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "testData", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'rgb-images'", ",", "line", ")", ",", "\n", "shape", "=", "(", "224", ",", "224", ")", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", ",", "clip_duration", "=", "clip_duration", ")", ",", "\n", "batch_size", "=", "64", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "img_name", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "if", "use_cuda", ":", "\n", "                ", "data", "=", "data", ".", "cuda", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "data", "=", "Variable", "(", "data", ")", "\n", "output", "=", "model", "(", "data", ")", ".", "data", "\n", "\n", "all_boxes", "=", "get_region_boxes_video", "(", "output", ",", "conf_thresh", ",", "num_classes", ",", "anchors", ",", "num_anchors", ",", "0", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "output", ".", "size", "(", "0", ")", ")", ":", "\n", "                    ", "boxes", "=", "all_boxes", "[", "i", "]", "\n", "boxes", "=", "nms", "(", "boxes", ",", "nms_thresh", ")", "\n", "n_boxes", "=", "len", "(", "boxes", ")", "\n", "\n", "# generate detected tubes for all classes", "\n", "# save format: {img_name: {cls_ind: array[[x1,y1,x2,y2, cls_score], [], ...]}}", "\n", "img_annotation", "=", "{", "}", "\n", "for", "cls_idx", "in", "range", "(", "num_classes", ")", ":", "\n", "                        ", "cls_idx", "+=", "1", "# index begins from 1", "\n", "cls_boxes", "=", "np", ".", "zeros", "(", "[", "n_boxes", ",", "5", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "b", "in", "range", "(", "n_boxes", ")", ":", "\n", "                            ", "cls_boxes", "[", "b", "]", "[", "0", "]", "=", "max", "(", "float", "(", "boxes", "[", "b", "]", "[", "0", "]", "-", "boxes", "[", "b", "]", "[", "2", "]", "/", "2.0", ")", "*", "320.0", ",", "0.0", ")", "\n", "cls_boxes", "[", "b", "]", "[", "1", "]", "=", "max", "(", "float", "(", "boxes", "[", "b", "]", "[", "1", "]", "-", "boxes", "[", "b", "]", "[", "3", "]", "/", "2.0", ")", "*", "240.0", ",", "0.0", ")", "\n", "cls_boxes", "[", "b", "]", "[", "2", "]", "=", "min", "(", "float", "(", "boxes", "[", "b", "]", "[", "0", "]", "+", "boxes", "[", "b", "]", "[", "2", "]", "/", "2.0", ")", "*", "320.0", ",", "320.0", ")", "\n", "cls_boxes", "[", "b", "]", "[", "3", "]", "=", "min", "(", "float", "(", "boxes", "[", "b", "]", "[", "1", "]", "+", "boxes", "[", "b", "]", "[", "3", "]", "/", "2.0", ")", "*", "240.0", ",", "240.0", ")", "\n", "cls_boxes", "[", "b", "]", "[", "4", "]", "=", "float", "(", "boxes", "[", "b", "]", "[", "5", "+", "(", "cls_idx", "-", "1", ")", "*", "2", "]", ")", "\n", "", "img_annotation", "[", "cls_idx", "]", "=", "cls_boxes", "\n", "", "detected_boxes", "[", "img_name", "[", "i", "]", "]", "=", "img_annotation", "\n", "\n", "\n", "", "", "", "", "iou_list", "=", "[", "0.05", ",", "0.1", ",", "0.2", ",", "0.3", ",", "0.5", ",", "0.75", "]", "\n", "for", "iou_th", "in", "iou_list", ":", "\n", "        ", "print", "(", "'iou is: '", ",", "iou_th", ")", "\n", "print", "(", "evaluate_videoAP", "(", "gt_videos", ",", "detected_boxes", ",", "CLASSES", ",", "iou_th", ",", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.video_mAP.video_mAP_jhmdb": [[237, 328], ["range", "open", "file.readlines", "print", "line.rstrip.rstrip", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "enumerate", "numpy.expand_dims", "print", "print", "video_mAP.testData", "img_name[].split", "numpy.array", "eval_results.evaluate_videoAP", "os.path.join", "os.path.join", "Variable.cuda", "torch.no_grad", "torch.no_grad", "Variable", "utils.get_region_boxes_video", "range", "torchvision.transforms.Compose", "model", "output.size", "utils.nms", "len", "target[].view", "video_mAP.video_mAP_ucf.truths_length"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.eval_results.evaluate_videoAP", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.get_region_boxes_video", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.nms"], ["", "", "def", "video_mAP_jhmdb", "(", ")", ":", "\n", "    ", "\"\"\"\n    Calculate video_mAP over the test set\n    \"\"\"", "\n", "def", "truths_length", "(", "truths", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "            ", "if", "truths", "[", "i", "]", "[", "1", "]", "==", "0", ":", "\n", "                ", "return", "i", "\n", "\n", "", "", "", "CLASSES", "=", "(", "'brush_hair'", ",", "'catch'", ",", "'clap'", ",", "'climb_stairs'", ",", "'golf'", ",", "\n", "'jump'", ",", "'kick_ball'", ",", "'pick'", ",", "'pour'", ",", "'pullup'", ",", "'push'", ",", "\n", "'run'", ",", "'shoot_ball'", ",", "'shoot_bow'", ",", "'shoot_gun'", ",", "'sit'", ",", "\n", "'stand'", ",", "'swing_baseball'", ",", "'throw'", ",", "'walk'", ",", "'wave'", ")", "\n", "\n", "with", "open", "(", "testlist", ",", "'r'", ")", "as", "file", ":", "\n", "        ", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "\n", "", "detected_boxes", "=", "{", "}", "\n", "gt_videos", "=", "{", "}", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "print", "(", "line", ")", "\n", "\n", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "testData", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "'rgb-images'", ",", "line", ")", ",", "\n", "shape", "=", "(", "224", ",", "224", ")", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", ",", "clip_duration", "=", "clip_duration", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "\n", "video_name", "=", "''", "\n", "v_annotation", "=", "{", "}", "\n", "all_gt_boxes", "=", "[", "]", "\n", "t_label", "=", "-", "1", "\n", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "img_name", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "            ", "path_split", "=", "img_name", "[", "0", "]", ".", "split", "(", "'/'", ")", "\n", "if", "video_name", "==", "''", ":", "\n", "                ", "video_name", "=", "os", ".", "path", ".", "join", "(", "path_split", "[", "0", "]", ",", "path_split", "[", "1", "]", ")", "\n", "\n", "", "if", "use_cuda", ":", "\n", "                ", "data", "=", "data", ".", "cuda", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "data", "=", "Variable", "(", "data", ")", "\n", "output", "=", "model", "(", "data", ")", ".", "data", "\n", "all_boxes", "=", "get_region_boxes_video", "(", "output", ",", "conf_thresh", ",", "num_classes", ",", "anchors", ",", "num_anchors", ",", "0", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "output", ".", "size", "(", "0", ")", ")", ":", "\n", "                    ", "boxes", "=", "all_boxes", "[", "i", "]", "\n", "boxes", "=", "nms", "(", "boxes", ",", "nms_thresh", ")", "\n", "n_boxes", "=", "len", "(", "boxes", ")", "\n", "truths", "=", "target", "[", "i", "]", ".", "view", "(", "-", "1", ",", "5", ")", "\n", "num_gts", "=", "truths_length", "(", "truths", ")", "\n", "\n", "if", "t_label", "==", "-", "1", ":", "\n", "                        ", "t_label", "=", "int", "(", "truths", "[", "0", "]", "[", "0", "]", ")", "+", "1", "\n", "\n", "# generate detected tubes for all classes", "\n", "# save format: {img_name: {cls_ind: array[[x1,y1,x2,y2, cls_score], [], ...]}}", "\n", "", "img_annotation", "=", "{", "}", "\n", "for", "cls_idx", "in", "range", "(", "num_classes", ")", ":", "\n", "                        ", "cls_idx", "+=", "1", "# index begins from 1", "\n", "cls_boxes", "=", "np", ".", "zeros", "(", "[", "n_boxes", ",", "5", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "b", "in", "range", "(", "n_boxes", ")", ":", "\n", "                            ", "cls_boxes", "[", "b", "]", "[", "0", "]", "=", "max", "(", "float", "(", "boxes", "[", "b", "]", "[", "0", "]", "-", "boxes", "[", "b", "]", "[", "2", "]", "/", "2.0", ")", "*", "320.0", ",", "0.0", ")", "\n", "cls_boxes", "[", "b", "]", "[", "1", "]", "=", "max", "(", "float", "(", "boxes", "[", "b", "]", "[", "1", "]", "-", "boxes", "[", "b", "]", "[", "3", "]", "/", "2.0", ")", "*", "240.0", ",", "0.0", ")", "\n", "cls_boxes", "[", "b", "]", "[", "2", "]", "=", "min", "(", "float", "(", "boxes", "[", "b", "]", "[", "0", "]", "+", "boxes", "[", "b", "]", "[", "2", "]", "/", "2.0", ")", "*", "320.0", ",", "320.0", ")", "\n", "cls_boxes", "[", "b", "]", "[", "3", "]", "=", "min", "(", "float", "(", "boxes", "[", "b", "]", "[", "1", "]", "+", "boxes", "[", "b", "]", "[", "3", "]", "/", "2.0", ")", "*", "240.0", ",", "240.0", ")", "\n", "cls_boxes", "[", "b", "]", "[", "4", "]", "=", "float", "(", "boxes", "[", "b", "]", "[", "5", "+", "(", "cls_idx", "-", "1", ")", "*", "2", "]", ")", "\n", "", "img_annotation", "[", "cls_idx", "]", "=", "cls_boxes", "\n", "", "detected_boxes", "[", "img_name", "[", "0", "]", "]", "=", "img_annotation", "\n", "\n", "# generate corresponding gts", "\n", "# save format: {v_name: {tubes: [[frame_index, x1,y1,x2,y2]], gt_classes: vlabel}} ", "\n", "gt_boxes", "=", "[", "]", "\n", "for", "g", "in", "range", "(", "num_gts", ")", ":", "\n", "                        ", "gt_boxes", ".", "append", "(", "int", "(", "path_split", "[", "2", "]", "[", ":", "5", "]", ")", ")", "\n", "gt_boxes", ".", "append", "(", "float", "(", "truths", "[", "g", "]", "[", "1", "]", "-", "truths", "[", "g", "]", "[", "3", "]", "/", "2.0", ")", "*", "320.0", ")", "\n", "gt_boxes", ".", "append", "(", "float", "(", "truths", "[", "g", "]", "[", "2", "]", "-", "truths", "[", "g", "]", "[", "4", "]", "/", "2.0", ")", "*", "240.0", ")", "\n", "gt_boxes", ".", "append", "(", "float", "(", "truths", "[", "g", "]", "[", "1", "]", "+", "truths", "[", "g", "]", "[", "3", "]", "/", "2.0", ")", "*", "320.0", ")", "\n", "gt_boxes", ".", "append", "(", "float", "(", "truths", "[", "g", "]", "[", "2", "]", "+", "truths", "[", "g", "]", "[", "4", "]", "/", "2.0", ")", "*", "240.0", ")", "\n", "all_gt_boxes", ".", "append", "(", "gt_boxes", ")", "\n", "\n", "", "", "", "", "v_annotation", "[", "'gt_classes'", "]", "=", "t_label", "\n", "v_annotation", "[", "'tubes'", "]", "=", "np", ".", "expand_dims", "(", "np", ".", "array", "(", "all_gt_boxes", ")", ",", "axis", "=", "0", ")", "\n", "gt_videos", "[", "video_name", "]", "=", "v_annotation", "\n", "\n", "", "iou_list", "=", "[", "0.05", ",", "0.1", ",", "0.2", ",", "0.3", ",", "0.5", ",", "0.75", "]", "\n", "for", "iou_th", "in", "iou_list", ":", "\n", "        ", "print", "(", "'iou is: '", ",", "iou_th", ")", "\n", "print", "(", "evaluate_videoAP", "(", "gt_videos", ",", "detected_boxes", ",", "CLASSES", ",", "iou_th", ",", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.InverseClassFrequency.labels_to_class_weights": [[4, 14], ["numpy.concatenate", "labels[].astype", "numpy.bincount", "np.bincount.sum", "torch.Tensor"], "function", ["None"], ["def", "labels_to_class_weights", "(", "labels", ",", "k", ",", "nc", "=", "80", ")", ":", "\n", "# Get class weights (inverse frequency) from training labels", "\n", "    ", "labels", "=", "np", ".", "concatenate", "(", "labels", ",", "0", ")", "# labels.shape = (866643, 5) for COCO", "\n", "lasses", "=", "labels", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int", ")", "# labels = [class xywh]", "\n", "weights", "=", "np", ".", "bincount", "(", "classes", ",", "minlength", "=", "nc", ")", "# occurences per class", "\n", "weights", "[", "weights", "==", "0", "]", "=", "1", "# replace empty bins with 1", "\n", "weights", "=", "1", "/", "weights", "# number of targets per class", "\n", "weights", "/=", "weights", ".", "sum", "(", ")", "# normalize", "\n", "weights", "*=", "k", "# multiply by hyperparameter", "\n", "return", "torch", ".", "Tensor", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.InverseClassFrequency.WeightedCrossEntropy": [[16, 25], ["loss.sum", "numpy.dot", "numpy.expand_dims", "numpy.log2", "numpy.log2"], "function", ["None"], ["", "def", "WeightedCrossEntropy", "(", "logits", ",", "label", ",", "weight", ")", ":", "\n", "    ", "'''\n    :param logits:  net's output, which has reshaped [batch size,num_class]\n    :param label:   Ground Truth which is ont hot encoing and has typr format of [batch size, num_class]\n    :param weight:  a vector that describes every catagory's coefficent whose shape is (num_class,)\n    :return: a scalar \n    '''", "\n", "loss", "=", "np", ".", "dot", "(", "np", ".", "log2", "(", "logits", ")", "*", "label", ",", "np", ".", "expand_dims", "(", "weight", ",", "axis", "=", "1", ")", ")", "+", "np", ".", "log2", "(", "1", "-", "logits", ")", "*", "(", "1", "-", "label", ")", "\n", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.InverseClassFrequency.ICFCrossEntropy": [[26, 29], ["InverseClassFrequency.labels_to_class_weights", "InverseClassFrequency.WeightedCrossEntropy"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.InverseClassFrequency.labels_to_class_weights", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.InverseClassFrequency.WeightedCrossEntropy"], ["", "def", "ICFCrossEntropy", "(", "logits", ",", "label", ",", "labels", ",", "k", "=", "1", ")", ":", "\n", "    ", "weights", "=", "labels_to_class_weights", "(", "labels", ",", "k", ")", "\n", "return", "WeightedCrossEntropy", "(", "logits", ",", "label", ",", "weights", ")", "", "", ""]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.FocalLoss.FocalLoss.__init__": [[31, 43], ["torch.Module.__init__", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "isinstance", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["def", "__init__", "(", "self", ",", "class_num", ",", "alpha", "=", "None", ",", "gamma", "=", "2", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "alpha", "is", "None", ":", "\n", "            ", "self", ".", "alpha", "=", "Variable", "(", "torch", ".", "ones", "(", "class_num", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "alpha", ",", "Variable", ")", ":", "\n", "                ", "self", ".", "alpha", "=", "alpha", "\n", "", "else", ":", "\n", "                ", "self", ".", "alpha", "=", "Variable", "(", "alpha", ")", "\n", "", "", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.FocalLoss.FocalLoss.forward": [[44, 77], ["inputs.size", "inputs.size", "torch.softmax", "torch.softmax", "torch.softmax", "inputs.data.new().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "targets.view", "torch.autograd.Variable.scatter_", "torch.autograd.Variable.scatter_", "torch.autograd.Variable.scatter_", "probs.log", "FocalLoss.FocalLoss.alpha.cuda", "batch_loss.mean", "batch_loss.sum", "inputs.data.new", "targets.view.data.view", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.softmax", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.softmax", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.softmax"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "N", "=", "inputs", ".", "size", "(", "0", ")", "\n", "#print(N)", "\n", "C", "=", "inputs", ".", "size", "(", "1", ")", "\n", "P", "=", "F", ".", "softmax", "(", "inputs", ",", "dim", "=", "1", ")", "\n", "\n", "class_mask", "=", "inputs", ".", "data", ".", "new", "(", "N", ",", "C", ")", ".", "fill_", "(", "0", ")", "\n", "class_mask", "=", "Variable", "(", "class_mask", ")", "\n", "ids", "=", "targets", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "class_mask", ".", "scatter_", "(", "1", ",", "ids", ",", "1.", ")", "\n", "#print(class_mask)", "\n", "\n", "\n", "if", "inputs", ".", "is_cuda", "and", "not", "self", ".", "alpha", ".", "is_cuda", ":", "\n", "            ", "self", ".", "alpha", "=", "self", ".", "alpha", ".", "cuda", "(", ")", "\n", "", "alpha", "=", "self", ".", "alpha", "[", "ids", ".", "data", ".", "view", "(", "-", "1", ")", "]", "\n", "\n", "probs", "=", "(", "P", "*", "class_mask", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "log_p", "=", "probs", ".", "log", "(", ")", "\n", "#print('probs size= {}'.format(probs.size()))", "\n", "#print(probs)", "\n", "\n", "batch_loss", "=", "-", "alpha", "*", "(", "torch", ".", "pow", "(", "(", "1", "-", "probs", ")", ",", "self", ".", "gamma", ")", ")", "*", "log_p", "\n", "#print('-----bacth_loss------')", "\n", "#print(batch_loss)", "\n", "\n", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "loss", "=", "batch_loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "batch_loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.__init__": [[18, 20], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.reset": [[21, 26], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.AverageMeter.update": [[27, 32], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.save_checkpoint": [[34, 39], ["torch.save", "shutil.copyfile", "str", "str", "str"], "function", ["None"], ["", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "directory", ",", "dataset", ",", "clip_duration", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "'%s/%s_checkpoint.pth'", "%", "(", "directory", ",", "'yowo_'", "+", "dataset", "+", "'_'", "+", "str", "(", "clip_duration", ")", "+", "'f'", ")", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "'%s/%s_checkpoint.pth'", "%", "(", "directory", ",", "'yowo_'", "+", "dataset", "+", "'_'", "+", "str", "(", "clip_duration", ")", "+", "'f'", ")", ",", "\n", "'%s/%s_best.pth'", "%", "(", "directory", ",", "'yowo_'", "+", "dataset", "+", "'_'", "+", "str", "(", "clip_duration", ")", "+", "'f'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid": [[42, 44], ["math.exp"], "function", ["None"], ["", "", "def", "sigmoid", "(", "x", ")", ":", "\n", "    ", "return", "1.0", "/", "(", "math", ".", "exp", "(", "-", "x", ")", "+", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.softmax": [[45, 49], ["torch.exp", "torch.exp.sum", "torch.max"], "function", ["None"], ["", "def", "softmax", "(", "x", ")", ":", "\n", "    ", "x", "=", "torch", ".", "exp", "(", "x", "-", "torch", ".", "max", "(", "x", ")", ")", "\n", "x", "=", "x", "/", "x", ".", "sum", "(", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.bbox_iou": [[51, 83], ["min", "max", "min", "max", "min", "max", "min", "max", "float", "float", "float", "float", "float", "float", "float", "float"], "function", ["None"], ["", "def", "bbox_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "True", ")", ":", "\n", "    ", "if", "x1y1x2y2", ":", "\n", "        ", "mx", "=", "min", "(", "box1", "[", "0", "]", ",", "box2", "[", "0", "]", ")", "\n", "Mx", "=", "max", "(", "box1", "[", "2", "]", ",", "box2", "[", "2", "]", ")", "\n", "my", "=", "min", "(", "box1", "[", "1", "]", ",", "box2", "[", "1", "]", ")", "\n", "My", "=", "max", "(", "box1", "[", "3", "]", ",", "box2", "[", "3", "]", ")", "\n", "w1", "=", "box1", "[", "2", "]", "-", "box1", "[", "0", "]", "\n", "h1", "=", "box1", "[", "3", "]", "-", "box1", "[", "1", "]", "\n", "w2", "=", "box2", "[", "2", "]", "-", "box2", "[", "0", "]", "\n", "h2", "=", "box2", "[", "3", "]", "-", "box2", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "mx", "=", "min", "(", "float", "(", "box1", "[", "0", "]", "-", "box1", "[", "2", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "0", "]", "-", "box2", "[", "2", "]", "/", "2.0", ")", ")", "\n", "Mx", "=", "max", "(", "float", "(", "box1", "[", "0", "]", "+", "box1", "[", "2", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "0", "]", "+", "box2", "[", "2", "]", "/", "2.0", ")", ")", "\n", "my", "=", "min", "(", "float", "(", "box1", "[", "1", "]", "-", "box1", "[", "3", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "1", "]", "-", "box2", "[", "3", "]", "/", "2.0", ")", ")", "\n", "My", "=", "max", "(", "float", "(", "box1", "[", "1", "]", "+", "box1", "[", "3", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "1", "]", "+", "box2", "[", "3", "]", "/", "2.0", ")", ")", "\n", "w1", "=", "box1", "[", "2", "]", "\n", "h1", "=", "box1", "[", "3", "]", "\n", "w2", "=", "box2", "[", "2", "]", "\n", "h2", "=", "box2", "[", "3", "]", "\n", "", "uw", "=", "Mx", "-", "mx", "\n", "uh", "=", "My", "-", "my", "\n", "cw", "=", "w1", "+", "w2", "-", "uw", "\n", "ch", "=", "h1", "+", "h2", "-", "uh", "\n", "carea", "=", "0", "\n", "if", "cw", "<=", "0", "or", "ch", "<=", "0", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "area1", "=", "w1", "*", "h1", "\n", "area2", "=", "w2", "*", "h2", "\n", "carea", "=", "cw", "*", "ch", "\n", "uarea", "=", "area1", "+", "area2", "-", "carea", "\n", "return", "carea", "/", "uarea", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.video_iou": [[85, 117], ["min", "max", "min", "max", "min", "max", "min", "max", "float", "float", "float", "float", "float", "float", "float", "float"], "function", ["None"], ["", "def", "video_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "True", ")", ":", "\n", "    ", "if", "x1y1x2y2", ":", "\n", "        ", "mx", "=", "min", "(", "box1", "[", "0", "]", ",", "box2", "[", "0", "]", ")", "\n", "Mx", "=", "max", "(", "box1", "[", "2", "]", ",", "box2", "[", "2", "]", ")", "\n", "my", "=", "min", "(", "box1", "[", "1", "]", ",", "box2", "[", "1", "]", ")", "\n", "My", "=", "max", "(", "box1", "[", "3", "]", ",", "box2", "[", "3", "]", ")", "\n", "w1", "=", "box1", "[", "2", "]", "-", "box1", "[", "0", "]", "\n", "h1", "=", "box1", "[", "3", "]", "-", "box1", "[", "1", "]", "\n", "w2", "=", "box2", "[", "2", "]", "-", "box2", "[", "0", "]", "\n", "h2", "=", "box2", "[", "3", "]", "-", "box2", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "mx", "=", "min", "(", "float", "(", "box1", "[", "0", "]", "-", "box1", "[", "2", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "0", "]", "-", "box2", "[", "2", "]", "/", "2.0", ")", ")", "\n", "Mx", "=", "max", "(", "float", "(", "box1", "[", "0", "]", "+", "box1", "[", "2", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "0", "]", "+", "box2", "[", "2", "]", "/", "2.0", ")", ")", "\n", "my", "=", "min", "(", "float", "(", "box1", "[", "1", "]", "-", "box1", "[", "3", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "1", "]", "-", "box2", "[", "3", "]", "/", "2.0", ")", ")", "\n", "My", "=", "max", "(", "float", "(", "box1", "[", "1", "]", "+", "box1", "[", "3", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "1", "]", "+", "box2", "[", "3", "]", "/", "2.0", ")", ")", "\n", "w1", "=", "box1", "[", "2", "]", "\n", "h1", "=", "box1", "[", "3", "]", "\n", "w2", "=", "box2", "[", "2", "]", "\n", "h2", "=", "box2", "[", "3", "]", "\n", "", "uw", "=", "Mx", "-", "mx", "\n", "uh", "=", "My", "-", "my", "\n", "cw", "=", "w1", "+", "w2", "-", "uw", "\n", "ch", "=", "h1", "+", "h2", "-", "uh", "\n", "carea", "=", "0", "\n", "if", "cw", "<=", "0", "or", "ch", "<=", "0", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "area1", "=", "w1", "*", "h1", "\n", "area2", "=", "w2", "*", "h2", "\n", "carea", "=", "cw", "*", "ch", "\n", "uarea", "=", "area1", "+", "area2", "-", "carea", "\n", "return", "carea", ",", "uarea", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.bbox_ious": [[118, 148], ["torch.min", "torch.max", "torch.min", "torch.max", "torch.min", "torch.max", "torch.min", "torch.max"], "function", ["None"], ["", "def", "bbox_ious", "(", "boxes1", ",", "boxes2", ",", "x1y1x2y2", "=", "True", ")", ":", "\n", "    ", "if", "x1y1x2y2", ":", "\n", "        ", "mx", "=", "torch", ".", "min", "(", "boxes1", "[", "0", "]", ",", "boxes2", "[", "0", "]", ")", "\n", "Mx", "=", "torch", ".", "max", "(", "boxes1", "[", "2", "]", ",", "boxes2", "[", "2", "]", ")", "\n", "my", "=", "torch", ".", "min", "(", "boxes1", "[", "1", "]", ",", "boxes2", "[", "1", "]", ")", "\n", "My", "=", "torch", ".", "max", "(", "boxes1", "[", "3", "]", ",", "boxes2", "[", "3", "]", ")", "\n", "w1", "=", "boxes1", "[", "2", "]", "-", "boxes1", "[", "0", "]", "\n", "h1", "=", "boxes1", "[", "3", "]", "-", "boxes1", "[", "1", "]", "\n", "w2", "=", "boxes2", "[", "2", "]", "-", "boxes2", "[", "0", "]", "\n", "h2", "=", "boxes2", "[", "3", "]", "-", "boxes2", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "mx", "=", "torch", ".", "min", "(", "boxes1", "[", "0", "]", "-", "boxes1", "[", "2", "]", "/", "2.0", ",", "boxes2", "[", "0", "]", "-", "boxes2", "[", "2", "]", "/", "2.0", ")", "\n", "Mx", "=", "torch", ".", "max", "(", "boxes1", "[", "0", "]", "+", "boxes1", "[", "2", "]", "/", "2.0", ",", "boxes2", "[", "0", "]", "+", "boxes2", "[", "2", "]", "/", "2.0", ")", "\n", "my", "=", "torch", ".", "min", "(", "boxes1", "[", "1", "]", "-", "boxes1", "[", "3", "]", "/", "2.0", ",", "boxes2", "[", "1", "]", "-", "boxes2", "[", "3", "]", "/", "2.0", ")", "\n", "My", "=", "torch", ".", "max", "(", "boxes1", "[", "1", "]", "+", "boxes1", "[", "3", "]", "/", "2.0", ",", "boxes2", "[", "1", "]", "+", "boxes2", "[", "3", "]", "/", "2.0", ")", "\n", "w1", "=", "boxes1", "[", "2", "]", "\n", "h1", "=", "boxes1", "[", "3", "]", "\n", "w2", "=", "boxes2", "[", "2", "]", "\n", "h2", "=", "boxes2", "[", "3", "]", "\n", "", "uw", "=", "Mx", "-", "mx", "\n", "uh", "=", "My", "-", "my", "\n", "cw", "=", "w1", "+", "w2", "-", "uw", "\n", "ch", "=", "h1", "+", "h2", "-", "uh", "\n", "mask", "=", "(", "(", "cw", "<=", "0", ")", "+", "(", "ch", "<=", "0", ")", ">", "0", ")", "\n", "area1", "=", "w1", "*", "h1", "\n", "area2", "=", "w2", "*", "h2", "\n", "carea", "=", "cw", "*", "ch", "\n", "carea", "[", "mask", "]", "=", "0", "\n", "uarea", "=", "area1", "+", "area2", "-", "carea", "\n", "return", "carea", "/", "uarea", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.nms": [[149, 169], ["torch.zeros", "range", "torch.sort", "range", "len", "len", "len", "len", "out_boxes.append", "range", "len", "utils.bbox_iou"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.bbox_iou"], ["", "def", "nms", "(", "boxes", ",", "nms_thresh", ")", ":", "\n", "    ", "if", "len", "(", "boxes", ")", "==", "0", ":", "\n", "        ", "return", "boxes", "\n", "\n", "", "det_confs", "=", "torch", ".", "zeros", "(", "len", "(", "boxes", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "        ", "det_confs", "[", "i", "]", "=", "1", "-", "boxes", "[", "i", "]", "[", "4", "]", "\n", "\n", "", "_", ",", "sortIds", "=", "torch", ".", "sort", "(", "det_confs", ")", "\n", "out_boxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "        ", "box_i", "=", "boxes", "[", "sortIds", "[", "i", "]", "]", "\n", "if", "box_i", "[", "4", "]", ">", "0", ":", "\n", "            ", "out_boxes", ".", "append", "(", "box_i", ")", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "boxes", ")", ")", ":", "\n", "                ", "box_j", "=", "boxes", "[", "sortIds", "[", "j", "]", "]", "\n", "if", "bbox_iou", "(", "box_i", ",", "box_j", ",", "x1y1x2y2", "=", "False", ")", ">", "nms_thresh", ":", "\n", "#print(box_i, box_j, bbox_iou(box_i, box_j, x1y1x2y2=False))", "\n", "                    ", "box_j", "[", "4", "]", "=", "0", "\n", "", "", "", "", "return", "out_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.area2d": [[171, 173], ["None"], "function", ["None"], ["", "def", "area2d", "(", "b", ")", ":", "\n", "    ", "return", "(", "b", "[", ":", ",", "2", "]", "-", "b", "[", ":", ",", "0", "]", "+", "1", ")", "*", "(", "b", "[", ":", ",", "3", "]", "-", "b", "[", ":", ",", "1", "]", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.overlap2d": [[174, 182], ["numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.maximum"], "function", ["None"], ["", "def", "overlap2d", "(", "b1", ",", "b2", ")", ":", "\n", "    ", "xmin", "=", "np", ".", "maximum", "(", "b1", "[", ":", ",", "0", "]", ",", "b2", "[", ":", ",", "0", "]", ")", "\n", "xmax", "=", "np", ".", "minimum", "(", "b1", "[", ":", ",", "2", "]", "+", "1", ",", "b2", "[", ":", ",", "2", "]", "+", "1", ")", "\n", "width", "=", "np", ".", "maximum", "(", "0", ",", "xmax", "-", "xmin", ")", "\n", "ymin", "=", "np", ".", "maximum", "(", "b1", "[", ":", ",", "1", "]", ",", "b2", "[", ":", ",", "1", "]", ")", "\n", "ymax", "=", "np", ".", "minimum", "(", "b1", "[", ":", ",", "3", "]", "+", "1", ",", "b2", "[", ":", ",", "3", "]", "+", "1", ")", "\n", "height", "=", "np", ".", "maximum", "(", "0", ",", "ymax", "-", "ymin", ")", "\n", "return", "width", "*", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.iou3d": [[183, 188], ["numpy.all", "utils.overlap2d", "numpy.mean", "utils.area2d", "utils.area2d"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.overlap2d", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.area2d", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.area2d"], ["", "def", "iou3d", "(", "b1", ",", "b2", ")", ":", "\n", "    ", "assert", "b1", ".", "shape", "[", "0", "]", "==", "b2", ".", "shape", "[", "0", "]", "\n", "assert", "np", ".", "all", "(", "b1", "[", ":", ",", "0", "]", "==", "b2", "[", ":", ",", "0", "]", ")", "\n", "o", "=", "overlap2d", "(", "b1", "[", ":", ",", "1", ":", "5", "]", ",", "b2", "[", ":", ",", "1", ":", "5", "]", ")", "\n", "return", "np", ".", "mean", "(", "o", "/", "(", "area2d", "(", "b1", "[", ":", ",", "1", ":", "5", "]", ")", "+", "area2d", "(", "b2", "[", ":", ",", "1", ":", "5", "]", ")", "-", "o", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.iou3dt": [[189, 196], ["max", "min", "max", "min", "utils.iou3d", "numpy.where", "numpy.where", "numpy.where", "numpy.where"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.iou3d"], ["", "def", "iou3dt", "(", "b1", ",", "b2", ")", ":", "\n", "    ", "tmin", "=", "max", "(", "b1", "[", "0", ",", "0", "]", ",", "b2", "[", "0", ",", "0", "]", ")", "\n", "tmax", "=", "min", "(", "b1", "[", "-", "1", ",", "0", "]", ",", "b2", "[", "-", "1", ",", "0", "]", ")", "\n", "if", "tmax", "<=", "tmin", ":", "return", "0.0", "\n", "temporal_inter", "=", "tmax", "-", "tmin", "+", "1", "\n", "temporal_union", "=", "max", "(", "b1", "[", "-", "1", ",", "0", "]", ",", "b2", "[", "-", "1", ",", "0", "]", ")", "-", "min", "(", "b1", "[", "0", ",", "0", "]", ",", "b2", "[", "0", ",", "0", "]", ")", "+", "1", "\n", "return", "iou3d", "(", "b1", "[", "np", ".", "where", "(", "b1", "[", ":", ",", "0", "]", "==", "tmin", ")", "[", "0", "]", "[", "0", "]", ":", "np", ".", "where", "(", "b1", "[", ":", ",", "0", "]", "==", "tmax", ")", "[", "0", "]", "[", "0", "]", "+", "1", ",", ":", "]", ",", "b2", "[", "np", ".", "where", "(", "b2", "[", ":", ",", "0", "]", "==", "tmin", ")", "[", "0", "]", "[", "0", "]", ":", "np", ".", "where", "(", "b2", "[", ":", ",", "0", "]", "==", "tmax", ")", "[", "0", "]", "[", "0", "]", "+", "1", ",", ":", "]", ")", "*", "temporal_inter", "/", "temporal_union", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.nms_3d": [[197, 211], ["numpy.argsort", "numpy.zeros", "len", "numpy.array", "numpy.array", "utils.iou3dt", "numpy.where"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.iou3dt"], ["", "def", "nms_3d", "(", "detections", ",", "overlap", "=", "0.5", ")", ":", "\n", "# detections: [(tube1, score1), (tube2, score2)]", "\n", "    ", "if", "len", "(", "detections", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "I", "=", "np", ".", "argsort", "(", "[", "d", "[", "1", "]", "for", "d", "in", "detections", "]", ")", "\n", "indices", "=", "np", ".", "zeros", "(", "I", ".", "size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "counter", "=", "0", "\n", "while", "I", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "I", "[", "-", "1", "]", "\n", "indices", "[", "counter", "]", "=", "i", "\n", "counter", "+=", "1", "\n", "ious", "=", "np", ".", "array", "(", "[", "iou3dt", "(", "detections", "[", "ii", "]", "[", "0", "]", ",", "detections", "[", "i", "]", "[", "0", "]", ")", "for", "ii", "in", "I", "[", ":", "-", "1", "]", "]", ")", "\n", "I", "=", "I", "[", "np", ".", "where", "(", "ious", "<=", "overlap", ")", "[", "0", "]", "]", "\n", "", "return", "indices", "[", ":", "counter", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.voc_ap": [[212, 245], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "def", "voc_ap", "(", "pr", ",", "use_07_metric", "=", "False", ")", ":", "\n", "    ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n    Compute VOC AP given precision and recall.\n    If use_07_metric is true, uses the\n    VOC 07 11 point method (default:False).\n    \"\"\"", "\n", "rec", ",", "prec", "=", "pr", "[", ":", ",", "1", "]", ",", "pr", "[", ":", ",", "0", "]", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu": [[247, 249], ["torch.FloatTensor().copy_", "torch.FloatTensor", "gpu_matrix.size"], "function", ["None"], ["", "def", "convert2cpu", "(", "gpu_matrix", ")", ":", "\n", "    ", "return", "torch", ".", "FloatTensor", "(", "gpu_matrix", ".", "size", "(", ")", ")", ".", "copy_", "(", "gpu_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu_long": [[250, 252], ["torch.LongTensor().copy_", "torch.LongTensor", "gpu_matrix.size"], "function", ["None"], ["", "def", "convert2cpu_long", "(", "gpu_matrix", ")", ":", "\n", "    ", "return", "torch", ".", "LongTensor", "(", "gpu_matrix", ".", "size", "(", ")", ")", ".", "copy_", "(", "gpu_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.get_region_boxes": [[253, 334], ["output.unsqueeze.size", "output.unsqueeze.size", "output.unsqueeze.size", "time.time", "output.unsqueeze.view().transpose().contiguous().view", "torch.linspace().repeat().repeat().view().cuda", "torch.linspace().repeat().t().repeat().view().cuda", "torch.Tensor().view().index_select", "torch.Tensor().view().index_select", "anchor_w.repeat().repeat().view().cuda.repeat().repeat().view().cuda", "anchor_h.repeat().repeat().view().cuda.repeat().repeat().view().cuda", "torch.sigmoid", "torch.max", "convert2cpu.view", "convert2cpu_long.view", "time.time", "utils.convert2cpu", "utils.convert2cpu", "utils.convert2cpu_long", "utils.convert2cpu", "utils.convert2cpu", "utils.convert2cpu", "utils.convert2cpu", "time.time", "range", "time.time", "len", "output.unsqueeze.dim", "output.unsqueeze.unsqueeze", "output.unsqueeze.size", "torch.sigmoid", "torch.sigmoid", "torch.LongTensor", "torch.LongTensor", "torch.exp", "torch.exp", "utils.convert2cpu", "range", "all_boxes.append", "print", "print", "print", "print", "print", "output.unsqueeze.view().transpose().contiguous", "torch.linspace().repeat().repeat().view", "torch.linspace().repeat().t().repeat().view", "torch.Tensor().view", "torch.Tensor().view", "anchor_w.repeat().repeat().view().cuda.repeat().repeat().view", "anchor_h.repeat().repeat().view().cuda.repeat().repeat().view", "torch.nn.Softmax", "torch.autograd.Variable", "convert2cpu.view", "range", "output[].transpose", "range", "output.unsqueeze.view().transpose", "torch.linspace().repeat().repeat", "torch.linspace().repeat().t().repeat", "torch.Tensor", "torch.Tensor", "anchor_w.repeat().repeat().view().cuda.repeat().repeat", "anchor_h.repeat().repeat().view().cuda.repeat().repeat", "boxes.append", "output.unsqueeze.view", "torch.linspace().repeat", "torch.linspace().repeat().t", "anchor_w.repeat().repeat().view().cuda.repeat", "anchor_h.repeat().repeat().view().cuda.repeat", "range", "torch.linspace", "torch.linspace().repeat", "box.append", "box.append", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu_long", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu"], ["", "def", "get_region_boxes", "(", "output", ",", "conf_thresh", ",", "num_classes", ",", "anchors", ",", "num_anchors", ",", "only_objectness", "=", "1", ",", "validation", "=", "False", ")", ":", "\n", "    ", "anchor_step", "=", "len", "(", "anchors", ")", "//", "num_anchors", "\n", "if", "output", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "output", "=", "output", ".", "unsqueeze", "(", "0", ")", "\n", "", "batch", "=", "output", ".", "size", "(", "0", ")", "\n", "assert", "(", "output", ".", "size", "(", "1", ")", "==", "(", "5", "+", "num_classes", ")", "*", "num_anchors", ")", "\n", "h", "=", "output", ".", "size", "(", "2", ")", "\n", "w", "=", "output", ".", "size", "(", "3", ")", "\n", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "all_boxes", "=", "[", "]", "\n", "output", "=", "output", ".", "view", "(", "batch", "*", "num_anchors", ",", "5", "+", "num_classes", ",", "h", "*", "w", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "5", "+", "num_classes", ",", "batch", "*", "num_anchors", "*", "h", "*", "w", ")", "\n", "\n", "grid_x", "=", "torch", ".", "linspace", "(", "0", ",", "w", "-", "1", ",", "w", ")", ".", "repeat", "(", "h", ",", "1", ")", ".", "repeat", "(", "batch", "*", "num_anchors", ",", "1", ",", "1", ")", ".", "view", "(", "batch", "*", "num_anchors", "*", "h", "*", "w", ")", ".", "cuda", "(", ")", "\n", "grid_y", "=", "torch", ".", "linspace", "(", "0", ",", "h", "-", "1", ",", "h", ")", ".", "repeat", "(", "w", ",", "1", ")", ".", "t", "(", ")", ".", "repeat", "(", "batch", "*", "num_anchors", ",", "1", ",", "1", ")", ".", "view", "(", "batch", "*", "num_anchors", "*", "h", "*", "w", ")", ".", "cuda", "(", ")", "\n", "xs", "=", "torch", ".", "sigmoid", "(", "output", "[", "0", "]", ")", "+", "grid_x", "\n", "ys", "=", "torch", ".", "sigmoid", "(", "output", "[", "1", "]", ")", "+", "grid_y", "\n", "\n", "anchor_w", "=", "torch", ".", "Tensor", "(", "anchors", ")", ".", "view", "(", "num_anchors", ",", "anchor_step", ")", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ")", "\n", "anchor_h", "=", "torch", ".", "Tensor", "(", "anchors", ")", ".", "view", "(", "num_anchors", ",", "anchor_step", ")", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ")", "\n", "anchor_w", "=", "anchor_w", ".", "repeat", "(", "batch", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "h", "*", "w", ")", ".", "view", "(", "batch", "*", "num_anchors", "*", "h", "*", "w", ")", ".", "cuda", "(", ")", "\n", "anchor_h", "=", "anchor_h", ".", "repeat", "(", "batch", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "h", "*", "w", ")", ".", "view", "(", "batch", "*", "num_anchors", "*", "h", "*", "w", ")", ".", "cuda", "(", ")", "\n", "ws", "=", "torch", ".", "exp", "(", "output", "[", "2", "]", ")", "*", "anchor_w", "\n", "hs", "=", "torch", ".", "exp", "(", "output", "[", "3", "]", ")", "*", "anchor_h", "\n", "\n", "det_confs", "=", "torch", ".", "sigmoid", "(", "output", "[", "4", "]", ")", "\n", "\n", "cls_confs", "=", "torch", ".", "nn", ".", "Softmax", "(", ")", "(", "Variable", "(", "output", "[", "5", ":", "5", "+", "num_classes", "]", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", ".", "data", "\n", "cls_max_confs", ",", "cls_max_ids", "=", "torch", ".", "max", "(", "cls_confs", ",", "1", ")", "\n", "cls_max_confs", "=", "cls_max_confs", ".", "view", "(", "-", "1", ")", "\n", "cls_max_ids", "=", "cls_max_ids", ".", "view", "(", "-", "1", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "\n", "sz_hw", "=", "h", "*", "w", "\n", "sz_hwa", "=", "sz_hw", "*", "num_anchors", "\n", "det_confs", "=", "convert2cpu", "(", "det_confs", ")", "\n", "cls_max_confs", "=", "convert2cpu", "(", "cls_max_confs", ")", "\n", "cls_max_ids", "=", "convert2cpu_long", "(", "cls_max_ids", ")", "\n", "xs", "=", "convert2cpu", "(", "xs", ")", "\n", "ys", "=", "convert2cpu", "(", "ys", ")", "\n", "ws", "=", "convert2cpu", "(", "ws", ")", "\n", "hs", "=", "convert2cpu", "(", "hs", ")", "\n", "if", "validation", ":", "\n", "        ", "cls_confs", "=", "convert2cpu", "(", "cls_confs", ".", "view", "(", "-", "1", ",", "num_classes", ")", ")", "\n", "", "t2", "=", "time", ".", "time", "(", ")", "\n", "for", "b", "in", "range", "(", "batch", ")", ":", "\n", "        ", "boxes", "=", "[", "]", "\n", "for", "cy", "in", "range", "(", "h", ")", ":", "\n", "            ", "for", "cx", "in", "range", "(", "w", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_anchors", ")", ":", "\n", "                    ", "ind", "=", "b", "*", "sz_hwa", "+", "i", "*", "sz_hw", "+", "cy", "*", "w", "+", "cx", "\n", "det_conf", "=", "det_confs", "[", "ind", "]", "\n", "if", "only_objectness", ":", "\n", "                        ", "conf", "=", "det_confs", "[", "ind", "]", "\n", "", "else", ":", "\n", "                        ", "conf", "=", "det_confs", "[", "ind", "]", "*", "cls_max_confs", "[", "ind", "]", "\n", "\n", "", "if", "conf", ">", "conf_thresh", ":", "\n", "                        ", "bcx", "=", "xs", "[", "ind", "]", "\n", "bcy", "=", "ys", "[", "ind", "]", "\n", "bw", "=", "ws", "[", "ind", "]", "\n", "bh", "=", "hs", "[", "ind", "]", "\n", "cls_max_conf", "=", "cls_max_confs", "[", "ind", "]", "\n", "cls_max_id", "=", "cls_max_ids", "[", "ind", "]", "\n", "box", "=", "[", "bcx", "/", "w", ",", "bcy", "/", "h", ",", "bw", "/", "w", ",", "bh", "/", "h", ",", "det_conf", ",", "cls_max_conf", ",", "cls_max_id", "]", "\n", "if", "(", "not", "only_objectness", ")", "and", "validation", ":", "\n", "                            ", "for", "c", "in", "range", "(", "num_classes", ")", ":", "\n", "                                ", "tmp_conf", "=", "cls_confs", "[", "ind", "]", "[", "c", "]", "\n", "if", "c", "!=", "cls_max_id", "and", "det_confs", "[", "ind", "]", "*", "tmp_conf", ">", "conf_thresh", ":", "\n", "                                    ", "box", ".", "append", "(", "tmp_conf", ")", "\n", "box", ".", "append", "(", "c", ")", "\n", "", "", "", "boxes", ".", "append", "(", "box", ")", "\n", "", "", "", "", "all_boxes", ".", "append", "(", "boxes", ")", "\n", "", "t3", "=", "time", ".", "time", "(", ")", "\n", "if", "False", ":", "\n", "        ", "print", "(", "'---------------------------------'", ")", "\n", "print", "(", "'matrix computation : %f'", "%", "(", "t1", "-", "t0", ")", ")", "\n", "print", "(", "'        gpu to cpu : %f'", "%", "(", "t2", "-", "t1", ")", ")", "\n", "print", "(", "'      boxes filter : %f'", "%", "(", "t3", "-", "t2", ")", ")", "\n", "print", "(", "'---------------------------------'", ")", "\n", "", "return", "all_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.get_region_boxes_video": [[335, 423], ["output.unsqueeze.size", "output.unsqueeze.size", "output.unsqueeze.size", "time.time", "output.unsqueeze.view().transpose().contiguous().view", "torch.linspace().repeat().repeat().view().cuda", "torch.linspace().repeat().t().repeat().view().cuda", "torch.Tensor().view().index_select", "torch.Tensor().view().index_select", "anchor_w.repeat().repeat().view().cuda.repeat().repeat().view().cuda", "anchor_h.repeat().repeat().view().cuda.repeat().repeat().view().cuda", "torch.sigmoid", "torch.max", "convert2cpu.view", "convert2cpu_long.view", "time.time", "utils.convert2cpu", "utils.convert2cpu", "utils.convert2cpu_long", "utils.convert2cpu", "utils.convert2cpu", "utils.convert2cpu", "utils.convert2cpu", "time.time", "range", "time.time", "len", "output.unsqueeze.dim", "output.unsqueeze.unsqueeze", "output.unsqueeze.size", "torch.sigmoid", "torch.sigmoid", "torch.LongTensor", "torch.LongTensor", "torch.exp", "torch.exp", "utils.convert2cpu", "range", "all_boxes.append", "print", "print", "print", "print", "print", "output.unsqueeze.view().transpose().contiguous", "torch.linspace().repeat().repeat().view", "torch.linspace().repeat().t().repeat().view", "torch.Tensor().view", "torch.Tensor().view", "anchor_w.repeat().repeat().view().cuda.repeat().repeat().view", "anchor_h.repeat().repeat().view().cuda.repeat().repeat().view", "torch.nn.Softmax", "torch.autograd.Variable", "convert2cpu.view", "range", "output[].transpose", "range", "output.unsqueeze.view().transpose", "torch.linspace().repeat().repeat", "torch.linspace().repeat().t().repeat", "torch.Tensor", "torch.Tensor", "anchor_w.repeat().repeat().view().cuda.repeat().repeat", "anchor_h.repeat().repeat().view().cuda.repeat().repeat", "boxes.append", "output.unsqueeze.view", "torch.linspace().repeat", "torch.linspace().repeat().t", "anchor_w.repeat().repeat().view().cuda.repeat", "anchor_h.repeat().repeat().view().cuda.repeat", "range", "box.append", "box.append", "torch.linspace", "torch.linspace().repeat", "torch.linspace"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu_long", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.sigmoid", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.convert2cpu"], ["", "def", "get_region_boxes_video", "(", "output", ",", "conf_thresh", ",", "num_classes", ",", "anchors", ",", "num_anchors", ",", "only_objectness", "=", "1", ",", "validation", "=", "False", ")", ":", "\n", "    ", "anchor_step", "=", "len", "(", "anchors", ")", "//", "num_anchors", "\n", "if", "output", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "output", "=", "output", ".", "unsqueeze", "(", "0", ")", "\n", "", "batch", "=", "output", ".", "size", "(", "0", ")", "\n", "assert", "(", "output", ".", "size", "(", "1", ")", "==", "(", "5", "+", "num_classes", ")", "*", "num_anchors", ")", "\n", "h", "=", "output", ".", "size", "(", "2", ")", "\n", "w", "=", "output", ".", "size", "(", "3", ")", "\n", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "all_boxes", "=", "[", "]", "\n", "output", "=", "output", ".", "view", "(", "batch", "*", "num_anchors", ",", "5", "+", "num_classes", ",", "h", "*", "w", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "5", "+", "num_classes", ",", "batch", "*", "num_anchors", "*", "h", "*", "w", ")", "\n", "\n", "grid_x", "=", "torch", ".", "linspace", "(", "0", ",", "w", "-", "1", ",", "w", ")", ".", "repeat", "(", "h", ",", "1", ")", ".", "repeat", "(", "batch", "*", "num_anchors", ",", "1", ",", "1", ")", ".", "view", "(", "batch", "*", "num_anchors", "*", "h", "*", "w", ")", ".", "cuda", "(", ")", "\n", "grid_y", "=", "torch", ".", "linspace", "(", "0", ",", "h", "-", "1", ",", "h", ")", ".", "repeat", "(", "w", ",", "1", ")", ".", "t", "(", ")", ".", "repeat", "(", "batch", "*", "num_anchors", ",", "1", ",", "1", ")", ".", "view", "(", "batch", "*", "num_anchors", "*", "h", "*", "w", ")", ".", "cuda", "(", ")", "\n", "xs", "=", "torch", ".", "sigmoid", "(", "output", "[", "0", "]", ")", "+", "grid_x", "\n", "ys", "=", "torch", ".", "sigmoid", "(", "output", "[", "1", "]", ")", "+", "grid_y", "\n", "\n", "anchor_w", "=", "torch", ".", "Tensor", "(", "anchors", ")", ".", "view", "(", "num_anchors", ",", "anchor_step", ")", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ")", "\n", "anchor_h", "=", "torch", ".", "Tensor", "(", "anchors", ")", ".", "view", "(", "num_anchors", ",", "anchor_step", ")", ".", "index_select", "(", "1", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ")", "\n", "anchor_w", "=", "anchor_w", ".", "repeat", "(", "batch", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "h", "*", "w", ")", ".", "view", "(", "batch", "*", "num_anchors", "*", "h", "*", "w", ")", ".", "cuda", "(", ")", "\n", "anchor_h", "=", "anchor_h", ".", "repeat", "(", "batch", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "h", "*", "w", ")", ".", "view", "(", "batch", "*", "num_anchors", "*", "h", "*", "w", ")", ".", "cuda", "(", ")", "\n", "ws", "=", "torch", ".", "exp", "(", "output", "[", "2", "]", ")", "*", "anchor_w", "\n", "hs", "=", "torch", ".", "exp", "(", "output", "[", "3", "]", ")", "*", "anchor_h", "\n", "\n", "det_confs", "=", "torch", ".", "sigmoid", "(", "output", "[", "4", "]", ")", "\n", "\n", "cls_confs", "=", "torch", ".", "nn", ".", "Softmax", "(", ")", "(", "Variable", "(", "output", "[", "5", ":", "5", "+", "num_classes", "]", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", ".", "data", "\n", "cls_max_confs", ",", "cls_max_ids", "=", "torch", ".", "max", "(", "cls_confs", ",", "1", ")", "\n", "cls_max_confs", "=", "cls_max_confs", ".", "view", "(", "-", "1", ")", "\n", "cls_max_ids", "=", "cls_max_ids", ".", "view", "(", "-", "1", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "\n", "sz_hw", "=", "h", "*", "w", "\n", "sz_hwa", "=", "sz_hw", "*", "num_anchors", "\n", "det_confs", "=", "convert2cpu", "(", "det_confs", ")", "\n", "cls_max_confs", "=", "convert2cpu", "(", "cls_max_confs", ")", "\n", "cls_max_ids", "=", "convert2cpu_long", "(", "cls_max_ids", ")", "\n", "xs", "=", "convert2cpu", "(", "xs", ")", "\n", "ys", "=", "convert2cpu", "(", "ys", ")", "\n", "ws", "=", "convert2cpu", "(", "ws", ")", "\n", "hs", "=", "convert2cpu", "(", "hs", ")", "\n", "if", "validation", ":", "\n", "        ", "cls_confs", "=", "convert2cpu", "(", "cls_confs", ".", "view", "(", "-", "1", ",", "num_classes", ")", ")", "\n", "", "t2", "=", "time", ".", "time", "(", ")", "\n", "for", "b", "in", "range", "(", "batch", ")", ":", "\n", "        ", "boxes", "=", "[", "]", "\n", "for", "cy", "in", "range", "(", "h", ")", ":", "\n", "            ", "for", "cx", "in", "range", "(", "w", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "num_anchors", ")", ":", "\n", "                    ", "ind", "=", "b", "*", "sz_hwa", "+", "i", "*", "sz_hw", "+", "cy", "*", "w", "+", "cx", "\n", "det_conf", "=", "det_confs", "[", "ind", "]", "\n", "if", "only_objectness", ":", "\n", "                        ", "conf", "=", "det_confs", "[", "ind", "]", "\n", "", "else", ":", "\n", "                        ", "conf", "=", "det_confs", "[", "ind", "]", "*", "cls_max_confs", "[", "ind", "]", "\n", "\n", "", "if", "conf", ">", "conf_thresh", ":", "\n", "                        ", "bcx", "=", "xs", "[", "ind", "]", "\n", "bcy", "=", "ys", "[", "ind", "]", "\n", "bw", "=", "ws", "[", "ind", "]", "\n", "bh", "=", "hs", "[", "ind", "]", "\n", "cls_max_conf", "=", "cls_max_confs", "[", "ind", "]", "\n", "cls_max_id", "=", "cls_max_ids", "[", "ind", "]", "\n", "box", "=", "[", "bcx", "/", "w", ",", "bcy", "/", "h", ",", "bw", "/", "w", ",", "bh", "/", "h", ",", "det_conf", "]", "\n", "if", "(", "not", "only_objectness", ")", "and", "validation", ":", "\n", "                            ", "for", "c", "in", "range", "(", "num_classes", ")", ":", "\n", "                                ", "tmp_conf", "=", "cls_confs", "[", "ind", "]", "[", "c", "]", "\n", "box", ".", "append", "(", "tmp_conf", ")", "\n", "box", ".", "append", "(", "c", ")", "\n", "\n", "# box = [bcx/w, bcy/h, bw/w, bh/h, det_conf, cls_max_conf, cls_max_id]", "\n", "# if (not only_objectness) and validation:", "\n", "#     for c in range(num_classes):", "\n", "#         tmp_conf = cls_confs[ind][c]", "\n", "#         if c != cls_max_id and det_confs[ind]*tmp_conf > conf_thresh:", "\n", "#             box.append(tmp_conf)", "\n", "#             box.append(c)", "\n", "", "", "boxes", ".", "append", "(", "box", ")", "\n", "", "", "", "", "all_boxes", ".", "append", "(", "boxes", ")", "\n", "", "t3", "=", "time", ".", "time", "(", ")", "\n", "if", "False", ":", "\n", "        ", "print", "(", "'---------------------------------'", ")", "\n", "print", "(", "'matrix computation : %f'", "%", "(", "t1", "-", "t0", ")", ")", "\n", "print", "(", "'        gpu to cpu : %f'", "%", "(", "t2", "-", "t1", ")", ")", "\n", "print", "(", "'      boxes filter : %f'", "%", "(", "t3", "-", "t2", ")", ")", "\n", "print", "(", "'---------------------------------'", ")", "\n", "", "return", "all_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.plot_boxes_cv2": [[427, 468], ["torch.FloatTensor", "range", "int", "int", "int", "len", "int", "int", "int", "int", "cv2.rectangle", "print", "cv2.imwrite", "math.floor", "math.ceil", "round", "round", "round", "round", "print", "len", "utils.plot_boxes_cv2.get_color"], "function", ["None"], ["", "def", "plot_boxes_cv2", "(", "img", ",", "boxes", ",", "savename", "=", "None", ",", "class_names", "=", "None", ",", "color", "=", "None", ")", ":", "\n", "    ", "import", "cv2", "\n", "colors", "=", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "1", ",", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "1", ",", "1", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", "]", "]", ")", ";", "\n", "def", "get_color", "(", "c", ",", "x", ",", "max_val", ")", ":", "\n", "        ", "ratio", "=", "float", "(", "x", ")", "/", "max_val", "*", "5", "\n", "i", "=", "int", "(", "math", ".", "floor", "(", "ratio", ")", ")", "\n", "j", "=", "int", "(", "math", ".", "ceil", "(", "ratio", ")", ")", "\n", "ratio", "=", "ratio", "-", "i", "\n", "r", "=", "(", "1", "-", "ratio", ")", "*", "colors", "[", "i", "]", "[", "c", "]", "+", "ratio", "*", "colors", "[", "j", "]", "[", "c", "]", "\n", "return", "int", "(", "r", "*", "255", ")", "\n", "\n", "", "width", "=", "img", ".", "shape", "[", "1", "]", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "        ", "box", "=", "boxes", "[", "i", "]", "\n", "x1", "=", "int", "(", "round", "(", "(", "box", "[", "0", "]", "-", "box", "[", "2", "]", "/", "2.0", ")", "*", "width", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "box", "[", "1", "]", "-", "box", "[", "3", "]", "/", "2.0", ")", "*", "height", ")", ")", "\n", "x2", "=", "int", "(", "round", "(", "(", "box", "[", "0", "]", "+", "box", "[", "2", "]", "/", "2.0", ")", "*", "width", ")", ")", "\n", "y2", "=", "int", "(", "round", "(", "(", "box", "[", "1", "]", "+", "box", "[", "3", "]", "/", "2.0", ")", "*", "height", ")", ")", "\n", "\n", "if", "color", ":", "\n", "            ", "rgb", "=", "color", "\n", "", "else", ":", "\n", "            ", "rgb", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "", "if", "len", "(", "box", ")", ">=", "7", "and", "class_names", ":", "\n", "            ", "cls_conf", "=", "box", "[", "5", "]", "\n", "cls_id", "=", "box", "[", "6", "]", "\n", "print", "(", "'%s: %f'", "%", "(", "class_names", "[", "cls_id", "]", ",", "cls_conf", ")", ")", "\n", "classes", "=", "len", "(", "class_names", ")", "\n", "offset", "=", "cls_id", "*", "123457", "%", "classes", "\n", "red", "=", "get_color", "(", "2", ",", "offset", ",", "classes", ")", "\n", "green", "=", "get_color", "(", "1", ",", "offset", ",", "classes", ")", "\n", "blue", "=", "get_color", "(", "0", ",", "offset", ",", "classes", ")", "\n", "if", "color", "is", "None", ":", "\n", "                ", "rgb", "=", "(", "red", ",", "green", ",", "blue", ")", "\n", "", "img", "=", "cv2", ".", "putText", "(", "img", ",", "class_names", "[", "cls_id", "]", ",", "(", "x1", ",", "y1", ")", ",", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "1.2", ",", "rgb", ",", "1", ")", "\n", "", "img", "=", "cv2", ".", "rectangle", "(", "img", ",", "(", "x1", ",", "y1", ")", ",", "(", "x2", ",", "y2", ")", ",", "rgb", ",", "1", ")", "\n", "", "if", "savename", ":", "\n", "        ", "print", "(", "\"save plot results to %s\"", "%", "savename", ")", "\n", "cv2", ".", "imwrite", "(", "savename", ",", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.plot_boxes": [[471, 512], ["torch.FloatTensor", "PIL.ImageDraw.Draw", "range", "img.resize", "int", "int", "int", "len", "max", "max", "min", "min", "ImageDraw.Draw.rectangle", "print", "img.resize.save", "math.floor", "math.ceil", "print", "len", "PIL.ImageFont.truetype", "ImageDraw.Draw.text", "ImageDraw.Draw.text", "float", "len", "str", "numpy.around", "cls_conf.numpy"], "function", ["None"], ["", "def", "plot_boxes", "(", "img", ",", "boxes", ",", "savename", "=", "None", ",", "class_names", "=", "None", ")", ":", "\n", "    ", "colors", "=", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "0", ",", "1", "]", ",", "[", "0", ",", "0", ",", "1", "]", ",", "[", "0", ",", "1", ",", "1", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "1", ",", "1", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", "]", "]", ")", ";", "\n", "def", "get_color", "(", "c", ",", "x", ",", "max_val", ")", ":", "\n", "        ", "ratio", "=", "float", "(", "x", ")", "/", "max_val", "*", "5", "\n", "i", "=", "int", "(", "math", ".", "floor", "(", "ratio", ")", ")", "\n", "j", "=", "int", "(", "math", ".", "ceil", "(", "ratio", ")", ")", "\n", "ratio", "=", "ratio", "-", "i", "\n", "r", "=", "(", "1", "-", "ratio", ")", "*", "colors", "[", "i", "]", "[", "c", "]", "+", "ratio", "*", "colors", "[", "j", "]", "[", "c", "]", "\n", "return", "int", "(", "r", "*", "255", ")", "\n", "\n", "", "width", "=", "img", ".", "width", "\n", "height", "=", "img", ".", "height", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "img", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "        ", "box", "=", "boxes", "[", "i", "]", "\n", "x1", "=", "max", "(", "0.0", ",", "(", "box", "[", "0", "]", "-", "box", "[", "2", "]", "/", "2.0", ")", "*", "width", ")", "\n", "y1", "=", "max", "(", "0.0", ",", "(", "box", "[", "1", "]", "-", "box", "[", "3", "]", "/", "2.0", ")", "*", "height", ")", "\n", "x2", "=", "min", "(", "width", ",", "(", "box", "[", "0", "]", "+", "box", "[", "2", "]", "/", "2.0", ")", "*", "width", ")", "\n", "y2", "=", "min", "(", "height", ",", "(", "box", "[", "1", "]", "+", "box", "[", "3", "]", "/", "2.0", ")", "*", "height", ")", "\n", "\n", "rgb", "=", "(", "255", ",", "0", ",", "0", ")", "\n", "if", "len", "(", "box", ")", ">=", "7", "and", "class_names", ":", "\n", "            ", "cls_conf", "=", "box", "[", "5", "]", "\n", "cls_id", "=", "box", "[", "6", "]", "\n", "print", "(", "'%s: %f'", "%", "(", "class_names", "[", "cls_id", "]", ",", "cls_conf", ")", ")", "\n", "classes", "=", "len", "(", "class_names", ")", "\n", "# offset = cls_id * 123457 % classes", "\n", "# red   = get_color(2, offset, classes)", "\n", "# green = get_color(1, offset, classes)", "\n", "# blue  = get_color(0, offset, classes)", "\n", "rgb", "=", "(", "0", ",", "255", ",", "0", ")", "\n", "font", "=", "ImageFont", ".", "truetype", "(", "'/usr/home/sut/yolo_jhmdb/font/OpenSans-Bold.ttf'", ",", "24", ")", "\n", "draw", ".", "text", "(", "(", "x1", "+", "10", ",", "y1", "+", "5.0", ")", ",", "class_names", "[", "cls_id", "]", ",", "fill", "=", "rgb", ")", "\n", "draw", ".", "text", "(", "(", "x1", "+", "10", ",", "y2", "-", "20.0", ")", ",", "str", "(", "np", ".", "around", "(", "cls_conf", ".", "numpy", "(", ")", ",", "decimals", "=", "3", ")", ")", ",", "fill", "=", "rgb", ")", "\n", "", "draw", ".", "rectangle", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "outline", "=", "rgb", ",", "width", "=", "5", ")", "\n", "\n", "", "img_out", "=", "img", ".", "resize", "(", "(", "448", ",", "448", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "if", "savename", ":", "\n", "        ", "print", "(", "\"save plot results to %s\"", "%", "savename", ")", "\n", "img_out", ".", "save", "(", "savename", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.plot_boxes_tensor": [[513, 517], ["img.numpy().transpose", "PIL.Image.fromarray", "utils.plot_boxes", "numpy.uint8", "img.numpy"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.plot_boxes"], ["", "def", "plot_boxes_tensor", "(", "img", ",", "boxes", ",", "savename", "=", "None", ",", "class_names", "=", "None", ")", ":", "\n", "    ", "img_temp", "=", "img", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "3", ",", "4", ",", "1", ",", "2", ",", "0", ")", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "img_temp", "[", ":", ",", ":", ",", ":", ",", "4", ",", "0", "]", "*", "255", ")", ",", "'RGB'", ")", "\n", "plot_boxes", "(", "im", ",", "boxes", ",", "savename", ",", "class_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.read_truths": [[518, 527], ["os.path.getsize", "os.path.exists", "numpy.array", "numpy.loadtxt", "truths.reshape.reshape", "numpy.array"], "function", ["None"], ["", "def", "read_truths", "(", "lab_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "lab_path", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "]", ")", "\n", "", "if", "os", ".", "path", ".", "getsize", "(", "lab_path", ")", ":", "\n", "        ", "truths", "=", "np", ".", "loadtxt", "(", "lab_path", ")", "\n", "truths", "=", "truths", ".", "reshape", "(", "truths", ".", "size", "//", "5", ",", "5", ")", "# to avoid single truth problem", "\n", "return", "truths", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.read_truths_args": [[528, 546], ["utils.read_truths", "range", "numpy.array", "new_truths.append"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.read_truths"], ["", "", "def", "read_truths_args", "(", "lab_path", ",", "min_box_scale", ")", ":", "\n", "    ", "truths", "=", "read_truths", "(", "lab_path", ")", "\n", "new_truths", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "truths", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "cx", "=", "(", "truths", "[", "i", "]", "[", "1", "]", "+", "truths", "[", "i", "]", "[", "3", "]", ")", "/", "(", "2", "*", "320", ")", "\n", "cy", "=", "(", "truths", "[", "i", "]", "[", "2", "]", "+", "truths", "[", "i", "]", "[", "4", "]", ")", "/", "(", "2", "*", "240", ")", "\n", "imgw", "=", "(", "truths", "[", "i", "]", "[", "3", "]", "-", "truths", "[", "i", "]", "[", "1", "]", ")", "/", "320", "\n", "imgh", "=", "(", "truths", "[", "i", "]", "[", "4", "]", "-", "truths", "[", "i", "]", "[", "2", "]", ")", "/", "240", "\n", "truths", "[", "i", "]", "[", "0", "]", "=", "truths", "[", "i", "]", "[", "0", "]", "-", "1", "\n", "truths", "[", "i", "]", "[", "1", "]", "=", "cx", "\n", "truths", "[", "i", "]", "[", "2", "]", "=", "cy", "\n", "truths", "[", "i", "]", "[", "3", "]", "=", "imgw", "\n", "truths", "[", "i", "]", "[", "4", "]", "=", "imgh", "\n", "\n", "if", "truths", "[", "i", "]", "[", "3", "]", "<", "min_box_scale", ":", "\n", "            ", "continue", "\n", "", "new_truths", ".", "append", "(", "[", "truths", "[", "i", "]", "[", "0", "]", ",", "truths", "[", "i", "]", "[", "1", "]", ",", "truths", "[", "i", "]", "[", "2", "]", ",", "truths", "[", "i", "]", "[", "3", "]", ",", "truths", "[", "i", "]", "[", "4", "]", "]", ")", "\n", "", "return", "np", ".", "array", "(", "new_truths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.load_class_names": [[547, 555], ["open", "fp.readlines", "line.rstrip.rstrip", "class_names.append"], "function", ["None"], ["", "def", "load_class_names", "(", "namesfile", ")", ":", "\n", "    ", "class_names", "=", "[", "]", "\n", "with", "open", "(", "namesfile", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "class_names", ".", "append", "(", "line", ")", "\n", "", "return", "class_names", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.image2torch": [[556, 564], ["torch.ByteTensor", "img.float().div.view().transpose().transpose().contiguous", "img.float().div.view", "img.float().div.float().div", "torch.ByteStorage.from_buffer", "img.float().div.tobytes", "img.float().div.view().transpose().transpose", "img.float().div.float", "img.float().div.view().transpose", "img.float().div.view"], "function", ["None"], ["", "def", "image2torch", "(", "img", ")", ":", "\n", "    ", "width", "=", "img", ".", "width", "\n", "height", "=", "img", ".", "height", "\n", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "img", ".", "tobytes", "(", ")", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "height", ",", "width", ",", "3", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "img", "=", "img", ".", "view", "(", "1", ",", "3", ",", "height", ",", "width", ")", "\n", "img", "=", "img", ".", "float", "(", ")", ".", "div", "(", "255.0", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.do_detect": [[565, 614], ["model.eval", "time.time", "isinstance", "time.time", "torch.autograd.Variable", "time.time", "model", "time.time", "time.time", "utils.nms", "time.time", "torch.ByteTensor", "torch.from_numpy().float().div().unsqueeze.view().transpose().transpose().contiguous", "torch.from_numpy().float().div().unsqueeze.view", "torch.from_numpy().float().div().unsqueeze.float().div", "torch.from_numpy().float().div().unsqueeze.cuda", "utils.get_region_boxes", "print", "print", "print", "print", "print", "print", "print", "print", "torch.ByteStorage.from_buffer", "type", "torch.from_numpy().float().div().unsqueeze", "print", "exit", "torch.from_numpy().float().div().unsqueeze.tobytes", "torch.from_numpy().float().div().unsqueeze.view().transpose().transpose", "torch.from_numpy().float().div().unsqueeze.float", "torch.from_numpy().float().div", "torch.from_numpy().float().div().unsqueeze.view().transpose", "torch.from_numpy().float", "torch.from_numpy().float().div().unsqueeze.view", "torch.from_numpy", "torch.from_numpy().float().div().unsqueeze.transpose"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.nms", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.get_region_boxes"], ["", "def", "do_detect", "(", "model", ",", "img", ",", "conf_thresh", ",", "nms_thresh", ",", "use_cuda", "=", "1", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ":", "\n", "        ", "width", "=", "img", ".", "width", "\n", "height", "=", "img", ".", "height", "\n", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "img", ".", "tobytes", "(", ")", ")", ")", "\n", "img", "=", "img", ".", "view", "(", "height", ",", "width", ",", "3", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "img", "=", "img", ".", "view", "(", "1", ",", "3", ",", "height", ",", "width", ")", "\n", "img", "=", "img", ".", "float", "(", ")", ".", "div", "(", "255.0", ")", "\n", "", "elif", "type", "(", "img", ")", "==", "np", ".", "ndarray", ":", "# cv2 image", "\n", "        ", "img", "=", "torch", ".", "from_numpy", "(", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", ".", "div", "(", "255.0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"unknow image type\"", ")", "\n", "exit", "(", "-", "1", ")", "\n", "\n", "", "t1", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "img", "=", "img", ".", "cuda", "(", ")", "\n", "", "img", "=", "torch", ".", "autograd", ".", "Variable", "(", "img", ")", "\n", "t2", "=", "time", ".", "time", "(", ")", "\n", "\n", "output", "=", "model", "(", "img", ")", "\n", "output", "=", "output", ".", "data", "\n", "#for j in range(100):", "\n", "#    sys.stdout.write('%f ' % (output.storage()[j]))", "\n", "#print('')", "\n", "t3", "=", "time", ".", "time", "(", ")", "\n", "\n", "boxes", "=", "get_region_boxes", "(", "output", ",", "conf_thresh", ",", "model", ".", "num_classes", ",", "model", ".", "anchors", ",", "model", ".", "num_anchors", ")", "[", "0", "]", "\n", "#for j in range(len(boxes)):", "\n", "#    print(boxes[j])", "\n", "t4", "=", "time", ".", "time", "(", ")", "\n", "\n", "boxes", "=", "nms", "(", "boxes", ",", "nms_thresh", ")", "\n", "t5", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "False", ":", "\n", "        ", "print", "(", "'-----------------------------------'", ")", "\n", "print", "(", "' image to tensor : %f'", "%", "(", "t1", "-", "t0", ")", ")", "\n", "print", "(", "'  tensor to cuda : %f'", "%", "(", "t2", "-", "t1", ")", ")", "\n", "print", "(", "'         predict : %f'", "%", "(", "t3", "-", "t2", ")", ")", "\n", "print", "(", "'get_region_boxes : %f'", "%", "(", "t4", "-", "t3", ")", ")", "\n", "print", "(", "'             nms : %f'", "%", "(", "t5", "-", "t4", ")", ")", "\n", "print", "(", "'           total : %f'", "%", "(", "t5", "-", "t0", ")", ")", "\n", "print", "(", "'-----------------------------------'", ")", "\n", "", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.read_data_cfg": [[615, 631], ["dict", "open", "fp.readlines", "line.strip.strip", "line.strip.split", "key.strip.strip", "value.strip.strip"], "function", ["None"], ["", "def", "read_data_cfg", "(", "datacfg", ")", ":", "\n", "    ", "options", "=", "dict", "(", ")", "\n", "options", "[", "'gpus'", "]", "=", "'0,1,2,3'", "\n", "options", "[", "'num_workers'", "]", "=", "'10'", "\n", "with", "open", "(", "datacfg", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "==", "''", ":", "\n", "            ", "continue", "\n", "", "key", ",", "value", "=", "line", ".", "split", "(", "'='", ")", "\n", "key", "=", "key", ".", "strip", "(", ")", "\n", "value", "=", "value", ".", "strip", "(", ")", "\n", "options", "[", "key", "]", "=", "value", "\n", "", "return", "options", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.scale_bboxes": [[632, 641], ["copy.deepcopy", "range", "len"], "function", ["None"], ["", "def", "scale_bboxes", "(", "bboxes", ",", "width", ",", "height", ")", ":", "\n", "    ", "import", "copy", "\n", "dets", "=", "copy", ".", "deepcopy", "(", "bboxes", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "dets", ")", ")", ":", "\n", "        ", "dets", "[", "i", "]", "[", "0", "]", "=", "dets", "[", "i", "]", "[", "0", "]", "*", "width", "\n", "dets", "[", "i", "]", "[", "1", "]", "=", "dets", "[", "i", "]", "[", "1", "]", "*", "height", "\n", "dets", "[", "i", "]", "[", "2", "]", "=", "dets", "[", "i", "]", "[", "2", "]", "*", "width", "\n", "dets", "[", "i", "]", "[", "3", "]", "=", "dets", "[", "i", "]", "[", "3", "]", "*", "height", "\n", "", "return", "dets", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.file_lines": [[642, 652], ["open", "open.close", "open.read().decode", "thefile.read().decode.count", "open.read"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.count"], ["", "def", "file_lines", "(", "thefilepath", ")", ":", "\n", "    ", "count", "=", "0", "\n", "thefile", "=", "open", "(", "thefilepath", ",", "'rb'", ")", "\n", "while", "True", ":", "\n", "        ", "buffer", "=", "thefile", ".", "read", "(", "8192", "*", "1024", ")", ".", "decode", "(", ")", "\n", "if", "not", "buffer", ":", "\n", "            ", "break", "\n", "", "count", "+=", "buffer", ".", "count", "(", "'\\n'", ")", "\n", "", "thefile", ".", "close", "(", ")", "\n", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.get_image_size": [[653, 687], ["open", "fhandle.read", "len", "imghdr.what", "struct.unpack", "struct.unpack", "imghdr.what", "struct.unpack", "imghdr.what", "imghdr.what", "fhandle.seek", "fhandle.seek", "struct.unpack", "fhandle.seek", "fhandle.read", "ord", "fhandle.read", "ord", "fhandle.read", "struct.unpack", "fhandle.read"], "function", ["None"], ["", "def", "get_image_size", "(", "fname", ")", ":", "\n", "    ", "'''Determine the image type of fhandle and return its size.\n    from draco'''", "\n", "with", "open", "(", "fname", ",", "'rb'", ")", "as", "fhandle", ":", "\n", "        ", "head", "=", "fhandle", ".", "read", "(", "24", ")", "\n", "if", "len", "(", "head", ")", "!=", "24", ":", "\n", "            ", "return", "\n", "", "if", "imghdr", ".", "what", "(", "fname", ")", "==", "'png'", ":", "\n", "            ", "check", "=", "struct", ".", "unpack", "(", "'>i'", ",", "head", "[", "4", ":", "8", "]", ")", "[", "0", "]", "\n", "if", "check", "!=", "0x0d0a1a0a", ":", "\n", "                ", "return", "\n", "", "width", ",", "height", "=", "struct", ".", "unpack", "(", "'>ii'", ",", "head", "[", "16", ":", "24", "]", ")", "\n", "", "elif", "imghdr", ".", "what", "(", "fname", ")", "==", "'gif'", ":", "\n", "            ", "width", ",", "height", "=", "struct", ".", "unpack", "(", "'<HH'", ",", "head", "[", "6", ":", "10", "]", ")", "\n", "", "elif", "imghdr", ".", "what", "(", "fname", ")", "==", "'jpeg'", "or", "imghdr", ".", "what", "(", "fname", ")", "==", "'jpg'", ":", "\n", "            ", "try", ":", "\n", "                ", "fhandle", ".", "seek", "(", "0", ")", "# Read 0xff next", "\n", "size", "=", "2", "\n", "ftype", "=", "0", "\n", "while", "not", "0xc0", "<=", "ftype", "<=", "0xcf", ":", "\n", "                    ", "fhandle", ".", "seek", "(", "size", ",", "1", ")", "\n", "byte", "=", "fhandle", ".", "read", "(", "1", ")", "\n", "while", "ord", "(", "byte", ")", "==", "0xff", ":", "\n", "                        ", "byte", "=", "fhandle", ".", "read", "(", "1", ")", "\n", "", "ftype", "=", "ord", "(", "byte", ")", "\n", "size", "=", "struct", ".", "unpack", "(", "'>H'", ",", "fhandle", ".", "read", "(", "2", ")", ")", "[", "0", "]", "-", "2", "\n", "# We are at a SOFn block", "\n", "", "fhandle", ".", "seek", "(", "1", ",", "1", ")", "# Skip `precision' byte.", "\n", "height", ",", "width", "=", "struct", ".", "unpack", "(", "'>HH'", ",", "fhandle", ".", "read", "(", "4", ")", ")", "\n", "", "except", "Exception", ":", "#IGNORE:W0703", "\n", "                ", "return", "\n", "", "", "else", ":", "\n", "            ", "return", "\n", "", "return", "width", ",", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.logging": [[688, 690], ["print", "time.strftime", "time.localtime"], "function", ["None"], ["", "", "def", "logging", "(", "message", ")", ":", "\n", "    ", "print", "(", "'%s %s'", "%", "(", "time", ".", "strftime", "(", "\"%Y-%m-%d %H:%M:%S\"", ",", "time", ".", "localtime", "(", ")", ")", ",", "message", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.utils.load_value_file": [[691, 696], ["open", "float", "input_file.read().rstrip", "input_file.read"], "function", ["None"], ["", "def", "load_value_file", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "input_file", ":", "\n", "        ", "value", "=", "float", "(", "input_file", ".", "read", "(", ")", ".", "rstrip", "(", "'\\n\\r'", ")", ")", "\n", "\n", "", "return", "value", "", "", ""]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.MaxPoolStride1.__init__": [[10, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MaxPoolStride1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.MaxPoolStride1.forward": [[13, 16], ["torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.pad", "torch.pad", "torch.pad"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "max_pool2d", "(", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "1", ",", "0", ",", "1", ")", ",", "mode", "=", "'replicate'", ")", ",", "2", ",", "stride", "=", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.Reorg.__init__": [[18, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ",", "stride", "=", "2", ")", ":", "\n", "        ", "super", "(", "Reorg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.Reorg.forward": [[21, 37], ["x.view.view.data.size", "x.view.view.data.size", "x.view.view.data.size", "x.view.view.data.size", "x.view.view.view().transpose().contiguous", "x.view.view.view().transpose().contiguous", "x.view.view.view().transpose().contiguous", "x.view.view.view", "x.view.view.data.dim", "x.view.view.view().transpose", "x.view.view.view().transpose", "x.view.view.view().transpose", "x.view.view.view", "x.view.view.view", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "stride", "=", "self", ".", "stride", "\n", "assert", "(", "x", ".", "data", ".", "dim", "(", ")", "==", "4", ")", "\n", "B", "=", "x", ".", "data", ".", "size", "(", "0", ")", "\n", "C", "=", "x", ".", "data", ".", "size", "(", "1", ")", "\n", "H", "=", "x", ".", "data", ".", "size", "(", "2", ")", "\n", "W", "=", "x", ".", "data", ".", "size", "(", "3", ")", "\n", "assert", "(", "H", "%", "stride", "==", "0", ")", "\n", "assert", "(", "W", "%", "stride", "==", "0", ")", "\n", "ws", "=", "stride", "\n", "hs", "=", "stride", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "H", "//", "hs", ",", "hs", ",", "W", "//", "ws", ",", "ws", ")", ".", "transpose", "(", "3", ",", "4", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "H", "//", "hs", "*", "W", "//", "ws", ",", "hs", "*", "ws", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "C", ",", "hs", "*", "ws", ",", "H", "//", "hs", ",", "W", "//", "ws", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "B", ",", "hs", "*", "ws", "*", "C", ",", "H", "//", "hs", ",", "W", "//", "ws", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.GlobalAvgPool2d.__init__": [[39, 41], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GlobalAvgPool2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.GlobalAvgPool2d.forward": [[42, 50], ["x.view.view.data.size", "x.view.view.data.size", "x.view.view.data.size", "x.view.view.data.size", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "x.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", "=", "x", ".", "data", ".", "size", "(", "0", ")", "\n", "C", "=", "x", ".", "data", ".", "size", "(", "1", ")", "\n", "H", "=", "x", ".", "data", ".", "size", "(", "2", ")", "\n", "W", "=", "x", ".", "data", ".", "size", "(", "3", ")", "\n", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "H", ",", "W", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "N", ",", "C", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.EmptyModule.__init__": [[53, 55], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "EmptyModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.EmptyModule.forward": [[56, 58], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.Darknet.__init__": [[61, 78], ["torch.Module.__init__", "parse_cfg", "darknet.Darknet.create_network", "int", "int", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "torch.IntTensor", "len", "len"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.parse_cfg", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.Darknet.create_network"], ["    ", "def", "__init__", "(", "self", ",", "cfgfile", ")", ":", "\n", "        ", "super", "(", "Darknet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "blocks", "=", "parse_cfg", "(", "cfgfile", ")", "\n", "self", ".", "models", "=", "self", ".", "create_network", "(", "self", ".", "blocks", ")", "# merge conv, bn,leaky", "\n", "self", ".", "loss", "=", "self", ".", "models", "[", "len", "(", "self", ".", "models", ")", "-", "1", "]", "\n", "\n", "self", ".", "width", "=", "int", "(", "self", ".", "blocks", "[", "0", "]", "[", "'width'", "]", ")", "\n", "self", ".", "height", "=", "int", "(", "self", ".", "blocks", "[", "0", "]", "[", "'height'", "]", ")", "\n", "\n", "if", "self", ".", "blocks", "[", "(", "len", "(", "self", ".", "blocks", ")", "-", "1", ")", "]", "[", "'type'", "]", "==", "'region'", ":", "\n", "            ", "self", ".", "anchors", "=", "self", ".", "loss", ".", "anchors", "\n", "self", ".", "num_anchors", "=", "self", ".", "loss", ".", "num_anchors", "\n", "self", ".", "anchor_step", "=", "self", ".", "loss", ".", "anchor_step", "\n", "self", ".", "num_classes", "=", "self", ".", "loss", ".", "num_classes", "\n", "\n", "", "self", ".", "header", "=", "torch", ".", "IntTensor", "(", "[", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "seen", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.Darknet.forward": [[79, 125], ["dict", "block[].split", "len", "int", "int", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "print", "int", "int", "torch.relu", "torch.relu", "torch.relu", "print"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "ind", "=", "-", "2", "\n", "self", ".", "loss", "=", "None", "\n", "outputs", "=", "dict", "(", ")", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "ind", "=", "ind", "+", "1", "\n", "#if ind > 0:", "\n", "#    return x", "\n", "\n", "if", "block", "[", "'type'", "]", "==", "'net'", ":", "\n", "                ", "continue", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'convolutional'", "or", "block", "[", "'type'", "]", "==", "'maxpool'", "or", "block", "[", "'type'", "]", "==", "'reorg'", "or", "block", "[", "'type'", "]", "==", "'avgpool'", "or", "block", "[", "'type'", "]", "==", "'softmax'", "or", "block", "[", "'type'", "]", "==", "'connected'", ":", "\n", "                ", "print", "(", "\"ind:\"", ",", "ind", ")", "\n", "x", "=", "self", ".", "models", "[", "ind", "]", "(", "x", ")", "\n", "print", "(", "\"x_shape:\"", ",", "x", ".", "shape", ")", "\n", "outputs", "[", "ind", "]", "=", "x", "\n", "# print(\"output:\", outputs)", "\n", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'route'", ":", "\n", "                ", "print", "(", "\"route debugging!\"", ")", "\n", "layers", "=", "block", "[", "'layers'", "]", ".", "split", "(", "','", ")", "\n", "print", "(", "\"layers:\"", ",", "layers", ")", "\n", "layers", "=", "[", "int", "(", "i", ")", "if", "int", "(", "i", ")", ">", "0", "else", "int", "(", "i", ")", "+", "ind", "for", "i", "in", "layers", "]", "\n", "print", "(", "\"layers:\"", ",", "layers", ")", "\n", "\n", "if", "len", "(", "layers", ")", "==", "1", ":", "\n", "                    ", "print", "(", "\"ind_route:\"", ",", "ind", ")", "\n", "x", "=", "outputs", "[", "layers", "[", "0", "]", "]", "#layer 16 # [10, 512, 14, 14]", "\n", "outputs", "[", "ind", "]", "=", "x", "\n", "\n", "", "elif", "len", "(", "layers", ")", "==", "2", ":", "\n", "\n", "                    ", "x1", "=", "outputs", "[", "layers", "[", "0", "]", "]", "#layer 27 # [10, 256, 7, 7]]", "\n", "\n", "x2", "=", "outputs", "[", "layers", "[", "1", "]", "]", "#layer 24 # [10, 1024, 7, 7]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ")", ",", "1", ")", "# [10, 1280, 7, 7]", "\n", "\n", "outputs", "[", "ind", "]", "=", "x", "\n", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'shortcut'", ":", "\n", "# print(\"shortcut debugging!\")", "\n", "                ", "from_layer", "=", "int", "(", "block", "[", "'from'", "]", ")", "\n", "activation", "=", "block", "[", "'activation'", "]", "\n", "from_layer", "=", "from_layer", "if", "from_layer", ">", "0", "else", "from_layer", "+", "ind", "\n", "x1", "=", "outputs", "[", "from_layer", "]", "\n", "x2", "=", "outputs", "[", "ind", "-", "1", "]", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.Darknet.print_network": [[126, 128], ["print_cfg"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.print_cfg"], ["x", "=", "x1", "+", "x2", "\n", "if", "activation", "==", "'leaky'", ":", "\n", "                    ", "x", "=", "F", ".", "leaky_relu", "(", "x", ",", "0.1", ",", "inplace", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.Darknet.create_network": [[129, 241], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "int", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "out_filters.append", "torch.ModuleList.append", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "torch.Sequential.add_module", "int", "int", "out_filters.append", "torch.ModuleList.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential.add_module", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "darknet.MaxPoolStride1", "darknet.GlobalAvgPool2d", "out_filters.append", "torch.ModuleList.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Softmax", "torch.Softmax", "torch.Softmax", "out_filters.append", "torch.ModuleList.append", "out_filters.append", "torch.ModuleList.append", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "int", "out_filters.append", "torch.ModuleList.append", "torch.L1Loss", "torch.L1Loss", "torch.L1Loss", "darknet.Reorg", "block[].split", "len", "out_filters.append", "torch.ModuleList.append", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "len", "darknet.EmptyModule", "len", "out_filters.append", "torch.ModuleList.append", "int", "len", "darknet.EmptyModule", "int", "out_filters.append", "torch.ModuleList.append", "int", "int", "torch.Linear", "torch.Linear", "torch.Linear", "region_loss.RegionLoss", "block[].split", "int", "int", "float", "float", "float", "float", "out_filters.append", "torch.ModuleList.append", "print", "torch.Sequential", "torch.Sequential", "torch.Sequential", "float", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "elif", "activation", "==", "'relu'", ":", "\n", "                    ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "outputs", "[", "ind", "]", "=", "x", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'region'", ":", "\n", "                ", "print", "(", "\"loss:\"", ",", "ind", ")", "\n", "continue", "\n", "print", "(", "\"LOSSS\"", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'cost'", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "print", "(", "'unknown type %s'", "%", "(", "block", "[", "'type'", "]", ")", ")", "\n", "# print(x.shape)", "\n", "", "", "return", "x", "\n", "\n", "", "def", "print_network", "(", "self", ")", ":", "\n", "        ", "print_cfg", "(", "self", ".", "blocks", ")", "\n", "\n", "", "def", "create_network", "(", "self", ",", "blocks", ")", ":", "\n", "        ", "models", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "prev_filters", "=", "3", "\n", "out_filters", "=", "[", "]", "\n", "conv_id", "=", "0", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "if", "block", "[", "'type'", "]", "==", "'net'", ":", "\n", "                ", "prev_filters", "=", "int", "(", "block", "[", "'channels'", "]", ")", "\n", "continue", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "conv_id", "=", "conv_id", "+", "1", "\n", "batch_normalize", "=", "int", "(", "block", "[", "'batch_normalize'", "]", ")", "\n", "filters", "=", "int", "(", "block", "[", "'filters'", "]", ")", "\n", "kernel_size", "=", "int", "(", "block", "[", "'size'", "]", ")", "\n", "stride", "=", "int", "(", "block", "[", "'stride'", "]", ")", "\n", "is_pad", "=", "int", "(", "block", "[", "'pad'", "]", ")", "\n", "pad", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "if", "is_pad", "else", "0", "\n", "activation", "=", "block", "[", "'activation'", "]", "\n", "model", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "batch_normalize", ":", "\n", "                    ", "model", ".", "add_module", "(", "'conv{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "Conv2d", "(", "prev_filters", ",", "filters", ",", "kernel_size", ",", "stride", ",", "pad", ",", "bias", "=", "False", ")", ")", "\n", "model", ".", "add_module", "(", "'bn{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "BatchNorm2d", "(", "filters", ")", ")", "\n", "#model.add_module('bn{0}'.format(conv_id), BN2d(filters))", "\n", "", "else", ":", "\n", "                    ", "model", ".", "add_module", "(", "'conv{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "Conv2d", "(", "prev_filters", ",", "filters", ",", "kernel_size", ",", "stride", ",", "pad", ")", ")", "\n", "", "if", "activation", "==", "'leaky'", ":", "\n", "                    ", "model", ".", "add_module", "(", "'leaky{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "", "elif", "activation", "==", "'relu'", ":", "\n", "                    ", "model", ".", "add_module", "(", "'relu{0}'", ".", "format", "(", "conv_id", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "prev_filters", "=", "filters", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'maxpool'", ":", "\n", "                ", "pool_size", "=", "int", "(", "block", "[", "'size'", "]", ")", "\n", "stride", "=", "int", "(", "block", "[", "'stride'", "]", ")", "\n", "if", "stride", ">", "1", ":", "\n", "                    ", "model", "=", "nn", ".", "MaxPool2d", "(", "pool_size", ",", "stride", ")", "\n", "", "else", ":", "\n", "                    ", "model", "=", "MaxPoolStride1", "(", ")", "\n", "", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'avgpool'", ":", "\n", "                ", "model", "=", "GlobalAvgPool2d", "(", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'softmax'", ":", "\n", "                ", "model", "=", "nn", ".", "Softmax", "(", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'cost'", ":", "\n", "                ", "if", "block", "[", "'_type'", "]", "==", "'sse'", ":", "\n", "                    ", "model", "=", "nn", ".", "MSELoss", "(", "size_average", "=", "True", ")", "\n", "", "elif", "block", "[", "'_type'", "]", "==", "'L1'", ":", "\n", "                    ", "model", "=", "nn", ".", "L1Loss", "(", "size_average", "=", "True", ")", "\n", "", "elif", "block", "[", "'_type'", "]", "==", "'smooth'", ":", "\n", "                    ", "model", "=", "nn", ".", "SmoothL1Loss", "(", "size_average", "=", "True", ")", "\n", "", "out_filters", ".", "append", "(", "1", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'reorg'", ":", "\n", "                ", "stride", "=", "int", "(", "block", "[", "'stride'", "]", ")", "\n", "prev_filters", "=", "stride", "*", "stride", "*", "prev_filters", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "Reorg", "(", "stride", ")", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'route'", ":", "\n", "                ", "layers", "=", "block", "[", "'layers'", "]", ".", "split", "(", "','", ")", "\n", "print", "(", "\"layers:\"", ",", "layers", ")", "\n", "ind", "=", "len", "(", "models", ")", "\n", "print", "(", "\"ind:\"", ",", "ind", ")", "\n", "layers", "=", "[", "int", "(", "i", ")", "if", "int", "(", "i", ")", ">", "0", "else", "int", "(", "i", ")", "+", "ind", "for", "i", "in", "layers", "]", "\n", "print", "(", "\"layers:\"", ",", "layers", ")", "\n", "if", "len", "(", "layers", ")", "==", "1", ":", "\n", "                    ", "prev_filters", "=", "out_filters", "[", "layers", "[", "0", "]", "]", "\n", "\n", "", "elif", "len", "(", "layers", ")", "==", "2", ":", "\n", "                    ", "assert", "(", "layers", "[", "0", "]", "==", "ind", "-", "1", ")", "\n", "prev_filters", "=", "out_filters", "[", "layers", "[", "0", "]", "]", "+", "out_filters", "[", "layers", "[", "1", "]", "]", "\n", "\n", "", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "\n", "models", ".", "append", "(", "EmptyModule", "(", ")", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'shortcut'", ":", "\n", "                ", "ind", "=", "len", "(", "models", ")", "\n", "prev_filters", "=", "out_filters", "[", "ind", "-", "1", "]", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "EmptyModule", "(", ")", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'connected'", ":", "\n", "                ", "filters", "=", "int", "(", "block", "[", "'output'", "]", ")", "\n", "if", "block", "[", "'activation'", "]", "==", "'linear'", ":", "\n", "                    ", "model", "=", "nn", ".", "Linear", "(", "prev_filters", ",", "filters", ")", "\n", "", "elif", "block", "[", "'activation'", "]", "==", "'leaky'", ":", "\n", "                    ", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "prev_filters", ",", "filters", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "", "elif", "block", "[", "'activation'", "]", "==", "'relu'", ":", "\n", "                    ", "model", "=", "nn", ".", "Sequential", "(", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.Darknet.load_weights": [[242, 289], ["open", "numpy.fromfile", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.fromfile", "open.close", "int", "load_conv_bn", "load_conv", "load_fc", "load_fc", "print"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_conv_bn", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_conv", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_fc", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.load_fc"], ["nn", ".", "Linear", "(", "prev_filters", ",", "filters", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "prev_filters", "=", "filters", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'region'", ":", "\n", "                ", "loss", "=", "RegionLoss", "(", ")", "\n", "anchors", "=", "block", "[", "'anchors'", "]", ".", "split", "(", "','", ")", "\n", "loss", ".", "anchors", "=", "[", "float", "(", "i", ")", "for", "i", "in", "anchors", "]", "\n", "loss", ".", "num_classes", "=", "int", "(", "block", "[", "'classes'", "]", ")", "\n", "loss", ".", "num_anchors", "=", "int", "(", "block", "[", "'num'", "]", ")", "\n", "loss", ".", "anchor_step", "=", "len", "(", "loss", ".", "anchors", ")", "//", "loss", ".", "num_anchors", "\n", "loss", ".", "object_scale", "=", "float", "(", "block", "[", "'object_scale'", "]", ")", "\n", "loss", ".", "noobject_scale", "=", "float", "(", "block", "[", "'noobject_scale'", "]", ")", "\n", "loss", ".", "class_scale", "=", "float", "(", "block", "[", "'class_scale'", "]", ")", "\n", "loss", ".", "coord_scale", "=", "float", "(", "block", "[", "'coord_scale'", "]", ")", "\n", "out_filters", ".", "append", "(", "prev_filters", ")", "\n", "models", ".", "append", "(", "loss", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'unknown type %s'", "%", "(", "block", "[", "'type'", "]", ")", ")", "\n", "\n", "", "", "return", "models", "\n", "\n", "", "def", "load_weights", "(", "self", ",", "weightfile", ")", ":", "\n", "        ", "fp", "=", "open", "(", "weightfile", ",", "'rb'", ")", "\n", "header", "=", "np", ".", "fromfile", "(", "fp", ",", "count", "=", "4", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "header", "=", "torch", ".", "from_numpy", "(", "header", ")", "\n", "self", ".", "seen", "=", "self", ".", "header", "[", "3", "]", "\n", "buf", "=", "np", ".", "fromfile", "(", "fp", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fp", ".", "close", "(", ")", "\n", "\n", "start", "=", "0", "\n", "ind", "=", "-", "2", "\n", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "if", "start", ">=", "buf", ".", "size", ":", "\n", "                ", "break", "\n", "", "ind", "=", "ind", "+", "1", "\n", "if", "block", "[", "'type'", "]", "==", "'net'", ":", "\n", "                ", "continue", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "model", "=", "self", ".", "models", "[", "ind", "]", "\n", "batch_normalize", "=", "int", "(", "block", "[", "'batch_normalize'", "]", ")", "\n", "if", "batch_normalize", ":", "\n", "                    ", "start", "=", "load_conv_bn", "(", "buf", ",", "start", ",", "model", "[", "0", "]", ",", "model", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "start", "=", "load_conv", "(", "buf", ",", "start", ",", "model", "[", "0", "]", ")", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'connected'", ":", "\n", "                ", "model", "=", "self", ".", "models", "[", "ind", "]", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_2d.darknet.Darknet.save_weights": [[291, 336], ["open", "header.numpy().tofile", "range", "open.close", "len", "header.numpy", "int", "save_conv_bn", "save_conv", "save_fc", "save_fc", "print"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_conv_bn", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_conv", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_fc", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.None.cfg.save_fc"], ["                    ", "start", "=", "load_fc", "(", "buf", ",", "start", ",", "model", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "start", "=", "load_fc", "(", "buf", ",", "start", ",", "model", ")", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'maxpool'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'reorg'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'route'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'shortcut'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'region'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'avgpool'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'softmax'", ":", "\n", "                ", "pass", "\n", "", "elif", "block", "[", "'type'", "]", "==", "'cost'", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "print", "(", "'unknown type %s'", "%", "(", "block", "[", "'type'", "]", ")", ")", "\n", "\n", "\n", "", "", "", "def", "save_weights", "(", "self", ",", "outfile", ",", "cutoff", "=", "0", ")", ":", "\n", "        ", "if", "cutoff", "<=", "0", ":", "\n", "            ", "cutoff", "=", "len", "(", "self", ".", "blocks", ")", "-", "1", "\n", "\n", "", "fp", "=", "open", "(", "outfile", ",", "'wb'", ")", "\n", "self", ".", "header", "[", "3", "]", "=", "self", ".", "seen", "\n", "header", "=", "self", ".", "header", "\n", "header", ".", "numpy", "(", ")", ".", "tofile", "(", "fp", ")", "\n", "\n", "ind", "=", "-", "1", "\n", "for", "blockId", "in", "range", "(", "1", ",", "cutoff", "+", "1", ")", ":", "\n", "            ", "ind", "=", "ind", "+", "1", "\n", "block", "=", "self", ".", "blocks", "[", "blockId", "]", "\n", "if", "block", "[", "'type'", "]", "==", "'convolutional'", ":", "\n", "                ", "model", "=", "self", ".", "models", "[", "ind", "]", "\n", "batch_normalize", "=", "int", "(", "block", "[", "'batch_normalize'", "]", ")", "\n", "if", "batch_normalize", ":", "\n", "                    ", "save_conv_bn", "(", "fp", ",", "model", "[", "0", "]", ",", "model", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "save_conv", "(", "fp", ",", "model", "[", "0", "]", ")", "\n", "", "", "elif", "block", "[", "'type'", "]", "==", "'connected'", ":", "\n", "                ", "model", "=", "self", ".", "models", "[", "ind", "]", "\n", "if", "block", "[", "'activation'", "]", "!=", "'linear'", ":", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenet.Block.__init__": [[21, 27], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenet.Block.forward": [[28, 32], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenet.MobileNet.__init__": [[35, 61], ["torch.Module.__init__", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobilenet.conv_bn", "int", "range", "mobilenet.MobileNet.features.append", "mobilenet.Block"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.conv_bn"], ["    ", "def", "__init__", "(", "self", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1024", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "last_channel", "=", "int", "(", "last_channel", "*", "width_mult", ")", "\n", "cfg", "=", "[", "\n", "# c, n, s", "\n", "[", "64", ",", "1", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "128", ",", "2", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "256", ",", "2", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "512", ",", "6", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "1024", ",", "2", ",", "(", "1", ",", "1", ",", "1", ")", "]", ",", "\n", "]", "\n", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "(", "1", ",", "2", ",", "2", ")", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "c", ",", "n", ",", "s", "in", "cfg", ":", "\n", "            ", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "self", ".", "features", ".", "append", "(", "Block", "(", "input_channel", ",", "output_channel", ",", "stride", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "# make it nn.Sequential", "\n", "", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenet.MobileNet.forward": [[62, 66], ["mobilenet.MobileNet.features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "# Return the features before pooling", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenet.conv_bn": [[11, 16], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenet.get_fine_tuning_parameters": [[68, 88], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'classifier'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenet.get_model": [[90, 96], ["mobilenet.MobileNet"], "function", ["None"], ["", "", "def", "get_model", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Returns the model.\n    \"\"\"", "\n", "model", "=", "MobileNet", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenetv2.InvertedResidual.__init__": [[31, 61], ["torch.Module.__init__", "round", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "expand_ratio", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "hidden_dim", "=", "round", "(", "inp", "*", "expand_ratio", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "(", "1", ",", "1", ",", "1", ")", "and", "inp", "==", "oup", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv3d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv3d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv3d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv3d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenetv2.InvertedResidual.forward": [[63, 68], ["mobilenetv2.InvertedResidual.conv", "mobilenetv2.InvertedResidual.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenetv2.MobileNetV2.__init__": [[71, 104], ["torch.Module.__init__", "int", "mobilenetv2.MobileNetV2.features.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobilenetv2.MobileNetV2._initialize_weights", "int", "mobilenetv2.conv_bn", "int", "range", "mobilenetv2.conv_1x1x1_bn", "mobilenetv2.MobileNetV2.features.append", "block"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenetv2.MobileNetV2._initialize_weights", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.conv_bn", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.conv_1x1x1_bn"], ["    ", "def", "__init__", "(", "self", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "input_channel", "=", "32", "\n", "last_channel", "=", "1280", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "(", "1", ",", "1", ",", "1", ")", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "(", "1", ",", "1", ",", "1", ")", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "(", "2", ",", "2", ",", "2", ")", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "(", "1", ",", "1", ",", "1", ")", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "self", ".", "last_channel", "=", "int", "(", "last_channel", "*", "width_mult", ")", "if", "width_mult", ">", "1.0", "else", "last_channel", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "(", "1", ",", "2", ",", "2", ")", ")", "]", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "stride", "=", "s", "if", "i", "==", "0", "else", "(", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "stride", ",", "expand_ratio", "=", "t", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "# building last several layers", "\n", "", "", "self", ".", "features", ".", "append", "(", "conv_1x1x1_bn", "(", "input_channel", ",", "self", ".", "last_channel", ")", ")", "\n", "# make it nn.Sequential", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenetv2.MobileNetV2.forward": [[105, 109], ["mobilenetv2.MobileNetV2.features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "# Return the features before pooling", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenetv2.MobileNetV2._initialize_weights": [[110, 124], ["mobilenetv2.MobileNetV2.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.size", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "kernel_size", "[", "2", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "n", "=", "m", ".", "weight", ".", "size", "(", "1", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenetv2.conv_bn": [[14, 19], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenetv2.conv_1x1x1_bn": [[22, 27], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU6"], "function", ["None"], ["", "def", "conv_1x1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenetv2.get_fine_tuning_parameters": [[126, 146], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'classifier'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.mobilenetv2.get_model": [[148, 154], ["mobilenetv2.MobileNetV2"], "function", ["None"], ["", "", "def", "get_model", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Returns the model.\n    \"\"\"", "\n", "model", "=", "MobileNetV2", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenet.Bottleneck.__init__": [[35, 53], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "groups", "=", "groups", "\n", "mid_planes", "=", "out_planes", "//", "4", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "out_planes", "=", "out_planes", "-", "in_planes", "\n", "", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "mid_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "mid_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "out_planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "(", "2", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenet.Bottleneck.forward": [[55, 68], ["shufflenet.Bottleneck.relu", "shufflenet.channel_shuffle", "shufflenet.Bottleneck.bn2", "shufflenet.Bottleneck.bn3", "shufflenet.Bottleneck.bn1", "shufflenet.Bottleneck.conv2", "shufflenet.Bottleneck.conv3", "shufflenet.Bottleneck.shortcut", "shufflenet.Bottleneck.relu", "shufflenet.Bottleneck.relu", "shufflenet.Bottleneck.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenet.Bottleneck.shortcut"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.channel_shuffle"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "channel_shuffle", "(", "out", ",", "self", ".", "groups", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "a", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "torch", ".", "cat", "(", "[", "out", ",", "self", ".", "shortcut", "(", "x", ")", "]", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", "+", "x", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenet.ShuffleNet.__init__": [[71, 103], ["torch.Module.__init__", "shufflenet.conv_bn", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "int", "ValueError"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.conv_bn", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "groups", ",", "\n", "width_mult", "=", "1", ",", "\n", "num_classes", "=", "400", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "groups", "=", "groups", "\n", "num_blocks", "=", "[", "4", ",", "8", ",", "4", "]", "\n", "\n", "# index 0 is invalid and should never be called.", "\n", "# only used for indexing convenience.", "\n", "if", "groups", "==", "1", ":", "\n", "            ", "out_planes", "=", "[", "24", ",", "144", ",", "288", ",", "567", "]", "\n", "", "elif", "groups", "==", "2", ":", "\n", "            ", "out_planes", "=", "[", "24", ",", "200", ",", "400", ",", "800", "]", "\n", "", "elif", "groups", "==", "3", ":", "\n", "            ", "out_planes", "=", "[", "24", ",", "240", ",", "480", ",", "960", "]", "\n", "", "elif", "groups", "==", "4", ":", "\n", "            ", "out_planes", "=", "[", "24", ",", "272", ",", "544", ",", "1088", "]", "\n", "", "elif", "groups", "==", "8", ":", "\n", "            ", "out_planes", "=", "[", "24", ",", "384", ",", "768", ",", "1536", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"\"\"{} groups is not supported for\n                   1x1 Grouped Convolutions\"\"\"", ".", "format", "(", "num_groups", ")", ")", "\n", "", "out_planes", "=", "[", "int", "(", "i", "*", "width_mult", ")", "for", "i", "in", "out_planes", "]", "\n", "self", ".", "in_planes", "=", "out_planes", "[", "0", "]", "\n", "self", ".", "conv1", "=", "conv_bn", "(", "3", ",", "self", ".", "in_planes", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "0", "]", ",", "self", ".", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "1", "]", ",", "self", ".", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "3", "]", ",", "num_blocks", "[", "2", "]", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenet.ShuffleNet._make_layer": [[104, 111], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenet.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "in_planes", ",", "out_planes", ",", "stride", "=", "stride", ",", "groups", "=", "groups", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenet.ShuffleNet.forward": [[112, 120], ["shufflenet.ShuffleNet.conv1", "shufflenet.ShuffleNet.maxpool", "shufflenet.ShuffleNet.layer1", "shufflenet.ShuffleNet.layer2", "shufflenet.ShuffleNet.layer3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "# Return the features before pooling", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenet.conv_bn": [[11, 16], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenet.channel_shuffle": [[19, 31], ["x.view.data.size", "x.view.view", "x.view.permute().contiguous", "x.view.view", "x.view.permute"], "function", ["None"], ["", "def", "channel_shuffle", "(", "x", ",", "groups", ")", ":", "\n", "    ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "batchsize", ",", "num_channels", ",", "depth", ",", "height", ",", "width", "=", "x", ".", "data", ".", "size", "(", ")", "\n", "channels_per_group", "=", "num_channels", "//", "groups", "\n", "# reshape", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "groups", ",", "\n", "channels_per_group", ",", "depth", ",", "height", ",", "width", ")", "\n", "#permute", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "num_channels", ",", "depth", ",", "height", ",", "width", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenet.get_fine_tuning_parameters": [[121, 141], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'classifier'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenet.get_model": [[143, 149], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "get_model", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Returns the model.\n    \"\"\"", "\n", "model", "=", "ShuffleNet", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.InvertedResidual.__init__": [[43, 88], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "oup_inc", "=", "oup", "//", "2", "\n", "\n", "if", "self", ".", "stride", "==", "1", ":", "\n", "#assert inp == oup_inc", "\n", "        \t", "self", ".", "banch2", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv3d", "(", "oup_inc", ",", "oup_inc", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv3d", "(", "oup_inc", ",", "oup_inc", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "oup_inc", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv3d", "(", "oup_inc", ",", "oup_inc", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "banch1", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "inp", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "inp", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "inp", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup_inc", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "banch2", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup_inc", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv3d", "(", "oup_inc", ",", "oup_inc", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "oup_inc", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv3d", "(", "oup_inc", ",", "oup_inc", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup_inc", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.InvertedResidual._concat": [[90, 94], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_concat", "(", "x", ",", "out", ")", ":", "\n", "# concatenate along channel axis", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "x", ",", "out", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.InvertedResidual.forward": [[95, 104], ["shufflenetv2.channel_shuffle", "shufflenetv2.InvertedResidual._concat", "shufflenetv2.InvertedResidual.banch2", "shufflenetv2.InvertedResidual._concat", "shufflenetv2.InvertedResidual.banch1", "shufflenetv2.InvertedResidual.banch2"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.channel_shuffle", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.InvertedResidual._concat", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.InvertedResidual._concat"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "stride", "==", "1", ":", "\n", "            ", "x1", "=", "x", "[", ":", ",", ":", "(", "x", ".", "shape", "[", "1", "]", "//", "2", ")", ",", ":", ",", ":", ",", ":", "]", "\n", "x2", "=", "x", "[", ":", ",", "(", "x", ".", "shape", "[", "1", "]", "//", "2", ")", ":", ",", ":", ",", ":", ",", ":", "]", "\n", "out", "=", "self", ".", "_concat", "(", "x1", ",", "self", ".", "banch2", "(", "x2", ")", ")", "\n", "", "elif", "self", ".", "stride", "==", "2", ":", "\n", "            ", "out", "=", "self", ".", "_concat", "(", "self", ".", "banch1", "(", "x", ")", ",", "self", ".", "banch2", "(", "x", ")", ")", "\n", "\n", "", "return", "channel_shuffle", "(", "out", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.ShuffleNetV2.__init__": [[107, 149], ["torch.Module.__init__", "shufflenetv2.conv_bn", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shufflenetv2.conv_1x1x1_bn", "len", "range", "shufflenetv2.ShuffleNetV2.features.append", "shufflenetv2.InvertedResidual", "ValueError"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.conv_bn", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.conv_1x1x1_bn"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "600", ",", "sample_size", "=", "112", ",", "width_mult", "=", "1.", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "sample_size", "%", "16", "==", "0", "\n", "\n", "self", ".", "stage_repeats", "=", "[", "4", ",", "8", ",", "4", "]", "\n", "# index 0 is invalid and should never be called.", "\n", "# only used for indexing convenience.", "\n", "if", "width_mult", "==", "0.25", ":", "\n", "            ", "self", ".", "stage_out_channels", "=", "[", "-", "1", ",", "24", ",", "32", ",", "64", ",", "128", ",", "1024", "]", "\n", "", "elif", "width_mult", "==", "0.5", ":", "\n", "            ", "self", ".", "stage_out_channels", "=", "[", "-", "1", ",", "24", ",", "48", ",", "96", ",", "192", ",", "1024", "]", "\n", "", "elif", "width_mult", "==", "1.0", ":", "\n", "            ", "self", ".", "stage_out_channels", "=", "[", "-", "1", ",", "24", ",", "116", ",", "232", ",", "464", ",", "1024", "]", "\n", "", "elif", "width_mult", "==", "1.5", ":", "\n", "            ", "self", ".", "stage_out_channels", "=", "[", "-", "1", ",", "24", ",", "176", ",", "352", ",", "704", ",", "1024", "]", "\n", "", "elif", "width_mult", "==", "2.0", ":", "\n", "            ", "self", ".", "stage_out_channels", "=", "[", "-", "1", ",", "24", ",", "224", ",", "488", ",", "976", ",", "2048", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"\"\"{} groups is not supported for\n                       1x1 Grouped Convolutions\"\"\"", ".", "format", "(", "num_groups", ")", ")", "\n", "\n", "# building first layer", "\n", "", "input_channel", "=", "self", ".", "stage_out_channels", "[", "1", "]", "\n", "self", ".", "conv1", "=", "conv_bn", "(", "3", ",", "input_channel", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "features", "=", "[", "]", "\n", "# building inverted residual blocks", "\n", "for", "idxstage", "in", "range", "(", "len", "(", "self", ".", "stage_repeats", ")", ")", ":", "\n", "            ", "numrepeat", "=", "self", ".", "stage_repeats", "[", "idxstage", "]", "\n", "output_channel", "=", "self", ".", "stage_out_channels", "[", "idxstage", "+", "2", "]", "\n", "for", "i", "in", "range", "(", "numrepeat", ")", ":", "\n", "                ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "self", ".", "features", ".", "append", "(", "InvertedResidual", "(", "input_channel", ",", "output_channel", ",", "stride", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "\n", "# make it nn.Sequential", "\n", "", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "\n", "# building last several layers", "\n", "self", ".", "conv_last", "=", "conv_1x1x1_bn", "(", "input_channel", ",", "self", ".", "stage_out_channels", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.ShuffleNetV2.forward": [[151, 158], ["shufflenetv2.ShuffleNetV2.conv1", "shufflenetv2.ShuffleNetV2.maxpool", "shufflenetv2.ShuffleNetV2.features", "shufflenetv2.ShuffleNetV2.conv_last"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "features", "(", "out", ")", "\n", "out", "=", "self", ".", "conv_last", "(", "out", ")", "# Return the features before pooling", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.conv_bn": [[15, 20], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "(", "1", ",", "1", ",", "1", ")", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.conv_1x1x1_bn": [[22, 27], ["torch.Sequential", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU"], "function", ["None"], ["", "def", "conv_1x1x1_bn", "(", "inp", ",", "oup", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.channel_shuffle": [[29, 41], ["x.view.data.size", "x.view.view", "x.view.permute().contiguous", "x.view.view", "x.view.permute"], "function", ["None"], ["", "def", "channel_shuffle", "(", "x", ",", "groups", ")", ":", "\n", "    ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "batchsize", ",", "num_channels", ",", "depth", ",", "height", ",", "width", "=", "x", ".", "data", ".", "size", "(", ")", "\n", "channels_per_group", "=", "num_channels", "//", "groups", "\n", "# reshape", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "groups", ",", "\n", "channels_per_group", ",", "depth", ",", "height", ",", "width", ")", "\n", "#permute", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ",", "5", ")", ".", "contiguous", "(", ")", "\n", "# flatten", "\n", "x", "=", "x", ".", "view", "(", "batchsize", ",", "num_channels", ",", "depth", ",", "height", ",", "width", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.get_fine_tuning_parameters": [[160, 180], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'classifier'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.shufflenetv2.get_model": [[182, 188], ["shufflenetv2.ShuffleNetV2"], "function", ["None"], ["", "", "def", "get_model", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Returns the model.\n    \"\"\"", "\n", "model", "=", "ShuffleNetV2", "(", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.BasicBlock.__init__": [[41, 50], ["torch.Module.__init__", "resnet.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.conv3x3x3", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.conv3x3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.BasicBlock.forward": [[51, 68], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.Bottleneck.__init__": [[73, 85], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.Bottleneck.forward": [[86, 107], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.ResNet.__init__": [[111, 141], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "shortcut_type", "=", "'B'", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "shortcut_type", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.ResNet._make_layer": [[142, 166], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "shortcut_type", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.ResNet.forward": [[167, 179], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "# Return the features before pooling", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.conv3x3x3": [[14, 23], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.downsample_basic_block": [[25, 36], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.get_fine_tuning_parameters": [[181, 201], ["model.parameters", "ft_module_names.append", "model.named_parameters", "ValueError", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_portion", ")", ":", "\n", "    ", "if", "ft_portion", "==", "\"complete\"", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "elif", "ft_portion", "==", "\"last_layer\"", ":", "\n", "        ", "ft_module_names", "=", "[", "]", "\n", "ft_module_names", ".", "append", "(", "'classifier'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "                ", "if", "ft_module", "in", "k", ":", "\n", "                    ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "", "", "return", "parameters", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unsupported ft_portion: 'complete' or 'last_layer' expected\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.resnet10": [[203, 208], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet10", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.resnet18": [[210, 215], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.resnet34": [[217, 222], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.resnet50": [[224, 229], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.resnet101": [[231, 236], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.resnet152": [[238, 243], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnet.resnet200": [[245, 250], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet200", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "24", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXtBottleneck.__init__": [[28, 49], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "cardinality", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_planes", "=", "cardinality", "*", "int", "(", "planes", "/", "32", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "mid_planes", ",", "\n", "mid_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "cardinality", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "\n", "mid_planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXtBottleneck.forward": [[50, 71], ["resnext.ResNeXtBottleneck.conv1", "resnext.ResNeXtBottleneck.bn1", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.conv2", "resnext.ResNeXtBottleneck.bn2", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.conv3", "resnext.ResNeXtBottleneck.bn3", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt.__init__": [[75, 118], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "cardinality", "=", "32", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "0", "]", ",", "shortcut_type", ",", "\n", "cardinality", ")", "\n", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "1024", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "# last_duration = int(math.ceil(sample_duration / 16))", "\n", "# #last_duration = 1", "\n", "# last_size = int(math.ceil(sample_size / 32))", "\n", "# self.avgpool = nn.AvgPool3d(", "\n", "#     (last_duration, last_size, last_size), stride=1)", "\n", "# self.fc = nn.Linear(cardinality * 32 * block.expansion, num_classes)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt._make_layer": [[119, 150], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "\n", "block", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "shortcut_type", ",", "\n", "cardinality", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cardinality", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cardinality", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.ResNeXt.forward": [[151, 168], ["resnext.ResNeXt.conv1", "resnext.ResNeXt.bn1", "resnext.ResNeXt.relu", "resnext.ResNeXt.maxpool", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "resnext.ResNeXt.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "# x = self.avgpool(x)", "\n", "\n", "# x = x.view(x.size(0), -1)", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.downsample_basic_block": [[12, 23], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.resnext50": [[192, 197], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "resnext50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.resnext101": [[199, 204], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "resnext101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.backbones_3d.resnext.resnext152": [[206, 211], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "resnext152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.Object-Detection-Metrics._init_paths.add_path": [[15, 18], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.Object-Detection-Metrics.pascalvoc.ValidateFormats": [[28, 38], ["errors.append"], "function", ["None"], ["def", "ValidateFormats", "(", "argFormat", ",", "argName", ",", "errors", ")", ":", "\n", "    ", "if", "argFormat", "==", "'xywh'", ":", "\n", "        ", "return", "BBFormat", ".", "XYWH", "\n", "", "elif", "argFormat", "==", "'xyrb'", ":", "\n", "        ", "return", "BBFormat", ".", "XYX2Y2", "\n", "", "elif", "argFormat", "is", "None", ":", "\n", "        ", "return", "BBFormat", ".", "XYWH", "# default when nothing is passed", "\n", "", "else", ":", "\n", "        ", "errors", ".", "append", "(", "\n", "'argument %s: invalid value. It must be either \\'xywh\\' or \\'xyrb\\''", "%", "argName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.Object-Detection-Metrics.pascalvoc.ValidateMandatoryArgs": [[41, 46], ["errors.append"], "function", ["None"], ["", "", "def", "ValidateMandatoryArgs", "(", "arg", ",", "argName", ",", "errors", ")", ":", "\n", "    ", "if", "arg", "is", "None", ":", "\n", "        ", "errors", ".", "append", "(", "'argument %s: required argument'", "%", "argName", ")", "\n", "", "else", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.Object-Detection-Metrics.pascalvoc.ValidateImageSize": [[48, 67], ["errors.append", "arg.replace().replace.replace().replace", "arg.replace().replace.split", "len", "errors.append", "arg.replace().replace.replace", "errors.append", "args[].isdigit", "args[].isdigit", "int", "int"], "function", ["None"], ["", "", "def", "ValidateImageSize", "(", "arg", ",", "argName", ",", "argInformed", ",", "errors", ")", ":", "\n", "    ", "errorMsg", "=", "'argument %s: required argument if %s is relative'", "%", "(", "argName", ",", "argInformed", ")", "\n", "ret", "=", "None", "\n", "if", "arg", "is", "None", ":", "\n", "        ", "errors", ".", "append", "(", "errorMsg", ")", "\n", "", "else", ":", "\n", "        ", "arg", "=", "arg", ".", "replace", "(", "'('", ",", "''", ")", ".", "replace", "(", "')'", ",", "''", ")", "\n", "args", "=", "arg", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "args", ")", "!=", "2", ":", "\n", "            ", "errors", ".", "append", "(", "\n", "'%s. It must be in the format \\'width,height\\' (e.g. \\'600,400\\')'", "%", "errorMsg", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "args", "[", "0", "]", ".", "isdigit", "(", ")", "or", "not", "args", "[", "1", "]", ".", "isdigit", "(", ")", ":", "\n", "                ", "errors", ".", "append", "(", "\n", "'%s. It must be in INdiaTEGER the format \\'width,height\\' (e.g. \\'600,400\\')'", "%", "\n", "errorMsg", ")", "\n", "", "else", ":", "\n", "                ", "ret", "=", "(", "int", "(", "args", "[", "0", "]", ")", ",", "int", "(", "args", "[", "1", "]", ")", ")", "\n", "", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.Object-Detection-Metrics.pascalvoc.ValidateCoordinatesTypes": [[70, 78], ["errors.append"], "function", ["None"], ["", "def", "ValidateCoordinatesTypes", "(", "arg", ",", "argName", ",", "errors", ")", ":", "\n", "    ", "if", "arg", "==", "'abs'", ":", "\n", "        ", "return", "CoordinatesType", ".", "Absolute", "\n", "", "elif", "arg", "==", "'rel'", ":", "\n", "        ", "return", "CoordinatesType", ".", "Relative", "\n", "", "elif", "arg", "is", "None", ":", "\n", "        ", "return", "CoordinatesType", ".", "Absolute", "# default when nothing is passed", "\n", "", "errors", ".", "append", "(", "'argument %s: invalid value. It must be either \\'rel\\' or \\'abs\\''", "%", "argName", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.Object-Detection-Metrics.pascalvoc.ValidatePaths": [[80, 90], ["errors.append", "errors.append", "os.path.join", "os.path.isdir", "os.path.isdir", "os.path.join"], "function", ["None"], ["", "def", "ValidatePaths", "(", "arg", ",", "nameArg", ",", "errors", ")", ":", "\n", "    ", "if", "arg", "is", "None", ":", "\n", "        ", "errors", ".", "append", "(", "'argument %s: invalid directory'", "%", "nameArg", ")", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "arg", ")", "is", "False", "and", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "currentPath", ",", "arg", ")", ")", "is", "False", ":", "\n", "        ", "errors", ".", "append", "(", "'argument %s: directory does not exist \\'%s\\''", "%", "(", "nameArg", ",", "arg", ")", ")", "\n", "# elif os.path.isdir(os.path.join(currentPath, arg)) is True:", "\n", "#     arg = os.path.join(currentPath, arg)", "\n", "", "else", ":", "\n", "        ", "arg", "=", "os", ".", "path", ".", "join", "(", "currentPath", ",", "arg", ")", "\n", "", "return", "arg", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.Object-Detection-Metrics.pascalvoc.getBoundingBoxes": [[92, 166], ["os.chdir", "glob.glob", "glob.glob.sort", "BoundingBoxes.BoundingBoxes", "f.replace", "open", "open.close", "line.replace.replace", "line.replace.split", "BoundingBoxes.BoundingBoxes.addBoundingBox", "line.replace.replace", "float", "float", "float", "float", "BoundingBox.BoundingBox", "float", "float", "float", "float", "float", "BoundingBox.BoundingBox", "allClasses.append"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.addBoundingBox"], ["", "def", "getBoundingBoxes", "(", "directory", ",", "\n", "isGT", ",", "\n", "bbFormat", ",", "\n", "coordType", ",", "\n", "allBoundingBoxes", "=", "None", ",", "\n", "allClasses", "=", "None", ",", "\n", "imgSize", "=", "(", "0", ",", "0", ")", ")", ":", "\n", "    ", "\"\"\"Read txt files containing bounding boxes (ground truth and detections).\"\"\"", "\n", "if", "allBoundingBoxes", "is", "None", ":", "\n", "        ", "allBoundingBoxes", "=", "BoundingBoxes", "(", ")", "\n", "", "if", "allClasses", "is", "None", ":", "\n", "        ", "allClasses", "=", "[", "]", "\n", "# Read ground truths", "\n", "", "os", ".", "chdir", "(", "directory", ")", "\n", "files", "=", "glob", ".", "glob", "(", "\"*.txt\"", ")", "\n", "files", ".", "sort", "(", ")", "\n", "# Read GT detections from txt file", "\n", "# Each line of the files in the groundtruths folder represents a ground truth bounding box", "\n", "# (bounding boxes that a detector should detect)", "\n", "# Each value of each line is  \"class_id, x, y, width, height\" respectively", "\n", "# Class_id represents the class of the bounding box", "\n", "# x, y represents the most top-left coordinates of the bounding box", "\n", "# x2, y2 represents the most bottom-right coordinates of the bounding box", "\n", "for", "f", "in", "files", ":", "\n", "        ", "nameOfImage", "=", "f", ".", "replace", "(", "\".txt\"", ",", "\"\"", ")", "\n", "fh1", "=", "open", "(", "f", ",", "\"r\"", ")", "\n", "for", "line", "in", "fh1", ":", "\n", "            ", "line", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "if", "line", ".", "replace", "(", "' '", ",", "''", ")", "==", "''", ":", "\n", "                ", "continue", "\n", "", "splitLine", "=", "line", ".", "split", "(", "\" \"", ")", "\n", "if", "isGT", ":", "\n", "# idClass = int(splitLine[0]) #class", "\n", "                ", "idClass", "=", "(", "splitLine", "[", "0", "]", ")", "# class", "\n", "x", "=", "float", "(", "splitLine", "[", "1", "]", ")", "\n", "y", "=", "float", "(", "splitLine", "[", "2", "]", ")", "\n", "w", "=", "float", "(", "splitLine", "[", "3", "]", ")", "\n", "h", "=", "float", "(", "splitLine", "[", "4", "]", ")", "\n", "bb", "=", "BoundingBox", "(", "\n", "nameOfImage", ",", "\n", "idClass", ",", "\n", "x", ",", "\n", "y", ",", "\n", "w", ",", "\n", "h", ",", "\n", "coordType", ",", "\n", "imgSize", ",", "\n", "BBType", ".", "GroundTruth", ",", "\n", "format", "=", "bbFormat", ")", "\n", "", "else", ":", "\n", "# idClass = int(splitLine[0]) #class", "\n", "                ", "idClass", "=", "(", "splitLine", "[", "0", "]", ")", "# class", "\n", "confidence", "=", "float", "(", "splitLine", "[", "1", "]", ")", "\n", "x", "=", "float", "(", "splitLine", "[", "2", "]", ")", "\n", "y", "=", "float", "(", "splitLine", "[", "3", "]", ")", "\n", "w", "=", "float", "(", "splitLine", "[", "4", "]", ")", "\n", "h", "=", "float", "(", "splitLine", "[", "5", "]", ")", "\n", "bb", "=", "BoundingBox", "(", "\n", "nameOfImage", ",", "\n", "idClass", ",", "\n", "x", ",", "\n", "y", ",", "\n", "w", ",", "\n", "h", ",", "\n", "coordType", ",", "\n", "imgSize", ",", "\n", "BBType", ".", "Detected", ",", "\n", "confidence", ",", "\n", "format", "=", "bbFormat", ")", "\n", "", "allBoundingBoxes", ".", "addBoundingBox", "(", "bb", ")", "\n", "if", "idClass", "not", "in", "allClasses", ":", "\n", "                ", "allClasses", ".", "append", "(", "idClass", ")", "\n", "", "", "fh1", ".", "close", "(", ")", "\n", "", "return", "allBoundingBoxes", ",", "allClasses", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_boundingBoxes", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.addBoundingBox": [[9, 11], ["BoundingBoxes.BoundingBoxes._boundingBoxes.append"], "methods", ["None"], ["", "def", "addBoundingBox", "(", "self", ",", "bb", ")", ":", "\n", "        ", "self", ".", "_boundingBoxes", ".", "append", "(", "bb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.removeBoundingBox": [[12, 17], ["BoundingBox.BoundingBox.BoundingBox.compare"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.compare"], ["", "def", "removeBoundingBox", "(", "self", ",", "_boundingBox", ")", ":", "\n", "        ", "for", "d", "in", "self", ".", "_boundingBoxes", ":", "\n", "            ", "if", "BoundingBox", ".", "compare", "(", "d", ",", "_boundingBox", ")", ":", "\n", "                ", "del", "self", ".", "_boundingBoxes", "[", "d", "]", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.removeAllBoundingBoxes": [[18, 20], ["None"], "methods", ["None"], ["", "", "", "def", "removeAllBoundingBoxes", "(", "self", ")", ":", "\n", "        ", "self", ".", "_boundingBoxes", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.getBoundingBoxes": [[21, 23], ["None"], "methods", ["None"], ["", "def", "getBoundingBoxes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_boundingBoxes", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.getBoundingBoxByClass": [[24, 30], ["d.getClassId", "boundingBoxes.append"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getClassId"], ["", "def", "getBoundingBoxByClass", "(", "self", ",", "classId", ")", ":", "\n", "        ", "boundingBoxes", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "_boundingBoxes", ":", "\n", "            ", "if", "d", ".", "getClassId", "(", ")", "==", "classId", ":", "# get only specified bounding box type", "\n", "                ", "boundingBoxes", ".", "append", "(", "d", ")", "\n", "", "", "return", "boundingBoxes", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.getClasses": [[31, 38], ["d.getClassId", "classes.append"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getClassId"], ["", "def", "getClasses", "(", "self", ")", ":", "\n", "        ", "classes", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "_boundingBoxes", ":", "\n", "            ", "c", "=", "d", ".", "getClassId", "(", ")", "\n", "if", "c", "not", "in", "classes", ":", "\n", "                ", "classes", ".", "append", "(", "c", ")", "\n", "", "", "return", "classes", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.getBoundingBoxesByType": [[39, 42], ["d.getBBType"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getBBType"], ["", "def", "getBoundingBoxesByType", "(", "self", ",", "bbType", ")", ":", "\n", "# get only specified bb type", "\n", "        ", "return", "[", "d", "for", "d", "in", "self", ".", "_boundingBoxes", "if", "d", ".", "getBBType", "(", ")", "==", "bbType", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.getBoundingBoxesByImageName": [[43, 46], ["d.getImageName"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getImageName"], ["", "def", "getBoundingBoxesByImageName", "(", "self", ",", "imageName", ")", ":", "\n", "# get only specified bb type", "\n", "        ", "return", "[", "d", "for", "d", "in", "self", ".", "_boundingBoxes", "if", "d", ".", "getImageName", "(", ")", "==", "imageName", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.count": [[47, 55], ["len", "d.getBBType"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getBBType"], ["", "def", "count", "(", "self", ",", "bbType", "=", "None", ")", ":", "\n", "        ", "if", "bbType", "is", "None", ":", "# Return all bounding boxes", "\n", "            ", "return", "len", "(", "self", ".", "_boundingBoxes", ")", "\n", "", "count", "=", "0", "\n", "for", "d", "in", "self", ".", "_boundingBoxes", ":", "\n", "            ", "if", "d", ".", "getBBType", "(", ")", "==", "bbType", ":", "# get only specified bb type", "\n", "                ", "count", "+=", "1", "\n", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.clone": [[56, 62], ["BoundingBoxes.BoundingBoxes", "BoundingBox.BoundingBox.BoundingBox.clone", "BoundingBoxes.addBoundingBox"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.clone", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.addBoundingBox"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "newBoundingBoxes", "=", "BoundingBoxes", "(", ")", "\n", "for", "d", "in", "self", ".", "_boundingBoxes", ":", "\n", "            ", "det", "=", "BoundingBox", ".", "clone", "(", "d", ")", "\n", "newBoundingBoxes", ".", "addBoundingBox", "(", "det", ")", "\n", "", "return", "newBoundingBoxes", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.drawAllBoundingBoxes": [[63, 71], ["BoundingBoxes.BoundingBoxes.getBoundingBoxesByImageName", "bb.getBBType", "utils.add_bb_into_image", "utils.add_bb_into_image"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.getBoundingBoxesByImageName", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getBBType", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.utils.add_bb_into_image", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.utils.add_bb_into_image"], ["", "def", "drawAllBoundingBoxes", "(", "self", ",", "image", ",", "imageName", ")", ":", "\n", "        ", "bbxes", "=", "self", ".", "getBoundingBoxesByImageName", "(", "imageName", ")", "\n", "for", "bb", "in", "bbxes", ":", "\n", "            ", "if", "bb", ".", "getBBType", "(", ")", "==", "BBType", ".", "GroundTruth", ":", "# if ground truth", "\n", "                ", "image", "=", "add_bb_into_image", "(", "image", ",", "bb", ",", "color", "=", "(", "0", ",", "255", ",", "0", ")", ")", "# green", "\n", "", "else", ":", "# if detection", "\n", "                ", "image", "=", "add_bb_into_image", "(", "image", ",", "bb", ",", "color", "=", "(", "255", ",", "0", ",", "0", ")", ")", "# red", "\n", "", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator.GetPascalVOCMetrics": [[24, 147], ["boundingboxes.getBoundingBoxes", "sorted", "len", "sorted", "numpy.zeros", "numpy.zeros", "collections.Counter", "collections.Counter.items", "range", "numpy.cumsum", "numpy.cumsum", "numpy.divide", "ret.append", "bb.getBBType", "groundTruths.append", "detections.append", "bb.getClassId", "sorted.append", "sorted.append", "gts.append", "len", "len", "numpy.zeros", "len", "range", "Evaluator.CalculateAveragePrecision", "Evaluator.ElevenPointInterpolatedAP", "numpy.sum", "numpy.sum", "bb.getClassId", "len", "Evaluator.iou", "bb.getImageName", "bb.getClassId", "bb.getAbsoluteBoundingBox", "bb.getImageName", "bb.getClassId", "bb.getConfidence", "bb.getAbsoluteBoundingBox"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBoxes.BoundingBoxes.getBoundingBoxes", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getBBType", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getClassId", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator.CalculateAveragePrecision", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator.ElevenPointInterpolatedAP", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getClassId", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator.iou", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getImageName", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getClassId", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getAbsoluteBoundingBox", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getImageName", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getClassId", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getConfidence", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getAbsoluteBoundingBox"], ["    ", "def", "GetPascalVOCMetrics", "(", "self", ",", "\n", "boundingboxes", ",", "\n", "IOUThreshold", "=", "0.5", ",", "\n", "method", "=", "MethodAveragePrecision", ".", "EveryPointInterpolation", ")", ":", "\n", "        ", "\"\"\"Get the metrics used by the VOC Pascal 2012 challenge.\n        Get\n        Args:\n            boundingboxes: Object of the class BoundingBoxes representing ground truth and detected\n            bounding boxes;\n            IOUThreshold: IOU threshold indicating which detections will be considered TP or FP\n            (default value = 0.5);\n            method (default = EveryPointInterpolation): It can be calculated as the implementation\n            in the official PASCAL VOC toolkit (EveryPointInterpolation), or applying the 11-point\n            interpolatio as described in the paper \"The PASCAL Visual Object Classes(VOC) Challenge\"\n            or EveryPointInterpolation\"  (ElevenPointInterpolation);\n        Returns:\n            A list of dictionaries. Each dictionary contains information and metrics of each class.\n            The keys of each dictionary are:\n            dict['class']: class representing the current dictionary;\n            dict['precision']: array with the precision values;\n            dict['recall']: array with the recall values;\n            dict['AP']: average precision;\n            dict['interpolated precision']: interpolated precision values;\n            dict['interpolated recall']: interpolated recall values;\n            dict['total positives']: total number of ground truth positives;\n            dict['total TP']: total number of True Positive detections;\n            dict['total FP']: total number of False Negative detections;\n        \"\"\"", "\n", "ret", "=", "[", "]", "# list containing metrics (precision, recall, average precision) of each class", "\n", "# List with all ground truths (Ex: [imageName,class,confidence=1, (bb coordinates XYX2Y2)])", "\n", "groundTruths", "=", "[", "]", "\n", "# List with all detections (Ex: [imageName,class,confidence,(bb coordinates XYX2Y2)])", "\n", "detections", "=", "[", "]", "\n", "# Get all classes", "\n", "classes", "=", "[", "]", "\n", "# Loop through all bounding boxes and separate them into GTs and detections", "\n", "for", "bb", "in", "boundingboxes", ".", "getBoundingBoxes", "(", ")", ":", "\n", "# [imageName, class, confidence, (bb coordinates XYX2Y2)]", "\n", "            ", "if", "bb", ".", "getBBType", "(", ")", "==", "BBType", ".", "GroundTruth", ":", "\n", "                ", "groundTruths", ".", "append", "(", "[", "\n", "bb", ".", "getImageName", "(", ")", ",", "\n", "bb", ".", "getClassId", "(", ")", ",", "1", ",", "\n", "bb", ".", "getAbsoluteBoundingBox", "(", "BBFormat", ".", "XYX2Y2", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "                ", "detections", ".", "append", "(", "[", "\n", "bb", ".", "getImageName", "(", ")", ",", "\n", "bb", ".", "getClassId", "(", ")", ",", "\n", "bb", ".", "getConfidence", "(", ")", ",", "\n", "bb", ".", "getAbsoluteBoundingBox", "(", "BBFormat", ".", "XYX2Y2", ")", "\n", "]", ")", "\n", "# get class", "\n", "", "if", "bb", ".", "getClassId", "(", ")", "not", "in", "classes", ":", "\n", "                ", "classes", ".", "append", "(", "bb", ".", "getClassId", "(", ")", ")", "\n", "", "", "classes", "=", "sorted", "(", "classes", ")", "\n", "# Precision x Recall is obtained individually by each class", "\n", "# Loop through by classes", "\n", "for", "c", "in", "classes", ":", "\n", "# Get only detection of class c", "\n", "            ", "dects", "=", "[", "]", "\n", "[", "dects", ".", "append", "(", "d", ")", "for", "d", "in", "detections", "if", "d", "[", "1", "]", "==", "c", "]", "\n", "# Get only ground truths of class c", "\n", "gts", "=", "[", "]", "\n", "[", "gts", ".", "append", "(", "g", ")", "for", "g", "in", "groundTruths", "if", "g", "[", "1", "]", "==", "c", "]", "\n", "npos", "=", "len", "(", "gts", ")", "\n", "# sort detections by decreasing confidence", "\n", "dects", "=", "sorted", "(", "dects", ",", "key", "=", "lambda", "conf", ":", "conf", "[", "2", "]", ",", "reverse", "=", "True", ")", "\n", "TP", "=", "np", ".", "zeros", "(", "len", "(", "dects", ")", ")", "\n", "FP", "=", "np", ".", "zeros", "(", "len", "(", "dects", ")", ")", "\n", "# create dictionary with amount of gts for each image", "\n", "det", "=", "Counter", "(", "[", "cc", "[", "0", "]", "for", "cc", "in", "gts", "]", ")", "\n", "for", "key", ",", "val", "in", "det", ".", "items", "(", ")", ":", "\n", "                ", "det", "[", "key", "]", "=", "np", ".", "zeros", "(", "val", ")", "\n", "# print(\"Evaluating class: %s (%d detections)\" % (str(c), len(dects)))", "\n", "# Loop through detections", "\n", "", "for", "d", "in", "range", "(", "len", "(", "dects", ")", ")", ":", "\n", "# print('dect %s => %s' % (dects[d][0], dects[d][3],))", "\n", "# Find ground truth image", "\n", "                ", "gt", "=", "[", "gt", "for", "gt", "in", "gts", "if", "gt", "[", "0", "]", "==", "dects", "[", "d", "]", "[", "0", "]", "]", "\n", "iouMax", "=", "sys", ".", "float_info", ".", "min", "\n", "for", "j", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "# print('Ground truth gt => %s' % (gt[j][3],))", "\n", "                    ", "iou", "=", "Evaluator", ".", "iou", "(", "dects", "[", "d", "]", "[", "3", "]", ",", "gt", "[", "j", "]", "[", "3", "]", ")", "\n", "if", "iou", ">", "iouMax", ":", "\n", "                        ", "iouMax", "=", "iou", "\n", "jmax", "=", "j", "\n", "# Assign detection as true positive/don't care/false positive", "\n", "", "", "if", "iouMax", ">=", "IOUThreshold", ":", "\n", "                    ", "if", "det", "[", "dects", "[", "d", "]", "[", "0", "]", "]", "[", "jmax", "]", "==", "0", ":", "\n", "                        ", "TP", "[", "d", "]", "=", "1", "# count as true positive", "\n", "det", "[", "dects", "[", "d", "]", "[", "0", "]", "]", "[", "jmax", "]", "=", "1", "# flag as already 'seen'", "\n", "# print(\"TP\")", "\n", "", "else", ":", "\n", "                        ", "FP", "[", "d", "]", "=", "1", "# count as false positive", "\n", "# print(\"FP\")", "\n", "# - A detected \"cat\" is overlaped with a GT \"cat\" with IOU >= IOUThreshold.", "\n", "", "", "else", ":", "\n", "                    ", "FP", "[", "d", "]", "=", "1", "# count as false positive", "\n", "# print(\"FP\")", "\n", "# compute precision, recall and average precision", "\n", "", "", "acc_FP", "=", "np", ".", "cumsum", "(", "FP", ")", "\n", "acc_TP", "=", "np", ".", "cumsum", "(", "TP", ")", "\n", "rec", "=", "acc_TP", "/", "npos", "\n", "prec", "=", "np", ".", "divide", "(", "acc_TP", ",", "(", "acc_FP", "+", "acc_TP", ")", ")", "\n", "# Depending on the method, call the right implementation", "\n", "if", "method", "==", "MethodAveragePrecision", ".", "EveryPointInterpolation", ":", "\n", "                ", "[", "ap", ",", "mpre", ",", "mrec", ",", "ii", "]", "=", "Evaluator", ".", "CalculateAveragePrecision", "(", "rec", ",", "prec", ")", "\n", "", "else", ":", "\n", "                ", "[", "ap", ",", "mpre", ",", "mrec", ",", "_", "]", "=", "Evaluator", ".", "ElevenPointInterpolatedAP", "(", "rec", ",", "prec", ")", "\n", "# add class result in the dictionary to be returned", "\n", "", "r", "=", "{", "\n", "'class'", ":", "c", ",", "\n", "'precision'", ":", "prec", ",", "\n", "'recall'", ":", "rec", ",", "\n", "'AP'", ":", "ap", ",", "\n", "'interpolated precision'", ":", "mpre", ",", "\n", "'interpolated recall'", ":", "mrec", ",", "\n", "'total positives'", ":", "npos", ",", "\n", "'total TP'", ":", "np", ".", "sum", "(", "TP", ")", ",", "\n", "'total FP'", ":", "np", ".", "sum", "(", "FP", ")", "\n", "}", "\n", "ret", ".", "append", "(", "r", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator.PlotPrecisionRecallCurve": [[148, 290], ["Evaluator.Evaluator.GetPascalVOCMetrics", "matplotlib.close", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.grid", "IOError", "matplotlib.title", "matplotlib.title", "matplotlib.savefig", "matplotlib.show", "matplotlib.pause", "matplotlib.plot", "os.path.join", "range", "matplotlib.plot", "str", "len", "str", "numpy.argwhere", "nrec.append", "nprec.append", "max", "int"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator.GetPascalVOCMetrics"], ["", "def", "PlotPrecisionRecallCurve", "(", "self", ",", "\n", "boundingBoxes", ",", "\n", "IOUThreshold", "=", "0.5", ",", "\n", "method", "=", "MethodAveragePrecision", ".", "EveryPointInterpolation", ",", "\n", "showAP", "=", "False", ",", "\n", "showInterpolatedPrecision", "=", "False", ",", "\n", "savePath", "=", "None", ",", "\n", "showGraphic", "=", "True", ")", ":", "\n", "        ", "\"\"\"PlotPrecisionRecallCurve\n        Plot the Precision x Recall curve for a given class.\n        Args:\n            boundingBoxes: Object of the class BoundingBoxes representing ground truth and detected\n            bounding boxes;\n            IOUThreshold (optional): IOU threshold indicating which detections will be considered\n            TP or FP (default value = 0.5);\n            method (default = EveryPointInterpolation): It can be calculated as the implementation\n            in the official PASCAL VOC toolkit (EveryPointInterpolation), or applying the 11-point\n            interpolatio as described in the paper \"The PASCAL Visual Object Classes(VOC) Challenge\"\n            or EveryPointInterpolation\"  (ElevenPointInterpolation).\n            showAP (optional): if True, the average precision value will be shown in the title of\n            the graph (default = False);\n            showInterpolatedPrecision (optional): if True, it will show in the plot the interpolated\n             precision (default = False);\n            savePath (optional): if informed, the plot will be saved as an image in this path\n            (ex: /home/mywork/ap.png) (default = None);\n            showGraphic (optional): if True, the plot will be shown (default = True)\n        Returns:\n            A list of dictionaries. Each dictionary contains information and metrics of each class.\n            The keys of each dictionary are:\n            dict['class']: class representing the current dictionary;\n            dict['precision']: array with the precision values;\n            dict['recall']: array with the recall values;\n            dict['AP']: average precision;\n            dict['interpolated precision']: interpolated precision values;\n            dict['interpolated recall']: interpolated recall values;\n            dict['total positives']: total number of ground truth positives;\n            dict['total TP']: total number of True Positive detections;\n            dict['total FP']: total number of False Negative detections;\n        \"\"\"", "\n", "results", "=", "self", ".", "GetPascalVOCMetrics", "(", "boundingBoxes", ",", "IOUThreshold", ",", "method", ")", "\n", "result", "=", "None", "\n", "# Each resut represents a class", "\n", "for", "result", "in", "results", ":", "\n", "            ", "if", "result", "is", "None", ":", "\n", "                ", "raise", "IOError", "(", "'Error: Class %d could not be found.'", "%", "classId", ")", "\n", "\n", "", "classId", "=", "result", "[", "'class'", "]", "\n", "precision", "=", "result", "[", "'precision'", "]", "\n", "recall", "=", "result", "[", "'recall'", "]", "\n", "average_precision", "=", "result", "[", "'AP'", "]", "\n", "mpre", "=", "result", "[", "'interpolated precision'", "]", "\n", "mrec", "=", "result", "[", "'interpolated recall'", "]", "\n", "npos", "=", "result", "[", "'total positives'", "]", "\n", "total_tp", "=", "result", "[", "'total TP'", "]", "\n", "total_fp", "=", "result", "[", "'total FP'", "]", "\n", "\n", "plt", ".", "close", "(", ")", "\n", "if", "showInterpolatedPrecision", ":", "\n", "                ", "if", "method", "==", "MethodAveragePrecision", ".", "EveryPointInterpolation", ":", "\n", "                    ", "plt", ".", "plot", "(", "mrec", ",", "mpre", ",", "'--r'", ",", "label", "=", "'Interpolated precision (every point)'", ")", "\n", "", "elif", "method", "==", "MethodAveragePrecision", ".", "ElevenPointInterpolation", ":", "\n", "# Uncomment the line below if you want to plot the area", "\n", "# plt.plot(mrec, mpre, 'or', label='11-point interpolated precision')", "\n", "# Remove duplicates, getting only the highest precision of each recall value", "\n", "                    ", "nrec", "=", "[", "]", "\n", "nprec", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "mrec", ")", ")", ":", "\n", "                        ", "r", "=", "mrec", "[", "idx", "]", "\n", "if", "r", "not", "in", "nrec", ":", "\n", "                            ", "idxEq", "=", "np", ".", "argwhere", "(", "mrec", "==", "r", ")", "\n", "nrec", ".", "append", "(", "r", ")", "\n", "nprec", ".", "append", "(", "max", "(", "[", "mpre", "[", "int", "(", "id", ")", "]", "for", "id", "in", "idxEq", "]", ")", ")", "\n", "", "", "plt", ".", "plot", "(", "nrec", ",", "nprec", ",", "'or'", ",", "label", "=", "'11-point interpolated precision'", ")", "\n", "", "", "plt", ".", "plot", "(", "recall", ",", "precision", ",", "label", "=", "'Precision'", ")", "\n", "plt", ".", "xlabel", "(", "'recall'", ")", "\n", "plt", ".", "ylabel", "(", "'precision'", ")", "\n", "if", "showAP", ":", "\n", "                ", "ap_str", "=", "\"{0:.2f}%\"", ".", "format", "(", "average_precision", "*", "100", ")", "\n", "# ap_str = \"{0:.4f}%\".format(average_precision * 100)", "\n", "plt", ".", "title", "(", "'Precision x Recall curve \\nClass: %s, AP: %s'", "%", "(", "str", "(", "classId", ")", ",", "ap_str", ")", ")", "\n", "", "else", ":", "\n", "                ", "plt", ".", "title", "(", "'Precision x Recall curve \\nClass: %s'", "%", "str", "(", "classId", ")", ")", "\n", "", "plt", ".", "legend", "(", "shadow", "=", "True", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "############################################################", "\n", "# Uncomment the following block to create plot with points #", "\n", "############################################################", "\n", "# plt.plot(recall, precision, 'bo')", "\n", "# labels = ['R', 'Y', 'J', 'A', 'U', 'C', 'M', 'F', 'D', 'B', 'H', 'P', 'E', 'X', 'N', 'T',", "\n", "# 'K', 'Q', 'V', 'I', 'L', 'S', 'G', 'O']", "\n", "# dicPosition = {}", "\n", "# dicPosition['left_zero'] = (-30,0)", "\n", "# dicPosition['left_zero_slight'] = (-30,-10)", "\n", "# dicPosition['right_zero'] = (30,0)", "\n", "# dicPosition['left_up'] = (-30,20)", "\n", "# dicPosition['left_down'] = (-30,-25)", "\n", "# dicPosition['right_up'] = (20,20)", "\n", "# dicPosition['right_down'] = (20,-20)", "\n", "# dicPosition['up_zero'] = (0,30)", "\n", "# dicPosition['up_right'] = (0,30)", "\n", "# dicPosition['left_zero_long'] = (-60,-2)", "\n", "# dicPosition['down_zero'] = (-2,-30)", "\n", "# vecPositions = [", "\n", "#     dicPosition['left_down'],", "\n", "#     dicPosition['left_zero'],", "\n", "#     dicPosition['right_zero'],", "\n", "#     dicPosition['right_zero'],  #'R', 'Y', 'J', 'A',", "\n", "#     dicPosition['left_up'],", "\n", "#     dicPosition['left_up'],", "\n", "#     dicPosition['right_up'],", "\n", "#     dicPosition['left_up'],  # 'U', 'C', 'M', 'F',", "\n", "#     dicPosition['left_zero'],", "\n", "#     dicPosition['right_up'],", "\n", "#     dicPosition['right_down'],", "\n", "#     dicPosition['down_zero'],  #'D', 'B', 'H', 'P'", "\n", "#     dicPosition['left_up'],", "\n", "#     dicPosition['up_zero'],", "\n", "#     dicPosition['right_up'],", "\n", "#     dicPosition['left_up'],  # 'E', 'X', 'N', 'T',", "\n", "#     dicPosition['left_zero'],", "\n", "#     dicPosition['right_zero'],", "\n", "#     dicPosition['left_zero_long'],", "\n", "#     dicPosition['left_zero_slight'],  # 'K', 'Q', 'V', 'I',", "\n", "#     dicPosition['right_down'],", "\n", "#     dicPosition['left_down'],", "\n", "#     dicPosition['right_up'],", "\n", "#     dicPosition['down_zero']", "\n", "# ]  # 'L', 'S', 'G', 'O'", "\n", "# for idx in range(len(labels)):", "\n", "#     box = dict(boxstyle='round,pad=.5',facecolor='yellow',alpha=0.5)", "\n", "#     plt.annotate(labels[idx],", "\n", "#                 xy=(recall[idx],precision[idx]), xycoords='data',", "\n", "#                 xytext=vecPositions[idx], textcoords='offset points',", "\n", "#                 arrowprops=dict(arrowstyle=\"->\", connectionstyle=\"arc3\"),", "\n", "#                 bbox=box)", "\n", "if", "savePath", "is", "not", "None", ":", "\n", "                ", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "savePath", ",", "classId", "+", "'.png'", ")", ")", "\n", "", "if", "showGraphic", "is", "True", ":", "\n", "                ", "plt", ".", "show", "(", ")", "\n", "# plt.waitforbuttonpress()", "\n", "plt", ".", "pause", "(", "0.05", ")", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator.CalculateAveragePrecision": [[291, 312], ["mrec.append", "mrec.append", "mpre.append", "mpre.append", "range", "range", "mrec.append", "mpre.append", "max", "len", "len", "ii.append", "numpy.sum", "len", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "CalculateAveragePrecision", "(", "rec", ",", "prec", ")", ":", "\n", "        ", "mrec", "=", "[", "]", "\n", "mrec", ".", "append", "(", "0", ")", "\n", "[", "mrec", ".", "append", "(", "e", ")", "for", "e", "in", "rec", "]", "\n", "mrec", ".", "append", "(", "1", ")", "\n", "mpre", "=", "[", "]", "\n", "mpre", ".", "append", "(", "0", ")", "\n", "[", "mpre", ".", "append", "(", "e", ")", "for", "e", "in", "prec", "]", "\n", "mpre", ".", "append", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mpre", ")", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "max", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "", "ii", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "mrec", ")", "-", "1", ")", ":", "\n", "            ", "if", "mrec", "[", "1", ":", "]", "[", "i", "]", "!=", "mrec", "[", "0", ":", "-", "1", "]", "[", "i", "]", ":", "\n", "                ", "ii", ".", "append", "(", "i", "+", "1", ")", "\n", "", "", "ap", "=", "0", "\n", "for", "i", "in", "ii", ":", "\n", "            ", "ap", "=", "ap", "+", "np", ".", "sum", "(", "(", "mrec", "[", "i", "]", "-", "mrec", "[", "i", "-", "1", "]", ")", "*", "mpre", "[", "i", "]", ")", "\n", "# return [ap, mpre[1:len(mpre)-1], mrec[1:len(mpre)-1], ii]", "\n", "", "return", "[", "ap", ",", "mpre", "[", "0", ":", "len", "(", "mpre", ")", "-", "1", "]", ",", "mrec", "[", "0", ":", "len", "(", "mpre", ")", "-", "1", "]", ",", "ii", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator.ElevenPointInterpolatedAP": [[313, 362], ["numpy.linspace", "list", "rvals.append", "rvals.append", "pvals.append", "pvals.append", "range", "mrec.append", "mpre.append", "numpy.argwhere", "recallValid.append", "rhoInterp.append", "sum", "rvals.append", "pvals.append", "len", "max", "cc.append", "cc.append", "numpy.argwhere.min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "# 11-point interpolated average precision", "\n", "def", "ElevenPointInterpolatedAP", "(", "rec", ",", "prec", ")", ":", "\n", "# def CalculateAveragePrecision2(rec, prec):", "\n", "        ", "mrec", "=", "[", "]", "\n", "# mrec.append(0)", "\n", "[", "mrec", ".", "append", "(", "e", ")", "for", "e", "in", "rec", "]", "\n", "# mrec.append(1)", "\n", "mpre", "=", "[", "]", "\n", "# mpre.append(0)", "\n", "[", "mpre", ".", "append", "(", "e", ")", "for", "e", "in", "prec", "]", "\n", "# mpre.append(0)", "\n", "recallValues", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "11", ")", "\n", "recallValues", "=", "list", "(", "recallValues", "[", ":", ":", "-", "1", "]", ")", "\n", "rhoInterp", "=", "[", "]", "\n", "recallValid", "=", "[", "]", "\n", "# For each recallValues (0, 0.1, 0.2, ... , 1)", "\n", "for", "r", "in", "recallValues", ":", "\n", "# Obtain all recall values higher or equal than r", "\n", "            ", "argGreaterRecalls", "=", "np", ".", "argwhere", "(", "mrec", "[", ":", "]", ">=", "r", ")", "\n", "pmax", "=", "0", "\n", "# If there are recalls above r", "\n", "if", "argGreaterRecalls", ".", "size", "!=", "0", ":", "\n", "                ", "pmax", "=", "max", "(", "mpre", "[", "argGreaterRecalls", ".", "min", "(", ")", ":", "]", ")", "\n", "", "recallValid", ".", "append", "(", "r", ")", "\n", "rhoInterp", ".", "append", "(", "pmax", ")", "\n", "# By definition AP = sum(max(precision whose recall is above r))/11", "\n", "", "ap", "=", "sum", "(", "rhoInterp", ")", "/", "11", "\n", "# Generating values for the plot", "\n", "rvals", "=", "[", "]", "\n", "rvals", ".", "append", "(", "recallValid", "[", "0", "]", ")", "\n", "[", "rvals", ".", "append", "(", "e", ")", "for", "e", "in", "recallValid", "]", "\n", "rvals", ".", "append", "(", "0", ")", "\n", "pvals", "=", "[", "]", "\n", "pvals", ".", "append", "(", "0", ")", "\n", "[", "pvals", ".", "append", "(", "e", ")", "for", "e", "in", "rhoInterp", "]", "\n", "pvals", ".", "append", "(", "0", ")", "\n", "# rhoInterp = rhoInterp[::-1]", "\n", "cc", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "rvals", ")", ")", ":", "\n", "            ", "p", "=", "(", "rvals", "[", "i", "]", ",", "pvals", "[", "i", "-", "1", "]", ")", "\n", "if", "p", "not", "in", "cc", ":", "\n", "                ", "cc", ".", "append", "(", "p", ")", "\n", "", "p", "=", "(", "rvals", "[", "i", "]", ",", "pvals", "[", "i", "]", ")", "\n", "if", "p", "not", "in", "cc", ":", "\n", "                ", "cc", ".", "append", "(", "p", ")", "\n", "", "", "recallValues", "=", "[", "i", "[", "0", "]", "for", "i", "in", "cc", "]", "\n", "rhoInterp", "=", "[", "i", "[", "1", "]", "for", "i", "in", "cc", "]", "\n", "return", "[", "ap", ",", "rhoInterp", ",", "recallValues", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator._getAllIOUs": [[364, 380], ["reference.getAbsoluteBoundingBox", "sorted", "d.getAbsoluteBoundingBox", "Evaluator.iou", "ret.append"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getAbsoluteBoundingBox", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getAbsoluteBoundingBox", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator.iou"], ["", "@", "staticmethod", "\n", "def", "_getAllIOUs", "(", "reference", ",", "detections", ")", ":", "\n", "        ", "ret", "=", "[", "]", "\n", "bbReference", "=", "reference", ".", "getAbsoluteBoundingBox", "(", "BBFormat", ".", "XYX2Y2", ")", "\n", "# img = np.zeros((200,200,3), np.uint8)", "\n", "for", "d", "in", "detections", ":", "\n", "            ", "bb", "=", "d", ".", "getAbsoluteBoundingBox", "(", "BBFormat", ".", "XYX2Y2", ")", "\n", "iou", "=", "Evaluator", ".", "iou", "(", "bbReference", ",", "bb", ")", "\n", "# Show blank image with the bounding boxes", "\n", "# img = add_bb_into_image(img, d, color=(255,0,0), thickness=2, label=None)", "\n", "# img = add_bb_into_image(img, reference, color=(0,255,0), thickness=2, label=None)", "\n", "ret", ".", "append", "(", "(", "iou", ",", "reference", ",", "d", ")", ")", "# iou, reference, detection", "\n", "# cv2.imshow(\"comparing\",img)", "\n", "# cv2.waitKey(0)", "\n", "# cv2.destroyWindow(\"comparing\")", "\n", "", "return", "sorted", "(", "ret", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ",", "reverse", "=", "True", ")", "# sort by iou (from highest to lowest)", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator.iou": [[381, 392], ["Evaluator._getIntersectionArea", "Evaluator._getUnionAreas", "Evaluator._boxesIntersect"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator._getIntersectionArea", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator._getUnionAreas", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator._boxesIntersect"], ["", "@", "staticmethod", "\n", "def", "iou", "(", "boxA", ",", "boxB", ")", ":", "\n", "# if boxes dont intersect", "\n", "        ", "if", "Evaluator", ".", "_boxesIntersect", "(", "boxA", ",", "boxB", ")", "is", "False", ":", "\n", "            ", "return", "0", "\n", "", "interArea", "=", "Evaluator", ".", "_getIntersectionArea", "(", "boxA", ",", "boxB", ")", "\n", "union", "=", "Evaluator", ".", "_getUnionAreas", "(", "boxA", ",", "boxB", ",", "interArea", "=", "interArea", ")", "\n", "# intersection over union", "\n", "iou", "=", "interArea", "/", "union", "\n", "assert", "iou", ">=", "0", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator._boxesIntersect": [[395, 406], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_boxesIntersect", "(", "boxA", ",", "boxB", ")", ":", "\n", "        ", "if", "boxA", "[", "0", "]", ">", "boxB", "[", "2", "]", ":", "\n", "            ", "return", "False", "# boxA is right of boxB", "\n", "", "if", "boxB", "[", "0", "]", ">", "boxA", "[", "2", "]", ":", "\n", "            ", "return", "False", "# boxA is left of boxB", "\n", "", "if", "boxA", "[", "3", "]", "<", "boxB", "[", "1", "]", ":", "\n", "            ", "return", "False", "# boxA is above boxB", "\n", "", "if", "boxA", "[", "1", "]", ">", "boxB", "[", "3", "]", ":", "\n", "            ", "return", "False", "# boxA is below boxB", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator._getIntersectionArea": [[407, 415], ["max", "max", "min", "min"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_getIntersectionArea", "(", "boxA", ",", "boxB", ")", ":", "\n", "        ", "xA", "=", "max", "(", "boxA", "[", "0", "]", ",", "boxB", "[", "0", "]", ")", "\n", "yA", "=", "max", "(", "boxA", "[", "1", "]", ",", "boxB", "[", "1", "]", ")", "\n", "xB", "=", "min", "(", "boxA", "[", "2", "]", ",", "boxB", "[", "2", "]", ")", "\n", "yB", "=", "min", "(", "boxA", "[", "3", "]", ",", "boxB", "[", "3", "]", ")", "\n", "# intersection area", "\n", "return", "(", "xB", "-", "xA", "+", "1", ")", "*", "(", "yB", "-", "yA", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator._getUnionAreas": [[416, 423], ["Evaluator._getArea", "Evaluator._getArea", "float", "Evaluator._getIntersectionArea"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator._getArea", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator._getArea", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator._getIntersectionArea"], ["", "@", "staticmethod", "\n", "def", "_getUnionAreas", "(", "boxA", ",", "boxB", ",", "interArea", "=", "None", ")", ":", "\n", "        ", "area_A", "=", "Evaluator", ".", "_getArea", "(", "boxA", ")", "\n", "area_B", "=", "Evaluator", ".", "_getArea", "(", "boxB", ")", "\n", "if", "interArea", "is", "None", ":", "\n", "            ", "interArea", "=", "Evaluator", ".", "_getIntersectionArea", "(", "boxA", ",", "boxB", ")", "\n", "", "return", "float", "(", "area_A", "+", "area_B", "-", "interArea", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.Evaluator.Evaluator._getArea": [[424, 427], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_getArea", "(", "box", ")", ":", "\n", "        ", "return", "(", "box", "[", "2", "]", "-", "box", "[", "0", "]", "+", "1", ")", "*", "(", "box", "[", "3", "]", "-", "box", "[", "1", "]", "+", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.__init__": [[5, 89], ["IOError", "IOError", "utils.convertToAbsoluteValues", "IOError"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.utils.convertToAbsoluteValues"], ["    ", "def", "__init__", "(", "self", ",", "\n", "imageName", ",", "\n", "classId", ",", "\n", "x", ",", "\n", "y", ",", "\n", "w", ",", "\n", "h", ",", "\n", "typeCoordinates", "=", "CoordinatesType", ".", "Absolute", ",", "\n", "imgSize", "=", "None", ",", "\n", "bbType", "=", "BBType", ".", "GroundTruth", ",", "\n", "classConfidence", "=", "None", ",", "\n", "format", "=", "BBFormat", ".", "XYWH", ")", ":", "\n", "        ", "\"\"\"Constructor.\n        Args:\n            imageName: String representing the image name.\n            classId: String value representing class id.\n            x: Float value representing the X upper-left coordinate of the bounding box.\n            y: Float value representing the Y upper-left coordinate of the bounding box.\n            w: Float value representing the width bounding box.\n            h: Float value representing the height bounding box.\n            typeCoordinates: (optional) Enum (Relative or Absolute) represents if the bounding box\n            coordinates (x,y,w,h) are absolute or relative to size of the image. Default:'Absolute'.\n            imgSize: (optional) 2D vector (width, height)=>(int, int) represents the size of the\n            image of the bounding box. If typeCoordinates is 'Relative', imgSize is required.\n            bbType: (optional) Enum (Groundtruth or Detection) identifies if the bounding box\n            represents a ground truth or a detection. If it is a detection, the classConfidence has\n            to be informed.\n            classConfidence: (optional) Float value representing the confidence of the detected\n            class. If detectionType is Detection, classConfidence needs to be informed.\n            format: (optional) Enum (BBFormat.XYWH or BBFormat.XYX2Y2) indicating the format of the\n            coordinates of the bounding boxes. BBFormat.XYWH: <left> <top> <width> <height>\n            BBFormat.XYX2Y2: <left> <top> <right> <bottom>.\n        \"\"\"", "\n", "self", ".", "_imageName", "=", "imageName", "\n", "self", ".", "_typeCoordinates", "=", "typeCoordinates", "\n", "if", "typeCoordinates", "==", "CoordinatesType", ".", "Relative", "and", "imgSize", "is", "None", ":", "\n", "            ", "raise", "IOError", "(", "\n", "'Parameter \\'imgSize\\' is required. It is necessary to inform the image size.'", ")", "\n", "", "if", "bbType", "==", "BBType", ".", "Detected", "and", "classConfidence", "is", "None", ":", "\n", "            ", "raise", "IOError", "(", "\n", "'For bbType=\\'Detection\\', it is necessary to inform the classConfidence value.'", ")", "\n", "# if classConfidence != None and (classConfidence < 0 or classConfidence > 1):", "\n", "# raise IOError('classConfidence value must be a real value between 0 and 1. Value: %f' %", "\n", "# classConfidence)", "\n", "\n", "", "self", ".", "_classConfidence", "=", "classConfidence", "\n", "self", ".", "_bbType", "=", "bbType", "\n", "self", ".", "_classId", "=", "classId", "\n", "self", ".", "_format", "=", "format", "\n", "\n", "# If relative coordinates, convert to absolute values", "\n", "# For relative coords: (x,y,w,h)=(X_center/img_width , Y_center/img_height)", "\n", "if", "(", "typeCoordinates", "==", "CoordinatesType", ".", "Relative", ")", ":", "\n", "            ", "(", "self", ".", "_x", ",", "self", ".", "_y", ",", "self", ".", "_w", ",", "self", ".", "_h", ")", "=", "convertToAbsoluteValues", "(", "imgSize", ",", "(", "x", ",", "y", ",", "w", ",", "h", ")", ")", "\n", "self", ".", "_width_img", "=", "imgSize", "[", "0", "]", "\n", "self", ".", "_height_img", "=", "imgSize", "[", "1", "]", "\n", "if", "format", "==", "BBFormat", ".", "XYWH", ":", "\n", "                ", "self", ".", "_x2", "=", "self", ".", "_w", "\n", "self", ".", "_y2", "=", "self", ".", "_h", "\n", "self", ".", "_w", "=", "self", ".", "_x2", "-", "self", ".", "_x", "\n", "self", ".", "_h", "=", "self", ".", "_y2", "-", "self", ".", "_y", "\n", "", "else", ":", "\n", "                ", "raise", "IOError", "(", "\n", "'For relative coordinates, the format must be XYWH (x,y,width,height)'", ")", "\n", "# For absolute coords: (x,y,w,h)=real bb coords", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_x", "=", "x", "\n", "self", ".", "_y", "=", "y", "\n", "if", "format", "==", "BBFormat", ".", "XYWH", ":", "\n", "                ", "self", ".", "_w", "=", "w", "\n", "self", ".", "_h", "=", "h", "\n", "self", ".", "_x2", "=", "self", ".", "_x", "+", "self", ".", "_w", "\n", "self", ".", "_y2", "=", "self", ".", "_y", "+", "self", ".", "_h", "\n", "", "else", ":", "# format == BBFormat.XYX2Y2: <left> <top> <right> <bottom>.", "\n", "                ", "self", ".", "_x2", "=", "w", "\n", "self", ".", "_y2", "=", "h", "\n", "self", ".", "_w", "=", "self", ".", "_x2", "-", "self", ".", "_x", "\n", "self", ".", "_h", "=", "self", ".", "_y2", "-", "self", ".", "_y", "\n", "", "", "if", "imgSize", "is", "None", ":", "\n", "            ", "self", ".", "_width_img", "=", "None", "\n", "self", ".", "_height_img", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "_width_img", "=", "imgSize", "[", "0", "]", "\n", "self", ".", "_height_img", "=", "imgSize", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getAbsoluteBoundingBox": [[90, 95], ["None"], "methods", ["None"], ["", "", "def", "getAbsoluteBoundingBox", "(", "self", ",", "format", "=", "BBFormat", ".", "XYWH", ")", ":", "\n", "        ", "if", "format", "==", "BBFormat", ".", "XYWH", ":", "\n", "            ", "return", "(", "self", ".", "_x", ",", "self", ".", "_y", ",", "self", ".", "_w", ",", "self", ".", "_h", ")", "\n", "", "elif", "format", "==", "BBFormat", ".", "XYX2Y2", ":", "\n", "            ", "return", "(", "self", ".", "_x", ",", "self", ".", "_y", ",", "self", ".", "_x2", ",", "self", ".", "_y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getRelativeBoundingBox": [[96, 106], ["IOError", "utils.convertToRelativeValues", "utils.convertToRelativeValues"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.utils.convertToRelativeValues", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.utils.convertToRelativeValues"], ["", "", "def", "getRelativeBoundingBox", "(", "self", ",", "imgSize", "=", "None", ")", ":", "\n", "        ", "if", "imgSize", "is", "None", "and", "self", ".", "_width_img", "is", "None", "and", "self", ".", "_height_img", "is", "None", ":", "\n", "            ", "raise", "IOError", "(", "\n", "'Parameter \\'imgSize\\' is required. It is necessary to inform the image size.'", ")", "\n", "", "if", "imgSize", "is", "None", ":", "\n", "            ", "return", "convertToRelativeValues", "(", "(", "imgSize", "[", "0", "]", ",", "imgSize", "[", "1", "]", ")", ",", "\n", "(", "self", ".", "_x", ",", "self", ".", "_y", ",", "self", ".", "_w", ",", "self", ".", "_h", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "convertToRelativeValues", "(", "(", "self", ".", "_width_img", ",", "self", ".", "_height_img", ")", ",", "\n", "(", "self", ".", "_x", ",", "self", ".", "_y", ",", "self", ".", "_w", ",", "self", ".", "_h", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getImageName": [[107, 109], ["None"], "methods", ["None"], ["", "", "def", "getImageName", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_imageName", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getConfidence": [[110, 112], ["None"], "methods", ["None"], ["", "def", "getConfidence", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_classConfidence", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getFormat": [[113, 115], ["None"], "methods", ["None"], ["", "def", "getFormat", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_format", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getClassId": [[116, 118], ["None"], "methods", ["None"], ["", "def", "getClassId", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_classId", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getImageSize": [[119, 121], ["None"], "methods", ["None"], ["", "def", "getImageSize", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "_width_img", ",", "self", ".", "_height_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getCoordinatesType": [[122, 124], ["None"], "methods", ["None"], ["", "def", "getCoordinatesType", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_typeCoordinates", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getBBType": [[125, 127], ["None"], "methods", ["None"], ["", "def", "getBBType", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_bbType", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.compare": [[128, 145], ["det1.getAbsoluteBoundingBox", "det1.getImageSize", "det2.getAbsoluteBoundingBox", "det2.getImageSize", "det1.getClassId", "det2.getClassId", "det2.classConfidenc"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getAbsoluteBoundingBox", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getImageSize", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getAbsoluteBoundingBox", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getImageSize", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getClassId", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getClassId"], ["", "@", "staticmethod", "\n", "def", "compare", "(", "det1", ",", "det2", ")", ":", "\n", "        ", "det1BB", "=", "det1", ".", "getAbsoluteBoundingBox", "(", ")", "\n", "det1ImgSize", "=", "det1", ".", "getImageSize", "(", ")", "\n", "det2BB", "=", "det2", ".", "getAbsoluteBoundingBox", "(", ")", "\n", "det2ImgSize", "=", "det2", ".", "getImageSize", "(", ")", "\n", "\n", "if", "det1", ".", "getClassId", "(", ")", "==", "det2", ".", "getClassId", "(", ")", "and", "det1", ".", "classConfidence", "==", "det2", ".", "classConfidenc", "(", ")", "and", "det1BB", "[", "0", "]", "==", "det2BB", "[", "0", "]", "and", "det1BB", "[", "1", "]", "==", "det2BB", "[", "1", "]", "and", "det1BB", "[", "2", "]", "==", "det2BB", "[", "2", "]", "and", "det1BB", "[", "3", "]", "==", "det2BB", "[", "3", "]", "and", "det1ImgSize", "[", "0", "]", "==", "det1ImgSize", "[", "0", "]", "and", "det2ImgSize", "[", "1", "]", "==", "det2ImgSize", "[", "1", "]", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.clone": [[146, 163], ["boundingBox.getAbsoluteBoundingBox", "BoundingBox.BoundingBox", "boundingBox.getImageName", "boundingBox.getClassId", "boundingBox.getCoordinatesType", "boundingBox.getImageSize", "boundingBox.getBBType", "boundingBox.getConfidence"], "methods", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getAbsoluteBoundingBox", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getImageName", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getClassId", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getCoordinatesType", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getImageSize", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getBBType", "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getConfidence"], ["", "@", "staticmethod", "\n", "def", "clone", "(", "boundingBox", ")", ":", "\n", "        ", "absBB", "=", "boundingBox", ".", "getAbsoluteBoundingBox", "(", "format", "=", "BBFormat", ".", "XYWH", ")", "\n", "# return (self._x,self._y,self._x2,self._y2)", "\n", "newBoundingBox", "=", "BoundingBox", "(", "\n", "boundingBox", ".", "getImageName", "(", ")", ",", "\n", "boundingBox", ".", "getClassId", "(", ")", ",", "\n", "absBB", "[", "0", "]", ",", "\n", "absBB", "[", "1", "]", ",", "\n", "absBB", "[", "2", "]", ",", "\n", "absBB", "[", "3", "]", ",", "\n", "typeCoordinates", "=", "boundingBox", ".", "getCoordinatesType", "(", ")", ",", "\n", "imgSize", "=", "boundingBox", ".", "getImageSize", "(", ")", ",", "\n", "bbType", "=", "boundingBox", ".", "getBBType", "(", ")", ",", "\n", "classConfidence", "=", "boundingBox", ".", "getConfidence", "(", ")", ",", "\n", "format", "=", "BBFormat", ".", "XYWH", ")", "\n", "return", "newBoundingBox", "\n", "", "", ""]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.utils.convertToRelativeValues": [[56, 71], ["None"], "function", ["None"], ["My", "=", "max", "(", "box1", "[", "3", "]", ",", "box2", "[", "3", "]", ")", "\n", "w1", "=", "box1", "[", "2", "]", "-", "box1", "[", "0", "]", "\n", "h1", "=", "box1", "[", "3", "]", "-", "box1", "[", "1", "]", "\n", "w2", "=", "box2", "[", "2", "]", "-", "box2", "[", "0", "]", "\n", "h2", "=", "box2", "[", "3", "]", "-", "box2", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "mx", "=", "min", "(", "float", "(", "box1", "[", "0", "]", "-", "box1", "[", "2", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "0", "]", "-", "box2", "[", "2", "]", "/", "2.0", ")", ")", "\n", "Mx", "=", "max", "(", "float", "(", "box1", "[", "0", "]", "+", "box1", "[", "2", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "0", "]", "+", "box2", "[", "2", "]", "/", "2.0", ")", ")", "\n", "my", "=", "min", "(", "float", "(", "box1", "[", "1", "]", "-", "box1", "[", "3", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "1", "]", "-", "box2", "[", "3", "]", "/", "2.0", ")", ")", "\n", "My", "=", "max", "(", "float", "(", "box1", "[", "1", "]", "+", "box1", "[", "3", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "1", "]", "+", "box2", "[", "3", "]", "/", "2.0", ")", ")", "\n", "w1", "=", "box1", "[", "2", "]", "\n", "h1", "=", "box1", "[", "3", "]", "\n", "w2", "=", "box2", "[", "2", "]", "\n", "h2", "=", "box2", "[", "3", "]", "\n", "", "uw", "=", "Mx", "-", "mx", "\n", "uh", "=", "My", "-", "my", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.utils.convertToAbsoluteValues": [[75, 91], ["round", "round", "round", "round", "float", "float", "float", "float", "float", "float"], "function", ["None"], ["if", "cw", "<=", "0", "or", "ch", "<=", "0", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "area1", "=", "w1", "*", "h1", "\n", "area2", "=", "w2", "*", "h2", "\n", "carea", "=", "cw", "*", "ch", "\n", "uarea", "=", "area1", "+", "area2", "-", "carea", "\n", "return", "carea", "/", "uarea", "\n", "\n", "# in order to calculate video-mAP, iou-values need to be added together separately", "\n", "", "def", "video_iou", "(", "box1", ",", "box2", ",", "x1y1x2y2", "=", "True", ")", ":", "\n", "    ", "if", "x1y1x2y2", ":", "\n", "        ", "mx", "=", "min", "(", "box1", "[", "0", "]", ",", "box2", "[", "0", "]", ")", "\n", "Mx", "=", "max", "(", "box1", "[", "2", "]", ",", "box2", "[", "2", "]", ")", "\n", "my", "=", "min", "(", "box1", "[", "1", "]", ",", "box2", "[", "1", "]", ")", "\n", "My", "=", "max", "(", "box1", "[", "3", "]", ",", "box2", "[", "3", "]", ")", "\n", "w1", "=", "box1", "[", "2", "]", "-", "box1", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.utils.add_bb_into_image": [[93, 126], ["int", "int", "int", "bb.getAbsoluteBoundingBox", "int", "int", "int", "int", "cv2.rectangle", "cv2.rectangle", "cv2.putText", "cv2.getTextSize", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.stoneMo_YOWOv2.lib.BoundingBox.BoundingBox.getAbsoluteBoundingBox"], ["w2", "=", "box2", "[", "2", "]", "-", "box2", "[", "0", "]", "\n", "h2", "=", "box2", "[", "3", "]", "-", "box2", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "mx", "=", "min", "(", "float", "(", "box1", "[", "0", "]", "-", "box1", "[", "2", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "0", "]", "-", "box2", "[", "2", "]", "/", "2.0", ")", ")", "\n", "Mx", "=", "max", "(", "float", "(", "box1", "[", "0", "]", "+", "box1", "[", "2", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "0", "]", "+", "box2", "[", "2", "]", "/", "2.0", ")", ")", "\n", "my", "=", "min", "(", "float", "(", "box1", "[", "1", "]", "-", "box1", "[", "3", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "1", "]", "-", "box2", "[", "3", "]", "/", "2.0", ")", ")", "\n", "My", "=", "max", "(", "float", "(", "box1", "[", "1", "]", "+", "box1", "[", "3", "]", "/", "2.0", ")", ",", "float", "(", "box2", "[", "1", "]", "+", "box2", "[", "3", "]", "/", "2.0", ")", ")", "\n", "w1", "=", "box1", "[", "2", "]", "\n", "h1", "=", "box1", "[", "3", "]", "\n", "w2", "=", "box2", "[", "2", "]", "\n", "h2", "=", "box2", "[", "3", "]", "\n", "", "uw", "=", "Mx", "-", "mx", "\n", "uh", "=", "My", "-", "my", "\n", "cw", "=", "w1", "+", "w2", "-", "uw", "\n", "ch", "=", "h1", "+", "h2", "-", "uh", "\n", "carea", "=", "0", "\n", "if", "cw", "<=", "0", "or", "ch", "<=", "0", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "area1", "=", "w1", "*", "h1", "\n", "area2", "=", "w2", "*", "h2", "\n", "carea", "=", "cw", "*", "ch", "\n", "uarea", "=", "area1", "+", "area2", "-", "carea", "\n", "return", "carea", ",", "uarea", "\n", "\n", "", "def", "bbox_ious", "(", "boxes1", ",", "boxes2", ",", "x1y1x2y2", "=", "True", ")", ":", "\n", "    ", "if", "x1y1x2y2", ":", "\n", "        ", "mx", "=", "torch", ".", "min", "(", "boxes1", "[", "0", "]", ",", "boxes2", "[", "0", "]", ")", "\n", "Mx", "=", "torch", ".", "max", "(", "boxes1", "[", "2", "]", ",", "boxes2", "[", "2", "]", ")", "\n", "my", "=", "torch", ".", "min", "(", "boxes1", "[", "1", "]", ",", "boxes2", "[", "1", "]", ")", "\n", "My", "=", "torch", ".", "max", "(", "boxes1", "[", "3", "]", ",", "boxes2", "[", "3", "]", ")", "\n", "w1", "=", "boxes1", "[", "2", "]", "-", "boxes1", "[", "0", "]", "\n", "h1", "=", "boxes1", "[", "3", "]", "-", "boxes1", "[", "1", "]", "\n", "w2", "=", "boxes2", "[", "2", "]", "-", "boxes2", "[", "0", "]", "\n"]]}