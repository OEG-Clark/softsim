{"home.repos.pwc.inspect_result.basiralab_GSR-Net.None.initializations.weight_variable_glorot": [[4, 11], ["numpy.sqrt", "numpy.random.uniform"], "function", ["None"], ["def", "weight_variable_glorot", "(", "output_dim", ")", ":", "\n", "\n", "    ", "input_dim", "=", "output_dim", "\n", "init_range", "=", "np", ".", "sqrt", "(", "6.0", "/", "(", "input_dim", "+", "output_dim", ")", ")", "\n", "initial", "=", "np", ".", "random", ".", "uniform", "(", "-", "init_range", ",", "init_range", ",", "(", "input_dim", ",", "output_dim", ")", ")", "\n", "\n", "return", "initial", "\n", "", ""]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.ops.GraphUnpool.__init__": [[8, 10], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.basiralab_GSR-Net.None.model.GSRNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GraphUnpool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.ops.GraphUnpool.forward": [[11, 15], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A", ",", "X", ",", "idx", ")", ":", "\n", "        ", "new_X", "=", "torch", ".", "zeros", "(", "[", "A", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", "]", ")", "\n", "new_X", "[", "idx", "]", "=", "X", "\n", "return", "A", ",", "new_X", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.ops.GraphPool.__init__": [[19, 24], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.basiralab_GSR-Net.None.model.GSRNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "GraphPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "in_dim", ",", "1", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.ops.GraphPool.forward": [[25, 38], ["ops.GraphPool.proj", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "ops.GraphPool.sigmoid", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A", ",", "X", ")", ":", "\n", "        ", "scores", "=", "self", ".", "proj", "(", "X", ")", "\n", "# scores = torch.abs(scores)", "\n", "scores", "=", "torch", ".", "squeeze", "(", "scores", ")", "\n", "scores", "=", "self", ".", "sigmoid", "(", "scores", "/", "100", ")", "\n", "num_nodes", "=", "A", ".", "shape", "[", "0", "]", "\n", "values", ",", "idx", "=", "torch", ".", "topk", "(", "scores", ",", "int", "(", "self", ".", "k", "*", "num_nodes", ")", ")", "\n", "new_X", "=", "X", "[", "idx", ",", ":", "]", "\n", "values", "=", "torch", ".", "unsqueeze", "(", "values", ",", "-", "1", ")", "\n", "new_X", "=", "torch", ".", "mul", "(", "new_X", ",", "values", ")", "\n", "A", "=", "A", "[", "idx", ",", ":", "]", "\n", "A", "=", "A", "[", ":", ",", "idx", "]", "\n", "return", "A", ",", "new_X", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.ops.GCN.__init__": [[42, 46], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.basiralab_GSR-Net.None.model.GSRNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "p", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.ops.GCN.forward": [[47, 53], ["ops.GCN.drop", "ops.GCN.proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "A", ",", "X", ")", ":", "\n", "\n", "        ", "X", "=", "self", ".", "drop", "(", "X", ")", "\n", "# X = torch.matmul(A, X)", "\n", "X", "=", "self", ".", "proj", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.ops.GraphUnet.__init__": [[56, 73], ["torch.Module.__init__", "ops.GCN", "ops.GCN", "ops.GCN", "len", "range", "ops.GraphUnet.down_gcns.append", "ops.GraphUnet.up_gcns.append", "ops.GraphUnet.pools.append", "ops.GraphUnet.unpools.append", "ops.GCN", "ops.GCN", "ops.GraphPool", "ops.GraphUnpool"], "methods", ["home.repos.pwc.inspect_result.basiralab_GSR-Net.None.model.GSRNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ks", ",", "in_dim", ",", "out_dim", ",", "dim", "=", "320", ")", ":", "\n", "        ", "super", "(", "GraphUnet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ks", "=", "ks", "\n", "\n", "self", ".", "start_gcn", "=", "GCN", "(", "in_dim", ",", "dim", ")", "\n", "self", ".", "bottom_gcn", "=", "GCN", "(", "dim", ",", "dim", ")", "\n", "self", ".", "end_gcn", "=", "GCN", "(", "2", "*", "dim", ",", "out_dim", ")", "\n", "self", ".", "down_gcns", "=", "[", "]", "\n", "self", ".", "up_gcns", "=", "[", "]", "\n", "self", ".", "pools", "=", "[", "]", "\n", "self", ".", "unpools", "=", "[", "]", "\n", "self", ".", "l_n", "=", "len", "(", "ks", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "l_n", ")", ":", "\n", "            ", "self", ".", "down_gcns", ".", "append", "(", "GCN", "(", "dim", ",", "dim", ")", ")", "\n", "self", ".", "up_gcns", ".", "append", "(", "GCN", "(", "dim", ",", "dim", ")", ")", "\n", "self", ".", "pools", ".", "append", "(", "GraphPool", "(", "ks", "[", "i", "]", ",", "dim", ")", ")", "\n", "self", ".", "unpools", ".", "append", "(", "GraphUnpool", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.ops.GraphUnet.forward": [[74, 100], ["ops.GraphUnet.start_gcn", "range", "ops.GraphUnet.bottom_gcn", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ops.GraphUnet.end_gcn", "adj_ms.append", "down_outs.append", "indices_list.append", "X.add.add.add"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "A", ",", "X", ")", ":", "\n", "        ", "adj_ms", "=", "[", "]", "\n", "indices_list", "=", "[", "]", "\n", "down_outs", "=", "[", "]", "\n", "X", "=", "self", ".", "start_gcn", "(", "A", ",", "X", ")", "\n", "start_gcn_outs", "=", "X", "\n", "org_X", "=", "X", "\n", "for", "i", "in", "range", "(", "self", ".", "l_n", ")", ":", "\n", "\n", "            ", "X", "=", "self", ".", "down_gcns", "[", "i", "]", "(", "A", ",", "X", ")", "\n", "adj_ms", ".", "append", "(", "A", ")", "\n", "down_outs", ".", "append", "(", "X", ")", "\n", "A", ",", "X", ",", "idx", "=", "self", ".", "pools", "[", "i", "]", "(", "A", ",", "X", ")", "\n", "indices_list", ".", "append", "(", "idx", ")", "\n", "", "X", "=", "self", ".", "bottom_gcn", "(", "A", ",", "X", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "l_n", ")", ":", "\n", "            ", "up_idx", "=", "self", ".", "l_n", "-", "i", "-", "1", "\n", "\n", "A", ",", "idx", "=", "adj_ms", "[", "up_idx", "]", ",", "indices_list", "[", "up_idx", "]", "\n", "A", ",", "X", "=", "self", ".", "unpools", "[", "i", "]", "(", "A", ",", "X", ",", "idx", ")", "\n", "X", "=", "self", ".", "up_gcns", "[", "i", "]", "(", "A", ",", "X", ")", "\n", "X", "=", "X", ".", "add", "(", "down_outs", "[", "up_idx", "]", ")", "\n", "", "X", "=", "torch", ".", "cat", "(", "[", "X", ",", "org_X", "]", ",", "1", ")", "\n", "X", "=", "self", ".", "end_gcn", "(", "A", ",", "X", ")", "\n", "\n", "return", "X", ",", "start_gcn_outs", "", "", "", ""]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.train.train": [[10, 48], ["range", "zip", "print", "all_epochs_loss.append", "model.train", "optimizer.zero_grad", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "model", "preprocessing.unpad", "preprocessing.pad_HR_adj", "torch.symeig", "torch.symeig", "criterion", "loss.backward", "optimizer.step", "epoch_loss.append", "epoch_error.append", "numpy.mean", "numpy.mean", "criterion", "loss.item", "criterion.item", "numpy.mean", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "criterion", "criterion"], "function", ["home.repos.pwc.inspect_result.basiralab_GSR-Net.None.train.train", "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.unpad", "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.pad_HR_adj"], ["def", "train", "(", "model", ",", "optimizer", ",", "subjects_adj", ",", "subjects_labels", ",", "args", ")", ":", "\n", "\n", "  ", "i", "=", "0", "\n", "all_epochs_loss", "=", "[", "]", "\n", "no_epochs", "=", "args", ".", "epochs", "\n", "\n", "for", "epoch", "in", "range", "(", "no_epochs", ")", ":", "\n", "\n", "      ", "epoch_loss", "=", "[", "]", "\n", "epoch_error", "=", "[", "]", "\n", "\n", "for", "lr", ",", "hr", "in", "zip", "(", "subjects_adj", ",", "subjects_labels", ")", ":", "\n", "\n", "          ", "model", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "lr", "=", "torch", ".", "from_numpy", "(", "lr", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "hr", "=", "torch", ".", "from_numpy", "(", "hr", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "model_outputs", ",", "net_outs", ",", "start_gcn_outs", ",", "layer_outs", "=", "model", "(", "lr", ")", "\n", "model_outputs", "=", "unpad", "(", "model_outputs", ",", "args", ".", "padding", ")", "\n", "\n", "padded_hr", "=", "pad_HR_adj", "(", "hr", ",", "args", ".", "padding", ")", "\n", "eig_val_hr", ",", "U_hr", "=", "torch", ".", "symeig", "(", "padded_hr", ",", "eigenvectors", "=", "True", ",", "upper", "=", "True", ")", "\n", "\n", "loss", "=", "args", ".", "lmbda", "*", "criterion", "(", "net_outs", ",", "start_gcn_outs", ")", "+", "criterion", "(", "model", ".", "layer", ".", "weights", ",", "U_hr", ")", "+", "criterion", "(", "model_outputs", ",", "hr", ")", "\n", "\n", "error", "=", "criterion", "(", "model_outputs", ",", "hr", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "epoch_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "epoch_error", ".", "append", "(", "error", ".", "item", "(", ")", ")", "\n", "\n", "", "i", "+=", "1", "\n", "print", "(", "\"Epoch: \"", ",", "i", ",", "\"Loss: \"", ",", "np", ".", "mean", "(", "epoch_loss", ")", ",", "\"Error: \"", ",", "np", ".", "mean", "(", "epoch_error", ")", "*", "100", ",", "\"%\"", ")", "\n", "all_epochs_loss", ".", "append", "(", "np", ".", "mean", "(", "epoch_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.train.test": [[53, 94], ["zip", "print", "numpy.mean", "numpy.any", "numpy.any", "torch.from_numpy().type", "torch.from_numpy().type", "numpy.fill_diagonal", "torch.from_numpy().type", "torch.from_numpy().type", "model", "preprocessing.unpad", "preds_list.append", "criterion", "g_t.append", "print", "test_error.append", "preprocessing.unpad.flatten().detach().numpy", "torch.from_numpy().type.flatten", "criterion.item", "criterion.item", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "preprocessing.unpad.flatten().detach", "preprocessing.unpad.flatten"], "function", ["home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.unpad"], ["", "", "def", "test", "(", "model", ",", "test_adj", ",", "test_labels", ",", "args", ")", ":", "\n", "\n", "  ", "test_error", "=", "[", "]", "\n", "preds_list", "=", "[", "]", "\n", "g_t", "=", "[", "]", "\n", "\n", "i", "=", "0", "\n", "# TESTING", "\n", "for", "lr", ",", "hr", "in", "zip", "(", "test_adj", ",", "test_labels", ")", ":", "\n", "\n", "    ", "all_zeros_lr", "=", "not", "np", ".", "any", "(", "lr", ")", "\n", "all_zeros_hr", "=", "not", "np", ".", "any", "(", "hr", ")", "\n", "\n", "if", "all_zeros_lr", "==", "False", "and", "all_zeros_hr", "==", "False", ":", "#choose representative subject", "\n", "      ", "lr", "=", "torch", ".", "from_numpy", "(", "lr", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "np", ".", "fill_diagonal", "(", "hr", ",", "1", ")", "\n", "hr", "=", "torch", ".", "from_numpy", "(", "hr", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "preds", ",", "a", ",", "b", ",", "c", "=", "model", "(", "lr", ")", "\n", "preds", "=", "unpad", "(", "preds", ",", "args", ".", "padding", ")", "\n", "\n", "#plot residuals", "\n", "#   if i==0:", "\n", "#     print (\"Hr\", hr)     ", "\n", "#     print(\"Preds  \", preds)", "\n", "#     plt.imshow(hr, origin = 'upper',  extent = [-0.5, 268-0.5, 268-0.5, -0.5])", "\n", "#     plt.show(block=False)", "\n", "#     plt.imshow(preds.detach(), origin = 'upper',  extent = [-0.5, 268-0.5, 268-0.5, -0.5])", "\n", "#     plt.show(block=False)", "\n", "#     plt.imshow(hr - preds.detach(), origin = 'upper',  extent = [-0.5, 268-0.5, 268-0.5, -0.5])", "\n", "#     plt.show(block=False)", "\n", "\n", "preds_list", ".", "append", "(", "preds", ".", "flatten", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "error", "=", "criterion", "(", "preds", ",", "hr", ")", "\n", "g_t", ".", "append", "(", "hr", ".", "flatten", "(", ")", ")", "\n", "print", "(", "error", ".", "item", "(", ")", ")", "\n", "test_error", ".", "append", "(", "error", ".", "item", "(", ")", ")", "\n", "\n", "i", "+=", "1", "\n", "\n", "", "", "print", "(", "\"Test error MSE: \"", ",", "np", ".", "mean", "(", "test_error", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.layers.GSRLayer.__init__": [[13, 18], ["torch.Module.__init__", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "initializations.weight_variable_glorot"], "methods", ["home.repos.pwc.inspect_result.basiralab_GSR-Net.None.model.GSRNet.__init__", "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.initializations.weight_variable_glorot"], ["  ", "def", "__init__", "(", "self", ",", "hr_dim", ")", ":", "\n", "    ", "super", "(", "GSRLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "weights", "=", "torch", ".", "from_numpy", "(", "weight_variable_glorot", "(", "hr_dim", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "self", ".", "weights", "=", "torch", ".", "nn", ".", "Parameter", "(", "data", "=", "self", ".", "weights", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.layers.GSRLayer.forward": [[19, 39], ["torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.symeig", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs.fill_diagonal_", "torch.abs.fill_diagonal_", "torch.abs.fill_diagonal_", "preprocessing.normalize_adj_torch", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "torch.t", "preprocessing.normalize_adj_torch.t", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.mm.t", "torch.mm.t", "torch.mm.t"], "methods", ["home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.normalize_adj_torch"], ["", "def", "forward", "(", "self", ",", "A", ",", "X", ")", ":", "\n", "    ", "lr", "=", "A", "\n", "lr_dim", "=", "lr", ".", "shape", "[", "0", "]", "\n", "f", "=", "X", "\n", "eig_val_lr", ",", "U_lr", "=", "torch", ".", "symeig", "(", "lr", ",", "eigenvectors", "=", "True", ",", "upper", "=", "True", ")", "\n", "# U_lr = torch.abs(U_lr)", "\n", "eye_mat", "=", "torch", ".", "eye", "(", "lr_dim", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "s_d", "=", "torch", ".", "cat", "(", "(", "eye_mat", ",", "eye_mat", ")", ",", "0", ")", "\n", "\n", "a", "=", "torch", ".", "matmul", "(", "self", ".", "weights", ",", "s_d", ")", "\n", "b", "=", "torch", ".", "matmul", "(", "a", ",", "torch", ".", "t", "(", "U_lr", ")", ")", "\n", "f_d", "=", "torch", ".", "matmul", "(", "b", ",", "f", ")", "\n", "f_d", "=", "torch", ".", "abs", "(", "f_d", ")", "\n", "self", ".", "f_d", "=", "f_d", ".", "fill_diagonal_", "(", "1", ")", "\n", "adj", "=", "normalize_adj_torch", "(", "self", ".", "f_d", ")", "\n", "X", "=", "torch", ".", "mm", "(", "adj", ",", "adj", ".", "t", "(", ")", ")", "\n", "X", "=", "(", "X", "+", "X", ".", "t", "(", ")", ")", "/", "2", "\n", "idx", "=", "torch", ".", "eye", "(", "320", ",", "dtype", "=", "bool", ")", "\n", "X", "[", "idx", "]", "=", "1", "\n", "return", "adj", ",", "torch", ".", "abs", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.layers.GraphConvolution.__init__": [[47, 55], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "layers.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.basiralab_GSR-Net.None.model.GSRNet.__init__", "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.layers.GraphConvolution.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "dropout", "=", "0.", ",", "act", "=", "F", ".", "relu", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "act", "=", "act", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.layers.GraphConvolution.reset_parameters": [[56, 58], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.layers.GraphConvolution.forward": [[59, 65], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "adj", ")", ":", "\n", "# input = F.dropout(input, self.dropout, self.training)", "\n", "        ", "support", "=", "torch", ".", "mm", "(", "input", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "mm", "(", "adj", ",", "support", ")", "\n", "# output = self.act(output)", "\n", "return", "output", "", "", "", ""]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.pad_HR_adj": [[9, 14], ["numpy.pad", "numpy.fill_diagonal", "torch.from_numpy().type", "torch.from_numpy"], "function", ["None"], ["def", "pad_HR_adj", "(", "label", ",", "split", ")", ":", "\n", "\n", "  ", "label", "=", "np", ".", "pad", "(", "label", ",", "(", "(", "split", ",", "split", ")", ",", "(", "split", ",", "split", ")", ")", ",", "mode", "=", "\"constant\"", ")", "\n", "np", ".", "fill_diagonal", "(", "label", ",", "1", ")", "\n", "return", "torch", ".", "from_numpy", "(", "label", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.normalize_adj_torch": [[15, 25], ["torch.matmul.sum", "torch.pow().flatten", "torch.diag", "torch.matmul", "torch.transpose", "torch.matmul", "torch.pow", "torch.isinf"], "function", ["None"], ["", "def", "normalize_adj_torch", "(", "mx", ")", ":", "\n", "# mx = mx.to_dense()", "\n", "    ", "rowsum", "=", "mx", ".", "sum", "(", "1", ")", "\n", "r_inv_sqrt", "=", "torch", ".", "pow", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "r_inv_sqrt", "[", "torch", ".", "isinf", "(", "r_inv_sqrt", ")", "]", "=", "0.", "\n", "r_mat_inv_sqrt", "=", "torch", ".", "diag", "(", "r_inv_sqrt", ")", "\n", "mx", "=", "torch", ".", "matmul", "(", "mx", ",", "r_mat_inv_sqrt", ")", "\n", "mx", "=", "torch", ".", "transpose", "(", "mx", ",", "0", ",", "1", ")", "\n", "mx", "=", "torch", ".", "matmul", "(", "mx", ",", "r_mat_inv_sqrt", ")", "\n", "return", "mx", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.unpad": [[26, 33], ["None"], "function", ["None"], ["", "def", "unpad", "(", "data", ",", "split", ")", ":", "\n", "\n", "  ", "idx_0", "=", "data", ".", "shape", "[", "0", "]", "-", "split", "\n", "idx_1", "=", "data", ".", "shape", "[", "1", "]", "-", "split", "\n", "# print(idx_0,idx_1)", "\n", "train", "=", "data", "[", "split", ":", "idx_0", ",", "split", ":", "idx_1", "]", "\n", "return", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.extract_data": [[35, 60], ["os.path.join", "scipy.io.loadmat", "numpy.nanmean", "numpy.where", "numpy.absolute", "str", "os.path.join", "numpy.isnan", "numpy.reshape", "numpy.reshape", "numpy.concatenate"], "function", ["None"], ["", "def", "extract_data", "(", "subject", ",", "session_str", ",", "parcellation_str", ",", "subjects_roi", ")", ":", "\n", "  ", "folder_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "subject", ")", ",", "session_str", ",", "parcellation_str", ")", "\n", "roi_data", "=", "scipy", ".", "io", ".", "loadmat", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "roi_str", ")", ")", "\n", "roi", "=", "roi_data", "[", "'r'", "]", "\n", "\n", "#Replacing NaN values", "\n", "col_mean", "=", "np", ".", "nanmean", "(", "roi", ",", "axis", "=", "0", ")", "\n", "inds", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "roi", ")", ")", "\n", "roi", "[", "inds", "]", "=", "1", "\n", "\n", "#Taking the absolute values of the matrix", "\n", "roi", "=", "np", ".", "absolute", "(", "roi", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "#   roi = get_tensor(np.array(roi, dtype=np.float32))", "\n", "\n", "if", "parcellation_str", "==", "'shen_268'", ":", "\n", "    ", "roi", "=", "np", ".", "reshape", "(", "roi", ",", "(", "1", ",", "268", ",", "268", ")", ")", "\n", "", "else", ":", "\n", "    ", "roi", "=", "np", ".", "reshape", "(", "roi", ",", "(", "1", ",", "160", ",", "160", ")", ")", "\n", "\n", "", "if", "subject", "==", "25629", ":", "\n", "    ", "subjects_roi", "=", "roi", "\n", "", "else", ":", "\n", "    ", "subjects_roi", "=", "np", ".", "concatenate", "(", "(", "subjects_roi", ",", "roi", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "subjects_roi", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.load_data": [[61, 76], ["numpy.zeros", "numpy.zeros", "range", "os.path.join", "str", "os.listdir", "preprocessing.extract_data", "preprocessing.extract_data"], "function", ["home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.extract_data", "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.extract_data"], ["", "def", "load_data", "(", "start_value", ",", "end_value", ")", ":", "\n", "\n", "  ", "subjects_label", "=", "np", ".", "zeros", "(", "(", "1", ",", "268", ",", "268", ")", ")", "\n", "subjects_adj", "=", "np", ".", "zeros", "(", "(", "1", ",", "160", ",", "160", ")", ")", "\n", "#25840", "\n", "for", "subject", "in", "range", "(", "start_value", ",", "end_value", ")", ":", "\n", "    ", "subject_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "str", "(", "subject", ")", ")", "\n", "\n", "if", "'session_1'", "in", "os", ".", "listdir", "(", "subject_path", ")", ":", "\n", "\n", "       ", "subjects_label", "=", "extract_data", "(", "subject", ",", "'session_1'", ",", "'shen_268'", ",", "subjects_label", ")", "\n", "subjects_adj", "=", "extract_data", "(", "subject", ",", "'session_1'", ",", "'Dosenbach_160'", ",", "subjects_adj", ")", "\n", "\n", "#   for subject in range(25840,)", "\n", "", "", "return", "subjects_adj", ",", "subjects_label", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.data": [[77, 84], ["preprocessing.load_data", "preprocessing.load_data", "preprocessing.load_data", "numpy.concatenate", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.load_data", "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.load_data", "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.load_data"], ["", "def", "data", "(", ")", ":", "\n", "  ", "subjects_adj", ",", "subjects_labels", "=", "load_data", "(", "25629", ",", "25830", ")", "\n", "test_adj_1", ",", "test_labels_1", "=", "load_data", "(", "25831", ",", "25863", ")", "\n", "test_adj_2", ",", "test_labels_2", "=", "load_data", "(", "30701", ",", "30757", ")", "\n", "test_adj", "=", "np", ".", "concatenate", "(", "(", "test_adj_1", ",", "test_adj_2", ")", ",", "axis", "=", "0", ")", "\n", "test_labels", "=", "np", ".", "concatenate", "(", "(", "test_labels_1", ",", "test_labels_2", ")", ",", "axis", "=", "0", ")", "\n", "return", "subjects_adj", ",", "subjects_labels", ",", "test_adj", ",", "test_labels", "", "", ""]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.model.GSRNet.__init__": [[10, 20], ["torch.Module.__init__", "layers.GSRLayer", "ops.GraphUnet", "layers.GraphConvolution", "layers.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.basiralab_GSR-Net.None.model.GSRNet.__init__"], ["  ", "def", "__init__", "(", "self", ",", "ks", ",", "args", ")", ":", "\n", "    ", "super", "(", "GSRNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "lr_dim", "=", "args", ".", "lr_dim", "\n", "self", ".", "hr_dim", "=", "args", ".", "hr_dim", "\n", "self", ".", "hidden_dim", "=", "args", ".", "hidden_dim", "\n", "self", ".", "layer", "=", "GSRLayer", "(", "self", ".", "hr_dim", ")", "\n", "self", ".", "net", "=", "GraphUnet", "(", "ks", ",", "self", ".", "lr_dim", ",", "self", ".", "hr_dim", ")", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "self", ".", "hr_dim", ",", "self", ".", "hidden_dim", ",", "0", ",", "act", "=", "F", ".", "relu", ")", "\n", "self", ".", "gc2", "=", "GraphConvolution", "(", "self", ".", "hidden_dim", ",", "self", ".", "hr_dim", ",", "0", ",", "act", "=", "F", ".", "relu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.basiralab_GSR-Net.None.model.GSRNet.forward": [[21, 39], ["torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "torch.eye().type", "preprocessing.normalize_adj_torch().type", "model.GSRNet.net", "model.GSRNet.layer", "model.GSRNet.gc1", "model.GSRNet.gc2", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "preprocessing.normalize_adj_torch", "z.t"], "methods", ["home.repos.pwc.inspect_result.basiralab_GSR-Net.None.preprocessing.normalize_adj_torch"], ["", "def", "forward", "(", "self", ",", "lr", ")", ":", "\n", "\n", "    ", "I", "=", "torch", ".", "eye", "(", "self", ".", "lr_dim", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "A", "=", "normalize_adj_torch", "(", "lr", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "self", ".", "net_outs", ",", "self", ".", "start_gcn_outs", "=", "self", ".", "net", "(", "A", ",", "I", ")", "\n", "\n", "self", ".", "outputs", ",", "self", ".", "Z", "=", "self", ".", "layer", "(", "A", ",", "self", ".", "net_outs", ")", "\n", "\n", "self", ".", "hidden1", "=", "self", ".", "gc1", "(", "self", ".", "Z", ",", "self", ".", "outputs", ")", "\n", "self", ".", "hidden2", "=", "self", ".", "gc2", "(", "self", ".", "hidden1", ",", "self", ".", "outputs", ")", "\n", "\n", "z", "=", "self", ".", "hidden2", "\n", "z", "=", "(", "z", "+", "z", ".", "t", "(", ")", ")", "/", "2", "\n", "idx", "=", "torch", ".", "eye", "(", "self", ".", "hr_dim", ",", "dtype", "=", "bool", ")", "\n", "z", "[", "idx", "]", "=", "1", "\n", "\n", "return", "torch", ".", "abs", "(", "z", ")", ",", "self", ".", "net_outs", ",", "self", ".", "start_gcn_outs", ",", "self", ".", "outputs", "", "", "", ""]]}