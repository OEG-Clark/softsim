{"home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.BaseNetwork.__init__": [[26, 28], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.BaseNetwork.init_weights": [[29, 56], ["torchvision.models.BaseNetwork.apply", "hasattr", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "classname.find", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "classname.find", "classname.find", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "        ", "'''\n        initialize network's weights\n        init_type: normal | xavier | kaiming | orthogonal\n        https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix/blob/9451e70673400885567d08a9e97ade2524c700d0/models/networks.py#L39\n        '''", "\n", "\n", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "                ", "if", "init_type", "==", "'normal'", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "self", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.InpaintGenerator.__init__": [[59, 110], ["torchvision.models.BaseNetwork.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torchvision.models.ResnetBlock", "blocks.append", "torchvision.models.ResnetBlock", "blocks1.append", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torchvision.models.InpaintGenerator.init_weights"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "residual_blocks", "=", "8", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "InpaintGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c64", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "4", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "d128", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "d256", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "256", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "blocks", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "block", "=", "ResnetBlock", "(", "256", ",", "2", ")", "\n", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "", "blocks1", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "block1", "=", "ResnetBlock", "(", "256", ",", "2", ")", "\n", "blocks1", ".", "append", "(", "block1", ")", "\n", "\n", "", "self", ".", "middle1", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "self", ".", "middle2", "=", "nn", ".", "Sequential", "(", "*", "blocks1", ")", "\n", "\n", "self", ".", "u128", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "u64", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ")", "\n", "\n", "#      self.attention1 = GridAttentionBlock2D(256,256)", "\n", "#      self.attention2 = GridAttentionBlock2D(128,256)", "\n", "#      self.attention3 = GridAttentionBlock2D(64,256)", "\n", "\n", "#      self.skip1 = nn.Sequential(nn.Conv2d(64,128,1,2,padding = 0), nn.BatchNorm2d(128))", "\n", "#      self.skip2 = nn.Sequential(nn.Conv2d(128,256,1,2,padding = 0), nn.BatchNorm2d(256))", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.InpaintGenerator.forward": [[111, 137], ["torchvision.models.InpaintGenerator.c64", "torchvision.models.InpaintGenerator.d128", "torchvision.models.InpaintGenerator.d256", "torchvision.models.InpaintGenerator.middle1", "torchvision.models.InpaintGenerator.middle2", "torchvision.models.InpaintGenerator.u128", "torchvision.models.InpaintGenerator.u64", "torchvision.models.InpaintGenerator.out", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "c64", "(", "x", ")", "\n", "#      skip = self.skip1(x)", "\n", "#      skip = self.skip2(skip)", "\n", "\n", "x", "=", "self", ".", "d128", "(", "x", ")", "\n", "x", "=", "self", ".", "d256", "(", "x", ")", "\n", "#      x = x + skip", "\n", "#      gate1 = x", "\n", "\n", "x", "=", "self", ".", "middle1", "(", "x", ")", "\n", "#      gate2 = x", "\n", "\n", "x", "=", "self", ".", "middle2", "(", "x", ")", "\n", "#      gate3 = x", "\n", "\n", "#      x = x + self.attention1(x, gate1)", "\n", "x", "=", "self", ".", "u128", "(", "x", ")", "\n", "#      x = x + self.attention2(x, gate2)", "\n", "x", "=", "self", ".", "u64", "(", "x", ")", "\n", "#      x = x + self.attention3(x, gate3)", "\n", "x", "=", "self", ".", "out", "(", "x", ")", "\n", "\n", "x", "=", "(", "torch", ".", "tanh", "(", "x", ")", "+", "1", ")", "/", "2", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.EdgeGenerator.__init__": [[140, 193], ["torchvision.models.BaseNetwork.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torchvision.models.ResnetBlock", "blocks.append", "torchvision.models.ResnetBlock", "blocks1.append", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torchvision.models.EdgeGenerator.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "use_spectral_norm", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "EdgeGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c64", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "\n", "self", ".", "d128", "=", "nn", ".", "Sequential", "(", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "d256", "=", "nn", ".", "Sequential", "(", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "256", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "#      self.attention1 = GridAttentionBlock2D(256,256)", "\n", "#      self.attention2 = GridAttentionBlock2D(128,256)", "\n", "#      self.attention3 = GridAttentionBlock2D(64,256)", "\n", "\n", "#      self.skip1 = nn.Sequential(nn.Conv2d(64,128,1,2,padding = 0), nn.BatchNorm2d(128))", "\n", "#      self.skip2 = nn.Sequential(nn.Conv2d(128,256,1,2,padding = 0), nn.BatchNorm2d(256))", "\n", "\n", "blocks", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "block", "=", "ResnetBlock", "(", "256", ",", "2", ",", "use_spectral_norm", "=", "use_spectral_norm", ")", "\n", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "", "self", ".", "middle1", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "blocks1", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "          ", "block1", "=", "ResnetBlock", "(", "256", ",", "2", ",", "use_spectral_norm", "=", "use_spectral_norm", ")", "\n", "blocks1", ".", "append", "(", "block1", ")", "\n", "\n", "", "self", ".", "middle2", "=", "nn", ".", "Sequential", "(", "*", "blocks1", ")", "\n", "\n", "self", ".", "u128", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "u64", "=", "nn", ".", "Sequential", "(", "spectral_norm", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.EdgeGenerator.forward": [[194, 222], ["torchvision.models.EdgeGenerator.c64", "torchvision.models.EdgeGenerator.d128", "torchvision.models.EdgeGenerator.d256", "torchvision.models.EdgeGenerator.middle1", "torchvision.models.EdgeGenerator.middle2", "torchvision.models.EdgeGenerator.u128", "torchvision.models.EdgeGenerator.u64", "torchvision.models.EdgeGenerator.out", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "c64", "(", "x", ")", "\n", "#      skip = self.skip1(x)", "\n", "#      skip = self.skip2(skip)", "\n", "\n", "x", "=", "self", ".", "d128", "(", "x", ")", "\n", "x", "=", "self", ".", "d256", "(", "x", ")", "\n", "#      x = x + skip", "\n", "#      gate1 = x", "\n", "\n", "x", "=", "self", ".", "middle1", "(", "x", ")", "\n", "#      gate2 = x", "\n", "\n", "x", "=", "self", ".", "middle2", "(", "x", ")", "\n", "#      gate3 = x", "\n", "\n", "#      x = x + self.attention1(x, gate1)", "\n", "x", "=", "self", ".", "u128", "(", "x", ")", "\n", "\n", "#      x = x + self.attention2(x, gate2)", "\n", "x", "=", "self", ".", "u64", "(", "x", ")", "\n", "\n", "#      x = x + self.attention3(x, gate3)", "\n", "x", "=", "self", ".", "out", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.Discriminator.__init__": [[225, 255], ["torchvision.models.BaseNetwork.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.spectral_norm", "torchvision.models.Discriminator.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "use_sigmoid", "=", "True", ",", "use_spectral_norm", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.Discriminator.forward": [[256, 268], ["torchvision.models.Discriminator.conv1", "torchvision.models.Discriminator.conv2", "torchvision.models.Discriminator.conv3", "torchvision.models.Discriminator.conv4", "torchvision.models.Discriminator.conv5", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "conv2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "conv3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "conv4", "(", "conv3", ")", "\n", "conv5", "=", "self", ".", "conv5", "(", "conv4", ")", "\n", "\n", "outputs", "=", "conv5", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "outputs", "=", "torch", ".", "sigmoid", "(", "conv5", ")", "\n", "\n", "", "return", "outputs", ",", "[", "conv1", ",", "conv2", ",", "conv3", ",", "conv4", ",", "conv5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.ResnetBlock.__init__": [[271, 282], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "models.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "dilation", "=", "1", ",", "use_spectral_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "dilation", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "dim", ",", "out_channels", "=", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "dim", ",", "out_channels", "=", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "track_running_stats", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.ResnetBlock.forward": [[284, 291], ["torchvision.models.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "\n", "# Remove ReLU at the end of the residual block", "\n", "# http://torch.ch/blog/2016/02/04/resnets.html", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.final_generator.__init__": [[301, 353], ["torchvision.models.BaseNetwork.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "attention.GridAttentionBlock2D", "attention.GridAttentionBlock2D", "attention.GridAttentionBlock2D", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torchvision.models.ResnetBlock", "blocks.append", "torchvision.models.ResnetBlock", "blocks1.append", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torchvision.models.final_generator.init_weights"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "residual_blocks", "=", "8", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "final_generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c64", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "6", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "d128", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "d256", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "256", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "blocks", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "block", "=", "ResnetBlock", "(", "256", ",", "2", ")", "\n", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "", "blocks1", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "block1", "=", "ResnetBlock", "(", "256", ",", "2", ")", "\n", "blocks1", ".", "append", "(", "block1", ")", "\n", "\n", "", "self", ".", "middle1", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "self", ".", "middle2", "=", "nn", ".", "Sequential", "(", "*", "blocks1", ")", "\n", "\n", "self", ".", "u128", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "u64", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ")", "\n", "\n", "\n", "self", ".", "attention1", "=", "GridAttentionBlock2D", "(", "256", ",", "256", ")", "\n", "self", ".", "attention2", "=", "GridAttentionBlock2D", "(", "128", ",", "256", ")", "\n", "self", ".", "attention3", "=", "GridAttentionBlock2D", "(", "64", ",", "256", ")", "\n", "\n", "self", ".", "skip1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "1", ",", "2", ",", "padding", "=", "0", ")", ",", "nn", ".", "BatchNorm2d", "(", "128", ")", ")", "\n", "self", ".", "skip2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "1", ",", "2", ",", "padding", "=", "0", ")", ",", "nn", ".", "BatchNorm2d", "(", "256", ")", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.final_generator.forward": [[354, 380], ["torchvision.models.final_generator.c64", "torchvision.models.final_generator.skip1", "torchvision.models.final_generator.skip2", "torchvision.models.final_generator.d128", "torchvision.models.final_generator.d256", "torchvision.models.final_generator.middle1", "torchvision.models.final_generator.middle2", "torchvision.models.final_generator.u128", "torchvision.models.final_generator.u64", "torchvision.models.final_generator.out", "torchvision.models.final_generator.attention1", "torchvision.models.final_generator.attention2", "torchvision.models.final_generator.attention3", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "c64", "(", "x", ")", "\n", "skip", "=", "self", ".", "skip1", "(", "x", ")", "\n", "skip", "=", "self", ".", "skip2", "(", "skip", ")", "\n", "\n", "x", "=", "self", ".", "d128", "(", "x", ")", "\n", "x", "=", "self", ".", "d256", "(", "x", ")", "\n", "x", "=", "x", "+", "skip", "\n", "gate1", "=", "x", "\n", "\n", "x", "=", "self", ".", "middle1", "(", "x", ")", "\n", "gate2", "=", "x", "\n", "\n", "x", "=", "self", ".", "middle2", "(", "x", ")", "\n", "gate3", "=", "x", "\n", "\n", "x", "=", "x", "+", "self", ".", "attention1", "(", "x", ",", "gate1", ")", "\n", "x", "=", "self", ".", "u128", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "attention2", "(", "x", ",", "gate2", ")", "\n", "x", "=", "self", ".", "u64", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "attention3", "(", "x", ",", "gate3", ")", "\n", "x", "=", "self", ".", "out", "(", "x", ")", "\n", "\n", "x", "=", "(", "torch", ".", "tanh", "(", "x", ")", "+", "1", ")", "/", "2", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.final_discriminator.__init__": [[384, 414], ["torchvision.models.BaseNetwork.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "models.spectral_norm", "torchvision.models.final_discriminator.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "use_sigmoid", "=", "True", ",", "use_spectral_norm", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "final_discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.final_discriminator.forward": [[415, 427], ["torchvision.models.final_discriminator.conv1", "torchvision.models.final_discriminator.conv2", "torchvision.models.final_discriminator.conv3", "torchvision.models.final_discriminator.conv4", "torchvision.models.final_discriminator.conv5", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "conv2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "conv3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "conv4", "(", "conv3", ")", "\n", "conv5", "=", "self", ".", "conv5", "(", "conv4", ")", "\n", "\n", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "outputs", "=", "torch", ".", "sigmoid", "(", "conv5", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.VGG19.__init__": [[433, 508], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "torchvision.models.VGG19.parameters", "torchvision.models.vgg19", "torchvision.models.vgg19", "torchvision.models.vgg19", "torchvision.models.vgg19", "torchvision.models.VGG19.relu1_1.add_module", "torchvision.models.VGG19.relu1_2.add_module", "torchvision.models.VGG19.relu2_1.add_module", "torchvision.models.VGG19.relu2_2.add_module", "torchvision.models.VGG19.relu3_1.add_module", "torchvision.models.VGG19.relu3_2.add_module", "torchvision.models.VGG19.relu3_3.add_module", "torchvision.models.VGG19.relu3_4.add_module", "torchvision.models.VGG19.relu4_1.add_module", "torchvision.models.VGG19.relu4_2.add_module", "torchvision.models.VGG19.relu4_3.add_module", "torchvision.models.VGG19.relu4_4.add_module", "torchvision.models.VGG19.relu5_1.add_module", "torchvision.models.VGG19.relu5_2.add_module", "torchvision.models.VGG19.relu5_3.add_module", "torchvision.models.VGG19.relu5_4.add_module", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "relu1_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu1_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu2_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu2_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu3_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu4_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu5_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "relu1_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "2", ",", "4", ")", ":", "\n", "            ", "self", ".", "relu1_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "4", ",", "7", ")", ":", "\n", "            ", "self", ".", "relu2_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "7", ",", "9", ")", ":", "\n", "            ", "self", ".", "relu2_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "9", ",", "12", ")", ":", "\n", "            ", "self", ".", "relu3_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "12", ",", "14", ")", ":", "\n", "            ", "self", ".", "relu3_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "14", ",", "16", ")", ":", "\n", "            ", "self", ".", "relu3_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "16", ",", "18", ")", ":", "\n", "            ", "self", ".", "relu3_4", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "18", ",", "21", ")", ":", "\n", "            ", "self", ".", "relu4_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "21", ",", "23", ")", ":", "\n", "            ", "self", ".", "relu4_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "23", ",", "25", ")", ":", "\n", "            ", "self", ".", "relu4_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "25", ",", "27", ")", ":", "\n", "            ", "self", ".", "relu4_4", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "27", ",", "30", ")", ":", "\n", "            ", "self", ".", "relu5_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "30", ",", "32", ")", ":", "\n", "            ", "self", ".", "relu5_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "32", ",", "34", ")", ":", "\n", "            ", "self", ".", "relu5_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "34", ",", "36", ")", ":", "\n", "            ", "self", ".", "relu5_4", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "# don't need the gradients, just want the features", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.VGG19.forward": [[509, 554], ["torchvision.models.VGG19.relu1_1", "torchvision.models.VGG19.relu1_2", "torchvision.models.VGG19.relu2_1", "torchvision.models.VGG19.relu2_2", "torchvision.models.VGG19.relu3_1", "torchvision.models.VGG19.relu3_2", "torchvision.models.VGG19.relu3_3", "torchvision.models.VGG19.relu3_4", "torchvision.models.VGG19.relu4_1", "torchvision.models.VGG19.relu4_2", "torchvision.models.VGG19.relu4_3", "torchvision.models.VGG19.relu4_4", "torchvision.models.VGG19.relu5_1", "torchvision.models.VGG19.relu5_2", "torchvision.models.VGG19.relu5_3", "torchvision.models.VGG19.relu5_4"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "relu1_1", "=", "self", ".", "relu1_1", "(", "x", ")", "\n", "relu1_2", "=", "self", ".", "relu1_2", "(", "relu1_1", ")", "\n", "\n", "relu2_1", "=", "self", ".", "relu2_1", "(", "relu1_2", ")", "\n", "relu2_2", "=", "self", ".", "relu2_2", "(", "relu2_1", ")", "\n", "\n", "relu3_1", "=", "self", ".", "relu3_1", "(", "relu2_2", ")", "\n", "relu3_2", "=", "self", ".", "relu3_2", "(", "relu3_1", ")", "\n", "relu3_3", "=", "self", ".", "relu3_3", "(", "relu3_2", ")", "\n", "relu3_4", "=", "self", ".", "relu3_4", "(", "relu3_3", ")", "\n", "\n", "relu4_1", "=", "self", ".", "relu4_1", "(", "relu3_4", ")", "\n", "relu4_2", "=", "self", ".", "relu4_2", "(", "relu4_1", ")", "\n", "relu4_3", "=", "self", ".", "relu4_3", "(", "relu4_2", ")", "\n", "relu4_4", "=", "self", ".", "relu4_4", "(", "relu4_3", ")", "\n", "\n", "relu5_1", "=", "self", ".", "relu5_1", "(", "relu4_4", ")", "\n", "relu5_2", "=", "self", ".", "relu5_2", "(", "relu5_1", ")", "\n", "relu5_3", "=", "self", ".", "relu5_3", "(", "relu5_2", ")", "\n", "relu5_4", "=", "self", ".", "relu5_4", "(", "relu5_3", ")", "\n", "\n", "out", "=", "{", "\n", "'relu1_1'", ":", "relu1_1", ",", "\n", "'relu1_2'", ":", "relu1_2", ",", "\n", "\n", "'relu2_1'", ":", "relu2_1", ",", "\n", "'relu2_2'", ":", "relu2_2", ",", "\n", "\n", "'relu3_1'", ":", "relu3_1", ",", "\n", "'relu3_2'", ":", "relu3_2", ",", "\n", "'relu3_3'", ":", "relu3_3", ",", "\n", "'relu3_4'", ":", "relu3_4", ",", "\n", "\n", "'relu4_1'", ":", "relu4_1", ",", "\n", "'relu4_2'", ":", "relu4_2", ",", "\n", "'relu4_3'", ":", "relu4_3", ",", "\n", "'relu4_4'", ":", "relu4_4", ",", "\n", "\n", "'relu5_1'", ":", "relu5_1", ",", "\n", "'relu5_2'", ":", "relu5_2", ",", "\n", "'relu5_3'", ":", "relu5_3", ",", "\n", "'relu5_4'", ":", "relu5_4", ",", "\n", "}", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.models.spectral_norm": [[293, 298], ["torch.utils.spectral_norm"], "function", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm"], ["", "", "def", "spectral_norm", "(", "module", ",", "mode", "=", "True", ")", ":", "\n", "    ", "if", "mode", ":", "\n", "        ", "return", "nn", ".", "utils", ".", "spectral_norm", "(", "module", ")", "\n", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan._GridAttentionBlockND.__init__": [[115, 163], ["torch.Module.__init__", "isinstance", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv_nd", "conv_nd", "conv_nd", "global_gan._GridAttentionBlockND.children", "isinstance", "conv_nd", "bn", "global_gan.init_weights", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "gating_channels", ",", "inter_channels", "=", "None", ",", "dimension", "=", "2", ",", "\n", "sub_sample_factor", "=", "(", "2", ",", "2", ")", ")", ":", "\n", "        ", "super", "(", "_GridAttentionBlockND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Downsampling rate for the input featuremap", "\n", "if", "isinstance", "(", "sub_sample_factor", ",", "tuple", ")", ":", "self", ".", "sub_sample_factor", "=", "sub_sample_factor", "\n", "elif", "isinstance", "(", "sub_sample_factor", ",", "list", ")", ":", "self", ".", "sub_sample_factor", "=", "tuple", "(", "sub_sample_factor", ")", "\n", "else", ":", "self", ".", "sub_sample_factor", "=", "tuple", "(", "[", "sub_sample_factor", "]", ")", "*", "dimension", "\n", "\n", "# Default parameter set", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "sub_sample_kernel_size", "=", "self", ".", "sub_sample_factor", "\n", "\n", "# Number of channels (pixel dimensions)", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "gating_channels", "=", "gating_channels", "\n", "self", ".", "inter_channels", "=", "inter_channels", "\n", "\n", "if", "self", ".", "inter_channels", "is", "None", ":", "\n", "          ", "self", ".", "inter_channels", "=", "in_channels", "//", "2", "\n", "if", "self", ".", "inter_channels", "==", "0", ":", "\n", "              ", "self", ".", "inter_channels", "=", "1", "\n", "\n", "", "conv_nd", "=", "nn", ".", "Conv2d", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "\n", "self", ".", "upsample_mode", "=", "'bilinear'", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "\n", "# Output transform", "\n", "", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "bn", "(", "self", ".", "in_channels", ")", ",", "\n", ")", "\n", "\n", "# Theta^T * x_ij + Phi^T * gating_signal + bias", "\n", "self", ".", "theta", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "self", ".", "sub_sample_kernel_size", ",", "stride", "=", "self", ".", "sub_sample_factor", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "phi", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "gating_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "psi", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n", "# Initialise weights", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "init_weights", "(", "m", ",", "init_type", "=", "'kaiming'", ")", "\n", "\n", "# Define the operation", "\n", "", "self", ".", "operation_function", "=", "self", ".", "_concatenation", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan._GridAttentionBlockND.forward": [[166, 174], ["global_gan._GridAttentionBlockND.operation_function"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "g", ")", ":", "\n", "        ", "'''\n        :param x: (b, c, t, h, w)\n        :param g: (b, g_d)\n        :return:\n        '''", "\n", "output", "=", "self", ".", "operation_function", "(", "x", ",", "g", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan._GridAttentionBlockND._concatenation": [[175, 199], ["x.size", "global_gan._GridAttentionBlockND.theta", "global_gan._GridAttentionBlockND.size", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "torch.nn.functional.upsample", "global_gan._GridAttentionBlockND.W", "g.size", "global_gan._GridAttentionBlockND.phi", "global_gan._GridAttentionBlockND.psi", "torch.nn.functional.upsample.expand_as", "torch.nn.functional.upsample.expand_as", "torch.nn.functional.upsample.expand_as", "torch.nn.functional.upsample.expand_as", "torch.nn.functional.upsample.expand_as", "torch.nn.functional.upsample.expand_as", "torch.nn.functional.upsample.expand_as"], "methods", ["None"], ["", "def", "_concatenation", "(", "self", ",", "x", ",", "g", ")", ":", "\n", "        ", "input_size", "=", "x", ".", "size", "(", ")", "\n", "batch_size", "=", "input_size", "[", "0", "]", "\n", "assert", "batch_size", "==", "g", ".", "size", "(", "0", ")", "\n", "\n", "# theta => (b, c, t, h, w) -> (b, i_c, t, h, w) -> (b, i_c, thw)", "\n", "# phi   => (b, g_d) -> (b, i_c)", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", "\n", "theta_x_size", "=", "theta_x", ".", "size", "(", ")", "\n", "\n", "# g (b, c, t', h', w') -> phi_g (b, i_c, t', h', w')", "\n", "#  Relu(theta_x + phi_g + bias) -> f = (b, i_c, thw) -> (b, i_c, t/s1, h/s2, w/s3)", "\n", "phi_g", "=", "torch", ".", "nn", ".", "functional", ".", "upsample", "(", "self", ".", "phi", "(", "g", ")", ",", "size", "=", "theta_x_size", "[", "2", ":", "]", ",", "mode", "=", "self", ".", "upsample_mode", ")", "\n", "f", "=", "torch", ".", "nn", ".", "functional", ".", "relu", "(", "theta_x", "+", "phi_g", ")", "\n", "\n", "#  psi^T * f -> (b, psi_i_c, t/s1, h/s2, w/s3)", "\n", "sigm_psi_f", "=", "torch", ".", "nn", ".", "functional", ".", "sigmoid", "(", "self", ".", "psi", "(", "f", ")", ")", "\n", "\n", "# upsample the attentions and multiply", "\n", "sigm_psi_f", "=", "torch", ".", "nn", ".", "functional", ".", "upsample", "(", "sigm_psi_f", ",", "size", "=", "input_size", "[", "2", ":", "]", ",", "mode", "=", "self", ".", "upsample_mode", ")", "\n", "y", "=", "sigm_psi_f", ".", "expand_as", "(", "x", ")", "*", "x", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "\n", "return", "W_y", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.GridAttentionBlock2D.__init__": [[202, 209], ["global_gan._GridAttentionBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "gating_channels", ",", "inter_channels", "=", "None", ",", "\n", "sub_sample_factor", "=", "(", "2", ",", "2", ")", ")", ":", "\n", "        ", "super", "(", "GridAttentionBlock2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "gating_channels", "=", "gating_channels", ",", "\n", "dimension", "=", "2", ",", "\n", "sub_sample_factor", "=", "sub_sample_factor", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.BaseNetwork.__init__": [[213, 215], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.BaseNetwork.init_weights": [[216, 243], ["global_gan.BaseNetwork.apply", "hasattr", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "classname.find", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "classname.find", "classname.find", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.orthogonal_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "init_type", "=", "'normal'", ",", "gain", "=", "0.02", ")", ":", "\n", "        ", "'''\n        initialize network's weights\n        init_type: normal | xavier | kaiming | orthogonal\n        https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix/blob/9451e70673400885567d08a9e97ade2524c700d0/models/networks.py#L39\n        '''", "\n", "\n", "def", "init_func", "(", "m", ")", ":", "\n", "            ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "                ", "if", "init_type", "==", "'normal'", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                    ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "gain", ")", "\n", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "gain", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "self", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.InpaintGenerator.__init__": [[245, 297], ["global_gan.BaseNetwork.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "global_gan.GridAttentionBlock2D", "global_gan.GridAttentionBlock2D", "global_gan.GridAttentionBlock2D", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "global_gan.ResnetBlock", "blocks.append", "global_gan.ResnetBlock", "blocks1.append", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "global_gan.InpaintGenerator.init_weights"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "residual_blocks", "=", "8", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "InpaintGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c64", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "4", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "d128", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "d256", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "256", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "blocks", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "block", "=", "ResnetBlock", "(", "256", ",", "2", ")", "\n", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "", "blocks1", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "block1", "=", "ResnetBlock", "(", "256", ",", "2", ")", "\n", "blocks1", ".", "append", "(", "block1", ")", "\n", "\n", "", "self", ".", "middle1", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "self", ".", "middle2", "=", "nn", ".", "Sequential", "(", "*", "blocks1", ")", "\n", "\n", "self", ".", "u128", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "u64", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ")", "\n", "\n", "\n", "self", ".", "attention1", "=", "GridAttentionBlock2D", "(", "256", ",", "256", ")", "\n", "self", ".", "attention2", "=", "GridAttentionBlock2D", "(", "128", ",", "256", ")", "\n", "self", ".", "attention3", "=", "GridAttentionBlock2D", "(", "64", ",", "256", ")", "\n", "\n", "self", ".", "skip1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "1", ",", "2", ",", "padding", "=", "0", ")", ",", "nn", ".", "BatchNorm2d", "(", "128", ")", ")", "\n", "self", ".", "skip2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "1", ",", "2", ",", "padding", "=", "0", ")", ",", "nn", ".", "BatchNorm2d", "(", "256", ")", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.InpaintGenerator.forward": [[298, 324], ["global_gan.InpaintGenerator.c64", "global_gan.InpaintGenerator.skip1", "global_gan.InpaintGenerator.skip2", "global_gan.InpaintGenerator.d128", "global_gan.InpaintGenerator.d256", "global_gan.InpaintGenerator.middle1", "global_gan.InpaintGenerator.middle2", "global_gan.InpaintGenerator.u128", "global_gan.InpaintGenerator.u64", "global_gan.InpaintGenerator.out", "global_gan.InpaintGenerator.attention1", "global_gan.InpaintGenerator.attention2", "global_gan.InpaintGenerator.attention3", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "c64", "(", "x", ")", "\n", "skip", "=", "self", ".", "skip1", "(", "x", ")", "\n", "skip", "=", "self", ".", "skip2", "(", "skip", ")", "\n", "\n", "x", "=", "self", ".", "d128", "(", "x", ")", "\n", "x", "=", "self", ".", "d256", "(", "x", ")", "\n", "x", "=", "x", "+", "skip", "\n", "gate1", "=", "x", "\n", "\n", "x", "=", "self", ".", "middle1", "(", "x", ")", "\n", "gate2", "=", "x", "\n", "\n", "x", "=", "self", ".", "middle2", "(", "x", ")", "\n", "gate3", "=", "x", "\n", "\n", "x", "=", "x", "+", "self", ".", "attention1", "(", "x", ",", "gate1", ")", "\n", "x", "=", "self", ".", "u128", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "attention2", "(", "x", ",", "gate2", ")", "\n", "x", "=", "self", ".", "u64", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "attention3", "(", "x", ",", "gate3", ")", "\n", "x", "=", "self", ".", "out", "(", "x", ")", "\n", "\n", "x", "=", "(", "torch", ".", "tanh", "(", "x", ")", "+", "1", ")", "/", "2", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.EdgeGenerator.__init__": [[327, 380], ["global_gan.BaseNetwork.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "global_gan.GridAttentionBlock2D", "global_gan.GridAttentionBlock2D", "global_gan.GridAttentionBlock2D", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "global_gan.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "global_gan.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "global_gan.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "global_gan.ResnetBlock", "blocks.append", "global_gan.ResnetBlock", "blocks1.append", "global_gan.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "global_gan.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "global_gan.EdgeGenerator.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "use_spectral_norm", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "EdgeGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c64", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "\n", "self", ".", "d128", "=", "nn", ".", "Sequential", "(", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "d256", "=", "nn", ".", "Sequential", "(", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "256", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "attention1", "=", "GridAttentionBlock2D", "(", "256", ",", "256", ")", "\n", "self", ".", "attention2", "=", "GridAttentionBlock2D", "(", "128", ",", "256", ")", "\n", "self", ".", "attention3", "=", "GridAttentionBlock2D", "(", "64", ",", "256", ")", "\n", "\n", "self", ".", "skip1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "1", ",", "2", ",", "padding", "=", "0", ")", ",", "nn", ".", "BatchNorm2d", "(", "128", ")", ")", "\n", "self", ".", "skip2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "1", ",", "2", ",", "padding", "=", "0", ")", ",", "nn", ".", "BatchNorm2d", "(", "256", ")", ")", "\n", "\n", "blocks", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "block", "=", "ResnetBlock", "(", "256", ",", "2", ",", "use_spectral_norm", "=", "use_spectral_norm", ")", "\n", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "", "self", ".", "middle1", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "blocks1", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "          ", "block1", "=", "ResnetBlock", "(", "256", ",", "2", ",", "use_spectral_norm", "=", "use_spectral_norm", ")", "\n", "blocks1", ".", "append", "(", "block1", ")", "\n", "\n", "", "self", ".", "middle2", "=", "nn", ".", "Sequential", "(", "*", "blocks1", ")", "\n", "\n", "self", ".", "u128", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "u64", "=", "nn", ".", "Sequential", "(", "spectral_norm", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.EdgeGenerator.forward": [[381, 409], ["global_gan.EdgeGenerator.c64", "global_gan.EdgeGenerator.skip1", "global_gan.EdgeGenerator.skip2", "global_gan.EdgeGenerator.d128", "global_gan.EdgeGenerator.d256", "global_gan.EdgeGenerator.middle1", "global_gan.EdgeGenerator.middle2", "global_gan.EdgeGenerator.u128", "global_gan.EdgeGenerator.u64", "global_gan.EdgeGenerator.out", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "global_gan.EdgeGenerator.attention1", "global_gan.EdgeGenerator.attention2", "global_gan.EdgeGenerator.attention3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "c64", "(", "x", ")", "\n", "skip", "=", "self", ".", "skip1", "(", "x", ")", "\n", "skip", "=", "self", ".", "skip2", "(", "skip", ")", "\n", "\n", "x", "=", "self", ".", "d128", "(", "x", ")", "\n", "x", "=", "self", ".", "d256", "(", "x", ")", "\n", "x", "=", "x", "+", "skip", "\n", "gate1", "=", "x", "\n", "\n", "x", "=", "self", ".", "middle1", "(", "x", ")", "\n", "gate2", "=", "x", "\n", "\n", "x", "=", "self", ".", "middle2", "(", "x", ")", "\n", "gate3", "=", "x", "\n", "\n", "x", "=", "x", "+", "self", ".", "attention1", "(", "x", ",", "gate1", ")", "\n", "x", "=", "self", ".", "u128", "(", "x", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "attention2", "(", "x", ",", "gate2", ")", "\n", "x", "=", "self", ".", "u64", "(", "x", ")", "\n", "\n", "x", "=", "x", "+", "self", ".", "attention3", "(", "x", ",", "gate3", ")", "\n", "x", "=", "self", ".", "out", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.Discriminator.__init__": [[412, 442], ["global_gan.BaseNetwork.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "global_gan.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "global_gan.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "global_gan.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "global_gan.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "global_gan.spectral_norm", "global_gan.Discriminator.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "use_sigmoid", "=", "True", ",", "use_spectral_norm", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.Discriminator.forward": [[443, 455], ["global_gan.Discriminator.conv1", "global_gan.Discriminator.conv2", "global_gan.Discriminator.conv3", "global_gan.Discriminator.conv4", "global_gan.Discriminator.conv5", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "conv2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "conv3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "conv4", "(", "conv3", ")", "\n", "conv5", "=", "self", ".", "conv5", "(", "conv4", ")", "\n", "\n", "outputs", "=", "conv5", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "outputs", "=", "torch", ".", "sigmoid", "(", "conv5", ")", "\n", "\n", "", "return", "outputs", ",", "[", "conv1", ",", "conv2", ",", "conv3", ",", "conv4", ",", "conv5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.final_generator.__init__": [[458, 510], ["global_gan.BaseNetwork.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "range", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "global_gan.GridAttentionBlock2D", "global_gan.GridAttentionBlock2D", "global_gan.GridAttentionBlock2D", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "global_gan.ResnetBlock", "blocks.append", "global_gan.ResnetBlock", "blocks1.append", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "global_gan.final_generator.init_weights"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "channels", "=", "3", ",", "residual_blocks", "=", "8", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "final_generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c64", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "channels", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "d128", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "d256", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "256", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "blocks", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "block", "=", "ResnetBlock", "(", "256", ",", "2", ")", "\n", "blocks", ".", "append", "(", "block", ")", "\n", "\n", "", "blocks1", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "            ", "block1", "=", "ResnetBlock", "(", "256", ",", "2", ")", "\n", "blocks1", ".", "append", "(", "block1", ")", "\n", "\n", "", "self", ".", "middle1", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "self", ".", "middle2", "=", "nn", ".", "Sequential", "(", "*", "blocks1", ")", "\n", "\n", "self", ".", "u128", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "128", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "u64", "=", "nn", ".", "Sequential", "(", "nn", ".", "ConvTranspose2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "64", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "out", "=", "nn", ".", "Sequential", "(", "nn", ".", "ReflectionPad2d", "(", "3", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "7", ",", "padding", "=", "0", ")", ")", "\n", "\n", "\n", "self", ".", "attention1", "=", "GridAttentionBlock2D", "(", "256", ",", "256", ")", "\n", "self", ".", "attention2", "=", "GridAttentionBlock2D", "(", "128", ",", "256", ")", "\n", "self", ".", "attention3", "=", "GridAttentionBlock2D", "(", "64", ",", "256", ")", "\n", "\n", "self", ".", "skip1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "1", ",", "2", ",", "padding", "=", "0", ")", ",", "nn", ".", "BatchNorm2d", "(", "128", ")", ")", "\n", "self", ".", "skip2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "1", ",", "2", ",", "padding", "=", "0", ")", ",", "nn", ".", "BatchNorm2d", "(", "256", ")", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.final_generator.forward": [[511, 537], ["global_gan.final_generator.c64", "global_gan.final_generator.skip1", "global_gan.final_generator.skip2", "global_gan.final_generator.d128", "global_gan.final_generator.d256", "global_gan.final_generator.middle1", "global_gan.final_generator.middle2", "global_gan.final_generator.u128", "global_gan.final_generator.u64", "global_gan.final_generator.out", "global_gan.final_generator.attention1", "global_gan.final_generator.attention2", "global_gan.final_generator.attention3", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "c64", "(", "x", ")", "\n", "skip", "=", "self", ".", "skip1", "(", "x", ")", "\n", "skip", "=", "self", ".", "skip2", "(", "skip", ")", "\n", "\n", "x", "=", "self", ".", "d128", "(", "x", ")", "\n", "x", "=", "self", ".", "d256", "(", "x", ")", "\n", "x", "=", "x", "+", "skip", "\n", "gate1", "=", "x", "\n", "\n", "x", "=", "self", ".", "middle1", "(", "x", ")", "\n", "gate2", "=", "x", "\n", "\n", "x", "=", "self", ".", "middle2", "(", "x", ")", "\n", "gate3", "=", "x", "\n", "\n", "x", "=", "x", "+", "self", ".", "attention1", "(", "x", ",", "gate1", ")", "\n", "x", "=", "self", ".", "u128", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "attention2", "(", "x", ",", "gate2", ")", "\n", "x", "=", "self", ".", "u64", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "attention3", "(", "x", ",", "gate3", ")", "\n", "x", "=", "self", ".", "out", "(", "x", ")", "\n", "\n", "x", "=", "(", "torch", ".", "tanh", "(", "x", ")", "+", "1", ")", "/", "2", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.final_discriminator.__init__": [[541, 571], ["global_gan.BaseNetwork.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "global_gan.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "global_gan.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "global_gan.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "global_gan.spectral_norm", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "global_gan.spectral_norm", "global_gan.final_discriminator.init_weights", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "use_sigmoid", "=", "True", ",", "use_spectral_norm", "=", "True", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "final_discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_sigmoid", "=", "use_sigmoid", "\n", "\n", "self", ".", "conv1", "=", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "64", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "64", ",", "out_channels", "=", "128", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "128", ",", "out_channels", "=", "256", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "256", ",", "out_channels", "=", "512", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "512", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.final_discriminator.forward": [[572, 584], ["global_gan.final_discriminator.conv1", "global_gan.final_discriminator.conv2", "global_gan.final_discriminator.conv3", "global_gan.final_discriminator.conv4", "global_gan.final_discriminator.conv5", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "conv2", "=", "self", ".", "conv2", "(", "conv1", ")", "\n", "conv3", "=", "self", ".", "conv3", "(", "conv2", ")", "\n", "conv4", "=", "self", ".", "conv4", "(", "conv3", ")", "\n", "conv5", "=", "self", ".", "conv5", "(", "conv4", ")", "\n", "\n", "\n", "if", "self", ".", "use_sigmoid", ":", "\n", "            ", "outputs", "=", "torch", ".", "sigmoid", "(", "conv5", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.ResnetBlock.__init__": [[586, 597], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "global_gan.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "global_gan.spectral_norm", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "dilation", "=", "1", ",", "use_spectral_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResnetBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "dilation", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "dim", ",", "out_channels", "=", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "track_running_stats", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "nn", ".", "ReflectionPad2d", "(", "1", ")", ",", "\n", "spectral_norm", "(", "nn", ".", "Conv2d", "(", "in_channels", "=", "dim", ",", "out_channels", "=", "dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "bias", "=", "not", "use_spectral_norm", ")", ",", "use_spectral_norm", ")", ",", "\n", "nn", ".", "InstanceNorm2d", "(", "dim", ",", "track_running_stats", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.ResnetBlock.forward": [[599, 606], ["global_gan.ResnetBlock.conv_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "x", "+", "self", ".", "conv_block", "(", "x", ")", "\n", "\n", "# Remove ReLU at the end of the residual block", "\n", "# http://torch.ch/blog/2016/02/04/resnets.html", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.VGG19.__init__": [[608, 683], ["super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range", "global_gan.VGG19.parameters", "torchvision.models.vgg19", "torchvision.models.vgg19", "torchvision.models.vgg19", "torchvision.models.vgg19", "global_gan.VGG19.relu1_1.add_module", "global_gan.VGG19.relu1_2.add_module", "global_gan.VGG19.relu2_1.add_module", "global_gan.VGG19.relu2_2.add_module", "global_gan.VGG19.relu3_1.add_module", "global_gan.VGG19.relu3_2.add_module", "global_gan.VGG19.relu3_3.add_module", "global_gan.VGG19.relu3_4.add_module", "global_gan.VGG19.relu4_1.add_module", "global_gan.VGG19.relu4_2.add_module", "global_gan.VGG19.relu4_3.add_module", "global_gan.VGG19.relu4_4.add_module", "global_gan.VGG19.relu5_1.add_module", "global_gan.VGG19.relu5_2.add_module", "global_gan.VGG19.relu5_3.add_module", "global_gan.VGG19.relu5_4.add_module", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VGG19", ",", "self", ")", ".", "__init__", "(", ")", "\n", "features", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "relu1_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu1_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu2_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu2_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu3_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu3_4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu4_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu4_4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "self", ".", "relu5_1", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_2", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_3", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu5_4", "=", "torch", ".", "nn", ".", "Sequential", "(", ")", "\n", "\n", "for", "x", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "relu1_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "2", ",", "4", ")", ":", "\n", "            ", "self", ".", "relu1_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "4", ",", "7", ")", ":", "\n", "            ", "self", ".", "relu2_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "7", ",", "9", ")", ":", "\n", "            ", "self", ".", "relu2_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "9", ",", "12", ")", ":", "\n", "            ", "self", ".", "relu3_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "12", ",", "14", ")", ":", "\n", "            ", "self", ".", "relu3_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "14", ",", "16", ")", ":", "\n", "            ", "self", ".", "relu3_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "16", ",", "18", ")", ":", "\n", "            ", "self", ".", "relu3_4", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "18", ",", "21", ")", ":", "\n", "            ", "self", ".", "relu4_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "21", ",", "23", ")", ":", "\n", "            ", "self", ".", "relu4_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "23", ",", "25", ")", ":", "\n", "            ", "self", ".", "relu4_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "25", ",", "27", ")", ":", "\n", "            ", "self", ".", "relu4_4", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "27", ",", "30", ")", ":", "\n", "            ", "self", ".", "relu5_1", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "30", ",", "32", ")", ":", "\n", "            ", "self", ".", "relu5_2", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "32", ",", "34", ")", ":", "\n", "            ", "self", ".", "relu5_3", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "34", ",", "36", ")", ":", "\n", "            ", "self", ".", "relu5_4", ".", "add_module", "(", "str", "(", "x", ")", ",", "features", "[", "x", "]", ")", "\n", "\n", "# don't need the gradients, just want the features", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.VGG19.forward": [[684, 729], ["global_gan.VGG19.relu1_1", "global_gan.VGG19.relu1_2", "global_gan.VGG19.relu2_1", "global_gan.VGG19.relu2_2", "global_gan.VGG19.relu3_1", "global_gan.VGG19.relu3_2", "global_gan.VGG19.relu3_3", "global_gan.VGG19.relu3_4", "global_gan.VGG19.relu4_1", "global_gan.VGG19.relu4_2", "global_gan.VGG19.relu4_3", "global_gan.VGG19.relu4_4", "global_gan.VGG19.relu5_1", "global_gan.VGG19.relu5_2", "global_gan.VGG19.relu5_3", "global_gan.VGG19.relu5_4"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "relu1_1", "=", "self", ".", "relu1_1", "(", "x", ")", "\n", "relu1_2", "=", "self", ".", "relu1_2", "(", "relu1_1", ")", "\n", "\n", "relu2_1", "=", "self", ".", "relu2_1", "(", "relu1_2", ")", "\n", "relu2_2", "=", "self", ".", "relu2_2", "(", "relu2_1", ")", "\n", "\n", "relu3_1", "=", "self", ".", "relu3_1", "(", "relu2_2", ")", "\n", "relu3_2", "=", "self", ".", "relu3_2", "(", "relu3_1", ")", "\n", "relu3_3", "=", "self", ".", "relu3_3", "(", "relu3_2", ")", "\n", "relu3_4", "=", "self", ".", "relu3_4", "(", "relu3_3", ")", "\n", "\n", "relu4_1", "=", "self", ".", "relu4_1", "(", "relu3_4", ")", "\n", "relu4_2", "=", "self", ".", "relu4_2", "(", "relu4_1", ")", "\n", "relu4_3", "=", "self", ".", "relu4_3", "(", "relu4_2", ")", "\n", "relu4_4", "=", "self", ".", "relu4_4", "(", "relu4_3", ")", "\n", "\n", "relu5_1", "=", "self", ".", "relu5_1", "(", "relu4_4", ")", "\n", "relu5_2", "=", "self", ".", "relu5_2", "(", "relu5_1", ")", "\n", "relu5_3", "=", "self", ".", "relu5_3", "(", "relu5_2", ")", "\n", "relu5_4", "=", "self", ".", "relu5_4", "(", "relu5_3", ")", "\n", "\n", "out", "=", "{", "\n", "'relu1_1'", ":", "relu1_1", ",", "\n", "'relu1_2'", ":", "relu1_2", ",", "\n", "\n", "'relu2_1'", ":", "relu2_1", ",", "\n", "'relu2_2'", ":", "relu2_2", ",", "\n", "\n", "'relu3_1'", ":", "relu3_1", ",", "\n", "'relu3_2'", ":", "relu3_2", ",", "\n", "'relu3_3'", ":", "relu3_3", ",", "\n", "'relu3_4'", ":", "relu3_4", ",", "\n", "\n", "'relu4_1'", ":", "relu4_1", ",", "\n", "'relu4_2'", ":", "relu4_2", ",", "\n", "'relu4_3'", ":", "relu4_3", ",", "\n", "'relu4_4'", ":", "relu4_4", ",", "\n", "\n", "'relu5_1'", ":", "relu5_1", ",", "\n", "'relu5_2'", ":", "relu5_2", ",", "\n", "'relu5_3'", ":", "relu5_3", ",", "\n", "'relu5_4'", ":", "relu5_4", ",", "\n", "}", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.Dataset.__init__": [[780, 791], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__"], ["  ", "def", "__init__", "(", "self", ",", "dataset", ",", "augment", "=", "True", ",", "training", "=", "True", ")", ":", "\n", "    ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n", "self", ".", "input_size", "=", "256", "\n", "self", ".", "sigma", "=", "2.0", "\n", "self", ".", "edge", "=", "1", "\n", "self", ".", "mask", "=", "2", "\n", "self", ".", "nms", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.Dataset.__len__": [[792, 794], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.Dataset.__getitem__": [[795, 821], ["global_gan.Dataset.dataset.__getitem__", "numpy.asarray", "skimage.color.rgb2gray", "global_gan.Dataset.load_mask", "global_gan.Dataset.load_edge", "global_gan.Dataset.resize", "global_gan.Dataset.to_tensor", "global_gan.Dataset.to_tensor", "global_gan.Dataset.to_tensor", "global_gan.Dataset.to_tensor", "numpy.random.binomial"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.__getitem__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.load_mask", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.load_edge", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.resize", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "image", ",", "mask", "=", "self", ".", "dataset", ".", "__getitem__", "(", "index", ")", "\n", "img", "=", "np", ".", "asarray", "(", "image", ")", "\n", "\n", "size", "=", "self", ".", "input_size", "\n", "\n", "if", "size", "!=", "0", ":", "\n", "      ", "img", "=", "self", ".", "resize", "(", "img", ",", "size", ",", "size", ")", "\n", "\n", "", "img_gray", "=", "rgb2gray", "(", "img", ")", "\n", "\n", "mask", "=", "self", ".", "load_mask", "(", "img", ",", "index", ")", "\n", "\n", "# load edge", "\n", "edge", "=", "self", ".", "load_edge", "(", "img_gray", ",", "index", ",", "mask", ")", "\n", "\n", "# augment data", "\n", "if", "self", ".", "augment", "and", "np", ".", "random", ".", "binomial", "(", "1", ",", "0.5", ")", ">", "0", ":", "\n", "      ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", "...", "]", "\n", "img_gray", "=", "img_gray", "[", ":", ",", ":", ":", "-", "1", ",", "...", "]", "\n", "edge", "=", "edge", "[", ":", ",", ":", ":", "-", "1", ",", "...", "]", "\n", "mask", "=", "mask", "[", ":", ",", ":", ":", "-", "1", ",", "...", "]", "\n", "\n", "\n", "\n", "", "return", "self", ".", "to_tensor", "(", "img", ")", ",", "self", ".", "to_tensor", "(", "img_gray", ")", ",", "self", ".", "to_tensor", "(", "edge", ")", ",", "self", ".", "to_tensor", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.Dataset.load_edge": [[823, 853], ["skimage.feature.canny().astype", "scipy.misc.imread", "global_gan.Dataset.resize", "numpy.zeros().astype", "random.randint", "skimage.feature.canny", "skimage.feature.canny", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.resize"], ["", "def", "load_edge", "(", "self", ",", "img", ",", "index", ",", "mask", ")", ":", "\n", "      ", "sigma", "=", "self", ".", "sigma", "\n", "\n", "# in test mode images are masked (with masked regions),", "\n", "# using 'mask' parameter prevents canny to detect edges for the masked regions", "\n", "mask", "=", "None", "if", "self", ".", "training", "else", "(", "1", "-", "mask", "/", "255", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "# canny", "\n", "if", "self", ".", "edge", "==", "1", ":", "\n", "# no edge", "\n", "          ", "if", "sigma", "==", "-", "1", ":", "\n", "              ", "return", "np", ".", "zeros", "(", "img", ".", "shape", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "# random sigma", "\n", "", "if", "sigma", "==", "0", ":", "\n", "              ", "sigma", "=", "random", ".", "randint", "(", "1", ",", "4", ")", "\n", "\n", "", "return", "canny", "(", "img", ",", "sigma", "=", "sigma", ",", "mask", "=", "mask", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "# external", "\n", "", "else", ":", "\n", "          ", "imgh", ",", "imgw", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "edge", "=", "imread", "(", "self", ".", "edge_data", "[", "index", "]", ")", "\n", "edge", "=", "self", ".", "resize", "(", "edge", ",", "imgh", ",", "imgw", ")", "\n", "\n", "# non-max suppression", "\n", "if", "self", ".", "nms", "==", "1", ":", "\n", "              ", "edge", "=", "edge", "*", "canny", "(", "img", ",", "sigma", "=", "sigma", ",", "mask", "=", "mask", ")", "\n", "\n", "", "return", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.Dataset.load_mask": [[854, 868], ["random.randint", "random.randint", "global_gan.create_mask", "random.randint", "global_gan.salt_and_pepper"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.create_mask", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.salt_and_pepper"], ["", "", "def", "load_mask", "(", "self", ",", "img", ",", "index", ")", ":", "\n", "      ", "imgh", ",", "imgw", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "mask_type", "=", "self", ".", "mask", "\n", "\n", "height", "=", "random", ".", "randint", "(", "64", ",", "128", ")", "\n", "width", "=", "random", ".", "randint", "(", "64", ",", "128", ")", "\n", "\n", "# random block", "\n", "if", "mask_type", "==", "1", ":", "\n", "          ", "return", "create_mask", "(", "imgw", ",", "imgh", ",", "height", ",", "width", ")", "\n", "\n", "", "elif", "mask_type", "==", "2", ":", "\n", "          ", "percent", "=", "random", ".", "randint", "(", "10", ",", "90", ")", "\n", "return", "salt_and_pepper", "(", "percent", ",", "imgw", ",", "imgh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.Dataset.to_tensor": [[869, 873], ["PIL.Image.fromarray", "torchvision.to_tensor().float", "torchvision.to_tensor().float", "torchvision.to_tensor().float", "torchvision.to_tensor().float", "torchvision.to_tensor", "torchvision.to_tensor", "torchvision.to_tensor", "torchvision.to_tensor"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor"], ["", "", "def", "to_tensor", "(", "self", ",", "img", ")", ":", "\n", "      ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img_t", "=", "F", ".", "to_tensor", "(", "img", ")", ".", "float", "(", ")", "\n", "return", "img_t", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.Dataset.resize": [[874, 887], ["scipy.misc.imresize", "numpy.minimum"], "methods", ["None"], ["", "def", "resize", "(", "self", ",", "img", ",", "height", ",", "width", ",", "centerCrop", "=", "True", ")", ":", "\n", "      ", "imgh", ",", "imgw", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "if", "centerCrop", "and", "imgh", "!=", "imgw", ":", "\n", "# center crop", "\n", "          ", "side", "=", "np", ".", "minimum", "(", "imgh", ",", "imgw", ")", "\n", "j", "=", "(", "imgh", "-", "side", ")", "//", "2", "\n", "i", "=", "(", "imgw", "-", "side", ")", "//", "2", "\n", "img", "=", "img", "[", "j", ":", "j", "+", "side", ",", "i", ":", "i", "+", "side", ",", "...", "]", "\n", "\n", "", "img", "=", "scipy", ".", "misc", ".", "imresize", "(", "img", ",", "[", "height", ",", "width", "]", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.Dataset.create_iterator": [[890, 900], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "create_iterator", "(", "self", ",", "batch_size", ")", ":", "\n", "      ", "while", "True", ":", "\n", "          ", "sample_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "self", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "\n", "for", "item", "in", "sample_loader", ":", "\n", "              ", "yield", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.weights_init_normal": [[52, 62], ["classname.find", "torch.nn.init.normal", "classname.find", "torch.nn.init.normal", "classname.find", "torch.nn.init.normal", "torch.nn.init.constant"], "function", ["None"], ["def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "#print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.weights_init_xavier": [[64, 74], ["classname.find", "torch.nn.init.xavier_normal", "classname.find", "torch.nn.init.xavier_normal", "classname.find", "torch.nn.init.normal", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_xavier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "#print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.weights_init_kaiming": [[76, 86], ["classname.find", "torch.nn.init.kaiming_normal_", "classname.find", "torch.nn.init.kaiming_normal_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "#print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.weights_init_orthogonal": [[88, 98], ["classname.find", "torch.nn.init.orthogonal", "classname.find", "torch.nn.init.orthogonal", "classname.find", "torch.nn.init.normal", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_orthogonal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "#print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.init_weights": [[100, 112], ["net.apply", "net.apply", "net.apply", "net.apply", "NotImplementedError"], "function", ["None"], ["", "", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ")", ":", "\n", "#print('initialization method [%s]' % init_type)", "\n", "    ", "if", "init_type", "==", "'normal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_normal", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_xavier", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_orthogonal", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm": [[732, 737], ["torch.utils.spectral_norm"], "function", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.spectral_norm"], ["", "", "def", "spectral_norm", "(", "module", ",", "mode", "=", "True", ")", ":", "\n", "    ", "if", "mode", ":", "\n", "        ", "return", "nn", ".", "utils", ".", "spectral_norm", "(", "module", ")", "\n", "\n", "", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.create_mask": [[739, 745], ["numpy.zeros", "random.randint", "random.randint"], "function", ["None"], ["", "def", "create_mask", "(", "width", ",", "height", ",", "mask_width", ",", "mask_height", ",", "x", "=", "None", ",", "y", "=", "None", ")", ":", "\n", "    ", "mask", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "\n", "mask_x", "=", "x", "if", "x", "is", "not", "None", "else", "random", ".", "randint", "(", "0", ",", "width", "-", "mask_width", ")", "\n", "mask_y", "=", "y", "if", "y", "is", "not", "None", "else", "random", ".", "randint", "(", "0", ",", "height", "-", "mask_height", ")", "\n", "mask", "[", "mask_y", ":", "mask_y", "+", "mask_height", ",", "mask_x", ":", "mask_x", "+", "mask_width", "]", "=", "1", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.salt_and_pepper": [[746, 760], ["int", "numpy.zeros", "range", "mask.reshape.ravel", "numpy.random.shuffle", "mask.reshape.reshape", "math.sqrt", "range"], "function", ["None"], ["", "def", "salt_and_pepper", "(", "percent", ",", "height", ",", "width", ")", ":", "\n", "    ", "num_pixels", "=", "percent", "*", "height", "*", "width", "/", "100", "\n", "num_pixels", "=", "int", "(", "math", ".", "sqrt", "(", "num_pixels", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_pixels", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_pixels", ")", ":", "\n", "            ", "mask", "[", "i", "]", "[", "j", "]", "=", "1.0", "\n", "\n", "", "", "mask", "=", "mask", ".", "ravel", "(", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "(", "height", ",", "width", ")", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.compute_gram": [[762, 769], ["x.size", "x.view", "x.view.transpose", "x.view.bmm"], "function", ["None"], ["", "def", "compute_gram", "(", "x", ")", ":", "\n", "    ", "b", ",", "ch", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "f", "=", "x", ".", "view", "(", "b", ",", "ch", ",", "w", "*", "h", ")", "\n", "f_T", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n", "G", "=", "f", ".", "bmm", "(", "f_T", ")", "/", "(", "h", "*", "w", "*", "ch", ")", "\n", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.postprocess": [[771, 776], ["img.permute.permute", "img.permute.int"], "function", ["None"], ["", "def", "postprocess", "(", "self", ",", "img", ")", ":", "\n", "# [0, 1] => [0, 255]", "\n", "    ", "img", "=", "img", "*", "255.0", "\n", "img", "=", "img", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "img", ".", "int", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.gradient_penalty": [[912, 938], ["image.size", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "epsilon.cuda.expand_as", "epsilon.cuda.cuda", "torch.autograd.Variable", "interpolation.cuda.cuda", "discriminator", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "grad_outputs.cuda.cuda", "gradients.view.view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "discriminator.size", "torch.autograd.grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "gradient_penalty", "(", "image", ",", "generated_data", ",", "gamma", ",", "discriminator", ")", ":", "\n", "    ", "batch_size", "=", "image", ".", "size", "(", "0", ")", "\n", "epsilon", "=", "torch", ".", "rand", "(", "batch_size", ",", "1", ",", "1", ",", "1", ")", "\n", "epsilon", "=", "epsilon", ".", "expand_as", "(", "image", ")", "\n", "\n", "epsilon", "=", "epsilon", ".", "cuda", "(", ")", "\n", "\n", "interpolation", "=", "epsilon", "*", "image", ".", "data", "+", "(", "1", "-", "epsilon", ")", "*", "generated_data", ".", "data", "\n", "interpolation", "=", "Variable", "(", "interpolation", ",", "requires_grad", "=", "True", ")", "\n", "\n", "interpolation", "=", "interpolation", ".", "cuda", "(", ")", "\n", "\n", "interpolation_logits", "=", "discriminator", "(", "interpolation", ")", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "interpolation_logits", ".", "size", "(", ")", ")", "\n", "\n", "grad_outputs", "=", "grad_outputs", ".", "cuda", "(", ")", "\n", "\n", "gradients", "=", "autograd", ".", "grad", "(", "outputs", "=", "interpolation_logits", ",", "\n", "inputs", "=", "interpolation", ",", "\n", "grad_outputs", "=", "grad_outputs", ",", "\n", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ")", "[", "0", "]", "\n", "\n", "gradients", "=", "gradients", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "gradients_norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "gradients", "**", "2", ",", "dim", "=", "1", ")", "+", "1e-12", ")", "\n", "return", "gamma", "*", "(", "(", "gradients_norm", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.train": [[945, 1060], ["inpaint_generator.eval", "generator.train", "discriminator.train", "enumerate", "images.size", "inpaint_generator", "g_optimizer.zero_grad", "d_optimizer.zero_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generator", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "generator.detach", "discriminator", "discriminator", "torch.tensor.expand_as", "adversarial_loss", "torch.tensor.expand_as", "adversarial_loss", "discriminator", "torch.tensor.expand_as", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "inpaint_loss.append", "i_gen_loss.backward", "g_optimizer.step", "i_dis_loss.backward", "d_optimizer.step", "print", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "real_label.expand_as.cuda", "fake_label.expand_as.cuda", "adversarial_loss", "l1_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "vgg19", "vgg19", "vgg19", "vgg19", "global_gan.compute_gram", "global_gan.compute_gram", "global_gan.compute_gram", "global_gan.compute_gram", "global_gan.compute_gram", "global_gan.compute_gram", "global_gan.compute_gram", "global_gan.compute_gram", "images.cuda", "images_gray.cuda", "edges.cuda", "masks.cuda", "real_label.expand_as.cuda"], "function", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.train", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.train", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram"], ["", "def", "train", "(", "inpaint_generator", ",", "generator", ",", "discriminator", ",", "vgg19", ",", "g_optimizer", ",", "d_optimizer", ",", "adversarial_loss", ",", "l1_loss", ",", "dataloader", ")", ":", "\n", "  ", "inpaint_generator", ".", "eval", "(", ")", "\n", "generator", ".", "train", "(", ")", "\n", "discriminator", ".", "train", "(", ")", "\n", "\n", "for", "i", ",", "(", "images", ",", "images_gray", ",", "edges", ",", "masks", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "    ", "if", "i", "<", "4000", ":", "\n", "      ", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "Variable", "(", "images", ".", "cuda", "(", ")", ")", ",", "Variable", "(", "images_gray", ".", "cuda", "(", ")", ")", ",", "Variable", "(", "edges", ".", "cuda", "(", ")", ")", ",", "Variable", "(", "masks", ".", "cuda", "(", ")", ")", "\n", "batch_size", "=", "images", ".", "size", "(", "0", ")", "\n", "\n", "#    edges_masked = edges * (1 - masks)", "\n", "#   images_gray_masked = images_gray * (1 - masks) + masks", "\n", "#   inputs = torch.cat((images_gray_masked, edges_masked, masks), dim = 1)", "\n", "#   e_outputs = edge_generator(inputs)", "\n", "\n", "#   e_outputs = e_outputs * masks + edges * (1 - masks)", "\n", "\n", "images_masked", "=", "(", "images", "*", "(", "1", "-", "masks", ")", ".", "float", "(", ")", ")", "+", "masks", "\n", "inputs", "=", "images_masked", "\n", "outputs", "=", "inpaint_generator", "(", "inputs", ")", "\n", "\n", "generated_data", "=", "(", "outputs", "*", "masks", ")", "+", "(", "images", "*", "(", "1", "-", "masks", ")", ")", "\n", "\n", "\n", "g_optimizer", ".", "zero_grad", "(", ")", "\n", "d_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "images_masked", ",", "generated_data", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "generator", "(", "inputs", ")", "\n", "\n", "target_real_label", "=", "1.0", "\n", "target_fake_label", "=", "0.0", "\n", "real_label", "=", "torch", ".", "tensor", "(", "target_real_label", ")", "\n", "fake_label", "=", "torch", ".", "tensor", "(", "target_fake_label", ")", "\n", "\n", "i_gen_loss", "=", "0", "\n", "i_dis_loss", "=", "0", "\n", "\n", "i_dis_input_real", "=", "images", "\n", "i_dis_input_fake", "=", "outputs", ".", "detach", "(", ")", "\n", "i_dis_real", "=", "discriminator", "(", "i_dis_input_real", ")", "\n", "i_dis_fake", "=", "discriminator", "(", "i_dis_input_fake", ")", "\n", "\n", "i_dis_labels", "=", "real_label", ".", "expand_as", "(", "i_dis_real", ")", "\n", "i_dis_real_loss", "=", "adversarial_loss", "(", "i_dis_real", ",", "i_dis_labels", ".", "cuda", "(", ")", ")", "\n", "\n", "i_labels", "=", "fake_label", ".", "expand_as", "(", "i_dis_fake", ")", "\n", "i_dis_fake_loss", "=", "adversarial_loss", "(", "i_dis_fake", ",", "i_labels", ".", "cuda", "(", ")", ")", "\n", "\n", "i_dis_loss", "+=", "(", "i_dis_real_loss", "+", "i_dis_fake_loss", ")", "/", "2", "\n", "\n", "\n", "\n", "\n", "### inpaint generator adversarial loss ###", "\n", "i_gen_input_fake", "=", "outputs", "\n", "i_gen_fake", "=", "discriminator", "(", "i_gen_input_fake", ")", "\n", "\n", "i_gen_labels", "=", "real_label", ".", "expand_as", "(", "i_gen_fake", ")", "\n", "i_gen_gan_loss", "=", "adversarial_loss", "(", "i_gen_fake", ",", "i_gen_labels", ".", "cuda", "(", ")", ")", "*", "0.1", "\n", "i_gen_loss", "+=", "i_gen_gan_loss", "\n", "\n", "\n", "\n", "\n", "### inpaint generator l1 loss ###", "\n", "i_gen_l1_loss", "=", "l1_loss", "(", "images", ",", "outputs", ")", "/", "torch", ".", "mean", "(", "masks", ")", "\n", "i_gen_loss", "+=", "i_gen_l1_loss", "\n", "\n", "\n", "\n", "\n", "### inpaint generator perceptual loss ###", "\n", "x_p_vgg", ",", "y_p_vgg", "=", "vgg19", "(", "outputs", ")", ",", "vgg19", "(", "images", ")", "\n", "\n", "content_loss", "=", "0.0", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu1_1'", "]", ",", "y_p_vgg", "[", "'relu1_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu2_1'", "]", ",", "y_p_vgg", "[", "'relu2_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu3_1'", "]", ",", "y_p_vgg", "[", "'relu3_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu4_1'", "]", ",", "y_p_vgg", "[", "'relu4_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu5_1'", "]", ",", "y_p_vgg", "[", "'relu5_1'", "]", ")", "\n", "\n", "content_loss", "=", "content_loss", "*", "0.1", "\n", "i_gen_loss", "+=", "content_loss", "\n", "\n", "\n", "\n", "\n", "\n", "### inpaint generator style loss ###", "\n", "x_vgg", ",", "y_vgg", "=", "vgg19", "(", "outputs", "*", "masks", ")", ",", "vgg19", "(", "images", "*", "masks", ")", "\n", "\n", "# Compute loss", "\n", "style_loss", "=", "0.0", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu2_2'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu2_2'", "]", ")", ")", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu3_4'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu3_4'", "]", ")", ")", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu4_4'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu4_4'", "]", ")", ")", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu5_2'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu5_2'", "]", ")", ")", "\n", "\n", "style_loss", "=", "style_loss", "*", "250", "\n", "i_gen_loss", "+=", "style_loss", "\n", "\n", "inpaint_loss", ".", "append", "(", "i_gen_loss", ")", "\n", "\n", "i_gen_loss", ".", "backward", "(", ")", "\n", "g_optimizer", ".", "step", "(", ")", "\n", "\n", "i_dis_loss", ".", "backward", "(", ")", "\n", "d_optimizer", ".", "step", "(", ")", "\n", "\n", "print", "(", "'Epoch : %d/%d \\t  Iters : %d/99  \\t Discriminator Loss : %.4f \\t Generator Loss : %.4f'", "%", "(", "epoch", "+", "1", ",", "num_epochs", ",", "i", ",", "i_dis_loss", ",", "i_gen_loss", ")", ")", "\n", "\n", "\n", "", "else", ":", "\n", "      ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.validation": [[1063, 1181], ["inpaint_generator.eval", "generator.eval", "discriminator.eval", "val_loss.append", "enumerate", "inpaint_generator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generator", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "generator.detach", "discriminator", "discriminator", "torch.tensor.expand_as", "adversarial_loss", "torch.tensor.expand_as", "adversarial_loss", "discriminator", "torch.tensor.expand_as", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "print", "len", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "open", "open.write", "open.close", "images.cuda", "images_gray.cuda", "edges.cuda", "masks.cuda", "real_label.expand_as.cuda", "fake_label.expand_as.cuda", "adversarial_loss", "l1_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "vgg19", "vgg19", "vgg19", "vgg19", "global_gan.compute_gram", "global_gan.compute_gram", "global_gan.compute_gram", "global_gan.compute_gram", "global_gan.compute_gram", "global_gan.compute_gram", "global_gan.compute_gram", "global_gan.compute_gram", "str", "real_label.expand_as.cuda", "best_loss.item"], "function", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram"], ["", "", "", "def", "validation", "(", "inpaint_generator", ",", "generator", ",", "discriminator", ",", "vgg19", ",", "adversarial_loss", ",", "l1_loss", ",", "dataloader", ")", ":", "\n", "#  edge_generator.eval()", "\n", "  ", "inpaint_generator", ".", "eval", "(", ")", "\n", "generator", ".", "eval", "(", ")", "\n", "discriminator", ".", "eval", "(", ")", "\n", "\n", "global", "best_loss", "\n", "val_loss", ".", "append", "(", "0", ")", "\n", "\n", "for", "i", ",", "items", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "    ", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "items", "\n", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "images", ".", "cuda", "(", ")", ",", "images_gray", ".", "cuda", "(", ")", ",", "edges", ".", "cuda", "(", ")", ",", "masks", ".", "cuda", "(", ")", "\n", "\n", "#    edges_masked = edges * (1 - masks)", "\n", "#    images_gray_masked = images_gray * (1 - masks) + masks", "\n", "#    inputs = torch.cat((images_gray_masked, edges_masked, masks), dim = 1)", "\n", "#    e_outputs = edge_generator(inputs)", "\n", "#    e_outputs = e_outputs * masks + edges * (1 - masks)", "\n", "\n", "images_masked", "=", "(", "images", "*", "(", "1", "-", "masks", ")", ".", "float", "(", ")", ")", "+", "masks", "\n", "#    inputs = torch.cat((images_masked, e_outputs), dim = 1)", "\n", "inputs", "=", "images_masked", "\n", "outputs", "=", "inpaint_generator", "(", "inputs", ")", "\n", "\n", "generated_data", "=", "(", "outputs", "*", "masks", ")", "+", "(", "images", "*", "(", "1", "-", "masks", ")", ")", "\n", "generated_data", "=", "torch", ".", "cat", "(", "(", "images_masked", ",", "generated_data", ")", ",", "dim", "=", "1", ")", "\n", "outputs", "=", "generator", "(", "generated_data", ")", "\n", "\n", "\n", "target_real_label", "=", "1.0", "\n", "target_fake_label", "=", "0.0", "\n", "real_label", "=", "torch", ".", "tensor", "(", "target_real_label", ")", "\n", "fake_label", "=", "torch", ".", "tensor", "(", "target_fake_label", ")", "\n", "\n", "i_gen_loss", "=", "0", "\n", "i_dis_loss", "=", "0", "\n", "\n", "i_dis_input_real", "=", "images", "\n", "i_dis_input_fake", "=", "outputs", ".", "detach", "(", ")", "\n", "i_dis_real", "=", "discriminator", "(", "i_dis_input_real", ")", "\n", "i_dis_fake", "=", "discriminator", "(", "i_dis_input_fake", ")", "\n", "\n", "i_dis_labels", "=", "real_label", ".", "expand_as", "(", "i_dis_real", ")", "\n", "i_dis_real_loss", "=", "adversarial_loss", "(", "i_dis_real", ",", "i_dis_labels", ".", "cuda", "(", ")", ")", "\n", "\n", "i_labels", "=", "fake_label", ".", "expand_as", "(", "i_dis_fake", ")", "\n", "i_dis_fake_loss", "=", "adversarial_loss", "(", "i_dis_fake", ",", "i_labels", ".", "cuda", "(", ")", ")", "\n", "\n", "i_dis_loss", "+=", "(", "i_dis_real_loss", "+", "i_dis_fake_loss", ")", "/", "2", "\n", "\n", "\n", "\n", "\n", "### inpaint generator adversarial loss ###", "\n", "i_gen_input_fake", "=", "outputs", "\n", "i_gen_fake", "=", "discriminator", "(", "i_gen_input_fake", ")", "\n", "\n", "i_gen_labels", "=", "real_label", ".", "expand_as", "(", "i_gen_fake", ")", "\n", "i_gen_gan_loss", "=", "adversarial_loss", "(", "i_gen_fake", ",", "i_gen_labels", ".", "cuda", "(", ")", ")", "*", "0.1", "\n", "i_gen_loss", "+=", "i_gen_gan_loss", "\n", "\n", "\n", "\n", "\n", "### inpaint generator l1 loss ###", "\n", "i_gen_l1_loss", "=", "l1_loss", "(", "images", ",", "outputs", ")", "/", "torch", ".", "mean", "(", "masks", ")", "\n", "i_gen_loss", "+=", "i_gen_l1_loss", "\n", "\n", "\n", "\n", "\n", "### inpaint generator perceptual loss ###", "\n", "x_p_vgg", ",", "y_p_vgg", "=", "vgg19", "(", "outputs", ")", ",", "vgg19", "(", "images", ")", "\n", "\n", "content_loss", "=", "0.0", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu1_1'", "]", ",", "y_p_vgg", "[", "'relu1_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu2_1'", "]", ",", "y_p_vgg", "[", "'relu2_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu3_1'", "]", ",", "y_p_vgg", "[", "'relu3_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu4_1'", "]", ",", "y_p_vgg", "[", "'relu4_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu5_1'", "]", ",", "y_p_vgg", "[", "'relu5_1'", "]", ")", "\n", "\n", "content_loss", "=", "content_loss", "*", "0.1", "\n", "i_gen_loss", "+=", "content_loss", "\n", "\n", "\n", "\n", "\n", "\n", "### inpaint generator style loss ###", "\n", "x_vgg", ",", "y_vgg", "=", "vgg19", "(", "outputs", "*", "masks", ")", ",", "vgg19", "(", "images", "*", "masks", ")", "\n", "\n", "# Compute loss", "\n", "style_loss", "=", "0.0", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu2_2'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu2_2'", "]", ")", ")", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu3_4'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu3_4'", "]", ")", ")", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu4_4'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu4_4'", "]", ")", ")", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu5_2'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu5_2'", "]", ")", ")", "\n", "\n", "style_loss", "=", "style_loss", "*", "250", "\n", "i_gen_loss", "+=", "style_loss", "\n", "\n", "\n", "\n", "val_loss", "[", "-", "1", "]", "=", "val_loss", "[", "-", "1", "]", "+", "i_gen_loss", ".", "data", "\n", "print", "(", "'Val_loss = %.4f'", "%", "(", "val_loss", "[", "-", "1", "]", "/", "(", "i", "+", "1", ")", ")", ")", "\n", "\n", "", "val_loss", "[", "-", "1", "]", "=", "val_loss", "[", "-", "1", "]", "/", "len", "(", "val_loader", ")", "\n", "\n", "if", "best_loss", ">", "val_loss", "[", "-", "1", "]", ":", "\n", "    ", "best_loss", "=", "val_loss", "[", "-", "1", "]", "\n", "print", "(", "'Saving...'", ")", "\n", "\n", "state", "=", "{", "'generator'", ":", "generator", ",", "'discriminator'", ":", "discriminator", "}", "\n", "torch", ".", "save", "(", "state", ",", "'global_gan_imagery_salt_best.ckpt.t7'", ")", "\n", "\n", "f", "=", "open", "(", "\"best_loss.txt\"", ",", "\"w\"", ")", "\n", "f", ".", "write", "(", "str", "(", "best_loss", ".", "item", "(", ")", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.metrics.EdgeAccuracy.__init__": [[9, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__"], ["def", "__init__", "(", "self", ",", "threshold", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "EdgeAccuracy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.metrics.EdgeAccuracy.__call__": [[13, 28], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "labels.float", "outputs.float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "labels", "=", "(", "inputs", ">", "self", ".", "threshold", ")", "\n", "outputs", "=", "(", "outputs", ">", "self", ".", "threshold", ")", "\n", "\n", "relevant", "=", "torch", ".", "sum", "(", "labels", ".", "float", "(", ")", ")", "\n", "selected", "=", "torch", ".", "sum", "(", "outputs", ".", "float", "(", ")", ")", "\n", "\n", "if", "relevant", "==", "0", "and", "selected", "==", "0", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "1", ")", ",", "torch", ".", "tensor", "(", "1", ")", "\n", "\n", "", "true_positive", "=", "(", "(", "outputs", "==", "labels", ")", "*", "labels", ")", ".", "float", "(", ")", "\n", "recall", "=", "torch", ".", "sum", "(", "true_positive", ")", "/", "(", "relevant", "+", "1e-8", ")", "\n", "precision", "=", "torch", ".", "sum", "(", "true_positive", ")", "/", "(", "selected", "+", "1e-8", ")", "\n", "\n", "return", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.metrics.PSNR.__init__": [[31, 39], ["torch.Module.__init__", "torch.log", "torch.log", "torch.log", "torch.log", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_val", ")", ":", "\n", "        ", "super", "(", "PSNR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "base10", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "10.0", ")", ")", "\n", "max_val", "=", "torch", ".", "tensor", "(", "max_val", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "base10", "=", "base10", "\n", "self", ".", "max_val", "=", "20", "*", "torch", ".", "log", "(", "max_val", ")", "/", "self", ".", "base10", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.metrics.PSNR.__call__": [[40, 47], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "a.float", "b.float", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "mse", "=", "torch", ".", "mean", "(", "(", "a", ".", "float", "(", ")", "-", "b", ".", "float", "(", ")", ")", "**", "2", ")", "\n", "\n", "if", "mse", "==", "0", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "0", ")", "\n", "\n", "", "return", "self", ".", "max_val", "-", "10", "*", "torch", ".", "log", "(", "mse", ")", "/", "self", ".", "base10", "\n", "", "", ""]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.create_mask": [[29, 35], ["numpy.zeros", "random.randint", "random.randint"], "function", ["None"], ["def", "create_mask", "(", "width", ",", "height", ",", "mask_width", ",", "mask_height", ",", "x", "=", "None", ",", "y", "=", "None", ")", ":", "\n", "    ", "mask", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "\n", "mask_x", "=", "x", "if", "x", "is", "not", "None", "else", "random", ".", "randint", "(", "0", ",", "width", "-", "mask_width", ")", "\n", "mask_y", "=", "y", "if", "y", "is", "not", "None", "else", "random", ".", "randint", "(", "0", ",", "height", "-", "mask_height", ")", "\n", "mask", "[", "mask_y", ":", "mask_y", "+", "mask_height", ",", "mask_x", ":", "mask_x", "+", "mask_width", "]", "=", "1", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.salt_and_pepper": [[36, 50], ["int", "numpy.zeros", "range", "mask.reshape.ravel", "numpy.random.shuffle", "mask.reshape.reshape", "math.sqrt", "range"], "function", ["None"], ["", "def", "salt_and_pepper", "(", "percent", ",", "height", ",", "width", ")", ":", "\n", "    ", "num_pixels", "=", "percent", "*", "height", "*", "width", "/", "100", "\n", "num_pixels", "=", "int", "(", "math", ".", "sqrt", "(", "num_pixels", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_pixels", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_pixels", ")", ":", "\n", "            ", "mask", "[", "i", "]", "[", "j", "]", "=", "1.0", "\n", "\n", "", "", "mask", "=", "mask", ".", "ravel", "(", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "(", "height", ",", "width", ")", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram": [[53, 60], ["x.size", "x.view", "x.view.transpose", "x.view.bmm"], "function", ["None"], ["", "def", "compute_gram", "(", "x", ")", ":", "\n", "    ", "b", ",", "ch", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "f", "=", "x", ".", "view", "(", "b", ",", "ch", ",", "w", "*", "h", ")", "\n", "f_T", "=", "f", ".", "transpose", "(", "1", ",", "2", ")", "\n", "G", "=", "f", ".", "bmm", "(", "f_T", ")", "/", "(", "h", "*", "w", "*", "ch", ")", "\n", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.postprocess": [[62, 67], ["img.permute.permute", "img.permute.int"], "function", ["None"], ["", "def", "postprocess", "(", "img", ")", ":", "\n", "# [0, 1] => [0, 255]", "\n", "    ", "img", "=", "img", "*", "255.0", "\n", "img", "=", "img", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "img", ".", "int", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.jigsaw": [[69, 82], ["image.clone", "int", "numpy.random.permutation", "math.floor", "range", "math.sqrt", "numpy.arange", "range", "math.sqrt", "math.floor", "math.floor", "math.ceil", "math.floor", "math.ceil", "math.floor", "math.ceil", "math.floor", "math.ceil"], "function", ["None"], ["", "def", "jigsaw", "(", "image", ",", "num_patches", ")", ":", "\n", "    ", "jumbled_data", "=", "image", ".", "clone", "(", ")", "\n", "sqrt_num_patches", "=", "int", "(", "math", ".", "sqrt", "(", "num_patches", ")", ")", "\n", "assert", "(", "math", ".", "sqrt", "(", "num_patches", ")", "**", "2", "-", "num_patches", ")", "==", "0", "\n", "perm", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "num_patches", ")", ")", "\n", "s", "=", "image", ".", "shape", "[", "2", "]", "\n", "patch_size", "=", "math", ".", "floor", "(", "s", "/", "sqrt_num_patches", ")", "\n", "\n", "for", "x", "in", "range", "(", "sqrt_num_patches", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "sqrt_num_patches", ")", ":", "\n", "            ", "l", ",", "m", "=", "math", ".", "floor", "(", "perm", "[", "sqrt_num_patches", "*", "x", "+", "y", "]", "/", "sqrt_num_patches", ")", ",", "perm", "[", "sqrt_num_patches", "*", "x", "+", "y", "]", "%", "sqrt_num_patches", "\n", "jumbled_data", "[", ":", ",", ":", ",", "math", ".", "floor", "(", "x", "*", "patch_size", ")", ":", "math", ".", "ceil", "(", "(", "x", "+", "1", ")", "*", "patch_size", ")", ",", "math", ".", "floor", "(", "y", "*", "patch_size", ")", ":", "math", ".", "ceil", "(", "(", "y", "+", "1", ")", "*", "patch_size", ")", "]", "=", "image", "[", ":", ",", ":", ",", "math", ".", "floor", "(", "l", "*", "patch_size", ")", ":", "math", ".", "ceil", "(", "(", "l", "+", "1", ")", "*", "patch_size", ")", ",", "math", ".", "floor", "(", "m", "*", "patch_size", ")", ":", "math", ".", "ceil", "(", "(", "m", "+", "1", ")", "*", "patch_size", ")", "]", "\n", "", "", "return", "jumbled_data", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.cosine_similarity": [[83, 87], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "cosine_similarity", "(", "image1", ",", "image2", ")", ":", "\n", "    ", "numerator", "=", "(", "torch", ".", "sum", "(", "image1", "*", "image2", ")", ")", "**", "2", "\n", "denominator", "=", "torch", ".", "sum", "(", "image1", "**", "2", ")", "*", "torch", ".", "sum", "(", "image2", "**", "2", ")", "\n", "return", "numerator", "/", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.irregular_masks": [[88, 95], ["PIL.Image.open", "np.asarray.resize", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.resize"], ["", "def", "irregular_masks", "(", "path", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "path", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "256", ",", "256", ")", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "img", "=", "(", "img", "==", "0.0", ")", ".", "astype", "(", "float", ")", "\n", "\n", "return", "img", "\n", "", ""]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.__init__": [[31, 43], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__"], ["  ", "def", "__init__", "(", "self", ",", "dataset", ",", "augment", "=", "True", ",", "training", "=", "True", ",", "transform", "=", "False", ")", ":", "\n", "    ", "super", "(", "Dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "self", ".", "input_size", "=", "256", "\n", "self", ".", "sigma", "=", "2.0", "\n", "self", ".", "edge", "=", "1", "\n", "self", ".", "mask", "=", "3", "\n", "self", ".", "nms", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.__getitem__": [[47, 86], ["dataset.Dataset.dataset.__getitem__", "numpy.asarray", "skimage.color.rgb2gray", "dataset.Dataset.load_mask", "dataset.Dataset.load_edge", "dataset.Dataset.resize", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "PIL.Image.fromarray", "torchvision.Compose.", "numpy.asarray", "skimage.color.rgb2gray", "dataset.Dataset.load_edge", "numpy.random.binomial", "dataset.Dataset.resize", "dataset.Dataset.to_tensor", "dataset.Dataset.to_tensor", "dataset.Dataset.to_tensor", "dataset.Dataset.to_tensor", "dataset.Dataset.to_tensor", "dataset.Dataset.to_tensor", "dataset.Dataset.to_tensor", "dataset.Dataset.to_tensor", "dataset.Dataset.to_tensor", "dataset.Dataset.to_tensor", "dataset.Dataset.to_tensor", "torchvision.RandomAffine", "torchvision.RandomAffine", "torchvision.RandomAffine", "torchvision.RandomAffine", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.ColorJitter", "torchvision.ColorJitter"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.__getitem__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.load_mask", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.load_edge", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.resize", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.load_edge", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.resize", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "image", ",", "mask", "=", "self", ".", "dataset", ".", "__getitem__", "(", "index", ")", "\n", "img", "=", "np", ".", "asarray", "(", "image", ")", "\n", "\n", "size", "=", "self", ".", "input_size", "\n", "\n", "if", "size", "!=", "0", ":", "\n", "      ", "img", "=", "self", ".", "resize", "(", "img", ",", "size", ",", "size", ")", "\n", "\n", "", "img_gray", "=", "rgb2gray", "(", "img", ")", "\n", "\n", "mask", "=", "self", ".", "load_mask", "(", "img", ",", "index", ")", "\n", "\n", "# load edge", "\n", "edge", "=", "self", ".", "load_edge", "(", "img_gray", ",", "mask", ")", "\n", "\n", "# augment data", "\n", "if", "self", ".", "augment", "and", "np", ".", "random", ".", "binomial", "(", "1", ",", "0.5", ")", ">", "0", ":", "\n", "      ", "img", "=", "img", "[", ":", ",", ":", ":", "-", "1", ",", "...", "]", "\n", "img_gray", "=", "img_gray", "[", ":", ",", ":", ":", "-", "1", ",", "...", "]", "\n", "edge", "=", "edge", "[", ":", ",", ":", ":", "-", "1", ",", "...", "]", "\n", "mask", "=", "mask", "[", ":", ",", ":", ":", "-", "1", ",", "...", "]", "\n", "\n", "", "if", "self", ".", "transform", ":", "\n", "      ", "transformation", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomAffine", "(", "180", ",", "scale", "=", "(", "0.5", ",", "1.5", ")", ")", ",", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.1", ",", "contrast", "=", "0.1", ",", "saturation", "=", "0.1", ",", "hue", "=", "0.1", ")", "]", ")", "\n", "img1", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "transformed_img", "=", "transformation", "(", "img1", ")", "\n", "transformed_img", "=", "np", ".", "asarray", "(", "transformed_img", ")", "\n", "\n", "if", "size", "!=", "0", ":", "\n", "        ", "transformed_img", "=", "self", ".", "resize", "(", "transformed_img", ",", "size", ",", "size", ")", "\n", "\n", "", "transformed_img_gray", "=", "rgb2gray", "(", "transformed_img", ")", "\n", "transformed_img_edge", "=", "self", ".", "load_edge", "(", "transformed_img_gray", ",", "mask", ")", "\n", "\n", "return", "self", ".", "to_tensor", "(", "img", ")", ",", "self", ".", "to_tensor", "(", "transformed_img", ")", ",", "self", ".", "to_tensor", "(", "transformed_img_gray", ")", ",", "self", ".", "to_tensor", "(", "transformed_img_edge", ")", ",", "self", ".", "to_tensor", "(", "img_gray", ")", ",", "self", ".", "to_tensor", "(", "edge", ")", ",", "self", ".", "to_tensor", "(", "mask", ")", "\n", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "to_tensor", "(", "img", ")", ",", "self", ".", "to_tensor", "(", "img_gray", ")", ",", "self", ".", "to_tensor", "(", "edge", ")", ",", "self", ".", "to_tensor", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.load_edge": [[88, 106], ["skimage.feature.canny().astype", "numpy.zeros().astype", "random.randint", "skimage.feature.canny", "numpy.zeros"], "methods", ["None"], ["", "", "def", "load_edge", "(", "self", ",", "img", ",", "mask", ")", ":", "\n", "      ", "sigma", "=", "self", ".", "sigma", "\n", "\n", "# in test mode images are masked (with masked regions),", "\n", "# using 'mask' parameter prevents canny to detect edges for the masked regions", "\n", "mask", "=", "None", "if", "self", ".", "training", "else", "(", "1", "-", "mask", "/", "255", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "# canny", "\n", "if", "self", ".", "edge", "==", "1", ":", "\n", "# no edge", "\n", "          ", "if", "sigma", "==", "-", "1", ":", "\n", "              ", "return", "np", ".", "zeros", "(", "img", ".", "shape", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "# random sigma", "\n", "", "if", "sigma", "==", "0", ":", "\n", "              ", "sigma", "=", "random", ".", "randint", "(", "1", ",", "4", ")", "\n", "\n", "", "return", "canny", "(", "img", ",", "sigma", "=", "sigma", ",", "mask", "=", "mask", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.load_mask": [[107, 127], ["random.randint", "random.randint", "random.randint", "utilities.create_mask", "utilities.salt_and_pepper", "os.listdir", "random.choice", "utilities.irregular_masks"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.create_mask", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.salt_and_pepper", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.irregular_masks"], ["", "", "def", "load_mask", "(", "self", ",", "img", ",", "index", ")", ":", "\n", "      ", "imgh", ",", "imgw", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "mask_type", "=", "self", ".", "mask", "\n", "\n", "height", "=", "random", ".", "randint", "(", "64", ",", "145", ")", "\n", "width", "=", "random", ".", "randint", "(", "64", ",", "145", ")", "\n", "percent", "=", "random", ".", "randint", "(", "10", ",", "90", ")", "\n", "\n", "# random block", "\n", "if", "mask_type", "==", "1", ":", "\n", "          ", "return", "create_mask", "(", "imgw", ",", "imgh", ",", "height", ",", "width", ")", "\n", "\n", "", "if", "mask_type", "==", "2", ":", "\n", "          ", "return", "salt_and_pepper", "(", "percent", ",", "imgw", ",", "imgh", ")", "\n", "\n", "", "if", "mask_type", "==", "3", ":", "\n", "          ", "ids", "=", "os", ".", "listdir", "(", "'irregular_masks'", ")", "\n", "random_id", "=", "random", ".", "choice", "(", "ids", ")", "\n", "image_path", "=", "'irregular_masks/'", "+", "random_id", "\n", "return", "irregular_masks", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor": [[129, 133], ["PIL.Image.fromarray", "torchvision.to_tensor().float", "torchvision.to_tensor().float", "torchvision.to_tensor().float", "torchvision.to_tensor().float", "torchvision.to_tensor", "torchvision.to_tensor", "torchvision.to_tensor", "torchvision.to_tensor"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.to_tensor"], ["", "", "def", "to_tensor", "(", "self", ",", "img", ")", ":", "\n", "      ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img_t", "=", "F", ".", "to_tensor", "(", "img", ")", ".", "float", "(", ")", "\n", "return", "img_t", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.resize": [[134, 147], ["scipy.misc.imresize", "numpy.minimum"], "methods", ["None"], ["", "def", "resize", "(", "self", ",", "img", ",", "height", ",", "width", ",", "centerCrop", "=", "True", ")", ":", "\n", "      ", "imgh", ",", "imgw", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "if", "centerCrop", "and", "imgh", "!=", "imgw", ":", "\n", "# center crop", "\n", "          ", "side", "=", "np", ".", "minimum", "(", "imgh", ",", "imgw", ")", "\n", "j", "=", "(", "imgh", "-", "side", ")", "//", "2", "\n", "i", "=", "(", "imgw", "-", "side", ")", "//", "2", "\n", "img", "=", "img", "[", "j", ":", "j", "+", "side", ",", "i", ":", "i", "+", "side", ",", "...", "]", "\n", "\n", "", "img", "=", "scipy", ".", "misc", ".", "imresize", "(", "img", ",", "[", "height", ",", "width", "]", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.create_iterator": [[150, 160], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "create_iterator", "(", "self", ",", "batch_size", ")", ":", "\n", "      ", "while", "True", ":", "\n", "          ", "sample_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "self", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "drop_last", "=", "True", "\n", ")", "\n", "\n", "for", "item", "in", "sample_loader", ":", "\n", "              ", "yield", "item", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.weights_init_normal": [[5, 15], ["classname.find", "torch.nn.init.normal", "classname.find", "torch.nn.init.normal", "classname.find", "torch.nn.init.normal", "torch.nn.init.constant"], "function", ["None"], ["def", "weights_init_normal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "#print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "0.02", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.weights_init_xavier": [[17, 27], ["classname.find", "torch.nn.init.xavier_normal", "classname.find", "torch.nn.init.xavier_normal", "classname.find", "torch.nn.init.normal", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_xavier", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "#print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_normal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.weights_init_kaiming": [[29, 39], ["classname.find", "torch.nn.init.kaiming_normal_", "classname.find", "torch.nn.init.kaiming_normal_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_"], "function", ["None"], ["", "", "def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "#print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.weights_init_orthogonal": [[41, 51], ["classname.find", "torch.nn.init.orthogonal", "classname.find", "torch.nn.init.orthogonal", "classname.find", "torch.nn.init.normal", "torch.nn.init.constant"], "function", ["None"], ["", "", "def", "weights_init_orthogonal", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "#print(classname)", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "orthogonal", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "normal", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "0.02", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.init_weights": [[53, 65], ["net.apply", "net.apply", "net.apply", "net.apply", "NotImplementedError"], "function", ["None"], ["", "", "def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ")", ":", "\n", "#print('initialization method [%s]' % init_type)", "\n", "    ", "if", "init_type", "==", "'normal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_normal", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_xavier", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "        ", "net", ".", "apply", "(", "weights_init_orthogonal", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.CBAM.__init__": [[22, 30], ["torch.Module.__init__", "attention.ChannelAttention", "attention.SpatialAttention", "attention.SpatialAttention", "attention.SpatialAttention"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels_in", ")", ":", "\n", "        ", "super", "(", "CBAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_channels_in", "=", "n_channels_in", "\n", "\n", "self", ".", "channel_attention", "=", "ChannelAttention", "(", "n_channels_in", ",", "1", ")", "\n", "self", ".", "spatial_attention1", "=", "SpatialAttention", "(", "3", ")", "\n", "self", ".", "spatial_attention2", "=", "SpatialAttention", "(", "7", ")", "\n", "self", ".", "spatial_attention3", "=", "SpatialAttention", "(", "11", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.CBAM.forward": [[31, 45], ["attention.CBAM.channel_attention", "attention.CBAM.spatial_attention1", "attention.CBAM.spatial_attention2", "attention.CBAM.spatial_attention3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "f", ")", ":", "\n", "        ", "chan_att", "=", "self", ".", "channel_attention", "(", "f", ")", "\n", "# print(chan_att.size())", "\n", "fp", "=", "chan_att", "*", "f", "\n", "# print(fp.size())", "\n", "spat_att1", "=", "self", ".", "spatial_attention1", "(", "fp", ")", "\n", "spat_att2", "=", "self", ".", "spatial_attention2", "(", "fp", ")", "\n", "spat_att3", "=", "self", ".", "spatial_attention3", "(", "fp", ")", "\n", "# print(spat_att.size())", "\n", "spat_att", "=", "torch", ".", "max", "(", "spat_att1", ",", "spat_att2", ")", "\n", "spat_att", "=", "torch", ".", "max", "(", "spat_att3", ",", "spat_att", ")", "\n", "fpp", "=", "spat_att", "*", "fp", "\n", "# print(fpp.size())", "\n", "return", "fpp", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.SpatialAttention.__init__": [[48, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ")", ":", "\n", "        ", "super", "(", "SpatialAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "\n", "assert", "kernel_size", "%", "2", "==", "1", ",", "\"Odd kernel size required\"", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "2", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "kernel_size", ",", "padding", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "/", "2", ")", ")", "\n", "# batchnorm", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.SpatialAttention.forward": [[56, 66], ["x.contiguous.contiguous.contiguous", "attention.SpatialAttention.agg_channel", "attention.SpatialAttention.agg_channel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attention.SpatialAttention.conv", "conv.repeat.repeat.repeat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "x.contiguous.contiguous.size"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.SpatialAttention.agg_channel", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.SpatialAttention.agg_channel"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "max_pool", "=", "self", ".", "agg_channel", "(", "x", ",", "\"max\"", ")", "\n", "avg_pool", "=", "self", ".", "agg_channel", "(", "x", ",", "\"avg\"", ")", "\n", "pool", "=", "torch", ".", "cat", "(", "[", "max_pool", ",", "avg_pool", "]", ",", "dim", "=", "1", ")", "\n", "conv", "=", "self", ".", "conv", "(", "pool", ")", "\n", "# batchnorm ????????????????????????????????????????????", "\n", "conv", "=", "conv", ".", "repeat", "(", "1", ",", "x", ".", "size", "(", ")", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "att", "=", "torch", ".", "sigmoid", "(", "conv", ")", "\n", "return", "att", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.SpatialAttention.agg_channel": [[67, 80], ["torch.avg_pool1d.size", "torch.avg_pool1d.view", "torch.avg_pool1d.permute", "torch.avg_pool1d.contiguous", "torch.avg_pool1d.permute", "torch.avg_pool1d.contiguous", "torch.avg_pool1d.view", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.max_pool1d", "torch.avg_pool1d", "torch.avg_pool1d", "torch.avg_pool1d", "torch.avg_pool1d", "torch.avg_pool1d"], "methods", ["None"], ["", "def", "agg_channel", "(", "self", ",", "x", ",", "pool", "=", "\"max\"", ")", ":", "\n", "        ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "c", ",", "h", "*", "w", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "if", "pool", "==", "\"max\"", ":", "\n", "            ", "x", "=", "TF", ".", "max_pool1d", "(", "x", ",", "c", ")", "\n", "", "elif", "pool", "==", "\"avg\"", ":", "\n", "            ", "x", "=", "TF", ".", "avg_pool1d", "(", "x", ",", "c", ")", "\n", "", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "b", ",", "1", ",", "h", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.ChannelAttention.__init__": [[83, 93], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels_in", ",", "reduction_ratio", ")", ":", "\n", "        ", "super", "(", "ChannelAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_channels_in", "=", "n_channels_in", "\n", "self", ".", "reduction_ratio", "=", "reduction_ratio", "\n", "self", ".", "middle_layer_size", "=", "self", ".", "n_channels_in", "\n", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "n_channels_in", ",", "self", ".", "middle_layer_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "middle_layer_size", ",", "self", ".", "n_channels_in", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.ChannelAttention.forward": [[96, 116], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "avg_pool.view.view.view", "max_pool.view.view.view", "attention.ChannelAttention.bottleneck", "attention.ChannelAttention.bottleneck", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "sig_pool.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "sig_pool.unsqueeze().unsqueeze.unsqueeze().unsqueeze.repeat", "x.size", "x.size", "avg_pool.view.view.size", "max_pool.view.view.size", "sig_pool.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "kernel", "=", "(", "x", ".", "size", "(", ")", "[", "2", "]", ",", "x", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "avg_pool", "=", "TF", ".", "avg_pool2d", "(", "x", ",", "kernel", ")", "\n", "max_pool", "=", "TF", ".", "max_pool2d", "(", "x", ",", "kernel", ")", "\n", "\n", "\n", "avg_pool", "=", "avg_pool", ".", "view", "(", "avg_pool", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "max_pool", "=", "max_pool", ".", "view", "(", "max_pool", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "\n", "avg_pool_bck", "=", "self", ".", "bottleneck", "(", "avg_pool", ")", "\n", "max_pool_bck", "=", "self", ".", "bottleneck", "(", "max_pool", ")", "\n", "\n", "pool_sum", "=", "avg_pool_bck", "+", "max_pool_bck", "\n", "\n", "sig_pool", "=", "torch", ".", "sigmoid", "(", "pool_sum", ")", "\n", "sig_pool", "=", "sig_pool", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "out", "=", "sig_pool", ".", "repeat", "(", "1", ",", "1", ",", "kernel", "[", "0", "]", ",", "kernel", "[", "1", "]", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention._GridAttentionBlockND.__init__": [[122, 170], ["torch.Module.__init__", "isinstance", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv_nd", "conv_nd", "conv_nd", "attention._GridAttentionBlockND.children", "isinstance", "conv_nd", "bn", "init_weights.init_weights.init_weights", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.init_weights.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "gating_channels", ",", "inter_channels", "=", "None", ",", "dimension", "=", "2", ",", "\n", "sub_sample_factor", "=", "(", "2", ",", "2", ")", ")", ":", "\n", "        ", "super", "(", "_GridAttentionBlockND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Downsampling rate for the input featuremap", "\n", "if", "isinstance", "(", "sub_sample_factor", ",", "tuple", ")", ":", "self", ".", "sub_sample_factor", "=", "sub_sample_factor", "\n", "elif", "isinstance", "(", "sub_sample_factor", ",", "list", ")", ":", "self", ".", "sub_sample_factor", "=", "tuple", "(", "sub_sample_factor", ")", "\n", "else", ":", "self", ".", "sub_sample_factor", "=", "tuple", "(", "[", "sub_sample_factor", "]", ")", "*", "dimension", "\n", "\n", "# Default parameter set", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "sub_sample_kernel_size", "=", "self", ".", "sub_sample_factor", "\n", "\n", "# Number of channels (pixel dimensions)", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "gating_channels", "=", "gating_channels", "\n", "self", ".", "inter_channels", "=", "inter_channels", "\n", "\n", "if", "self", ".", "inter_channels", "is", "None", ":", "\n", "          ", "self", ".", "inter_channels", "=", "in_channels", "//", "2", "\n", "if", "self", ".", "inter_channels", "==", "0", ":", "\n", "              ", "self", ".", "inter_channels", "=", "1", "\n", "\n", "", "conv_nd", "=", "nn", ".", "Conv2d", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "\n", "self", ".", "upsample_mode", "=", "'bilinear'", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplemented", "\n", "\n", "# Output transform", "\n", "", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "bn", "(", "self", ".", "in_channels", ")", ",", "\n", ")", "\n", "\n", "# Theta^T * x_ij + Phi^T * gating_signal + bias", "\n", "self", ".", "theta", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "self", ".", "sub_sample_kernel_size", ",", "stride", "=", "self", ".", "sub_sample_factor", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "phi", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "gating_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "psi", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n", "# Initialise weights", "\n", "for", "m", "in", "self", ".", "children", "(", ")", ":", "\n", "            ", "init_weights", "(", "m", ",", "init_type", "=", "'kaiming'", ")", "\n", "\n", "# Define the operation", "\n", "", "self", ".", "operation_function", "=", "self", ".", "_concatenation", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention._GridAttentionBlockND.forward": [[173, 181], ["attention._GridAttentionBlockND.operation_function"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "g", ")", ":", "\n", "        ", "'''\n        :param x: (b, c, t, h, w)\n        :param g: (b, g_d)\n        :return:\n        '''", "\n", "output", "=", "self", ".", "operation_function", "(", "x", ",", "g", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention._GridAttentionBlockND._concatenation": [[182, 206], ["x.size", "attention._GridAttentionBlockND.theta", "attention._GridAttentionBlockND.size", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "attention._GridAttentionBlockND.W", "g.size", "attention._GridAttentionBlockND.phi", "attention._GridAttentionBlockND.psi", "torch.upsample.expand_as"], "methods", ["None"], ["", "def", "_concatenation", "(", "self", ",", "x", ",", "g", ")", ":", "\n", "        ", "input_size", "=", "x", ".", "size", "(", ")", "\n", "batch_size", "=", "input_size", "[", "0", "]", "\n", "assert", "batch_size", "==", "g", ".", "size", "(", "0", ")", "\n", "\n", "# theta => (b, c, t, h, w) -> (b, i_c, t, h, w) -> (b, i_c, thw)", "\n", "# phi   => (b, g_d) -> (b, i_c)", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", "\n", "theta_x_size", "=", "theta_x", ".", "size", "(", ")", "\n", "\n", "# g (b, c, t', h', w') -> phi_g (b, i_c, t', h', w')", "\n", "#  Relu(theta_x + phi_g + bias) -> f = (b, i_c, thw) -> (b, i_c, t/s1, h/s2, w/s3)", "\n", "phi_g", "=", "TF", ".", "upsample", "(", "self", ".", "phi", "(", "g", ")", ",", "size", "=", "theta_x_size", "[", "2", ":", "]", ",", "mode", "=", "self", ".", "upsample_mode", ")", "\n", "f", "=", "TF", ".", "relu", "(", "theta_x", "+", "phi_g", ",", "inplace", "=", "True", ")", "\n", "\n", "#  psi^T * f -> (b, psi_i_c, t/s1, h/s2, w/s3)", "\n", "sigm_psi_f", "=", "TF", ".", "sigmoid", "(", "self", ".", "psi", "(", "f", ")", ")", "\n", "\n", "# upsample the attentions and multiply", "\n", "sigm_psi_f", "=", "TF", ".", "upsample", "(", "sigm_psi_f", ",", "size", "=", "input_size", "[", "2", ":", "]", ",", "mode", "=", "self", ".", "upsample_mode", ")", "\n", "y", "=", "sigm_psi_f", ".", "expand_as", "(", "x", ")", "*", "x", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "\n", "return", "W_y", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__": [[209, 216], ["attention._GridAttentionBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.attention.GridAttentionBlock2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "gating_channels", ",", "inter_channels", "=", "None", ",", "\n", "sub_sample_factor", "=", "(", "2", ",", "2", ")", ")", ":", "\n", "        ", "super", "(", "GridAttentionBlock2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "gating_channels", "=", "gating_channels", ",", "\n", "dimension", "=", "2", ",", "\n", "sub_sample_factor", "=", "sub_sample_factor", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.testing.testing": [[56, 91], ["edge_model.eval", "inpaint_model.eval", "print", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "edge_model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inpaint_model", "psnr1", "len", "images.cuda", "images_gray.cuda", "edges.cuda", "masks.cuda", "utilities.postprocess", "utilities.postprocess"], "function", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.postprocess", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.postprocess"], ["def", "testing", "(", "edge_model", ",", "inpaint_model", ",", "test_loader", ",", "postprocess", ",", "psnr1", ")", ":", "\n", "  ", "edge_model", ".", "eval", "(", ")", "\n", "inpaint_model", ".", "eval", "(", ")", "\n", "#  final_generator.eval()", "\n", "\n", "psnr", "=", "0.0", "\n", "\n", "for", "items", "in", "test_loader", ":", "\n", "    ", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "items", "\n", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "images", ".", "cuda", "(", ")", ",", "images_gray", ".", "cuda", "(", ")", ",", "edges", ".", "cuda", "(", ")", ",", "masks", ".", "cuda", "(", ")", "\n", "\n", "edges_masked", "=", "edges", "*", "(", "1", "-", "masks", ")", "\n", "images_gray_masked", "=", "images_gray", "*", "(", "1", "-", "masks", ")", "+", "masks", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "images_gray_masked", ",", "edges_masked", ",", "masks", ")", ",", "dim", "=", "1", ")", "\n", "e_outputs", "=", "edge_model", "(", "inputs", ")", "\n", "\n", "e_outputs", "=", "e_outputs", "*", "masks", "+", "edges", "*", "(", "1", "-", "masks", ")", "\n", "\n", "images_masked", "=", "(", "images", "*", "(", "1", "-", "masks", ")", ".", "float", "(", ")", ")", "+", "masks", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "images_masked", ",", "e_outputs", ")", ",", "dim", "=", "1", ")", "\n", "# inputs = images_masked", "\n", "outputs", "=", "inpaint_model", "(", "inputs", ")", "\n", "outputs_merged", "=", "(", "outputs", "*", "masks", ")", "+", "(", "images", "*", "(", "1", "-", "masks", ")", ")", "\n", "# outputs_merged = torch.cat((images_masked, outputs_merged), dim = 1)", "\n", "\n", "#    outputs_merged = final_generator(outputs_merged)", "\n", "\n", "#    outputs_merged = (outputs_merged * masks) + (images * (1 - masks))", "\n", "\n", "metric", "=", "psnr1", "(", "postprocess", "(", "images", ")", ",", "postprocess", "(", "outputs_merged", ")", ")", "\n", "\n", "psnr", "=", "psnr", "+", "metric", "\n", "\n", "", "psnr", "=", "psnr", "/", "len", "(", "test_loader", ")", "\n", "print", "(", "psnr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.testing.display": [[93, 123], ["edge_model.eval", "inpaint_model.eval", "dataset.__getitem__", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "edge_model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inpaint_model", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.utils.save_image", "torchvision.utils.save_image", "torchvision.utils.save_image", "torchvision.utils.save_image", "images.unsqueeze_().cuda", "images_gray.unsqueeze_().cuda", "edges.unsqueeze_().cuda", "masks.unsqueeze_().cuda", "images.detach().cpu", "images_masked.detach().cpu", "torch.cat.detach().cpu", "outputs_merged.detach().cpu", "str", "images.unsqueeze_", "images_gray.unsqueeze_", "edges.unsqueeze_", "masks.unsqueeze_", "images.detach", "images_masked.detach", "torch.cat.detach", "outputs_merged.detach"], "function", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.__getitem__"], ["", "def", "display", "(", "edge_model", ",", "inpaint_model", ",", "index", ",", "dataset", ",", "name", ")", ":", "\n", "  ", "edge_model", ".", "eval", "(", ")", "\n", "inpaint_model", ".", "eval", "(", ")", "\n", "#  final_generator.eval()", "\n", "\n", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "dataset", ".", "__getitem__", "(", "index", ")", "\n", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "images", ".", "unsqueeze_", "(", "0", ")", ".", "cuda", "(", ")", ",", "images_gray", ".", "unsqueeze_", "(", "0", ")", ".", "cuda", "(", ")", ",", "edges", ".", "unsqueeze_", "(", "0", ")", ".", "cuda", "(", ")", ",", "masks", ".", "unsqueeze_", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "edges_masked", "=", "edges", "*", "(", "1", "-", "masks", ")", "\n", "images_gray_masked", "=", "images_gray", "*", "(", "1", "-", "masks", ")", "+", "masks", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "images_gray_masked", ",", "edges_masked", ",", "masks", ")", ",", "dim", "=", "1", ")", "\n", "e_outputs", "=", "edge_model", "(", "inputs", ")", "\n", "\n", "e_outputs", "=", "e_outputs", "*", "masks", "+", "edges", "*", "(", "1", "-", "masks", ")", "\n", "\n", "images_masked", "=", "(", "images", "*", "(", "1", "-", "masks", ")", ".", "float", "(", ")", ")", "+", "masks", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "images_masked", ",", "e_outputs", ")", ",", "dim", "=", "1", ")", "\n", "#inputs = images_masked", "\n", "outputs", "=", "inpaint_model", "(", "inputs", ")", "\n", "\n", "outputs_merged", "=", "(", "outputs", "*", "masks", ")", "+", "(", "images", "*", "(", "1", "-", "masks", ")", ")", "\n", "#  outputs_merged2 = torch.cat((images_masked, outputs_merged), dim = 1)", "\n", "#  outputs_merged1 = final_generator(outputs_merged)", "\n", "\n", "#  outputs_merged1 = outputs_merged1 * masks + (images * (1 - masks))", "\n", "\n", "#  outputs = torch.cat((images.detach().cpu(), images_masked.detach().cpu(),outputs.detach().cpu(), outputs_merged1.detach().cpu()), axis = 0)", "\n", "outputs", "=", "torch", ".", "cat", "(", "(", "images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "images_masked", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "outputs_merged", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "outputs", ",", "str", "(", "name", ")", "+", "'.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.testing.display_jigsaw": [[126, 147], ["edge_model.eval", "inpaint_model.eval", "models.final_generator.eval", "dataset.__getitem__", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.utils.save_image", "torchvision.utils.save_image", "torchvision.utils.save_image", "torchvision.utils.save_image", "images.unsqueeze_().cuda", "images_gray.unsqueeze_().cuda", "edges.unsqueeze_().cuda", "masks.unsqueeze_().cuda", "images.detach().cpu", "jumbled_images.detach().cpu", "jumbled_outputs.detach().cpu", "images.unsqueeze_", "images_gray.unsqueeze_", "edges.unsqueeze_", "masks.unsqueeze_", "images.detach", "jumbled_images.detach", "jumbled_outputs.detach"], "function", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.dataset.Dataset.__getitem__"], ["", "def", "display_jigsaw", "(", "edge_model", ",", "inpaint_model", ",", "final_generator", ",", "index", ",", "dataset", ")", ":", "\n", "  ", "edge_model", ".", "eval", "(", ")", "\n", "inpaint_model", ".", "eval", "(", ")", "\n", "final_generator", ".", "eval", "(", ")", "\n", "\n", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "dataset", ".", "__getitem__", "(", "index", ")", "\n", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "images", ".", "unsqueeze_", "(", "0", ")", ".", "cuda", "(", ")", ",", "images_gray", ".", "unsqueeze_", "(", "0", ")", ".", "cuda", "(", ")", ",", "edges", ".", "unsqueeze_", "(", "0", ")", ".", "cuda", "(", ")", ",", "masks", ".", "unsqueeze_", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "#  jumbled_images = jigsaw(images, 16)", "\n", "#  jumbled_images1 = jigsaw(images, 16)", "\n", "#  jumbled_images = jumbled_images.cuda()", "\n", "\n", "images_masked", "=", "(", "images", "*", "(", "1", "-", "masks", ")", ".", "float", "(", ")", ")", "+", "masks", "\n", "\n", "#  jumbled_inputs = jumbled_images", "\n", "#  jumbled_outputs = final_generator(jumbled_inputs)", "\n", "\n", "outputs", "=", "torch", ".", "cat", "(", "(", "images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "jumbled_images", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "jumbled_outputs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "# outputs = torch.cat((images.detach().cpu(), images_masked.detach().cpu(), outputs.detach().cpu(), outputs_merged.detach().cpu()), axis = 0)", "\n", "\n", "torchvision", ".", "utils", ".", "save_image", "(", "outputs", ",", "'grid2.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.inpaint.train_inpainting": [[68, 169], ["edge_generator.eval", "inpaint_generator.train", "inpaint_discriminator.train", "enumerate", "inpaint_gen_optimizer.zero_grad", "inpaint_dis_optimizer.zero_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "edge_generator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inpaint_generator", "inpaint_generator.detach", "inpaint_discriminator", "inpaint_discriminator", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.expand_as", "adversarial_loss", "torch.tensor.expand_as", "adversarial_loss", "inpaint_discriminator", "torch.tensor.expand_as", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "inpaint_loss.append", "i_gen_loss.backward", "inpaint_gen_optimizer.step", "i_dis_loss.backward", "inpaint_dis_optimizer.step", "print", "images.cuda", "images_gray.cuda", "edges.cuda", "masks.cuda", "real_label.expand_as.cuda", "fake_label.expand_as.cuda", "adversarial_loss", "l1_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "vgg19", "vgg19", "vgg19", "vgg19", "utilities.compute_gram", "utilities.compute_gram", "utilities.compute_gram", "utilities.compute_gram", "utilities.compute_gram", "utilities.compute_gram", "utilities.compute_gram", "utilities.compute_gram", "real_label.expand_as.cuda"], "function", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.train", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.train", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram"], ["def", "train_inpainting", "(", "edge_generator", ",", "inpaint_generator", ",", "inpaint_discriminator", ",", "vgg19", ",", "train_loader", ",", "epoch", ",", "num_epochs", ",", "l1_loss", ",", "adversarial_loss", ",", "inpaint_gen_optimizer", ",", "inpaint_dis_optimizer", ",", "inpaint_loss", ")", ":", "\n", "### inpaint discriminator loss ###", "\n", "  ", "edge_generator", ".", "eval", "(", ")", "\n", "inpaint_generator", ".", "train", "(", ")", "\n", "inpaint_discriminator", ".", "train", "(", ")", "\n", "\n", "for", "i", ",", "items", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "    ", "inpaint_gen_optimizer", ".", "zero_grad", "(", ")", "\n", "inpaint_dis_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "items", "\n", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "images", ".", "cuda", "(", ")", ",", "images_gray", ".", "cuda", "(", ")", ",", "edges", ".", "cuda", "(", ")", ",", "masks", ".", "cuda", "(", ")", "\n", "\n", "edges_masked", "=", "edges", "*", "(", "1", "-", "masks", ")", "\n", "images_gray_masked", "=", "images_gray", "*", "(", "1", "-", "masks", ")", "+", "masks", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "images_gray_masked", ",", "edges_masked", ",", "masks", ")", ",", "dim", "=", "1", ")", "\n", "e_outputs", "=", "edge_generator", "(", "inputs", ")", "\n", "\n", "e_outputs", "=", "e_outputs", "*", "masks", "+", "edges", "*", "(", "1", "-", "masks", ")", "\n", "\n", "images_masked", "=", "images", "*", "(", "1", "-", "masks", ")", "+", "masks", "\n", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "images_masked", ",", "e_outputs", ")", ",", "dim", "=", "1", ")", "\n", "\n", "#  inputs = images_masked", "\n", "outputs", "=", "inpaint_generator", "(", "inputs", ")", "\n", "\n", "i_gen_loss", "=", "0", "\n", "i_dis_loss", "=", "0", "\n", "\n", "i_dis_input_real", "=", "images", "\n", "i_dis_input_fake", "=", "outputs", ".", "detach", "(", ")", "\n", "i_dis_real", ",", "_", "=", "inpaint_discriminator", "(", "i_dis_input_real", ")", "\n", "i_dis_fake", ",", "_", "=", "inpaint_discriminator", "(", "i_dis_input_fake", ")", "\n", "\n", "target_real_label", "=", "1.0", "\n", "target_fake_label", "=", "0.0", "\n", "real_label", "=", "torch", ".", "tensor", "(", "target_real_label", ")", "\n", "fake_label", "=", "torch", ".", "tensor", "(", "target_fake_label", ")", "\n", "\n", "i_dis_labels", "=", "real_label", ".", "expand_as", "(", "i_dis_real", ")", "\n", "i_dis_real_loss", "=", "adversarial_loss", "(", "i_dis_real", ",", "i_dis_labels", ".", "cuda", "(", ")", ")", "\n", "\n", "i_labels", "=", "fake_label", ".", "expand_as", "(", "i_dis_fake", ")", "\n", "i_dis_fake_loss", "=", "adversarial_loss", "(", "i_dis_fake", ",", "i_labels", ".", "cuda", "(", ")", ")", "\n", "\n", "i_dis_loss", "+=", "(", "i_dis_real_loss", "+", "i_dis_fake_loss", ")", "/", "2", "\n", "\n", "\n", "\n", "### inpaint generator adversarial loss ###", "\n", "i_gen_input_fake", "=", "outputs", "\n", "i_gen_fake", ",", "_", "=", "inpaint_discriminator", "(", "i_gen_input_fake", ")", "\n", "\n", "i_gen_labels", "=", "real_label", ".", "expand_as", "(", "i_gen_fake", ")", "\n", "i_gen_gan_loss", "=", "adversarial_loss", "(", "i_gen_fake", ",", "i_gen_labels", ".", "cuda", "(", ")", ")", "*", "0.1", "\n", "i_gen_loss", "+=", "i_gen_gan_loss", "\n", "\n", "\n", "### inpaint generator l1 loss ###", "\n", "i_gen_l1_loss", "=", "l1_loss", "(", "images", ",", "outputs", ")", "/", "torch", ".", "mean", "(", "masks", ")", "\n", "i_gen_loss", "+=", "i_gen_l1_loss", "\n", "\n", "\n", "\n", "### inpaint generator perceptual loss ###", "\n", "x_p_vgg", ",", "y_p_vgg", "=", "vgg19", "(", "outputs", ")", ",", "vgg19", "(", "images", ")", "\n", "\n", "content_loss", "=", "0.0", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu1_1'", "]", ",", "y_p_vgg", "[", "'relu1_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu2_1'", "]", ",", "y_p_vgg", "[", "'relu2_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu3_1'", "]", ",", "y_p_vgg", "[", "'relu3_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu4_1'", "]", ",", "y_p_vgg", "[", "'relu4_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu5_1'", "]", ",", "y_p_vgg", "[", "'relu5_1'", "]", ")", "\n", "\n", "content_loss", "=", "content_loss", "*", "0.1", "\n", "i_gen_loss", "+=", "content_loss", "\n", "\n", "\n", "### inpaint generator style loss ###", "\n", "x_vgg", ",", "y_vgg", "=", "vgg19", "(", "outputs", "*", "masks", ")", ",", "vgg19", "(", "images", "*", "masks", ")", "\n", "\n", "# Compute loss", "\n", "style_loss", "=", "0.0", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu2_2'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu2_2'", "]", ")", ")", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu3_4'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu3_4'", "]", ")", ")", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu4_4'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu4_4'", "]", ")", ")", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu5_2'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu5_2'", "]", ")", ")", "\n", "\n", "style_loss", "=", "style_loss", "*", "250", "\n", "i_gen_loss", "+=", "style_loss", "\n", "\n", "inpaint_loss", ".", "append", "(", "i_gen_loss", ")", "\n", "\n", "i_gen_loss", ".", "backward", "(", ")", "\n", "inpaint_gen_optimizer", ".", "step", "(", ")", "\n", "\n", "i_dis_loss", ".", "backward", "(", ")", "\n", "inpaint_dis_optimizer", ".", "step", "(", ")", "\n", "\n", "print", "(", "'Epoch : %d/%d \\t  Iters : %d  \\t Inpaint Generator Loss : %.4f \\t Inpaint discriminator loss : %.4f'", "%", "(", "epoch", "+", "1", ",", "num_epochs", ",", "i", ",", "i_gen_loss", ",", "i_dis_loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.inpaint.validation_inpaint": [[172, 260], ["edge_generator.eval", "inpaint_generator.eval", "inpaint_discriminator.eval", "inpaint_val_loss.append", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "edge_generator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inpaint_generator", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "inpaint_discriminator", "torch.tensor.expand_as", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "l1_loss", "print", "len", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "open", "open.write", "open.close", "images.cuda", "images_gray.cuda", "edges.cuda", "masks.cuda", "adversarial_loss", "l1_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "vgg19", "vgg19", "vgg19", "vgg19", "utilities.compute_gram", "utilities.compute_gram", "utilities.compute_gram", "utilities.compute_gram", "utilities.compute_gram", "utilities.compute_gram", "utilities.compute_gram", "utilities.compute_gram", "str", "real_label.expand_as.cuda", "inpaint_best_loss.item"], "function", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.utilities.compute_gram"], ["", "", "def", "validation_inpaint", "(", "edge_generator", ",", "inpaint_generator", ",", "inpaint_discriminator", ",", "vgg19", ",", "val_loader", ",", "epoch", ",", "l1_loss", ",", "adversarial_loss", ",", "inpaint_val_loss", ")", ":", "\n", "  ", "edge_generator", ".", "eval", "(", ")", "\n", "inpaint_generator", ".", "eval", "(", ")", "\n", "inpaint_discriminator", ".", "eval", "(", ")", "\n", "\n", "global", "inpaint_best_loss", "\n", "inpaint_val_loss", ".", "append", "(", "0", ")", "\n", "\n", "for", "i", ",", "items", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "    ", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "items", "\n", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "images", ".", "cuda", "(", ")", ",", "images_gray", ".", "cuda", "(", ")", ",", "edges", ".", "cuda", "(", ")", ",", "masks", ".", "cuda", "(", ")", "\n", "\n", "edges_masked", "=", "edges", "*", "(", "1", "-", "masks", ")", "\n", "images_gray_masked", "=", "images_gray", "*", "(", "1", "-", "masks", ")", "+", "masks", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "images_gray_masked", ",", "edges_masked", ",", "masks", ")", ",", "dim", "=", "1", ")", "\n", "e_outputs", "=", "edge_generator", "(", "inputs", ")", "\n", "\n", "e_outputs", "=", "e_outputs", "*", "masks", "+", "edges", "*", "(", "1", "-", "masks", ")", "\n", "\n", "images_masked", "=", "images", "*", "(", "1", "-", "masks", ")", "+", "masks", "\n", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "images_masked", ",", "e_outputs", ")", ",", "dim", "=", "1", ")", "\n", "# inputs = images_masked", "\n", "outputs", "=", "inpaint_generator", "(", "inputs", ")", "\n", "\n", "i_gen_loss", "=", "0", "\n", "\n", "target_real_label", "=", "1.0", "\n", "target_fake_label", "=", "0.0", "\n", "real_label", "=", "torch", ".", "tensor", "(", "target_real_label", ")", "\n", "fake_label", "=", "torch", ".", "tensor", "(", "target_fake_label", ")", "\n", "\n", "### inpaint generator adversarial loss ###", "\n", "i_gen_input_fake", "=", "outputs", "\n", "i_gen_fake", ",", "_", "=", "inpaint_discriminator", "(", "i_gen_input_fake", ")", "\n", "\n", "i_gen_labels", "=", "real_label", ".", "expand_as", "(", "i_gen_fake", ")", "\n", "i_gen_gan_loss", "=", "adversarial_loss", "(", "i_gen_fake", ",", "i_gen_labels", ".", "cuda", "(", ")", ")", "*", "0.1", "\n", "i_gen_loss", "+=", "i_gen_gan_loss", "\n", "\n", "\n", "### inpaint generator l1 loss ###", "\n", "i_gen_l1_loss", "=", "l1_loss", "(", "images", ",", "outputs", ")", "/", "torch", ".", "mean", "(", "masks", ")", "\n", "i_gen_loss", "+=", "i_gen_l1_loss", "\n", "\n", "\n", "### inpaint generator perceptual loss ###", "\n", "x_p_vgg", ",", "y_p_vgg", "=", "vgg19", "(", "outputs", ")", ",", "vgg19", "(", "images", ")", "\n", "\n", "content_loss", "=", "0.0", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu1_1'", "]", ",", "y_p_vgg", "[", "'relu1_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu2_1'", "]", ",", "y_p_vgg", "[", "'relu2_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu3_1'", "]", ",", "y_p_vgg", "[", "'relu3_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu4_1'", "]", ",", "y_p_vgg", "[", "'relu4_1'", "]", ")", "\n", "content_loss", "+=", "l1_loss", "(", "x_p_vgg", "[", "'relu5_1'", "]", ",", "y_p_vgg", "[", "'relu5_1'", "]", ")", "\n", "\n", "content_loss", "=", "content_loss", "*", "0.1", "\n", "i_gen_loss", "+=", "content_loss", "\n", "\n", "\n", "### inpaint generator style loss ###", "\n", "x_vgg", ",", "y_vgg", "=", "vgg19", "(", "outputs", "*", "masks", ")", ",", "vgg19", "(", "images", "*", "masks", ")", "\n", "\n", "# Compute loss", "\n", "style_loss", "=", "0.0", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu2_2'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu2_2'", "]", ")", ")", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu3_4'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu3_4'", "]", ")", ")", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu4_4'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu4_4'", "]", ")", ")", "\n", "style_loss", "+=", "l1_loss", "(", "compute_gram", "(", "x_vgg", "[", "'relu5_2'", "]", ")", ",", "compute_gram", "(", "y_vgg", "[", "'relu5_2'", "]", ")", ")", "\n", "\n", "style_loss", "=", "style_loss", "*", "250", "\n", "i_gen_loss", "+=", "style_loss", "\n", "\n", "inpaint_val_loss", "[", "-", "1", "]", "=", "inpaint_val_loss", "[", "-", "1", "]", "+", "i_gen_loss", ".", "data", "\n", "print", "(", "'Inpaint_Val_loss = %.4f'", "%", "(", "inpaint_val_loss", "[", "-", "1", "]", "/", "(", "i", "+", "1", ")", ")", ")", "\n", "\n", "", "inpaint_val_loss", "[", "-", "1", "]", "=", "inpaint_val_loss", "[", "-", "1", "]", "/", "len", "(", "val_loader", ")", "\n", "\n", "if", "inpaint_best_loss", ">", "inpaint_val_loss", "[", "-", "1", "]", ":", "\n", "    ", "inpaint_best_loss", "=", "inpaint_val_loss", "[", "-", "1", "]", "\n", "print", "(", "'Saving...'", ")", "\n", "\n", "state", "=", "{", "'inpaint_generator'", ":", "inpaint_generator", "}", "\n", "torch", ".", "save", "(", "state", ",", "'aerialphoto_rectangle_official_inpaint_best.ckpt.t7'", ")", "\n", "\n", "f", "=", "open", "(", "\"inpaint_best_loss.txt\"", ",", "\"w\"", ")", "\n", "f", ".", "write", "(", "str", "(", "inpaint_best_loss", ".", "item", "(", ")", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.edge.train_edge": [[69, 141], ["edge_generator.train", "edge_discriminator.train", "enumerate", "edge_gen_optimizer.zero_grad", "edge_dis_optimizer.zero_grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "edge_generator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "edge_discriminator", "edge_discriminator", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.expand_as", "adversarial_loss", "torch.tensor.expand_as", "adversarial_loss", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "edge_discriminator", "torch.tensor.expand_as", "adversarial_loss", "range", "edge_loss.append", "e_dis_loss.backward", "edge_dis_optimizer.step", "e_gen_loss.backward", "edge_gen_optimizer.step", "print", "images.cuda", "images_gray.cuda", "edges.cuda", "masks.cuda", "real_label.expand_as.cuda", "fake_label.expand_as.cuda", "real_label.expand_as.cuda", "len", "l1_loss", "edge_generator.detach", "e_dis_real_feat[].detach"], "function", ["home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.train", "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.global_gan.train"], ["def", "train_edge", "(", "edge_generator", ",", "edge_discriminator", ",", "dataloader", ",", "epoch", ",", "num_epochs", ",", "l1_loss", ",", "l2_loss", ",", "adversarial_loss", ",", "edge_gen_optimizer", ",", "edge_dis_optimizer", ",", "edge_loss", ")", ":", "\n", "\n", "  ", "edge_generator", ".", "train", "(", ")", "\n", "edge_discriminator", ".", "train", "(", ")", "\n", "\n", "for", "j", ",", "items", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "    ", "if", "j", "<", "15000", ":", "\n", "      ", "edge_gen_optimizer", ".", "zero_grad", "(", ")", "\n", "edge_dis_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "e_gen_loss", "=", "0", "\n", "e_dis_loss", "=", "0", "\n", "\n", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "items", "\n", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "images", ".", "cuda", "(", ")", ",", "images_gray", ".", "cuda", "(", ")", ",", "edges", ".", "cuda", "(", ")", ",", "masks", ".", "cuda", "(", ")", "\n", "\n", "edges_masked", "=", "edges", "*", "(", "1", "-", "masks", ")", "\n", "images_gray_masked", "=", "images_gray", "*", "(", "1", "-", "masks", ")", "+", "masks", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "images_gray_masked", ",", "edges_masked", ",", "masks", ")", ",", "dim", "=", "1", ")", "\n", "e_outputs", "=", "edge_generator", "(", "inputs", ")", "\n", "\n", "####  edge discriminator loss   ####", "\n", "e_dis_input_real", "=", "torch", ".", "cat", "(", "(", "images_gray", ",", "edges", ")", ",", "dim", "=", "1", ")", "\n", "e_dis_input_fake", "=", "torch", ".", "cat", "(", "(", "images_gray", ",", "e_outputs", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "e_dis_real", ",", "e_dis_real_feat", "=", "edge_discriminator", "(", "e_dis_input_real", ")", "\n", "e_dis_fake", ",", "e_dis_fake_feat", "=", "edge_discriminator", "(", "e_dis_input_fake", ")", "\n", "\n", "target_real_label", "=", "1.0", "\n", "target_fake_label", "=", "0.0", "\n", "real_label", "=", "torch", ".", "tensor", "(", "target_real_label", ")", "\n", "fake_label", "=", "torch", ".", "tensor", "(", "target_fake_label", ")", "\n", "\n", "e_dis_labels", "=", "real_label", ".", "expand_as", "(", "e_dis_real", ")", "\n", "e_dis_real_loss", "=", "adversarial_loss", "(", "e_dis_real", ",", "e_dis_labels", ".", "cuda", "(", ")", ")", "\n", "\n", "e_labels", "=", "fake_label", ".", "expand_as", "(", "e_dis_fake", ")", "\n", "e_dis_fake_loss", "=", "adversarial_loss", "(", "e_dis_fake", ",", "e_labels", ".", "cuda", "(", ")", ")", "\n", "\n", "e_dis_loss", "+=", "(", "e_dis_real_loss", "+", "e_dis_fake_loss", ")", "/", "2", "\n", "\n", "\n", "### edge generator loss #####", "\n", "e_gen_input_fake", "=", "torch", ".", "cat", "(", "(", "images_gray", ",", "e_outputs", ")", ",", "dim", "=", "1", ")", "\n", "e_gen_fake", ",", "e_gen_fake_feat", "=", "edge_discriminator", "(", "e_gen_input_fake", ")", "\n", "\n", "e_gen_labels", "=", "real_label", ".", "expand_as", "(", "e_gen_fake", ")", "\n", "e_gen_gan_loss", "=", "adversarial_loss", "(", "e_gen_fake", ",", "e_gen_labels", ".", "cuda", "(", ")", ")", "\n", "e_gen_loss", "+=", "e_gen_gan_loss", "\n", "\n", "\n", "\n", "\n", "### edge generator feature matching loss ###", "\n", "e_gen_fm_loss", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "e_dis_real_feat", ")", ")", ":", "\n", "        ", "e_gen_fm_loss", "+=", "l1_loss", "(", "e_gen_fake_feat", "[", "i", "]", ",", "e_dis_real_feat", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "e_gen_fm_loss", "=", "e_gen_fm_loss", "*", "10", "\n", "e_gen_loss", "+=", "e_gen_fm_loss", "\n", "\n", "edge_loss", ".", "append", "(", "e_gen_loss", ")", "\n", "\n", "e_dis_loss", ".", "backward", "(", ")", "\n", "edge_dis_optimizer", ".", "step", "(", ")", "\n", "\n", "e_gen_loss", ".", "backward", "(", ")", "\n", "edge_gen_optimizer", ".", "step", "(", ")", "\n", "\n", "print", "(", "'Epoch : %d/%d \\t  Iters : %d/99  \\t Edge Generator Loss : %.4f \\t Edge discriminator loss : %.4f'", "%", "(", "epoch", "+", "1", ",", "num_epochs", ",", "j", ",", "e_gen_loss", ",", "e_dis_loss", ")", ")", "\n", "\n", "", "else", ":", "\n", "      ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.advaitkumar3107_rsinet.None.edge.validation_edge": [[143, 214], ["edge_generator.eval", "edge_discriminator.eval", "edge_val_loss.append", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "edge_generator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "edge_discriminator", "edge_discriminator", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.expand_as", "adversarial_loss", "torch.tensor.expand_as", "adversarial_loss", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "edge_discriminator", "torch.tensor.expand_as", "adversarial_loss", "range", "print", "len", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "open", "open.write", "open.close", "images.cuda", "images_gray.cuda", "edges.cuda", "masks.cuda", "real_label.expand_as.cuda", "fake_label.expand_as.cuda", "real_label.expand_as.cuda", "len", "l1_loss", "str", "edge_generator.detach", "e_dis_real_feat[].detach", "edge_best_loss.item"], "function", ["None"], ["", "", "", "def", "validation_edge", "(", "edge_generator", ",", "edge_discriminator", ",", "val_loader", ",", "l1_loss", ",", "adversarial_loss", ",", "epoch", ",", "edge_val_loss", ")", ":", "\n", "  ", "edge_generator", ".", "eval", "(", ")", "\n", "edge_discriminator", ".", "eval", "(", ")", "\n", "\n", "global", "edge_best_loss", "\n", "edge_val_loss", ".", "append", "(", "0", ")", "\n", "\n", "for", "j", ",", "items", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "    ", "e_gen_loss", "=", "0", "\n", "e_dis_loss", "=", "0", "\n", "\n", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "items", "\n", "images", ",", "images_gray", ",", "edges", ",", "masks", "=", "images", ".", "cuda", "(", ")", ",", "images_gray", ".", "cuda", "(", ")", ",", "edges", ".", "cuda", "(", ")", ",", "masks", ".", "cuda", "(", ")", "\n", "\n", "edges_masked", "=", "edges", "*", "(", "1", "-", "masks", ")", "\n", "images_gray_masked", "=", "images_gray", "*", "(", "1", "-", "masks", ")", "+", "masks", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "images_gray_masked", ",", "edges_masked", ",", "masks", ")", ",", "dim", "=", "1", ")", "\n", "e_outputs", "=", "edge_generator", "(", "inputs", ")", "\n", "\n", "\n", "####  edge discriminator loss   ####", "\n", "e_dis_input_real", "=", "torch", ".", "cat", "(", "(", "images_gray", ",", "edges", ")", ",", "dim", "=", "1", ")", "\n", "e_dis_input_fake", "=", "torch", ".", "cat", "(", "(", "images_gray", ",", "e_outputs", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", "\n", "e_dis_real", ",", "e_dis_real_feat", "=", "edge_discriminator", "(", "e_dis_input_real", ")", "\n", "e_dis_fake", ",", "e_dis_fake_feat", "=", "edge_discriminator", "(", "e_dis_input_fake", ")", "\n", "\n", "target_real_label", "=", "1.0", "\n", "target_fake_label", "=", "0.0", "\n", "real_label", "=", "torch", ".", "tensor", "(", "target_real_label", ")", "\n", "fake_label", "=", "torch", ".", "tensor", "(", "target_fake_label", ")", "\n", "\n", "e_dis_labels", "=", "real_label", ".", "expand_as", "(", "e_dis_real", ")", "\n", "e_dis_real_loss", "=", "adversarial_loss", "(", "e_dis_real", ",", "e_dis_labels", ".", "cuda", "(", ")", ")", "\n", "\n", "e_labels", "=", "fake_label", ".", "expand_as", "(", "e_dis_fake", ")", "\n", "e_dis_fake_loss", "=", "adversarial_loss", "(", "e_dis_fake", ",", "e_labels", ".", "cuda", "(", ")", ")", "\n", "\n", "e_dis_loss", "+=", "(", "e_dis_real_loss", "+", "e_dis_fake_loss", ")", "/", "2", "\n", "\n", "\n", "### edge generator loss #####", "\n", "e_gen_input_fake", "=", "torch", ".", "cat", "(", "(", "images_gray", ",", "e_outputs", ")", ",", "dim", "=", "1", ")", "\n", "e_gen_fake", ",", "e_gen_fake_feat", "=", "edge_discriminator", "(", "e_gen_input_fake", ")", "\n", "\n", "e_gen_labels", "=", "real_label", ".", "expand_as", "(", "e_gen_fake", ")", "\n", "e_gen_gan_loss", "=", "adversarial_loss", "(", "e_gen_fake", ",", "e_gen_labels", ".", "cuda", "(", ")", ")", "\n", "e_gen_loss", "+=", "e_gen_gan_loss", "\n", "\n", "### edge generator feature matching loss ###", "\n", "e_gen_fm_loss", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "e_dis_real_feat", ")", ")", ":", "\n", "      ", "e_gen_fm_loss", "+=", "l1_loss", "(", "e_gen_fake_feat", "[", "i", "]", ",", "e_dis_real_feat", "[", "i", "]", ".", "detach", "(", ")", ")", "\n", "", "e_gen_fm_loss", "=", "e_gen_fm_loss", "*", "10", "\n", "e_gen_loss", "+=", "e_gen_fm_loss", "\n", "\n", "edge_val_loss", "[", "-", "1", "]", "=", "edge_val_loss", "[", "-", "1", "]", "+", "e_gen_loss", ".", "data", "\n", "print", "(", "'Val_loss = %.4f'", "%", "(", "edge_val_loss", "[", "-", "1", "]", "/", "(", "j", "+", "1", ")", ")", ")", "\n", "\n", "", "edge_val_loss", "[", "-", "1", "]", "=", "edge_val_loss", "[", "-", "1", "]", "/", "len", "(", "val_loader", ")", "\n", "\n", "if", "edge_best_loss", ">", "edge_val_loss", "[", "-", "1", "]", ":", "\n", "    ", "edge_best_loss", "=", "edge_val_loss", "[", "-", "1", "]", "\n", "print", "(", "'Saving...'", ")", "\n", "\n", "state", "=", "{", "'edge_generator'", ":", "edge_generator", ",", "'edge_discriminator'", ":", "edge_discriminator", "}", "\n", "torch", ".", "save", "(", "state", ",", "'aerialphoto_rectangle_official_edge_best.ckpt.t7'", ")", "\n", "\n", "f", "=", "open", "(", "\"edge_best_loss.txt\"", ",", "\"w\"", ")", "\n", "f", ".", "write", "(", "str", "(", "edge_best_loss", ".", "item", "(", ")", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]]}