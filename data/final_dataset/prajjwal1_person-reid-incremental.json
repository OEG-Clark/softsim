{"home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.clr.CyclicLR.__init__": [[4, 52], ["clr.CyclicLR.batch_step", "isinstance", "isinstance", "list", "isinstance", "isinstance", "list", "ValueError", "len", "len", "ValueError", "len", "len", "len", "ValueError", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.clr.CyclicLR.batch_step"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "base_lr", "=", "1e-3", ",", "max_lr", "=", "6e-3", ",", "\n", "step_size", "=", "2000", ",", "mode", "=", "'triangular'", ",", "gamma", "=", "1.", ",", "\n", "scale_fn", "=", "None", ",", "scale_mode", "=", "'cycle'", ",", "last_batch_iteration", "=", "-", "1", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "if", "isinstance", "(", "base_lr", ",", "list", ")", "or", "isinstance", "(", "base_lr", ",", "tuple", ")", ":", "\n", "            ", "if", "len", "(", "base_lr", ")", "!=", "len", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"expected {} base_lr, got {}\"", ".", "format", "(", "\n", "len", "(", "optimizer", ".", "param_groups", ")", ",", "len", "(", "base_lr", ")", ")", ")", "\n", "", "self", ".", "base_lrs", "=", "list", "(", "base_lr", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "base_lrs", "=", "[", "base_lr", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "\n", "", "if", "isinstance", "(", "max_lr", ",", "list", ")", "or", "isinstance", "(", "max_lr", ",", "tuple", ")", ":", "\n", "            ", "if", "len", "(", "max_lr", ")", "!=", "len", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"expected {} max_lr, got {}\"", ".", "format", "(", "\n", "len", "(", "optimizer", ".", "param_groups", ")", ",", "len", "(", "max_lr", ")", ")", ")", "\n", "", "self", ".", "max_lrs", "=", "list", "(", "max_lr", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_lrs", "=", "[", "max_lr", "]", "*", "len", "(", "optimizer", ".", "param_groups", ")", "\n", "\n", "", "self", ".", "step_size", "=", "step_size", "\n", "\n", "if", "mode", "not", "in", "[", "'triangular'", ",", "'triangular2'", ",", "'exp_range'", "]", "and", "scale_fn", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'mode is invalid and scale_fn is None'", ")", "\n", "\n", "", "self", ".", "mode", "=", "mode", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n", "if", "scale_fn", "is", "None", ":", "\n", "            ", "if", "self", ".", "mode", "==", "'triangular'", ":", "\n", "                ", "self", ".", "scale_fn", "=", "self", ".", "_triangular_scale_fn", "\n", "self", ".", "scale_mode", "=", "'cycle'", "\n", "", "elif", "self", ".", "mode", "==", "'triangular2'", ":", "\n", "                ", "self", ".", "scale_fn", "=", "self", ".", "_triangular2_scale_fn", "\n", "self", ".", "scale_mode", "=", "'cycle'", "\n", "", "elif", "self", ".", "mode", "==", "'exp_range'", ":", "\n", "                ", "self", ".", "scale_fn", "=", "self", ".", "_exp_range_scale_fn", "\n", "self", ".", "scale_mode", "=", "'iterations'", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "scale_fn", "=", "scale_fn", "\n", "self", ".", "scale_mode", "=", "scale_mode", "\n", "\n", "", "self", ".", "batch_step", "(", "last_batch_iteration", "+", "1", ")", "\n", "self", ".", "last_batch_iteration", "=", "last_batch_iteration", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.clr.CyclicLR.batch_step": [[53, 59], ["zip", "clr.CyclicLR.get_lr"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.clr.CyclicLR.get_lr"], ["", "def", "batch_step", "(", "self", ",", "batch_iteration", "=", "None", ")", ":", "\n", "        ", "if", "batch_iteration", "is", "None", ":", "\n", "            ", "batch_iteration", "=", "self", ".", "last_batch_iteration", "+", "1", "\n", "", "self", ".", "last_batch_iteration", "=", "batch_iteration", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "get_lr", "(", ")", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.clr.CyclicLR._triangular_scale_fn": [[60, 62], ["None"], "methods", ["None"], ["", "", "def", "_triangular_scale_fn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.clr.CyclicLR._triangular2_scale_fn": [[63, 65], ["None"], "methods", ["None"], ["", "def", "_triangular2_scale_fn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "1", "/", "(", "2.", "**", "(", "x", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.clr.CyclicLR._exp_range_scale_fn": [[66, 68], ["None"], "methods", ["None"], ["", "def", "_exp_range_scale_fn", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "gamma", "**", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.clr.CyclicLR.get_lr": [[69, 84], ["float", "numpy.floor", "numpy.abs", "zip", "lrs.append", "numpy.maximum", "clr.CyclicLR.scale_fn", "clr.CyclicLR.scale_fn"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "step_size", "=", "float", "(", "self", ".", "step_size", ")", "\n", "cycle", "=", "np", ".", "floor", "(", "1", "+", "self", ".", "last_batch_iteration", "/", "(", "2", "*", "step_size", ")", ")", "\n", "x", "=", "np", ".", "abs", "(", "self", ".", "last_batch_iteration", "/", "step_size", "-", "2", "*", "cycle", "+", "1", ")", "\n", "\n", "lrs", "=", "[", "]", "\n", "param_lrs", "=", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "base_lrs", ",", "self", ".", "max_lrs", ")", "\n", "for", "param_group", ",", "base_lr", ",", "max_lr", "in", "param_lrs", ":", "\n", "            ", "base_height", "=", "(", "max_lr", "-", "base_lr", ")", "*", "np", ".", "maximum", "(", "0", ",", "(", "1", "-", "x", ")", ")", "\n", "if", "self", ".", "scale_mode", "==", "'cycle'", ":", "\n", "                ", "lr", "=", "base_lr", "+", "base_height", "*", "self", ".", "scale_fn", "(", "cycle", ")", "\n", "", "else", ":", "\n", "                ", "lr", "=", "base_lr", "+", "base_height", "*", "self", ".", "scale_fn", "(", "self", ".", "last_batch_iteration", ")", "\n", "", "lrs", ".", "append", "(", "lr", ")", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.transforms.Random2DTranslation.__init__": [[16, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "height", ",", "width", ",", "p", "=", "0.5", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "height", "=", "height", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.transforms.Random2DTranslation.__call__": [[22, 39], ["img.resize", "int", "int", "img.resize.crop", "random.uniform", "img.resize", "int", "int", "round", "round", "round", "round", "random.uniform", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL Image): Image to be cropped.\n        Returns:\n            PIL Image: Cropped image.\n        \"\"\"", "\n", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "p", ":", "\n", "            ", "return", "img", ".", "resize", "(", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "self", ".", "interpolation", ")", "\n", "", "new_width", ",", "new_height", "=", "int", "(", "round", "(", "self", ".", "width", "*", "1.125", ")", ")", ",", "int", "(", "round", "(", "self", ".", "height", "*", "1.125", ")", ")", "\n", "resized_img", "=", "img", ".", "resize", "(", "(", "new_width", ",", "new_height", ")", ",", "self", ".", "interpolation", ")", "\n", "x_maxrange", "=", "new_width", "-", "self", ".", "width", "\n", "y_maxrange", "=", "new_height", "-", "self", ".", "height", "\n", "x1", "=", "int", "(", "round", "(", "random", ".", "uniform", "(", "0", ",", "x_maxrange", ")", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "random", ".", "uniform", "(", "0", ",", "y_maxrange", ")", ")", ")", "\n", "croped_img", "=", "resized_img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "self", ".", "width", ",", "y1", "+", "self", ".", "height", ")", ")", "\n", "return", "croped_img", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.covariance_ensembling.Flatten": [[107, 109], ["input.contiguous().view", "input.size", "input.contiguous"], "function", ["None"], ["def", "Flatten", "(", "input", ")", ":", "\n", "        ", "return", "input", ".", "contiguous", "(", ")", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.covariance_ensembling.get_activation": [[112, 116], ["output.detach"], "function", ["None"], ["def", "get_activation", "(", "name", ")", ":", "\n", "    ", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "        ", "activation", "[", "name", "]", "=", "output", ".", "detach", "(", ")", "\n", "", "return", "hook", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.covariance_ensembling.train": [[118, 297], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "loss.CrossEntropy", "model.fc0.train", "model.base.train", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "list", "numpy.zeros", "range", "bmask.append", "range", "l_all_pos.append", "l_all_neg.append", "utils.AverageMeter.update", "model", "f.permute.permute", "torch.AdaptiveAvgPool2d", "nn.AdaptiveAvgPool2d.", "f.permute.permute", "range", "range", "covariance_ensembling.Flatten", "torch.nn.functional.normalize", "covariance_ensembling.Flatten", "torch.nn.functional.normalize", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.relu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "pids.cuda.cuda", "isinstance", "optim.zero_grad", "loss.backward", "optim.step", "utils.AverageMeter.update", "time.time", "utils.AverageMeter.update", "set", "len", "range", "range", "range", "len", "range", "imgs.cuda", "len", "torch.sub", "torch.sub", "torch.sub", "len", "torch.sub", "torch.sub", "torch.sub", "loss.DeepSuperVision", "loss.CrossEntropy.", "loss.item", "pids.cuda.size", "print", "len", "len", "len", "len", "l_batch_pos.append", "l_batch_neg.append", "time.time", "time.time", "l5.append", "len"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.Flatten", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.Flatten", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.DeepSuperVision"], ["", "def", "train", "(", "epoch", ",", "model", ",", "optim", ",", "trainloader", ")", ":", "\n", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "cross_entropy", "=", "CrossEntropy", "(", "num_classes", "=", "num_classes", ")", "\n", "#triplet_loss_fn = TripletLoss(margin=margin)", "\n", "\n", "model", ".", "fc0", ".", "train", "(", "True", ")", "\n", "#model.fc1.train(True)  ", "\n", "\n", "\n", "\n", "model", ".", "base", ".", "train", "(", "True", ")", "\n", "\n", "################################################3", "\n", "person_per_batch", "=", "8", "\n", "imgs_per_person", "=", "4", "\n", "\n", "\n", "bmask", "=", "[", "]", "\n", "l_all_pos", "=", "[", "]", "\n", "l_all_neg", "=", "[", "]", "\n", "pos_targets", "=", "torch", ".", "Tensor", "(", ")", "\n", "neg_targets", "=", "torch", ".", "Tensor", "(", ")", "\n", "C_pos", "=", "torch", ".", "zeros", "(", "[", "train_batch", ",", "256", ",", "2", ",", "4", "]", ",", "device", "=", "device", ")", "\n", "C_neg", "=", "torch", ".", "zeros", "(", "[", "train_batch", ",", "256", ",", "2", ",", "4", "]", ",", "device", "=", "device", ")", "\n", "###################################", "\n", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "#imgs,pids = imgs.cuda(), pids.cuda()", "\n", "        ", "pids", "=", "torch", ".", "Tensor", ".", "numpy", "(", "pids", ")", "\n", "camids", "=", "torch", ".", "Tensor", ".", "numpy", "(", "camids", ")", "\n", "uid", "=", "list", "(", "set", "(", "pids", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "[", "2", "*", "person_per_batch", ",", "person_per_batch", "*", "imgs_per_person", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "uid", ")", ")", ":", "\n", "            ", "sel", "=", "uid", "[", "i", "]", "\n", "# print(sel)", "\n", "pos", "=", "-", "1", "\n", "neg", "=", "-", "1", "\n", "k", "=", "-", "1", "\n", "for", "j", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "if", "(", "pids", "[", "j", "]", "==", "sel", ")", ":", "\n", "                    ", "k", "=", "j", "\n", "break", "\n", "\n", "", "", "for", "j", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "if", "(", "pids", "[", "k", "]", "==", "pids", "[", "j", "]", "and", "camids", "[", "k", "]", "!=", "camids", "[", "j", "]", ")", ":", "# Same IDs and diff cam IDs", "\n", "                    ", "pos", "=", "j", "#Postive        ", "\n", "break", "\n", "\n", "", "", "for", "j", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "if", "(", "pids", "[", "k", "]", "!=", "pids", "[", "j", "]", ")", ":", "#Negative                # Diff Cam IDs", "\n", "                    ", "neg", "=", "j", "\n", "break", "\n", "\n", "", "", "mask", "[", "2", "*", "i", "]", "[", "k", "]", "=", "1", "\n", "mask", "[", "2", "*", "i", "]", "[", "pos", "]", "=", "1", "\n", "mask", "[", "2", "*", "i", "+", "1", "]", "[", "k", "]", "=", "1", "\n", "mask", "[", "2", "*", "i", "+", "1", "]", "[", "neg", "]", "=", "1", "\n", "\n", "", "bmask", ".", "append", "(", "mask", ")", "\n", "#bmask = np.asarray(bmask)", "\n", "#print(bmask.shape)", "\n", "#bmask = np.asarray(bmask)", "\n", "\n", "l_batch_pos", "=", "[", "]", "\n", "l_batch_neg", "=", "[", "]", "\n", "kl", "=", "mask", "#bmask[batch]", "\n", "for", "i", "in", "range", "(", "len", "(", "kl", ")", ")", ":", "\n", "            ", "l5", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "kl", "[", "i", "]", ")", ")", ":", "\n", "                ", "if", "(", "kl", "[", "i", "]", "[", "j", "]", "==", "1", ")", ":", "\n", "                    ", "l5", ".", "append", "(", "j", ")", "\n", "", "", "if", "i", "%", "2", "<", "1", ":", "\n", "                ", "l_batch_pos", ".", "append", "(", "l5", ")", "\n", "", "else", ":", "\n", "                ", "l_batch_neg", ".", "append", "(", "l5", ")", "\n", "", "", "l_all_pos", ".", "append", "(", "l_batch_pos", ")", "\n", "l_all_neg", ".", "append", "(", "l_batch_neg", ")", "\n", "\n", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "clf_outputs", "=", "model", "(", "imgs", ".", "cuda", "(", ")", ")", "\n", "f", "=", "(", "activation", "[", "'fc0.conv2'", "]", "+", "activation", "[", "'base'", "]", ")", "/", "2", "\n", "f", "=", "f", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "m", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "256", ",", "2", ")", ")", "\n", "f", "=", "m", "(", "f", ")", "\n", "f", "=", "f", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "output_fc0", "=", "\"fc0\"", "\n", "#output_fc1 = \"fc1\"", "\n", "\n", "fc0", "=", "clf_outputs", "[", "output_fc0", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "l_batch_pos", ")", ")", ":", "\n", "            ", "pos_idx0", "=", "l_batch_pos", "[", "i", "]", "[", "0", "]", "\n", "pos_idx1", "=", "l_batch_pos", "[", "i", "]", "[", "1", "]", "\n", "#print(f[pos_idx0].shape)", "\n", "pos_targets", "=", "torch", ".", "sub", "(", "f", "[", "pos_idx1", "]", ",", "f", "[", "pos_idx0", "]", ")", "\n", "C_pos", "+=", "pos_targets", "\n", "#print(pos_targets.shape)", "\n", "#pos_targets = torch.Tensor(pos_targets)", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "l_batch_neg", ")", ")", ":", "\n", "            ", "neg_idx0", "=", "l_batch_neg", "[", "i", "]", "[", "0", "]", "\n", "neg_idx1", "=", "l_batch_neg", "[", "i", "]", "[", "1", "]", "\n", "neg_targets", "=", "torch", ".", "sub", "(", "f", "[", "neg_idx1", "]", ",", "f", "[", "neg_idx0", "]", ")", "\n", "C_neg", "+=", "neg_targets", "\n", "\n", "#if batch==0:", "\n", "", "g", "=", "Flatten", "(", "C_pos", ")", "\n", "g", "=", "F", ".", "normalize", "(", "g", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "#  (bs,2048)", "\n", "#else:", "\n", "#    g = 0.95*Flatten(C_pos) + 0.05*t1", "\n", "#    x = F.normalize(g, p=2, dim=1)        #  (bs,2048) ", "\n", "#t1 = g    ", "\n", "#print(g.shape)", "\n", "#if batch==0:", "\n", "y", "=", "Flatten", "(", "C_neg", ")", "\n", "y", "=", "F", ".", "normalize", "(", "y", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "#else:", "\n", "#    y = 0.95*Flatten(C_neg) + 0.05*t2", "\n", "#    y = F.normalize(y, p=2, dim=1) ", "\n", "#t2 = y", "\n", "u", "=", "g", "-", "y", "# (bs,2048)", "\n", "v", "=", "torch", ".", "unsqueeze", "(", "u", ",", "2", ")", "# (64,2048,1)", "\n", "w", "=", "v", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (64,1,2048)", "\n", "x_net", "=", "torch", ".", "matmul", "(", "v", ",", "w", ")", "# (64,2048,2048)   ", "\n", "y", "=", "torch", ".", "sum", "(", "x_net", ")", "\n", "y", "=", "F", ".", "relu", "(", "y", ")", "\n", "alpha", "=", "1e-9", "\n", "beta", "=", "0", "\n", "lamb", "=", "1.5", "\n", "covariance_loss", "=", "lamb", "*", "(", "alpha", "*", "y", "-", "beta", ")", "\n", "\n", "pids", "=", "torch", ".", "from_numpy", "(", "pids", ")", "\n", "pids", "=", "pids", ".", "cuda", "(", ")", "\n", "\n", "\n", "if", "isinstance", "(", "fc0", ",", "tuple", ")", ":", "\n", "            ", "cross_entropy_loss", "=", "DeepSuperVision", "(", "cross_entropy", ",", "fc0", ",", "pids", ")", "\n", "", "else", ":", "\n", "            ", "cross_entropy_loss", "=", "cross_entropy", "(", "fc0", ",", "pids", ")", "\n", "", "\"\"\"\n        if isinstance(f,tuple):\n            triplet = DeepSuperVision(triplet_loss_fn,f,pids)\n        else:\n            triplet = triplet_loss_fn(f,pids)\n        \"\"\"", "\n", "#print(\"xent\", cross_entropy_loss)", "\n", "#print(\"covariance\", covariance_loss)", "\n", "loss", "=", "cross_entropy_loss", "+", "covariance_loss", "\n", "#print(\"xent\", cross_entropy_loss)", "\n", "#print(\"covariance_loss\", covariance_loss)", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "(", "batch", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "batch", "+", "1", ",", "len", "(", "trainloader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "######################################################################################################", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.covariance_ensembling.test": [[298, 374], ["utils.AverageMeter", "model.eval", "print", "print", "distmat.numpy.addmm_", "distmat.numpy.numpy", "print", "metrics.evaluate", "print", "print", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "time.time", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "torch.cat.size", "torch.cat.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.cat.t", "print", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "fc0.data.cpu.data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "fc0.data.cpu.data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "time.time", "time.time", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.metrics.evaluate", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update"], ["", "", "", "def", "test", "(", "model", ",", "queryloader", ",", "galleryloader", ",", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "qf", ",", "q_pids", ",", "q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "fc0_preds", "=", "model", "(", "imgs", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "output_fc0", "=", "\"fc0\"", "\n", "#output_fc1 = \"fc1\"", "\n", "\n", "fc0", "=", "fc0_preds", "[", "output_fc0", "]", "\n", "fc0", "=", "fc0", ".", "data", ".", "cpu", "(", ")", "\n", "\n", "qf", ".", "append", "(", "fc0", ")", "\n", "q_pids", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "", "qf", "=", "torch", ".", "cat", "(", "qf", ",", "0", ")", "\n", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for query set, obtained {}-by-{} matrix\"", ".", "format", "(", "qf", ".", "size", "(", "0", ")", ",", "qf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "gf", ",", "g_pids", ",", "g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "fc0_preds", "=", "model", "(", "imgs", ")", "\n", "\n", "output_fc0", "=", "\"fc0\"", "\n", "# output_fc = \"fc1\"", "\n", "fc0", "=", "fc0_preds", "[", "output_fc0", "]", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "fc0", "=", "fc0", ".", "data", ".", "cpu", "(", ")", "\n", "gf", ".", "append", "(", "fc0", ")", "\n", "g_pids", ".", "extend", "(", "pids", ")", "\n", "g_camids", ".", "extend", "(", "camids", ")", "\n", "", "gf", "=", "torch", ".", "cat", "(", "gf", ",", "0", ")", "\n", "g_pids", "=", "np", ".", "asarray", "(", "g_pids", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "g_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for gallery set, obtained {}-by-{} matrix\"", ".", "format", "(", "gf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "1", ")", ")", ")", "\n", "##############################################################################################################################", "\n", "", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "\n", "m", ",", "n", "=", "qf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "0", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "qf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "qf", ",", "gf", ".", "t", "(", ")", ")", "\n", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "\"Computing CMC and mAP\"", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "use_metric_cuhk03", "=", "use_metric_cuhk03", ")", "\n", "\n", "print", "(", "\"Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.Market1501.__init__": [[21, 54], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "dataset_manager.Market1501._check_before_run", "dataset_manager.Market1501._process_dir", "dataset_manager.Market1501._process_dir", "dataset_manager.Market1501._process_dir", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.DukeMTMCreID._check_before_run", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.DukeMTMCreID._process_dir", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.DukeMTMCreID._process_dir", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.DukeMTMCreID._process_dir"], ["def", "__init__", "(", "self", ",", "root", "=", "'data'", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_test'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", ",", "num_train_pids", ",", "num_train_imgs", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "query", ",", "num_query_pids", ",", "num_query_imgs", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", ",", "num_gallery_pids", ",", "num_gallery_imgs", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_imgs", "=", "num_train_imgs", "+", "num_query_imgs", "+", "num_gallery_imgs", "\n", "\n", "print", "(", "\"=> Market1501 loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_imgs", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_imgs", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_imgs", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_imgs", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.Market1501._check_before_run": [[55, 65], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.Market1501._process_dir": [[66, 90], ["glob.glob", "re.compile", "set", "len", "len", "os.join", "os.join", "map", "set.add", "map", "dataset.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "continue", "# junk images are just ignored", "\n", "assert", "0", "<=", "pid", "<=", "1501", "# pid == 0 means background", "\n", "assert", "1", "<=", "camid", "<=", "6", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "num_pids", "=", "len", "(", "pid_container", ")", "\n", "num_imgs", "=", "len", "(", "dataset", ")", "\n", "return", "dataset", ",", "num_pids", ",", "num_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.CUHK03.__init__": [[95, 160], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "dataset_manager.CUHK03._check_before_run", "dataset_manager.CUHK03._preprocess", "utils.read_json", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "len", "len"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.DukeMTMCreID._check_before_run", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.CUHK03._preprocess", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.read_json"], ["def", "__init__", "(", "self", ",", "root", "=", "'data'", ",", "split_id", "=", "0", ",", "cuhk03_labeled", "=", "False", ",", "cuhk03_classic_split", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "data_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'cuhk03_release'", ")", "\n", "self", ".", "raw_mat_path", "=", "osp", ".", "join", "(", "self", ".", "data_dir", ",", "'cuhk-03.mat'", ")", "\n", "\n", "self", ".", "imgs_detected_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'images_detected'", ")", "\n", "self", ".", "imgs_labeled_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'images_labeled'", ")", "\n", "\n", "self", ".", "split_classic_det_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'splits_classic_detected.json'", ")", "\n", "self", ".", "split_classic_lab_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'splits_classic_labeled.json'", ")", "\n", "\n", "self", ".", "split_new_det_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'splits_new_detected.json'", ")", "\n", "self", ".", "split_new_lab_json_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'splits_new_labeled.json'", ")", "\n", "\n", "self", ".", "split_new_det_mat_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'cuhk03_new_protocol_config_detected.mat'", ")", "\n", "self", ".", "split_new_lab_mat_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'cuhk03_new_protocol_config_labeled.mat'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "self", ".", "_preprocess", "(", ")", "\n", "\n", "if", "cuhk03_labeled", ":", "\n", "            ", "image_type", "=", "'labeled'", "\n", "split_path", "=", "self", ".", "split_classic_lab_json_path", "if", "cuhk03_classic_split", "else", "self", ".", "split_new_lab_json_path", "\n", "", "else", ":", "\n", "            ", "image_type", "=", "'detected'", "\n", "split_path", "=", "self", ".", "split_classic_det_json_path", "if", "cuhk03_classic_split", "else", "self", ".", "split_new_det_json_path", "\n", "\n", "", "splits", "=", "read_json", "(", "split_path", ")", "\n", "assert", "split_id", "<", "len", "(", "splits", ")", ",", "\"Condition split_id ({}) < len(splits) ({}) is false\"", ".", "format", "(", "split_id", ",", "len", "(", "splits", ")", ")", "\n", "split", "=", "splits", "[", "split_id", "]", "\n", "print", "(", "\"Split index = {}\"", ".", "format", "(", "split_id", ")", ")", "\n", "\n", "train", "=", "split", "[", "'train'", "]", "\n", "query", "=", "split", "[", "'query'", "]", "\n", "gallery", "=", "split", "[", "'gallery'", "]", "\n", "\n", "num_train_pids", "=", "split", "[", "'num_train_pids'", "]", "\n", "num_query_pids", "=", "split", "[", "'num_query_pids'", "]", "\n", "num_gallery_pids", "=", "split", "[", "'num_gallery_pids'", "]", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "\n", "num_train_imgs", "=", "split", "[", "'num_train_imgs'", "]", "\n", "num_query_imgs", "=", "split", "[", "'num_query_imgs'", "]", "\n", "num_gallery_imgs", "=", "split", "[", "'num_gallery_imgs'", "]", "\n", "num_total_imgs", "=", "num_train_imgs", "+", "num_query_imgs", "\n", "\n", "print", "(", "\"=> CUHK03 ({}) loaded\"", ".", "format", "(", "image_type", ")", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_imgs", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_imgs", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_imgs", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_imgs", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.CUHK03._check_before_run": [[161, 173], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "data_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "data_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "raw_mat_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "raw_mat_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "split_new_det_mat_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "split_new_det_mat_path", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "split_new_lab_mat_path", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "split_new_lab_mat_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.CUHK03._preprocess": [[174, 333], ["print", "utils.mkdir_if_missing", "utils.mkdir_if_missing", "print", "h5py.File", "dataset_manager.CUHK03._preprocess._extract_img"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.mkdir_if_missing", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.mkdir_if_missing"], ["", "", "def", "_preprocess", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This function is a bit complex and ugly, what it does is\n        1. Extract data from cuhk-03.mat and save as png images.\n        2. Create 20 classic splits. (Li et al. CVPR'14)\n        3. Create new split. (Zhong et al. CVPR'17)\n        \"\"\"", "\n", "print", "(", "\"Note: if root path is changed, the previously generated json files need to be re-generated (delete them first)\"", ")", "\n", "if", "osp", ".", "exists", "(", "self", ".", "imgs_labeled_dir", ")", "and", "osp", ".", "exists", "(", "self", ".", "imgs_detected_dir", ")", "and", "osp", ".", "exists", "(", "self", ".", "split_classic_det_json_path", ")", "and", "osp", ".", "exists", "(", "self", ".", "split_classic_lab_json_path", ")", "and", "osp", ".", "exists", "(", "self", ".", "split_new_det_json_path", ")", "and", "osp", ".", "exists", "(", "self", ".", "split_new_lab_json_path", ")", ":", "\n", "            ", "return", "\n", "\n", "", "mkdir_if_missing", "(", "self", ".", "imgs_detected_dir", ")", "\n", "mkdir_if_missing", "(", "self", ".", "imgs_labeled_dir", ")", "\n", "\n", "print", "(", "\"Extract image data from {} and save as png\"", ".", "format", "(", "self", ".", "raw_mat_path", ")", ")", "\n", "mat", "=", "h5py", ".", "File", "(", "self", ".", "raw_mat_path", ",", "'r'", ")", "\n", "\n", "def", "_deref", "(", "ref", ")", ":", "\n", "            ", "return", "mat", "[", "ref", "]", "[", ":", "]", ".", "T", "\n", "\n", "", "def", "_process_images", "(", "img_refs", ",", "campid", ",", "pid", ",", "save_dir", ")", ":", "\n", "            ", "img_paths", "=", "[", "]", "# Note: some persons only have images for one view", "\n", "for", "imgid", ",", "img_ref", "in", "enumerate", "(", "img_refs", ")", ":", "\n", "                ", "img", "=", "_deref", "(", "img_ref", ")", "\n", "# skip empty cell", "\n", "if", "img", ".", "size", "==", "0", "or", "img", ".", "ndim", "<", "3", ":", "continue", "\n", "# images are saved with the following format, index-1 (ensure uniqueness)", "\n", "# campid: index of camera pair (1-5)", "\n", "# pid: index of person in 'campid'-th camera pair", "\n", "# viewid: index of view, {1, 2}", "\n", "# imgid: index of image, (1-10)", "\n", "viewid", "=", "1", "if", "imgid", "<", "5", "else", "2", "\n", "img_name", "=", "'{:01d}_{:03d}_{:01d}_{:02d}.png'", ".", "format", "(", "campid", "+", "1", ",", "pid", "+", "1", ",", "viewid", ",", "imgid", "+", "1", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "save_dir", ",", "img_name", ")", "\n", "imsave", "(", "img_path", ",", "img", ")", "\n", "img_paths", ".", "append", "(", "img_path", ")", "\n", "", "return", "img_paths", "\n", "\n", "", "def", "_extract_img", "(", "name", ")", ":", "\n", "            ", "print", "(", "\"Processing {} images (extract and save) ...\"", ".", "format", "(", "name", ")", ")", "\n", "meta_data", "=", "[", "]", "\n", "imgs_dir", "=", "self", ".", "imgs_detected_dir", "if", "name", "==", "'detected'", "else", "self", ".", "imgs_labeled_dir", "\n", "for", "campid", ",", "camp_ref", "in", "enumerate", "(", "mat", "[", "name", "]", "[", "0", "]", ")", ":", "\n", "                ", "camp", "=", "_deref", "(", "camp_ref", ")", "\n", "num_pids", "=", "camp", ".", "shape", "[", "0", "]", "\n", "for", "pid", "in", "range", "(", "num_pids", ")", ":", "\n", "                    ", "img_paths", "=", "_process_images", "(", "camp", "[", "pid", ",", ":", "]", ",", "campid", ",", "pid", ",", "imgs_dir", ")", "\n", "assert", "len", "(", "img_paths", ")", ">", "0", ",", "\"campid{}-pid{} has no images\"", ".", "format", "(", "campid", ",", "pid", ")", "\n", "meta_data", ".", "append", "(", "(", "campid", "+", "1", ",", "pid", "+", "1", ",", "img_paths", ")", ")", "\n", "", "print", "(", "\"done camera pair {} with {} identities\"", ".", "format", "(", "campid", "+", "1", ",", "num_pids", ")", ")", "\n", "", "return", "meta_data", "\n", "\n", "", "meta_detected", "=", "_extract_img", "(", "'detected'", ")", "\n", "meta_labeled", "=", "_extract_img", "(", "'labeled'", ")", "\n", "\n", "def", "_extract_classic_split", "(", "meta_data", ",", "test_split", ")", ":", "\n", "            ", "train", ",", "test", "=", "[", "]", ",", "[", "]", "\n", "num_train_pids", ",", "num_test_pids", "=", "0", ",", "0", "\n", "num_train_imgs", ",", "num_test_imgs", "=", "0", ",", "0", "\n", "for", "i", ",", "(", "campid", ",", "pid", ",", "img_paths", ")", "in", "enumerate", "(", "meta_data", ")", ":", "\n", "\n", "                ", "if", "[", "campid", ",", "pid", "]", "in", "test_split", ":", "\n", "                    ", "for", "img_path", "in", "img_paths", ":", "\n", "                        ", "camid", "=", "int", "(", "osp", ".", "basename", "(", "img_path", ")", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "\n", "test", ".", "append", "(", "(", "img_path", ",", "num_test_pids", ",", "camid", ")", ")", "\n", "", "num_test_pids", "+=", "1", "\n", "num_test_imgs", "+=", "len", "(", "img_paths", ")", "\n", "", "else", ":", "\n", "                    ", "for", "img_path", "in", "img_paths", ":", "\n", "                        ", "camid", "=", "int", "(", "osp", ".", "basename", "(", "img_path", ")", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "\n", "train", ".", "append", "(", "(", "img_path", ",", "num_train_pids", ",", "camid", ")", ")", "\n", "", "num_train_pids", "+=", "1", "\n", "num_train_imgs", "+=", "len", "(", "img_paths", ")", "\n", "", "", "return", "train", ",", "num_train_pids", ",", "num_train_imgs", ",", "test", ",", "num_test_pids", ",", "num_test_imgs", "\n", "\n", "", "print", "(", "\"Creating classic splits (# = 20) ...\"", ")", "\n", "splits_classic_det", ",", "splits_classic_lab", "=", "[", "]", ",", "[", "]", "\n", "for", "split_ref", "in", "mat", "[", "'testsets'", "]", "[", "0", "]", ":", "\n", "            ", "test_split", "=", "_deref", "(", "split_ref", ")", ".", "tolist", "(", ")", "\n", "\n", "# create split for detected images", "\n", "train", ",", "num_train_pids", ",", "num_train_imgs", ",", "test", ",", "num_test_pids", ",", "num_test_imgs", "=", "_extract_classic_split", "(", "meta_detected", ",", "test_split", ")", "\n", "splits_classic_det", ".", "append", "(", "{", "\n", "'train'", ":", "train", ",", "'query'", ":", "test", ",", "'gallery'", ":", "test", ",", "\n", "'num_train_pids'", ":", "num_train_pids", ",", "'num_train_imgs'", ":", "num_train_imgs", ",", "\n", "'num_query_pids'", ":", "num_test_pids", ",", "'num_query_imgs'", ":", "num_test_imgs", ",", "\n", "'num_gallery_pids'", ":", "num_test_pids", ",", "'num_gallery_imgs'", ":", "num_test_imgs", ",", "\n", "}", ")", "\n", "\n", "# create split for labeled images", "\n", "train", ",", "num_train_pids", ",", "num_train_imgs", ",", "test", ",", "num_test_pids", ",", "num_test_imgs", "=", "_extract_classic_split", "(", "meta_labeled", ",", "test_split", ")", "\n", "splits_classic_lab", ".", "append", "(", "{", "\n", "'train'", ":", "train", ",", "'query'", ":", "test", ",", "'gallery'", ":", "test", ",", "\n", "'num_train_pids'", ":", "num_train_pids", ",", "'num_train_imgs'", ":", "num_train_imgs", ",", "\n", "'num_query_pids'", ":", "num_test_pids", ",", "'num_query_imgs'", ":", "num_test_imgs", ",", "\n", "'num_gallery_pids'", ":", "num_test_pids", ",", "'num_gallery_imgs'", ":", "num_test_imgs", ",", "\n", "}", ")", "\n", "\n", "", "write_json", "(", "splits_classic_det", ",", "self", ".", "split_classic_det_json_path", ")", "\n", "write_json", "(", "splits_classic_lab", ",", "self", ".", "split_classic_lab_json_path", ")", "\n", "\n", "def", "_extract_set", "(", "filelist", ",", "pids", ",", "pid2label", ",", "idxs", ",", "img_dir", ",", "relabel", ")", ":", "\n", "            ", "tmp_set", "=", "[", "]", "\n", "unique_pids", "=", "set", "(", ")", "\n", "for", "idx", "in", "idxs", ":", "\n", "                ", "img_name", "=", "filelist", "[", "idx", "]", "[", "0", "]", "\n", "camid", "=", "int", "(", "img_name", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "\n", "pid", "=", "pids", "[", "idx", "]", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "img_path", "=", "osp", ".", "join", "(", "img_dir", ",", "img_name", ")", "\n", "tmp_set", ".", "append", "(", "(", "img_path", ",", "int", "(", "pid", ")", ",", "camid", ")", ")", "\n", "unique_pids", ".", "add", "(", "pid", ")", "\n", "", "return", "tmp_set", ",", "len", "(", "unique_pids", ")", ",", "len", "(", "idxs", ")", "\n", "\n", "", "def", "_extract_new_split", "(", "split_dict", ",", "img_dir", ")", ":", "\n", "            ", "train_idxs", "=", "split_dict", "[", "'train_idx'", "]", ".", "flatten", "(", ")", "-", "1", "# index-0", "\n", "pids", "=", "split_dict", "[", "'labels'", "]", ".", "flatten", "(", ")", "\n", "train_pids", "=", "set", "(", "pids", "[", "train_idxs", "]", ")", "\n", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "train_pids", ")", "}", "\n", "query_idxs", "=", "split_dict", "[", "'query_idx'", "]", ".", "flatten", "(", ")", "-", "1", "\n", "gallery_idxs", "=", "split_dict", "[", "'gallery_idx'", "]", ".", "flatten", "(", ")", "-", "1", "\n", "filelist", "=", "split_dict", "[", "'filelist'", "]", ".", "flatten", "(", ")", "\n", "train_info", "=", "_extract_set", "(", "filelist", ",", "pids", ",", "pid2label", ",", "train_idxs", ",", "img_dir", ",", "relabel", "=", "True", ")", "\n", "query_info", "=", "_extract_set", "(", "filelist", ",", "pids", ",", "pid2label", ",", "query_idxs", ",", "img_dir", ",", "relabel", "=", "False", ")", "\n", "gallery_info", "=", "_extract_set", "(", "filelist", ",", "pids", ",", "pid2label", ",", "gallery_idxs", ",", "img_dir", ",", "relabel", "=", "False", ")", "\n", "return", "train_info", ",", "query_info", ",", "gallery_info", "\n", "\n", "", "print", "(", "\"Creating new splits for detected images (767/700) ...\"", ")", "\n", "train_info", ",", "query_info", ",", "gallery_info", "=", "_extract_new_split", "(", "\n", "loadmat", "(", "self", ".", "split_new_det_mat_path", ")", ",", "\n", "self", ".", "imgs_detected_dir", ",", "\n", ")", "\n", "splits", "=", "[", "{", "\n", "'train'", ":", "train_info", "[", "0", "]", ",", "'query'", ":", "query_info", "[", "0", "]", ",", "'gallery'", ":", "gallery_info", "[", "0", "]", ",", "\n", "'num_train_pids'", ":", "train_info", "[", "1", "]", ",", "'num_train_imgs'", ":", "train_info", "[", "2", "]", ",", "\n", "'num_query_pids'", ":", "query_info", "[", "1", "]", ",", "'num_query_imgs'", ":", "query_info", "[", "2", "]", ",", "\n", "'num_gallery_pids'", ":", "gallery_info", "[", "1", "]", ",", "'num_gallery_imgs'", ":", "gallery_info", "[", "2", "]", ",", "\n", "}", "]", "\n", "write_json", "(", "splits", ",", "self", ".", "split_new_det_json_path", ")", "\n", "\n", "print", "(", "\"Creating new splits for labeled images (767/700) ...\"", ")", "\n", "train_info", ",", "query_info", ",", "gallery_info", "=", "_extract_new_split", "(", "\n", "loadmat", "(", "self", ".", "split_new_lab_mat_path", ")", ",", "\n", "self", ".", "imgs_labeled_dir", ",", "\n", ")", "\n", "splits", "=", "[", "{", "\n", "'train'", ":", "train_info", "[", "0", "]", ",", "'query'", ":", "query_info", "[", "0", "]", ",", "'gallery'", ":", "gallery_info", "[", "0", "]", ",", "\n", "'num_train_pids'", ":", "train_info", "[", "1", "]", ",", "'num_train_imgs'", ":", "train_info", "[", "2", "]", ",", "\n", "'num_query_pids'", ":", "query_info", "[", "1", "]", ",", "'num_query_imgs'", ":", "query_info", "[", "2", "]", ",", "\n", "'num_gallery_pids'", ":", "gallery_info", "[", "1", "]", ",", "'num_gallery_imgs'", ":", "gallery_info", "[", "2", "]", ",", "\n", "}", "]", "\n", "write_json", "(", "splits", ",", "self", ".", "split_new_lab_json_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.DukeMTMCreID.__init__": [[349, 382], ["os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "dataset_manager.DukeMTMCreID._check_before_run", "dataset_manager.DukeMTMCreID._process_dir", "dataset_manager.DukeMTMCreID._process_dir", "dataset_manager.DukeMTMCreID._process_dir", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.DukeMTMCreID._check_before_run", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.DukeMTMCreID._process_dir", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.DukeMTMCreID._process_dir", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.DukeMTMCreID._process_dir"], ["def", "__init__", "(", "self", ",", "root", "=", "'data'", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_dir", ")", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'DukeMTMC-reID/bounding_box_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'DukeMTMC-reID/query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'DukeMTMC-reID/bounding_box_test'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "train", ",", "num_train_pids", ",", "num_train_imgs", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "query", ",", "num_query_pids", ",", "num_query_imgs", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ",", "relabel", "=", "False", ")", "\n", "gallery", ",", "num_gallery_pids", ",", "num_gallery_imgs", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ",", "relabel", "=", "False", ")", "\n", "num_total_pids", "=", "num_train_pids", "+", "num_query_pids", "\n", "num_total_imgs", "=", "num_train_imgs", "+", "num_query_imgs", "+", "num_gallery_imgs", "\n", "\n", "print", "(", "\"=> DukeMTMC-reID loaded\"", ")", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images\"", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_imgs", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_imgs", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_imgs", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "print", "(", "\"  total    | {:5d} | {:8d}\"", ".", "format", "(", "num_total_pids", ",", "num_total_imgs", ")", ")", "\n", "print", "(", "\"  ------------------------------\"", ")", "\n", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", "=", "num_train_pids", "\n", "self", ".", "num_query_pids", "=", "num_query_pids", "\n", "self", ".", "num_gallery_pids", "=", "num_gallery_pids", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.DukeMTMCreID._check_before_run": [[383, 393], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.DukeMTMCreID._process_dir": [[394, 415], ["glob.glob", "re.compile", "set", "len", "len", "os.join", "os.join", "map", "set.add", "map", "dataset.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "        ", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_container", ")", "}", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "            ", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "assert", "1", "<=", "camid", "<=", "8", "\n", "camid", "-=", "1", "# index starts from 0", "\n", "if", "relabel", ":", "pid", "=", "pid2label", "[", "pid", "]", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "num_pids", "=", "len", "(", "pid_container", ")", "\n", "num_imgs", "=", "len", "(", "dataset", ")", "\n", "return", "dataset", ",", "num_pids", ",", "num_imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.get_names": [[426, 428], ["__img_factory.keys"], "function", ["None"], ["def", "get_names", "(", ")", ":", "\n", "    ", "return", "__img_factory", ".", "keys", "(", ")", "#+ __vid_factory.keys()", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_manager.init_img_dataset": [[429, 433], ["__img_factory.keys", "KeyError", "__img_factory.keys"], "function", ["None"], ["", "def", "init_img_dataset", "(", "name", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "name", "not", "in", "__img_factory", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "KeyError", "(", "\"Invalid dataset, got '{}', but expected to be one of {}\"", ".", "format", "(", "name", ",", "__img_factory", ".", "keys", "(", ")", ")", ")", "\n", "", "return", "__img_factory", "[", "name", "]", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.samplers.RandomIdentitySampler.__init__": [[17, 25], ["collections.defaultdict", "enumerate", "list", "len", "samplers.RandomIdentitySampler.index_dic[].append", "samplers.RandomIdentitySampler.index_dic.keys"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_source", ",", "num_instances", "=", "4", ")", ":", "\n", "        ", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "self", ".", "index_dic", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "data_source", ")", ":", "\n", "            ", "self", ".", "index_dic", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dic", ".", "keys", "(", ")", ")", "\n", "self", ".", "num_identities", "=", "len", "(", "self", ".", "pids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.samplers.RandomIdentitySampler.__iter__": [[26, 36], ["torch.randperm", "iter", "numpy.random.choice", "ret.extend", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "torch", ".", "randperm", "(", "self", ".", "num_identities", ")", "\n", "ret", "=", "[", "]", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "pid", "=", "self", ".", "pids", "[", "i", "]", "\n", "t", "=", "self", ".", "index_dic", "[", "pid", "]", "\n", "replace", "=", "False", "if", "len", "(", "t", ")", ">=", "self", ".", "num_instances", "else", "True", "\n", "t", "=", "np", ".", "random", ".", "choice", "(", "t", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "replace", ")", "\n", "ret", ".", "extend", "(", "t", ")", "\n", "", "return", "iter", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.samplers.RandomIdentitySampler.__len__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_identities", "*", "self", ".", "num_instances", "", "", "", ""]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.train_triplet.train": [[97, 141], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "loss.TripletLoss", "loss.TripletLoss", "model.fc0.train", "model.fc1.train", "enumerate", "model.parameters", "utils.AverageMeter.update", "model", "loss_fn", "torch.optim.Adam.zero_grad", "loss_fn.backward", "torch.optim.Adam.step", "utils.AverageMeter.update", "time.time", "utils.AverageMeter.update", "imgs.cuda", "pids.cuda", "loss_fn.item", "pids.size", "print", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update"], ["def", "train", "(", "epoch", ",", "model", ",", "trainloader", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "loss_fc0", "=", "TripletLoss", "(", "margin", "=", "0.3", ")", "\n", "loss_fc1", "=", "TripletLoss", "(", "margin", "=", "0.3", ")", "\n", "\n", "model", ".", "fc0", ".", "train", "(", "True", ")", "\n", "model", ".", "fc1", ".", "train", "(", "False", ")", "\n", "output_fc", "=", "\"fc0\"", "\n", "loss_fn", "=", "loss_fc0", "\n", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "_", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "imgs", ",", "pids", "=", "imgs", ".", "cuda", "(", ")", ",", "pids", ".", "cuda", "(", ")", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "clf_outputs", "=", "model", "(", "imgs", ")", "\n", "\n", "loss", "=", "loss_fn", "(", "clf_outputs", "[", "output_fc", "]", ",", "pids", ")", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "(", "batch", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "batch", "+", "1", ",", "len", "(", "trainloader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "######################################################################################################", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.train_triplet.test": [[142, 205], ["utils.AverageMeter", "print", "print", "distmat.numpy.addmm_", "distmat.numpy.numpy", "print", "metrics.evaluate", "print", "print", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "time.time", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "torch.cat.size", "torch.cat.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.cat.t", "print", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "clf_outputs[].data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "clf_outputs[].data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "time.time", "time.time", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.metrics.evaluate", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update"], ["", "", "", "def", "test", "(", "model", ",", "queryloader", ",", "galleryloader", ",", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "qf", ",", "q_pids", ",", "q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "clf_outputs", "=", "model", "(", "imgs", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "output_fc", "=", "\"fc0\"", "\n", "\n", "f", "=", "clf_outputs", "[", "output_fc", "]", ".", "data", ".", "cpu", "(", ")", "\n", "qf", ".", "append", "(", "f", ")", "\n", "q_pids", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "", "qf", "=", "torch", ".", "cat", "(", "qf", ",", "0", ")", "\n", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for query set, obtained {}-by-{} matrix\"", ".", "format", "(", "qf", ".", "size", "(", "0", ")", ",", "qf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "gf", ",", "g_pids", ",", "g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "clf_outputs", "=", "model", "(", "imgs", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "f", "=", "clf_outputs", "[", "output_fc", "]", ".", "data", ".", "cpu", "(", ")", "\n", "gf", ".", "append", "(", "f", ")", "\n", "g_pids", ".", "extend", "(", "pids", ")", "\n", "g_camids", ".", "extend", "(", "camids", ")", "\n", "", "gf", "=", "torch", ".", "cat", "(", "gf", ",", "0", ")", "\n", "g_pids", "=", "np", ".", "asarray", "(", "g_pids", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "g_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for gallery set, obtained {}-by-{} matrix\"", ".", "format", "(", "gf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "1", ")", ")", ")", "\n", "##############################################################################################################################", "\n", "", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "\n", "m", ",", "n", "=", "qf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "0", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "qf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "qf", ",", "gf", ".", "t", "(", ")", ")", "\n", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "\"Computing CMC and mAP\"", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "use_metric_cuhk03", "=", "use_metric_cuhk03", ")", "\n", "\n", "print", "(", "\"Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.covariance_duke.Flatten": [[108, 110], ["input.contiguous().view", "input.size", "input.contiguous"], "function", ["None"], ["def", "Flatten", "(", "input", ")", ":", "\n", "    ", "return", "input", ".", "contiguous", "(", ")", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.covariance_duke.get_activation": [[113, 117], ["output.detach"], "function", ["None"], ["def", "get_activation", "(", "name", ")", ":", "\n", "    ", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "        ", "activation", "[", "name", "]", "=", "output", ".", "detach", "(", ")", "\n", "", "return", "hook", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.covariance_duke.train": [[119, 292], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "loss.CrossEntropy", "loss.TripletLoss", "model.fc0.train", "model.fc1.train", "model.base.train", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "list", "numpy.zeros", "range", "bmask.append", "range", "l_all_pos.append", "l_all_neg.append", "utils.AverageMeter.update", "model", "f0.permute.permute", "f1.permute.permute", "torch.AdaptiveAvgPool2d", "nn.AdaptiveAvgPool2d.", "nn.AdaptiveAvgPool2d.", "f0.permute.permute", "f1.permute.permute", "range", "range", "covariance_duke.Flatten", "covariance_duke.Flatten", "covariance_duke.Flatten", "covariance_duke.Flatten", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze.permute", "torch.unsqueeze.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.relu", "torch.nn.functional.relu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "pids.cuda.cuda", "isinstance", "optim.zero_grad", "loss.backward", "optim.step", "utils.AverageMeter.update", "time.time", "utils.AverageMeter.update", "set", "len", "range", "range", "range", "len", "range", "imgs.cuda", "len", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "len", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "torch.sub", "loss.DeepSuperVision", "loss.CrossEntropy.", "loss.item", "pids.cuda.size", "print", "len", "len", "len", "len", "l_batch_pos.append", "l_batch_neg.append", "time.time", "time.time", "l5.append", "len"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.Flatten", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.Flatten", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.Flatten", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.Flatten", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.DeepSuperVision"], ["", "def", "train", "(", "epoch", ",", "model", ",", "optim", ",", "trainloader", ")", ":", "\n", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "cross_entropy", "=", "CrossEntropy", "(", "num_classes", "=", "num_classes", ")", "\n", "triplet_loss_fn", "=", "TripletLoss", "(", "margin", "=", "margin", ")", "\n", "\n", "model", ".", "fc0", ".", "train", "(", "False", ")", "\n", "model", ".", "fc1", ".", "train", "(", "True", ")", "\n", "\n", "output_fc", "=", "\"fc1\"", "\n", "\n", "model", ".", "base", ".", "train", "(", "True", ")", "\n", "\n", "################################################3", "\n", "person_per_batch", "=", "8", "\n", "imgs_per_person", "=", "4", "\n", "\n", "\n", "bmask", "=", "[", "]", "\n", "l_all_pos", "=", "[", "]", "\n", "l_all_neg", "=", "[", "]", "\n", "pos_targets", "=", "torch", ".", "Tensor", "(", ")", "\n", "neg_targets", "=", "torch", ".", "Tensor", "(", ")", "\n", "C_pos0", "=", "torch", ".", "zeros", "(", "[", "train_batch", ",", "256", ",", "2", ",", "4", "]", ",", "device", "=", "device", ")", "\n", "C_pos1", "=", "torch", ".", "zeros", "(", "[", "train_batch", ",", "256", ",", "2", ",", "4", "]", ",", "device", "=", "device", ")", "\n", "C_neg0", "=", "torch", ".", "zeros", "(", "[", "train_batch", ",", "256", ",", "2", ",", "4", "]", ",", "device", "=", "device", ")", "\n", "C_neg1", "=", "torch", ".", "zeros", "(", "[", "train_batch", ",", "256", ",", "2", ",", "4", "]", ",", "device", "=", "device", ")", "\n", "###################################", "\n", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "#imgs,pids = imgs.cuda(), pids.cuda()", "\n", "        ", "pids", "=", "torch", ".", "Tensor", ".", "numpy", "(", "pids", ")", "\n", "camids", "=", "torch", ".", "Tensor", ".", "numpy", "(", "camids", ")", "\n", "uid", "=", "list", "(", "set", "(", "pids", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "[", "2", "*", "person_per_batch", ",", "person_per_batch", "*", "imgs_per_person", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "uid", ")", ")", ":", "\n", "            ", "sel", "=", "uid", "[", "i", "]", "\n", "# print(sel)", "\n", "pos", "=", "-", "1", "\n", "neg", "=", "-", "1", "\n", "k", "=", "-", "1", "\n", "for", "j", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "if", "(", "pids", "[", "j", "]", "==", "sel", ")", ":", "\n", "                    ", "k", "=", "j", "\n", "break", "\n", "\n", "", "", "for", "j", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "if", "(", "pids", "[", "k", "]", "==", "pids", "[", "j", "]", "and", "camids", "[", "k", "]", "!=", "camids", "[", "j", "]", ")", ":", "# Same IDs and diff cam IDs", "\n", "                    ", "pos", "=", "j", "#Postive        ", "\n", "break", "\n", "\n", "", "", "for", "j", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "if", "(", "pids", "[", "k", "]", "!=", "pids", "[", "j", "]", ")", ":", "#Negative                # Diff Cam IDs", "\n", "                    ", "neg", "=", "j", "\n", "break", "\n", "\n", "", "", "mask", "[", "2", "*", "i", "]", "[", "k", "]", "=", "1", "\n", "mask", "[", "2", "*", "i", "]", "[", "pos", "]", "=", "1", "\n", "mask", "[", "2", "*", "i", "+", "1", "]", "[", "k", "]", "=", "1", "\n", "mask", "[", "2", "*", "i", "+", "1", "]", "[", "neg", "]", "=", "1", "\n", "\n", "", "bmask", ".", "append", "(", "mask", ")", "\n", "\n", "l_batch_pos", "=", "[", "]", "\n", "l_batch_neg", "=", "[", "]", "\n", "kl", "=", "mask", "#bmask[batch]", "\n", "for", "i", "in", "range", "(", "len", "(", "kl", ")", ")", ":", "\n", "            ", "l5", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "kl", "[", "i", "]", ")", ")", ":", "\n", "                ", "if", "(", "kl", "[", "i", "]", "[", "j", "]", "==", "1", ")", ":", "\n", "                    ", "l5", ".", "append", "(", "j", ")", "\n", "", "", "if", "i", "%", "2", "<", "1", ":", "\n", "                ", "l_batch_pos", ".", "append", "(", "l5", ")", "\n", "", "else", ":", "\n", "                ", "l_batch_neg", ".", "append", "(", "l5", ")", "\n", "", "", "l_all_pos", ".", "append", "(", "l_batch_pos", ")", "\n", "l_all_neg", ".", "append", "(", "l_batch_neg", ")", "\n", "\n", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "clf_outputs", "=", "model", "(", "imgs", ".", "cuda", "(", ")", ")", "\n", "f0", "=", "activation", "[", "'fc0.conv2'", "]", "#bs,2048,8,4", "\n", "f1", "=", "activation", "[", "'fc1.conv2'", "]", "\n", "f0", "=", "f0", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "f1", "=", "f1", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "m", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "256", ",", "2", ")", ")", "\n", "f0", "=", "m", "(", "f0", ")", "\n", "f1", "=", "m", "(", "f1", ")", "\n", "f0", "=", "f0", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "f1", "=", "f1", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "fc1", "=", "clf_outputs", "[", "output_fc", "]", "\n", "\n", "# Computing postive samples", "\n", "for", "i", "in", "range", "(", "len", "(", "l_batch_pos", ")", ")", ":", "\n", "            ", "pos_idx0", "=", "l_batch_pos", "[", "i", "]", "[", "0", "]", "\n", "pos_idx1", "=", "l_batch_pos", "[", "i", "]", "[", "1", "]", "\n", "\n", "pos_targets0", "=", "torch", ".", "sub", "(", "f0", "[", "pos_idx1", "]", ",", "f0", "[", "pos_idx0", "]", ")", "\n", "pos_targets1", "=", "torch", ".", "sub", "(", "f1", "[", "pos_idx1", "]", ",", "f1", "[", "pos_idx0", "]", ")", "\n", "C_pos0", "+=", "pos_targets0", "\n", "C_pos1", "+=", "pos_targets1", "\n", "\n", "# Computing negative samples", "\n", "", "for", "i", "in", "range", "(", "len", "(", "l_batch_neg", ")", ")", ":", "\n", "            ", "neg_idx0", "=", "l_batch_neg", "[", "i", "]", "[", "0", "]", "\n", "neg_idx1", "=", "l_batch_neg", "[", "i", "]", "[", "1", "]", "\n", "\n", "neg_targets0", "=", "torch", ".", "sub", "(", "f0", "[", "neg_idx1", "]", ",", "f0", "[", "neg_idx0", "]", ")", "\n", "neg_targets1", "=", "torch", ".", "sub", "(", "f1", "[", "neg_idx1", "]", ",", "f1", "[", "neg_idx0", "]", ")", "\n", "C_neg0", "+=", "neg_targets0", "\n", "C_neg1", "+=", "neg_targets1", "\n", "\n", "", "g0", "=", "Flatten", "(", "C_pos0", ")", "\n", "g1", "=", "Flatten", "(", "C_pos1", ")", "\n", "\n", "y0", "=", "Flatten", "(", "C_neg0", ")", "\n", "y1", "=", "Flatten", "(", "C_neg1", ")", "\n", "\n", "u0", "=", "g0", "-", "y0", "# (bs,2048)", "\n", "u1", "=", "g1", "-", "y1", "\n", "v0", "=", "torch", ".", "unsqueeze", "(", "u0", ",", "2", ")", "# (64,2048,1)", "\n", "v1", "=", "torch", ".", "unsqueeze", "(", "u1", ",", "2", ")", "\n", "w0", "=", "v0", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (64,1,2048)", "\n", "w1", "=", "v1", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "x_net0", "=", "torch", ".", "matmul", "(", "v0", ",", "w0", ")", "# (64,2048,2048)", "\n", "x_net1", "=", "torch", ".", "matmul", "(", "v1", ",", "w1", ")", "\n", "r0", "=", "torch", ".", "sum", "(", "x_net0", ")", "\n", "r1", "=", "torch", ".", "sum", "(", "x_net1", ")", "\n", "r0_hinge", "=", "F", ".", "relu", "(", "r0", ")", "\n", "r1_hinge", "=", "F", ".", "relu", "(", "r1", ")", "\n", "alpha", "=", "1e-9", "\n", "beta", "=", "0", "\n", "covariance_loss", "=", "1", "*", "(", "alpha", "*", "r0_hinge", "-", "beta", ")", "\n", "\n", "domain_g", "=", "1", "*", "(", "alpha", "*", "(", "r1_hinge", "-", "r0_hinge", ")", "-", "beta", ")", "\n", "\n", "pids", "=", "torch", ".", "from_numpy", "(", "pids", ")", "\n", "pids", "=", "pids", ".", "cuda", "(", ")", "\n", "\n", "\n", "if", "isinstance", "(", "fc1", ",", "tuple", ")", ":", "\n", "            ", "cross_entropy_loss", "=", "DeepSuperVision", "(", "cross_entropy", ",", "fc1", ",", "pids", ")", "\n", "", "else", ":", "\n", "            ", "cross_entropy_loss", "=", "cross_entropy", "(", "fc1", ",", "pids", ")", "\n", "\n", "", "loss", "=", "cross_entropy_loss", "+", "covariance_loss", "+", "domain_g", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "(", "batch", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "batch", "+", "1", ",", "len", "(", "trainloader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "######################################################################################################", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.covariance_duke.test": [[293, 366], ["utils.AverageMeter", "model.eval", "print", "print", "distmat.numpy.addmm_", "distmat.numpy.numpy", "print", "metrics.evaluate", "print", "print", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "time.time", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "torch.cat.size", "torch.cat.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.cat.t", "print", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "fc1.data.cpu.data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "fc1.data.cpu.data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "time.time", "time.time", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.metrics.evaluate", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update"], ["", "", "", "def", "test", "(", "model", ",", "queryloader", ",", "galleryloader", ",", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "qf", ",", "q_pids", ",", "q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "fc1_preds", "=", "model", "(", "imgs", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "output_fc", "=", "\"fc1\"", "\n", "fc1", "=", "fc1_preds", "[", "output_fc", "]", "\n", "fc1", "=", "fc1", ".", "data", ".", "cpu", "(", ")", "\n", "\n", "qf", ".", "append", "(", "fc1", ")", "\n", "q_pids", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "", "qf", "=", "torch", ".", "cat", "(", "qf", ",", "0", ")", "\n", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for query set, obtained {}-by-{} matrix\"", ".", "format", "(", "qf", ".", "size", "(", "0", ")", ",", "qf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "gf", ",", "g_pids", ",", "g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "fc1_preds", "=", "model", "(", "imgs", ")", "\n", "\n", "output_fc", "=", "\"fc1\"", "\n", "fc1", "=", "fc1_preds", "[", "output_fc", "]", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "fc1", "=", "fc1", ".", "data", ".", "cpu", "(", ")", "\n", "gf", ".", "append", "(", "fc1", ")", "\n", "g_pids", ".", "extend", "(", "pids", ")", "\n", "g_camids", ".", "extend", "(", "camids", ")", "\n", "", "gf", "=", "torch", ".", "cat", "(", "gf", ",", "0", ")", "\n", "g_pids", "=", "np", ".", "asarray", "(", "g_pids", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "g_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for gallery set, obtained {}-by-{} matrix\"", ".", "format", "(", "gf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "1", ")", ")", ")", "\n", "##############################################################################################################################", "\n", "", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "\n", "m", ",", "n", "=", "qf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "0", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "qf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "qf", ",", "gf", ".", "t", "(", ")", ")", "\n", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "\"Computing CMC and mAP\"", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "use_metric_cuhk03", "=", "use_metric_cuhk03", ")", "\n", "\n", "print", "(", "\"Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.metrics.evaluate_market1501": [[7, 53], ["numpy.argsort", "range", "numpy.asarray().astype", "numpy.mean", "print", "numpy.invert", "orig_cmc.cumsum", "np.asarray().astype.append", "orig_cmc.sum", "orig_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.any", "numpy.asarray", "orig_cmc.cumsum.sum", "numpy.asarray", "enumerate"], "function", ["None"], ["def", "evaluate_market1501", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", ")", ":", "\n", "    ", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "num_valid_q", "=", "0", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "orig_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "if", "not", "np", ".", "any", "(", "orig_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "# compute average precision", "\n", "# reference: https://en.wikipedia.org/wiki/Evaluation_measures_(information_retrieval)#Average_precision", "\n", "num_rel", "=", "orig_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "orig_cmc", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "\n", "return", "all_cmc", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.metrics.evaluate_cuhk03": [[54, 121], ["numpy.argsort", "range", "numpy.asarray().astype", "numpy.mean", "print", "numpy.invert", "collections.defaultdict", "enumerate", "range", "np.asarray().astype.append", "all_AP.append", "np.asarray().astype.sum", "numpy.any", "g_pids_dict[].append", "numpy.zeros", "collections.defaultdict.items", "masked_orig_cmc.cumsum", "_cmc[].astype", "masked_orig_cmc.sum", "masked_orig_cmc.cumsum", "numpy.asarray", "len", "numpy.random.choice", "numpy.asarray", "masked_orig_cmc.cumsum.sum", "enumerate"], "function", ["None"], ["", "def", "evaluate_cuhk03", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", ",", "N", "=", "100", ")", ":", "\n", "    ", "\"\"\"Evaluation with cuhk03 metric\n    Key: one image for each gallery identity is randomly sampled for each query identity.\n    Random sampling is performed N times (default: N=100).\n    \"\"\"", "\n", "num_q", ",", "num_g", "=", "distmat", ".", "shape", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "        ", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is quite small, got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "", "indices", "=", "np", ".", "argsort", "(", "distmat", ",", "axis", "=", "1", ")", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute cmc curve for each query", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "num_valid_q", "=", "0.", "# number of valid query", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "# get query pid and camid", "\n", "        ", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "# remove gallery samples that have the same pid and camid with query", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "orig_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "# binary vector, positions with value 1 are correct matches", "\n", "if", "not", "np", ".", "any", "(", "orig_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in gallery", "\n", "            ", "continue", "\n", "\n", "", "kept_g_pids", "=", "g_pids", "[", "order", "]", "[", "keep", "]", "\n", "g_pids_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "idx", ",", "pid", "in", "enumerate", "(", "kept_g_pids", ")", ":", "\n", "            ", "g_pids_dict", "[", "pid", "]", ".", "append", "(", "idx", ")", "\n", "\n", "", "cmc", ",", "AP", "=", "0.", ",", "0.", "\n", "for", "repeat_idx", "in", "range", "(", "N", ")", ":", "\n", "            ", "mask", "=", "np", ".", "zeros", "(", "len", "(", "orig_cmc", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "_", ",", "idxs", "in", "g_pids_dict", ".", "items", "(", ")", ":", "\n", "# randomly sample one image for each gallery person", "\n", "                ", "rnd_idx", "=", "np", ".", "random", ".", "choice", "(", "idxs", ")", "\n", "mask", "[", "rnd_idx", "]", "=", "True", "\n", "", "masked_orig_cmc", "=", "orig_cmc", "[", "mask", "]", "\n", "_cmc", "=", "masked_orig_cmc", ".", "cumsum", "(", ")", "\n", "_cmc", "[", "_cmc", ">", "1", "]", "=", "1", "\n", "cmc", "+=", "_cmc", "[", ":", "max_rank", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# compute AP", "\n", "num_rel", "=", "masked_orig_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "masked_orig_cmc", ".", "cumsum", "(", ")", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "masked_orig_cmc", "\n", "AP", "+=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "", "cmc", "/=", "N", "\n", "AP", "/=", "N", "\n", "all_cmc", ".", "append", "(", "cmc", ")", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "num_valid_q", "+=", "1.", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identities do not appear in gallery\"", "\n", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "\n", "return", "all_cmc", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.metrics.evaluate": [[122, 127], ["metrics.evaluate_cuhk03", "metrics.evaluate_market1501"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.metrics.evaluate_cuhk03", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.metrics.evaluate_market1501"], ["", "def", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", "=", "50", ",", "use_metric_cuhk03", "=", "False", ")", ":", "\n", "    ", "if", "use_metric_cuhk03", ":", "\n", "        ", "return", "evaluate_cuhk03", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", ")", "\n", "", "else", ":", "\n", "        ", "return", "evaluate_market1501", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "max_rank", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.random_erasing.RandomErasing.__init__": [[23, 29], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ",", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.random_erasing.RandomErasing.__call__": [[30, 56], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.size", "img.size", "math.sqrt", "math.sqrt", "img.size", "img.size", "img.size", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "probability", ":", "\n", "            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "(", ")", "[", "1", "]", "*", "img", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "size", "(", ")", "[", "2", "]", "and", "h", "<", "img", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "1", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "2", "]", "-", "w", ")", "\n", "if", "img", ".", "size", "(", ")", "[", "0", "]", "==", "3", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "img", "[", "1", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "1", "]", "\n", "img", "[", "2", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.covariance_market1501.Flatten": [[108, 110], ["input.contiguous().view", "input.size", "input.contiguous"], "function", ["None"], ["def", "Flatten", "(", "input", ")", ":", "\n", "    ", "return", "input", ".", "contiguous", "(", ")", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.covariance_market1501.get_activation": [[113, 117], ["output.detach"], "function", ["None"], ["def", "get_activation", "(", "name", ")", ":", "\n", "    ", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "        ", "activation", "[", "name", "]", "=", "output", ".", "detach", "(", ")", "\n", "", "return", "hook", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.covariance_market1501.train": [[119, 280], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "loss.CrossEntropy", "loss.TripletLoss", "model.fc0.train", "model.fc1.train", "model.base.train", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "list", "numpy.zeros", "range", "bmask.append", "range", "l_all_pos.append", "l_all_neg.append", "utils.AverageMeter.update", "model", "f.permute.permute", "torch.AdaptiveAvgPool2d", "nn.AdaptiveAvgPool2d.", "f.permute.permute", "range", "range", "covariance_market1501.Flatten", "covariance_market1501.Flatten", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.relu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "pids.cuda.cuda", "isinstance", "optim.zero_grad", "loss.backward", "optim.step", "utils.AverageMeter.update", "time.time", "utils.AverageMeter.update", "set", "len", "range", "range", "range", "len", "range", "imgs.cuda", "len", "torch.sub", "torch.sub", "torch.sub", "len", "torch.sub", "torch.sub", "torch.sub", "loss.DeepSuperVision", "loss.CrossEntropy.", "loss.item", "pids.cuda.size", "print", "len", "len", "len", "len", "l_batch_pos.append", "l_batch_neg.append", "time.time", "time.time", "l5.append", "len"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.Flatten", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.Flatten", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.DeepSuperVision"], ["", "def", "train", "(", "epoch", ",", "model", ",", "optim", ",", "trainloader", ")", ":", "\n", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "cross_entropy", "=", "CrossEntropy", "(", "num_classes", "=", "num_classes", ")", "\n", "triplet_loss_fn", "=", "TripletLoss", "(", "margin", "=", "margin", ")", "\n", "\n", "model", ".", "fc0", ".", "train", "(", "False", ")", "\n", "model", ".", "fc1", ".", "train", "(", "True", ")", "\n", "\n", "output_fc", "=", "\"fc1\"", "\n", "\n", "model", ".", "base", ".", "train", "(", "True", ")", "\n", "\n", "################################################3", "\n", "person_per_batch", "=", "8", "\n", "imgs_per_person", "=", "4", "\n", "\n", "\n", "bmask", "=", "[", "]", "\n", "l_all_pos", "=", "[", "]", "\n", "l_all_neg", "=", "[", "]", "\n", "pos_targets", "=", "torch", ".", "Tensor", "(", ")", "\n", "neg_targets", "=", "torch", ".", "Tensor", "(", ")", "\n", "C_pos", "=", "torch", ".", "zeros", "(", "[", "train_batch", ",", "256", ",", "2", ",", "4", "]", ",", "device", "=", "device", ")", "\n", "C_neg", "=", "torch", ".", "zeros", "(", "[", "train_batch", ",", "256", ",", "2", ",", "4", "]", ",", "device", "=", "device", ")", "\n", "###################################", "\n", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "#imgs,pids = imgs.cuda(), pids.cuda()", "\n", "        ", "pids", "=", "torch", ".", "Tensor", ".", "numpy", "(", "pids", ")", "\n", "camids", "=", "torch", ".", "Tensor", ".", "numpy", "(", "camids", ")", "\n", "uid", "=", "list", "(", "set", "(", "pids", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "[", "2", "*", "person_per_batch", ",", "person_per_batch", "*", "imgs_per_person", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "uid", ")", ")", ":", "\n", "            ", "sel", "=", "uid", "[", "i", "]", "\n", "# print(sel)", "\n", "pos", "=", "-", "1", "\n", "neg", "=", "-", "1", "\n", "k", "=", "-", "1", "\n", "for", "j", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "if", "(", "pids", "[", "j", "]", "==", "sel", ")", ":", "\n", "                    ", "k", "=", "j", "\n", "break", "\n", "\n", "", "", "for", "j", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "if", "(", "pids", "[", "k", "]", "==", "pids", "[", "j", "]", "and", "camids", "[", "k", "]", "!=", "camids", "[", "j", "]", ")", ":", "# Same IDs and diff cam IDs", "\n", "                    ", "pos", "=", "j", "#Postive        ", "\n", "break", "\n", "\n", "", "", "for", "j", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "if", "(", "pids", "[", "k", "]", "!=", "pids", "[", "j", "]", ")", ":", "#Negative                # Diff Cam IDs", "\n", "                    ", "neg", "=", "j", "\n", "break", "\n", "\n", "", "", "mask", "[", "2", "*", "i", "]", "[", "k", "]", "=", "1", "\n", "mask", "[", "2", "*", "i", "]", "[", "pos", "]", "=", "1", "\n", "mask", "[", "2", "*", "i", "+", "1", "]", "[", "k", "]", "=", "1", "\n", "mask", "[", "2", "*", "i", "+", "1", "]", "[", "neg", "]", "=", "1", "\n", "\n", "", "bmask", ".", "append", "(", "mask", ")", "\n", "\n", "l_batch_pos", "=", "[", "]", "\n", "l_batch_neg", "=", "[", "]", "\n", "kl", "=", "mask", "#bmask[batch]", "\n", "for", "i", "in", "range", "(", "len", "(", "kl", ")", ")", ":", "\n", "            ", "l5", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "kl", "[", "i", "]", ")", ")", ":", "\n", "                ", "if", "(", "kl", "[", "i", "]", "[", "j", "]", "==", "1", ")", ":", "\n", "                    ", "l5", ".", "append", "(", "j", ")", "\n", "", "", "if", "i", "%", "2", "<", "1", ":", "\n", "                ", "l_batch_pos", ".", "append", "(", "l5", ")", "\n", "", "else", ":", "\n", "                ", "l_batch_neg", ".", "append", "(", "l5", ")", "\n", "", "", "l_all_pos", ".", "append", "(", "l_batch_pos", ")", "\n", "l_all_neg", ".", "append", "(", "l_batch_neg", ")", "\n", "\n", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "clf_outputs", "=", "model", "(", "imgs", ".", "cuda", "(", ")", ")", "\n", "f", "=", "activation", "[", "'fc1.conv2'", "]", "#bs,2048,8,4", "\n", "f", "=", "f", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "m", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "256", ",", "2", ")", ")", "\n", "f", "=", "m", "(", "f", ")", "\n", "f", "=", "f", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "fc1", "=", "clf_outputs", "[", "output_fc", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "l_batch_pos", ")", ")", ":", "\n", "            ", "pos_idx0", "=", "l_batch_pos", "[", "i", "]", "[", "0", "]", "\n", "pos_idx1", "=", "l_batch_pos", "[", "i", "]", "[", "1", "]", "\n", "#print(f[pos_idx0].shape)", "\n", "pos_targets", "=", "torch", ".", "sub", "(", "f", "[", "pos_idx1", "]", ",", "f", "[", "pos_idx0", "]", ")", "\n", "C_pos", "+=", "pos_targets", "\n", "#print(pos_targets.shape)", "\n", "#pos_targets = torch.Tensor(pos_targets)", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "l_batch_neg", ")", ")", ":", "\n", "            ", "neg_idx0", "=", "l_batch_neg", "[", "i", "]", "[", "0", "]", "\n", "neg_idx1", "=", "l_batch_neg", "[", "i", "]", "[", "1", "]", "\n", "neg_targets", "=", "torch", ".", "sub", "(", "f", "[", "neg_idx1", "]", ",", "f", "[", "neg_idx0", "]", ")", "\n", "C_neg", "+=", "neg_targets", "\n", "\n", "", "g", "=", "Flatten", "(", "C_pos", ")", "\n", "\n", "y", "=", "Flatten", "(", "C_neg", ")", "\n", "\n", "u", "=", "g", "-", "y", "# (bs,2048)", "\n", "v", "=", "torch", ".", "unsqueeze", "(", "u", ",", "2", ")", "# (64,2048,1)", "\n", "w", "=", "v", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (64,1,2048)", "\n", "x_net", "=", "torch", ".", "matmul", "(", "v", ",", "w", ")", "# (64,2048,2048)   ", "\n", "y", "=", "torch", ".", "sum", "(", "x_net", ")", "\n", "y", "=", "F", ".", "relu", "(", "y", ")", "\n", "alpha", "=", "1e-9", "\n", "beta", "=", "0", "\n", "covariance_loss", "=", "1", "*", "(", "alpha", "*", "y", "-", "beta", ")", "\n", "\n", "pids", "=", "torch", ".", "from_numpy", "(", "pids", ")", "\n", "pids", "=", "pids", ".", "cuda", "(", ")", "\n", "\n", "\n", "if", "isinstance", "(", "fc1", ",", "tuple", ")", ":", "\n", "            ", "cross_entropy_loss", "=", "DeepSuperVision", "(", "cross_entropy", ",", "fc1", ",", "pids", ")", "\n", "", "else", ":", "\n", "            ", "cross_entropy_loss", "=", "cross_entropy", "(", "fc1", ",", "pids", ")", "\n", "", "\"\"\"\n        if isinstance(f,tuple):\n            triplet = DeepSuperVision(triplet_loss_fn,f,pids)\n        else:\n            triplet = triplet_loss_fn(f,pids)\n        \"\"\"", "\n", "#print(\"xent\", cross_entropy_loss)", "\n", "#print(\"covariance\", covariance_loss)", "\n", "loss", "=", "cross_entropy_loss", "+", "covariance_loss", "\n", "#print(\"xent\", cross_entropy_loss)", "\n", "#print(\"covariance_loss\", covariance_loss)", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "(", "batch", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "batch", "+", "1", ",", "len", "(", "trainloader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "######################################################################################################", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.covariance_market1501.test": [[281, 354], ["utils.AverageMeter", "model.eval", "print", "print", "distmat.numpy.addmm_", "distmat.numpy.numpy", "print", "metrics.evaluate", "print", "print", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "time.time", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "torch.cat.size", "torch.cat.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.cat.t", "print", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "fc1.data.cpu.data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "fc1.data.cpu.data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "time.time", "time.time", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.metrics.evaluate", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update"], ["", "", "", "def", "test", "(", "model", ",", "queryloader", ",", "galleryloader", ",", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "qf", ",", "q_pids", ",", "q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "fc1_preds", "=", "model", "(", "imgs", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "output_fc", "=", "\"fc1\"", "\n", "fc1", "=", "fc1_preds", "[", "output_fc", "]", "\n", "fc1", "=", "fc1", ".", "data", ".", "cpu", "(", ")", "\n", "\n", "qf", ".", "append", "(", "fc1", ")", "\n", "q_pids", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "", "qf", "=", "torch", ".", "cat", "(", "qf", ",", "0", ")", "\n", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for query set, obtained {}-by-{} matrix\"", ".", "format", "(", "qf", ".", "size", "(", "0", ")", ",", "qf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "gf", ",", "g_pids", ",", "g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "fc1_preds", "=", "model", "(", "imgs", ")", "\n", "\n", "output_fc", "=", "\"fc1\"", "\n", "fc1", "=", "fc1_preds", "[", "output_fc", "]", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "fc1", "=", "fc1", ".", "data", ".", "cpu", "(", ")", "\n", "gf", ".", "append", "(", "fc1", ")", "\n", "g_pids", ".", "extend", "(", "pids", ")", "\n", "g_camids", ".", "extend", "(", "camids", ")", "\n", "", "gf", "=", "torch", ".", "cat", "(", "gf", ",", "0", ")", "\n", "g_pids", "=", "np", ".", "asarray", "(", "g_pids", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "g_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for gallery set, obtained {}-by-{} matrix\"", ".", "format", "(", "gf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "1", ")", ")", ")", "\n", "##############################################################################################################################", "\n", "", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "\n", "m", ",", "n", "=", "qf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "0", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "qf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "qf", ",", "gf", ".", "t", "(", ")", ")", "\n", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "\"Computing CMC and mAP\"", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "use_metric_cuhk03", "=", "use_metric_cuhk03", ")", "\n", "\n", "print", "(", "\"Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.CrossEntropy.__init__": [[23, 29], ["torch.nn.Module.__init__", "torch.nn.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.hybrid_cnn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", "=", "0.1", ",", "use_gpu", "=", "True", ")", ":", "\n", "        ", "super", "(", "CrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.CrossEntropy.forward": [[30, 39], ["loss.CrossEntropy.logsoftmax", "torch.zeros().scatter_", "targets.cuda.cuda.unsqueeze().data.cpu", "targets.cuda.cuda.cuda", "torch.zeros", "loss.CrossEntropy.size", "targets.cuda.cuda.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "log_probs", "=", "self", ".", "logsoftmax", "(", "inputs", ")", "\n", "targets", "=", "torch", ".", "zeros", "(", "log_probs", ".", "size", "(", ")", ")", ".", "scatter_", "(", "1", ",", "targets", ".", "unsqueeze", "(", "1", ")", ".", "data", ".", "cpu", "(", ")", ",", "1", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "            ", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "", "epsilon", "=", "0.1", "\n", "targets", "=", "(", "1", "-", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.TripletLoss.__init__": [[41, 45], ["torch.nn.Module.__init__", "torch.nn.MarginRankingLoss"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.hybrid_cnn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "margin", "=", "0.3", ")", ":", "\n", "        ", "super", "(", "TripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.TripletLoss.forward": [[46, 66], ["inputs.size", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt.clamp().sqrt", "targets.expand().eq", "range", "torch.cat", "torch.cat", "torch.ones_like", "loss.TripletLoss.TripletLoss.ranking_loss", "dist.clamp().sqrt.clamp().sqrt.t", "inputs.t", "targets.expand().t", "torch.cat.append", "torch.cat.append", "torch.pow().sum", "dist.clamp().sqrt.clamp().sqrt.clamp", "targets.expand", "[].max().unsqueeze", "[].min().unsqueeze", "targets.expand", "torch.pow", "[].max", "[].min"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "\"\"\"\n        targets = ground truth with labels\n        \"\"\"", "\n", "n", "=", "inputs", ".", "size", "(", "0", ")", "\n", "#n = len(inputs)", "\n", "dist", "=", "torch", ".", "pow", "(", "inputs", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "n", ")", "\n", "dist", "=", "dist", "+", "dist", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "inputs", ",", "inputs", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "\n", "mask", "=", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "eq", "(", "targets", ".", "expand", "(", "n", ",", "n", ")", ".", "t", "(", ")", ")", "\n", "dist_ap", ",", "dist_an", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "dist_ap", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "]", ".", "max", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "dist_an", ".", "append", "(", "dist", "[", "i", "]", "[", "mask", "[", "i", "]", "==", "0", "]", ".", "min", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "dist_ap", "=", "torch", ".", "cat", "(", "dist_ap", ")", "\n", "dist_an", "=", "torch", ".", "cat", "(", "dist_an", ")", "\n", "y", "=", "torch", ".", "ones_like", "(", "dist_an", ")", "\n", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.DeepSuperVision": [[11, 21], ["lf"], "function", ["None"], ["def", "DeepSuperVision", "(", "lf", ",", "inp", ",", "y", ")", ":", "\n", "    ", "\"\"\"\n    lf = loss function\n    inp = tuple of inputs\n    y = ground truth\n    \"\"\"", "\n", "loss", "=", "0", "\n", "for", "i", "in", "inp", ":", "\n", "        ", "loss", "+=", "lf", "(", "i", ",", "y", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_loader.ImageDataset.__init__": [[24, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_loader.ImageDataset.__len__": [[28, 30], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_loader.ImageDataset.__getitem__": [[31, 37], ["dataset_loader.read_image", "dataset_loader.ImageDataset.transform"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_loader.read_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_path", ",", "pid", ",", "camid", "=", "self", ".", "dataset", "[", "index", "]", "\n", "img", "=", "read_image", "(", "img_path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "pid", ",", "camid", "", "", "", ""]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.dataset_loader.read_image": [[10, 22], ["os.exists", "IOError", "PIL.Image.open().convert", "print", "PIL.Image.open"], "function", ["None"], ["def", "read_image", "(", "img_path", ")", ":", "\n", "    ", "got_img", "=", "False", "\n", "if", "not", "osp", ".", "exists", "(", "img_path", ")", ":", "\n", "        ", "raise", "IOError", "(", "\"{} does not exist\"", ".", "format", "(", "img_path", ")", ")", "\n", "", "while", "not", "got_img", ":", "\n", "        ", "try", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "got_img", "=", "True", "\n", "", "except", "IOError", ":", "\n", "            ", "print", "(", "\"IOError incurred when reading '{}'. In-progress\"", ".", "format", "(", "img_path", ")", ")", "\n", "pass", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.__init__": [[19, 21], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.reset": [[22, 27], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update": [[28, 33], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.__init__": [[45, 51], ["utils.mkdir_if_missing", "open", "os.path.dirname", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.mkdir_if_missing"], ["def", "__init__", "(", "self", ",", "fpath", "=", "None", ")", ":", "\n", "        ", "self", ".", "console", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "None", "\n", "if", "fpath", "is", "not", "None", ":", "\n", "            ", "mkdir_if_missing", "(", "os", ".", "path", ".", "dirname", "(", "fpath", ")", ")", "\n", "self", ".", "file", "=", "open", "(", "fpath", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.__del__": [[52, 54], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.close"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.__enter__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.__exit__": [[58, 60], ["utils.Logger.close"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.write": [[61, 65], ["utils.Logger.console.write", "utils.Logger.file.write"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.write", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.write"], ["", "def", "write", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "console", ".", "write", "(", "msg", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.flush": [[66, 71], ["utils.Logger.console.flush", "utils.Logger.file.flush", "os.fsync", "os.fsync", "os.fsync", "os.fsync", "utils.Logger.file.fileno"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.flush", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "flush", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "os", ".", "fsync", "(", "self", ".", "file", ".", "fileno", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.close": [[72, 76], ["utils.Logger.console.close", "utils.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.close", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.Logger.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "console", ".", "close", "(", ")", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.mkdir_if_missing": [[11, 18], ["os.exists", "os.mkdir", "os.mkdir"], "function", ["None"], ["def", "mkdir_if_missing", "(", "dir", ")", ":", "\n", "    ", "if", "not", "osp", ".", "exists", "(", "dir", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "mkdir", "(", "dir", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "            ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "                ", "raise", "\n", "", "", "", "", "class", "AverageMeter", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.save_checkpoint": [[34, 39], ["utils.mkdir_if_missing", "torch.save", "os.dirname", "shutil.copy", "os.join", "os.dirname"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.mkdir_if_missing"], ["", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "fpath", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "fpath", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copy", "(", "fpath", ",", "osp", ".", "join", "(", "osp", ".", "dirname", "(", "fpath", ")", ",", "'best_model.pth.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.read_json": [[77, 81], ["open", "json.load"], "function", ["None"], ["", "", "", "def", "read_json", "(", "fpath", ")", ":", "\n", "    ", "with", "open", "(", "fpath", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "obj", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.write_json": [[82, 86], ["utils.mkdir_if_missing", "os.dirname", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.mkdir_if_missing"], ["", "def", "write_json", "(", "obj", ",", "fpath", ")", ":", "\n", "    ", "mkdir_if_missing", "(", "osp", ".", "dirname", "(", "fpath", ")", ")", "\n", "with", "open", "(", "fpath", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "f", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "': '", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.Flatten": [[109, 111], ["input.contiguous().view", "input.size", "input.contiguous"], "function", ["None"], ["def", "Flatten", "(", "input", ")", ":", "\n", "    ", "return", "input", ".", "contiguous", "(", ")", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.get_activation": [[114, 118], ["output.detach"], "function", ["None"], ["def", "get_activation", "(", "name", ")", ":", "\n", "    ", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "        ", "activation", "[", "name", "]", "=", "output", ".", "detach", "(", ")", "\n", "", "return", "hook", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.train": [[120, 281], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "loss.CrossEntropy", "loss.TripletLoss", "model.fc0.train", "model.fc1.train", "model.base.train", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "torch.Tensor.numpy", "list", "numpy.zeros", "range", "bmask.append", "range", "l_all_pos.append", "l_all_neg.append", "utils.AverageMeter.update", "model", "f.permute.permute", "torch.AdaptiveAvgPool2d", "nn.AdaptiveAvgPool2d.", "f.permute.permute", "range", "range", "evaluation.Flatten", "evaluation.Flatten", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum", "torch.sum", "torch.sum", "torch.nn.functional.relu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "pids.cuda.cuda", "isinstance", "optim.zero_grad", "loss.backward", "optim.step", "utils.AverageMeter.update", "time.time", "utils.AverageMeter.update", "set", "len", "range", "range", "range", "len", "range", "imgs.cuda", "len", "torch.sub", "torch.sub", "torch.sub", "len", "torch.sub", "torch.sub", "torch.sub", "loss.DeepSuperVision", "loss.CrossEntropy.", "loss.item", "pids.cuda.size", "print", "len", "len", "len", "len", "l_batch_pos.append", "l_batch_neg.append", "time.time", "time.time", "l5.append", "len"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.Flatten", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.Flatten", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.DeepSuperVision"], ["", "def", "train", "(", "epoch", ",", "model", ",", "optim", ",", "trainloader", ")", ":", "\n", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "cross_entropy", "=", "CrossEntropy", "(", "num_classes", "=", "num_classes", ")", "\n", "triplet_loss_fn", "=", "TripletLoss", "(", "margin", "=", "margin", ")", "\n", "\n", "model", ".", "fc0", ".", "train", "(", "False", ")", "\n", "model", ".", "fc1", ".", "train", "(", "True", ")", "\n", "\n", "output_fc", "=", "\"fc1\"", "\n", "\n", "model", ".", "base", ".", "train", "(", "True", ")", "\n", "\n", "################################################3", "\n", "person_per_batch", "=", "8", "\n", "imgs_per_person", "=", "4", "\n", "\n", "\n", "bmask", "=", "[", "]", "\n", "l_all_pos", "=", "[", "]", "\n", "l_all_neg", "=", "[", "]", "\n", "pos_targets", "=", "torch", ".", "Tensor", "(", ")", "\n", "neg_targets", "=", "torch", ".", "Tensor", "(", ")", "\n", "C_pos", "=", "torch", ".", "zeros", "(", "[", "train_batch", ",", "256", ",", "2", ",", "4", "]", ",", "device", "=", "device", ")", "\n", "C_neg", "=", "torch", ".", "zeros", "(", "[", "train_batch", ",", "256", ",", "2", ",", "4", "]", ",", "device", "=", "device", ")", "\n", "###################################", "\n", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "#imgs,pids = imgs.cuda(), pids.cuda()", "\n", "        ", "pids", "=", "torch", ".", "Tensor", ".", "numpy", "(", "pids", ")", "\n", "camids", "=", "torch", ".", "Tensor", ".", "numpy", "(", "camids", ")", "\n", "uid", "=", "list", "(", "set", "(", "pids", ")", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "[", "2", "*", "person_per_batch", ",", "person_per_batch", "*", "imgs_per_person", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "uid", ")", ")", ":", "\n", "            ", "sel", "=", "uid", "[", "i", "]", "\n", "# print(sel)", "\n", "pos", "=", "-", "1", "\n", "neg", "=", "-", "1", "\n", "k", "=", "-", "1", "\n", "for", "j", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "if", "(", "pids", "[", "j", "]", "==", "sel", ")", ":", "\n", "                    ", "k", "=", "j", "\n", "break", "\n", "\n", "", "", "for", "j", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "if", "(", "pids", "[", "k", "]", "==", "pids", "[", "j", "]", "and", "camids", "[", "k", "]", "!=", "camids", "[", "j", "]", ")", ":", "# Same IDs and diff cam IDs", "\n", "                    ", "pos", "=", "j", "#Postive        ", "\n", "break", "\n", "\n", "", "", "for", "j", "in", "range", "(", "len", "(", "pids", ")", ")", ":", "\n", "                ", "if", "(", "pids", "[", "k", "]", "!=", "pids", "[", "j", "]", ")", ":", "#Negative                # Diff Cam IDs", "\n", "                    ", "neg", "=", "j", "\n", "break", "\n", "\n", "", "", "mask", "[", "2", "*", "i", "]", "[", "k", "]", "=", "1", "\n", "mask", "[", "2", "*", "i", "]", "[", "pos", "]", "=", "1", "\n", "mask", "[", "2", "*", "i", "+", "1", "]", "[", "k", "]", "=", "1", "\n", "mask", "[", "2", "*", "i", "+", "1", "]", "[", "neg", "]", "=", "1", "\n", "\n", "", "bmask", ".", "append", "(", "mask", ")", "\n", "\n", "l_batch_pos", "=", "[", "]", "\n", "l_batch_neg", "=", "[", "]", "\n", "kl", "=", "mask", "#bmask[batch]", "\n", "for", "i", "in", "range", "(", "len", "(", "kl", ")", ")", ":", "\n", "            ", "l5", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "kl", "[", "i", "]", ")", ")", ":", "\n", "                ", "if", "(", "kl", "[", "i", "]", "[", "j", "]", "==", "1", ")", ":", "\n", "                    ", "l5", ".", "append", "(", "j", ")", "\n", "", "", "if", "i", "%", "2", "<", "1", ":", "\n", "                ", "l_batch_pos", ".", "append", "(", "l5", ")", "\n", "", "else", ":", "\n", "                ", "l_batch_neg", ".", "append", "(", "l5", ")", "\n", "", "", "l_all_pos", ".", "append", "(", "l_batch_pos", ")", "\n", "l_all_neg", ".", "append", "(", "l_batch_neg", ")", "\n", "\n", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "clf_outputs", "=", "model", "(", "imgs", ".", "cuda", "(", ")", ")", "\n", "f", "=", "activation", "[", "'fc1.conv2'", "]", "\n", "f", "=", "f", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "m", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "256", ",", "2", ")", ")", "\n", "f", "=", "m", "(", "f", ")", "\n", "f", "=", "f", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "fc1", "=", "clf_outputs", "[", "output_fc", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "l_batch_pos", ")", ")", ":", "\n", "            ", "pos_idx0", "=", "l_batch_pos", "[", "i", "]", "[", "0", "]", "\n", "pos_idx1", "=", "l_batch_pos", "[", "i", "]", "[", "1", "]", "\n", "#print(f[pos_idx0].shape)", "\n", "pos_targets", "=", "torch", ".", "sub", "(", "f", "[", "pos_idx1", "]", ",", "f", "[", "pos_idx0", "]", ")", "\n", "C_pos", "+=", "pos_targets", "\n", "#print(pos_targets.shape)", "\n", "#pos_targets = torch.Tensor(pos_targets)", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "l_batch_neg", ")", ")", ":", "\n", "            ", "neg_idx0", "=", "l_batch_neg", "[", "i", "]", "[", "0", "]", "\n", "neg_idx1", "=", "l_batch_neg", "[", "i", "]", "[", "1", "]", "\n", "neg_targets", "=", "torch", ".", "sub", "(", "f", "[", "neg_idx1", "]", ",", "f", "[", "neg_idx0", "]", ")", "\n", "C_neg", "+=", "neg_targets", "\n", "\n", "", "g", "=", "Flatten", "(", "C_pos", ")", "\n", "\n", "y", "=", "Flatten", "(", "C_neg", ")", "\n", "\n", "u", "=", "g", "-", "y", "# (bs,2048)", "\n", "v", "=", "torch", ".", "unsqueeze", "(", "u", ",", "2", ")", "# (64,2048,1)", "\n", "w", "=", "v", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (64,1,2048)", "\n", "x_net", "=", "torch", ".", "matmul", "(", "v", ",", "w", ")", "# (64,2048,2048)   ", "\n", "y", "=", "torch", ".", "sum", "(", "x_net", ")", "\n", "y", "=", "F", ".", "relu", "(", "y", ")", "\n", "alpha", "=", "1e-9", "\n", "beta", "=", "0", "\n", "covariance_loss", "=", "1", "*", "(", "alpha", "*", "y", "-", "beta", ")", "\n", "\n", "pids", "=", "torch", ".", "from_numpy", "(", "pids", ")", "\n", "pids", "=", "pids", ".", "cuda", "(", ")", "\n", "\n", "\n", "if", "isinstance", "(", "fc1", ",", "tuple", ")", ":", "\n", "            ", "cross_entropy_loss", "=", "DeepSuperVision", "(", "cross_entropy", ",", "fc1", ",", "pids", ")", "\n", "", "else", ":", "\n", "            ", "cross_entropy_loss", "=", "cross_entropy", "(", "fc1", ",", "pids", ")", "\n", "", "\"\"\"\n        if isinstance(f,tuple):\n            triplet = DeepSuperVision(triplet_loss_fn,f,pids)\n        else:\n            triplet = triplet_loss_fn(f,pids)\n        \"\"\"", "\n", "#print(\"xent\", cross_entropy_loss)", "\n", "#print(\"covariance\", covariance_loss)", "\n", "loss", "=", "cross_entropy_loss", "+", "covariance_loss", "\n", "#print(\"xent\", cross_entropy_loss)", "\n", "#print(\"covariance_loss\", covariance_loss)", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "(", "batch", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "batch", "+", "1", ",", "len", "(", "trainloader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "######################################################################################################", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.evaluation.test": [[282, 355], ["utils.AverageMeter", "model.eval", "print", "print", "distmat.numpy.addmm_", "distmat.numpy.numpy", "print", "metrics.evaluate", "print", "print", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "time.time", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "torch.cat.size", "torch.cat.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.cat.t", "print", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "fc0.data.cpu.data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "fc0.data.cpu.data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "time.time", "time.time", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.metrics.evaluate", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update"], ["", "", "", "def", "test", "(", "model", ",", "queryloader", ",", "galleryloader", ",", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "qf", ",", "q_pids", ",", "q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "fc0_preds", "=", "model", "(", "imgs", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "output_fc", "=", "\"fc0\"", "\n", "fc0", "=", "fc0_preds", "[", "output_fc", "]", "\n", "fc0", "=", "fc0", ".", "data", ".", "cpu", "(", ")", "\n", "\n", "qf", ".", "append", "(", "fc0", ")", "\n", "q_pids", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "", "qf", "=", "torch", ".", "cat", "(", "qf", ",", "0", ")", "\n", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for query set, obtained {}-by-{} matrix\"", ".", "format", "(", "qf", ".", "size", "(", "0", ")", ",", "qf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "gf", ",", "g_pids", ",", "g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "fc0_preds", "=", "model", "(", "imgs", ")", "\n", "\n", "output_fc", "=", "\"fc0\"", "\n", "fc0", "=", "fc0_preds", "[", "output_fc", "]", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "fc0", "=", "fc0", ".", "data", ".", "cpu", "(", ")", "\n", "gf", ".", "append", "(", "fc0", ")", "\n", "g_pids", ".", "extend", "(", "pids", ")", "\n", "g_camids", ".", "extend", "(", "camids", ")", "\n", "", "gf", "=", "torch", ".", "cat", "(", "gf", ",", "0", ")", "\n", "g_pids", "=", "np", ".", "asarray", "(", "g_pids", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "g_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for gallery set, obtained {}-by-{} matrix\"", ".", "format", "(", "gf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "1", ")", ")", ")", "\n", "##############################################################################################################################", "\n", "", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "\n", "m", ",", "n", "=", "qf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "0", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "qf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "qf", ",", "gf", ".", "t", "(", ")", ")", "\n", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "\"Computing CMC and mAP\"", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "use_metric_cuhk03", "=", "use_metric_cuhk03", ")", "\n", "\n", "print", "(", "\"Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.cmc_figures_data.make_figure.cmc_figure": [[12, 56], ["matplotlib.font_manager.FontProperties", "matplotlib.figure", "plt.figure.add_subplot", "enumerate", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_ylim", "fig.add_subplot.set_yticks", "len", "len", "fig.add_subplot.legend", "fig.add_subplot.yaxis.grid", "fig.add_subplot.xaxis.grid", "matplotlib.clf", "methods.keys", "numpy.arange", "r1.append", "fig.add_subplot.plot", "result.append", "fig.add_subplot.set_xlim", "fig.add_subplot.set_xlim", "numpy.arange", "matplotlib.show", "plt.figure.savefig", "zip", "len", "len"], "function", ["None"], ["def", "cmc_figure", "(", "methods", ",", "fname", "=", "None", ",", "keys", "=", "None", ",", "rank_lim", "=", "None", ")", ":", "\n", "    ", "legfont", "=", "mpl", ".", "font_manager", ".", "FontProperties", "(", "family", "=", "\"monospace\"", ")", "\n", "# mlabdefaults()", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "r1", "=", "[", "]", "\n", "result", "=", "[", "]", "\n", "if", "keys", "is", "None", ":", "\n", "        ", "keys", "=", "methods", ".", "keys", "(", ")", "\n", "", "for", "i", ",", "m", "in", "enumerate", "(", "keys", ")", ":", "\n", "        ", "y", "=", "methods", "[", "m", "]", "\n", "x", "=", "np", ".", "arange", "(", "y", ".", "size", ")", "\n", "r1", ".", "append", "(", "y", "[", "0", "]", ")", "\n", "ax", ".", "plot", "(", "x", ",", "y", ",", "\n", "color", "=", "k_colors", "[", "i", "]", ",", "\n", "linestyle", "=", "\"-\"", ",", "\n", "marker", "=", "k_markers", "[", "i", "]", ",", "\n", "markevery", "=", "5", ")", "\n", "result", ".", "append", "(", "y", ")", "\n", "", "ax", ".", "set_xlabel", "(", "\"Rank\"", ")", "\n", "ax", ".", "set_ylabel", "(", "\"Identification Rate\"", ")", "\n", "if", "rank_lim", "is", "None", ":", "\n", "        ", "ax", ".", "set_xlim", "(", "0", ",", "100", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_xlim", "(", "0", ",", "rank_lim", ")", "\n", "", "ax", ".", "set_ylim", "(", "0", ",", "1.0", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "0.0", ",", "1.1", ",", "0.1", ")", ")", "\n", "r1", "=", "[", "'%0.2f'", "%", "(", "r", "*", "100", ")", "for", "r", "in", "r1", "]", "\n", "digitlen", "=", "len", "(", "\"10.10\"", ")", "\n", "total_len", "=", "len", "(", "\"Euclidean 10.10\"", ")", "\n", "\n", "r1", "=", "[", "'%s%s(%s%s%%)'", "%", "(", "leg", ",", "\n", "''", ".", "join", "(", "[", "' '", "]", "*", "(", "total_len", "-", "digitlen", "-", "len", "(", "leg", ")", ")", ")", ",", "\n", "''", ".", "join", "(", "[", "' '", "]", "*", "(", "digitlen", "-", "len", "(", "r", ")", ")", ")", ",", "\n", "r", ")", "for", "r", ",", "leg", "in", "zip", "(", "r1", ",", "keys", ")", "]", "\n", "ax", ".", "legend", "(", "r1", ",", "prop", "=", "legfont", ",", "loc", "=", "4", ")", "\n", "ax", ".", "yaxis", ".", "grid", "(", "color", "=", "'gray'", ",", "linestyle", "=", "'dashed'", ")", "\n", "ax", ".", "xaxis", ".", "grid", "(", "color", "=", "'gray'", ",", "linestyle", "=", "'dashed'", ")", "\n", "if", "fname", "is", "None", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "        ", "fig", ".", "savefig", "(", "fname", ")", "\n", "", "plt", ".", "clf", "(", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.augmented1.__init__": [[16, 21], ["torch.nn.Module.__init__", "hybrid_convnet2.conv_layer", "hybrid_convnet2.conv_layer", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.hybrid_cnn.__init__", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.conv_layer", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.conv_layer"], ["    ", "def", "__init__", "(", "self", ",", "ni", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv_layer", "(", "ni", ",", "ni", "//", "2", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv2", "=", "conv_layer", "(", "ni", "//", "2", ",", "ni", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "ni", "*", "8", "*", "4", ",", "751", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.augmented1.forward": [[22, 26], ["hybrid_convnet2.augmented1.conv2", "x.view.view.view", "hybrid_convnet2.augmented1.classifier", "hybrid_convnet2.augmented1.conv1", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv2", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.augmented2.__init__": [[28, 33], ["torch.nn.Module.__init__", "hybrid_convnet2.conv_layer", "hybrid_convnet2.conv_layer", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.hybrid_cnn.__init__", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.conv_layer", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.conv_layer"], ["    ", "def", "__init__", "(", "self", ",", "ni", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv_layer", "(", "ni", ",", "ni", "//", "2", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "conv2", "=", "conv_layer", "(", "ni", "//", "2", ",", "ni", ",", "kernel_size", "=", "3", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "ni", "*", "8", "*", "4", ",", "1360", ")", "## Change here as per dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.augmented2.forward": [[34, 38], ["hybrid_convnet2.augmented2.conv2", "x.view.view.view", "hybrid_convnet2.augmented2.classifier", "hybrid_convnet2.augmented2.conv1", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv2", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.hybrid_cnn.__init__": [[40, 47], ["torch.nn.Module.__init__", "torchvision.models.resnet50", "torch.nn.Sequential", "setattr", "setattr", "hybrid_convnet2.augmented1", "hybrid_convnet2.augmented2", "list", "torchvision.models.resnet50.children"], "methods", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.hybrid_cnn.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "hybrid_cnn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "base", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", ")", "\n", "\n", "setattr", "(", "self", ",", "\"fc0\"", ",", "augmented1", "(", "2048", ")", ")", "\n", "setattr", "(", "self", ",", "\"fc1\"", ",", "augmented2", "(", "2048", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.hybrid_cnn.forward": [[49, 58], ["hybrid_convnet2.hybrid_cnn.base", "range", "getattr"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "base", "(", "x", ")", "\n", "clf_outputs", "=", "{", "}", "\n", "num_fcs", "=", "2", "\n", "\n", "for", "i", "in", "range", "(", "num_fcs", ")", ":", "\n", "            ", "clf_outputs", "[", "\"fc%d\"", "%", "i", "]", "=", "getattr", "(", "self", ",", "\"fc%d\"", "%", "i", ")", "(", "x", ")", "\n", "\n", "", "return", "clf_outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.models.hybrid_convnet2.conv_layer": [[8, 13], ["torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.LeakyReLU"], "function", ["None"], ["def", "conv_layer", "(", "ni", ",", "nf", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ni", ",", "nf", ",", "kernel_size", "=", "kernel_size", ",", "bias", "=", "False", ",", "stride", "=", "stride", ",", "padding", "=", "kernel_size", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nf", ",", "momentum", "=", "0.01", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_joint_training.train": [[115, 169], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "loss.CrossEntropy", "loss.TripletLoss", "model.fc0.train", "model.fc1.train", "model.base.train", "enumerate", "utils.AverageMeter.update", "model", "isinstance", "isinstance", "optim.zero_grad", "loss.backward", "optim.step", "utils.AverageMeter.update", "time.time", "utils.AverageMeter.update", "imgs.cuda", "pids.cuda", "loss.DeepSuperVision", "loss.CrossEntropy.", "loss.DeepSuperVision", "loss.TripletLoss.", "loss.item", "pids.size", "print", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.DeepSuperVision", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.DeepSuperVision"], ["def", "train", "(", "epoch", ",", "model", ",", "optim", ",", "trainloader", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "cross_entropy", "=", "CrossEntropy", "(", "num_classes", "=", "num_classes", ")", "\n", "triplet_loss_fn", "=", "TripletLoss", "(", "margin", "=", "margin", ")", "\n", "\n", "model", ".", "fc0", ".", "train", "(", "True", ")", "\n", "model", ".", "fc1", ".", "train", "(", "True", ")", "\n", "\n", "output_fc", "=", "\"fc1\"", "\n", "\n", "model", ".", "base", ".", "train", "(", "True", ")", "\n", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "_", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "imgs", ",", "pids", "=", "imgs", ".", "cuda", "(", ")", ",", "pids", ".", "cuda", "(", ")", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "clf_outputs", ",", "features", "=", "model", "(", "imgs", ")", "\n", "\n", "if", "isinstance", "(", "clf_outputs", "[", "output_fc", "]", ",", "tuple", ")", ":", "\n", "            ", "cross_entropy_loss", "=", "DeepSuperVision", "(", "cross_entropy", ",", "clf_outputs", "[", "output_fc", "]", ",", "pids", ")", "\n", "", "else", ":", "\n", "            ", "cross_entropy_loss", "=", "cross_entropy", "(", "clf_outputs", "[", "output_fc", "]", ",", "pids", ")", "\n", "\n", "", "if", "isinstance", "(", "features", ",", "tuple", ")", ":", "\n", "            ", "triplet_loss", "=", "DeepSuperVision", "(", "triplet_loss_fn", ",", "features", ",", "pids", ")", "\n", "", "else", ":", "\n", "            ", "triplet_loss", "=", "triplet_loss_fn", "(", "clf_outputs", "[", "output_fc", "]", ",", "pids", ")", "\n", "\n", "", "loss", "=", "cross_entropy_loss", "+", "triplet_loss", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "(", "batch", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "batch", "+", "1", ",", "len", "(", "trainloader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "######################################################################################################", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_joint_training.test": [[170, 235], ["utils.AverageMeter", "model.eval", "print", "print", "distmat.numpy.addmm_", "distmat.numpy.numpy", "print", "metrics.evaluate", "print", "print", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "time.time", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "torch.cat.size", "torch.cat.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.cat.t", "print", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "clf_outputs[].data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "clf_outputs[].data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "time.time", "time.time", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.metrics.evaluate", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update"], ["", "", "", "def", "test", "(", "model", ",", "queryloader", ",", "galleryloader", ",", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "qf", ",", "q_pids", ",", "q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "clf_outputs", ",", "f", "=", "model", "(", "imgs", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "output_fc", "=", "\"fc1\"", "\n", "\n", "f", "=", "clf_outputs", "[", "output_fc", "]", ".", "data", ".", "cpu", "(", ")", "\n", "qf", ".", "append", "(", "f", ")", "\n", "q_pids", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "", "qf", "=", "torch", ".", "cat", "(", "qf", ",", "0", ")", "\n", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for query set, obtained {}-by-{} matrix\"", ".", "format", "(", "qf", ".", "size", "(", "0", ")", ",", "qf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "gf", ",", "g_pids", ",", "g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "clf_outputs", ",", "f", "=", "model", "(", "imgs", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "f", "=", "clf_outputs", "[", "output_fc", "]", ".", "data", ".", "cpu", "(", ")", "\n", "gf", ".", "append", "(", "f", ")", "\n", "g_pids", ".", "extend", "(", "pids", ")", "\n", "g_camids", ".", "extend", "(", "camids", ")", "\n", "", "gf", "=", "torch", ".", "cat", "(", "gf", ",", "0", ")", "\n", "g_pids", "=", "np", ".", "asarray", "(", "g_pids", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "g_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for gallery set, obtained {}-by-{} matrix\"", ".", "format", "(", "gf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "1", ")", ")", ")", "\n", "##############################################################################################################################", "\n", "", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "\n", "m", ",", "n", "=", "qf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "0", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "qf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "qf", ",", "gf", ".", "t", "(", ")", ")", "\n", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "\"Computing CMC and mAP\"", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "use_metric_cuhk03", "=", "use_metric_cuhk03", ")", "\n", "\n", "print", "(", "\"Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase1.train": [[115, 169], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "loss.CrossEntropy", "loss.TripletLoss", "model.fc0.train", "model.fc1.train", "model.base.train", "enumerate", "utils.AverageMeter.update", "model", "isinstance", "isinstance", "optim.zero_grad", "loss.backward", "optim.step", "utils.AverageMeter.update", "time.time", "utils.AverageMeter.update", "imgs.cuda", "pids.cuda", "loss.DeepSuperVision", "loss.CrossEntropy.", "loss.DeepSuperVision", "loss.TripletLoss.", "loss.item", "pids.size", "print", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.DeepSuperVision", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.DeepSuperVision"], ["def", "train", "(", "epoch", ",", "model", ",", "optim", ",", "trainloader", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "cross_entropy", "=", "CrossEntropy", "(", "num_classes", "=", "num_classes", ")", "\n", "triplet_loss_fn", "=", "TripletLoss", "(", "margin", "=", "margin", ")", "\n", "\n", "model", ".", "fc0", ".", "train", "(", "True", ")", "\n", "model", ".", "fc1", ".", "train", "(", "False", ")", "\n", "\n", "output_fc", "=", "\"fc0\"", "\n", "\n", "model", ".", "base", ".", "train", "(", "True", ")", "\n", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "_", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "imgs", ",", "pids", "=", "imgs", ".", "cuda", "(", ")", ",", "pids", ".", "cuda", "(", ")", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "clf_outputs", ",", "features", "=", "model", "(", "imgs", ")", "\n", "\n", "if", "isinstance", "(", "clf_outputs", "[", "output_fc", "]", ",", "tuple", ")", ":", "\n", "            ", "cross_entropy_loss", "=", "DeepSuperVision", "(", "cross_entropy", ",", "clf_outputs", "[", "output_fc", "]", ",", "pids", ")", "\n", "", "else", ":", "\n", "            ", "cross_entropy_loss", "=", "cross_entropy", "(", "clf_outputs", "[", "output_fc", "]", ",", "pids", ")", "\n", "\n", "", "if", "isinstance", "(", "features", ",", "tuple", ")", ":", "\n", "            ", "triplet_loss", "=", "DeepSuperVision", "(", "triplet_loss_fn", ",", "features", ",", "pids", ")", "\n", "", "else", ":", "\n", "            ", "triplet_loss", "=", "triplet_loss_fn", "(", "clf_outputs", "[", "output_fc", "]", ",", "pids", ")", "\n", "\n", "", "loss", "=", "cross_entropy_loss", "+", "triplet_loss", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "(", "batch", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "batch", "+", "1", ",", "len", "(", "trainloader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "######################################################################################################", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase1.test": [[170, 235], ["utils.AverageMeter", "model.eval", "print", "print", "distmat.numpy.addmm_", "distmat.numpy.numpy", "print", "metrics.evaluate", "print", "print", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "time.time", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "torch.cat.size", "torch.cat.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.cat.t", "print", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "clf_outputs[].data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "clf_outputs[].data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "time.time", "time.time", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.metrics.evaluate", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update"], ["", "", "", "def", "test", "(", "model", ",", "queryloader", ",", "galleryloader", ",", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "qf", ",", "q_pids", ",", "q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "clf_outputs", ",", "f", "=", "model", "(", "imgs", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "output_fc", "=", "\"fc0\"", "\n", "\n", "f", "=", "clf_outputs", "[", "output_fc", "]", ".", "data", ".", "cpu", "(", ")", "\n", "qf", ".", "append", "(", "f", ")", "\n", "q_pids", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "", "qf", "=", "torch", ".", "cat", "(", "qf", ",", "0", ")", "\n", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for query set, obtained {}-by-{} matrix\"", ".", "format", "(", "qf", ".", "size", "(", "0", ")", ",", "qf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "gf", ",", "g_pids", ",", "g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "clf_outputs", ",", "f", "=", "model", "(", "imgs", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "f", "=", "clf_outputs", "[", "output_fc", "]", ".", "data", ".", "cpu", "(", ")", "\n", "gf", ".", "append", "(", "f", ")", "\n", "g_pids", ".", "extend", "(", "pids", ")", "\n", "g_camids", ".", "extend", "(", "camids", ")", "\n", "", "gf", "=", "torch", ".", "cat", "(", "gf", ",", "0", ")", "\n", "g_pids", "=", "np", ".", "asarray", "(", "g_pids", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "g_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for gallery set, obtained {}-by-{} matrix\"", ".", "format", "(", "gf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "1", ")", ")", ")", "\n", "##############################################################################################################################", "\n", "", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "\n", "m", ",", "n", "=", "qf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "0", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "qf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "qf", ",", "gf", ".", "t", "(", ")", ")", "\n", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "\"Computing CMC and mAP\"", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "use_metric_cuhk03", "=", "use_metric_cuhk03", ")", "\n", "\n", "print", "(", "\"Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train": [[115, 169], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "model.train", "time.time", "loss.CrossEntropy", "loss.TripletLoss", "model.fc0.train", "model.fc1.train", "model.base.train", "enumerate", "utils.AverageMeter.update", "model", "isinstance", "isinstance", "optim.zero_grad", "loss.backward", "optim.step", "utils.AverageMeter.update", "time.time", "utils.AverageMeter.update", "imgs.cuda", "pids.cuda", "loss.DeepSuperVision", "loss.CrossEntropy.", "loss.DeepSuperVision", "loss.TripletLoss.", "loss.item", "pids.size", "print", "time.time", "time.time", "len"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.train", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.DeepSuperVision", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.loss.DeepSuperVision"], ["def", "train", "(", "epoch", ",", "model", ",", "optim", ",", "trainloader", ")", ":", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "cross_entropy", "=", "CrossEntropy", "(", "num_classes", "=", "num_classes", ")", "\n", "triplet_loss_fn", "=", "TripletLoss", "(", "margin", "=", "margin", ")", "\n", "\n", "model", ".", "fc0", ".", "train", "(", "False", ")", "\n", "model", ".", "fc1", ".", "train", "(", "True", ")", "\n", "\n", "output_fc", "=", "\"fc1\"", "\n", "\n", "model", ".", "base", ".", "train", "(", "False", ")", "\n", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "_", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "imgs", ",", "pids", "=", "imgs", ".", "cuda", "(", ")", ",", "pids", ".", "cuda", "(", ")", "\n", "\n", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "clf_outputs", ",", "features", "=", "model", "(", "imgs", ")", "\n", "\n", "if", "isinstance", "(", "clf_outputs", "[", "output_fc", "]", ",", "tuple", ")", ":", "\n", "            ", "cross_entropy_loss", "=", "DeepSuperVision", "(", "cross_entropy", ",", "clf_outputs", "[", "output_fc", "]", ",", "pids", ")", "\n", "", "else", ":", "\n", "            ", "cross_entropy_loss", "=", "cross_entropy", "(", "clf_outputs", "[", "output_fc", "]", ",", "pids", ")", "\n", "\n", "", "if", "isinstance", "(", "features", ",", "tuple", ")", ":", "\n", "            ", "triplet_loss", "=", "DeepSuperVision", "(", "triplet_loss_fn", ",", "features", ",", "pids", ")", "\n", "", "else", ":", "\n", "            ", "triplet_loss", "=", "triplet_loss_fn", "(", "clf_outputs", "[", "output_fc", "]", ",", "pids", ")", "\n", "\n", "", "loss", "=", "cross_entropy_loss", "+", "triplet_loss", "\n", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "pids", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "(", "batch", "+", "1", ")", "%", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "batch", "+", "1", ",", "len", "(", "trainloader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ")", ")", "\n", "######################################################################################################", "\n"]], "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.lwf_train_modules.train_phase2.test": [[170, 235], ["utils.AverageMeter", "model.eval", "print", "print", "distmat.numpy.addmm_", "distmat.numpy.numpy", "print", "metrics.evaluate", "print", "print", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "time.time", "enumerate", "torch.cat", "torch.cat", "torch.cat", "numpy.asarray", "numpy.asarray", "print", "torch.cat.size", "torch.cat.size", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "torch.cat.t", "print", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "clf_outputs[].data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "imgs.cuda.cuda", "time.time", "model", "utils.AverageMeter.update", "clf_outputs[].data.cpu", "torch.cat.append", "np.asarray.extend", "np.asarray.extend", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand", "time.time", "time.time", "torch.pow", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow"], "function", ["home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.metrics.evaluate", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update", "home.repos.pwc.inspect_result.prajjwal1_person-reid-incremental.None.utils.AverageMeter.update"], ["", "", "", "def", "test", "(", "model", ",", "queryloader", ",", "galleryloader", ",", "ranks", "=", "[", "1", ",", "5", ",", "10", ",", "20", "]", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "qf", ",", "q_pids", ",", "q_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "queryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "clf_outputs", ",", "f", "=", "model", "(", "imgs", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "output_fc", "=", "\"fc1\"", "\n", "\n", "f", "=", "clf_outputs", "[", "output_fc", "]", ".", "data", ".", "cpu", "(", ")", "\n", "qf", ".", "append", "(", "f", ")", "\n", "q_pids", ".", "extend", "(", "pids", ")", "\n", "q_camids", ".", "extend", "(", "camids", ")", "\n", "", "qf", "=", "torch", ".", "cat", "(", "qf", ",", "0", ")", "\n", "q_pids", "=", "np", ".", "asarray", "(", "q_pids", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "q_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for query set, obtained {}-by-{} matrix\"", ".", "format", "(", "qf", ".", "size", "(", "0", ")", ",", "qf", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "gf", ",", "g_pids", ",", "g_camids", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "batch", ",", "(", "imgs", ",", "pids", ",", "camids", ")", "in", "enumerate", "(", "galleryloader", ")", ":", "\n", "            ", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "clf_outputs", ",", "f", "=", "model", "(", "imgs", ")", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "f", "=", "clf_outputs", "[", "output_fc", "]", ".", "data", ".", "cpu", "(", ")", "\n", "gf", ".", "append", "(", "f", ")", "\n", "g_pids", ".", "extend", "(", "pids", ")", "\n", "g_camids", ".", "extend", "(", "camids", ")", "\n", "", "gf", "=", "torch", ".", "cat", "(", "gf", ",", "0", ")", "\n", "g_pids", "=", "np", ".", "asarray", "(", "g_pids", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "g_camids", ")", "\n", "\n", "print", "(", "\"Extracted features for gallery set, obtained {}-by-{} matrix\"", ".", "format", "(", "gf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "1", ")", ")", ")", "\n", "##############################################################################################################################", "\n", "", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "print", "(", "\"==> BatchTime(s)/BatchSize(img): {:.3f}/{}\"", ".", "format", "(", "batch_time", ".", "avg", ",", "test_batch", ")", ")", "\n", "\n", "m", ",", "n", "=", "qf", ".", "size", "(", "0", ")", ",", "gf", ".", "size", "(", "0", ")", "\n", "distmat", "=", "torch", ".", "pow", "(", "qf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "distmat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "qf", ",", "gf", ".", "t", "(", ")", ")", "\n", "distmat", "=", "distmat", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "\"Computing CMC and mAP\"", ")", "\n", "cmc", ",", "mAP", "=", "evaluate", "(", "distmat", ",", "q_pids", ",", "g_pids", ",", "q_camids", ",", "g_camids", ",", "use_metric_cuhk03", "=", "use_metric_cuhk03", ")", "\n", "\n", "print", "(", "\"Results ----------\"", ")", "\n", "print", "(", "\"mAP: {:.1%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "print", "(", "\"CMC curve\"", ")", "\n", "for", "r", "in", "ranks", ":", "\n", "        ", "print", "(", "\"Rank-{:<3}: {:.1%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "", "print", "(", "\"------------------\"", ")", "\n", "\n", "return", "cmc", "[", "0", "]", "\n", "\n"]]}