{"home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.evaluate.create_fullmap": [[18, 33], ["numpy.zeros", "enumerate", "numpy.float32"], "function", ["None"], ["def", "create_fullmap", "(", "patches", ")", ":", "\n", "    ", "fullmap", "=", "np", ".", "zeros", "(", "(", "frame_length", ",", "432", ",", "1024", ")", ")", "\n", "for", "i", ",", "patch", "in", "enumerate", "(", "patches", ")", ":", "\n", "        ", "ix", "=", "i", "%", "x_patch_n", "\n", "iy", "=", "i", "//", "x_patch_n", "\n", "px", "=", "ix", "*", "stride_size", "\n", "py", "=", "iy", "*", "stride_size", "\n", "fullmap", "[", ":", ",", "py", ":", "py", "+", "patch_size", ",", "px", ":", "px", "+", "patch_size", "]", "+=", "patch", "\n", "# divide the area where multiple patches overlap to obtain the average value", "\n", "", "fullmap", "[", ":", ",", "stride_size", ":", "-", "stride_size", ",", "stride_size", ":", "-", "stride_size", "]", "/=", "4", "# center", "\n", "fullmap", "[", ":", ",", "stride_size", ":", "-", "stride_size", ",", ":", "stride_size", "]", "/=", "2", "# top center", "\n", "fullmap", "[", ":", ",", "stride_size", ":", "-", "stride_size", ",", "-", "stride_size", ":", "]", "/=", "2", "# bottom center", "\n", "fullmap", "[", ":", ",", ":", "stride_size", ",", "stride_size", ":", "-", "stride_size", "]", "/=", "2", "# center left", "\n", "fullmap", "[", ":", ",", "-", "stride_size", ":", ",", "stride_size", ":", "-", "stride_size", "]", "/=", "2", "# center right", "\n", "return", "np", ".", "float32", "(", "fullmap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.evaluate.evaluate_model": [[35, 85], ["print", "save_dir.mkdir", "datetime.datetime.now().strftime", "mygenerator.test_generator", "mygenerator.test_generator.flow_from_directory", "models.LFI_conv3D.build_model", "LFV_conv3D_STCLSTM.build_model.load_weights", "LFV_conv3D_STCLSTM.build_model.summary", "open", "csv.writer", "metrics.calc_metrics", "csv.writer.writerow", "LFV_conv3D_STCLSTM.build_model.predict", "enumerate", "models.LFV_conv3D_STCLSTM.build_model", "LFV_conv3D_STCLSTM.build_model.load_weights", "Exception", "pathlib.Path", "datetime.datetime.now", "preds.append", "gts.append", "len", "evaluate.create_fullmap", "evaluate.create_fullmap", "numpy.savez_compressed", "print", "metrics.calc_metrics", "open", "csv.writer", "csv.writer.writerow", "metrics.calc_metrics.keys", "metrics.calc_metrics.values"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.test_generator.flow_from_directory", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.models.LFI_conv3D.build_model", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.calc_metrics", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.models.LFI_conv3D.build_model", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.evaluate.create_fullmap", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.evaluate.create_fullmap", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.calc_metrics"], ["", "def", "evaluate_model", "(", "model_weights_path", ",", "test_list", ")", ":", "\n", "# load model weights", "\n", "    ", "if", "'baseline'", "in", "model_weights_path", ":", "\n", "        ", "model", "=", "LFI_conv3D", ".", "build_model", "(", ")", "\n", "model", ".", "load_weights", "(", "model_weights_path", ")", "\n", "", "elif", "'CLSTM'", "in", "model_weights_path", ":", "\n", "        ", "model", "=", "LFV_conv3D_STCLSTM", ".", "build_model", "(", ")", "\n", "model", ".", "load_weights", "(", "model_weights_path", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "f'model weights path error.'", ")", "\n", "", "print", "(", "model", ".", "summary", "(", ")", ")", "\n", "\n", "# path settings", "\n", "save_dir", "=", "Path", "(", "model_weights_path", ")", ".", "parent", "/", "'evaluated'", "\n", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d_%H%M\"", ")", "\n", "csv_path", "=", "save_dir", "/", "f'_metrics_{now}.csv'", "\n", "with", "open", "(", "csv_path", ",", "'a'", ",", "newline", "=", "''", ")", "as", "f", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "metrics_dict", "=", "calc_metrics", "(", "pred", "=", "None", ",", "true", "=", "None", ")", "\n", "writer", ".", "writerow", "(", "[", "'scene_name'", ",", "*", "[", "metric", "for", "metric", "in", "metrics_dict", ".", "keys", "(", ")", "]", "]", ")", "\n", "\n", "# evaluate", "\n", "", "test_gen", "=", "test_generator", "(", "test_list", ")", "\n", "preds", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "scene", "=", "{", "'name'", ":", "''", ",", "'frame_n'", ":", "0", "}", "\n", "for", "inputs", ",", "gt", ",", "scenes", "in", "test_gen", ".", "flow_from_directory", "(", ")", ":", "\n", "        ", "pred", "=", "model", ".", "predict", "(", "inputs", ")", "\n", "for", "i", ",", "scene_name", "in", "enumerate", "(", "scenes", ")", ":", "\n", "            ", "preds", ".", "append", "(", "pred", "[", "i", "]", ")", "\n", "gts", ".", "append", "(", "gt", "[", "i", "]", ")", "\n", "if", "len", "(", "preds", ")", "==", "x_patch_n", "*", "y_patch_n", ":", "\n", "                ", "fullmap_pred", "=", "create_fullmap", "(", "preds", ")", "\n", "fullmap_gt", "=", "create_fullmap", "(", "gts", ")", "\n", "# npz_save", "\n", "if", "not", "scene", "[", "'name'", "]", "==", "scene_name", ":", "\n", "                    ", "scene", "[", "'frame_n'", "]", "=", "0", "\n", "", "scene", "[", "'name'", "]", "=", "scene_name", "\n", "save_name", "=", "save_dir", "/", "f\"{scene['name']}_{scene['frame_n']:03}.npz\"", "\n", "np", ".", "savez_compressed", "(", "save_name", ",", "pred", "=", "fullmap_pred", ",", "gt", "=", "fullmap_gt", ")", "\n", "print", "(", "'saved:'", ",", "save_name", ")", "\n", "scene", "[", "'frame_n'", "]", "+=", "1", "\n", "preds", "=", "[", "]", "\n", "gts", "=", "[", "]", "\n", "# metrics output", "\n", "metrics_dict", "=", "calc_metrics", "(", "fullmap_pred", ",", "fullmap_gt", ")", "\n", "with", "open", "(", "csv_path", ",", "'a'", ",", "newline", "=", "''", ")", "as", "f", ":", "\n", "                    ", "writer", "=", "csv", ".", "writer", "(", "f", ")", "\n", "writer", ".", "writerow", "(", "[", "scene_name", ",", "*", "metrics_dict", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics._error": [[6, 8], ["None"], "function", ["None"], ["def", "_error", "(", "pred", ",", "true", ")", ":", "\n", "    ", "return", "pred", "-", "true", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics._abs_error": [[9, 11], ["numpy.absolute", "metrics._error"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics._error"], ["", "def", "_abs_error", "(", "pred", ",", "true", ")", ":", "\n", "    ", "return", "np", ".", "absolute", "(", "_error", "(", "pred", ",", "true", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics._relative_error": [[12, 14], ["metrics._abs_error"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics._abs_error"], ["", "def", "_relative_error", "(", "pred", ",", "true", ")", ":", "\n", "    ", "return", "_abs_error", "(", "pred", ",", "true", ")", "/", "true", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.mean_relative_error": [[15, 17], ["numpy.mean", "metrics._relative_error"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics._relative_error"], ["", "def", "mean_relative_error", "(", "pred", ",", "true", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "_relative_error", "(", "pred", ",", "true", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.mean_squared_error": [[18, 20], ["numpy.mean", "numpy.square", "metrics._error"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics._error"], ["", "def", "mean_squared_error", "(", "pred", ",", "true", ")", ":", "\n", "    ", "return", "np", ".", "mean", "(", "np", ".", "square", "(", "_error", "(", "pred", ",", "true", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.root_mean_squared_error": [[21, 23], ["numpy.sqrt", "metrics.mean_squared_error"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.mean_squared_error"], ["", "def", "root_mean_squared_error", "(", "pred", ",", "true", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "mean_squared_error", "(", "pred", ",", "true", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.mean_log10_error": [[24, 26], ["numpy.nanmean", "metrics._abs_error", "numpy.log10", "numpy.log10"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics._abs_error"], ["", "def", "mean_log10_error", "(", "pred", ",", "true", ")", ":", "\n", "    ", "return", "np", ".", "nanmean", "(", "_abs_error", "(", "np", ".", "log10", "(", "pred", ")", ",", "np", ".", "log10", "(", "true", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.bad_pix_ratio": [[41, 44], ["numpy.where", "metrics._abs_error", "numpy.sum", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics._abs_error"], ["", "def", "bad_pix_ratio", "(", "pred", ",", "true", ",", "thresh", "=", "0.07", ")", ":", "\n", "    ", "bad_pix", "=", "np", ".", "where", "(", "_abs_error", "(", "pred", ",", "true", ")", ">", "thresh", ",", "1", ",", "0", ")", "\n", "return", "np", ".", "sum", "(", "bad_pix", ")", "/", "(", "np", ".", "prod", "(", "bad_pix", ".", "shape", ")", ")", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.calc_metrics": [[45, 57], ["metrics.mean_relative_error", "metrics.mean_squared_error", "metrics.root_mean_squared_error", "metrics.mean_log10_error", "metrics.bad_pix_ratio", "metrics.bad_pix_ratio", "metrics.bad_pix_ratio"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.mean_relative_error", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.mean_squared_error", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.root_mean_squared_error", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.mean_log10_error", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.bad_pix_ratio", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.bad_pix_ratio", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.metrics.bad_pix_ratio"], ["", "def", "calc_metrics", "(", "pred", "=", "None", ",", "true", "=", "None", ")", ":", "\n", "    ", "metrics", "=", "{", "}", "\n", "metrics", "[", "'mre'", "]", "=", "mean_relative_error", "(", "pred", ",", "true", ")", "if", "pred", "is", "not", "None", "else", "0", "\n", "metrics", "[", "'mse'", "]", "=", "mean_squared_error", "(", "pred", ",", "true", ")", "if", "pred", "is", "not", "None", "else", "0", "\n", "metrics", "[", "'rmse'", "]", "=", "root_mean_squared_error", "(", "pred", ",", "true", ")", "if", "pred", "is", "not", "None", "else", "0", "\n", "metrics", "[", "'log10'", "]", "=", "mean_log10_error", "(", "pred", ",", "true", ")", "if", "pred", "is", "not", "None", "else", "0", "\n", "# metrics['tcc'] = temporal_change_consistency(pred, true)  if pred is not None else 0", "\n", "# metrics['tmc'] = temporal_motion_consistency(pred, true)  if pred is not None else 0", "\n", "metrics", "[", "'Badpix7'", "]", "=", "bad_pix_ratio", "(", "pred", ",", "true", ",", "thresh", "=", "0.07", ")", "if", "pred", "is", "not", "None", "else", "0", "\n", "metrics", "[", "'Badpix3'", "]", "=", "bad_pix_ratio", "(", "pred", ",", "true", ",", "thresh", "=", "0.03", ")", "if", "pred", "is", "not", "None", "else", "0", "\n", "metrics", "[", "'Badpix1'", "]", "=", "bad_pix_ratio", "(", "pred", ",", "true", ",", "thresh", "=", "0.01", ")", "if", "pred", "is", "not", "None", "else", "0", "\n", "return", "metrics", "", "", ""]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.create_dataset.create_seq_EPI_patch": [[15, 31], ["save_dir.mkdir", "range", "numpy.savez_compressed", "range", "len", "range", "numpy.savez_compressed"], "function", ["None"], ["def", "create_seq_EPI_patch", "(", "save_dir", ",", "seq_v", ",", "seq_h", ",", "seq_disp", ",", "patch_size", "=", "32", ",", "stride", "=", "16", ")", ":", "\n", "    ", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "y_patch_n", "=", "(", "h_size", "-", "(", "patch_size", "-", "stride", ")", ")", "//", "stride", "\n", "x_patch_n", "=", "(", "w_size", "-", "(", "patch_size", "-", "stride", ")", ")", "//", "stride", "\n", "# save patch binary", "\n", "for", "key_frame_idx", "in", "range", "(", "len", "(", "seq_disp", ")", "-", "(", "frame_length", "-", "1", ")", ")", ":", "\n", "        ", "numbering", "=", "y_patch_n", "*", "x_patch_n", "*", "key_frame_idx", "\n", "for", "iy", "in", "range", "(", "0", ",", "y_patch_n", ")", ":", "\n", "            ", "for", "ix", "in", "range", "(", "0", ",", "x_patch_n", ")", ":", "\n", "                ", "np", ".", "savez_compressed", "(", "save_dir", "/", "f'{numbering:05}.npz'", ",", "\n", "v", "=", "seq_v", "[", "key_frame_idx", ":", "key_frame_idx", "+", "frame_length", ",", ":", ",", "iy", "*", "stride", ":", "iy", "*", "stride", "+", "patch_size", ",", "ix", "*", "stride", ":", "ix", "*", "stride", "+", "patch_size", "]", ",", "\n", "h", "=", "seq_h", "[", "key_frame_idx", ":", "key_frame_idx", "+", "frame_length", ",", ":", ",", "iy", "*", "stride", ":", "iy", "*", "stride", "+", "patch_size", ",", "ix", "*", "stride", ":", "ix", "*", "stride", "+", "patch_size", "]", ",", "\n", "disp", "=", "seq_disp", "[", "key_frame_idx", ":", "key_frame_idx", "+", "frame_length", ",", "iy", "*", "stride", ":", "iy", "*", "stride", "+", "patch_size", ",", "ix", "*", "stride", ":", "ix", "*", "stride", "+", "patch_size", "]", ")", "\n", "numbering", "+=", "1", "\n", "# save full binary", "\n", "", "", "", "np", ".", "savez_compressed", "(", "save_dir", "/", "'full.npz'", ",", "v", "=", "seq_v", ",", "h", "=", "seq_h", ",", "disp", "=", "seq_disp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.create_dataset.main": [[32, 52], ["full_data_root.glob", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "create_dataset.create_seq_EPI_patch", "print", "numpy.asarray", "range", "range", "scene.glob", "PIL.Image.fromarray().resize", "str().replace().replace", "numpy.asarray", "str().replace().replace", "numpy.asarray", "PIL.Image.open().resize", "PIL.Image.open().resize", "PIL.Image.fromarray", "str().replace", "str().replace", "numpy.load", "PIL.Image.open", "PIL.Image.open", "str", "str"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.create_dataset.create_seq_EPI_patch"], ["", "def", "main", "(", ")", ":", "\n", "    ", "for", "scene", "in", "full_data_root", ".", "glob", "(", "'**/04_04'", ")", ":", "\n", "        ", "center_disp_list", "=", "[", "p", "for", "p", "in", "scene", ".", "glob", "(", "'*.npy'", ")", "]", "\n", "scene_frame_n", "=", "len", "(", "center_disp_list", ")", "\n", "# prepare all data", "\n", "seq_v", "=", "np", ".", "zeros", "(", "(", "scene_frame_n", ",", "9", ",", "h_size", ",", "w_size", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "seq_h", "=", "np", ".", "zeros", "(", "(", "scene_frame_n", ",", "9", ",", "h_size", ",", "w_size", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "seq_disp", "=", "np", ".", "zeros", "(", "(", "scene_frame_n", ",", "h_size", ",", "w_size", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "disp_path", "in", "enumerate", "(", "center_disp_list", ")", ":", "\n", "            ", "seq_disp", "[", "i", "]", "=", "np", ".", "asarray", "(", "Image", ".", "fromarray", "(", "np", ".", "load", "(", "disp_path", ")", ")", ".", "resize", "(", "(", "w_size", ",", "h_size", ")", ")", ")", "\n", "for", "iy", "in", "range", "(", "9", ")", ":", "\n", "                ", "img_path", "=", "str", "(", "disp_path", ")", ".", "replace", "(", "'04_04'", ",", "f'{iy:02}_04'", ")", ".", "replace", "(", "'npy'", ",", "'png'", ")", "\n", "seq_v", "[", "i", ",", "iy", "]", "=", "np", ".", "asarray", "(", "Image", ".", "open", "(", "img_path", ")", ".", "resize", "(", "(", "w_size", ",", "h_size", ")", ")", ")", "\n", "", "for", "ix", "in", "range", "(", "9", ")", ":", "\n", "                ", "img_path", "=", "str", "(", "disp_path", ")", ".", "replace", "(", "'04_04'", ",", "f'04_{ix:02}'", ")", ".", "replace", "(", "'npy'", ",", "'png'", ")", "\n", "seq_h", "[", "i", ",", "ix", "]", "=", "np", ".", "asarray", "(", "Image", ".", "open", "(", "img_path", ")", ".", "resize", "(", "(", "w_size", ",", "h_size", ")", ")", ")", "\n", "# create input patch", "\n", "", "", "create_seq_EPI_patch", "(", "save_dir", "=", "patch_data_root", "/", "center_disp_list", "[", "0", "]", ".", "parent", ".", "parent", ".", "name", ",", "\n", "seq_v", "=", "seq_v", ",", "seq_h", "=", "seq_h", ",", "seq_disp", "=", "seq_disp", ",", "patch_size", "=", "32", ",", "stride", "=", "16", ")", "\n", "print", "(", "f'done: {center_disp_list[0].parent.parent.name}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.train.train": [[10, 56], ["tensorflow.keras.optimizers.Adam", "model.compile", "input_generator", "input_generator", "datetime.datetime.now().strftime", "pathlib.Path", "pathlib.Path.mkdir", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.callbacks.CSVLogger", "tensorflow.keras.callbacks.LearningRateScheduler", "model.fit_generator", "loss.get_loss_function", "datetime.datetime.now", "input_generator.flow_from_directory", "input_generator.flow_from_directory", "Exception", "len", "len"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.loss.get_loss_function", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.test_generator.flow_from_directory", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.test_generator.flow_from_directory"], ["def", "train", "(", "model", ",", "args", ")", ":", "\n", "# model compile", "\n", "    ", "lr", "=", "0.0005", "\n", "optimizer", "=", "Adam", "(", "lr", "=", "lr", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "optimizer", ",", "loss", "=", "get_loss_function", "(", ")", ")", "\n", "\n", "# data generator", "\n", "if", "args", ".", "frame_length", "==", "5", ":", "\n", "        ", "input_generator", "=", "input_generator_fl5", "\n", "", "elif", "args", ".", "frame_length", "==", "4", ":", "\n", "        ", "input_generator", "=", "input_generator_fl4", "\n", "", "elif", "args", ".", "frame_length", "==", "3", ":", "\n", "        ", "input_generator", "=", "input_generator_fl3", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "f'args.frame_length must be an integer between 3 and 5, but receive {args.frame_length}.'", ")", "\n", "", "train_datagen", "=", "input_generator", "(", "args", ".", "train_list", ")", "\n", "valid_datagen", "=", "input_generator", "(", "args", ".", "valid_list", ",", "val_mode", "=", "True", ")", "\n", "\n", "# callbacks", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y-%m-%d_%H%M\"", ")", "\n", "output", "=", "pathlib", ".", "Path", "(", "f'../output/{now}_{args.model_name}_fl{args.frame_length}_{args.memo}'", ")", "\n", "output", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "cp", "=", "ModelCheckpoint", "(", "filepath", "=", "f'{output}/weights.h5'", ",", "monitor", "=", "'val_loss'", ",", "\n", "save_best_only", "=", "True", ",", "save_weights_only", "=", "True", ",", "verbose", "=", "0", ",", "mode", "=", "'auto'", ")", "\n", "logger", "=", "CSVLogger", "(", "f'{output}/history.csv'", ")", "\n", "## learning rate", "\n", "def", "step_decay", "(", "epoch", ")", ":", "\n", "        ", "factor", "=", "1", "\n", "if", "epoch", ">=", "10", ":", "factor", "=", "0.1", "\n", "if", "epoch", ">=", "15", ":", "factor", "=", "0.01", "\n", "return", "lr", "*", "factor", "\n", "", "lr_schedule", "=", "LearningRateScheduler", "(", "step_decay", ",", "verbose", "=", "1", ")", "\n", "\n", "# START training", "\n", "batch_size", "=", "64", "\n", "epochs", "=", "20", "\n", "model", ".", "fit_generator", "(", "\n", "generator", "=", "train_datagen", ".", "flow_from_directory", "(", "batch_size", ")", ",", "\n", "steps_per_epoch", "=", "len", "(", "train_datagen", ".", "data_paths", ")", "//", "batch_size", ",", "\n", "epochs", "=", "epochs", ",", "\n", "initial_epoch", "=", "0", ",", "\n", "verbose", "=", "1", ",", "\n", "callbacks", "=", "[", "cp", ",", "logger", ",", "lr_schedule", "]", ",", "\n", "validation_data", "=", "valid_datagen", ".", "flow_from_directory", "(", "batch_size", ")", ",", "\n", "validation_steps", "=", "len", "(", "valid_datagen", ".", "data_paths", ")", "//", "batch_size", ",", "\n", "max_queue_size", "=", "20", "\n", ")", ""]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.loss.cos_similarity": [[6, 11], ["tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.multiply"], "function", ["None"], ["def", "cos_similarity", "(", "a", ",", "b", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "norm_a", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "a", ",", "axis", "=", "axis", ")", "\n", "norm_b", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "b", ",", "axis", "=", "axis", ")", "\n", "cos", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "norm_a", ",", "norm_b", ")", ",", "axis", "=", "axis", ")", "\n", "return", "cos", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.loss.get_loss_function": [[12, 36], ["sobel.Sobel", "tensorflow.mean", "get_gradient", "get_gradient", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.mean", "tensorflow.mean", "tensorflow.ones_like", "tensorflow.concatenate", "tensorflow.concatenate", "tensorflow.mean", "tensorflow.abs", "tensorflow.abs", "tensorflow.abs", "tensorflow.abs", "loss.cos_similarity"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.sobel.Sobel.get_gradient", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.sobel.Sobel.get_gradient", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.loss.cos_similarity"], ["", "def", "get_loss_function", "(", ")", ":", "\n", "    ", "get_gradient", "=", "sobel", ".", "Sobel", "(", ")", ".", "get_gradient", "\n", "def", "loss_function", "(", "disp", ",", "pred", ")", ":", "\n", "# disp loss", "\n", "        ", "loss_disp", "=", "K", ".", "mean", "(", "K", ".", "abs", "(", "pred", "-", "disp", ")", ")", "\n", "\n", "# grad loss", "\n", "pred_grad", "=", "get_gradient", "(", "pred", ")", "\n", "disp_grad", "=", "get_gradient", "(", "disp", ")", "\n", "pred_grad_dx", "=", "K", ".", "expand_dims", "(", "pred_grad", "[", "...", ",", "0", "]", ",", "axis", "=", "-", "1", ")", "\n", "pred_grad_dy", "=", "K", ".", "expand_dims", "(", "pred_grad", "[", "...", ",", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "disp_grad_dx", "=", "K", ".", "expand_dims", "(", "disp_grad", "[", "...", ",", "0", "]", ",", "axis", "=", "-", "1", ")", "\n", "disp_grad_dy", "=", "K", ".", "expand_dims", "(", "disp_grad", "[", "...", ",", "1", "]", ",", "axis", "=", "-", "1", ")", "\n", "loss_dx", "=", "K", ".", "mean", "(", "K", ".", "abs", "(", "pred_grad_dx", "-", "disp_grad_dx", ")", ")", "\n", "loss_dy", "=", "K", ".", "mean", "(", "K", ".", "abs", "(", "pred_grad_dy", "-", "disp_grad_dy", ")", ")", "\n", "\n", "# normal loss", "\n", "ones", "=", "K", ".", "ones_like", "(", "disp_grad_dx", ")", "\n", "pred_normal", "=", "K", ".", "concatenate", "(", "[", "-", "pred_grad_dx", ",", "-", "pred_grad_dy", ",", "ones", "]", ",", "axis", "=", "-", "1", ")", "\n", "disp_normal", "=", "K", ".", "concatenate", "(", "[", "-", "disp_grad_dx", ",", "-", "disp_grad_dy", ",", "ones", "]", ",", "axis", "=", "-", "1", ")", "\n", "loss_normal", "=", "K", ".", "mean", "(", "K", ".", "abs", "(", "1", "-", "cos_similarity", "(", "pred_normal", ",", "disp_normal", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "\n", "return", "loss_disp", "+", "(", "loss_dx", "+", "loss_dy", ")", "+", "loss_normal", "\n", "", "return", "loss_function", "", "", ""]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.sobel.Sobel.__init__": [[7, 22], ["tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "numpy.array", "numpy.array", "numpy.stack", "numpy.transpose().reshape", "sobel.Sobel.edge_conv.layers[].set_weights", "tensorflow.keras.layers.Conv3D", "numpy.transpose"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "inputs", "=", "Input", "(", "shape", "=", "(", "(", "None", ",", "None", ",", "None", ",", "1", ")", ")", ")", "\n", "x", "=", "Conv3D", "(", "filters", "=", "2", ",", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "padding", "=", "'valid'", ",", "use_bias", "=", "False", ")", "(", "inputs", ")", "\n", "self", ".", "edge_conv", "=", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "x", ")", "\n", "\n", "edge_kx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "-", "1", "]", ",", "\n", "[", "2", ",", "0", ",", "-", "2", "]", ",", "\n", "[", "1", ",", "0", ",", "-", "1", "]", "]", ")", "\n", "edge_ky", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "1", "]", ",", "\n", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "-", "1", ",", "-", "2", ",", "-", "1", "]", "]", ")", "\n", "edge_k", "=", "np", ".", "stack", "(", "(", "edge_kx", ",", "edge_ky", ")", ")", "\n", "\n", "edge_k", "=", "np", ".", "transpose", "(", "edge_k", ",", "(", "1", ",", "2", ",", "0", ")", ")", ".", "reshape", "(", "1", ",", "3", ",", "3", ",", "1", ",", "2", ")", "\n", "self", ".", "edge_conv", ".", "layers", "[", "1", "]", ".", "set_weights", "(", "[", "edge_k", "]", ")", "\n", "# self.edge_conv.trainable = False", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.sobel.Sobel.get_gradient": [[37, 40], ["sobel.Sobel.edge_conv"], "methods", ["None"], ["", "def", "get_gradient", "(", "self", ",", "x", ")", ":", "\n", "        ", "grad", "=", "self", ".", "edge_conv", "(", "x", ")", "\n", "return", "grad", "", "", "", ""]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.input_generator_fl5.__init__": [[8, 23], ["mygenerator.input_generator_fl5.clear", "open", "csv.reader", "numpy.array().flatten", "scene_dir.glob", "numpy.array", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.test_generator.clear"], ["    ", "def", "__init__", "(", "self", ",", "class_list_path", ",", "val_mode", "=", "False", ",", "\n", "gammma", "=", "False", ",", "horizontal_flip", "=", "False", ",", "vertical_flip", "=", "False", ",", "rotation", "=", "False", ")", ":", "\n", "        ", "self", ".", "clear", "(", ")", "\n", "self", ".", "val_mode", "=", "val_mode", "\n", "with", "open", "(", "class_list_path", ")", "as", "f", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "scene_names", "=", "np", ".", "array", "(", "[", "row", "for", "row", "in", "reader", "]", ")", ".", "flatten", "(", ")", "\n", "", "scene_dirs", "=", "[", "pathlib", ".", "Path", "(", "class_list_path", ")", ".", "parent", "/", "scene_name", "\n", "for", "scene_name", "in", "scene_names", "]", "\n", "self", ".", "data_paths", "=", "[", "npz_path", "for", "scene_dir", "in", "scene_dirs", "\n", "for", "npz_path", "in", "scene_dir", ".", "glob", "(", "'*[!full].npz'", ")", "]", "\n", "self", ".", "gammma", "=", "gammma", "\n", "self", ".", "horizontal_flip", "=", "horizontal_flip", "\n", "self", ".", "vertical_flip", "=", "vertical_flip", "\n", "self", ".", "rotation", "=", "rotation", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.input_generator_fl5.clear": [[24, 28], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_h", "=", "[", "]", "\n", "self", ".", "seq_v", "=", "[", "]", "\n", "self", ".", "seq_disp", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.input_generator_fl5.convert": [[29, 32], ["None"], "methods", ["None"], ["", "def", "convert", "(", "self", ",", "seq_batch_h", ",", "seq_batch_v", ",", "seq_batch_disp", ")", ":", "\n", "# any process", "\n", "        ", "return", "seq_batch_h", ",", "seq_batch_v", ",", "seq_batch_disp", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.input_generator_fl5.augmentation": [[33, 60], ["range", "len", "pow", "pow", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "range", "numpy.copy", "numpy.copy", "numpy.copy", "numpy.random.rand", "numpy.rot90", "numpy.rot90", "numpy.rot90"], "methods", ["None"], ["", "def", "augmentation", "(", "self", ",", "seq_batch_h", ",", "seq_batch_v", ",", "seq_batch_disp", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "seq_batch_disp", ")", ")", ":", "\n", "            ", "if", "self", ".", "gammma", ":", "\n", "                ", "gamma_rand", "=", "0.4", "*", "np", ".", "random", ".", "rand", "(", ")", "+", "0.8", "\n", "seq_batch_h", "[", "i", "]", "=", "pow", "(", "seq_batch_h", "[", "i", "]", ",", "gamma_rand", ")", "\n", "seq_batch_v", "[", "i", "]", "=", "pow", "(", "seq_batch_v", "[", "i", "]", ",", "gamma_rand", ")", "\n", "", "if", "self", ".", "horizontal_flip", ":", "\n", "                ", "flip_rand", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "if", "flip_rand", "==", "1", ":", "\n", "                    ", "seq_batch_h", "[", "i", "]", "=", "seq_batch_h", "[", "i", "]", "[", ":", ",", ":", ":", "-", "1", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", "# (frame, angle, height, width, channel)", "\n", "seq_batch_v", "[", "i", "]", "=", "seq_batch_v", "[", "i", "]", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", "]", "\n", "seq_batch_disp", "[", "i", "]", "=", "seq_batch_disp", "[", "i", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# (frame, height, width)", "\n", "", "", "if", "self", ".", "vertical_flip", ":", "\n", "                ", "flip_rand", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "if", "flip_rand", "==", "1", ":", "\n", "                    ", "seq_batch_h", "[", "i", "]", "=", "seq_batch_h", "[", "i", "]", "[", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", ",", ":", "]", "# (frame, angle, height, width, channel)", "\n", "seq_batch_v", "[", "i", "]", "=", "seq_batch_v", "[", "i", "]", "[", ":", ",", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", ":", ",", ":", "]", "\n", "seq_batch_disp", "[", "i", "]", "=", "seq_batch_disp", "[", "i", "]", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", "# (frame, height, width)", "\n", "", "", "if", "self", ".", "rotation", ":", "\n", "                ", "rot90_rand", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "4", ")", "\n", "for", "rot_step", "in", "range", "(", "rot90_rand", ")", ":", "\n", "                    ", "seq_batch_h_rot90", "=", "np", ".", "copy", "(", "np", ".", "rot90", "(", "seq_batch_h", "[", "i", "]", ",", "1", ",", "(", "2", ",", "3", ")", ")", ")", "\n", "seq_batch_v_rot90", "=", "np", ".", "copy", "(", "np", ".", "rot90", "(", "seq_batch_v", "[", "i", "]", ",", "1", ",", "(", "2", ",", "3", ")", ")", ")", "\n", "seq_batch_h", "[", "i", "]", "=", "seq_batch_v_rot90", "[", ":", ",", ":", ":", "-", "1", "]", "\n", "seq_batch_v", "[", "i", "]", "=", "seq_batch_h_rot90", "\n", "seq_batch_disp", "[", "i", "]", "=", "np", ".", "copy", "(", "np", ".", "rot90", "(", "seq_batch_disp", "[", "i", "]", ",", "1", ",", "(", "1", ",", "2", ")", ")", ")", "\n", "", "", "", "return", "seq_batch_h", ",", "seq_batch_v", ",", "seq_batch_disp", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.input_generator_fl5.flow_from_directory": [[61, 80], ["numpy.random.seed", "numpy.random.shuffle", "numpy.load", "mygenerator.input_generator_fl5.seq_h.append", "mygenerator.input_generator_fl5.seq_v.append", "mygenerator.input_generator_fl5.seq_disp.append", "len", "numpy.array", "mygenerator.input_generator_fl5.convert", "mygenerator.input_generator_fl5.clear", "numpy.array", "numpy.array", "mygenerator.input_generator_fl5.augmentation"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.input_generator_fl4.convert", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.test_generator.clear", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.input_generator_fl5.augmentation"], ["", "def", "flow_from_directory", "(", "self", ",", "batch_size", "=", "64", ",", "seed", "=", "None", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "while", "True", ":", "\n", "            ", "if", "not", "self", ".", "val_mode", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "data_paths", ")", "\n", "", "for", "target_path", "in", "self", ".", "data_paths", ":", "\n", "                ", "loaded_data", "=", "np", ".", "load", "(", "target_path", ")", "\n", "self", ".", "seq_h", ".", "append", "(", "loaded_data", "[", "'h'", "]", ")", "\n", "self", ".", "seq_v", ".", "append", "(", "loaded_data", "[", "'v'", "]", ")", "\n", "self", ".", "seq_disp", ".", "append", "(", "loaded_data", "[", "'disp'", "]", ")", "\n", "if", "len", "(", "self", ".", "seq_disp", ")", "==", "batch_size", ":", "\n", "                    ", "seq_batch_h", "=", "np", ".", "array", "(", "self", ".", "seq_h", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "seq_batch_v", "=", "np", ".", "array", "(", "self", ".", "seq_v", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "seq_batch_disp", "=", "np", ".", "array", "(", "self", ".", "seq_disp", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "seq_batch_h", ",", "seq_batch_v", ",", "seq_batch_disp", "=", "self", ".", "convert", "(", "seq_batch_h", ",", "seq_batch_v", ",", "seq_batch_disp", ")", "\n", "if", "not", "self", ".", "val_mode", ":", "\n", "                        ", "seq_batch_h", ",", "seq_batch_v", ",", "seq_batch_disp", "=", "self", ".", "augmentation", "(", "seq_batch_h", ",", "seq_batch_v", ",", "seq_batch_disp", ")", "\n", "", "self", ".", "clear", "(", ")", "\n", "yield", "[", "seq_batch_h", ",", "seq_batch_v", "]", ",", "seq_batch_disp", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.input_generator_fl3.convert": [[82, 87], ["numpy.random.randint"], "methods", ["None"], ["    ", "def", "convert", "(", "self", ",", "seq_batch_h", ",", "seq_batch_v", ",", "seq_batch_disp", ")", ":", "\n", "        ", "if", "self", ".", "val_mode", ":", "\n", "            ", "return", "seq_batch_h", "[", ":", ",", ":", "3", "]", ",", "seq_batch_v", "[", ":", ",", ":", "3", "]", ",", "seq_batch_disp", "[", ":", ",", ":", "3", "]", "\n", "", "rand", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "3", ")", "\n", "return", "seq_batch_h", "[", ":", ",", "rand", ":", "rand", "+", "3", "]", ",", "seq_batch_v", "[", ":", ",", "rand", ":", "rand", "+", "3", "]", ",", "seq_batch_disp", "[", ":", ",", "rand", ":", "rand", "+", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.input_generator_fl4.convert": [[89, 94], ["numpy.random.randint"], "methods", ["None"], ["    ", "def", "convert", "(", "self", ",", "seq_batch_h", ",", "seq_batch_v", ",", "seq_batch_disp", ")", ":", "\n", "        ", "if", "self", ".", "val_mode", ":", "\n", "            ", "return", "seq_batch_h", "[", ":", ",", ":", "4", "]", ",", "seq_batch_v", "[", ":", ",", ":", "4", "]", ",", "seq_batch_disp", "[", ":", ",", ":", "4", "]", "\n", "", "rand", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "2", ")", "\n", "return", "seq_batch_h", "[", ":", ",", "rand", ":", "rand", "+", "4", "]", ",", "seq_batch_v", "[", ":", ",", "rand", ":", "rand", "+", "4", "]", ",", "seq_batch_disp", "[", ":", ",", "rand", ":", "rand", "+", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.test_generator.__init__": [[97, 106], ["mygenerator.test_generator.clear", "open", "csv.reader", "numpy.array().flatten", "scene_dir.glob", "numpy.array", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.test_generator.clear"], ["    ", "def", "__init__", "(", "self", ",", "class_list_path", ")", ":", "\n", "        ", "self", ".", "clear", "(", ")", "\n", "with", "open", "(", "class_list_path", ")", "as", "f", ":", "\n", "            ", "reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "scene_names", "=", "np", ".", "array", "(", "[", "row", "for", "row", "in", "reader", "]", ")", ".", "flatten", "(", ")", "\n", "", "scene_dirs", "=", "[", "pathlib", ".", "Path", "(", "class_list_path", ")", ".", "parent", "/", "scene_name", "\n", "for", "scene_name", "in", "scene_names", "]", "\n", "self", ".", "data_paths", "=", "[", "npz_path", "for", "scene_dir", "in", "scene_dirs", "\n", "for", "npz_path", "in", "scene_dir", ".", "glob", "(", "'*[!full].npz'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.test_generator.clear": [[107, 112], ["None"], "methods", ["None"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "seq_h", "=", "[", "]", "\n", "self", ".", "seq_v", "=", "[", "]", "\n", "self", ".", "seq_disp", "=", "[", "]", "\n", "self", ".", "taerget_scenes", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.test_generator.flow_from_directory": [[113, 129], ["numpy.load", "mygenerator.test_generator.seq_h.append", "mygenerator.test_generator.seq_v.append", "mygenerator.test_generator.seq_disp.append", "mygenerator.test_generator.taerget_scenes.append", "re.search().group", "len", "numpy.array", "mygenerator.test_generator.clear", "numpy.array", "numpy.array", "re.search", "str"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.src.mygenerator.test_generator.clear"], ["", "def", "flow_from_directory", "(", "self", ",", "batch_size", "=", "64", ")", ":", "\n", "        ", "for", "target_path", "in", "self", ".", "data_paths", ":", "\n", "            ", "loaded_data", "=", "np", ".", "load", "(", "target_path", ")", "\n", "self", ".", "seq_h", ".", "append", "(", "loaded_data", "[", "'h'", "]", ")", "\n", "self", ".", "seq_v", ".", "append", "(", "loaded_data", "[", "'v'", "]", ")", "\n", "self", ".", "seq_disp", ".", "append", "(", "loaded_data", "[", "'disp'", "]", ")", "\n", "self", ".", "taerget_scenes", ".", "append", "(", "re", ".", "search", "(", "r'[a-z]+_\\d'", ",", "str", "(", "target_path", ")", ")", ".", "group", "(", ")", ")", "\n", "if", "len", "(", "self", ".", "seq_disp", ")", "==", "batch_size", ":", "\n", "                ", "seq_batch_h", "=", "np", ".", "array", "(", "self", ".", "seq_h", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "seq_batch_v", "=", "np", ".", "array", "(", "self", ".", "seq_v", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "seq_batch_disp", "=", "np", ".", "array", "(", "self", ".", "seq_disp", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "scenes_batch", "=", "self", ".", "taerget_scenes", "\n", "self", ".", "clear", "(", ")", "\n", "yield", "[", "seq_batch_h", ",", "seq_batch_v", "]", ",", "seq_batch_disp", ",", "scenes_batch", "\n", "# return remaining data", "\n", "", "", "yield", "[", "seq_batch_h", ",", "seq_batch_v", "]", ",", "seq_batch_disp", ",", "scenes_batch", "", "", "", ""]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.models.LFV_conv3D_STCLSTM.allocate_gpu_memory": [[9, 22], ["tensorflow.config.experimental.list_physical_devices", "print", "print", "tensorflow.config.set_visible_devices", "tensorflow.config.experimental.set_memory_growth", "print", "print", "len"], "function", ["None"], ["def", "allocate_gpu_memory", "(", "gpu_number", "=", "0", ")", ":", "\n", "    ", "physical_devices", "=", "tf", ".", "config", ".", "experimental", ".", "list_physical_devices", "(", "'GPU'", ")", "\n", "\n", "if", "physical_devices", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "\"Found {} GPU(s)\"", ".", "format", "(", "len", "(", "physical_devices", ")", ")", ")", "\n", "tf", ".", "config", ".", "set_visible_devices", "(", "physical_devices", "[", "gpu_number", "]", ",", "'GPU'", ")", "\n", "tf", ".", "config", ".", "experimental", ".", "set_memory_growth", "(", "physical_devices", "[", "gpu_number", "]", ",", "True", ")", "\n", "print", "(", "\"#{} GPU memory is allocated\"", ".", "format", "(", "gpu_number", ")", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\"Not enough GPU hardware devices available\"", ")", "\n", "", "", "allocate_gpu_memory", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.models.LFV_conv3D_STCLSTM.conv3D_branch": [[24, 31], ["tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.ZeroPadding3D", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Conv3D", "tensorflow.keras.backend.squeeze", "tensorflow.keras.backend.mean"], "function", ["None"], ["def", "conv3D_branch", "(", "x", ")", ":", "\n", "    ", "x", "=", "Lambda", "(", "lambda", "x", ":", "x", "-", "K", ".", "mean", "(", "x", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", ")", "(", "x", ")", "\n", "x", "=", "ZeroPadding3D", "(", "padding", "=", "(", "0", ",", "4", ",", "4", ")", ")", "(", "x", ")", "\n", "for", "n_filters", "in", "[", "32", ",", "64", ",", "64", ",", "64", "]", ":", "\n", "        ", "x", "=", "Conv3D", "(", "n_filters", ",", "kernel_size", "=", "3", ",", "padding", "=", "'valid'", ",", "activation", "=", "'relu'", ",", "kernel_initializer", "=", "'glorot_uniform'", ")", "(", "x", ")", "\n", "", "x", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "squeeze", "(", "x", ",", "axis", "=", "1", ")", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.models.LFV_conv3D_STCLSTM.build_model": [[32, 55], ["tensorflow.keras.layers.Input", "keras.engine.network.Network", "keras.engine.network.Network", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "LFV_conv3D_STCLSTM.conv3D_branch", "LFV_conv3D_STCLSTM.conv3D_branch", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.Concatenate", "modules.convolutional_recurrent.ConvRNN2D", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.TimeDistributed", "modules.STConvLSTM2DCell.STConvLSTM2DCell", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.backend.squeeze"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.models.LFI_conv3D.conv3D_branch", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.models.LFI_conv3D.conv3D_branch"], ["", "def", "build_model", "(", ")", ":", "\n", "    ", "frames", "=", "None", "\n", "s_size", "=", "None", "\n", "# prepare shared layers", "\n", "dummy_frame_inputs", "=", "Input", "(", "shape", "=", "(", "(", "9", ",", "s_size", ",", "s_size", ",", "3", ")", ")", ")", "\n", "shared_layer_h", "=", "Network", "(", "dummy_frame_inputs", ",", "conv3D_branch", "(", "dummy_frame_inputs", ")", ")", "\n", "shared_layer_v", "=", "Network", "(", "dummy_frame_inputs", ",", "conv3D_branch", "(", "dummy_frame_inputs", ")", ")", "\n", "\n", "# build model", "\n", "inputs_h", "=", "Input", "(", "shape", "=", "(", "(", "frames", ",", "9", ",", "s_size", ",", "s_size", ",", "3", ")", ")", ",", "name", "=", "'inputs_h'", ")", "\n", "processed_h", "=", "TimeDistributed", "(", "shared_layer_h", ",", "name", "=", "'shared_3Dconv_branch_h'", ")", "(", "inputs_h", ")", "\n", "inputs_v", "=", "Input", "(", "shape", "=", "(", "(", "frames", ",", "9", ",", "s_size", ",", "s_size", ",", "3", ")", ")", ",", "name", "=", "'inputs_v'", ")", "\n", "processed_v", "=", "TimeDistributed", "(", "shared_layer_v", ",", "name", "=", "'shared_3Dconv_branch_v'", ")", "(", "inputs_v", ")", "\n", "x", "=", "Concatenate", "(", ")", "(", "[", "processed_h", ",", "processed_v", "]", ")", "\n", "\n", "for", "n_filters", "in", "[", "64", ",", "32", ",", "32", ",", "16", "]", ":", "\n", "        ", "x", "=", "TimeDistributed", "(", "Conv2D", "(", "n_filters", ",", "kernel_size", "=", "3", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ",", "kernel_initializer", "=", "'glorot_uniform'", ")", ")", "(", "x", ")", "\n", "", "x", "=", "ConvRNN2D", "(", "STConvLSTM2DCell", "(", "8", ",", "kernel_size", "=", "3", ",", "padding", "=", "'same'", ",", "activation", "=", "'tanh'", ",", "recurrent_activation", "=", "'hard_sigmoid'", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "recurrent_initializer", "=", "'orthogonal'", ")", ",", "\n", "return_sequences", "=", "True", ",", "name", "=", "'STConvLSTM2D'", ")", "(", "x", ")", "\n", "x", "=", "TimeDistributed", "(", "Lambda", "(", "lambda", "x", ":", "K", ".", "squeeze", "(", "x", ",", "axis", "=", "-", "1", ")", ")", ",", "name", "=", "'squeeze'", ")", "(", "x", ")", "\n", "\n", "return", "Model", "(", "inputs", "=", "[", "inputs_h", ",", "inputs_v", "]", ",", "outputs", "=", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.models.LFI_conv3D.allocate_gpu_memory": [[7, 20], ["tensorflow.config.experimental.list_physical_devices", "print", "print", "tensorflow.config.set_visible_devices", "tensorflow.config.experimental.set_memory_growth", "print", "print", "len"], "function", ["None"], ["def", "allocate_gpu_memory", "(", "gpu_number", "=", "0", ")", ":", "\n", "    ", "physical_devices", "=", "tf", ".", "config", ".", "experimental", ".", "list_physical_devices", "(", "'GPU'", ")", "\n", "\n", "if", "physical_devices", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "\"Found {} GPU(s)\"", ".", "format", "(", "len", "(", "physical_devices", ")", ")", ")", "\n", "tf", ".", "config", ".", "set_visible_devices", "(", "physical_devices", "[", "gpu_number", "]", ",", "'GPU'", ")", "\n", "tf", ".", "config", ".", "experimental", ".", "set_memory_growth", "(", "physical_devices", "[", "gpu_number", "]", ",", "True", ")", "\n", "print", "(", "\"#{} GPU memory is allocated\"", ".", "format", "(", "gpu_number", ")", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "\"Not enough GPU hardware devices available\"", ")", "\n", "", "", "allocate_gpu_memory", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.models.LFI_conv3D.conv3D_branch": [[22, 29], ["tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.ZeroPadding3D", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Conv3D", "tensorflow.keras.backend.squeeze", "tensorflow.keras.backend.mean"], "function", ["None"], ["def", "conv3D_branch", "(", "x", ")", ":", "\n", "    ", "x", "=", "Lambda", "(", "lambda", "x", ":", "x", "-", "K", ".", "mean", "(", "x", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ",", "3", ")", ")", ")", "(", "x", ")", "\n", "x", "=", "ZeroPadding3D", "(", "padding", "=", "(", "0", ",", "4", ",", "4", ")", ")", "(", "x", ")", "\n", "for", "n_filters", "in", "[", "32", ",", "64", ",", "64", ",", "64", "]", ":", "\n", "        ", "x", "=", "Conv3D", "(", "n_filters", ",", "kernel_size", "=", "3", ",", "padding", "=", "'valid'", ",", "activation", "=", "'relu'", ",", "kernel_initializer", "=", "'glorot_uniform'", ")", "(", "x", ")", "\n", "", "x", "=", "Lambda", "(", "lambda", "x", ":", "K", ".", "squeeze", "(", "x", ",", "axis", "=", "1", ")", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.models.LFI_conv3D.build_model": [[30, 51], ["tensorflow.keras.layers.Input", "keras.engine.network.Network", "keras.engine.network.Network", "tensorflow.keras.layers.Input", "tensorflow.keras.layers.Input", "tensorflow.keras.models.Model", "LFI_conv3D.conv3D_branch", "LFI_conv3D.conv3D_branch", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.TimeDistributed", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Lambda", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.backend.squeeze"], "function", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.models.LFI_conv3D.conv3D_branch", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.models.LFI_conv3D.conv3D_branch"], ["", "def", "build_model", "(", ")", ":", "\n", "    ", "frames", "=", "None", "\n", "s_size", "=", "None", "\n", "# prepare shared layers", "\n", "dummy_frame_inputs", "=", "Input", "(", "shape", "=", "(", "(", "9", ",", "s_size", ",", "s_size", ",", "3", ")", ")", ")", "\n", "shared_layer_h", "=", "Network", "(", "dummy_frame_inputs", ",", "conv3D_branch", "(", "dummy_frame_inputs", ")", ")", "\n", "shared_layer_v", "=", "Network", "(", "dummy_frame_inputs", ",", "conv3D_branch", "(", "dummy_frame_inputs", ")", ")", "\n", "\n", "# build model", "\n", "inputs_h", "=", "Input", "(", "shape", "=", "(", "(", "frames", ",", "9", ",", "s_size", ",", "s_size", ",", "3", ")", ")", ",", "name", "=", "'inputs_h'", ")", "\n", "processed_h", "=", "TimeDistributed", "(", "shared_layer_h", ",", "name", "=", "'shared_3Dconv_branch_h'", ")", "(", "inputs_h", ")", "\n", "inputs_v", "=", "Input", "(", "shape", "=", "(", "(", "frames", ",", "9", ",", "s_size", ",", "s_size", ",", "3", ")", ")", ",", "name", "=", "'inputs_v'", ")", "\n", "processed_v", "=", "TimeDistributed", "(", "shared_layer_v", ",", "name", "=", "'shared_3Dconv_branch_v'", ")", "(", "inputs_v", ")", "\n", "x", "=", "Concatenate", "(", ")", "(", "[", "processed_h", ",", "processed_v", "]", ")", "\n", "\n", "for", "n_filters", "in", "[", "64", ",", "32", ",", "32", ",", "16", "]", ":", "\n", "        ", "x", "=", "TimeDistributed", "(", "Conv2D", "(", "n_filters", ",", "kernel_size", "=", "3", ",", "padding", "=", "'same'", ",", "activation", "=", "'relu'", ",", "kernel_initializer", "=", "'glorot_uniform'", ")", ")", "(", "x", ")", "\n", "", "x", "=", "TimeDistributed", "(", "Conv2D", "(", "1", ",", "kernel_size", "=", "3", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'glorot_uniform'", ")", ")", "(", "x", ")", "\n", "x", "=", "TimeDistributed", "(", "Lambda", "(", "lambda", "x", ":", "K", ".", "squeeze", "(", "x", ",", "axis", "=", "3", ")", ")", ")", "(", "x", ")", "\n", "\n", "return", "Model", "(", "inputs", "=", "[", "inputs_h", ",", "inputs_v", "]", ",", "outputs", "=", "x", ")", "", "", ""]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.RefineNet.__init__": [[14, 23], ["tensorflow.python.keras.engine.base_layer.Layer.__init__"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_states_chs", "=", "8", ")", ":", "\n", "        ", "super", "(", "RefineNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_states_chs", "=", "hidden_states_chs", "\n", "self", ".", "kernel_initializer", "=", "'glorot_uniform'", "\n", "self", ".", "kernel_regularizer", "=", "None", "\n", "self", ".", "kernel_constraint", "=", "None", "\n", "self", ".", "bias_initializer", "=", "'zeros'", "\n", "self", ".", "bias_regularizer", "=", "None", "\n", "self", ".", "bias_constraint", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.RefineNet.build": [[24, 69], ["tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.BatchNormalization", "STConvLSTM2DCell.RefineNet.add_weight", "STConvLSTM2DCell.RefineNet.add_weight", "STConvLSTM2DCell.RefineNet.add_weight", "STConvLSTM2DCell.RefineNet.add_weight", "STConvLSTM2DCell.RefineNet.add_weight", "STConvLSTM2DCell.RefineNet.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "input_chs", "=", "input_shape", "[", "-", "1", "]", "# CLSTM's input_chs + hidden_states_chs", "\n", "self", ".", "bn1", "=", "BatchNormalization", "(", ")", "\n", "self", ".", "bn2", "=", "BatchNormalization", "(", ")", "\n", "self", ".", "refine_1_kernel", "=", "self", ".", "add_weight", "(", "name", "=", "'refine_1_kernel'", ",", "\n", "shape", "=", "(", "5", ",", "5", ",", "\n", "input_chs", ",", "\n", "input_chs", ")", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ")", "\n", "self", ".", "refine_2_kernel", "=", "self", ".", "add_weight", "(", "name", "=", "'refine_2_kernel'", ",", "\n", "shape", "=", "(", "5", ",", "5", ",", "\n", "input_chs", ",", "\n", "input_chs", ")", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ")", "\n", "self", ".", "refine_h_kernel", "=", "self", ".", "add_weight", "(", "name", "=", "'refine_h_kernel'", ",", "\n", "shape", "=", "(", "3", ",", "3", ",", "\n", "input_chs", ",", "\n", "self", ".", "hidden_states_chs", ")", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ")", "\n", "self", ".", "refine_d_kernel", "=", "self", ".", "add_weight", "(", "name", "=", "'refine_d_kernel'", ",", "\n", "shape", "=", "(", "5", ",", "5", ",", "\n", "input_chs", ",", "\n", "1", ")", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ")", "\n", "self", ".", "refine_1_bias", "=", "None", "\n", "self", ".", "refine_2_bias", "=", "None", "\n", "self", ".", "refine_h_bias", "=", "self", ".", "add_weight", "(", "name", "=", "'refine_h_bias'", ",", "\n", "shape", "=", "(", "self", ".", "hidden_states_chs", ",", ")", ",", "\n", "initializer", "=", "self", ".", "bias_initializer", ",", "\n", "regularizer", "=", "self", ".", "bias_regularizer", ",", "\n", "constraint", "=", "self", ".", "bias_constraint", ")", "\n", "self", ".", "refine_d_bias", "=", "self", ".", "add_weight", "(", "name", "=", "'refine_d_bias'", ",", "\n", "shape", "=", "(", "1", ",", ")", ",", "\n", "initializer", "=", "self", ".", "bias_initializer", ",", "\n", "regularizer", "=", "self", ".", "bias_regularizer", ",", "\n", "constraint", "=", "self", ".", "bias_constraint", ")", "\n", "super", "(", "RefineNet", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.RefineNet.call": [[70, 78], ["STConvLSTM2DCell.RefineNet._conv", "STConvLSTM2DCell.RefineNet._BN_relu", "STConvLSTM2DCell.RefineNet._conv", "STConvLSTM2DCell.RefineNet._BN_relu", "STConvLSTM2DCell.RefineNet._conv", "STConvLSTM2DCell.RefineNet._conv"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.RefineNet._conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.RefineNet._BN_relu", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.RefineNet._conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.RefineNet._BN_relu", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.RefineNet._conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.RefineNet._conv"], ["", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "r_1", "=", "self", ".", "_conv", "(", "inputs", ",", "self", ".", "refine_1_kernel", ",", "self", ".", "refine_1_bias", ",", "padding", "=", "'same'", ")", "\n", "r_1", "=", "self", ".", "_BN_relu", "(", "r_1", ",", "self", ".", "bn1", ")", "\n", "r_2", "=", "self", ".", "_conv", "(", "r_1", ",", "self", ".", "refine_2_kernel", ",", "self", ".", "refine_2_bias", ",", "padding", "=", "'same'", ")", "\n", "r_2", "=", "self", ".", "_BN_relu", "(", "r_2", ",", "self", ".", "bn2", ")", "\n", "r_h", "=", "self", ".", "_conv", "(", "r_2", ",", "self", ".", "refine_h_kernel", ",", "self", ".", "refine_h_bias", ",", "padding", "=", "'same'", ")", "\n", "r_d", "=", "self", ".", "_conv", "(", "r_2", ",", "self", ".", "refine_d_kernel", ",", "self", ".", "refine_d_bias", ",", "padding", "=", "'same'", ")", "\n", "return", "r_h", ",", "r_d", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.RefineNet._conv": [[79, 87], ["tensorflow.python.keras.backend.conv2d", "tensorflow.python.keras.backend.bias_add"], "methods", ["None"], ["", "def", "_conv", "(", "self", ",", "x", ",", "w", ",", "b", "=", "None", ",", "padding", "=", "'same'", ")", ":", "\n", "        ", "conv_out", "=", "K", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "'channels_last'", ")", "\n", "if", "b", "is", "not", "None", ":", "\n", "            ", "conv_out", "=", "K", ".", "bias_add", "(", "conv_out", ",", "b", ",", "\n", "data_format", "=", "'channels_last'", ")", "\n", "", "return", "conv_out", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.RefineNet._BN_relu": [[88, 92], ["BN", "tensorflow.python.keras.backend.relu"], "methods", ["None"], ["", "def", "_BN_relu", "(", "self", ",", "x", ",", "BN", ")", ":", "\n", "        ", "x", "=", "BN", "(", "x", ")", "\n", "x", "=", "K", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.RefineNet.get_config": [[93, 106], ["super().get_config"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "base_config", "=", "super", "(", "RefineNet", ",", "self", ")", ".", "get_config", "(", ")", "\n", "out_config", "=", "{", "\n", "**", "base_config", ",", "\n", "\"hidden_states_chs\"", ":", "self", ".", "hidden_states_chs", ",", "\n", "\"kernel_initializer\"", ":", "self", ".", "kernel_initializer", ",", "\n", "\"kernel_regularizer\"", ":", "self", ".", "kernel_regularizer", ",", "\n", "\"kernel_constraint\"", ":", "self", ".", "kernel_constraint", ",", "\n", "\"bias_initializer\"", ":", "self", ".", "bias_initializer", ",", "\n", "\"bias_regularizer\"", ":", "self", ".", "bias_regularizer", ",", "\n", "\"bias_constraint\"", ":", "self", ".", "bias_constraint", ",", "\n", "}", "\n", "return", "out_config", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.STConvLSTM2DCell.__init__": [[109, 159], ["tensorflow.python.keras.layers.recurrent.DropoutRNNCellMixin.__init__", "tensorflow.python.keras.utils.conv_utils.normalize_tuple", "tensorflow.python.keras.utils.conv_utils.normalize_tuple", "tensorflow.python.keras.utils.conv_utils.normalize_padding", "tensorflow.python.keras.utils.conv_utils.normalize_data_format", "tensorflow.python.keras.utils.conv_utils.normalize_tuple", "tensorflow.python.keras.activations.get", "tensorflow.python.keras.activations.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.constraints.get", "tensorflow.python.keras.constraints.get", "tensorflow.python.keras.constraints.get", "min", "min", "max", "max"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.__init__"], ["  ", "def", "__init__", "(", "self", ",", "\n", "filters", ",", "\n", "kernel_size", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "'tanh'", ",", "\n", "recurrent_activation", "=", "'hard_sigmoid'", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "recurrent_initializer", "=", "'orthogonal'", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "unit_forget_bias", "=", "True", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "recurrent_regularizer", "=", "None", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "recurrent_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "\n", "recurrent_dropout", "=", "0.", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "STConvLSTM2DCell", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "filters", "=", "filters", "\n", "self", ".", "kernel_size", "=", "conv_utils", ".", "normalize_tuple", "(", "kernel_size", ",", "2", ",", "'kernel_size'", ")", "\n", "self", ".", "strides", "=", "conv_utils", ".", "normalize_tuple", "(", "strides", ",", "2", ",", "'strides'", ")", "\n", "self", ".", "padding", "=", "conv_utils", ".", "normalize_padding", "(", "padding", ")", "\n", "self", ".", "data_format", "=", "conv_utils", ".", "normalize_data_format", "(", "data_format", ")", "\n", "self", ".", "dilation_rate", "=", "conv_utils", ".", "normalize_tuple", "(", "dilation_rate", ",", "2", ",", "\n", "'dilation_rate'", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "recurrent_activation", "=", "activations", ".", "get", "(", "recurrent_activation", ")", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "self", ".", "recurrent_initializer", "=", "initializers", ".", "get", "(", "recurrent_initializer", ")", "\n", "self", ".", "bias_initializer", "=", "initializers", ".", "get", "(", "bias_initializer", ")", "\n", "self", ".", "unit_forget_bias", "=", "unit_forget_bias", "\n", "\n", "self", ".", "kernel_regularizer", "=", "regularizers", ".", "get", "(", "kernel_regularizer", ")", "\n", "self", ".", "recurrent_regularizer", "=", "regularizers", ".", "get", "(", "recurrent_regularizer", ")", "\n", "self", ".", "bias_regularizer", "=", "regularizers", ".", "get", "(", "bias_regularizer", ")", "\n", "\n", "self", ".", "kernel_constraint", "=", "constraints", ".", "get", "(", "kernel_constraint", ")", "\n", "self", ".", "recurrent_constraint", "=", "constraints", ".", "get", "(", "recurrent_constraint", ")", "\n", "self", ".", "bias_constraint", "=", "constraints", ".", "get", "(", "bias_constraint", ")", "\n", "\n", "self", ".", "dropout", "=", "min", "(", "1.", ",", "max", "(", "0.", ",", "dropout", ")", ")", "\n", "self", ".", "recurrent_dropout", "=", "min", "(", "1.", ",", "max", "(", "0.", ",", "recurrent_dropout", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.STConvLSTM2DCell.state_size": [[160, 163], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "return", "[", "self", ".", "filters", ",", "self", ".", "filters", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.STConvLSTM2DCell.build": [[164, 213], ["STConvLSTM2DCell.STConvLSTM2DCell.add_weight", "STConvLSTM2DCell.STConvLSTM2DCell.add_weight", "STConvLSTM2DCell.RefineNet", "ValueError", "STConvLSTM2DCell.STConvLSTM2DCell.add_weight", "tensorflow.python.keras.backend.concatenate", "STConvLSTM2DCell.STConvLSTM2DCell.bias_initializer", "STConvLSTM2DCell.STConvLSTM2DCell.bias_initializer", "STConvLSTM2DCell.STConvLSTM2DCell.bias_initializer", "tensorflow.python.keras.initializers.get"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.bias_initializer", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.bias_initializer", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.bias_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "    ", "if", "self", ".", "data_format", "==", "'channels_first'", ":", "\n", "      ", "channel_axis", "=", "1", "\n", "", "else", ":", "\n", "      ", "channel_axis", "=", "-", "1", "\n", "", "if", "input_shape", "[", "channel_axis", "]", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "'The channel dimension of the inputs '", "\n", "'should be defined. Found `None`.'", ")", "\n", "", "self", ".", "input_dim", "=", "input_shape", "[", "channel_axis", "]", "\n", "kernel_shape", "=", "self", ".", "kernel_size", "+", "(", "self", ".", "input_dim", ",", "self", ".", "filters", "*", "3", "+", "self", ".", "input_dim", ")", "\n", "self", ".", "kernel_shape", "=", "kernel_shape", "\n", "recurrent_kernel_shape", "=", "self", ".", "kernel_size", "+", "(", "self", ".", "filters", ",", "self", ".", "filters", "*", "3", "+", "self", ".", "input_dim", ")", "\n", "\n", "self", ".", "kernel", "=", "self", ".", "add_weight", "(", "shape", "=", "kernel_shape", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "name", "=", "'kernel'", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ")", "\n", "self", ".", "recurrent_kernel", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "recurrent_kernel_shape", ",", "\n", "initializer", "=", "self", ".", "recurrent_initializer", ",", "\n", "name", "=", "'recurrent_kernel'", ",", "\n", "regularizer", "=", "self", ".", "recurrent_regularizer", ",", "\n", "constraint", "=", "self", ".", "recurrent_constraint", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "      ", "if", "self", ".", "unit_forget_bias", ":", "\n", "\n", "        ", "def", "bias_initializer", "(", "_", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "          ", "return", "K", ".", "concatenate", "(", "[", "\n", "self", ".", "bias_initializer", "(", "(", "self", ".", "filters", ",", ")", ",", "*", "args", ",", "**", "kwargs", ")", ",", "\n", "initializers", ".", "get", "(", "'ones'", ")", "(", "(", "self", ".", "filters", ",", ")", ",", "*", "args", ",", "**", "kwargs", ")", ",", "\n", "self", ".", "bias_initializer", "(", "(", "self", ".", "filters", ",", ")", ",", "*", "args", ",", "**", "kwargs", ")", ",", "\n", "self", ".", "bias_initializer", "(", "(", "self", ".", "input_dim", ",", ")", ",", "*", "args", ",", "**", "kwargs", ")", ",", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "bias_initializer", "=", "self", ".", "bias_initializer", "\n", "", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "(", "self", ".", "filters", "*", "3", "+", "self", ".", "input_dim", ",", ")", ",", "\n", "name", "=", "'bias'", ",", "\n", "initializer", "=", "bias_initializer", ",", "\n", "regularizer", "=", "self", ".", "bias_regularizer", ",", "\n", "constraint", "=", "self", ".", "bias_constraint", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "bias", "=", "None", "\n", "\n", "", "self", ".", "refine_net", "=", "RefineNet", "(", "hidden_states_chs", "=", "self", ".", "filters", ")", "\n", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.STConvLSTM2DCell.call": [[214, 274], ["STConvLSTM2DCell.STConvLSTM2DCell.get_dropout_mask_for_cell", "STConvLSTM2DCell.STConvLSTM2DCell.get_recurrent_dropout_mask_for_cell", "tensorflow.python.ops.array_ops.split", "tensorflow.python.ops.array_ops.split", "STConvLSTM2DCell.STConvLSTM2DCell.input_conv", "STConvLSTM2DCell.STConvLSTM2DCell.input_conv", "STConvLSTM2DCell.STConvLSTM2DCell.input_conv", "STConvLSTM2DCell.STConvLSTM2DCell.input_conv", "STConvLSTM2DCell.STConvLSTM2DCell.recurrent_conv", "STConvLSTM2DCell.STConvLSTM2DCell.recurrent_conv", "STConvLSTM2DCell.STConvLSTM2DCell.recurrent_conv", "STConvLSTM2DCell.STConvLSTM2DCell.recurrent_conv", "STConvLSTM2DCell.STConvLSTM2DCell.recurrent_activation", "STConvLSTM2DCell.STConvLSTM2DCell.recurrent_activation", "STConvLSTM2DCell.STConvLSTM2DCell.recurrent_activation", "tensorflow.python.keras.backend.concatenate", "STConvLSTM2DCell.STConvLSTM2DCell.refine_net", "tensorflow.python.ops.array_ops.split", "STConvLSTM2DCell.STConvLSTM2DCell.activation", "STConvLSTM2DCell.STConvLSTM2DCell.activation"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.input_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.input_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.input_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.input_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.recurrent_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.recurrent_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.recurrent_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.recurrent_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.recurrent_activation", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.recurrent_activation", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.recurrent_activation", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.activation", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.activation"], ["", "def", "call", "(", "self", ",", "inputs", ",", "states", ",", "training", "=", "None", ")", ":", "\n", "    ", "h_tm1", "=", "states", "[", "0", "]", "# previous memory state", "\n", "c_tm1", "=", "states", "[", "1", "]", "# previous carry state", "\n", "\n", "# dropout matrices for input units", "\n", "dp_mask", "=", "self", ".", "get_dropout_mask_for_cell", "(", "inputs", ",", "training", ",", "count", "=", "4", ")", "\n", "# dropout matrices for recurrent units", "\n", "rec_dp_mask", "=", "self", ".", "get_recurrent_dropout_mask_for_cell", "(", "\n", "h_tm1", ",", "training", ",", "count", "=", "4", ")", "\n", "\n", "if", "0", "<", "self", ".", "dropout", "<", "1.", ":", "\n", "      ", "inputs_i", "=", "inputs", "*", "dp_mask", "[", "0", "]", "\n", "inputs_f", "=", "inputs", "*", "dp_mask", "[", "1", "]", "\n", "inputs_c", "=", "inputs", "*", "dp_mask", "[", "2", "]", "\n", "inputs_o", "=", "inputs", "*", "dp_mask", "[", "3", "]", "\n", "", "else", ":", "\n", "      ", "inputs_i", "=", "inputs", "\n", "inputs_f", "=", "inputs", "\n", "inputs_c", "=", "inputs", "\n", "inputs_o", "=", "inputs", "\n", "\n", "", "if", "0", "<", "self", ".", "recurrent_dropout", "<", "1.", ":", "\n", "      ", "h_tm1_i", "=", "h_tm1", "*", "rec_dp_mask", "[", "0", "]", "\n", "h_tm1_f", "=", "h_tm1", "*", "rec_dp_mask", "[", "1", "]", "\n", "h_tm1_c", "=", "h_tm1", "*", "rec_dp_mask", "[", "2", "]", "\n", "h_tm1_o", "=", "h_tm1", "*", "rec_dp_mask", "[", "3", "]", "\n", "", "else", ":", "\n", "      ", "h_tm1_i", "=", "h_tm1", "\n", "h_tm1_f", "=", "h_tm1", "\n", "h_tm1_c", "=", "h_tm1", "\n", "h_tm1_o", "=", "h_tm1", "\n", "\n", "", "(", "kernel_i", ",", "kernel_f", ",", "\n", "kernel_c", ",", "kernel_o", ")", "=", "array_ops", ".", "split", "(", "self", ".", "kernel", ",", "[", "self", ".", "filters", ",", "self", ".", "filters", ",", "self", ".", "filters", ",", "self", ".", "input_dim", "]", ",", "axis", "=", "3", ")", "\n", "(", "recurrent_kernel_i", ",", "\n", "recurrent_kernel_f", ",", "\n", "recurrent_kernel_c", ",", "\n", "recurrent_kernel_o", ")", "=", "array_ops", ".", "split", "(", "self", ".", "recurrent_kernel", ",", "[", "self", ".", "filters", ",", "self", ".", "filters", ",", "self", ".", "filters", ",", "self", ".", "input_dim", "]", ",", "axis", "=", "3", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "      ", "bias_i", ",", "bias_f", ",", "bias_c", ",", "bias_o", "=", "array_ops", ".", "split", "(", "self", ".", "bias", ",", "[", "self", ".", "filters", ",", "self", ".", "filters", ",", "self", ".", "filters", ",", "self", ".", "input_dim", "]", ")", "\n", "", "else", ":", "\n", "      ", "bias_i", ",", "bias_f", ",", "bias_c", ",", "bias_o", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "x_i", "=", "self", ".", "input_conv", "(", "inputs_i", ",", "kernel_i", ",", "bias_i", ",", "padding", "=", "self", ".", "padding", ")", "\n", "x_f", "=", "self", ".", "input_conv", "(", "inputs_f", ",", "kernel_f", ",", "bias_f", ",", "padding", "=", "self", ".", "padding", ")", "\n", "x_c", "=", "self", ".", "input_conv", "(", "inputs_c", ",", "kernel_c", ",", "bias_c", ",", "padding", "=", "self", ".", "padding", ")", "\n", "x_o", "=", "self", ".", "input_conv", "(", "inputs_o", ",", "kernel_o", ",", "bias_o", ",", "padding", "=", "self", ".", "padding", ")", "\n", "h_i", "=", "self", ".", "recurrent_conv", "(", "h_tm1_i", ",", "recurrent_kernel_i", ")", "\n", "h_f", "=", "self", ".", "recurrent_conv", "(", "h_tm1_f", ",", "recurrent_kernel_f", ")", "\n", "h_c", "=", "self", ".", "recurrent_conv", "(", "h_tm1_c", ",", "recurrent_kernel_c", ")", "\n", "h_o", "=", "self", ".", "recurrent_conv", "(", "h_tm1_o", ",", "recurrent_kernel_o", ")", "\n", "\n", "i", "=", "self", ".", "recurrent_activation", "(", "x_i", "+", "h_i", ")", "\n", "f", "=", "self", ".", "recurrent_activation", "(", "x_f", "+", "h_f", ")", "\n", "c", "=", "f", "*", "c_tm1", "+", "i", "*", "self", ".", "activation", "(", "x_c", "+", "h_c", ")", "\n", "o", "=", "self", ".", "recurrent_activation", "(", "x_o", "+", "h_o", ")", "\n", "h", "=", "K", ".", "concatenate", "(", "(", "o", ",", "self", ".", "activation", "(", "c", ")", ")", ",", "-", "1", ")", "\n", "r_h", ",", "r_d", "=", "self", ".", "refine_net", "(", "h", ")", "\n", "return", "r_d", ",", "[", "r_h", ",", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.STConvLSTM2DCell.input_conv": [[275, 284], ["tensorflow.python.keras.backend.conv2d", "tensorflow.python.keras.backend.bias_add"], "methods", ["None"], ["", "def", "input_conv", "(", "self", ",", "x", ",", "w", ",", "b", "=", "None", ",", "padding", "=", "'valid'", ")", ":", "\n", "    ", "conv_out", "=", "K", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "self", ".", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "self", ".", "data_format", ",", "\n", "dilation_rate", "=", "self", ".", "dilation_rate", ")", "\n", "if", "b", "is", "not", "None", ":", "\n", "      ", "conv_out", "=", "K", ".", "bias_add", "(", "conv_out", ",", "b", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", "\n", "", "return", "conv_out", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.STConvLSTM2DCell.recurrent_conv": [[285, 290], ["tensorflow.python.keras.backend.conv2d"], "methods", ["None"], ["", "def", "recurrent_conv", "(", "self", ",", "x", ",", "w", ")", ":", "\n", "    ", "conv_out", "=", "K", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", "\n", "return", "conv_out", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.STConvLSTM2DCell.STConvLSTM2DCell.get_config": [[291, 322], ["super().get_config", "dict", "tensorflow.python.keras.activations.serialize", "tensorflow.python.keras.activations.serialize", "tensorflow.python.keras.initializers.serialize", "tensorflow.python.keras.initializers.serialize", "tensorflow.python.keras.initializers.serialize", "tensorflow.python.keras.regularizers.serialize", "tensorflow.python.keras.regularizers.serialize", "tensorflow.python.keras.regularizers.serialize", "tensorflow.python.keras.constraints.serialize", "tensorflow.python.keras.constraints.serialize", "tensorflow.python.keras.constraints.serialize", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "    ", "config", "=", "{", "'filters'", ":", "self", ".", "filters", ",", "\n", "'kernel_size'", ":", "self", ".", "kernel_size", ",", "\n", "'strides'", ":", "self", ".", "strides", ",", "\n", "'padding'", ":", "self", ".", "padding", ",", "\n", "'data_format'", ":", "self", ".", "data_format", ",", "\n", "'dilation_rate'", ":", "self", ".", "dilation_rate", ",", "\n", "'activation'", ":", "activations", ".", "serialize", "(", "self", ".", "activation", ")", ",", "\n", "'recurrent_activation'", ":", "activations", ".", "serialize", "(", "\n", "self", ".", "recurrent_activation", ")", ",", "\n", "'use_bias'", ":", "self", ".", "use_bias", ",", "\n", "'kernel_initializer'", ":", "initializers", ".", "serialize", "(", "\n", "self", ".", "kernel_initializer", ")", ",", "\n", "'recurrent_initializer'", ":", "initializers", ".", "serialize", "(", "\n", "self", ".", "recurrent_initializer", ")", ",", "\n", "'bias_initializer'", ":", "initializers", ".", "serialize", "(", "self", ".", "bias_initializer", ")", ",", "\n", "'unit_forget_bias'", ":", "self", ".", "unit_forget_bias", ",", "\n", "'kernel_regularizer'", ":", "regularizers", ".", "serialize", "(", "\n", "self", ".", "kernel_regularizer", ")", ",", "\n", "'recurrent_regularizer'", ":", "regularizers", ".", "serialize", "(", "\n", "self", ".", "recurrent_regularizer", ")", ",", "\n", "'bias_regularizer'", ":", "regularizers", ".", "serialize", "(", "self", ".", "bias_regularizer", ")", ",", "\n", "'kernel_constraint'", ":", "constraints", ".", "serialize", "(", "\n", "self", ".", "kernel_constraint", ")", ",", "\n", "'recurrent_constraint'", ":", "constraints", ".", "serialize", "(", "\n", "self", ".", "recurrent_constraint", ")", ",", "\n", "'bias_constraint'", ":", "constraints", ".", "serialize", "(", "self", ".", "bias_constraint", ")", ",", "\n", "'dropout'", ":", "self", ".", "dropout", ",", "\n", "'recurrent_dropout'", ":", "self", ".", "recurrent_dropout", "}", "\n", "base_config", "=", "super", "(", "STConvLSTM2DCell", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvRNN2D.__init__": [[157, 182], ["isinstance", "tensorflow.python.keras.layers.recurrent.RNN.__init__", "TypeError", "TypeError", "tensorflow.python.keras.engine.input_spec.InputSpec"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.__init__"], ["def", "__init__", "(", "self", ",", "\n", "cell", ",", "\n", "return_sequences", "=", "False", ",", "\n", "return_state", "=", "False", ",", "\n", "go_backwards", "=", "False", ",", "\n", "stateful", "=", "False", ",", "\n", "unroll", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "if", "unroll", ":", "\n", "      ", "raise", "TypeError", "(", "'Unrolling isn\\'t possible with '", "\n", "'convolutional RNNs.'", ")", "\n", "", "if", "isinstance", "(", "cell", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "# The StackedConvRNN2DCells isn't implemented yet.", "\n", "      ", "raise", "TypeError", "(", "'It is not possible at the moment to'", "\n", "'stack convolutional cells.'", ")", "\n", "", "super", "(", "ConvRNN2D", ",", "self", ")", ".", "__init__", "(", "cell", ",", "\n", "return_sequences", ",", "\n", "return_state", ",", "\n", "go_backwards", ",", "\n", "stateful", ",", "\n", "unroll", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "input_spec", "=", "[", "InputSpec", "(", "ndim", "=", "5", ")", "]", "\n", "self", ".", "states", "=", "None", "\n", "self", ".", "_num_constants", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvRNN2D.compute_output_shape": [[183, 223], ["isinstance", "tensorflow.python.keras.utils.conv_utils.conv_output_length", "tensorflow.python.keras.utils.conv_utils.conv_output_length", "range", "range"], "methods", ["None"], ["", "@", "tf_utils", ".", "shape_type_conversion", "\n", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "    ", "if", "isinstance", "(", "input_shape", ",", "list", ")", ":", "\n", "      ", "input_shape", "=", "input_shape", "[", "0", "]", "\n", "\n", "", "cell", "=", "self", ".", "cell", "\n", "if", "cell", ".", "data_format", "==", "'channels_first'", ":", "\n", "      ", "rows", "=", "input_shape", "[", "3", "]", "\n", "cols", "=", "input_shape", "[", "4", "]", "\n", "", "elif", "cell", ".", "data_format", "==", "'channels_last'", ":", "\n", "      ", "rows", "=", "input_shape", "[", "2", "]", "\n", "cols", "=", "input_shape", "[", "3", "]", "\n", "", "rows", "=", "conv_utils", ".", "conv_output_length", "(", "rows", ",", "\n", "cell", ".", "kernel_size", "[", "0", "]", ",", "\n", "padding", "=", "cell", ".", "padding", ",", "\n", "stride", "=", "cell", ".", "strides", "[", "0", "]", ",", "\n", "dilation", "=", "cell", ".", "dilation_rate", "[", "0", "]", ")", "\n", "cols", "=", "conv_utils", ".", "conv_output_length", "(", "cols", ",", "\n", "cell", ".", "kernel_size", "[", "1", "]", ",", "\n", "padding", "=", "cell", ".", "padding", ",", "\n", "stride", "=", "cell", ".", "strides", "[", "1", "]", ",", "\n", "dilation", "=", "cell", ".", "dilation_rate", "[", "1", "]", ")", "\n", "\n", "if", "cell", ".", "data_format", "==", "'channels_first'", ":", "\n", "      ", "output_shape", "=", "input_shape", "[", ":", "2", "]", "+", "(", "cell", ".", "filters", ",", "rows", ",", "cols", ")", "\n", "", "elif", "cell", ".", "data_format", "==", "'channels_last'", ":", "\n", "      ", "output_shape", "=", "input_shape", "[", ":", "2", "]", "+", "(", "rows", ",", "cols", ",", "cell", ".", "filters", ")", "\n", "\n", "", "if", "not", "self", ".", "return_sequences", ":", "\n", "      ", "output_shape", "=", "output_shape", "[", ":", "1", "]", "+", "output_shape", "[", "2", ":", "]", "\n", "\n", "", "if", "self", ".", "return_state", ":", "\n", "      ", "output_shape", "=", "[", "output_shape", "]", "\n", "if", "cell", ".", "data_format", "==", "'channels_first'", ":", "\n", "        ", "output_shape", "+=", "[", "(", "input_shape", "[", "0", "]", ",", "cell", ".", "filters", ",", "rows", ",", "cols", ")", "\n", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "", "elif", "cell", ".", "data_format", "==", "'channels_last'", ":", "\n", "        ", "output_shape", "+=", "[", "(", "input_shape", "[", "0", "]", ",", "rows", ",", "cols", ",", "cell", ".", "filters", ")", "\n", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "", "", "return", "output_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvRNN2D.build": [[224, 276], ["isinstance", "tensorflow.python.keras.engine.input_spec.InputSpec", "isinstance", "hasattr", "list", "convolutional_recurrent.ConvRNN2D.reset_states", "convolutional_recurrent.ConvRNN2D.cell.build", "convolutional_recurrent.ConvRNN2D.cell.build", "ValueError", "tensorflow.python.keras.engine.input_spec.InputSpec", "tensorflow.python.keras.engine.input_spec.InputSpec"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvRNN2D.reset_states", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.build", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.build"], ["", "@", "tf_utils", ".", "shape_type_conversion", "\n", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "# Note input_shape will be list of shapes of initial states and", "\n", "# constants if these are passed in __call__.", "\n", "    ", "if", "self", ".", "_num_constants", "is", "not", "None", ":", "\n", "      ", "constants_shape", "=", "input_shape", "[", "-", "self", ".", "_num_constants", ":", "]", "# pylint: disable=E1130", "\n", "", "else", ":", "\n", "      ", "constants_shape", "=", "None", "\n", "\n", "", "if", "isinstance", "(", "input_shape", ",", "list", ")", ":", "\n", "      ", "input_shape", "=", "input_shape", "[", "0", "]", "\n", "\n", "", "batch_size", "=", "input_shape", "[", "0", "]", "if", "self", ".", "stateful", "else", "None", "\n", "self", ".", "input_spec", "[", "0", "]", "=", "InputSpec", "(", "shape", "=", "(", "batch_size", ",", "None", ")", "+", "input_shape", "[", "2", ":", "5", "]", ")", "\n", "\n", "# allow cell (if layer) to build before we set or validate state_spec", "\n", "if", "isinstance", "(", "self", ".", "cell", ",", "Layer", ")", ":", "\n", "      ", "step_input_shape", "=", "(", "input_shape", "[", "0", "]", ",", ")", "+", "input_shape", "[", "2", ":", "]", "\n", "if", "constants_shape", "is", "not", "None", ":", "\n", "        ", "self", ".", "cell", ".", "build", "(", "[", "step_input_shape", "]", "+", "constants_shape", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "cell", ".", "build", "(", "step_input_shape", ")", "\n", "\n", "# set or validate state_spec", "\n", "", "", "if", "hasattr", "(", "self", ".", "cell", ".", "state_size", ",", "'__len__'", ")", ":", "\n", "      ", "state_size", "=", "list", "(", "self", ".", "cell", ".", "state_size", ")", "\n", "", "else", ":", "\n", "      ", "state_size", "=", "[", "self", ".", "cell", ".", "state_size", "]", "\n", "\n", "", "if", "self", ".", "state_spec", "is", "not", "None", ":", "\n", "# initial_state was passed in call, check compatibility", "\n", "      ", "if", "self", ".", "cell", ".", "data_format", "==", "'channels_first'", ":", "\n", "        ", "ch_dim", "=", "1", "\n", "", "elif", "self", ".", "cell", ".", "data_format", "==", "'channels_last'", ":", "\n", "        ", "ch_dim", "=", "3", "\n", "", "if", "[", "spec", ".", "shape", "[", "ch_dim", "]", "for", "spec", "in", "self", ".", "state_spec", "]", "!=", "state_size", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'An initial_state was passed that is not compatible with '", "\n", "'`cell.state_size`. Received `state_spec`={}; '", "\n", "'However `cell.state_size` is '", "\n", "'{}'", ".", "format", "(", "[", "spec", ".", "shape", "for", "spec", "in", "self", ".", "state_spec", "]", ",", "\n", "self", ".", "cell", ".", "state_size", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "self", ".", "cell", ".", "data_format", "==", "'channels_first'", ":", "\n", "        ", "self", ".", "state_spec", "=", "[", "InputSpec", "(", "shape", "=", "(", "None", ",", "dim", ",", "None", ",", "None", ")", ")", "\n", "for", "dim", "in", "state_size", "]", "\n", "", "elif", "self", ".", "cell", ".", "data_format", "==", "'channels_last'", ":", "\n", "        ", "self", ".", "state_spec", "=", "[", "InputSpec", "(", "shape", "=", "(", "None", ",", "None", ",", "None", ",", "dim", ")", ")", "\n", "for", "dim", "in", "state_size", "]", "\n", "", "", "if", "self", ".", "stateful", ":", "\n", "      ", "self", ".", "reset_states", "(", ")", "\n", "", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvRNN2D.get_initial_state": [[277, 293], ["tensorflow.python.keras.backend.zeros_like", "tensorflow.python.keras.backend.sum", "list", "convolutional_recurrent.ConvRNN2D.cell.input_conv", "hasattr", "tensorflow.python.ops.array_ops.zeros", "tuple"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.input_conv"], ["", "def", "get_initial_state", "(", "self", ",", "inputs", ")", ":", "\n", "# (samples, timesteps, rows, cols, filters)", "\n", "    ", "initial_state", "=", "K", ".", "zeros_like", "(", "inputs", ")", "\n", "# (samples, rows, cols, filters)", "\n", "initial_state", "=", "K", ".", "sum", "(", "initial_state", ",", "axis", "=", "1", ")", "\n", "shape", "=", "list", "(", "self", ".", "cell", ".", "kernel_shape", ")", "\n", "shape", "[", "-", "1", "]", "=", "self", ".", "cell", ".", "filters", "\n", "initial_state", "=", "self", ".", "cell", ".", "input_conv", "(", "initial_state", ",", "\n", "array_ops", ".", "zeros", "(", "tuple", "(", "shape", ")", ",", "\n", "initial_state", ".", "dtype", ")", ",", "\n", "padding", "=", "self", ".", "cell", ".", "padding", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "cell", ".", "state_size", ",", "'__len__'", ")", ":", "\n", "      ", "return", "[", "initial_state", "for", "_", "in", "self", ".", "cell", ".", "state_size", "]", "\n", "", "else", ":", "\n", "      ", "return", "[", "initial_state", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvRNN2D.call": [[294, 352], ["convolutional_recurrent.ConvRNN2D._process_inputs", "isinstance", "tensorflow.python.keras.utils.generic_utils.has_arg", "tensorflow.python.keras.backend.rnn", "tensorflow.python.keras.backend.int_shape", "convolutional_recurrent.ConvRNN2D.add_update", "tensorflow.python.keras.utils.generic_utils.has_arg", "ValueError", "convolutional_recurrent.ConvRNN2D.cell.call", "convolutional_recurrent.ConvRNN2D.cell.call", "tensorflow.python.keras.backend.update", "isinstance", "list", "zip"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.call", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.call"], ["", "", "def", "call", "(", "self", ",", "\n", "inputs", ",", "\n", "mask", "=", "None", ",", "\n", "training", "=", "None", ",", "\n", "initial_state", "=", "None", ",", "\n", "constants", "=", "None", ")", ":", "\n", "# note that the .build() method of subclasses MUST define", "\n", "# self.input_spec and self.state_spec with complete input shapes.", "\n", "    ", "inputs", ",", "initial_state", ",", "constants", "=", "self", ".", "_process_inputs", "(", "\n", "inputs", ",", "initial_state", ",", "constants", ")", "\n", "\n", "if", "isinstance", "(", "mask", ",", "list", ")", ":", "\n", "      ", "mask", "=", "mask", "[", "0", "]", "\n", "", "timesteps", "=", "K", ".", "int_shape", "(", "inputs", ")", "[", "1", "]", "\n", "\n", "kwargs", "=", "{", "}", "\n", "if", "generic_utils", ".", "has_arg", "(", "self", ".", "cell", ".", "call", ",", "'training'", ")", ":", "\n", "      ", "kwargs", "[", "'training'", "]", "=", "training", "\n", "\n", "", "if", "constants", ":", "\n", "      ", "if", "not", "generic_utils", ".", "has_arg", "(", "self", ".", "cell", ".", "call", ",", "'constants'", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'RNN cell does not support constants'", ")", "\n", "\n", "", "def", "step", "(", "inputs", ",", "states", ")", ":", "\n", "        ", "constants", "=", "states", "[", "-", "self", ".", "_num_constants", ":", "]", "# pylint: disable=invalid-unary-operand-type", "\n", "states", "=", "states", "[", ":", "-", "self", ".", "_num_constants", "]", "# pylint: disable=invalid-unary-operand-type", "\n", "return", "self", ".", "cell", ".", "call", "(", "inputs", ",", "states", ",", "constants", "=", "constants", ",", "**", "kwargs", ")", "\n", "", "", "else", ":", "\n", "      ", "def", "step", "(", "inputs", ",", "states", ")", ":", "\n", "        ", "return", "self", ".", "cell", ".", "call", "(", "inputs", ",", "states", ",", "**", "kwargs", ")", "\n", "\n", "", "", "last_output", ",", "outputs", ",", "states", "=", "K", ".", "rnn", "(", "step", ",", "\n", "inputs", ",", "\n", "initial_state", ",", "\n", "constants", "=", "constants", ",", "\n", "go_backwards", "=", "self", ".", "go_backwards", ",", "\n", "mask", "=", "mask", ",", "\n", "input_length", "=", "timesteps", ")", "\n", "if", "self", ".", "stateful", ":", "\n", "      ", "updates", "=", "[", "\n", "K", ".", "update", "(", "self_state", ",", "state", ")", "\n", "for", "self_state", ",", "state", "in", "zip", "(", "self", ".", "states", ",", "states", ")", "\n", "]", "\n", "self", ".", "add_update", "(", "updates", ")", "\n", "\n", "", "if", "self", ".", "return_sequences", ":", "\n", "      ", "output", "=", "outputs", "\n", "", "else", ":", "\n", "      ", "output", "=", "last_output", "\n", "\n", "", "if", "self", ".", "return_state", ":", "\n", "      ", "if", "not", "isinstance", "(", "states", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "states", "=", "[", "states", "]", "\n", "", "else", ":", "\n", "        ", "states", "=", "list", "(", "states", ")", "\n", "", "return", "[", "output", "]", "+", "states", "\n", "", "else", ":", "\n", "      ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvRNN2D.reset_states": [[353, 422], ["convolutional_recurrent.ConvRNN2D.compute_output_shape", "AttributeError", "state_shape[].concatenate", "ValueError", "list", "tuple", "hasattr", "hasattr", "enumerate", "tensorflow.python.keras.backend.zeros", "tensorflow.python.keras.backend.zeros", "zip", "tensorflow.python.keras.backend.set_value", "isinstance", "len", "len", "ValueError", "zip", "hasattr", "tensorflow.python.keras.backend.set_value", "convolutional_recurrent.ConvRNN2D.reset_states.get_tuple_shape"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvRNN2D.compute_output_shape"], ["", "", "def", "reset_states", "(", "self", ",", "states", "=", "None", ")", ":", "\n", "    ", "if", "not", "self", ".", "stateful", ":", "\n", "      ", "raise", "AttributeError", "(", "'Layer must be stateful.'", ")", "\n", "", "input_shape", "=", "self", ".", "input_spec", "[", "0", "]", ".", "shape", "\n", "state_shape", "=", "self", ".", "compute_output_shape", "(", "input_shape", ")", "\n", "if", "self", ".", "return_state", ":", "\n", "      ", "state_shape", "=", "state_shape", "[", "0", "]", "\n", "", "if", "self", ".", "return_sequences", ":", "\n", "      ", "state_shape", "=", "state_shape", "[", ":", "1", "]", ".", "concatenate", "(", "state_shape", "[", "2", ":", "]", ")", "\n", "", "if", "None", "in", "state_shape", ":", "\n", "      ", "raise", "ValueError", "(", "'If a RNN is stateful, it needs to know '", "\n", "'its batch size. Specify the batch size '", "\n", "'of your input tensors: \\n'", "\n", "'- If using a Sequential model, '", "\n", "'specify the batch size by passing '", "\n", "'a `batch_input_shape` '", "\n", "'argument to your first layer.\\n'", "\n", "'- If using the functional API, specify '", "\n", "'the time dimension by passing a '", "\n", "'`batch_shape` argument to your Input layer.\\n'", "\n", "'The same thing goes for the number of rows and '", "\n", "'columns.'", ")", "\n", "\n", "# helper function", "\n", "", "def", "get_tuple_shape", "(", "nb_channels", ")", ":", "\n", "      ", "result", "=", "list", "(", "state_shape", ")", "\n", "if", "self", ".", "cell", ".", "data_format", "==", "'channels_first'", ":", "\n", "        ", "result", "[", "1", "]", "=", "nb_channels", "\n", "", "elif", "self", ".", "cell", ".", "data_format", "==", "'channels_last'", ":", "\n", "        ", "result", "[", "3", "]", "=", "nb_channels", "\n", "", "else", ":", "\n", "        ", "raise", "KeyError", "\n", "", "return", "tuple", "(", "result", ")", "\n", "\n", "# initialize state if None", "\n", "", "if", "self", ".", "states", "[", "0", "]", "is", "None", ":", "\n", "      ", "if", "hasattr", "(", "self", ".", "cell", ".", "state_size", ",", "'__len__'", ")", ":", "\n", "        ", "self", ".", "states", "=", "[", "K", ".", "zeros", "(", "get_tuple_shape", "(", "dim", ")", ")", "\n", "for", "dim", "in", "self", ".", "cell", ".", "state_size", "]", "\n", "", "else", ":", "\n", "        ", "self", ".", "states", "=", "[", "K", ".", "zeros", "(", "get_tuple_shape", "(", "self", ".", "cell", ".", "state_size", ")", ")", "]", "\n", "", "", "elif", "states", "is", "None", ":", "\n", "      ", "if", "hasattr", "(", "self", ".", "cell", ".", "state_size", ",", "'__len__'", ")", ":", "\n", "        ", "for", "state", ",", "dim", "in", "zip", "(", "self", ".", "states", ",", "self", ".", "cell", ".", "state_size", ")", ":", "\n", "          ", "K", ".", "set_value", "(", "state", ",", "np", ".", "zeros", "(", "get_tuple_shape", "(", "dim", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "K", ".", "set_value", "(", "self", ".", "states", "[", "0", "]", ",", "\n", "np", ".", "zeros", "(", "get_tuple_shape", "(", "self", ".", "cell", ".", "state_size", ")", ")", ")", "\n", "", "", "else", ":", "\n", "      ", "if", "not", "isinstance", "(", "states", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "states", "=", "[", "states", "]", "\n", "", "if", "len", "(", "states", ")", "!=", "len", "(", "self", ".", "states", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Layer '", "+", "self", ".", "name", "+", "' expects '", "+", "\n", "str", "(", "len", "(", "self", ".", "states", ")", ")", "+", "' states, '", "+", "\n", "'but it received '", "+", "str", "(", "len", "(", "states", ")", ")", "+", "\n", "' state values. Input received: '", "+", "str", "(", "states", ")", ")", "\n", "", "for", "index", ",", "(", "value", ",", "state", ")", "in", "enumerate", "(", "zip", "(", "states", ",", "self", ".", "states", ")", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "cell", ".", "state_size", ",", "'__len__'", ")", ":", "\n", "          ", "dim", "=", "self", ".", "cell", ".", "state_size", "[", "index", "]", "\n", "", "else", ":", "\n", "          ", "dim", "=", "self", ".", "cell", ".", "state_size", "\n", "", "if", "value", ".", "shape", "!=", "get_tuple_shape", "(", "dim", ")", ":", "\n", "          ", "raise", "ValueError", "(", "'State '", "+", "str", "(", "index", ")", "+", "\n", "' is incompatible with layer '", "+", "\n", "self", ".", "name", "+", "': expected shape='", "+", "\n", "str", "(", "get_tuple_shape", "(", "dim", ")", ")", "+", "\n", "', found shape='", "+", "str", "(", "value", ".", "shape", ")", ")", "\n", "# TODO(anjalisridhar): consider batch calls to `set_value`.", "\n", "", "K", ".", "set_value", "(", "state", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.__init__": [[491, 542], ["tensorflow.python.keras.layers.recurrent.DropoutRNNCellMixin.__init__", "tensorflow.python.keras.utils.conv_utils.normalize_tuple", "tensorflow.python.keras.utils.conv_utils.normalize_tuple", "tensorflow.python.keras.utils.conv_utils.normalize_padding", "tensorflow.python.keras.utils.conv_utils.normalize_data_format", "tensorflow.python.keras.utils.conv_utils.normalize_tuple", "tensorflow.python.keras.activations.get", "tensorflow.python.keras.activations.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.initializers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.regularizers.get", "tensorflow.python.keras.constraints.get", "tensorflow.python.keras.constraints.get", "tensorflow.python.keras.constraints.get", "min", "min", "max", "max"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.__init__"], ["def", "__init__", "(", "self", ",", "\n", "filters", ",", "\n", "kernel_size", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "'tanh'", ",", "\n", "recurrent_activation", "=", "'hard_sigmoid'", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "recurrent_initializer", "=", "'orthogonal'", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "unit_forget_bias", "=", "True", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "recurrent_regularizer", "=", "None", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "recurrent_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "dropout", "=", "0.", ",", "\n", "recurrent_dropout", "=", "0.", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "ConvLSTM2DCell", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "filters", "=", "filters", "\n", "self", ".", "kernel_size", "=", "conv_utils", ".", "normalize_tuple", "(", "kernel_size", ",", "2", ",", "'kernel_size'", ")", "\n", "self", ".", "strides", "=", "conv_utils", ".", "normalize_tuple", "(", "strides", ",", "2", ",", "'strides'", ")", "\n", "self", ".", "padding", "=", "conv_utils", ".", "normalize_padding", "(", "padding", ")", "\n", "self", ".", "data_format", "=", "conv_utils", ".", "normalize_data_format", "(", "data_format", ")", "\n", "self", ".", "dilation_rate", "=", "conv_utils", ".", "normalize_tuple", "(", "dilation_rate", ",", "2", ",", "\n", "'dilation_rate'", ")", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "recurrent_activation", "=", "activations", ".", "get", "(", "recurrent_activation", ")", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "\n", "self", ".", "kernel_initializer", "=", "initializers", ".", "get", "(", "kernel_initializer", ")", "\n", "self", ".", "recurrent_initializer", "=", "initializers", ".", "get", "(", "recurrent_initializer", ")", "\n", "self", ".", "bias_initializer", "=", "initializers", ".", "get", "(", "bias_initializer", ")", "\n", "self", ".", "unit_forget_bias", "=", "unit_forget_bias", "\n", "\n", "self", ".", "kernel_regularizer", "=", "regularizers", ".", "get", "(", "kernel_regularizer", ")", "\n", "self", ".", "recurrent_regularizer", "=", "regularizers", ".", "get", "(", "recurrent_regularizer", ")", "\n", "self", ".", "bias_regularizer", "=", "regularizers", ".", "get", "(", "bias_regularizer", ")", "\n", "\n", "self", ".", "kernel_constraint", "=", "constraints", ".", "get", "(", "kernel_constraint", ")", "\n", "self", ".", "recurrent_constraint", "=", "constraints", ".", "get", "(", "recurrent_constraint", ")", "\n", "self", ".", "bias_constraint", "=", "constraints", ".", "get", "(", "bias_constraint", ")", "\n", "\n", "self", ".", "dropout", "=", "min", "(", "1.", ",", "max", "(", "0.", ",", "dropout", ")", ")", "\n", "self", ".", "recurrent_dropout", "=", "min", "(", "1.", ",", "max", "(", "0.", ",", "recurrent_dropout", ")", ")", "\n", "self", ".", "state_size", "=", "(", "self", ".", "filters", ",", "self", ".", "filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.build": [[543, 589], ["convolutional_recurrent.ConvLSTM2DCell.add_weight", "convolutional_recurrent.ConvLSTM2DCell.add_weight", "ValueError", "convolutional_recurrent.ConvLSTM2DCell.add_weight", "tensorflow.python.keras.backend.concatenate", "convolutional_recurrent.ConvLSTM2DCell.bias_initializer", "convolutional_recurrent.ConvLSTM2DCell.bias_initializer", "tensorflow.python.keras.initializers.get"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.bias_initializer", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.bias_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "    ", "if", "self", ".", "data_format", "==", "'channels_first'", ":", "\n", "      ", "channel_axis", "=", "1", "\n", "", "else", ":", "\n", "      ", "channel_axis", "=", "-", "1", "\n", "", "if", "input_shape", "[", "channel_axis", "]", "is", "None", ":", "\n", "      ", "raise", "ValueError", "(", "'The channel dimension of the inputs '", "\n", "'should be defined. Found `None`.'", ")", "\n", "", "input_dim", "=", "input_shape", "[", "channel_axis", "]", "\n", "kernel_shape", "=", "self", ".", "kernel_size", "+", "(", "input_dim", ",", "self", ".", "filters", "*", "4", ")", "\n", "self", ".", "kernel_shape", "=", "kernel_shape", "\n", "recurrent_kernel_shape", "=", "self", ".", "kernel_size", "+", "(", "self", ".", "filters", ",", "self", ".", "filters", "*", "4", ")", "\n", "\n", "self", ".", "kernel", "=", "self", ".", "add_weight", "(", "shape", "=", "kernel_shape", ",", "\n", "initializer", "=", "self", ".", "kernel_initializer", ",", "\n", "name", "=", "'kernel'", ",", "\n", "regularizer", "=", "self", ".", "kernel_regularizer", ",", "\n", "constraint", "=", "self", ".", "kernel_constraint", ")", "\n", "self", ".", "recurrent_kernel", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "recurrent_kernel_shape", ",", "\n", "initializer", "=", "self", ".", "recurrent_initializer", ",", "\n", "name", "=", "'recurrent_kernel'", ",", "\n", "regularizer", "=", "self", ".", "recurrent_regularizer", ",", "\n", "constraint", "=", "self", ".", "recurrent_constraint", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "      ", "if", "self", ".", "unit_forget_bias", ":", "\n", "\n", "        ", "def", "bias_initializer", "(", "_", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "          ", "return", "K", ".", "concatenate", "(", "[", "\n", "self", ".", "bias_initializer", "(", "(", "self", ".", "filters", ",", ")", ",", "*", "args", ",", "**", "kwargs", ")", ",", "\n", "initializers", ".", "get", "(", "'ones'", ")", "(", "(", "self", ".", "filters", ",", ")", ",", "*", "args", ",", "**", "kwargs", ")", ",", "\n", "self", ".", "bias_initializer", "(", "(", "self", ".", "filters", "*", "2", ",", ")", ",", "*", "args", ",", "**", "kwargs", ")", ",", "\n", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "bias_initializer", "=", "self", ".", "bias_initializer", "\n", "", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "\n", "shape", "=", "(", "self", ".", "filters", "*", "4", ",", ")", ",", "\n", "name", "=", "'bias'", ",", "\n", "initializer", "=", "bias_initializer", ",", "\n", "regularizer", "=", "self", ".", "bias_regularizer", ",", "\n", "constraint", "=", "self", ".", "bias_constraint", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "bias", "=", "None", "\n", "", "self", ".", "built", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.call": [[590, 649], ["convolutional_recurrent.ConvLSTM2DCell.get_dropout_mask_for_cell", "convolutional_recurrent.ConvLSTM2DCell.get_recurrent_dropout_mask_for_cell", "tensorflow.python.ops.array_ops.split", "tensorflow.python.ops.array_ops.split", "convolutional_recurrent.ConvLSTM2DCell.input_conv", "convolutional_recurrent.ConvLSTM2DCell.input_conv", "convolutional_recurrent.ConvLSTM2DCell.input_conv", "convolutional_recurrent.ConvLSTM2DCell.input_conv", "convolutional_recurrent.ConvLSTM2DCell.recurrent_conv", "convolutional_recurrent.ConvLSTM2DCell.recurrent_conv", "convolutional_recurrent.ConvLSTM2DCell.recurrent_conv", "convolutional_recurrent.ConvLSTM2DCell.recurrent_conv", "convolutional_recurrent.ConvLSTM2DCell.recurrent_activation", "convolutional_recurrent.ConvLSTM2DCell.recurrent_activation", "convolutional_recurrent.ConvLSTM2DCell.recurrent_activation", "tensorflow.python.ops.array_ops.split", "convolutional_recurrent.ConvLSTM2DCell.activation", "convolutional_recurrent.ConvLSTM2DCell.activation"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.input_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.input_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.input_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.input_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.recurrent_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.recurrent_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.recurrent_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.recurrent_conv", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.recurrent_activation", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.recurrent_activation", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.recurrent_activation", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.activation", "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.activation"], ["", "def", "call", "(", "self", ",", "inputs", ",", "states", ",", "training", "=", "None", ")", ":", "\n", "    ", "h_tm1", "=", "states", "[", "0", "]", "# previous memory state", "\n", "c_tm1", "=", "states", "[", "1", "]", "# previous carry state", "\n", "\n", "# dropout matrices for input units", "\n", "dp_mask", "=", "self", ".", "get_dropout_mask_for_cell", "(", "inputs", ",", "training", ",", "count", "=", "4", ")", "\n", "# dropout matrices for recurrent units", "\n", "rec_dp_mask", "=", "self", ".", "get_recurrent_dropout_mask_for_cell", "(", "\n", "h_tm1", ",", "training", ",", "count", "=", "4", ")", "\n", "\n", "if", "0", "<", "self", ".", "dropout", "<", "1.", ":", "\n", "      ", "inputs_i", "=", "inputs", "*", "dp_mask", "[", "0", "]", "\n", "inputs_f", "=", "inputs", "*", "dp_mask", "[", "1", "]", "\n", "inputs_c", "=", "inputs", "*", "dp_mask", "[", "2", "]", "\n", "inputs_o", "=", "inputs", "*", "dp_mask", "[", "3", "]", "\n", "", "else", ":", "\n", "      ", "inputs_i", "=", "inputs", "\n", "inputs_f", "=", "inputs", "\n", "inputs_c", "=", "inputs", "\n", "inputs_o", "=", "inputs", "\n", "\n", "", "if", "0", "<", "self", ".", "recurrent_dropout", "<", "1.", ":", "\n", "      ", "h_tm1_i", "=", "h_tm1", "*", "rec_dp_mask", "[", "0", "]", "\n", "h_tm1_f", "=", "h_tm1", "*", "rec_dp_mask", "[", "1", "]", "\n", "h_tm1_c", "=", "h_tm1", "*", "rec_dp_mask", "[", "2", "]", "\n", "h_tm1_o", "=", "h_tm1", "*", "rec_dp_mask", "[", "3", "]", "\n", "", "else", ":", "\n", "      ", "h_tm1_i", "=", "h_tm1", "\n", "h_tm1_f", "=", "h_tm1", "\n", "h_tm1_c", "=", "h_tm1", "\n", "h_tm1_o", "=", "h_tm1", "\n", "\n", "", "(", "kernel_i", ",", "kernel_f", ",", "\n", "kernel_c", ",", "kernel_o", ")", "=", "array_ops", ".", "split", "(", "self", ".", "kernel", ",", "4", ",", "axis", "=", "3", ")", "\n", "(", "recurrent_kernel_i", ",", "\n", "recurrent_kernel_f", ",", "\n", "recurrent_kernel_c", ",", "\n", "recurrent_kernel_o", ")", "=", "array_ops", ".", "split", "(", "self", ".", "recurrent_kernel", ",", "4", ",", "axis", "=", "3", ")", "\n", "\n", "if", "self", ".", "use_bias", ":", "\n", "      ", "bias_i", ",", "bias_f", ",", "bias_c", ",", "bias_o", "=", "array_ops", ".", "split", "(", "self", ".", "bias", ",", "4", ")", "\n", "", "else", ":", "\n", "      ", "bias_i", ",", "bias_f", ",", "bias_c", ",", "bias_o", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "x_i", "=", "self", ".", "input_conv", "(", "inputs_i", ",", "kernel_i", ",", "bias_i", ",", "padding", "=", "self", ".", "padding", ")", "\n", "x_f", "=", "self", ".", "input_conv", "(", "inputs_f", ",", "kernel_f", ",", "bias_f", ",", "padding", "=", "self", ".", "padding", ")", "\n", "x_c", "=", "self", ".", "input_conv", "(", "inputs_c", ",", "kernel_c", ",", "bias_c", ",", "padding", "=", "self", ".", "padding", ")", "\n", "x_o", "=", "self", ".", "input_conv", "(", "inputs_o", ",", "kernel_o", ",", "bias_o", ",", "padding", "=", "self", ".", "padding", ")", "\n", "h_i", "=", "self", ".", "recurrent_conv", "(", "h_tm1_i", ",", "recurrent_kernel_i", ")", "\n", "h_f", "=", "self", ".", "recurrent_conv", "(", "h_tm1_f", ",", "recurrent_kernel_f", ")", "\n", "h_c", "=", "self", ".", "recurrent_conv", "(", "h_tm1_c", ",", "recurrent_kernel_c", ")", "\n", "h_o", "=", "self", ".", "recurrent_conv", "(", "h_tm1_o", ",", "recurrent_kernel_o", ")", "\n", "\n", "i", "=", "self", ".", "recurrent_activation", "(", "x_i", "+", "h_i", ")", "\n", "f", "=", "self", ".", "recurrent_activation", "(", "x_f", "+", "h_f", ")", "\n", "c", "=", "f", "*", "c_tm1", "+", "i", "*", "self", ".", "activation", "(", "x_c", "+", "h_c", ")", "\n", "o", "=", "self", ".", "recurrent_activation", "(", "x_o", "+", "h_o", ")", "\n", "h", "=", "o", "*", "self", ".", "activation", "(", "c", ")", "\n", "return", "h", ",", "[", "h", ",", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.input_conv": [[650, 659], ["tensorflow.python.keras.backend.conv2d", "tensorflow.python.keras.backend.bias_add"], "methods", ["None"], ["", "def", "input_conv", "(", "self", ",", "x", ",", "w", ",", "b", "=", "None", ",", "padding", "=", "'valid'", ")", ":", "\n", "    ", "conv_out", "=", "K", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "self", ".", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "self", ".", "data_format", ",", "\n", "dilation_rate", "=", "self", ".", "dilation_rate", ")", "\n", "if", "b", "is", "not", "None", ":", "\n", "      ", "conv_out", "=", "K", ".", "bias_add", "(", "conv_out", ",", "b", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", "\n", "", "return", "conv_out", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.recurrent_conv": [[660, 665], ["tensorflow.python.keras.backend.conv2d"], "methods", ["None"], ["", "def", "recurrent_conv", "(", "self", ",", "x", ",", "w", ")", ":", "\n", "    ", "conv_out", "=", "K", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'same'", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", "\n", "return", "conv_out", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2DCell.get_config": [[666, 697], ["super().get_config", "dict", "tensorflow.python.keras.activations.serialize", "tensorflow.python.keras.activations.serialize", "tensorflow.python.keras.initializers.serialize", "tensorflow.python.keras.initializers.serialize", "tensorflow.python.keras.initializers.serialize", "tensorflow.python.keras.regularizers.serialize", "tensorflow.python.keras.regularizers.serialize", "tensorflow.python.keras.regularizers.serialize", "tensorflow.python.keras.constraints.serialize", "tensorflow.python.keras.constraints.serialize", "tensorflow.python.keras.constraints.serialize", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "    ", "config", "=", "{", "'filters'", ":", "self", ".", "filters", ",", "\n", "'kernel_size'", ":", "self", ".", "kernel_size", ",", "\n", "'strides'", ":", "self", ".", "strides", ",", "\n", "'padding'", ":", "self", ".", "padding", ",", "\n", "'data_format'", ":", "self", ".", "data_format", ",", "\n", "'dilation_rate'", ":", "self", ".", "dilation_rate", ",", "\n", "'activation'", ":", "activations", ".", "serialize", "(", "self", ".", "activation", ")", ",", "\n", "'recurrent_activation'", ":", "activations", ".", "serialize", "(", "\n", "self", ".", "recurrent_activation", ")", ",", "\n", "'use_bias'", ":", "self", ".", "use_bias", ",", "\n", "'kernel_initializer'", ":", "initializers", ".", "serialize", "(", "\n", "self", ".", "kernel_initializer", ")", ",", "\n", "'recurrent_initializer'", ":", "initializers", ".", "serialize", "(", "\n", "self", ".", "recurrent_initializer", ")", ",", "\n", "'bias_initializer'", ":", "initializers", ".", "serialize", "(", "self", ".", "bias_initializer", ")", ",", "\n", "'unit_forget_bias'", ":", "self", ".", "unit_forget_bias", ",", "\n", "'kernel_regularizer'", ":", "regularizers", ".", "serialize", "(", "\n", "self", ".", "kernel_regularizer", ")", ",", "\n", "'recurrent_regularizer'", ":", "regularizers", ".", "serialize", "(", "\n", "self", ".", "recurrent_regularizer", ")", ",", "\n", "'bias_regularizer'", ":", "regularizers", ".", "serialize", "(", "self", ".", "bias_regularizer", ")", ",", "\n", "'kernel_constraint'", ":", "constraints", ".", "serialize", "(", "\n", "self", ".", "kernel_constraint", ")", ",", "\n", "'recurrent_constraint'", ":", "constraints", ".", "serialize", "(", "\n", "self", ".", "recurrent_constraint", ")", ",", "\n", "'bias_constraint'", ":", "constraints", ".", "serialize", "(", "self", ".", "bias_constraint", ")", ",", "\n", "'dropout'", ":", "self", ".", "dropout", ",", "\n", "'recurrent_dropout'", ":", "self", ".", "recurrent_dropout", "}", "\n", "base_config", "=", "super", "(", "ConvLSTM2DCell", ",", "self", ")", ".", "get_config", "(", ")", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.__init__": [[828, 885], ["convolutional_recurrent.ConvLSTM2DCell", "convolutional_recurrent.ConvRNN2D.__init__", "tensorflow.python.keras.regularizers.get", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.__init__"], ["def", "__init__", "(", "self", ",", "\n", "filters", ",", "\n", "kernel_size", ",", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", "=", "'valid'", ",", "\n", "data_format", "=", "None", ",", "\n", "dilation_rate", "=", "(", "1", ",", "1", ")", ",", "\n", "activation", "=", "'tanh'", ",", "\n", "recurrent_activation", "=", "'hard_sigmoid'", ",", "\n", "use_bias", "=", "True", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "recurrent_initializer", "=", "'orthogonal'", ",", "\n", "bias_initializer", "=", "'zeros'", ",", "\n", "unit_forget_bias", "=", "True", ",", "\n", "kernel_regularizer", "=", "None", ",", "\n", "recurrent_regularizer", "=", "None", ",", "\n", "bias_regularizer", "=", "None", ",", "\n", "activity_regularizer", "=", "None", ",", "\n", "kernel_constraint", "=", "None", ",", "\n", "recurrent_constraint", "=", "None", ",", "\n", "bias_constraint", "=", "None", ",", "\n", "return_sequences", "=", "False", ",", "\n", "return_state", "=", "False", ",", "\n", "go_backwards", "=", "False", ",", "\n", "stateful", "=", "False", ",", "\n", "dropout", "=", "0.", ",", "\n", "recurrent_dropout", "=", "0.", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "cell", "=", "ConvLSTM2DCell", "(", "filters", "=", "filters", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "data_format", ",", "\n", "dilation_rate", "=", "dilation_rate", ",", "\n", "activation", "=", "activation", ",", "\n", "recurrent_activation", "=", "recurrent_activation", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "kernel_initializer", ",", "\n", "recurrent_initializer", "=", "recurrent_initializer", ",", "\n", "bias_initializer", "=", "bias_initializer", ",", "\n", "unit_forget_bias", "=", "unit_forget_bias", ",", "\n", "kernel_regularizer", "=", "kernel_regularizer", ",", "\n", "recurrent_regularizer", "=", "recurrent_regularizer", ",", "\n", "bias_regularizer", "=", "bias_regularizer", ",", "\n", "kernel_constraint", "=", "kernel_constraint", ",", "\n", "recurrent_constraint", "=", "recurrent_constraint", ",", "\n", "bias_constraint", "=", "bias_constraint", ",", "\n", "dropout", "=", "dropout", ",", "\n", "recurrent_dropout", "=", "recurrent_dropout", ",", "\n", "dtype", "=", "kwargs", ".", "get", "(", "'dtype'", ")", ")", "\n", "super", "(", "ConvLSTM2D", ",", "self", ")", ".", "__init__", "(", "cell", ",", "\n", "return_sequences", "=", "return_sequences", ",", "\n", "return_state", "=", "return_state", ",", "\n", "go_backwards", "=", "go_backwards", ",", "\n", "stateful", "=", "stateful", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "activity_regularizer", "=", "regularizers", ".", "get", "(", "activity_regularizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.call": [[886, 892], ["convolutional_recurrent.ConvLSTM2D._maybe_reset_cell_dropout_mask", "convolutional_recurrent.ConvRNN2D.call"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.call"], ["", "def", "call", "(", "self", ",", "inputs", ",", "mask", "=", "None", ",", "training", "=", "None", ",", "initial_state", "=", "None", ")", ":", "\n", "    ", "self", ".", "_maybe_reset_cell_dropout_mask", "(", "self", ".", "cell", ")", "\n", "return", "super", "(", "ConvLSTM2D", ",", "self", ")", ".", "call", "(", "inputs", ",", "\n", "mask", "=", "mask", ",", "\n", "training", "=", "training", ",", "\n", "initial_state", "=", "initial_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.filters": [[893, 896], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "filters", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "filters", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.kernel_size": [[897, 900], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "kernel_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "kernel_size", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.strides": [[901, 904], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "strides", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "strides", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.padding": [[905, 908], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "padding", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.data_format": [[909, 912], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "data_format", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "data_format", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.dilation_rate": [[913, 916], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dilation_rate", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "dilation_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.activation": [[917, 920], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "activation", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.recurrent_activation": [[921, 924], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_activation", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "recurrent_activation", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.use_bias": [[925, 928], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "use_bias", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "use_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.kernel_initializer": [[929, 932], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "kernel_initializer", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "kernel_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.recurrent_initializer": [[933, 936], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_initializer", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "recurrent_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.bias_initializer": [[937, 940], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bias_initializer", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "bias_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.unit_forget_bias": [[941, 944], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "unit_forget_bias", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "unit_forget_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.kernel_regularizer": [[945, 948], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "kernel_regularizer", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "kernel_regularizer", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.recurrent_regularizer": [[949, 952], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_regularizer", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "recurrent_regularizer", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.bias_regularizer": [[953, 956], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bias_regularizer", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "bias_regularizer", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.kernel_constraint": [[957, 960], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "kernel_constraint", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "kernel_constraint", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.recurrent_constraint": [[961, 964], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_constraint", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "recurrent_constraint", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.bias_constraint": [[965, 968], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bias_constraint", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "bias_constraint", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.dropout": [[969, 972], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dropout", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.recurrent_dropout": [[973, 976], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "recurrent_dropout", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "cell", ".", "recurrent_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.get_config": [[977, 1011], ["super().get_config", "dict", "tensorflow.python.keras.activations.serialize", "tensorflow.python.keras.activations.serialize", "tensorflow.python.keras.initializers.serialize", "tensorflow.python.keras.initializers.serialize", "tensorflow.python.keras.initializers.serialize", "tensorflow.python.keras.regularizers.serialize", "tensorflow.python.keras.regularizers.serialize", "tensorflow.python.keras.regularizers.serialize", "tensorflow.python.keras.regularizers.serialize", "tensorflow.python.keras.constraints.serialize", "tensorflow.python.keras.constraints.serialize", "tensorflow.python.keras.constraints.serialize", "list", "list", "super().get_config.items", "config.items"], "methods", ["home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.get_config"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "    ", "config", "=", "{", "'filters'", ":", "self", ".", "filters", ",", "\n", "'kernel_size'", ":", "self", ".", "kernel_size", ",", "\n", "'strides'", ":", "self", ".", "strides", ",", "\n", "'padding'", ":", "self", ".", "padding", ",", "\n", "'data_format'", ":", "self", ".", "data_format", ",", "\n", "'dilation_rate'", ":", "self", ".", "dilation_rate", ",", "\n", "'activation'", ":", "activations", ".", "serialize", "(", "self", ".", "activation", ")", ",", "\n", "'recurrent_activation'", ":", "activations", ".", "serialize", "(", "\n", "self", ".", "recurrent_activation", ")", ",", "\n", "'use_bias'", ":", "self", ".", "use_bias", ",", "\n", "'kernel_initializer'", ":", "initializers", ".", "serialize", "(", "\n", "self", ".", "kernel_initializer", ")", ",", "\n", "'recurrent_initializer'", ":", "initializers", ".", "serialize", "(", "\n", "self", ".", "recurrent_initializer", ")", ",", "\n", "'bias_initializer'", ":", "initializers", ".", "serialize", "(", "self", ".", "bias_initializer", ")", ",", "\n", "'unit_forget_bias'", ":", "self", ".", "unit_forget_bias", ",", "\n", "'kernel_regularizer'", ":", "regularizers", ".", "serialize", "(", "\n", "self", ".", "kernel_regularizer", ")", ",", "\n", "'recurrent_regularizer'", ":", "regularizers", ".", "serialize", "(", "\n", "self", ".", "recurrent_regularizer", ")", ",", "\n", "'bias_regularizer'", ":", "regularizers", ".", "serialize", "(", "self", ".", "bias_regularizer", ")", ",", "\n", "'activity_regularizer'", ":", "regularizers", ".", "serialize", "(", "\n", "self", ".", "activity_regularizer", ")", ",", "\n", "'kernel_constraint'", ":", "constraints", ".", "serialize", "(", "\n", "self", ".", "kernel_constraint", ")", ",", "\n", "'recurrent_constraint'", ":", "constraints", ".", "serialize", "(", "\n", "self", ".", "recurrent_constraint", ")", ",", "\n", "'bias_constraint'", ":", "constraints", ".", "serialize", "(", "self", ".", "bias_constraint", ")", ",", "\n", "'dropout'", ":", "self", ".", "dropout", ",", "\n", "'recurrent_dropout'", ":", "self", ".", "recurrent_dropout", "}", "\n", "base_config", "=", "super", "(", "ConvLSTM2D", ",", "self", ")", ".", "get_config", "(", ")", "\n", "del", "base_config", "[", "'cell'", "]", "\n", "return", "dict", "(", "list", "(", "base_config", ".", "items", "(", ")", ")", "+", "list", "(", "config", ".", "items", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mediaeng-lfv_LFV_Disparity_Estimation.modules.convolutional_recurrent.ConvLSTM2D.from_config": [[1012, 1015], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ")", ":", "\n", "    ", "return", "cls", "(", "**", "config", ")", "", "", "", ""]]}