{"home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.__init__": [[9, 28], ["visualization.Visualizer.plt.ioff", "visualization.Visualizer.plt.axis", "visualization.Visualizer.plt.tick_params"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "configuration", ")", ":", "\n", "\n", "        ", "self", ".", "plt", "=", "pyplt", "\n", "self", ".", "plt", ".", "ioff", "(", ")", "\n", "self", ".", "plt", ".", "axis", "(", "'off'", ")", "\n", "self", ".", "plt", ".", "tick_params", "(", "\n", "axis", "=", "'both'", ",", "# changes apply to the x-axis", "\n", "which", "=", "'both'", ",", "# both major and minor ticks are affected", "\n", "bottom", "=", "False", ",", "# 'off',  # ticks along the bottom edge are off", "\n", "top", "=", "False", ",", "# 'off',  # ticks along the top edge are off", "\n", "left", "=", "False", ",", "# 'off',", "\n", "right", "=", "False", ",", "# 'off',", "\n", "labelbottom", "=", "False", ",", "# 'off',", "\n", "labelleft", "=", "False", ")", "# 'off')", "\n", "\n", "self", ".", "visualization_parent_path", "=", "configuration", ".", "VISUALIZATION_PARENT_PATH", "\n", "self", ".", "image_count", "=", "configuration", ".", "SAVE_TEST_SEGMENT_PREDICTION_IMAGE_COUNT", "\n", "self", ".", "initial_segment_index", "=", "configuration", ".", "SAVE_TEST_SEGMENT_PREDICTION_INITIAL_SEGMENT_INDEX", "\n", "self", ".", "hidden_nodes_slices_count", "=", "configuration", ".", "HIDDEN_NODES_SLICES_COUNT", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.save_image": [[29, 62], ["os.path.join", "os.path.join", "sklearn.preprocessing.MinMaxScaler", "visualization.Visualizer.plt.imshow", "visualization.Visualizer.plt.savefig", "os.path.exists", "os.makedirs", "sklearn.preprocessing.MinMaxScaler.fit_transform", "numpy.transpose", "sklearn.preprocessing.MinMaxScaler.fit_transform", "preprocessing.MinMaxScaler.fit_transform.reshape", "scaler.fit_transform.reshape.reshape"], "methods", ["None"], ["", "def", "save_image", "(", "self", ",", "image_matrix", ",", "image_name", ",", "image_path", ",", "colormap", "=", "'gray'", ",", "transpose", "=", "True", ",", "\n", "normalize_per_feature", "=", "True", ",", "interpolate", "=", "False", ")", ":", "\n", "        ", "folder_path", "=", "os", ".", "path", ".", "join", "(", "image_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "", "absolute_path", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "image_name", "+", "'.png'", ")", "\n", "\n", "scaler", "=", "preprocessing", ".", "MinMaxScaler", "(", "copy", "=", "True", ",", "feature_range", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "if", "image_matrix", ".", "ndim", "==", "1", ":", "\n", "            ", "image_matrix", "=", "[", "image_matrix", "]", "\n", "\n", "", "if", "normalize_per_feature", "==", "True", ":", "\n", "            ", "image_matrix", "=", "scaler", ".", "fit_transform", "(", "image_matrix", ")", "# .reshape(image_matrix.shape[0], -1).transpose()", "\n", "", "elif", "normalize_per_feature", "==", "False", ":", "\n", "            ", "scaled_segment", "=", "scaler", ".", "fit_transform", "(", "image_matrix", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "\n", "image_matrix", "=", "scaled_segment", ".", "reshape", "(", "image_matrix", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "", "if", "transpose", "==", "True", ":", "\n", "            ", "image_matrix", "=", "np", ".", "transpose", "(", "image_matrix", ")", "\n", "\n", "", "if", "interpolate", "==", "True", ":", "\n", "            ", "interpolate", "=", "None", "\n", "", "else", ":", "\n", "            ", "interpolate", "=", "'none'", "\n", "\n", "", "self", ".", "plt", ".", "imshow", "(", "image_matrix", ",", "\n", "# vmin=0, vmax=1,", "\n", "interpolation", "=", "interpolate", ",", "\n", "cmap", "=", "colormap", ",", "\n", "aspect", "=", "'equal'", ")", "\n", "self", ".", "plt", ".", "savefig", "(", "absolute_path", ",", "dpi", "=", "300", ",", "\n", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.visualize_model_weights": [[63, 80], ["range", "len", "layer_name.strip", "layer_name.strip.find", "layer_weights.transpose", "numpy.reshape", "visualization.Visualizer.save_image", "model.layers[].get_weights", "weight_chunk.transpose", "str"], "methods", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.save_image"], ["", "def", "visualize_model_weights", "(", "self", ",", "model", ",", "path", ")", ":", "\n", "#HIDDEN_NODES_SLICES_COUNT = 40", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "model", ".", "layers", ")", ")", ":", "\n", "\n", "            ", "layer_name", "=", "model", ".", "layers", "[", "i", "]", ".", "name", "\n", "layer_type", "=", "layer_name", ".", "strip", "(", "'0123456789'", ")", "\n", "if", "layer_type", ".", "find", "(", "\"ooling\"", ")", "==", "0", ":", "\n", "                ", "return", "\n", "\n", "", "if", "layer_type", "in", "[", "'mclnn'", ",", "'clnn'", "]", ":", "\n", "                ", "layer_weights", "=", "model", ".", "layers", "[", "i", "]", ".", "get_weights", "(", ")", "[", "0", "]", "# .W.get_value(borrow=True)", "\n", "weight_transposed", "=", "layer_weights", ".", "transpose", "(", "2", ",", "1", ",", "0", ")", "\n", "weight_chunk", "=", "weight_transposed", "[", "0", ":", "self", ".", "hidden_nodes_slices_count", ",", ":", ",", ":", "]", "\n", "weight_slices", "=", "np", ".", "reshape", "(", "weight_chunk", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", ",", "(", "weight_chunk", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "self", ".", "save_image", "(", "image_matrix", "=", "weight_slices", ",", "image_name", "=", "'weights_'", "+", "layer_type", "+", "'_layer_'", "+", "str", "(", "i", ")", ",", "\n", "image_path", "=", "path", ",", "colormap", "=", "'gray'", ",", "\n", "transpose", "=", "False", ",", "normalize_per_feature", "=", "False", ",", "interpolate", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.visualize_input_segments": [[81, 88], ["range", "len", "visualization.Visualizer.save_image", "str"], "methods", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.save_image"], ["", "", "", "def", "visualize_input_segments", "(", "self", ",", "segments", ",", "path", ",", "initial_segment", ")", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "segments", ")", ")", ":", "\n", "            ", "self", ".", "save_image", "(", "image_matrix", "=", "segments", "[", "i", "]", ",", "\n", "image_name", "=", "'input__segment__'", "+", "str", "(", "initial_segment", "+", "i", ")", ",", "\n", "image_path", "=", "path", ",", "\n", "colormap", "=", "'jet'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.visualize_prediction_segments": [[89, 111], ["range", "len", "layer_name.strip", "layer_name.strip.find", "keras.models.Model", "keras.models.Model.predict", "os.path.join", "range", "len", "visualization.Visualizer.save_image", "model.get_layer", "str", "str"], "methods", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.save_image"], ["", "", "def", "visualize_prediction_segments", "(", "self", ",", "model", ",", "segments", ",", "path", ",", "initial_segment", ",", "epoch_id", "=", "''", ",", "\n", "layer_filter_list", "=", "[", "'prelu'", ",", "'mclnn'", ",", "'clnn'", "]", ",", "first_mclnn_only", "=", "False", ")", ":", "\n", "\n", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "model", ".", "layers", ")", ")", ":", "\n", "\n", "            ", "layer_name", "=", "model", ".", "layers", "[", "i", "]", ".", "name", "\n", "layer_type", "=", "layer_name", ".", "strip", "(", "'0123456789'", ")", "\n", "if", "layer_type", ".", "find", "(", "\"ooling\"", ")", "==", "0", ":", "\n", "                ", "return", "\n", "\n", "", "if", "layer_type", "in", "layer_filter_list", ":", "\n", "                ", "intermediate_model", "=", "Model", "(", "inputs", "=", "model", ".", "input", ",", "\n", "outputs", "=", "model", ".", "get_layer", "(", "layer_name", ")", ".", "output", ")", "\n", "intermediate_prediction", "=", "intermediate_model", ".", "predict", "(", "\n", "segments", ",", "batch_size", "=", "1", ")", "\n", "perdicted_segments_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "layer_name", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "intermediate_prediction", ")", ")", ":", "\n", "                    ", "self", ".", "save_image", "(", "image_matrix", "=", "intermediate_prediction", "[", "j", "]", ",", "image_path", "=", "perdicted_segments_path", ",", "\n", "image_name", "=", "'segment_'", "+", "str", "(", "j", "+", "initial_segment", ")", "+", "'__'", "+", "str", "(", "epoch_id", ")", ")", "\n", "", "if", "first_mclnn_only", "==", "True", ":", "\n", "                    ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.visualize_weights_and_sample_test_clip": [[112, 132], ["visualization.Visualizer.visualize_model_weights", "os.path.join", "visualization.Visualizer.visualize_input_segments", "print", "os.path.join", "visualization.Visualizer.visualize_prediction_segments", "print"], "methods", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.visualize_model_weights", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.visualize_input_segments", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.visualize_prediction_segments"], ["", "", "", "", "def", "visualize_weights_and_sample_test_clip", "(", "self", ",", "model", ",", "data_loader", ")", ":", "\n", "\n", "# weights visualization", "\n", "        ", "self", ".", "visualize_model_weights", "(", "model", "=", "model", ",", "path", "=", "self", ".", "visualization_parent_path", ")", "\n", "\n", "# input segments visualization", "\n", "input_segments_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "visualization_parent_path", ",", "'input_segment'", ")", "\n", "self", ".", "visualize_input_segments", "(", "\n", "segments", "=", "data_loader", ".", "test_segments", "[", "self", ".", "initial_segment_index", ":", "self", ".", "initial_segment_index", "+", "self", ".", "image_count", "]", ",", "\n", "path", "=", "input_segments_path", ",", "initial_segment", "=", "self", ".", "initial_segment_index", ")", "\n", "\n", "print", "(", "\" Input segments visualization succeeded \"", ")", "\n", "# predicted segments visualization", "\n", "predicted_segments_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "visualization_parent_path", ",", "'predicted_segment'", ")", "\n", "self", ".", "visualize_prediction_segments", "(", "model", "=", "model", ",", "\n", "segments", "=", "data_loader", ".", "test_segments", "[", "\n", "self", ".", "initial_segment_index", ":", "self", ".", "initial_segment_index", "+", "self", ".", "image_count", "]", ",", "\n", "path", "=", "predicted_segments_path", ",", "initial_segment", "=", "self", ".", "initial_segment_index", ")", "\n", "\n", "print", "(", "\" Predicted segments visualization succeeded \"", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.layers.MaskedConditional.__init__": [[40, 74], ["keras.initializers.get", "keras.activations.get", "print", "keras.regularizers.get", "keras.regularizers.get", "keras.regularizers.get", "keras.constraints.get", "keras.constraints.get", "keras.engine.Layer.__init__", "keras.engine.InputSpec"], "methods", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.trainingcallbacks.DirectoryHouseKeepingCallback.__init__"], ["def", "__init__", "(", "self", ",", "output_dim", ",", "init", "=", "'glorot_uniform'", ",", "activation", "=", "'linear'", ",", "\n", "weights", "=", "None", ",", "order", "=", "None", ",", "bandwidth", "=", "None", ",", "overlap", "=", "None", ",", "layer_is_masked", "=", "True", ",", "\n", "W_regularizer", "=", "None", ",", "b_regularizer", "=", "None", ",", "activity_regularizer", "=", "None", ",", "\n", "W_constraint", "=", "None", ",", "b_constraint", "=", "None", ",", "\n", "input_dim", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "init", "=", "initializers", ".", "get", "(", "init", ")", "# m", "\n", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "order", "=", "order", "\n", "\n", "print", "(", "'INPUT DIM  '", ",", "self", ".", "input_dim", ",", "'OUTPUT DIM  '", ",", "self", ".", "output_dim", ")", "\n", "\n", "self", ".", "bandwidth", "=", "bandwidth", "\n", "self", ".", "overlap", "=", "overlap", "\n", "self", ".", "layer_is_masked", "=", "layer_is_masked", "\n", "\n", "# --K_START -- Refer to keras documentation for the below.", "\n", "self", ".", "W_regularizer", "=", "regularizers", ".", "get", "(", "W_regularizer", ")", "\n", "self", ".", "b_regularizer", "=", "regularizers", ".", "get", "(", "b_regularizer", ")", "\n", "self", ".", "activity_regularizer", "=", "regularizers", ".", "get", "(", "activity_regularizer", ")", "\n", "\n", "self", ".", "W_constraint", "=", "constraints", ".", "get", "(", "W_constraint", ")", "\n", "self", ".", "b_constraint", "=", "constraints", ".", "get", "(", "b_constraint", ")", "\n", "\n", "self", ".", "initial_weights", "=", "weights", "\n", "# --K_END -- Refer to keras documentation for the above.", "\n", "\n", "self", ".", "input_spec", "=", "[", "InputSpec", "(", "ndim", "=", "3", ")", "]", "\n", "\n", "if", "self", ".", "input_dim", ":", "\n", "            ", "kwargs", "[", "'input_shape'", "]", "=", "(", "self", ".", "input_dim", "[", "0", "]", ",", "self", ".", "input_dim", "[", "1", "]", ",", ")", "\n", "", "super", "(", "MaskedConditional", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.layers.MaskedConditional.construct_mask": [[76, 101], ["numpy.arange", "numpy.arange", "numpy.transpose.astype", "numpy.ones", "numpy.zeros", "numpy.zeros.flatten", "range", "numpy.transpose", "int", "len", "range", "np.zeros.flatten.reshape", "numpy.ceil", "len"], "methods", ["None"], ["", "def", "construct_mask", "(", "self", ",", "feature_count", ",", "hidden_count", ",", "bandwidth", ",", "overlap", ",", "layer_is_masked", ")", ":", "\n", "\n", "        ", "bw", "=", "bandwidth", "\n", "ov", "=", "overlap", "\n", "l", "=", "feature_count", "\n", "e", "=", "hidden_count", "\n", "\n", "a", "=", "np", ".", "arange", "(", "1", ",", "bw", "+", "1", ")", "\n", "g", "=", "np", ".", "arange", "(", "1", ",", "int", "(", "np", ".", "ceil", "(", "(", "l", "*", "e", ")", "/", "(", "l", "+", "bw", "-", "ov", ")", ")", ")", "+", "1", ")", "\n", "\n", "if", "layer_is_masked", "is", "False", ":", "\n", "            ", "binary_mask", "=", "np", ".", "ones", "(", "[", "l", ",", "e", "]", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "zeros", "(", "[", "l", ",", "e", "]", ")", "\n", "flat_matrix", "=", "mask", ".", "flatten", "(", "'F'", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "g", ")", ")", ":", "\n", "                    ", "lx", "=", "a", "[", "i", "]", "+", "(", "g", "[", "j", "]", "-", "1", ")", "*", "(", "l", "+", "bw", "-", "ov", ")", "\n", "if", "lx", "<=", "l", "*", "e", ":", "\n", "                        ", "flat_matrix", "[", "lx", "-", "1", "]", "=", "1", "\n", "\n", "", "", "", "binary_mask", "=", "np", ".", "transpose", "(", "flat_matrix", ".", "reshape", "(", "e", ",", "l", ")", ")", "\n", "\n", "", "return", "binary_mask", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.layers.MaskedConditional.build": [[102, 153], ["print", "layers.MaskedConditional.add_weight", "layers.MaskedConditional.add_weight", "layers.MaskedConditional.construct_mask", "super().build", "len", "keras.engine.InputSpec", "layers.MaskedConditional.W_regularizer.set_param", "layers.MaskedConditional.regularizers.append", "layers.MaskedConditional.b_regularizer.set_param", "layers.MaskedConditional.regularizers.append", "layers.MaskedConditional.activity_regularizer.set_layer", "layers.MaskedConditional.regularizers.append", "layers.MaskedConditional.set_weights", "keras.backend.floatx"], "methods", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.layers.MaskedConditional.construct_mask", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.layers.MaskedConditional.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "len", "(", "input_shape", ")", "==", "3", "\n", "input_dim", "=", "input_shape", "[", "2", "]", "\n", "self", ".", "input_spec", "=", "[", "InputSpec", "(", "dtype", "=", "K", ".", "floatx", "(", ")", ",", "\n", "shape", "=", "(", "None", ",", "input_shape", "[", "1", "]", ",", "input_dim", ")", ")", "]", "\n", "\n", "print", "(", "'self.input_spec : '", ",", "self", ".", "input_spec", ")", "\n", "\n", "# Create a trainable weight variable for this layer.", "\n", "self", ".", "W", "=", "self", ".", "add_weight", "(", "name", "=", "'kernel'", ",", "\n", "shape", "=", "(", "self", ".", "order", "*", "2", "+", "1", ",", "input_dim", ",", "self", ".", "output_dim", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "self", ".", "b", "=", "self", ".", "add_weight", "(", "name", "=", "'bias'", ",", "\n", "shape", "=", "(", "self", ".", "output_dim", ",", ")", ",", "\n", "initializer", "=", "'uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "self", ".", "weightmask", "=", "self", ".", "construct_mask", "(", "feature_count", "=", "input_dim", ",", "\n", "hidden_count", "=", "self", ".", "output_dim", ",", "\n", "bandwidth", "=", "self", ".", "bandwidth", ",", "\n", "overlap", "=", "self", ".", "overlap", ",", "\n", "layer_is_masked", "=", "self", ".", "layer_is_masked", ")", "\n", "\n", "# --K_START -- Refer to keras documentation for the below.", "\n", "self", ".", "regularizers", "=", "[", "]", "\n", "if", "self", ".", "W_regularizer", ":", "\n", "            ", "self", ".", "W_regularizer", ".", "set_param", "(", "self", ".", "W", ")", "\n", "self", ".", "regularizers", ".", "append", "(", "self", ".", "W_regularizer", ")", "\n", "\n", "", "if", "self", ".", "b_regularizer", ":", "\n", "            ", "self", ".", "b_regularizer", ".", "set_param", "(", "self", ".", "b", ")", "\n", "self", ".", "regularizers", ".", "append", "(", "self", ".", "b_regularizer", ")", "\n", "\n", "", "if", "self", ".", "activity_regularizer", ":", "\n", "            ", "self", ".", "activity_regularizer", ".", "set_layer", "(", "self", ")", "\n", "self", ".", "regularizers", ".", "append", "(", "self", ".", "activity_regularizer", ")", "\n", "\n", "", "self", ".", "constraints", "=", "{", "}", "\n", "if", "self", ".", "W_constraint", ":", "\n", "            ", "self", ".", "constraints", "[", "self", ".", "W", "]", "=", "self", ".", "W_constraint", "\n", "", "if", "self", ".", "b_constraint", ":", "\n", "            ", "self", ".", "constraints", "[", "self", ".", "b", "]", "=", "self", ".", "b_constraint", "\n", "\n", "", "if", "self", ".", "initial_weights", "is", "not", "None", ":", "\n", "            ", "self", ".", "set_weights", "(", "self", ".", "initial_weights", ")", "\n", "del", "self", ".", "initial_weights", "\n", "# --K_START -- Refer to keras documentation for the above.", "\n", "\n", "", "super", "(", "MaskedConditional", ",", "self", ")", ".", "build", "(", "[", "self", ".", "order", "*", "2", "+", "1", ",", "input_shape", "]", ")", "# Be sure to call this at the end", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.layers.MaskedConditional.func": [[155, 180], ["tensorflow.name_scope", "tensorflow.convert_to_tensor", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.gather", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.tensordot", "tensorflow.name_scope", "tensorflow.add"], "methods", ["None"], ["", "def", "func", "(", "self", ",", "a", ",", "sequences", ")", ":", "\n", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'mask'", ")", ":", "\n", "            ", "mask", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "weightmask", ",", "dtype", "=", "'float32'", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'concatenated_segments'", ")", ":", "\n", "            ", "samples", "=", "self", ".", "concatenated_segments", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'indices'", ")", ":", "\n", "            ", "indices", "=", "sequences", "[", "1", "]", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'weights'", ")", ":", "\n", "            ", "weights", "=", "sequences", "[", "0", "]", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'frames_sliced'", ")", ":", "\n", "            ", "frames_sliced", "=", "tf", ".", "gather", "(", "samples", ",", "indices", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'masked_weights'", ")", ":", "\n", "            ", "masked_weights", "=", "weights", "*", "mask", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'frames_dot_weights'", ")", ":", "\n", "            ", "frames_dot_weights", "=", "tf", ".", "tensordot", "(", "frames_sliced", ",", "masked_weights", ",", "[", "[", "1", "]", ",", "[", "0", "]", "]", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'accumulate'", ")", ":", "\n", "            ", "accumulate", "=", "tf", ".", "add", "(", "frames_dot_weights", ",", "a", ")", "\n", "", "return", "accumulate", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.layers.MaskedConditional.call": [[181, 246], ["tensorflow.scan", "tensorflow.add", "tensorflow.reshape", "layers.MaskedConditional.activation", "tensorflow.shape", "tensorflow.name_scope", "tensorflow.reshape", "tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.range", "tensorflow.name_scope", "tensorflow.reshape", "tensorflow.name_scope", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.name_scope", "tensorflow.range", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.transpose", "tensorflow.zeros", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "mini_batch", ",", "mask", "=", "None", ")", ":", "\n", "\n", "        ", "segment_count", "=", "tf", ".", "shape", "(", "mini_batch", ")", "[", "0", "]", "\n", "segment_length", "=", "mini_batch", ".", "shape", "[", "1", "]", "\n", "feature_count", "=", "mini_batch", ".", "shape", "[", "2", "]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'Concatenated_Segements'", ")", ":", "\n", "            ", "self", ".", "concatenated_segments", "=", "tf", ".", "reshape", "(", "mini_batch", ",", "[", "segment_count", "*", "segment_length", ",", "feature_count", "]", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'index_preparation'", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'frames_index_in_minibatch'", ")", ":", "\n", "# number of frames after concatenating the minibatch samples", "\n", "                ", "frame_count_per_minibatch", "=", "tf", ".", "shape", "(", "self", ".", "concatenated_segments", ")", "[", "0", "]", "\n", "# index vector for all the frames", "\n", "frames_index_per_minibatch", "=", "tf", ".", "range", "(", "(", "frame_count_per_minibatch", ")", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'remove_twice_order_indices'", ")", ":", "\n", "# reshaping the index vector to minibatch * segment_length", "\n", "                ", "frames_index_per_segment_matrix", "=", "tf", ".", "reshape", "(", "frames_index_per_minibatch", ",", "[", "segment_count", ",", "\n", "segment_length", "]", ")", "\n", "\n", "# remove the columns corresponding to the order from the index matrix", "\n", "# this ensures that n frames will remain when processing the frame at", "\n", "# position [q - (n+1)], where 1 is the window's middle frame", "\n", "frames_index_per_segment_trimmed_matrix", "=", "frames_index_per_segment_matrix", "[", ":", ",", ":", "-", "self", ".", "order", "*", "2", "]", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'trimmed_indices_tiling'", ")", ":", "\n", "# reshaping the index matrix after trimming back to a vector", "\n", "                ", "frames_index_per_minibatch_trimmed_flattened", "=", "tf", ".", "reshape", "(", "frames_index_per_segment_trimmed_matrix", ",", "[", "-", "1", "]", ")", "\n", "\n", "# repeating the flat index a number of times equal to the 2 x order + 1", "\n", "frames_index_per_minibatch_trimmed_flattened", "=", "tf", ".", "expand_dims", "(", "frames_index_per_minibatch_trimmed_flattened", ",", "0", ")", "\n", "frames_index_per_minibatch_trim_flat_tile", "=", "tf", ".", "tile", "(", "frames_index_per_minibatch_trimmed_flattened", ",", "\n", "(", "self", ".", "order", "*", "2", "+", "1", ",", "1", ")", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'window_index'", ")", ":", "\n", "\n", "                ", "trimmed_vector_length", "=", "tf", ".", "shape", "(", "frames_index_per_minibatch_trimmed_flattened", ")", "[", "1", "]", "\n", "order_increments", "=", "tf", ".", "range", "(", "(", "self", ".", "order", "*", "2", "+", "1", ")", ")", "\n", "\n", "order_increments", "=", "tf", ".", "expand_dims", "(", "order_increments", ",", "0", ")", "\n", "order_increments_tile", "=", "tf", ".", "tile", "(", "order_increments", ",", "(", "trimmed_vector_length", ",", "1", ")", ")", "\n", "\n", "order_increments_tile_transpose", "=", "tf", ".", "transpose", "(", "order_increments_tile", ")", "\n", "\n", "# the window_index will have a 2n+1 rows, each row has indices of the frames of the segments", "\n", "window_index", "=", "order_increments_tile_transpose", "+", "frames_index_per_minibatch_trim_flat_tile", "\n", "\n", "\n", "", "", "result", "=", "tf", ".", "scan", "(", "\n", "fn", "=", "self", ".", "func", ",", "\n", "elems", "=", "(", "self", ".", "W", ",", "window_index", ")", ",", "\n", "initializer", "=", "tf", ".", "zeros", "(", "[", "tf", ".", "shape", "(", "window_index", ")", "[", "1", "]", ",", "self", ".", "W", ".", "shape", "[", "2", "]", "]", ",", "dtype", "=", "'float32'", ")", ",", "\n", "parallel_iterations", "=", "1", ",", "\n", "back_prop", "=", "True", ",", "\n", "swap_memory", "=", "False", ",", "\n", "infer_shape", "=", "True", ",", "\n", "reverse", "=", "False", ",", "\n", "name", "=", "'mclnn_scan'", "\n", ")", "\n", "\n", "result", "=", "result", "[", "-", "1", "]", "\n", "result", "=", "tf", ".", "add", "(", "result", ",", "self", ".", "b", ")", "\n", "activation_input", "=", "tf", ".", "reshape", "(", "result", ",", "[", "segment_count", ",", "segment_length", "-", "self", ".", "order", "*", "2", ",", "result", ".", "shape", "[", "1", "]", "]", ")", "\n", "return", "self", ".", "activation", "(", "activation_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.layers.MaskedConditional.compute_output_shape": [[247, 250], ["len"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "assert", "input_shape", "and", "len", "(", "input_shape", ")", "==", "3", "\n", "return", "(", "input_shape", "[", "0", "]", ",", "input_shape", "[", "1", "]", "-", "self", ".", "order", "*", "2", ",", "self", ".", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.load_fold_with_labels": [[26, 64], ["print", "len", "len", "len", "print", "print", "print", "h5py.File", "h5py.File", "range", "len", "sound_cell_array.append", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["def", "load_fold_with_labels", "(", "self", ",", "fold_name", ",", "data_path", ",", "index_path", ")", ":", "\n", "        ", "\"\"\"\n\n        :param fold_name:\n        :param data_path:\n        :param index_path:\n        :return:\n        \"\"\"", "\n", "print", "(", "'Loading '", "+", "fold_name", "+", "' fold ...'", ")", "\n", "with", "h5py", ".", "File", "(", "index_path", ",", "\"r\"", ")", "as", "hdf5_handle", ":", "\n", "            ", "index", "=", "hdf5_handle", "[", "str", "(", "'index'", ")", "]", ".", "value", "\n", "label", "=", "hdf5_handle", "[", "str", "(", "'label'", ")", "]", ".", "value", "\n", "# index = np.asarray([0, 1]) # hdf5_handle[str('index')].value  # hdf5_handle[str('index')].value  #  np.asarray([0, 1]) #", "\n", "# label = np.asarray([0, 1]) # hdf5_handle[str('label')].value  # hdf5_handle[str('label')].value  # np.asarray( [0, 1])", "\n", "\n", "", "sound_cell_array", "=", "[", "]", "\n", "category", "=", "[", "]", "\n", "with", "h5py", ".", "File", "(", "data_path", ",", "'r'", ")", "as", "f", ":", "\n", "# print('List of arrays in this file: \\n', f.keys())", "\n", "            ", "for", "i", "in", "range", "(", "\n", "len", "(", "index", ")", ")", ":", "# range(len(index)):    # range(2): to execlude the category list dataset vector", "\n", "                ", "data", "=", "f", "[", "str", "(", "index", "[", "i", "]", ")", "]", ".", "value", "\n", "sound_cell_array", ".", "append", "(", "data", ")", "\n", "\n", "", "", "samples_count", "=", "len", "(", "sound_cell_array", ")", "\n", "clip_frame_count", "=", "len", "(", "sound_cell_array", "[", "0", "]", ")", "\n", "features_count", "=", "len", "(", "sound_cell_array", "[", "0", "]", "[", "0", "]", ")", "\n", "\n", "print", "(", "fold_name", "+", "' - path =\\''", "+", "data_path", "+", "'\\''", ")", "\n", "print", "(", "fold_name", "+", "' - index path =\\''", "+", "index_path", "+", "'\\''", ")", "\n", "print", "(", "fold_name", "+", "' - samples count =\\''", "+", "str", "(", "samples_count", ")", "\n", "+", "'\\' - clip frame count =\\''", "+", "(", "str", "(", "\n", "clip_frame_count", ")", ")", "# if len(sound_cell_array.shape)> 1 else 'variable length') #str(sound_cell_array.shape[1])", "\n", "+", "'\\' - features count =\\''", "+", "(", "\n", "str", "(", "features_count", ")", ")", "# if len(sound_cell_array.shape)> 1 else str(sound_cell_array[0].shape[1]))", "\n", "+", "'\\' - indices count =\\''", "+", "str", "(", "index", ".", "shape", "[", "0", "]", ")", "\n", "+", "'\\' - labels count =\\''", "+", "str", "(", "label", ".", "shape", "[", "0", "]", ")", "+", "'\\''", ")", "\n", "return", "sound_cell_array", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.retrieve_standardization_parameters": [[65, 107], ["str", "str", "str", "os.path.join", "print", "print", "len", "len", "len", "train_file_name.replace", "os.path.exists", "print", "numpy.mean", "numpy.std", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "print", "numpy.concatenate", "numpy.concatenate", "os.path.exists", "os.makedirs", "str", "str", "h5py.File", "os.path.dirname", "os.path.dirname", "str", "str"], "methods", ["None"], ["", "def", "retrieve_standardization_parameters", "(", "self", ",", "data", ",", "standardization_path", ",", "train_file_name", ")", ":", "\n", "        ", "\"\"\"\n\n        :param data:\n        :return:\n        \"\"\"", "\n", "\n", "samples", "=", "str", "(", "len", "(", "data", ")", ")", "\n", "frames", "=", "str", "(", "len", "(", "data", "[", "0", "]", ")", ")", "\n", "features", "=", "str", "(", "len", "(", "data", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "\n", "standardization_file_path", "=", "os", ".", "path", ".", "join", "(", "standardization_path", ",", "\n", "train_file_name", ".", "replace", "(", "'.hdf5'", ",", "'Parameters.hdf5'", ")", ")", "\n", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "standardization_file_path", ")", ":", "\n", "            ", "print", "(", "'Calculating standardization parameters ...'", ")", "\n", "\n", "mean_vector", "=", "np", ".", "mean", "(", "np", ".", "concatenate", "(", "data", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "std_vector", "=", "np", ".", "std", "(", "np", ".", "concatenate", "(", "data", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "standardization_file_path", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "standardization_file_path", ")", ")", "\n", "\n", "", "hdf5_handle", "=", "h5py", ".", "File", "(", "standardization_file_path", ",", "\"w\"", ")", "\n", "\n", "hdf5_handle", ".", "create_dataset", "(", "str", "(", "'mean_vector'", ")", ",", "data", "=", "mean_vector", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "hdf5_handle", ".", "create_dataset", "(", "str", "(", "'std_vector'", ")", ",", "data", "=", "std_vector", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Loading standardization parameters ...'", ")", "\n", "with", "h5py", ".", "File", "(", "standardization_file_path", ",", "\"r\"", ")", "as", "hdf5_handle", ":", "\n", "                ", "mean_vector", "=", "hdf5_handle", "[", "str", "(", "'mean_vector'", ")", "]", ".", "value", "\n", "std_vector", "=", "hdf5_handle", "[", "str", "(", "'std_vector'", ")", "]", ".", "value", "\n", "\n", "", "", "print", "(", "standardization_file_path", ")", "\n", "print", "(", "\n", "'Train data size in 3D [samples, frames, feature vector] = ('", "+", "samples", "+", "', '", "+", "frames", "+", "', '", "+", "features", "+", "')'", ")", "\n", "\n", "return", "mean_vector", ",", "std_vector", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.standardize_data": [[108, 120], ["len", "range"], "methods", ["None"], ["", "def", "standardize_data", "(", "self", ",", "data", ",", "mean_vector", ",", "std_vector", ")", ":", "\n", "        ", "\"\"\"\n\n        :param data:\n        :param mean_vector:\n        :param std_vector:\n        :return:\n        \"\"\"", "\n", "sample_count", "=", "len", "(", "data", ")", "\n", "for", "i", "in", "range", "(", "sample_count", ")", ":", "\n", "            ", "data", "[", "i", "]", "=", "(", "data", "[", "i", "]", "-", "mean_vector", ")", "/", "std_vector", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.segment_fold": [[121, 150], ["len", "range", "numpy.asarray", "numpy.asarray", "print", "range", "numpy.asarray.append", "numpy.asarray.append", "numpy.asarray", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "segment_fold", "(", "self", ",", "fold_name", ",", "data", ",", "label", ",", "segment_size", ",", "step_size", ")", ":", "\n", "        ", "\"\"\"\n\n        :param fold_name:\n        :param data:\n        :param label:\n        :param segment_size:\n        :param step_size:\n        :return:\n        \"\"\"", "\n", "\n", "data_segments", "=", "[", "]", "\n", "segments_labels", "=", "[", "]", "\n", "\n", "sample_count", "=", "len", "(", "data", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "sample_count", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "0", ",", "data", "[", "i", "]", ".", "shape", "[", "0", "]", "-", "segment_size", ",", "step_size", ")", ":", "\n", "                ", "data_segments", ".", "append", "(", "data", "[", "i", "]", "[", "j", ":", "(", "j", "+", "segment_size", "+", "1", ")", ",", ":", "]", ")", "\n", "segments_labels", ".", "append", "(", "np", ".", "asarray", "(", "label", "[", "i", "]", ")", ")", "\n", "\n", "", "", "data_segments", "=", "np", ".", "asarray", "(", "data_segments", ")", "\n", "segments_labels", "=", "np", ".", "asarray", "(", "segments_labels", ")", "\n", "\n", "print", "(", "fold_name", "+", "'- samples '", "+", "str", "(", "sample_count", ")", "+", "' - segments '", "+", "str", "(", "\n", "data_segments", ".", "shape", "[", "0", "]", ")", "+", "' - Step Size is: '", "+", "\n", "str", "(", "step_size", ")", "+", "'  i.e. Segments overlap with q-'", "+", "\n", "str", "(", "step_size", ")", "+", "' frames'", ")", "\n", "\n", "return", "data_segments", ",", "segments_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.segment_clip": [[151, 166], ["range", "data_segments.append", "segments_labels.append", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "segment_clip", "(", "self", ",", "data", ",", "label", ",", "segment_size", ",", "step_size", ")", ":", "\n", "        ", "\"\"\"\n\n        :param data:\n        :param label:\n        :param segment_size:\n        :param step_size:\n        :return:\n        \"\"\"", "\n", "data_segments", "=", "[", "]", "\n", "segments_labels", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "0", ",", "data", ".", "shape", "[", "0", "]", "-", "segment_size", ",", "step_size", ")", ":", "\n", "            ", "data_segments", ".", "append", "(", "data", "[", "j", ":", "(", "j", "+", "segment_size", "+", "1", ")", ",", ":", "]", ")", "\n", "segments_labels", ".", "append", "(", "label", ")", "\n", "", "return", "np", ".", "asarray", "(", "data_segments", ")", ",", "np", ".", "asarray", "(", "segments_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.load_data": [[167, 219], ["print", "datapreprocessor.DataLoader.load_fold_with_labels", "datapreprocessor.DataLoader.load_fold_with_labels", "datapreprocessor.DataLoader.load_fold_with_labels", "print", "datapreprocessor.DataLoader.retrieve_standardization_parameters", "datapreprocessor.DataLoader.standardize_data", "datapreprocessor.DataLoader.standardize_data", "datapreprocessor.DataLoader.standardize_data", "print", "datapreprocessor.DataLoader.segment_fold", "datapreprocessor.DataLoader.segment_fold", "datapreprocessor.DataLoader.segment_fold", "numpy.random.permutation", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "keras.utils.np_utils.to_categorical", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.load_fold_with_labels", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.load_fold_with_labels", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.load_fold_with_labels", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.retrieve_standardization_parameters", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.standardize_data", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.standardize_data", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.standardize_data", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.segment_fold", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.segment_fold", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.segment_fold"], ["", "def", "load_data", "(", "self", ",", "segment_size", ",", "step_size", ",", "nb_classes", ",", "data_path", ",", "standardization_path", ",", "train_index_path", ",", "\n", "test_index_path", ",", "\n", "validation_index_path", ")", ":", "\n", "        ", "\"\"\"\n\n        :param segment_size: segment q length excluding the middle frame\n        :param step_size: non-overlapping frames between consecutive segments\n        :param nb_classes: number of classes\n        :param data_path: dataset hdf5 file path\n        :param train_index_path: train index hdf5 file path\n        :param test_index_path: test index hdf5 file path\n        :param validation_index_path: validation index hdf5 file path\n        :param standardization_paramters_path: standardization parameters hdf5 file path\n        :return:\n        \"\"\"", "\n", "\n", "# loading training/validation/test folds", "\n", "print", "(", "'--------------------------------- Loading folds ------------------------------------------------'", ")", "\n", "training_clips", ",", "train_clips_label", "=", "self", ".", "load_fold_with_labels", "(", "'train'", ",", "data_path", ",", "train_index_path", ")", "\n", "self", ".", "test_clips", ",", "self", ".", "test_clips_labels", "=", "self", ".", "load_fold_with_labels", "(", "'test'", ",", "data_path", ",", "test_index_path", ")", "\n", "validation_clips", ",", "validation_clips_label", "=", "self", ".", "load_fold_with_labels", "(", "'validation'", ",", "data_path", ",", "\n", "validation_index_path", ")", "\n", "\n", "# standardization", "\n", "print", "(", "'-------------------------------- Standardization -----------------------------------------------'", ")", "\n", "mean_vector", ",", "std_vector", "=", "self", ".", "retrieve_standardization_parameters", "(", "training_clips", ",", "standardization_path", ",", "\n", "os", ".", "path", ".", "basename", "(", "train_index_path", ")", ")", "\n", "training_clips", "=", "self", ".", "standardize_data", "(", "training_clips", ",", "mean_vector", ",", "std_vector", ")", "\n", "self", ".", "test_clips", "=", "self", ".", "standardize_data", "(", "self", ".", "test_clips", ",", "mean_vector", ",", "std_vector", ")", "\n", "validation_clips", "=", "self", ".", "standardize_data", "(", "validation_clips", ",", "mean_vector", ",", "std_vector", ")", "\n", "\n", "# segmentation", "\n", "print", "(", "'--------------------------- Segments ( q ) Extraction -----------------------------------------'", ")", "\n", "self", ".", "train_segments", ",", "self", ".", "train_labels", "=", "self", ".", "segment_fold", "(", "'train'", ",", "training_clips", ",", "train_clips_label", ",", "\n", "segment_size", ",", "\n", "step_size", ")", "\n", "self", ".", "test_segments", ",", "self", ".", "test_labels", "=", "self", ".", "segment_fold", "(", "'test'", ",", "self", ".", "test_clips", ",", "self", ".", "test_clips_labels", ",", "\n", "segment_size", ",", "\n", "step_size", ")", "\n", "self", ".", "validation_segments", ",", "self", ".", "validation_labels", "=", "self", ".", "segment_fold", "(", "'validation'", ",", "validation_clips", ",", "\n", "validation_clips_label", ",", "\n", "segment_size", ",", "step_size", ")", "\n", "\n", "# shuffle training data and its labels", "\n", "train_rand_index", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "train_labels", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "train_segments", "=", "self", ".", "train_segments", "[", "train_rand_index", ",", ":", ",", ":", "]", "\n", "self", ".", "train_labels", "=", "self", ".", "train_labels", "[", "train_rand_index", "]", "\n", "\n", "# convert class vectors to binary class matrices", "\n", "self", ".", "train_one_hot_target", "=", "np_utils", ".", "to_categorical", "(", "self", ".", "train_labels", ",", "nb_classes", ")", "\n", "self", ".", "test_one_hot_target", "=", "np_utils", ".", "to_categorical", "(", "self", ".", "test_labels", ",", "nb_classes", ")", "\n", "self", ".", "validation_one_hot_target", "=", "np_utils", ".", "to_categorical", "(", "self", ".", "validation_labels", ",", "nb_classes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.trainingcallbacks.SegmentPlotCallback.__init__": [[30, 51], ["visualization.Visualizer", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "configuration", ",", "data_loader", ")", ":", "\n", "        ", "self", ".", "configuration", "=", "configuration", "\n", "self", ".", "visualization_parent_path", "=", "configuration", ".", "VISUALIZATION_PARENT_PATH", "\n", "self", ".", "visualizer", "=", "Visualizer", "(", "configuration", ")", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "\n", "self", ".", "train_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "visualization_parent_path", ",", "'train_sample_across_epochs'", ")", "\n", "self", ".", "test_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "visualization_parent_path", ",", "'test_sample_across_epochs'", ")", "\n", "self", ".", "validation_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "visualization_parent_path", ",", "'validation_sample_across_epochs'", ")", "\n", "\n", "# change the following numbers to choose other segments for visualization", "\n", "self", ".", "train_segment_index", "=", "configuration", ".", "TRAIN_SEGMENT_INDEX", "\n", "self", ".", "test_segment_index", "=", "configuration", ".", "TEST_SEGMENT_INDEX", "\n", "self", ".", "validation_segment_index", "=", "configuration", ".", "VALIDATION_SEGMENT_INDEX", "\n", "#", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "train_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "train_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "test_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "test_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "validation_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "validation_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.trainingcallbacks.SegmentPlotCallback.on_epoch_end": [[52, 78], ["trainingcallbacks.SegmentPlotCallback.visualizer.visualize_prediction_segments", "trainingcallbacks.SegmentPlotCallback.visualizer.visualize_prediction_segments", "trainingcallbacks.SegmentPlotCallback.visualizer.visualize_prediction_segments", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.visualize_prediction_segments", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.visualize_prediction_segments", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.visualize_prediction_segments"], ["", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "visualizer", ".", "visualize_prediction_segments", "(", "self", ".", "model", ",", "\n", "np", ".", "expand_dims", "(", "\n", "self", ".", "data_loader", ".", "train_segments", "[", "self", ".", "train_segment_index", "]", ",", "0", ")", ",", "\n", "path", "=", "self", ".", "train_path", ",", "\n", "initial_segment", "=", "self", ".", "train_segment_index", ",", "\n", "epoch_id", "=", "'epoch_'", "+", "str", "(", "epoch", ")", ",", "\n", "layer_filter_list", "=", "[", "'mclnn'", "]", ",", "first_mclnn_only", "=", "True", ")", "\n", "\n", "self", ".", "visualizer", ".", "visualize_prediction_segments", "(", "self", ".", "model", ",", "\n", "np", ".", "expand_dims", "(", "\n", "self", ".", "data_loader", ".", "test_segments", "[", "self", ".", "test_segment_index", "]", ",", "0", ")", ",", "\n", "path", "=", "self", ".", "test_path", ",", "\n", "initial_segment", "=", "self", ".", "test_segment_index", ",", "\n", "epoch_id", "=", "'epoch_'", "+", "str", "(", "epoch", ")", ",", "\n", "layer_filter_list", "=", "[", "'mclnn'", "]", ",", "first_mclnn_only", "=", "True", ")", "\n", "\n", "self", ".", "visualizer", ".", "visualize_prediction_segments", "(", "self", ".", "model", ",", "\n", "np", ".", "expand_dims", "(", "self", ".", "data_loader", ".", "validation_segments", "[", "\n", "self", ".", "validation_segment_index", "]", ",", "0", ")", ",", "\n", "path", "=", "self", ".", "validation_path", ",", "\n", "initial_segment", "=", "self", ".", "validation_segment_index", ",", "\n", "epoch_id", "=", "'epoch_'", "+", "str", "(", "epoch", ")", ",", "\n", "layer_filter_list", "=", "[", "'mclnn'", "]", ",", "first_mclnn_only", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.trainingcallbacks.DirectoryHouseKeepingCallback.__init__": [[81, 83], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "self", ".", "learnedweightpath", "=", "filepath", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.trainingcallbacks.DirectoryHouseKeepingCallback.on_epoch_end": [[84, 89], ["glob.glob", "glob.glob", "glob.glob", "glob.glob", "glob.glob.sort", "glob.glob.sort", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "os.remove", "os.remove", "os.remove", "os.remove"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "weightList", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "learnedweightpath", ",", "\"*.hdf5\"", ")", ")", "\n", "weightList", ".", "sort", "(", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "if", "len", "(", "weightList", ")", ">", "60", ":", "\n", "            ", "os", ".", "remove", "(", "weightList", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.trainingcallbacks.prepare_callbacks": [[91, 122], ["keras.callbacks.EarlyStopping", "callback_list.append", "keras.callbacks.ModelCheckpoint", "callback_list.append", "trainingcallbacks.DirectoryHouseKeepingCallback", "callback_list.append", "os.path.join", "os.path.join", "trainingcallbacks.SegmentPlotCallback", "callback_list.append"], "function", ["None"], ["", "", "", "def", "prepare_callbacks", "(", "configuration", ",", "fold_weights_path", ",", "data_loader", ")", ":", "\n", "    ", "callback_list", "=", "[", "]", "\n", "\n", "# remote_callback = callbacks.RemoteMonitor(root='http://localhost:9000')", "\n", "# callback_list.append(remote_callback)", "\n", "\n", "# early stopping", "\n", "early_stopping_callback", "=", "callbacks", ".", "EarlyStopping", "(", "monitor", "=", "configuration", ".", "STOPPING_CRITERION", ",", "\n", "patience", "=", "configuration", ".", "WAIT_COUNT", ",", "\n", "verbose", "=", "0", ",", "\n", "mode", "=", "'auto'", ")", "\n", "callback_list", ".", "append", "(", "early_stopping_callback", ")", "\n", "\n", "# save weights at the end of epoch", "\n", "weights_file_name_format", "=", "'weights.epoch{epoch:02d}-val_loss{val_loss:.2f}-val_acc{val_acc:.4f}.hdf5'", "\n", "checkpoint_callback", "=", "ModelCheckpoint", "(", "os", ".", "path", ".", "join", "(", "fold_weights_path", ",", "weights_file_name_format", ")", ",", "\n", "monitor", "=", "'val_loss'", ",", "verbose", "=", "0", ",", "\n", "save_best_only", "=", "False", ",", "mode", "=", "'auto'", ")", "\n", "callback_list", ".", "append", "(", "checkpoint_callback", ")", "\n", "\n", "# free space of stored weights of early epochs", "\n", "directory_house_keeping_callback", "=", "DirectoryHouseKeepingCallback", "(", "fold_weights_path", ")", "\n", "callback_list", ".", "append", "(", "directory_house_keeping_callback", ")", "\n", "\n", "# call for visualization if it is enabled", "\n", "if", "configuration", ".", "SAVE_SEGMENT_PREDICTION_IMAGE_PER_EPOCH", "==", "True", ":", "\n", "        ", "segment_plot_callback", "=", "SegmentPlotCallback", "(", "configuration", "=", "configuration", ",", "\n", "data_loader", "=", "data_loader", ")", "\n", "callback_list", ".", "append", "(", "segment_plot_callback", ")", "\n", "\n", "", "return", "callback_list", "\n", "", ""]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.MCLNN_MAIN.MCLNNTrainer.build_model": [[63, 155], ["keras.models.Sequential", "keras.models.Sequential", "range", "keras.models.Sequential.add", "keras.models.Sequential.add", "range", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.optimizers.Adam", "keras.optimizers.Adam", "keras.models.Sequential.compile", "keras.models.Sequential.compile", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter.add_graph", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.layers.GlobalAveragePooling1D", "keras.layers.GlobalAveragePooling1D", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "keras.models.Sequential.add", "print", "keras.layers.Dropout", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Activation", "keras.layers.Activation", "keras.models.Sequential.summary", "keras.models.Sequential.summary", "keras.models.Sequential.load_weights", "keras.models.Sequential.load_weights", "tensorflow.get_default_graph", "tensorflow.get_default_graph", "print", "keras.layers.Dropout", "keras.layers.Dropout", "layers.MaskedConditional", "keras.layers.advanced_activations.PReLU", "keras.layers.advanced_activations.PReLU", "print", "keras.layers.Dropout", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.advanced_activations.PReLU", "keras.layers.advanced_activations.PReLU", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["None"], ["    ", "def", "build_model", "(", "self", ",", "segment_size", ",", "feature_count", ",", "pretrained_weights_path", "=", "None", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "'''\n\n        :param segment_size:\n        :param feature_count:\n        :param pretrained_weights_path:\n        :param verbose:\n        :return:\n        '''", "\n", "\n", "model", "=", "Sequential", "(", ")", "\n", "\n", "layer_index", "=", "0", "\n", "\n", "for", "layer_index", "in", "range", "(", "Config", ".", "MCLNN_LAYER_COUNT", ")", ":", "\n", "\n", "            ", "if", "verbose", "==", "True", ":", "\n", "                ", "print", "(", "'Layer'", "+", "str", "(", "layer_index", ")", "+", "\n", "' - Type = '", "+", "(", "'mclnn'", "if", "Config", ".", "LAYER_IS_MASKED", "[", "layer_index", "]", "else", "'clnn '", ")", "+", "\n", "' - Dropout = '", "+", "str", "(", "Config", ".", "DROPOUT", "[", "layer_index", "]", ")", "+", "\n", "', Initialization = '", "+", "str", "(", "Config", ".", "WEIGHT_INITIALIZATION", "[", "layer_index", "]", ")", "+", "\n", "', Order = '", "+", "str", "(", "Config", ".", "LAYERS_ORDER_LIST", "[", "layer_index", "]", ")", "+", "\n", "', Bandwidth = '", "+", "str", "(", "Config", ".", "MASK_BANDWIDTH", "[", "layer_index", "]", ")", "+", "\n", "', Overlap = '", "+", "str", "(", "Config", ".", "MASK_OVERLAP", "[", "layer_index", "]", ")", "+", "\n", "', Hidden nodes = '", "+", "str", "(", "Config", ".", "HIDDEN_NODES_LIST", "[", "layer_index", "]", ")", ")", "\n", "\n", "", "model", ".", "add", "(", "Dropout", "(", "Config", ".", "DROPOUT", "[", "layer_index", "]", ",", "\n", "input_shape", "=", "(", "segment_size", ",", "feature_count", ")", ",", "\n", "name", "=", "'dropout'", "+", "str", "(", "layer_index", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "MaskedConditional", "(", "init", "=", "Config", ".", "WEIGHT_INITIALIZATION", "[", "layer_index", "]", ",", "\n", "# input_dim=(segment_size, feature_count ),", "\n", "output_dim", "=", "Config", ".", "HIDDEN_NODES_LIST", "[", "layer_index", "]", ",", "\n", "order", "=", "Config", ".", "LAYERS_ORDER_LIST", "[", "layer_index", "]", ",", "\n", "bandwidth", "=", "Config", ".", "MASK_BANDWIDTH", "[", "layer_index", "]", ",", "\n", "overlap", "=", "Config", ".", "MASK_OVERLAP", "[", "layer_index", "]", ",", "\n", "layer_is_masked", "=", "Config", ".", "LAYER_IS_MASKED", "[", "layer_index", "]", ",", "\n", "name", "=", "(", "'mclnn'", "if", "Config", ".", "LAYER_IS_MASKED", "[", "layer_index", "]", "else", "'clnn'", ")", "+", "str", "(", "\n", "layer_index", ")", ")", ")", "\n", "model", ".", "add", "(", "PReLU", "(", "name", "=", "'prelu'", "+", "str", "(", "layer_index", ")", ")", ")", "\n", "\n", "# End of for loop", "\n", "\n", "", "model", ".", "add", "(", "GlobalAveragePooling1D", "(", "data_format", "=", "'channels_last'", ",", "name", "=", "'globalpool'", "+", "str", "(", "layer_index", ")", ")", ")", "\n", "\n", "# --------- Dense LAYER -----------------", "\n", "layer_index", "+=", "1", "\n", "for", "layer_index", "in", "range", "(", "layer_index", ",", "layer_index", "+", "Config", ".", "DENSE_LAYER_COUNT", ")", ":", "\n", "            ", "if", "verbose", "==", "True", ":", "\n", "                ", "print", "(", "'Layer'", "+", "str", "(", "layer_index", ")", "+", "\n", "' - Type = dense'", "+", "\n", "' - Dropout = '", "+", "str", "(", "Config", ".", "DROPOUT", "[", "layer_index", "]", ")", "+", "\n", "', Initialization = '", "+", "str", "(", "Config", ".", "WEIGHT_INITIALIZATION", "[", "layer_index", "]", ")", "+", "\n", "', Hidden nodes = '", "+", "str", "(", "Config", ".", "HIDDEN_NODES_LIST", "[", "layer_index", "]", ")", ")", "\n", "", "model", ".", "add", "(", "Dropout", "(", "Config", ".", "DROPOUT", "[", "layer_index", "]", ",", "name", "=", "'dropout'", "+", "str", "(", "layer_index", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Dense", "(", "kernel_initializer", "=", "Config", ".", "WEIGHT_INITIALIZATION", "[", "layer_index", "]", ",", "\n", "units", "=", "Config", ".", "HIDDEN_NODES_LIST", "[", "layer_index", "]", ",", "\n", "name", "=", "'dense'", "+", "str", "(", "layer_index", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "PReLU", "(", "name", "=", "'prelu'", "+", "str", "(", "layer_index", ")", ")", ")", "\n", "\n", "# --------- Output LAYER -----------------", "\n", "", "layer_index", "+=", "1", "\n", "if", "verbose", "==", "True", ":", "\n", "            ", "print", "(", "'Layer'", "+", "str", "(", "layer_index", ")", "+", "\n", "' - Type = softmax'", "+", "\n", "' - Dropout = '", "+", "str", "(", "Config", ".", "DROPOUT", "[", "layer_index", "]", ")", "+", "\n", "', Initialization = '", "+", "str", "(", "Config", ".", "WEIGHT_INITIALIZATION", "[", "layer_index", "]", ")", "+", "\n", "', Hidden nodes = '", "+", "str", "(", "Config", ".", "HIDDEN_NODES_LIST", "[", "layer_index", "]", ")", ")", "\n", "", "model", ".", "add", "(", "Dropout", "(", "Config", ".", "DROPOUT", "[", "layer_index", "]", ",", "name", "=", "'dropout'", "+", "str", "(", "layer_index", ")", ")", ")", "\n", "\n", "\n", "model", ".", "add", "(", "Dense", "(", "kernel_initializer", "=", "Config", ".", "WEIGHT_INITIALIZATION", "[", "layer_index", "]", ",", "\n", "units", "=", "Config", ".", "HIDDEN_NODES_LIST", "[", "layer_index", "]", ",", "\n", "name", "=", "'dense'", "+", "str", "(", "layer_index", ")", ")", ")", "\n", "\n", "model", ".", "add", "(", "Activation", "(", "'softmax'", ",", "name", "=", "'softmax'", "+", "str", "(", "layer_index", ")", ")", ")", "\n", "\n", "if", "verbose", "==", "True", ":", "\n", "            ", "model", ".", "summary", "(", ")", "\n", "", "adam", "=", "Adam", "(", "lr", "=", "Config", ".", "LEARNING_RATE", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-08", ")", "\n", "\n", "model", ".", "compile", "(", "loss", "=", "'categorical_crossentropy'", ",", "optimizer", "=", "adam", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "if", "pretrained_weights_path", "!=", "None", ":", "\n", "            ", "model", ".", "load_weights", "(", "pretrained_weights_path", ")", "\n", "\n", "", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "Config", ".", "TENSOR_BOARD_MODEL_PATH", ")", "\n", "writer", ".", "add_graph", "(", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.MCLNN_MAIN.MCLNNTrainer.train_model": [[156, 182], ["print", "trainingcallbacks.prepare_callbacks", "datetime.datetime.now", "print", "model.fit", "datetime.datetime.now", "print", "print", "print", "str"], "methods", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.trainingcallbacks.prepare_callbacks"], ["", "def", "train_model", "(", "self", ",", "model", ",", "data_loader", ",", "fold_weights_path", ")", ":", "\n", "        ", "'''\n        Train a model\n        :param model:\n        :param data_loader:\n        :param fold_weights_path:\n        :return:\n        '''", "\n", "\n", "print", "(", "'----------- Early stopping wait count --------------- : '", ",", "str", "(", "Config", ".", "WAIT_COUNT", ")", ")", "\n", "\n", "callback_list", "=", "trainingcallbacks", ".", "prepare_callbacks", "(", "configuration", "=", "Config", ",", "fold_weights_path", "=", "fold_weights_path", ",", "\n", "data_loader", "=", "data_loader", ")", "\n", "\n", "before", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "before", ")", "\n", "history", "=", "model", ".", "fit", "(", "data_loader", ".", "train_segments", ",", "data_loader", ".", "train_one_hot_target", ",", "\n", "batch_size", "=", "Config", ".", "BATCH_SIZE", ",", "epochs", "=", "Config", ".", "NB_EPOCH", ",", "\n", "verbose", "=", "1", ",", "\n", "validation_data", "=", "(", "data_loader", ".", "validation_segments", ",", "data_loader", ".", "validation_one_hot_target", ")", ",", "\n", "callbacks", "=", "callback_list", ")", "\n", "\n", "after", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "print", "(", "after", ")", "\n", "print", "(", "'It took:'", ")", "\n", "print", "(", "after", "-", "before", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.MCLNN_MAIN.MCLNNTrainer.evaluate_model": [[183, 249], ["print", "model.evaluate", "print", "print", "print", "model.evaluate", "print", "print", "model.predict_classes", "sklearn.metrics.confusion_matrix", "print", "print", "print", "enumerate", "sklearn.metrics.confusion_matrix", "print", "print", "print", "print", "print", "sklearn.metrics.confusion_matrix", "print", "print", "print", "sklearn.metrics.f1_score", "print", "sklearn.metrics.f1_score", "print", "data_loader.segment_clip", "model.predict_classes", "numpy.bincount", "clip_predicted_majority_vote.append", "clip_predicted_probability_mean_vote.append", "str", "str", "str", "numpy.argmax", "numpy.argmax", "str", "str", "str", "str", "sklearn.metrics.accuracy_score", "numpy.mean", "sklearn.metrics.accuracy_score", "sklearn.metrics.accuracy_score", "str", "str", "model.predict", "numpy.squeeze", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.segment_clip"], ["", "def", "evaluate_model", "(", "self", ",", "segment_size", ",", "model", ",", "data_loader", ")", ":", "\n", "        ", "'''\n\n        :param segment_size:\n        :param model:\n        :param data_loader:\n        :return:\n        '''", "\n", "\n", "# ________________ Frame level evaluation for Test/Validation splits ________________________", "\n", "print", "(", "'Validation segments = '", "+", "str", "(", "data_loader", ".", "validation_segments", ".", "shape", ")", "+", "\n", "' one-hot encoded target'", "+", "str", "(", "data_loader", ".", "validation_one_hot_target", ".", "shape", ")", ")", "\n", "score", "=", "model", ".", "evaluate", "(", "data_loader", ".", "validation_segments", ",", "data_loader", ".", "validation_one_hot_target", ",", "verbose", "=", "0", ")", "\n", "print", "(", "'Validation score:'", ",", "score", "[", "0", "]", ")", "\n", "print", "(", "'Validation accuracy:'", ",", "score", "[", "1", "]", ")", "\n", "\n", "print", "(", "'Test segments = '", "+", "str", "(", "data_loader", ".", "test_segments", ".", "shape", ")", "+", "\n", "' one-hot encoded target'", "+", "str", "(", "data_loader", ".", "test_one_hot_target", ".", "shape", ")", ")", "\n", "score", "=", "model", ".", "evaluate", "(", "data_loader", ".", "test_segments", ",", "data_loader", ".", "test_one_hot_target", ",", "verbose", "=", "0", ")", "\n", "print", "(", "'Test score:'", ",", "score", "[", "0", "]", ")", "\n", "print", "(", "'Test accuracy:'", ",", "score", "[", "1", "]", ")", "\n", "\n", "# ___________________ predict frame-level classes ___________________________________", "\n", "test_predicted_labels", "=", "model", ".", "predict_classes", "(", "data_loader", ".", "test_segments", ")", "\n", "test_target_labels", "=", "data_loader", ".", "test_labels", "\n", "\n", "cm_frames", "=", "confusion_matrix", "(", "test_target_labels", ",", "test_predicted_labels", ")", "\n", "print", "(", "'Confusion matrix, frame level'", ")", "\n", "print", "(", "cm_frames", ")", "\n", "print", "(", "'Frame level accuracy :'", "+", "str", "(", "accuracy_score", "(", "test_target_labels", ",", "test_predicted_labels", ")", ")", ")", "\n", "\n", "# -------------- Voting ------------------------", "\n", "clip_predicted_probability_mean_vote", "=", "[", "]", "\n", "clip_predicted_majority_vote", "=", "[", "]", "\n", "for", "i", ",", "clip", "in", "enumerate", "(", "data_loader", ".", "test_clips", ")", ":", "\n", "            ", "segments", ",", "segments_target_labels", "=", "data_loader", ".", "segment_clip", "(", "data", "=", "clip", ",", "\n", "label", "=", "data_loader", ".", "test_clips_labels", "[", "i", "]", ",", "\n", "segment_size", "=", "segment_size", ",", "\n", "step_size", "=", "Config", ".", "STEP_SIZE", ")", "\n", "test_predicted_labels", "=", "model", ".", "predict_classes", "(", "segments", ")", "\n", "labels_histogram", "=", "np", ".", "bincount", "(", "test_predicted_labels", ")", "\n", "clip_predicted_majority_vote", ".", "append", "(", "np", ".", "argmax", "(", "labels_histogram", ")", ")", "\n", "clip_predicted_probability_mean_vote", ".", "append", "(", "np", ".", "argmax", "(", "np", ".", "mean", "(", "model", ".", "predict", "(", "segments", ")", ",", "axis", "=", "0", ")", ")", ")", "\n", "\n", "", "cm_majority", "=", "confusion_matrix", "(", "data_loader", ".", "test_clips_labels", ",", "clip_predicted_majority_vote", ")", "\n", "print", "(", "'Fold Confusion matrix - Majority voting - Clip level :'", ")", "\n", "print", "(", "Config", ".", "CLASS_NAMES", ")", "\n", "print", "(", "cm_majority", ")", "\n", "print", "(", "'Clip-level majority-vote Accuracy '", "+", "str", "(", "accuracy_score", "(", "\n", "data_loader", ".", "test_clips_labels", ",", "clip_predicted_majority_vote", ")", ")", ")", "\n", "\n", "print", "(", "'Fold Confusion matrix - Probability MEAN voting - Clip level :'", ")", "\n", "cm_probability", "=", "confusion_matrix", "(", "data_loader", ".", "test_clips_labels", ",", "clip_predicted_probability_mean_vote", ")", "\n", "print", "(", "Config", ".", "CLASS_NAMES", ")", "\n", "print", "(", "cm_probability", ")", "\n", "print", "(", "'Clip-level probability-vote Accuracy '", "+", "str", "(", "\n", "accuracy_score", "(", "\n", "np", ".", "squeeze", "(", "data_loader", ".", "test_clips_labels", ")", ",", "np", ".", "asarray", "(", "clip_predicted_probability_mean_vote", ")", ")", ")", ")", "\n", "\n", "scoref1", "=", "f1score", "(", "data_loader", ".", "test_clips_labels", ",", "clip_predicted_probability_mean_vote", ",", "average", "=", "'micro'", ")", "\n", "print", "(", "'F1 Score micro '", "+", "str", "(", "scoref1", ")", ")", "\n", "\n", "scoref1", "=", "f1score", "(", "data_loader", ".", "test_clips_labels", ",", "clip_predicted_probability_mean_vote", ",", "average", "=", "'weighted'", ")", "\n", "print", "(", "'F1 Score weighted '", "+", "str", "(", "scoref1", ")", ")", "\n", "\n", "return", "cm_majority", ",", "cm_probability", ",", "clip_predicted_majority_vote", ",", "clip_predicted_probability_mean_vote", ",", "data_loader", ".", "test_clips_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.MCLNN_MAIN.run": [[251, 402], ["numpy.asarray", "numpy.zeros", "numpy.asarray", "numpy.zeros", "numpy.asarray", "print", "glob.glob", "glob.glob.sort", "numpy.arange", "range", "print", "print", "print", "print", "print", "print", "print", "sklearn.metrics.f1_score", "print", "sklearn.metrics.f1_score", "print", "os.path.join", "len", "print", "len", "numpy.random.seed", "datapreprocessor.DataLoader", "MCLNN_MAIN.MCLNNTrainer", "datapreprocessor.DataLoader.load_data", "os.path.join", "print", "print", "glob.glob", "glob.glob.sort", "print", "print", "MCLNN_MAIN.MCLNNTrainer.build_model", "MCLNN_MAIN.MCLNNTrainer.evaluate_model", "numpy.append", "numpy.append", "numpy.append", "gc.collect", "sum", "str", "folds_index_file_list[].lower().endswith", "folds_index_file_list[].lower().endswith", "folds_index_file_list[].lower().endswith", "print", "exit", "os.path.basename().split", "str", "os.path.exists", "MCLNN_MAIN.MCLNNTrainer.build_model", "MCLNN_MAIN.MCLNNTrainer.train_model", "os.path.join", "len", "print", "len", "visualization.Visualizer", "visualization.Visualizer.visualize_weights_and_sample_test_clip", "str", "str", "str", "str", "os.makedirs", "str", "len", "str", "sklearn.metrics.accuracy_score", "str", "sklearn.metrics.accuracy_score", "folds_index_file_list[].lower", "folds_index_file_list[].lower", "folds_index_file_list[].lower", "os.path.basename", "str", "print", "exit", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.datapreprocessor.DataLoader.load_data", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.MCLNN_MAIN.MCLNNTrainer.build_model", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.MCLNN_MAIN.MCLNNTrainer.evaluate_model", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.MCLNN_MAIN.MCLNNTrainer.build_model", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.MCLNN_MAIN.MCLNNTrainer.train_model", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.None.visualization.Visualizer.visualize_weights_and_sample_test_clip"], ["", "", "def", "run", "(", ")", ":", "\n", "# ======================================= Initialization ======================================= #", "\n", "    ", "all_folds_target_label", "=", "np", ".", "asarray", "(", "[", "]", ")", "\n", "\n", "all_folds_majority_vote_cm", "=", "np", ".", "zeros", "(", "(", "Config", ".", "NB_CLASSES", ",", "Config", ".", "NB_CLASSES", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "all_folds_majority_vote_label", "=", "np", ".", "asarray", "(", "[", "]", ")", "\n", "\n", "all_folds_probability_vote_cm", "=", "np", ".", "zeros", "(", "(", "Config", ".", "NB_CLASSES", ",", "Config", ".", "NB_CLASSES", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "all_folds_probability_vote_label", "=", "np", ".", "asarray", "(", "[", "]", ")", "\n", "\n", "segment_size", "=", "sum", "(", "Config", ".", "LAYERS_ORDER_LIST", ")", "*", "2", "+", "Config", ".", "EXTRA_FRAMES", "\n", "print", "(", "'Segment without middle frame:'", "+", "str", "(", "segment_size", ")", ")", "\n", "\n", "is_visualization_called_flag", "=", "False", "# visualization is done for first fold only using this variable", "\n", "\n", "# list of paths to the n-fold indices of the Training/Testing/Validation splits", "\n", "# number of paths should be e.g. 30 for 3x10, where 3 is for the splits and 10 for the 10-folds", "\n", "# Every 3 files are for one run to train and validate on 9-folds and test on the remaining fold.", "\n", "folds_index_file_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "Config", ".", "INDEX_PATH", ",", "\"Fold*.hdf5\"", ")", ")", "\n", "if", "len", "(", "folds_index_file_list", ")", "==", "0", ":", "\n", "        ", "print", "(", "'Index path is not found = '", "+", "Config", ".", "INDEX_PATH", ")", "\n", "return", "\n", "", "folds_index_file_list", ".", "sort", "(", ")", "\n", "\n", "cross_val_index_list", "=", "np", ".", "arange", "(", "0", ",", "Config", ".", "SPLIT_COUNT", "*", "Config", ".", "CROSS_VALIDATION_FOLDS_COUNT", ",", "Config", ".", "SPLIT_COUNT", ")", "\n", "\n", "# ======================================= Start cross-validation ======================================= #", "\n", "\n", "for", "j", "in", "range", "(", "cross_val_index_list", "[", "Config", ".", "INITIAL_FOLD_ID", "]", ",", "len", "(", "folds_index_file_list", ")", ",", "Config", ".", "SPLIT_COUNT", ")", ":", "\n", "\n", "        ", "test_index_path", "=", "folds_index_file_list", "[", "j", "]", "if", "folds_index_file_list", "[", "j", "]", ".", "lower", "(", ")", ".", "endswith", "(", "\n", "'_test.hdf5'", ")", "else", "None", "\n", "train_index_path", "=", "folds_index_file_list", "[", "j", "+", "1", "]", "if", "folds_index_file_list", "[", "j", "+", "1", "]", ".", "lower", "(", ")", ".", "endswith", "(", "\n", "'_train.hdf5'", ")", "else", "None", "\n", "validation_index_path", "=", "folds_index_file_list", "[", "j", "+", "2", "]", "if", "folds_index_file_list", "[", "j", "+", "2", "]", ".", "lower", "(", ")", ".", "endswith", "(", "\n", "'_validation.hdf5'", ")", "else", "None", "\n", "\n", "if", "None", "in", "[", "test_index_path", ",", "train_index_path", ",", "validation_index_path", "]", ":", "\n", "            ", "print", "(", "'Train / Validation / Test indices are not correctly assigned'", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "0", ")", "# for reproducibility", "\n", "\n", "data_loader", "=", "DataLoader", "(", ")", "\n", "mclnn_trainer", "=", "MCLNNTrainer", "(", ")", "\n", "\n", "# --------------------------------- Load data ----------------------------- #", "\n", "data_loader", ".", "load_data", "(", "segment_size", ",", "\n", "Config", ".", "STEP_SIZE", ",", "\n", "Config", ".", "NB_CLASSES", ",", "\n", "Config", ".", "DATASET_FILE_PATH", ",", "\n", "Config", ".", "STANDARDIZATION_PATH", ",", "\n", "train_index_path", ",", "\n", "test_index_path", ",", "\n", "validation_index_path", ")", "\n", "\n", "# ------------------------------  Weights path ---------------------------- #", "\n", "train_index_filename", "=", "os", ".", "path", ".", "basename", "(", "train_index_path", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "weights_to_store_foldername", "=", "train_index_filename", "+", "'_'", "+", "'batch'", "+", "str", "(", "Config", ".", "BATCH_SIZE", ")", "+", "'wait'", "+", "str", "(", "Config", ".", "WAIT_COUNT", ")", "+", "'order'", "+", "str", "(", "Config", ".", "LAYERS_ORDER_LIST", "[", "0", "]", ")", "+", "'extra'", "+", "str", "(", "Config", ".", "EXTRA_FRAMES", ")", "\n", "fold_weights_path", "=", "os", ".", "path", ".", "join", "(", "Config", ".", "ALL_FOLDS_WEIGHTS_PATH", ",", "weights_to_store_foldername", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "fold_weights_path", ")", ":", "\n", "            ", "if", "Config", ".", "USE_PRETRAINED_WEIGHTS", "==", "False", ":", "\n", "                ", "os", ".", "makedirs", "(", "fold_weights_path", ")", "\n", "", "elif", "Config", ".", "USE_PRETRAINED_WEIGHTS", "==", "True", ":", "\n", "                ", "print", "(", "'Pre-trained weights do not exist in :'", "+", "fold_weights_path", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# --------------------------  Build and Train model ----------------------- #", "\n", "\n", "", "", "print", "(", "'----------- Training param -------------'", ")", "\n", "print", "(", "' batch_size>'", "+", "str", "(", "Config", ".", "BATCH_SIZE", ")", "+", "\n", "' nb_classes>'", "+", "str", "(", "Config", ".", "NB_CLASSES", ")", "+", "\n", "' nb_epoch>'", "+", "str", "(", "Config", ".", "NB_EPOCH", ")", "+", "\n", "' mclnn_layers>'", "+", "str", "(", "Config", ".", "MCLNN_LAYER_COUNT", ")", "+", "\n", "' dense_layers>'", "+", "str", "(", "Config", ".", "DENSE_LAYER_COUNT", ")", "+", "\n", "' norder>'", "+", "str", "(", "Config", ".", "LAYERS_ORDER_LIST", ")", "+", "\n", "' extra_frames>'", "+", "str", "(", "Config", ".", "EXTRA_FRAMES", ")", "+", "\n", "' segment_size>'", "+", "str", "(", "segment_size", "+", "1", ")", "+", "# plus 1 is for middle frame, considered in segmentation stage", "\n", "' initial_fold>'", "+", "str", "(", "Config", ".", "INITIAL_FOLD_ID", "+", "1", ")", "+", "# plus 1 beacuse folds are zero indexed", "\n", "' wait_count>'", "+", "str", "(", "Config", ".", "WAIT_COUNT", ")", "+", "\n", "' split_count>'", "+", "str", "(", "Config", ".", "SPLIT_COUNT", ")", ")", "\n", "\n", "if", "Config", ".", "USE_PRETRAINED_WEIGHTS", "==", "False", ":", "\n", "            ", "model", "=", "mclnn_trainer", ".", "build_model", "(", "segment_size", "=", "data_loader", ".", "train_segments", ".", "shape", "[", "1", "]", ",", "\n", "feature_count", "=", "data_loader", ".", "train_segments", ".", "shape", "[", "2", "]", ",", "\n", "pretrained_weights_path", "=", "None", ")", "\n", "mclnn_trainer", ".", "train_model", "(", "model", ",", "data_loader", ",", "fold_weights_path", ")", "\n", "\n", "# ------------------ Load trained weights in a new model ------------------ #", "\n", "# load paths of all weights generated during training", "\n", "", "weight_list", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "fold_weights_path", ",", "\"*.hdf5\"", ")", ")", "\n", "if", "len", "(", "weight_list", ")", "==", "0", ":", "\n", "            ", "print", "(", "'Weight path is not found = '", "+", "fold_weights_path", ")", "\n", "return", "\n", "\n", "", "weight_list", ".", "sort", "(", "key", "=", "os", ".", "path", ".", "getmtime", ")", "\n", "\n", "if", "len", "(", "weight_list", ")", ">", "1", ":", "\n", "            ", "startup_weights", "=", "weight_list", "[", "-", "(", "Config", ".", "WAIT_COUNT", "+", "2", ")", "]", "\n", "", "elif", "len", "(", "weight_list", ")", "==", "1", ":", "\n", "            ", "startup_weights", "=", "weight_list", "[", "0", "]", "\n", "", "print", "(", "'----------- Weights Loaded ---------------:'", ")", "\n", "print", "(", "startup_weights", ")", "\n", "\n", "model", "=", "mclnn_trainer", ".", "build_model", "(", "segment_size", "=", "data_loader", ".", "train_segments", ".", "shape", "[", "1", "]", ",", "\n", "feature_count", "=", "data_loader", ".", "train_segments", ".", "shape", "[", "2", "]", ",", "\n", "pretrained_weights_path", "=", "startup_weights", ")", "\n", "\n", "# ------------------------  Visualize a test sample  --------------------- #", "\n", "if", "is_visualization_called_flag", "==", "False", "and", "Config", ".", "SAVE_TEST_SEGMENT_PREDICTION_IMAGE", "==", "True", ":", "\n", "            ", "visualizer", "=", "Visualizer", "(", "Config", ")", "\n", "visualizer", ".", "visualize_weights_and_sample_test_clip", "(", "model", "=", "model", ",", "data_loader", "=", "data_loader", ")", "\n", "is_visualization_called_flag", "=", "True", "\n", "\n", "# --------------------------- Evaluate model ------------------------------ #", "\n", "", "fold_majority_cm", ",", "fold_probability_cm", ",", "fold_majority_vote_label", ",", "fold_probability_vote_label", ",", "fold_target_label", "=", "mclnn_trainer", ".", "evaluate_model", "(", "segment_size", "=", "segment_size", ",", "\n", "model", "=", "model", ",", "\n", "data_loader", "=", "data_loader", ")", "\n", "\n", "all_folds_majority_vote_cm", "+=", "fold_majority_cm", "\n", "all_folds_majority_vote_label", "=", "np", ".", "append", "(", "all_folds_majority_vote_label", ",", "fold_majority_vote_label", ")", "\n", "all_folds_probability_vote_cm", "+=", "fold_probability_cm", "\n", "all_folds_probability_vote_label", "=", "np", ".", "append", "(", "all_folds_probability_vote_label", ",", "fold_probability_vote_label", ")", "\n", "\n", "all_folds_target_label", "=", "np", ".", "append", "(", "all_folds_target_label", ",", "fold_target_label", ")", "\n", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "", "print", "(", "'-------------- Cross validation performance --------------'", ")", "\n", "\n", "print", "(", "Config", ".", "CLASS_NAMES", ")", "\n", "print", "(", "all_folds_majority_vote_cm", ")", "\n", "print", "(", "str", "(", "Config", ".", "CROSS_VALIDATION_FOLDS_COUNT", ")", "+", "'-Fold Clip-level majority-vote Accuracy '", "+", "str", "(", "\n", "accuracy_score", "(", "all_folds_target_label", ",", "all_folds_majority_vote_label", ")", ")", ")", "\n", "\n", "print", "(", "Config", ".", "CLASS_NAMES", ")", "\n", "print", "(", "all_folds_probability_vote_cm", ")", "\n", "print", "(", "str", "(", "Config", ".", "CROSS_VALIDATION_FOLDS_COUNT", ")", "+", "'-Fold Clip-level probability-vote Accuracy '", "+", "str", "(", "\n", "accuracy_score", "(", "all_folds_target_label", ",", "all_folds_probability_vote_label", ")", ")", ")", "\n", "\n", "scoref1", "=", "f1score", "(", "all_folds_target_label", ",", "all_folds_probability_vote_label", ",", "average", "=", "'micro'", ")", "\n", "print", "(", "'F1 Score micro '", "+", "str", "(", "scoref1", ")", ")", "\n", "\n", "scoref1", "=", "f1score", "(", "all_folds_target_label", ",", "all_folds_probability_vote_label", ",", "average", "=", "'weighted'", ")", "\n", "print", "(", "'F1 Score weighted '", "+", "str", "(", "scoref1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.dataset_transformer.dataset_transformer.store": [[27, 72], ["enumerate", "print", "file_handle.create_dataset", "str"], "function", ["None"], ["def", "store", "(", "file_handle", ",", "file_key", ",", "clip_list", ",", "sample_rate_list", ",", "short_count", ")", ":", "\n", "    ", "for", "i", ",", "clip", "in", "enumerate", "(", "clip_list", ")", ":", "\n", "        ", "print", "(", "i", ")", "\n", "file_key", "+=", "1", "\n", "sr", "=", "sample_rate_list", "[", "i", "]", "\n", "# Passing through arguments to the Mel filters", "\n", "# mel_spec = librosa.feature.melspectrogram(y=clip, sr=sr, n_mels=Config.MEL_FILTERS_COUNT", "\n", "#                                           , n_fft=Config.FFT_BINS, hop_length=Config.HOP_LENGTH_IN_SAMPLES)", "\n", "#", "\n", "# # Convert to log scale (dB), peak power is a reference.", "\n", "# log_mel_spec = librosa.logamplitude(mel_spec, ref_power=np.max)", "\n", "#", "\n", "# if Config.INCLUDE_DELTA == True:", "\n", "#     delta_log_mel_spec = librosa.feature.delta(log_mel_spec, width=9, order=1, axis=-1, trim=True)", "\n", "\n", "# print('File: ' + str(file_key) + ' at SR:' + str(sr) + ' - Duration is :' + str(", "\n", "#     clip.shape[0] / sr) + ' sec - Spec size :' + str(mel_spec.shape))", "\n", "\n", "start", "=", "Config", ".", "FIRST_FRAME_IN_SLICE", "# start of the segment", "\n", "end", "=", "start", "+", "Config", ".", "FRAME_NUM", "# end of the segment", "\n", "\n", "\n", "# if log_mel_spec.shape[1] < Config.FRAME_NUM:", "\n", "#     start = 0", "\n", "#     end = log_mel_spec.shape[1]", "\n", "#     print('SHORT included ' + str(clip.shape[0] / sr) + ' start :' + str(start) + ' <> end :' + str(end))", "\n", "#     short_count += 1", "\n", "# elif Config.FRAME_NUM < log_mel_spec.shape[1] < Config.FRAME_NUM + Config.FIRST_FRAME_IN_SLICE:", "\n", "#     start = log_mel_spec.shape[1] / 2 - (Config.FRAME_NUM / 2)", "\n", "#     end = start + Config.FRAME_NUM", "\n", "#     print('SHORT middle included ' + str(clip.shape[0] / sr) + '  start :' + str(start) + ' <> end :' + str(", "\n", "#             end))", "\n", "#     short_count += 1", "\n", "\n", "\n", "# spectrogram = np.transpose(log_mel_spec[:, start:end])", "\n", "#", "\n", "# if Config.INCLUDE_DELTA == True:", "\n", "#     spectrogram_delta = np.transpose(delta_log_mel_spec[:, start:end])", "\n", "#     spectrogram = np.concatenate((spectrogram, spectrogram_delta), axis=1)", "\n", "\n", "file_handle", ".", "create_dataset", "(", "str", "(", "file_key", ")", ",", "(", "spectrogram", ".", "shape", "[", "0", "]", ",", "spectrogram", ".", "shape", "[", "1", "]", ")", ",", "data", "=", "spectrogram", ",", "\n", "dtype", "=", "'float32'", ")", "\n", "\n", "", "return", "file_key", ",", "short_count", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.dataset_transformer.dataset_transformer.load": [[74, 85], ["range", "len", "librosa.load", "clip_list.append", "sample_rate_list.append"], "function", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.dataset_transformer.dataset_transformer.load"], ["", "def", "load", "(", "clip_path_list", ")", ":", "\n", "\n", "    ", "clip_list", "=", "[", "]", "\n", "sample_rate_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "clip_path_list", ")", ")", ":", "\n", "        ", "y", ",", "sr", "=", "librosa", ".", "load", "(", "clip_path_list", "[", "i", "]", ",", "sr", "=", "22050", ",", "mono", "=", "True", ")", "\n", "\n", "clip_list", ".", "append", "(", "y", ")", "\n", "sample_rate_list", ".", "append", "(", "sr", ")", "\n", "\n", "", "return", "clip_list", ",", "sample_rate_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.dataset_transformer.dataset_transformer.process_batch": [[87, 93], ["dataset_transformer.load", "dataset_transformer.store", "time.sleep"], "function", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.dataset_transformer.dataset_transformer.load", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.dataset_transformer.dataset_transformer.store"], ["", "def", "process_batch", "(", "clip_path_list", ",", "file_key", ",", "short_count", ")", ":", "\n", "\n", "    ", "clip_list", ",", "sample_rate_list", "=", "load", "(", "clip_path_list", ")", "\n", "file_key", ",", "short_count", "=", "store", "(", "hdf5_handle", ",", "file_key", ",", "clip_list", ",", "sample_rate_list", ",", "short_count", ")", "\n", "time", ".", "sleep", "(", "Config", ".", "SLEEP_TIME", ")", "\n", "return", "file_key", ",", "short_count", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.dataset_transformer.dataset_transformer.navigate_directory": [[94, 115], ["sorted", "os.walk", "sorted", "len", "dataset_transformer.process_batch", "fnmatch.fnmatch", "os.path.join", "clip_name_txt_handle.write", "clip_path_list.append", "len", "dataset_transformer.process_batch", "os.path.join.replace"], "function", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.dataset_transformer.dataset_transformer.process_batch", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.dataset_transformer.dataset_transformer.process_batch"], ["", "def", "navigate_directory", "(", "clip_name_txt_handle", ")", ":", "\n", "    ", "counter", "=", "-", "1", "\n", "file_key", "=", "-", "1", "\n", "short_count", "=", "0", "\n", "clip_path_list", "=", "[", "]", "\n", "# start walking through the files", "\n", "for", "path", ",", "subdirs", ",", "files", "in", "sorted", "(", "os", ".", "walk", "(", "Config", ".", "SRC_PATH", ",", "topdown", "=", "False", ")", ")", ":", "\n", "        ", "for", "name", "in", "sorted", "(", "files", ")", ":", "\n", "            ", "if", "fnmatch", "(", "name", ",", "\"*.wav\"", ")", ":", "\n", "                ", "counter", "+=", "1", "\n", "clip_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", "\n", "clip_name_txt_handle", ".", "write", "(", "clip_path", ".", "replace", "(", "Config", ".", "SRC_PATH", ",", "''", ")", "+", "'\\n'", ")", "\n", "clip_path_list", ".", "append", "(", "clip_path", ")", "\n", "if", "len", "(", "clip_path_list", ")", "==", "Config", ".", "PROCESSING_BATCH", ":", "\n", "                    ", "file_key", ",", "short_count", "=", "process_batch", "(", "clip_path_list", ",", "file_key", ",", "short_count", ")", "\n", "clip_path_list", "=", "[", "]", "\n", "\n", "", "", "", "", "if", "len", "(", "clip_path_list", ")", "!=", "0", ":", "\n", "        ", "file_key", ",", "short_count", "=", "process_batch", "(", "clip_path_list", ",", "file_key", ",", "short_count", ")", "\n", "\n", "", "return", "file_key", ",", "short_count", ",", "counter", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.dataset_transformer.dataset_transformer.navigate_csv": [[116, 143], ["open", "csvfile.readline", "row.strip().split", "os.path.join", "fnmatch.fnmatch", "len", "dataset_transformer.process_batch", "clip_name_txt_handle.write", "clip_path_list.append", "row.strip", "len", "dataset_transformer.process_batch", "os.path.join.replace"], "function", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.dataset_transformer.dataset_transformer.process_batch", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.dataset_transformer.dataset_transformer.process_batch"], ["", "def", "navigate_csv", "(", "clip_name_txt_handle", ")", ":", "\n", "    ", "counter", "=", "-", "1", "\n", "file_key", "=", "-", "1", "\n", "short_count", "=", "0", "\n", "clip_path_list", "=", "[", "]", "\n", "with", "open", "(", "Config", ".", "CSV_FILE_PATH", ")", "as", "csvfile", ":", "\n", "\n", "        ", "csvfile", ".", "readline", "(", ")", "# skip first row", "\n", "for", "row", "in", "csvfile", ":", "\n", "            ", "fields", "=", "row", ".", "strip", "(", ")", ".", "split", "(", "\",\"", ")", "# make into fields", "\n", "\n", "class_folder", "=", "fields", "[", "Config", ".", "COL_FOLDER_NAME", "]", "\n", "file_name", "=", "fields", "[", "Config", ".", "COL_FILE_NAME", "]", "\n", "clip_path", "=", "os", ".", "path", ".", "join", "(", "Config", ".", "SRC_PATH", ",", "class_folder", ",", "file_name", ")", "\n", "if", "fnmatch", "(", "clip_path", ",", "\"*.wav\"", ")", ":", "\n", "                ", "counter", "+=", "1", "\n", "clip_name_txt_handle", ".", "write", "(", "clip_path", ".", "replace", "(", "Config", ".", "SRC_PATH", ",", "''", ")", "+", "'\\n'", ")", "\n", "clip_path_list", ".", "append", "(", "clip_path", ")", "\n", "if", "len", "(", "clip_path_list", ")", "==", "Config", ".", "PROCESSING_BATCH", ":", "\n", "                    ", "file_key", ",", "short_count", "=", "process_batch", "(", "clip_path_list", ",", "file_key", ",", "short_count", ")", "\n", "clip_path_list", "=", "[", "]", "\n", "\n", "\n", "", "", "", "if", "len", "(", "clip_path_list", ")", "!=", "0", ":", "\n", "            ", "file_key", ",", "short_count", "=", "process_batch", "(", "clip_path_list", ",", "file_key", ",", "short_count", ")", "\n", "\n", "", "", "return", "file_key", ",", "short_count", ",", "counter", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.index_generator.index_generator.IndexGenerator.store_fold": [[31, 47], ["os.path.join", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "os.path.exists", "os.makedirs", "os.path.join", "str", "str", "fold_type.title", "str", "Config.DATASET.upper", "str().zfill", "str().zfill", "str", "str"], "methods", ["None"], ["    ", "def", "store_fold", "(", "self", ",", "fold_type", ",", "index", ",", "label", ",", "fold_id", ")", ":", "\n", "\n", "        ", "path_name", "=", "os", ".", "path", ".", "join", "(", "Config", ".", "DST_PATH", ",", "Config", ".", "FOLDER_NAME", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "path_name", ")", "\n", "\n", "", "hdf5_handle", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "path_name", ",", "\n", "'Fold_'", "+", "str", "(", "fold_id", "+", "1", ")", ".", "zfill", "(", "2", ")", "+", "'of'", "+", "str", "(", "Config", ".", "FOLD_COUNT", ")", ".", "zfill", "(", "\n", "2", ")", "+", "'_'", "+", "Config", ".", "DATASET", ".", "upper", "(", ")", "+", "'_seed'", "+", "str", "(", "\n", "seed", ")", "+", "'_'", "+", "fold_type", ".", "title", "(", ")", "+", "'.hdf5'", ")", ",", "\"w\"", ")", "\n", "\n", "hdf5_handle", ".", "create_dataset", "(", "str", "(", "'index'", ")", ",", "data", "=", "index", ",", "\n", "dtype", "=", "'int32'", ")", "\n", "\n", "hdf5_handle", ".", "create_dataset", "(", "str", "(", "'label'", ")", ",", "data", "=", "label", ",", "\n", "dtype", "=", "'int32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.index_generator.index_generator.IndexGenerator.load_fold": [[48, 63], ["h5py.File", "print", "print", "os.path.join", "fold_type.title", "str", "str", "str", "Config.DATASET.upper", "str().zfill", "str().zfill", "str", "str"], "methods", ["None"], ["", "def", "load_fold", "(", "self", ",", "fold_type", ",", "fold_id", ")", ":", "\n", "        ", "\"\"\"\n\n        :param fold_type:\n        :param fold_id:\n        :return:\n        \"\"\"", "\n", "\n", "with", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "Config", ".", "DST_PATH", ",", "Config", ".", "FOLDER_NAME", ",", "\n", "'Fold_'", "+", "str", "(", "fold_id", "+", "1", ")", ".", "zfill", "(", "2", ")", "+", "'of'", "+", "str", "(", "Config", ".", "FOLD_COUNT", ")", ".", "zfill", "(", "2", ")", "\n", "+", "'_'", "+", "Config", ".", "DATASET", ".", "upper", "(", ")", "\n", "+", "'_seed'", "+", "str", "(", "seed", ")", "\n", "+", "'_'", "+", "fold_type", ".", "title", "(", ")", "+", "'.hdf5'", ")", ",", "\"r\"", ")", "as", "hdf5_handle", ":", "\n", "            ", "print", "(", "fold_type", ",", "'INDICES of fold :'", ",", "fold_id", ",", "'are'", ",", "hdf5_handle", "[", "str", "(", "'index'", ")", "]", ".", "value", ")", "\n", "print", "(", "fold_type", ",", "'LABELS of fold :'", ",", "fold_id", ",", "'are'", ",", "hdf5_handle", "[", "str", "(", "'label'", ")", "]", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.index_generator.index_generator.IndexGenerator.generate_consecutive_index_all_categories": [[64, 88], ["range", "clip_index_list.append", "clip_label_list.append", "numpy.random.permutation", "numpy.arange"], "methods", ["None"], ["", "", "def", "generate_consecutive_index_all_categories", "(", "self", ",", "shuffle", ")", ":", "\n", "        ", "\"\"\"\n\n        :param shuffle:\n        :return:\n        \"\"\"", "\n", "offset", "=", "0", "# offset to consider previous class elements count in current one", "\n", "clip_index_list", "=", "[", "]", "\n", "clip_label_list", "=", "[", "]", "\n", "temp_index_list", "=", "[", "]", "\n", "\n", "for", "k", "in", "range", "(", "class_count", ")", ":", "\n", "            ", "clip_count_per_category", "=", "clip_count_per_category_list", "[", "k", "]", "\n", "\n", "if", "shuffle", "==", "True", ":", "\n", "                ", "temp_index_list", "=", "rand", ".", "permutation", "(", "clip_count_per_category", ")", "\n", "", "else", ":", "\n", "                ", "temp_index_list", "=", "np", ".", "arange", "(", "clip_count_per_category", ")", "\n", "\n", "", "clip_index_list", ".", "append", "(", "temp_index_list", "+", "offset", ")", "\n", "clip_label_list", ".", "append", "(", "[", "k", "]", "*", "clip_count_per_category", ")", "\n", "offset", "+=", "clip_count_per_category", "\n", "\n", "", "return", "clip_index_list", ",", "clip_label_list", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.index_generator.index_generator.IndexGenerator.assign_indices_to_folds": [[89, 117], ["numpy.concatenate", "numpy.concatenate", "numpy.asarray", "numpy.asarray", "len", "range", "range", "range", "len", "clip_index_vector[].tolist", "clip_label_vector[].tolist"], "methods", ["None"], ["", "def", "assign_indices_to_folds", "(", "self", ",", "clip_index_list", ",", "clip_label_list", ")", ":", "\n", "        ", "\"\"\"\n\n        :param clip_index_list:\n        :param clip_label_list:\n        :return:\n        \"\"\"", "\n", "\n", "clip_index_vector", "=", "np", ".", "concatenate", "(", "clip_index_list", ")", "\n", "clip_label_vector", "=", "np", ".", "concatenate", "(", "clip_label_list", ")", "\n", "\n", "assigned_indices_count", "=", "0", "\n", "fold_cells", "=", "[", "[", "]", "for", "_", "in", "range", "(", "Config", ".", "FOLD_COUNT", ")", "]", "\n", "fold_cells_label", "=", "[", "[", "]", "for", "_", "in", "range", "(", "Config", ".", "FOLD_COUNT", ")", "]", "\n", "\n", "while", "assigned_indices_count", "<", "len", "(", "clip_index_vector", ")", ":", "\n", "            ", "for", "fold_id", "in", "range", "(", "Config", ".", "FOLD_COUNT", ")", ":", "\n", "                ", "if", "assigned_indices_count", "<", "len", "(", "clip_index_vector", ")", ":", "\n", "                    ", "start_index", "=", "assigned_indices_count", "\n", "last_index", "=", "assigned_indices_count", "+", "batch_size_per_fold_assignment", "\n", "fold_cells", "[", "fold_id", "]", "+=", "clip_index_vector", "[", "start_index", ":", "last_index", "]", ".", "tolist", "(", ")", "\n", "fold_cells_label", "[", "fold_id", "]", "+=", "clip_label_vector", "[", "start_index", ":", "last_index", "]", ".", "tolist", "(", ")", "\n", "assigned_indices_count", "=", "last_index", "\n", "\n", "", "", "", "fold_cells", "=", "np", ".", "asarray", "(", "fold_cells", ")", "\n", "fold_cells_label", "=", "np", ".", "asarray", "(", "fold_cells_label", ")", "\n", "\n", "return", "fold_cells", ",", "fold_cells_label", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.index_generator.index_generator.IndexGenerator.double_check_index_assignment": [[118, 135], ["range", "numpy.asarray", "print", "print", "hist_sum.append", "numpy.sum", "numpy.sum", "numpy.histogram", "numpy.sum", "numpy.sum", "len"], "methods", ["None"], ["", "def", "double_check_index_assignment", "(", "self", ",", "fold_cells_label", ")", ":", "\n", "        ", "\"\"\"\n\n        :param fold_cells_label:\n        :return:\n        \"\"\"", "\n", "hist_sum", "=", "[", "]", "\n", "for", "n", "in", "range", "(", "Config", ".", "FOLD_COUNT", ")", ":", "\n", "            ", "hist_row", "=", "np", ".", "histogram", "(", "fold_cells_label", "[", "n", "]", ",", "len", "(", "clip_count_per_category_list", ")", ")", "[", "0", "]", "\n", "print", "(", "hist_row", ",", "'sum per fold ='", ",", "np", ".", "sum", "(", "hist_row", ")", ")", "\n", "hist_sum", ".", "append", "(", "hist_row", ")", "\n", "# histc(fold_cells_label[n],[1:10])", "\n", "\n", "", "np_hist_sum", "=", "np", ".", "asarray", "(", "hist_sum", ")", "\n", "\n", "print", "(", "np", ".", "sum", "(", "np_hist_sum", ",", "axis", "=", "0", ")", ",", "np", ".", "sum", "(", "\n", "np", ".", "sum", "(", "np_hist_sum", ",", "axis", "=", "0", ")", ")", ",", "'should match the original dataset clip-count per category'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.index_generator.index_generator.IndexGenerator.load_index_from_csv": [[136, 158], ["numpy.asarray", "numpy.asarray", "open", "csvfile.readline", "range", "range", "row.strip().split", "int", "int", "row.strip", "int", "int"], "methods", ["None"], ["", "def", "load_index_from_csv", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "\"\"\"\n\n        :param file_path:\n        :return:\n        \"\"\"", "\n", "\n", "fold_cells", "=", "[", "[", "]", "for", "_", "in", "range", "(", "Config", ".", "FOLD_COUNT", ")", "]", "\n", "fold_cells_label", "=", "[", "[", "]", "for", "_", "in", "range", "(", "Config", ".", "FOLD_COUNT", ")", "]", "\n", "\n", "with", "open", "(", "file_path", ")", "as", "csvfile", ":", "\n", "            ", "csvfile", ".", "readline", "(", ")", "# skip first row", "\n", "for", "row", "in", "csvfile", ":", "\n", "                ", "fields", "=", "row", ".", "strip", "(", ")", ".", "split", "(", "\",\"", ")", "# make Into fields", "\n", "# print ('Fold ID', int(fields[Config.COL_FOLD_ID]) - 1, ' ', [int(fields[Config.COL_FILE_SEQ])])", "\n", "fold_cells", "[", "int", "(", "fields", "[", "Config", ".", "COL_FOLD_ID", "]", ")", "-", "1", "]", "+=", "[", "int", "(", "fields", "[", "Config", ".", "COL_FILE_SEQ", "]", ")", "]", "\n", "fold_cells_label", "[", "int", "(", "fields", "[", "Config", ".", "COL_FOLD_ID", "]", ")", "-", "1", "]", "+=", "[", "int", "(", "fields", "[", "Config", ".", "COL_CLASS_ID", "]", ")", "]", "\n", "\n", "", "", "fold_cells", "=", "np", ".", "asarray", "(", "fold_cells", ")", "\n", "fold_cells_label", "=", "np", ".", "asarray", "(", "fold_cells_label", ")", "\n", "\n", "return", "fold_cells", ",", "fold_cells_label", "\n", "\n"]], "home.repos.pwc.inspect_result.fadymedhat_MCLNN.index_generator.index_generator.IndexGenerator.generate_data_split": [[159, 209], ["numpy.arange", "range", "numpy.concatenate", "numpy.concatenate", "print", "print", "print", "print", "len", "len", "len", "index_generator.IndexGenerator.store_fold", "index_generator.IndexGenerator.store_fold", "index_generator.IndexGenerator.store_fold", "numpy.roll", "len", "len", "len", "numpy.intersect1d", "numpy.intersect1d", "numpy.intersect1d", "print", "print", "print", "quit", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.fadymedhat_MCLNN.index_generator.index_generator.IndexGenerator.store_fold", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.index_generator.index_generator.IndexGenerator.store_fold", "home.repos.pwc.inspect_result.fadymedhat_MCLNN.index_generator.index_generator.IndexGenerator.store_fold"], ["", "def", "generate_data_split", "(", "self", ",", "fold_cells", ",", "fold_cells_label", ")", ":", "\n", "        ", "\"\"\"\n\n        :param fold_cells:\n        :param fold_cells_label:\n        :return:\n        \"\"\"", "\n", "\n", "test_set_index", "=", "[", "]", "\n", "validation_set_index", "=", "[", "]", "\n", "train_set_index", "=", "[", "]", "\n", "\n", "test_set_label", "=", "[", "]", "\n", "validation_set_label", "=", "[", "]", "\n", "train_set_label", "=", "[", "]", "\n", "\n", "fold_index_list", "=", "np", ".", "arange", "(", "Config", ".", "FOLD_COUNT", ")", "\n", "\n", "for", "fold_id", "in", "range", "(", "Config", ".", "FOLD_COUNT", ")", ":", "\n", "\n", "            ", "test_set_index", "=", "fold_cells", "[", "fold_index_list", "[", "0", "]", "]", "[", "0", ":", ":", "(", "Config", ".", "AUGMENTATION_VARIANTS_COUNT", "+", "1", ")", "]", "\n", "validation_set_index", "=", "fold_cells", "[", "fold_index_list", "[", "1", "]", "]", "[", "0", ":", ":", "(", "Config", ".", "AUGMENTATION_VARIANTS_COUNT", "+", "1", ")", "]", "\n", "train_set_index", "=", "np", ".", "concatenate", "(", "fold_cells", "[", "fold_index_list", "[", "2", ":", ":", "]", "]", ")", "\n", "\n", "test_set_label", "=", "fold_cells_label", "[", "fold_index_list", "[", "0", "]", "]", "[", "0", ":", ":", "(", "Config", ".", "AUGMENTATION_VARIANTS_COUNT", "+", "1", ")", "]", "\n", "validation_set_label", "=", "fold_cells_label", "[", "fold_index_list", "[", "1", "]", "]", "[", "0", ":", ":", "(", "Config", ".", "AUGMENTATION_VARIANTS_COUNT", "+", "1", ")", "]", "\n", "train_set_label", "=", "np", ".", "concatenate", "(", "fold_cells_label", "[", "fold_index_list", "[", "2", ":", ":", "]", "]", ")", "\n", "\n", "# _______ validate that no overlap between splits  _______________", "\n", "\n", "print", "(", "'Test no. : '", ",", "len", "(", "test_set_index", ")", ")", ";", "\n", "print", "(", "'Validation no. : '", ",", "len", "(", "validation_set_index", ")", ")", ";", "\n", "print", "(", "'Train no. : '", ",", "len", "(", "train_set_index", ")", ")", ";", "\n", "print", "(", "'            Total no. : '", ",", "len", "(", "test_set_index", ")", "+", "len", "(", "validation_set_index", ")", "+", "len", "(", "train_set_index", ")", ")", ";", "\n", "\n", "inter1", "=", "len", "(", "np", ".", "intersect1d", "(", "test_set_index", ",", "validation_set_index", ")", ")", ";", "\n", "inter2", "=", "len", "(", "np", ".", "intersect1d", "(", "test_set_index", ",", "train_set_index", ")", ")", ";", "\n", "inter3", "=", "len", "(", "np", ".", "intersect1d", "(", "validation_set_index", ",", "train_set_index", ")", ")", ";", "\n", "\n", "if", "(", "inter1", "+", "inter2", "+", "inter3", ")", ">", "0", ":", "\n", "                ", "print", "(", "' +++++++++++++++++++++++ \\n'", ")", "\n", "print", "(", "' Possible intersection between dataset indices  \\n'", ")", "\n", "print", "(", "' +++++++++++++++++++++++ \\n'", ")", "\n", "quit", "(", ")", "\n", "\n", "", "self", ".", "store_fold", "(", "'test'", ",", "test_set_index", ",", "test_set_label", ",", "fold_id", ")", "\n", "self", ".", "store_fold", "(", "'validation'", ",", "validation_set_index", ",", "validation_set_label", ",", "fold_id", ")", "\n", "self", ".", "store_fold", "(", "'train'", ",", "train_set_index", ",", "train_set_label", ",", "fold_id", ")", "\n", "\n", "fold_index_list", "=", "np", ".", "roll", "(", "fold_index_list", ",", "1", ")", ";", "\n", "\n"]]}