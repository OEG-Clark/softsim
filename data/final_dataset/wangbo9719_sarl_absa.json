{"home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.__init__": [[73, 107], ["tokenization_utils.PreTrainedTokenizer.__init__", "collections.Counter", "torch.load", "torch.load.items", "tokenization_transfo_xl.TransfoXLTokenizer.build_vocab"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.build_vocab"], ["def", "__init__", "(", "self", ",", "special", "=", "None", ",", "min_freq", "=", "0", ",", "max_size", "=", "None", ",", "lower_case", "=", "False", ",", "\n", "delimiter", "=", "None", ",", "vocab_file", "=", "None", ",", "pretrained_vocab_file", "=", "None", ",", "\n", "never_split", "=", "None", ",", "unk_token", "=", "\"<unk>\"", ",", "eos_token", "=", "\"<eos>\"", ",", "\n", "additional_special_tokens", "=", "[", "\"<formula>\"", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TransfoXLTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "eos_token", "=", "eos_token", ",", "\n", "additional_special_tokens", "=", "additional_special_tokens", ",", "\n", "**", "kwargs", ")", "\n", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "\n", "if", "never_split", "is", "None", ":", "\n", "            ", "never_split", "=", "self", ".", "all_special_tokens", "\n", "", "if", "special", "is", "None", ":", "\n", "            ", "special", "=", "[", "]", "\n", "", "self", ".", "counter", "=", "Counter", "(", ")", "\n", "self", ".", "special", "=", "special", "\n", "self", ".", "min_freq", "=", "min_freq", "\n", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "lower_case", "=", "lower_case", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "self", ".", "vocab_file", "=", "vocab_file", "\n", "self", ".", "never_split", "=", "never_split", "\n", "\n", "if", "pretrained_vocab_file", "is", "not", "None", ":", "\n", "# Hack because, honestly this tokenizer was not made to be used", "\n", "# in a library like ours, at all.", "\n", "            ", "vocab_dict", "=", "torch", ".", "load", "(", "pretrained_vocab_file", ")", "\n", "for", "key", ",", "value", "in", "vocab_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "not", "in", "self", ".", "__dict__", ":", "\n", "                    ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "\n", "", "", "", "if", "vocab_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "build_vocab", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file": [[108, 122], ["os.path.exists", "logger.info", "io.open", "enumerate", "tokenization_transfo_xl.TransfoXLTokenizer.tokenize", "tokenization_transfo_xl.TransfoXLTokenizer.counter.update", "sents.append", "logger.info"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "", "def", "count_file", "(", "self", ",", "path", ",", "verbose", "=", "False", ",", "add_eos", "=", "False", ")", ":", "\n", "        ", "if", "verbose", ":", "logger", ".", "info", "(", "'counting file {} ...'", ".", "format", "(", "path", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "\n", "sents", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "symbols", "=", "self", ".", "tokenize", "(", "line", ",", "add_eos", "=", "add_eos", ")", "\n", "self", ".", "counter", ".", "update", "(", "symbols", ")", "\n", "sents", ".", "append", "(", "symbols", ")", "\n", "\n", "", "", "return", "sents", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_sents": [[123, 132], ["enumerate", "logger.info", "tokenization_transfo_xl.TransfoXLTokenizer.counter.update", "logger.info", "len"], "methods", ["None"], ["", "def", "count_sents", "(", "self", ",", "sents", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            sents : a list of sentences, each a list of tokenized symbols\n        \"\"\"", "\n", "if", "verbose", ":", "logger", ".", "info", "(", "'counting {} sents ...'", ".", "format", "(", "len", "(", "sents", ")", ")", ")", "\n", "for", "idx", ",", "symbols", "in", "enumerate", "(", "sents", ")", ":", "\n", "            ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "self", ".", "counter", ".", "update", "(", "symbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer._build_from_file": [[133, 147], ["collections.OrderedDict", "io.open", "tokenization_transfo_xl.TransfoXLTokenizer.add_symbol", "ValueError", "line.strip().split", "line.strip"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_symbol"], ["", "", "def", "_build_from_file", "(", "self", ",", "vocab_file", ")", ":", "\n", "        ", "self", ".", "idx2sym", "=", "[", "]", "\n", "self", ".", "sym2idx", "=", "OrderedDict", "(", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "symb", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", "\n", "self", ".", "add_symbol", "(", "symb", ")", "\n", "", "", "if", "'<UNK>'", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "unk_idx", "=", "self", ".", "sym2idx", "[", "'<UNK>'", "]", "\n", "", "elif", "'<unk>'", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "unk_idx", "=", "self", ".", "sym2idx", "[", "'<unk>'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'No <unkown> token in vocabulary'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.save_vocabulary": [[148, 154], ["os.path.isdir", "torch.save", "os.path.join"], "methods", ["None"], ["", "", "def", "save_vocabulary", "(", "self", ",", "vocab_path", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary to a directory or file.\"\"\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "vocab_path", ")", ":", "\n", "            ", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "vocab_path", ",", "VOCAB_FILES_NAMES", "[", "'pretrained_vocab_file'", "]", ")", "\n", "", "torch", ".", "save", "(", "self", ".", "__dict__", ",", "vocab_file", ")", "\n", "return", "(", "vocab_file", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.build_vocab": [[155, 175], ["logger.info", "tokenization_transfo_xl.TransfoXLTokenizer._build_from_file", "logger.info", "logger.info", "collections.OrderedDict", "tokenization_transfo_xl.TransfoXLTokenizer.counter.most_common", "logger.info", "tokenization_transfo_xl.TransfoXLTokenizer.add_special", "tokenization_transfo_xl.TransfoXLTokenizer.add_symbol", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer._build_from_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_special", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_symbol"], ["", "def", "build_vocab", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "vocab_file", ":", "\n", "            ", "logger", ".", "info", "(", "'building vocab from {}'", ".", "format", "(", "self", ".", "vocab_file", ")", ")", "\n", "self", ".", "_build_from_file", "(", "self", ".", "vocab_file", ")", "\n", "logger", ".", "info", "(", "'final vocab size {}'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'building vocab with min_freq={}, max_size={}'", ".", "format", "(", "\n", "self", ".", "min_freq", ",", "self", ".", "max_size", ")", ")", "\n", "self", ".", "idx2sym", "=", "[", "]", "\n", "self", ".", "sym2idx", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "sym", "in", "self", ".", "special", ":", "\n", "                ", "self", ".", "add_special", "(", "sym", ")", "\n", "\n", "", "for", "sym", ",", "cnt", "in", "self", ".", "counter", ".", "most_common", "(", "self", ".", "max_size", ")", ":", "\n", "                ", "if", "cnt", "<", "self", ".", "min_freq", ":", "break", "\n", "self", ".", "add_symbol", "(", "sym", ")", "\n", "\n", "", "logger", ".", "info", "(", "'final vocab size {} from {} unique tokens'", ".", "format", "(", "\n", "len", "(", "self", ")", ",", "len", "(", "self", ".", "counter", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file": [[176, 193], ["os.path.exists", "logger.info", "io.open", "enumerate", "torch.cat", "tokenization_transfo_xl.TransfoXLTokenizer.tokenize", "torch.cat.append", "logger.info", "tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor"], ["", "", "def", "encode_file", "(", "self", ",", "path", ",", "ordered", "=", "False", ",", "verbose", "=", "False", ",", "add_eos", "=", "True", ",", "\n", "add_double_eos", "=", "False", ")", ":", "\n", "        ", "if", "verbose", ":", "logger", ".", "info", "(", "'encoding file {} ...'", ".", "format", "(", "path", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "encoded", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "symbols", "=", "self", ".", "tokenize", "(", "line", ",", "add_eos", "=", "add_eos", ",", "\n", "add_double_eos", "=", "add_double_eos", ")", "\n", "encoded", ".", "append", "(", "self", ".", "convert_to_tensor", "(", "symbols", ")", ")", "\n", "\n", "", "", "if", "ordered", ":", "\n", "            ", "encoded", "=", "torch", ".", "cat", "(", "encoded", ")", "\n", "\n", "", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_sents": [[194, 206], ["enumerate", "logger.info", "torch.cat.append", "torch.cat", "logger.info", "tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor"], ["", "def", "encode_sents", "(", "self", ",", "sents", ",", "ordered", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "if", "verbose", ":", "logger", ".", "info", "(", "'encoding {} sents ...'", ".", "format", "(", "len", "(", "sents", ")", ")", ")", "\n", "encoded", "=", "[", "]", "\n", "for", "idx", ",", "symbols", "in", "enumerate", "(", "sents", ")", ":", "\n", "            ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "encoded", ".", "append", "(", "self", ".", "convert_to_tensor", "(", "symbols", ")", ")", "\n", "\n", "", "if", "ordered", ":", "\n", "            ", "encoded", "=", "torch", ".", "cat", "(", "encoded", ")", "\n", "\n", "", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_special": [[207, 212], ["tokenization_transfo_xl.TransfoXLTokenizer.idx2sym.append", "setattr", "len", "sym.strip"], "methods", ["None"], ["", "def", "add_special", "(", "self", ",", "sym", ")", ":", "\n", "        ", "if", "sym", "not", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "idx2sym", ".", "append", "(", "sym", ")", "\n", "self", ".", "sym2idx", "[", "sym", "]", "=", "len", "(", "self", ".", "idx2sym", ")", "-", "1", "\n", "setattr", "(", "self", ",", "'{}_idx'", ".", "format", "(", "sym", ".", "strip", "(", "'<>'", ")", ")", ",", "self", ".", "sym2idx", "[", "sym", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_symbol": [[213, 217], ["tokenization_transfo_xl.TransfoXLTokenizer.idx2sym.append", "len"], "methods", ["None"], ["", "", "def", "add_symbol", "(", "self", ",", "sym", ")", ":", "\n", "        ", "if", "sym", "not", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "idx2sym", ".", "append", "(", "sym", ")", "\n", "self", ".", "sym2idx", "[", "sym", "]", "=", "len", "(", "self", ".", "idx2sym", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer._convert_id_to_token": [[218, 222], ["len"], "methods", ["None"], ["", "", "def", "_convert_id_to_token", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Converts an id in a token (BPE) using the vocab.\"\"\"", "\n", "assert", "0", "<=", "idx", "<", "len", "(", "self", ")", ",", "'Index {} out of vocabulary range'", ".", "format", "(", "idx", ")", "\n", "return", "self", ".", "idx2sym", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer._convert_token_to_id": [[223, 239], ["hasattr", "tokenization_transfo_xl.TransfoXLTokenizer.sym2idx.get", "ValueError"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "sym", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "if", "sym", "in", "self", ".", "sym2idx", ":", "\n", "            ", "return", "self", ".", "sym2idx", "[", "sym", "]", "\n", "", "else", ":", "\n", "# logger.info('encounter unk {}'.format(sym))", "\n", "# assert '<eos>' not in sym", "\n", "            ", "if", "hasattr", "(", "self", ",", "'unk_idx'", ")", ":", "\n", "                ", "return", "self", ".", "sym2idx", ".", "get", "(", "sym", ",", "self", ".", "unk_idx", ")", "\n", "# Backward compatibility with pre-trained models", "\n", "", "elif", "'<unk>'", "in", "self", ".", "sym2idx", ":", "\n", "                ", "return", "self", ".", "sym2idx", "[", "'<unk>'", "]", "\n", "", "elif", "'<UNK>'", "in", "self", ".", "sym2idx", ":", "\n", "                ", "return", "self", ".", "sym2idx", "[", "'<UNK>'", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Token not in vocabulary and no <unk> token in vocabulary for replacement'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_tokens_to_string": [[240, 244], ["None"], "methods", ["None"], ["", "", "", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "' '", ".", "join", "(", "tokens", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor": [[245, 247], ["torch.LongTensor", "tokenization_transfo_xl.TransfoXLTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "convert_to_tensor", "(", "self", ",", "symbols", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "self", ".", "convert_tokens_to_ids", "(", "symbols", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.vocab_size": [[248, 251], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx2sym", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer._tokenize": [[252, 270], ["line.lower.lower.strip", "line.lower.lower.lower", "line.lower.lower.split"], "methods", ["None"], ["", "def", "_tokenize", "(", "self", ",", "line", ",", "add_eos", "=", "False", ",", "add_double_eos", "=", "False", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "# convert to lower case", "\n", "if", "self", ".", "lower_case", ":", "\n", "            ", "line", "=", "line", ".", "lower", "(", ")", "\n", "\n", "# empty delimiter '' will evaluate False", "\n", "", "if", "self", ".", "delimiter", "==", "''", ":", "\n", "            ", "symbols", "=", "line", "\n", "", "else", ":", "\n", "            ", "symbols", "=", "line", ".", "split", "(", "self", ".", "delimiter", ")", "\n", "\n", "", "if", "add_double_eos", ":", "# lm1b", "\n", "            ", "return", "[", "'<S>'", "]", "+", "symbols", "+", "[", "'<S>'", "]", "\n", "", "elif", "add_eos", ":", "\n", "            ", "return", "symbols", "+", "[", "'<eos>'", "]", "\n", "", "else", ":", "\n", "            ", "return", "symbols", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMOrderedIterator.__init__": [[273, 294], ["data.narrow.narrow.narrow", "data.narrow.narrow.view().t().contiguous().to", "data.narrow.narrow.size", "data.narrow.narrow.view().t().contiguous", "data.narrow.narrow.view().t", "data.narrow.narrow.view"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            data -- LongTensor -- the LongTensor is strictly ordered\n        \"\"\"", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "# Work out how cleanly we can divide the dataset into bsz parts.", "\n", "self", ".", "n_step", "=", "data", ".", "size", "(", "0", ")", "//", "bsz", "\n", "\n", "# Trim off any extra elements that wouldn't cleanly fit (remainders).", "\n", "data", "=", "data", ".", "narrow", "(", "0", ",", "0", ",", "self", ".", "n_step", "*", "bsz", ")", "\n", "\n", "# Evenly divide the data across the bsz batches.", "\n", "self", ".", "data", "=", "data", ".", "view", "(", "bsz", ",", "-", "1", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Number of mini-batches", "\n", "self", ".", "n_batch", "=", "(", "self", ".", "n_step", "+", "self", ".", "bptt", "-", "1", ")", "//", "self", ".", "bptt", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMOrderedIterator.get_batch": [[295, 309], ["min", "max", "data.transpose().contiguous().to", "target.transpose().contiguous().to", "data.transpose().contiguous", "target.transpose().contiguous", "tokenization_transfo_xl.LMOrderedIterator.data.size", "data.transpose", "target.transpose"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ",", "i", ",", "bptt", "=", "None", ")", ":", "\n", "        ", "if", "bptt", "is", "None", ":", "bptt", "=", "self", ".", "bptt", "\n", "seq_len", "=", "min", "(", "bptt", ",", "self", ".", "data", ".", "size", "(", "0", ")", "-", "1", "-", "i", ")", "\n", "\n", "end_idx", "=", "i", "+", "seq_len", "\n", "beg_idx", "=", "max", "(", "0", ",", "i", "-", "self", ".", "ext_len", ")", "\n", "\n", "data", "=", "self", ".", "data", "[", "beg_idx", ":", "end_idx", "]", "\n", "target", "=", "self", ".", "data", "[", "i", "+", "1", ":", "i", "+", "1", "+", "seq_len", "]", "\n", "\n", "data_out", "=", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "target_out", "=", "target", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "data_out", ",", "target_out", ",", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMOrderedIterator.get_fixlen_iter": [[310, 313], ["range", "tokenization_transfo_xl.LMOrderedIterator.data.size", "tokenization_transfo_xl.LMOrderedIterator.get_batch"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMOrderedIterator.get_batch"], ["", "def", "get_fixlen_iter", "(", "self", ",", "start", "=", "0", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "start", ",", "self", ".", "data", ".", "size", "(", "0", ")", "-", "1", ",", "self", ".", "bptt", ")", ":", "\n", "            ", "yield", "self", ".", "get_batch", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMOrderedIterator.get_varlen_iter": [[314, 325], ["min", "tokenization_transfo_xl.LMOrderedIterator.get_batch", "max", "numpy.random.random", "int", "tokenization_transfo_xl.LMOrderedIterator.data.size", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMOrderedIterator.get_batch"], ["", "", "def", "get_varlen_iter", "(", "self", ",", "start", "=", "0", ",", "std", "=", "5", ",", "min_len", "=", "5", ",", "max_deviation", "=", "3", ")", ":", "\n", "        ", "max_len", "=", "self", ".", "bptt", "+", "max_deviation", "*", "std", "\n", "i", "=", "start", "\n", "while", "True", ":", "\n", "            ", "bptt", "=", "self", ".", "bptt", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.95", "else", "self", ".", "bptt", "/", "2.", "\n", "bptt", "=", "min", "(", "max_len", ",", "max", "(", "min_len", ",", "int", "(", "np", ".", "random", ".", "normal", "(", "bptt", ",", "std", ")", ")", ")", ")", "\n", "data", ",", "target", ",", "seq_len", "=", "self", ".", "get_batch", "(", "i", ",", "bptt", ")", "\n", "i", "+=", "seq_len", "\n", "yield", "data", ",", "target", ",", "seq_len", "\n", "if", "i", ">=", "self", ".", "data", ".", "size", "(", "0", ")", "-", "2", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMOrderedIterator.__iter__": [[326, 328], ["tokenization_transfo_xl.LMOrderedIterator.get_fixlen_iter"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMOrderedIterator.get_fixlen_iter"], ["", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_fixlen_iter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMShuffledIterator.__init__": [[331, 343], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            data -- list[LongTensor] -- there is no order among the LongTensors\n        \"\"\"", "\n", "self", ".", "data", "=", "data", "\n", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMShuffledIterator.get_sent_stream": [[344, 352], ["numpy.random.permutation", "numpy.array", "len", "range", "len"], "methods", ["None"], ["", "def", "get_sent_stream", "(", "self", ")", ":", "\n", "# index iterator", "\n", "        ", "epoch_indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "data", ")", ")", "if", "self", ".", "shuffle", "else", "np", ".", "array", "(", "range", "(", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "\n", "# sentence iterator", "\n", "for", "idx", "in", "epoch_indices", ":", "\n", "            ", "yield", "self", ".", "data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMShuffledIterator.stream_iterator": [[353, 401], ["torch.LongTensor", "torch.LongTensor", "data[].fill_", "torch.LongTensor.fill_", "range", "torch.LongTensor.transpose().contiguous().to", "torch.LongTensor.transpose().contiguous().to", "min", "torch.LongTensor.resize_", "torch.LongTensor.size", "torch.LongTensor.size", "torch.LongTensor.transpose().contiguous", "torch.LongTensor.transpose().contiguous", "min", "next", "torch.LongTensor.transpose", "torch.LongTensor.transpose", "len", "len"], "methods", ["None"], ["", "", "def", "stream_iterator", "(", "self", ",", "sent_stream", ")", ":", "\n", "# streams for each data in the batch", "\n", "        ", "streams", "=", "[", "None", "]", "*", "self", ".", "bsz", "\n", "\n", "data", "=", "torch", ".", "LongTensor", "(", "self", ".", "bptt", ",", "self", ".", "bsz", ")", "\n", "target", "=", "torch", ".", "LongTensor", "(", "self", ".", "bptt", ",", "self", ".", "bsz", ")", "\n", "\n", "n_retain", "=", "0", "\n", "\n", "while", "True", ":", "\n", "# data   : [n_retain+bptt x bsz]", "\n", "# target : [bptt x bsz]", "\n", "            ", "data", "[", "n_retain", ":", "]", ".", "fill_", "(", "-", "1", ")", "\n", "target", ".", "fill_", "(", "-", "1", ")", "\n", "\n", "valid_batch", "=", "True", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "bsz", ")", ":", "\n", "                ", "n_filled", "=", "0", "\n", "try", ":", "\n", "                    ", "while", "n_filled", "<", "self", ".", "bptt", ":", "\n", "                        ", "if", "streams", "[", "i", "]", "is", "None", "or", "len", "(", "streams", "[", "i", "]", ")", "<=", "1", ":", "\n", "                            ", "streams", "[", "i", "]", "=", "next", "(", "sent_stream", ")", "\n", "# number of new tokens to fill in", "\n", "", "n_new", "=", "min", "(", "len", "(", "streams", "[", "i", "]", ")", "-", "1", ",", "self", ".", "bptt", "-", "n_filled", ")", "\n", "# first n_retain tokens are retained from last batch", "\n", "data", "[", "n_retain", "+", "n_filled", ":", "n_retain", "+", "n_filled", "+", "n_new", ",", "i", "]", "=", "streams", "[", "i", "]", "[", ":", "n_new", "]", "\n", "target", "[", "n_filled", ":", "n_filled", "+", "n_new", ",", "i", "]", "=", "streams", "[", "i", "]", "[", "1", ":", "n_new", "+", "1", "]", "\n", "streams", "[", "i", "]", "=", "streams", "[", "i", "]", "[", "n_new", ":", "]", "\n", "n_filled", "+=", "n_new", "\n", "", "", "except", "StopIteration", ":", "\n", "                    ", "valid_batch", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "not", "valid_batch", ":", "\n", "                ", "return", "\n", "\n", "", "data_out", "=", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "target_out", "=", "target", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "yield", "data_out", ",", "target_out", ",", "self", ".", "bptt", "\n", "\n", "n_retain", "=", "min", "(", "data", ".", "size", "(", "0", ")", ",", "self", ".", "ext_len", ")", "\n", "if", "n_retain", ">", "0", ":", "\n", "                ", "data", "[", ":", "n_retain", "]", "=", "data", "[", "-", "n_retain", ":", "]", "\n", "", "data", ".", "resize_", "(", "n_retain", "+", "self", ".", "bptt", ",", "data", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMShuffledIterator.__iter__": [[402, 408], ["tokenization_transfo_xl.LMShuffledIterator.get_sent_stream", "tokenization_transfo_xl.LMShuffledIterator.stream_iterator"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMMultiFileIterator.get_sent_stream", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMShuffledIterator.stream_iterator"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "# sent_stream is an iterator", "\n", "        ", "sent_stream", "=", "self", ".", "get_sent_stream", "(", ")", "\n", "\n", "for", "batch", "in", "self", ".", "stream_iterator", "(", "sent_stream", ")", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMMultiFileIterator.__init__": [[411, 423], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "paths", ",", "vocab", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ",", "\n", "shuffle", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "paths", "=", "paths", "\n", "self", ".", "vocab", "=", "vocab", "\n", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMMultiFileIterator.get_sent_stream": [[424, 431], ["tokenization_transfo_xl.LMMultiFileIterator.vocab.encode_file", "iter", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file"], ["", "def", "get_sent_stream", "(", "self", ",", "path", ")", ":", "\n", "        ", "sents", "=", "self", ".", "vocab", ".", "encode_file", "(", "path", ",", "add_double_eos", "=", "True", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "sents", ")", "\n", "", "sent_stream", "=", "iter", "(", "sents", ")", "\n", "\n", "return", "sent_stream", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMMultiFileIterator.__iter__": [[432, 441], ["numpy.random.shuffle", "tokenization_transfo_xl.LMMultiFileIterator.get_sent_stream", "tokenization_transfo_xl.LMMultiFileIterator.stream_iterator"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMMultiFileIterator.get_sent_stream", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.LMShuffledIterator.stream_iterator"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "paths", ")", "\n", "\n", "", "for", "path", "in", "self", ".", "paths", ":", "\n", "# sent_stream is an iterator", "\n", "            ", "sent_stream", "=", "self", ".", "get_sent_stream", "(", "path", ")", "\n", "for", "batch", "in", "self", ".", "stream_iterator", "(", "sent_stream", ")", ":", "\n", "                ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLCorpus.from_pretrained": [[444, 486], ["TransfoXLTokenizer.from_pretrained", "cls", "torch.load", "torch.load.items", "os.path.join", "file_utils.cached_path", "logger.info", "logger.info", "torch.tensor", "torch.tensor", "torch.tensor", "logger.error", "PRETRAINED_CORPUS_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.cached_path"], ["    ", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "cache_dir", "=", "None", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a pre-processed corpus.\n        \"\"\"", "\n", "vocab", "=", "TransfoXLTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "if", "pretrained_model_name_or_path", "in", "PRETRAINED_CORPUS_ARCHIVE_MAP", ":", "\n", "            ", "corpus_file", "=", "PRETRAINED_CORPUS_ARCHIVE_MAP", "[", "pretrained_model_name_or_path", "]", "\n", "", "else", ":", "\n", "            ", "corpus_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "CORPUS_NAME", ")", "\n", "# redirect to the cache, if necessary", "\n", "", "try", ":", "\n", "            ", "resolved_corpus_file", "=", "cached_path", "(", "corpus_file", ",", "cache_dir", "=", "cache_dir", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "\"Corpus '{}' was not found in corpus list ({}). \"", "\n", "\"We assumed '{}' was a path or url but couldn't find files {} \"", "\n", "\"at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "PRETRAINED_CORPUS_ARCHIVE_MAP", ".", "keys", "(", ")", ")", ",", "\n", "pretrained_model_name_or_path", ",", "\n", "corpus_file", ")", ")", "\n", "return", "None", "\n", "", "if", "resolved_corpus_file", "==", "corpus_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading corpus file {}\"", ".", "format", "(", "corpus_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading corpus file {} from cache at {}\"", ".", "format", "(", "\n", "corpus_file", ",", "resolved_corpus_file", ")", ")", "\n", "\n", "# Instantiate tokenizer.", "\n", "", "corpus", "=", "cls", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "corpus_dict", "=", "torch", ".", "load", "(", "resolved_corpus_file", ")", "\n", "for", "key", ",", "value", "in", "corpus_dict", ".", "items", "(", ")", ":", "\n", "            ", "corpus", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "corpus", ".", "vocab", "=", "vocab", "\n", "if", "corpus", ".", "train", "is", "not", "None", ":", "\n", "            ", "corpus", ".", "train", "=", "torch", ".", "tensor", "(", "corpus", ".", "train", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "if", "corpus", ".", "valid", "is", "not", "None", ":", "\n", "            ", "corpus", ".", "valid", "=", "torch", ".", "tensor", "(", "corpus", ".", "valid", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "if", "corpus", ".", "test", "is", "not", "None", ":", "\n", "            ", "corpus", ".", "test", "=", "torch", ".", "tensor", "(", "corpus", ".", "test", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "return", "corpus", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLCorpus.__init__": [[487, 493], ["tokenization_transfo_xl.TransfoXLTokenizer"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "TransfoXLTokenizer", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "dataset", "=", "None", "\n", "self", ".", "train", "=", "None", "\n", "self", ".", "valid", "=", "None", "\n", "self", ".", "test", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLCorpus.build_corpus": [[494, 532], ["tokenization_transfo_xl.TransfoXLCorpus.vocab.build_vocab", "tokenization_transfo_xl.TransfoXLCorpus.vocab.count_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.count_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.count_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "os.path.join", "os.path.join", "os.path.join", "tokenization_transfo_xl.TransfoXLCorpus.vocab.count_file", "os.path.join", "os.path.join", "os.path.join", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "os.path.join", "os.path.join", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.build_vocab", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file"], ["", "def", "build_corpus", "(", "self", ",", "path", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ")", "\n", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ")", "\n", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'wt103'", ":", "\n", "            ", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "            ", "train_path_pattern", "=", "os", ".", "path", ".", "join", "(", "\n", "path", ",", "'1-billion-word-language-modeling-benchmark-r13output'", ",", "\n", "'training-monolingual.tokenized.shuffled'", ",", "'news.en-*'", ")", "\n", "train_paths", "=", "glob", ".", "glob", "(", "train_path_pattern", ")", "\n", "# the vocab will load from file when build_vocab() is called", "\n", "\n", "", "self", ".", "vocab", ".", "build_vocab", "(", ")", "\n", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", "]", ":", "\n", "            ", "self", ".", "train", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "", "elif", "self", ".", "dataset", "in", "[", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "self", ".", "train", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "            ", "self", ".", "train", "=", "train_paths", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "False", ",", "add_double_eos", "=", "True", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "False", ",", "add_double_eos", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLCorpus.get_iterator": [[533, 548], ["tokenization_transfo_xl.LMOrderedIterator", "tokenization_transfo_xl.LMMultiFileIterator", "tokenization_transfo_xl.LMOrderedIterator", "tokenization_transfo_xl.LMShuffledIterator"], "methods", ["None"], ["", "", "def", "get_iterator", "(", "self", ",", "split", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "                ", "data_iter", "=", "LMOrderedIterator", "(", "self", ".", "train", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "                ", "kwargs", "[", "'shuffle'", "]", "=", "True", "\n", "data_iter", "=", "LMMultiFileIterator", "(", "self", ".", "train", ",", "self", ".", "vocab", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "elif", "split", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "            ", "data", "=", "self", ".", "valid", "if", "split", "==", "'valid'", "else", "self", ".", "test", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "                ", "data_iter", "=", "LMOrderedIterator", "(", "data", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "                ", "data_iter", "=", "LMShuffledIterator", "(", "data", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "return", "data_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.get_lm_corpus": [[550, 580], ["os.path.join", "os.path.join", "os.path.exists", "logger.info", "torch.load", "os.path.exists", "logger.info", "logger.info", "tokenization_transfo_xl.TransfoXLCorpus", "torch.save", "io.open", "pickle.load", "os.path.join"], "function", ["None"], ["", "", "def", "get_lm_corpus", "(", "datadir", ",", "dataset", ")", ":", "\n", "    ", "fn", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'cache.pt'", ")", "\n", "fn_pickle", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'cache.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "fn", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Loading cached dataset...'", ")", "\n", "corpus", "=", "torch", ".", "load", "(", "fn_pickle", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "fn", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Loading cached dataset from pickle...'", ")", "\n", "with", "open", "(", "fn", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "            ", "corpus", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "'Producing dataset {}...'", ".", "format", "(", "dataset", ")", ")", "\n", "kwargs", "=", "{", "}", "\n", "if", "dataset", "in", "[", "'wt103'", ",", "'wt2'", "]", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "'<eos>'", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "False", "\n", "", "elif", "dataset", "==", "'ptb'", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "'<eos>'", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "True", "\n", "", "elif", "dataset", "==", "'lm1b'", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "False", "\n", "kwargs", "[", "'vocab_file'", "]", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'1b_word_vocab.txt'", ")", "\n", "", "elif", "dataset", "in", "[", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "pass", "\n", "\n", "", "corpus", "=", "TransfoXLCorpus", "(", "datadir", ",", "dataset", ",", "**", "kwargs", ")", "\n", "torch", ".", "save", "(", "corpus", ",", "fn", ")", "\n", "\n", "", "return", "corpus", "\n", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_gpt2.GPT2Config.__init__": [[57, 113], ["configuration_utils.PretrainedConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "vocab_size", "=", "50257", ",", "\n", "n_positions", "=", "1024", ",", "\n", "n_ctx", "=", "1024", ",", "\n", "n_embd", "=", "768", ",", "\n", "n_layer", "=", "12", ",", "\n", "n_head", "=", "12", ",", "\n", "resid_pdrop", "=", "0.1", ",", "\n", "embd_pdrop", "=", "0.1", ",", "\n", "attn_pdrop", "=", "0.1", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "summary_type", "=", "'cls_index'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "None", ",", "\n", "summary_proj_to_labels", "=", "True", ",", "\n", "summary_first_dropout", "=", "0.1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Constructs GPT2Config.\n\n        Args:\n            vocab_size: Vocabulary size of `inputs_ids` in `GPT2Model` or a configuration json file.\n            n_positions: Number of positional embeddings.\n            n_ctx: Size of the causal mask (usually same as n_positions).\n            n_embd: Dimensionality of the embeddings and hidden states.\n            n_layer: Number of hidden layers in the Transformer encoder.\n            n_head: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            layer_norm_epsilon: epsilon to use in the layer norm layers\n            resid_pdrop: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attn_pdrop: The dropout ratio for the attention\n                probabilities.\n            embd_pdrop: The dropout ratio for the embeddings.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "super", "(", "GPT2Config", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_positions", "=", "n_positions", "\n", "self", ".", "n_embd", "=", "n_embd", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "resid_pdrop", "=", "resid_pdrop", "\n", "self", ".", "embd_pdrop", "=", "embd_pdrop", "\n", "self", ".", "attn_pdrop", "=", "attn_pdrop", "\n", "self", ".", "layer_norm_epsilon", "=", "layer_norm_epsilon", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_first_dropout", "=", "summary_first_dropout", "\n", "self", ".", "summary_proj_to_labels", "=", "summary_proj_to_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_gpt2.GPT2Config.max_position_embeddings": [[114, 117], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_gpt2.GPT2Config.hidden_size": [[118, 121], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_embd", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_gpt2.GPT2Config.num_attention_heads": [[122, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_gpt2.GPT2Config.num_hidden_layers": [[126, 129], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_auto.TFAutoModel.__init__": [[80, 82], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"TFAutoModel is designed to be instantiated \"", "\n", "\"using the `TFAutoModel.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_auto.TFAutoModel.from_pretrained": [[84, 187], ["ValueError", "modeling_tf_t5.TFT5Model.from_pretrained", "modeling_tf_distilbert.TFDistilBertModel.from_pretrained", "modeling_tf_albert.TFAlbertModel.from_pretrained", "modeling_tf_roberta.TFRobertaModel.from_pretrained", "modeling_tf_bert.TFBertModel.from_pretrained", "modeling_tf_openai.TFOpenAIGPTModel.from_pretrained", "modeling_tf_gpt2.TFGPT2Model.from_pretrained", "modeling_tf_transfo_xl.TFTransfoXLModel.from_pretrained", "modeling_tf_xlnet.TFXLNetModel.from_pretrained", "modeling_tf_xlm.TFXLMModel.from_pretrained", "modeling_tf_ctrl.TFCTRLModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the base model classes of the library\n        from a pre-trained model configuration.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `t5`: TFT5Model (T5 model)\n            - contains `distilbert`: TFDistilBertModel (DistilBERT model)\n            - contains `roberta`: TFRobertaModel (RoBERTa model)\n            - contains `bert`: TFTFBertModel (Bert model)\n            - contains `openai-gpt`: TFOpenAIGPTModel (OpenAI GPT model)\n            - contains `gpt2`: TFGPT2Model (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TFTransfoXLModel (Transformer-XL model)\n            - contains `xlnet`: TFXLNetModel (XLNet model)\n            - contains `ctrl`: TFCTRLModel (CTRL model)\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `PyTorch, TF 1.X or TF 2.0 checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In the case of a PyTorch checkpoint, ``from_pt`` should be set to True and a configuration object should be provided as ``config`` argument.\n\n            from_pt: (`Optional`) Boolean\n                Set to True if the Checkpoint is a PyTorch checkpoint.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = TFAutoModel.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = TFAutoModel.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = TFAutoModel.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = TFAutoModel.from_pretrained('./pt_model/bert_pytorch_model.bin', from_pt=True, config=config)\n\n        \"\"\"", "\n", "if", "'t5'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFT5Model", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFDistilBertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'albert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFAlbertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFRobertaModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFBertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFOpenAIGPTModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFGPT2Model", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFTransfoXLModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLNetModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLMModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'ctrl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFCTRLModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta', 'ctrl'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_auto.TFAutoModelWithLMHead.__init__": [[214, 216], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"TFAutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `TFAutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_auto.TFAutoModelWithLMHead.from_pretrained": [[218, 325], ["ValueError", "modeling_tf_t5.TFT5WithLMHeadModel.from_pretrained", "modeling_tf_distilbert.TFDistilBertForMaskedLM.from_pretrained", "modeling_tf_albert.TFAlbertForMaskedLM.from_pretrained", "modeling_tf_roberta.TFRobertaForMaskedLM.from_pretrained", "modeling_tf_bert.TFBertForMaskedLM.from_pretrained", "modeling_tf_openai.TFOpenAIGPTLMHeadModel.from_pretrained", "modeling_tf_gpt2.TFGPT2LMHeadModel.from_pretrained", "modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.from_pretrained", "modeling_tf_xlnet.TFXLNetLMHeadModel.from_pretrained", "modeling_tf_xlm.TFXLMWithLMHeadModel.from_pretrained", "modeling_tf_ctrl.TFCTRLLMHeadModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the language modeling model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `t5`: TFT5WithLMHeadModel (T5 model)\n            - contains `distilbert`: TFDistilBertForMaskedLM (DistilBERT model)\n            - contains `roberta`: TFRobertaForMaskedLM (RoBERTa model)\n            - contains `bert`: TFBertForMaskedLM (Bert model)\n            - contains `openai-gpt`: TFOpenAIGPTLMHeadModel (OpenAI GPT model)\n            - contains `gpt2`: TFGPT2LMHeadModel (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TFTransfoXLLMHeadModel (Transformer-XL model)\n            - contains `xlnet`: TFXLNetLMHeadModel (XLNet model)\n            - contains `xlm`: TFXLMWithLMHeadModel (XLM model)\n            - contains `ctrl`: TFCTRLLMHeadModel (CTRL model)\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `PyTorch, TF 1.X or TF 2.0 checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In the case of a PyTorch checkpoint, ``from_pt`` should be set to True and a configuration object should be provided as ``config`` argument.\n\n            from_pt: (`Optional`) Boolean\n                Set to True if the Checkpoint is a PyTorch checkpoint.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = TFAutoModelWithLMHead.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = TFAutoModelWithLMHead.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = TFAutoModelWithLMHead.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = TFAutoModelWithLMHead.from_pretrained('./pt_model/bert_pytorch_model.bin', from_pt=True, config=config)\n\n        \"\"\"", "\n", "if", "'t5'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFT5WithLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFDistilBertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'albert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFAlbertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFRobertaForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFBertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFOpenAIGPTLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFGPT2LMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFTransfoXLLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLNetLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLMWithLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'ctrl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFCTRLLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta', 'ctrl'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_auto.TFAutoModelForSequenceClassification.__init__": [[347, 349], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"TFAutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `TFAutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_auto.TFAutoModelForSequenceClassification.from_pretrained": [[351, 445], ["ValueError", "modeling_tf_distilbert.TFDistilBertForSequenceClassification.from_pretrained", "modeling_tf_albert.TFAlbertForSequenceClassification.from_pretrained", "modeling_tf_roberta.TFRobertaForSequenceClassification.from_pretrained", "modeling_tf_bert.TFBertForSequenceClassification.from_pretrained", "modeling_tf_xlnet.TFXLNetForSequenceClassification.from_pretrained", "modeling_tf_xlm.TFXLMForSequenceClassification.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the sequence classification model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: TFDistilBertForSequenceClassification (DistilBERT model)\n            - contains `roberta`: TFRobertaForSequenceClassification (RoBERTa model)\n            - contains `bert`: TFBertForSequenceClassification (Bert model)\n            - contains `xlnet`: TFXLNetForSequenceClassification (XLNet model)\n            - contains `xlm`: TFXLMForSequenceClassification (XLM model)\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `PyTorch, TF 1.X or TF 2.0 checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In the case of a PyTorch checkpoint, ``from_pt`` should be set to True and a configuration object should be provided as ``config`` argument.\n\n            from_pt: (`Optional`) Boolean\n                Set to True if the Checkpoint is a PyTorch checkpoint.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = TFAutoModelForSequenceClassification.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = TFAutoModelForSequenceClassification.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = TFAutoModelForSequenceClassification.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = TFAutoModelForSequenceClassification.from_pretrained('./pt_model/bert_pytorch_model.bin', from_pt=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFDistilBertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'albert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFAlbertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFRobertaForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFBertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLNetForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLMForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'xlnet', 'xlm', 'roberta'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_auto.TFAutoModelForQuestionAnswering.__init__": [[466, 468], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"TFAutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `TFAutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_auto.TFAutoModelForQuestionAnswering.from_pretrained": [[470, 559], ["ValueError", "modeling_tf_distilbert.TFDistilBertForQuestionAnswering.from_pretrained", "modeling_tf_bert.TFBertForQuestionAnswering.from_pretrained", "modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple.from_pretrained", "modeling_tf_xlm.TFXLMForQuestionAnsweringSimple.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the question answering model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: TFDistilBertForQuestionAnswering (DistilBERT model)\n            - contains `bert`: TFBertForQuestionAnswering (Bert model)\n            - contains `xlnet`: TFXLNetForQuestionAnswering (XLNet model)\n            - contains `xlm`: TFXLMForQuestionAnswering (XLM model)\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `PyTorch, TF 1.X or TF 2.0 checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In the case of a PyTorch checkpoint, ``from_pt`` should be set to True and a configuration object should be provided as ``config`` argument.\n\n            from_pt: (`Optional`) Boolean\n                Set to True if the Checkpoint is a PyTorch checkpoint.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = TFAutoModelForQuestionAnswering.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = TFAutoModelForQuestionAnswering.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = TFAutoModelForQuestionAnswering.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = TFAutoModelForQuestionAnswering.from_pretrained('./pt_model/bert_pytorch_model.bin', from_pt=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFDistilBertForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFBertForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLNetForQuestionAnsweringSimple", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TFXLMForQuestionAnsweringSimple", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'xlnet', 'xlm'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFPreTrainedModel.dummy_inputs": [[54, 62], ["tensorflow.constant"], "methods", ["None"], ["@", "property", "\n", "def", "dummy_inputs", "(", "self", ")", ":", "\n", "        ", "\"\"\" Dummy inputs to build the network.\n\n        Returns:\n            tf.Tensor with dummy inputs\n        \"\"\"", "\n", "return", "{", "'input_ids'", ":", "tf", ".", "constant", "(", "DUMMY_INPUTS", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFPreTrainedModel.__init__": [[63, 74], ["super().__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["", "def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFPreTrainedModel", ",", "self", ")", ".", "__init__", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "PretrainedConfig", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameter config in `{}(config)` should be an instance of class `PretrainedConfig`. \"", "\n", "\"To create a model from a pretrained model use \"", "\n", "\"`model = {}.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__class__", ".", "__name__", "\n", ")", ")", "\n", "# Save config in model", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFPreTrainedModel.get_input_embeddings": [[75, 83], ["getattr", "getattr.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTModel.get_input_embeddings"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get model's input embeddings\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "if", "base_model", "is", "not", "self", ":", "\n", "            ", "return", "base_model", ".", "get_input_embeddings", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFPreTrainedModel.get_output_embeddings": [[84, 89], ["None"], "methods", ["None"], ["", "", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get model's output embeddings\n            Return None if the model doesn't have output embeddings\n        \"\"\"", "\n", "return", "None", "# Overwrite for models with output embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFPreTrainedModel._get_resized_embeddings": [[90, 104], ["None"], "methods", ["None"], ["", "def", "_get_resized_embeddings", "(", "self", ",", "old_embeddings", ",", "new_num_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\" Build a resized Embedding Variable from a provided token Embedding Module.\n            Increasing the size will add newly initialized vectors at the end\n            Reducing the size will remove vectors from the end\n\n        Args:\n            new_num_tokens: (`optional`) int\n                New number of tokens in the embedding matrix.\n                Increasing the size will add newly initialized vectors at the end\n                Reducing the size will remove vectors from the end\n                If not provided or None: return the provided token Embedding Module.\n        Return: ``tf.Variable``\n            Pointer to the resized Embedding Module or the old Embedding Module if new_num_tokens is None\n        \"\"\"", "\n", "# if new_num_tokens is None:", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFPreTrainedModel.resize_token_embeddings": [[124, 138], ["None"], "methods", ["None"], ["", "def", "resize_token_embeddings", "(", "self", ",", "new_num_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\" Resize input token embeddings matrix of the model if new_num_tokens != config.vocab_size.\n        Take care of tying weights embeddings afterwards if the model class has a `tie_weights()` method.\n\n        Arguments:\n\n            new_num_tokens: (`optional`) int:\n                New number of tokens in the embedding matrix. Increasing the size will add newly initialized vectors at the end. Reducing the size will remove vectors from the end. \n                If not provided or None: does nothing and just returns a pointer to the input tokens ``tf.Variable`` Module of the model.\n\n        Return: ``tf.Variable``\n            Pointer to the input tokens Embeddings Module of the model\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFPreTrainedModel.prune_heads": [[139, 147], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the base model.\n\n            Arguments:\n\n                heads_to_prune: dict with keys being selected layer indices (`int`) and associated values being the list of heads to prune in said layer (list of `int`).\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFPreTrainedModel.save_pretrained": [[148, 161], ["os.path.isdir", "modeling_tf_utils.TFPreTrainedModel.config.save_pretrained", "os.path.join", "modeling_tf_utils.TFPreTrainedModel.save_weights", "logger.info"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.save_pretrained"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a model and its configuration file to a directory, so that it\n            can be re-loaded using the `:func:`~transformers.PreTrainedModel.from_pretrained`` class method.\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ",", "\"Saving path should be a directory where the model and configuration can be saved\"", "\n", "\n", "# Save configuration file", "\n", "self", ".", "config", ".", "save_pretrained", "(", "save_directory", ")", "\n", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "TF2_WEIGHTS_NAME", ")", "\n", "self", ".", "save_weights", "(", "output_model_file", ")", "\n", "logger", ".", "info", "(", "\"Model weights saved in {}\"", ".", "format", "(", "output_model_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFPreTrainedModel.from_pretrained": [[162, 312], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "cls", "cls.", "os.path.isfile", "cls.load_weights", "cls.", "cls.config_class.from_pretrained", "modeling_tf_pytorch_utils.load_pytorch_checkpoint_in_tf2_model", "os.path.isdir", "file_utils.cached_path", "logger.info", "logger.info", "os.path.isfile", "os.path.join", "os.path.join", "os.path.isfile", "file_utils.is_remote_url", "os.path.isfile", "logger.error", "logger.error", "os.path.isfile", "os.path.join", "EnvironmentError", "file_utils.hf_bucket_url", "os.path.join", "EnvironmentError", "cls.pretrained_model_archive_map.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.load_pytorch_checkpoint_in_tf2_model", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.cached_path", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_remote_url", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.hf_bucket_url"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Instantiate a pretrained TF 2.0 model from a pre-trained model configuration.\n\n        The model is set in evaluation mode by default using ``model.eval()`` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with ``model.train()``\n\n        The warning ``Weights from XXX not initialized from pretrained model`` means that the weights of XXX do not come pre-trained with the rest of the model.\n        It is up to you to train those weights with a downstream fine-tuning task.\n\n        The warning ``Weights from XXX not used in YYY`` means that the layer XXX is not used by YYY, therefore those weights are discarded.\n\n        Parameters:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `PyTorch state_dict save file` (e.g. `./pt_model/pytorch_model.bin`). In this case, ``from_pt`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the PyTorch checkpoint in a TensorFlow model using the provided conversion scripts and loading the TensorFlow model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            from_pt: (`optional`) boolean, default False:\n                Load the model weights from a PyTorch state_dict save file (see docstring of pretrained_model_name_or_path argument).\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = BertModel.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = BertModel.from_pretrained('./test/saved_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = BertModel.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = BertConfig.from_json_file('./tf_model/my_tf_model_config.json')\n            model = BertModel.from_pretrained('./tf_model/my_tf_checkpoint.ckpt.index', from_pt=True, config=config)\n\n        \"\"\"", "\n", "config", "=", "kwargs", ".", "pop", "(", "'config'", ",", "None", ")", "\n", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "from_pt", "=", "kwargs", ".", "pop", "(", "'from_pt'", ",", "False", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "resume_download", "=", "kwargs", ".", "pop", "(", "'resume_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "\n", "# Load config", "\n", "if", "config", "is", "None", ":", "\n", "            ", "config", ",", "model_kwargs", "=", "cls", ".", "config_class", ".", "from_pretrained", "(", "\n", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "\n", "cache_dir", "=", "cache_dir", ",", "return_unused_kwargs", "=", "True", ",", "\n", "force_download", "=", "force_download", ",", "\n", "resume_download", "=", "resume_download", ",", "\n", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "model_kwargs", "=", "kwargs", "\n", "\n", "# Load model", "\n", "", "if", "pretrained_model_name_or_path", "is", "not", "None", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_model_archive_map", ":", "\n", "                ", "archive_file", "=", "cls", ".", "pretrained_model_archive_map", "[", "pretrained_model_name_or_path", "]", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "                ", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF2_WEIGHTS_NAME", ")", ")", ":", "\n", "# Load from a TF 2.0 checkpoint", "\n", "                    ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF2_WEIGHTS_NAME", ")", "\n", "", "elif", "from_pt", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "WEIGHTS_NAME", ")", ")", ":", "\n", "# Load from a PyTorch checkpoint", "\n", "                    ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "WEIGHTS_NAME", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "EnvironmentError", "(", "\"Error no file named {} found in directory {} or `from_pt` set to False\"", ".", "format", "(", "\n", "[", "WEIGHTS_NAME", ",", "TF2_WEIGHTS_NAME", "]", ",", "\n", "pretrained_model_name_or_path", ")", ")", "\n", "", "", "elif", "os", ".", "path", ".", "isfile", "(", "pretrained_model_name_or_path", ")", "or", "is_remote_url", "(", "pretrained_model_name_or_path", ")", ":", "\n", "                ", "archive_file", "=", "pretrained_model_name_or_path", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "pretrained_model_name_or_path", "+", "\".index\"", ")", ":", "\n", "                ", "archive_file", "=", "pretrained_model_name_or_path", "+", "\".index\"", "\n", "", "else", ":", "\n", "                ", "archive_file", "=", "hf_bucket_url", "(", "pretrained_model_name_or_path", ",", "postfix", "=", "TF2_WEIGHTS_NAME", ")", "\n", "if", "from_pt", ":", "\n", "                    ", "raise", "EnvironmentError", "(", "\"Loading a TF model from a PyTorch checkpoint is not supported when using a model identifier name.\"", ")", "\n", "\n", "# redirect to the cache, if necessary", "\n", "", "", "try", ":", "\n", "                ", "resolved_archive_file", "=", "cached_path", "(", "archive_file", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "\n", "resume_download", "=", "resume_download", ",", "proxies", "=", "proxies", ")", "\n", "", "except", "EnvironmentError", "as", "e", ":", "\n", "                ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_model_archive_map", ":", "\n", "                    ", "logger", ".", "error", "(", "\n", "\"Couldn't reach server at '{}' to download pretrained weights.\"", ".", "format", "(", "\n", "archive_file", ")", ")", "\n", "", "else", ":", "\n", "                    ", "logger", ".", "error", "(", "\n", "\"Model name '{}' was not found in model name list ({}). \"", "\n", "\"We assumed '{}' was a path or url but couldn't find any file \"", "\n", "\"associated to this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "cls", ".", "pretrained_model_archive_map", ".", "keys", "(", ")", ")", ",", "\n", "archive_file", ")", ")", "\n", "", "raise", "e", "\n", "", "if", "resolved_archive_file", "==", "archive_file", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading weights file {}\"", ".", "format", "(", "archive_file", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading weights file {} from cache at {}\"", ".", "format", "(", "\n", "archive_file", ",", "resolved_archive_file", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "resolved_archive_file", "=", "None", "\n", "\n", "# Instantiate model.", "\n", "", "model", "=", "cls", "(", "config", ",", "*", "model_args", ",", "**", "model_kwargs", ")", "\n", "\n", "if", "from_pt", ":", "\n", "# Load from a PyTorch checkpoint", "\n", "            ", "return", "load_pytorch_checkpoint_in_tf2_model", "(", "model", ",", "resolved_archive_file", ",", "allow_missing_keys", "=", "True", ")", "\n", "\n", "", "ret", "=", "model", "(", "model", ".", "dummy_inputs", ",", "training", "=", "False", ")", "# build the network with dummy inputs", "\n", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "resolved_archive_file", ")", ",", "\"Error retrieving file {}\"", ".", "format", "(", "resolved_archive_file", ")", "\n", "# 'by_name' allow us to do transfer learning by skipping/adding layers", "\n", "# see https://github.com/tensorflow/tensorflow/blob/00fad90125b18b80fe054de1055770cfb8fe4ba3/tensorflow/python/keras/engine/network.py#L1339-L1357", "\n", "model", ".", "load_weights", "(", "resolved_archive_file", ",", "by_name", "=", "True", ")", "\n", "\n", "ret", "=", "model", "(", "model", ".", "dummy_inputs", ",", "training", "=", "False", ")", "# Make sure restore ops are run", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFConv1D.__init__": [[314, 322], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "nx", ",", "initializer_range", "=", "0.02", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" TFConv1D layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)\n            Basically works like a Linear layer but the weights are transposed\n        \"\"\"", "\n", "super", "(", "TFConv1D", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "nf", "=", "nf", "\n", "self", ".", "nx", "=", "nx", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFConv1D.build": [[323, 332], ["modeling_tf_utils.TFConv1D.add_weight", "modeling_tf_utils.TFConv1D.add_weight", "modeling_tf_utils.get_initializer", "tensorflow.zeros_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "weight", "=", "self", ".", "add_weight", "(", "\n", "\"weight\"", ",", "\n", "shape", "=", "[", "self", ".", "nx", ",", "self", ".", "nf", "]", ",", "\n", "initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", ")", "\n", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "\n", "\"bias\"", ",", "\n", "shape", "=", "[", "1", ",", "self", ".", "nf", "]", ",", "\n", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFConv1D.call": [[333, 342], ["tensorflow.reshape", "tensorflow.reshape", "modeling_tf_utils.shape_list", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "bz", ",", "sl", "=", "shape_list", "(", "x", ")", "[", ":", "2", "]", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "self", ".", "nx", "]", ")", "\n", "x", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "+", "self", ".", "bias", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "bz", ",", "sl", ",", "self", ".", "nf", "]", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFSharedEmbeddings.__init__": [[347, 352], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "hidden_size", ",", "initializer_range", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFSharedEmbeddings", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "initializer_range", "=", "hidden_size", "**", "-", "0.5", "if", "initializer_range", "is", "None", "else", "initializer_range", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFSharedEmbeddings.build": [[353, 363], ["modeling_tf_utils.TFSharedEmbeddings.add_weight", "super().build", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"Build shared word embedding layer\n        Shared weights logic adapted from\n            https://github.com/tensorflow/models/blob/a009f4fb9d2fc4949e32192a944688925ef78659/official/transformer/v2/embedding_layer.py#L24\n        \"\"\"", "\n", "self", ".", "weight", "=", "self", ".", "add_weight", "(", "\n", "\"weight\"", ",", "\n", "shape", "=", "[", "self", ".", "vocab_size", ",", "self", ".", "hidden_size", "]", ",", "\n", "initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", ")", "\n", "super", "(", "TFSharedEmbeddings", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFSharedEmbeddings.call": [[364, 385], ["modeling_tf_utils.TFSharedEmbeddings._embedding", "modeling_tf_utils.TFSharedEmbeddings._linear", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings._embedding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings._linear"], ["", "def", "call", "(", "self", ",", "inputs", ",", "mode", "=", "\"embedding\"", ")", ":", "\n", "        ", "\"\"\"Get token embeddings of inputs.\n        Args:\n            inputs: list of three int64 tensors with shape [batch_size, length]: (input_ids, position_ids, token_type_ids)\n            mode: string, a valid value is one of \"embedding\" and \"linear\".\n        Returns:\n            outputs: (1) If mode == \"embedding\", output embedding tensor, float32 with\n                shape [batch_size, length, embedding_size]; (2) mode == \"linear\", output\n                linear tensor, float32 with shape [batch_size, length, vocab_size].\n        Raises:\n            ValueError: if mode is not valid.\n        \n        Shared weights logic adapted from\n            https://github.com/tensorflow/models/blob/a009f4fb9d2fc4949e32192a944688925ef78659/official/transformer/v2/embedding_layer.py#L24\n        \"\"\"", "\n", "if", "mode", "==", "\"embedding\"", ":", "\n", "            ", "return", "self", ".", "_embedding", "(", "inputs", ")", "\n", "", "elif", "mode", "==", "\"linear\"", ":", "\n", "            ", "return", "self", ".", "_linear", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode {} is not valid.\"", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFSharedEmbeddings._embedding": [[386, 389], ["tensorflow.gather"], "methods", ["None"], ["", "", "def", "_embedding", "(", "self", ",", "input_ids", ")", ":", "\n", "        ", "\"\"\"Applies embedding based on inputs tensor.\"\"\"", "\n", "return", "tf", ".", "gather", "(", "self", ".", "weight", ",", "input_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFSharedEmbeddings._linear": [[390, 403], ["tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "_linear", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Computes logits by running inputs through a linear layer.\n            Args:\n                inputs: A float32 tensor with shape [..., hidden_size]\n            Returns:\n                float32 tensor with shape [..., vocab_size].\n        \"\"\"", "\n", "first_dims", "=", "shape_list", "(", "inputs", ")", "[", ":", "-", "1", "]", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "self", ".", "hidden_size", "]", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "weight", ",", "transpose_b", "=", "True", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "logits", ",", "first_dims", "+", "[", "self", ".", "vocab_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFSequenceSummary.__init__": [[420, 451], ["super().__init__", "hasattr", "hasattr", "tensorflow.keras.layers.Dense", "hasattr", "hasattr", "tensorflow.keras.layers.Dropout", "hasattr", "tensorflow.keras.layers.Dropout", "hasattr", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "initializer_range", "=", "0.02", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFSequenceSummary", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "summary_type", "=", "config", ".", "summary_type", "if", "hasattr", "(", "config", ",", "'summary_use_proj'", ")", "else", "'last'", "\n", "if", "self", ".", "summary_type", "==", "'attn'", ":", "\n", "# We should use a standard multi-head attention module with absolute positional embedding for that.", "\n", "# Cf. https://github.com/zihangdai/xlnet/blob/master/modeling.py#L253-L276", "\n", "# We can probably just use the multi-head attention module of PyTorch >=1.1.0", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "has_summary", "=", "hasattr", "(", "config", ",", "'summary_use_proj'", ")", "and", "config", ".", "summary_use_proj", "\n", "if", "self", ".", "has_summary", ":", "\n", "            ", "if", "hasattr", "(", "config", ",", "'summary_proj_to_labels'", ")", "and", "config", ".", "summary_proj_to_labels", "and", "config", ".", "num_labels", ">", "0", ":", "\n", "                ", "num_classes", "=", "config", ".", "num_labels", "\n", "", "else", ":", "\n", "                ", "num_classes", "=", "config", ".", "hidden_size", "\n", "", "self", ".", "summary", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "num_classes", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "initializer_range", ")", ",", "\n", "name", "=", "'summary'", ")", "\n", "\n", "", "self", ".", "has_activation", "=", "hasattr", "(", "config", ",", "'summary_activation'", ")", "and", "config", ".", "summary_activation", "==", "'tanh'", "\n", "if", "self", ".", "has_activation", ":", "\n", "            ", "self", ".", "activation", "=", "tf", ".", "keras", ".", "activations", ".", "tanh", "\n", "\n", "", "self", ".", "has_first_dropout", "=", "hasattr", "(", "config", ",", "'summary_first_dropout'", ")", "and", "config", ".", "summary_first_dropout", ">", "0", "\n", "if", "self", ".", "has_first_dropout", ":", "\n", "            ", "self", ".", "first_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "summary_first_dropout", ")", "\n", "\n", "", "self", ".", "has_last_dropout", "=", "hasattr", "(", "config", ",", "'summary_last_dropout'", ")", "and", "config", ".", "summary_last_dropout", ">", "0", "\n", "if", "self", ".", "has_last_dropout", ":", "\n", "            ", "self", ".", "last_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "summary_last_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.TFSequenceSummary.call": [[452, 505], ["isinstance", "isinstance", "modeling_tf_utils.TFSequenceSummary.first_dropout", "modeling_tf_utils.TFSequenceSummary.summary", "modeling_tf_utils.TFSequenceSummary.activation", "modeling_tf_utils.TFSequenceSummary.last_dropout", "inputs.get", "inputs.get", "len", "tensorflow.reduce_mean", "len", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.gather", "tensorflow.squeeze", "tensorflow.fill", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\" hidden_states: float Tensor in shape [bsz, seq_len, hidden_size], the hidden-states of the last layer.\n            cls_index: [optional] position of the classification token if summary_type == 'cls_index',\n                shape (bsz,) or more generally (bsz, ...) where ... are optional leading dimensions of hidden_states.\n                if summary_type == 'cls_index' and cls_index is None:\n                    we take the last token of the sequence as classification token\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "inputs", ",", "(", "dict", ",", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "hidden_states", "=", "inputs", "\n", "cls_index", "=", "None", "\n", "", "elif", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "hidden_states", "=", "inputs", "[", "0", "]", "\n", "cls_index", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "None", "\n", "assert", "len", "(", "inputs", ")", "<=", "2", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "cls_index", "=", "inputs", ".", "get", "(", "'cls_index'", ",", "None", ")", "\n", "\n", "", "if", "self", ".", "summary_type", "==", "'last'", ":", "\n", "            ", "output", "=", "hidden_states", "[", ":", ",", "-", "1", "]", "\n", "", "elif", "self", ".", "summary_type", "==", "'first'", ":", "\n", "            ", "output", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "", "elif", "self", ".", "summary_type", "==", "'mean'", ":", "\n", "            ", "output", "=", "tf", ".", "reduce_mean", "(", "hidden_states", ",", "axis", "=", "1", ")", "\n", "", "elif", "self", ".", "summary_type", "==", "'cls_index'", ":", "\n", "            ", "hidden_shape", "=", "shape_list", "(", "hidden_states", ")", "# e.g. [batch, num choices, seq length, hidden dims]", "\n", "if", "cls_index", "is", "None", ":", "\n", "                ", "cls_index", "=", "tf", ".", "fill", "(", "hidden_shape", "[", ":", "-", "2", "]", ",", "hidden_shape", "[", "-", "2", "]", "-", "1", ")", "# A tensor full of shape [batch] or [batch, num choices] full of sequence length", "\n", "", "cls_shape", "=", "shape_list", "(", "cls_index", ")", "\n", "if", "len", "(", "cls_shape", ")", "<=", "len", "(", "hidden_shape", ")", "-", "2", ":", "\n", "                ", "cls_index", "=", "cls_index", "[", "...", ",", "tf", ".", "newaxis", "]", "\n", "# else:", "\n", "# cls_index = cls_index[..., tf.newaxis]", "\n", "# cls_index = cls_index.expand((-1,) * (cls_index.dim()-1) + (hidden_states.size(-1),))", "\n", "# shape of cls_index: (bsz, XX, 1, hidden_size) where XX are optional leading dim of hidden_states", "\n", "", "output", "=", "tf", ".", "gather", "(", "hidden_states", ",", "cls_index", ",", "batch_dims", "=", "len", "(", "hidden_shape", ")", "-", "2", ")", "\n", "output", "=", "tf", ".", "squeeze", "(", "output", ",", "axis", "=", "len", "(", "hidden_shape", ")", "-", "2", ")", "# shape of output: (batch, num choices, hidden_size)", "\n", "", "elif", "self", ".", "summary_type", "==", "'attn'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "if", "self", ".", "has_first_dropout", ":", "\n", "            ", "output", "=", "self", ".", "first_dropout", "(", "output", ",", "training", "=", "training", ")", "\n", "\n", "", "if", "self", ".", "has_summary", ":", "\n", "            ", "output", "=", "self", ".", "summary", "(", "output", ")", "\n", "\n", "", "if", "self", ".", "has_activation", ":", "\n", "            ", "output", "=", "self", ".", "activation", "(", "output", ")", "\n", "\n", "", "if", "self", ".", "has_last_dropout", ":", "\n", "            ", "output", "=", "self", ".", "last_dropout", "(", "output", ",", "training", "=", "training", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list": [[506, 511], ["x.shape.as_list", "tensorflow.shape", "enumerate"], "function", ["None"], ["", "", "def", "shape_list", "(", "x", ")", ":", "\n", "    ", "\"\"\"Deal with dynamic shape in tensorflow cleanly.\"\"\"", "\n", "static", "=", "x", ".", "shape", ".", "as_list", "(", ")", "\n", "dynamic", "=", "tf", ".", "shape", "(", "x", ")", "\n", "return", "[", "dynamic", "[", "i", "]", "if", "s", "is", "None", "else", "s", "for", "i", ",", "s", "in", "enumerate", "(", "static", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer": [[512, 520], ["tensorflow.keras.initializers.TruncatedNormal"], "function", ["None"], ["", "def", "get_initializer", "(", "initializer_range", "=", "0.02", ")", ":", "\n", "    ", "\"\"\"Creates a `tf.initializers.truncated_normal` with the given range.\n    Args:\n        initializer_range: float, initializer range for stddev.\n    Returns:\n        TruncatedNormal initializer with stddev = `initializer_range`.\n    \"\"\"", "\n", "return", "tf", ".", "keras", ".", "initializers", ".", "TruncatedNormal", "(", "stddev", "=", "initializer_range", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_roberta_original_pytorch_checkpoint_to_pytorch.convert_roberta_checkpoint_to_pytorch": [[49, 167], ["fairseq.models.roberta.RobertaModel.from_pretrained", "FairseqRobertaModel.from_pretrained.eval", "transformers.modeling_bert.BertConfig", "print", "model.eval", "torch.zeros_like", "range", "FairseqRobertaModel.from_pretrained.encode().unsqueeze", "print", "torch.max().item", "print", "torch.allclose", "print", "pathlib.Path().mkdir", "print", "model.save_pretrained", "transformers.modeling_roberta.RobertaForSequenceClassification", "transformers.modeling_roberta.RobertaForMaskedLM", "model", "Exception", "torch.Size", "FairseqRobertaModel.from_pretrained.encode", "FairseqRobertaModel.from_pretrained.extract_features", "FairseqRobertaModel.from_pretrained.model", "torch.max", "pathlib.Path", "torch.abs"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.save_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode"], ["def", "convert_roberta_checkpoint_to_pytorch", "(", "roberta_checkpoint_path", ",", "pytorch_dump_folder_path", ",", "classification_head", ")", ":", "\n", "    ", "\"\"\"\n    Copy/paste/tweak roberta's weights to our BERT structure.\n    \"\"\"", "\n", "roberta", "=", "FairseqRobertaModel", ".", "from_pretrained", "(", "roberta_checkpoint_path", ")", "\n", "roberta", ".", "eval", "(", ")", "# disable dropout", "\n", "roberta_sent_encoder", "=", "roberta", ".", "model", ".", "decoder", ".", "sentence_encoder", "\n", "config", "=", "BertConfig", "(", "\n", "vocab_size", "=", "roberta_sent_encoder", ".", "embed_tokens", ".", "num_embeddings", ",", "\n", "hidden_size", "=", "roberta", ".", "args", ".", "encoder_embed_dim", ",", "\n", "num_hidden_layers", "=", "roberta", ".", "args", ".", "encoder_layers", ",", "\n", "num_attention_heads", "=", "roberta", ".", "args", ".", "encoder_attention_heads", ",", "\n", "intermediate_size", "=", "roberta", ".", "args", ".", "encoder_ffn_embed_dim", ",", "\n", "max_position_embeddings", "=", "514", ",", "\n", "type_vocab_size", "=", "1", ",", "\n", "layer_norm_eps", "=", "1e-5", ",", "# PyTorch default used in fairseq", "\n", ")", "\n", "if", "classification_head", ":", "\n", "        ", "config", ".", "num_labels", "=", "roberta", ".", "args", ".", "num_classes", "\n", "", "print", "(", "\"Our BERT config:\"", ",", "config", ")", "\n", "\n", "model", "=", "RobertaForSequenceClassification", "(", "config", ")", "if", "classification_head", "else", "RobertaForMaskedLM", "(", "config", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# Now let's copy all the weights.", "\n", "# Embeddings", "\n", "model", ".", "roberta", ".", "embeddings", ".", "word_embeddings", ".", "weight", "=", "roberta_sent_encoder", ".", "embed_tokens", ".", "weight", "\n", "model", ".", "roberta", ".", "embeddings", ".", "position_embeddings", ".", "weight", "=", "roberta_sent_encoder", ".", "embed_positions", ".", "weight", "\n", "model", ".", "roberta", ".", "embeddings", ".", "token_type_embeddings", ".", "weight", ".", "data", "=", "torch", ".", "zeros_like", "(", "model", ".", "roberta", ".", "embeddings", ".", "token_type_embeddings", ".", "weight", ")", "# just zero them out b/c RoBERTa doesn't use them.", "\n", "model", ".", "roberta", ".", "embeddings", ".", "LayerNorm", ".", "weight", "=", "roberta_sent_encoder", ".", "emb_layer_norm", ".", "weight", "\n", "model", ".", "roberta", ".", "embeddings", ".", "LayerNorm", ".", "bias", "=", "roberta_sent_encoder", ".", "emb_layer_norm", ".", "bias", "\n", "\n", "for", "i", "in", "range", "(", "config", ".", "num_hidden_layers", ")", ":", "\n", "# Encoder: start of layer", "\n", "        ", "layer", ":", "BertLayer", "=", "model", ".", "roberta", ".", "encoder", ".", "layer", "[", "i", "]", "\n", "roberta_layer", ":", "TransformerSentenceEncoderLayer", "=", "roberta_sent_encoder", ".", "layers", "[", "i", "]", "\n", "\n", "### self attention", "\n", "self_attn", ":", "BertSelfAttention", "=", "layer", ".", "attention", ".", "self", "\n", "assert", "(", "\n", "roberta_layer", ".", "self_attn", ".", "k_proj", ".", "weight", ".", "data", ".", "shape", "==", "roberta_layer", ".", "self_attn", ".", "q_proj", ".", "weight", ".", "data", ".", "shape", "==", "roberta_layer", ".", "self_attn", ".", "v_proj", ".", "weight", ".", "data", ".", "shape", "==", "torch", ".", "Size", "(", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ")", "\n", ")", "\n", "\n", "self_attn", ".", "query", ".", "weight", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "q_proj", ".", "weight", "\n", "self_attn", ".", "query", ".", "bias", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "q_proj", ".", "bias", "\n", "self_attn", ".", "key", ".", "weight", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "k_proj", ".", "weight", "\n", "self_attn", ".", "key", ".", "bias", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "k_proj", ".", "bias", "\n", "self_attn", ".", "value", ".", "weight", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "v_proj", ".", "weight", "\n", "self_attn", ".", "value", ".", "bias", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "v_proj", ".", "bias", "\n", "\n", "### self-attention output", "\n", "self_output", ":", "BertSelfOutput", "=", "layer", ".", "attention", ".", "output", "\n", "assert", "(", "\n", "self_output", ".", "dense", ".", "weight", ".", "shape", "==", "roberta_layer", ".", "self_attn", ".", "out_proj", ".", "weight", ".", "shape", "\n", ")", "\n", "self_output", ".", "dense", ".", "weight", "=", "roberta_layer", ".", "self_attn", ".", "out_proj", ".", "weight", "\n", "self_output", ".", "dense", ".", "bias", "=", "roberta_layer", ".", "self_attn", ".", "out_proj", ".", "bias", "\n", "self_output", ".", "LayerNorm", ".", "weight", "=", "roberta_layer", ".", "self_attn_layer_norm", ".", "weight", "\n", "self_output", ".", "LayerNorm", ".", "bias", "=", "roberta_layer", ".", "self_attn_layer_norm", ".", "bias", "\n", "\n", "### intermediate", "\n", "intermediate", ":", "BertIntermediate", "=", "layer", ".", "intermediate", "\n", "assert", "(", "\n", "intermediate", ".", "dense", ".", "weight", ".", "shape", "==", "roberta_layer", ".", "fc1", ".", "weight", ".", "shape", "\n", ")", "\n", "intermediate", ".", "dense", ".", "weight", "=", "roberta_layer", ".", "fc1", ".", "weight", "\n", "intermediate", ".", "dense", ".", "bias", "=", "roberta_layer", ".", "fc1", ".", "bias", "\n", "\n", "### output", "\n", "bert_output", ":", "BertOutput", "=", "layer", ".", "output", "\n", "assert", "(", "\n", "bert_output", ".", "dense", ".", "weight", ".", "shape", "==", "roberta_layer", ".", "fc2", ".", "weight", ".", "shape", "\n", ")", "\n", "bert_output", ".", "dense", ".", "weight", "=", "roberta_layer", ".", "fc2", ".", "weight", "\n", "bert_output", ".", "dense", ".", "bias", "=", "roberta_layer", ".", "fc2", ".", "bias", "\n", "bert_output", ".", "LayerNorm", ".", "weight", "=", "roberta_layer", ".", "final_layer_norm", ".", "weight", "\n", "bert_output", ".", "LayerNorm", ".", "bias", "=", "roberta_layer", ".", "final_layer_norm", ".", "bias", "\n", "#### end of layer", "\n", "\n", "", "if", "classification_head", ":", "\n", "        ", "model", ".", "classifier", ".", "dense", ".", "weight", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", ".", "dense", ".", "weight", "\n", "model", ".", "classifier", ".", "dense", ".", "bias", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", ".", "dense", ".", "bias", "\n", "model", ".", "classifier", ".", "out_proj", ".", "weight", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", ".", "out_proj", ".", "weight", "\n", "model", ".", "classifier", ".", "out_proj", ".", "bias", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", ".", "out_proj", ".", "bias", "\n", "", "else", ":", "\n", "# LM Head", "\n", "        ", "model", ".", "lm_head", ".", "dense", ".", "weight", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "dense", ".", "weight", "\n", "model", ".", "lm_head", ".", "dense", ".", "bias", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "dense", ".", "bias", "\n", "model", ".", "lm_head", ".", "layer_norm", ".", "weight", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "layer_norm", ".", "weight", "\n", "model", ".", "lm_head", ".", "layer_norm", ".", "bias", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "layer_norm", ".", "bias", "\n", "model", ".", "lm_head", ".", "decoder", ".", "weight", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "weight", "\n", "model", ".", "lm_head", ".", "bias", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "bias", "\n", "\n", "# Let's check that we get the same results.", "\n", "", "input_ids", ":", "torch", ".", "Tensor", "=", "roberta", ".", "encode", "(", "SAMPLE_TEXT", ")", ".", "unsqueeze", "(", "0", ")", "# batch of size 1", "\n", "\n", "our_output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "if", "classification_head", ":", "\n", "        ", "their_output", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", "(", "roberta", ".", "extract_features", "(", "input_ids", ")", ")", "\n", "", "else", ":", "\n", "        ", "their_output", "=", "roberta", ".", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "", "print", "(", "our_output", ".", "shape", ",", "their_output", ".", "shape", ")", "\n", "max_absolute_diff", "=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "our_output", "-", "their_output", ")", ")", ".", "item", "(", ")", "\n", "print", "(", "f\"max_absolute_diff = {max_absolute_diff}\"", ")", "# ~ 1e-7", "\n", "success", "=", "torch", ".", "allclose", "(", "our_output", ",", "their_output", ",", "atol", "=", "1e-3", ")", "\n", "print", "(", "\n", "\"Do both models output the same tensors?\"", ",", "\n", "\"\ud83d\udd25\"", "if", "success", "else", "\"\ud83d\udca9\"", "\n", ")", "\n", "if", "not", "success", ":", "\n", "        ", "raise", "Exception", "(", "\"Something went wRoNg\"", ")", "\n", "\n", "", "pathlib", ".", "Path", "(", "pytorch_dump_folder_path", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "f\"Saving model to {pytorch_dump_folder_path}\"", ")", "\n", "model", ".", "save_pretrained", "(", "pytorch_dump_folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlnet.XLNetTokenizer.__init__": [[65, 93], ["tokenization_utils.PreTrainedTokenizer.__init__", "spm.SentencePieceProcessor", "tokenization_xlnet.XLNetTokenizer.sp_model.Load", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "\n", "do_lower_case", "=", "False", ",", "remove_space", "=", "True", ",", "keep_accents", "=", "False", ",", "\n", "bos_token", "=", "\"<s>\"", ",", "eos_token", "=", "\"</s>\"", ",", "unk_token", "=", "\"<unk>\"", ",", "sep_token", "=", "\"<sep>\"", ",", "\n", "pad_token", "=", "\"<pad>\"", ",", "cls_token", "=", "\"<cls>\"", ",", "mask_token", "=", "\"<mask>\"", ",", "\n", "additional_special_tokens", "=", "[", "\"<eop>\"", ",", "\"<eod>\"", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "XLNetTokenizer", ",", "self", ")", ".", "__init__", "(", "bos_token", "=", "bos_token", ",", "eos_token", "=", "eos_token", ",", "\n", "unk_token", "=", "unk_token", ",", "sep_token", "=", "sep_token", ",", "\n", "pad_token", "=", "pad_token", ",", "cls_token", "=", "cls_token", ",", "\n", "mask_token", "=", "mask_token", ",", "additional_special_tokens", "=", "\n", "additional_special_tokens", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "3", "# take into account special tokens", "\n", "self", ".", "_pad_token_type_id", "=", "3", "\n", "\n", "try", ":", "\n", "            ", "import", "sentencepiece", "as", "spm", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"You need to install SentencePiece to use XLNetTokenizer: https://github.com/google/sentencepiece\"", "\n", "\"pip install sentencepiece\"", ")", "\n", "\n", "", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "remove_space", "=", "remove_space", "\n", "self", ".", "keep_accents", "=", "keep_accents", "\n", "self", ".", "vocab_file", "=", "vocab_file", "\n", "\n", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "sp_model", ".", "Load", "(", "vocab_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlnet.XLNetTokenizer.vocab_size": [[94, 97], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sp_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlnet.XLNetTokenizer.__getstate__": [[98, 102], ["tokenization_xlnet.XLNetTokenizer.__dict__.copy"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "state", "[", "\"sp_model\"", "]", "=", "None", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlnet.XLNetTokenizer.__setstate__": [[103, 112], ["spm.SentencePieceProcessor", "tokenization_xlnet.XLNetTokenizer.sp_model.Load", "logger.warning"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", "=", "d", "\n", "try", ":", "\n", "            ", "import", "sentencepiece", "as", "spm", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"You need to install SentencePiece to use XLNetTokenizer: https://github.com/google/sentencepiece\"", "\n", "\"pip install sentencepiece\"", ")", "\n", "", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "sp_model", ".", "Load", "(", "self", ".", "vocab_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlnet.XLNetTokenizer.preprocess_text": [[113, 130], ["outputs.lower.lower.replace().replace", "isinstance", "outputs.lower.lower.decode", "unicodedata.normalize", "outputs.lower.lower.lower", "inputs.strip().split", "outputs.lower.lower.replace", "inputs.strip", "unicodedata.combining"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "preprocess_text", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "remove_space", ":", "\n", "            ", "outputs", "=", "' '", ".", "join", "(", "inputs", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "inputs", "\n", "", "outputs", "=", "outputs", ".", "replace", "(", "\"``\"", ",", "'\"'", ")", ".", "replace", "(", "\"''\"", ",", "'\"'", ")", "\n", "\n", "if", "six", ".", "PY2", "and", "isinstance", "(", "outputs", ",", "str", ")", ":", "\n", "            ", "outputs", "=", "outputs", ".", "decode", "(", "'utf-8'", ")", "\n", "\n", "", "if", "not", "self", ".", "keep_accents", ":", "\n", "            ", "outputs", "=", "unicodedata", ".", "normalize", "(", "'NFKD'", ",", "outputs", ")", "\n", "outputs", "=", "''", ".", "join", "(", "[", "c", "for", "c", "in", "outputs", "if", "not", "unicodedata", ".", "combining", "(", "c", ")", "]", ")", "\n", "", "if", "self", ".", "do_lower_case", ":", "\n", "            ", "outputs", "=", "outputs", ".", "lower", "(", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlnet.XLNetTokenizer._tokenize": [[131, 169], ["tokenization_xlnet.XLNetTokenizer.preprocess_text", "isinstance", "text.encode.encode.encode", "tokenization_xlnet.XLNetTokenizer.sp_model.EncodeAsPieces", "tokenization_xlnet.XLNetTokenizer.sp_model.SampleEncodeAsPieces", "piece[].isdigit", "tokenization_xlnet.XLNetTokenizer.sp_model.EncodeAsPieces", "tokenization_xlnet.XLNetTokenizer.append", "new_pieces.extend", "new_pieces.append", "isinstance", "ret_pieces.append", "len", "str", "piece[].replace", "piece.decode.decode.decode", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer.preprocess_text", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "return_unicode", "=", "True", ",", "sample", "=", "False", ")", ":", "\n", "        ", "\"\"\" Tokenize a string.\n            return_unicode is used only for py2\n        \"\"\"", "\n", "text", "=", "self", ".", "preprocess_text", "(", "text", ")", "\n", "# note(zhiliny): in some systems, sentencepiece only accepts str for py2", "\n", "if", "six", ".", "PY2", "and", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "            ", "text", "=", "text", ".", "encode", "(", "'utf-8'", ")", "\n", "\n", "", "if", "not", "sample", ":", "\n", "            ", "pieces", "=", "self", ".", "sp_model", ".", "EncodeAsPieces", "(", "text", ")", "\n", "", "else", ":", "\n", "            ", "pieces", "=", "self", ".", "sp_model", ".", "SampleEncodeAsPieces", "(", "text", ",", "64", ",", "0.1", ")", "\n", "", "new_pieces", "=", "[", "]", "\n", "for", "piece", "in", "pieces", ":", "\n", "            ", "if", "len", "(", "piece", ")", ">", "1", "and", "piece", "[", "-", "1", "]", "==", "str", "(", "','", ")", "and", "piece", "[", "-", "2", "]", ".", "isdigit", "(", ")", ":", "\n", "                ", "cur_pieces", "=", "self", ".", "sp_model", ".", "EncodeAsPieces", "(", "\n", "piece", "[", ":", "-", "1", "]", ".", "replace", "(", "SPIECE_UNDERLINE", ",", "''", ")", ")", "\n", "if", "piece", "[", "0", "]", "!=", "SPIECE_UNDERLINE", "and", "cur_pieces", "[", "0", "]", "[", "0", "]", "==", "SPIECE_UNDERLINE", ":", "\n", "                    ", "if", "len", "(", "cur_pieces", "[", "0", "]", ")", "==", "1", ":", "\n", "                        ", "cur_pieces", "=", "cur_pieces", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                        ", "cur_pieces", "[", "0", "]", "=", "cur_pieces", "[", "0", "]", "[", "1", ":", "]", "\n", "", "", "cur_pieces", ".", "append", "(", "piece", "[", "-", "1", "]", ")", "\n", "new_pieces", ".", "extend", "(", "cur_pieces", ")", "\n", "", "else", ":", "\n", "                ", "new_pieces", ".", "append", "(", "piece", ")", "\n", "\n", "# note(zhiliny): convert back to unicode for py2", "\n", "", "", "if", "six", ".", "PY2", "and", "return_unicode", ":", "\n", "            ", "ret_pieces", "=", "[", "]", "\n", "for", "piece", "in", "new_pieces", ":", "\n", "                ", "if", "isinstance", "(", "piece", ",", "str", ")", ":", "\n", "                    ", "piece", "=", "piece", ".", "decode", "(", "'utf-8'", ")", "\n", "", "ret_pieces", ".", "append", "(", "piece", ")", "\n", "", "new_pieces", "=", "ret_pieces", "\n", "\n", "", "return", "new_pieces", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlnet.XLNetTokenizer._convert_token_to_id": [[170, 173], ["tokenization_xlnet.XLNetTokenizer.sp_model.PieceToId"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "sp_model", ".", "PieceToId", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlnet.XLNetTokenizer._convert_id_to_token": [[174, 180], ["tokenization_xlnet.XLNetTokenizer.sp_model.IdToPiece", "isinstance", "token.decode.decode.decode"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ",", "return_unicode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "token", "=", "self", ".", "sp_model", ".", "IdToPiece", "(", "index", ")", "\n", "if", "six", ".", "PY2", "and", "return_unicode", "and", "isinstance", "(", "token", ",", "str", ")", ":", "\n", "            ", "token", "=", "token", ".", "decode", "(", "'utf-8'", ")", "\n", "", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlnet.XLNetTokenizer.convert_tokens_to_string": [[181, 185], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"Converts a sequence of tokens (strings for sub-words) in a single string.\"\"\"", "\n", "out_string", "=", "''", ".", "join", "(", "tokens", ")", ".", "replace", "(", "SPIECE_UNDERLINE", ",", "' '", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlnet.XLNetTokenizer.build_inputs_with_special_tokens": [[186, 199], ["None"], "methods", ["None"], ["", "def", "build_inputs_with_special_tokens", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build model inputs from a sequence or a pair of sequence for sequence classification tasks\n        by concatenating and adding special tokens.\n        An XLNet sequence has the following format:\n            single sequence: X <sep> <cls>\n            pair of sequences: A <sep> B <sep> <cls>\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "token_ids_0", "+", "sep", "+", "cls", "\n", "", "return", "token_ids_0", "+", "sep", "+", "token_ids_1", "+", "sep", "+", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlnet.XLNetTokenizer.get_special_tokens_mask": [[200, 225], ["list", "ValueError", "map", "len", "len", "len"], "methods", ["None"], ["", "def", "get_special_tokens_mask", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ",", "already_has_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding\n        special tokens using the tokenizer ``prepare_for_model`` or ``encode_plus`` methods.\n\n        Args:\n            token_ids_0: list of ids (must not contain special tokens)\n            token_ids_1: Optional list of ids (must not contain special tokens), necessary when fetching sequence ids\n                for sequence pairs\n            already_has_special_tokens: (default False) Set to True if the token list is already formated with\n                special tokens for the model\n\n        Returns:\n            A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.\n        \"\"\"", "\n", "\n", "if", "already_has_special_tokens", ":", "\n", "            ", "if", "token_ids_1", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"You should not supply a second sequence if the provided sequence of \"", "\n", "\"ids is already formated with special tokens for the model.\"", ")", "\n", "", "return", "list", "(", "map", "(", "lambda", "x", ":", "1", "if", "x", "in", "[", "self", ".", "sep_token_id", ",", "self", ".", "cls_token_id", "]", "else", "0", ",", "token_ids_0", ")", ")", "\n", "\n", "", "if", "token_ids_1", "is", "not", "None", ":", "\n", "            ", "return", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_1", ")", ")", "+", "[", "1", ",", "1", "]", "\n", "", "return", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlnet.XLNetTokenizer.create_token_type_ids_from_sequences": [[226, 242], ["len", "len", "len"], "methods", ["None"], ["", "def", "create_token_type_ids_from_sequences", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Creates a mask from the two sequences passed to be used in a sequence-pair classification task.\n        An XLNet sequence pair mask has the following format:\n        0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 2\n        | first sequence    | second sequence     | CLS segment ID\n\n        if token_ids_1 is None, only returns the first portion of the mask (0's).\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "cls_segment_id", "=", "[", "2", "]", "\n", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "len", "(", "token_ids_0", "+", "sep", "+", "cls", ")", "*", "[", "0", "]", "\n", "", "return", "len", "(", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "+", "len", "(", "token_ids_1", "+", "sep", ")", "*", "[", "1", "]", "+", "cls_segment_id", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlnet.XLNetTokenizer.save_vocabulary": [[243, 256], ["os.path.join", "os.path.isdir", "logger.error", "os.path.abspath", "os.path.abspath", "shutil.copyfile"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save the sentencepiece vocabulary (copy original file) and special tokens file\n            to a directory.\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "out_vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "\n", "if", "os", ".", "path", ".", "abspath", "(", "self", ".", "vocab_file", ")", "!=", "os", ".", "path", ".", "abspath", "(", "out_vocab_file", ")", ":", "\n", "            ", "copyfile", "(", "self", ".", "vocab_file", ",", "out_vocab_file", ")", "\n", "\n", "", "return", "(", "out_vocab_file", ",", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFEmbeddings.__init__": [[70, 88], ["super().__init__", "modeling_tf_utils.TFSharedEmbeddings", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFEmbeddings", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "dim", "=", "config", ".", "dim", "\n", "self", ".", "initializer_range", "=", "config", ".", "initializer_range", "\n", "self", ".", "word_embeddings", "=", "TFSharedEmbeddings", "(", "config", ".", "vocab_size", ",", "\n", "config", ".", "dim", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "name", "=", "'word_embeddings'", ")", "# padding_idx=0)", "\n", "self", ".", "position_embeddings", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "\n", "config", ".", "dim", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'position_embeddings'", ")", "\n", "if", "config", ".", "sinusoidal_pos_embds", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-12", ",", "name", "=", "\"LayerNorm\"", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFEmbeddings.build": [[89, 99], ["super().build", "tensorflow.name_scope", "modeling_tf_distilbert.TFEmbeddings.add_weight", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"Build shared word embedding layer \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"word_embeddings\"", ")", ":", "\n", "# Create and initialize weights. The random normal initializer was chosen", "\n", "# arbitrarily, and works well.", "\n", "            ", "self", ".", "word_embeddings", "=", "self", ".", "add_weight", "(", "\n", "\"weight\"", ",", "\n", "shape", "=", "[", "self", ".", "vocab_size", ",", "self", ".", "dim", "]", ",", "\n", "initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", ")", "\n", "", "super", "(", "TFEmbeddings", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFEmbeddings.call": [[100, 121], ["modeling_tf_distilbert.TFEmbeddings._embedding", "modeling_tf_distilbert.TFEmbeddings._linear", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings._embedding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings._linear"], ["", "def", "call", "(", "self", ",", "inputs", ",", "inputs_embeds", "=", "None", ",", "mode", "=", "\"embedding\"", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Get token embeddings of inputs.\n        Args:\n            inputs: list of three int64 tensors with shape [batch_size, length]: (input_ids, position_ids, token_type_ids)\n            mode: string, a valid value is one of \"embedding\" and \"linear\".\n        Returns:\n            outputs: (1) If mode == \"embedding\", output embedding tensor, float32 with\n                shape [batch_size, length, embedding_size]; (2) mode == \"linear\", output\n                linear tensor, float32 with shape [batch_size, length, vocab_size].\n        Raises:\n            ValueError: if mode is not valid.\n        \n        Shared weights logic adapted from\n            https://github.com/tensorflow/models/blob/a009f4fb9d2fc4949e32192a944688925ef78659/official/transformer/v2/embedding_layer.py#L24\n        \"\"\"", "\n", "if", "mode", "==", "\"embedding\"", ":", "\n", "            ", "return", "self", ".", "_embedding", "(", "inputs", ",", "inputs_embeds", "=", "inputs_embeds", ",", "training", "=", "training", ")", "\n", "", "elif", "mode", "==", "\"linear\"", ":", "\n", "            ", "return", "self", ".", "_linear", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode {} is not valid.\"", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFEmbeddings._embedding": [[122, 156], ["modeling_tf_distilbert.TFEmbeddings.position_embeddings", "modeling_tf_distilbert.TFEmbeddings.LayerNorm", "modeling_tf_distilbert.TFEmbeddings.dropout", "isinstance", "tensorflow.gather", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "", "def", "_embedding", "(", "self", ",", "inputs", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        input_ids: tf.Tensor(bs, max_seq_length)\n            The token ids to embed.\n\n        Outputs\n        -------\n        embeddings: tf.Tensor(bs, max_seq_length, dim)\n            The embedded tokens (plus position embeddings, no token_type embeddings)\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "position_ids", "=", "None", "\n", "", "else", ":", "\n", "            ", "input_ids", ",", "position_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "seq_length", "=", "shape_list", "(", "input_ids", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "seq_length", "=", "shape_list", "(", "inputs_embeds", ")", "[", "1", "]", "\n", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "range", "(", "seq_length", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "tf", ".", "gather", "(", "self", ".", "word_embeddings", ",", "input_ids", ")", "\n", "", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "# (bs, max_seq_length, dim)", "\n", "\n", "embeddings", "=", "inputs_embeds", "+", "position_embeddings", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ",", "training", "=", "training", ")", "# (bs, max_seq_length, dim)", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFEmbeddings._linear": [[157, 171], ["tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "_linear", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Computes logits by running inputs through a linear layer.\n            Args:\n                inputs: A float32 tensor with shape [batch_size, length, hidden_size]\n            Returns:\n                float32 tensor with shape [batch_size, length, vocab_size].\n        \"\"\"", "\n", "batch_size", "=", "shape_list", "(", "inputs", ")", "[", "0", "]", "\n", "length", "=", "shape_list", "(", "inputs", ")", "[", "1", "]", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "self", ".", "dim", "]", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "word_embeddings", ",", "transpose_b", "=", "True", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "logits", ",", "[", "batch_size", ",", "length", ",", "self", ".", "vocab_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFMultiHeadSelfAttention.__init__": [[174, 198], ["super().__init__", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "set", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFMultiHeadSelfAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "\n", "self", ".", "dim", "=", "config", ".", "dim", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "attention_dropout", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "q_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"q_lin\"", ")", "\n", "self", ".", "k_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"k_lin\"", ")", "\n", "self", ".", "v_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"v_lin\"", ")", "\n", "self", ".", "out_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"out_lin\"", ")", "\n", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFMultiHeadSelfAttention.prune_heads": [[199, 201], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFMultiHeadSelfAttention.call": [[202, 261], ["modeling_tf_utils.shape_list", "modeling_tf_distilbert.TFMultiHeadSelfAttention.call.shape"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        query: tf.Tensor(bs, seq_length, dim)\n        key: tf.Tensor(bs, seq_length, dim)\n        value: tf.Tensor(bs, seq_length, dim)\n        mask: tf.Tensor(bs, seq_length)\n\n        Outputs\n        -------\n        weights: tf.Tensor(bs, n_heads, seq_length, seq_length)\n            Attention weights\n        context: tf.Tensor(bs, seq_length, dim)\n            Contextualized layer. Optional: only if `output_attentions=True`\n        \"\"\"", "\n", "query", ",", "key", ",", "value", ",", "mask", ",", "head_mask", "=", "inputs", "\n", "bs", ",", "q_length", ",", "dim", "=", "shape_list", "(", "query", ")", "\n", "k_length", "=", "shape_list", "(", "key", ")", "[", "1", "]", "\n", "# assert dim == self.dim, 'Dimensions do not match: %s input vs %s configured' % (dim, self.dim)", "\n", "# assert key.size() == value.size()", "\n", "\n", "dim_per_head", "=", "self", ".", "dim", "//", "self", ".", "n_heads", "\n", "\n", "mask_reshape", "=", "[", "bs", ",", "1", ",", "1", ",", "k_length", "]", "\n", "\n", "def", "shape", "(", "x", ")", ":", "\n", "            ", "\"\"\" separate heads \"\"\"", "\n", "return", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "x", ",", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", ",", "dim_per_head", ")", ")", ",", "perm", "=", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "\n", "", "def", "unshape", "(", "x", ")", ":", "\n", "            ", "\"\"\" group heads \"\"\"", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", ",", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", "*", "dim_per_head", ")", ")", "\n", "\n", "", "q", "=", "shape", "(", "self", ".", "q_lin", "(", "query", ")", ")", "# (bs, n_heads, q_length, dim_per_head)", "\n", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "key", ")", ")", "# (bs, n_heads, k_length, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "value", ")", ")", "# (bs, n_heads, k_length, dim_per_head)", "\n", "\n", "q", "=", "q", "/", "math", ".", "sqrt", "(", "dim_per_head", ")", "# (bs, n_heads, q_length, dim_per_head)", "\n", "scores", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "# (bs, n_heads, q_length, k_length)", "\n", "mask", "=", "tf", ".", "reshape", "(", "mask", ",", "mask_reshape", ")", "# (bs, n_heads, qlen, klen)", "\n", "# scores.masked_fill_(mask, -float('inf'))            # (bs, n_heads, q_length, k_length)", "\n", "scores", "=", "scores", "-", "1e30", "*", "(", "1.0", "-", "mask", ")", "\n", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ",", "axis", "=", "-", "1", ")", "# (bs, n_heads, qlen, klen)", "\n", "weights", "=", "self", ".", "dropout", "(", "weights", ",", "training", "=", "training", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "weights", "=", "weights", "*", "head_mask", "\n", "\n", "", "context", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "context", "=", "unshape", "(", "context", ")", "# (bs, q_length, dim)", "\n", "context", "=", "self", ".", "out_lin", "(", "context", ")", "# (bs, q_length, dim)", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "return", "(", "context", ",", "weights", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "context", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFFFN.__init__": [[263, 274], ["super().__init__", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFFFN", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "self", ".", "lin1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"lin1\"", ")", "\n", "self", ".", "lin2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"lin2\"", ")", "\n", "assert", "config", ".", "activation", "in", "[", "'relu'", ",", "'gelu'", "]", ",", "\"activation ({}) must be in ['relu', 'gelu']\"", ".", "format", "(", "config", ".", "activation", ")", "\n", "self", ".", "activation", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "gelu", ")", "if", "config", ".", "activation", "==", "'gelu'", "else", "tf", ".", "keras", ".", "activations", ".", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFFFN.call": [[275, 281], ["modeling_tf_distilbert.TFFFN.lin1", "modeling_tf_distilbert.TFFFN.activation", "modeling_tf_distilbert.TFFFN.lin2", "modeling_tf_distilbert.TFFFN.dropout"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "input", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "lin1", "(", "input", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ",", "training", "=", "training", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFTransformerBlock.__init__": [[284, 301], ["super().__init__", "tensorflow.keras.layers.Dropout", "modeling_tf_distilbert.TFMultiHeadSelfAttention", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_distilbert.TFFFN", "tensorflow.keras.layers.LayerNormalization"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFTransformerBlock", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "\n", "self", ".", "dim", "=", "config", ".", "dim", "\n", "self", ".", "hidden_dim", "=", "config", ".", "hidden_dim", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "self", ".", "activation", "=", "config", ".", "activation", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "assert", "config", ".", "dim", "%", "config", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "attention", "=", "TFMultiHeadSelfAttention", "(", "config", ",", "name", "=", "\"attention\"", ")", "\n", "self", ".", "sa_layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-12", ",", "name", "=", "\"sa_layer_norm\"", ")", "\n", "\n", "self", ".", "ffn", "=", "TFFFN", "(", "config", ",", "name", "=", "\"ffn\"", ")", "\n", "self", ".", "output_layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-12", ",", "name", "=", "\"output_layer_norm\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFTransformerBlock.call": [[302, 335], ["modeling_tf_distilbert.TFTransformerBlock.attention", "modeling_tf_distilbert.TFTransformerBlock.sa_layer_norm", "modeling_tf_distilbert.TFTransformerBlock.ffn", "modeling_tf_distilbert.TFTransformerBlock.output_layer_norm"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "# removed: src_enc=None, src_len=None", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        x: tf.Tensor(bs, seq_length, dim)\n        attn_mask: tf.Tensor(bs, seq_length)\n\n        Outputs\n        -------\n        sa_weights: tf.Tensor(bs, n_heads, seq_length, seq_length)\n            The attention weights\n        ffn_output: tf.Tensor(bs, seq_length, dim)\n            The output of the transformer block contextualization.\n        \"\"\"", "\n", "x", ",", "attn_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "# Self-Attention", "\n", "sa_output", "=", "self", ".", "attention", "(", "[", "x", ",", "x", ",", "x", ",", "attn_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "sa_output", ",", "sa_weights", "=", "sa_output", "# (bs, seq_length, dim), (bs, n_heads, seq_length, seq_length)", "\n", "", "else", ":", "# To handle these `output_attention` or `output_hidden_states` cases returning tuples", "\n", "# assert type(sa_output) == tuple", "\n", "            ", "sa_output", "=", "sa_output", "[", "0", "]", "\n", "", "sa_output", "=", "self", ".", "sa_layer_norm", "(", "sa_output", "+", "x", ")", "# (bs, seq_length, dim)", "\n", "\n", "# Feed Forward Network", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "sa_output", ",", "training", "=", "training", ")", "# (bs, seq_length, dim)", "\n", "ffn_output", "=", "self", ".", "output_layer_norm", "(", "ffn_output", "+", "sa_output", ")", "# (bs, seq_length, dim)", "\n", "\n", "output", "=", "(", "ffn_output", ",", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "output", "=", "(", "sa_weights", ",", ")", "+", "output", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFTransformer.__init__": [[338, 346], ["super().__init__", "modeling_tf_distilbert.TFTransformerBlock", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFTransformer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "n_layers", "=", "config", ".", "n_layers", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "layer", "=", "[", "TFTransformerBlock", "(", "config", ",", "name", "=", "'layer_._{}'", ".", "format", "(", "i", ")", ")", "\n", "for", "i", "in", "range", "(", "config", ".", "n_layers", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFTransformer.call": [[347, 397], ["enumerate", "layer_module", "len", "len"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        x: tf.Tensor(bs, seq_length, dim)\n            Input sequence embedded.\n        attn_mask: tf.Tensor(bs, seq_length)\n            Attention mask on the sequence.\n\n        Outputs\n        -------\n        hidden_state: tf.Tensor(bs, seq_length, dim)\n            Sequence of hiddens states in the last (top) layer\n        all_hidden_states: Tuple[tf.Tensor(bs, seq_length, dim)]\n            Tuple of length n_layers with the hidden states from each layer.\n            Optional: only if output_hidden_states=True\n        all_attentions: Tuple[tf.Tensor(bs, n_heads, seq_length, seq_length)]\n            Tuple of length n_layers with the attention weights from each layer\n            Optional: only if output_attentions=True\n        \"\"\"", "\n", "x", ",", "attn_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "\n", "hidden_state", "=", "x", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_state", ",", ")", "\n", "\n", "", "layer_outputs", "=", "layer_module", "(", "[", "hidden_state", ",", "attn_mask", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "hidden_state", "=", "layer_outputs", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "assert", "len", "(", "layer_outputs", ")", "==", "2", "\n", "attentions", "=", "layer_outputs", "[", "0", "]", "\n", "all_attentions", "=", "all_attentions", "+", "(", "attentions", ",", ")", "\n", "", "else", ":", "\n", "                ", "assert", "len", "(", "layer_outputs", ")", "==", "1", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_state", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_state", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertMainLayer.__init__": [[400, 406], ["super().__init__", "modeling_tf_distilbert.TFEmbeddings", "modeling_tf_distilbert.TFTransformer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFDistilBertMainLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_hidden_layers", "=", "config", ".", "num_hidden_layers", "\n", "\n", "self", ".", "embeddings", "=", "TFEmbeddings", "(", "config", ",", "name", "=", "\"embeddings\"", ")", "# Embeddings", "\n", "self", ".", "transformer", "=", "TFTransformer", "(", "config", ",", "name", "=", "\"transformer\"", ")", "# Encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertMainLayer.get_input_embeddings": [[407, 409], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertMainLayer._resize_token_embeddings": [[410, 412], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertMainLayer._prune_heads": [[413, 415], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertMainLayer.call": [[416, 459], ["isinstance", "tensorflow.cast", "modeling_tf_distilbert.TFDistilBertMainLayer.embeddings", "modeling_tf_distilbert.TFDistilBertMainLayer.transformer", "isinstance", "ValueError", "tensorflow.ones", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "len", "len", "len", "len", "ValueError", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "head_mask", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "4", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "4", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "input_ids", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "tf", ".", "ones", "(", "input_shape", ")", "# (bs, seq_length)", "\n", "", "attention_mask", "=", "tf", ".", "cast", "(", "attention_mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "num_hidden_layers", "\n", "\n", "", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ",", "inputs_embeds", "=", "inputs_embeds", ")", "# (bs, seq_length, dim)", "\n", "tfmr_output", "=", "self", ".", "transformer", "(", "[", "embedding_output", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "\n", "return", "tfmr_output", "# last-layer hidden-state, (all hidden_states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertModel.__init__": [[564, 567], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_distilbert.TFDistilBertMainLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFDistilBertModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "distilbert", "=", "TFDistilBertMainLayer", "(", "config", ",", "name", "=", "\"distilbert\"", ")", "# Embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertModel.call": [[568, 571], ["modeling_tf_distilbert.TFDistilBertModel.distilbert"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "distilbert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertLMHead.__init__": [[574, 581], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFDistilBertLMHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "input_embeddings", "=", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertLMHead.build": [[582, 588], ["modeling_tf_distilbert.TFDistilBertLMHead.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'bias'", ")", "\n", "super", "(", "TFDistilBertLMHead", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertLMHead.call": [[589, 593], ["modeling_tf_distilbert.TFDistilBertLMHead.input_embeddings"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "input_embeddings", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "hidden_states", "=", "hidden_states", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertForMaskedLM.__init__": [[622, 635], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_distilbert.TFDistilBertMainLayer", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Activation", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_distilbert.TFDistilBertLMHead", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFDistilBertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "\n", "self", ".", "distilbert", "=", "TFDistilBertMainLayer", "(", "config", ",", "name", "=", "\"distilbert\"", ")", "\n", "self", ".", "vocab_transform", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"vocab_transform\"", ")", "\n", "self", ".", "act", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "gelu", ")", "\n", "self", ".", "vocab_layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "1e-12", ",", "name", "=", "\"vocab_layer_norm\"", ")", "\n", "self", ".", "vocab_projector", "=", "TFDistilBertLMHead", "(", "config", ",", "self", ".", "distilbert", ".", "embeddings", ",", "name", "=", "\"vocab_projector\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertForMaskedLM.get_output_embeddings": [[636, 638], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab_projector", ".", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertForMaskedLM.call": [[639, 650], ["modeling_tf_distilbert.TFDistilBertForMaskedLM.distilbert", "modeling_tf_distilbert.TFDistilBertForMaskedLM.vocab_transform", "modeling_tf_distilbert.TFDistilBertForMaskedLM.act", "modeling_tf_distilbert.TFDistilBertForMaskedLM.vocab_layer_norm", "modeling_tf_distilbert.TFDistilBertForMaskedLM.vocab_projector"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "distilbert_output", "=", "self", ".", "distilbert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "hidden_states", "=", "distilbert_output", "[", "0", "]", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_transform", "(", "hidden_states", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "act", "(", "prediction_logits", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_layer_norm", "(", "prediction_logits", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_projector", "(", "prediction_logits", ")", "\n", "\n", "outputs", "=", "(", "prediction_logits", ",", ")", "+", "distilbert_output", "[", "1", ":", "]", "\n", "return", "outputs", "# logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertForSequenceClassification.__init__": [[680, 693], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_distilbert.TFDistilBertMainLayer", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFDistilBertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "distilbert", "=", "TFDistilBertMainLayer", "(", "config", ",", "name", "=", "\"distilbert\"", ")", "\n", "self", ".", "pre_classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "dim", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "activation", "=", "'relu'", ",", "\n", "name", "=", "\"pre_classifier\"", ")", "\n", "self", ".", "classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"classifier\"", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "seq_classif_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertForSequenceClassification.call": [[694, 705], ["modeling_tf_distilbert.TFDistilBertForSequenceClassification.distilbert", "modeling_tf_distilbert.TFDistilBertForSequenceClassification.pre_classifier", "modeling_tf_distilbert.TFDistilBertForSequenceClassification.dropout", "modeling_tf_distilbert.TFDistilBertForSequenceClassification.classifier", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "distilbert_output", "=", "self", ".", "distilbert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "hidden_state", "=", "distilbert_output", "[", "0", "]", "# (bs, seq_len, dim)", "\n", "pooled_output", "=", "hidden_state", "[", ":", ",", "0", "]", "# (bs, dim)", "\n", "pooled_output", "=", "self", ".", "pre_classifier", "(", "pooled_output", ")", "# (bs, dim)", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "# (bs, dim)", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "# (bs, dim)", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "distilbert_output", "[", "1", ":", "]", "\n", "return", "outputs", "# logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertForTokenClassification.__init__": [[731, 740], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_distilbert.TFDistilBertMainLayer", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFDistilBertForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "distilbert", "=", "TFDistilBertMainLayer", "(", "config", ",", "name", "=", "'distilbert'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "self", ".", "classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'classifier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertForTokenClassification.call": [[741, 752], ["modeling_tf_distilbert.TFDistilBertForTokenClassification.distilbert", "modeling_tf_distilbert.TFDistilBertForTokenClassification.dropout", "modeling_tf_distilbert.TFDistilBertForTokenClassification.classifier", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "distilbert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertForQuestionAnswering.__init__": [[784, 793], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_distilbert.TFDistilBertMainLayer", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFDistilBertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "distilbert", "=", "TFDistilBertMainLayer", "(", "config", ",", "name", "=", "\"distilbert\"", ")", "\n", "self", ".", "qa_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'qa_outputs'", ")", "\n", "assert", "config", ".", "num_labels", "==", "2", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "qa_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.TFDistilBertForQuestionAnswering.call": [[794, 806], ["modeling_tf_distilbert.TFDistilBertForQuestionAnswering.distilbert", "modeling_tf_distilbert.TFDistilBertForQuestionAnswering.dropout", "modeling_tf_distilbert.TFDistilBertForQuestionAnswering.qa_outputs", "tensorflow.split", "tensorflow.squeeze", "tensorflow.squeeze", "kwargs.get"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "distilbert_output", "=", "self", ".", "distilbert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "hidden_states", "=", "distilbert_output", "[", "0", "]", "# (bs, max_query_len, dim)", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "# (bs, max_query_len, dim)", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "hidden_states", ")", "# (bs, max_query_len, 2)", "\n", "start_logits", ",", "end_logits", "=", "tf", ".", "split", "(", "logits", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "start_logits", "=", "tf", ".", "squeeze", "(", "start_logits", ",", "axis", "=", "-", "1", ")", "\n", "end_logits", "=", "tf", ".", "squeeze", "(", "end_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "distilbert_output", "[", "1", ":", "]", "\n", "return", "outputs", "# start_logits, end_logits, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.gelu": [[46, 55], ["tensorflow.math.erf", "tensorflow.math.sqrt"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Gaussian Error Linear Unit.\n    Original Implementation of the gelu activation function in Google Bert repo when initially created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "math", ".", "erf", "(", "x", "/", "tf", ".", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_distilbert.gelu_new": [[56, 68], ["tensorflow.tanh", "numpy.sqrt", "tensorflow.pow"], "function", ["None"], ["", "def", "gelu_new", "(", "x", ")", ":", "\n", "    ", "\"\"\"Gaussian Error Linear Unit.\n    This is a smoother version of the RELU.\n    Original paper: https://arxiv.org/abs/1606.08415\n    Args:\n        x: float Tensor to perform activation.\n    Returns:\n        `x` with the GELU activation applied.\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "tanh", "(", "\n", "(", "np", ".", "sqrt", "(", "2", "/", "np", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "tf", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFAttention.__init__": [[65, 82], ["super().__init__", "modeling_tf_utils.TFConv1D", "modeling_tf_utils.TFConv1D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "set"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nx", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "n_state", "=", "nx", "# in Attention: n_state=768 (nx=n_embd)", "\n", "# [switch nx => n_state from Block to Attention to keep identical to TF implem]", "\n", "assert", "n_state", "%", "config", ".", "n_head", "==", "0", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "split_size", "=", "n_state", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "c_attn", "=", "TFConv1D", "(", "n_state", "*", "3", ",", "nx", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_attn'", ")", "\n", "self", ".", "c_proj", "=", "TFConv1D", "(", "n_state", ",", "nx", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_proj'", ")", "\n", "self", ".", "attn_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "attn_pdrop", ")", "\n", "self", ".", "resid_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFAttention.prune_heads": [[83, 85], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFAttention.causal_attention_mask": [[86, 95], ["tensorflow.range", "tensorflow.cast", "tensorflow.range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "causal_attention_mask", "(", "nd", ",", "ns", ",", "dtype", ")", ":", "\n", "        ", "\"\"\"1's in the lower triangle, counting from the lower right corner.\n        Same as tf.matrix_band_part(tf.ones([nd, ns]), -1, ns-nd), but doesn't produce garbage on TPUs.\n        \"\"\"", "\n", "i", "=", "tf", ".", "range", "(", "nd", ")", "[", ":", ",", "None", "]", "\n", "j", "=", "tf", ".", "range", "(", "ns", ")", "\n", "m", "=", "i", ">=", "j", "-", "ns", "+", "nd", "\n", "return", "tf", ".", "cast", "(", "m", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFAttention._attn": [[96, 125], ["tensorflow.matmul", "modeling_tf_utils.shape_list", "modeling_tf_openai.TFAttention.causal_attention_mask", "tensorflow.reshape", "tensorflow.nn.softmax", "modeling_tf_openai.TFAttention.attn_dropout", "tensorflow.cast", "tensorflow.matmul", "outputs.append", "tensorflow.math.sqrt", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFAttention.causal_attention_mask", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "_attn", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "q", ",", "k", ",", "v", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "# q, k, v have shape [batch, heads, sequence, features]", "\n", "w", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "dk", "=", "tf", ".", "cast", "(", "shape_list", "(", "k", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "# scale attention_scores", "\n", "w", "=", "w", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "\n", "# w has shape [batch, heads, dst_sequence, src_sequence], where information flows from src to dst.", "\n", "", "_", ",", "_", ",", "nd", ",", "ns", "=", "shape_list", "(", "w", ")", "\n", "b", "=", "self", ".", "causal_attention_mask", "(", "nd", ",", "ns", ",", "dtype", "=", "w", ".", "dtype", ")", "\n", "b", "=", "tf", ".", "reshape", "(", "b", ",", "[", "1", ",", "1", ",", "nd", ",", "ns", "]", ")", "\n", "w", "=", "w", "*", "b", "-", "1e4", "*", "(", "1", "-", "b", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask", "\n", "            ", "w", "=", "w", "+", "attention_mask", "\n", "\n", "", "w", "=", "tf", ".", "nn", ".", "softmax", "(", "w", ",", "axis", "=", "-", "1", ")", "\n", "w", "=", "self", ".", "attn_dropout", "(", "w", ",", "training", "=", "training", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "w", "=", "w", "*", "head_mask", "\n", "\n", "", "outputs", "=", "[", "tf", ".", "matmul", "(", "w", ",", "v", ")", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "w", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFAttention.merge_heads": [[126, 131], ["tensorflow.transpose", "modeling_tf_utils.shape_list", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "merge_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "x_shape", "=", "shape_list", "(", "x", ")", "\n", "new_x_shape", "=", "x_shape", "[", ":", "-", "2", "]", "+", "[", "x_shape", "[", "-", "2", "]", "*", "x_shape", "[", "-", "1", "]", "]", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "new_x_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFAttention.split_heads": [[132, 137], ["modeling_tf_utils.shape_list", "tensorflow.reshape", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "split_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_shape", "=", "shape_list", "(", "x", ")", "\n", "new_x_shape", "=", "x_shape", "[", ":", "-", "1", "]", "+", "[", "self", ".", "n_head", ",", "x_shape", "[", "-", "1", "]", "//", "self", ".", "n_head", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "new_x_shape", ")", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "# (batch, head, seq_length, head_features)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFAttention.call": [[138, 156], ["modeling_tf_openai.TFAttention.c_attn", "tensorflow.split", "modeling_tf_openai.TFAttention.split_heads", "modeling_tf_openai.TFAttention.split_heads", "modeling_tf_openai.TFAttention.split_heads", "modeling_tf_openai.TFAttention._attn", "modeling_tf_openai.TFAttention.merge_heads", "modeling_tf_openai.TFAttention.c_proj", "modeling_tf_openai.TFAttention.resid_dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention._attn", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.merge_heads"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "x", "=", "self", ".", "c_attn", "(", "x", ")", "\n", "query", ",", "key", ",", "value", "=", "tf", ".", "split", "(", "x", ",", "3", ",", "axis", "=", "2", ")", "\n", "query", "=", "self", ".", "split_heads", "(", "query", ")", "\n", "key", "=", "self", ".", "split_heads", "(", "key", ")", "\n", "value", "=", "self", ".", "split_heads", "(", "value", ")", "\n", "\n", "attn_outputs", "=", "self", ".", "_attn", "(", "[", "query", ",", "key", ",", "value", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "a", "=", "self", ".", "merge_heads", "(", "a", ")", "\n", "a", "=", "self", ".", "c_proj", "(", "a", ")", "\n", "a", "=", "self", ".", "resid_dropout", "(", "a", ",", "training", "=", "training", ")", "\n", "\n", "outputs", "=", "[", "a", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "# a, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFMLP.__init__": [[159, 166], ["super().__init__", "modeling_tf_utils.TFConv1D", "modeling_tf_utils.TFConv1D", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_state", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFMLP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "c_fc", "=", "TFConv1D", "(", "n_state", ",", "nx", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_fc'", ")", "\n", "self", ".", "c_proj", "=", "TFConv1D", "(", "nx", ",", "n_state", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_proj'", ")", "\n", "self", ".", "act", "=", "gelu", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFMLP.call": [[167, 172], ["modeling_tf_openai.TFMLP.act", "modeling_tf_openai.TFMLP.c_proj", "modeling_tf_openai.TFMLP.dropout", "modeling_tf_openai.TFMLP.c_fc"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", "=", "False", ")", ":", "\n", "        ", "h", "=", "self", ".", "act", "(", "self", ".", "c_fc", "(", "x", ")", ")", "\n", "h2", "=", "self", ".", "c_proj", "(", "h", ")", "\n", "h2", "=", "self", ".", "dropout", "(", "h2", ",", "training", "=", "training", ")", "\n", "return", "h2", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFBlock.__init__": [[175, 182], ["super().__init__", "modeling_tf_openai.TFAttention", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_openai.TFMLP", "tensorflow.keras.layers.LayerNormalization"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBlock", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "attn", "=", "TFAttention", "(", "nx", ",", "n_ctx", ",", "config", ",", "scale", ",", "name", "=", "'attn'", ")", "\n", "self", ".", "ln_1", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "name", "=", "'ln_1'", ")", "\n", "self", ".", "mlp", "=", "TFMLP", "(", "4", "*", "nx", ",", "config", ",", "name", "=", "'mlp'", ")", "\n", "self", ".", "ln_2", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "name", "=", "'ln_2'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFBlock.call": [[183, 195], ["modeling_tf_openai.TFBlock.attn", "modeling_tf_openai.TFBlock.ln_1", "modeling_tf_openai.TFBlock.mlp", "modeling_tf_openai.TFBlock.ln_2"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "output_attn", "=", "self", ".", "attn", "(", "[", "x", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "a", "=", "output_attn", "[", "0", "]", "# output_attn: a, (attentions)", "\n", "\n", "n", "=", "self", ".", "ln_1", "(", "x", "+", "a", ")", "\n", "m", "=", "self", ".", "mlp", "(", "n", ",", "training", "=", "training", ")", "\n", "h", "=", "self", ".", "ln_2", "(", "n", "+", "m", ")", "\n", "\n", "outputs", "=", "[", "h", "]", "+", "output_attn", "[", "1", ":", "]", "\n", "return", "outputs", "# x, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFOpenAIGPTMainLayer.__init__": [[198, 219], ["super().__init__", "modeling_tf_utils.TFSharedEmbeddings", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.Dropout", "modeling_tf_openai.TFBlock", "modeling_tf_utils.get_initializer", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFOpenAIGPTMainLayer", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "num_hidden_layers", "=", "config", ".", "n_layer", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "n_embd", "=", "config", ".", "n_embd", "\n", "\n", "self", ".", "tokens_embed", "=", "TFSharedEmbeddings", "(", "config", ".", "vocab_size", ",", "\n", "config", ".", "n_embd", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "name", "=", "'tokens_embed'", ")", "\n", "self", ".", "positions_embed", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "n_positions", ",", "\n", "config", ".", "n_embd", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'positions_embed'", ")", "\n", "self", ".", "drop", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "[", "TFBlock", "(", "config", ".", "n_ctx", ",", "\n", "config", ",", "\n", "scale", "=", "True", ",", "\n", "name", "=", "'h_._{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFOpenAIGPTMainLayer.get_input_embeddings": [[220, 222], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tokens_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFOpenAIGPTMainLayer._resize_token_embeddings": [[223, 225], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFOpenAIGPTMainLayer._prune_heads": [[226, 231], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFOpenAIGPTMainLayer.call": [[232, 335], ["isinstance", "tensorflow.reshape", "modeling_tf_openai.TFOpenAIGPTMainLayer.positions_embed", "modeling_tf_openai.TFOpenAIGPTMainLayer.drop", "enumerate", "tensorflow.reshape", "isinstance", "ValueError", "tensorflow.cast", "modeling_tf_openai.TFOpenAIGPTMainLayer.tokens_embed", "tensorflow.reshape", "modeling_tf_openai.TFOpenAIGPTMainLayer.tokens_embed", "block", "tuple", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "tensorflow.reshape", "tensorflow.range", "tuple.append", "len", "len", "len", "len", "len", "len", "ValueError", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.reshape", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "input_ids", ")", "\n", "input_ids", "=", "tf", ".", "reshape", "(", "input_ids", ",", "[", "-", "1", ",", "input_shape", "[", "-", "1", "]", "]", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "range", "(", "input_shape", "[", "-", "1", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "            ", "attention_mask", "=", "attention_mask", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "\n", "attention_mask", "=", "tf", ".", "cast", "(", "attention_mask", ",", "tf", ".", "float32", ")", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "-", "10000.0", "\n", "", "else", ":", "\n", "            ", "attention_mask", "=", "None", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "", "if", "not", "head_mask", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "num_hidden_layers", "\n", "# head_mask = tf.constant([0] * self.num_hidden_layers)", "\n", "\n", "", "position_ids", "=", "tf", ".", "reshape", "(", "position_ids", ",", "[", "-", "1", ",", "shape_list", "(", "position_ids", ")", "[", "-", "1", "]", "]", ")", "\n", "\n", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "tokens_embed", "(", "input_ids", ",", "mode", "=", "'embedding'", ")", "\n", "", "position_embeds", "=", "self", ".", "positions_embed", "(", "position_ids", ")", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "reshape", "(", "token_type_ids", ",", "[", "-", "1", ",", "shape_list", "(", "token_type_ids", ")", "[", "-", "1", "]", "]", ")", "\n", "token_type_embeds", "=", "self", ".", "tokens_embed", "(", "token_type_ids", ",", "mode", "=", "'embedding'", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "hidden_states", "=", "inputs_embeds", "+", "position_embeds", "+", "token_type_embeds", "\n", "hidden_states", "=", "self", ".", "drop", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "[", "shape_list", "(", "hidden_states", ")", "[", "-", "1", "]", "]", "\n", "\n", "all_attentions", "=", "[", "]", "\n", "all_hidden_states", "=", "(", ")", "\n", "for", "i", ",", "block", "in", "enumerate", "(", "self", ".", "h", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "tf", ".", "reshape", "(", "hidden_states", ",", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "block", "(", "[", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", ".", "append", "(", "outputs", "[", "1", "]", ")", "\n", "\n", "", "", "hidden_states", "=", "tf", ".", "reshape", "(", "hidden_states", ",", "output_shape", ")", "\n", "# Add last hidden state", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# let the number of heads free (-1) so we can extract attention even after head pruning", "\n", "            ", "attention_output_shape", "=", "input_shape", "[", ":", "-", "1", "]", "+", "[", "-", "1", "]", "+", "shape_list", "(", "all_attentions", "[", "0", "]", ")", "[", "-", "2", ":", "]", "\n", "all_attentions", "=", "tuple", "(", "tf", ".", "reshape", "(", "t", ",", "attention_output_shape", ")", "for", "t", "in", "all_attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last hidden state, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFOpenAIGPTModel.__init__": [[439, 442], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_openai.TFOpenAIGPTMainLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFOpenAIGPTModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFOpenAIGPTMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFOpenAIGPTModel.call": [[443, 446], ["modeling_tf_openai.TFOpenAIGPTModel.transformer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFOpenAIGPTLMHeadModel.__init__": [[475, 478], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_openai.TFOpenAIGPTMainLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFOpenAIGPTLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFOpenAIGPTMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFOpenAIGPTLMHeadModel.get_output_embeddings": [[479, 481], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "tokens_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFOpenAIGPTLMHeadModel.call": [[482, 491], ["modeling_tf_openai.TFOpenAIGPTLMHeadModel.transformer", "modeling_tf_openai.TFOpenAIGPTLMHeadModel.transformer.tokens_embed"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "transformer", ".", "tokens_embed", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "# lm_logits, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.__init__": [[539, 544], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_openai.TFOpenAIGPTMainLayer", "modeling_tf_utils.TFSequenceSummary"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFOpenAIGPTDoubleHeadsModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "config", ".", "num_labels", "=", "1", "\n", "self", ".", "transformer", "=", "TFOpenAIGPTMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "multiple_choice_head", "=", "TFSequenceSummary", "(", "config", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'multiple_choice_head'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.get_output_embeddings": [[545, 547], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "tokens_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.call": [[548, 597], ["isinstance", "modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.transformer", "tensorflow.reshape", "modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.transformer.tokens_embed", "modeling_tf_openai.TFOpenAIGPTDoubleHeadsModel.multiple_choice_head", "tensorflow.squeeze", "isinstance", "modeling_tf_utils.shape_list", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "len", "len", "len", "len", "len", "len", "len", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "mc_token_ids", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "inputs_embeds", "\n", "mc_token_ids", "=", "inputs", "[", "6", "]", "if", "len", "(", "inputs", ")", ">", "6", "else", "mc_token_ids", "\n", "assert", "len", "(", "inputs", ")", "<=", "7", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "mc_token_ids", "=", "inputs", ".", "get", "(", "'mc_token_ids'", ",", "mc_token_ids", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "7", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shapes", "=", "shape_list", "(", "input_ids", ")", "\n", "", "else", ":", "\n", "            ", "input_shapes", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shapes", "[", "-", "1", "]", "\n", "\n", "flat_input_ids", "=", "tf", ".", "reshape", "(", "input_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "input_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "tf", ".", "reshape", "(", "attention_mask", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "flat_token_type_ids", "=", "tf", ".", "reshape", "(", "token_type_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_position_ids", "=", "tf", ".", "reshape", "(", "position_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "\n", "flat_inputs", "=", "[", "flat_input_ids", ",", "flat_attention_mask", ",", "flat_token_type_ids", ",", "flat_position_ids", ",", "head_mask", ",", "inputs_embeds", "]", "\n", "\n", "transformer_outputs", "=", "self", ".", "transformer", "(", "flat_inputs", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "hidden_states", "=", "tf", ".", "reshape", "(", "hidden_states", ",", "input_shapes", "+", "shape_list", "(", "hidden_states", ")", "[", "-", "1", ":", "]", ")", "\n", "\n", "lm_logits", "=", "self", ".", "transformer", ".", "tokens_embed", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "mc_logits", "=", "self", ".", "multiple_choice_head", "(", "[", "hidden_states", ",", "mc_token_ids", "]", ",", "training", "=", "training", ")", "\n", "\n", "mc_logits", "=", "tf", ".", "squeeze", "(", "mc_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", "mc_logits", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "# lm logits, mc logits, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.gelu": [[41, 53], ["tensorflow.tanh", "numpy.sqrt", "tensorflow.pow"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"Gaussian Error Linear Unit.\n    This is a smoother version of the RELU.\n    Original paper: https://arxiv.org/abs/1606.08415\n    Args:\n        x: float Tensor to perform activation.\n    Returns:\n        `x` with the GELU activation applied.\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "tanh", "(", "\n", "(", "np", ".", "sqrt", "(", "2", "/", "np", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "tf", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_openai.swish": [[55, 57], ["tensorflow.math.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "tf", ".", "math", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFPositionalEmbedding.__init__": [[44, 48], ["super().__init__", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "demb", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFPositionalEmbedding", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "inv_freq", "=", "1", "/", "(", "10000", "**", "(", "tf", ".", "range", "(", "0", ",", "demb", ",", "2.0", ")", "/", "demb", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFPositionalEmbedding.call": [[49, 57], ["tensorflow.einsum", "tensorflow.concat", "tensorflow.tile", "tensorflow.sin", "tensorflow.cos"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "pos_seq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "tf", ".", "einsum", "(", "'i,j->ij'", ",", "pos_seq", ",", "self", ".", "inv_freq", ")", "\n", "pos_emb", "=", "tf", ".", "concat", "(", "[", "tf", ".", "sin", "(", "sinusoid_inp", ")", ",", "tf", ".", "cos", "(", "sinusoid_inp", ")", "]", ",", "-", "1", ")", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "return", "tf", ".", "tile", "(", "pos_emb", "[", ":", ",", "None", ",", ":", "]", ",", "[", "1", ",", "bsz", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFPositionwiseFF.__init__": [[60, 80], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "dropout", ",", "pre_lnorm", "=", "False", ",", "layer_norm_epsilon", "=", "1e-5", ",", "init_std", "=", "0.02", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFPositionwiseFF", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "layer_1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_inner", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "init_std", ")", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "name", "=", "'CoreNet_._0'", ")", "\n", "self", ".", "drop_1", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "layer_2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "init_std", ")", ",", "\n", "name", "=", "'CoreNet_._3'", ")", "\n", "self", ".", "drop_2", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "layer_norm_epsilon", ",", "name", "=", "'layer_norm'", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFPositionwiseFF.call": [[81, 103], ["modeling_tf_transfo_xl.TFPositionwiseFF.layer_norm", "modeling_tf_transfo_xl.TFPositionwiseFF.layer_1", "modeling_tf_transfo_xl.TFPositionwiseFF.drop_1", "modeling_tf_transfo_xl.TFPositionwiseFF.layer_2", "modeling_tf_transfo_xl.TFPositionwiseFF.drop_2", "modeling_tf_transfo_xl.TFPositionwiseFF.layer_1", "modeling_tf_transfo_xl.TFPositionwiseFF.drop_1", "modeling_tf_transfo_xl.TFPositionwiseFF.layer_2", "modeling_tf_transfo_xl.TFPositionwiseFF.drop_2", "modeling_tf_transfo_xl.TFPositionwiseFF.layer_norm"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inp", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization + positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "layer_norm", "(", "inp", ")", "\n", "core_out", "=", "self", ".", "layer_1", "(", "core_out", ")", "\n", "core_out", "=", "self", ".", "drop_1", "(", "core_out", ",", "training", "=", "training", ")", "\n", "core_out", "=", "self", ".", "layer_2", "(", "core_out", ")", "\n", "core_out", "=", "self", ".", "drop_2", "(", "core_out", ",", "training", "=", "training", ")", "\n", "\n", "##### residual connection", "\n", "output", "=", "core_out", "+", "inp", "\n", "", "else", ":", "\n", "##### positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "layer_1", "(", "inp", ")", "\n", "core_out", "=", "self", ".", "drop_1", "(", "core_out", ",", "training", "=", "training", ")", "\n", "core_out", "=", "self", ".", "layer_2", "(", "core_out", ")", "\n", "core_out", "=", "self", ".", "drop_2", "(", "core_out", ",", "training", "=", "training", ")", "\n", "\n", "##### residual connection + layer normalization", "\n", "output", "=", "self", ".", "layer_norm", "(", "inp", "+", "core_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.__init__": [[106, 147], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "pre_lnorm", "=", "False", ",", "\n", "r_r_bias", "=", "None", ",", "r_w_bias", "=", "None", ",", "output_attentions", "=", "False", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "init_std", "=", "0.02", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRelPartialLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "output_attentions", "=", "output_attentions", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "qkv_net", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "3", "*", "n_head", "*", "d_head", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "init_std", ")", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "'qkv_net'", ")", "\n", "\n", "self", ".", "drop", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "dropatt", ")", "\n", "self", ".", "o_net", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "init_std", ")", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "'o_net'", ")", "\n", "\n", "self", ".", "layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "layer_norm_epsilon", ",", "name", "=", "'layer_norm'", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n", "if", "r_r_bias", "is", "not", "None", "and", "r_w_bias", "is", "not", "None", ":", "# Biases are shared", "\n", "            ", "self", ".", "r_r_bias", "=", "r_r_bias", "\n", "self", ".", "r_w_bias", "=", "r_w_bias", "\n", "", "else", ":", "\n", "            ", "self", ".", "r_r_bias", "=", "None", "\n", "self", ".", "r_w_bias", "=", "None", "\n", "\n", "", "self", ".", "r_net", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "n_head", "*", "self", ".", "d_head", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "init_std", ")", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "'r_net'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.build": [[148, 159], ["super().build", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.add_weight", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.add_weight"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "self", ".", "r_r_bias", "is", "None", "or", "self", ".", "r_w_bias", "is", "None", ":", "# Biases are not shared", "\n", "            ", "self", ".", "r_r_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'r_r_bias'", ")", "\n", "self", ".", "r_w_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'r_w_bias'", ")", "\n", "", "super", "(", "TFRelPartialLearnableMultiHeadAttn", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn._rel_shift": [[160, 169], ["modeling_tf_utils.shape_list", "tensorflow.pad", "tensorflow.reshape", "tensorflow.slice", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "_rel_shift", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_size", "=", "shape_list", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "x_size", "[", "1", "]", "+", "1", ",", "x_size", "[", "0", "]", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", "]", ")", "\n", "x", "=", "tf", ".", "slice", "(", "x", ",", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "x_size", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.call": [[170, 249], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.einsum", "tensorflow.einsum", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn._rel_shift", "tensorflow.nn.softmax", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.dropatt", "tensorflow.einsum", "modeling_tf_utils.shape_list", "tensorflow.reshape", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.o_net", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.drop", "tensorflow.concat", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.r_net", "tensorflow.split", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.r_net", "tensorflow.split", "modeling_tf_utils.shape_list", "outputs.append", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.qkv_net", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.qkv_net", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.qkv_net", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.qkv_net", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.layer_norm", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.layer_norm", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn.layer_norm"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn._rel_shift", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "w", ",", "r", ",", "attn_mask", ",", "mems", ",", "head_mask", "=", "inputs", "\n", "qlen", ",", "rlen", ",", "bsz", "=", "shape_list", "(", "w", ")", "[", "0", "]", ",", "shape_list", "(", "r", ")", "[", "0", "]", ",", "shape_list", "(", "w", ")", "[", "1", "]", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "cat", "=", "tf", ".", "concat", "(", "[", "mems", ",", "w", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "cat", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "tf", ".", "split", "(", "w_heads", ",", "3", ",", "axis", "=", "-", "1", ")", "\n", "w_head_q", "=", "w_head_q", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "w", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "tf", ".", "split", "(", "w_heads", ",", "3", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "klen", "=", "shape_list", "(", "w_head_k", ")", "[", "0", "]", "\n", "\n", "w_head_q", "=", "tf", ".", "reshape", "(", "w_head_q", ",", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_k", "=", "tf", ".", "reshape", "(", "w_head_k", ",", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_v", "=", "tf", ".", "reshape", "(", "w_head_v", ",", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "# qlen x bsz x n_head x d_head", "\n", "\n", "r_head_k", "=", "tf", ".", "reshape", "(", "r_head_k", ",", "(", "rlen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "# qlen x n_head x d_head", "\n", "\n", "#### compute attention score", "\n", "rw_head_q", "=", "w_head_q", "+", "self", ".", "r_w_bias", "# qlen x bsz x n_head x d_head", "\n", "AC", "=", "tf", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "rw_head_q", ",", "w_head_k", ")", "# qlen x klen x bsz x n_head", "\n", "\n", "rr_head_q", "=", "w_head_q", "+", "self", ".", "r_r_bias", "\n", "BD", "=", "tf", ".", "einsum", "(", "'ibnd,jnd->ijbn'", ",", "rr_head_q", ",", "r_head_k", ")", "# qlen x klen x bsz x n_head", "\n", "BD", "=", "self", ".", "_rel_shift", "(", "BD", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "AC", "+", "BD", "\n", "attn_score", "=", "attn_score", "*", "self", ".", "scale", "\n", "\n", "#### compute attention probability", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask_t", "=", "attn_mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "attn_score", "=", "attn_score", "*", "(", "1", "-", "attn_mask_t", ")", "-", "1e30", "*", "attn_mask_t", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "attn_prob", "=", "tf", ".", "nn", ".", "softmax", "(", "attn_score", ",", "axis", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ",", "training", "=", "training", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attn_prob", "=", "attn_prob", "*", "head_mask", "\n", "\n", "#### compute attention vector", "\n", "", "attn_vec", "=", "tf", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "attn_prob", ",", "w_head_v", ")", "\n", "\n", "# [qlen x bsz x n_head x d_head]", "\n", "attn_vec_sizes", "=", "shape_list", "(", "attn_vec", ")", "\n", "attn_vec", "=", "tf", ".", "reshape", "(", "attn_vec", ",", "\n", "(", "attn_vec_sizes", "[", "0", "]", ",", "attn_vec_sizes", "[", "1", "]", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ",", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "outputs", "=", "[", "w", "+", "attn_out", "]", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "outputs", "=", "[", "self", ".", "layer_norm", "(", "w", "+", "attn_out", ")", "]", "\n", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "attn_prob", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer.__init__": [[252, 273], ["super().__init__", "modeling_tf_transfo_xl.TFRelPartialLearnableMultiHeadAttn", "modeling_tf_transfo_xl.TFPositionwiseFF"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "\n", "dropatt", "=", "0.", ",", "pre_lnorm", "=", "False", ",", "\n", "r_w_bias", "=", "None", ",", "\n", "r_r_bias", "=", "None", ",", "\n", "output_attentions", "=", "False", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "init_std", "=", "0.02", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRelPartialLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "dec_attn", "=", "TFRelPartialLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "\n", "d_head", ",", "dropout", ",", "tgt_len", "=", "tgt_len", ",", "ext_len", "=", "ext_len", ",", "\n", "mem_len", "=", "mem_len", ",", "dropatt", "=", "dropatt", ",", "pre_lnorm", "=", "pre_lnorm", ",", "\n", "r_w_bias", "=", "r_w_bias", ",", "r_r_bias", "=", "r_r_bias", ",", "init_std", "=", "init_std", ",", "\n", "output_attentions", "=", "output_attentions", ",", "\n", "layer_norm_epsilon", "=", "layer_norm_epsilon", ",", "name", "=", "'dec_attn'", ")", "\n", "self", ".", "pos_ff", "=", "TFPositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "pre_lnorm", ",", "init_std", "=", "init_std", ",", "\n", "layer_norm_epsilon", "=", "layer_norm_epsilon", ",", "\n", "name", "=", "'pos_ff'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer.call": [[274, 283], ["modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer.dec_attn", "modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer.pos_ff"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "dec_inp", ",", "r", ",", "dec_attn_mask", ",", "mems", ",", "head_mask", "=", "inputs", "\n", "attn_outputs", "=", "self", ".", "dec_attn", "(", "[", "dec_inp", ",", "r", ",", "dec_attn_mask", ",", "\n", "mems", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "ff_output", "=", "self", ".", "pos_ff", "(", "attn_outputs", "[", "0", "]", ",", "training", "=", "training", ")", "\n", "\n", "outputs", "=", "[", "ff_output", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFAdaptiveEmbedding.__init__": [[286, 314], ["super().__init__", "range", "len", "modeling_tf_transfo_xl.TFAdaptiveEmbedding.emb_layers.append", "tensorflow.keras.layers.Embedding", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "init_std", "=", "0.02", ",", "\n", "sample_softmax", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAdaptiveEmbedding", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "init_std", "=", "init_std", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "div_val", "=", "div_val", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "emb_scale", "=", "d_proj", "**", "0.5", "\n", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "\n", "self", ".", "emb_layers", "=", "[", "]", "\n", "self", ".", "emb_projs", "=", "[", "]", "\n", "if", "div_val", "==", "1", ":", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "d_embed", "//", "(", "div_val", "**", "i", ")", "\n", "self", ".", "emb_layers", ".", "append", "(", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "r_idx", "-", "l_idx", ",", "\n", "d_emb_i", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "init_std", ")", ",", "\n", "name", "=", "'emb_layers_._{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFAdaptiveEmbedding.build": [[315, 323], ["range", "super().build", "len", "modeling_tf_transfo_xl.TFAdaptiveEmbedding.emb_projs.append", "modeling_tf_transfo_xl.TFAdaptiveEmbedding.add_weight", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["", "", "", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "            ", "d_emb_i", "=", "self", ".", "d_embed", "//", "(", "self", ".", "div_val", "**", "i", ")", "\n", "self", ".", "emb_projs", ".", "append", "(", "self", ".", "add_weight", "(", "shape", "=", "(", "d_emb_i", ",", "self", ".", "d_proj", ")", ",", "\n", "initializer", "=", "get_initializer", "(", "self", ".", "init_std", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'emb_projs_._{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "", "super", "(", "TFAdaptiveEmbedding", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFAdaptiveEmbedding.call": [[324, 348], ["tensorflow.reshape", "tensorflow.zeros", "range", "tensorflow.reshape", "len", "tensorflow.einsum", "tensorflow.cast", "tensorflow.scatter_nd", "modeling_tf_utils.shape_list", "tensorflow.boolean_mask", "tensorflow.where", "tensorflow.cast", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "", "else", ":", "\n", "            ", "inp_flat", "=", "tf", ".", "reshape", "(", "inp", ",", "(", "-", "1", ",", ")", ")", "\n", "emb_flat", "=", "tf", ".", "zeros", "(", "[", "shape_list", "(", "inp_flat", ")", "[", "0", "]", ",", "self", ".", "d_proj", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "\n", "mask_i", "=", "(", "inp_flat", ">=", "l_idx", ")", "&", "(", "inp_flat", "<", "r_idx", ")", "\n", "\n", "inp_i", "=", "tf", ".", "boolean_mask", "(", "inp_flat", ",", "mask_i", ")", "-", "l_idx", "\n", "emb_i", "=", "self", ".", "emb_layers", "[", "i", "]", "(", "inp_i", ")", "\n", "emb_i", "=", "tf", ".", "einsum", "(", "'id,de->ie'", ",", "emb_i", ",", "self", ".", "emb_projs", "[", "i", "]", ")", "\n", "\n", "mask_idx", "=", "tf", ".", "cast", "(", "tf", ".", "where", "(", "mask_i", ")", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "emb_flat", "+=", "tf", ".", "scatter_nd", "(", "mask_idx", ",", "emb_i", ",", "tf", ".", "cast", "(", "shape_list", "(", "emb_flat", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ")", "\n", "\n", "", "embed_shape", "=", "shape_list", "(", "inp", ")", "+", "[", "self", ".", "d_proj", "]", "\n", "embed", "=", "tf", ".", "reshape", "(", "emb_flat", ",", "embed_shape", ")", "\n", "\n", "", "embed", "*=", "self", ".", "emb_scale", "\n", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.__init__": [[351, 403], ["super().__init__", "modeling_tf_transfo_xl.TFAdaptiveEmbedding", "tensorflow.keras.layers.Dropout", "range", "modeling_tf_transfo_xl.TFPositionalEmbedding", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.layers.append", "modeling_tf_transfo_xl.TFRelPartialLearnableDecoderLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFTransfoXLMainLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "n_token", "=", "config", ".", "vocab_size", "\n", "\n", "self", ".", "d_embed", "=", "config", ".", "d_embed", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "d_head", "=", "config", ".", "d_head", "\n", "self", ".", "untie_r", "=", "config", ".", "untie_r", "\n", "\n", "self", ".", "word_emb", "=", "TFAdaptiveEmbedding", "(", "config", ".", "vocab_size", ",", "config", ".", "d_embed", ",", "config", ".", "d_model", ",", "config", ".", "cutoffs", ",", "\n", "div_val", "=", "config", ".", "div_val", ",", "init_std", "=", "config", ".", "init_std", ",", "name", "=", "'word_emb'", ")", "\n", "\n", "self", ".", "drop", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n", "self", ".", "n_layer", "=", "config", ".", "n_layer", "\n", "\n", "self", ".", "tgt_len", "=", "config", ".", "tgt_len", "\n", "self", ".", "mem_len", "=", "config", ".", "mem_len", "\n", "self", ".", "ext_len", "=", "config", ".", "ext_len", "\n", "self", ".", "max_klen", "=", "config", ".", "tgt_len", "+", "config", ".", "ext_len", "+", "config", ".", "mem_len", "\n", "\n", "self", ".", "attn_type", "=", "config", ".", "attn_type", "\n", "\n", "self", ".", "layers", "=", "[", "]", "\n", "if", "config", ".", "attn_type", "==", "0", ":", "# the default attention", "\n", "            ", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "TFRelPartialLearnableDecoderLayer", "(", "\n", "config", ".", "n_head", ",", "config", ".", "d_model", ",", "config", ".", "d_head", ",", "config", ".", "d_inner", ",", "config", ".", "dropout", ",", "\n", "tgt_len", "=", "config", ".", "tgt_len", ",", "ext_len", "=", "config", ".", "ext_len", ",", "mem_len", "=", "config", ".", "mem_len", ",", "\n", "dropatt", "=", "config", ".", "dropatt", ",", "pre_lnorm", "=", "config", ".", "pre_lnorm", ",", "\n", "r_w_bias", "=", "None", "if", "self", ".", "untie_r", "else", "self", ".", "r_w_bias", ",", "\n", "r_r_bias", "=", "None", "if", "self", ".", "untie_r", "else", "self", ".", "r_r_bias", ",", "\n", "output_attentions", "=", "self", ".", "output_attentions", ",", "\n", "layer_norm_epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "\n", "init_std", "=", "config", ".", "init_std", ",", "\n", "name", "=", "'layers_._{}'", ".", "format", "(", "i", ")", ")", "\n", ")", "\n", "", "", "else", ":", "# learnable embeddings and absolute embeddings", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "\n", "", "self", ".", "same_length", "=", "config", ".", "same_length", "\n", "self", ".", "clamp_len", "=", "config", ".", "clamp_len", "\n", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default attention", "\n", "            ", "self", ".", "pos_emb", "=", "TFPositionalEmbedding", "(", "self", ".", "d_model", ",", "name", "=", "'pos_emb'", ")", "\n", "", "else", ":", "# learnable embeddings and absolute embeddings", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.build": [[404, 415], ["super().build", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.add_weight", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.add_weight"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "not", "self", ".", "untie_r", ":", "\n", "            ", "self", ".", "r_w_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'r_w_bias'", ")", "\n", "self", ".", "r_r_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'r_r_bias'", ")", "\n", "", "super", "(", "TFTransfoXLMainLayer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.get_input_embeddings": [[416, 418], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer._resize_token_embeddings": [[419, 421], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "return", "self", ".", "word_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.backward_compatible": [[422, 424], ["None"], "methods", ["None"], ["", "def", "backward_compatible", "(", "self", ")", ":", "\n", "        ", "self", ".", "sample_softmax", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.reset_length": [[425, 429], ["None"], "methods", ["None"], ["", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer._prune_heads": [[430, 432], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.init_mems": [[433, 443], ["range", "tensorflow.zeros", "mems.append"], "methods", ["None"], ["", "def", "init_mems", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "if", "self", ".", "mem_len", ">", "0", ":", "\n", "            ", "mems", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layer", ")", ":", "\n", "                ", "empty", "=", "tf", ".", "zeros", "(", "[", "self", ".", "mem_len", ",", "bsz", ",", "self", ".", "d_model", "]", ")", "\n", "mems", ".", "append", "(", "empty", ")", "\n", "\n", "", "return", "mems", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer._update_mems": [[444, 466], ["max", "range", "len", "len", "max", "len", "tensorflow.concat", "tensorflow.stop_gradient", "new_mems.append"], "methods", ["None"], ["", "", "def", "_update_mems", "(", "self", ",", "hids", ",", "mems", ",", "qlen", ",", "mlen", ")", ":", "\n", "# does not deal with None", "\n", "        ", "if", "mems", "is", "None", ":", "return", "None", "\n", "\n", "# mems is not None", "\n", "assert", "len", "(", "hids", ")", "==", "len", "(", "mems", ")", ",", "'len(hids) != len(mems)'", "\n", "\n", "# There are `mlen + qlen` steps that can be cached into mems", "\n", "# For the next step, the last `ext_len` of the `qlen` tokens", "\n", "# will be used as the extended context. Hence, we only cache", "\n", "# the tokens from `mlen + qlen - self.ext_len - self.mem_len`", "\n", "# to `mlen + qlen - self.ext_len`.", "\n", "new_mems", "=", "[", "]", "\n", "end_idx", "=", "mlen", "+", "max", "(", "0", ",", "qlen", "-", "0", "-", "self", ".", "ext_len", ")", "\n", "beg_idx", "=", "max", "(", "0", ",", "end_idx", "-", "self", ".", "mem_len", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "hids", ")", ")", ":", "\n", "\n", "            ", "cat", "=", "tf", ".", "concat", "(", "[", "mems", "[", "i", "]", ",", "hids", "[", "i", "]", "]", ",", "axis", "=", "0", ")", "\n", "tf", ".", "stop_gradient", "(", "cat", ")", "\n", "new_mems", ".", "append", "(", "cat", "[", "beg_idx", ":", "end_idx", "]", ")", "\n", "\n", "", "return", "new_mems", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLMainLayer.call": [[467, 578], ["isinstance", "tensorflow.ones", "tensorflow.linalg.band_part", "tensorflow.linalg.band_part", "tensorflow.zeros", "tensorflow.concat", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.drop", "modeling_tf_transfo_xl.TFTransfoXLMainLayer._update_mems", "isinstance", "ValueError", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.init_mems", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.word_emb", "tensorflow.linalg.band_part", "tensorflow.concat", "tensorflow.range", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.pos_emb", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.drop", "modeling_tf_transfo_xl.TFTransfoXLMainLayer.drop", "enumerate", "tensorflow.transpose", "list.append", "list", "outputs.append", "list", "outputs.append", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "tensorflow.transpose", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.minimum", "list.append", "layer", "len", "len", "len", "len", "tensorflow.transpose", "ValueError", "list.append", "tensorflow.transpose", "tensorflow.transpose", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLModel._update_mems", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "mems", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "mems", "\n", "head_mask", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "4", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "mems", "=", "inputs", ".", "get", "(", "'mems'", ",", "mems", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "4", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "# the original code for Transformer-XL used shapes [len, bsz] but we want a unified interface in the library", "\n", "# so we transpose here from shape [bsz, len] to shape [len, bsz]", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_ids", "=", "tf", ".", "transpose", "(", "input_ids", ",", "perm", "=", "(", "1", ",", "0", ")", ")", "\n", "qlen", ",", "bsz", "=", "shape_list", "(", "input_ids", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "inputs_embeds", "=", "tf", ".", "transpose", "(", "inputs_embeds", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "qlen", ",", "bsz", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "mems", "is", "None", ":", "\n", "            ", "mems", "=", "self", ".", "init_mems", "(", "bsz", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads] (a head_mask for each layer)", "\n", "# and head_mask is converted to shape [num_hidden_layers x qlen x klen x bsz x n_head]", "\n", "", "if", "not", "head_mask", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layer", "\n", "\n", "", "if", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "word_emb", "=", "inputs_embeds", "\n", "", "else", ":", "\n", "            ", "word_emb", "=", "self", ".", "word_emb", "(", "input_ids", ")", "\n", "\n", "", "mlen", "=", "shape_list", "(", "mems", "[", "0", "]", ")", "[", "0", "]", "if", "mems", "is", "not", "None", "else", "0", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "\n", "attn_mask", "=", "tf", ".", "ones", "(", "[", "qlen", ",", "qlen", "]", ")", "\n", "mask_u", "=", "tf", ".", "linalg", ".", "band_part", "(", "attn_mask", ",", "0", ",", "-", "1", ")", "\n", "mask_dia", "=", "tf", ".", "linalg", ".", "band_part", "(", "attn_mask", ",", "0", ",", "0", ")", "\n", "attn_mask_pad", "=", "tf", ".", "zeros", "(", "[", "qlen", ",", "mlen", "]", ")", "\n", "dec_attn_mask", "=", "tf", ".", "concat", "(", "[", "attn_mask_pad", ",", "mask_u", "-", "mask_dia", "]", ",", "1", ")", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "mask_l", "=", "tf", ".", "linalg", ".", "band_part", "(", "attn_mask", ",", "-", "1", ",", "0", ")", "\n", "dec_attn_mask", "=", "tf", ".", "concat", "(", "[", "dec_attn_mask", "[", ":", ",", ":", "qlen", "]", "+", "mask_l", "-", "mask_dia", ",", "\n", "dec_attn_mask", "[", ":", ",", "qlen", ":", "]", "]", ",", "1", ")", "\n", "# ::: PyTorch masking code for reference :::", "\n", "# if self.same_length:", "\n", "#     all_ones = word_emb.new_ones((qlen, klen), dtype=torch.uint8)", "\n", "#     mask_len = klen - self.mem_len", "\n", "#     if mask_len > 0:", "\n", "#         mask_shift_len = qlen - mask_len", "\n", "#     else:", "\n", "#         mask_shift_len = qlen", "\n", "#     dec_attn_mask = (torch.triu(all_ones, 1+mlen)", "\n", "#             + torch.tril(all_ones, -mask_shift_len))[:, :, None] # -1", "\n", "# else:", "\n", "#     dec_attn_mask = torch.triu(", "\n", "#         word_emb.new_ones((qlen, klen), dtype=torch.uint8), diagonal=1+mlen)[:,:,None]", "\n", "\n", "", "hids", "=", "[", "]", "\n", "attentions", "=", "[", "]", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default", "\n", "            ", "pos_seq", "=", "tf", ".", "range", "(", "klen", "-", "1", ",", "-", "1", ",", "-", "1.0", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "pos_seq", "=", "tf", ".", "minimum", "(", "pos_seq", ",", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "pos_emb", "(", "pos_seq", ")", "\n", "\n", "core_out", "=", "self", ".", "drop", "(", "word_emb", ",", "training", "=", "training", ")", "\n", "pos_emb", "=", "self", ".", "drop", "(", "pos_emb", ",", "training", "=", "training", ")", "\n", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "hids", ".", "append", "(", "core_out", ")", "\n", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "layer_outputs", "=", "layer", "(", "[", "core_out", ",", "pos_emb", ",", "dec_attn_mask", ",", "\n", "mems_i", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "core_out", "=", "layer_outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attentions", ".", "append", "(", "layer_outputs", "[", "1", "]", ")", "\n", "", "", "", "else", ":", "# learnable embeddings and absolute embeddings", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "\n", "", "core_out", "=", "self", ".", "drop", "(", "core_out", ",", "training", "=", "training", ")", "\n", "\n", "new_mems", "=", "self", ".", "_update_mems", "(", "hids", ",", "mems", ",", "mlen", ",", "qlen", ")", "\n", "\n", "# We transpose back here to shape [bsz, len, hidden_dim]", "\n", "outputs", "=", "[", "tf", ".", "transpose", "(", "core_out", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", ",", "new_mems", "]", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "# Add last layer and transpose to library standard shape [bsz, len, hidden_dim]", "\n", "            ", "hids", ".", "append", "(", "core_out", ")", "\n", "hids", "=", "list", "(", "tf", ".", "transpose", "(", "t", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", "for", "t", "in", "hids", ")", "\n", "outputs", ".", "append", "(", "hids", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# Transpose to library standard shape [bsz, n_heads, query_seq_len, key_seq_len]", "\n", "            ", "attentions", "=", "list", "(", "tf", ".", "transpose", "(", "t", ",", "perm", "=", "(", "2", ",", "3", ",", "0", ",", "1", ")", ")", "for", "t", "in", "attentions", ")", "\n", "outputs", ".", "append", "(", "attentions", ")", "\n", "", "return", "outputs", "# last hidden state, new_mems, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLModel.__init__": [[681, 684], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_transfo_xl.TFTransfoXLMainLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFTransfoXLModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFTransfoXLMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLModel.call": [[685, 688], ["modeling_tf_transfo_xl.TFTransfoXLModel.transformer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.__init__": [[723, 734], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_transfo_xl.TFTransfoXLMainLayer", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TFTransfoXLLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "TFTransfoXLMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "sample_softmax", "=", "config", ".", "sample_softmax", "\n", "# use sampled softmax", "\n", "if", "config", ".", "sample_softmax", ">", "0", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# use adaptive softmax (including standard softmax)", "\n", "", "else", ":", "\n", "            ", "self", ".", "crit", "=", "TFAdaptiveSoftmaxMask", "(", "config", ".", "vocab_size", ",", "config", ".", "d_embed", ",", "config", ".", "d_model", ",", "\n", "config", ".", "cutoffs", ",", "div_val", "=", "config", ".", "div_val", ",", "name", "=", "'crit'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.reset_length": [[735, 737], ["modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.transformer.reset_length"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.reset_length"], ["", "", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "transformer", ".", "reset_length", "(", "tgt_len", ",", "ext_len", ",", "mem_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.init_mems": [[738, 740], ["modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.transformer.init_mems"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems"], ["", "def", "init_mems", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "init_mems", "(", "bsz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.call": [[741, 778], ["isinstance", "modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.transformer", "isinstance", "modeling_tf_transfo_xl.TFTransfoXLLMHeadModel.crit", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "mems", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "mems", "\n", "head_mask", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "inputs_embeds", "\n", "labels", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "labels", "\n", "assert", "len", "(", "inputs", ")", "<=", "5", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "mems", "=", "inputs", ".", "get", "(", "'mems'", ",", "mems", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "labels", "=", "inputs", ".", "get", "(", "'labels'", ",", "labels", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "5", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "bsz", ",", "tgt_len", "=", "shape_list", "(", "input_ids", ")", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "bsz", ",", "tgt_len", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "2", "]", "\n", "\n", "", "transformer_outputs", "=", "self", ".", "transformer", "(", "[", "input_ids", ",", "mems", ",", "head_mask", ",", "inputs_embeds", "]", ",", "training", "=", "training", ")", "\n", "\n", "last_hidden", "=", "transformer_outputs", "[", "0", "]", "\n", "pred_hid", "=", "last_hidden", "[", ":", ",", "-", "tgt_len", ":", "]", "\n", "outputs", "=", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "self", ".", "sample_softmax", ">", "0", "and", "training", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "# pred_hid = tf.reshape(pred_hid, (-1, shape_list(pred_hid)[-1]))", "\n", "            ", "softmax_output", "=", "self", ".", "crit", "(", "[", "pred_hid", ",", "labels", "]", ",", "training", "=", "training", ")", "\n", "# softmax_output = tf.reshape(softmax_output, (bsz, tgt_len, -1))", "\n", "outputs", "=", "[", "softmax_output", "]", "+", "outputs", "\n", "\n", "", "return", "outputs", "# logits, new_mems, (all hidden states), (all attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaEmbeddings.__init__": [[45, 48], ["modeling_tf_bert.TFBertEmbeddings.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaEmbeddings", ",", "self", ")", ".", "__init__", "(", "config", ",", "**", "kwargs", ")", "\n", "self", ".", "padding_idx", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaEmbeddings._embedding": [[49, 62], ["super()._embedding", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings._embedding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "_embedding", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Applies embedding based on inputs tensor.\"\"\"", "\n", "input_ids", ",", "position_ids", ",", "token_type_ids", ",", "inputs_embeds", "=", "inputs", "\n", "\n", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "seq_length", "=", "shape_list", "(", "input_ids", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "seq_length", "=", "shape_list", "(", "inputs_embeds", ")", "[", "1", "]", "\n", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "range", "(", "self", ".", "padding_idx", "+", "1", ",", "seq_length", "+", "self", ".", "padding_idx", "+", "1", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "", "return", "super", "(", "TFRobertaEmbeddings", ",", "self", ")", ".", "_embedding", "(", "[", "input_ids", ",", "position_ids", ",", "token_type_ids", ",", "inputs_embeds", "]", ",", "training", "=", "training", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaMainLayer.__init__": [[68, 71], ["modeling_tf_bert.TFBertMainLayer.__init__", "modeling_tf_roberta.TFRobertaEmbeddings"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaMainLayer", ",", "self", ")", ".", "__init__", "(", "config", ",", "**", "kwargs", ")", "\n", "self", ".", "embeddings", "=", "TFRobertaEmbeddings", "(", "config", ",", "name", "=", "'embeddings'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaMainLayer.get_input_embeddings": [[72, 74], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaModel.__init__": [[207, 210], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_roberta.TFRobertaMainLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "roberta", "=", "TFRobertaMainLayer", "(", "config", ",", "name", "=", "'roberta'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaModel.call": [[211, 214], ["modeling_tf_roberta.TFRobertaModel.roberta"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaLMHead.__init__": [[218, 230], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Activation", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaLMHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'dense'", ")", "\n", "self", ".", "layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'layer_norm'", ")", "\n", "self", ".", "act", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "gelu", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "decoder", "=", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaLMHead.build": [[231, 237], ["modeling_tf_roberta.TFRobertaLMHead.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'bias'", ")", "\n", "super", "(", "TFRobertaLMHead", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaLMHead.call": [[238, 247], ["modeling_tf_roberta.TFRobertaLMHead.dense", "modeling_tf_roberta.TFRobertaLMHead.act", "modeling_tf_roberta.TFRobertaLMHead.layer_norm", "modeling_tf_roberta.TFRobertaLMHead.decoder"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "self", ".", "dense", "(", "features", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# project back to size of vocabulary with bias", "\n", "x", "=", "self", ".", "decoder", "(", "x", ",", "mode", "=", "\"linear\"", ")", "+", "self", ".", "bias", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaForMaskedLM.__init__": [[284, 289], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_roberta.TFRobertaMainLayer", "modeling_tf_roberta.TFRobertaLMHead"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "roberta", "=", "TFRobertaMainLayer", "(", "config", ",", "name", "=", "\"roberta\"", ")", "\n", "self", ".", "lm_head", "=", "TFRobertaLMHead", "(", "config", ",", "self", ".", "roberta", ".", "embeddings", ",", "name", "=", "\"lm_head\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaForMaskedLM.get_output_embeddings": [[290, 292], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", ".", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaForMaskedLM.call": [[293, 302], ["modeling_tf_roberta.TFRobertaForMaskedLM.roberta", "modeling_tf_roberta.TFRobertaForMaskedLM.lm_head"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "lm_head", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaClassificationHead.__init__": [[307, 317], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaClassificationHead", ",", "self", ")", ".", "__init__", "(", "config", ",", "**", "kwargs", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "activation", "=", "'tanh'", ",", "\n", "name", "=", "\"dense\"", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "out_proj", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "\"out_proj\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaClassificationHead.call": [[318, 325], ["modeling_tf_roberta.TFRobertaClassificationHead.dropout", "modeling_tf_roberta.TFRobertaClassificationHead.dense", "modeling_tf_roberta.TFRobertaClassificationHead.dropout", "modeling_tf_roberta.TFRobertaClassificationHead.out_proj"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "features", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", "=", "features", "[", ":", ",", "0", ",", ":", "]", "# take <s> token (equiv. to [CLS])", "\n", "x", "=", "self", ".", "dropout", "(", "x", ",", "training", "=", "training", ")", "\n", "x", "=", "self", ".", "dense", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ",", "training", "=", "training", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaForSequenceClassification.__init__": [[356, 362], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_roberta.TFRobertaMainLayer", "modeling_tf_roberta.TFRobertaClassificationHead"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "TFRobertaMainLayer", "(", "config", ",", "name", "=", "\"roberta\"", ")", "\n", "self", ".", "classifier", "=", "TFRobertaClassificationHead", "(", "config", ",", "name", "=", "\"classifier\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaForSequenceClassification.call": [[363, 372], ["modeling_tf_roberta.TFRobertaForSequenceClassification.roberta", "modeling_tf_roberta.TFRobertaForSequenceClassification.classifier", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "\n", "return", "outputs", "# logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaForTokenClassification.__init__": [[402, 411], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_roberta.TFRobertaMainLayer", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFRobertaForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "TFRobertaMainLayer", "(", "config", ",", "name", "=", "'roberta'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'classifier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_roberta.TFRobertaForTokenClassification.call": [[412, 423], ["modeling_tf_roberta.TFRobertaForTokenClassification.roberta", "modeling_tf_roberta.TFRobertaForTokenClassification.dropout", "modeling_tf_roberta.TFRobertaForTokenClassification.classifier", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# scores, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.convert_xlnet_checkpoint_to_pytorch": [[46, 73], ["transformers.XLNetConfig.from_json_file", "transformers.load_tf_weights_in_xlnet", "os.path.join", "os.path.join", "print", "torch.save", "print", "finetuning_task.lower", "print", "transformers.XLNetForSequenceClassification", "transformers.XLNetLMHeadModel.state_dict", "open", "f.write", "transformers.XLNetForQuestionAnswering", "transformers.XLNetLMHeadModel", "os.path.abspath", "os.path.abspath", "XLNetConfig.from_json_file.to_json_string", "str"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.load_tf_weights_in_xlnet", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string"], ["def", "convert_xlnet_checkpoint_to_pytorch", "(", "tf_checkpoint_path", ",", "bert_config_file", ",", "pytorch_dump_folder_path", ",", "finetuning_task", "=", "None", ")", ":", "\n", "# Initialise PyTorch model", "\n", "    ", "config", "=", "XLNetConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "\n", "finetuning_task", "=", "finetuning_task", ".", "lower", "(", ")", "if", "finetuning_task", "is", "not", "None", "else", "\"\"", "\n", "if", "finetuning_task", "in", "GLUE_TASKS_NUM_LABELS", ":", "\n", "        ", "print", "(", "\"Building PyTorch XLNetForSequenceClassification model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "config", ".", "finetuning_task", "=", "finetuning_task", "\n", "config", ".", "num_labels", "=", "GLUE_TASKS_NUM_LABELS", "[", "finetuning_task", "]", "\n", "model", "=", "XLNetForSequenceClassification", "(", "config", ")", "\n", "", "elif", "'squad'", "in", "finetuning_task", ":", "\n", "        ", "config", ".", "finetuning_task", "=", "finetuning_task", "\n", "model", "=", "XLNetForQuestionAnswering", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "XLNetLMHeadModel", "(", "config", ")", "\n", "\n", "# Load weights from tf checkpoint", "\n", "", "load_tf_weights_in_xlnet", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "os", ".", "path", ".", "join", "(", "pytorch_dump_folder_path", ",", "WEIGHTS_NAME", ")", "\n", "pytorch_config_dump_path", "=", "os", ".", "path", ".", "join", "(", "pytorch_dump_folder_path", ",", "CONFIG_NAME", ")", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "pytorch_weights_dump_path", ")", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_weights_dump_path", ")", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "pytorch_config_dump_path", ")", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5LayerNorm.__init__": [[48, 54], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-6", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Construct a layernorm module in the T5 style\n            No bias and no substraction of mean.\n        \"\"\"", "\n", "super", "(", "TFT5LayerNorm", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "variance_epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5LayerNorm.build": [[55, 62], ["modeling_tf_t5.TFT5LayerNorm.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"Build shared word embedding layer \"\"\"", "\n", "self", ".", "weight", "=", "self", ".", "add_weight", "(", "\n", "\"weight\"", ",", "\n", "shape", "=", "(", "input_shape", "[", "-", "1", "]", ",", ")", ",", "\n", "initializer", "=", "'ones'", ")", "\n", "super", "(", "TFT5LayerNorm", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5LayerNorm.call": [[63, 67], ["tensorflow.math.reduce_mean", "tensorflow.math.square", "tensorflow.math.rsqrt"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ")", ":", "\n", "        ", "variance", "=", "tf", ".", "math", ".", "reduce_mean", "(", "tf", ".", "math", ".", "square", "(", "x", ")", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "x", "=", "x", "*", "tf", ".", "math", ".", "rsqrt", "(", "variance", "+", "self", ".", "variance_epsilon", ")", "\n", "return", "self", ".", "weight", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5DenseReluDense.__init__": [[70, 76], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFT5DenseReluDense", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "wi", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "d_ff", ",", "use_bias", "=", "False", ",", "name", "=", "'wi'", ")", "\n", "self", ".", "wo", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "d_model", ",", "use_bias", "=", "False", ",", "name", "=", "'wo'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout_rate", ")", "\n", "self", ".", "act", "=", "tf", ".", "keras", ".", "activations", ".", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5DenseReluDense.call": [[77, 83], ["modeling_tf_t5.TFT5DenseReluDense.wi", "modeling_tf_t5.TFT5DenseReluDense.act", "modeling_tf_t5.TFT5DenseReluDense.dropout", "modeling_tf_t5.TFT5DenseReluDense.wo"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ",", "training", "=", "False", ")", ":", "\n", "        ", "h", "=", "self", ".", "wi", "(", "hidden_states", ")", "\n", "h", "=", "self", ".", "act", "(", "h", ")", "\n", "h", "=", "self", ".", "dropout", "(", "h", ",", "training", "=", "training", ")", "\n", "h", "=", "self", ".", "wo", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5LayerFF.__init__": [[86, 92], ["super().__init__", "modeling_tf_t5.TFT5DenseReluDense", "modeling_tf_t5.TFT5LayerNorm", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFT5LayerFF", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "DenseReluDense", "=", "TFT5DenseReluDense", "(", "config", ",", "name", "=", "'DenseReluDense'", ")", "\n", "self", ".", "layer_norm", "=", "TFT5LayerNorm", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "\n", "name", "=", "'layer_norm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5LayerFF.call": [[93, 98], ["modeling_tf_t5.TFT5LayerFF.layer_norm", "modeling_tf_t5.TFT5LayerFF.DenseReluDense", "modeling_tf_t5.TFT5LayerFF.dropout"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ",", "training", "=", "False", ")", ":", "\n", "        ", "norm_x", "=", "self", ".", "layer_norm", "(", "hidden_states", ")", "\n", "y", "=", "self", ".", "DenseReluDense", "(", "norm_x", ",", "training", "=", "training", ")", "\n", "layer_output", "=", "hidden_states", "+", "self", ".", "dropout", "(", "y", ",", "training", "=", "training", ")", "\n", "return", "layer_output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5Attention.__init__": [[103, 128], ["super().__init__", "next", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "set", "tensorflow.keras.layers.Embedding"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "has_relative_attention_bias", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFT5Attention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "layer_id", "=", "next", "(", "TFT5Attention", ".", "NEW_ID", ")", "\n", "self", ".", "is_decoder", "=", "config", ".", "is_decoder", "\n", "self", ".", "has_relative_attention_bias", "=", "has_relative_attention_bias", "\n", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "relative_attention_num_buckets", "=", "config", ".", "relative_attention_num_buckets", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "d_kv", "=", "config", ".", "d_kv", "\n", "self", ".", "n_heads", "=", "config", ".", "num_heads", "\n", "self", ".", "inner_dim", "=", "self", ".", "n_heads", "*", "self", ".", "d_kv", "\n", "\n", "# Mesh TensorFlow initialization to avoid scaling before softmax", "\n", "self", ".", "q", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "inner_dim", ",", "use_bias", "=", "False", ",", "name", "=", "'q'", ")", "\n", "self", ".", "k", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "inner_dim", ",", "use_bias", "=", "False", ",", "name", "=", "'k'", ")", "\n", "self", ".", "v", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "inner_dim", ",", "use_bias", "=", "False", ",", "name", "=", "'v'", ")", "\n", "self", ".", "o", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "d_model", ",", "use_bias", "=", "False", ",", "name", "=", "'o'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout_rate", ")", "\n", "\n", "if", "self", ".", "has_relative_attention_bias", ":", "\n", "            ", "self", ".", "relative_attention_bias", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "self", ".", "relative_attention_num_buckets", ",", "\n", "self", ".", "n_heads", ",", "\n", "name", "=", "'relative_attention_bias'", ")", "\n", "", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5Attention.prune_heads": [[129, 131], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5Attention._relative_position_bucket": [[132, 177], ["tensorflow.math.less", "tensorflow.math.minimum", "tensorflow.where", "tensorflow.math.abs", "tensorflow.math.maximum", "tensorflow.dtypes.cast", "tensorflow.dtypes.cast", "tensorflow.math.less", "tensorflow.math.log", "math.log", "tensorflow.dtypes.cast"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_relative_position_bucket", "(", "relative_position", ",", "\n", "bidirectional", "=", "True", ",", "\n", "num_buckets", "=", "32", ",", "\n", "max_distance", "=", "128", ")", ":", "\n", "        ", "\"\"\"\n        Adapted from Mesh Tensorflow:\n        https://github.com/tensorflow/mesh/blob/0cb87fe07da627bf0b7e60475d59f95ed6b5be3d/mesh_tensorflow/transformer/transformer_layers.py#L593\n\n        Translate relative position to a bucket number for relative attention.\n        The relative position is defined as memory_position - query_position, i.e.\n        the distance in tokens from the attending position to the attended-to\n        position.  If bidirectional=False, then positive relative positions are\n        invalid.\n        We use smaller buckets for small absolute relative_position and larger buckets\n        for larger absolute relative_positions.  All relative positions >=max_distance\n        map to the same bucket.  All relative positions <=-max_distance map to the\n        same bucket.  This should allow for more graceful generalization to longer\n        sequences than the model has been trained on.\n        Args:\n            relative_position: an int32 Tensor\n            bidirectional: a boolean - whether the attention is bidirectional\n            num_buckets: an integer\n            max_distance: an integer\n        Returns:\n            a Tensor with the same shape as relative_position, containing int32\n            values in the range [0, num_buckets)\n        \"\"\"", "\n", "ret", "=", "0", "\n", "n", "=", "-", "relative_position", "\n", "if", "bidirectional", ":", "\n", "            ", "num_buckets", "//=", "2", "\n", "ret", "+=", "tf", ".", "dtypes", ".", "cast", "(", "tf", ".", "math", ".", "less", "(", "n", ",", "0", ")", ",", "tf", ".", "int32", ")", "*", "num_buckets", "\n", "n", "=", "tf", ".", "math", ".", "abs", "(", "n", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "tf", ".", "math", ".", "maximum", "(", "n", ",", "0", ")", "\n", "# now n is in the range [0, inf)", "\n", "", "max_exact", "=", "num_buckets", "//", "2", "\n", "is_small", "=", "tf", ".", "math", ".", "less", "(", "n", ",", "max_exact", ")", "\n", "val_if_large", "=", "max_exact", "+", "tf", ".", "dtypes", ".", "cast", "(", "\n", "tf", ".", "math", ".", "log", "(", "tf", ".", "dtypes", ".", "cast", "(", "n", ",", "tf", ".", "float32", ")", "/", "max_exact", ")", "\n", "/", "math", ".", "log", "(", "max_distance", "/", "max_exact", ")", "*", "(", "num_buckets", "-", "max_exact", ")", ",", "tf", ".", "int32", ")", "\n", "val_if_large", "=", "tf", ".", "math", ".", "minimum", "(", "val_if_large", ",", "num_buckets", "-", "1", ")", "\n", "ret", "+=", "tf", ".", "where", "(", "is_small", ",", "n", ",", "val_if_large", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5Attention.compute_bias": [[178, 189], ["modeling_tf_t5.TFT5Attention._relative_position_bucket", "modeling_tf_t5.TFT5Attention.relative_attention_bias", "tensorflow.expand_dims", "tensorflow.range", "tensorflow.range", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Attention._relative_position_bucket"], ["", "def", "compute_bias", "(", "self", ",", "qlen", ",", "klen", ")", ":", "\n", "        ", "\"\"\" Compute binned relative position bias \"\"\"", "\n", "context_position", "=", "tf", ".", "range", "(", "qlen", ")", "[", ":", ",", "None", "]", "\n", "memory_position", "=", "tf", ".", "range", "(", "klen", ")", "[", "None", ",", ":", "]", "\n", "relative_position", "=", "memory_position", "-", "context_position", "# shape (qlen, klen)", "\n", "rp_bucket", "=", "self", ".", "_relative_position_bucket", "(", "relative_position", ",", "\n", "bidirectional", "=", "not", "self", ".", "is_decoder", ",", "\n", "num_buckets", "=", "self", ".", "relative_attention_num_buckets", ")", "\n", "values", "=", "self", ".", "relative_attention_bias", "(", "rp_bucket", ")", "# shape (qlen, klen, num_heads)", "\n", "values", "=", "tf", ".", "expand_dims", "(", "tf", ".", "transpose", "(", "values", ",", "[", "2", ",", "0", ",", "1", "]", ")", ",", "axis", "=", "0", ")", "# shape (1, num_heads, qlen, klen)", "\n", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5Attention.call": [[190, 261], ["modeling_tf_utils.shape_list", "modeling_tf_t5.TFT5Attention.call.shape"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "input", ",", "mask", "=", "None", ",", "kv", "=", "None", ",", "position_bias", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Self-attention (if kv is None) or attention over source sentence (provided by kv).\n        \"\"\"", "\n", "# Input is (bs, qlen, dim)", "\n", "# Mask is (bs, klen) (non-causal) or (bs, klen, klen)", "\n", "bs", ",", "qlen", ",", "dim", "=", "shape_list", "(", "input", ")", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "klen", "=", "qlen", "if", "cache", "is", "None", "else", "cache", "[", "'slen'", "]", "+", "qlen", "\n", "", "else", ":", "\n", "            ", "klen", "=", "shape_list", "(", "kv", ")", "[", "1", "]", "\n", "\n", "", "def", "shape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  projection \"\"\"", "\n", "return", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "x", ",", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", ",", "self", ".", "d_kv", ")", ")", ",", "perm", "=", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "\n", "", "def", "unshape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  compute context \"\"\"", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", ",", "(", "bs", ",", "-", "1", ",", "self", ".", "inner_dim", ")", ")", "\n", "\n", "", "q", "=", "shape", "(", "self", ".", "q", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "k", "=", "shape", "(", "self", ".", "k", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "", "elif", "cache", "is", "None", "or", "self", ".", "layer_id", "not", "in", "cache", ":", "\n", "            ", "k", "=", "v", "=", "kv", "\n", "k", "=", "shape", "(", "self", ".", "k", "(", "k", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v", "(", "v", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "layer_id", "in", "cache", ":", "\n", "                ", "if", "kv", "is", "None", ":", "\n", "                    ", "k_", ",", "v_", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "k", "=", "tf", ".", "concat", "(", "[", "k_", ",", "k", "]", ",", "axis", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "v", "=", "tf", ".", "concat", "(", "[", "v_", ",", "v", "]", ",", "axis", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "", "else", ":", "\n", "                    ", "k", ",", "v", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "", "", "cache", "[", "self", ".", "layer_id", "]", "=", "(", "k", ",", "v", ")", "\n", "\n", "# q = q / math.sqrt(dim_per_head)                                     # No scaling in T5", "\n", "# scores = tf.matmul(q, k, transpose_b=True)                            # (bs, n_heads, qlen, klen)", "\n", "", "scores", "=", "tf", ".", "einsum", "(", "'bnqd,bnkd->bnqk'", ",", "q", ",", "k", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "if", "position_bias", "is", "None", ":", "\n", "            ", "if", "not", "self", ".", "has_relative_attention_bias", ":", "\n", "                ", "raise", "ValueError", "(", "\"No position_bias provided and no weights to compute position_bias\"", ")", "\n", "", "position_bias", "=", "self", ".", "compute_bias", "(", "qlen", ",", "klen", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "position_bias", "=", "position_bias", "+", "mask", "\n", "# mask = (mask == 0).expand_as(scores)                              # (bs, n_heads, qlen, klen)", "\n", "# scores.masked_fill_(mask, -float('inf'))                          # (bs, n_heads, qlen, klen)", "\n", "\n", "", "", "scores", "+=", "position_bias", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ",", "axis", "=", "-", "1", ")", "# (bs, n_heads, qlen, klen)", "\n", "weights", "=", "self", ".", "dropout", "(", "weights", ",", "training", "=", "training", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "weights", "=", "weights", "*", "head_mask", "\n", "\n", "", "context", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "context", "=", "unshape", "(", "context", ")", "# (bs, qlen, dim)", "\n", "\n", "context", "=", "self", ".", "o", "(", "context", ")", "\n", "\n", "outputs", "=", "(", "context", ",", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "weights", ",", ")", "\n", "", "if", "self", ".", "has_relative_attention_bias", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "position_bias", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5LayerSelfAttention.__init__": [[264, 272], ["super().__init__", "modeling_tf_t5.TFT5Attention", "modeling_tf_t5.TFT5LayerNorm", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "has_relative_attention_bias", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFT5LayerSelfAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "SelfAttention", "=", "TFT5Attention", "(", "config", ",", "\n", "has_relative_attention_bias", "=", "has_relative_attention_bias", ",", "\n", "name", "=", "'SelfAttention'", ")", "\n", "self", ".", "layer_norm", "=", "TFT5LayerNorm", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "\n", "name", "=", "'layer_norm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5LayerSelfAttention.call": [[273, 285], ["modeling_tf_t5.TFT5LayerSelfAttention.layer_norm", "modeling_tf_t5.TFT5LayerSelfAttention.SelfAttention", "modeling_tf_t5.TFT5LayerSelfAttention.dropout"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "position_bias", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "norm_x", "=", "self", ".", "layer_norm", "(", "hidden_states", ")", "\n", "attention_output", "=", "self", ".", "SelfAttention", "(", "norm_x", ",", "\n", "mask", "=", "attention_mask", ",", "\n", "position_bias", "=", "position_bias", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "training", "=", "training", ")", "\n", "y", "=", "attention_output", "[", "0", "]", "\n", "layer_output", "=", "hidden_states", "+", "self", ".", "dropout", "(", "y", ",", "training", "=", "training", ")", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "attention_output", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5LayerCrossAttention.__init__": [[288, 296], ["super().__init__", "modeling_tf_t5.TFT5Attention", "modeling_tf_t5.TFT5LayerNorm", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "has_relative_attention_bias", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFT5LayerCrossAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "EncDecAttention", "=", "TFT5Attention", "(", "config", ",", "\n", "has_relative_attention_bias", "=", "has_relative_attention_bias", ",", "\n", "name", "=", "'EncDecAttention'", ")", "\n", "self", ".", "layer_norm", "=", "TFT5LayerNorm", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "\n", "name", "=", "'layer_norm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5LayerCrossAttention.call": [[297, 310], ["modeling_tf_t5.TFT5LayerCrossAttention.layer_norm", "modeling_tf_t5.TFT5LayerCrossAttention.EncDecAttention", "modeling_tf_t5.TFT5LayerCrossAttention.dropout"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ",", "kv", ",", "attention_mask", "=", "None", ",", "position_bias", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "norm_x", "=", "self", ".", "layer_norm", "(", "hidden_states", ")", "\n", "attention_output", "=", "self", ".", "EncDecAttention", "(", "norm_x", ",", "\n", "mask", "=", "attention_mask", ",", "\n", "kv", "=", "kv", ",", "\n", "position_bias", "=", "position_bias", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "training", "=", "training", ")", "\n", "y", "=", "attention_output", "[", "0", "]", "\n", "layer_output", "=", "hidden_states", "+", "self", ".", "dropout", "(", "y", ",", "training", "=", "training", ")", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "attention_output", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5Block.__init__": [[313, 327], ["super().__init__", "modeling_tf_t5.TFT5Block.layer.append", "modeling_tf_t5.TFT5LayerSelfAttention", "modeling_tf_t5.TFT5Block.layer.append", "modeling_tf_t5.TFT5Block.layer.append", "modeling_tf_t5.TFT5Block.layer.append", "modeling_tf_t5.TFT5LayerCrossAttention", "modeling_tf_t5.TFT5LayerFF", "modeling_tf_t5.TFT5LayerFF"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "has_relative_attention_bias", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFT5Block", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "is_decoder", "=", "config", ".", "is_decoder", "\n", "self", ".", "layer", "=", "[", "]", "\n", "self", ".", "layer", ".", "append", "(", "TFT5LayerSelfAttention", "(", "config", ",", "\n", "has_relative_attention_bias", "=", "has_relative_attention_bias", ",", "\n", "name", "=", "'layer_._0'", ")", ")", "\n", "if", "self", ".", "is_decoder", ":", "\n", "            ", "self", ".", "layer", ".", "append", "(", "TFT5LayerCrossAttention", "(", "config", ",", "\n", "has_relative_attention_bias", "=", "has_relative_attention_bias", ",", "\n", "name", "=", "'layer_._1'", ")", ")", "\n", "self", ".", "layer", ".", "append", "(", "TFT5LayerFF", "(", "config", ",", "name", "=", "'layer_._2'", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer", ".", "append", "(", "TFT5LayerFF", "(", "config", ",", "name", "=", "'layer_._1'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5Block.call": [[328, 354], ["None"], "methods", ["None"], ["", "", "def", "call", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "position_bias", "=", "None", ",", "\n", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ",", "encoder_decoder_position_bias", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "self_attention_outputs", "=", "self", ".", "layer", "[", "0", "]", "(", "hidden_states", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "position_bias", "=", "position_bias", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "training", "=", "training", ")", "\n", "hidden_states", "=", "self_attention_outputs", "[", "0", "]", "\n", "outputs", "=", "self_attention_outputs", "[", "1", ":", "]", "\n", "\n", "if", "not", "self", ".", "is_decoder", ":", "\n", "            ", "hidden_states", "=", "self", ".", "layer", "[", "1", "]", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "", "else", ":", "\n", "            ", "cross_attention_outputs", "=", "self", ".", "layer", "[", "1", "]", "(", "hidden_states", ",", "\n", "kv", "=", "encoder_hidden_states", ",", "\n", "attention_mask", "=", "encoder_attention_mask", ",", "\n", "position_bias", "=", "encoder_decoder_position_bias", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "training", "=", "training", ")", "\n", "hidden_states", "=", "cross_attention_outputs", "[", "0", "]", "\n", "outputs", "=", "outputs", "+", "cross_attention_outputs", "[", "1", ":", "]", "\n", "hidden_states", "=", "self", ".", "layer", "[", "2", "]", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "+", "outputs", "# add attentions if we output them", "\n", "return", "outputs", "# hidden-states, (self-attention weights), (self-attention position bias), (cross-attention weights), (cross-attention position bias)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5MainLayer.__init__": [[361, 376], ["super().__init__", "modeling_tf_t5.TFT5LayerNorm", "tensorflow.keras.layers.Dropout", "modeling_tf_t5.TFT5Block", "range", "bool"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFT5MainLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "is_decoder", "=", "config", ".", "is_decoder", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "num_hidden_layers", "=", "config", ".", "num_layers", "\n", "\n", "self", ".", "block", "=", "[", "TFT5Block", "(", "config", ",", "\n", "has_relative_attention_bias", "=", "bool", "(", "i", "==", "0", ")", ",", "\n", "name", "=", "'block_._{}'", ".", "format", "(", "i", ")", ")", "\n", "for", "i", "in", "range", "(", "config", ".", "num_layers", ")", "]", "\n", "self", ".", "final_layer_norm", "=", "TFT5LayerNorm", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "\n", "name", "=", "'final_layer_norm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5MainLayer._resize_token_embeddings": [[377, 379], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "# Not implemented yet in the library fr TF 2.0 models", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5MainLayer._prune_heads": [[380, 382], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "raise", "NotImplementedError", "# Not implemented yet in the library fr TF 2.0 models", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5MainLayer.call": [[383, 495], ["tensorflow.cast", "len", "enumerate", "modeling_tf_t5.TFT5MainLayer.final_layer_norm", "modeling_tf_t5.TFT5MainLayer.dropout", "modeling_tf_utils.shape_list", "tensorflow.fill", "tensorflow.fill", "modeling_tf_utils.shape_list", "tensorflow.cast", "len", "layer_module", "modeling_tf_utils.shape_list", "tensorflow.range", "tensorflow.less_equal", "tensorflow.cast", "tensorflow.tile"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "\n", "encoder_attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "\n", "        ", "batch_size", ",", "seq_length", "=", "shape_list", "(", "hidden_states", ")", "[", ":", "2", "]", "\n", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "tf", ".", "fill", "(", "(", "batch_size", ",", "seq_length", ")", ",", "1", ")", "\n", "", "if", "self", ".", "is_decoder", "and", "encoder_attention_mask", "is", "None", ":", "\n", "            ", "encoder_seq_length", "=", "encoder_hidden_states", ".", "shape", "[", "1", "]", "\n", "encoder_attention_mask", "=", "tf", ".", "fill", "(", "(", "batch_size", ",", "encoder_seq_length", ")", ",", "1", ")", "\n", "\n", "# We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]", "\n", "# ourselves in which case we just need to make it broadcastable to all heads.", "\n", "", "attention_mask", "=", "tf", ".", "cast", "(", "attention_mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "num_dims_attention_mask", "=", "len", "(", "shape_list", "(", "attention_mask", ")", ")", "\n", "if", "num_dims_attention_mask", "==", "3", ":", "\n", "            ", "extended_attention_mask", "=", "attention_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "", "elif", "num_dims_attention_mask", "==", "2", ":", "\n", "# Provided a padding mask of dimensions [batch_size, seq_length]", "\n", "# - if the model is a decoder, apply a causal mask in addition to the padding mask", "\n", "# - if the model is an encoder, make the mask broadcastable to [batch_size, num_heads, seq_length, seq_length]", "\n", "            ", "if", "self", ".", "config", ".", "is_decoder", ":", "\n", "                ", "seq_ids", "=", "tf", ".", "range", "(", "seq_length", ")", "\n", "causal_mask", "=", "tf", ".", "less_equal", "(", "tf", ".", "tile", "(", "seq_ids", "[", "None", ",", "None", ",", ":", "]", ",", "(", "batch_size", ",", "seq_length", ",", "1", ")", ")", ",", "\n", "seq_ids", "[", "None", ",", ":", ",", "None", "]", ")", "\n", "causal_mask", "=", "tf", ".", "cast", "(", "causal_mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "extended_attention_mask", "=", "causal_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "*", "attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "extended_attention_mask", "=", "attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "\n", "# T5 has a mask that can compare sequence ids, we can simulate this here with this transposistion", "\n", "# Cf. https://github.com/tensorflow/mesh/blob/8d2465e9bc93129b913b5ccc6a59aa97abd96ec6/mesh_tensorflow/transformer/transformer_layers.py#L270", "\n", "# extended_attention_mask = tf.math.equal(extended_attention_mask,", "\n", "#                                         tf.transpose(extended_attention_mask, perm=(-1, -2)))", "\n", "\n", "", "", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "1e9", "\n", "\n", "if", "self", ".", "is_decoder", ":", "\n", "# If a 2D ou 3D attention mask is provided for the cross-attention", "\n", "# we need to make broadcastabe to [batch_size, num_heads, seq_length, seq_length]", "\n", "            ", "encoder_attention_mask", "=", "tf", ".", "cast", "(", "encoder_attention_mask", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "num_dims_encoder_attention_mask", "=", "len", "(", "shape_list", "(", "encoder_attention_mask", ")", ")", "\n", "if", "num_dims_encoder_attention_mask", "==", "3", ":", "\n", "                ", "encoder_extended_attention_mask", "=", "encoder_attention_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "", "if", "num_dims_encoder_attention_mask", "==", "2", ":", "\n", "                ", "encoder_extended_attention_mask", "=", "encoder_attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "\n", "# T5 has a mask that can compare sequence ids, we can simulate this here with this transposistion", "\n", "# Cf. https://github.com/tensorflow/mesh/blob/8d2465e9bc93129b913b5ccc6a59aa97abd96ec6/mesh_tensorflow/transformer/transformer_layers.py#L270", "\n", "# encoder_extended_attention_mask = tf.math.equal(encoder_extended_attention_mask,", "\n", "#                                         tf.transpose(encoder_extended_attention_mask, perm=(-1, -2)))", "\n", "\n", "", "encoder_extended_attention_mask", "=", "(", "1.0", "-", "encoder_extended_attention_mask", ")", "*", "-", "1e9", "\n", "", "else", ":", "\n", "            ", "encoder_extended_attention_mask", "=", "None", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "", "if", "not", "head_mask", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "num_hidden_layers", "\n", "# head_mask = tf.constant([0] * self.num_hidden_layers)", "\n", "\n", "", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "position_bias", "=", "None", "\n", "encoder_decoder_position_bias", "=", "None", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "block", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "layer_outputs", "=", "layer_module", "(", "hidden_states", ",", "\n", "attention_mask", "=", "extended_attention_mask", ",", "\n", "position_bias", "=", "position_bias", ",", "\n", "encoder_hidden_states", "=", "encoder_hidden_states", ",", "\n", "encoder_attention_mask", "=", "encoder_extended_attention_mask", ",", "\n", "encoder_decoder_position_bias", "=", "encoder_decoder_position_bias", ",", "\n", "head_mask", "=", "head_mask", "[", "i", "]", ",", "\n", "training", "=", "training", ")", "\n", "hidden_states", "=", "layer_outputs", "[", "0", "]", "\n", "if", "i", "==", "0", ":", "\n", "# We share the position biases between the layers - the first layer store them", "\n", "# layer_outputs = hidden-states, (self-attention weights), (self-attention position bias), (cross-attention weights), (cross-attention position bias)", "\n", "                ", "position_bias", "=", "layer_outputs", "[", "2", "if", "self", ".", "output_attentions", "else", "1", "]", "\n", "if", "self", ".", "is_decoder", ":", "\n", "                    ", "encoder_decoder_position_bias", "=", "layer_outputs", "[", "4", "if", "self", ".", "output_attentions", "else", "2", "]", "\n", "\n", "", "", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "layer_outputs", "[", "1", "]", ",", ")", "\n", "\n", "", "", "hidden_states", "=", "self", ".", "final_layer_norm", "(", "hidden_states", ")", "\n", "layer_output", "=", "self", ".", "dropout", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "\n", "# Add last layer", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5PreTrainedModel.dummy_inputs": [[512, 520], ["tensorflow.constant", "tensorflow.constant"], "methods", ["None"], ["@", "property", "\n", "def", "dummy_inputs", "(", "self", ")", ":", "\n", "        ", "input_ids", "=", "tf", ".", "constant", "(", "DUMMY_INPUTS", ")", "\n", "input_mask", "=", "tf", ".", "constant", "(", "DUMMY_MASK", ")", "\n", "dummy_inputs", "=", "{", "'decoder_input_ids'", ":", "input_ids", ",", "\n", "'encoder_input_ids'", ":", "input_ids", ",", "\n", "'decoder_attention_mask'", ":", "input_mask", "}", "\n", "return", "dummy_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5Model.__init__": [[617, 628], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_utils.TFSharedEmbeddings", "copy.deepcopy", "modeling_tf_t5.TFT5MainLayer", "copy.deepcopy", "modeling_tf_t5.TFT5MainLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFT5Model", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "shared", "=", "TFSharedEmbeddings", "(", "config", ".", "vocab_size", ",", "config", ".", "d_model", ",", "\n", "name", "=", "'shared'", ")", "\n", "\n", "encoder_config", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "self", ".", "encoder", "=", "TFT5MainLayer", "(", "encoder_config", ",", "name", "=", "'encoder'", ")", "\n", "\n", "decoder_config", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "decoder_config", ".", "is_decoder", "=", "True", "\n", "self", ".", "decoder", "=", "TFT5MainLayer", "(", "decoder_config", ",", "name", "=", "'decoder'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5Model.get_input_embeddings": [[629, 631], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shared", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5Model.get_output_embeddings": [[632, 634], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shared", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5Model.call": [[635, 679], ["isinstance", "dict", "dict.copy", "dict.copy", "dict.copy.update", "dict.copy.update", "dict.copy.pop", "dict.copy.pop", "dict.copy.get", "modeling_tf_t5.TFT5Model.decoder", "kwargs.update", "dict", "dict", "dict.copy.pop", "modeling_tf_t5.TFT5Model.encoder", "dict.copy.pop", "modeling_tf_t5.TFT5Model.shared", "dict.copy.pop", "modeling_tf_t5.TFT5Model.shared", "kwargs.items", "kwargs.items", "k.startswith", "kwargs.items", "k.startswith", "k.startswith", "k.startswith", "len", "len"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "decoder_input_ids", ",", "**", "kwargs", ")", ":", "\n", "# We allow two types of multi-inputs:", "\n", "# - traditional keyword arguments in the call method", "\n", "# - all the arguments provided as a dict in the first positional argument of call", "\n", "# The last option is useful to use the tf.keras fit() method.", "\n", "\n", "        ", "if", "isinstance", "(", "decoder_input_ids", ",", "dict", ")", ":", "\n", "            ", "kwargs", ".", "update", "(", "decoder_input_ids", ")", "\n", "", "else", ":", "\n", "            ", "kwargs", "[", "'decoder_input_ids'", "]", "=", "decoder_input_ids", "\n", "\n", "", "kwargs_common", "=", "dict", "(", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "not", "k", ".", "startswith", "(", "\"encoder_\"", ")", "and", "not", "k", ".", "startswith", "(", "\"decoder_\"", ")", ")", "\n", "kwargs_encoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_decoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_encoder", ".", "update", "(", "dict", "(", "(", "k", "[", "len", "(", "\"encoder_\"", ")", ":", "]", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "\"encoder_\"", ")", ")", ")", "\n", "kwargs_decoder", ".", "update", "(", "dict", "(", "(", "k", "[", "len", "(", "\"decoder_\"", ")", ":", "]", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "\"decoder_\"", ")", ")", ")", "\n", "\n", "# Encode if needed (training, first prediction pass)", "\n", "encoder_hidden_states", "=", "kwargs_encoder", ".", "pop", "(", "\"hidden_states\"", ",", "None", ")", "\n", "if", "encoder_hidden_states", "is", "None", ":", "\n", "# Convert encoder inputs in embeddings if needed", "\n", "            ", "hidden_states", "=", "kwargs_encoder", ".", "pop", "(", "\"inputs_embeds\"", ",", "None", ")", "\n", "if", "hidden_states", "is", "None", ":", "\n", "                ", "encoder_inputs_ids", "=", "kwargs_encoder", ".", "pop", "(", "\"input_ids\"", ")", "\n", "hidden_states", "=", "self", ".", "shared", "(", "encoder_inputs_ids", ")", "# Convert inputs in embeddings", "\n", "\n", "", "encoder_outputs", "=", "self", ".", "encoder", "(", "hidden_states", ",", "**", "kwargs_encoder", ")", "\n", "encoder_hidden_states", "=", "encoder_outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "encoder_outputs", "=", "(", ")", "\n", "\n", "# Decode", "\n", "# Convert decoder inputs in embeddings if needed", "\n", "", "hidden_states", "=", "kwargs_decoder", ".", "pop", "(", "\"inputs_embeds\"", ",", "None", ")", "\n", "if", "hidden_states", "is", "None", ":", "\n", "            ", "decoder_inputs_ids", "=", "kwargs_decoder", ".", "pop", "(", "\"input_ids\"", ")", "\n", "hidden_states", "=", "self", ".", "shared", "(", "decoder_inputs_ids", ")", "\n", "\n", "", "kwargs_decoder", "[", "\"encoder_hidden_states\"", "]", "=", "encoder_hidden_states", "\n", "kwargs_decoder", "[", "\"encoder_attention_mask\"", "]", "=", "kwargs_encoder", ".", "get", "(", "\"attention_mask\"", ",", "None", ")", "\n", "decoder_outputs", "=", "self", ".", "decoder", "(", "hidden_states", ",", "**", "kwargs_decoder", ")", "\n", "\n", "return", "decoder_outputs", "+", "encoder_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5WithLMHeadModel.__init__": [[708, 721], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_utils.TFSharedEmbeddings", "copy.deepcopy", "modeling_tf_t5.TFT5MainLayer", "copy.deepcopy", "modeling_tf_t5.TFT5MainLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFT5WithLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "model_dim", "=", "config", ".", "d_model", "\n", "\n", "self", ".", "shared", "=", "TFSharedEmbeddings", "(", "config", ".", "vocab_size", ",", "config", ".", "d_model", ",", "\n", "name", "=", "'shared'", ")", "\n", "\n", "encoder_config", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "self", ".", "encoder", "=", "TFT5MainLayer", "(", "encoder_config", ",", "name", "=", "'encoder'", ")", "\n", "\n", "decoder_config", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "decoder_config", ".", "is_decoder", "=", "True", "\n", "self", ".", "decoder", "=", "TFT5MainLayer", "(", "decoder_config", ",", "name", "=", "'decoder'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5WithLMHeadModel.get_input_embeddings": [[722, 724], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shared", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5WithLMHeadModel.get_output_embeddings": [[725, 727], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shared", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_t5.TFT5WithLMHeadModel.call": [[728, 776], ["isinstance", "dict", "dict.copy", "dict.copy", "dict.copy.update", "dict.copy.update", "dict.copy.pop", "dict.copy.pop", "dict.copy.get", "modeling_tf_t5.TFT5WithLMHeadModel.decoder", "modeling_tf_t5.TFT5WithLMHeadModel.shared", "kwargs.update", "dict", "dict", "dict.copy.pop", "modeling_tf_t5.TFT5WithLMHeadModel.encoder", "dict.copy.pop", "modeling_tf_t5.TFT5WithLMHeadModel.shared", "dict.copy.pop", "modeling_tf_t5.TFT5WithLMHeadModel.shared", "kwargs.items", "kwargs.items", "k.startswith", "kwargs.items", "k.startswith", "k.startswith", "k.startswith", "len", "len"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "decoder_input_ids", ",", "**", "kwargs", ")", ":", "\n", "# We allow two types of multi-inputs:", "\n", "# - traditional keyword arguments in the call method", "\n", "# - all the arguments provided as a dict in the first positional argument of call", "\n", "# The last option is useful to use the tf.keras fit() method.", "\n", "\n", "        ", "if", "isinstance", "(", "decoder_input_ids", ",", "dict", ")", ":", "\n", "            ", "kwargs", ".", "update", "(", "decoder_input_ids", ")", "\n", "", "else", ":", "\n", "            ", "kwargs", "[", "'decoder_input_ids'", "]", "=", "decoder_input_ids", "\n", "\n", "", "kwargs_common", "=", "dict", "(", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "not", "k", ".", "startswith", "(", "\"encoder_\"", ")", "and", "not", "k", ".", "startswith", "(", "\"decoder_\"", ")", ")", "\n", "kwargs_encoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_decoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_encoder", ".", "update", "(", "dict", "(", "(", "k", "[", "len", "(", "\"encoder_\"", ")", ":", "]", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "\"encoder_\"", ")", ")", ")", "\n", "kwargs_decoder", ".", "update", "(", "dict", "(", "(", "k", "[", "len", "(", "\"decoder_\"", ")", ":", "]", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "\"decoder_\"", ")", ")", ")", "\n", "\n", "# Encode if needed (training, first prediction pass)", "\n", "encoder_hidden_states", "=", "kwargs_encoder", ".", "pop", "(", "\"hidden_states\"", ",", "None", ")", "\n", "if", "encoder_hidden_states", "is", "None", ":", "\n", "# Convert encoder inputs in embeddings if needed", "\n", "            ", "hidden_states", "=", "kwargs_encoder", ".", "pop", "(", "\"inputs_embeds\"", ",", "None", ")", "\n", "if", "hidden_states", "is", "None", ":", "\n", "                ", "encoder_inputs_ids", "=", "kwargs_encoder", ".", "pop", "(", "\"input_ids\"", ")", "\n", "hidden_states", "=", "self", ".", "shared", "(", "encoder_inputs_ids", ")", "# Convert inputs in embeddings", "\n", "\n", "", "encoder_outputs", "=", "self", ".", "encoder", "(", "hidden_states", ",", "**", "kwargs_encoder", ")", "\n", "encoder_hidden_states", "=", "encoder_outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "encoder_outputs", "=", "(", ")", "\n", "\n", "# Decode", "\n", "# Convert decoder inputs in embeddings if needed", "\n", "", "hidden_states", "=", "kwargs_decoder", ".", "pop", "(", "\"inputs_embeds\"", ",", "None", ")", "\n", "if", "hidden_states", "is", "None", ":", "\n", "            ", "decoder_inputs_ids", "=", "kwargs_decoder", ".", "pop", "(", "\"input_ids\"", ")", "\n", "hidden_states", "=", "self", ".", "shared", "(", "decoder_inputs_ids", ")", "\n", "\n", "", "kwargs_decoder", "[", "\"encoder_hidden_states\"", "]", "=", "encoder_hidden_states", "\n", "kwargs_decoder", "[", "\"encoder_attention_mask\"", "]", "=", "kwargs_encoder", ".", "get", "(", "\"attention_mask\"", ",", "None", ")", "\n", "decoder_outputs", "=", "self", ".", "decoder", "(", "hidden_states", ",", "**", "kwargs_decoder", ")", "\n", "\n", "sequence_output", "=", "decoder_outputs", "[", "0", "]", "*", "(", "self", ".", "model_dim", "**", "-", "0.5", ")", "\n", "lm_logits", "=", "self", ".", "shared", "(", "sequence_output", ",", "mode", "=", "\"linear\"", ")", "\n", "decoder_outputs", "=", "(", "lm_logits", ",", ")", "+", "decoder_outputs", "[", "1", ":", "]", "\n", "\n", "return", "decoder_outputs", "+", "encoder_outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_encoder_decoder.PreTrainedEncoderDecoder.__init__": [[39, 43], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "PreTrainedEncoderDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_encoder_decoder.PreTrainedEncoderDecoder.from_pretrained": [[44, 162], ["kwargs_common.copy", "kwargs_common.copy", "kwargs_common.copy.update", "kwargs_common.copy.update", "kwargs_common.copy.pop", "kwargs_common.copy.pop", "cls", "modeling_auto.AutoModel.from_pretrained", "modeling_auto.AutoModelWithLMHead.from_pretrained", "kwargs.items", "kwargs.items", "argument.startswith", "kwargs.items", "argument.startswith", "argument.startswith", "argument.startswith", "len", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "\n", "cls", ",", "\n", "encoder_pretrained_model_name_or_path", "=", "None", ",", "\n", "decoder_pretrained_model_name_or_path", "=", "None", ",", "\n", "*", "model_args", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "r\"\"\" Instantiates an encoder and a decoder from one or two base classes of the library from pre-trained model checkpoints.\n\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you need to first set it back in training mode with `model.train()`\n\n        Params:\n            encoder_pretrained_model_name_or_path: information necessary to initiate the encoder. Either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/encoder``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            decoder_pretrained_model_name_or_path: information necessary to initiate the decoder. Either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/decoder``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments.\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n                You can specify kwargs sepcific for the encoder and decoder by prefixing the key with `encoder_` and `decoder_` respectively. (e.g. ``decoder_output_attention=True``). The remaining kwargs will be passed to both encoders and decoders.\n\n        Examples::\n\n            model = PreTrainedEncoderDecoder.from_pretained('bert-base-uncased', 'bert-base-uncased') # initialize Bert2Bert\n        \"\"\"", "\n", "\n", "# keyword arguments come in 3 flavors: encoder-specific (prefixed by", "\n", "# `encoder_`), decoder-specific (prefixed by `decoder_`) and those", "\n", "# that apply to the model as a whole.", "\n", "# We let the specific kwargs override the common ones in case of conflict.", "\n", "kwargs_common", "=", "{", "\n", "argument", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "not", "argument", ".", "startswith", "(", "\"encoder_\"", ")", "\n", "and", "not", "argument", ".", "startswith", "(", "\"decoder_\"", ")", "\n", "}", "\n", "kwargs_decoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_encoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_encoder", ".", "update", "(", "\n", "{", "\n", "argument", "[", "len", "(", "\"encoder_\"", ")", ":", "]", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "argument", ".", "startswith", "(", "\"encoder_\"", ")", "\n", "}", "\n", ")", "\n", "kwargs_decoder", ".", "update", "(", "\n", "{", "\n", "argument", "[", "len", "(", "\"decoder_\"", ")", ":", "]", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "argument", ".", "startswith", "(", "\"decoder_\"", ")", "\n", "}", "\n", ")", "\n", "\n", "# Load and initialize the encoder and decoder", "\n", "# The distinction between encoder and decoder at the model level is made", "\n", "# by the value of the flag `is_decoder` that we need to set correctly.", "\n", "encoder", "=", "kwargs_encoder", ".", "pop", "(", "\"model\"", ",", "None", ")", "\n", "if", "encoder", "is", "None", ":", "\n", "            ", "encoder", "=", "AutoModel", ".", "from_pretrained", "(", "\n", "encoder_pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs_encoder", "\n", ")", "\n", "", "encoder", ".", "config", ".", "is_decoder", "=", "False", "\n", "\n", "decoder", "=", "kwargs_decoder", ".", "pop", "(", "\"model\"", ",", "None", ")", "\n", "if", "decoder", "is", "None", ":", "\n", "            ", "decoder", "=", "AutoModelWithLMHead", ".", "from_pretrained", "(", "\n", "decoder_pretrained_model_name_or_path", ",", "**", "kwargs_decoder", "\n", ")", "\n", "", "decoder", ".", "config", ".", "is_decoder", "=", "True", "\n", "\n", "model", "=", "cls", "(", "encoder", ",", "decoder", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_encoder_decoder.PreTrainedEncoderDecoder.save_pretrained": [[163, 171], ["modeling_encoder_decoder.PreTrainedEncoderDecoder.encoder.save_pretrained", "modeling_encoder_decoder.PreTrainedEncoderDecoder.decoder.save_pretrained", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.save_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.save_pretrained"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a Seq2Seq model and its configuration file in a format such\n        that it can be loaded using `:func:`~transformers.PreTrainedEncoderDecoder.from_pretrained`\n\n        We save the encoder' and decoder's parameters in two separate directories.\n        \"\"\"", "\n", "self", ".", "encoder", ".", "save_pretrained", "(", "os", ".", "path", ".", "join", "(", "save_directory", ",", "\"encoder\"", ")", ")", "\n", "self", ".", "decoder", ".", "save_pretrained", "(", "os", ".", "path", ".", "join", "(", "save_directory", ",", "\"decoder\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_encoder_decoder.PreTrainedEncoderDecoder.forward": [[172, 234], ["kwargs_common.copy", "kwargs_common.copy", "kwargs_common.copy.update", "kwargs_common.copy.update", "kwargs_common.copy.pop", "kwargs_common.copy.get", "modeling_encoder_decoder.PreTrainedEncoderDecoder.decoder", "modeling_encoder_decoder.PreTrainedEncoderDecoder.encoder", "kwargs.items", "kwargs.items", "argument.startswith", "kwargs.items", "argument.startswith", "argument.startswith", "argument.startswith", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoder_input_ids", ",", "decoder_input_ids", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" The forward pass on a seq2eq depends what we are performing:\n\n        - During training we perform one forward pass through both the encoder\n          and decoder;\n        - During prediction, we perform one forward pass through the encoder,\n          and then perform several forward passes with the encoder's hidden\n          state through the decoder to decode a full sequence.\n\n        Therefore, we skip the forward pass on the encoder if an argument named\n        `encoder_hidden_state` is passed to this function.\n\n        Params:\n            encoder_input_ids: ``torch.LongTensor`` of shape ``(batch_size, sequence_length)``\n                Indices of encoder input sequence tokens in the vocabulary.\n            decoder_input_ids: ``torch.LongTensor`` of shape ``(batch_size, sequence_length)``\n                Indices of decoder input sequence tokens in the vocabulary.\n            kwargs: (`optional`) Remaining dictionary of keyword arguments.\n        \"\"\"", "\n", "# keyword arguments come in 3 flavors: encoder-specific (prefixed by", "\n", "# `encoder_`), decoder-specific (prefixed by `decoder_`) and those", "\n", "# that apply to the model as whole.", "\n", "# We let the specific kwargs override the common ones in case of conflict.", "\n", "kwargs_common", "=", "{", "\n", "argument", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "not", "argument", ".", "startswith", "(", "\"encoder_\"", ")", "\n", "and", "not", "argument", ".", "startswith", "(", "\"decoder_\"", ")", "\n", "}", "\n", "kwargs_decoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_encoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_encoder", ".", "update", "(", "\n", "{", "\n", "argument", "[", "len", "(", "\"encoder_\"", ")", ":", "]", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "argument", ".", "startswith", "(", "\"encoder_\"", ")", "\n", "}", "\n", ")", "\n", "kwargs_decoder", ".", "update", "(", "\n", "{", "\n", "argument", "[", "len", "(", "\"decoder_\"", ")", ":", "]", ":", "value", "\n", "for", "argument", ",", "value", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "argument", ".", "startswith", "(", "\"decoder_\"", ")", "\n", "}", "\n", ")", "\n", "\n", "# Encode if needed (training, first prediction pass)", "\n", "encoder_hidden_states", "=", "kwargs_encoder", ".", "pop", "(", "\"hidden_states\"", ",", "None", ")", "\n", "if", "encoder_hidden_states", "is", "None", ":", "\n", "            ", "encoder_outputs", "=", "self", ".", "encoder", "(", "encoder_input_ids", ",", "**", "kwargs_encoder", ")", "\n", "encoder_hidden_states", "=", "encoder_outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "encoder_outputs", "=", "(", ")", "\n", "\n", "# Decode", "\n", "", "kwargs_decoder", "[", "\"encoder_hidden_states\"", "]", "=", "encoder_hidden_states", "\n", "kwargs_decoder", "[", "\"encoder_attention_mask\"", "]", "=", "kwargs_encoder", ".", "get", "(", "\n", "\"attention_mask\"", ",", "None", "\n", ")", "\n", "decoder_outputs", "=", "self", ".", "decoder", "(", "decoder_input_ids", ",", "**", "kwargs_decoder", ")", "\n", "\n", "return", "decoder_outputs", "+", "encoder_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_encoder_decoder.Model2Model.__init__": [[253, 256], ["modeling_encoder_decoder.PreTrainedEncoderDecoder.__init__", "modeling_encoder_decoder.Model2Model.tie_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertForMaskedLM.tie_weights"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Model2Model", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_encoder_decoder.Model2Model.tie_weights": [[257, 274], ["None"], "methods", ["None"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Tying the encoder and decoders' embeddings together.\n\n       We need for each to get down to the embedding weights. However the\n        different model classes are inconsistent to that respect:\n        - BertModel: embeddings.word_embeddings\n        - RoBERTa: embeddings.word_embeddings\n        - XLMModel: embeddings\n        - GPT2: wte\n        - BertForMaskedLM: bert.embeddings.word_embeddings\n        - RobertaForMaskedLM: roberta.embeddings.word_embeddings\n\n        argument of the XEmbedding layer for each model, but it is \"blocked\"\n        by a model-specific keyword (bert, )...\n        \"\"\"", "\n", "# self._tie_or_clone_weights(self.encoder, self.decoder)", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_encoder_decoder.Model2Model.from_pretrained": [[275, 293], ["modeling_encoder_decoder.PreTrainedEncoderDecoder.from_pretrained", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "(", "\n", "\"bert\"", "not", "in", "pretrained_model_name_or_path", "\n", "or", "\"roberta\"", "in", "pretrained_model_name_or_path", "\n", "or", "\"distilbert\"", "in", "pretrained_model_name_or_path", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Only the Bert model is currently supported.\"", ")", "\n", "\n", "", "model", "=", "super", "(", "Model2Model", ",", "cls", ")", ".", "from_pretrained", "(", "\n", "encoder_pretrained_model_name_or_path", "=", "pretrained_model_name_or_path", ",", "\n", "decoder_pretrained_model_name_or_path", "=", "pretrained_model_name_or_path", ",", "\n", "*", "args", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_encoder_decoder.Model2LSTM.from_pretrained": [[296, 311], ["modeling_encoder_decoder.PreTrainedEncoderDecoder.from_pretrained", "kwargs.get", "torch.nn.LSTM", "ValueError", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["    ", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "kwargs", ".", "get", "(", "\"decoder_model\"", ",", "None", ")", "is", "None", ":", "\n", "# We will create a randomly initilized LSTM model as decoder", "\n", "            ", "if", "\"decoder_config\"", "not", "in", "kwargs", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"To load an LSTM in Encoder-Decoder model, please supply either: \"", "\n", "\"    - a torch.nn.LSTM model as `decoder_model` parameter (`decoder_model=lstm_model`), or\"", "\n", "\"    - a dictionary of configuration parameters that will be used to initialize a\"", "\n", "\"      torch.nn.LSTM model as `decoder_config` keyword argument. \"", "\n", "\"      E.g. `decoder_config={'input_size': 768, 'hidden_size': 768, 'num_layers': 2}`\"", "\n", ")", "\n", "", "kwargs", "[", "\"decoder_model\"", "]", "=", "torch", ".", "nn", ".", "LSTM", "(", "kwargs", ".", "pop", "(", "\"decoder_config\"", ")", ")", "\n", "", "model", "=", "super", "(", "Model2LSTM", ",", "cls", ")", ".", "from_pretrained", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.Embeddings.__init__": [[66, 78], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "modeling_distilbert.create_sinusoidal_embeddings"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.create_sinusoidal_embeddings"], ["    ", "def", "__init__", "(", "self", ",", "\n", "config", ")", ":", "\n", "        ", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "dim", ")", "\n", "if", "config", ".", "sinusoidal_pos_embds", ":", "\n", "            ", "create_sinusoidal_embeddings", "(", "n_pos", "=", "config", ".", "max_position_embeddings", ",", "\n", "dim", "=", "config", ".", "dim", ",", "\n", "out", "=", "self", ".", "position_embeddings", ".", "weight", ")", "\n", "\n", "", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "dim", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.Embeddings.forward": [[79, 102], ["input_ids.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "modeling_distilbert.Embeddings.word_embeddings", "modeling_distilbert.Embeddings.position_embeddings", "modeling_distilbert.Embeddings.LayerNorm", "modeling_distilbert.Embeddings.dropout", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        input_ids: torch.tensor(bs, max_seq_length)\n            The token ids to embed.\n\n        Outputs\n        -------\n        embeddings: torch.tensor(bs, max_seq_length, dim)\n            The embedded tokens (plus position embeddings, no token_type embeddings)\n        \"\"\"", "\n", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "# (max_seq_length)", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "# (bs, max_seq_length)", "\n", "\n", "word_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "# (bs, max_seq_length, dim)", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "# (bs, max_seq_length, dim)", "\n", "\n", "embeddings", "=", "word_embeddings", "+", "position_embeddings", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "# (bs, max_seq_length, dim)", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.MultiHeadSelfAttention.__init__": [[104, 120], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "set"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "MultiHeadSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "\n", "self", ".", "dim", "=", "config", ".", "dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "attention_dropout", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "q_lin", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "self", ".", "k_lin", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "self", ".", "v_lin", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "self", ".", "out_lin", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.MultiHeadSelfAttention.prune_heads": [[121, 141], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_distilbert.MultiHeadSelfAttention.pruned_heads.union", "len", "set", "sum", "len", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "attention_head_size", "=", "self", ".", "dim", "//", "self", ".", "n_heads", "\n", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_heads", ",", "attention_head_size", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "\n", "for", "head", "in", "heads", ":", "\n", "            ", "head", "-=", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "# Prune linear layers", "\n", "self", ".", "q_lin", "=", "prune_linear_layer", "(", "self", ".", "q_lin", ",", "index", ")", "\n", "self", ".", "k_lin", "=", "prune_linear_layer", "(", "self", ".", "k_lin", ",", "index", ")", "\n", "self", ".", "v_lin", "=", "prune_linear_layer", "(", "self", ".", "v_lin", ",", "index", ")", "\n", "self", ".", "out_lin", "=", "prune_linear_layer", "(", "self", ".", "out_lin", ",", "index", ",", "dim", "=", "1", ")", "\n", "# Update hyper params", "\n", "self", ".", "n_heads", "=", "self", ".", "n_heads", "-", "len", "(", "heads", ")", "\n", "self", ".", "dim", "=", "attention_head_size", "*", "self", ".", "n_heads", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.MultiHeadSelfAttention.forward": [[142, 199], ["query.size", "key.size", "modeling_distilbert.MultiHeadSelfAttention.forward.shape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        query: torch.tensor(bs, seq_length, dim)\n        key: torch.tensor(bs, seq_length, dim)\n        value: torch.tensor(bs, seq_length, dim)\n        mask: torch.tensor(bs, seq_length)\n\n        Outputs\n        -------\n        weights: torch.tensor(bs, n_heads, seq_length, seq_length)\n            Attention weights\n        context: torch.tensor(bs, seq_length, dim)\n            Contextualized layer. Optional: only if `output_attentions=True`\n        \"\"\"", "\n", "bs", ",", "q_length", ",", "dim", "=", "query", ".", "size", "(", ")", "\n", "k_length", "=", "key", ".", "size", "(", "1", ")", "\n", "# assert dim == self.dim, 'Dimensions do not match: %s input vs %s configured' % (dim, self.dim)", "\n", "# assert key.size() == value.size()", "\n", "\n", "dim_per_head", "=", "self", ".", "dim", "//", "self", ".", "n_heads", "\n", "\n", "mask_reshp", "=", "(", "bs", ",", "1", ",", "1", ",", "k_length", ")", "\n", "\n", "def", "shape", "(", "x", ")", ":", "\n", "            ", "\"\"\" separate heads \"\"\"", "\n", "return", "x", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", ",", "dim_per_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "", "def", "unshape", "(", "x", ")", ":", "\n", "            ", "\"\"\" group heads \"\"\"", "\n", "return", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", "*", "dim_per_head", ")", "\n", "\n", "", "q", "=", "shape", "(", "self", ".", "q_lin", "(", "query", ")", ")", "# (bs, n_heads, q_length, dim_per_head)", "\n", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "key", ")", ")", "# (bs, n_heads, k_length, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "value", ")", ")", "# (bs, n_heads, k_length, dim_per_head)", "\n", "\n", "q", "=", "q", "/", "math", ".", "sqrt", "(", "dim_per_head", ")", "# (bs, n_heads, q_length, dim_per_head)", "\n", "scores", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "2", ",", "3", ")", ")", "# (bs, n_heads, q_length, k_length)", "\n", "mask", "=", "(", "mask", "==", "0", ")", ".", "view", "(", "mask_reshp", ")", ".", "expand_as", "(", "scores", ")", "# (bs, n_heads, q_length, k_length)", "\n", "scores", ".", "masked_fill_", "(", "mask", ",", "-", "float", "(", "'inf'", ")", ")", "# (bs, n_heads, q_length, k_length)", "\n", "\n", "weights", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "scores", ")", "# (bs, n_heads, q_length, k_length)", "\n", "weights", "=", "self", ".", "dropout", "(", "weights", ")", "# (bs, n_heads, q_length, k_length)", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "weights", "=", "weights", "*", "head_mask", "\n", "\n", "", "context", "=", "torch", ".", "matmul", "(", "weights", ",", "v", ")", "# (bs, n_heads, q_length, dim_per_head)", "\n", "context", "=", "unshape", "(", "context", ")", "# (bs, q_length, dim)", "\n", "context", "=", "self", ".", "out_lin", "(", "context", ")", "# (bs, q_length, dim)", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "return", "(", "context", ",", "weights", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "context", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.FFN.__init__": [[201, 208], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "FFN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "dropout", ")", "\n", "self", ".", "lin1", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "hidden_dim", ")", "\n", "self", ".", "lin2", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "hidden_dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "assert", "config", ".", "activation", "in", "[", "'relu'", ",", "'gelu'", "]", ",", "\"activation ({}) must be in ['relu', 'gelu']\"", ".", "format", "(", "config", ".", "activation", ")", "\n", "self", ".", "activation", "=", "gelu", "if", "config", ".", "activation", "==", "'gelu'", "else", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.FFN.forward": [[209, 215], ["modeling_distilbert.FFN.lin1", "modeling_distilbert.FFN.activation", "modeling_distilbert.FFN.lin2", "modeling_distilbert.FFN.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "lin1", "(", "input", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.TransformerBlock.__init__": [[217, 234], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "modeling_distilbert.MultiHeadSelfAttention", "torch.LayerNorm", "torch.LayerNorm", "modeling_distilbert.FFN", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransformerBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "\n", "self", ".", "dim", "=", "config", ".", "dim", "\n", "self", ".", "hidden_dim", "=", "config", ".", "hidden_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "dropout", ")", "\n", "self", ".", "activation", "=", "config", ".", "activation", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "assert", "config", ".", "dim", "%", "config", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "attention", "=", "MultiHeadSelfAttention", "(", "config", ")", "\n", "self", ".", "sa_layer_norm", "=", "nn", ".", "LayerNorm", "(", "normalized_shape", "=", "config", ".", "dim", ",", "eps", "=", "1e-12", ")", "\n", "\n", "self", ".", "ffn", "=", "FFN", "(", "config", ")", "\n", "self", ".", "output_layer_norm", "=", "nn", ".", "LayerNorm", "(", "normalized_shape", "=", "config", ".", "dim", ",", "eps", "=", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.TransformerBlock.forward": [[235, 266], ["modeling_distilbert.TransformerBlock.attention", "modeling_distilbert.TransformerBlock.sa_layer_norm", "modeling_distilbert.TransformerBlock.ffn", "modeling_distilbert.TransformerBlock.output_layer_norm", "type"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "attn_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        x: torch.tensor(bs, seq_length, dim)\n        attn_mask: torch.tensor(bs, seq_length)\n\n        Outputs\n        -------\n        sa_weights: torch.tensor(bs, n_heads, seq_length, seq_length)\n            The attention weights\n        ffn_output: torch.tensor(bs, seq_length, dim)\n            The output of the transformer block contextualization.\n        \"\"\"", "\n", "# Self-Attention", "\n", "sa_output", "=", "self", ".", "attention", "(", "query", "=", "x", ",", "key", "=", "x", ",", "value", "=", "x", ",", "mask", "=", "attn_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "sa_output", ",", "sa_weights", "=", "sa_output", "# (bs, seq_length, dim), (bs, n_heads, seq_length, seq_length)", "\n", "", "else", ":", "# To handle these `output_attention` or `output_hidden_states` cases returning tuples", "\n", "            ", "assert", "type", "(", "sa_output", ")", "==", "tuple", "\n", "sa_output", "=", "sa_output", "[", "0", "]", "\n", "", "sa_output", "=", "self", ".", "sa_layer_norm", "(", "sa_output", "+", "x", ")", "# (bs, seq_length, dim)", "\n", "\n", "# Feed Forward Network", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "sa_output", ")", "# (bs, seq_length, dim)", "\n", "ffn_output", "=", "self", ".", "output_layer_norm", "(", "ffn_output", "+", "sa_output", ")", "# (bs, seq_length, dim)", "\n", "\n", "output", "=", "(", "ffn_output", ",", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "output", "=", "(", "sa_weights", ",", ")", "+", "output", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.Transformer.__init__": [[269, 277], ["torch.Module.__init__", "modeling_distilbert.TransformerBlock", "torch.ModuleList", "torch.ModuleList", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_layers", "=", "config", ".", "n_layers", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "layer", "=", "TransformerBlock", "(", "config", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "layer", ")", "for", "_", "in", "range", "(", "config", ".", "n_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.Transformer.forward": [[278, 328], ["enumerate", "layer_module", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "attn_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        x: torch.tensor(bs, seq_length, dim)\n            Input sequence embedded.\n        attn_mask: torch.tensor(bs, seq_length)\n            Attention mask on the sequence.\n\n        Outputs\n        -------\n        hidden_state: torch.tensor(bs, seq_length, dim)\n            Sequence of hiddens states in the last (top) layer\n        all_hidden_states: Tuple[torch.tensor(bs, seq_length, dim)]\n            Tuple of length n_layers with the hidden states from each layer.\n            Optional: only if output_hidden_states=True\n        all_attentions: Tuple[torch.tensor(bs, n_heads, seq_length, seq_length)]\n            Tuple of length n_layers with the attention weights from each layer\n            Optional: only if output_attentions=True\n        \"\"\"", "\n", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "\n", "hidden_state", "=", "x", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_state", ",", ")", "\n", "\n", "", "layer_outputs", "=", "layer_module", "(", "x", "=", "hidden_state", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "hidden_state", "=", "layer_outputs", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "assert", "len", "(", "layer_outputs", ")", "==", "2", "\n", "attentions", "=", "layer_outputs", "[", "0", "]", "\n", "all_attentions", "=", "all_attentions", "+", "(", "attentions", ",", ")", "\n", "", "else", ":", "\n", "                ", "assert", "len", "(", "layer_outputs", ")", "==", "1", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_state", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_state", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertPreTrainedModel._init_weights": [[340, 353], ["isinstance", "isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.weight.data.normal_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Embedding", ")", ":", "\n", "            ", "if", "module", ".", "weight", ".", "requires_grad", ":", "\n", "                ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertModel.__init__": [[423, 430], ["modeling_utils.PreTrainedModel.__init__", "modeling_distilbert.Embeddings", "modeling_distilbert.Transformer", "modeling_distilbert.DistilBertModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "embeddings", "=", "Embeddings", "(", "config", ")", "# Embeddings", "\n", "self", ".", "transformer", "=", "Transformer", "(", "config", ")", "# Encoder", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertModel.get_input_embeddings": [[431, 433], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertModel.set_input_embeddings": [[434, 436], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "embeddings", ".", "word_embeddings", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertModel._prune_heads": [[437, 444], ["heads_to_prune.items", "modeling_distilbert.DistilBertModel.transformer.layer[].attention.prune_heads"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "transformer", ".", "layer", "[", "layer", "]", ".", "attention", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertModel.forward": [[445, 485], ["modeling_distilbert.DistilBertModel.transformer", "ValueError", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "modeling_distilbert.DistilBertModel.embeddings", "input_ids.size", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "ValueError", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "modeling_distilbert.DistilBertModel.size", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_distilbert.DistilBertModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "\n", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "\n", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones", "(", "input_shape", ",", "device", "=", "device", ")", "# (bs, seq_length)", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "num_hidden_layers", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "num_hidden_layers", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "embeddings", "(", "input_ids", ")", "# (bs, seq_length, dim)", "\n", "", "tfmr_output", "=", "self", ".", "transformer", "(", "x", "=", "inputs_embeds", ",", "\n", "attn_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "hidden_state", "=", "tfmr_output", "[", "0", "]", "\n", "output", "=", "(", "hidden_state", ",", ")", "+", "tfmr_output", "[", "1", ":", "]", "\n", "\n", "return", "output", "# last-layer hidden-state, (all hidden_states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertForMaskedLM.__init__": [[519, 532], ["modeling_utils.PreTrainedModel.__init__", "modeling_distilbert.DistilBertModel", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "modeling_distilbert.DistilBertForMaskedLM.init_weights", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "distilbert", "=", "DistilBertModel", "(", "config", ")", "\n", "self", ".", "vocab_transform", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "dim", ")", "\n", "self", ".", "vocab_layer_norm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "dim", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "vocab_projector", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "vocab_size", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n", "self", ".", "mlm_loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertForMaskedLM.get_output_embeddings": [[533, 535], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab_projector", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertForMaskedLM.forward": [[536, 554], ["modeling_distilbert.DistilBertForMaskedLM.distilbert", "modeling_distilbert.DistilBertForMaskedLM.vocab_transform", "modeling_distilbert.gelu", "modeling_distilbert.DistilBertForMaskedLM.vocab_layer_norm", "modeling_distilbert.DistilBertForMaskedLM.vocab_projector", "modeling_distilbert.DistilBertForMaskedLM.mlm_loss_fct", "modeling_distilbert.DistilBertForMaskedLM.view", "masked_lm_labels.view", "modeling_distilbert.DistilBertForMaskedLM.size"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.gelu"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "masked_lm_labels", "=", "None", ")", ":", "\n", "        ", "dlbrt_output", "=", "self", ".", "distilbert", "(", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_states", "=", "dlbrt_output", "[", "0", "]", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_transform", "(", "hidden_states", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "gelu", "(", "prediction_logits", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_layer_norm", "(", "prediction_logits", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_projector", "(", "prediction_logits", ")", "# (bs, seq_length, vocab_size)", "\n", "\n", "outputs", "=", "(", "prediction_logits", ",", ")", "+", "dlbrt_output", "[", "1", ":", "]", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "mlm_loss", "=", "self", ".", "mlm_loss_fct", "(", "prediction_logits", ".", "view", "(", "-", "1", ",", "prediction_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "mlm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (mlm_loss), prediction_logits, (all hidden_states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertForSequenceClassification.__init__": [[590, 600], ["modeling_utils.PreTrainedModel.__init__", "modeling_distilbert.DistilBertModel", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "modeling_distilbert.DistilBertForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "distilbert", "=", "DistilBertModel", "(", "config", ")", "\n", "self", ".", "pre_classifier", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "dim", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "num_labels", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "seq_classif_dropout", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertForSequenceClassification.forward": [[601, 624], ["modeling_distilbert.DistilBertForSequenceClassification.distilbert", "modeling_distilbert.DistilBertForSequenceClassification.pre_classifier", "modeling_distilbert.DistilBertForSequenceClassification.dropout", "modeling_distilbert.DistilBertForSequenceClassification.classifier", "torch.ReLU", "torch.ReLU", "torch.MSELoss", "torch.MSELoss", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "modeling_distilbert.DistilBertForSequenceClassification.view", "labels.view", "modeling_distilbert.DistilBertForSequenceClassification.view", "labels.view"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "distilbert_output", "=", "self", ".", "distilbert", "(", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_state", "=", "distilbert_output", "[", "0", "]", "# (bs, seq_len, dim)", "\n", "pooled_output", "=", "hidden_state", "[", ":", ",", "0", "]", "# (bs, dim)", "\n", "pooled_output", "=", "self", ".", "pre_classifier", "(", "pooled_output", ")", "# (bs, dim)", "\n", "pooled_output", "=", "nn", ".", "ReLU", "(", ")", "(", "pooled_output", ")", "# (bs, dim)", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "# (bs, dim)", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "# (bs, dim)", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "distilbert_output", "[", "1", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "                ", "loss_fct", "=", "nn", ".", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertForQuestionAnswering.__init__": [[666, 675], ["modeling_utils.PreTrainedModel.__init__", "modeling_distilbert.DistilBertModel", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "modeling_distilbert.DistilBertForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "distilbert", "=", "DistilBertModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "num_labels", ")", "\n", "assert", "config", ".", "num_labels", "==", "2", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "qa_dropout", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertForQuestionAnswering.forward": [[676, 708], ["modeling_distilbert.DistilBertForQuestionAnswering.distilbert", "modeling_distilbert.DistilBertForQuestionAnswering.dropout", "modeling_distilbert.DistilBertForQuestionAnswering.qa_outputs", "modeling_distilbert.DistilBertForQuestionAnswering.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ")", ":", "\n", "        ", "distilbert_output", "=", "self", ".", "distilbert", "(", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_states", "=", "distilbert_output", "[", "0", "]", "# (bs, max_query_len, dim)", "\n", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "# (bs, max_query_len, dim)", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "hidden_states", ")", "# (bs, max_query_len, 2)", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "# (bs, max_query_len)", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "# (bs, max_query_len)", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "distilbert_output", "[", "1", ":", "]", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), start_logits, end_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertForTokenClassification.__init__": [[743, 752], ["modeling_utils.PreTrainedModel.__init__", "modeling_distilbert.DistilBertModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "modeling_distilbert.DistilBertForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "distilbert", "=", "DistilBertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.DistilBertForTokenClassification.forward": [[753, 780], ["modeling_distilbert.DistilBertForTokenClassification.distilbert", "modeling_distilbert.DistilBertForTokenClassification.dropout", "modeling_distilbert.DistilBertForTokenClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "attention_mask.view", "modeling_distilbert.DistilBertForTokenClassification.view", "labels.view", "modeling_distilbert.DistilBertForTokenClassification.view", "labels.view"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "\n", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "distilbert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "# Only keep active parts of the loss", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "                ", "active_loss", "=", "attention_mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "[", "active_loss", "]", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "[", "active_loss", "]", "\n", "loss", "=", "loss_fct", "(", "active_logits", ",", "active_labels", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), scores, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.gelu": [[52, 54], ["torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "x", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_distilbert.create_sinusoidal_embeddings": [[55, 64], ["numpy.array", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "out.detach_", "numpy.sin", "numpy.cos", "range", "numpy.power", "range"], "function", ["None"], ["", "def", "create_sinusoidal_embeddings", "(", "n_pos", ",", "dim", ",", "out", ")", ":", "\n", "    ", "position_enc", "=", "np", ".", "array", "(", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "j", "//", "2", ")", "/", "dim", ")", "for", "j", "in", "range", "(", "dim", ")", "]", "\n", "for", "pos", "in", "range", "(", "n_pos", ")", "\n", "]", ")", "\n", "out", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", ")", "\n", "out", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", ")", "\n", "out", ".", "detach_", "(", ")", "\n", "out", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.Attention.__init__": [[104, 121], ["torch.Module.__init__", "modeling_gpt2.Attention.register_buffer", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "set", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nx", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "n_state", "=", "nx", "# in Attention: n_state=768 (nx=n_embd)", "\n", "# [switch nx => n_state from Block to Attention to keep identical to TF implem]", "\n", "assert", "n_state", "%", "config", ".", "n_head", "==", "0", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "n_ctx", ",", "n_ctx", ")", ")", ".", "view", "(", "1", ",", "1", ",", "n_ctx", ",", "n_ctx", ")", ")", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "split_size", "=", "n_state", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "c_attn", "=", "Conv1D", "(", "n_state", "*", "3", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "attn_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attn_pdrop", ")", "\n", "self", ".", "resid_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.Attention.prune_heads": [[122, 143], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_utils.prune_conv1d_layer", "modeling_utils.prune_conv1d_layer", "modeling_gpt2.Attention.pruned_heads.union", "len", "set", "len", "sum", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_conv1d_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_conv1d_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_head", ",", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "# Convert to set and emove already pruned heads", "\n", "for", "head", "in", "heads", ":", "\n", "# Compute how many pruned heads are before the head and move the index accordingly", "\n", "            ", "head", "=", "head", "-", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "index_attn", "=", "torch", ".", "cat", "(", "[", "index", ",", "index", "+", "self", ".", "split_size", ",", "index", "+", "(", "2", "*", "self", ".", "split_size", ")", "]", ")", "\n", "\n", "# Prune conv1d layers", "\n", "self", ".", "c_attn", "=", "prune_conv1d_layer", "(", "self", ".", "c_attn", ",", "index_attn", ",", "dim", "=", "1", ")", "\n", "self", ".", "c_proj", "=", "prune_conv1d_layer", "(", "self", ".", "c_proj", ",", "index", ",", "dim", "=", "0", ")", "\n", "\n", "# Update hyper params", "\n", "self", ".", "split_size", "=", "(", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "*", "(", "self", ".", "n_head", "-", "len", "(", "heads", ")", ")", "\n", "self", ".", "n_head", "=", "self", ".", "n_head", "-", "len", "(", "heads", ")", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.Attention._attn": [[144, 167], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "modeling_gpt2.Attention.attn_dropout", "modeling_gpt2.Attention.size", "modeling_gpt2.Attention.size", "torch.Softmax", "torch.Softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "outputs.append", "math.sqrt", "v.size"], "methods", ["None"], ["", "def", "_attn", "(", "self", ",", "q", ",", "k", ",", "v", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "w", "=", "torch", ".", "matmul", "(", "q", ",", "k", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "w", "=", "w", "/", "math", ".", "sqrt", "(", "v", ".", "size", "(", "-", "1", ")", ")", "\n", "", "nd", ",", "ns", "=", "w", ".", "size", "(", "-", "2", ")", ",", "w", ".", "size", "(", "-", "1", ")", "\n", "b", "=", "self", ".", "bias", "[", ":", ",", ":", ",", "ns", "-", "nd", ":", "ns", ",", ":", "ns", "]", "\n", "w", "=", "w", "*", "b", "-", "1e4", "*", "(", "1", "-", "b", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask", "\n", "            ", "w", "=", "w", "+", "attention_mask", "\n", "\n", "", "w", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "w", ")", "\n", "w", "=", "self", ".", "attn_dropout", "(", "w", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "w", "=", "w", "*", "head_mask", "\n", "\n", "", "outputs", "=", "[", "torch", ".", "matmul", "(", "w", ",", "v", ")", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "w", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.Attention.merge_heads": [[168, 172], ["x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size"], "methods", ["None"], ["", "def", "merge_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "x", ".", "size", "(", "-", "2", ")", "*", "x", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct merge_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.Attention.split_heads": [[173, 180], ["x.view.view.view", "x.view.view.permute", "x.view.view.permute", "x.view.view.size", "x.view.view.size"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x", ",", "k", "=", "False", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "n_head", ",", "x", ".", "size", "(", "-", "1", ")", "//", "self", ".", "n_head", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct split_states", "\n", "if", "k", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# (batch, head, head_features, seq_length)", "\n", "", "else", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# (batch, head, seq_length, head_features)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.Attention.forward": [[181, 202], ["modeling_gpt2.Attention.c_attn", "modeling_gpt2.Attention.split", "modeling_gpt2.Attention.split_heads", "modeling_gpt2.Attention.split_heads", "modeling_gpt2.Attention.split_heads", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "modeling_gpt2.Attention._attn", "modeling_gpt2.Attention.merge_heads", "modeling_gpt2.Attention.c_proj", "modeling_gpt2.Attention.resid_dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer_past[].transpose", "torch.cat.transpose", "torch.cat.transpose"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention._attn", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.merge_heads"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "c_attn", "(", "x", ")", "\n", "query", ",", "key", ",", "value", "=", "x", ".", "split", "(", "self", ".", "split_size", ",", "dim", "=", "2", ")", "\n", "query", "=", "self", ".", "split_heads", "(", "query", ")", "\n", "key", "=", "self", ".", "split_heads", "(", "key", ",", "k", "=", "True", ")", "\n", "value", "=", "self", ".", "split_heads", "(", "value", ")", "\n", "if", "layer_past", "is", "not", "None", ":", "\n", "            ", "past_key", ",", "past_value", "=", "layer_past", "[", "0", "]", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "layer_past", "[", "1", "]", "# transpose back cf below", "\n", "key", "=", "torch", ".", "cat", "(", "(", "past_key", ",", "key", ")", ",", "dim", "=", "-", "1", ")", "\n", "value", "=", "torch", ".", "cat", "(", "(", "past_value", ",", "value", ")", ",", "dim", "=", "-", "2", ")", "\n", "", "present", "=", "torch", ".", "stack", "(", "(", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "value", ")", ")", "# transpose to have same shapes for stacking", "\n", "\n", "attn_outputs", "=", "self", ".", "_attn", "(", "query", ",", "key", ",", "value", ",", "attention_mask", ",", "head_mask", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "a", "=", "self", ".", "merge_heads", "(", "a", ")", "\n", "a", "=", "self", ".", "c_proj", "(", "a", ")", "\n", "a", "=", "self", ".", "resid_dropout", "(", "a", ")", "\n", "\n", "outputs", "=", "[", "a", ",", "present", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "# a, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.MLP.__init__": [[205, 212], ["torch.Module.__init__", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_state", ",", "config", ")", ":", "# in MLP: n_state=3072 (4 * n_embd)", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "c_fc", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "nx", ",", "n_state", ")", "\n", "self", ".", "act", "=", "gelu", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.MLP.forward": [[213, 217], ["modeling_gpt2.MLP.act", "modeling_gpt2.MLP.c_proj", "modeling_gpt2.MLP.dropout", "modeling_gpt2.MLP.c_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "act", "(", "self", ".", "c_fc", "(", "x", ")", ")", "\n", "h2", "=", "self", ".", "c_proj", "(", "h", ")", "\n", "return", "self", ".", "dropout", "(", "h2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.Block.__init__": [[220, 227], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "modeling_gpt2.Attention", "torch.LayerNorm", "torch.LayerNorm", "modeling_gpt2.MLP"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "ln_1", "=", "nn", ".", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "nx", ",", "n_ctx", ",", "config", ",", "scale", ")", "\n", "self", ".", "ln_2", "=", "nn", ".", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "4", "*", "nx", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.Block.forward": [[228, 241], ["modeling_gpt2.Block.attn", "modeling_gpt2.Block.mlp", "modeling_gpt2.Block.ln_1", "modeling_gpt2.Block.ln_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "output_attn", "=", "self", ".", "attn", "(", "self", ".", "ln_1", "(", "x", ")", ",", "\n", "layer_past", "=", "layer_past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "a", "=", "output_attn", "[", "0", "]", "# output_attn: a, present, (attentions)", "\n", "\n", "x", "=", "x", "+", "a", "\n", "m", "=", "self", ".", "mlp", "(", "self", ".", "ln_2", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "m", "\n", "\n", "outputs", "=", "[", "x", "]", "+", "output_attn", "[", "1", ":", "]", "\n", "return", "outputs", "# x, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.GPT2PreTrainedModel.__init__": [[252, 254], ["modeling_utils.PreTrainedModel.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GPT2PreTrainedModel", ",", "self", ")", ".", "__init__", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.GPT2PreTrainedModel._init_weights": [[255, 267], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ",", "Conv1D", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "Conv1D", ")", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.GPT2Model.__init__": [[353, 366], ["modeling_gpt2.GPT2PreTrainedModel.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.LayerNorm", "torch.LayerNorm", "modeling_gpt2.GPT2Model.init_weights", "modeling_gpt2.Block", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "GPT2Model", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_past", "=", "config", ".", "output_past", "\n", "\n", "self", ".", "wte", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "wpe", "=", "nn", ".", "Embedding", "(", "config", ".", "n_positions", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "config", ".", "n_ctx", ",", "config", ",", "scale", "=", "True", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "self", ".", "ln_f", "=", "nn", ".", "LayerNorm", "(", "config", ".", "n_embd", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.GPT2Model.get_input_embeddings": [[367, 369], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "wte", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.GPT2Model.set_input_embeddings": [[370, 372], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "wte", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.GPT2Model._prune_heads": [[373, 379], ["heads_to_prune.items", "modeling_gpt2.GPT2Model.h[].attn.prune_heads"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "h", "[", "layer", "]", ".", "attn", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.GPT2Model.forward": [[380, 487], ["modeling_gpt2.GPT2Model.wpe", "modeling_gpt2.GPT2Model.drop", "enumerate", "modeling_gpt2.GPT2Model.ln_f", "hidden_states.view.view.view", "ValueError", "token_type_ids.view.view.view", "position_ids.unsqueeze().view.unsqueeze().view.view", "[].size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze().view", "attention_mask.to.to.view", "attention_mask.to.to.unsqueeze().unsqueeze", "attention_mask.to.to.to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "modeling_gpt2.GPT2Model.wte", "modeling_gpt2.GPT2Model.wte", "zip", "block", "tuple", "input_ids.view.view.size", "input_ids.view.view.view", "len", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "hidden_states.view.view.size", "tuple.append", "ValueError", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze", "attention_mask.to.to.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "t.view", "modeling_gpt2.GPT2Model.size", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "hidden_states.view.view.view", "modeling_gpt2.GPT2Model.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_gpt2.GPT2Model.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "", "if", "position_ids", "is", "not", "None", ":", "\n", "            ", "position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "past", "is", "None", ":", "\n", "            ", "past_length", "=", "0", "\n", "past", "=", "[", "None", "]", "*", "len", "(", "self", ".", "h", ")", "\n", "", "else", ":", "\n", "            ", "past_length", "=", "past", "[", "0", "]", "[", "0", "]", ".", "size", "(", "-", "2", ")", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "position_ids", "=", "torch", ".", "arange", "(", "past_length", ",", "input_shape", "[", "-", "1", "]", "+", "past_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "# Attention mask.", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "            ", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "attention_mask", "=", "attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# head_mask has shape n_layer x batch x n_heads x N x N", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "n_layer", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "wte", "(", "input_ids", ")", "\n", "", "position_embeds", "=", "self", ".", "wpe", "(", "position_ids", ")", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_embeds", "=", "self", ".", "wte", "(", "token_type_ids", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "hidden_states", "=", "inputs_embeds", "+", "position_embeds", "+", "token_type_embeds", "\n", "hidden_states", "=", "self", ".", "drop", "(", "hidden_states", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "(", "hidden_states", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "\n", "presents", "=", "(", ")", "\n", "all_attentions", "=", "[", "]", "\n", "all_hidden_states", "=", "(", ")", "\n", "for", "i", ",", "(", "block", ",", "layer_past", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "h", ",", "past", ")", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "block", "(", "hidden_states", ",", "\n", "layer_past", "=", "layer_past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "\n", "hidden_states", ",", "present", "=", "outputs", "[", ":", "2", "]", "\n", "if", "self", ".", "output_past", ":", "\n", "                ", "presents", "=", "presents", "+", "(", "present", ",", ")", "\n", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "", "", "hidden_states", "=", "self", ".", "ln_f", "(", "hidden_states", ")", "\n", "\n", "hidden_states", "=", "hidden_states", ".", "view", "(", "*", "output_shape", ")", "\n", "# Add last hidden state", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_past", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "presents", ",", ")", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# let the number of heads free (-1) so we can extract attention even after head pruning", "\n", "            ", "attention_output_shape", "=", "input_shape", "[", ":", "-", "1", "]", "+", "(", "-", "1", ",", ")", "+", "all_attentions", "[", "0", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "all_attentions", "=", "tuple", "(", "t", ".", "view", "(", "*", "attention_output_shape", ")", "for", "t", "in", "all_attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last hidden state, (presents), (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.GPT2LMHeadModel.__init__": [[531, 537], ["modeling_gpt2.GPT2PreTrainedModel.__init__", "modeling_gpt2.GPT2Model", "torch.Linear", "torch.Linear", "modeling_gpt2.GPT2LMHeadModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "GPT2LMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "GPT2Model", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.GPT2LMHeadModel.get_output_embeddings": [[538, 540], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.GPT2LMHeadModel.forward": [[541, 566], ["modeling_gpt2.GPT2LMHeadModel.transformer", "modeling_gpt2.GPT2LMHeadModel.lm_head", "lm_logits[].contiguous", "labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous.view", "labels[].contiguous.view", "lm_logits[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "past", "=", "past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# Shift so that tokens < n predict n", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "# Flatten the tokens", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), lm_logits, presents, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.GPT2DoubleHeadsModel.__init__": [[635, 643], ["modeling_gpt2.GPT2PreTrainedModel.__init__", "modeling_gpt2.GPT2Model", "torch.Linear", "torch.Linear", "modeling_utils.SequenceSummary", "modeling_gpt2.GPT2DoubleHeadsModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "GPT2DoubleHeadsModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "config", ".", "num_labels", "=", "1", "\n", "self", ".", "transformer", "=", "GPT2Model", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "multiple_choice_head", "=", "SequenceSummary", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.GPT2DoubleHeadsModel.get_output_embeddings": [[644, 646], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.GPT2DoubleHeadsModel.forward": [[647, 677], ["modeling_gpt2.GPT2DoubleHeadsModel.transformer", "modeling_gpt2.GPT2DoubleHeadsModel.lm_head", "modeling_gpt2.GPT2DoubleHeadsModel.multiple_choice_head().squeeze", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous", "lm_labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_gpt2.GPT2DoubleHeadsModel.multiple_choice_head", "modeling_gpt2.GPT2DoubleHeadsModel.view", "mc_labels.view", "lm_logits[].contiguous.view", "lm_labels[].contiguous.view", "modeling_gpt2.GPT2DoubleHeadsModel.size", "lm_logits[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "mc_token_ids", "=", "None", ",", "lm_labels", "=", "None", ",", "mc_labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "past", "=", "past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "mc_logits", "=", "self", ".", "multiple_choice_head", "(", "hidden_states", ",", "mc_token_ids", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", "mc_logits", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "mc_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "mc_logits", ".", "view", "(", "-", "1", ",", "mc_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "mc_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "", "if", "lm_labels", "is", "not", "None", ":", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "lm_labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (lm loss), (mc loss), lm logits, mc logits, presents, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.load_tf_weights_in_gpt2": [[45, 97], ["os.path.abspath", "logger.info", "tf.train.list_variables", "zip", "logger.info", "tf.train.load_variable", "names.append", "arrays.append", "name.split.split", "logger.info", "torch.from_numpy", "torch.from_numpy", "logger.error", "tf.train.load_variable.squeeze", "re.fullmatch", "re.split", "getattr", "len", "int", "getattr", "getattr", "getattr", "getattr"], "function", ["None"], ["def", "load_tf_weights_in_gpt2", "(", "model", ",", "config", ",", "gpt2_checkpoint_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "gpt2_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Converting TensorFlow checkpoint from {}\"", ".", "format", "(", "tf_path", ")", ")", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "names", "=", "[", "]", "\n", "arrays", "=", "[", "]", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "arrays", ".", "append", "(", "array", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "arrays", ")", ":", "\n", "        ", "name", "=", "name", "[", "6", ":", "]", "# skip \"model/\"", "\n", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "==", "'w'", "or", "l", "[", "0", "]", "==", "'g'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'b'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'wpe'", "or", "l", "[", "0", "]", "==", "'wte'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "else", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.gelu": [[99, 101], ["torch.tanh", "torch.tanh", "math.sqrt", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "x", "*", "(", "1", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetRelativeAttention.__init__": [[195, 222], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "XLNetLayerNorm", "torch.nn.Dropout", "ValueError", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetRelativeAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "if", "config", ".", "d_model", "%", "config", ".", "n_head", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "d_model", ",", "config", ".", "n_head", ")", ")", "\n", "\n", "", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "d_head", "=", "config", ".", "d_head", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "scale", "=", "1", "/", "(", "config", ".", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "k", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "o", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_s_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "seg_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "2", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n", "self", ".", "layer_norm", "=", "XLNetLayerNorm", "(", "config", ".", "d_model", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetRelativeAttention.prune_heads": [[223, 225], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetRelativeAttention.rel_shift": [[226, 238], ["torch.index_select.reshape", "torch.index_select.reshape", "torch.index_select", "torch.arange"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "rel_shift", "(", "x", ",", "klen", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"perform relative shift to form the relative attention score.\"\"\"", "\n", "x_size", "=", "x", ".", "shape", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "x_size", "[", "1", "]", ",", "x_size", "[", "0", "]", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", ")", "\n", "x", "=", "x", "[", "1", ":", ",", "...", "]", "\n", "x", "=", "x", ".", "reshape", "(", "x_size", "[", "0", "]", ",", "x_size", "[", "1", "]", "-", "1", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", ")", "\n", "# x = x[:, 0:klen, :, :]", "\n", "x", "=", "torch", ".", "index_select", "(", "x", ",", "1", ",", "torch", ".", "arange", "(", "klen", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetRelativeAttention.rel_shift_bnij": [[239, 253], ["torch.index_select.reshape", "torch.index_select.reshape", "torch.index_select", "torch.arange"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "rel_shift_bnij", "(", "x", ",", "klen", "=", "-", "1", ")", ":", "\n", "        ", "x_size", "=", "x", ".", "shape", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "x_size", "[", "0", "]", ",", "x_size", "[", "1", "]", ",", "x_size", "[", "3", "]", ",", "x_size", "[", "2", "]", ")", "\n", "x", "=", "x", "[", ":", ",", ":", ",", "1", ":", ",", ":", "]", "\n", "x", "=", "x", ".", "reshape", "(", "x_size", "[", "0", "]", ",", "x_size", "[", "1", "]", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", "-", "1", ")", "\n", "# Note: the tensor-slice form was faster in my testing than torch.index_select", "\n", "#       However, tracing doesn't like the nature of the slice, and if klen changes", "\n", "#       during the run then it'll fail, whereas index_select will be fine.", "\n", "x", "=", "torch", ".", "index_select", "(", "x", ",", "3", ",", "torch", ".", "arange", "(", "klen", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "# x = x[:, :, :, :klen]", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetRelativeAttention.rel_attn_core": [[254, 295], ["torch.einsum", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_shift_bnij", "torch.nn.functional.softmax", "modeling_xlnet.XLNetRelativeAttention.dropout", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetRelativeAttention.rel_shift_bnij"], ["", "def", "rel_attn_core", "(", "self", ",", "q_head", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "None", ",", "attn_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"Core relative positional attention operations.\"\"\"", "\n", "\n", "# content based attention score", "\n", "ac", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->bnij'", ",", "q_head", "+", "self", ".", "r_w_bias", ",", "k_head_h", ")", "\n", "\n", "# position based attention score", "\n", "bd", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->bnij'", ",", "q_head", "+", "self", ".", "r_r_bias", ",", "k_head_r", ")", "\n", "bd", "=", "self", ".", "rel_shift_bnij", "(", "bd", ",", "klen", "=", "ac", ".", "shape", "[", "3", "]", ")", "\n", "\n", "# segment based attention score", "\n", "if", "seg_mat", "is", "None", ":", "\n", "            ", "ef", "=", "0", "\n", "", "else", ":", "\n", "            ", "ef", "=", "torch", ".", "einsum", "(", "'ibnd,snd->ibns'", ",", "q_head", "+", "self", ".", "r_s_bias", ",", "self", ".", "seg_embed", ")", "\n", "ef", "=", "torch", ".", "einsum", "(", "'ijbs,ibns->bnij'", ",", "seg_mat", ",", "ef", ")", "\n", "\n", "# merge attention scores and perform masking", "\n", "", "attn_score", "=", "(", "ac", "+", "bd", "+", "ef", ")", "*", "self", ".", "scale", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "# attn_score = attn_score * (1 - attn_mask) - 1e30 * attn_mask", "\n", "            ", "if", "attn_mask", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                ", "attn_score", "=", "attn_score", "-", "65500", "*", "torch", ".", "einsum", "(", "'ijbn->bnij'", ",", "attn_mask", ")", "\n", "", "else", ":", "\n", "                ", "attn_score", "=", "attn_score", "-", "1e30", "*", "torch", ".", "einsum", "(", "'ijbn->bnij'", ",", "attn_mask", ")", "\n", "\n", "# attention probability", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "3", ")", "\n", "attn_prob", "=", "self", ".", "dropout", "(", "attn_prob", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attn_prob", "=", "attn_prob", "*", "torch", ".", "einsum", "(", "'ijbn->bnij'", ",", "head_mask", ")", "\n", "\n", "# attention output", "\n", "", "attn_vec", "=", "torch", ".", "einsum", "(", "'bnij,jbnd->ibnd'", ",", "attn_prob", ",", "v_head_h", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "return", "attn_vec", ",", "torch", ".", "einsum", "(", "'bnij->ijbn'", ",", "attn_prob", ")", "\n", "\n", "", "return", "attn_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetRelativeAttention.post_attention": [[296, 307], ["torch.einsum", "modeling_xlnet.XLNetRelativeAttention.dropout", "modeling_xlnet.XLNetRelativeAttention.layer_norm"], "methods", ["None"], ["", "def", "post_attention", "(", "self", ",", "h", ",", "attn_vec", ",", "residual", "=", "True", ")", ":", "\n", "        ", "\"\"\"Post-attention processing.\"\"\"", "\n", "# post-attention projection (back to `d_model`)", "\n", "attn_out", "=", "torch", ".", "einsum", "(", "'ibnd,hnd->ibh'", ",", "attn_vec", ",", "self", ".", "o", ")", "\n", "\n", "attn_out", "=", "self", ".", "dropout", "(", "attn_out", ")", "\n", "if", "residual", ":", "\n", "            ", "attn_out", "=", "attn_out", "+", "h", "\n", "", "output", "=", "self", ".", "layer_norm", "(", "attn_out", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetRelativeAttention.forward": [[308, 400], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "modeling_xlnet.XLNetRelativeAttention.post_attention", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.post_attention", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "modeling_xlnet.XLNetRelativeAttention.post_attention", "torch.cat", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "torch.cat", "mems.dim", "mems.dim"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core"], ["", "def", "forward", "(", "self", ",", "h", ",", "g", ",", "\n", "attn_mask_h", ",", "attn_mask_g", ",", "\n", "r", ",", "seg_mat", ",", "\n", "mems", "=", "None", ",", "target_mapping", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "if", "g", "is", "not", "None", ":", "\n", "###### Two-stream attention with relative positional encoding.", "\n", "# content based attention score", "\n", "            ", "if", "mems", "is", "not", "None", "and", "mems", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "h", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cat", "=", "h", "\n", "\n", "# content-based key head", "\n", "", "k_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "k", ")", "\n", "\n", "# content-based value head", "\n", "v_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "v", ")", "\n", "\n", "# position-based key head", "\n", "k_head_r", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "r", ",", "self", ".", "r", ")", "\n", "\n", "##### h-stream", "\n", "# content-stream query head", "\n", "q_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "h", ",", "self", ".", "q", ")", "\n", "\n", "# core attention ops", "\n", "attn_vec_h", "=", "self", ".", "rel_attn_core", "(", "\n", "q_head_h", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "seg_mat", ",", "attn_mask", "=", "attn_mask_h", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_vec_h", ",", "attn_prob_h", "=", "attn_vec_h", "\n", "\n", "# post processing", "\n", "", "output_h", "=", "self", ".", "post_attention", "(", "h", ",", "attn_vec_h", ")", "\n", "\n", "##### g-stream", "\n", "# query-stream query head", "\n", "q_head_g", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "g", ",", "self", ".", "q", ")", "\n", "\n", "# core attention ops", "\n", "if", "target_mapping", "is", "not", "None", ":", "\n", "                ", "q_head_g", "=", "torch", ".", "einsum", "(", "'mbnd,mlb->lbnd'", ",", "q_head_g", ",", "target_mapping", ")", "\n", "attn_vec_g", "=", "self", ".", "rel_attn_core", "(", "\n", "q_head_g", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "seg_mat", ",", "attn_mask", "=", "attn_mask_g", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attn_vec_g", ",", "attn_prob_g", "=", "attn_vec_g", "\n", "\n", "", "attn_vec_g", "=", "torch", ".", "einsum", "(", "'lbnd,mlb->mbnd'", ",", "attn_vec_g", ",", "target_mapping", ")", "\n", "", "else", ":", "\n", "                ", "attn_vec_g", "=", "self", ".", "rel_attn_core", "(", "\n", "q_head_g", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "seg_mat", ",", "attn_mask", "=", "attn_mask_g", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attn_vec_g", ",", "attn_prob_g", "=", "attn_vec_g", "\n", "\n", "# post processing", "\n", "", "", "output_g", "=", "self", ".", "post_attention", "(", "g", ",", "attn_vec_g", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_prob", "=", "attn_prob_h", ",", "attn_prob_g", "\n", "\n", "", "", "else", ":", "\n", "###### Multi-head attention with relative positional encoding", "\n", "            ", "if", "mems", "is", "not", "None", "and", "mems", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "h", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cat", "=", "h", "\n", "\n", "# content heads", "\n", "", "q_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "h", ",", "self", ".", "q", ")", "\n", "k_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "k", ")", "\n", "v_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "v", ")", "\n", "\n", "# positional heads", "\n", "k_head_r", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "r", ",", "self", ".", "r", ")", "\n", "\n", "# core attention ops", "\n", "attn_vec", "=", "self", ".", "rel_attn_core", "(", "\n", "q_head_h", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "seg_mat", ",", "attn_mask", "=", "attn_mask_h", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_vec", ",", "attn_prob", "=", "attn_vec", "\n", "\n", "# post processing", "\n", "", "output_h", "=", "self", ".", "post_attention", "(", "h", ",", "attn_vec", ")", "\n", "output_g", "=", "None", "\n", "\n", "", "outputs", "=", "(", "output_h", ",", "output_g", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attn_prob", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetFeedForward.__init__": [[402, 413], ["torch.nn.Module.__init__", "XLNetLayerNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_norm", "=", "XLNetLayerNorm", "(", "config", ".", "d_model", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "layer_1", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "d_inner", ")", "\n", "self", ".", "layer_2", "=", "nn", ".", "Linear", "(", "config", ".", "d_inner", ",", "config", ".", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "if", "isinstance", "(", "config", ".", "ff_activation", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "ff_activation", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "activation_function", "=", "ACT2FN", "[", "config", ".", "ff_activation", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation_function", "=", "config", ".", "ff_activation", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetFeedForward.forward": [[414, 423], ["modeling_xlnet.XLNetFeedForward.layer_1", "modeling_xlnet.XLNetFeedForward.activation_function", "modeling_xlnet.XLNetFeedForward.dropout", "modeling_xlnet.XLNetFeedForward.layer_2", "modeling_xlnet.XLNetFeedForward.dropout", "modeling_xlnet.XLNetFeedForward.layer_norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "output", "=", "inp", "\n", "output", "=", "self", ".", "layer_1", "(", "output", ")", "\n", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "layer_2", "(", "output", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "inp", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetLayer.__init__": [[425, 430], ["torch.nn.Module.__init__", "modeling_xlnet.XLNetRelativeAttention", "modeling_xlnet.XLNetFeedForward", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rel_attn", "=", "XLNetRelativeAttention", "(", "config", ")", "\n", "self", ".", "ff", "=", "XLNetFeedForward", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetLayer.forward": [[431, 445], ["modeling_xlnet.XLNetLayer.rel_attn", "modeling_xlnet.XLNetLayer.ff", "modeling_xlnet.XLNetLayer.ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output_h", ",", "output_g", ",", "\n", "attn_mask_h", ",", "attn_mask_g", ",", "\n", "r", ",", "seg_mat", ",", "mems", "=", "None", ",", "target_mapping", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "rel_attn", "(", "output_h", ",", "output_g", ",", "attn_mask_h", ",", "attn_mask_g", ",", "\n", "r", ",", "seg_mat", ",", "mems", "=", "mems", ",", "target_mapping", "=", "target_mapping", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "output_h", ",", "output_g", "=", "outputs", "[", ":", "2", "]", "\n", "\n", "if", "output_g", "is", "not", "None", ":", "\n", "            ", "output_g", "=", "self", ".", "ff", "(", "output_g", ")", "\n", "", "output_h", "=", "self", ".", "ff", "(", "output_h", ")", "\n", "\n", "outputs", "=", "(", "output_h", ",", "output_g", ")", "+", "outputs", "[", "2", ":", "]", "# Add again attentions if there are there", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetPreTrainedModel._init_weights": [[456, 475], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_", "isinstance", "isinstance", "param.data.normal_", "module.mask_emb.data.normal_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "XLNetLayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "XLNetRelativeAttention", ")", ":", "\n", "            ", "for", "param", "in", "[", "module", ".", "q", ",", "module", ".", "k", ",", "module", ".", "v", ",", "module", ".", "o", ",", "module", ".", "r", ",", "\n", "module", ".", "r_r_bias", ",", "module", ".", "r_s_bias", ",", "module", ".", "r_w_bias", ",", "\n", "module", ".", "seg_embed", "]", ":", "\n", "                ", "param", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "XLNetModel", ")", ":", "\n", "                ", "module", ".", "mask_emb", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetModel.__init__": [[597, 618], ["modeling_utils.PreTrainedModel.__init__", "torch.nn.Embedding", "torch.nn.Parameter", "torch.nn.ModuleList", "torch.nn.Dropout", "modeling_xlnet.XLNetModel.init_weights", "torch.FloatTensor", "modeling_xlnet.XLNetLayer", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_past", "=", "config", ".", "output_past", "\n", "\n", "self", ".", "mem_len", "=", "config", ".", "mem_len", "\n", "self", ".", "reuse_len", "=", "config", ".", "reuse_len", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "same_length", "=", "config", ".", "same_length", "\n", "self", ".", "attn_type", "=", "config", ".", "attn_type", "\n", "self", ".", "bi_data", "=", "config", ".", "bi_data", "\n", "self", ".", "clamp_len", "=", "config", ".", "clamp_len", "\n", "self", ".", "n_layer", "=", "config", ".", "n_layer", "\n", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "d_model", ")", "\n", "self", ".", "mask_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ",", "1", ",", "config", ".", "d_model", ")", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "XLNetLayer", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetModel.get_input_embeddings": [[619, 621], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetModel.set_input_embeddings": [[622, 624], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "word_embedding", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetModel._prune_heads": [[625, 627], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetModel.create_mask": [[628, 657], ["torch.ones", "torch.triu", "torch.zeros", "torch.cat", "torch.cat.to", "torch.tril", "torch.cat", "next", "modeling_xlnet.XLNetModel.parameters"], "methods", ["None"], ["", "def", "create_mask", "(", "self", ",", "qlen", ",", "mlen", ")", ":", "\n", "        ", "\"\"\"\n        Creates causal attention mask. Float mask where 1.0 indicates masked, 0.0 indicates not-masked.\n\n        Args:\n            qlen: TODO Lysandre didn't fill\n            mlen: TODO Lysandre didn't fill\n\n        ::\n\n                  same_length=False:      same_length=True:\n                  <mlen > <  qlen >       <mlen > <  qlen >\n               ^ [0 0 0 0 0 1 1 1 1]     [0 0 0 0 0 1 1 1 1]\n                 [0 0 0 0 0 0 1 1 1]     [1 0 0 0 0 0 1 1 1]\n            qlen [0 0 0 0 0 0 0 1 1]     [1 1 0 0 0 0 0 1 1]\n                 [0 0 0 0 0 0 0 0 1]     [1 1 1 0 0 0 0 0 1]\n               v [0 0 0 0 0 0 0 0 0]     [1 1 1 1 0 0 0 0 0]\n\n        \"\"\"", "\n", "attn_mask", "=", "torch", ".", "ones", "(", "[", "qlen", ",", "qlen", "]", ")", "\n", "mask_up", "=", "torch", ".", "triu", "(", "attn_mask", ",", "diagonal", "=", "1", ")", "\n", "attn_mask_pad", "=", "torch", ".", "zeros", "(", "[", "qlen", ",", "mlen", "]", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "[", "attn_mask_pad", ",", "mask_up", "]", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "mask_lo", "=", "torch", ".", "tril", "(", "attn_mask", ",", "diagonal", "=", "-", "1", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "[", "ret", "[", ":", ",", ":", "qlen", "]", "+", "mask_lo", ",", "ret", "[", ":", ",", "qlen", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "ret", "=", "ret", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetModel.cache_mem": [[658, 669], ["new_mem.detach", "torch.cat"], "methods", ["None"], ["", "def", "cache_mem", "(", "self", ",", "curr_out", ",", "prev_mem", ")", ":", "\n", "        ", "\"\"\"cache hidden states into memory.\"\"\"", "\n", "if", "self", ".", "reuse_len", "is", "not", "None", "and", "self", ".", "reuse_len", ">", "0", ":", "\n", "            ", "curr_out", "=", "curr_out", "[", ":", "self", ".", "reuse_len", "]", "\n", "\n", "", "if", "prev_mem", "is", "None", ":", "\n", "            ", "new_mem", "=", "curr_out", "[", "-", "self", ".", "mem_len", ":", "]", "\n", "", "else", ":", "\n", "            ", "new_mem", "=", "torch", ".", "cat", "(", "[", "prev_mem", ",", "curr_out", "]", ",", "dim", "=", "0", ")", "[", "-", "self", ".", "mem_len", ":", "]", "\n", "\n", "", "return", "new_mem", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetModel.positional_embedding": [[670, 680], ["torch.einsum", "torch.cat", "pos_emb.expand.expand.expand", "torch.sin", "torch.cos"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "positional_embedding", "(", "pos_seq", ",", "inv_freq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "torch", ".", "einsum", "(", "'i,d->id'", ",", "pos_seq", ",", "inv_freq", ")", "\n", "pos_emb", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sin", "(", "sinusoid_inp", ")", ",", "torch", ".", "cos", "(", "sinusoid_inp", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "pos_emb", "=", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "pos_emb", "=", "pos_emb", ".", "expand", "(", "-", "1", ",", "bsz", ",", "-", "1", ")", "\n", "\n", "", "return", "pos_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetModel.relative_positional_encoding": [[681, 719], ["torch.arange", "modeling_xlnet.XLNetModel.to", "torch.pow", "torch.arange", "torch.arange", "torch.cat", "torch.arange", "modeling_xlnet.XLNetModel.positional_embedding", "next", "ValueError", "fwd_pos_seq.clamp.clamp.clamp", "bwd_pos_seq.clamp.clamp.clamp", "modeling_xlnet.XLNetModel.positional_embedding", "modeling_xlnet.XLNetModel.positional_embedding", "modeling_xlnet.XLNetModel.positional_embedding", "modeling_xlnet.XLNetModel.positional_embedding", "fwd_pos_seq.clamp.clamp.clamp", "modeling_xlnet.XLNetModel.parameters"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding"], ["", "def", "relative_positional_encoding", "(", "self", ",", "qlen", ",", "klen", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "\"\"\"create relative positional encoding.\"\"\"", "\n", "freq_seq", "=", "torch", ".", "arange", "(", "0", ",", "self", ".", "d_model", ",", "2.0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "inv_freq", "=", "1", "/", "torch", ".", "pow", "(", "10000", ",", "(", "freq_seq", "/", "self", ".", "d_model", ")", ")", "\n", "\n", "if", "self", ".", "attn_type", "==", "'bi'", ":", "\n", "# beg, end = klen - 1, -qlen", "\n", "            ", "beg", ",", "end", "=", "klen", ",", "-", "qlen", "\n", "", "elif", "self", ".", "attn_type", "==", "'uni'", ":", "\n", "# beg, end = klen - 1, -1", "\n", "            ", "beg", ",", "end", "=", "klen", ",", "-", "1", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown `attn_type` {}.'", ".", "format", "(", "self", ".", "attn_type", ")", ")", "\n", "\n", "", "if", "self", ".", "bi_data", ":", "\n", "            ", "fwd_pos_seq", "=", "torch", ".", "arange", "(", "beg", ",", "end", ",", "-", "1.0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "bwd_pos_seq", "=", "torch", ".", "arange", "(", "-", "beg", ",", "-", "end", ",", "1.0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "fwd_pos_seq", "=", "fwd_pos_seq", ".", "clamp", "(", "-", "self", ".", "clamp_len", ",", "self", ".", "clamp_len", ")", "\n", "bwd_pos_seq", "=", "bwd_pos_seq", ".", "clamp", "(", "-", "self", ".", "clamp_len", ",", "self", ".", "clamp_len", ")", "\n", "\n", "", "if", "bsz", "is", "not", "None", ":", "\n", "                ", "fwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ",", "bsz", "//", "2", ")", "\n", "bwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "bwd_pos_seq", ",", "inv_freq", ",", "bsz", "//", "2", ")", "\n", "", "else", ":", "\n", "                ", "fwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ")", "\n", "bwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "bwd_pos_seq", ",", "inv_freq", ")", "\n", "\n", "", "pos_emb", "=", "torch", ".", "cat", "(", "[", "fwd_pos_emb", ",", "bwd_pos_emb", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "fwd_pos_seq", "=", "torch", ".", "arange", "(", "beg", ",", "end", ",", "-", "1.0", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "fwd_pos_seq", "=", "fwd_pos_seq", ".", "clamp", "(", "-", "self", ".", "clamp_len", ",", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ",", "bsz", ")", "\n", "\n", "", "pos_emb", "=", "pos_emb", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ")", "\n", "return", "pos_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetModel.forward": [[720, 890], ["modeling_xlnet.XLNetModel.dropout", "modeling_xlnet.XLNetModel.relative_positional_encoding", "modeling_xlnet.XLNetModel.dropout", "enumerate", "modeling_xlnet.XLNetModel.dropout", "ValueError", "token_type_ids.transpose().contiguous", "input_mask.transpose().contiguous", "attention_mask.transpose().contiguous", "perm_mask.permute().contiguous", "target_mapping.permute().contiguous", "next", "next", "modeling_xlnet.XLNetModel.create_mask", "modeling_xlnet.XLNetModel.word_embedding", "modeling_xlnet.XLNetModel.mask_emb.expand", "modeling_xlnet.XLNetModel.dropout", "torch.nn.functional.one_hot().to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "layer_module", "tuple.append", "modeling_xlnet.XLNetModel.permute().contiguous", "input_ids.transpose().contiguous.transpose().contiguous.transpose().contiguous", "modeling_xlnet.XLNetModel.parameters", "modeling_xlnet.XLNetModel.parameters", "ValueError", "torch.zeros().to", "torch.cat", "torch.eye().to", "torch.cat", "torch.zeros", "torch.cat", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "len", "tuple.append", "tuple.append", "tuple", "tuple", "tuple", "tuple", "inputs_embeds.transpose().contiguous", "ValueError", "token_type_ids.transpose", "input_mask.transpose", "attention_mask.transpose", "perm_mask.permute", "target_mapping.permute", "torch.nn.functional.one_hot", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "modeling_xlnet.XLNetModel.permute", "input_ids.transpose().contiguous.transpose().contiguous.transpose", "torch.zeros", "torch.eye", "torch.zeros().to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "modeling_xlnet.XLNetModel.cache_mem", "h.permute().contiguous", "hs.permute().contiguous", "tuple", "t.permute().contiguous", "inputs_embeds.transpose", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_xlnet.XLNetModel.parameters", "torch.zeros", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "h.permute", "hs.permute", "att_stream.permute().contiguous", "t.permute", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "att_stream.permute"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.relative_positional_encoding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.create_mask", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.cache_mem"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "# the original code for XLNet uses shapes [len, bsz] with the batch dimension at the end", "\n", "# but we want a unified interface in the library with the batch size on the first dimension", "\n", "# so we move here the first dimension (batch) to the end", "\n", "        ", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_ids", "=", "input_ids", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "qlen", ",", "bsz", "=", "input_ids", ".", "shape", "[", "0", "]", ",", "input_ids", ".", "shape", "[", "1", "]", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "inputs_embeds", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "qlen", ",", "bsz", "=", "inputs_embeds", ".", "shape", "[", "0", "]", ",", "inputs_embeds", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "token_type_ids", "=", "token_type_ids", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "input_mask", "=", "input_mask", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "if", "input_mask", "is", "not", "None", "else", "None", "\n", "attention_mask", "=", "attention_mask", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "perm_mask", "=", "perm_mask", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "if", "perm_mask", "is", "not", "None", "else", "None", "\n", "target_mapping", "=", "target_mapping", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "if", "target_mapping", "is", "not", "None", "else", "None", "\n", "\n", "\n", "mlen", "=", "mems", "[", "0", "]", ".", "shape", "[", "0", "]", "if", "mems", "is", "not", "None", "and", "mems", "[", "0", "]", "is", "not", "None", "else", "0", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "\n", "dtype_float", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "\n", "device", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n", "##### Attention mask", "\n", "# causal attention mask", "\n", "if", "self", ".", "attn_type", "==", "'uni'", ":", "\n", "            ", "attn_mask", "=", "self", ".", "create_mask", "(", "qlen", ",", "mlen", ")", "\n", "attn_mask", "=", "attn_mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "", "elif", "self", ".", "attn_type", "==", "'bi'", ":", "\n", "            ", "attn_mask", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported attention type: {}'", ".", "format", "(", "self", ".", "attn_type", ")", ")", "\n", "\n", "# data mask: input mask & perm mask", "\n", "", "assert", "input_mask", "is", "None", "or", "attention_mask", "is", "None", ",", "\"You can only use one of input_mask (uses 1 for padding) \"", "\n", "\"or attention_mask (uses 0 for padding, added for compatbility with BERT). Please choose one.\"", "\n", "if", "input_mask", "is", "None", "and", "attention_mask", "is", "not", "None", ":", "\n", "            ", "input_mask", "=", "1.0", "-", "attention_mask", "\n", "", "if", "input_mask", "is", "not", "None", "and", "perm_mask", "is", "not", "None", ":", "\n", "            ", "data_mask", "=", "input_mask", "[", "None", "]", "+", "perm_mask", "\n", "", "elif", "input_mask", "is", "not", "None", "and", "perm_mask", "is", "None", ":", "\n", "            ", "data_mask", "=", "input_mask", "[", "None", "]", "\n", "", "elif", "input_mask", "is", "None", "and", "perm_mask", "is", "not", "None", ":", "\n", "            ", "data_mask", "=", "perm_mask", "\n", "", "else", ":", "\n", "            ", "data_mask", "=", "None", "\n", "\n", "", "if", "data_mask", "is", "not", "None", ":", "\n", "# all mems can be attended to", "\n", "            ", "if", "mlen", ">", "0", ":", "\n", "                ", "mems_mask", "=", "torch", ".", "zeros", "(", "[", "data_mask", ".", "shape", "[", "0", "]", ",", "mlen", ",", "bsz", "]", ")", ".", "to", "(", "data_mask", ")", "\n", "data_mask", "=", "torch", ".", "cat", "(", "[", "mems_mask", ",", "data_mask", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "attn_mask", "is", "None", ":", "\n", "                ", "attn_mask", "=", "data_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "                ", "attn_mask", "+=", "data_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "(", "attn_mask", ">", "0", ")", ".", "to", "(", "dtype_float", ")", "\n", "\n", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "non_tgt_mask", "=", "-", "torch", ".", "eye", "(", "qlen", ")", ".", "to", "(", "attn_mask", ")", "\n", "if", "mlen", ">", "0", ":", "\n", "                ", "non_tgt_mask", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "[", "qlen", ",", "mlen", "]", ")", ".", "to", "(", "attn_mask", ")", ",", "non_tgt_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "", "non_tgt_mask", "=", "(", "(", "attn_mask", "+", "non_tgt_mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", ")", ">", "0", ")", ".", "to", "(", "attn_mask", ")", "\n", "", "else", ":", "\n", "            ", "non_tgt_mask", "=", "None", "\n", "\n", "##### Word embeddings and prepare h & g hidden states", "\n", "", "if", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "word_emb_k", "=", "inputs_embeds", "\n", "", "else", ":", "\n", "            ", "word_emb_k", "=", "self", ".", "word_embedding", "(", "input_ids", ")", "\n", "", "output_h", "=", "self", ".", "dropout", "(", "word_emb_k", ")", "\n", "if", "target_mapping", "is", "not", "None", ":", "\n", "            ", "word_emb_q", "=", "self", ".", "mask_emb", ".", "expand", "(", "target_mapping", ".", "shape", "[", "0", "]", ",", "bsz", ",", "-", "1", ")", "\n", "# else:  # We removed the inp_q input which was same as target mapping", "\n", "#     inp_q_ext = inp_q[:, :, None]", "\n", "#     word_emb_q = inp_q_ext * self.mask_emb + (1 - inp_q_ext) * word_emb_k", "\n", "output_g", "=", "self", ".", "dropout", "(", "word_emb_q", ")", "\n", "", "else", ":", "\n", "            ", "output_g", "=", "None", "\n", "\n", "##### Segment embedding", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "# Convert `token_type_ids` to one-hot `seg_mat`", "\n", "            ", "if", "mlen", ">", "0", ":", "\n", "                ", "mem_pad", "=", "torch", ".", "zeros", "(", "[", "mlen", ",", "bsz", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "cat_ids", "=", "torch", ".", "cat", "(", "[", "mem_pad", ",", "token_type_ids", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cat_ids", "=", "token_type_ids", "\n", "\n", "# `1` indicates not in the same segment [qlen x klen x bsz]", "\n", "", "seg_mat", "=", "(", "token_type_ids", "[", ":", ",", "None", "]", "!=", "cat_ids", "[", "None", ",", ":", "]", ")", ".", "long", "(", ")", "\n", "seg_mat", "=", "F", ".", "one_hot", "(", "seg_mat", ",", "num_classes", "=", "2", ")", ".", "to", "(", "dtype_float", ")", "\n", "", "else", ":", "\n", "            ", "seg_mat", "=", "None", "\n", "\n", "##### Positional encoding", "\n", "", "pos_emb", "=", "self", ".", "relative_positional_encoding", "(", "qlen", ",", "klen", ",", "bsz", "=", "bsz", ")", "\n", "pos_emb", "=", "self", ".", "dropout", "(", "pos_emb", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads] (a head_mask for each layer)", "\n", "# and head_mask is converted to shape [num_hidden_layers x qlen x klen x bsz x n_head]", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layer", "\n", "\n", "", "new_mems", "=", "(", ")", "\n", "if", "mems", "is", "None", ":", "\n", "            ", "mems", "=", "[", "None", "]", "*", "len", "(", "self", ".", "layer", ")", "\n", "\n", "", "attentions", "=", "[", "]", "\n", "hidden_states", "=", "[", "]", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "mem_len", "is", "not", "None", "and", "self", ".", "mem_len", ">", "0", "and", "self", ".", "output_past", ":", "\n", "# cache new mems", "\n", "                ", "new_mems", "=", "new_mems", "+", "(", "self", ".", "cache_mem", "(", "output_h", ",", "mems", "[", "i", "]", ")", ",", ")", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "hidden_states", ".", "append", "(", "(", "output_h", ",", "output_g", ")", "if", "output_g", "is", "not", "None", "else", "output_h", ")", "\n", "\n", "", "outputs", "=", "layer_module", "(", "output_h", ",", "output_g", ",", "attn_mask_h", "=", "non_tgt_mask", ",", "attn_mask_g", "=", "attn_mask", ",", "\n", "r", "=", "pos_emb", ",", "seg_mat", "=", "seg_mat", ",", "mems", "=", "mems", "[", "i", "]", ",", "target_mapping", "=", "target_mapping", ",", "\n", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "output_h", ",", "output_g", "=", "outputs", "[", ":", "2", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "# Add last hidden state", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "hidden_states", ".", "append", "(", "(", "output_h", ",", "output_g", ")", "if", "output_g", "is", "not", "None", "else", "output_h", ")", "\n", "\n", "", "output", "=", "self", ".", "dropout", "(", "output_g", "if", "output_g", "is", "not", "None", "else", "output_h", ")", "\n", "\n", "# Prepare outputs, we transpose back here to shape [bsz, len, hidden_dim] (cf. beginning of forward() method)", "\n", "outputs", "=", "(", "output", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ",", ")", "\n", "\n", "if", "self", ".", "mem_len", "is", "not", "None", "and", "self", ".", "mem_len", ">", "0", "and", "self", ".", "output_past", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "new_mems", ",", ")", "\n", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "if", "output_g", "is", "not", "None", ":", "\n", "                ", "hidden_states", "=", "tuple", "(", "h", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "for", "hs", "in", "hidden_states", "for", "h", "in", "hs", ")", "\n", "", "else", ":", "\n", "                ", "hidden_states", "=", "tuple", "(", "hs", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "for", "hs", "in", "hidden_states", ")", "\n", "", "outputs", "=", "outputs", "+", "(", "hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "if", "target_mapping", "is", "not", "None", ":", "\n", "# when target_mapping is provided, there are 2-tuple of attentions", "\n", "                ", "attentions", "=", "tuple", "(", "tuple", "(", "att_stream", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "for", "att_stream", "in", "t", ")", "for", "t", "in", "attentions", ")", "\n", "", "else", ":", "\n", "                ", "attentions", "=", "tuple", "(", "t", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "for", "t", "in", "attentions", ")", "\n", "", "outputs", "=", "outputs", "+", "(", "attentions", ",", ")", "\n", "\n", "", "return", "outputs", "# outputs, (new_mems), (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetLMHeadModel.__init__": [[937, 946], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "torch.nn.Linear", "modeling_xlnet.XLNetLMHeadModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "attn_type", "=", "config", ".", "attn_type", "\n", "self", ".", "same_length", "=", "config", ".", "same_length", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "lm_loss", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "vocab_size", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetLMHeadModel.get_output_embeddings": [[947, 949], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetLMHeadModel.forward": [[950, 974], ["modeling_xlnet.XLNetLMHeadModel.transformer", "modeling_xlnet.XLNetLMHeadModel.lm_loss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_xlnet.XLNetLMHeadModel.view", "labels.view", "modeling_xlnet.XLNetLMHeadModel.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "mems", "=", "mems", ",", "\n", "perm_mask", "=", "perm_mask", ",", "\n", "target_mapping", "=", "target_mapping", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "logits", "=", "self", ".", "lm_loss", "(", "transformer_outputs", "[", "0", "]", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# Flatten the tokens", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# return (loss), logits, (mems), (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetForSequenceClassification.__init__": [[1016, 1025], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "modeling_utils.SequenceSummary", "torch.nn.Linear", "modeling_xlnet.XLNetForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "sequence_summary", "=", "SequenceSummary", "(", "config", ")", "\n", "self", ".", "logits_proj", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetForSequenceClassification.forward": [[1026, 1055], ["modeling_xlnet.XLNetForSequenceClassification.transformer", "modeling_xlnet.XLNetForSequenceClassification.sequence_summary", "modeling_xlnet.XLNetForSequenceClassification.logits_proj", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_xlnet.XLNetForSequenceClassification.view", "labels.view", "modeling_xlnet.XLNetForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "mems", "=", "mems", ",", "\n", "perm_mask", "=", "perm_mask", ",", "\n", "target_mapping", "=", "target_mapping", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "output", "=", "self", ".", "sequence_summary", "(", "output", ")", "\n", "logits", "=", "self", ".", "logits_proj", "(", "output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# return (loss), logits, (mems), (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetForTokenClassification.__init__": [[1114, 1122], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "torch.nn.Linear", "modeling_xlnet.XLNetForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetForTokenClassification.forward": [[1123, 1154], ["modeling_xlnet.XLNetForTokenClassification.transformer", "modeling_xlnet.XLNetForTokenClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "attention_mask.view", "modeling_xlnet.XLNetForTokenClassification.view", "labels.view", "modeling_xlnet.XLNetForTokenClassification.view", "labels.view"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "mems", "=", "mems", ",", "\n", "perm_mask", "=", "perm_mask", ",", "\n", "target_mapping", "=", "target_mapping", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "# Only keep active parts of the loss", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "                ", "active_loss", "=", "attention_mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "[", "active_loss", "]", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "[", "active_loss", "]", "\n", "loss", "=", "loss_fct", "(", "active_logits", ",", "active_labels", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# return (loss), logits, (mems), (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetForMultipleChoice.__init__": [[1218, 1226], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "modeling_utils.SequenceSummary", "torch.nn.Linear", "modeling_xlnet.XLNetForMultipleChoice.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "sequence_summary", "=", "SequenceSummary", "(", "config", ")", "\n", "self", ".", "logits_proj", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "1", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetForMultipleChoice.forward": [[1227, 1256], ["input_ids.view", "modeling_xlnet.XLNetForMultipleChoice.transformer", "modeling_xlnet.XLNetForMultipleChoice.sequence_summary", "modeling_xlnet.XLNetForMultipleChoice.logits_proj", "modeling_xlnet.XLNetForMultipleChoice.view", "input_ids.size", "token_type_ids.view", "attention_mask.view", "input_mask.view", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "token_type_ids.size", "attention_mask.size", "input_mask.size", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "attention_mask", "=", "None", ",", "\n", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "labels", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "num_choices", "=", "input_ids", ".", "shape", "[", "1", "]", "\n", "\n", "flat_input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "flat_token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "size", "(", "-", "1", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "flat_input_mask", "=", "input_mask", ".", "view", "(", "-", "1", ",", "input_mask", ".", "size", "(", "-", "1", ")", ")", "if", "input_mask", "is", "not", "None", "else", "None", "\n", "\n", "transformer_outputs", "=", "self", ".", "transformer", "(", "flat_input_ids", ",", "token_type_ids", "=", "flat_token_type_ids", ",", "\n", "input_mask", "=", "flat_input_mask", ",", "attention_mask", "=", "flat_attention_mask", ",", "\n", "mems", "=", "mems", ",", "perm_mask", "=", "perm_mask", ",", "target_mapping", "=", "target_mapping", ",", "\n", "head_mask", "=", "head_mask", ",", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "output", "=", "self", ".", "sequence_summary", "(", "output", ")", "\n", "logits", "=", "self", ".", "logits_proj", "(", "output", ")", "\n", "reshaped_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_choices", ")", "\n", "outputs", "=", "(", "reshaped_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "reshaped_logits", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# return (loss), logits, (mems), (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetForQuestionAnsweringSimple.__init__": [[1304, 1312], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "torch.nn.Linear", "modeling_xlnet.XLNetForQuestionAnsweringSimple.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetForQuestionAnsweringSimple", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetForQuestionAnsweringSimple.forward": [[1313, 1353], ["modeling_xlnet.XLNetForQuestionAnsweringSimple.transformer", "modeling_xlnet.XLNetForQuestionAnsweringSimple.qa_outputs", "modeling_xlnet.XLNetForQuestionAnsweringSimple.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "end_positions", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "mems", "=", "mems", ",", "\n", "perm_mask", "=", "perm_mask", ",", "\n", "target_mapping", "=", "target_mapping", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), start_logits, end_logits, (mems), (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetForQuestionAnswering.__init__": [[1419, 1430], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "modeling_utils.PoolerStartLogits", "modeling_utils.PoolerEndLogits", "modeling_utils.PoolerAnswerClass", "modeling_xlnet.XLNetForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "start_n_top", "=", "config", ".", "start_n_top", "\n", "self", ".", "end_n_top", "=", "config", ".", "end_n_top", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "start_logits", "=", "PoolerStartLogits", "(", "config", ")", "\n", "self", ".", "end_logits", "=", "PoolerEndLogits", "(", "config", ")", "\n", "self", ".", "answer_class", "=", "PoolerAnswerClass", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.XLNetForQuestionAnswering.forward": [[1431, 1500], ["modeling_xlnet.XLNetForQuestionAnswering.transformer", "modeling_xlnet.XLNetForQuestionAnswering.start_logits", "modeling_xlnet.XLNetForQuestionAnswering.end_logits", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "hidden_states.size", "torch.nn.functional.softmax", "torch.topk", "start_top_index.unsqueeze().expand", "torch.gather", "torch.einsum.unsqueeze().expand", "hidden_states.unsqueeze().expand_as", "modeling_xlnet.XLNetForQuestionAnswering.end_logits", "torch.nn.functional.softmax", "torch.topk", "end_top_log_probs.view.view.view", "end_top_index.view.view.view", "torch.einsum", "modeling_xlnet.XLNetForQuestionAnswering.answer_class", "modeling_xlnet.XLNetForQuestionAnswering.answer_class", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss.", "p_mask.unsqueeze", "x.squeeze_", "start_top_index.unsqueeze", "torch.einsum.unsqueeze", "hidden_states.unsqueeze", "x.dim"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "is_impossible", "=", "None", ",", "cls_index", "=", "None", ",", "p_mask", "=", "None", ",", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "mems", "=", "mems", ",", "\n", "perm_mask", "=", "perm_mask", ",", "\n", "target_mapping", "=", "target_mapping", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "start_logits", "=", "self", ".", "start_logits", "(", "hidden_states", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "outputs", "=", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, let's remove the dimension added by batch splitting", "\n", "            ", "for", "x", "in", "(", "start_positions", ",", "end_positions", ",", "cls_index", ",", "is_impossible", ")", ":", "\n", "                ", "if", "x", "is", "not", "None", "and", "x", ".", "dim", "(", ")", ">", "1", ":", "\n", "                    ", "x", ".", "squeeze_", "(", "-", "1", ")", "\n", "\n", "# during training, compute the end logits based on the ground truth of the start position", "\n", "", "", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "\n", "if", "cls_index", "is", "not", "None", "and", "is_impossible", "is", "not", "None", ":", "\n", "# Predict answerability from the representation of CLS and START", "\n", "                ", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "cls_index", "=", "cls_index", ")", "\n", "loss_fct_cls", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "cls_loss", "=", "loss_fct_cls", "(", "cls_logits", ",", "is_impossible", ")", "\n", "\n", "# note(zhiliny): by default multiply the loss by 0.5 so that the scale is comparable to start_loss and end_loss", "\n", "total_loss", "+=", "cls_loss", "*", "0.5", "\n", "\n", "", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "else", ":", "\n", "# during inference, compute the end logits based on beam search", "\n", "            ", "bsz", ",", "slen", ",", "hsz", "=", "hidden_states", ".", "size", "(", ")", "\n", "start_log_probs", "=", "F", ".", "softmax", "(", "start_logits", ",", "dim", "=", "-", "1", ")", "# shape (bsz, slen)", "\n", "\n", "start_top_log_probs", ",", "start_top_index", "=", "torch", ".", "topk", "(", "start_log_probs", ",", "self", ".", "start_n_top", ",", "dim", "=", "-", "1", ")", "# shape (bsz, start_n_top)", "\n", "start_top_index_exp", "=", "start_top_index", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "torch", ".", "gather", "(", "hidden_states", ",", "-", "2", ",", "start_top_index_exp", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "start_states", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "slen", ",", "-", "1", ",", "-", "1", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "\n", "hidden_states_expanded", "=", "hidden_states", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "start_states", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "p_mask", "=", "p_mask", ".", "unsqueeze", "(", "-", "1", ")", "if", "p_mask", "is", "not", "None", "else", "None", "\n", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states_expanded", ",", "start_states", "=", "start_states", ",", "p_mask", "=", "p_mask", ")", "\n", "end_log_probs", "=", "F", ".", "softmax", "(", "end_logits", ",", "dim", "=", "1", ")", "# shape (bsz, slen, start_n_top)", "\n", "\n", "end_top_log_probs", ",", "end_top_index", "=", "torch", ".", "topk", "(", "end_log_probs", ",", "self", ".", "end_n_top", ",", "dim", "=", "1", ")", "# shape (bsz, end_n_top, start_n_top)", "\n", "end_top_log_probs", "=", "end_top_log_probs", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "end_top_index", "=", "end_top_index", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "\n", "start_states", "=", "torch", ".", "einsum", "(", "\"blh,bl->bh\"", ",", "hidden_states", ",", "start_log_probs", ")", "# get the representation of START as weighted sum of hidden states", "\n", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_states", "=", "start_states", ",", "cls_index", "=", "cls_index", ")", "# Shape (batch size,): one single `cls_logits` for each sample", "\n", "\n", "outputs", "=", "(", "start_top_log_probs", ",", "start_top_index", ",", "end_top_log_probs", ",", "end_top_index", ",", "cls_logits", ")", "+", "outputs", "\n", "\n", "# return start_top_log_probs, start_top_index, end_top_log_probs, end_top_index, cls_logits", "\n", "# or (if labels are provided) (total_loss,)", "\n", "", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.build_tf_xlnet_to_pytorch_map": [[45, 114], ["hasattr", "tf_to_pt_map.update", "enumerate", "tf_to_pt_map.update", "hasattr", "tf_to_pt_map.update", "hasattr", "hasattr", "r_r_list.append", "r_w_list.append", "r_s_list.append", "seg_embed_list.append"], "function", ["None"], ["def", "build_tf_xlnet_to_pytorch_map", "(", "model", ",", "config", ",", "tf_weights", "=", "None", ")", ":", "\n", "    ", "\"\"\" A map of modules from TF to PyTorch.\n        I use a map to keep the PyTorch model as\n        identical to the original PyTorch model as possible.\n    \"\"\"", "\n", "\n", "tf_to_pt_map", "=", "{", "}", "\n", "\n", "if", "hasattr", "(", "model", ",", "'transformer'", ")", ":", "\n", "        ", "if", "hasattr", "(", "model", ",", "'lm_loss'", ")", ":", "\n", "# We will load also the output bias", "\n", "            ", "tf_to_pt_map", "[", "'model/lm_loss/bias'", "]", "=", "model", ".", "lm_loss", ".", "bias", "\n", "", "if", "hasattr", "(", "model", ",", "'sequence_summary'", ")", "and", "'model/sequnece_summary/summary/kernel'", "in", "tf_weights", ":", "\n", "# We will load also the sequence summary", "\n", "            ", "tf_to_pt_map", "[", "'model/sequnece_summary/summary/kernel'", "]", "=", "model", ".", "sequence_summary", ".", "summary", ".", "weight", "\n", "tf_to_pt_map", "[", "'model/sequnece_summary/summary/bias'", "]", "=", "model", ".", "sequence_summary", ".", "summary", ".", "bias", "\n", "", "if", "hasattr", "(", "model", ",", "'logits_proj'", ")", "and", "config", ".", "finetuning_task", "is", "not", "None", "and", "'model/regression_{}/logit/kernel'", ".", "format", "(", "config", ".", "finetuning_task", ")", "in", "tf_weights", ":", "\n", "            ", "tf_to_pt_map", "[", "'model/regression_{}/logit/kernel'", ".", "format", "(", "config", ".", "finetuning_task", ")", "]", "=", "model", ".", "logits_proj", ".", "weight", "\n", "tf_to_pt_map", "[", "'model/regression_{}/logit/bias'", ".", "format", "(", "config", ".", "finetuning_task", ")", "]", "=", "model", ".", "logits_proj", ".", "bias", "\n", "\n", "# Now load the rest of the transformer", "\n", "", "model", "=", "model", ".", "transformer", "\n", "\n", "# Embeddings and output", "\n", "", "tf_to_pt_map", ".", "update", "(", "{", "'model/transformer/word_embedding/lookup_table'", ":", "model", ".", "word_embedding", ".", "weight", ",", "\n", "'model/transformer/mask_emb/mask_emb'", ":", "model", ".", "mask_emb", "}", ")", "\n", "\n", "# Transformer blocks", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "model", ".", "layer", ")", ":", "\n", "        ", "layer_str", "=", "\"model/transformer/layer_%d/\"", "%", "i", "\n", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "\"rel_attn/LayerNorm/gamma\"", ":", "b", ".", "rel_attn", ".", "layer_norm", ".", "weight", ",", "\n", "layer_str", "+", "\"rel_attn/LayerNorm/beta\"", ":", "b", ".", "rel_attn", ".", "layer_norm", ".", "bias", ",", "\n", "layer_str", "+", "\"rel_attn/o/kernel\"", ":", "b", ".", "rel_attn", ".", "o", ",", "\n", "layer_str", "+", "\"rel_attn/q/kernel\"", ":", "b", ".", "rel_attn", ".", "q", ",", "\n", "layer_str", "+", "\"rel_attn/k/kernel\"", ":", "b", ".", "rel_attn", ".", "k", ",", "\n", "layer_str", "+", "\"rel_attn/r/kernel\"", ":", "b", ".", "rel_attn", ".", "r", ",", "\n", "layer_str", "+", "\"rel_attn/v/kernel\"", ":", "b", ".", "rel_attn", ".", "v", ",", "\n", "layer_str", "+", "\"ff/LayerNorm/gamma\"", ":", "b", ".", "ff", ".", "layer_norm", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/LayerNorm/beta\"", ":", "b", ".", "ff", ".", "layer_norm", ".", "bias", ",", "\n", "layer_str", "+", "\"ff/layer_1/kernel\"", ":", "b", ".", "ff", ".", "layer_1", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/layer_1/bias\"", ":", "b", ".", "ff", ".", "layer_1", ".", "bias", ",", "\n", "layer_str", "+", "\"ff/layer_2/kernel\"", ":", "b", ".", "ff", ".", "layer_2", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/layer_2/bias\"", ":", "b", ".", "ff", ".", "layer_2", ".", "bias", ",", "\n", "}", ")", "\n", "\n", "# Relative positioning biases", "\n", "", "if", "config", ".", "untie_r", ":", "\n", "        ", "r_r_list", "=", "[", "]", "\n", "r_w_list", "=", "[", "]", "\n", "r_s_list", "=", "[", "]", "\n", "seg_embed_list", "=", "[", "]", "\n", "for", "b", "in", "model", ".", "layer", ":", "\n", "            ", "r_r_list", ".", "append", "(", "b", ".", "rel_attn", ".", "r_r_bias", ")", "\n", "r_w_list", ".", "append", "(", "b", ".", "rel_attn", ".", "r_w_bias", ")", "\n", "r_s_list", ".", "append", "(", "b", ".", "rel_attn", ".", "r_s_bias", ")", "\n", "seg_embed_list", ".", "append", "(", "b", ".", "rel_attn", ".", "seg_embed", ")", "\n", "", "", "else", ":", "\n", "        ", "r_r_list", "=", "[", "model", ".", "r_r_bias", "]", "\n", "r_w_list", "=", "[", "model", ".", "r_w_bias", "]", "\n", "r_s_list", "=", "[", "model", ".", "r_s_bias", "]", "\n", "seg_embed_list", "=", "[", "model", ".", "seg_embed", "]", "\n", "", "tf_to_pt_map", ".", "update", "(", "{", "\n", "'model/transformer/r_r_bias'", ":", "r_r_list", ",", "\n", "'model/transformer/r_w_bias'", ":", "r_w_list", ",", "\n", "'model/transformer/r_s_bias'", ":", "r_s_list", ",", "\n", "'model/transformer/seg_embed'", ":", "seg_embed_list", "}", ")", "\n", "return", "tf_to_pt_map", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.load_tf_weights_in_xlnet": [[115, 173], ["tf.train.list_variables", "modeling_xlnet.build_tf_xlnet_to_pytorch_map", "build_tf_xlnet_to_pytorch_map.items", "logger.info", "logger.info", "tf.train.load_variable", "logger.info", "isinstance", "tf_weights.pop", "tf_weights.pop", "tf_weights.pop", "logger.error", "logger.info", "logger.info", "np.transpose", "enumerate", "logger.info", "torch.from_numpy", "len", "logger.info", "torch.from_numpy", "tf_weights.keys"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.build_tf_xlnet_to_pytorch_map"], ["", "def", "load_tf_weights_in_xlnet", "(", "model", ",", "config", ",", "tf_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow models in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "# Load weights from TF model", "\n", "", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "tf_weights", "=", "{", "}", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "tf_weights", "[", "name", "]", "=", "array", "\n", "\n", "# Build TF to PyTorch weights loading map", "\n", "", "tf_to_pt_map", "=", "build_tf_xlnet_to_pytorch_map", "(", "model", ",", "config", ",", "tf_weights", ")", "\n", "\n", "for", "name", ",", "pointer", "in", "tf_to_pt_map", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Importing {}\"", ".", "format", "(", "name", ")", ")", "\n", "if", "name", "not", "in", "tf_weights", ":", "\n", "            ", "logger", ".", "info", "(", "\"{} not in tf pre-trained weights, skipping\"", ".", "format", "(", "name", ")", ")", "\n", "continue", "\n", "", "array", "=", "tf_weights", "[", "name", "]", "\n", "# adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v", "\n", "# which are not required for using pretrained model", "\n", "if", "'kernel'", "in", "name", "and", "(", "'ff'", "in", "name", "or", "'summary'", "in", "name", "or", "'logit'", "in", "name", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Transposing\"", ")", "\n", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "if", "isinstance", "(", "pointer", ",", "list", ")", ":", "\n", "# Here we will split the TF weigths", "\n", "            ", "assert", "len", "(", "pointer", ")", "==", "array", ".", "shape", "[", "0", "]", "\n", "for", "i", ",", "p_i", "in", "enumerate", "(", "pointer", ")", ":", "\n", "                ", "arr_i", "=", "array", "[", "i", ",", "...", "]", "\n", "try", ":", "\n", "                    ", "assert", "p_i", ".", "shape", "==", "arr_i", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                    ", "e", ".", "args", "+=", "(", "p_i", ".", "shape", ",", "arr_i", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {} for layer {}\"", ".", "format", "(", "name", ",", "i", ")", ")", "\n", "p_i", ".", "data", "=", "torch", ".", "from_numpy", "(", "arr_i", ")", "\n", "", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "tf_weights", ".", "pop", "(", "name", ",", "None", ")", "\n", "tf_weights", ".", "pop", "(", "name", "+", "'/Adam'", ",", "None", ")", "\n", "tf_weights", ".", "pop", "(", "name", "+", "'/Adam_1'", ",", "None", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Weights not copied to PyTorch model: {}\"", ".", "format", "(", "', '", ".", "join", "(", "tf_weights", ".", "keys", "(", ")", ")", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.gelu": [[175, 182], ["torch.tanh", "math.sqrt", "torch.pow"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Implementation of the gelu activation function.\n        XLNet is using OpenAI GPT's gelu (not exactly the same as BERT)\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlnet.swish": [[184, 186], ["torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_bert.BertConfig.__init__": [[85, 112], ["configuration_utils.PretrainedConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size", "=", "30522", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BertConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.AdamW.__init__": [[97, 109], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-6", ",", "weight_decay", "=", "0.0", ",", "correct_bias", "=", "True", ")", ":", "\n", "        ", "if", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {} - should be >= 0.0\"", ".", "format", "(", "eps", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "\n", "correct_bias", "=", "correct_bias", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.AdamW.step": [[110, 170], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "exp_avg_sq.sqrt().add_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "p.data.add_", "exp_avg.mul_", "exp_avg_sq.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# In-place operations to update the averages at the same time", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1.0", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1.0", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "step_size", "=", "group", "[", "'lr'", "]", "\n", "if", "group", "[", "'correct_bias'", "]", ":", "# No bias correction for Bert", "\n", "                    ", "bias_correction1", "=", "1.0", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1.0", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "step_size", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "# Just adding the square of the weights to the loss function is *not*", "\n", "# the correct way of using L2 regularization/weight decay with Adam,", "\n", "# since that will interact with the m and v parameters in strange ways.", "\n", "#", "\n", "# Instead we want to decay the weights in a manner that doesn't interact", "\n", "# with the m/v parameters. This is equivalent to adding the square", "\n", "# of the weights to the loss with plain (non-momentum) SGD.", "\n", "# Add weight decay at the end (fixed version)", "\n", "if", "group", "[", "'weight_decay'", "]", ">", "0.0", ":", "\n", "                    ", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", "*", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_constant_schedule": [[27, 31], ["torch.optim.lr_scheduler.LambdaLR"], "function", ["None"], ["def", "get_constant_schedule", "(", "optimizer", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a constant learning rate.\n    \"\"\"", "\n", "return", "LambdaLR", "(", "optimizer", ",", "lambda", "_", ":", "1", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_constant_schedule_with_warmup": [[33, 43], ["torch.optim.lr_scheduler.LambdaLR", "float", "float", "max"], "function", ["None"], ["", "def", "get_constant_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a constant learning rate preceded by a warmup\n    period during which the learning rate increases linearly between 0 and 1.\n    \"\"\"", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1.0", ",", "num_warmup_steps", ")", ")", "\n", "", "return", "1.", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_linear_schedule_with_warmup": [[45, 55], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max"], "function", ["None"], ["", "def", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "num_training_steps", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a learning rate that decreases linearly after\n    linearly increasing during a warmup period.\n    \"\"\"", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "return", "max", "(", "0.0", ",", "float", "(", "num_training_steps", "-", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", ")", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_cosine_schedule_with_warmup": [[57, 69], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max", "math.cos", "float"], "function", ["None"], ["", "def", "get_cosine_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "num_training_steps", ",", "num_cycles", "=", ".5", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a learning rate that decreases following the\n    values of the cosine function between 0 and `pi * cycles` after a warmup\n    period during which it increases linearly between 0 and 1.\n    \"\"\"", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "progress", "=", "float", "(", "current_step", "-", "num_warmup_steps", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", "\n", "return", "max", "(", "0.", ",", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "float", "(", "num_cycles", ")", "*", "2.", "*", "progress", ")", ")", ")", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_cosine_with_hard_restarts_schedule_with_warmup": [[71, 85], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max", "math.cos", "float"], "function", ["None"], ["", "def", "get_cosine_with_hard_restarts_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "num_training_steps", ",", "num_cycles", "=", "1.", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\" Create a schedule with a learning rate that decreases following the\n    values of the cosine function with several hard restarts, after a warmup\n    period during which it increases linearly between 0 and 1.\n    \"\"\"", "\n", "def", "lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "progress", "=", "float", "(", "current_step", "-", "num_warmup_steps", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", "\n", "if", "progress", ">=", "1.", ":", "\n", "            ", "return", "0.", "\n", "", "return", "max", "(", "0.", ",", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "(", "float", "(", "num_cycles", ")", "*", "progress", ")", "%", "1.", ")", ")", ")", ")", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.model_card.ModelCard.__init__": [[50, 69], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.items", "setattr", "logger.error"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# Recomended attributes from https://arxiv.org/abs/1810.03993 (see papers)", "\n", "        ", "self", ".", "model_details", "=", "kwargs", ".", "pop", "(", "'model_details'", ",", "{", "}", ")", "\n", "self", ".", "intended_use", "=", "kwargs", ".", "pop", "(", "'intended_use'", ",", "{", "}", ")", "\n", "self", ".", "factors", "=", "kwargs", ".", "pop", "(", "'factors'", ",", "{", "}", ")", "\n", "self", ".", "metrics", "=", "kwargs", ".", "pop", "(", "'metrics'", ",", "{", "}", ")", "\n", "self", ".", "evaluation_data", "=", "kwargs", ".", "pop", "(", "'evaluation_data'", ",", "{", "}", ")", "\n", "self", ".", "training_data", "=", "kwargs", ".", "pop", "(", "'training_data'", ",", "{", "}", ")", "\n", "self", ".", "quantitative_analyses", "=", "kwargs", ".", "pop", "(", "'quantitative_analyses'", ",", "{", "}", ")", "\n", "self", ".", "ethical_considerations", "=", "kwargs", ".", "pop", "(", "'ethical_considerations'", ",", "{", "}", ")", "\n", "self", ".", "caveats_and_recommendations", "=", "kwargs", ".", "pop", "(", "'caveats_and_recommendations'", ",", "{", "}", ")", "\n", "\n", "# Open additional attributes", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "", "except", "AttributeError", "as", "err", ":", "\n", "                ", "logger", ".", "error", "(", "\"Can't set {} with value {} for {}\"", ".", "format", "(", "key", ",", "value", ",", "self", ")", ")", "\n", "raise", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.model_card.ModelCard.save_pretrained": [[70, 81], ["os.path.isdir", "model_card.ModelCard.to_json_file", "logger.info", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.to_json_file"], ["", "", "", "def", "save_pretrained", "(", "self", ",", "save_directory_or_file", ")", ":", "\n", "        ", "\"\"\" Save a model card object to the directory or file `save_directory_or_file`.\n        \"\"\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "save_directory_or_file", ")", ":", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "            ", "output_model_card_file", "=", "os", ".", "path", ".", "join", "(", "save_directory_or_file", ",", "MODEL_CARD_NAME", ")", "\n", "", "else", ":", "\n", "            ", "output_model_card_file", "=", "save_directory_or_file", "\n", "\n", "", "self", ".", "to_json_file", "(", "output_model_card_file", ")", "\n", "logger", ".", "info", "(", "\"Model card saved in {}\"", ".", "format", "(", "output_model_card_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.model_card.ModelCard.from_pretrained": [[82, 194], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.items", "logger.info", "file_utils.hf_bucket_url.replace", "os.path.isdir", "file_utils.cached_path", "cls.from_json_file", "hasattr", "kwargs.pop", "str", "os.path.join", "logger.info", "logger.info", "logger.warning", "cls", "logger.warning", "logger.warning", "cls", "setattr", "to_remove.append", "os.path.isfile", "file_utils.is_remote_url", "file_utils.hf_bucket_url", "logger.warning", "logger.warning", "configuration_auto.ALL_PRETRAINED_CONFIG_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.cached_path", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_remote_url", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.hf_bucket_url"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiate a :class:`~transformers.ModelCard` from a pre-trained model model card.\n\n        Parameters:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model card to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model card that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing a mode card file saved using the :func:`~transformers.ModelCard.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - a path or url to a saved model card JSON `file`, e.g.: ``./my_model_directory/model_card.json``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                card should be cached if the standard cache should not be used.\n\n            kwargs: (`optional`) dict: key/value pairs with which to update the ModelCard object after loading.\n\n                - The values in kwargs of any keys which are model card attributes will be used to override the loaded values.\n                - Behavior concerning key/value pairs whose keys are *not* model card attributes is controlled by the `return_unused_kwargs` keyword parameter.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model card file and override the cached version if it exists.\n\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            return_unused_kwargs: (`optional`) bool:\n\n                - If False, then this function returns just the final model card object.\n                - If True, then this functions returns a tuple `(model card, unused_kwargs)` where `unused_kwargs` is a dictionary consisting of the key/value pairs whose keys are not model card attributes: ie the part of kwargs which has not been used to update `ModelCard` and is otherwise ignored.\n\n        Examples::\n\n            model_card = ModelCard.from_pretrained('bert-base-uncased')    # Download model card from S3 and cache.\n            model_card = ModelCard.from_pretrained('./test/saved_model/')  # E.g. model card was saved using `save_pretrained('./test/saved_model/')`\n            model_card = ModelCard.from_pretrained('./test/saved_model/model_card.json')\n            model_card = ModelCard.from_pretrained('bert-base-uncased', output_attention=True, foo=False)\n\n        \"\"\"", "\n", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "resume_download", "=", "kwargs", ".", "pop", "(", "'resume_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "return_unused_kwargs", "=", "kwargs", ".", "pop", "(", "'return_unused_kwargs'", ",", "False", ")", "\n", "\n", "if", "pretrained_model_name_or_path", "in", "ALL_PRETRAINED_CONFIG_ARCHIVE_MAP", ":", "\n", "# For simplicity we use the same pretrained url than the configuration files but with a different suffix (model_card.json)", "\n", "            ", "model_card_file", "=", "ALL_PRETRAINED_CONFIG_ARCHIVE_MAP", "[", "pretrained_model_name_or_path", "]", "\n", "model_card_file", "=", "model_card_file", ".", "replace", "(", "CONFIG_NAME", ",", "MODEL_CARD_NAME", ")", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "            ", "model_card_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "MODEL_CARD_NAME", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "pretrained_model_name_or_path", ")", "or", "is_remote_url", "(", "pretrained_model_name_or_path", ")", ":", "\n", "            ", "model_card_file", "=", "pretrained_model_name_or_path", "\n", "", "else", ":", "\n", "            ", "model_card_file", "=", "hf_bucket_url", "(", "pretrained_model_name_or_path", ",", "postfix", "=", "MODEL_CARD_NAME", ")", "\n", "\n", "", "try", ":", "\n", "# Load from URL or cache if already cached", "\n", "            ", "resolved_model_card_file", "=", "cached_path", "(", "model_card_file", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "\n", "proxies", "=", "proxies", ",", "resume_download", "=", "resume_download", ")", "\n", "if", "resolved_model_card_file", "==", "model_card_file", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading model card file {}\"", ".", "format", "(", "model_card_file", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading model card file {} from cache at {}\"", ".", "format", "(", "\n", "model_card_file", ",", "resolved_model_card_file", ")", ")", "\n", "# Load model card", "\n", "", "model_card", "=", "cls", ".", "from_json_file", "(", "resolved_model_card_file", ")", "\n", "\n", "", "except", "EnvironmentError", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "ALL_PRETRAINED_CONFIG_ARCHIVE_MAP", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Couldn't reach server at '{}' to download model card file.\"", ".", "format", "(", "\n", "model_card_file", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Model name '{}' was not found in model name list ({}). \"", "\"We assumed '{}' was a path or url to a model card file named {} or \"", "\"a directory containing such a file but couldn't find any such file at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "ALL_PRETRAINED_CONFIG_ARCHIVE_MAP", ".", "keys", "(", ")", ")", ",", "\n", "model_card_file", ",", "MODEL_CARD_NAME", ")", ")", "\n", "", "logger", ".", "warning", "(", "\"Creating an empty model card.\"", ")", "\n", "\n", "# We fall back on creating an empty model card", "\n", "model_card", "=", "cls", "(", ")", "\n", "\n", "", "except", "json", ".", "JSONDecodeError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Couldn't reach server at '{}' to download model card file or \"", "\n", "\"model card file is not a valid JSON file. \"", "\n", "\"Please check network or file content here: {}.\"", ".", "format", "(", "model_card_file", ",", "resolved_model_card_file", ")", ")", "\n", "logger", ".", "warning", "(", "\"Creating an empty model card.\"", ")", "\n", "\n", "# We fall back on creating an empty model card", "\n", "model_card", "=", "cls", "(", ")", "\n", "\n", "# Update model card with kwargs if needed", "\n", "", "to_remove", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "model_card", ",", "key", ")", ":", "\n", "                ", "setattr", "(", "model_card", ",", "key", ",", "value", ")", "\n", "to_remove", ".", "append", "(", "key", ")", "\n", "", "", "for", "key", "in", "to_remove", ":", "\n", "            ", "kwargs", ".", "pop", "(", "key", ",", "None", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Model card: %s\"", ",", "str", "(", "model_card", ")", ")", "\n", "if", "return_unused_kwargs", ":", "\n", "            ", "return", "model_card", ",", "kwargs", "\n", "", "else", ":", "\n", "            ", "return", "model_card", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.model_card.ModelCard.from_dict": [[195, 199], ["cls"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "\"\"\"Constructs a `ModelCard` from a Python dictionary of parameters.\"\"\"", "\n", "return", "cls", "(", "**", "json_object", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.model_card.ModelCard.from_json_file": [[200, 207], ["json.loads", "cls", "io.open", "reader.read"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `ModelCard` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "dict_obj", "=", "json", ".", "loads", "(", "text", ")", "\n", "return", "cls", "(", "**", "dict_obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.model_card.ModelCard.__eq__": [[208, 210], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "==", "other", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.model_card.ModelCard.__repr__": [[211, 213], ["str", "model_card.ModelCard.to_json_string"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.model_card.ModelCard.to_dict": [[214, 218], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.model_card.ModelCard.to_json_string": [[219, 222], ["json.dumps", "model_card.ModelCard.to_dict"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.model_card.ModelCard.to_json_file": [[223, 227], ["io.open", "writer.write", "model_card.ModelCard.to_json_string"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string"], ["", "def", "to_json_file", "(", "self", ",", "json_file_path", ")", ":", "\n", "        ", "\"\"\" Save this instance to a json file.\"\"\"", "\n", "with", "open", "(", "json_file_path", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_gpt2.GPT2Tokenizer.__init__": [[119, 139], ["tokenization_utils.PreTrainedTokenizer.__init__", "tokenization_gpt2.bytes_to_unicode", "dict", "regex.compile", "io.open", "json.load", "io.open", "tuple", "zip", "tokenization_gpt2.GPT2Tokenizer.encoder.items", "tokenization_gpt2.GPT2Tokenizer.byte_encoder.items", "merges_handle.read().split", "merge.split", "range", "len", "merges_handle.read"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_gpt2.bytes_to_unicode"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "errors", "=", "'replace'", ",", "unk_token", "=", "\"<|endoftext|>\"", ",", "\n", "bos_token", "=", "\"<|endoftext|>\"", ",", "eos_token", "=", "\"<|endoftext|>\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GPT2Tokenizer", ",", "self", ")", ".", "__init__", "(", "bos_token", "=", "bos_token", ",", "eos_token", "=", "eos_token", ",", "unk_token", "=", "unk_token", ",", "**", "kwargs", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "\n", "with", "open", "(", "vocab_file", ",", "encoding", "=", "\"utf-8\"", ")", "as", "vocab_handle", ":", "\n", "            ", "self", ".", "encoder", "=", "json", ".", "load", "(", "vocab_handle", ")", "\n", "", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "errors", "=", "errors", "# how to handle errors in decoding", "\n", "self", ".", "byte_encoder", "=", "bytes_to_unicode", "(", ")", "\n", "self", ".", "byte_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "byte_encoder", ".", "items", "(", ")", "}", "\n", "with", "open", "(", "merges_file", ",", "encoding", "=", "'utf-8'", ")", "as", "merges_handle", ":", "\n", "            ", "bpe_merges", "=", "merges_handle", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", "\n", "", "bpe_merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "bpe_merges", "]", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "bpe_merges", ",", "range", "(", "len", "(", "bpe_merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n", "# Should haved added re.IGNORECASE so BPE merges can happen for capitalized versions of contractions", "\n", "self", ".", "pat", "=", "re", ".", "compile", "(", "r\"\"\"'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+\"\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_gpt2.GPT2Tokenizer.vocab_size": [[140, 143], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_gpt2.GPT2Tokenizer.bpe": [[144, 184], ["tuple", "tokenization_gpt2.get_pairs", "min", "tuple", "len", "len", "tokenization_gpt2.get_pairs", "tuple.index", "tuple.extend", "tuple.append", "tuple.append", "tokenization_gpt2.GPT2Tokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.get_pairs", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "word", "=", "tuple", "(", "token", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_gpt2.GPT2Tokenizer._tokenize": [[185, 202], ["regex.findall", "bpe_tokens.extend", "tokenization_gpt2.GPT2Tokenizer.bpe().split", "token.encode", "ord", "tokenization_gpt2.GPT2Tokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.bpe"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "add_prefix_space", "=", "False", ")", ":", "\n", "        ", "\"\"\" Tokenize a string.\n            Args:\n                - add_prefix_space (boolean, default False):\n                    Begin the sentence with at least one space to get invariance to word order in GPT-2 (and RoBERTa) tokenizers.\n        \"\"\"", "\n", "if", "add_prefix_space", ":", "\n", "            ", "text", "=", "' '", "+", "text", "\n", "\n", "", "bpe_tokens", "=", "[", "]", "\n", "for", "token", "in", "re", ".", "findall", "(", "self", ".", "pat", ",", "text", ")", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "token", "=", "''", ".", "join", "(", "self", ".", "byte_encoder", "[", "ord", "(", "b", ")", "]", "for", "b", "in", "token", ")", "# Maps all our bytes to unicode strings, avoiding controle tokens of the BPE (spaces in our case)", "\n", "", "else", ":", "\n", "                ", "token", "=", "''", ".", "join", "(", "self", ".", "byte_encoder", "[", "b", "]", "for", "b", "in", "token", ".", "encode", "(", "'utf-8'", ")", ")", "# Maps all our bytes to unicode strings, avoiding controle tokens of the BPE (spaces in our case)", "\n", "", "bpe_tokens", ".", "extend", "(", "bpe_token", "for", "bpe_token", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "return", "bpe_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_gpt2.GPT2Tokenizer._convert_token_to_id": [[203, 206], ["tokenization_gpt2.GPT2Tokenizer.encoder.get", "tokenization_gpt2.GPT2Tokenizer.encoder.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "encoder", ".", "get", "(", "token", ",", "self", ".", "encoder", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_gpt2.GPT2Tokenizer._convert_id_to_token": [[207, 210], ["tokenization_gpt2.GPT2Tokenizer.decoder.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "get", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_gpt2.GPT2Tokenizer.convert_tokens_to_string": [[211, 216], ["bytearray().decode", "bytearray"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "text", "=", "''", ".", "join", "(", "tokens", ")", "\n", "text", "=", "bytearray", "(", "[", "self", ".", "byte_decoder", "[", "c", "]", "for", "c", "in", "text", "]", ")", ".", "decode", "(", "'utf-8'", ",", "errors", "=", "self", ".", "errors", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_gpt2.GPT2Tokenizer.save_vocabulary": [[217, 240], ["os.path.join", "os.path.join", "os.path.isdir", "logger.error", "io.open", "f.write", "io.open", "writer.write", "sorted", "json.dumps", "tokenization_gpt2.GPT2Tokenizer.bpe_ranks.items", "writer.write", "logger.warning"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary and merge files to a directory.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "merge_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "encoder", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "index", "=", "0", "\n", "with", "open", "(", "merge_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "u'#version: 0.2\\n'", ")", "\n", "for", "bpe_tokens", ",", "token_index", "in", "sorted", "(", "self", ".", "bpe_ranks", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: BPE merge indices are not consecutive.\"", "\n", "\" Please check that the tokenizer is not corrupted!\"", ".", "format", "(", "merge_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "' '", ".", "join", "(", "bpe_tokens", ")", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "vocab_file", ",", "merge_file", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_gpt2.bytes_to_unicode": [[70, 93], ["lru_cache", "range", "dict", "list", "_chr", "zip", "list", "list", "range", "bs.append", "cs.append", "range", "range", "ord", "ord", "ord", "ord", "ord", "ord"], "function", ["None"], ["@", "lru_cache", "(", ")", "\n", "def", "bytes_to_unicode", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns list of utf-8 byte and a mapping to unicode strings.\n    We specifically avoids mapping to whitespace/control characters the bpe code barfs on.\n\n    The reversible bpe codes work on unicode strings.\n    This means you need a large # of unicode characters in your vocab if you want to avoid UNKs.\n    When you're at something like a 10B token dataset you end up needing around 5K for decent coverage.\n    This is a signficant percentage of your normal, say, 32K bpe vocab.\n    To avoid that, we want lookup tables between utf-8 bytes and unicode strings.\n    \"\"\"", "\n", "_chr", "=", "unichr", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "else", "chr", "\n", "bs", "=", "list", "(", "range", "(", "ord", "(", "\"!\"", ")", ",", "ord", "(", "\"~\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00a1\"", ")", ",", "ord", "(", "\"\u00ac\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00ae\"", ")", ",", "ord", "(", "\"\u00ff\"", ")", "+", "1", ")", ")", "\n", "cs", "=", "bs", "[", ":", "]", "\n", "n", "=", "0", "\n", "for", "b", "in", "range", "(", "2", "**", "8", ")", ":", "\n", "        ", "if", "b", "not", "in", "bs", ":", "\n", "            ", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "2", "**", "8", "+", "n", ")", "\n", "n", "+=", "1", "\n", "", "", "cs", "=", "[", "_chr", "(", "n", ")", "for", "n", "in", "cs", "]", "\n", "return", "dict", "(", "zip", "(", "bs", ",", "cs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_gpt2.get_pairs": [[94, 105], ["set", "set.add"], "function", ["None"], ["", "def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"Return set of symbol pairs in a word.\n\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_t5.T5Config.__init__": [[68, 93], ["configuration_utils.PretrainedConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size", "=", "32128", ",", "\n", "n_positions", "=", "512", ",", "\n", "d_model", "=", "512", ",", "\n", "d_kv", "=", "64", ",", "\n", "d_ff", "=", "2048", ",", "\n", "num_layers", "=", "6", ",", "\n", "num_heads", "=", "8", ",", "\n", "relative_attention_num_buckets", "=", "32", ",", "\n", "dropout_rate", "=", "0.1", ",", "\n", "layer_norm_epsilon", "=", "1e-6", ",", "\n", "initializer_factor", "=", "1.0", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "T5Config", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "n_positions", "=", "n_positions", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_kv", "=", "d_kv", "\n", "self", ".", "d_ff", "=", "d_ff", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "relative_attention_num_buckets", "=", "relative_attention_num_buckets", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "layer_norm_epsilon", "=", "layer_norm_epsilon", "\n", "self", ".", "initializer_factor", "=", "initializer_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_t5.T5Config.max_position_embeddings": [[94, 97], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_t5.T5Config.hidden_size": [[98, 101], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_t5.T5Config.num_attention_heads": [[102, 105], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_t5.T5Config.num_hidden_layers": [[106, 109], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_layers", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.PositionalEmbedding.__init__": [[177, 184], ["torch.Module.__init__", "modeling_transfo_xl.PositionalEmbedding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "demb", ")", ":", "\n", "        ", "super", "(", "PositionalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "demb", "=", "demb", "\n", "\n", "inv_freq", "=", "1", "/", "(", "10000", "**", "(", "torch", ".", "arange", "(", "0.0", ",", "demb", ",", "2.0", ")", "/", "demb", ")", ")", "\n", "self", ".", "register_buffer", "(", "'inv_freq'", ",", "inv_freq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.PositionalEmbedding.forward": [[185, 193], ["torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pos_emb[].expand", "torch.ger.sin", "torch.ger.sin", "torch.ger.sin", "torch.ger.cos", "torch.ger.cos", "torch.ger.cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pos_seq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "torch", ".", "ger", "(", "pos_seq", ",", "self", ".", "inv_freq", ")", "\n", "pos_emb", "=", "torch", ".", "cat", "(", "[", "sinusoid_inp", ".", "sin", "(", ")", ",", "sinusoid_inp", ".", "cos", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "-", "1", ",", "bsz", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.PositionwiseFF.__init__": [[197, 214], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "dropout", ",", "pre_lnorm", "=", "False", ",", "layer_norm_epsilon", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "PositionwiseFF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "CoreNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d_model", ",", "d_inner", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "d_inner", ",", "d_model", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_epsilon", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.PositionwiseFF.forward": [[215, 230], ["modeling_transfo_xl.PositionwiseFF.CoreNet", "modeling_transfo_xl.PositionwiseFF.CoreNet", "modeling_transfo_xl.PositionwiseFF.layer_norm", "modeling_transfo_xl.PositionwiseFF.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization + positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "self", ".", "layer_norm", "(", "inp", ")", ")", "\n", "\n", "##### residual connection", "\n", "output", "=", "core_out", "+", "inp", "\n", "", "else", ":", "\n", "##### positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "inp", ")", "\n", "\n", "##### residual connection + layer normalization", "\n", "output", "=", "self", ".", "layer_norm", "(", "inp", "+", "core_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.__init__": [[233, 265], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "pre_lnorm", "=", "False", ",", "\n", "r_r_bias", "=", "None", ",", "r_w_bias", "=", "None", ",", "output_attentions", "=", "False", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_attentions", "=", "output_attentions", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "qkv_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "3", "*", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_head", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "layer_norm", "=", "nn", ".", "LayerNorm", "(", "d_model", ",", "eps", "=", "layer_norm_epsilon", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n", "if", "r_r_bias", "is", "None", "or", "r_w_bias", "is", "None", ":", "# Biases are not shared", "\n", "            ", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "r_r_bias", "=", "r_r_bias", "\n", "self", ".", "r_w_bias", "=", "r_w_bias", "\n", "\n", "", "self", ".", "r_net", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn._rel_shift": [[266, 277], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_padded.view.view.view", "x_padded[].view_as", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size"], "methods", ["None"], ["", "def", "_rel_shift", "(", "self", ",", "x", ")", ":", "\n", "        ", "zero_pad_shape", "=", "(", "x", ".", "size", "(", "0", ")", ",", "1", ")", "+", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "zero_pad", "=", "torch", ".", "zeros", "(", "zero_pad_shape", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "x_padded", "=", "torch", ".", "cat", "(", "[", "zero_pad", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x_padded_shape", "=", "(", "x", ".", "size", "(", "1", ")", "+", "1", ",", "x", ".", "size", "(", "0", ")", ")", "+", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "x_padded", "=", "x_padded", ".", "view", "(", "*", "x_padded_shape", ")", "\n", "\n", "x", "=", "x_padded", "[", "1", ":", "]", ".", "view_as", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.forward": [[278, 368], ["w_head_k.view.view.size", "w_head_q.view.view.view", "w_head_k.view.view.view", "w_head_v.view.view.view", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn._rel_shift", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.o_net", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.drop", "w.size", "r.size", "w.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "outputs.append", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.qkv_net", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.qkv_net", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.qkv_net", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.qkv_net", "attn_mask.dim", "attn_vec.contiguous().view.contiguous().view.contiguous", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.layer_norm", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.layer_norm", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.layer_norm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_mask.dim", "next", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.parameters", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "next", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.parameters", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn._rel_shift"], ["", "def", "forward", "(", "self", ",", "w", ",", "r", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "qlen", ",", "rlen", ",", "bsz", "=", "w", ".", "size", "(", "0", ")", ",", "r", ".", "size", "(", "0", ")", ",", "w", ".", "size", "(", "1", ")", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "cat", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "w_head_q", "=", "w_head_q", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "w", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "klen", "=", "w_head_k", ".", "size", "(", "0", ")", "\n", "\n", "w_head_q", "=", "w_head_q", ".", "view", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_k", "=", "w_head_k", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_v", "=", "w_head_v", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "\n", "r_head_k", "=", "r_head_k", ".", "view", "(", "rlen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x n_head x d_head", "\n", "\n", "#### compute attention score", "\n", "rw_head_q", "=", "w_head_q", "+", "self", ".", "r_w_bias", "# qlen x bsz x n_head x d_head", "\n", "AC", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "rw_head_q", ",", "w_head_k", ")", ")", "# qlen x klen x bsz x n_head", "\n", "\n", "rr_head_q", "=", "w_head_q", "+", "self", ".", "r_r_bias", "\n", "BD", "=", "torch", ".", "einsum", "(", "'ibnd,jnd->ijbn'", ",", "(", "rr_head_q", ",", "r_head_k", ")", ")", "# qlen x klen x bsz x n_head", "\n", "BD", "=", "self", ".", "_rel_shift", "(", "BD", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "AC", "+", "BD", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "\n", "#### compute attention probability", "\n", "if", "attn_mask", "is", "not", "None", "and", "torch", ".", "sum", "(", "attn_mask", ")", ".", "item", "(", ")", ":", "\n", "            ", "attn_mask", "=", "(", "attn_mask", "==", "1", ")", "# Switch to bool", "\n", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "if", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                    ", "attn_score", "=", "attn_score", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "65000", ")", ".", "type_as", "(", "attn_score", ")", "\n", "", "else", ":", "\n", "                    ", "attn_score", "=", "attn_score", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "1e30", ")", ".", "type_as", "(", "attn_score", ")", "\n", "", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "if", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                    ", "attn_score", "=", "attn_score", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "65000", ")", ".", "type_as", "(", "attn_score", ")", "\n", "", "else", ":", "\n", "                    ", "attn_score", "=", "attn_score", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "1e30", ")", ".", "type_as", "(", "attn_score", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attn_prob", "=", "attn_prob", "*", "head_mask", "\n", "\n", "#### compute attention vector", "\n", "", "attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "w_head_v", ")", ")", "\n", "\n", "# [qlen x bsz x n_head x d_head]", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "attn_vec", ".", "size", "(", "0", ")", ",", "attn_vec", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "outputs", "=", "[", "w", "+", "attn_out", "]", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "outputs", "=", "[", "self", ".", "layer_norm", "(", "w", "+", "attn_out", ")", "]", "\n", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "attn_prob", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.RelPartialLearnableDecoderLayer.__init__": [[371, 380], ["torch.Module.__init__", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn", "modeling_transfo_xl.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelPartialLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "\n", "d_head", ",", "dropout", ",", "layer_norm_epsilon", "=", "layer_norm_epsilon", ",", "**", "kwargs", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ",", "\n", "layer_norm_epsilon", "=", "layer_norm_epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.RelPartialLearnableDecoderLayer.forward": [[381, 391], ["modeling_transfo_xl.RelPartialLearnableDecoderLayer.dec_attn", "modeling_transfo_xl.RelPartialLearnableDecoderLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp", ",", "r", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "\n", "        ", "attn_outputs", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "r", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ",", "head_mask", "=", "head_mask", ")", "\n", "ff_output", "=", "self", ".", "pos_ff", "(", "attn_outputs", "[", "0", "]", ")", "\n", "\n", "outputs", "=", "[", "ff_output", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.AdaptiveEmbedding.__init__": [[394, 423], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "modeling_transfo_xl.AdaptiveEmbedding.emb_layers.append", "range", "torch.Embedding", "torch.Embedding", "torch.Embedding", "modeling_transfo_xl.AdaptiveEmbedding.emb_projs.append", "len", "modeling_transfo_xl.AdaptiveEmbedding.emb_layers.append", "modeling_transfo_xl.AdaptiveEmbedding.emb_projs.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "\n", "sample_softmax", "=", "False", ")", ":", "\n", "        ", "super", "(", "AdaptiveEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "div_val", "=", "div_val", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "emb_scale", "=", "d_proj", "**", "0.5", "\n", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "\n", "self", ".", "emb_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "emb_projs", "=", "nn", ".", "ParameterList", "(", ")", "\n", "if", "div_val", "==", "1", ":", "\n", "            ", "self", ".", "emb_layers", ".", "append", "(", "\n", "nn", ".", "Embedding", "(", "n_token", ",", "d_embed", ",", "sparse", "=", "sample_softmax", ">", "0", ")", "\n", ")", "\n", "if", "d_proj", "!=", "d_embed", ":", "\n", "                ", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "d_proj", ",", "d_embed", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "d_embed", "//", "(", "div_val", "**", "i", ")", "\n", "self", ".", "emb_layers", ".", "append", "(", "nn", ".", "Embedding", "(", "r_idx", "-", "l_idx", ",", "d_emb_i", ")", ")", "\n", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "d_proj", ",", "d_emb_i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.AdaptiveEmbedding.forward": [[424, 455], ["torch.linear.mul_", "next", "inp.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros.view", "torch.zeros.view", "torch.zeros.view", "torch.linear", "torch.linear", "torch.linear", "modeling_transfo_xl.AdaptiveEmbedding.parameters", "len", "mask_i.nonzero().squeeze", "torch.linear", "torch.linear", "torch.linear", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "inp.size", "inp.view.size", "mask_i.nonzero().squeeze.numel", "inp.view.index_select", "mask_i.nonzero"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "            ", "embed", "=", "self", ".", "emb_layers", "[", "0", "]", "(", "inp", ")", "\n", "if", "self", ".", "d_proj", "!=", "self", ".", "d_embed", ":", "\n", "                ", "embed", "=", "F", ".", "linear", "(", "embed", ",", "self", ".", "emb_projs", "[", "0", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "inp_flat", "=", "inp", ".", "view", "(", "-", "1", ")", "\n", "emb_flat", "=", "torch", ".", "zeros", "(", "[", "inp_flat", ".", "size", "(", "0", ")", ",", "self", ".", "d_proj", "]", ",", "\n", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "\n", "mask_i", "=", "(", "inp_flat", ">=", "l_idx", ")", "&", "(", "inp_flat", "<", "r_idx", ")", "\n", "indices_i", "=", "mask_i", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "indices_i", ".", "numel", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "inp_i", "=", "inp_flat", ".", "index_select", "(", "0", ",", "indices_i", ")", "-", "l_idx", "\n", "emb_i", "=", "self", ".", "emb_layers", "[", "i", "]", "(", "inp_i", ")", "\n", "emb_i", "=", "F", ".", "linear", "(", "emb_i", ",", "self", ".", "emb_projs", "[", "i", "]", ")", "\n", "\n", "emb_flat", ".", "index_copy_", "(", "0", ",", "indices_i", ",", "emb_i", ")", "\n", "\n", "", "embed_shape", "=", "inp", ".", "size", "(", ")", "+", "(", "self", ".", "d_proj", ",", ")", "\n", "embed", "=", "emb_flat", ".", "view", "(", "embed_shape", ")", "\n", "\n", "", "embed", ".", "mul_", "(", "self", ".", "emb_scale", ")", "\n", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight": [[466, 471], ["torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["None"], ["def", "_init_weight", "(", "self", ",", "weight", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "init", "==", "'uniform'", ":", "\n", "            ", "nn", ".", "init", ".", "uniform_", "(", "weight", ",", "-", "self", ".", "config", ".", "init_range", ",", "self", ".", "config", ".", "init_range", ")", "\n", "", "elif", "self", ".", "config", ".", "init", "==", "'normal'", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "weight", ",", "0.0", ",", "self", ".", "config", ".", "init_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias": [[472, 474], ["torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "_init_bias", "(", "self", ",", "bias", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weights": [[475, 515], ["classname.find", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "classname.find", "hasattr", "range", "classname.find", "hasattr", "len", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "classname.find", "hasattr", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "range", "classname.find", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "len", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "weight", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_bias", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'AdaptiveEmbedding'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'emb_projs'", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "m", ".", "emb_projs", ")", ")", ":", "\n", "                    ", "if", "m", ".", "emb_projs", "[", "i", "]", "is", "not", "None", ":", "\n", "                        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "emb_projs", "[", "i", "]", ",", "0.0", ",", "self", ".", "config", ".", "proj_init_std", ")", "\n", "", "", "", "", "elif", "classname", ".", "find", "(", "'Embedding'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "weight", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'ProjectedAdaptiveLogSoftmax'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'cluster_weight'", ")", "and", "m", ".", "cluster_weight", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "cluster_weight", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'cluster_bias'", ")", "and", "m", ".", "cluster_bias", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_bias", "(", "m", ".", "cluster_bias", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'out_projs'", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "m", ".", "out_projs", ")", ")", ":", "\n", "                    ", "if", "m", ".", "out_projs", "[", "i", "]", "is", "not", "None", ":", "\n", "                        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "out_projs", "[", "i", "]", ",", "0.0", ",", "self", ".", "config", ".", "proj_init_std", ")", "\n", "", "", "", "", "elif", "classname", ".", "find", "(", "'LayerNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "1.0", ",", "self", ".", "config", ".", "init_std", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_bias", "(", "m", ".", "bias", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'r_emb'", ")", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "r_emb", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'r_w_bias'", ")", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "r_w_bias", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'r_r_bias'", ")", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "r_r_bias", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'r_bias'", ")", ":", "\n", "                ", "self", ".", "_init_bias", "(", "m", ".", "r_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLModel.__init__": [[590, 645], ["modeling_utils.PreTrainedModel.__init__", "modeling_transfo_xl.AdaptiveEmbedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "modeling_transfo_xl.TransfoXLModel.init_weights", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "modeling_transfo_xl.PositionalEmbedding", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "modeling_transfo_xl.TransfoXLModel.layers.append", "modeling_transfo_xl.RelPartialLearnableDecoderLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransfoXLModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "n_token", "=", "config", ".", "vocab_size", "\n", "\n", "self", ".", "d_embed", "=", "config", ".", "d_embed", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "d_head", "=", "config", ".", "d_head", "\n", "\n", "self", ".", "word_emb", "=", "AdaptiveEmbedding", "(", "config", ".", "vocab_size", ",", "config", ".", "d_embed", ",", "config", ".", "d_model", ",", "config", ".", "cutoffs", ",", "\n", "div_val", "=", "config", ".", "div_val", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n", "self", ".", "n_layer", "=", "config", ".", "n_layer", "\n", "\n", "self", ".", "tgt_len", "=", "config", ".", "tgt_len", "\n", "self", ".", "mem_len", "=", "config", ".", "mem_len", "\n", "self", ".", "ext_len", "=", "config", ".", "ext_len", "\n", "self", ".", "max_klen", "=", "config", ".", "tgt_len", "+", "config", ".", "ext_len", "+", "config", ".", "mem_len", "\n", "\n", "self", ".", "attn_type", "=", "config", ".", "attn_type", "\n", "\n", "if", "not", "config", ".", "untie_r", ":", "\n", "            ", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "config", ".", "attn_type", "==", "0", ":", "# the default attention", "\n", "            ", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "RelPartialLearnableDecoderLayer", "(", "\n", "config", ".", "n_head", ",", "config", ".", "d_model", ",", "config", ".", "d_head", ",", "config", ".", "d_inner", ",", "config", ".", "dropout", ",", "\n", "tgt_len", "=", "config", ".", "tgt_len", ",", "ext_len", "=", "config", ".", "ext_len", ",", "mem_len", "=", "config", ".", "mem_len", ",", "\n", "dropatt", "=", "config", ".", "dropatt", ",", "pre_lnorm", "=", "config", ".", "pre_lnorm", ",", "\n", "r_w_bias", "=", "None", "if", "config", ".", "untie_r", "else", "self", ".", "r_w_bias", ",", "\n", "r_r_bias", "=", "None", "if", "config", ".", "untie_r", "else", "self", ".", "r_r_bias", ",", "\n", "output_attentions", "=", "self", ".", "output_attentions", ",", "\n", "layer_norm_epsilon", "=", "config", ".", "layer_norm_epsilon", ")", "\n", ")", "\n", "", "", "else", ":", "# learnable embeddings and absolute embeddings are not used in our pretrained checkpoints", "\n", "            ", "raise", "NotImplementedError", "# Removed them to avoid maintaining dead code", "\n", "\n", "", "self", ".", "same_length", "=", "config", ".", "same_length", "\n", "self", ".", "clamp_len", "=", "config", ".", "clamp_len", "\n", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default attention", "\n", "            ", "self", ".", "pos_emb", "=", "PositionalEmbedding", "(", "self", ".", "d_model", ")", "\n", "", "else", ":", "# learnable embeddings and absolute embeddings", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLModel.get_input_embeddings": [[646, 648], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLModel.set_input_embeddings": [[649, 651], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "word_emb", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLModel.backward_compatible": [[652, 654], ["None"], "methods", ["None"], ["", "def", "backward_compatible", "(", "self", ")", ":", "\n", "        ", "self", ".", "sample_softmax", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLModel.reset_length": [[655, 659], ["None"], "methods", ["None"], ["", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLModel._prune_heads": [[660, 663], ["logger.info"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Head pruning is not implemented for Transformer-XL model\"", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLModel.init_mems": [[664, 676], ["next", "range", "modeling_transfo_xl.TransfoXLModel.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mems.append"], "methods", ["None"], ["", "def", "init_mems", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "if", "self", ".", "mem_len", ">", "0", ":", "\n", "            ", "mems", "=", "[", "]", "\n", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layer", ")", ":", "\n", "                ", "empty", "=", "torch", ".", "zeros", "(", "self", ".", "mem_len", ",", "bsz", ",", "self", ".", "config", ".", "d_model", ",", "\n", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "mems", ".", "append", "(", "empty", ")", "\n", "\n", "", "return", "mems", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLModel._update_mems": [[677, 699], ["len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "range", "max", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "new_mems.append", "cat[].detach"], "methods", ["None"], ["", "", "def", "_update_mems", "(", "self", ",", "hids", ",", "mems", ",", "qlen", ",", "mlen", ")", ":", "\n", "# does not deal with None", "\n", "        ", "if", "mems", "is", "None", ":", "return", "None", "\n", "\n", "# mems is not None", "\n", "assert", "len", "(", "hids", ")", "==", "len", "(", "mems", ")", ",", "'len(hids) != len(mems)'", "\n", "\n", "# There are `mlen + qlen` steps that can be cached into mems", "\n", "# For the next step, the last `ext_len` of the `qlen` tokens", "\n", "# will be used as the extended context. Hence, we only cache", "\n", "# the tokens from `mlen + qlen - self.ext_len - self.mem_len`", "\n", "# to `mlen + qlen - self.ext_len`.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "new_mems", "=", "[", "]", "\n", "end_idx", "=", "mlen", "+", "max", "(", "0", ",", "qlen", "-", "0", "-", "self", ".", "ext_len", ")", "\n", "beg_idx", "=", "max", "(", "0", ",", "end_idx", "-", "self", ".", "mem_len", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "hids", ")", ")", ":", "\n", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", "[", "i", "]", ",", "hids", "[", "i", "]", "]", ",", "dim", "=", "0", ")", "\n", "new_mems", ".", "append", "(", "cat", "[", "beg_idx", ":", "end_idx", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "", "return", "new_mems", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLModel.forward": [[700, 792], ["modeling_transfo_xl.TransfoXLModel.drop", "modeling_transfo_xl.TransfoXLModel._update_mems", "ValueError", "modeling_transfo_xl.TransfoXLModel.init_mems", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "modeling_transfo_xl.TransfoXLModel.word_emb", "mems[].size", "modeling_transfo_xl.TransfoXLModel.new_ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "modeling_transfo_xl.TransfoXLModel.pos_emb", "modeling_transfo_xl.TransfoXLModel.drop", "modeling_transfo_xl.TransfoXLModel.drop", "enumerate", "modeling_transfo_xl.TransfoXLModel.transpose().contiguous", "list.append", "list", "outputs.append", "list", "outputs.append", "input_ids.transpose().contiguous.transpose().contiguous.transpose().contiguous", "input_ids.transpose().contiguous.transpose().contiguous.size", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.arange.clamp_", "torch.arange.clamp_", "torch.arange.clamp_", "list.append", "layer", "inputs_embeds.transpose().contiguous.transpose().contiguous.transpose().contiguous", "ValueError", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "modeling_transfo_xl.TransfoXLModel.new_ones", "list.append", "modeling_transfo_xl.TransfoXLModel.transpose", "t.transpose().contiguous", "t.permute().contiguous", "input_ids.transpose().contiguous.transpose().contiguous.transpose", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "inputs_embeds.transpose().contiguous.transpose().contiguous.transpose", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_transfo_xl.TransfoXLModel.parameters", "t.transpose", "t.permute", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLModel._update_mems", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "# the original code for Transformer-XL used shapes [len, bsz] but we want a unified interface in the library", "\n", "# so we transpose here from shape [bsz, len] to shape [len, bsz]", "\n", "        ", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_ids", "=", "input_ids", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "qlen", ",", "bsz", "=", "input_ids", ".", "size", "(", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "inputs_embeds", "=", "inputs_embeds", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "qlen", ",", "bsz", "=", "inputs_embeds", ".", "shape", "[", "0", "]", ",", "inputs_embeds", ".", "shape", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "mems", "is", "None", ":", "\n", "            ", "mems", "=", "self", ".", "init_mems", "(", "bsz", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads] (a head_mask for each layer)", "\n", "# and head_mask is converted to shape [num_hidden_layers x qlen x klen x bsz x n_head]", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layer", "\n", "\n", "", "if", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "word_emb", "=", "inputs_embeds", "\n", "", "else", ":", "\n", "            ", "word_emb", "=", "self", ".", "word_emb", "(", "input_ids", ")", "\n", "\n", "", "mlen", "=", "mems", "[", "0", "]", ".", "size", "(", "0", ")", "if", "mems", "is", "not", "None", "else", "0", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "all_ones", "=", "word_emb", ".", "new_ones", "(", "(", "qlen", ",", "klen", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "mask_len", "=", "klen", "-", "self", ".", "mem_len", "\n", "if", "mask_len", ">", "0", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "-", "mask_len", "\n", "", "else", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "\n", "", "dec_attn_mask", "=", "(", "torch", ".", "triu", "(", "all_ones", ",", "1", "+", "mlen", ")", "\n", "+", "torch", ".", "tril", "(", "all_ones", ",", "-", "mask_shift_len", ")", ")", "[", ":", ",", ":", ",", "None", "]", "# -1", "\n", "", "else", ":", "\n", "            ", "dec_attn_mask", "=", "torch", ".", "triu", "(", "\n", "word_emb", ".", "new_ones", "(", "(", "qlen", ",", "klen", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", ",", "diagonal", "=", "1", "+", "mlen", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "hids", "=", "[", "]", "\n", "attentions", "=", "[", "]", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default", "\n", "            ", "pos_seq", "=", "torch", ".", "arange", "(", "klen", "-", "1", ",", "-", "1", ",", "-", "1.0", ",", "device", "=", "word_emb", ".", "device", ",", "\n", "dtype", "=", "word_emb", ".", "dtype", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "pos_seq", ".", "clamp_", "(", "max", "=", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "pos_emb", "(", "pos_seq", ")", "\n", "\n", "core_out", "=", "self", ".", "drop", "(", "word_emb", ")", "\n", "pos_emb", "=", "self", ".", "drop", "(", "pos_emb", ")", "\n", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "hids", ".", "append", "(", "core_out", ")", "\n", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "layer_outputs", "=", "layer", "(", "core_out", ",", "pos_emb", ",", "dec_attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems_i", ",", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "core_out", "=", "layer_outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attentions", ".", "append", "(", "layer_outputs", "[", "1", "]", ")", "\n", "", "", "", "else", ":", "# learnable embeddings and absolute embeddings", "\n", "            ", "raise", "NotImplementedError", "# Removed these to avoid maintaining dead code - They are not used in our pretrained checkpoint", "\n", "\n", "", "core_out", "=", "self", ".", "drop", "(", "core_out", ")", "\n", "\n", "new_mems", "=", "self", ".", "_update_mems", "(", "hids", ",", "mems", ",", "mlen", ",", "qlen", ")", "\n", "\n", "# We transpose back here to shape [bsz, len, hidden_dim]", "\n", "outputs", "=", "[", "core_out", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ",", "new_mems", "]", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "# Add last layer and transpose to library standard shape [bsz, len, hidden_dim]", "\n", "            ", "hids", ".", "append", "(", "core_out", ")", "\n", "hids", "=", "list", "(", "t", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "for", "t", "in", "hids", ")", "\n", "outputs", ".", "append", "(", "hids", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# Transpose to library standard shape [bsz, n_heads, query_seq_len, key_seq_len]", "\n", "            ", "attentions", "=", "list", "(", "t", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "for", "t", "in", "attentions", ")", "\n", "outputs", ".", "append", "(", "attentions", ")", "\n", "\n", "", "return", "outputs", "# last hidden state, new_mems, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.__init__": [[833, 846], ["modeling_utils.PreTrainedModel.__init__", "modeling_transfo_xl.TransfoXLModel", "modeling_transfo_xl.TransfoXLLMHeadModel.init_weights", "torch.Linear", "torch.Linear", "torch.Linear", "LogUniformSampler", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransfoXLLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "TransfoXLModel", "(", "config", ")", "\n", "self", ".", "sample_softmax", "=", "config", ".", "sample_softmax", "\n", "# use sampled softmax", "\n", "if", "config", ".", "sample_softmax", ">", "0", ":", "\n", "            ", "self", ".", "out_layer", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "vocab_size", ")", "\n", "self", ".", "sampler", "=", "LogUniformSampler", "(", "config", ".", "vocab_size", ",", "config", ".", "sample_softmax", ")", "\n", "# use adaptive softmax (including standard softmax)", "\n", "", "else", ":", "\n", "            ", "self", ".", "crit", "=", "ProjectedAdaptiveLogSoftmax", "(", "config", ".", "vocab_size", ",", "config", ".", "d_embed", ",", "config", ".", "d_model", ",", "\n", "config", ".", "cutoffs", ",", "div_val", "=", "config", ".", "div_val", ")", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.tie_weights": [[847, 873], ["range", "enumerate", "len", "modeling_transfo_xl.TransfoXLLMHeadModel._tie_or_clone_weights", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modeling_transfo_xl.TransfoXLLMHeadModel.transformer.word_emb.emb_projs[].clone", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modeling_transfo_xl.TransfoXLLMHeadModel.transformer.word_emb.emb_projs[].clone"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Run this to be sure output and input (adaptive) softmax weights are tied\n        \"\"\"", "\n", "# sampled softmax", "\n", "if", "self", ".", "sample_softmax", ">", "0", ":", "\n", "            ", "if", "self", ".", "config", ".", "tie_weight", ":", "\n", "                ", "self", ".", "out_layer", ".", "weight", "=", "self", ".", "transformer", ".", "word_emb", ".", "weight", "\n", "# adaptive softmax (including standard softmax)", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "config", ".", "tie_weight", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "crit", ".", "out_layers", ")", ")", ":", "\n", "                    ", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "crit", ".", "out_layers", "[", "i", "]", ",", "\n", "self", ".", "transformer", ".", "word_emb", ".", "emb_layers", "[", "i", "]", ")", "\n", "", "", "if", "self", ".", "config", ".", "tie_projs", ":", "\n", "                ", "for", "i", ",", "tie_proj", "in", "enumerate", "(", "self", ".", "config", ".", "tie_projs", ")", ":", "\n", "                    ", "if", "tie_proj", "and", "self", ".", "config", ".", "div_val", "==", "1", "and", "self", ".", "config", ".", "d_model", "!=", "self", ".", "config", ".", "d_embed", ":", "\n", "                        ", "if", "self", ".", "config", ".", "torchscript", ":", "\n", "                            ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "nn", ".", "Parameter", "(", "self", ".", "transformer", ".", "word_emb", ".", "emb_projs", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "transformer", ".", "word_emb", ".", "emb_projs", "[", "0", "]", "\n", "", "", "elif", "tie_proj", "and", "self", ".", "config", ".", "div_val", "!=", "1", ":", "\n", "                        ", "if", "self", ".", "config", ".", "torchscript", ":", "\n", "                            ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "nn", ".", "Parameter", "(", "self", ".", "transformer", ".", "word_emb", ".", "emb_projs", "[", "i", "]", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "transformer", ".", "word_emb", ".", "emb_projs", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.reset_length": [[874, 876], ["modeling_transfo_xl.TransfoXLLMHeadModel.transformer.reset_length"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.reset_length"], ["", "", "", "", "", "", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "transformer", ".", "reset_length", "(", "tgt_len", ",", "ext_len", ",", "mem_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems": [[877, 879], ["modeling_transfo_xl.TransfoXLLMHeadModel.transformer.init_mems"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems"], ["", "def", "init_mems", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "init_mems", "(", "bsz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.TransfoXLLMHeadModel.forward": [[880, 911], ["modeling_transfo_xl.TransfoXLLMHeadModel.transformer", "modeling_transfo_xl_utilities.sample_logits", "modeling_transfo_xl.TransfoXLLMHeadModel.crit", "input_ids.size", "input_ids.size", "ValueError", "pred_hid.view", "softmax_output.view.view.view", "softmax_output.view.view.view", "inputs_embeds.size", "inputs_embeds.size", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "pred_hid.size"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.sample_logits"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "bsz", ",", "tgt_len", "=", "input_ids", ".", "size", "(", "0", ")", ",", "input_ids", ".", "size", "(", "1", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "bsz", ",", "tgt_len", "=", "inputs_embeds", ".", "size", "(", "0", ")", ",", "inputs_embeds", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "mems", "=", "mems", ",", "head_mask", "=", "head_mask", ",", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "last_hidden", "=", "transformer_outputs", "[", "0", "]", "\n", "pred_hid", "=", "last_hidden", "[", ":", ",", "-", "tgt_len", ":", "]", "\n", "outputs", "=", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "self", ".", "sample_softmax", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "assert", "self", ".", "config", ".", "tie_weight", "\n", "logit", "=", "sample_logits", "(", "self", ".", "transformer", ".", "word_emb", ",", "self", ".", "out_layer", ".", "bias", ",", "labels", ",", "pred_hid", ",", "self", ".", "sampler", ")", "\n", "softmax_output", "=", "-", "F", ".", "log_softmax", "(", "logit", ",", "-", "1", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "outputs", "=", "[", "softmax_output", "]", "+", "outputs", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# TODO: This is not implemented", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "            ", "softmax_output", "=", "self", ".", "crit", "(", "pred_hid", ".", "view", "(", "-", "1", ",", "pred_hid", ".", "size", "(", "-", "1", ")", ")", ",", "labels", ")", "\n", "if", "labels", "is", "None", ":", "\n", "                ", "softmax_output", "=", "softmax_output", ".", "view", "(", "bsz", ",", "tgt_len", ",", "-", "1", ")", "\n", "outputs", "=", "[", "softmax_output", "]", "+", "outputs", "\n", "", "else", ":", "\n", "                ", "softmax_output", "=", "softmax_output", ".", "view", "(", "bsz", ",", "tgt_len", ")", "\n", "outputs", "=", "[", "softmax_output", ",", "None", "]", "+", "outputs", "\n", "\n", "", "", "return", "outputs", "# (loss), logits or None if labels is not None (speed up adaptive softmax), new_mems, (all hidden states), (all attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.build_tf_to_pytorch_map": [[48, 119], ["hasattr", "enumerate", "enumerate", "tf_to_pt_map.update", "tf_to_pt_map.update", "enumerate", "zip", "tf_to_pt_map.update", "tf_to_pt_map.update", "zip", "r_r_list.append", "r_w_list.append", "tf_to_pt_map.update", "tf_to_pt_map.update", "tf_to_pt_map.update"], "function", ["None"], ["def", "build_tf_to_pytorch_map", "(", "model", ",", "config", ")", ":", "\n", "    ", "\"\"\" A map of modules from TF to PyTorch.\n        This time I use a map to keep the PyTorch model as identical to the original PyTorch model as possible.\n    \"\"\"", "\n", "tf_to_pt_map", "=", "{", "}", "\n", "\n", "if", "hasattr", "(", "model", ",", "'transformer'", ")", ":", "\n", "# We are loading in a TransfoXLLMHeadModel => we will load also the Adaptive Softmax", "\n", "        ", "tf_to_pt_map", ".", "update", "(", "{", "\n", "\"transformer/adaptive_softmax/cutoff_0/cluster_W\"", ":", "model", ".", "crit", ".", "cluster_weight", ",", "\n", "\"transformer/adaptive_softmax/cutoff_0/cluster_b\"", ":", "model", ".", "crit", ".", "cluster_bias", "}", ")", "\n", "for", "i", ",", "(", "out_l", ",", "proj_l", ",", "tie_proj", ")", "in", "enumerate", "(", "zip", "(", "\n", "model", ".", "crit", ".", "out_layers", ",", "\n", "model", ".", "crit", ".", "out_projs", ",", "\n", "config", ".", "tie_projs", ")", ")", ":", "\n", "            ", "layer_str", "=", "\"transformer/adaptive_softmax/cutoff_%d/\"", "%", "i", "\n", "if", "config", ".", "tie_weight", ":", "\n", "                ", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "'b'", ":", "out_l", ".", "bias", "}", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "# I don't think this is implemented in the TF code", "\n", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "'lookup_table'", ":", "out_l", ".", "weight", ",", "\n", "layer_str", "+", "'b'", ":", "out_l", ".", "bias", "}", ")", "\n", "", "if", "not", "tie_proj", ":", "\n", "                ", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "'proj'", ":", "proj_l", "\n", "}", ")", "\n", "# Now load the rest of the transformer", "\n", "", "", "model", "=", "model", ".", "transformer", "\n", "\n", "# Embeddings", "\n", "", "for", "i", ",", "(", "embed_l", ",", "proj_l", ")", "in", "enumerate", "(", "zip", "(", "model", ".", "word_emb", ".", "emb_layers", ",", "model", ".", "word_emb", ".", "emb_projs", ")", ")", ":", "\n", "        ", "layer_str", "=", "\"transformer/adaptive_embed/cutoff_%d/\"", "%", "i", "\n", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "'lookup_table'", ":", "embed_l", ".", "weight", ",", "\n", "layer_str", "+", "'proj_W'", ":", "proj_l", "\n", "}", ")", "\n", "\n", "# Transformer blocks", "\n", "", "for", "i", ",", "b", "in", "enumerate", "(", "model", ".", "layers", ")", ":", "\n", "        ", "layer_str", "=", "\"transformer/layer_%d/\"", "%", "i", "\n", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "\"rel_attn/LayerNorm/gamma\"", ":", "b", ".", "dec_attn", ".", "layer_norm", ".", "weight", ",", "\n", "layer_str", "+", "\"rel_attn/LayerNorm/beta\"", ":", "b", ".", "dec_attn", ".", "layer_norm", ".", "bias", ",", "\n", "layer_str", "+", "\"rel_attn/o/kernel\"", ":", "b", ".", "dec_attn", ".", "o_net", ".", "weight", ",", "\n", "layer_str", "+", "\"rel_attn/qkv/kernel\"", ":", "b", ".", "dec_attn", ".", "qkv_net", ".", "weight", ",", "\n", "layer_str", "+", "\"rel_attn/r/kernel\"", ":", "b", ".", "dec_attn", ".", "r_net", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/LayerNorm/gamma\"", ":", "b", ".", "pos_ff", ".", "layer_norm", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/LayerNorm/beta\"", ":", "b", ".", "pos_ff", ".", "layer_norm", ".", "bias", ",", "\n", "layer_str", "+", "\"ff/layer_1/kernel\"", ":", "b", ".", "pos_ff", ".", "CoreNet", "[", "0", "]", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/layer_1/bias\"", ":", "b", ".", "pos_ff", ".", "CoreNet", "[", "0", "]", ".", "bias", ",", "\n", "layer_str", "+", "\"ff/layer_2/kernel\"", ":", "b", ".", "pos_ff", ".", "CoreNet", "[", "3", "]", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/layer_2/bias\"", ":", "b", ".", "pos_ff", ".", "CoreNet", "[", "3", "]", ".", "bias", ",", "\n", "}", ")", "\n", "\n", "# Relative positioning biases", "\n", "", "if", "config", ".", "untie_r", ":", "\n", "        ", "r_r_list", "=", "[", "]", "\n", "r_w_list", "=", "[", "]", "\n", "for", "b", "in", "model", ".", "layers", ":", "\n", "            ", "r_r_list", ".", "append", "(", "b", ".", "dec_attn", ".", "r_r_bias", ")", "\n", "r_w_list", ".", "append", "(", "b", ".", "dec_attn", ".", "r_w_bias", ")", "\n", "", "", "else", ":", "\n", "        ", "r_r_list", "=", "[", "model", ".", "r_r_bias", "]", "\n", "r_w_list", "=", "[", "model", ".", "r_w_bias", "]", "\n", "", "tf_to_pt_map", ".", "update", "(", "{", "\n", "'transformer/r_r_bias'", ":", "r_r_list", ",", "\n", "'transformer/r_w_bias'", ":", "r_w_list", "}", ")", "\n", "return", "tf_to_pt_map", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.load_tf_weights_in_transfo_xl": [[120, 174], ["modeling_transfo_xl.build_tf_to_pytorch_map", "tf.train.list_variables", "build_tf_to_pytorch_map.items", "logger.info", "logger.info", "tf.train.load_variable", "tf_weights.pop", "tf_weights.pop", "tf_weights.pop", "logger.error", "np.transpose", "enumerate", "logger.info", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "len", "logger.info", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "tf_weights.keys"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.build_tf_to_pytorch_map"], ["", "def", "load_tf_weights_in_transfo_xl", "(", "model", ",", "config", ",", "tf_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow models in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "# Build TF to PyTorch weights loading map", "\n", "", "tf_to_pt_map", "=", "build_tf_to_pytorch_map", "(", "model", ",", "config", ")", "\n", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "tf_weights", "=", "{", "}", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "tf_weights", "[", "name", "]", "=", "array", "\n", "\n", "", "for", "name", ",", "pointer", "in", "tf_to_pt_map", ".", "items", "(", ")", ":", "\n", "        ", "assert", "name", "in", "tf_weights", "\n", "array", "=", "tf_weights", "[", "name", "]", "\n", "# adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v", "\n", "# which are not required for using pretrained model", "\n", "if", "'kernel'", "in", "name", "or", "'proj'", "in", "name", ":", "\n", "            ", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "if", "(", "'r_r_bias'", "in", "name", "or", "'r_w_bias'", "in", "name", ")", "and", "len", "(", "pointer", ")", ">", "1", ":", "\n", "# Here we will split the TF weigths", "\n", "            ", "assert", "len", "(", "pointer", ")", "==", "array", ".", "shape", "[", "0", "]", "\n", "for", "i", ",", "p_i", "in", "enumerate", "(", "pointer", ")", ":", "\n", "                ", "arr_i", "=", "array", "[", "i", ",", "...", "]", "\n", "try", ":", "\n", "                    ", "assert", "p_i", ".", "shape", "==", "arr_i", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                    ", "e", ".", "args", "+=", "(", "p_i", ".", "shape", ",", "arr_i", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {} for layer {}\"", ".", "format", "(", "name", ",", "i", ")", ")", "\n", "p_i", ".", "data", "=", "torch", ".", "from_numpy", "(", "arr_i", ")", "\n", "", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "tf_weights", ".", "pop", "(", "name", ",", "None", ")", "\n", "tf_weights", ".", "pop", "(", "name", "+", "'/Adam'", ",", "None", ")", "\n", "tf_weights", ".", "pop", "(", "name", "+", "'/Adam_1'", ",", "None", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Weights not copied to PyTorch model: {}\"", ".", "format", "(", "', '", ".", "join", "(", "tf_weights", ".", "keys", "(", ")", ")", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_ctrl.CTRLTokenizer.__init__": [[131, 144], ["tokenization_utils.PreTrainedTokenizer.__init__", "dict", "io.open", "json.load", "io.open", "tuple", "zip", "tokenization_ctrl.CTRLTokenizer.encoder.items", "merges_handle.read().split", "merge.split", "range", "len", "merges_handle.read"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "unk_token", "=", "\"<unk>\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CTRLTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "**", "kwargs", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "\n", "with", "open", "(", "vocab_file", ",", "encoding", "=", "\"utf-8\"", ")", "as", "vocab_handle", ":", "\n", "            ", "self", ".", "encoder", "=", "json", ".", "load", "(", "vocab_handle", ")", "\n", "", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "with", "open", "(", "merges_file", ",", "encoding", "=", "'utf-8'", ")", "as", "merges_handle", ":", "\n", "            ", "merges", "=", "merges_handle", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", "\n", "", "merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "merges", "]", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "merges", ",", "range", "(", "len", "(", "merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_ctrl.CTRLTokenizer.vocab_size": [[145, 148], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_ctrl.CTRLTokenizer.bpe": [[149, 191], ["tuple", "tuple", "tokenization_ctrl.get_pairs", "min", "tuple", "list", "len", "len", "tokenization_ctrl.get_pairs", "tuple.index", "tuple.extend", "tuple.append", "tuple.append", "tokenization_ctrl.CTRLTokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.get_pairs", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "word", "=", "tuple", "(", "token", ")", "\n", "word", "=", "tuple", "(", "list", "(", "word", "[", ":", "-", "1", "]", ")", "+", "[", "word", "[", "-", "1", "]", "+", "'</w>'", "]", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "'@@ '", ".", "join", "(", "word", ")", "\n", "word", "=", "word", "[", ":", "-", "4", "]", "\n", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_ctrl.CTRLTokenizer._tokenize": [[192, 202], ["regex.findall", "split_tokens.extend", "tokenization_ctrl.CTRLTokenizer.bpe().split", "tokenization_ctrl.CTRLTokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.bpe"], ["", "def", "_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\" Tokenize a string.\n        \"\"\"", "\n", "split_tokens", "=", "[", "]", "\n", "\n", "words", "=", "re", ".", "findall", "(", "r'\\S+\\n?'", ",", "text", ")", "\n", "\n", "for", "token", "in", "words", ":", "\n", "            ", "split_tokens", ".", "extend", "(", "[", "t", "for", "t", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_ctrl.CTRLTokenizer._convert_token_to_id": [[203, 206], ["tokenization_ctrl.CTRLTokenizer.encoder.get", "tokenization_ctrl.CTRLTokenizer.encoder.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "encoder", ".", "get", "(", "token", ",", "self", ".", "encoder", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_ctrl.CTRLTokenizer._convert_id_to_token": [[207, 210], ["tokenization_ctrl.CTRLTokenizer.decoder.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "get", "(", "index", ",", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_ctrl.CTRLTokenizer.convert_tokens_to_string": [[211, 215], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "' '", ".", "join", "(", "tokens", ")", ".", "replace", "(", "'@@ '", ",", "''", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_ctrl.CTRLTokenizer.save_vocabulary": [[216, 239], ["os.path.join", "os.path.join", "os.path.isdir", "logger.error", "io.open", "f.write", "io.open", "writer.write", "sorted", "json.dumps", "tokenization_ctrl.CTRLTokenizer.bpe_ranks.items", "writer.write", "logger.warning"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary and merge files to a directory.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "merge_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "encoder", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "index", "=", "0", "\n", "with", "open", "(", "merge_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "u'#version: 0.2\\n'", ")", "\n", "for", "bpe_tokens", ",", "token_index", "in", "sorted", "(", "self", ".", "bpe_ranks", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: BPE merge indices are not consecutive.\"", "\n", "\" Please check that the tokenizer is not corrupted!\"", ".", "format", "(", "merge_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "' '", ".", "join", "(", "bpe_tokens", ")", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "vocab_file", ",", "merge_file", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_ctrl.get_pairs": [[107, 120], ["set", "set", "set.add"], "function", ["None"], ["def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"Return set of symbol pairs in a word.\n\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "\n", "", "pairs", "=", "set", "(", "pairs", ")", "\n", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_albert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch": [[30, 42], ["transformers.AlbertConfig.from_json_file", "print", "transformers.AlbertForMaskedLM", "transformers.load_tf_weights_in_albert", "print", "torch.save", "transformers.AlbertForMaskedLM.state_dict", "str"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.load_tf_weights_in_albert"], ["def", "convert_tf_checkpoint_to_pytorch", "(", "tf_checkpoint_path", ",", "albert_config_file", ",", "pytorch_dump_path", ")", ":", "\n", "# Initialise PyTorch model", "\n", "    ", "config", "=", "AlbertConfig", ".", "from_json_file", "(", "albert_config_file", ")", "\n", "print", "(", "\"Building PyTorch model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "model", "=", "AlbertForMaskedLM", "(", "config", ")", "\n", "\n", "# Load weights from tf checkpoint", "\n", "load_tf_weights_in_albert", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_dump_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.__init__": [[539, 579], ["tokenization_utils.PreTrainedTokenizer.__init__", "dict", "dict", "set", "dict", "io.open", "json.load", "io.open", "tuple", "zip", "len", "len", "tokenization_xlm.XLMTokenizer.encoder.items", "merges_handle.read().split", "range", "merge.split", "len", "merges_handle.read"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "unk_token", "=", "\"<unk>\"", ",", "bos_token", "=", "\"<s>\"", ",", "\n", "sep_token", "=", "\"</s>\"", ",", "pad_token", "=", "\"<pad>\"", ",", "cls_token", "=", "\"</s>\"", ",", "\n", "mask_token", "=", "\"<special1>\"", ",", "additional_special_tokens", "=", "[", "\"<special0>\"", ",", "\n", "\"<special1>\"", ",", "\"<special2>\"", ",", "\"<special3>\"", ",", "\"<special4>\"", ",", "\"<special5>\"", ",", "\n", "\"<special6>\"", ",", "\"<special7>\"", ",", "\"<special8>\"", ",", "\"<special9>\"", "]", ",", "\n", "lang2id", "=", "None", ",", "id2lang", "=", "None", ",", "do_lowercase_and_remove_accent", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "XLMTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "bos_token", "=", "bos_token", ",", "\n", "sep_token", "=", "sep_token", ",", "pad_token", "=", "pad_token", ",", "\n", "cls_token", "=", "cls_token", ",", "mask_token", "=", "mask_token", ",", "\n", "additional_special_tokens", "=", "additional_special_tokens", ",", "\n", "**", "kwargs", ")", "\n", "\n", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "3", "# take into account special tokens ", "\n", "\n", "# cache of sm.MosesPunctNormalizer instance", "\n", "self", ".", "cache_moses_punct_normalizer", "=", "dict", "(", ")", "\n", "# cache of sm.MosesTokenizer instance", "\n", "self", ".", "cache_moses_tokenizer", "=", "dict", "(", ")", "\n", "self", ".", "lang_with_custom_tokenizer", "=", "set", "(", "[", "'zh'", ",", "'th'", ",", "'ja'", "]", ")", "\n", "# True for current supported model (v1.2.0), False for XLM-17 & 100", "\n", "self", ".", "do_lowercase_and_remove_accent", "=", "do_lowercase_and_remove_accent", "\n", "self", ".", "lang2id", "=", "lang2id", "\n", "self", ".", "id2lang", "=", "id2lang", "\n", "if", "lang2id", "is", "not", "None", "and", "id2lang", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "lang2id", ")", "==", "len", "(", "id2lang", ")", "\n", "\n", "", "self", ".", "ja_word_tokenizer", "=", "None", "\n", "self", ".", "zh_word_tokenizer", "=", "None", "\n", "\n", "with", "open", "(", "vocab_file", ",", "encoding", "=", "\"utf-8\"", ")", "as", "vocab_handle", ":", "\n", "            ", "self", ".", "encoder", "=", "json", ".", "load", "(", "vocab_handle", ")", "\n", "", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "with", "open", "(", "merges_file", ",", "encoding", "=", "'utf-8'", ")", "as", "merges_handle", ":", "\n", "            ", "merges", "=", "merges_handle", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", "\n", "", "merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", "[", ":", "2", "]", ")", "for", "merge", "in", "merges", "]", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "merges", ",", "range", "(", "len", "(", "merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.moses_punct_norm": [[580, 587], ["sacremoses.MosesPunctNormalizer.normalize", "sacremoses.MosesPunctNormalizer"], "methods", ["None"], ["", "def", "moses_punct_norm", "(", "self", ",", "text", ",", "lang", ")", ":", "\n", "        ", "if", "lang", "not", "in", "self", ".", "cache_moses_punct_normalizer", ":", "\n", "            ", "punct_normalizer", "=", "sm", ".", "MosesPunctNormalizer", "(", "lang", "=", "lang", ")", "\n", "self", ".", "cache_moses_punct_normalizer", "[", "lang", "]", "=", "punct_normalizer", "\n", "", "else", ":", "\n", "            ", "punct_normalizer", "=", "self", ".", "cache_moses_punct_normalizer", "[", "lang", "]", "\n", "", "return", "punct_normalizer", ".", "normalize", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.moses_tokenize": [[588, 595], ["sacremoses.MosesTokenizer.tokenize", "sacremoses.MosesTokenizer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "moses_tokenize", "(", "self", ",", "text", ",", "lang", ")", ":", "\n", "        ", "if", "lang", "not", "in", "self", ".", "cache_moses_tokenizer", ":", "\n", "            ", "moses_tokenizer", "=", "sm", ".", "MosesTokenizer", "(", "lang", "=", "lang", ")", "\n", "self", ".", "cache_moses_tokenizer", "[", "lang", "]", "=", "moses_tokenizer", "\n", "", "else", ":", "\n", "            ", "moses_tokenizer", "=", "self", ".", "cache_moses_tokenizer", "[", "lang", "]", "\n", "", "return", "moses_tokenizer", ".", "tokenize", "(", "text", ",", "return_str", "=", "False", ",", "escape", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.moses_pipeline": [[596, 601], ["tokenization_xlm.replace_unicode_punct", "tokenization_xlm.XLMTokenizer.moses_punct_norm", "tokenization_xlm.remove_non_printing_char"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.replace_unicode_punct", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.moses_punct_norm", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.remove_non_printing_char"], ["", "def", "moses_pipeline", "(", "self", ",", "text", ",", "lang", ")", ":", "\n", "        ", "text", "=", "replace_unicode_punct", "(", "text", ")", "\n", "text", "=", "self", ".", "moses_punct_norm", "(", "text", ",", "lang", ")", "\n", "text", "=", "remove_non_printing_char", "(", "text", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.ja_tokenize": [[602, 616], ["list", "tokenization_xlm.XLMTokenizer.ja_word_tokenizer.getWS", "Mykytea.Mykytea", "logger.error", "logger.error", "logger.error", "logger.error", "logger.error", "logger.error", "os.path.expanduser"], "methods", ["None"], ["", "def", "ja_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "ja_word_tokenizer", "is", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "import", "Mykytea", "\n", "self", ".", "ja_word_tokenizer", "=", "Mykytea", ".", "Mykytea", "(", "'-model %s/local/share/kytea/model.bin'", "%", "os", ".", "path", ".", "expanduser", "(", "'~'", ")", ")", "\n", "", "except", "(", "AttributeError", ",", "ImportError", ")", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "\"Make sure you install KyTea (https://github.com/neubig/kytea) and it's python wrapper (https://github.com/chezou/Mykytea-python) with the following steps\"", ")", "\n", "logger", ".", "error", "(", "\"1. git clone git@github.com:neubig/kytea.git && cd kytea\"", ")", "\n", "logger", ".", "error", "(", "\"2. autoreconf -i\"", ")", "\n", "logger", ".", "error", "(", "\"3. ./configure --prefix=$HOME/local\"", ")", "\n", "logger", ".", "error", "(", "\"4. make && make install\"", ")", "\n", "logger", ".", "error", "(", "\"5. pip install kytea\"", ")", "\n", "raise", "e", "\n", "", "", "return", "list", "(", "self", ".", "ja_word_tokenizer", ".", "getWS", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.vocab_size": [[617, 620], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.bpe": [[621, 663], ["tokenization_xlm.get_pairs", "tuple", "min", "tuple", "len", "len", "tokenization_xlm.get_pairs", "word.index", "tuple.extend", "tuple.append", "tuple.append", "tokenization_xlm.XLMTokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.get_pairs", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "word", "=", "tuple", "(", "token", "[", ":", "-", "1", "]", ")", "+", "(", "token", "[", "-", "1", "]", "+", "'</w>'", ",", ")", "\n", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "+", "'</w>'", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "if", "word", "==", "'\\n  </w>'", ":", "\n", "            ", "word", "=", "'\\n</w>'", "\n", "", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer._tokenize": [[664, 749], ["logger.error", "tokenization_xlm.XLMTokenizer.split", "tokenization_xlm.lowercase_and_remove_accent", "tokenization_xlm.XLMTokenizer.moses_pipeline", "tokenization_xlm.XLMTokenizer.moses_tokenize", "split_tokens.extend", "tokenization_xlm.romanian_preprocessing", "tokenization_xlm.XLMTokenizer.moses_pipeline", "th_word_tokenize", "tokenization_xlm.XLMTokenizer.moses_pipeline", "tokenization_xlm.XLMTokenizer.split", "logger.error", "logger.error", "jieba.cut", "tokenization_xlm.XLMTokenizer.moses_pipeline", "tokenization_xlm.XLMTokenizer.ja_tokenize", "ValueError", "tokenization_xlm.XLMTokenizer.bpe().split", "logger.error", "logger.error", "tokenization_xlm.XLMTokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.lowercase_and_remove_accent", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.moses_pipeline", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.moses_tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.romanian_preprocessing", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.moses_pipeline", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.moses_pipeline", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.moses_pipeline", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.ja_tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.bpe"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "lang", "=", "'en'", ",", "bypass_tokenizer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Tokenize a string given language code. For Chinese, Japanese and Thai, we use a language specific tokenizerself. Otherwise, we use Moses.\n\n        Details of tokenization:\n        - [sacremoses](https://github.com/alvations/sacremoses): port of Moses\n            - Install with `pip install sacremoses`\n        - [pythainlp](https://github.com/PyThaiNLP/pythainlp): Thai tokenizer\n            - Install with `pip install pythainlp`\n        - [kytea](https://github.com/chezou/Mykytea-python): Japanese tokenizer, wrapper of [KyTea](https://github.com/neubig/kytea)\n            - Install with the following steps:\n            ```\n            git clone git@github.com:neubig/kytea.git && cd kytea\n            autoreconf -i\n            ./configure --prefix=$HOME/local\n            make && make install\n            pip install kytea\n            ```\n        - [jieba](https://github.com/fxsjy/jieba): Chinese tokenizer *\n            - Install with `pip install jieba`\n\n        \\* The original XLM used [Stanford Segmenter](https://nlp.stanford.edu/software/stanford-segmenter-2018-10-16.zip).\n        However, the wrapper (`nltk.tokenize.stanford_segmenter`) is slow due to JVM overhead, and it will be deprecated.\n        Jieba is a lot faster and pip-installable. Note there is some mismatch with the Stanford Segmenter. It should be fine\n        if you fine-tune the model with Chinese supervisionself. If you want the same exact behaviour, use the original XLM\n        [preprocessing script](https://github.com/facebookresearch/XLM/tree/master/tools) to tokenize the sentence externally,\n        and set `bypass_tokenizer=True` to bypass the tokenizer.\n\n        Args:\n            - lang: ISO language code (default = 'en') (string). Languages should belong of the model supported languages. However, we don't enforce it.\n            - bypass_tokenizer: Allow users to preprocess and tokenize the sentences externally (default = False)  (bool). If True, we only apply BPE.\n\n        Returns:\n            List of tokens.\n        \"\"\"", "\n", "if", "lang", "and", "self", ".", "lang2id", "and", "lang", "not", "in", "self", ".", "lang2id", ":", "\n", "            ", "logger", ".", "error", "(", "\"Supplied language code not found in lang2id mapping. Please check that your language is supported by the loaded pretrained model.\"", ")", "\n", "", "if", "bypass_tokenizer", ":", "\n", "            ", "text", "=", "text", ".", "split", "(", ")", "\n", "", "elif", "lang", "not", "in", "self", ".", "lang_with_custom_tokenizer", ":", "\n", "            ", "text", "=", "self", ".", "moses_pipeline", "(", "text", ",", "lang", "=", "lang", ")", "\n", "# TODO: make sure we are using `xlm-mlm-enro-1024`, since XLM-100 doesn't have this step", "\n", "if", "lang", "==", "'ro'", ":", "\n", "                ", "text", "=", "romanian_preprocessing", "(", "text", ")", "\n", "", "text", "=", "self", ".", "moses_tokenize", "(", "text", ",", "lang", "=", "lang", ")", "\n", "", "elif", "lang", "==", "'th'", ":", "\n", "            ", "text", "=", "self", ".", "moses_pipeline", "(", "text", ",", "lang", "=", "lang", ")", "\n", "try", ":", "\n", "                ", "if", "'pythainlp'", "not", "in", "sys", ".", "modules", ":", "\n", "                    ", "from", "pythainlp", ".", "tokenize", "import", "word_tokenize", "as", "th_word_tokenize", "\n", "", "else", ":", "\n", "                    ", "th_word_tokenize", "=", "sys", ".", "modules", "[", "'pythainlp'", "]", ".", "word_tokenize", "\n", "", "", "except", "(", "AttributeError", ",", "ImportError", ")", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "\"Make sure you install PyThaiNLP (https://github.com/PyThaiNLP/pythainlp) with the following steps\"", ")", "\n", "logger", ".", "error", "(", "\"1. pip install pythainlp\"", ")", "\n", "raise", "e", "\n", "", "text", "=", "th_word_tokenize", "(", "text", ")", "\n", "", "elif", "lang", "==", "'zh'", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "'jieba'", "not", "in", "sys", ".", "modules", ":", "\n", "                    ", "import", "jieba", "\n", "", "else", ":", "\n", "                    ", "jieba", "=", "sys", ".", "modules", "[", "'jieba'", "]", "\n", "", "", "except", "(", "AttributeError", ",", "ImportError", ")", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "\"Make sure you install Jieba (https://github.com/fxsjy/jieba) with the following steps\"", ")", "\n", "logger", ".", "error", "(", "\"1. pip install jieba\"", ")", "\n", "raise", "e", "\n", "", "text", "=", "' '", ".", "join", "(", "jieba", ".", "cut", "(", "text", ")", ")", "\n", "text", "=", "self", ".", "moses_pipeline", "(", "text", ",", "lang", "=", "lang", ")", "\n", "text", "=", "text", ".", "split", "(", ")", "\n", "", "elif", "lang", "==", "'ja'", ":", "\n", "            ", "text", "=", "self", ".", "moses_pipeline", "(", "text", ",", "lang", "=", "lang", ")", "\n", "text", "=", "self", ".", "ja_tokenize", "(", "text", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'It should not reach here'", ")", "\n", "\n", "", "if", "self", ".", "do_lowercase_and_remove_accent", "and", "not", "bypass_tokenizer", ":", "\n", "            ", "text", "=", "lowercase_and_remove_accent", "(", "text", ")", "\n", "\n", "", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "text", ":", "\n", "            ", "if", "token", ":", "\n", "                ", "split_tokens", ".", "extend", "(", "[", "t", "for", "t", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer._convert_token_to_id": [[750, 753], ["tokenization_xlm.XLMTokenizer.encoder.get", "tokenization_xlm.XLMTokenizer.encoder.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "encoder", ".", "get", "(", "token", ",", "self", ".", "encoder", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer._convert_id_to_token": [[754, 757], ["tokenization_xlm.XLMTokenizer.decoder.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "get", "(", "index", ",", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.convert_tokens_to_string": [[758, 762], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "''", ".", "join", "(", "tokens", ")", ".", "replace", "(", "'</w>'", ",", "' '", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.build_inputs_with_special_tokens": [[763, 776], ["None"], "methods", ["None"], ["", "def", "build_inputs_with_special_tokens", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build model inputs from a sequence or a pair of sequence for sequence classification tasks\n        by concatenating and adding special tokens.\n        A XLM sequence has the following format:\n            single sequence: <s> X </s>\n            pair of sequences: <s> A </s> B </s>\n        \"\"\"", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "[", "self", ".", "cls_token_id", "]", "+", "token_ids_0", "+", "[", "self", ".", "sep_token_id", "]", "\n", "", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "return", "cls", "+", "token_ids_0", "+", "sep", "+", "token_ids_1", "+", "sep", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.get_special_tokens_mask": [[777, 802], ["list", "ValueError", "map", "len", "len", "len"], "methods", ["None"], ["", "def", "get_special_tokens_mask", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ",", "already_has_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding\n        special tokens using the tokenizer ``prepare_for_model`` or ``encode_plus`` methods.\n\n        Args:\n            token_ids_0: list of ids (must not contain special tokens)\n            token_ids_1: Optional list of ids (must not contain special tokens), necessary when fetching sequence ids\n                for sequence pairs\n            already_has_special_tokens: (default False) Set to True if the token list is already formated with\n                special tokens for the model\n\n        Returns:\n            A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.\n        \"\"\"", "\n", "\n", "if", "already_has_special_tokens", ":", "\n", "            ", "if", "token_ids_1", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"You should not supply a second sequence if the provided sequence of \"", "\n", "\"ids is already formated with special tokens for the model.\"", ")", "\n", "", "return", "list", "(", "map", "(", "lambda", "x", ":", "1", "if", "x", "in", "[", "self", ".", "sep_token_id", ",", "self", ".", "cls_token_id", "]", "else", "0", ",", "token_ids_0", ")", ")", "\n", "\n", "", "if", "token_ids_1", "is", "not", "None", ":", "\n", "            ", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_1", ")", ")", "+", "[", "1", "]", "\n", "", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.create_token_type_ids_from_sequences": [[803, 817], ["len", "len", "len"], "methods", ["None"], ["", "def", "create_token_type_ids_from_sequences", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Creates a mask from the two sequences passed to be used in a sequence-pair classification task.\n        An XLM sequence pair mask has the following format:\n        0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1\n        | first sequence    | second sequence\n\n        if token_ids_1 is None, only returns the first portion of the mask (0's).\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "\n", "", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "+", "len", "(", "token_ids_1", "+", "sep", ")", "*", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.XLMTokenizer.save_vocabulary": [[818, 840], ["os.path.join", "os.path.join", "os.path.isdir", "logger.error", "io.open", "f.write", "io.open", "sorted", "json.dumps", "tokenization_xlm.XLMTokenizer.bpe_ranks.items", "writer.write", "logger.warning"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary and merge files to a directory.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "merge_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "encoder", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "index", "=", "0", "\n", "with", "open", "(", "merge_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "for", "bpe_tokens", ",", "token_index", "in", "sorted", "(", "self", ".", "bpe_ranks", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: BPE merge indices are not consecutive.\"", "\n", "\" Please check that the tokenizer is not corrupted!\"", ".", "format", "(", "merge_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "' '", ".", "join", "(", "bpe_tokens", ")", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "vocab_file", ",", "merge_file", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.get_pairs": [[415, 426], ["set", "set.add"], "function", ["None"], ["def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"\n    Return set of symbol pairs in a word.\n    word is represented as tuple of symbols (symbols being variable-length strings)\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.lowercase_and_remove_accent": [[428, 443], ["unicodedata.normalize.lower", "unicodedata.normalize", "unicodedata.category", "output.append"], "function", ["None"], ["", "def", "lowercase_and_remove_accent", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    Lowercase and strips accents from a piece of text based on\n    https://github.com/facebookresearch/XLM/blob/master/tools/lowercase_and_remove_accent.py\n    \"\"\"", "\n", "text", "=", "' '", ".", "join", "(", "text", ")", "\n", "text", "=", "text", ".", "lower", "(", ")", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "        ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "            ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", ".", "lower", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.replace_unicode_punct": [[445, 486], ["text.replace.replace", "re.sub", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "re.sub", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace"], "function", ["None"], ["", "def", "replace_unicode_punct", "(", "text", ")", ":", "\n", "    ", "'''\n    Port of https://github.com/moses-smt/mosesdecoder/blob/master/scripts/tokenizer/replace-unicode-punctuation.perl\n    '''", "\n", "text", "=", "text", ".", "replace", "(", "'\uff0c'", ",", "','", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\u3002\\s*'", ",", "'. '", ",", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3001'", ",", "','", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u201d'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u201c'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2236'", ",", "':'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff1a'", ",", "':'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff1f'", ",", "'?'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u300a'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u300b'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff09'", ",", "')'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff01'", ",", "'!'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff08'", ",", "'('", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff1b'", ",", "';'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff11'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u300d'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u300c'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff10'", ",", "'0'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff13'", ",", "'3'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff12'", ",", "'2'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff15'", ",", "'5'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff16'", ",", "'6'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff19'", ",", "'9'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff17'", ",", "'7'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff18'", ",", "'8'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff14'", ",", "'4'", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\uff0e\\s*'", ",", "'. '", ",", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff5e'", ",", "'~'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2019'", ",", "'\\''", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2026'", ",", "'...'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2501'", ",", "'-'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3008'", ",", "'<'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3009'", ",", "'>'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3010'", ",", "'['", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3011'", ",", "']'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff05'", ",", "'%'", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.remove_non_printing_char": [[488, 499], ["unicodedata.category", "unicodedata.category.startswith", "output.append"], "function", ["None"], ["", "def", "remove_non_printing_char", "(", "text", ")", ":", "\n", "    ", "'''\n    Port of https://github.com/moses-smt/mosesdecoder/blob/master/scripts/tokenizer/remove-non-printing-char.perl\n    '''", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "        ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "'C'", ")", ":", "\n", "            ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_xlm.romanian_preprocessing": [[501, 513], ["text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace"], "function", ["None"], ["", "def", "romanian_preprocessing", "(", "text", ")", ":", "\n", "    ", "'''Sennrich's WMT16 scripts for Romanian preprocessing, used by model `xlm-mlm-enro-1024`'''", "\n", "# https://github.com/rsennrich/wmt16-scripts/blob/master/preprocess/normalise-romanian.py", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u015e\"", ",", "\"\\u0218\"", ")", ".", "replace", "(", "\"\\u015f\"", ",", "\"\\u0219\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u0162\"", ",", "\"\\u021a\"", ")", ".", "replace", "(", "\"\\u0163\"", ",", "\"\\u021b\"", ")", "\n", "# https://github.com/rsennrich/wmt16-scripts/blob/master/preprocess/remove-diacritics.py", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u0218\"", ",", "\"S\"", ")", ".", "replace", "(", "\"\\u0219\"", ",", "\"s\"", ")", "#s-comma", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u021a\"", ",", "\"T\"", ")", ".", "replace", "(", "\"\\u021b\"", ",", "\"t\"", ")", "#t-comma", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u0102\"", ",", "\"A\"", ")", ".", "replace", "(", "\"\\u0103\"", ",", "\"a\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u00C2\"", ",", "\"A\"", ")", ".", "replace", "(", "\"\\u00E2\"", ",", "\"a\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u00CE\"", ",", "\"I\"", ")", ".", "replace", "(", "\"\\u00EE\"", ",", "\"i\"", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5LayerNorm.__init__": [[140, 147], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "\"\"\" Construct a layernorm module in the T5 style\n            No bias and no substraction of mean.\n        \"\"\"", "\n", "super", "(", "T5LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_size", ")", ")", "\n", "self", ".", "variance_epsilon", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5LayerNorm.forward": [[148, 152], ["x.pow().mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "x.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "variance", "=", "x", ".", "pow", "(", "2", ")", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "x", "/", "torch", ".", "sqrt", "(", "variance", "+", "self", ".", "variance_epsilon", ")", "\n", "return", "self", ".", "weight", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5DenseReluDense.__init__": [[155, 160], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "T5DenseReluDense", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "wi", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "d_ff", ",", "bias", "=", "False", ")", "\n", "self", ".", "wo", "=", "nn", ".", "Linear", "(", "config", ".", "d_ff", ",", "config", ".", "d_model", ",", "bias", "=", "False", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5DenseReluDense.forward": [[161, 167], ["modeling_t5.T5DenseReluDense.wi", "torch.relu", "torch.relu", "modeling_t5.T5DenseReluDense.dropout", "modeling_t5.T5DenseReluDense.wo"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "h", "=", "self", ".", "wi", "(", "hidden_states", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "dropout", "(", "h", ")", "\n", "h", "=", "self", ".", "wo", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5LayerFF.__init__": [[170, 175], ["torch.nn.Module.__init__", "modeling_t5.T5DenseReluDense", "modeling_t5.T5LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "T5LayerFF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "DenseReluDense", "=", "T5DenseReluDense", "(", "config", ")", "\n", "self", ".", "layer_norm", "=", "T5LayerNorm", "(", "config", ".", "d_model", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5LayerFF.forward": [[176, 181], ["modeling_t5.T5LayerFF.layer_norm", "modeling_t5.T5LayerFF.DenseReluDense", "modeling_t5.T5LayerFF.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "norm_x", "=", "self", ".", "layer_norm", "(", "hidden_states", ")", "\n", "y", "=", "self", ".", "DenseReluDense", "(", "norm_x", ")", "\n", "layer_output", "=", "hidden_states", "+", "self", ".", "dropout", "(", "y", ")", "\n", "return", "layer_output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Attention.__init__": [[186, 209], ["torch.nn.Module.__init__", "next", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "set", "torch.nn.Embedding", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "has_relative_attention_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "T5Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_id", "=", "next", "(", "T5Attention", ".", "NEW_ID", ")", "\n", "self", ".", "is_decoder", "=", "config", ".", "is_decoder", "\n", "self", ".", "has_relative_attention_bias", "=", "has_relative_attention_bias", "\n", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "relative_attention_num_buckets", "=", "config", ".", "relative_attention_num_buckets", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "d_kv", "=", "config", ".", "d_kv", "\n", "self", ".", "n_heads", "=", "config", ".", "num_heads", "\n", "self", ".", "dropout", "=", "config", ".", "dropout_rate", "\n", "self", ".", "inner_dim", "=", "self", ".", "n_heads", "*", "self", ".", "d_kv", "\n", "\n", "# Mesh TensorFlow initialization to avoid scaling before softmax", "\n", "self", ".", "q", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "inner_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "k", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "inner_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "inner_dim", ",", "bias", "=", "False", ")", "\n", "self", ".", "o", "=", "nn", ".", "Linear", "(", "self", ".", "inner_dim", ",", "self", ".", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "if", "self", ".", "has_relative_attention_bias", ":", "\n", "            ", "self", ".", "relative_attention_bias", "=", "nn", ".", "Embedding", "(", "self", ".", "relative_attention_num_buckets", ",", "self", ".", "n_heads", ")", "\n", "", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Attention.prune_heads": [[210, 229], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_t5.T5Attention.pruned_heads.union", "len", "set", "sum", "len", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_heads", ",", "self", ".", "d_kv", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "\n", "for", "head", "in", "heads", ":", "\n", "            ", "head", "-=", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "# Prune linear layers", "\n", "self", ".", "q", "=", "prune_linear_layer", "(", "self", ".", "q", ",", "index", ")", "\n", "self", ".", "k", "=", "prune_linear_layer", "(", "self", ".", "k", ",", "index", ")", "\n", "self", ".", "v", "=", "prune_linear_layer", "(", "self", ".", "v", ",", "index", ")", "\n", "self", ".", "o", "=", "prune_linear_layer", "(", "self", ".", "o", ",", "index", ",", "dim", "=", "1", ")", "\n", "# Update hyper params", "\n", "self", ".", "n_heads", "=", "self", ".", "n_heads", "-", "len", "(", "heads", ")", "\n", "self", ".", "inner_dim", "=", "self", ".", "d_kv", "*", "self", ".", "n_heads", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Attention._relative_position_bucket": [[230, 280], ["torch.min", "torch.min", "torch.min", "torch.min", "torch.where", "torch.where", "torch.where", "torch.where", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.max", "torch.max", "torch.max", "torch.max", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.log", "torch.log", "torch.log", "torch.log", "math.log", "torch.max.float", "torch.max.float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_relative_position_bucket", "(", "relative_position", ",", "\n", "bidirectional", "=", "True", ",", "\n", "num_buckets", "=", "32", ",", "\n", "max_distance", "=", "128", ")", ":", "\n", "        ", "\"\"\"\n        Adapted from Mesh Tensorflow:\n        https://github.com/tensorflow/mesh/blob/0cb87fe07da627bf0b7e60475d59f95ed6b5be3d/mesh_tensorflow/transformer/transformer_layers.py#L593\n\n        Translate relative position to a bucket number for relative attention.\n        The relative position is defined as memory_position - query_position, i.e.\n        the distance in tokens from the attending position to the attended-to\n        position.  If bidirectional=False, then positive relative positions are\n        invalid.\n        We use smaller buckets for small absolute relative_position and larger buckets\n        for larger absolute relative_positions.  All relative positions >=max_distance\n        map to the same bucket.  All relative positions <=-max_distance map to the\n        same bucket.  This should allow for more graceful generalization to longer\n        sequences than the model has been trained on.\n        Args:\n            relative_position: an int32 Tensor\n            bidirectional: a boolean - whether the attention is bidirectional\n            num_buckets: an integer\n            max_distance: an integer\n        Returns:\n            a Tensor with the same shape as relative_position, containing int32\n            values in the range [0, num_buckets)\n        \"\"\"", "\n", "ret", "=", "0", "\n", "n", "=", "-", "relative_position", "\n", "if", "bidirectional", ":", "\n", "            ", "num_buckets", "//=", "2", "\n", "ret", "+=", "(", "n", "<", "0", ")", ".", "to", "(", "torch", ".", "long", ")", "*", "num_buckets", "# mtf.to_int32(mtf.less(n, 0)) * num_buckets", "\n", "n", "=", "torch", ".", "abs", "(", "n", ")", "\n", "", "else", ":", "\n", "            ", "n", "=", "torch", ".", "max", "(", "n", ",", "torch", ".", "zeros_like", "(", "n", ")", ")", "\n", "# now n is in the range [0, inf)", "\n", "\n", "# half of the buckets are for exact increments in positions", "\n", "", "max_exact", "=", "num_buckets", "//", "2", "\n", "is_small", "=", "(", "n", "<", "max_exact", ")", "\n", "\n", "# The other half of the buckets are for logarithmically bigger bins in positions up to max_distance", "\n", "val_if_large", "=", "max_exact", "+", "(", "\n", "torch", ".", "log", "(", "n", ".", "float", "(", ")", "/", "max_exact", ")", "\n", "/", "math", ".", "log", "(", "max_distance", "/", "max_exact", ")", "*", "(", "num_buckets", "-", "max_exact", ")", ")", ".", "to", "(", "torch", ".", "long", ")", "\n", "val_if_large", "=", "torch", ".", "min", "(", "val_if_large", ",", "torch", ".", "full_like", "(", "val_if_large", ",", "num_buckets", "-", "1", ")", ")", "\n", "\n", "ret", "+=", "torch", ".", "where", "(", "is_small", ",", "n", ",", "val_if_large", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Attention.compute_bias": [[281, 292], ["modeling_t5.T5Attention._relative_position_bucket", "modeling_t5.T5Attention.relative_attention_bias", "values.permute().unsqueeze.permute().unsqueeze.permute().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "values.permute().unsqueeze.permute().unsqueeze.permute"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Attention._relative_position_bucket"], ["", "def", "compute_bias", "(", "self", ",", "qlen", ",", "klen", ")", ":", "\n", "        ", "\"\"\" Compute binned relative position bias \"\"\"", "\n", "context_position", "=", "torch", ".", "arange", "(", "qlen", ",", "dtype", "=", "torch", ".", "long", ")", "[", ":", ",", "None", "]", "\n", "memory_position", "=", "torch", ".", "arange", "(", "klen", ",", "dtype", "=", "torch", ".", "long", ")", "[", "None", ",", ":", "]", "\n", "relative_position", "=", "memory_position", "-", "context_position", "# shape (qlen, klen)", "\n", "rp_bucket", "=", "self", ".", "_relative_position_bucket", "(", "relative_position", ",", "# shape (qlen, klen)", "\n", "bidirectional", "=", "not", "self", ".", "is_decoder", ",", "\n", "num_buckets", "=", "self", ".", "relative_attention_num_buckets", ")", "\n", "values", "=", "self", ".", "relative_attention_bias", "(", "rp_bucket", ")", "# shape (qlen, klen, num_heads)", "\n", "values", "=", "values", ".", "permute", "(", "[", "2", ",", "0", ",", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", "# shape (1, num_heads, qlen, klen)", "\n", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Attention.forward": [[293, 361], ["input.size", "modeling_t5.T5Attention.forward.shape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", "=", "None", ",", "kv", "=", "None", ",", "position_bias", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Self-attention (if kv is None) or attention over source sentence (provided by kv).\n        \"\"\"", "\n", "# Input is (bs, qlen, dim)", "\n", "# Mask is (bs, klen) (non-causal) or (bs, klen, klen)", "\n", "bs", ",", "qlen", ",", "dim", "=", "input", ".", "size", "(", ")", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "klen", "=", "qlen", "if", "cache", "is", "None", "else", "cache", "[", "'slen'", "]", "+", "qlen", "\n", "", "else", ":", "\n", "            ", "klen", "=", "kv", ".", "size", "(", "1", ")", "\n", "\n", "", "def", "shape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  projection \"\"\"", "\n", "return", "x", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", ",", "self", ".", "d_kv", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "", "def", "unshape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  compute context \"\"\"", "\n", "return", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "inner_dim", ")", "\n", "\n", "", "q", "=", "shape", "(", "self", ".", "q", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "k", "=", "shape", "(", "self", ".", "k", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "", "elif", "cache", "is", "None", "or", "self", ".", "layer_id", "not", "in", "cache", ":", "\n", "            ", "k", "=", "v", "=", "kv", "\n", "k", "=", "shape", "(", "self", ".", "k", "(", "k", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v", "(", "v", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "layer_id", "in", "cache", ":", "\n", "                ", "if", "kv", "is", "None", ":", "\n", "                    ", "k_", ",", "v_", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k_", ",", "k", "]", ",", "dim", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v_", ",", "v", "]", ",", "dim", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "", "else", ":", "\n", "                    ", "k", ",", "v", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "", "", "cache", "[", "self", ".", "layer_id", "]", "=", "(", "k", ",", "v", ")", "\n", "\n", "# q = q / math.sqrt(dim_per_head)                                     # No scaling in T5", "\n", "", "scores", "=", "torch", ".", "einsum", "(", "'bnqd,bnkd->bnqk'", ",", "q", ",", "k", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "if", "position_bias", "is", "None", ":", "\n", "            ", "if", "not", "self", ".", "has_relative_attention_bias", ":", "\n", "                ", "raise", "ValueError", "(", "\"No position_bias provided and no weights to compute position_bias\"", ")", "\n", "", "position_bias", "=", "self", ".", "compute_bias", "(", "qlen", ",", "klen", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "                ", "position_bias", "=", "position_bias", "+", "mask", "# (bs, n_heads, qlen, klen)", "\n", "\n", "", "", "scores", "+=", "position_bias", "\n", "weights", "=", "F", ".", "softmax", "(", "scores", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "type_as", "(", "scores", ")", "# (bs, n_heads, qlen, klen)", "\n", "weights", "=", "F", ".", "dropout", "(", "weights", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "weights", "=", "weights", "*", "head_mask", "\n", "\n", "", "context", "=", "torch", ".", "matmul", "(", "weights", ",", "v", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "context", "=", "unshape", "(", "context", ")", "# (bs, qlen, dim)", "\n", "\n", "context", "=", "self", ".", "o", "(", "context", ")", "\n", "\n", "outputs", "=", "(", "context", ",", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "weights", ",", ")", "\n", "", "if", "self", ".", "has_relative_attention_bias", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "position_bias", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5LayerSelfAttention.__init__": [[364, 369], ["torch.nn.Module.__init__", "modeling_t5.T5Attention", "modeling_t5.T5LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "has_relative_attention_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "T5LayerSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "SelfAttention", "=", "T5Attention", "(", "config", ",", "has_relative_attention_bias", "=", "has_relative_attention_bias", ")", "\n", "self", ".", "layer_norm", "=", "T5LayerNorm", "(", "config", ".", "d_model", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5LayerSelfAttention.forward": [[370, 380], ["modeling_t5.T5LayerSelfAttention.layer_norm", "modeling_t5.T5LayerSelfAttention.SelfAttention", "modeling_t5.T5LayerSelfAttention.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "position_bias", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "norm_x", "=", "self", ".", "layer_norm", "(", "hidden_states", ")", "\n", "attention_output", "=", "self", ".", "SelfAttention", "(", "norm_x", ",", "\n", "mask", "=", "attention_mask", ",", "\n", "position_bias", "=", "position_bias", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "y", "=", "attention_output", "[", "0", "]", "\n", "layer_output", "=", "hidden_states", "+", "self", ".", "dropout", "(", "y", ")", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "attention_output", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5LayerCrossAttention.__init__": [[383, 388], ["torch.nn.Module.__init__", "modeling_t5.T5Attention", "modeling_t5.T5LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "has_relative_attention_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "T5LayerCrossAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "EncDecAttention", "=", "T5Attention", "(", "config", ",", "has_relative_attention_bias", "=", "has_relative_attention_bias", ")", "\n", "self", ".", "layer_norm", "=", "T5LayerNorm", "(", "config", ".", "d_model", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5LayerCrossAttention.forward": [[389, 400], ["modeling_t5.T5LayerCrossAttention.layer_norm", "modeling_t5.T5LayerCrossAttention.EncDecAttention", "modeling_t5.T5LayerCrossAttention.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "kv", ",", "attention_mask", "=", "None", ",", "position_bias", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "norm_x", "=", "self", ".", "layer_norm", "(", "hidden_states", ")", "\n", "attention_output", "=", "self", ".", "EncDecAttention", "(", "norm_x", ",", "\n", "mask", "=", "attention_mask", ",", "\n", "kv", "=", "kv", ",", "\n", "position_bias", "=", "position_bias", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "y", "=", "attention_output", "[", "0", "]", "\n", "layer_output", "=", "hidden_states", "+", "self", ".", "dropout", "(", "y", ")", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "attention_output", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Block.__init__": [[403, 413], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "modeling_t5.T5Block.layer.append", "modeling_t5.T5LayerSelfAttention", "modeling_t5.T5Block.layer.append", "modeling_t5.T5Block.layer.append", "modeling_t5.T5Block.layer.append", "modeling_t5.T5LayerCrossAttention", "modeling_t5.T5LayerFF", "modeling_t5.T5LayerFF"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "has_relative_attention_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "T5Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_decoder", "=", "config", ".", "is_decoder", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "layer", ".", "append", "(", "T5LayerSelfAttention", "(", "config", ",", "has_relative_attention_bias", "=", "has_relative_attention_bias", ")", ")", "\n", "if", "self", ".", "is_decoder", ":", "\n", "            ", "self", ".", "layer", ".", "append", "(", "T5LayerCrossAttention", "(", "config", ",", "has_relative_attention_bias", "=", "has_relative_attention_bias", ")", ")", "\n", "self", ".", "layer", ".", "append", "(", "T5LayerFF", "(", "config", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer", ".", "append", "(", "T5LayerFF", "(", "config", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Block.forward": [[414, 438], ["None"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "position_bias", "=", "None", ",", "\n", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ",", "encoder_decoder_position_bias", "=", "None", ",", "\n", "head_mask", "=", "None", ")", ":", "\n", "        ", "self_attention_outputs", "=", "self", ".", "layer", "[", "0", "]", "(", "hidden_states", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "position_bias", "=", "position_bias", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "hidden_states", "=", "self_attention_outputs", "[", "0", "]", "\n", "outputs", "=", "self_attention_outputs", "[", "1", ":", "]", "# Keep self-attention outputs and relative position weights", "\n", "\n", "if", "not", "self", ".", "is_decoder", ":", "\n", "            ", "hidden_states", "=", "self", ".", "layer", "[", "1", "]", "(", "hidden_states", ")", "\n", "", "else", ":", "\n", "            ", "cross_attention_outputs", "=", "self", ".", "layer", "[", "1", "]", "(", "hidden_states", ",", "\n", "kv", "=", "encoder_hidden_states", ",", "\n", "attention_mask", "=", "encoder_attention_mask", ",", "\n", "position_bias", "=", "encoder_decoder_position_bias", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "hidden_states", "=", "cross_attention_outputs", "[", "0", "]", "\n", "outputs", "=", "outputs", "+", "cross_attention_outputs", "[", "1", ":", "]", "# Keep cross-attention outputs and relative position weights", "\n", "hidden_states", "=", "self", ".", "layer", "[", "2", "]", "(", "hidden_states", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "+", "outputs", "# add attentions if we output them", "\n", "return", "outputs", "# hidden-states, (self-attention weights), (self-attention position bias), (cross-attention weights), (cross-attention position bias)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5PreTrainedModel.dummy_inputs": [[449, 457], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["@", "property", "\n", "def", "dummy_inputs", "(", "self", ")", ":", "\n", "        ", "input_ids", "=", "torch", ".", "tensor", "(", "DUMMY_INPUTS", ")", "\n", "input_mask", "=", "torch", ".", "tensor", "(", "DUMMY_MASK", ")", "\n", "dummy_inputs", "=", "{", "'decoder_input_ids'", ":", "input_ids", ",", "\n", "'encoder_input_ids'", ":", "input_ids", ",", "\n", "'decoder_attention_mask'", ":", "input_mask", "}", "\n", "return", "dummy_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5PreTrainedModel._init_weights": [[458, 489], ["isinstance", "module.weight.data.fill_", "isinstance", "module.shared.weight.data.normal_", "isinstance", "module.wi.weight.data.normal_", "module.wo.weight.data.normal_", "isinstance", "hasattr", "module.wi.bias.data.zero_", "hasattr", "module.wo.bias.data.zero_", "module.q.weight.data.normal_", "module.k.weight.data.normal_", "module.v.weight.data.normal_", "module.o.weight.data.normal_", "module.relative_attention_bias.weight.data.normal_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights \"\"\"", "\n", "factor", "=", "self", ".", "config", ".", "initializer_factor", "# Used for testing weights initialization", "\n", "if", "isinstance", "(", "module", ",", "T5LayerNorm", ")", ":", "\n", "            ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "factor", "*", "1.0", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "(", "T5Model", ",", "T5WithLMHeadModel", ")", ")", ":", "\n", "# Mesh TensorFlow embeddings initialization", "\n", "# See https://github.com/tensorflow/mesh/blob/fa19d69eafc9a482aff0b59ddd96b025c0cb207d/mesh_tensorflow/layers.py#L1624", "\n", "            ", "module", ".", "shared", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "factor", "*", "1.0", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "T5DenseReluDense", ")", ":", "\n", "# Mesh TensorFlow FF initialization", "\n", "# See https://github.com/tensorflow/mesh/blob/master/mesh_tensorflow/transformer/transformer_layers.py#L56", "\n", "# and https://github.com/tensorflow/mesh/blob/fa19d69eafc9a482aff0b59ddd96b025c0cb207d/mesh_tensorflow/layers.py#L89", "\n", "            ", "module", ".", "wi", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "factor", "*", "(", "(", "self", ".", "config", ".", "d_model", ")", "**", "-", "0.5", ")", ")", "\n", "if", "hasattr", "(", "module", ".", "wi", ",", "'bias'", ")", "and", "module", ".", "wi", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "wi", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "module", ".", "wo", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "factor", "*", "(", "(", "self", ".", "config", ".", "d_ff", ")", "**", "-", "0.5", ")", ")", "\n", "if", "hasattr", "(", "module", ".", "wo", ",", "'bias'", ")", "and", "module", ".", "wo", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "wo", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "T5Attention", ")", ":", "\n", "# Mesh TensorFlow attention initialization to avoid scaling before softmax", "\n", "# See https://github.com/tensorflow/mesh/blob/fa19d69eafc9a482aff0b59ddd96b025c0cb207d/mesh_tensorflow/transformer/attention.py#L136", "\n", "            ", "d_model", "=", "self", ".", "config", ".", "d_model", "\n", "d_kv", "=", "self", ".", "config", ".", "d_kv", "\n", "n_heads", "=", "self", ".", "config", ".", "num_heads", "\n", "module", ".", "q", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "factor", "*", "(", "(", "d_model", "*", "d_kv", ")", "**", "-", "0.5", ")", ")", "\n", "module", ".", "k", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "factor", "*", "(", "d_model", "**", "-", "0.5", ")", ")", "\n", "module", ".", "v", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "factor", "*", "(", "d_model", "**", "-", "0.5", ")", ")", "\n", "module", ".", "o", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "factor", "*", "(", "(", "n_heads", "*", "d_kv", ")", "**", "-", "0.5", ")", ")", "\n", "if", "module", ".", "has_relative_attention_bias", ":", "\n", "                ", "module", ".", "relative_attention_bias", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "factor", "*", "(", "(", "d_model", ")", "**", "-", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Stack.__init__": [[492, 504], ["modeling_utils.PreTrainedModel.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "modeling_t5.T5LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "modeling_t5.T5Stack.init_weights", "modeling_t5.T5Block", "range", "bool"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "T5Stack", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "is_decoder", "=", "config", ".", "is_decoder", "\n", "\n", "self", ".", "block", "=", "nn", ".", "ModuleList", "(", "[", "T5Block", "(", "config", ",", "has_relative_attention_bias", "=", "bool", "(", "i", "==", "0", ")", ")", "\n", "for", "i", "in", "range", "(", "config", ".", "num_layers", ")", "]", ")", "\n", "self", ".", "final_layer_norm", "=", "T5LayerNorm", "(", "config", ".", "d_model", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout_rate", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Stack.forward": [[505, 623], ["extended_attention_mask.to.to.to", "modeling_t5.T5Stack.dropout", "enumerate", "modeling_t5.T5Stack.final_layer_norm", "modeling_t5.T5Stack.dropout", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to.dim", "torch.ones().to.dim", "encoder_extended_attention_mask.to.to.to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "layer_module", "torch.ones().to.dim", "torch.ones().to.dim", "torch.ones().to.dim", "torch.ones().to.dim", "torch.ones().to.dim", "torch.ones().to.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "causal_mask.to.to.to", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "seq_ids[].repeat", "modeling_t5.T5Stack.parameters", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "modeling_t5.T5Stack.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_t5.T5Stack.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "hidden_states", ",", "\n", "attention_mask", "=", "None", ",", "\n", "encoder_hidden_states", "=", "None", ",", "\n", "encoder_attention_mask", "=", "None", ",", "\n", "head_mask", "=", "None", ")", ":", "\n", "\n", "        ", "batch_size", ",", "seq_length", "=", "hidden_states", ".", "shape", "[", "0", "]", ",", "hidden_states", ".", "shape", "[", "1", "]", "\n", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones", "(", "batch_size", ",", "seq_length", ")", ".", "to", "(", "hidden_states", ".", "device", ")", "\n", "", "if", "self", ".", "is_decoder", "and", "encoder_attention_mask", "is", "None", ":", "\n", "            ", "encoder_seq_length", "=", "encoder_hidden_states", ".", "shape", "[", "1", "]", "\n", "encoder_attention_mask", "=", "torch", ".", "ones", "(", "batch_size", ",", "encoder_seq_length", ")", ".", "to", "(", "hidden_states", ".", "device", ")", "\n", "\n", "# We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]", "\n", "# ourselves in which case we just need to make it broadcastable to all heads.", "\n", "", "if", "attention_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "extended_attention_mask", "=", "attention_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "", "elif", "attention_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "# Provided a padding mask of dimensions [batch_size, seq_length]", "\n", "# - if the model is a decoder, apply a causal mask in addition to the padding mask", "\n", "# - if the model is an encoder, make the mask broadcastable to [batch_size, num_heads, seq_length, seq_length]", "\n", "            ", "if", "self", ".", "config", ".", "is_decoder", ":", "\n", "                ", "seq_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "device", "=", "hidden_states", ".", "device", ")", "\n", "causal_mask", "=", "seq_ids", "[", "None", ",", "None", ",", ":", "]", ".", "repeat", "(", "batch_size", ",", "seq_length", ",", "1", ")", "<=", "seq_ids", "[", "None", ",", ":", ",", "None", "]", "\n", "causal_mask", "=", "causal_mask", ".", "to", "(", "attention_mask", ")", "\n", "extended_attention_mask", "=", "causal_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "*", "attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "extended_attention_mask", "=", "attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -1e9 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "\n", "# T5 has a mask that can compare sequence ids, we can simulate this here with this transposition", "\n", "# Cf. https://github.com/tensorflow/mesh/blob/8d2465e9bc93129b913b5ccc6a59aa97abd96ec6/mesh_tensorflow/transformer/transformer_layers.py#L270", "\n", "# extended_attention_mask = (extended_attention_mask == extended_attention_mask.transpose(-1, -2))", "\n", "\n", "", "", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "1e9", "\n", "\n", "if", "self", ".", "is_decoder", ":", "\n", "# If a 2D ou 3D attention mask is provided for the cross-attention", "\n", "# we need to make broadcastabe to [batch_size, num_heads, seq_length, seq_length]", "\n", "            ", "if", "encoder_attention_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "encoder_extended_attention_mask", "=", "encoder_attention_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "", "if", "encoder_attention_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "encoder_extended_attention_mask", "=", "encoder_attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "\n", "# T5 has a mask that can compare sequence ids, we can simulate this here with this transposition", "\n", "# Cf. https://github.com/tensorflow/mesh/blob/8d2465e9bc93129b913b5ccc6a59aa97abd96ec6/mesh_tensorflow/transformer/transformer_layers.py#L270", "\n", "# encoder_extended_attention_mask = (encoder_extended_attention_mask == encoder_extended_attention_mask.transpose(-1, -2))", "\n", "\n", "", "encoder_extended_attention_mask", "=", "encoder_extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "encoder_extended_attention_mask", "=", "(", "1.0", "-", "encoder_extended_attention_mask", ")", "*", "-", "1e9", "\n", "", "else", ":", "\n", "            ", "encoder_extended_attention_mask", "=", "None", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "num_layers", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "num_layers", "\n", "\n", "", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "position_bias", "=", "None", "\n", "encoder_decoder_position_bias", "=", "None", "\n", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "block", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "layer_outputs", "=", "layer_module", "(", "hidden_states", ",", "\n", "attention_mask", "=", "extended_attention_mask", ",", "\n", "position_bias", "=", "position_bias", ",", "\n", "encoder_hidden_states", "=", "encoder_hidden_states", ",", "\n", "encoder_attention_mask", "=", "encoder_extended_attention_mask", ",", "\n", "encoder_decoder_position_bias", "=", "encoder_decoder_position_bias", ",", "\n", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "# layer_outputs is a tuple with:", "\n", "# hidden-states, (self-attention weights), (self-attention position bias), (cross-attention weights), (cross-attention position bias)", "\n", "hidden_states", "=", "layer_outputs", "[", "0", "]", "\n", "if", "i", "==", "0", ":", "\n", "# We share the position biases between the layers - the first layer store them", "\n", "# layer_outputs = hidden-states, (self-attention weights), (self-attention position bias), (cross-attention weights), (cross-attention position bias)", "\n", "                ", "position_bias", "=", "layer_outputs", "[", "2", "if", "self", ".", "output_attentions", "else", "1", "]", "\n", "if", "self", ".", "is_decoder", ":", "\n", "                    ", "encoder_decoder_position_bias", "=", "layer_outputs", "[", "4", "if", "self", ".", "output_attentions", "else", "2", "]", "\n", "\n", "", "", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "layer_outputs", "[", "1", "]", ",", ")", "# We keep only self-attention weights for now", "\n", "\n", "", "", "hidden_states", "=", "self", ".", "final_layer_norm", "(", "hidden_states", ")", "\n", "layer_output", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "\n", "# Add last layer", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Model.__init__": [[700, 712], ["modeling_utils.PreTrainedModel.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "copy.deepcopy", "modeling_t5.T5Stack", "copy.deepcopy", "modeling_t5.T5Stack", "modeling_t5.T5Model.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "T5Model", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "shared", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "d_model", ")", "\n", "\n", "encoder_config", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "self", ".", "encoder", "=", "T5Stack", "(", "encoder_config", ")", "\n", "\n", "decoder_config", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "decoder_config", ".", "is_decoder", "=", "True", "\n", "self", ".", "decoder", "=", "T5Stack", "(", "decoder_config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Model.get_input_embeddings": [[713, 715], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shared", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Model.set_input_embeddings": [[716, 718], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "shared", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Model._prune_heads": [[719, 726], ["heads_to_prune.items", "modeling_t5.T5Model.encoder.layer[].attention.prune_heads"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "encoder", ".", "layer", "[", "layer", "]", ".", "attention", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5Model.forward": [[727, 771], ["dict", "dict.copy", "dict.copy", "dict.copy.update", "dict.copy.update", "dict.copy.pop", "dict.copy.get", "dict.copy.pop", "modeling_t5.T5Model.decoder", "dict", "dict", "dict.copy.pop", "modeling_t5.T5Model.encoder", "dict.copy.pop", "modeling_t5.T5Model.shared", "dict.copy.pop", "modeling_t5.T5Model.shared", "kwargs.items", "kwargs_common.copy.get.unsqueeze", "kwargs.items", "k.startswith", "kwargs.items", "k.startswith", "k.startswith", "k.startswith", "len", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# keyword arguments come in 3 flavors: encoder-specific (prefixed by", "\n", "# `encoder_`), decoder-specific (prefixed by `decoder_`) and those", "\n", "# that apply to the model as whole.", "\n", "# We let the specific kwargs override the common ones in case of conflict.", "\n", "        ", "kwargs_common", "=", "dict", "(", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "not", "k", ".", "startswith", "(", "\"encoder_\"", ")", "and", "not", "k", ".", "startswith", "(", "\"decoder_\"", ")", ")", "\n", "kwargs_encoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_decoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_encoder", ".", "update", "(", "dict", "(", "(", "k", "[", "len", "(", "\"encoder_\"", ")", ":", "]", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "\"encoder_\"", ")", ")", ")", "\n", "kwargs_decoder", ".", "update", "(", "dict", "(", "(", "k", "[", "len", "(", "\"decoder_\"", ")", ":", "]", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "\"decoder_\"", ")", ")", ")", "\n", "\n", "# Encode if needed (training, first prediction pass)", "\n", "encoder_hidden_states", "=", "kwargs_encoder", ".", "pop", "(", "\"hidden_states\"", ",", "None", ")", "\n", "encoder_attention_mask", "=", "kwargs_encoder", ".", "get", "(", "\"attention_mask\"", ",", "None", ")", "\n", "if", "encoder_hidden_states", "is", "None", ":", "\n", "# Convert encoder inputs in embeddings if needed", "\n", "            ", "hidden_states", "=", "kwargs_encoder", ".", "pop", "(", "\"inputs_embeds\"", ",", "None", ")", "\n", "if", "hidden_states", "is", "None", ":", "\n", "                ", "encoder_inputs_ids", "=", "kwargs_encoder", ".", "pop", "(", "\"input_ids\"", ")", "\n", "hidden_states", "=", "self", ".", "shared", "(", "encoder_inputs_ids", ")", "# Convert inputs in embeddings", "\n", "\n", "", "if", "encoder_attention_mask", "is", "not", "None", ":", "\n", "# Apply masking", "\n", "                ", "encoder_attention_mask", "=", "(", "encoder_attention_mask", "!=", "0", ")", ".", "to", "(", "hidden_states", ")", "\n", "hidden_states", "=", "hidden_states", "*", "encoder_attention_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "encoder_outputs", "=", "self", ".", "encoder", "(", "hidden_states", ",", "**", "kwargs_encoder", ")", "\n", "encoder_hidden_states", "=", "encoder_outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "encoder_outputs", "=", "(", ")", "\n", "\n", "# Decode", "\n", "# Convert decoder inputs in embeddings if needed", "\n", "", "hidden_states", "=", "kwargs_decoder", ".", "pop", "(", "\"inputs_embeds\"", ",", "None", ")", "\n", "if", "hidden_states", "is", "None", ":", "\n", "            ", "decoder_inputs_ids", "=", "kwargs_decoder", ".", "pop", "(", "\"input_ids\"", ")", "\n", "hidden_states", "=", "self", ".", "shared", "(", "decoder_inputs_ids", ")", "\n", "\n", "", "kwargs_decoder", "[", "\"encoder_hidden_states\"", "]", "=", "encoder_hidden_states", "\n", "kwargs_decoder", "[", "\"encoder_attention_mask\"", "]", "=", "encoder_attention_mask", "\n", "decoder_outputs", "=", "self", ".", "decoder", "(", "hidden_states", ",", "**", "kwargs_decoder", ")", "\n", "\n", "return", "decoder_outputs", "+", "encoder_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5WithLMHeadModel.__init__": [[805, 821], ["modeling_utils.PreTrainedModel.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "copy.deepcopy", "modeling_t5.T5Stack", "copy.deepcopy", "modeling_t5.T5Stack", "torch.nn.Linear", "torch.nn.Linear", "modeling_t5.T5WithLMHeadModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "T5WithLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "model_dim", "=", "config", ".", "d_model", "\n", "\n", "self", ".", "shared", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "d_model", ")", "\n", "\n", "encoder_config", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "self", ".", "encoder", "=", "T5Stack", "(", "encoder_config", ")", "\n", "\n", "decoder_config", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "decoder_config", ".", "is_decoder", "=", "True", "\n", "self", ".", "decoder", "=", "T5Stack", "(", "decoder_config", ")", "\n", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5WithLMHeadModel.get_input_embeddings": [[822, 824], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shared", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5WithLMHeadModel.set_input_embeddings": [[825, 827], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "shared", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5WithLMHeadModel.get_output_embeddings": [[828, 830], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.T5WithLMHeadModel.forward": [[831, 887], ["kwargs.pop", "dict", "dict.copy", "dict.copy", "dict.copy.update", "dict.copy.update", "dict.copy.pop", "dict.copy.pop", "dict.copy.get", "modeling_t5.T5WithLMHeadModel.decoder", "modeling_t5.T5WithLMHeadModel.lm_head", "dict", "dict", "dict.copy.pop", "modeling_t5.T5WithLMHeadModel.encoder", "dict.copy.pop", "modeling_t5.T5WithLMHeadModel.shared", "lm_logits[].contiguous", "lm_labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "dict.copy.pop", "modeling_t5.T5WithLMHeadModel.shared", "lm_logits[].contiguous.view", "lm_labels[].contiguous.view", "kwargs.items", "lm_logits[].contiguous.size", "kwargs.items", "k.startswith", "kwargs.items", "k.startswith", "k.startswith", "k.startswith", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# keyword arguments come in 3 flavors: encoder-specific (prefixed by", "\n", "# `encoder_`), decoder-specific (prefixed by `decoder_`) and those", "\n", "# that apply to the model as whole.", "\n", "# We let the specific kwargs override the common ones in case of conflict.", "\n", "\n", "        ", "lm_labels", "=", "kwargs", ".", "pop", "(", "'decoder_lm_labels'", ",", "None", ")", "\n", "\n", "kwargs_common", "=", "dict", "(", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "\n", "if", "not", "k", ".", "startswith", "(", "\"encoder_\"", ")", "and", "not", "k", ".", "startswith", "(", "\"decoder_\"", ")", ")", "\n", "kwargs_encoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_decoder", "=", "kwargs_common", ".", "copy", "(", ")", "\n", "kwargs_encoder", ".", "update", "(", "dict", "(", "(", "k", "[", "len", "(", "\"encoder_\"", ")", ":", "]", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "\"encoder_\"", ")", ")", ")", "\n", "kwargs_decoder", ".", "update", "(", "dict", "(", "(", "k", "[", "len", "(", "\"decoder_\"", ")", ":", "]", ",", "v", ")", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", "if", "k", ".", "startswith", "(", "\"decoder_\"", ")", ")", ")", "\n", "\n", "# Encode if needed (training, first prediction pass)", "\n", "encoder_hidden_states", "=", "kwargs_encoder", ".", "pop", "(", "\"hidden_states\"", ",", "None", ")", "\n", "if", "encoder_hidden_states", "is", "None", ":", "\n", "# Convert encoder inputs in embeddings if needed", "\n", "            ", "hidden_states", "=", "kwargs_encoder", ".", "pop", "(", "\"inputs_embeds\"", ",", "None", ")", "\n", "if", "hidden_states", "is", "None", ":", "\n", "                ", "encoder_inputs_ids", "=", "kwargs_encoder", ".", "pop", "(", "\"input_ids\"", ")", "\n", "hidden_states", "=", "self", ".", "shared", "(", "encoder_inputs_ids", ")", "# Convert inputs in embeddings", "\n", "\n", "", "encoder_outputs", "=", "self", ".", "encoder", "(", "hidden_states", ",", "**", "kwargs_encoder", ")", "\n", "encoder_hidden_states", "=", "encoder_outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "encoder_outputs", "=", "(", ")", "\n", "\n", "# Decode", "\n", "# Convert decoder inputs in embeddings if needed", "\n", "", "hidden_states", "=", "kwargs_decoder", ".", "pop", "(", "\"inputs_embeds\"", ",", "None", ")", "\n", "if", "hidden_states", "is", "None", ":", "\n", "            ", "decoder_inputs_ids", "=", "kwargs_decoder", ".", "pop", "(", "\"input_ids\"", ")", "\n", "hidden_states", "=", "self", ".", "shared", "(", "decoder_inputs_ids", ")", "\n", "\n", "", "kwargs_decoder", "[", "\"encoder_hidden_states\"", "]", "=", "encoder_hidden_states", "\n", "kwargs_decoder", "[", "\"encoder_attention_mask\"", "]", "=", "kwargs_encoder", ".", "get", "(", "\"attention_mask\"", ",", "None", ")", "\n", "decoder_outputs", "=", "self", ".", "decoder", "(", "hidden_states", ",", "**", "kwargs_decoder", ")", "\n", "\n", "sequence_output", "=", "decoder_outputs", "[", "0", "]", "\n", "# Rescale output before projecting on vocab", "\n", "# See https://github.com/tensorflow/mesh/blob/fa19d69eafc9a482aff0b59ddd96b025c0cb207d/mesh_tensorflow/transformer/transformer.py#L586", "\n", "sequence_output", "=", "sequence_output", "*", "(", "self", ".", "model_dim", "**", "-", "0.5", ")", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "sequence_output", ")", "\n", "\n", "decoder_outputs", "=", "(", "lm_logits", ",", ")", "+", "decoder_outputs", "[", "1", ":", "]", "# Add hidden states and attention if they are here", "\n", "if", "lm_labels", "is", "not", "None", ":", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "lm_labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "decoder_outputs", "=", "(", "loss", ",", ")", "+", "decoder_outputs", "# TODO(thom): Add z_loss https://github.com/tensorflow/mesh/blob/fa19d69eafc9a482aff0b59ddd96b025c0cb207d/mesh_tensorflow/layers.py#L666", "\n", "\n", "", "return", "decoder_outputs", "+", "encoder_outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.load_tf_weights_in_t5": [[55, 131], ["os.path.abspath", "logger.info", "tf.train.list_variables", "logger.info", "logger.info", "tf.train.load_variable", "names.append", "txt_name.split", "any", "logger.info", "torch.from_numpy", "torch.from_numpy", "tf_weights.pop", "logger.error", "logger.info", "tf_weights.pop", "logger.info", "tf_weights.pop", "re.fullmatch", "getattr", "logger.info", "np.transpose", "np.transpose.astype", "re.split", "getattr", "len", "int", "tf_weights.keys", "getattr", "logger.info"], "function", ["None"], ["def", "load_tf_weights_in_t5", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "tf_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Converting TensorFlow checkpoint from {}\"", ".", "format", "(", "tf_path", ")", ")", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "names", "=", "[", "]", "\n", "tf_weights", "=", "{", "}", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "tf_weights", "[", "name", "]", "=", "array", "\n", "\n", "", "for", "txt_name", "in", "names", ":", "\n", "        ", "name", "=", "txt_name", ".", "split", "(", "'/'", ")", "\n", "# adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v", "\n", "# which are not required for using pretrained model", "\n", "if", "any", "(", "n", "in", "[", "\"adam_v\"", ",", "\"adam_m\"", ",", "\"global_step\"", "]", "for", "n", "in", "name", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "tf_weights", ".", "pop", "(", "txt_name", ",", "None", ")", "\n", "continue", "\n", "", "if", "'_slot_'", "in", "name", "[", "-", "1", "]", ":", "\n", "            ", "logger", ".", "info", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "tf_weights", ".", "pop", "(", "txt_name", ",", "None", ")", "\n", "continue", "\n", "", "pointer", "=", "model", "\n", "array", "=", "tf_weights", "[", "txt_name", "]", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+_\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'_(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "in", "[", "'kernel'", ",", "'scale'", ",", "'embedding'", "]", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "# elif l[0] == 'scale':", "\n", "#     pointer = getattr(pointer, 'weight')", "\n", "# elif l[0] == 'output_bias' or l[0] == 'beta':", "\n", "#     pointer = getattr(pointer, 'bias')", "\n", "# elif l[0] == 'squad':", "\n", "#     pointer = getattr(pointer, 'classifier')", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "if", "l", "[", "0", "]", "not", "in", "[", "'kernel'", ",", "'scale'", ",", "'embedding'", "]", ":", "\n", "            ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "if", "l", "[", "0", "]", "!=", "'embedding'", ":", "\n", "            ", "logger", ".", "info", "(", "\"Transposing numpy weight of shape {} for {}\"", ".", "format", "(", "array", ".", "shape", ",", "name", ")", ")", "\n", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "tf_weights", ".", "pop", "(", "txt_name", ",", "None", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Weights not copied to PyTorch model: {}\"", ".", "format", "(", "', '", ".", "join", "(", "tf_weights", ".", "keys", "(", ")", ")", ")", ")", "\n", "# logger.info(\"Weights not copied to PyTorch model: {}\".format(', '.join(tf_weights.keys())))", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BertTokenizer.__init__": [[135, 174], ["tokenization_utils.PreTrainedTokenizer.__init__", "tokenization_bert.load_vocab", "collections.OrderedDict", "tokenization_bert.WordpieceTokenizer", "os.path.isfile", "ValueError", "tokenization_bert.BasicTokenizer", "tokenization_bert.BertTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ",", "do_basic_tokenize", "=", "True", ",", "never_split", "=", "None", ",", "\n", "unk_token", "=", "\"[UNK]\"", ",", "sep_token", "=", "\"[SEP]\"", ",", "pad_token", "=", "\"[PAD]\"", ",", "cls_token", "=", "\"[CLS]\"", ",", "\n", "mask_token", "=", "\"[MASK]\"", ",", "tokenize_chinese_chars", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs a BertTokenizer.\n\n        Args:\n            **vocab_file**: Path to a one-wordpiece-per-line vocabulary file\n            **do_lower_case**: (`optional`) boolean (default True)\n                Whether to lower case the input\n                Only has an effect when do_basic_tokenize=True\n            **do_basic_tokenize**: (`optional`) boolean (default True)\n                Whether to do basic tokenization before wordpiece.\n            **never_split**: (`optional`) list of string\n                List of tokens which will never be split during tokenization.\n                Only has an effect when do_basic_tokenize=True\n            **tokenize_chinese_chars**: (`optional`) boolean (default True)\n                Whether to tokenize Chinese characters.\n                This should likely be deactivated for Japanese:\n                see: https://github.com/huggingface/pytorch-pretrained-BERT/issues/328\n        \"\"\"", "\n", "super", "(", "BertTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "sep_token", "=", "sep_token", ",", "\n", "pad_token", "=", "pad_token", ",", "cls_token", "=", "cls_token", ",", "\n", "mask_token", "=", "mask_token", ",", "**", "kwargs", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "3", "# take into account special tokens", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "vocab_file", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Can't find a vocabulary file at path '{}'. To load the vocabulary from a Google pretrained \"", "\n", "\"model use `tokenizer = BertTokenizer.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "ids_to_tokens", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "(", "ids", ",", "tok", ")", "for", "tok", ",", "ids", "in", "self", ".", "vocab", ".", "items", "(", ")", "]", ")", "\n", "self", ".", "do_basic_tokenize", "=", "do_basic_tokenize", "\n", "if", "do_basic_tokenize", ":", "\n", "            ", "self", ".", "basic_tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ",", "\n", "never_split", "=", "never_split", ",", "\n", "tokenize_chinese_chars", "=", "tokenize_chinese_chars", ")", "\n", "", "self", ".", "wordpiece_tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ",", "unk_token", "=", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BertTokenizer.vocab_size": [[175, 178], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BertTokenizer._tokenize": [[179, 188], ["tokenization_bert.BertTokenizer.basic_tokenizer.tokenize", "tokenization_bert.BertTokenizer.wordpiece_tokenizer.tokenize", "tokenization_bert.BertTokenizer.wordpiece_tokenizer.tokenize", "tokenization_bert.BertTokenizer.append"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "split_tokens", "=", "[", "]", "\n", "if", "self", ".", "do_basic_tokenize", ":", "\n", "            ", "for", "token", "in", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "text", ",", "never_split", "=", "self", ".", "all_special_tokens", ")", ":", "\n", "                ", "for", "sub_token", "in", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "                    ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "", "", "", "else", ":", "\n", "            ", "split_tokens", "=", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "text", ")", "\n", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BertTokenizer._convert_token_to_id": [[189, 192], ["tokenization_bert.BertTokenizer.vocab.get", "tokenization_bert.BertTokenizer.vocab.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "vocab", ".", "get", "(", "token", ",", "self", ".", "vocab", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BertTokenizer._convert_id_to_token": [[193, 196], ["tokenization_bert.BertTokenizer.ids_to_tokens.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "return", "self", ".", "ids_to_tokens", ".", "get", "(", "index", ",", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BertTokenizer.convert_tokens_to_string": [[197, 201], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "' '", ".", "join", "(", "tokens", ")", ".", "replace", "(", "' ##'", ",", "''", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BertTokenizer.build_inputs_with_special_tokens": [[202, 215], ["None"], "methods", ["None"], ["", "def", "build_inputs_with_special_tokens", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build model inputs from a sequence or a pair of sequence for sequence classification tasks\n        by concatenating and adding special tokens.\n        A BERT sequence has the following format:\n            single sequence: [CLS] X [SEP]\n            pair of sequences: [CLS] A [SEP] B [SEP]\n        \"\"\"", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "[", "self", ".", "cls_token_id", "]", "+", "token_ids_0", "+", "[", "self", ".", "sep_token_id", "]", "\n", "", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "return", "cls", "+", "token_ids_0", "+", "sep", "+", "token_ids_1", "+", "sep", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BertTokenizer.get_special_tokens_mask": [[216, 241], ["list", "ValueError", "map", "len", "len", "len"], "methods", ["None"], ["", "def", "get_special_tokens_mask", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ",", "already_has_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding\n        special tokens using the tokenizer ``prepare_for_model`` or ``encode_plus`` methods.\n\n        Args:\n            token_ids_0: list of ids (must not contain special tokens)\n            token_ids_1: Optional list of ids (must not contain special tokens), necessary when fetching sequence ids\n                for sequence pairs\n            already_has_special_tokens: (default False) Set to True if the token list is already formated with\n                special tokens for the model\n\n        Returns:\n            A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.\n        \"\"\"", "\n", "\n", "if", "already_has_special_tokens", ":", "\n", "            ", "if", "token_ids_1", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"You should not supply a second sequence if the provided sequence of \"", "\n", "\"ids is already formated with special tokens for the model.\"", ")", "\n", "", "return", "list", "(", "map", "(", "lambda", "x", ":", "1", "if", "x", "in", "[", "self", ".", "sep_token_id", ",", "self", ".", "cls_token_id", "]", "else", "0", ",", "token_ids_0", ")", ")", "\n", "\n", "", "if", "token_ids_1", "is", "not", "None", ":", "\n", "            ", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_1", ")", ")", "+", "[", "1", "]", "\n", "", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BertTokenizer.create_token_type_ids_from_sequences": [[242, 256], ["len", "len", "len"], "methods", ["None"], ["", "def", "create_token_type_ids_from_sequences", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Creates a mask from the two sequences passed to be used in a sequence-pair classification task.\n        A BERT sequence pair mask has the following format:\n        0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1\n        | first sequence    | second sequence\n\n        if token_ids_1 is None, only returns the first portion of the mask (0's).\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "\n", "", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "+", "len", "(", "token_ids_1", "+", "sep", ")", "*", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BertTokenizer.save_vocabulary": [[257, 273], ["os.path.isdir", "os.path.join", "io.open", "sorted", "tokenization_bert.BertTokenizer.vocab.items", "writer.write", "logger.warning"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "vocab_path", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary to a directory or file.\"\"\"", "\n", "index", "=", "0", "\n", "if", "os", ".", "path", ".", "isdir", "(", "vocab_path", ")", ":", "\n", "            ", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "vocab_path", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "", "else", ":", "\n", "            ", "vocab_file", "=", "vocab_path", "\n", "", "with", "open", "(", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "for", "token", ",", "token_index", "in", "sorted", "(", "self", ".", "vocab", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: vocabulary indices are not consecutive.\"", "\n", "\" Please check that the vocabulary is not corrupted!\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "token", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "", "", "return", "(", "vocab_file", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BasicTokenizer.__init__": [[278, 297], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "do_lower_case", "=", "True", ",", "never_split", "=", "None", ",", "tokenize_chinese_chars", "=", "True", ")", ":", "\n", "        ", "\"\"\" Constructs a BasicTokenizer.\n\n        Args:\n            **do_lower_case**: Whether to lower case the input.\n            **never_split**: (`optional`) list of str\n                Kept for backward compatibility purposes.\n                Now implemented directly at the base class level (see :func:`PreTrainedTokenizer.tokenize`)\n                List of token not to split.\n            **tokenize_chinese_chars**: (`optional`) boolean (default True)\n                Whether to tokenize Chinese characters.\n                This should likely be deactivated for Japanese:\n                see: https://github.com/huggingface/pytorch-pretrained-BERT/issues/328\n        \"\"\"", "\n", "if", "never_split", "is", "None", ":", "\n", "            ", "never_split", "=", "[", "]", "\n", "", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "never_split", "=", "never_split", "\n", "self", ".", "tokenize_chinese_chars", "=", "tokenize_chinese_chars", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BasicTokenizer.tokenize": [[298, 328], ["tokenization_bert.BasicTokenizer._clean_text", "tokenization_bert.whitespace_tokenize", "tokenization_bert.whitespace_tokenize", "tokenization_bert.BasicTokenizer._tokenize_chinese_chars", "split_tokens.extend", "tokenization_bert.BasicTokenizer.lower", "tokenization_bert.BasicTokenizer._run_strip_accents", "tokenization_bert.BasicTokenizer._run_split_on_punc"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BasicTokenizer._clean_text", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.whitespace_tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.whitespace_tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BasicTokenizer._tokenize_chinese_chars", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BasicTokenizer._run_strip_accents", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BasicTokenizer._run_split_on_punc"], ["", "def", "tokenize", "(", "self", ",", "text", ",", "never_split", "=", "None", ")", ":", "\n", "        ", "\"\"\" Basic Tokenization of a piece of text.\n            Split on \"white spaces\" only, for sub-word tokenization, see WordPieceTokenizer.\n\n        Args:\n            **never_split**: (`optional`) list of str\n                Kept for backward compatibility purposes.\n                Now implemented directly at the base class level (see :func:`PreTrainedTokenizer.tokenize`)\n                List of token not to split.\n        \"\"\"", "\n", "never_split", "=", "self", ".", "never_split", "+", "(", "never_split", "if", "never_split", "is", "not", "None", "else", "[", "]", ")", "\n", "text", "=", "self", ".", "_clean_text", "(", "text", ")", "\n", "# This was added on November 1st, 2018 for the multilingual and Chinese", "\n", "# models. This is also applied to the English models now, but it doesn't", "\n", "# matter since the English models were not trained on any Chinese data", "\n", "# and generally don't have any Chinese data in them (there are Chinese", "\n", "# characters in the vocabulary because Wikipedia does have some Chinese", "\n", "# words in the English Wikipedia.).", "\n", "if", "self", ".", "tokenize_chinese_chars", ":", "\n", "            ", "text", "=", "self", ".", "_tokenize_chinese_chars", "(", "text", ")", "\n", "", "orig_tokens", "=", "whitespace_tokenize", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "orig_tokens", ":", "\n", "            ", "if", "self", ".", "do_lower_case", "and", "token", "not", "in", "never_split", ":", "\n", "                ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "self", ".", "_run_strip_accents", "(", "token", ")", "\n", "", "split_tokens", ".", "extend", "(", "self", ".", "_run_split_on_punc", "(", "token", ")", ")", "\n", "\n", "", "output_tokens", "=", "whitespace_tokenize", "(", "\" \"", ".", "join", "(", "split_tokens", ")", ")", "\n", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BasicTokenizer._run_strip_accents": [[329, 339], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["None"], ["", "def", "_run_strip_accents", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "                ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BasicTokenizer._run_split_on_punc": [[340, 361], ["list", "len", "tokenization_bert._is_punctuation", "output.append", "output[].append", "output.append"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_punctuation"], ["", "def", "_run_split_on_punc", "(", "self", ",", "text", ",", "never_split", "=", "None", ")", ":", "\n", "        ", "\"\"\"Splits punctuation on a piece of text.\"\"\"", "\n", "if", "never_split", "is", "not", "None", "and", "text", "in", "never_split", ":", "\n", "            ", "return", "[", "text", "]", "\n", "", "chars", "=", "list", "(", "text", ")", "\n", "i", "=", "0", "\n", "start_new_word", "=", "True", "\n", "output", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "chars", ")", ":", "\n", "            ", "char", "=", "chars", "[", "i", "]", "\n", "if", "_is_punctuation", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "[", "char", "]", ")", "\n", "start_new_word", "=", "True", "\n", "", "else", ":", "\n", "                ", "if", "start_new_word", ":", "\n", "                    ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "start_new_word", "=", "False", "\n", "output", "[", "-", "1", "]", ".", "append", "(", "char", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "[", "\"\"", ".", "join", "(", "x", ")", "for", "x", "in", "output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BasicTokenizer._tokenize_chinese_chars": [[362, 374], ["ord", "tokenization_bert.BasicTokenizer._is_chinese_char", "output.append", "output.append", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BasicTokenizer._is_chinese_char"], ["", "def", "_tokenize_chinese_chars", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "self", ".", "_is_chinese_char", "(", "cp", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "output", ".", "append", "(", "char", ")", "\n", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BasicTokenizer._is_chinese_char": [[375, 396], ["None"], "methods", ["None"], ["", "def", "_is_chinese_char", "(", "self", ",", "cp", ")", ":", "\n", "        ", "\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "cp", ">=", "0x4E00", "and", "cp", "<=", "0x9FFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x3400", "and", "cp", "<=", "0x4DBF", ")", "or", "#", "\n", "(", "cp", ">=", "0x20000", "and", "cp", "<=", "0x2A6DF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2A700", "and", "cp", "<=", "0x2B73F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B740", "and", "cp", "<=", "0x2B81F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B820", "and", "cp", "<=", "0x2CEAF", ")", "or", "\n", "(", "cp", ">=", "0xF900", "and", "cp", "<=", "0xFAFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2F800", "and", "cp", "<=", "0x2FA1F", ")", ")", ":", "#", "\n", "            ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.BasicTokenizer._clean_text": [[397, 409], ["ord", "tokenization_bert._is_whitespace", "tokenization_bert._is_control", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._is_whitespace", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_control"], ["", "def", "_clean_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "_is_control", "(", "char", ")", ":", "\n", "                ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.WordpieceTokenizer.__init__": [[414, 418], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_token", ",", "max_input_chars_per_word", "=", "100", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "max_input_chars_per_word", "=", "max_input_chars_per_word", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.WordpieceTokenizer.tokenize": [[419, 469], ["tokenization_bert.whitespace_tokenize", "list", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.whitespace_tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        This uses a greedy longest-match-first algorithm to perform tokenization\n        using the given vocabulary.\n\n        For example:\n          input = \"unaffable\"\n          output = [\"un\", \"##aff\", \"##able\"]\n\n        Args:\n          text: A single token or whitespace separated tokens. This should have\n            already been passed through `BasicTokenizer`.\n\n        Returns:\n          A list of wordpiece tokens.\n        \"\"\"", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "            ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "                ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "                    ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", ">", "0", ":", "\n", "                        ", "substr", "=", "\"##\"", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocab", ":", "\n", "                        ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "                    ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.load_vocab": [[95, 104], ["collections.OrderedDict", "enumerate", "io.open", "reader.readlines", "token.rstrip.rstrip"], "function", ["None"], ["def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "    ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "with", "open", "(", "vocab_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "        ", "tokens", "=", "reader", ".", "readlines", "(", ")", "\n", "", "for", "index", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "        ", "token", "=", "token", ".", "rstrip", "(", "'\\n'", ")", "\n", "vocab", "[", "token", "]", "=", "index", "\n", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.whitespace_tokenize": [[106, 113], ["text.strip.strip", "text.strip.split"], "function", ["None"], ["", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "    ", "\"\"\"Runs basic whitespace cleaning and splitting on a piece of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "        ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_whitespace": [[471, 481], ["unicodedata.category"], "function", ["None"], ["", "", "def", "_is_whitespace", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically contorl characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_control": [[483, 493], ["unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_control", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"C\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_punctuation": [[495, 509], ["ord", "unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_punctuation", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "cp", ">=", "33", "and", "cp", "<=", "47", ")", "or", "(", "cp", ">=", "58", "and", "cp", "<=", "64", ")", "or", "\n", "(", "cp", ">=", "91", "and", "cp", "<=", "96", ")", "or", "(", "cp", ">=", "123", "and", "cp", "<=", "126", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.__init__": [[32, 77], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "len", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_layers.append", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.Linear", "torch.Linear", "torch.Linear", "len", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_projs.append", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_layers.append", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_projs.append", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_projs.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "\n", "keep_order", "=", "False", ")", ":", "\n", "        ", "super", "(", "ProjectedAdaptiveLogSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "self", ".", "div_val", "=", "div_val", "\n", "\n", "self", ".", "shortlist_size", "=", "self", ".", "cutoffs", "[", "0", "]", "\n", "self", ".", "n_clusters", "=", "len", "(", "self", ".", "cutoffs", ")", "-", "1", "\n", "self", ".", "head_size", "=", "self", ".", "shortlist_size", "+", "self", ".", "n_clusters", "\n", "\n", "if", "self", ".", "n_clusters", ">", "0", ":", "\n", "            ", "self", ".", "cluster_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "n_clusters", ",", "self", ".", "d_embed", ")", ")", "\n", "self", ".", "cluster_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "n_clusters", ")", ")", "\n", "\n", "", "self", ".", "out_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "out_projs", "=", "nn", ".", "ParameterList", "(", ")", "\n", "\n", "if", "div_val", "==", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "if", "d_proj", "!=", "d_embed", ":", "\n", "                    ", "self", ".", "out_projs", ".", "append", "(", "\n", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "d_proj", ",", "d_embed", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "out_projs", ".", "append", "(", "None", ")", "\n", "\n", "", "", "self", ".", "out_layers", ".", "append", "(", "nn", ".", "Linear", "(", "d_embed", ",", "n_token", ")", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "d_embed", "//", "(", "div_val", "**", "i", ")", "\n", "\n", "self", ".", "out_projs", ".", "append", "(", "\n", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "d_proj", ",", "d_emb_i", ")", ")", "\n", ")", "\n", "\n", "self", ".", "out_layers", ".", "append", "(", "nn", ".", "Linear", "(", "d_emb_i", ",", "r_idx", "-", "l_idx", ")", ")", "\n", "\n", "", "", "self", ".", "keep_order", "=", "keep_order", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit": [[78, 91], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "proj.t().contiguous", "proj.t"], "methods", ["None"], ["", "def", "_compute_logit", "(", "self", ",", "hidden", ",", "weight", ",", "bias", ",", "proj", ")", ":", "\n", "        ", "if", "proj", "is", "None", ":", "\n", "            ", "logit", "=", "F", ".", "linear", "(", "hidden", ",", "weight", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "# if CUDA_MAJOR <= 9 and CUDA_MINOR <= 1:", "\n", "            ", "proj_hid", "=", "F", ".", "linear", "(", "hidden", ",", "proj", ".", "t", "(", ")", ".", "contiguous", "(", ")", ")", "\n", "logit", "=", "F", ".", "linear", "(", "proj_hid", ",", "weight", ",", "bias", "=", "bias", ")", "\n", "# else:", "\n", "#     logit = torch.einsum('bd,de,ev->bv', (hidden, proj, weight.t()))", "\n", "#     if bias is not None:", "\n", "#         logit = logit + bias", "\n", "\n", "", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.forward": [[92, 196], ["labels.view.view.view", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "range", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "hidden.size", "labels.view.view.size", "RuntimeError", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "len", "weights.append", "biases.append", "hidden.new_empty", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.log_softmax().gather().squeeze", "torch.log_softmax().gather().squeeze", "torch.log_softmax().gather().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "mask_i.nonzero().squeeze", "torch.log_softmax.index_select", "hidden.index_select", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "head_logprob.index_select.gather().squeeze.size", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.size", "mask_i.nonzero().squeeze.numel", "labels.view.view.index_select", "F.log_softmax.index_select.gather().squeeze", "torch.zeros_like.index_copy_", "torch.zeros_like.index_copy_", "torch.zeros_like.index_copy_", "out[].copy_", "torch.log_softmax().gather", "torch.log_softmax().gather", "torch.log_softmax().gather", "mask_i.nonzero", "torch.log_softmax.gather().squeeze", "hasattr", "labels.view.view.unsqueeze", "F.log_softmax.index_select.gather", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.gather", "head_logprob.index_select.gather().squeeze.size"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit"], ["", "def", "forward", "(", "self", ",", "hidden", ",", "labels", "=", "None", ",", "keep_order", "=", "False", ")", ":", "\n", "        ", "'''\n            Params:\n                hidden :: [len*bsz x d_proj]\n                labels :: [len*bsz]\n            Return:\n                if labels is None:\n                    out :: [len*bsz] Negative log likelihood\n                else:\n                    out :: [len*bsz x n_tokens] log probabilities of tokens over the vocabulary\n            We could replace this implementation by the native PyTorch one\n            if their's had an option to set bias on all clusters in the native one.\n            here: https://github.com/pytorch/pytorch/blob/dbe6a7a9ff1a364a8706bf5df58a1ca96d2fd9da/torch/nn/modules/adaptive.py#L138\n        '''", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "hidden", ".", "size", "(", "0", ")", "!=", "labels", ".", "size", "(", "0", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Input and labels should have the same size '", "\n", "'in the batch dimension.'", ")", "\n", "\n", "", "", "if", "self", ".", "n_clusters", "==", "0", ":", "\n", "            ", "logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "self", ".", "out_layers", "[", "0", "]", ".", "weight", ",", "\n", "self", ".", "out_layers", "[", "0", "]", ".", "bias", ",", "self", ".", "out_projs", "[", "0", "]", ")", "\n", "if", "labels", "is", "not", "None", ":", "\n", "                ", "out", "=", "-", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", ".", "gather", "(", "1", ",", "labels", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "# construct weights and biases", "\n", "            ", "weights", ",", "biases", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "                    ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "weight_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "weight", "[", "l_idx", ":", "r_idx", "]", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "bias", "[", "l_idx", ":", "r_idx", "]", "\n", "", "else", ":", "\n", "                    ", "weight_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "weight", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "bias", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "weight_i", "=", "torch", ".", "cat", "(", "\n", "[", "weight_i", ",", "self", ".", "cluster_weight", "]", ",", "dim", "=", "0", ")", "\n", "bias_i", "=", "torch", ".", "cat", "(", "\n", "[", "bias_i", ",", "self", ".", "cluster_bias", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "weights", ".", "append", "(", "weight_i", ")", "\n", "biases", ".", "append", "(", "bias_i", ")", "\n", "\n", "", "head_weight", ",", "head_bias", ",", "head_proj", "=", "weights", "[", "0", "]", ",", "biases", "[", "0", "]", ",", "self", ".", "out_projs", "[", "0", "]", "\n", "\n", "head_logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "head_weight", ",", "head_bias", ",", "head_proj", ")", "\n", "head_logprob", "=", "F", ".", "log_softmax", "(", "head_logit", ",", "dim", "=", "1", ")", "\n", "\n", "if", "labels", "is", "None", ":", "\n", "                ", "out", "=", "hidden", ".", "new_empty", "(", "(", "head_logit", ".", "size", "(", "0", ")", ",", "self", ".", "n_token", ")", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "torch", ".", "zeros_like", "(", "labels", ",", "dtype", "=", "hidden", ".", "dtype", ",", "device", "=", "hidden", ".", "device", ")", "\n", "\n", "", "offset", "=", "0", "\n", "cutoff_values", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "for", "i", "in", "range", "(", "len", "(", "cutoff_values", ")", "-", "1", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "cutoff_values", "[", "i", "]", ",", "cutoff_values", "[", "i", "+", "1", "]", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "                    ", "mask_i", "=", "(", "labels", ">=", "l_idx", ")", "&", "(", "labels", "<", "r_idx", ")", "\n", "indices_i", "=", "mask_i", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "indices_i", ".", "numel", "(", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "\n", "", "target_i", "=", "labels", ".", "index_select", "(", "0", ",", "indices_i", ")", "-", "l_idx", "\n", "head_logprob_i", "=", "head_logprob", ".", "index_select", "(", "0", ",", "indices_i", ")", "\n", "hidden_i", "=", "hidden", ".", "index_select", "(", "0", ",", "indices_i", ")", "\n", "", "else", ":", "\n", "                    ", "hidden_i", "=", "hidden", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "if", "labels", "is", "not", "None", ":", "\n", "                        ", "logprob_i", "=", "head_logprob_i", ".", "gather", "(", "1", ",", "target_i", "[", ":", ",", "None", "]", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                        ", "out", "[", ":", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", "=", "head_logprob", "[", ":", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", "\n", "", "", "else", ":", "\n", "                    ", "weight_i", ",", "bias_i", ",", "proj_i", "=", "weights", "[", "i", "]", ",", "biases", "[", "i", "]", ",", "self", ".", "out_projs", "[", "i", "]", "\n", "\n", "tail_logit_i", "=", "self", ".", "_compute_logit", "(", "hidden_i", ",", "weight_i", ",", "bias_i", ",", "proj_i", ")", "\n", "tail_logprob_i", "=", "F", ".", "log_softmax", "(", "tail_logit_i", ",", "dim", "=", "1", ")", "\n", "cluster_prob_idx", "=", "self", ".", "cutoffs", "[", "0", "]", "+", "i", "-", "1", "# No probability for the head cluster", "\n", "if", "labels", "is", "not", "None", ":", "\n", "                        ", "logprob_i", "=", "head_logprob_i", "[", ":", ",", "cluster_prob_idx", "]", "+", "tail_logprob_i", ".", "gather", "(", "1", ",", "target_i", "[", ":", ",", "None", "]", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                        ", "logprob_i", "=", "head_logprob", "[", ":", ",", "cluster_prob_idx", ",", "None", "]", "+", "tail_logprob_i", "\n", "out", "[", ":", ",", "l_idx", ":", "r_idx", "]", "=", "logprob_i", "\n", "\n", "", "", "if", "labels", "is", "not", "None", ":", "\n", "                    ", "if", "(", "hasattr", "(", "self", ",", "'keep_order'", ")", "and", "self", ".", "keep_order", ")", "or", "keep_order", ":", "\n", "                        ", "out", ".", "index_copy_", "(", "0", ",", "indices_i", ",", "-", "logprob_i", ")", "\n", "", "else", ":", "\n", "                        ", "out", "[", "offset", ":", "offset", "+", "logprob_i", ".", "size", "(", "0", ")", "]", ".", "copy_", "(", "-", "logprob_i", ")", "\n", "", "offset", "+=", "logprob_i", ".", "size", "(", "0", ")", "\n", "\n", "", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.log_prob": [[198, 258], ["modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "hidden.new_empty", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "len", "weights.append", "biases.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.size", "len", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit"], ["", "def", "log_prob", "(", "self", ",", "hidden", ")", ":", "\n", "        ", "r\"\"\" Computes log probabilities for all :math:`n\\_classes`\n        From: https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/adaptive.py\n        Args:\n            hidden (Tensor): a minibatch of examples\n        Returns:\n            log-probabilities of for each class :math:`c`\n            in range :math:`0 <= c <= n\\_classes`, where :math:`n\\_classes` is a\n            parameter passed to ``AdaptiveLogSoftmaxWithLoss`` constructor.\n        Shape:\n            - Input: :math:`(N, in\\_features)`\n            - Output: :math:`(N, n\\_classes)`\n        \"\"\"", "\n", "if", "self", ".", "n_clusters", "==", "0", ":", "\n", "            ", "logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "self", ".", "out_layers", "[", "0", "]", ".", "weight", ",", "\n", "self", ".", "out_layers", "[", "0", "]", ".", "bias", ",", "self", ".", "out_projs", "[", "0", "]", ")", "\n", "return", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "# construct weights and biases", "\n", "            ", "weights", ",", "biases", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "                    ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "weight_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "weight", "[", "l_idx", ":", "r_idx", "]", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "bias", "[", "l_idx", ":", "r_idx", "]", "\n", "", "else", ":", "\n", "                    ", "weight_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "weight", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "bias", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "weight_i", "=", "torch", ".", "cat", "(", "\n", "[", "weight_i", ",", "self", ".", "cluster_weight", "]", ",", "dim", "=", "0", ")", "\n", "bias_i", "=", "torch", ".", "cat", "(", "\n", "[", "bias_i", ",", "self", ".", "cluster_bias", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "weights", ".", "append", "(", "weight_i", ")", "\n", "biases", ".", "append", "(", "bias_i", ")", "\n", "\n", "", "head_weight", ",", "head_bias", ",", "head_proj", "=", "weights", "[", "0", "]", ",", "biases", "[", "0", "]", ",", "self", ".", "out_projs", "[", "0", "]", "\n", "head_logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "head_weight", ",", "head_bias", ",", "head_proj", ")", "\n", "\n", "out", "=", "hidden", ".", "new_empty", "(", "(", "head_logit", ".", "size", "(", "0", ")", ",", "self", ".", "n_token", ")", ")", "\n", "head_logprob", "=", "F", ".", "log_softmax", "(", "head_logit", ",", "dim", "=", "1", ")", "\n", "\n", "cutoff_values", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "for", "i", "in", "range", "(", "len", "(", "cutoff_values", ")", "-", "1", ")", ":", "\n", "                ", "start_idx", ",", "stop_idx", "=", "cutoff_values", "[", "i", "]", ",", "cutoff_values", "[", "i", "+", "1", "]", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "out", "[", ":", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", "=", "head_logprob", "[", ":", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                    ", "weight_i", ",", "bias_i", ",", "proj_i", "=", "weights", "[", "i", "]", ",", "biases", "[", "i", "]", ",", "self", ".", "out_projs", "[", "i", "]", "\n", "\n", "tail_logit_i", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "weight_i", ",", "bias_i", ",", "proj_i", ")", "\n", "tail_logprob_i", "=", "F", ".", "log_softmax", "(", "tail_logit_i", ",", "dim", "=", "1", ")", "\n", "\n", "logprob_i", "=", "head_logprob", "[", ":", ",", "-", "i", "]", "+", "tail_logprob_i", "\n", "out", "[", ":", ",", "start_idx", ",", "stop_idx", "]", "=", "logprob_i", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.LogUniformSampler.__init__": [[261, 279], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "modeling_transfo_xl_utilities.LogUniformSampler.dist.double().log1p_", "modeling_transfo_xl_utilities.LogUniformSampler.dist.double"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "range_max", ",", "n_sample", ")", ":", "\n", "        ", "\"\"\"\n        Reference : https://github.com/tensorflow/tensorflow/blob/r1.10/tensorflow/python/ops/candidate_sampling_ops.py\n            `P(class) = (log(class + 2) - log(class + 1)) / log(range_max + 1)`\n\n        expected count can be approximated by 1 - (1 - p)^n\n        and we use a numerically stable version -expm1(num_tries * log1p(-p))\n\n        Our implementation fixes num_tries at 2 * n_sample, and the actual #samples will vary from run to run\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "range_max", "=", "range_max", "\n", "log_indices", "=", "torch", ".", "arange", "(", "1.", ",", "range_max", "+", "2.", ",", "1.", ")", ".", "log_", "(", ")", "\n", "self", ".", "dist", "=", "(", "log_indices", "[", "1", ":", "]", "-", "log_indices", "[", ":", "-", "1", "]", ")", "/", "log_indices", "[", "-", "1", "]", "\n", "\n", "self", ".", "log_q", "=", "(", "-", "(", "-", "self", ".", "dist", ".", "double", "(", ")", ".", "log1p_", "(", ")", "*", "2", "*", "n_sample", ")", ".", "expm1_", "(", ")", ")", ".", "log_", "(", ")", ".", "float", "(", ")", "\n", "\n", "", "self", ".", "n_sample", "=", "n_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.LogUniformSampler.sample": [[280, 300], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "neg_samples.to.to.to", "modeling_transfo_xl_utilities.LogUniformSampler.log_q[].to", "modeling_transfo_xl_utilities.LogUniformSampler.log_q[].to", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n            labels: [b1, b2]\n        Return\n            true_log_probs: [b1, b2]\n            samp_log_probs: [n_sample]\n            neg_samples: [n_sample]\n        \"\"\"", "\n", "\n", "# neg_samples = torch.empty(0).long()", "\n", "n_sample", "=", "self", ".", "n_sample", "\n", "n_tries", "=", "2", "*", "n_sample", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "neg_samples", "=", "torch", ".", "multinomial", "(", "self", ".", "dist", ",", "n_tries", ",", "replacement", "=", "True", ")", ".", "unique", "(", ")", "\n", "device", "=", "labels", ".", "device", "\n", "neg_samples", "=", "neg_samples", ".", "to", "(", "device", ")", "\n", "true_log_probs", "=", "self", ".", "log_q", "[", "labels", "]", ".", "to", "(", "device", ")", "\n", "samp_log_probs", "=", "self", ".", "log_q", "[", "neg_samples", "]", ".", "to", "(", "device", ")", "\n", "return", "true_log_probs", ",", "samp_log_probs", ",", "neg_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.sample_logits": [[301, 333], ["sampler.sample", "neg_samples.size", "torch.cat", "torch.cat", "torch.cat", "embedding", "all_w[].view", "all_w[].view", "all_b[].view", "sample_logits.masked_fill_", "torch.cat", "torch.cat", "torch.cat", "labels.size", "labels.size", "labels.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.LogUniformSampler.sample"], ["", "", "", "def", "sample_logits", "(", "embedding", ",", "bias", ",", "labels", ",", "inputs", ",", "sampler", ")", ":", "\n", "    ", "\"\"\"\n        embedding: an nn.Embedding layer\n        bias: [n_vocab]\n        labels: [b1, b2]\n        inputs: [b1, b2, n_emb]\n        sampler: you may use a LogUniformSampler\n    Return\n        logits: [b1, b2, 1 + n_sample]\n    \"\"\"", "\n", "true_log_probs", ",", "samp_log_probs", ",", "neg_samples", "=", "sampler", ".", "sample", "(", "labels", ")", "\n", "n_sample", "=", "neg_samples", ".", "size", "(", "0", ")", "\n", "b1", ",", "b2", "=", "labels", ".", "size", "(", "0", ")", ",", "labels", ".", "size", "(", "1", ")", "\n", "all_ids", "=", "torch", ".", "cat", "(", "[", "labels", ".", "view", "(", "-", "1", ")", ",", "neg_samples", "]", ")", "\n", "all_w", "=", "embedding", "(", "all_ids", ")", "\n", "true_w", "=", "all_w", "[", ":", "-", "n_sample", "]", ".", "view", "(", "b1", ",", "b2", ",", "-", "1", ")", "\n", "sample_w", "=", "all_w", "[", "-", "n_sample", ":", "]", ".", "view", "(", "n_sample", ",", "-", "1", ")", "\n", "\n", "all_b", "=", "bias", "[", "all_ids", "]", "\n", "true_b", "=", "all_b", "[", ":", "-", "n_sample", "]", ".", "view", "(", "b1", ",", "b2", ")", "\n", "sample_b", "=", "all_b", "[", "-", "n_sample", ":", "]", "\n", "\n", "hit", "=", "(", "labels", "[", ":", ",", ":", ",", "None", "]", "==", "neg_samples", ")", ".", "detach", "(", ")", "\n", "\n", "true_logits", "=", "torch", ".", "einsum", "(", "'ijk,ijk->ij'", ",", "\n", "[", "true_w", ",", "inputs", "]", ")", "+", "true_b", "-", "true_log_probs", "\n", "sample_logits", "=", "torch", ".", "einsum", "(", "'lk,ijk->ijl'", ",", "\n", "[", "sample_w", ",", "inputs", "]", ")", "+", "sample_b", "-", "samp_log_probs", "\n", "sample_logits", ".", "masked_fill_", "(", "hit", ",", "-", "1e30", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "true_logits", "[", ":", ",", ":", ",", "None", "]", ",", "sample_logits", "]", ",", "-", "1", ")", "\n", "\n", "return", "logits", "\n", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_torch_available": [[82, 84], ["None"], "function", ["None"], ["def", "is_torch_available", "(", ")", ":", "\n", "    ", "return", "_torch_available", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_tf_available": [[85, 87], ["None"], "function", ["None"], ["", "def", "is_tf_available", "(", ")", ":", "\n", "    ", "return", "_tf_available", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_remote_url": [[113, 116], ["urlparse"], "function", ["None"], ["", "", "def", "is_remote_url", "(", "url_or_filename", ")", ":", "\n", "    ", "parsed", "=", "urlparse", "(", "url_or_filename", ")", "\n", "return", "parsed", ".", "scheme", "in", "(", "'http'", ",", "'https'", ",", "'s3'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.hf_bucket_url": [[117, 122], ["None"], "function", ["None"], ["", "def", "hf_bucket_url", "(", "identifier", ",", "postfix", "=", "None", ")", ":", "\n", "    ", "if", "postfix", "is", "None", ":", "\n", "        ", "return", "\"/\"", ".", "join", "(", "(", "S3_BUCKET_PREFIX", ",", "identifier", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"/\"", ".", "join", "(", "(", "S3_BUCKET_PREFIX", ",", "identifier", ",", "postfix", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.url_to_filename": [[124, 146], ["url.encode", "hashlib.sha256", "hashlib.sha256.hexdigest", "url.endswith", "etag.encode", "hashlib.sha256", "hashlib.sha256.hexdigest"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode"], ["", "", "def", "url_to_filename", "(", "url", ",", "etag", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert `url` into a hashed filename in a repeatable way.\n    If `etag` is specified, append its hash to the url's, delimited\n    by a period.\n    If the url ends with .h5 (Keras HDF5 weights) ands '.h5' to the name\n    so that TF 2.0 can identify it as a HDF5 file\n    (see https://github.com/tensorflow/tensorflow/blob/00fad90125b18b80fe054de1055770cfb8fe4ba3/tensorflow/python/keras/engine/network.py#L1380)\n    \"\"\"", "\n", "url_bytes", "=", "url", ".", "encode", "(", "'utf-8'", ")", "\n", "url_hash", "=", "sha256", "(", "url_bytes", ")", "\n", "filename", "=", "url_hash", ".", "hexdigest", "(", ")", "\n", "\n", "if", "etag", ":", "\n", "        ", "etag_bytes", "=", "etag", ".", "encode", "(", "'utf-8'", ")", "\n", "etag_hash", "=", "sha256", "(", "etag_bytes", ")", "\n", "filename", "+=", "'.'", "+", "etag_hash", ".", "hexdigest", "(", ")", "\n", "\n", "", "if", "url", ".", "endswith", "(", "'.h5'", ")", ":", "\n", "        ", "filename", "+=", "'.h5'", "\n", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.filename_to_url": [[148, 172], ["os.path.join", "isinstance", "str", "os.path.exists", "EnvironmentError", "os.path.exists", "EnvironmentError", "io.open", "json.load"], "function", ["None"], ["", "def", "filename_to_url", "(", "filename", ",", "cache_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Return the url and etag (which may be ``None``) stored for `filename`.\n    Raise ``EnvironmentError`` if `filename` or its stored metadata do not exist.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "cache_path", ")", ")", "\n", "\n", "", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "meta_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "meta_path", ")", ")", "\n", "\n", "", "with", "open", "(", "meta_path", ",", "encoding", "=", "\"utf-8\"", ")", "as", "meta_file", ":", "\n", "        ", "metadata", "=", "json", ".", "load", "(", "meta_file", ")", "\n", "", "url", "=", "metadata", "[", "'url'", "]", "\n", "etag", "=", "metadata", "[", "'etag'", "]", "\n", "\n", "return", "url", ",", "etag", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.cached_path": [[174, 206], ["file_utils.is_remote_url", "isinstance", "str", "isinstance", "str", "file_utils.get_from_cache", "os.path.exists", "EnvironmentError", "ValueError", "urlparse"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_remote_url", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.get_from_cache"], ["", "def", "cached_path", "(", "url_or_filename", ",", "cache_dir", "=", "None", ",", "force_download", "=", "False", ",", "proxies", "=", "None", ",", "resume_download", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Given something that might be a URL (or might be a local path),\n    determine which. If it's a URL, download the file and cache it, and\n    return the path to the cached file. If it's already a local path,\n    make sure the file exists and then return the path.\n    Args:\n        cache_dir: specify a cache directory to save the file to (overwrite the default cache dir).\n        force_download: if True, re-dowload the file even if it's already cached in the cache dir.\n        resume_download: if True, resume the download if incompletly recieved file is found.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "url_or_filename", ",", "Path", ")", ":", "\n", "        ", "url_or_filename", "=", "str", "(", "url_or_filename", ")", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "if", "is_remote_url", "(", "url_or_filename", ")", ":", "\n", "# URL, so get it from the cache (downloading if necessary)", "\n", "        ", "return", "get_from_cache", "(", "url_or_filename", ",", "cache_dir", "=", "cache_dir", ",", "\n", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ",", "\n", "resume_download", "=", "resume_download", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "url_or_filename", ")", ":", "\n", "# File, and it exists.", "\n", "        ", "return", "url_or_filename", "\n", "", "elif", "urlparse", "(", "url_or_filename", ")", ".", "scheme", "==", "''", ":", "\n", "# File, but it doesn't exist.", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "", "else", ":", "\n", "# Something unknown", "\n", "        ", "raise", "ValueError", "(", "\"unable to parse {} as a URL or as a local path\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.split_s3_path": [[208, 219], ["urlparse", "s3_path.startswith", "ValueError"], "function", ["None"], ["", "", "def", "split_s3_path", "(", "url", ")", ":", "\n", "    ", "\"\"\"Split a full s3 path into the bucket name and path.\"\"\"", "\n", "parsed", "=", "urlparse", "(", "url", ")", "\n", "if", "not", "parsed", ".", "netloc", "or", "not", "parsed", ".", "path", ":", "\n", "        ", "raise", "ValueError", "(", "\"bad s3 path {}\"", ".", "format", "(", "url", ")", ")", "\n", "", "bucket_name", "=", "parsed", ".", "netloc", "\n", "s3_path", "=", "parsed", ".", "path", "\n", "# Remove '/' at beginning of path.", "\n", "if", "s3_path", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "        ", "s3_path", "=", "s3_path", "[", "1", ":", "]", "\n", "", "return", "bucket_name", ",", "s3_path", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.s3_request": [[221, 238], ["functools.wraps", "func", "int", "EnvironmentError"], "function", ["None"], ["", "def", "s3_request", "(", "func", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper function for s3 requests in order to create more helpful error\n    messages.\n    \"\"\"", "\n", "\n", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "func", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "ClientError", "as", "exc", ":", "\n", "            ", "if", "int", "(", "exc", ".", "response", "[", "\"Error\"", "]", "[", "\"Code\"", "]", ")", "==", "404", ":", "\n", "                ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.s3_etag": [[240, 247], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Object", "botocore.config.Config"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_etag", "(", "url", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check ETag on S3 object.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ",", "config", "=", "Config", "(", "proxies", "=", "proxies", ")", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_object", "=", "s3_resource", ".", "Object", "(", "bucket_name", ",", "s3_path", ")", "\n", "return", "s3_object", ".", "e_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.s3_get": [[249, 255], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Bucket().download_fileobj", "botocore.config.Config", "boto3.resource.Bucket"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"Pull a file directly from S3.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ",", "config", "=", "Config", "(", "proxies", "=", "proxies", ")", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_resource", ".", "Bucket", "(", "bucket_name", ")", ".", "download_fileobj", "(", "s3_path", ",", "temp_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.http_get": [[257, 270], ["requests.get", "requests.get.headers.get", "tqdm.auto.tqdm", "requests.get.iter_content", "tqdm.auto.tqdm.close", "int", "tqdm.auto.tqdm.update", "temp_file.write", "len"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.TqdmProgressFileReader.close"], ["", "def", "http_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "None", ",", "resume_size", "=", "0", ")", ":", "\n", "    ", "headers", "=", "{", "'Range'", ":", "'bytes=%d-'", "%", "(", "resume_size", ",", ")", "}", "if", "resume_size", ">", "0", "else", "None", "\n", "response", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ",", "proxies", "=", "proxies", ",", "headers", "=", "headers", ")", "\n", "if", "response", ".", "status_code", "==", "416", ":", "# Range not satisfiable", "\n", "        ", "return", "\n", "", "content_length", "=", "response", ".", "headers", ".", "get", "(", "'Content-Length'", ")", "\n", "total", "=", "resume_size", "+", "int", "(", "content_length", ")", "if", "content_length", "is", "not", "None", "else", "None", "\n", "progress", "=", "tqdm", "(", "unit", "=", "\"B\"", ",", "unit_scale", "=", "True", ",", "total", "=", "total", ",", "initial", "=", "resume_size", ",", "desc", "=", "\"Downloading\"", ")", "\n", "for", "chunk", "in", "response", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "        ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "            ", "progress", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "temp_file", ".", "write", "(", "chunk", ")", "\n", "", "", "progress", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.get_from_cache": [[272, 366], ["url.startswith", "file_utils.url_to_filename", "os.path.join", "isinstance", "str", "str", "os.path.exists", "os.makedirs", "file_utils.s3_etag", "response.headers.get.decode", "fnmatch.filter", "list", "os.path.exists", "isinstance", "requests.head", "os.path.exists", "os.listdir", "filter", "os.path.join", "os.remove", "os.path.exists", "temp_file_manager", "logger.info", "url.startswith", "temp_file.flush", "temp_file.seek", "logger.info", "logger.info", "logger.info", "requests.head.headers.get", "io.open", "os.stat", "file_utils.s3_get", "file_utils.http_get", "io.open", "shutil.copyfileobj", "io.open", "json.dumps", "meta_file.write", "logger.warn", "isinstance", "unicode", "s.endswith"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.url_to_filename", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.s3_etag", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.s3_get", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.http_get"], ["", "def", "get_from_cache", "(", "url", ",", "cache_dir", "=", "None", ",", "force_download", "=", "False", ",", "proxies", "=", "None", ",", "etag_timeout", "=", "10", ",", "resume_download", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Given a URL, look for the corresponding dataset in the local cache.\n    If it's not there, download it. Then return the path to the cached file.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "not", "isinstance", "(", "cache_dir", ",", "str", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cache_dir", ")", "\n", "\n", "# Get eTag to add to filename, if it exists.", "\n", "", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "        ", "etag", "=", "s3_etag", "(", "url", ",", "proxies", "=", "proxies", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "response", "=", "requests", ".", "head", "(", "url", ",", "allow_redirects", "=", "True", ",", "proxies", "=", "proxies", ",", "timeout", "=", "etag_timeout", ")", "\n", "if", "response", ".", "status_code", "!=", "200", ":", "\n", "                ", "etag", "=", "None", "\n", "", "else", ":", "\n", "                ", "etag", "=", "response", ".", "headers", ".", "get", "(", "\"ETag\"", ")", "\n", "", "", "except", "(", "EnvironmentError", ",", "requests", ".", "exceptions", ".", "Timeout", ")", ":", "\n", "            ", "etag", "=", "None", "\n", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "etag", "is", "not", "None", ":", "\n", "        ", "etag", "=", "etag", ".", "decode", "(", "'utf-8'", ")", "\n", "", "filename", "=", "url_to_filename", "(", "url", ",", "etag", ")", "\n", "\n", "# get cache path to put the file", "\n", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "\n", "# If we don't have a connection (etag is None) and can't identify the file", "\n", "# try to get the last downloaded one", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "and", "etag", "is", "None", ":", "\n", "        ", "matching_files", "=", "fnmatch", ".", "filter", "(", "os", ".", "listdir", "(", "cache_dir", ")", ",", "filename", "+", "'.*'", ")", "\n", "matching_files", "=", "list", "(", "filter", "(", "lambda", "s", ":", "not", "s", ".", "endswith", "(", "'.json'", ")", ",", "matching_files", ")", ")", "\n", "if", "matching_files", ":", "\n", "            ", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "matching_files", "[", "-", "1", "]", ")", "\n", "\n", "", "", "if", "resume_download", ":", "\n", "        ", "incomplete_path", "=", "cache_path", "+", "'.incomplete'", "\n", "@", "contextmanager", "\n", "def", "_resumable_file_manager", "(", ")", ":", "\n", "            ", "with", "open", "(", "incomplete_path", ",", "'a+b'", ")", "as", "f", ":", "\n", "                ", "yield", "f", "\n", "", "os", ".", "remove", "(", "incomplete_path", ")", "\n", "", "temp_file_manager", "=", "_resumable_file_manager", "\n", "if", "os", ".", "path", ".", "exists", "(", "incomplete_path", ")", ":", "\n", "            ", "resume_size", "=", "os", ".", "stat", "(", "incomplete_path", ")", ".", "st_size", "\n", "", "else", ":", "\n", "            ", "resume_size", "=", "0", "\n", "", "", "else", ":", "\n", "        ", "temp_file_manager", "=", "tempfile", ".", "NamedTemporaryFile", "\n", "resume_size", "=", "0", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "or", "force_download", ":", "\n", "# Download to temporary file, then copy to cache dir once finished.", "\n", "# Otherwise you get corrupt cache entries if the download gets interrupted.", "\n", "        ", "with", "temp_file_manager", "(", ")", "as", "temp_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"%s not found in cache or force_download set to True, downloading to %s\"", ",", "url", ",", "temp_file", ".", "name", ")", "\n", "\n", "# GET file object", "\n", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "                ", "if", "resume_download", ":", "\n", "                    ", "logger", ".", "warn", "(", "'Warning: resumable downloads are not implemented for \"s3://\" urls'", ")", "\n", "", "s3_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "proxies", ")", "\n", "", "else", ":", "\n", "                ", "http_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "proxies", ",", "resume_size", "=", "resume_size", ")", "\n", "\n", "# we are copying the file before closing it, so flush to avoid truncation", "\n", "", "temp_file", ".", "flush", "(", ")", "\n", "# shutil.copyfileobj() starts at the current position, so go to the start", "\n", "temp_file", ".", "seek", "(", "0", ")", "\n", "\n", "logger", ".", "info", "(", "\"copying %s to cache at %s\"", ",", "temp_file", ".", "name", ",", "cache_path", ")", "\n", "with", "open", "(", "cache_path", ",", "'wb'", ")", "as", "cache_file", ":", "\n", "                ", "shutil", ".", "copyfileobj", "(", "temp_file", ",", "cache_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"creating metadata file for %s\"", ",", "cache_path", ")", "\n", "meta", "=", "{", "'url'", ":", "url", ",", "'etag'", ":", "etag", "}", "\n", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "with", "open", "(", "meta_path", ",", "'w'", ")", "as", "meta_file", ":", "\n", "                ", "output_string", "=", "json", ".", "dumps", "(", "meta", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "output_string", ",", "str", ")", ":", "\n", "                    ", "output_string", "=", "unicode", "(", "output_string", ",", "'utf-8'", ")", "# The beauty of python 2", "\n", "", "meta_file", ".", "write", "(", "output_string", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"removing temp file %s\"", ",", "temp_file", ".", "name", ")", "\n", "\n", "", "", "return", "cache_path", "\n", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_camembert.CamembertTokenizer.__init__": [[52, 70], ["transformers.tokenization_utils.PreTrainedTokenizer.__init__", "sentencepiece.SentencePieceProcessor", "tokenization_camembert.CamembertTokenizer.sp_model.Load", "len", "str", "len", "len", "tokenization_camembert.CamembertTokenizer.fairseq_tokens_to_ids.items"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "bos_token", "=", "\"<s>\"", ",", "eos_token", "=", "\"</s>\"", ",", "sep_token", "=", "\"</s>\"", ",", "\n", "cls_token", "=", "\"<s>\"", ",", "unk_token", "=", "\"<unk>\"", ",", "pad_token", "=", "'<pad>'", ",", "mask_token", "=", "'<mask>'", ",", "\n", "additional_special_tokens", "=", "[", "'<s>NOTUSED'", ",", "'</s>NOTUSED'", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CamembertTokenizer", ",", "self", ")", ".", "__init__", "(", "max_len", "=", "512", ",", "bos_token", "=", "bos_token", ",", "eos_token", "=", "eos_token", ",", "unk_token", "=", "unk_token", ",", "\n", "sep_token", "=", "sep_token", ",", "cls_token", "=", "cls_token", ",", "pad_token", "=", "pad_token", ",", "\n", "mask_token", "=", "mask_token", ",", "additional_special_tokens", "=", "additional_special_tokens", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "4", "# take into account special tokens", "\n", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "sp_model", ".", "Load", "(", "str", "(", "vocab_file", ")", ")", "\n", "self", ".", "vocab_file", "=", "vocab_file", "\n", "# HACK: These tokens were added by fairseq but don't seem to be actually used when duplicated in the actual", "\n", "# sentencepiece vocabulary (this is the case for <s> and </s>", "\n", "self", ".", "fairseq_tokens_to_ids", "=", "{", "'<s>NOTUSED'", ":", "0", ",", "'<pad>'", ":", "1", ",", "'</s>NOTUSED'", ":", "2", ",", "'<unk>'", ":", "3", "}", "\n", "self", ".", "fairseq_offset", "=", "len", "(", "self", ".", "fairseq_tokens_to_ids", ")", "\n", "self", ".", "fairseq_tokens_to_ids", "[", "'<mask>'", "]", "=", "len", "(", "self", ".", "sp_model", ")", "+", "len", "(", "self", ".", "fairseq_tokens_to_ids", ")", "\n", "self", ".", "fairseq_ids_to_tokens", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "fairseq_tokens_to_ids", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_camembert.CamembertTokenizer.build_inputs_with_special_tokens": [[71, 84], ["None"], "methods", ["None"], ["", "def", "build_inputs_with_special_tokens", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build model inputs from a sequence or a pair of sequence for sequence classification tasks\n        by concatenating and adding special tokens.\n        A RoBERTa sequence has the following format:\n            single sequence: <s> X </s>\n            pair of sequences: <s> A </s></s> B </s>\n        \"\"\"", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "[", "self", ".", "cls_token_id", "]", "+", "token_ids_0", "+", "[", "self", ".", "sep_token_id", "]", "\n", "", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "return", "cls", "+", "token_ids_0", "+", "sep", "+", "sep", "+", "token_ids_1", "+", "sep", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_camembert.CamembertTokenizer.get_special_tokens_mask": [[85, 109], ["list", "ValueError", "map", "len", "len", "len"], "methods", ["None"], ["", "def", "get_special_tokens_mask", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ",", "already_has_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding\n        special tokens using the tokenizer ``prepare_for_model`` or ``encode_plus`` methods.\n\n        Args:\n            token_ids_0: list of ids (must not contain special tokens)\n            token_ids_1: Optional list of ids (must not contain special tokens), necessary when fetching sequence ids\n                for sequence pairs\n            already_has_special_tokens: (default False) Set to True if the token list is already formated with\n                special tokens for the model\n\n        Returns:\n            A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.\n        \"\"\"", "\n", "if", "already_has_special_tokens", ":", "\n", "            ", "if", "token_ids_1", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"You should not supply a second sequence if the provided sequence of \"", "\n", "\"ids is already formated with special tokens for the model.\"", ")", "\n", "", "return", "list", "(", "map", "(", "lambda", "x", ":", "1", "if", "x", "in", "[", "self", ".", "sep_token_id", ",", "self", ".", "cls_token_id", "]", "else", "0", ",", "token_ids_0", ")", ")", "\n", "\n", "", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "\n", "", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", ",", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_1", ")", ")", "+", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_camembert.CamembertTokenizer.create_token_type_ids_from_sequences": [[110, 125], ["len", "len", "len"], "methods", ["None"], ["", "def", "create_token_type_ids_from_sequences", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Creates a mask from the two sequences passed to be used in a sequence-pair classification task.\n        A RoBERTa sequence pair mask has the following format:\n        0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1\n        | first sequence    | second sequence\n\n        if token_ids_1 is None, only returns the first portion of the mask (0's).\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "\n", "", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", "+", "sep", ")", "*", "[", "0", "]", "+", "len", "(", "token_ids_1", "+", "sep", ")", "*", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_camembert.CamembertTokenizer.vocab_size": [[126, 129], ["len", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "fairseq_tokens_to_ids", ")", "+", "len", "(", "self", ".", "sp_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_camembert.CamembertTokenizer._tokenize": [[130, 132], ["tokenization_camembert.CamembertTokenizer.sp_model.EncodeAsPieces"], "methods", ["None"], ["", "def", "_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "return", "self", ".", "sp_model", ".", "EncodeAsPieces", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_camembert.CamembertTokenizer._convert_token_to_id": [[133, 141], ["tokenization_camembert.CamembertTokenizer.sp_model.PieceToId", "tokenization_camembert.CamembertTokenizer.sp_model.PieceToId"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "if", "token", "in", "self", ".", "fairseq_tokens_to_ids", ":", "\n", "            ", "return", "self", ".", "fairseq_tokens_to_ids", "[", "token", "]", "\n", "", "elif", "self", ".", "sp_model", ".", "PieceToId", "(", "token", ")", "==", "0", ":", "\n", "# Convert sentence piece unk token to fairseq unk token index", "\n", "            ", "return", "self", ".", "unk_token_id", "\n", "", "return", "self", ".", "fairseq_offset", "+", "self", ".", "sp_model", ".", "PieceToId", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_camembert.CamembertTokenizer._convert_id_to_token": [[142, 147], ["tokenization_camembert.CamembertTokenizer.sp_model.IdToPiece"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "if", "index", "in", "self", ".", "fairseq_ids_to_tokens", ":", "\n", "            ", "return", "self", ".", "fairseq_ids_to_tokens", "[", "index", "]", "\n", "", "return", "self", ".", "sp_model", ".", "IdToPiece", "(", "index", "-", "self", ".", "fairseq_offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_camembert.CamembertTokenizer.save_vocabulary": [[148, 161], ["os.path.join", "os.path.isdir", "logger.error", "os.path.abspath", "os.path.abspath", "shutil.copyfile"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save the sentencepiece vocabulary (copy original file) and special tokens file\n            to a directory.\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "out_vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "\n", "if", "os", ".", "path", ".", "abspath", "(", "self", ".", "vocab_file", ")", "!=", "os", ".", "path", ".", "abspath", "(", "out_vocab_file", ")", ":", "\n", "            ", "copyfile", "(", "self", ".", "vocab_file", ",", "out_vocab_file", ")", "\n", "\n", "", "return", "(", "out_vocab_file", ",", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_t5.T5Tokenizer.__init__": [[78, 102], ["tokenization_utils.PreTrainedTokenizer.__init__", "spm.SentencePieceProcessor", "tokenization_t5.T5Tokenizer.sp_model.Load", "additional_special_tokens.extend", "logger.warning", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "eos_token", "=", "\"</s>\"", ",", "unk_token", "=", "\"<unk>\"", ",", "\n", "pad_token", "=", "\"<pad>\"", ",", "extra_ids", "=", "100", ",", "additional_special_tokens", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# Add extra_ids to the special token list", "\n", "        ", "if", "extra_ids", ">", "0", ":", "\n", "            ", "if", "additional_special_tokens", "is", "None", ":", "\n", "                ", "additional_special_tokens", "=", "[", "]", "\n", "", "additional_special_tokens", ".", "extend", "(", "[", "u\"<extra_id_{}>\"", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "extra_ids", ")", "]", ")", "\n", "\n", "", "super", "(", "T5Tokenizer", ",", "self", ")", ".", "__init__", "(", "eos_token", "=", "eos_token", ",", "unk_token", "=", "unk_token", ",", "\n", "pad_token", "=", "pad_token", ",", "additional_special_tokens", "=", "additional_special_tokens", ",", "\n", "**", "kwargs", ")", "\n", "\n", "try", ":", "\n", "            ", "import", "sentencepiece", "as", "spm", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"You need to install SentencePiece to use T5Tokenizer:\"", "\n", "\"https://github.com/google/sentencepiece\"", "\n", "\"pip install sentencepiece\"", ")", "\n", "\n", "", "self", ".", "vocab_file", "=", "vocab_file", "\n", "self", ".", "_extra_ids", "=", "extra_ids", "\n", "\n", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "sp_model", ".", "Load", "(", "vocab_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_t5.T5Tokenizer.vocab_size": [[103, 106], ["tokenization_t5.T5Tokenizer.sp_model.get_piece_size"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sp_model", ".", "get_piece_size", "(", ")", "+", "self", ".", "_extra_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_t5.T5Tokenizer.__getstate__": [[107, 111], ["tokenization_t5.T5Tokenizer.__dict__.copy"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "state", "[", "\"sp_model\"", "]", "=", "None", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_t5.T5Tokenizer.__setstate__": [[112, 121], ["spm.SentencePieceProcessor", "tokenization_t5.T5Tokenizer.sp_model.Load", "logger.warning"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", "=", "d", "\n", "try", ":", "\n", "            ", "import", "sentencepiece", "as", "spm", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"You need to install SentencePiece to use XLNetTokenizer: https://github.com/google/sentencepiece\"", "\n", "\"pip install sentencepiece\"", ")", "\n", "", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "sp_model", ".", "Load", "(", "self", ".", "vocab_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_t5.T5Tokenizer._tokenize": [[122, 140], ["tokenization_t5.T5Tokenizer.sp_model.EncodeAsPieces", "tokenization_t5.T5Tokenizer.sp_model.SampleEncodeAsPieces", "isinstance", "ret_pieces.append", "piece.decode.decode.decode"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "return_unicode", "=", "True", ",", "sample", "=", "False", ")", ":", "\n", "        ", "\"\"\" Take as input a string and return a list of strings (tokens) for words/sub-words\n        \"\"\"", "\n", "if", "not", "sample", ":", "\n", "            ", "pieces", "=", "self", ".", "sp_model", ".", "EncodeAsPieces", "(", "text", ")", "\n", "", "else", ":", "\n", "            ", "pieces", "=", "self", ".", "sp_model", ".", "SampleEncodeAsPieces", "(", "text", ",", "64", ",", "0.1", ")", "\n", "\n", "# convert back to unicode for py2", "\n", "", "if", "six", ".", "PY2", "and", "return_unicode", ":", "\n", "            ", "ret_pieces", "=", "[", "]", "\n", "for", "piece", "in", "pieces", ":", "\n", "                ", "if", "isinstance", "(", "piece", ",", "str", ")", ":", "\n", "                    ", "piece", "=", "piece", ".", "decode", "(", "'utf-8'", ")", "\n", "", "ret_pieces", ".", "append", "(", "piece", ")", "\n", "", "pieces", "=", "ret_pieces", "\n", "\n", "", "return", "pieces", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_t5.T5Tokenizer._convert_token_to_id": [[141, 148], ["token.startswith", "tokenization_t5.T5Tokenizer.sp_model.piece_to_id", "re.match", "int", "re.match.group"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "if", "token", ".", "startswith", "(", "u\"<extra_id_\"", ")", ":", "\n", "            ", "l", "=", "re", ".", "match", "(", "r'<extra_id_(\\d+)>'", ",", "token", ")", "\n", "num", "=", "int", "(", "l", ".", "group", "(", "1", ")", ")", "\n", "return", "self", ".", "vocab_size", "-", "num", "-", "1", "\n", "", "return", "self", ".", "sp_model", ".", "piece_to_id", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_t5.T5Tokenizer._convert_id_to_token": [[149, 158], ["tokenization_t5.T5Tokenizer.sp_model.get_piece_size", "tokenization_t5.T5Tokenizer.sp_model.IdToPiece", "isinstance", "token.decode.decode.decode"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ",", "return_unicode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "if", "index", "<", "self", ".", "sp_model", ".", "get_piece_size", "(", ")", ":", "\n", "            ", "token", "=", "self", ".", "sp_model", ".", "IdToPiece", "(", "index", ")", "\n", "", "else", ":", "\n", "            ", "token", "=", "u\"<extra_id_{}>\"", ".", "format", "(", "self", ".", "vocab_size", "-", "1", "-", "index", ")", "\n", "", "if", "six", ".", "PY2", "and", "return_unicode", "and", "isinstance", "(", "token", ",", "str", ")", ":", "\n", "            ", "token", "=", "token", ".", "decode", "(", "'utf-8'", ")", "\n", "", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_t5.T5Tokenizer.convert_tokens_to_string": [[159, 163], ["tokenization_t5.T5Tokenizer.sp_model.decode_pieces"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "self", ".", "sp_model", ".", "decode_pieces", "(", "tokens", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_t5.T5Tokenizer.save_vocabulary": [[164, 177], ["os.path.join", "os.path.isdir", "logger.error", "os.path.abspath", "os.path.abspath", "shutil.copyfile"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save the sentencepiece vocabulary (copy original file) and special tokens file\n            to a directory.\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "out_vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "\n", "if", "os", ".", "path", ".", "abspath", "(", "self", ".", "vocab_file", ")", "!=", "os", ".", "path", ".", "abspath", "(", "out_vocab_file", ")", ":", "\n", "            ", "copyfile", "(", "self", ".", "vocab_file", ",", "out_vocab_file", ")", "\n", "\n", "", "return", "(", "out_vocab_file", ",", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.convert_transfo_xl_checkpoint_to_pytorch": [[48, 91], ["print", "torch.save", "corpus_dict_no_vocab.pop", "print", "torch.save", "os.path.abspath", "os.path.abspath", "print", "print", "transformers.TransfoXLLMHeadModel", "transformers.load_tf_weights_in_transfo_xl", "os.path.join", "os.path.join", "print", "torch.save", "print", "io.open", "pickle.load", "transformers.TransfoXLConfig", "transformers.TransfoXLConfig.from_json_file", "transformers.load_tf_weights_in_transfo_xl.state_dict", "io.open", "f.write", "str", "os.path.abspath", "os.path.abspath", "TransfoXLConfig.from_json_file.to_json_string"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl.load_tf_weights_in_transfo_xl", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string"], ["def", "convert_transfo_xl_checkpoint_to_pytorch", "(", "tf_checkpoint_path", ",", "\n", "transfo_xl_config_file", ",", "\n", "pytorch_dump_folder_path", ",", "\n", "transfo_xl_dataset_file", ")", ":", "\n", "    ", "if", "transfo_xl_dataset_file", ":", "\n", "# Convert a pre-processed corpus (see original TensorFlow repo)", "\n", "        ", "with", "open", "(", "transfo_xl_dataset_file", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "            ", "corpus", "=", "pickle", ".", "load", "(", "fp", ",", "encoding", "=", "\"latin1\"", ")", "\n", "# Save vocabulary and dataset cache as Dictionaries (should be better than pickles for the long-term)", "\n", "", "pytorch_vocab_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "VOCAB_FILES_NAMES", "[", "'pretrained_vocab_file'", "]", "\n", "print", "(", "\"Save vocabulary to {}\"", ".", "format", "(", "pytorch_vocab_dump_path", ")", ")", "\n", "corpus_vocab_dict", "=", "corpus", ".", "vocab", ".", "__dict__", "\n", "torch", ".", "save", "(", "corpus_vocab_dict", ",", "pytorch_vocab_dump_path", ")", "\n", "\n", "corpus_dict_no_vocab", "=", "corpus", ".", "__dict__", "\n", "corpus_dict_no_vocab", ".", "pop", "(", "'vocab'", ",", "None", ")", "\n", "pytorch_dataset_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "CORPUS_NAME", "\n", "print", "(", "\"Save dataset to {}\"", ".", "format", "(", "pytorch_dataset_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "corpus_dict_no_vocab", ",", "pytorch_dataset_dump_path", ")", "\n", "\n", "", "if", "tf_checkpoint_path", ":", "\n", "# Convert a pre-trained TensorFlow model", "\n", "        ", "config_path", "=", "os", ".", "path", ".", "abspath", "(", "transfo_xl_config_file", ")", "\n", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "tf_checkpoint_path", ")", "\n", "\n", "print", "(", "\"Converting Transformer XL checkpoint from {} with config at {}\"", ".", "format", "(", "tf_path", ",", "config_path", ")", ")", "\n", "# Initialise PyTorch model", "\n", "if", "transfo_xl_config_file", "==", "\"\"", ":", "\n", "            ", "config", "=", "TransfoXLConfig", "(", ")", "\n", "", "else", ":", "\n", "            ", "config", "=", "TransfoXLConfig", ".", "from_json_file", "(", "transfo_xl_config_file", ")", "\n", "", "print", "(", "\"Building PyTorch model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "model", "=", "TransfoXLLMHeadModel", "(", "config", ")", "\n", "\n", "model", "=", "load_tf_weights_in_transfo_xl", "(", "model", ",", "config", ",", "tf_path", ")", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "os", ".", "path", ".", "join", "(", "pytorch_dump_folder_path", ",", "WEIGHTS_NAME", ")", "\n", "pytorch_config_dump_path", "=", "os", ".", "path", ".", "join", "(", "pytorch_dump_folder_path", ",", "CONFIG_NAME", ")", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "pytorch_weights_dump_path", ")", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_weights_dump_path", ")", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "pytorch_config_dump_path", ")", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_auto.AutoModel.__init__": [[86, 88], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoModel is designed to be instantiated \"", "\n", "\"using the `AutoModel.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_auto.AutoModel.from_pretrained": [[90, 197], ["ValueError", "modeling_t5.T5Model.from_pretrained", "modeling_distilbert.DistilBertModel.from_pretrained", "modeling_albert.AlbertModel.from_pretrained", "modeling_camembert.CamembertModel.from_pretrained", "modeling_roberta.RobertaModel.from_pretrained", "modeling_bert.BertModel.from_pretrained", "modeling_openai.OpenAIGPTModel.from_pretrained", "modeling_gpt2.GPT2Model.from_pretrained", "modeling_transfo_xl.TransfoXLModel.from_pretrained", "modeling_xlnet.XLNetModel.from_pretrained", "modeling_xlm.XLMModel.from_pretrained", "modeling_ctrl.CTRLModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the base model classes of the library\n        from a pre-trained model configuration.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `t5`: T5Model (T5 model)\n            - contains `distilbert`: DistilBertModel (DistilBERT model)\n            - contains `albert`: AlbertModel (ALBERT model)\n            - contains `camembert`: CamembertModel (CamemBERT model)\n            - contains `roberta`: RobertaModel (RoBERTa model)\n            - contains `bert`: BertModel (Bert model)\n            - contains `openai-gpt`: OpenAIGPTModel (OpenAI GPT model)\n            - contains `gpt2`: GPT2Model (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TransfoXLModel (Transformer-XL model)\n            - contains `xlnet`: XLNetModel (XLNet model)\n            - contains `xlm`: XLMModel (XLM model)\n            - contains `ctrl`: CTRLModel (Salesforce CTRL model)\n\n            The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n            To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = AutoModel.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = AutoModel.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = AutoModel.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = AutoModel.from_pretrained('./tf_model/bert_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "if", "'t5'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "T5Model", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'albert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "AlbertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'camembert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CamembertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "OpenAIGPTModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "GPT2Model", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TransfoXLModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'ctrl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CTRLModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta, 'ctrl', 'distilbert', 'camembert', 'albert'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_auto.AutoModelWithLMHead.__init__": [[226, 228], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `AutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_auto.AutoModelWithLMHead.from_pretrained": [[230, 339], ["ValueError", "modeling_t5.T5WithLMHeadModel.from_pretrained", "modeling_distilbert.DistilBertForMaskedLM.from_pretrained", "modeling_albert.AlbertForMaskedLM.from_pretrained", "modeling_camembert.CamembertForMaskedLM.from_pretrained", "modeling_roberta.RobertaForMaskedLM.from_pretrained", "modeling_bert.BertForMaskedLM.from_pretrained", "modeling_openai.OpenAIGPTLMHeadModel.from_pretrained", "modeling_gpt2.GPT2LMHeadModel.from_pretrained", "modeling_transfo_xl.TransfoXLLMHeadModel.from_pretrained", "modeling_xlnet.XLNetLMHeadModel.from_pretrained", "modeling_xlm.XLMWithLMHeadModel.from_pretrained", "modeling_ctrl.CTRLLMHeadModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the language modeling model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `t5`: T5ModelWithLMHead (T5 model)\n            - contains `distilbert`: DistilBertForMaskedLM (DistilBERT model)\n            - contains `albert`: AlbertForMaskedLM (ALBERT model)\n            - contains `camembert`: CamembertForMaskedLM (CamemBERT model)\n            - contains `roberta`: RobertaForMaskedLM (RoBERTa model)\n            - contains `bert`: BertForMaskedLM (Bert model)\n            - contains `openai-gpt`: OpenAIGPTLMHeadModel (OpenAI GPT model)\n            - contains `gpt2`: GPT2LMHeadModel (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TransfoXLLMHeadModel (Transformer-XL model)\n            - contains `xlnet`: XLNetLMHeadModel (XLNet model)\n            - contains `xlm`: XLMWithLMHeadModel (XLM model)\n            - contains `ctrl`: CTRLLMHeadModel (Salesforce CTRL model)\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = AutoModelWithLMHead.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = AutoModelWithLMHead.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = AutoModelWithLMHead.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = AutoModelWithLMHead.from_pretrained('./tf_model/bert_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "if", "'t5'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "T5WithLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'albert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "AlbertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'camembert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CamembertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "OpenAIGPTLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "GPT2LMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TransfoXLLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMWithLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'ctrl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CTRLLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta','ctrl', 'distilbert', 'camembert', 'albert'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_auto.AutoModelForSequenceClassification.__init__": [[363, 365], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `AutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_auto.AutoModelForSequenceClassification.from_pretrained": [[367, 462], ["ValueError", "modeling_distilbert.DistilBertForSequenceClassification.from_pretrained", "modeling_albert.AlbertForSequenceClassification.from_pretrained", "modeling_camembert.CamembertForSequenceClassification.from_pretrained", "modeling_roberta.RobertaForSequenceClassification.from_pretrained", "modeling_bert.BertForSequenceClassification.from_pretrained", "modeling_xlnet.XLNetForSequenceClassification.from_pretrained", "modeling_xlm.XLMForSequenceClassification.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the sequence classification model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: DistilBertForSequenceClassification (DistilBERT model)\n            - contains `albert`: AlbertForSequenceClassification (ALBERT model)\n            - contains `camembert`: CamembertForSequenceClassification (CamemBERT model)\n            - contains `roberta`: RobertaForSequenceClassification (RoBERTa model)\n            - contains `bert`: BertForSequenceClassification (Bert model)\n            - contains `xlnet`: XLNetForSequenceClassification (XLNet model)\n            - contains `xlm`: XLMForSequenceClassification (XLM model)\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = AutoModelForSequenceClassification.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = AutoModelForSequenceClassification.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = AutoModelForSequenceClassification.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = AutoModelForSequenceClassification.from_pretrained('./tf_model/bert_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'albert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "AlbertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'camembert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CamembertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'xlnet', 'xlm', 'roberta', 'distilbert', 'camembert', 'albert'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_auto.AutoModelForQuestionAnswering.__init__": [[484, 486], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `AutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_auto.AutoModelForQuestionAnswering.from_pretrained": [[488, 574], ["ValueError", "modeling_distilbert.DistilBertForQuestionAnswering.from_pretrained", "modeling_albert.AlbertForQuestionAnswering.from_pretrained", "modeling_bert.BertForQuestionAnswering.from_pretrained", "modeling_xlnet.XLNetForQuestionAnswering.from_pretrained", "modeling_xlm.XLMForQuestionAnswering.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the question answering model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: DistilBertForQuestionAnswering (DistilBERT model)\n            - contains `albert`: AlbertForQuestionAnswering (ALBERT model)\n            - contains `bert`: BertForQuestionAnswering (Bert model)\n            - contains `xlnet`: XLNetForQuestionAnswering (XLNet model)\n            - contains `xlm`: XLMForQuestionAnswering (XLM model)\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = AutoModelForQuestionAnswering.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = AutoModelForQuestionAnswering.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = AutoModelForQuestionAnswering.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = AutoModelForQuestionAnswering.from_pretrained('./tf_model/bert_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'albert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "AlbertForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'xlnet', 'xlm', 'distilbert', 'albert'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_gpt2_original_tf_checkpoint_to_pytorch.convert_gpt2_checkpoint_to_pytorch": [[33, 52], ["transformers.GPT2Model", "transformers.load_tf_weights_in_gpt2", "print", "torch.save", "print", "transformers.GPT2Config", "transformers.GPT2Config.from_json_file", "transformers.GPT2Model.state_dict", "io.open", "f.write", "GPT2Config.from_json_file.to_json_string"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_gpt2.load_tf_weights_in_gpt2", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string"], ["def", "convert_gpt2_checkpoint_to_pytorch", "(", "gpt2_checkpoint_path", ",", "gpt2_config_file", ",", "pytorch_dump_folder_path", ")", ":", "\n", "# Construct model", "\n", "    ", "if", "gpt2_config_file", "==", "\"\"", ":", "\n", "        ", "config", "=", "GPT2Config", "(", ")", "\n", "", "else", ":", "\n", "        ", "config", "=", "GPT2Config", ".", "from_json_file", "(", "gpt2_config_file", ")", "\n", "", "model", "=", "GPT2Model", "(", "config", ")", "\n", "\n", "# Load weights from numpy", "\n", "load_tf_weights_in_gpt2", "(", "model", ",", "config", ",", "gpt2_checkpoint_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "WEIGHTS_NAME", "\n", "pytorch_config_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "CONFIG_NAME", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_weights_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_weights_dump_path", ")", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "pytorch_config_dump_path", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaEmbeddings.__init__": [[46, 52], ["modeling_bert.BertEmbeddings.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaEmbeddings", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "padding_idx", "=", "1", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "self", ".", "padding_idx", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ",", "\n", "padding_idx", "=", "self", ".", "padding_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaEmbeddings.forward": [[53, 71], ["super().forward", "input_ids.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "inputs_embeds.size", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLS.forward"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "\n", "if", "position_ids", "is", "None", ":", "\n", "# Position numbers begin at padding_idx+1. Padding symbols are ignored.", "\n", "# cf. fairseq's `utils.make_positions`", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "self", ".", "padding_idx", "+", "1", ",", "seq_length", "+", "self", ".", "padding_idx", "+", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "input_shape", ")", "\n", "", "return", "super", "(", "RobertaEmbeddings", ",", "self", ")", ".", "forward", "(", "input_ids", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaModel.__init__": [[180, 185], ["modeling_bert.BertModel.__init__", "modeling_roberta.RobertaEmbeddings", "modeling_roberta.RobertaModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "embeddings", "=", "RobertaEmbeddings", "(", "config", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaModel.get_input_embeddings": [[186, 188], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaModel.set_input_embeddings": [[189, 191], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "embeddings", ".", "word_embeddings", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaForMaskedLM.__init__": [[228, 235], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "modeling_roberta.RobertaLMHead", "modeling_roberta.RobertaForMaskedLM.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "RobertaLMHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaForMaskedLM.get_output_embeddings": [[236, 238], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", ".", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaForMaskedLM.forward": [[239, 258], ["modeling_roberta.RobertaForMaskedLM.roberta", "modeling_roberta.RobertaForMaskedLM.lm_head", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_roberta.RobertaForMaskedLM.view", "masked_lm_labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "masked_lm_labels", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "lm_head", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "masked_lm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (masked_lm_loss), prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaLMHead.__init__": [[263, 270], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "modeling_bert.BertLayerNorm", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "layer_norm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "config", ".", "vocab_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaLMHead.forward": [[271, 280], ["modeling_roberta.RobertaLMHead.dense", "modeling_bert.gelu", "modeling_roberta.RobertaLMHead.layer_norm", "modeling_roberta.RobertaLMHead.decoder"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.gelu"], ["", "def", "forward", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "dense", "(", "features", ")", "\n", "x", "=", "gelu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# project back to size of vocabulary with bias", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "+", "self", ".", "bias", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaForSequenceClassification.__init__": [[320, 326], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "modeling_roberta.RobertaClassificationHead"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "classifier", "=", "RobertaClassificationHead", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaForSequenceClassification.forward": [[327, 350], ["modeling_roberta.RobertaForSequenceClassification.roberta", "modeling_roberta.RobertaForSequenceClassification.classifier", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_roberta.RobertaForSequenceClassification.view", "labels.view", "modeling_roberta.RobertaForSequenceClassification.view", "labels.view"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "labels", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaForMultipleChoice.__init__": [[429, 437], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "modeling_roberta.RobertaForMultipleChoice.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaForMultipleChoice.forward": [[438, 462], ["input_ids.view", "modeling_roberta.RobertaForMultipleChoice.roberta", "modeling_roberta.RobertaForMultipleChoice.dropout", "modeling_roberta.RobertaForMultipleChoice.classifier", "modeling_roberta.RobertaForMultipleChoice.view", "input_ids.size", "position_ids.view", "token_type_ids.view", "attention_mask.view", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "position_ids.size", "token_type_ids.size", "attention_mask.size"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "num_choices", "=", "input_ids", ".", "shape", "[", "1", "]", "\n", "\n", "flat_input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "flat_position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "position_ids", ".", "size", "(", "-", "1", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "flat_token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "size", "(", "-", "1", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "outputs", "=", "self", ".", "roberta", "(", "flat_input_ids", ",", "position_ids", "=", "flat_position_ids", ",", "token_type_ids", "=", "flat_token_type_ids", ",", "\n", "attention_mask", "=", "flat_attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "reshaped_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_choices", ")", "\n", "\n", "outputs", "=", "(", "reshaped_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "reshaped_logits", ",", "labels", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), reshaped_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaForTokenClassification.__init__": [[500, 509], ["modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "modeling_roberta.RobertaForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaForTokenClassification.forward": [[510, 539], ["modeling_roberta.RobertaForTokenClassification.roberta", "modeling_roberta.RobertaForTokenClassification.dropout", "modeling_roberta.RobertaForTokenClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "attention_mask.view", "modeling_roberta.RobertaForTokenClassification.view", "labels.view", "modeling_roberta.RobertaForTokenClassification.view", "labels.view"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "# Only keep active parts of the loss", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "                ", "active_loss", "=", "attention_mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "[", "active_loss", "]", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "[", "active_loss", "]", "\n", "loss", "=", "loss_fct", "(", "active_logits", ",", "active_labels", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaClassificationHead.__init__": [[544, 549], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaClassificationHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_roberta.RobertaClassificationHead.forward": [[550, 558], ["modeling_roberta.RobertaClassificationHead.dropout", "modeling_roberta.RobertaClassificationHead.dense", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "modeling_roberta.RobertaClassificationHead.dropout", "modeling_roberta.RobertaClassificationHead.out_proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "features", "[", ":", ",", "0", ",", ":", "]", "# take <s> token (equiv. to [CLS])", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "dense", "(", "x", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_ctrl.CTRLConfig.__init__": [[53, 113], ["configuration_utils.PretrainedConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "vocab_size", "=", "246534", ",", "\n", "n_positions", "=", "256", ",", "\n", "n_ctx", "=", "256", ",", "\n", "n_embd", "=", "1280", ",", "\n", "dff", "=", "8192", ",", "\n", "n_layer", "=", "48", ",", "\n", "n_head", "=", "16", ",", "\n", "resid_pdrop", "=", "0.1", ",", "\n", "embd_pdrop", "=", "0.1", ",", "\n", "attn_pdrop", "=", "0.1", ",", "\n", "layer_norm_epsilon", "=", "1e-6", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "summary_type", "=", "'cls_index'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "None", ",", "\n", "summary_proj_to_labels", "=", "True", ",", "\n", "summary_first_dropout", "=", "0.1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Constructs CTRLConfig.\n\n        Args:\n            vocab_size: Vocabulary size of `inputs_ids` in `CTRLModel` or a configuration json file.\n            n_positions: Number of positional embeddings.\n            n_ctx: Size of the causal mask (usually same as n_positions).\n            dff: Size of the inner dimension of the FFN.\n            n_embd: Dimensionality of the embeddings and hidden states.\n            n_layer: Number of hidden layers in the Transformer encoder.\n            n_head: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            layer_norm_epsilon: epsilon to use in the layer norm layers\n            resid_pdrop: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attn_pdrop: The dropout ratio for the attention\n                probabilities.\n            embd_pdrop: The dropout ratio for the embeddings.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "super", "(", "CTRLConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_positions", "=", "n_positions", "\n", "self", ".", "n_embd", "=", "n_embd", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "dff", "=", "dff", "\n", "self", ".", "resid_pdrop", "=", "resid_pdrop", "\n", "self", ".", "embd_pdrop", "=", "embd_pdrop", "\n", "self", ".", "attn_pdrop", "=", "attn_pdrop", "\n", "self", ".", "layer_norm_epsilon", "=", "layer_norm_epsilon", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_first_dropout", "=", "summary_first_dropout", "\n", "self", ".", "summary_proj_to_labels", "=", "summary_proj_to_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_ctrl.CTRLConfig.max_position_embeddings": [[114, 117], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_ctrl.CTRLConfig.hidden_size": [[118, 121], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_embd", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_ctrl.CTRLConfig.num_attention_heads": [[122, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_ctrl.CTRLConfig.num_hidden_layers": [[126, 129], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.bos_token": [[139, 142], ["None"], "methods", ["None"], ["", "@", "bos_token", ".", "setter", "\n", "def", "bos_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_bos_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.eos_token": [[143, 146], ["None"], "methods", ["None"], ["", "@", "eos_token", ".", "setter", "\n", "def", "eos_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_eos_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.unk_token": [[147, 150], ["None"], "methods", ["None"], ["", "@", "unk_token", ".", "setter", "\n", "def", "unk_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_unk_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.sep_token": [[151, 154], ["None"], "methods", ["None"], ["", "@", "sep_token", ".", "setter", "\n", "def", "sep_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_sep_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.pad_token": [[155, 158], ["None"], "methods", ["None"], ["", "@", "pad_token", ".", "setter", "\n", "def", "pad_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_pad_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.cls_token": [[159, 162], ["None"], "methods", ["None"], ["", "@", "cls_token", ".", "setter", "\n", "def", "cls_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_cls_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.mask_token": [[163, 166], ["None"], "methods", ["None"], ["", "@", "mask_token", ".", "setter", "\n", "def", "mask_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_mask_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.additional_special_tokens": [[167, 170], ["None"], "methods", ["None"], ["", "@", "additional_special_tokens", ".", "setter", "\n", "def", "additional_special_tokens", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_additional_special_tokens", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.bos_token_id": [[171, 175], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "bos_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the beginning of sentence token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "bos_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.eos_token_id": [[176, 180], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "eos_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the end of sentence token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "eos_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.unk_token_id": [[181, 185], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "unk_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the unknown token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.sep_token_id": [[186, 190], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "sep_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the separation token in the vocabulary. E.g. separate context and query in an input sequence. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "sep_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.pad_token_id": [[191, 195], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "pad_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the padding token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "pad_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.pad_token_type_id": [[196, 200], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "pad_token_type_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the padding token type in the vocabulary.\"\"\"", "\n", "return", "self", ".", "_pad_token_type_id", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.cls_token_id": [[201, 205], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "cls_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the classification token in the vocabulary. E.g. to extract a summary of an input sequence leveraging self-attention along the full depth of the model. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "cls_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.mask_token_id": [[206, 210], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "mask_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the mask token in the vocabulary. E.g. when training a model with masked-language modeling. Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "mask_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.additional_special_tokens_ids": [[211, 215], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "additional_special_tokens_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\" Ids of all the additional special tokens in the vocabulary (list of integers). Log an error if used while not having been set. \"\"\"", "\n", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "additional_special_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.__init__": [[216, 247], ["kwargs.pop", "kwargs.items", "int", "setattr", "isinstance", "all", "isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "max_len", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_bos_token", "=", "None", "\n", "self", ".", "_eos_token", "=", "None", "\n", "self", ".", "_unk_token", "=", "None", "\n", "self", ".", "_sep_token", "=", "None", "\n", "self", ".", "_pad_token", "=", "None", "\n", "self", ".", "_cls_token", "=", "None", "\n", "self", ".", "_mask_token", "=", "None", "\n", "self", ".", "_pad_token_type_id", "=", "0", "\n", "self", ".", "_additional_special_tokens", "=", "[", "]", "\n", "\n", "self", ".", "max_len", "=", "max_len", "if", "max_len", "is", "not", "None", "else", "int", "(", "1e12", ")", "\n", "\n", "# Padding side is right by default and over-riden in subclasses. If specified in the kwargs, it is changed.", "\n", "self", ".", "padding_side", "=", "kwargs", ".", "pop", "(", "'padding_side'", ",", "self", ".", "padding_side", ")", "\n", "\n", "# Added tokens", "\n", "self", ".", "added_tokens_encoder", "=", "{", "}", "\n", "self", ".", "added_tokens_decoder", "=", "{", "}", "\n", "\n", "# inputs and kwargs for saving and re-loading (see ``from_pretrained`` and ``save_pretrained``)", "\n", "self", ".", "init_inputs", "=", "(", ")", "\n", "self", ".", "init_kwargs", "=", "{", "}", "\n", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "self", ".", "SPECIAL_TOKENS_ATTRIBUTES", ":", "\n", "                ", "if", "key", "==", "'additional_special_tokens'", ":", "\n", "                    ", "assert", "isinstance", "(", "value", ",", "(", "list", ",", "tuple", ")", ")", "and", "all", "(", "isinstance", "(", "t", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "t", ",", "unicode", ")", ")", "for", "t", "in", "value", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "isinstance", "(", "value", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "value", ",", "unicode", ")", ")", "\n", "", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.from_pretrained": [[249, 303], ["cls._from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer._from_pretrained"], ["", "", "", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        Instantiate a :class:`~transformers.PreTrainedTokenizer` (or a derived class) from a predefined tokenizer.\n\n        Args:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a predefined tokenizer to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a predefined tokenizer that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing vocabulary files required by the tokenizer, for instance saved using the :func:`~transformers.PreTrainedTokenizer.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - (not applicable to all derived classes) a path or url to a single saved vocabulary file if and only if the tokenizer only requires a single vocabulary file (e.g. Bert, XLNet), e.g.: ``./my_model_directory/vocab.txt``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded predefined tokenizer vocabulary files should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the vocabulary files and override the cached versions if they exists.\n\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            inputs: (`optional`) positional arguments: will be passed to the Tokenizer ``__init__`` method.\n\n            kwargs: (`optional`) keyword arguments: will be passed to the Tokenizer ``__init__`` method. Can be used to set special tokens like ``bos_token``, ``eos_token``, ``unk_token``, ``sep_token``, ``pad_token``, ``cls_token``, ``mask_token``, ``additional_special_tokens``. See parameters in the doc string of :class:`~transformers.PreTrainedTokenizer` for details.\n\n        Examples::\n\n            # We can't instantiate directly the base class `PreTrainedTokenizer` so let's show our examples on a derived class: BertTokenizer\n\n            # Download vocabulary from S3 and cache.\n            tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n\n            # Download vocabulary from S3 (user-uploaded) and cache.\n            tokenizer = BertTokenizer.from_pretrained('dbmdz/bert-base-german-cased')\n\n            # If vocabulary files are in a directory (e.g. tokenizer was saved using `save_pretrained('./test/saved_model/')`)\n            tokenizer = BertTokenizer.from_pretrained('./test/saved_model/')\n\n            # If the tokenizer uses a single vocabulary file, you can point directly to this file\n            tokenizer = BertTokenizer.from_pretrained('./test/saved_model/my_vocab.txt')\n\n            # You can link tokens to special vocabulary when instantiating\n            tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', unk_token='<unk>')\n            # You should be sure '<unk>' is in the vocabulary when doing that.\n            # Otherwise use tokenizer.add_special_tokens({'unk_token': '<unk>'}) instead)\n            assert tokenizer.unk_token == '<unk>'\n\n        \"\"\"", "\n", "return", "cls", ".", "_from_pretrained", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer._from_pretrained": [[305, 452], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "list", "vocab_files.items", "resolved_vocab_files.pop", "json.load.update", "resolved_vocab_files.pop", "resolved_vocab_files.pop", "resolved_vocab_files.items", "cls", "cls.max_model_input_sizes.keys", "cls.pretrained_vocab_files_map.items", "logger.info", "cls.vocab_files_names.items", "additional_files_names.items", "all", "vocab_files.items", "json.load.pop", "json.load.items", "cls.added_tokens_encoder.update", "cls.added_tokens_decoder.update", "os.path.isdir", "os.path.exists", "os.path.dirname", "os.path.join", "EnvironmentError", "EnvironmentError", "logger.info", "logger.info", "io.open", "json.load", "isinstance", "min", "io.open", "json.load", "io.open", "json.load", "os.path.join", "os.path.isdir", "os.path.exists", "logger.info", "file_utils.cached_path", "json.load.get", "json.load.items", "os.path.exists", "logger.info", "os.path.isfile", "file_utils.is_remote_url", "file_utils.hf_bucket_url", "vocab_files.values", "list", "list", "int", "cls.vocab_files_names.values", "cls.vocab_files_names.values"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.cached_path", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_remote_url", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.hf_bucket_url"], ["", "@", "classmethod", "\n", "def", "_from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "init_inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "resume_download", "=", "kwargs", ".", "pop", "(", "'resume_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "\n", "s3_models", "=", "list", "(", "cls", ".", "max_model_input_sizes", ".", "keys", "(", ")", ")", "\n", "vocab_files", "=", "{", "}", "\n", "init_configuration", "=", "{", "}", "\n", "if", "pretrained_model_name_or_path", "in", "s3_models", ":", "\n", "# Get the vocabulary from AWS S3 bucket", "\n", "            ", "for", "file_id", ",", "map_list", "in", "cls", ".", "pretrained_vocab_files_map", ".", "items", "(", ")", ":", "\n", "                ", "vocab_files", "[", "file_id", "]", "=", "map_list", "[", "pretrained_model_name_or_path", "]", "\n", "", "if", "cls", ".", "pretrained_init_configuration", "and", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_init_configuration", ":", "\n", "                ", "init_configuration", "=", "cls", ".", "pretrained_init_configuration", "[", "pretrained_model_name_or_path", "]", "\n", "", "", "else", ":", "\n", "# Get the vocabulary from local files", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Model name '{}' not found in model shortcut name list ({}). \"", "\n", "\"Assuming '{}' is a path or url to a directory containing tokenizer files.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "', '", ".", "join", "(", "s3_models", ")", ",", "\n", "pretrained_model_name_or_path", ")", ")", "\n", "\n", "# Look for the tokenizer main vocabulary files", "\n", "for", "file_id", ",", "file_name", "in", "cls", ".", "vocab_files_names", ".", "items", "(", ")", ":", "\n", "                ", "if", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "# If a directory is provided we look for the standard filenames", "\n", "                    ", "full_file_name", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "full_file_name", ")", ":", "\n", "                        ", "logger", ".", "info", "(", "\"Didn't find file {}. We won't load it.\"", ".", "format", "(", "full_file_name", ")", ")", "\n", "full_file_name", "=", "None", "\n", "", "", "elif", "os", ".", "path", ".", "isfile", "(", "pretrained_model_name_or_path", ")", "or", "is_remote_url", "(", "pretrained_model_name_or_path", ")", ":", "\n", "# If a path to a file is provided we use it (will only work for non-BPE tokenizer using a single vocabulary file)", "\n", "                    ", "full_file_name", "=", "pretrained_model_name_or_path", "\n", "", "else", ":", "\n", "                    ", "full_file_name", "=", "hf_bucket_url", "(", "pretrained_model_name_or_path", ",", "postfix", "=", "file_name", ")", "\n", "\n", "", "vocab_files", "[", "file_id", "]", "=", "full_file_name", "\n", "\n", "# Look for the additional tokens files", "\n", "", "additional_files_names", "=", "{", "'added_tokens_file'", ":", "ADDED_TOKENS_FILE", ",", "\n", "'special_tokens_map_file'", ":", "SPECIAL_TOKENS_MAP_FILE", ",", "\n", "'tokenizer_config_file'", ":", "TOKENIZER_CONFIG_FILE", ",", "\n", "}", "\n", "\n", "# If a path to a file was provided, get the parent directory", "\n", "saved_directory", "=", "pretrained_model_name_or_path", "\n", "if", "os", ".", "path", ".", "exists", "(", "saved_directory", ")", "and", "not", "os", ".", "path", ".", "isdir", "(", "saved_directory", ")", ":", "\n", "                ", "saved_directory", "=", "os", ".", "path", ".", "dirname", "(", "saved_directory", ")", "\n", "\n", "", "for", "file_id", ",", "file_name", "in", "additional_files_names", ".", "items", "(", ")", ":", "\n", "                ", "full_file_name", "=", "os", ".", "path", ".", "join", "(", "saved_directory", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "full_file_name", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Didn't find file {}. We won't load it.\"", ".", "format", "(", "full_file_name", ")", ")", "\n", "full_file_name", "=", "None", "\n", "", "vocab_files", "[", "file_id", "]", "=", "full_file_name", "\n", "\n", "", "if", "all", "(", "full_file_name", "is", "None", "for", "full_file_name", "in", "vocab_files", ".", "values", "(", ")", ")", ":", "\n", "                ", "raise", "EnvironmentError", "(", "\n", "\"Model name '{}' was not found in tokenizers model name list ({}). \"", "\n", "\"We assumed '{}' was a path or url to a directory containing vocabulary files \"", "\n", "\"named {} but couldn't find such vocabulary files at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "', '", ".", "join", "(", "s3_models", ")", ",", "\n", "pretrained_model_name_or_path", ",", "\n", "list", "(", "cls", ".", "vocab_files_names", ".", "values", "(", ")", ")", ")", ")", "\n", "\n", "# Get files from url, cache, or disk depending on the case", "\n", "", "", "try", ":", "\n", "            ", "resolved_vocab_files", "=", "{", "}", "\n", "for", "file_id", ",", "file_path", "in", "vocab_files", ".", "items", "(", ")", ":", "\n", "                ", "if", "file_path", "is", "None", ":", "\n", "                    ", "resolved_vocab_files", "[", "file_id", "]", "=", "None", "\n", "", "else", ":", "\n", "                    ", "resolved_vocab_files", "[", "file_id", "]", "=", "cached_path", "(", "file_path", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ",", "resume_download", "=", "resume_download", ")", "\n", "", "", "", "except", "EnvironmentError", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "s3_models", ":", "\n", "                ", "msg", "=", "\"Couldn't reach server at '{}' to download vocabulary files.\"", "\n", "", "else", ":", "\n", "                ", "msg", "=", "\"Model name '{}' was not found in tokenizers model name list ({}). \"", "\"We assumed '{}' was a path or url to a directory containing vocabulary files \"", "\"named {}, but couldn't find such vocabulary files at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "', '", ".", "join", "(", "s3_models", ")", ",", "\n", "pretrained_model_name_or_path", ",", "\n", "list", "(", "cls", ".", "vocab_files_names", ".", "values", "(", ")", ")", ")", "\n", "\n", "", "raise", "EnvironmentError", "(", "msg", ")", "\n", "\n", "", "for", "file_id", ",", "file_path", "in", "vocab_files", ".", "items", "(", ")", ":", "\n", "            ", "if", "file_path", "==", "resolved_vocab_files", "[", "file_id", "]", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading file {}\"", ".", "format", "(", "file_path", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading file {} from cache at {}\"", ".", "format", "(", "\n", "file_path", ",", "resolved_vocab_files", "[", "file_id", "]", ")", ")", "\n", "\n", "# Prepare tokenizer initialization kwargs", "\n", "# Did we saved some inputs and kwargs to reload ?", "\n", "", "", "tokenizer_config_file", "=", "resolved_vocab_files", ".", "pop", "(", "'tokenizer_config_file'", ",", "None", ")", "\n", "if", "tokenizer_config_file", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "tokenizer_config_file", ",", "encoding", "=", "\"utf-8\"", ")", "as", "tokenizer_config_handle", ":", "\n", "                ", "init_kwargs", "=", "json", ".", "load", "(", "tokenizer_config_handle", ")", "\n", "", "saved_init_inputs", "=", "init_kwargs", ".", "pop", "(", "'init_inputs'", ",", "(", ")", ")", "\n", "if", "not", "init_inputs", ":", "\n", "                ", "init_inputs", "=", "saved_init_inputs", "\n", "", "", "else", ":", "\n", "            ", "init_kwargs", "=", "init_configuration", "\n", "\n", "# Update with newly provided kwargs", "\n", "", "init_kwargs", ".", "update", "(", "kwargs", ")", "\n", "\n", "# Set max length if needed", "\n", "if", "pretrained_model_name_or_path", "in", "cls", ".", "max_model_input_sizes", ":", "\n", "# if we're using a pretrained model, ensure the tokenizer", "\n", "# wont index sequences longer than the number of positional embeddings", "\n", "            ", "max_len", "=", "cls", ".", "max_model_input_sizes", "[", "pretrained_model_name_or_path", "]", "\n", "if", "max_len", "is", "not", "None", "and", "isinstance", "(", "max_len", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "                ", "init_kwargs", "[", "'max_len'", "]", "=", "min", "(", "init_kwargs", ".", "get", "(", "'max_len'", ",", "int", "(", "1e12", ")", ")", ",", "max_len", ")", "\n", "\n", "# Merge resolved_vocab_files arguments in init_kwargs.", "\n", "", "", "added_tokens_file", "=", "resolved_vocab_files", ".", "pop", "(", "'added_tokens_file'", ",", "None", ")", "\n", "special_tokens_map_file", "=", "resolved_vocab_files", ".", "pop", "(", "'special_tokens_map_file'", ",", "None", ")", "\n", "for", "args_name", ",", "file_path", "in", "resolved_vocab_files", ".", "items", "(", ")", ":", "\n", "            ", "if", "args_name", "not", "in", "init_kwargs", ":", "\n", "                ", "init_kwargs", "[", "args_name", "]", "=", "file_path", "\n", "", "", "if", "special_tokens_map_file", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "special_tokens_map_file", ",", "encoding", "=", "\"utf-8\"", ")", "as", "special_tokens_map_handle", ":", "\n", "                ", "special_tokens_map", "=", "json", ".", "load", "(", "special_tokens_map_handle", ")", "\n", "", "for", "key", ",", "value", "in", "special_tokens_map", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "not", "in", "init_kwargs", ":", "\n", "                    ", "init_kwargs", "[", "key", "]", "=", "value", "\n", "\n", "# Instantiate tokenizer.", "\n", "", "", "", "tokenizer", "=", "cls", "(", "*", "init_inputs", ",", "**", "init_kwargs", ")", "\n", "\n", "# Save inputs and kwargs for saving and re-loading with ``save_pretrained``", "\n", "tokenizer", ".", "init_inputs", "=", "init_inputs", "\n", "tokenizer", ".", "init_kwargs", "=", "init_kwargs", "\n", "\n", "# Add supplementary tokens.", "\n", "if", "added_tokens_file", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "added_tokens_file", ",", "encoding", "=", "\"utf-8\"", ")", "as", "added_tokens_handle", ":", "\n", "                ", "added_tok_encoder", "=", "json", ".", "load", "(", "added_tokens_handle", ")", "\n", "", "added_tok_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "added_tok_encoder", ".", "items", "(", ")", "}", "\n", "tokenizer", ".", "added_tokens_encoder", ".", "update", "(", "added_tok_encoder", ")", "\n", "tokenizer", ".", "added_tokens_decoder", ".", "update", "(", "added_tok_decoder", ")", "\n", "\n", "", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.save_pretrained": [[454, 494], ["os.path.join", "os.path.join", "os.path.join", "copy.deepcopy", "copy.deepcopy", "tokenization_utils.PreTrainedTokenizer.vocab_files_names.keys", "tokenization_utils.PreTrainedTokenizer.save_vocabulary", "os.path.isdir", "logger.error", "copy.deepcopy.pop", "io.open", "f.write", "io.open", "f.write", "io.open", "f.write", "json.dumps", "json.dumps", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.save_vocabulary"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save the tokenizer vocabulary files together with:\n                - added tokens,\n                - special-tokens-to-class-attributes-mapping,\n                - tokenizer instantiation positional and keywords inputs (e.g. do_lower_case for Bert).\n\n            This won't save modifications other than (added tokens and special token mapping) you may have\n            applied to the tokenizer after the instantiation (e.g. modifying tokenizer.do_lower_case after creation).\n\n            This method make sure the full tokenizer can then be re-loaded using the :func:`~transformers.PreTrainedTokenizer.from_pretrained` class method.\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Saving directory ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "\n", "", "special_tokens_map_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "SPECIAL_TOKENS_MAP_FILE", ")", "\n", "added_tokens_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "ADDED_TOKENS_FILE", ")", "\n", "tokenizer_config_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "TOKENIZER_CONFIG_FILE", ")", "\n", "\n", "tokenizer_config", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_kwargs", ")", "\n", "tokenizer_config", "[", "'init_inputs'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_inputs", ")", "\n", "for", "file_id", "in", "self", ".", "vocab_files_names", ".", "keys", "(", ")", ":", "\n", "            ", "tokenizer_config", ".", "pop", "(", "file_id", ",", "None", ")", "\n", "\n", "", "with", "open", "(", "tokenizer_config_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "tokenizer_config", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "with", "open", "(", "special_tokens_map_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "special_tokens_map", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "with", "open", "(", "added_tokens_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "if", "self", ".", "added_tokens_encoder", ":", "\n", "                ", "out_str", "=", "json", ".", "dumps", "(", "self", ".", "added_tokens_encoder", ",", "ensure_ascii", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "out_str", "=", "u\"{}\"", "\n", "", "f", ".", "write", "(", "out_str", ")", "\n", "\n", "", "vocab_files", "=", "self", ".", "save_vocabulary", "(", "save_directory", ")", "\n", "\n", "return", "vocab_files", "+", "(", "special_tokens_map_file", ",", "added_tokens_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.save_vocabulary": [[496, 503], ["None"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save the tokenizer vocabulary to a directory. This method does *NOT* save added tokens\n            and special token mappings.\n\n            Please use :func:`~transformers.PreTrainedTokenizer.save_pretrained` `()` to save the full Tokenizer state if you want to reload it using the :func:`~transformers.PreTrainedTokenizer.from_pretrained` class method.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.vocab_size": [[505, 508], ["None"], "methods", ["None"], ["", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "\"\"\" Size of the base vocabulary (without the added tokens) \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.__len__": [[510, 513], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Size of the full vocabulary with the added tokens \"\"\"", "\n", "return", "self", ".", "vocab_size", "+", "len", "(", "self", ".", "added_tokens_encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.add_tokens": [[515, 556], ["dict", "tokenization_utils.PreTrainedTokenizer.added_tokens_encoder.update", "tokenization_utils.PreTrainedTokenizer.added_tokens_decoder.update", "len", "isinstance", "tokenization_utils.PreTrainedTokenizer.init_kwargs.get", "token.lower.lower.lower", "to_add_tokens.append", "logger.info", "dict.items", "isinstance", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "enumerate", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "add_tokens", "(", "self", ",", "new_tokens", ")", ":", "\n", "        ", "\"\"\"\n        Add a list of new tokens to the tokenizer class. If the new tokens are not in the\n        vocabulary, they are added to it with indices starting from length of the current vocabulary.\n\n        Args:\n            new_tokens: list of string. Each string is a token to add. Tokens are only added if they are not already in the vocabulary (tested by checking if the tokenizer assign the index of the ``unk_token`` to them).\n\n        Returns:\n            Number of tokens added to the vocabulary.\n\n        Examples::\n\n            # Let's see how to increase the vocabulary of Bert model and tokenizer\n            tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n            model = BertModel.from_pretrained('bert-base-uncased')\n\n            num_added_toks = tokenizer.add_tokens(['new_tok1', 'my_new-tok2'])\n            print('We have added', num_added_toks, 'tokens')\n            model.resize_token_embeddings(len(tokenizer))  # Notice: resize_token_embeddings expect to receive the full size of the new vocabulary, i.e. the length of the tokenizer.\n        \"\"\"", "\n", "if", "not", "new_tokens", ":", "\n", "            ", "return", "0", "\n", "\n", "", "to_add_tokens", "=", "[", "]", "\n", "for", "token", "in", "new_tokens", ":", "\n", "            ", "assert", "isinstance", "(", "token", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "token", ",", "unicode", ")", ")", "\n", "if", "self", ".", "init_kwargs", ".", "get", "(", "'do_lower_case'", ",", "False", ")", "and", "token", "not", "in", "self", ".", "all_special_tokens", ":", "\n", "                ", "token", "=", "token", ".", "lower", "(", ")", "\n", "", "if", "token", "!=", "self", ".", "unk_token", "and", "self", ".", "convert_tokens_to_ids", "(", "token", ")", "==", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "unk_token", ")", "and", "token", "not", "in", "to_add_tokens", ":", "\n", "                ", "to_add_tokens", ".", "append", "(", "token", ")", "\n", "logger", ".", "info", "(", "\"Adding %s to the vocabulary\"", ",", "token", ")", "\n", "\n", "", "", "added_tok_encoder", "=", "dict", "(", "(", "tok", ",", "len", "(", "self", ")", "+", "i", ")", "for", "i", ",", "tok", "in", "enumerate", "(", "to_add_tokens", ")", ")", "\n", "added_tok_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "added_tok_encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "added_tokens_encoder", ".", "update", "(", "added_tok_encoder", ")", "\n", "self", ".", "added_tokens_decoder", ".", "update", "(", "added_tok_decoder", ")", "\n", "\n", "return", "len", "(", "to_add_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.num_added_tokens": [[557, 575], ["len", "tokenization_utils.PreTrainedTokenizer.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "def", "num_added_tokens", "(", "self", ",", "pair", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Returns the number of added tokens when encoding a sequence with special tokens.\n\n        Note:\n            This encodes inputs and checks the number of added tokens, and is therefore not efficient. Do not put this\n            inside your training loop.\n\n        Args:\n            pair: Returns the number of added tokens in the case of a sequence pair if set to True, returns the\n                number of added tokens in the case of a single sequence if set to False.\n\n        Returns:\n            Number of tokens added to sequences\n        \"\"\"", "\n", "token_ids_0", "=", "[", "]", "\n", "token_ids_1", "=", "[", "]", "\n", "return", "len", "(", "self", ".", "build_inputs_with_special_tokens", "(", "token_ids_0", ",", "token_ids_1", "if", "pair", "else", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.add_special_tokens": [[576, 629], ["special_tokens_dict.items", "logger.info", "setattr", "tokenization_utils.PreTrainedTokenizer.add_tokens", "tokenization_utils.PreTrainedTokenizer.add_tokens", "isinstance", "all", "isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.add_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.add_tokens"], ["", "def", "add_special_tokens", "(", "self", ",", "special_tokens_dict", ")", ":", "\n", "        ", "\"\"\"\n        Add a dictionary of special tokens (eos, pad, cls...) to the encoder and link them\n        to class attributes. If special tokens are NOT in the vocabulary, they are added\n        to it (indexed starting from the last index of the current vocabulary).\n\n        Using `add_special_tokens` will ensure your special tokens can be used in several ways:\n\n        - special tokens are carefully handled by the tokenizer (they are never split)\n        - you can easily refer to special tokens using tokenizer class attributes like `tokenizer.cls_token`. This makes it easy to develop model-agnostic training and fine-tuning scripts.\n\n        When possible, special tokens are already registered for provided pretrained models (ex: BertTokenizer cls_token is already registered to be '[CLS]' and XLM's one is also registered to be '</s>')\n\n        Args:\n            special_tokens_dict: dict of string. Keys should be in the list of predefined special attributes:\n                [``bos_token``, ``eos_token``, ``unk_token``, ``sep_token``, ``pad_token``, ``cls_token``, ``mask_token``,\n                ``additional_special_tokens``].\n\n                Tokens are only added if they are not already in the vocabulary (tested by checking if the tokenizer assign the index of the ``unk_token`` to them).\n\n        Returns:\n            Number of tokens added to the vocabulary.\n\n        Examples::\n\n            # Let's see how to add a new classification token to GPT-2\n            tokenizer = GPT2Tokenizer.from_pretrained('gpt2')\n            model = GPT2Model.from_pretrained('gpt2')\n\n            special_tokens_dict = {'cls_token': '<CLS>'}\n\n            num_added_toks = tokenizer.add_special_tokens(special_tokens_dict)\n            print('We have added', num_added_toks, 'tokens')\n            model.resize_token_embeddings(len(tokenizer))  # Notice: resize_token_embeddings expect to receive the full size of the new vocabulary, i.e. the length of the tokenizer.\n\n            assert tokenizer.cls_token == '<CLS>'\n        \"\"\"", "\n", "if", "not", "special_tokens_dict", ":", "\n", "            ", "return", "0", "\n", "\n", "", "added_tokens", "=", "0", "\n", "for", "key", ",", "value", "in", "special_tokens_dict", ".", "items", "(", ")", ":", "\n", "            ", "assert", "key", "in", "self", ".", "SPECIAL_TOKENS_ATTRIBUTES", "\n", "if", "key", "==", "'additional_special_tokens'", ":", "\n", "                ", "assert", "isinstance", "(", "value", ",", "(", "list", ",", "tuple", ")", ")", "and", "all", "(", "isinstance", "(", "t", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "t", ",", "unicode", ")", ")", "for", "t", "in", "value", ")", "\n", "added_tokens", "+=", "self", ".", "add_tokens", "(", "value", ")", "\n", "", "else", ":", "\n", "                ", "assert", "isinstance", "(", "value", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "value", ",", "unicode", ")", ")", "\n", "added_tokens", "+=", "self", ".", "add_tokens", "(", "[", "value", "]", ")", "\n", "", "logger", ".", "info", "(", "\"Assigning %s to the %s key of the tokenizer\"", ",", "value", ",", "key", ")", "\n", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n", "", "return", "added_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.tokenize": [[630, 698], ["tokenization_utils.PreTrainedTokenizer.init_kwargs.get", "tokenization_utils.PreTrainedTokenizer.tokenize.split_on_tokens"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "text", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Converts a string in a sequence of tokens (string), using the tokenizer.\n            Split in words for word-based vocabulary or sub-words for sub-word-based\n            vocabularies (BPE/SentencePieces/WordPieces).\n\n            Take care of added tokens.\n\n            text: The sequence to be encoded.\n            **kwargs: passed to the child `self.tokenize()` method\n        \"\"\"", "\n", "all_special_tokens", "=", "self", ".", "all_special_tokens", "\n", "\n", "def", "lowercase_text", "(", "t", ")", ":", "\n", "# convert non-special tokens to lowercase", "\n", "            ", "escaped_special_toks", "=", "[", "re", ".", "escape", "(", "s_tok", ")", "for", "s_tok", "in", "all_special_tokens", "]", "\n", "pattern", "=", "r'(^'", "+", "r'|'", ".", "join", "(", "escaped_special_toks", ")", "+", "r')|'", "+", "r'(.+?)'", "\n", "return", "re", ".", "sub", "(", "\n", "pattern", ",", "\n", "lambda", "m", ":", "m", ".", "groups", "(", ")", "[", "0", "]", "or", "m", ".", "groups", "(", ")", "[", "1", "]", ".", "lower", "(", ")", ",", "\n", "t", ")", "\n", "\n", "", "if", "self", ".", "init_kwargs", ".", "get", "(", "'do_lower_case'", ",", "False", ")", ":", "\n", "            ", "text", "=", "lowercase_text", "(", "text", ")", "\n", "\n", "", "def", "split_on_token", "(", "tok", ",", "text", ")", ":", "\n", "            ", "result", "=", "[", "]", "\n", "split_text", "=", "text", ".", "split", "(", "tok", ")", "\n", "for", "i", ",", "sub_text", "in", "enumerate", "(", "split_text", ")", ":", "\n", "                ", "sub_text", "=", "sub_text", ".", "strip", "(", ")", "\n", "if", "i", "==", "0", "and", "not", "sub_text", ":", "\n", "                    ", "result", "+=", "[", "tok", "]", "\n", "", "elif", "i", "==", "len", "(", "split_text", ")", "-", "1", ":", "\n", "                    ", "if", "sub_text", ":", "\n", "                        ", "result", "+=", "[", "sub_text", "]", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "", "", "else", ":", "\n", "                    ", "if", "sub_text", ":", "\n", "                        ", "result", "+=", "[", "sub_text", "]", "\n", "", "result", "+=", "[", "tok", "]", "\n", "", "", "return", "result", "\n", "\n", "", "def", "split_on_tokens", "(", "tok_list", ",", "text", ")", ":", "\n", "            ", "if", "not", "text", ".", "strip", "(", ")", ":", "\n", "                ", "return", "[", "]", "\n", "", "if", "not", "tok_list", ":", "\n", "                ", "return", "self", ".", "_tokenize", "(", "text", ",", "**", "kwargs", ")", "\n", "\n", "", "tokenized_text", "=", "[", "]", "\n", "text_list", "=", "[", "text", "]", "\n", "for", "tok", "in", "tok_list", ":", "\n", "                ", "tokenized_text", "=", "[", "]", "\n", "for", "sub_text", "in", "text_list", ":", "\n", "                    ", "if", "sub_text", "not", "in", "self", ".", "added_tokens_encoder", "and", "sub_text", "not", "in", "all_special_tokens", ":", "\n", "                        ", "tokenized_text", "+=", "split_on_token", "(", "tok", ",", "sub_text", ")", "\n", "", "else", ":", "\n", "                        ", "tokenized_text", "+=", "[", "sub_text", "]", "\n", "", "", "text_list", "=", "tokenized_text", "\n", "\n", "", "return", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "(", "self", ".", "_tokenize", "(", "token", ",", "**", "kwargs", ")", "if", "token", "not", "in", "self", ".", "added_tokens_encoder", "and", "token", "not", "in", "all_special_tokens", "else", "[", "token", "]", "for", "token", "in", "tokenized_text", ")", ")", ")", "\n", "\n", "", "added_tokens", "=", "list", "(", "self", ".", "added_tokens_encoder", ".", "keys", "(", ")", ")", "+", "all_special_tokens", "\n", "tokenized_text", "=", "split_on_tokens", "(", "added_tokens", ",", "text", ")", "\n", "return", "tokenized_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer._tokenize": [[699, 707], ["None"], "methods", ["None"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Converts a string in a sequence of tokens (string), using the tokenizer.\n            Split in words for word-based vocabulary or sub-words for sub-word-based\n            vocabularies (BPE/SentencePieces/WordPieces).\n\n            Do NOT take care of added tokens.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids": [[708, 722], ["isinstance", "tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc", "ids.append", "isinstance", "tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a single token, or a sequence of tokens, (str/unicode) in a single integer id\n            (resp. a sequence of ids), using the vocabulary.\n        \"\"\"", "\n", "if", "tokens", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "isinstance", "(", "tokens", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "tokens", ",", "unicode", ")", ")", ":", "\n", "            ", "return", "self", ".", "_convert_token_to_id_with_added_voc", "(", "tokens", ")", "\n", "\n", "", "ids", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "ids", ".", "append", "(", "self", ".", "_convert_token_to_id_with_added_voc", "(", "token", ")", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc": [[723, 730], ["tokenization_utils.PreTrainedTokenizer._convert_token_to_id"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer._convert_token_to_id"], ["", "def", "_convert_token_to_id_with_added_voc", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "token", "in", "self", ".", "added_tokens_encoder", ":", "\n", "            ", "return", "self", ".", "added_tokens_encoder", "[", "token", "]", "\n", "", "return", "self", ".", "_convert_token_to_id", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id": [[731, 733], ["None"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode": [[734, 789], ["tokenization_utils.PreTrainedTokenizer.encode_plus"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode_plus"], ["", "def", "encode", "(", "self", ",", "\n", "text", ",", "\n", "text_pair", "=", "None", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", "max_length", "=", "None", ",", "\n", "stride", "=", "0", ",", "\n", "truncation_strategy", "=", "'longest_first'", ",", "\n", "pad_to_max_length", "=", "False", ",", "\n", "return_tensors", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Converts a string in a sequence of ids (integer), using the tokenizer and vocabulary.\n\n        Same as doing ``self.convert_tokens_to_ids(self.tokenize(text))``.\n\n        Args:\n            text: The first sequence to be encoded. This can be a string, a list of strings (tokenized string using\n                the `tokenize` method) or a list of integers (tokenized string ids using the `convert_tokens_to_ids`\n                method)\n            text_pair: Optional second sequence to be encoded. This can be a string, a list of strings (tokenized\n                string using the `tokenize` method) or a list of integers (tokenized string ids using the\n                `convert_tokens_to_ids` method)\n            add_special_tokens: if set to ``True``, the sequences will be encoded with the special tokens relative\n                to their model.\n            max_length: if set to a number, will limit the total sequence returned so that it has a maximum length.\n                If there are overflowing tokens, those will be added to the returned dictionary\n            stride: if set to a number along with max_length, the overflowing tokens returned will contain some tokens\n                from the main sequence returned. The value of this argument defines the number of additional tokens.\n            truncation_strategy: string selected in the following options:\n                - 'longest_first' (default) Iteratively reduce the inputs sequence until the input is under max_length\n                    starting from the longest one at each token (when there is a pair of input sequences)\n                - 'only_first': Only truncate the first sequence\n                - 'only_second': Only truncate the second sequence\n                - 'do_not_truncate': Does not truncate (raise an error if the input sequence is longer than max_length)\n            pad_to_max_length: if set to True, the returned sequences will be padded according to the model's padding side and\n                padding index, up to their max length. If no max length is specified, the padding is done up to the model's max length.\n                The tokenizer padding sides are handled by the following strings:\n                - 'left': pads on the left of the sequences\n                - 'right': pads on the right of the sequences   \n                Defaults to False: no padding.\n            return_tensors: (optional) can be set to 'tf' or 'pt' to return respectively TensorFlow tf.constant\n                or PyTorch torch.Tensor instead of a list of python integers.\n            **kwargs: passed to the `self.tokenize()` method\n        \"\"\"", "\n", "encoded_inputs", "=", "self", ".", "encode_plus", "(", "text", ",", "\n", "text_pair", "=", "text_pair", ",", "\n", "max_length", "=", "max_length", ",", "\n", "add_special_tokens", "=", "add_special_tokens", ",", "\n", "stride", "=", "stride", ",", "\n", "truncation_strategy", "=", "truncation_strategy", ",", "\n", "pad_to_max_length", "=", "pad_to_max_length", ",", "\n", "return_tensors", "=", "return_tensors", ",", "\n", "**", "kwargs", ")", "\n", "\n", "return", "encoded_inputs", "[", "\"input_ids\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode_plus": [[790, 888], ["tokenization_utils.PreTrainedTokenizer.encode_plus.get_input_ids"], "methods", ["None"], ["", "def", "encode_plus", "(", "self", ",", "\n", "text", ",", "\n", "text_pair", "=", "None", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", "max_length", "=", "None", ",", "\n", "stride", "=", "0", ",", "\n", "truncation_strategy", "=", "'longest_first'", ",", "\n", "pad_to_max_length", "=", "False", ",", "\n", "return_tensors", "=", "None", ",", "\n", "return_token_type_ids", "=", "True", ",", "\n", "return_attention_mask", "=", "True", ",", "\n", "return_overflowing_tokens", "=", "False", ",", "\n", "return_special_tokens_mask", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dictionary containing the encoded sequence or sequence pair and additional informations:\n        the mask for sequence classification and the overflowing elements if a ``max_length`` is specified.\n\n        Args:\n            text: The first sequence to be encoded. This can be a string, a list of strings (tokenized string using\n                the `tokenize` method) or a list of integers (tokenized string ids using the `convert_tokens_to_ids`\n                method)\n            text_pair: Optional second sequence to be encoded. This can be a string, a list of strings (tokenized\n                string using the `tokenize` method) or a list of integers (tokenized string ids using the\n                `convert_tokens_to_ids` method)\n            add_special_tokens: if set to ``True``, the sequences will be encoded with the special tokens relative\n                to their model.\n            max_length: if set to a number, will limit the total sequence returned so that it has a maximum length.\n                If there are overflowing tokens, those will be added to the returned dictionary\n            stride: if set to a number along with max_length, the overflowing tokens returned will contain some tokens\n                from the main sequence returned. The value of this argument defines the number of additional tokens.\n            truncation_strategy: string selected in the following options:\n                - 'longest_first' (default) Iteratively reduce the inputs sequence until the input is under max_length\n                    starting from the longest one at each token (when there is a pair of input sequences)\n                - 'only_first': Only truncate the first sequence\n                - 'only_second': Only truncate the second sequence\n                - 'do_not_truncate': Does not truncate (raise an error if the input sequence is longer than max_length)\n            pad_to_max_length: if set to True, the returned sequences will be padded according to the model's padding side and\n                padding index, up to their max length. If no max length is specified, the padding is done up to the model's max length.\n                The tokenizer padding sides are handled by the following strings:\n                - 'left': pads on the left of the sequences\n                - 'right': pads on the right of the sequences   \n                Defaults to False: no padding.\n            return_tensors: (optional) can be set to 'tf' or 'pt' to return respectively TensorFlow tf.constant\n                or PyTorch torch.Tensor instead of a list of python integers.\n            return_token_type_ids: (optional) Set to False to avoid returning token_type_ids (default True).\n            return_attention_mask: (optional) Set to False to avoir returning attention mask (default True)\n            return_overflowing_tokens: (optional) Set to True to return overflowing token information (default False).\n            return_special_tokens_mask: (optional) Set to True to return special tokens mask information (default False).\n            **kwargs: passed to the `self.tokenize()` method\n\n        Return:\n            A Dictionary of shape::\n\n                {\n                    input_ids: list[int],\n                    token_type_ids: list[int] if return_token_type_ids is True (default)\n                    attention_mask: list[int] if return_attention_mask is True (default)\n                    overflowing_tokens: list[int] if a ``max_length`` is specified and return_overflowing_tokens is True\n                    num_truncated_tokens: int if a ``max_length`` is specified and return_overflowing_tokens is True\n                    special_tokens_mask: list[int] if ``add_special_tokens`` if set to ``True`` and return_special_tokens_mask is True\n                }\n\n            With the fields:\n                ``input_ids``: list of token ids to be fed to a model\n                ``token_type_ids``: list of token type ids to be fed to a model\n                ``attention_mask``: list of indices specifying which tokens should be attended to by the model\n                ``overflowing_tokens``: list of overflowing tokens if a max length is specified.\n                ``num_truncated_tokens``: number of overflowing tokens a ``max_length`` is specified\n                ``special_tokens_mask``: if adding special tokens, this is a list of [0, 1], with 0 specifying special added\n                tokens and 1 specifying sequence tokens.\n        \"\"\"", "\n", "\n", "def", "get_input_ids", "(", "text", ")", ":", "\n", "            ", "if", "isinstance", "(", "text", ",", "six", ".", "string_types", ")", ":", "\n", "                ", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenize", "(", "text", ",", "**", "kwargs", ")", ")", "\n", "", "elif", "isinstance", "(", "text", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "text", ")", ">", "0", "and", "isinstance", "(", "text", "[", "0", "]", ",", "six", ".", "string_types", ")", ":", "\n", "                ", "return", "self", ".", "convert_tokens_to_ids", "(", "text", ")", "\n", "", "elif", "isinstance", "(", "text", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "text", ")", ">", "0", "and", "isinstance", "(", "text", "[", "0", "]", ",", "int", ")", ":", "\n", "                ", "return", "text", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Input is not valid. Should be a string, a list/tuple of strings or a list/tuple of integers.\"", ")", "\n", "\n", "", "", "first_ids", "=", "get_input_ids", "(", "text", ")", "\n", "second_ids", "=", "get_input_ids", "(", "text_pair", ")", "if", "text_pair", "is", "not", "None", "else", "None", "\n", "\n", "return", "self", ".", "prepare_for_model", "(", "first_ids", ",", "\n", "pair_ids", "=", "second_ids", ",", "\n", "max_length", "=", "max_length", ",", "\n", "pad_to_max_length", "=", "pad_to_max_length", ",", "\n", "add_special_tokens", "=", "add_special_tokens", ",", "\n", "stride", "=", "stride", ",", "\n", "truncation_strategy", "=", "truncation_strategy", ",", "\n", "return_tensors", "=", "return_tensors", ",", "\n", "return_attention_mask", "=", "return_attention_mask", ",", "\n", "return_token_type_ids", "=", "return_token_type_ids", ",", "\n", "return_overflowing_tokens", "=", "return_overflowing_tokens", ",", "\n", "return_special_tokens_mask", "=", "return_special_tokens_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.prepare_for_model": [[889, 1051], ["bool", "len", "len", "tokenization_utils.PreTrainedTokenizer.truncate_sequences", "tokenization_utils.PreTrainedTokenizer.build_inputs_with_special_tokens", "tokenization_utils.PreTrainedTokenizer.create_token_type_ids_from_sequences", "tokenization_utils.PreTrainedTokenizer.get_special_tokens_mask", "logger.warning", "logger.warning", "file_utils.is_tf_available", "tf.constant", "tf.constant", "tokenization_utils.PreTrainedTokenizer.num_added_tokens", "len", "len", "len", "tf.constant", "file_utils.is_torch_available", "torch.tensor", "torch.tensor", "len", "len", "ValueError", "len", "torch.tensor", "logger.warning", "len", "len", "len", "len", "str", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.truncate_sequences", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.create_token_type_ids_from_sequences", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.get_special_tokens_mask", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_tf_available", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.num_added_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_torch_available"], ["", "def", "prepare_for_model", "(", "self", ",", "ids", ",", "pair_ids", "=", "None", ",", "max_length", "=", "None", ",", "add_special_tokens", "=", "True", ",", "stride", "=", "0", ",", "\n", "truncation_strategy", "=", "'longest_first'", ",", "\n", "pad_to_max_length", "=", "False", ",", "\n", "return_tensors", "=", "None", ",", "\n", "return_token_type_ids", "=", "True", ",", "\n", "return_attention_mask", "=", "True", ",", "\n", "return_overflowing_tokens", "=", "False", ",", "\n", "return_special_tokens_mask", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Prepares a sequence of input id, or a pair of sequences of inputs ids so that it can be used by the model.\n        It adds special tokens, truncates\n        sequences if overflowing while taking into account the special tokens and manages a window stride for\n        overflowing tokens\n\n        Args:\n            ids: list of tokenized input ids. Can be obtained from a string by chaining the\n                `tokenize` and `convert_tokens_to_ids` methods.\n            pair_ids: Optional second list of input ids. Can be obtained from a string by chaining the\n                `tokenize` and `convert_tokens_to_ids` methods.\n            max_length: maximum length of the returned list. Will truncate by taking into account the special tokens.\n            add_special_tokens: if set to ``True``, the sequences will be encoded with the special tokens relative\n                to their model.\n            stride: window stride for overflowing tokens. Can be useful for edge effect removal when using sequential\n                list of inputs.\n            truncation_strategy: string selected in the following options:\n                - 'longest_first' (default) Iteratively reduce the inputs sequence until the input is under max_length\n                    starting from the longest one at each token (when there is a pair of input sequences)\n                - 'only_first': Only truncate the first sequence\n                - 'only_second': Only truncate the second sequence\n                - 'do_not_truncate': Does not truncate (raise an error if the input sequence is longer than max_length)\n            pad_to_max_length: if set to True, the returned sequences will be padded according to the model's padding side and\n                padding index, up to their max length. If no max length is specified, the padding is done up to the model's max length.\n                The tokenizer padding sides are handled by the following strings:\n                - 'left': pads on the left of the sequences\n                - 'right': pads on the right of the sequences   \n                Defaults to False: no padding.\n            return_tensors: (optional) can be set to 'tf' or 'pt' to return respectively TensorFlow tf.constant\n                or PyTorch torch.Tensor instead of a list of python integers.\n            return_token_type_ids: (optional) Set to False to avoid returning token_type_ids (default True).\n            return_attention_mask: (optional) Set to False to avoid returning attention mask (default True)\n            return_overflowing_tokens: (optional) Set to True to return overflowing token information (default False).\n            return_special_tokens_mask: (optional) Set to True to return special tokens mask information (default False).\n\n        Return:\n            A Dictionary of shape::\n\n                {\n                    input_ids: list[int],\n                    token_type_ids: list[int] if return_token_type_ids is True (default)\n                    overflowing_tokens: list[int] if a ``max_length`` is specified and return_overflowing_tokens is True\n                    num_truncated_tokens: int if a ``max_length`` is specified and return_overflowing_tokens is True\n                    special_tokens_mask: list[int] if ``add_special_tokens`` if set to ``True`` and return_special_tokens_mask is True\n                }\n\n            With the fields:\n                ``input_ids``: list of token ids to be fed to a model\n                ``token_type_ids``: list of token type ids to be fed to a model\n\n                ``overflowing_tokens``: list of overflowing tokens if a max length is specified.\n                ``num_truncated_tokens``: number of overflowing tokens a ``max_length`` is specified\n                ``special_tokens_mask``: if adding special tokens, this is a list of [0, 1], with 0 specifying special added\n                tokens and 1 specifying sequence tokens.\n        \"\"\"", "\n", "pair", "=", "bool", "(", "pair_ids", "is", "not", "None", ")", "\n", "len_ids", "=", "len", "(", "ids", ")", "\n", "len_pair_ids", "=", "len", "(", "pair_ids", ")", "if", "pair", "else", "0", "\n", "\n", "encoded_inputs", "=", "{", "}", "\n", "\n", "# Handle max sequence length", "\n", "total_len", "=", "len_ids", "+", "len_pair_ids", "+", "(", "self", ".", "num_added_tokens", "(", "pair", "=", "pair", ")", "if", "add_special_tokens", "else", "0", ")", "\n", "if", "max_length", "and", "total_len", ">", "max_length", ":", "\n", "            ", "ids", ",", "pair_ids", ",", "overflowing_tokens", "=", "self", ".", "truncate_sequences", "(", "ids", ",", "pair_ids", "=", "pair_ids", ",", "\n", "num_tokens_to_remove", "=", "total_len", "-", "max_length", ",", "\n", "truncation_strategy", "=", "truncation_strategy", ",", "\n", "stride", "=", "stride", ")", "\n", "if", "return_overflowing_tokens", ":", "\n", "                ", "encoded_inputs", "[", "\"overflowing_tokens\"", "]", "=", "overflowing_tokens", "\n", "encoded_inputs", "[", "\"num_truncated_tokens\"", "]", "=", "total_len", "-", "max_length", "\n", "\n", "# Handle special_tokens", "\n", "", "", "if", "add_special_tokens", ":", "\n", "            ", "sequence", "=", "self", ".", "build_inputs_with_special_tokens", "(", "ids", ",", "pair_ids", ")", "\n", "token_type_ids", "=", "self", ".", "create_token_type_ids_from_sequences", "(", "ids", ",", "pair_ids", ")", "\n", "", "else", ":", "\n", "            ", "sequence", "=", "ids", "+", "pair_ids", "if", "pair", "else", "ids", "\n", "token_type_ids", "=", "[", "0", "]", "*", "len", "(", "ids", ")", "+", "(", "[", "1", "]", "*", "len", "(", "pair_ids", ")", "if", "pair", "else", "[", "]", ")", "\n", "\n", "", "if", "return_special_tokens_mask", ":", "\n", "            ", "encoded_inputs", "[", "\"special_tokens_mask\"", "]", "=", "self", ".", "get_special_tokens_mask", "(", "ids", ",", "pair_ids", ")", "\n", "\n", "", "encoded_inputs", "[", "\"input_ids\"", "]", "=", "sequence", "\n", "if", "return_token_type_ids", ":", "\n", "            ", "encoded_inputs", "[", "\"token_type_ids\"", "]", "=", "token_type_ids", "\n", "\n", "", "if", "max_length", "and", "len", "(", "encoded_inputs", "[", "\"input_ids\"", "]", ")", ">", "max_length", ":", "\n", "            ", "encoded_inputs", "[", "\"input_ids\"", "]", "=", "encoded_inputs", "[", "\"input_ids\"", "]", "[", ":", "max_length", "]", "\n", "if", "return_token_type_ids", ":", "\n", "                ", "encoded_inputs", "[", "\"token_type_ids\"", "]", "=", "encoded_inputs", "[", "\"token_type_ids\"", "]", "[", ":", "max_length", "]", "\n", "", "if", "return_special_tokens_mask", ":", "\n", "                ", "encoded_inputs", "[", "\"special_tokens_mask\"", "]", "=", "encoded_inputs", "[", "\"special_tokens_mask\"", "]", "[", ":", "max_length", "]", "\n", "\n", "", "", "if", "max_length", "is", "None", "and", "len", "(", "encoded_inputs", "[", "\"input_ids\"", "]", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Token indices sequence length is longer than the specified maximum sequence length \"", "\n", "\"for this model ({} > {}). Running this sequence through the model will result in \"", "\n", "\"indexing errors\"", ".", "format", "(", "len", "(", "ids", ")", ",", "self", ".", "max_len", ")", ")", "\n", "\n", "", "needs_to_be_padded", "=", "pad_to_max_length", "and", "(", "\n", "max_length", "and", "len", "(", "encoded_inputs", "[", "\"input_ids\"", "]", ")", "<", "max_length", "\n", "or", "\n", "max_length", "is", "None", "and", "len", "(", "encoded_inputs", "[", "\"input_ids\"", "]", ")", "<", "self", ".", "max_len", "and", "self", ".", "max_len", "<=", "10000", "\n", ")", "\n", "\n", "if", "pad_to_max_length", "and", "max_length", "is", "None", "and", "self", ".", "max_len", ">", "10000", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Sequence can't be padded as no maximum length is specified and the model maximum length is too high.\"", ")", "\n", "\n", "", "if", "needs_to_be_padded", ":", "\n", "            ", "difference", "=", "(", "max_length", "if", "max_length", "is", "not", "None", "else", "self", ".", "max_len", ")", "-", "len", "(", "encoded_inputs", "[", "\"input_ids\"", "]", ")", "\n", "\n", "if", "self", ".", "padding_side", "==", "'right'", ":", "\n", "                ", "if", "return_attention_mask", ":", "\n", "                    ", "encoded_inputs", "[", "\"attention_mask\"", "]", "=", "[", "1", "]", "*", "len", "(", "encoded_inputs", "[", "\"input_ids\"", "]", ")", "+", "[", "0", "]", "*", "difference", "\n", "", "if", "return_token_type_ids", ":", "\n", "                    ", "encoded_inputs", "[", "\"token_type_ids\"", "]", "=", "encoded_inputs", "[", "\"token_type_ids\"", "]", "+", "[", "self", ".", "pad_token_type_id", "]", "*", "difference", "\n", "", "if", "return_special_tokens_mask", ":", "\n", "                    ", "encoded_inputs", "[", "\"special_tokens_mask\"", "]", "=", "encoded_inputs", "[", "\"special_tokens_mask\"", "]", "+", "[", "1", "]", "*", "difference", "\n", "", "encoded_inputs", "[", "\"input_ids\"", "]", "=", "encoded_inputs", "[", "\"input_ids\"", "]", "+", "[", "self", ".", "pad_token_id", "]", "*", "difference", "\n", "", "elif", "self", ".", "padding_side", "==", "'left'", ":", "\n", "                ", "if", "return_attention_mask", ":", "\n", "                    ", "encoded_inputs", "[", "\"attention_mask\"", "]", "=", "[", "0", "]", "*", "difference", "+", "[", "1", "]", "*", "len", "(", "encoded_inputs", "[", "\"input_ids\"", "]", ")", "\n", "", "if", "return_token_type_ids", ":", "\n", "                    ", "encoded_inputs", "[", "\"token_type_ids\"", "]", "=", "[", "self", ".", "pad_token_type_id", "]", "*", "difference", "+", "encoded_inputs", "[", "\"token_type_ids\"", "]", "\n", "", "if", "return_special_tokens_mask", ":", "\n", "                    ", "encoded_inputs", "[", "\"special_tokens_mask\"", "]", "=", "[", "1", "]", "*", "difference", "+", "encoded_inputs", "[", "\"special_tokens_mask\"", "]", "\n", "", "encoded_inputs", "[", "\"input_ids\"", "]", "=", "[", "self", ".", "pad_token_id", "]", "*", "difference", "+", "encoded_inputs", "[", "\"input_ids\"", "]", "\n", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid padding strategy:\"", "+", "str", "(", "self", ".", "padding_side", ")", ")", "\n", "\n", "", "", "elif", "return_attention_mask", ":", "\n", "            ", "encoded_inputs", "[", "\"attention_mask\"", "]", "=", "[", "1", "]", "*", "len", "(", "encoded_inputs", "[", "\"input_ids\"", "]", ")", "\n", "\n", "# Prepare inputs as tensors if asked", "\n", "", "if", "return_tensors", "==", "'tf'", "and", "is_tf_available", "(", ")", ":", "\n", "            ", "encoded_inputs", "[", "\"input_ids\"", "]", "=", "tf", ".", "constant", "(", "[", "encoded_inputs", "[", "\"input_ids\"", "]", "]", ")", "\n", "encoded_inputs", "[", "\"token_type_ids\"", "]", "=", "tf", ".", "constant", "(", "[", "encoded_inputs", "[", "\"token_type_ids\"", "]", "]", ")", "\n", "\n", "if", "\"attention_mask\"", "in", "encoded_inputs", ":", "\n", "                ", "encoded_inputs", "[", "\"attention_mask\"", "]", "=", "tf", ".", "constant", "(", "[", "encoded_inputs", "[", "\"attention_mask\"", "]", "]", ")", "\n", "\n", "", "", "elif", "return_tensors", "==", "'pt'", "and", "is_torch_available", "(", ")", ":", "\n", "            ", "encoded_inputs", "[", "\"input_ids\"", "]", "=", "torch", ".", "tensor", "(", "[", "encoded_inputs", "[", "\"input_ids\"", "]", "]", ")", "\n", "encoded_inputs", "[", "\"token_type_ids\"", "]", "=", "torch", ".", "tensor", "(", "[", "encoded_inputs", "[", "\"token_type_ids\"", "]", "]", ")", "\n", "\n", "if", "\"attention_mask\"", "in", "encoded_inputs", ":", "\n", "                ", "encoded_inputs", "[", "\"attention_mask\"", "]", "=", "torch", ".", "tensor", "(", "[", "encoded_inputs", "[", "\"attention_mask\"", "]", "]", ")", "\n", "", "", "elif", "return_tensors", "is", "not", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"Unable to convert output to tensors format {}, PyTorch or TensorFlow is not available.\"", ".", "format", "(", "\n", "return_tensors", ")", ")", "\n", "\n", "", "return", "encoded_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.truncate_sequences": [[1052, 1091], ["range", "min", "len", "min", "len", "len", "min", "len", "len", "len", "ValueError", "ValueError", "len"], "methods", ["None"], ["", "def", "truncate_sequences", "(", "self", ",", "ids", ",", "pair_ids", "=", "None", ",", "num_tokens_to_remove", "=", "0", ",", "truncation_strategy", "=", "'longest_first'", ",", "stride", "=", "0", ")", ":", "\n", "        ", "\"\"\"Truncates a sequence pair in place to the maximum length.\n            truncation_strategy: string selected in the following options:\n                - 'longest_first' (default) Iteratively reduce the inputs sequence until the input is under max_length\n                    starting from the longest one at each token (when there is a pair of input sequences).\n                    Overflowing tokens only contains overflow from the first sequence.\n                - 'only_first': Only truncate the first sequence. raise an error if the first sequence is shorter or equal to than num_tokens_to_remove.\n                - 'only_second': Only truncate the second sequence\n                - 'do_not_truncate': Does not truncate (raise an error if the input sequence is longer than max_length)\n        \"\"\"", "\n", "if", "num_tokens_to_remove", "<=", "0", ":", "\n", "            ", "return", "ids", ",", "pair_ids", ",", "[", "]", "\n", "\n", "", "if", "truncation_strategy", "==", "'longest_first'", ":", "\n", "            ", "overflowing_tokens", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_tokens_to_remove", ")", ":", "\n", "                ", "if", "pair_ids", "is", "None", "or", "len", "(", "ids", ")", ">", "len", "(", "pair_ids", ")", ":", "\n", "                    ", "overflowing_tokens", "=", "[", "ids", "[", "-", "1", "]", "]", "+", "overflowing_tokens", "\n", "ids", "=", "ids", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "pair_ids", "=", "pair_ids", "[", ":", "-", "1", "]", "\n", "", "", "window_len", "=", "min", "(", "len", "(", "ids", ")", ",", "stride", ")", "\n", "if", "window_len", ">", "0", ":", "\n", "                ", "overflowing_tokens", "=", "ids", "[", "-", "window_len", ":", "]", "+", "overflowing_tokens", "\n", "", "", "elif", "truncation_strategy", "==", "'only_first'", ":", "\n", "            ", "assert", "len", "(", "ids", ")", ">", "num_tokens_to_remove", "\n", "window_len", "=", "min", "(", "len", "(", "ids", ")", ",", "stride", "+", "num_tokens_to_remove", ")", "\n", "overflowing_tokens", "=", "ids", "[", "-", "window_len", ":", "]", "\n", "ids", "=", "ids", "[", ":", "-", "num_tokens_to_remove", "]", "\n", "", "elif", "truncation_strategy", "==", "'only_second'", ":", "\n", "            ", "assert", "pair_ids", "is", "not", "None", "and", "len", "(", "pair_ids", ")", ">", "num_tokens_to_remove", "\n", "window_len", "=", "min", "(", "len", "(", "pair_ids", ")", ",", "stride", "+", "num_tokens_to_remove", ")", "\n", "overflowing_tokens", "=", "pair_ids", "[", "-", "window_len", ":", "]", "\n", "pair_ids", "=", "pair_ids", "[", ":", "-", "num_tokens_to_remove", "]", "\n", "", "elif", "truncation_strategy", "==", "'do_not_truncate'", ":", "\n", "            ", "raise", "ValueError", "(", "\"Input sequence are too long for max_length. Please select a truncation strategy.\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Truncation_strategy should be selected in ['longest_first', 'only_first', 'only_second', 'do_not_truncate']\"", ")", "\n", "", "return", "(", "ids", ",", "pair_ids", ",", "overflowing_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.create_token_type_ids_from_sequences": [[1092, 1096], ["len", "len", "len"], "methods", ["None"], ["", "def", "create_token_type_ids_from_sequences", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "len", "(", "token_ids_0", ")", "*", "[", "0", "]", "\n", "", "return", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", "+", "[", "1", "]", "*", "len", "(", "token_ids_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.build_inputs_with_special_tokens": [[1097, 1108], ["None"], "methods", ["None"], ["", "def", "build_inputs_with_special_tokens", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build model inputs from a sequence or a pair of sequence for sequence classification tasks\n        by concatenating and adding special tokens.\n        A RoBERTa sequence has the following format:\n            single sequence: <s> X </s>\n            pair of sequences: <s> A </s></s> B </s>\n        \"\"\"", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "token_ids_0", "\n", "", "return", "token_ids_0", "+", "token_ids_1", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.get_special_tokens_mask": [[1109, 1125], ["len", "len"], "methods", ["None"], ["", "def", "get_special_tokens_mask", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ",", "already_has_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding\n        special tokens using the tokenizer ``prepare_for_model`` or ``encode_plus`` methods.\n\n        Args:\n            token_ids_0: list of ids (must not contain special tokens)\n            token_ids_1: Optional list of ids (must not contain special tokens), necessary when fetching sequence ids\n                for sequence pairs\n            already_has_special_tokens: (default False) Set to True if the token list is already formated with\n                special tokens for the model\n\n        Returns:\n            A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.\n        \"\"\"", "\n", "return", "[", "0", "]", "*", "(", "(", "len", "(", "token_ids_1", ")", "if", "token_ids_1", "else", "0", ")", "+", "len", "(", "token_ids_0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens": [[1126, 1147], ["isinstance", "tokenization_utils.PreTrainedTokenizer._convert_id_to_token", "tokens.append", "tokens.append", "tokenization_utils.PreTrainedTokenizer._convert_id_to_token"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer._convert_id_to_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer._convert_id_to_token"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ",", "skip_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\" Converts a single index or a sequence of indices (integers) in a token \"\n            (resp.) a sequence of tokens (str/unicode), using the vocabulary and added tokens.\n\n            Args:\n                skip_special_tokens: Don't decode special tokens (self.all_special_tokens). Default: False\n        \"\"\"", "\n", "if", "isinstance", "(", "ids", ",", "int", ")", ":", "\n", "            ", "if", "ids", "in", "self", ".", "added_tokens_decoder", ":", "\n", "                ", "return", "self", ".", "added_tokens_decoder", "[", "ids", "]", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_convert_id_to_token", "(", "ids", ")", "\n", "", "", "tokens", "=", "[", "]", "\n", "for", "index", "in", "ids", ":", "\n", "            ", "if", "skip_special_tokens", "and", "index", "in", "self", ".", "all_special_ids", ":", "\n", "                ", "continue", "\n", "", "if", "index", "in", "self", ".", "added_tokens_decoder", ":", "\n", "                ", "tokens", ".", "append", "(", "self", ".", "added_tokens_decoder", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "                ", "tokens", ".", "append", "(", "self", ".", "_convert_id_to_token", "(", "index", ")", ")", "\n", "", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer._convert_id_to_token": [[1148, 1150], ["None"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_string": [[1151, 1157], ["tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string.\n            The most simple way to do it is ' '.join(self.convert_ids_to_tokens(token_ids))\n            but we often want to remove sub-word tokenization artifacts at the same time.\n        \"\"\"", "\n", "return", "' '", ".", "join", "(", "self", ".", "convert_ids_to_tokens", "(", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode": [[1158, 1195], ["tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens", "sub_texts.append", "tokenization_utils.PreTrainedTokenizer.clean_up_tokenization", "sub_texts.append", "current_sub_text.append", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_string", "sub_texts.append", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_string"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.clean_up_tokenization", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.convert_tokens_to_string", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.convert_tokens_to_string"], ["", "def", "decode", "(", "self", ",", "token_ids", ",", "skip_special_tokens", "=", "False", ",", "clean_up_tokenization_spaces", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Converts a sequence of ids (integer) in a string, using the tokenizer and vocabulary\n        with options to remove special tokens and clean up tokenization spaces.\n        Similar to doing ``self.convert_tokens_to_string(self.convert_ids_to_tokens(token_ids))``.\n\n        Args:\n            token_ids: list of tokenized input ids. Can be obtained using the `encode` or `encode_plus` methods.\n            skip_special_tokens: if set to True, will replace special tokens.\n            clean_up_tokenization_spaces: if set to True, will clean up the tokenization spaces.\n        \"\"\"", "\n", "filtered_tokens", "=", "self", ".", "convert_ids_to_tokens", "(", "token_ids", ",", "skip_special_tokens", "=", "skip_special_tokens", ")", "\n", "\n", "# To avoid mixing byte-level and unicode for byte-level BPT", "\n", "# we need to build string separatly for added tokens and byte-level tokens", "\n", "# cf. https://github.com/huggingface/transformers/issues/1133", "\n", "sub_texts", "=", "[", "]", "\n", "current_sub_text", "=", "[", "]", "\n", "for", "token", "in", "filtered_tokens", ":", "\n", "            ", "if", "skip_special_tokens", "and", "token", "in", "self", ".", "all_special_ids", ":", "\n", "                ", "continue", "\n", "", "if", "token", "in", "self", ".", "added_tokens_encoder", ":", "\n", "                ", "if", "current_sub_text", ":", "\n", "                    ", "sub_texts", ".", "append", "(", "self", ".", "convert_tokens_to_string", "(", "current_sub_text", ")", ")", "\n", "current_sub_text", "=", "[", "]", "\n", "", "sub_texts", ".", "append", "(", "token", ")", "\n", "", "else", ":", "\n", "                ", "current_sub_text", ".", "append", "(", "token", ")", "\n", "", "", "if", "current_sub_text", ":", "\n", "            ", "sub_texts", ".", "append", "(", "self", ".", "convert_tokens_to_string", "(", "current_sub_text", ")", ")", "\n", "", "text", "=", "' '", ".", "join", "(", "sub_texts", ")", "\n", "\n", "if", "clean_up_tokenization_spaces", ":", "\n", "            ", "clean_text", "=", "self", ".", "clean_up_tokenization", "(", "text", ")", "\n", "return", "clean_text", "\n", "", "else", ":", "\n", "            ", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.special_tokens_map": [[1196, 1207], ["getattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "special_tokens_map", "(", "self", ")", ":", "\n", "        ", "\"\"\" A dictionary mapping special token class attribute (cls_token, unk_token...) to their\n            values ('<unk>', '<cls>'...)\n        \"\"\"", "\n", "set_attr", "=", "{", "}", "\n", "for", "attr", "in", "self", ".", "SPECIAL_TOKENS_ATTRIBUTES", ":", "\n", "            ", "attr_value", "=", "getattr", "(", "self", ",", "\"_\"", "+", "attr", ")", "\n", "if", "attr_value", ":", "\n", "                ", "set_attr", "[", "attr", "]", "=", "attr_value", "\n", "", "", "return", "set_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.all_special_tokens": [[1208, 1219], ["set_attr.values", "list", "set", "isinstance", "list"], "methods", ["None"], ["", "@", "property", "\n", "def", "all_special_tokens", "(", "self", ")", ":", "\n", "        ", "\"\"\" List all the special tokens ('<unk>', '<cls>'...) mapped to class attributes\n            (cls_token, unk_token...).\n        \"\"\"", "\n", "all_toks", "=", "[", "]", "\n", "set_attr", "=", "self", ".", "special_tokens_map", "\n", "for", "attr_value", "in", "set_attr", ".", "values", "(", ")", ":", "\n", "            ", "all_toks", "=", "all_toks", "+", "(", "list", "(", "attr_value", ")", "if", "isinstance", "(", "attr_value", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "attr_value", "]", ")", "\n", "", "all_toks", "=", "list", "(", "set", "(", "all_toks", ")", ")", "\n", "return", "all_toks", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.all_special_ids": [[1220, 1228], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "all_special_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\" List the vocabulary indices of the special tokens ('<unk>', '<cls>'...) mapped to\n            class attributes (cls_token, unk_token...).\n        \"\"\"", "\n", "all_toks", "=", "self", ".", "all_special_tokens", "\n", "all_ids", "=", "self", ".", "convert_tokens_to_ids", "(", "all_toks", ")", "\n", "return", "all_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.clean_up_tokenization": [[1229, 1237], ["out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "clean_up_tokenization", "(", "out_string", ")", ":", "\n", "        ", "\"\"\" Clean up a list of simple English tokenization artifacts like spaces before punctuations and abreviated forms.\n        \"\"\"", "\n", "out_string", "=", "out_string", ".", "replace", "(", "' .'", ",", "'.'", ")", ".", "replace", "(", "' ?'", ",", "'?'", ")", ".", "replace", "(", "' !'", ",", "'!'", ")", ".", "replace", "(", "' ,'", ",", "','", "\n", ")", ".", "replace", "(", "\" ' \"", ",", "\"'\"", ")", ".", "replace", "(", "\" n't\"", ",", "\"n't\"", ")", ".", "replace", "(", "\" 'm\"", ",", "\"'m\"", ")", ".", "replace", "(", "\" do not\"", ",", "\" don't\"", "\n", ")", ".", "replace", "(", "\" 's\"", ",", "\"'s\"", ")", ".", "replace", "(", "\" 've\"", ",", "\"'ve\"", ")", ".", "replace", "(", "\" 're\"", ",", "\"'re\"", ")", "\n", "return", "out_string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.dummy_inputs": [[74, 82], ["torch.tensor"], "methods", ["None"], ["@", "property", "\n", "def", "dummy_inputs", "(", "self", ")", ":", "\n", "        ", "\"\"\" Dummy inputs to do a forward pass in the network.\n\n        Returns:\n            torch.Tensor with dummy inputs\n        \"\"\"", "\n", "return", "{", "'input_ids'", ":", "torch", ".", "tensor", "(", "DUMMY_INPUTS", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.__init__": [[83, 94], ["torch.nn.Module.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["", "def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PreTrainedModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "PretrainedConfig", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameter config in `{}(config)` should be an instance of class `PretrainedConfig`. \"", "\n", "\"To create a model from a pretrained model use \"", "\n", "\"`model = {}.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__class__", ".", "__name__", "\n", ")", ")", "\n", "# Save config in model", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.base_model": [[95, 98], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "base_model", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.get_input_embeddings": [[99, 107], ["getattr", "getattr.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTModel.get_input_embeddings"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get model's input embeddings\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "if", "base_model", "is", "not", "self", ":", "\n", "            ", "return", "base_model", ".", "get_input_embeddings", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.set_input_embeddings": [[108, 116], ["getattr", "getattr.set_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTModel.set_input_embeddings"], ["", "", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\" Set model's input embeddings\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "\n", "if", "base_model", "is", "not", "self", ":", "\n", "            ", "base_model", ".", "set_input_embeddings", "(", "value", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.get_output_embeddings": [[117, 122], ["None"], "methods", ["None"], ["", "", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get model's output embeddings\n            Return None if the model doesn't have output embeddings\n        \"\"\"", "\n", "return", "None", "# Overwrite for models with output embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.tie_weights": [[123, 130], ["modeling_utils.PreTrainedModel.get_output_embeddings", "modeling_utils.PreTrainedModel._tie_or_clone_weights", "modeling_utils.PreTrainedModel.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.get_output_embeddings", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTModel.get_input_embeddings"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "output_embeddings", "=", "self", ".", "get_output_embeddings", "(", ")", "\n", "if", "output_embeddings", "is", "not", "None", ":", "\n", "            ", "self", ".", "_tie_or_clone_weights", "(", "output_embeddings", ",", "self", ".", "get_input_embeddings", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights": [[131, 148], ["torch.nn.Parameter", "hasattr", "torch.nn.functional.pad", "hasattr", "hasattr", "input_embeddings.weight.clone"], "methods", ["None"], ["", "", "def", "_tie_or_clone_weights", "(", "self", ",", "output_embeddings", ",", "input_embeddings", ")", ":", "\n", "        ", "\"\"\" Tie or clone module weights depending of weither we are using TorchScript or not\n        \"\"\"", "\n", "if", "self", ".", "config", ".", "torchscript", ":", "\n", "            ", "output_embeddings", ".", "weight", "=", "nn", ".", "Parameter", "(", "input_embeddings", ".", "weight", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "output_embeddings", ".", "weight", "=", "input_embeddings", ".", "weight", "\n", "\n", "", "if", "hasattr", "(", "output_embeddings", ",", "'bias'", ")", "and", "output_embeddings", ".", "bias", "is", "not", "None", ":", "\n", "            ", "output_embeddings", ".", "bias", ".", "data", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "\n", "output_embeddings", ".", "bias", ".", "data", ",", "\n", "(", "0", ",", "output_embeddings", ".", "weight", ".", "shape", "[", "0", "]", "-", "output_embeddings", ".", "bias", ".", "shape", "[", "0", "]", ")", ",", "\n", "'constant'", ",", "\n", "0", "\n", ")", "\n", "", "if", "hasattr", "(", "output_embeddings", ",", "'out_features'", ")", "and", "hasattr", "(", "input_embeddings", ",", "'num_embeddings'", ")", ":", "\n", "            ", "output_embeddings", ".", "out_features", "=", "input_embeddings", ".", "num_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.resize_token_embeddings": [[149, 175], ["getattr", "getattr._resize_token_embeddings", "modeling_utils.PreTrainedModel.tie_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2MainLayer._resize_token_embeddings", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertForMaskedLM.tie_weights"], ["", "", "def", "resize_token_embeddings", "(", "self", ",", "new_num_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\" Resize input token embeddings matrix of the model if new_num_tokens != config.vocab_size.\n        Take care of tying weights embeddings afterwards if the model class has a `tie_weights()` method.\n\n        Arguments:\n\n            new_num_tokens: (`optional`) int:\n                New number of tokens in the embedding matrix. Increasing the size will add newly initialized vectors at the end. Reducing the size will remove vectors from the end.\n                If not provided or None: does nothing and just returns a pointer to the input tokens ``torch.nn.Embeddings`` Module of the model.\n\n        Return: ``torch.nn.Embeddings``\n            Pointer to the input tokens Embeddings Module of the model\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "# get the base model if needed", "\n", "model_embeds", "=", "base_model", ".", "_resize_token_embeddings", "(", "new_num_tokens", ")", "\n", "if", "new_num_tokens", "is", "None", ":", "\n", "            ", "return", "model_embeds", "\n", "\n", "# Update base model and current model config", "\n", "", "self", ".", "config", ".", "vocab_size", "=", "new_num_tokens", "\n", "base_model", ".", "vocab_size", "=", "new_num_tokens", "\n", "\n", "# Tie weights again if needed", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n", "return", "model_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel._resize_token_embeddings": [[176, 181], ["modeling_utils.PreTrainedModel.get_input_embeddings", "modeling_utils.PreTrainedModel._get_resized_embeddings", "modeling_utils.PreTrainedModel.set_input_embeddings", "modeling_utils.PreTrainedModel.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTModel.get_input_embeddings", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel._get_resized_embeddings", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTModel.set_input_embeddings", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTModel.get_input_embeddings"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "old_embeddings", "=", "self", ".", "get_input_embeddings", "(", ")", "\n", "new_embeddings", "=", "self", ".", "_get_resized_embeddings", "(", "old_embeddings", ",", "new_num_tokens", ")", "\n", "self", ".", "set_input_embeddings", "(", "new_embeddings", ")", "\n", "return", "self", ".", "get_input_embeddings", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel._get_resized_embeddings": [[182, 215], ["old_embeddings.weight.size", "torch.nn.Embedding", "torch.nn.Embedding.to", "modeling_utils.PreTrainedModel._init_weights", "min"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTPreTrainedModel._init_weights"], ["", "def", "_get_resized_embeddings", "(", "self", ",", "old_embeddings", ",", "new_num_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\" Build a resized Embedding Module from a provided token Embedding Module.\n            Increasing the size will add newly initialized vectors at the end\n            Reducing the size will remove vectors from the end\n\n        Args:\n            new_num_tokens: (`optional`) int\n                New number of tokens in the embedding matrix.\n                Increasing the size will add newly initialized vectors at the end\n                Reducing the size will remove vectors from the end\n                If not provided or None: return the provided token Embedding Module.\n        Return: ``torch.nn.Embeddings``\n            Pointer to the resized Embedding Module or the old Embedding Module if new_num_tokens is None\n        \"\"\"", "\n", "if", "new_num_tokens", "is", "None", ":", "\n", "            ", "return", "old_embeddings", "\n", "\n", "", "old_num_tokens", ",", "old_embedding_dim", "=", "old_embeddings", ".", "weight", ".", "size", "(", ")", "\n", "if", "old_num_tokens", "==", "new_num_tokens", ":", "\n", "            ", "return", "old_embeddings", "\n", "\n", "# Build new embeddings", "\n", "", "new_embeddings", "=", "nn", ".", "Embedding", "(", "new_num_tokens", ",", "old_embedding_dim", ")", "\n", "new_embeddings", ".", "to", "(", "old_embeddings", ".", "weight", ".", "device", ")", "\n", "\n", "# initialize all new embeddings (in particular added tokens)", "\n", "self", ".", "_init_weights", "(", "new_embeddings", ")", "\n", "\n", "# Copy word embeddings from the previous weights", "\n", "num_tokens_to_copy", "=", "min", "(", "old_num_tokens", ",", "new_num_tokens", ")", "\n", "new_embeddings", ".", "weight", ".", "data", "[", ":", "num_tokens_to_copy", ",", ":", "]", "=", "old_embeddings", ".", "weight", ".", "data", "[", ":", "num_tokens_to_copy", ",", ":", "]", "\n", "\n", "return", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights": [[216, 227], ["modeling_utils.PreTrainedModel.apply", "modeling_utils.PreTrainedModel.tie_weights", "modeling_utils.PreTrainedModel.prune_heads"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertForMaskedLM.tie_weights", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.prune_heads"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Initialize and prunes weights if needed. \"\"\"", "\n", "# Initialize weights", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "# Prune heads if needed", "\n", "if", "self", ".", "config", ".", "pruned_heads", ":", "\n", "            ", "self", ".", "prune_heads", "(", "self", ".", "config", ".", "pruned_heads", ")", "\n", "\n", "# Tie weights if needed", "\n", "", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.prune_heads": [[228, 242], ["heads_to_prune.items", "modeling_utils.PreTrainedModel.base_model._prune_heads", "list", "set", "set", "modeling_utils.PreTrainedModel.config.pruned_heads.get"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTModel._prune_heads"], ["", "def", "prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the base model.\n\n            Arguments:\n\n                heads_to_prune: dict with keys being selected layer indices (`int`) and associated values being the list of heads to prune in said layer (list of `int`).\n                E.g. {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on layer 1 and heads 2 and 3 on layer 2.\n        \"\"\"", "\n", "# save new sets of pruned heads as union of previously stored pruned heads and newly pruned heads", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "union_heads", "=", "set", "(", "self", ".", "config", ".", "pruned_heads", ".", "get", "(", "layer", ",", "[", "]", ")", ")", "|", "set", "(", "heads", ")", "\n", "self", ".", "config", ".", "pruned_heads", "[", "layer", "]", "=", "list", "(", "union_heads", ")", "# Unfortunately we have to store it as list for JSON", "\n", "\n", "", "self", ".", "base_model", ".", "_prune_heads", "(", "heads_to_prune", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.save_pretrained": [[243, 259], ["os.path.isdir", "model_to_save.config.save_pretrained", "os.path.join", "torch.save", "logger.info", "hasattr", "model_to_save.state_dict"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.save_pretrained"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a model and its configuration file to a directory, so that it\n            can be re-loaded using the `:func:`~transformers.PreTrainedModel.from_pretrained`` class method.\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ",", "\"Saving path should be a directory where the model and configuration can be saved\"", "\n", "\n", "# Only save the model itself if we are using distributed training", "\n", "model_to_save", "=", "self", ".", "module", "if", "hasattr", "(", "self", ",", "'module'", ")", "else", "self", "\n", "\n", "# Save configuration file", "\n", "model_to_save", ".", "config", ".", "save_pretrained", "(", "save_directory", ")", "\n", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "WEIGHTS_NAME", ")", "\n", "torch", ".", "save", "(", "model_to_save", ".", "state_dict", "(", ")", ",", "output_model_file", ")", "\n", "logger", ".", "info", "(", "\"Model weights saved in {}\"", ".", "format", "(", "output_model_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.from_pretrained": [[260, 498], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "cls", "load_tf2_checkpoint_in_pytorch_model.tie_weights", "load_tf2_checkpoint_in_pytorch_model.eval", "logger.warning", "cls.config_class.from_pretrained", "torch.load", "file_utils.cached_path.endswith", "state_dict.copy.copy.keys", "zip", "getattr", "state_dict.copy.copy.copy", "modeling_utils.PreTrainedModel.from_pretrained.load"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertForMaskedLM.tie_weights", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Instantiate a pretrained pytorch model from a pre-trained model configuration.\n\n        The model is set in evaluation mode by default using ``model.eval()`` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with ``model.train()``\n\n        The warning ``Weights from XXX not initialized from pretrained model`` means that the weights of XXX do not come pre-trained with the rest of the model.\n        It is up to you to train those weights with a downstream fine-tuning task.\n\n        The warning ``Weights from XXX not used in YYY`` means that the layer XXX is not used by YYY, therefore those weights are discarded.\n\n        Parameters:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing model weights saved using :func:`~transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n                - None if you are both providing the configuration and state dictionary (resp. with keyword arguments ``config`` and ``state_dict``)\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~transformers.PreTrainedModel.save_pretrained` and :func:`~transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = BertModel.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = BertModel.from_pretrained('./test/saved_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = BertModel.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = BertConfig.from_json_file('./tf_model/my_tf_model_config.json')\n            model = BertModel.from_pretrained('./tf_model/my_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "if", "pretrained_model_name_or_path", "is", "not", "None", "and", "(", "\n", "\"albert\"", "in", "pretrained_model_name_or_path", "and", "\"v2\"", "in", "pretrained_model_name_or_path", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "\"There is currently an upstream reproducibility issue with ALBERT v2 models. Please see \"", "+", "\n", "\"https://github.com/google-research/google-research/issues/119 for more information.\"", ")", "\n", "\n", "", "config", "=", "kwargs", ".", "pop", "(", "'config'", ",", "None", ")", "\n", "state_dict", "=", "kwargs", ".", "pop", "(", "'state_dict'", ",", "None", ")", "\n", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "from_tf", "=", "kwargs", ".", "pop", "(", "'from_tf'", ",", "False", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "resume_download", "=", "kwargs", ".", "pop", "(", "'resume_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "output_loading_info", "=", "kwargs", ".", "pop", "(", "'output_loading_info'", ",", "False", ")", "\n", "\n", "# Load config", "\n", "if", "config", "is", "None", ":", "\n", "            ", "config", ",", "model_kwargs", "=", "cls", ".", "config_class", ".", "from_pretrained", "(", "\n", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "\n", "cache_dir", "=", "cache_dir", ",", "return_unused_kwargs", "=", "True", ",", "\n", "force_download", "=", "force_download", ",", "\n", "resume_download", "=", "resume_download", ",", "\n", "proxies", "=", "proxies", ",", "\n", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "model_kwargs", "=", "kwargs", "\n", "\n", "# Load model", "\n", "", "if", "pretrained_model_name_or_path", "is", "not", "None", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_model_archive_map", ":", "\n", "                ", "archive_file", "=", "cls", ".", "pretrained_model_archive_map", "[", "pretrained_model_name_or_path", "]", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "                ", "if", "from_tf", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF_WEIGHTS_NAME", "+", "\".index\"", ")", ")", ":", "\n", "# Load from a TF 1.0 checkpoint", "\n", "                    ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF_WEIGHTS_NAME", "+", "\".index\"", ")", "\n", "", "elif", "from_tf", "and", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF2_WEIGHTS_NAME", ")", ")", ":", "\n", "# Load from a TF 2.0 checkpoint", "\n", "                    ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF2_WEIGHTS_NAME", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "WEIGHTS_NAME", ")", ")", ":", "\n", "# Load from a PyTorch checkpoint", "\n", "                    ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "WEIGHTS_NAME", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "EnvironmentError", "(", "\"Error no file named {} found in directory {} or `from_tf` set to False\"", ".", "format", "(", "\n", "[", "WEIGHTS_NAME", ",", "TF2_WEIGHTS_NAME", ",", "TF_WEIGHTS_NAME", "+", "\".index\"", "]", ",", "\n", "pretrained_model_name_or_path", ")", ")", "\n", "", "", "elif", "os", ".", "path", ".", "isfile", "(", "pretrained_model_name_or_path", ")", "or", "is_remote_url", "(", "pretrained_model_name_or_path", ")", ":", "\n", "                ", "archive_file", "=", "pretrained_model_name_or_path", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "pretrained_model_name_or_path", "+", "\".index\"", ")", ":", "\n", "                ", "assert", "from_tf", ",", "\"We found a TensorFlow checkpoint at {}, please set from_tf to True to load from this checkpoint\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", "+", "\".index\"", ")", "\n", "archive_file", "=", "pretrained_model_name_or_path", "+", "\".index\"", "\n", "", "else", ":", "\n", "                ", "archive_file", "=", "hf_bucket_url", "(", "pretrained_model_name_or_path", ",", "postfix", "=", "WEIGHTS_NAME", ")", "\n", "if", "from_tf", ":", "\n", "                    ", "raise", "EnvironmentError", "(", "\"Loading a PyTorch model from a TF checkpoint is not supported when using a model identifier name.\"", ")", "\n", "\n", "# redirect to the cache, if necessary", "\n", "", "", "try", ":", "\n", "                ", "resolved_archive_file", "=", "cached_path", "(", "archive_file", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "\n", "proxies", "=", "proxies", ",", "resume_download", "=", "resume_download", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "                ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_model_archive_map", ":", "\n", "                    ", "msg", "=", "\"Couldn't reach server at '{}' to download pretrained weights.\"", ".", "format", "(", "\n", "archive_file", ")", "\n", "", "else", ":", "\n", "                    ", "msg", "=", "\"Model name '{}' was not found in model name list ({}). \"", "\"We assumed '{}' was a path or url to model weight files named one of {} but \"", "\"couldn't find any such file at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "cls", ".", "pretrained_model_archive_map", ".", "keys", "(", ")", ")", ",", "\n", "archive_file", ",", "\n", "[", "WEIGHTS_NAME", ",", "TF2_WEIGHTS_NAME", ",", "TF_WEIGHTS_NAME", "]", ")", "\n", "", "raise", "EnvironmentError", "(", "msg", ")", "\n", "\n", "", "if", "resolved_archive_file", "==", "archive_file", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading weights file {}\"", ".", "format", "(", "archive_file", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading weights file {} from cache at {}\"", ".", "format", "(", "\n", "archive_file", ",", "resolved_archive_file", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "resolved_archive_file", "=", "None", "\n", "\n", "# Instantiate model.", "\n", "", "model", "=", "cls", "(", "config", ",", "*", "model_args", ",", "**", "model_kwargs", ")", "\n", "\n", "if", "state_dict", "is", "None", "and", "not", "from_tf", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "resolved_archive_file", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "\n", "if", "from_tf", ":", "\n", "            ", "if", "resolved_archive_file", ".", "endswith", "(", "'.index'", ")", ":", "\n", "# Load from a TensorFlow 1.X checkpoint - provided by original authors", "\n", "                ", "model", "=", "cls", ".", "load_tf_weights", "(", "model", ",", "config", ",", "resolved_archive_file", "[", ":", "-", "6", "]", ")", "# Remove the '.index'", "\n", "", "else", ":", "\n", "# Load from our TensorFlow 2.0 checkpoints", "\n", "                ", "try", ":", "\n", "                    ", "from", "transformers", "import", "load_tf2_checkpoint_in_pytorch_model", "\n", "model", "=", "load_tf2_checkpoint_in_pytorch_model", "(", "model", ",", "resolved_archive_file", ",", "allow_missing_keys", "=", "True", ")", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "                    ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires both PyTorch and TensorFlow to be installed. Please see \"", "\n", "\"https://pytorch.org/ and https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "e", "\n", "", "", "", "else", ":", "\n", "# Convert old format to new format if needed from a PyTorch state_dict", "\n", "            ", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "                ", "new_key", "=", "None", "\n", "if", "'gamma'", "in", "key", ":", "\n", "                    ", "new_key", "=", "key", ".", "replace", "(", "'gamma'", ",", "'weight'", ")", "\n", "", "if", "'beta'", "in", "key", ":", "\n", "                    ", "new_key", "=", "key", ".", "replace", "(", "'beta'", ",", "'bias'", ")", "\n", "", "if", "key", "==", "'lm_head.decoder.weight'", ":", "\n", "                    ", "new_key", "=", "'lm_head.weight'", "\n", "", "if", "new_key", ":", "\n", "                    ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "                ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "                ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "# PyTorch's `_load_from_state_dict` does not copy parameters in a module's descendants", "\n", "# so we need to apply the function recursively.", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "                ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                    ", "if", "child", "is", "not", "None", ":", "\n", "                        ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "# Make sure we are able to load base models as well as derived models (with heads)", "\n", "", "", "", "start_prefix", "=", "''", "\n", "model_to_load", "=", "model", "\n", "if", "not", "hasattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "and", "any", "(", "s", ".", "startswith", "(", "cls", ".", "base_model_prefix", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "start_prefix", "=", "cls", ".", "base_model_prefix", "+", "'.'", "\n", "", "if", "hasattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "and", "not", "any", "(", "s", ".", "startswith", "(", "cls", ".", "base_model_prefix", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "model_to_load", "=", "getattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "\n", "\n", "", "load", "(", "model_to_load", ",", "prefix", "=", "start_prefix", ")", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Weights of {} not initialized from pretrained model: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "                ", "logger", ".", "info", "(", "\"Weights from pretrained model not used in {}: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", ")", ")", "\n", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Error(s) in loading state_dict for {}:\\n\\t{}'", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "\"\\n\\t\"", ".", "join", "(", "error_msgs", ")", ")", ")", "\n", "\n", "", "", "model", ".", "tie_weights", "(", ")", "# make sure word embedding weights are still tied if needed", "\n", "\n", "# Set model in evaluation mode to desactivate DropOut modules by default", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "output_loading_info", ":", "\n", "            ", "loading_info", "=", "{", "\"missing_keys\"", ":", "missing_keys", ",", "\"unexpected_keys\"", ":", "unexpected_keys", ",", "\"error_msgs\"", ":", "error_msgs", "}", "\n", "return", "model", ",", "loading_info", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.Conv1D.__init__": [[501, 511], ["torch.nn.Module.__init__", "torch.empty", "torch.nn.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "nx", ")", ":", "\n", "        ", "\"\"\" Conv1D layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)\n            Basically works like a Linear layer but the weights are transposed\n        \"\"\"", "\n", "super", "(", "Conv1D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nf", "=", "nf", "\n", "w", "=", "torch", ".", "empty", "(", "nx", ",", "nf", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "w", ",", "std", "=", "0.02", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "w", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "nf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.Conv1D.forward": [[512, 517], ["torch.addmm", "x.view.view.view", "x.view.view.view", "x.view.view.size", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size_out", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "nf", ",", ")", "\n", "x", "=", "torch", ".", "addmm", "(", "self", ".", "bias", ",", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", ",", "self", ".", "weight", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "size_out", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PoolerStartLogits.__init__": [[521, 524], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PoolerStartLogits", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PoolerStartLogits.forward": [[525, 540], ["modeling_utils.PoolerStartLogits.dense().squeeze", "modeling_utils.PoolerStartLogits.dense", "next", "modeling_utils.PoolerStartLogits.parameters"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Args:\n            **p_mask**: (`optional`) ``torch.FloatTensor`` of shape `(batch_size, seq_len)`\n                invalid position mask such as query and special symbols (PAD, SEP, CLS)\n                1.0 means token should be masked.\n        \"\"\"", "\n", "x", "=", "self", ".", "dense", "(", "hidden_states", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "p_mask", "is", "not", "None", ":", "\n", "            ", "if", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "65500", "*", "p_mask", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "1e30", "*", "p_mask", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PoolerEndLogits.__init__": [[545, 551], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.LayerNorm", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PoolerEndLogits", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense_0", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", "*", "2", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dense_1", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PoolerEndLogits.forward": [[552, 584], ["modeling_utils.PoolerEndLogits.dense_0", "modeling_utils.PoolerEndLogits.activation", "modeling_utils.PoolerEndLogits.LayerNorm", "modeling_utils.PoolerEndLogits.dense_1().squeeze", "start_positions[].expand", "hidden_states.gather", "start_states.expand.expand.expand", "torch.cat", "modeling_utils.PoolerEndLogits.dense_1", "next", "modeling_utils.PoolerEndLogits.parameters"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "start_states", "=", "None", ",", "start_positions", "=", "None", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Args:\n            One of ``start_states``, ``start_positions`` should be not None.\n            If both are set, ``start_positions`` overrides ``start_states``.\n\n            **start_states**: ``torch.LongTensor`` of shape identical to hidden_states\n                hidden states of the first tokens for the labeled span.\n            **start_positions**: ``torch.LongTensor`` of shape ``(batch_size,)``\n                position of the first token for the labeled span:\n            **p_mask**: (`optional`) ``torch.FloatTensor`` of shape ``(batch_size, seq_len)``\n                Mask of invalid position such as query and special symbols (PAD, SEP, CLS)\n                1.0 means token should be masked.\n        \"\"\"", "\n", "assert", "start_states", "is", "not", "None", "or", "start_positions", "is", "not", "None", ",", "\"One of start_states, start_positions should be not None\"", "\n", "if", "start_positions", "is", "not", "None", ":", "\n", "            ", "slen", ",", "hsz", "=", "hidden_states", ".", "shape", "[", "-", "2", ":", "]", "\n", "start_positions", "=", "start_positions", "[", ":", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, 1, hsz)", "\n", "start_states", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "start_positions", ")", "# shape (bsz, 1, hsz)", "\n", "start_states", "=", "start_states", ".", "expand", "(", "-", "1", ",", "slen", ",", "-", "1", ")", "# shape (bsz, slen, hsz)", "\n", "\n", "", "x", "=", "self", ".", "dense_0", "(", "torch", ".", "cat", "(", "[", "hidden_states", ",", "start_states", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "LayerNorm", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_1", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "p_mask", "is", "not", "None", ":", "\n", "            ", "if", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "65500", "*", "p_mask", "\n", "", "else", ":", "\n", "                ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "1e30", "*", "p_mask", "\n", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PoolerAnswerClass.__init__": [[588, 593], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PoolerAnswerClass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense_0", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", "*", "2", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "dense_1", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PoolerAnswerClass.forward": [[594, 628], ["modeling_utils.PoolerAnswerClass.dense_0", "modeling_utils.PoolerAnswerClass.activation", "modeling_utils.PoolerAnswerClass.dense_1().squeeze", "start_positions[].expand", "hidden_states.gather().squeeze", "cls_index[].expand", "hidden_states.gather().squeeze", "torch.cat", "modeling_utils.PoolerAnswerClass.dense_1", "hidden_states.gather", "hidden_states.gather"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "start_states", "=", "None", ",", "start_positions", "=", "None", ",", "cls_index", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            One of ``start_states``, ``start_positions`` should be not None.\n            If both are set, ``start_positions`` overrides ``start_states``.\n\n            **start_states**: ``torch.LongTensor`` of shape identical to ``hidden_states``.\n                hidden states of the first tokens for the labeled span.\n            **start_positions**: ``torch.LongTensor`` of shape ``(batch_size,)``\n                position of the first token for the labeled span.\n            **cls_index**: torch.LongTensor of shape ``(batch_size,)``\n                position of the CLS token. If None, take the last token.\n\n            note(Original repo):\n                no dependency on end_feature so that we can obtain one single `cls_logits`\n                for each sample\n        \"\"\"", "\n", "hsz", "=", "hidden_states", ".", "shape", "[", "-", "1", "]", "\n", "assert", "start_states", "is", "not", "None", "or", "start_positions", "is", "not", "None", ",", "\"One of start_states, start_positions should be not None\"", "\n", "if", "start_positions", "is", "not", "None", ":", "\n", "            ", "start_positions", "=", "start_positions", "[", ":", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, 1, hsz)", "\n", "start_states", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "start_positions", ")", ".", "squeeze", "(", "-", "2", ")", "# shape (bsz, hsz)", "\n", "\n", "", "if", "cls_index", "is", "not", "None", ":", "\n", "            ", "cls_index", "=", "cls_index", "[", ":", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, 1, hsz)", "\n", "cls_token_state", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "cls_index", ")", ".", "squeeze", "(", "-", "2", ")", "# shape (bsz, hsz)", "\n", "", "else", ":", "\n", "            ", "cls_token_state", "=", "hidden_states", "[", ":", ",", "-", "1", ",", ":", "]", "# shape (bsz, hsz)", "\n", "\n", "", "x", "=", "self", ".", "dense_0", "(", "torch", ".", "cat", "(", "[", "start_states", ",", "cls_token_state", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_1", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.SQuADHead.__init__": [[670, 678], ["torch.nn.Module.__init__", "modeling_utils.PoolerStartLogits", "modeling_utils.PoolerEndLogits", "modeling_utils.PoolerAnswerClass"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "SQuADHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_n_top", "=", "config", ".", "start_n_top", "\n", "self", ".", "end_n_top", "=", "config", ".", "end_n_top", "\n", "\n", "self", ".", "start_logits", "=", "PoolerStartLogits", "(", "config", ")", "\n", "self", ".", "end_logits", "=", "PoolerEndLogits", "(", "config", ")", "\n", "self", ".", "answer_class", "=", "PoolerAnswerClass", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.SQuADHead.forward": [[679, 737], ["modeling_utils.SQuADHead.start_logits", "modeling_utils.SQuADHead.end_logits", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "hidden_states.size", "torch.nn.functional.softmax", "torch.topk", "start_top_index.unsqueeze().expand", "torch.gather", "torch.einsum.unsqueeze().expand", "hidden_states.unsqueeze().expand_as", "modeling_utils.SQuADHead.end_logits", "torch.nn.functional.softmax", "torch.topk", "end_top_log_probs.view.view.view", "end_top_index.view.view.view", "torch.einsum", "modeling_utils.SQuADHead.answer_class", "modeling_utils.SQuADHead.answer_class", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss.", "p_mask.unsqueeze", "x.squeeze_", "start_top_index.unsqueeze", "torch.einsum.unsqueeze", "hidden_states.unsqueeze", "x.dim"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "\n", "cls_index", "=", "None", ",", "is_impossible", "=", "None", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "(", ")", "\n", "\n", "start_logits", "=", "self", ".", "start_logits", "(", "hidden_states", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, let's remove the dimension added by batch splitting", "\n", "            ", "for", "x", "in", "(", "start_positions", ",", "end_positions", ",", "cls_index", ",", "is_impossible", ")", ":", "\n", "                ", "if", "x", "is", "not", "None", "and", "x", ".", "dim", "(", ")", ">", "1", ":", "\n", "                    ", "x", ".", "squeeze_", "(", "-", "1", ")", "\n", "\n", "# during training, compute the end logits based on the ground truth of the start position", "\n", "", "", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "\n", "if", "cls_index", "is", "not", "None", "and", "is_impossible", "is", "not", "None", ":", "\n", "# Predict answerability from the representation of CLS and START", "\n", "                ", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "cls_index", "=", "cls_index", ")", "\n", "loss_fct_cls", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "cls_loss", "=", "loss_fct_cls", "(", "cls_logits", ",", "is_impossible", ")", "\n", "\n", "# note(zhiliny): by default multiply the loss by 0.5 so that the scale is comparable to start_loss and end_loss", "\n", "total_loss", "+=", "cls_loss", "*", "0.5", "\n", "\n", "", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "else", ":", "\n", "# during inference, compute the end logits based on beam search", "\n", "            ", "bsz", ",", "slen", ",", "hsz", "=", "hidden_states", ".", "size", "(", ")", "\n", "start_log_probs", "=", "F", ".", "softmax", "(", "start_logits", ",", "dim", "=", "-", "1", ")", "# shape (bsz, slen)", "\n", "\n", "start_top_log_probs", ",", "start_top_index", "=", "torch", ".", "topk", "(", "start_log_probs", ",", "self", ".", "start_n_top", ",", "dim", "=", "-", "1", ")", "# shape (bsz, start_n_top)", "\n", "start_top_index_exp", "=", "start_top_index", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "torch", ".", "gather", "(", "hidden_states", ",", "-", "2", ",", "start_top_index_exp", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "start_states", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "slen", ",", "-", "1", ",", "-", "1", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "\n", "hidden_states_expanded", "=", "hidden_states", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "start_states", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "p_mask", "=", "p_mask", ".", "unsqueeze", "(", "-", "1", ")", "if", "p_mask", "is", "not", "None", "else", "None", "\n", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states_expanded", ",", "start_states", "=", "start_states", ",", "p_mask", "=", "p_mask", ")", "\n", "end_log_probs", "=", "F", ".", "softmax", "(", "end_logits", ",", "dim", "=", "1", ")", "# shape (bsz, slen, start_n_top)", "\n", "\n", "end_top_log_probs", ",", "end_top_index", "=", "torch", ".", "topk", "(", "end_log_probs", ",", "self", ".", "end_n_top", ",", "dim", "=", "1", ")", "# shape (bsz, end_n_top, start_n_top)", "\n", "end_top_log_probs", "=", "end_top_log_probs", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "end_top_index", "=", "end_top_index", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "\n", "start_states", "=", "torch", ".", "einsum", "(", "\"blh,bl->bh\"", ",", "hidden_states", ",", "start_log_probs", ")", "\n", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_states", "=", "start_states", ",", "cls_index", "=", "cls_index", ")", "\n", "\n", "outputs", "=", "(", "start_top_log_probs", ",", "start_top_index", ",", "end_top_log_probs", ",", "end_top_index", ",", "cls_logits", ")", "+", "outputs", "\n", "\n", "# return start_top_log_probs, start_top_index, end_top_log_probs, end_top_index, cls_logits", "\n", "# or (if labels are provided) (total_loss,)", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.SequenceSummary.__init__": [[754, 783], ["torch.nn.Module.__init__", "Identity", "Identity", "Identity", "Identity", "hasattr", "hasattr", "torch.nn.Linear", "hasattr", "torch.nn.Tanh", "hasattr", "torch.nn.Dropout", "hasattr", "torch.nn.Dropout", "hasattr"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "SequenceSummary", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "summary_type", "=", "config", ".", "summary_type", "if", "hasattr", "(", "config", ",", "'summary_type'", ")", "else", "'last'", "\n", "if", "self", ".", "summary_type", "==", "'attn'", ":", "\n", "# We should use a standard multi-head attention module with absolute positional embedding for that.", "\n", "# Cf. https://github.com/zihangdai/xlnet/blob/master/modeling.py#L253-L276", "\n", "# We can probably just use the multi-head attention module of PyTorch >=1.1.0", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "summary", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_use_proj'", ")", "and", "config", ".", "summary_use_proj", ":", "\n", "            ", "if", "hasattr", "(", "config", ",", "'summary_proj_to_labels'", ")", "and", "config", ".", "summary_proj_to_labels", "and", "config", ".", "num_labels", ">", "0", ":", "\n", "                ", "num_classes", "=", "config", ".", "num_labels", "\n", "", "else", ":", "\n", "                ", "num_classes", "=", "config", ".", "hidden_size", "\n", "", "self", ".", "summary", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "num_classes", ")", "\n", "\n", "", "self", ".", "activation", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_activation'", ")", "and", "config", ".", "summary_activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "", "self", ".", "first_dropout", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_first_dropout'", ")", "and", "config", ".", "summary_first_dropout", ">", "0", ":", "\n", "            ", "self", ".", "first_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "summary_first_dropout", ")", "\n", "\n", "", "self", ".", "last_dropout", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_last_dropout'", ")", "and", "config", ".", "summary_last_dropout", ">", "0", ":", "\n", "            ", "self", ".", "last_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "summary_last_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.SequenceSummary.forward": [[784, 814], ["modeling_utils.SequenceSummary.first_dropout", "modeling_utils.SequenceSummary.summary", "modeling_utils.SequenceSummary.activation", "modeling_utils.SequenceSummary.last_dropout", "hidden_states.mean", "hidden_states.gather().squeeze", "torch.full_like", "cls_index.expand.expand.unsqueeze().unsqueeze", "cls_index.expand.expand.expand", "hidden_states.gather", "cls_index.expand.expand.unsqueeze", "hidden_states.size", "cls_index.expand.expand.dim"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ",", "cls_index", "=", "None", ")", ":", "\n", "        ", "\"\"\" hidden_states: float Tensor in shape [bsz, ..., seq_len, hidden_size], the hidden-states of the last layer.\n            cls_index: [optional] position of the classification token if summary_type == 'cls_index',\n                shape (bsz,) or more generally (bsz, ...) where ... are optional leading dimensions of hidden_states.\n                if summary_type == 'cls_index' and cls_index is None:\n                    we take the last token of the sequence as classification token\n        \"\"\"", "\n", "if", "self", ".", "summary_type", "==", "'last'", ":", "\n", "            ", "output", "=", "hidden_states", "[", ":", ",", "-", "1", "]", "\n", "", "elif", "self", ".", "summary_type", "==", "'first'", ":", "\n", "            ", "output", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "", "elif", "self", ".", "summary_type", "==", "'mean'", ":", "\n", "            ", "output", "=", "hidden_states", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "summary_type", "==", "'cls_index'", ":", "\n", "            ", "if", "cls_index", "is", "None", ":", "\n", "                ", "cls_index", "=", "torch", ".", "full_like", "(", "hidden_states", "[", "...", ",", ":", "1", ",", ":", "]", ",", "hidden_states", ".", "shape", "[", "-", "2", "]", "-", "1", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "                ", "cls_index", "=", "cls_index", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "cls_index", "=", "cls_index", ".", "expand", "(", "(", "-", "1", ",", ")", "*", "(", "cls_index", ".", "dim", "(", ")", "-", "1", ")", "+", "(", "hidden_states", ".", "size", "(", "-", "1", ")", ",", ")", ")", "\n", "# shape of cls_index: (bsz, XX, 1, hidden_size) where XX are optional leading dim of hidden_states", "\n", "", "output", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "cls_index", ")", ".", "squeeze", "(", "-", "2", ")", "# shape (bsz, XX, hidden_size)", "\n", "", "elif", "self", ".", "summary_type", "==", "'attn'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "output", "=", "self", ".", "first_dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "summary", "(", "output", ")", "\n", "output", "=", "self", ".", "activation", "(", "output", ")", "\n", "output", "=", "self", ".", "last_dropout", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer": [[816, 839], ["index.to.to", "layer.weight.index_select().clone().detach", "list", "len", "torch.nn.Linear().to", "nn.Linear().to.weight.copy_", "layer.weight.size", "layer.weight.index_select().clone().detach.contiguous", "nn.Linear().to.bias.copy_", "layer.weight.index_select().clone", "layer.bias.clone().detach", "layer.bias[].clone().detach", "torch.nn.Linear", "layer.bias[].clone().detach.contiguous", "layer.weight.index_select", "layer.bias.clone", "layer.bias[].clone"], "function", ["None"], ["", "", "def", "prune_linear_layer", "(", "layer", ",", "index", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\" Prune a linear layer (a model parameters) to keep only entries in index.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "index", "=", "index", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "W", "=", "layer", ".", "weight", ".", "index_select", "(", "dim", ",", "index", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "if", "dim", "==", "1", ":", "\n", "            ", "b", "=", "layer", ".", "bias", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "b", "=", "layer", ".", "bias", "[", "index", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "", "new_size", "=", "list", "(", "layer", ".", "weight", ".", "size", "(", ")", ")", "\n", "new_size", "[", "dim", "]", "=", "len", "(", "index", ")", "\n", "new_layer", "=", "nn", ".", "Linear", "(", "new_size", "[", "1", "]", ",", "new_size", "[", "0", "]", ",", "bias", "=", "layer", ".", "bias", "is", "not", "None", ")", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "weight", ".", "copy_", "(", "W", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "True", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "new_layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "bias", ".", "copy_", "(", "b", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "True", "\n", "", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_conv1d_layer": [[841, 863], ["index.to.to", "layer.weight.index_select().clone().detach", "list", "len", "Conv1D().to", "Conv1D().to.weight.copy_", "Conv1D().to.bias.copy_", "layer.bias.clone().detach", "layer.bias[].clone().detach", "layer.weight.size", "layer.weight.index_select().clone().detach.contiguous", "layer.bias[].clone().detach.contiguous", "layer.weight.index_select().clone", "modeling_utils.Conv1D", "layer.bias.clone", "layer.bias[].clone", "layer.weight.index_select"], "function", ["None"], ["", "def", "prune_conv1d_layer", "(", "layer", ",", "index", ",", "dim", "=", "1", ")", ":", "\n", "    ", "\"\"\" Prune a Conv1D layer (a model parameters) to keep only entries in index.\n        A Conv1D work as a Linear layer (see e.g. BERT) but the weights are transposed.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "index", "=", "index", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "W", "=", "layer", ".", "weight", ".", "index_select", "(", "dim", ",", "index", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "if", "dim", "==", "0", ":", "\n", "        ", "b", "=", "layer", ".", "bias", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "        ", "b", "=", "layer", ".", "bias", "[", "index", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "new_size", "=", "list", "(", "layer", ".", "weight", ".", "size", "(", ")", ")", "\n", "new_size", "[", "dim", "]", "=", "len", "(", "index", ")", "\n", "new_layer", "=", "Conv1D", "(", "new_size", "[", "1", "]", ",", "new_size", "[", "0", "]", ")", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "weight", ".", "copy_", "(", "W", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "True", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "bias", ".", "copy_", "(", "b", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "True", "\n", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_layer": [[865, 876], ["isinstance", "modeling_utils.prune_linear_layer", "isinstance", "modeling_utils.prune_conv1d_layer", "ValueError"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_conv1d_layer"], ["", "def", "prune_layer", "(", "layer", ",", "index", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\" Prune a Conv1D or nn.Linear layer (a model parameters) to keep only entries in index.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "return", "prune_linear_layer", "(", "layer", ",", "index", ",", "dim", "=", "0", "if", "dim", "is", "None", "else", "dim", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "Conv1D", ")", ":", "\n", "        ", "return", "prune_conv1d_layer", "(", "layer", ",", "index", ",", "dim", "=", "1", "if", "dim", "is", "None", "else", "dim", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Can't prune layer of class {}\"", ".", "format", "(", "layer", ".", "__class__", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFMultiHeadAttention.__init__": [[78, 91], ["super().__init__", "int", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model_size", ",", "num_heads", ",", "output_attentions", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFMultiHeadAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "output_attentions", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "d_model_size", "=", "d_model_size", "\n", "\n", "self", ".", "depth", "=", "int", "(", "d_model_size", "/", "self", ".", "num_heads", ")", "\n", "\n", "self", ".", "Wq", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_size", ",", "name", "=", "'Wq'", ")", "\n", "self", ".", "Wk", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_size", ",", "name", "=", "'Wk'", ")", "\n", "self", ".", "Wv", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_size", ",", "name", "=", "'Wv'", ")", "\n", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_size", ",", "name", "=", "'dense'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFMultiHeadAttention.split_into_heads": [[92, 95], ["tensorflow.reshape", "tensorflow.transpose"], "methods", ["None"], ["", "def", "split_into_heads", "(", "self", ",", "x", ",", "batch_size", ")", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "depth", ")", ")", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFMultiHeadAttention.call": [[96, 123], ["modeling_tf_ctrl.TFMultiHeadAttention.Wq", "modeling_tf_ctrl.TFMultiHeadAttention.Wk", "modeling_tf_ctrl.TFMultiHeadAttention.Wv", "modeling_tf_ctrl.TFMultiHeadAttention.split_into_heads", "modeling_tf_ctrl.TFMultiHeadAttention.split_into_heads", "modeling_tf_ctrl.TFMultiHeadAttention.split_into_heads", "tensorflow.stack", "modeling_tf_ctrl.scaled_dot_product_attention", "tensorflow.transpose", "tensorflow.reshape", "modeling_tf_ctrl.TFMultiHeadAttention.dense", "modeling_tf_utils.shape_list", "tensorflow.unstack", "tensorflow.concat", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.scaled_dot_product_attention", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "v", ",", "k", ",", "q", ",", "mask", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "batch_size", "=", "shape_list", "(", "q", ")", "[", "0", "]", "\n", "\n", "q", "=", "self", ".", "Wq", "(", "q", ")", "\n", "k", "=", "self", ".", "Wk", "(", "k", ")", "\n", "v", "=", "self", ".", "Wv", "(", "v", ")", "\n", "\n", "q", "=", "self", ".", "split_into_heads", "(", "q", ",", "batch_size", ")", "\n", "k", "=", "self", ".", "split_into_heads", "(", "k", ",", "batch_size", ")", "\n", "v", "=", "self", ".", "split_into_heads", "(", "v", ",", "batch_size", ")", "\n", "if", "layer_past", "is", "not", "None", ":", "\n", "            ", "past_key", ",", "past_value", "=", "tf", ".", "unstack", "(", "layer_past", ",", "axis", "=", "1", ")", "\n", "k", "=", "tf", ".", "concat", "(", "(", "past_key", ",", "k", ")", ",", "dim", "=", "-", "2", ")", "\n", "v", "=", "tf", ".", "concat", "(", "(", "past_value", ",", "v", ")", ",", "dim", "=", "-", "2", ")", "\n", "", "present", "=", "tf", ".", "stack", "(", "(", "k", ",", "v", ")", ",", "axis", "=", "1", ")", "\n", "\n", "output", "=", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ",", "attention_mask", ",", "head_mask", ")", "\n", "scaled_attention", "=", "tf", ".", "transpose", "(", "output", "[", "0", "]", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "attn", "=", "output", "[", "1", "]", "\n", "original_size_attention", "=", "tf", ".", "reshape", "(", "scaled_attention", ",", "(", "batch_size", ",", "-", "1", ",", "self", ".", "d_model_size", ")", ")", "\n", "output", "=", "self", ".", "dense", "(", "original_size_attention", ")", "\n", "\n", "outputs", "=", "(", "output", ",", "present", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attn", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFEncoderLayer.__init__": [[134, 148], ["super().__init__", "modeling_tf_ctrl.TFMultiHeadAttention", "modeling_tf_ctrl.point_wise_feed_forward_network", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.point_wise_feed_forward_network"], ["    ", "def", "__init__", "(", "self", ",", "d_model_size", ",", "num_heads", ",", "dff", ",", "rate", "=", "0.1", ",", "layer_norm_epsilon", "=", "1e-6", ",", "output_attentions", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFEncoderLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "multi_head_attention", "=", "TFMultiHeadAttention", "(", "d_model_size", ",", "\n", "num_heads", ",", "\n", "output_attentions", ",", "\n", "name", "=", "\"multi_head_attention\"", ")", "\n", "self", ".", "ffn", "=", "point_wise_feed_forward_network", "(", "d_model_size", ",", "dff", ",", "name", "=", "\"ffn\"", ")", "\n", "\n", "self", ".", "layernorm1", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "layer_norm_epsilon", ",", "name", "=", "\"layernorm1\"", ")", "\n", "self", ".", "layernorm2", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "layer_norm_epsilon", ",", "name", "=", "\"layernorm2\"", ")", "\n", "\n", "self", ".", "dropout1", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "self", ".", "dropout2", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFEncoderLayer.call": [[149, 165], ["modeling_tf_ctrl.TFEncoderLayer.layernorm1", "modeling_tf_ctrl.TFEncoderLayer.multi_head_attention", "modeling_tf_ctrl.TFEncoderLayer.dropout1", "modeling_tf_ctrl.TFEncoderLayer.layernorm2", "modeling_tf_ctrl.TFEncoderLayer.ffn", "modeling_tf_ctrl.TFEncoderLayer.dropout2"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", ",", "mask", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "normed", "=", "self", ".", "layernorm1", "(", "x", ")", "\n", "attn_outputs", "=", "self", ".", "multi_head_attention", "(", "[", "normed", ",", "normed", ",", "normed", ",", "mask", ",", "layer_past", ",", "\n", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "attn_output", "=", "attn_outputs", "[", "0", "]", "\n", "attn_output", "=", "self", ".", "dropout1", "(", "attn_output", ",", "training", "=", "training", ")", "\n", "out1", "=", "x", "+", "attn_output", "\n", "\n", "out2", "=", "self", ".", "layernorm2", "(", "out1", ")", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "out2", ")", "\n", "ffn_output", "=", "self", ".", "dropout2", "(", "ffn_output", ",", "training", "=", "training", ")", "\n", "out2", "=", "out1", "+", "ffn_output", "\n", "\n", "outputs", "=", "(", "out2", ",", ")", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFCTRLMainLayer.__init__": [[168, 194], ["super().__init__", "modeling_tf_ctrl.positional_encoding", "modeling_tf_utils.TFSharedEmbeddings", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_ctrl.TFEncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.positional_encoding"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFCTRLMainLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_past", "=", "config", ".", "output_past", "\n", "\n", "self", ".", "d_model_size", "=", "config", ".", "n_embd", "\n", "self", ".", "num_layers", "=", "config", ".", "n_layer", "\n", "\n", "self", ".", "pos_encoding", "=", "positional_encoding", "(", "config", ".", "n_positions", ",", "self", ".", "d_model_size", ")", "\n", "\n", "\n", "self", ".", "w", "=", "TFSharedEmbeddings", "(", "config", ".", "vocab_size", ",", "\n", "config", ".", "n_embd", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "name", "=", "\"w\"", ")", "\n", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "[", "TFEncoderLayer", "(", "config", ".", "n_embd", ",", "\n", "config", ".", "n_head", ",", "\n", "config", ".", "dff", ",", "\n", "config", ".", "resid_pdrop", ",", "\n", "config", ".", "layer_norm_epsilon", ",", "\n", "config", ".", "output_attentions", ",", "\n", "name", "=", "'h_._{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", "]", "\n", "self", ".", "layernorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "name", "=", "\"layernorm\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFCTRLMainLayer.get_input_embeddings": [[195, 197], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFCTRLMainLayer._resize_token_embeddings": [[198, 200], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFCTRLMainLayer._prune_heads": [[201, 206], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n                heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFCTRLMainLayer.call": [[207, 330], ["isinstance", "tensorflow.reshape", "tensorflow.math.sqrt", "tensorflow.gather", "modeling_tf_ctrl.TFCTRLMainLayer.dropout", "enumerate", "modeling_tf_ctrl.TFCTRLMainLayer.layernorm", "tensorflow.reshape", "isinstance", "ValueError", "tensorflow.tile", "tensorflow.cast", "tensorflow.reshape", "modeling_tf_ctrl.TFCTRLMainLayer.w", "tensorflow.math.sqrt", "modeling_tf_ctrl.TFCTRLMainLayer.w", "tensorflow.linalg.band_part", "tensorflow.cast", "zip", "h", "tuple", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "tensorflow.reshape", "len", "modeling_tf_utils.shape_list", "tensorflow.range", "tensorflow.cast", "tensorflow.ones", "tuple.append", "len", "len", "len", "len", "len", "len", "len", "ValueError", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.reshape", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "past", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "past", "\n", "attention_mask", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "6", "]", "if", "len", "(", "inputs", ")", ">", "6", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "7", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "past", "=", "inputs", ".", "get", "(", "'past'", ",", "past", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "7", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "input_ids", ")", "\n", "input_ids", "=", "tf", ".", "reshape", "(", "input_ids", ",", "[", "-", "1", ",", "input_shape", "[", "-", "1", "]", "]", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "past", "is", "None", ":", "\n", "            ", "past_length", "=", "0", "\n", "past", "=", "[", "None", "]", "*", "len", "(", "self", ".", "h", ")", "\n", "", "else", ":", "\n", "            ", "past_length", "=", "shape_list", "(", "past", "[", "0", "]", "[", "0", "]", ")", "[", "-", "2", "]", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "range", "(", "past_length", ",", "input_shape", "[", "-", "1", "]", "+", "past_length", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "tf", ".", "newaxis", ",", ":", "]", "\n", "position_ids", "=", "tf", ".", "tile", "(", "position_ids", ",", "[", "input_shape", "[", "0", "]", ",", "1", "]", ")", "\n", "\n", "# Attention mask.", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "            ", "attention_mask", "=", "attention_mask", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "\n", "attention_mask", "=", "tf", ".", "cast", "(", "attention_mask", ",", "tf", ".", "float32", ")", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "-", "10000.0", "\n", "", "else", ":", "\n", "            ", "attention_mask", "=", "None", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# head_mask has shape n_layer x batch x n_heads x N x N", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "num_layers", "\n", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "reshape", "(", "token_type_ids", ",", "[", "-", "1", ",", "shape_list", "(", "token_type_ids", ")", "[", "-", "1", "]", "]", ")", "\n", "token_type_embeds", "=", "self", ".", "w", "(", "token_type_ids", ",", "mode", "=", "'embedding'", ")", "\n", "token_type_embeds", "*=", "tf", ".", "math", ".", "sqrt", "(", "tf", ".", "cast", "(", "self", ".", "d_model_size", ",", "tf", ".", "float32", ")", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "position_ids", "=", "tf", ".", "reshape", "(", "position_ids", ",", "[", "-", "1", ",", "shape_list", "(", "position_ids", ")", "[", "-", "1", "]", "]", ")", "\n", "\n", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "w", "(", "input_ids", ",", "mode", "=", "'embedding'", ")", "\n", "", "seq_len", "=", "input_shape", "[", "-", "1", "]", "\n", "mask", "=", "1", "-", "tf", ".", "linalg", ".", "band_part", "(", "tf", ".", "ones", "(", "(", "seq_len", ",", "seq_len", ")", ")", ",", "-", "1", ",", "0", ")", "\n", "\n", "inputs_embeds", "*=", "tf", ".", "math", ".", "sqrt", "(", "tf", ".", "cast", "(", "self", ".", "d_model_size", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "pos_embeds", "=", "tf", ".", "gather", "(", "self", ".", "pos_encoding", ",", "position_ids", ")", "\n", "\n", "hidden_states", "=", "inputs_embeds", "+", "pos_embeds", "+", "token_type_embeds", "\n", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "[", "shape_list", "(", "hidden_states", ")", "[", "-", "1", "]", "]", "\n", "presents", "=", "(", ")", "\n", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "[", "]", "\n", "for", "i", ",", "(", "h", ",", "layer_past", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "h", ",", "past", ")", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "tf", ".", "reshape", "(", "hidden_states", ",", "output_shape", ")", ",", ")", "\n", "", "outputs", "=", "h", "(", "[", "hidden_states", ",", "mask", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "hidden_states", ",", "present", "=", "outputs", "[", ":", "2", "]", "\n", "\n", "if", "self", ".", "output_past", ":", "\n", "                ", "presents", "=", "presents", "+", "(", "present", ",", ")", "\n", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "", "", "hidden_states", "=", "self", ".", "layernorm", "(", "hidden_states", ")", "\n", "hidden_states", "=", "tf", ".", "reshape", "(", "hidden_states", ",", "output_shape", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_past", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "presents", ",", ")", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# let the number of heads free (-1) so we can extract attention even after head pruning", "\n", "            ", "attention_output_shape", "=", "input_shape", "[", ":", "-", "1", "]", "+", "[", "-", "1", "]", "+", "shape_list", "(", "all_attentions", "[", "0", "]", ")", "[", "-", "2", ":", "]", "\n", "all_attentions", "=", "tuple", "(", "tf", ".", "reshape", "(", "t", ",", "attention_output_shape", ")", "for", "t", "in", "all_attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFCTRLModel.__init__": [[426, 429], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_ctrl.TFCTRLMainLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFCTRLModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFCTRLMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFCTRLModel.call": [[430, 433], ["modeling_tf_ctrl.TFCTRLModel.transformer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFCTRLLMHead.__init__": [[436, 443], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFCTRLLMHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "input_embeddings", "=", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFCTRLLMHead.build": [[444, 450], ["modeling_tf_ctrl.TFCTRLLMHead.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'bias'", ")", "\n", "super", "(", "TFCTRLLMHead", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFCTRLLMHead.call": [[451, 455], ["modeling_tf_ctrl.TFCTRLLMHead.input_embeddings"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "input_embeddings", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "hidden_states", "=", "hidden_states", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFCTRLLMHeadModel.__init__": [[489, 494], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_ctrl.TFCTRLMainLayer", "modeling_tf_ctrl.TFCTRLLMHead"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFCTRLLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFCTRLMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n", "self", ".", "lm_head", "=", "TFCTRLLMHead", "(", "config", ",", "self", ".", "transformer", ".", "w", ",", "name", "=", "\"lm_head\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFCTRLLMHeadModel.get_output_embeddings": [[495, 497], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", ".", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.TFCTRLLMHeadModel.call": [[498, 507], ["modeling_tf_ctrl.TFCTRLLMHeadModel.transformer", "modeling_tf_ctrl.TFCTRLLMHeadModel.lm_head"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "# lm_logits, presents, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.angle_defn": [[35, 38], ["numpy.power", "numpy.float32"], "function", ["None"], ["def", "angle_defn", "(", "pos", ",", "i", ",", "d_model_size", ")", ":", "\n", "    ", "angle_rates", "=", "1", "/", "np", ".", "power", "(", "10000", ",", "(", "2", "*", "(", "i", "//", "2", ")", ")", "/", "np", ".", "float32", "(", "d_model_size", ")", ")", "\n", "return", "pos", "*", "angle_rates", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.positional_encoding": [[39, 51], ["modeling_tf_ctrl.angle_defn", "numpy.sin", "numpy.cos", "tensorflow.cast", "numpy.concatenate", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.angle_defn"], ["", "def", "positional_encoding", "(", "position", ",", "d_model_size", ")", ":", "\n", "# create the sinusoidal pattern for the positional encoding", "\n", "    ", "angle_rads", "=", "angle_defn", "(", "np", ".", "arange", "(", "position", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "\n", "np", ".", "arange", "(", "d_model_size", ")", "[", "np", ".", "newaxis", ",", ":", "]", ",", "\n", "d_model_size", ")", "\n", "\n", "sines", "=", "np", ".", "sin", "(", "angle_rads", "[", ":", ",", "0", ":", ":", "2", "]", ")", "\n", "cosines", "=", "np", ".", "cos", "(", "angle_rads", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "\n", "# pos_encoding = tf.cast(np.concatenate([sines, cosines], axis=-1)[np.newaxis, ...], dtype=tf.float32)", "\n", "pos_encoding", "=", "tf", ".", "cast", "(", "np", ".", "concatenate", "(", "[", "sines", ",", "cosines", "]", ",", "axis", "=", "-", "1", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "pos_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.scaled_dot_product_attention": [[52, 75], ["tensorflow.matmul", "tensorflow.cast", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.math.sqrt", "modeling_tf_utils.shape_list"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "# calculate attention", "\n", "    ", "matmul_qk", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "\n", "dk", "=", "tf", ".", "cast", "(", "shape_list", "(", "k", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "\n", "scaled_attention_logits", "=", "matmul_qk", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scaled_attention_logits", "+=", "(", "mask", "*", "-", "1e4", ")", "\n", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask", "\n", "        ", "scaled_attention_logits", "=", "scaled_attention_logits", "+", "attention_mask", "\n", "\n", "", "attention_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "scaled_attention_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "        ", "attention_weights", "=", "attention_weights", "*", "head_mask", "\n", "\n", "", "output", "=", "tf", ".", "matmul", "(", "attention_weights", ",", "v", ")", "\n", "\n", "return", "output", ",", "attention_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_ctrl.point_wise_feed_forward_network": [[126, 131], ["tensorflow.keras.Sequential", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense"], "function", ["None"], ["", "", "def", "point_wise_feed_forward_network", "(", "d_model_size", ",", "dff", ",", "name", "=", "\"\"", ")", ":", "\n", "    ", "return", "tf", ".", "keras", ".", "Sequential", "(", "[", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dff", ",", "activation", "=", "'relu'", ",", "name", "=", "\"0\"", ")", ",", "\n", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "d_model_size", ",", "name", "=", "\"2\"", ")", "\n", "]", ",", "name", "=", "\"ffn\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_t5_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch": [[29, 41], ["transformers.T5Config.from_json_file", "print", "transformers.T5Model", "transformers.load_tf_weights_in_t5", "print", "torch.save", "transformers.T5Model.state_dict", "str"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_t5.load_tf_weights_in_t5"], ["def", "convert_tf_checkpoint_to_pytorch", "(", "tf_checkpoint_path", ",", "config_file", ",", "pytorch_dump_path", ")", ":", "\n", "# Initialise PyTorch model", "\n", "    ", "config", "=", "T5Config", ".", "from_json_file", "(", "config_file", ")", "\n", "print", "(", "\"Building PyTorch model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "model", "=", "T5Model", "(", "config", ")", "\n", "\n", "# Load weights from tf checkpoint", "\n", "load_tf_weights_in_t5", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_dump_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertEmbeddings.__init__": [[160, 170], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertEmbeddings.forward": [[171, 194], ["modeling_bert.BertEmbeddings.position_embeddings", "modeling_bert.BertEmbeddings.token_type_embeddings", "modeling_bert.BertEmbeddings.LayerNorm", "modeling_bert.BertEmbeddings.dropout", "input_ids.size", "torch.arange", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.zeros", "modeling_bert.BertEmbeddings.word_embeddings", "modeling_bert.BertEmbeddings.size", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "input_shape", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros", "(", "input_shape", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "inputs_embeds", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertSelfAttention.__init__": [[197, 214], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertSelfAttention.transpose_for_scores": [[215, 219], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "# x: (batch_size, seq_length, hidden_size)", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "# (batch_size, seq_length, num_attention_heads, attention_head_size)", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# (batch_size, num_attention_heads, seq_length, attention_head_size)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertSelfAttention.forward": [[220, 264], ["modeling_bert.BertSelfAttention.query", "modeling_bert.BertSelfAttention.transpose_for_scores", "modeling_bert.BertSelfAttention.transpose_for_scores", "modeling_bert.BertSelfAttention.transpose_for_scores", "torch.matmul", "modeling_bert.BertSelfAttention.dropout", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "modeling_bert.BertSelfAttention.key", "modeling_bert.BertSelfAttention.value", "modeling_bert.BertSelfAttention.key", "modeling_bert.BertSelfAttention.value", "modeling_bert.BertSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "\n", "# If this is instantiated as a cross-attention module, the keys", "\n", "# and values come from an encoder; the attention mask needs to be", "\n", "# such that the encoder's padding tokens are not attended to.", "\n", "if", "encoder_hidden_states", "is", "not", "None", ":", "\n", "            ", "mixed_key_layer", "=", "self", ".", "key", "(", "encoder_hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "encoder_hidden_states", ")", "\n", "attention_mask", "=", "encoder_attention_mask", "\n", "", "else", ":", "\n", "            ", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "# (batch_size, num_attention_heads, seq_length, seq_length)", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "# to scale", "\n", "if", "attention_mask", "is", "not", "None", ":", "# attention_mask: (bs, 1, 1, len)", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "            ", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attention_probs", "=", "attention_probs", "*", "head_mask", "\n", "\n", "", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "# (bs, seq_len, num_heads, head_size)", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "# (bs, seq_len, hidden_size)", "\n", "\n", "outputs", "=", "(", "context_layer", ",", "attention_probs", ")", "if", "self", ".", "output_attentions", "else", "(", "context_layer", ",", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertSelfOutput.__init__": [[267, 272], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertSelfOutput.forward": [[273, 278], ["modeling_bert.BertSelfOutput.dense", "modeling_bert.BertSelfOutput.dropout", "modeling_bert.BertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertAttention.__init__": [[281, 286], ["torch.nn.Module.__init__", "modeling_bert.BertSelfAttention", "modeling_bert.BertSelfOutput", "set"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertAttention.prune_heads": [[287, 309], ["torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_bert.BertAttention.pruned_heads.union", "len", "set", "len", "sum", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "self", ".", "num_attention_heads", ",", "self", ".", "self", ".", "attention_head_size", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "# Convert to set and remove already pruned heads", "\n", "for", "head", "in", "heads", ":", "\n", "# Compute how many pruned heads are before the head and move the index accordingly", "\n", "            ", "head", "=", "head", "-", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "\n", "# Prune linear layers", "\n", "self", ".", "self", ".", "query", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "query", ",", "index", ")", "\n", "self", ".", "self", ".", "key", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "key", ",", "index", ")", "\n", "self", ".", "self", ".", "value", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "value", ",", "index", ")", "\n", "self", ".", "output", ".", "dense", "=", "prune_linear_layer", "(", "self", ".", "output", ".", "dense", ",", "index", ",", "dim", "=", "1", ")", "\n", "\n", "# Update hyper params and store pruned heads", "\n", "self", ".", "self", ".", "num_attention_heads", "=", "self", ".", "self", ".", "num_attention_heads", "-", "len", "(", "heads", ")", "\n", "self", ".", "self", ".", "all_head_size", "=", "self", ".", "self", ".", "attention_head_size", "*", "self", ".", "self", ".", "num_attention_heads", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertAttention.forward": [[310, 315], ["modeling_bert.BertAttention.self", "modeling_bert.BertAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "self_outputs", "=", "self", ".", "self", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", ",", "encoder_hidden_states", ",", "encoder_attention_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_outputs", "[", "0", "]", ",", "hidden_states", ")", "\n", "outputs", "=", "(", "attention_output", ",", ")", "+", "self_outputs", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertIntermediate.__init__": [[319, 326], ["torch.nn.Module.__init__", "torch.nn.Linear", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertIntermediate.forward": [[327, 331], ["modeling_bert.BertIntermediate.dense", "modeling_bert.BertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertOutput.__init__": [[334, 339], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertOutput.forward": [[340, 345], ["modeling_bert.BertOutput.dense", "modeling_bert.BertOutput.dropout", "modeling_bert.BertOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertLayer.__init__": [[348, 356], ["torch.nn.Module.__init__", "modeling_bert.BertAttention", "modeling_bert.BertIntermediate", "modeling_bert.BertOutput", "modeling_bert.BertAttention"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "is_decoder", "=", "config", ".", "is_decoder", "\n", "if", "self", ".", "is_decoder", ":", "\n", "            ", "self", ".", "crossattention", "=", "BertAttention", "(", "config", ")", "\n", "", "self", ".", "intermediate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertLayer.forward": [[357, 371], ["modeling_bert.BertLayer.attention", "modeling_bert.BertLayer.intermediate", "modeling_bert.BertLayer.output", "modeling_bert.BertLayer.crossattention"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "self_attention_outputs", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", ")", "\n", "attention_output", "=", "self_attention_outputs", "[", "0", "]", "\n", "outputs", "=", "self_attention_outputs", "[", "1", ":", "]", "# add self attentions if we output attention weights", "\n", "\n", "if", "self", ".", "is_decoder", "and", "encoder_hidden_states", "is", "not", "None", ":", "\n", "            ", "cross_attention_outputs", "=", "self", ".", "crossattention", "(", "attention_output", ",", "attention_mask", ",", "head_mask", ",", "encoder_hidden_states", ",", "encoder_attention_mask", ")", "\n", "attention_output", "=", "cross_attention_outputs", "[", "0", "]", "\n", "outputs", "=", "outputs", "+", "cross_attention_outputs", "[", "1", ":", "]", "# add cross attentions if we output attention weights", "\n", "\n", "", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "outputs", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertEncoder.__init__": [[374, 379], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "modeling_bert.BertLayer", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "BertLayer", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertEncoder.forward": [[380, 412], ["enumerate", "layer_module", "attention_mask.size", "layer_module", "layer_module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "if", "attention_mask", ".", "size", "(", ")", "[", "-", "2", "]", "!=", "1", ":", "\n", "                ", "mask", "=", "attention_mask", "[", ":", ",", ":", ",", "0", ",", ":", "]", "\n", "mask", "=", "mask", "[", ":", ",", ":", ",", "None", ",", ":", "]", "\n", "if", "i", "<", "12", ":", "\n", "                    ", "layer_outputs", "=", "layer_module", "(", "hidden_states", ",", "mask", ",", "head_mask", "[", "i", "]", ",", "encoder_hidden_states", ",", "encoder_attention_mask", ")", "\n", "", "else", ":", "\n", "                    ", "layer_outputs", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "i", "]", ",", "encoder_hidden_states", ",", "encoder_attention_mask", ")", "\n", "", "hidden_states", "=", "layer_outputs", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "layer_outputs", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "i", "]", ",", "encoder_hidden_states", ",", "\n", "encoder_attention_mask", ")", "\n", "hidden_states", "=", "layer_outputs", "[", "0", "]", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "layer_outputs", "[", "1", "]", ",", ")", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertPooler.__init__": [[415, 419], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertPooler.forward": [[420, 427], ["modeling_bert.BertPooler.dense", "modeling_bert.BertPooler.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertPredictionHeadTransform.__init__": [[430, 438], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPredictionHeadTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "config", ".", "hidden_act", "\n", "", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertPredictionHeadTransform.forward": [[439, 444], ["modeling_bert.BertPredictionHeadTransform.dense", "modeling_bert.BertPredictionHeadTransform.transform_act_fn", "modeling_bert.BertPredictionHeadTransform.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertLMPredictionHead.__init__": [[447, 458], ["torch.nn.Module.__init__", "modeling_bert.BertPredictionHeadTransform", "torch.nn.Linear", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLMPredictionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "BertPredictionHeadTransform", "(", "config", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "\n", "config", ".", "vocab_size", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "config", ".", "vocab_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertLMPredictionHead.forward": [[459, 463], ["modeling_bert.BertLMPredictionHead.transform", "modeling_bert.BertLMPredictionHead.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "transform", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "decoder", "(", "hidden_states", ")", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertOnlyMLMHead.__init__": [[466, 469], ["torch.nn.Module.__init__", "modeling_bert.BertLMPredictionHead"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOnlyMLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertOnlyMLMHead.forward": [[470, 473], ["modeling_bert.BertOnlyMLMHead.predictions"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertOnlyNSPHead.__init__": [[476, 479], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOnlyNSPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertOnlyNSPHead.forward": [[480, 483], ["modeling_bert.BertOnlyNSPHead.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pooled_output", ")", ":", "\n", "        ", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertPreTrainingHeads.__init__": [[486, 490], ["torch.nn.Module.__init__", "modeling_bert.BertLMPredictionHead", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPreTrainingHeads", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertPreTrainingHeads.forward": [[491, 495], ["modeling_bert.BertPreTrainingHeads.predictions", "modeling_bert.BertPreTrainingHeads.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ",", "pooled_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "prediction_scores", ",", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertPreTrainedModel._init_weights": [[506, 517], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "BertLayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertModel.__init__": [[625, 634], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertEmbeddings", "modeling_bert.BertEncoder", "modeling_bert.BertPooler", "modeling_bert.BertModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "embeddings", "=", "BertEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "BertEncoder", "(", "config", ")", "\n", "self", ".", "pooler", "=", "BertPooler", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertModel.get_input_embeddings": [[635, 637], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertModel.set_input_embeddings": [[638, 640], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "embeddings", ".", "word_embeddings", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertModel._prune_heads": [[641, 648], ["heads_to_prune.items", "modeling_bert.BertModel.encoder.layer[].attention.prune_heads"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "encoder", ".", "layer", "[", "layer", "]", ".", "attention", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertModel.forward": [[649, 756], ["extended_attention_mask.to.to.to", "modeling_bert.BertModel.embeddings", "modeling_bert.BertModel.encoder", "modeling_bert.BertModel.pooler", "ValueError", "torch.ones", "torch.zeros", "torch.ones.dim", "encoder_hidden_states.size", "encoder_extended_attention_mask.to.to.to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "input_ids.size", "torch.ones.dim", "ValueError", "torch.ones", "torch.ones.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "ValueError", "torch.arange", "causal_mask.to.to.to", "next", "torch.ones.dim", "ValueError", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "inputs_embeds.size", "seq_ids[].repeat", "modeling_bert.BertModel.parameters", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "modeling_bert.BertModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_bert.BertModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Forward pass on the Model.\n\n        The model can behave as an encoder (with only self-attention) as well\n        as a decoder, in which case a layer of cross-attention is added between\n        the self-attention layers, following the architecture described in `Attention is all you need`_ by Ashish Vaswani,\n        Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Lukasz Kaiser and Illia Polosukhin.\n\n        To behave as an decoder the model needs to be initialized with the\n        `is_decoder` argument of the configuration set to `True`; an\n        `encoder_hidden_states` is expected as an input to the forward pass.\n\n        .. _`Attention is all you need`:\n            https://arxiv.org/abs/1706.03762\n\n        \"\"\"", "\n", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "\n", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones", "(", "input_shape", ",", "device", "=", "device", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros", "(", "input_shape", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "# We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]", "\n", "# ourselves in which case we just need to make it broadcastable to all heads.", "\n", "", "if", "attention_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "extended_attention_mask", "=", "attention_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "", "elif", "attention_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "# Provided a padding mask of dimensions [batch_size, seq_length]", "\n", "# - if the model is a decoder, apply a causal mask in addition to the padding mask", "\n", "# - if the model is an encoder, make the mask broadcastable to [batch_size, num_heads, seq_length, seq_length]", "\n", "            ", "if", "self", ".", "config", ".", "is_decoder", ":", "\n", "                ", "batch_size", ",", "seq_length", "=", "input_shape", "\n", "seq_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "device", "=", "device", ")", "\n", "causal_mask", "=", "seq_ids", "[", "None", ",", "None", ",", ":", "]", ".", "repeat", "(", "batch_size", ",", "seq_length", ",", "1", ")", "<=", "seq_ids", "[", "None", ",", ":", ",", "None", "]", "\n", "causal_mask", "=", "causal_mask", ".", "to", "(", "torch", ".", "long", ")", "# not converting to long will cause errors with pytorch version < 1.3", "\n", "extended_attention_mask", "=", "causal_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "*", "attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "extended_attention_mask", "=", "attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Wrong shape for input_ids (shape {}) or attention_mask (shape {})\"", ".", "format", "(", "input_shape", ",", "attention_mask", ".", "shape", ")", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# If a 2D ou 3D attention mask is provided for the cross-attention", "\n", "# we need to make broadcastabe to [batch_size, num_heads, seq_length, seq_length]", "\n", "if", "self", ".", "config", ".", "is_decoder", "and", "encoder_hidden_states", "is", "not", "None", ":", "\n", "            ", "encoder_batch_size", ",", "encoder_sequence_length", ",", "_", "=", "encoder_hidden_states", ".", "size", "(", ")", "\n", "encoder_hidden_shape", "=", "(", "encoder_batch_size", ",", "encoder_sequence_length", ")", "\n", "if", "encoder_attention_mask", "is", "None", ":", "\n", "                ", "encoder_attention_mask", "=", "torch", ".", "ones", "(", "encoder_hidden_shape", ",", "device", "=", "device", ")", "\n", "\n", "", "if", "encoder_attention_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "encoder_extended_attention_mask", "=", "encoder_attention_mask", "[", ":", ",", "None", ",", ":", ",", ":", "]", "\n", "", "elif", "encoder_attention_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "encoder_extended_attention_mask", "=", "encoder_attention_mask", "[", ":", ",", "None", ",", "None", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Wrong shape for encoder_hidden_shape (shape {}) or encoder_attention_mask (shape {})\"", ".", "format", "(", "encoder_hidden_shape", ",", "\n", "encoder_attention_mask", ".", "shape", ")", ")", "\n", "\n", "", "encoder_extended_attention_mask", "=", "encoder_extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "encoder_extended_attention_mask", "=", "(", "1.0", "-", "encoder_extended_attention_mask", ")", "*", "-", "10000.0", "\n", "", "else", ":", "\n", "            ", "encoder_extended_attention_mask", "=", "None", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "num_hidden_layers", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "num_hidden_layers", "\n", "\n", "", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", "=", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "encoder_outputs", "=", "self", ".", "encoder", "(", "embedding_output", ",", "\n", "attention_mask", "=", "extended_attention_mask", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "encoder_hidden_states", "=", "encoder_hidden_states", ",", "\n", "encoder_attention_mask", "=", "encoder_extended_attention_mask", ")", "\n", "sequence_output", "=", "encoder_outputs", "[", "0", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "sequence_output", ",", "pooled_output", ",", ")", "+", "encoder_outputs", "[", "1", ":", "]", "# add hidden_states and attentions if they are here", "\n", "return", "outputs", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForPreTraining.__init__": [[799, 806], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "modeling_bert.BertPreTrainingHeads", "modeling_bert.BertForPreTraining.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForPreTraining", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertPreTrainingHeads", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForPreTraining.get_output_embeddings": [[807, 809], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cls", ".", "predictions", ".", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForPreTraining.forward": [[810, 833], ["modeling_bert.BertForPreTraining.bert", "modeling_bert.BertForPreTraining.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "prediction_scores.view", "masked_lm_labels.view", "seq_relationship_score.view", "next_sentence_label.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "masked_lm_labels", "=", "None", ",", "next_sentence_label", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", ",", "pooled_output", "=", "outputs", "[", ":", "2", "]", "\n", "prediction_scores", ",", "seq_relationship_score", "=", "self", ".", "cls", "(", "sequence_output", ",", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", "seq_relationship_score", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", "and", "next_sentence_label", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "next_sentence_loss", "=", "loss_fct", "(", "seq_relationship_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "next_sentence_label", ".", "view", "(", "-", "1", ")", ")", "\n", "total_loss", "=", "masked_lm_loss", "+", "next_sentence_loss", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), prediction_scores, seq_relationship_score, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForMaskedLM.__init__": [[875, 882], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "modeling_bert.BertOnlyMLMHead", "modeling_bert.BertForMaskedLM.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertOnlyMLMHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForMaskedLM.get_output_embeddings": [[883, 885], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cls", ".", "predictions", ".", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForMaskedLM.forward": [[886, 923], ["modeling_bert.BertForMaskedLM.bert", "modeling_bert.BertForMaskedLM.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "prediction_scores[].contiguous", "lm_labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "prediction_scores[].contiguous.view", "masked_lm_labels.view", "prediction_scores[].contiguous.view", "lm_labels[].contiguous.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "masked_lm_labels", "=", "None", ",", "encoder_hidden_states", "=", "None", ",", "encoder_attention_mask", "=", "None", ",", "lm_labels", "=", "None", ",", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ",", "\n", "encoder_hidden_states", "=", "encoder_hidden_states", ",", "\n", "encoder_attention_mask", "=", "encoder_attention_mask", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "cls", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "\n", "# Although this may seem awkward, BertForMaskedLM supports two scenarios:", "\n", "# 1. If a tensor that contains the indices of masked labels is provided,", "\n", "#    the cross-entropy is the MLM cross-entropy that measures the likelihood", "\n", "#    of predictions for masked words.", "\n", "# 2. If `lm_labels` is provided we are in a causal scenario where we", "\n", "#    try to predict the next token for each input in the decoder.", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "# -1 index = padding token", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "masked_lm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "if", "lm_labels", "is", "not", "None", ":", "\n", "# we are doing next-token prediction; shift prediction scores and input ids by one", "\n", "            ", "prediction_scores", "=", "prediction_scores", "[", ":", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "lm_labels", "=", "lm_labels", "[", ":", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "ltr_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "ltr_lm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (masked_lm_loss), (ltr_lm_loss), prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForNextSentencePrediction.__init__": [[958, 965], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "modeling_bert.BertOnlyNSPHead", "modeling_bert.BertForNextSentencePrediction.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForNextSentencePrediction", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertOnlyNSPHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForNextSentencePrediction.forward": [[966, 987], ["modeling_bert.BertForNextSentencePrediction.bert", "modeling_bert.BertForNextSentencePrediction.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_bert.BertForNextSentencePrediction.view", "next_sentence_label.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "next_sentence_label", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "seq_relationship_score", "=", "self", ".", "cls", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "seq_relationship_score", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "next_sentence_label", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "next_sentence_loss", "=", "loss_fct", "(", "seq_relationship_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "next_sentence_label", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "next_sentence_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (next_sentence_loss), seq_relationship_score, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForSequenceClassification.__init__": [[1024, 1033], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling_bert.BertForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForSequenceClassification.forward": [[1034, 1062], ["modeling_bert.BertForSequenceClassification.bert", "modeling_bert.BertForSequenceClassification.dropout", "modeling_bert.BertForSequenceClassification.classifier", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_bert.BertForSequenceClassification.view", "labels.view", "modeling_bert.BertForSequenceClassification.view", "labels.view"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForMultipleChoice.__init__": [[1100, 1108], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling_bert.BertForMultipleChoice.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForMultipleChoice.forward": [[1109, 1139], ["input_ids.view.view.view", "modeling_bert.BertForMultipleChoice.bert", "modeling_bert.BertForMultipleChoice.dropout", "modeling_bert.BertForMultipleChoice.classifier", "modeling_bert.BertForMultipleChoice.view", "input_ids.view.view.size", "attention_mask.view", "token_type_ids.view", "position_ids.view", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "attention_mask.size", "token_type_ids.size", "position_ids.size"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "num_choices", "=", "input_ids", ".", "shape", "[", "1", "]", "\n", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "size", "(", "-", "1", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "position_ids", ".", "size", "(", "-", "1", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "\n", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "reshaped_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_choices", ")", "\n", "\n", "outputs", "=", "(", "reshaped_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "reshaped_logits", ",", "labels", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), reshaped_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForTokenClassification.__init__": [[1174, 1183], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling_bert.BertForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForTokenClassification.forward": [[1184, 1213], ["modeling_bert.BertForTokenClassification.bert", "modeling_bert.BertForTokenClassification.dropout", "modeling_bert.BertForTokenClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "attention_mask.view", "modeling_bert.BertForTokenClassification.view", "labels.view", "modeling_bert.BertForTokenClassification.view", "labels.view"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "# Only keep active parts of the loss", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "                ", "active_loss", "=", "attention_mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "[", "active_loss", "]", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "[", "active_loss", "]", "\n", "loss", "=", "loss_fct", "(", "active_logits", ",", "active_labels", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForQuestionAnswering.__init__": [[1260, 1268], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Linear", "modeling_bert.BertForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.BertForQuestionAnswering.forward": [[1269, 1305], ["modeling_bert.BertForQuestionAnswering.bert", "modeling_bert.BertForQuestionAnswering.qa_outputs", "modeling_bert.BertForQuestionAnswering.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "end_positions", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), start_logits, end_logits, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.load_tf_weights_in_bert": [[60, 125], ["os.path.abspath", "logger.info", "tf.train.list_variables", "zip", "logger.info", "tf.train.load_variable", "names.append", "arrays.append", "name.split.split", "any", "logger.info", "torch.from_numpy", "logger.error", "logger.info", "re.fullmatch", "getattr", "re.split", "getattr", "len", "int", "np.transpose", "getattr", "getattr", "getattr", "getattr", "logger.info"], "function", ["None"], ["def", "load_tf_weights_in_bert", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "tf_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Converting TensorFlow checkpoint from {}\"", ".", "format", "(", "tf_path", ")", ")", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "names", "=", "[", "]", "\n", "arrays", "=", "[", "]", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "arrays", ".", "append", "(", "array", ")", "\n", "\n", "", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "arrays", ")", ":", "\n", "        ", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "# adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v", "\n", "# which are not required for using pretrained model", "\n", "if", "any", "(", "n", "in", "[", "\"adam_v\"", ",", "\"adam_m\"", ",", "\"global_step\"", "]", "for", "n", "in", "name", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+_\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'_(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "==", "'kernel'", "or", "l", "[", "0", "]", "==", "'gamma'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_bias'", "or", "l", "[", "0", "]", "==", "'beta'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_weights'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'squad'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'classifier'", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "if", "m_name", "[", "-", "11", ":", "]", "==", "'_embeddings'", ":", "\n", "            ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "m_name", "==", "'kernel'", ":", "\n", "            ", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.gelu": [[127, 134], ["torch.erf", "math.sqrt"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Original Implementation of the gelu activation function in Google Bert repo when initially created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.gelu_new": [[136, 141], ["torch.tanh", "math.sqrt", "torch.pow"], "function", ["None"], ["", "def", "gelu_new", "(", "x", ")", ":", "\n", "    ", "\"\"\" Implementation of the gelu activation function currently in Google Bert repo (identical to OpenAI GPT).\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "0.5", "*", "x", "*", "(", "1", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.swish": [[143, 145], ["torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.mish": [[147, 149], ["torch.tanh", "torch.nn.functional.softplus"], "function", ["None"], ["", "def", "mish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "tanh", "(", "nn", ".", "functional", ".", "softplus", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertEmbeddings.__init__": [[96, 115], ["super().__init__", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertEmbeddings", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "hidden_size", "=", "config", ".", "hidden_size", "\n", "self", ".", "initializer_range", "=", "config", ".", "initializer_range", "\n", "\n", "self", ".", "position_embeddings", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "\n", "config", ".", "hidden_size", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", ",", "\n", "name", "=", "'position_embeddings'", ")", "\n", "self", ".", "token_type_embeddings", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "\n", "config", ".", "hidden_size", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", ",", "\n", "name", "=", "'token_type_embeddings'", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'LayerNorm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertEmbeddings.build": [[116, 126], ["super().build", "tensorflow.name_scope", "modeling_tf_bert.TFBertEmbeddings.add_weight", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"Build shared word embedding layer \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"word_embeddings\"", ")", ":", "\n", "# Create and initialize weights. The random normal initializer was chosen", "\n", "# arbitrarily, and works well.", "\n", "            ", "self", ".", "word_embeddings", "=", "self", ".", "add_weight", "(", "\n", "\"weight\"", ",", "\n", "shape", "=", "[", "self", ".", "vocab_size", ",", "self", ".", "hidden_size", "]", ",", "\n", "initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", ")", "\n", "", "super", "(", "TFBertEmbeddings", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertEmbeddings.call": [[127, 148], ["modeling_tf_bert.TFBertEmbeddings._embedding", "modeling_tf_bert.TFBertEmbeddings._linear", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings._embedding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings._linear"], ["", "def", "call", "(", "self", ",", "inputs", ",", "mode", "=", "\"embedding\"", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Get token embeddings of inputs.\n        Args:\n            inputs: list of three int64 tensors with shape [batch_size, length]: (input_ids, position_ids, token_type_ids)\n            mode: string, a valid value is one of \"embedding\" and \"linear\".\n        Returns:\n            outputs: (1) If mode == \"embedding\", output embedding tensor, float32 with\n                shape [batch_size, length, embedding_size]; (2) mode == \"linear\", output\n                linear tensor, float32 with shape [batch_size, length, vocab_size].\n        Raises:\n            ValueError: if mode is not valid.\n\n        Shared weights logic adapted from\n            https://github.com/tensorflow/models/blob/a009f4fb9d2fc4949e32192a944688925ef78659/official/transformer/v2/embedding_layer.py#L24\n        \"\"\"", "\n", "if", "mode", "==", "\"embedding\"", ":", "\n", "            ", "return", "self", ".", "_embedding", "(", "inputs", ",", "training", "=", "training", ")", "\n", "", "elif", "mode", "==", "\"linear\"", ":", "\n", "            ", "return", "self", ".", "_linear", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode {} is not valid.\"", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertEmbeddings._embedding": [[149, 173], ["modeling_tf_bert.TFBertEmbeddings.position_embeddings", "modeling_tf_bert.TFBertEmbeddings.token_type_embeddings", "modeling_tf_bert.TFBertEmbeddings.LayerNorm", "modeling_tf_bert.TFBertEmbeddings.dropout", "modeling_tf_utils.shape_list", "tensorflow.fill", "tensorflow.gather", "modeling_tf_utils.shape_list", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "", "def", "_embedding", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Applies embedding based on inputs tensor.\"\"\"", "\n", "input_ids", ",", "position_ids", ",", "token_type_ids", ",", "inputs_embeds", "=", "inputs", "\n", "\n", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "input_ids", ")", "\n", "", "else", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "range", "(", "seq_length", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "tf", ".", "newaxis", ",", ":", "]", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "fill", "(", "input_shape", ",", "0", ")", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "tf", ".", "gather", "(", "self", ".", "word_embeddings", ",", "input_ids", ")", "\n", "", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "inputs_embeds", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ",", "training", "=", "training", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertEmbeddings._linear": [[174, 188], ["tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "_linear", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Computes logits by running inputs through a linear layer.\n            Args:\n                inputs: A float32 tensor with shape [batch_size, length, hidden_size]\n            Returns:\n                float32 tensor with shape [batch_size, length, vocab_size].\n        \"\"\"", "\n", "batch_size", "=", "shape_list", "(", "inputs", ")", "[", "0", "]", "\n", "length", "=", "shape_list", "(", "inputs", ")", "[", "1", "]", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "self", ".", "hidden_size", "]", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "word_embeddings", ",", "transpose_b", "=", "True", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "logits", ",", "[", "batch_size", ",", "length", ",", "self", ".", "vocab_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertSelfAttention.__init__": [[191, 215], ["super().__init__", "int", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "ValueError", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertSelfAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "assert", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "==", "0", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "all_head_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'query'", ")", "\n", "self", ".", "key", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "all_head_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'key'", ")", "\n", "self", ".", "value", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "all_head_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'value'", ")", "\n", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertSelfAttention.transpose_for_scores": [[216, 219], ["tensorflow.reshape", "tensorflow.transpose"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ",", "batch_size", ")", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", ")", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertSelfAttention.call": [[220, 260], ["modeling_tf_bert.TFBertSelfAttention.query", "modeling_tf_bert.TFBertSelfAttention.key", "modeling_tf_bert.TFBertSelfAttention.value", "modeling_tf_bert.TFBertSelfAttention.transpose_for_scores", "modeling_tf_bert.TFBertSelfAttention.transpose_for_scores", "modeling_tf_bert.TFBertSelfAttention.transpose_for_scores", "tensorflow.matmul", "tensorflow.cast", "tensorflow.nn.softmax", "modeling_tf_bert.TFBertSelfAttention.dropout", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.reshape", "modeling_tf_utils.shape_list", "tensorflow.math.sqrt", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "batch_size", "=", "shape_list", "(", "hidden_states", ")", "[", "0", "]", "\n", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ",", "batch_size", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ",", "batch_size", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ",", "batch_size", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "tf", ".", "matmul", "(", "query_layer", ",", "key_layer", ",", "transpose_b", "=", "True", ")", "# (batch size, num_heads, seq_len_q, seq_len_k)", "\n", "dk", "=", "tf", ".", "cast", "(", "shape_list", "(", "key_layer", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "# scale attention_scores", "\n", "attention_scores", "=", "attention_scores", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask is (precomputed for all layers in TFBertModel call() function)", "\n", "            ", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "", "attention_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "attention_scores", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ",", "training", "=", "training", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attention_probs", "=", "attention_probs", "*", "head_mask", "\n", "\n", "", "context_layer", "=", "tf", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "tf", ".", "transpose", "(", "context_layer", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "context_layer", "=", "tf", ".", "reshape", "(", "context_layer", ",", "\n", "(", "batch_size", ",", "-", "1", ",", "self", ".", "all_head_size", ")", ")", "# (batch_size, seq_len_q, all_head_size)", "\n", "\n", "outputs", "=", "(", "context_layer", ",", "attention_probs", ")", "if", "self", ".", "output_attentions", "else", "(", "context_layer", ",", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertSelfOutput.__init__": [[263, 270], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertSelfOutput", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'dense'", ")", "\n", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'LayerNorm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertSelfOutput.call": [[271, 278], ["modeling_tf_bert.TFBertSelfOutput.dense", "modeling_tf_bert.TFBertSelfOutput.dropout", "modeling_tf_bert.TFBertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "input_tensor", "=", "inputs", "\n", "\n", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertAttention.__init__": [[281, 285], ["super().__init__", "modeling_tf_bert.TFBertSelfAttention", "modeling_tf_bert.TFBertSelfOutput"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "self_attention", "=", "TFBertSelfAttention", "(", "config", ",", "name", "=", "'self'", ")", "\n", "self", ".", "dense_output", "=", "TFBertSelfOutput", "(", "config", ",", "name", "=", "'output'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertAttention.prune_heads": [[286, 288], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertAttention.call": [[289, 296], ["modeling_tf_bert.TFBertAttention.self_attention", "modeling_tf_bert.TFBertAttention.dense_output"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "input_tensor", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "self_outputs", "=", "self", ".", "self_attention", "(", "[", "input_tensor", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "attention_output", "=", "self", ".", "dense_output", "(", "[", "self_outputs", "[", "0", "]", ",", "input_tensor", "]", ",", "training", "=", "training", ")", "\n", "outputs", "=", "(", "attention_output", ",", ")", "+", "self_outputs", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertIntermediate.__init__": [[299, 308], ["super().__init__", "tensorflow.keras.layers.Dense", "isinstance", "modeling_tf_utils.get_initializer", "isinstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertIntermediate", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "intermediate_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'dense'", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertIntermediate.call": [[309, 313], ["modeling_tf_bert.TFBertIntermediate.dense", "modeling_tf_bert.TFBertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertOutput.__init__": [[316, 323], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertOutput", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'dense'", ")", "\n", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'LayerNorm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertOutput.call": [[324, 331], ["modeling_tf_bert.TFBertOutput.dense", "modeling_tf_bert.TFBertOutput.dropout", "modeling_tf_bert.TFBertOutput.LayerNorm"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "input_tensor", "=", "inputs", "\n", "\n", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertLayer.__init__": [[334, 339], ["super().__init__", "modeling_tf_bert.TFBertAttention", "modeling_tf_bert.TFBertIntermediate", "modeling_tf_bert.TFBertOutput"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "attention", "=", "TFBertAttention", "(", "config", ",", "name", "=", "'attention'", ")", "\n", "self", ".", "intermediate", "=", "TFBertIntermediate", "(", "config", ",", "name", "=", "'intermediate'", ")", "\n", "self", ".", "bert_output", "=", "TFBertOutput", "(", "config", ",", "name", "=", "'output'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertLayer.call": [[340, 349], ["modeling_tf_bert.TFBertLayer.attention", "modeling_tf_bert.TFBertLayer.intermediate", "modeling_tf_bert.TFBertLayer.bert_output"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "attention_outputs", "=", "self", ".", "attention", "(", "[", "hidden_states", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "attention_output", "=", "attention_outputs", "[", "0", "]", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "bert_output", "(", "[", "intermediate_output", ",", "attention_output", "]", ",", "training", "=", "training", ")", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "attention_outputs", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertEncoder.__init__": [[352, 357], ["super().__init__", "modeling_tf_bert.TFBertLayer", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertEncoder", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "layer", "=", "[", "TFBertLayer", "(", "config", ",", "name", "=", "'layer_._{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertEncoder.call": [[358, 383], ["enumerate", "layer_module"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "layer_outputs", "=", "layer_module", "(", "[", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "layer_outputs", "[", "0", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "layer_outputs", "[", "1", "]", ",", ")", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# outputs, (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertPooler.__init__": [[386, 392], ["super().__init__", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertPooler", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "activation", "=", "'tanh'", ",", "\n", "name", "=", "'dense'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertPooler.call": [[393, 399], ["modeling_tf_bert.TFBertPooler.dense"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertPredictionHeadTransform.__init__": [[402, 412], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "isinstance", "modeling_tf_utils.get_initializer", "isinstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertPredictionHeadTransform", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'dense'", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "config", ".", "hidden_act", "\n", "", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'LayerNorm'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertPredictionHeadTransform.call": [[413, 418], ["modeling_tf_bert.TFBertPredictionHeadTransform.dense", "modeling_tf_bert.TFBertPredictionHeadTransform.transform_act_fn", "modeling_tf_bert.TFBertPredictionHeadTransform.LayerNorm"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertLMPredictionHead.__init__": [[421, 429], ["super().__init__", "modeling_tf_bert.TFBertPredictionHeadTransform"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertLMPredictionHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "transform", "=", "TFBertPredictionHeadTransform", "(", "config", ",", "name", "=", "'transform'", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "input_embeddings", "=", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertLMPredictionHead.build": [[430, 436], ["modeling_tf_bert.TFBertLMPredictionHead.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'bias'", ")", "\n", "super", "(", "TFBertLMPredictionHead", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertLMPredictionHead.call": [[437, 442], ["modeling_tf_bert.TFBertLMPredictionHead.transform", "modeling_tf_bert.TFBertLMPredictionHead.input_embeddings"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "transform", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "input_embeddings", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "hidden_states", "=", "hidden_states", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertMLMHead.__init__": [[445, 448], ["super().__init__", "modeling_tf_bert.TFBertLMPredictionHead"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertMLMHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "predictions", "=", "TFBertLMPredictionHead", "(", "config", ",", "input_embeddings", ",", "name", "=", "'predictions'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertMLMHead.call": [[449, 452], ["modeling_tf_bert.TFBertMLMHead.predictions"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "sequence_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertNSPHead.__init__": [[455, 460], ["super().__init__", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertNSPHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "seq_relationship", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "2", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'seq_relationship'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertNSPHead.call": [[461, 464], ["modeling_tf_bert.TFBertNSPHead.seq_relationship"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "pooled_output", ")", ":", "\n", "        ", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertMainLayer.__init__": [[467, 474], ["super().__init__", "modeling_tf_bert.TFBertEmbeddings", "modeling_tf_bert.TFBertEncoder", "modeling_tf_bert.TFBertPooler"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertMainLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_hidden_layers", "=", "config", ".", "num_hidden_layers", "\n", "\n", "self", ".", "embeddings", "=", "TFBertEmbeddings", "(", "config", ",", "name", "=", "'embeddings'", ")", "\n", "self", ".", "encoder", "=", "TFBertEncoder", "(", "config", ",", "name", "=", "'encoder'", ")", "\n", "self", ".", "pooler", "=", "TFBertPooler", "(", "config", ",", "name", "=", "'pooler'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertMainLayer.get_input_embeddings": [[475, 477], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertMainLayer._resize_token_embeddings": [[478, 480], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertMainLayer._prune_heads": [[481, 487], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertMainLayer.call": [[488, 557], ["isinstance", "tensorflow.cast", "modeling_tf_bert.TFBertMainLayer.embeddings", "modeling_tf_bert.TFBertMainLayer.encoder", "modeling_tf_bert.TFBertMainLayer.pooler", "isinstance", "ValueError", "tensorflow.fill", "tensorflow.fill", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "len", "len", "len", "len", "len", "len", "ValueError", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "input_ids", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "tf", ".", "fill", "(", "input_shape", ",", "1", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "fill", "(", "input_shape", ",", "0", ")", "\n", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "", "extended_attention_mask", "=", "attention_mask", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "\n", "extended_attention_mask", "=", "tf", ".", "cast", "(", "extended_attention_mask", ",", "tf", ".", "float32", ")", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "if", "not", "head_mask", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "num_hidden_layers", "\n", "# head_mask = tf.constant([0] * self.num_hidden_layers)", "\n", "\n", "", "embedding_output", "=", "self", ".", "embeddings", "(", "[", "input_ids", ",", "position_ids", ",", "token_type_ids", ",", "inputs_embeds", "]", ",", "training", "=", "training", ")", "\n", "encoder_outputs", "=", "self", ".", "encoder", "(", "[", "embedding_output", ",", "extended_attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "\n", "sequence_output", "=", "encoder_outputs", "[", "0", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "sequence_output", ",", "pooled_output", ",", ")", "+", "encoder_outputs", "[", "1", ":", "]", "# add hidden_states and attentions if they are here", "\n", "return", "outputs", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertModel.__init__": [[685, 688], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertModel.call": [[689, 692], ["modeling_tf_bert.TFBertModel.bert"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForPreTraining.__init__": [[724, 730], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "modeling_tf_bert.TFBertNSPHead", "modeling_tf_bert.TFBertMLMHead"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForPreTraining", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "nsp", "=", "TFBertNSPHead", "(", "config", ",", "name", "=", "'nsp___cls'", ")", "\n", "self", ".", "mlm", "=", "TFBertMLMHead", "(", "config", ",", "self", ".", "bert", ".", "embeddings", ",", "name", "=", "'mlm___cls'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForPreTraining.get_output_embeddings": [[731, 733], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bert", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForPreTraining.call": [[734, 744], ["modeling_tf_bert.TFBertForPreTraining.bert", "modeling_tf_bert.TFBertForPreTraining.mlm", "modeling_tf_bert.TFBertForPreTraining.nsp", "kwargs.get"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", ",", "pooled_output", "=", "outputs", "[", ":", "2", "]", "\n", "prediction_scores", "=", "self", ".", "mlm", "(", "sequence_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "seq_relationship_score", "=", "self", ".", "nsp", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", "seq_relationship_score", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# prediction_scores, seq_relationship_score, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForMaskedLM.__init__": [[773, 778], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "modeling_tf_bert.TFBertMLMHead"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "mlm", "=", "TFBertMLMHead", "(", "config", ",", "self", ".", "bert", ".", "embeddings", ",", "name", "=", "'mlm___cls'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForMaskedLM.get_output_embeddings": [[779, 781], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "bert", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForMaskedLM.call": [[782, 791], ["modeling_tf_bert.TFBertForMaskedLM.bert", "modeling_tf_bert.TFBertForMaskedLM.mlm", "kwargs.get"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "mlm", "(", "sequence_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForNextSentencePrediction.__init__": [[820, 825], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "modeling_tf_bert.TFBertNSPHead"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForNextSentencePrediction", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "nsp", "=", "TFBertNSPHead", "(", "config", ",", "name", "=", "'nsp___cls'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForNextSentencePrediction.call": [[826, 835], ["modeling_tf_bert.TFBertForNextSentencePrediction.bert", "modeling_tf_bert.TFBertForNextSentencePrediction.nsp"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "seq_relationship_score", "=", "self", ".", "nsp", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "seq_relationship_score", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# seq_relationship_score, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForSequenceClassification.__init__": [[865, 874], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'classifier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForSequenceClassification.call": [[875, 886], ["modeling_tf_bert.TFBertForSequenceClassification.bert", "modeling_tf_bert.TFBertForSequenceClassification.dropout", "modeling_tf_bert.TFBertForSequenceClassification.classifier", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForMultipleChoice.__init__": [[918, 926], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "1", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'classifier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForMultipleChoice.call": [[927, 972], ["isinstance", "modeling_tf_bert.TFBertForMultipleChoice.bert", "modeling_tf_bert.TFBertForMultipleChoice.dropout", "modeling_tf_bert.TFBertForMultipleChoice.classifier", "tensorflow.reshape", "isinstance", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "num_choices", "=", "shape_list", "(", "input_ids", ")", "[", "1", "]", "\n", "seq_length", "=", "shape_list", "(", "input_ids", ")", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "num_choices", "=", "shape_list", "(", "inputs_embeds", ")", "[", "1", "]", "\n", "seq_length", "=", "shape_list", "(", "inputs_embeds", ")", "[", "2", "]", "\n", "\n", "", "flat_input_ids", "=", "tf", ".", "reshape", "(", "input_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "input_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "tf", ".", "reshape", "(", "attention_mask", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "flat_token_type_ids", "=", "tf", ".", "reshape", "(", "token_type_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_position_ids", "=", "tf", ".", "reshape", "(", "position_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "\n", "flat_inputs", "=", "[", "flat_input_ids", ",", "flat_attention_mask", ",", "flat_token_type_ids", ",", "flat_position_ids", ",", "head_mask", ",", "inputs_embeds", "]", "\n", "\n", "outputs", "=", "self", ".", "bert", "(", "flat_inputs", ",", "training", "=", "training", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ",", "training", "=", "training", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "reshaped_logits", "=", "tf", ".", "reshape", "(", "logits", ",", "(", "-", "1", ",", "num_choices", ")", ")", "\n", "\n", "outputs", "=", "(", "reshaped_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# reshaped_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForTokenClassification.__init__": [[1002, 1011], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'classifier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForTokenClassification.call": [[1012, 1023], ["modeling_tf_bert.TFBertForTokenClassification.bert", "modeling_tf_bert.TFBertForTokenClassification.dropout", "modeling_tf_bert.TFBertForTokenClassification.classifier", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForQuestionAnswering.__init__": [[1055, 1063], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_bert.TFBertMainLayer", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "TFBertMainLayer", "(", "config", ",", "name", "=", "'bert'", ")", "\n", "self", ".", "qa_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'qa_outputs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.TFBertForQuestionAnswering.call": [[1064, 1077], ["modeling_tf_bert.TFBertForQuestionAnswering.bert", "modeling_tf_bert.TFBertForQuestionAnswering.qa_outputs", "tensorflow.split", "tensorflow.squeeze", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "tf", ".", "split", "(", "logits", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "start_logits", "=", "tf", ".", "squeeze", "(", "start_logits", ",", "axis", "=", "-", "1", ")", "\n", "end_logits", "=", "tf", ".", "squeeze", "(", "end_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "\n", "return", "outputs", "# start_logits, end_logits, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.gelu": [[60, 69], ["tensorflow.math.erf", "tensorflow.math.sqrt"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Gaussian Error Linear Unit.\n    Original Implementation of the gelu activation function in Google Bert repo when initially created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "math", ".", "erf", "(", "x", "/", "tf", ".", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.gelu_new": [[70, 82], ["tensorflow.tanh", "numpy.sqrt", "tensorflow.pow"], "function", ["None"], ["", "def", "gelu_new", "(", "x", ")", ":", "\n", "    ", "\"\"\"Gaussian Error Linear Unit.\n    This is a smoother version of the RELU.\n    Original paper: https://arxiv.org/abs/1606.08415\n    Args:\n        x: float Tensor to perform activation.\n    Returns:\n        `x` with the GELU activation applied.\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "tanh", "(", "\n", "(", "np", ".", "sqrt", "(", "2", "/", "np", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "tf", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_bert.swish": [[83, 85], ["tensorflow.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "tf", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings.__init__": [[49, 69], ["super().__init__", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAlbertEmbeddings", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "position_embeddings", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "\n", "config", ".", "embedding_size", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "\n", "self", ".", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'position_embeddings'", ")", "\n", "self", ".", "token_type_embeddings", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "\n", "config", ".", "embedding_size", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "\n", "self", ".", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'token_type_embeddings'", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "\n", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'LayerNorm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings.build": [[70, 80], ["super().build", "tensorflow.name_scope", "modeling_tf_albert.TFAlbertEmbeddings.add_weight", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "\"\"\"Build shared word embedding layer \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"word_embeddings\"", ")", ":", "\n", "# Create and initialize weights. The random normal initializer was chosen", "\n", "# arbitrarily, and works well.", "\n", "            ", "self", ".", "word_embeddings", "=", "self", ".", "add_weight", "(", "\n", "\"weight\"", ",", "\n", "shape", "=", "[", "self", ".", "config", ".", "vocab_size", ",", "self", ".", "config", ".", "embedding_size", "]", ",", "\n", "initializer", "=", "get_initializer", "(", "self", ".", "config", ".", "initializer_range", ")", ")", "\n", "", "super", "(", "TFAlbertEmbeddings", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings.call": [[81, 102], ["modeling_tf_albert.TFAlbertEmbeddings._embedding", "modeling_tf_albert.TFAlbertEmbeddings._linear", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings._embedding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings._linear"], ["", "def", "call", "(", "self", ",", "inputs", ",", "mode", "=", "\"embedding\"", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Get token embeddings of inputs.\n        Args:\n            inputs: list of three int64 tensors with shape [batch_size, length]: (input_ids, position_ids, token_type_ids)\n            mode: string, a valid value is one of \"embedding\" and \"linear\".\n        Returns:\n            outputs: (1) If mode == \"embedding\", output embedding tensor, float32 with\n                shape [batch_size, length, embedding_size]; (2) mode == \"linear\", output\n                linear tensor, float32 with shape [batch_size, length, vocab_size].\n        Raises:\n            ValueError: if mode is not valid.\n\n        Shared weights logic adapted from\n            https://github.com/tensorflow/models/blob/a009f4fb9d2fc4949e32192a944688925ef78659/official/transformer/v2/embedding_layer.py#L24\n        \"\"\"", "\n", "if", "mode", "==", "\"embedding\"", ":", "\n", "            ", "return", "self", ".", "_embedding", "(", "inputs", ",", "training", "=", "training", ")", "\n", "", "elif", "mode", "==", "\"linear\"", ":", "\n", "            ", "return", "self", ".", "_linear", "(", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"mode {} is not valid.\"", ".", "format", "(", "mode", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings._embedding": [[103, 127], ["modeling_tf_albert.TFAlbertEmbeddings.position_embeddings", "modeling_tf_albert.TFAlbertEmbeddings.token_type_embeddings", "modeling_tf_albert.TFAlbertEmbeddings.LayerNorm", "modeling_tf_albert.TFAlbertEmbeddings.dropout", "modeling_tf_utils.shape_list", "tensorflow.fill", "tensorflow.gather", "modeling_tf_utils.shape_list", "tensorflow.range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "", "def", "_embedding", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Applies embedding based on inputs tensor.\"\"\"", "\n", "input_ids", ",", "position_ids", ",", "token_type_ids", ",", "inputs_embeds", "=", "inputs", "\n", "\n", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "input_ids", ")", "\n", "", "else", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "range", "(", "seq_length", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "tf", ".", "newaxis", ",", ":", "]", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "fill", "(", "input_shape", ",", "0", ")", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "tf", ".", "gather", "(", "self", ".", "word_embeddings", ",", "input_ids", ")", "\n", "", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "inputs_embeds", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ",", "training", "=", "training", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertEmbeddings._linear": [[128, 140], ["tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "_linear", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"Computes logits by running inputs through a linear layer.\n            Args:\n                inputs: A float32 tensor with shape [batch_size, length, embedding_size]\n            Returns:\n                float32 tensor with shape [batch_size, length, vocab_size].\n        \"\"\"", "\n", "batch_size", "=", "shape_list", "(", "inputs", ")", "[", "0", "]", "\n", "length", "=", "shape_list", "(", "inputs", ")", "[", "1", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "self", ".", "config", ".", "embedding_size", "]", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "word_embeddings", ",", "transpose_b", "=", "True", ")", "\n", "return", "tf", ".", "reshape", "(", "logits", ",", "[", "batch_size", ",", "length", ",", "self", ".", "config", ".", "vocab_size", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.__init__": [[143, 172], ["super().__init__", "int", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "ValueError", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAlbertSelfAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "assert", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "==", "0", "\n", "self", ".", "attention_head_size", "=", "int", "(", "\n", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "all_head_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "\n", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'query'", ")", "\n", "self", ".", "key", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "all_head_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "\n", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'key'", ")", "\n", "self", ".", "value", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "self", ".", "all_head_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "\n", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'value'", ")", "\n", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "\n", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores": [[173, 177], ["tensorflow.reshape", "tensorflow.transpose"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ",", "batch_size", ")", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "\n", "x", ",", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", ")", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.call": [[178, 221], ["modeling_tf_albert.TFAlbertSelfAttention.query", "modeling_tf_albert.TFAlbertSelfAttention.key", "modeling_tf_albert.TFAlbertSelfAttention.value", "modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "tensorflow.matmul", "tensorflow.cast", "tensorflow.nn.softmax", "modeling_tf_albert.TFAlbertSelfAttention.dropout", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.reshape", "modeling_tf_utils.shape_list", "tensorflow.math.sqrt", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "batch_size", "=", "shape_list", "(", "hidden_states", ")", "[", "0", "]", "\n", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ",", "batch_size", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ",", "batch_size", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ",", "batch_size", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "# (batch size, num_heads, seq_len_q, seq_len_k)", "\n", "attention_scores", "=", "tf", ".", "matmul", "(", "query_layer", ",", "key_layer", ",", "transpose_b", "=", "True", ")", "\n", "# scale attention_scores", "\n", "dk", "=", "tf", ".", "cast", "(", "shape_list", "(", "key_layer", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "\n", "attention_scores", "=", "attention_scores", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask is (precomputed for all layers in TFAlbertModel call() function)", "\n", "            ", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "", "attention_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "attention_scores", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ",", "training", "=", "training", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attention_probs", "=", "attention_probs", "*", "head_mask", "\n", "\n", "", "context_layer", "=", "tf", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "tf", ".", "transpose", "(", "context_layer", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "context_layer", "=", "tf", ".", "reshape", "(", "context_layer", ",", "\n", "(", "batch_size", ",", "-", "1", ",", "self", ".", "all_head_size", ")", ")", "# (batch_size, seq_len_q, all_head_size)", "\n", "\n", "outputs", "=", "(", "context_layer", ",", "attention_probs", ")", "if", "self", ".", "output_attentions", "else", "(", "\n", "context_layer", ",", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfOutput.__init__": [[224, 233], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAlbertSelfOutput", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "\n", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'dense'", ")", "\n", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "\n", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'LayerNorm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfOutput.call": [[234, 241], ["modeling_tf_albert.TFAlbertSelfOutput.dense", "modeling_tf_albert.TFAlbertSelfOutput.dropout", "modeling_tf_albert.TFAlbertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "input_tensor", "=", "inputs", "\n", "\n", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertAttention.__init__": [[244, 255], ["modeling_tf_bert.TFBertSelfAttention.__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "set", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAlbertAttention", ",", "self", ")", ".", "__init__", "(", "config", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "hidden_size", "=", "config", ".", "hidden_size", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "\n", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'dense'", ")", "\n", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "\n", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'LayerNorm'", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertAttention.prune_heads": [[256, 258], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertAttention.call": [[259, 311], ["modeling_tf_albert.TFAlbertAttention.query", "modeling_tf_albert.TFAlbertAttention.key", "modeling_tf_albert.TFAlbertAttention.value", "modeling_tf_albert.TFAlbertAttention.transpose_for_scores", "modeling_tf_albert.TFAlbertAttention.transpose_for_scores", "modeling_tf_albert.TFAlbertAttention.transpose_for_scores", "tensorflow.matmul", "tensorflow.cast", "tensorflow.nn.softmax", "modeling_tf_albert.TFAlbertAttention.dropout", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.reshape", "modeling_tf_albert.TFAlbertAttention.dense", "modeling_tf_albert.TFAlbertAttention.dropout", "modeling_tf_albert.TFAlbertAttention.LayerNorm", "modeling_tf_utils.shape_list", "tensorflow.math.sqrt", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "input_tensor", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "batch_size", "=", "shape_list", "(", "input_tensor", ")", "[", "0", "]", "\n", "mixed_query_layer", "=", "self", ".", "query", "(", "input_tensor", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "input_tensor", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "input_tensor", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ",", "batch_size", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ",", "batch_size", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ",", "batch_size", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "# (batch size, num_heads, seq_len_q, seq_len_k)", "\n", "attention_scores", "=", "tf", ".", "matmul", "(", "query_layer", ",", "key_layer", ",", "transpose_b", "=", "True", ")", "\n", "# scale attention_scores", "\n", "dk", "=", "tf", ".", "cast", "(", "shape_list", "(", "key_layer", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "\n", "attention_scores", "=", "attention_scores", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask is (precomputed for all layers in TFBertModel call() function)", "\n", "            ", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "", "attention_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "attention_scores", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ",", "training", "=", "training", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attention_probs", "=", "attention_probs", "*", "head_mask", "\n", "\n", "", "context_layer", "=", "tf", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "tf", ".", "transpose", "(", "context_layer", ",", "perm", "=", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "context_layer", "=", "tf", ".", "reshape", "(", "context_layer", ",", "\n", "(", "batch_size", ",", "-", "1", ",", "self", ".", "all_head_size", ")", ")", "# (batch_size, seq_len_q, all_head_size)", "\n", "\n", "self_outputs", "=", "(", "context_layer", ",", "attention_probs", ")", "if", "self", ".", "output_attentions", "else", "(", "\n", "context_layer", ",", ")", "\n", "\n", "hidden_states", "=", "self_outputs", "[", "0", "]", "\n", "\n", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "attention_output", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "\n", "# add attentions if we output them", "\n", "outputs", "=", "(", "attention_output", ",", ")", "+", "self_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertLayer.__init__": [[314, 331], ["super().__init__", "modeling_tf_albert.TFAlbertAttention", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "isinstance", "modeling_tf_utils.get_initializer", "isinstance", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAlbertLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "attention", "=", "TFAlbertAttention", "(", "config", ",", "name", "=", "'attention'", ")", "\n", "\n", "self", ".", "ffn", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "intermediate_size", ",", "kernel_initializer", "=", "get_initializer", "(", "\n", "config", ".", "initializer_range", ")", ",", "name", "=", "'ffn'", ")", "\n", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "activation", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation", "=", "config", ".", "hidden_act", "\n", "\n", "", "self", ".", "ffn_output", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "kernel_initializer", "=", "get_initializer", "(", "\n", "config", ".", "initializer_range", ")", ",", "name", "=", "'ffn_output'", ")", "\n", "self", ".", "full_layer_layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "\n", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'full_layer_layer_norm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertLayer.call": [[332, 348], ["modeling_tf_albert.TFAlbertLayer.attention", "modeling_tf_albert.TFAlbertLayer.ffn", "modeling_tf_albert.TFAlbertLayer.activation", "modeling_tf_albert.TFAlbertLayer.ffn_output", "modeling_tf_albert.TFAlbertLayer.dropout", "modeling_tf_albert.TFAlbertLayer.full_layer_layer_norm"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "attention_outputs", "=", "self", ".", "attention", "(", "\n", "[", "hidden_states", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "attention_outputs", "[", "0", "]", ")", "\n", "ffn_output", "=", "self", ".", "activation", "(", "ffn_output", ")", "\n", "ffn_output", "=", "self", ".", "ffn_output", "(", "ffn_output", ")", "\n", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "self", ".", "full_layer_layer_norm", "(", "\n", "ffn_output", "+", "attention_outputs", "[", "0", "]", ")", "\n", "\n", "# add attentions if we output them", "\n", "outputs", "=", "(", "hidden_states", ",", ")", "+", "attention_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertLayerGroup.__init__": [[351, 358], ["super().__init__", "modeling_tf_albert.TFAlbertLayer", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAlbertLayerGroup", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "albert_layers", "=", "[", "TFAlbertLayer", "(", "config", ",", "name", "=", "\"albert_layers_._{}\"", ".", "format", "(", "\n", "i", ")", ")", "for", "i", "in", "range", "(", "config", ".", "inner_group_num", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertLayerGroup.call": [[359, 383], ["enumerate", "albert_layer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "layer_hidden_states", "=", "(", ")", "\n", "layer_attentions", "=", "(", ")", "\n", "\n", "for", "layer_index", ",", "albert_layer", "in", "enumerate", "(", "self", ".", "albert_layers", ")", ":", "\n", "            ", "layer_output", "=", "albert_layer", "(", "\n", "[", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "layer_index", "]", "]", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "layer_output", "[", "0", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "layer_attentions", "=", "layer_attentions", "+", "(", "layer_output", "[", "1", "]", ",", ")", "\n", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "layer_hidden_states", "=", "layer_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "layer_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "layer_attentions", ",", ")", "\n", "# last-layer hidden state, (layer hidden states), (layer attentions)", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertTransformer.__init__": [[386, 396], ["super().__init__", "tensorflow.keras.layers.Dense", "modeling_tf_albert.TFAlbertLayerGroup", "modeling_tf_utils.get_initializer", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAlbertTransformer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "embedding_hidden_mapping_in", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "kernel_initializer", "=", "get_initializer", "(", "\n", "config", ".", "initializer_range", ")", ",", "name", "=", "'embedding_hidden_mapping_in'", ")", "\n", "self", ".", "albert_layer_groups", "=", "[", "TFAlbertLayerGroup", "(", "\n", "config", ",", "name", "=", "\"albert_layer_groups_._{}\"", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "config", ".", "num_hidden_groups", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertTransformer.call": [[397, 433], ["modeling_tf_albert.TFAlbertTransformer.embedding_hidden_mapping_in", "range", "int", "int"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "hidden_states", "=", "self", ".", "embedding_hidden_mapping_in", "(", "hidden_states", ")", "\n", "all_attentions", "=", "(", ")", "\n", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "(", "hidden_states", ",", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "config", ".", "num_hidden_layers", ")", ":", "\n", "# Number of layers in a hidden group", "\n", "            ", "layers_per_group", "=", "int", "(", "\n", "self", ".", "config", ".", "num_hidden_layers", "/", "self", ".", "config", ".", "num_hidden_groups", ")", "\n", "\n", "# Index of the hidden group", "\n", "group_idx", "=", "int", "(", "\n", "i", "/", "(", "self", ".", "config", ".", "num_hidden_layers", "/", "self", ".", "config", ".", "num_hidden_groups", ")", ")", "\n", "\n", "layer_group_output", "=", "self", ".", "albert_layer_groups", "[", "group_idx", "]", "(", "\n", "[", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "group_idx", "*", "layers_per_group", ":", "(", "group_idx", "+", "1", ")", "*", "layers_per_group", "]", "]", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "layer_group_output", "[", "0", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "layer_group_output", "[", "-", "1", "]", "\n", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "\n", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertMLMHead.__init__": [[445, 464], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LayerNormalization", "isinstance", "modeling_tf_utils.get_initializer", "isinstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAlbertMLMHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "\n", "self", ".", "dense", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "embedding_size", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "\n", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'dense'", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "activation", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation", "=", "config", ".", "hidden_act", "\n", "\n", "", "self", ".", "LayerNorm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "\n", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'LayerNorm'", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "decoder", "=", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertMLMHead.build": [[465, 475], ["modeling_tf_albert.TFAlbertMLMHead.add_weight", "modeling_tf_albert.TFAlbertMLMHead.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'bias'", ")", "\n", "self", ".", "decoder_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'decoder/bias'", ")", "\n", "super", "(", "TFAlbertMLMHead", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertMLMHead.call": [[476, 483], ["modeling_tf_albert.TFAlbertMLMHead.dense", "modeling_tf_albert.TFAlbertMLMHead.activation", "modeling_tf_albert.TFAlbertMLMHead.LayerNorm", "modeling_tf_albert.TFAlbertMLMHead.decoder"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "activation", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "decoder", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "+", "self", ".", "decoder_bias", "\n", "hidden_states", "=", "hidden_states", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertModel.__init__": [[598, 606], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_albert.TFAlbertEmbeddings", "modeling_tf_albert.TFAlbertTransformer", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAlbertModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "**", "kwargs", ")", "\n", "self", ".", "num_hidden_layers", "=", "config", ".", "num_hidden_layers", "\n", "\n", "self", ".", "embeddings", "=", "TFAlbertEmbeddings", "(", "config", ",", "name", "=", "\"embeddings\"", ")", "\n", "self", ".", "encoder", "=", "TFAlbertTransformer", "(", "config", ",", "name", "=", "\"encoder\"", ")", "\n", "self", ".", "pooler", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "hidden_size", ",", "kernel_initializer", "=", "get_initializer", "(", "\n", "config", ".", "initializer_range", ")", ",", "activation", "=", "'tanh'", ",", "name", "=", "'pooler'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertModel.get_input_embeddings": [[607, 609], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertModel._resize_token_embeddings": [[610, 612], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertModel._prune_heads": [[613, 619], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertModel.call": [[620, 693], ["isinstance", "tensorflow.cast", "modeling_tf_albert.TFAlbertModel.embeddings", "modeling_tf_albert.TFAlbertModel.encoder", "modeling_tf_albert.TFAlbertModel.pooler", "isinstance", "ValueError", "tensorflow.fill", "tensorflow.fill", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "len", "len", "len", "len", "len", "len", "ValueError", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "6", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "input_ids", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "tf", ".", "fill", "(", "input_shape", ",", "1", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "fill", "(", "input_shape", ",", "0", ")", "\n", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "", "extended_attention_mask", "=", "attention_mask", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "\n", "extended_attention_mask", "=", "tf", ".", "cast", "(", "extended_attention_mask", ",", "tf", ".", "float32", ")", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "if", "not", "head_mask", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "num_hidden_layers", "\n", "# head_mask = tf.constant([0] * self.num_hidden_layers)", "\n", "\n", "", "embedding_output", "=", "self", ".", "embeddings", "(", "\n", "[", "input_ids", ",", "position_ids", ",", "token_type_ids", ",", "inputs_embeds", "]", ",", "training", "=", "training", ")", "\n", "encoder_outputs", "=", "self", ".", "encoder", "(", "\n", "[", "embedding_output", ",", "extended_attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "\n", "sequence_output", "=", "encoder_outputs", "[", "0", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", "[", ":", ",", "0", "]", ")", "\n", "\n", "# add hidden_states and attentions if they are here", "\n", "outputs", "=", "(", "sequence_output", ",", "pooled_output", ",", ")", "+", "encoder_outputs", "[", "1", ":", "]", "\n", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertForMaskedLM.__init__": [[723, 729], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_albert.TFAlbertModel", "modeling_tf_albert.TFAlbertMLMHead"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAlbertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "albert", "=", "TFAlbertModel", "(", "config", ",", "name", "=", "'albert'", ")", "\n", "self", ".", "predictions", "=", "TFAlbertMLMHead", "(", "\n", "config", ",", "self", ".", "albert", ".", "embeddings", ",", "name", "=", "'predictions'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertForMaskedLM.get_output_embeddings": [[730, 732], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "albert", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertForMaskedLM.call": [[733, 744], ["modeling_tf_albert.TFAlbertForMaskedLM.albert", "modeling_tf_albert.TFAlbertForMaskedLM.predictions", "kwargs.get"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "albert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "predictions", "(", "\n", "sequence_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "\n", "# Add hidden states and attention if they are here", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "\n", "return", "outputs", "# prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertForSequenceClassification.__init__": [[774, 783], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_albert.TFAlbertModel", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAlbertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "albert", "=", "TFAlbertModel", "(", "config", ",", "name", "=", "'albert'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'classifier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertForSequenceClassification.call": [[784, 795], ["modeling_tf_albert.TFAlbertForSequenceClassification.albert", "modeling_tf_albert.TFAlbertForSequenceClassification.dropout", "modeling_tf_albert.TFAlbertForSequenceClassification.classifier", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "albert", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ",", "training", "=", "kwargs", ".", "get", "(", "'training'", ",", "False", ")", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "return", "outputs", "# logits, (hidden_states), (attentions)", "", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFMultiHeadAttention.__init__": [[101, 115], ["super().__init__", "next", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "set", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "n_heads", ",", "dim", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFMultiHeadAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "layer_id", "=", "next", "(", "TFMultiHeadAttention", ".", "NEW_ID", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "q_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dim", ",", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "name", "=", "'q_lin'", ")", "\n", "self", ".", "k_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dim", ",", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "name", "=", "'k_lin'", ")", "\n", "self", ".", "v_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dim", ",", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "name", "=", "'v_lin'", ")", "\n", "self", ".", "out_lin", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dim", ",", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "name", "=", "'out_lin'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "attention_dropout", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFMultiHeadAttention.prune_heads": [[116, 118], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFMultiHeadAttention.call": [[119, 183], ["modeling_tf_utils.shape_list", "modeling_tf_xlm.TFMultiHeadAttention.call.shape"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Self-attention (if kv is None) or attention over source sentence (provided by kv).\n        \"\"\"", "\n", "input", ",", "mask", ",", "kv", ",", "cache", ",", "head_mask", "=", "inputs", "\n", "# Input is (bs, qlen, dim)", "\n", "# Mask is (bs, klen) (non-causal) or (bs, klen, klen)", "\n", "bs", ",", "qlen", ",", "dim", "=", "shape_list", "(", "input", ")", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "klen", "=", "qlen", "if", "cache", "is", "None", "else", "cache", "[", "'slen'", "]", "+", "qlen", "\n", "", "else", ":", "\n", "            ", "klen", "=", "shape_list", "(", "kv", ")", "[", "1", "]", "\n", "# assert dim == self.dim, 'Dimensions do not match: %s input vs %s configured' % (dim, self.dim)", "\n", "", "n_heads", "=", "self", ".", "n_heads", "\n", "dim_per_head", "=", "self", ".", "dim", "//", "n_heads", "\n", "mask_reshape", "=", "(", "bs", ",", "1", ",", "qlen", ",", "klen", ")", "if", "len", "(", "shape_list", "(", "mask", ")", ")", "==", "3", "else", "(", "bs", ",", "1", ",", "1", ",", "klen", ")", "\n", "\n", "def", "shape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  projection \"\"\"", "\n", "return", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "x", ",", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", ",", "dim_per_head", ")", ")", ",", "perm", "=", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "\n", "", "def", "unshape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  compute context \"\"\"", "\n", "return", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "x", ",", "perm", "=", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", ",", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", "*", "dim_per_head", ")", ")", "\n", "\n", "", "q", "=", "shape", "(", "self", ".", "q_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "", "elif", "cache", "is", "None", "or", "self", ".", "layer_id", "not", "in", "cache", ":", "\n", "            ", "k", "=", "v", "=", "kv", "\n", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "k", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "v", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "layer_id", "in", "cache", ":", "\n", "                ", "if", "kv", "is", "None", ":", "\n", "                    ", "k_", ",", "v_", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "k", "=", "tf", ".", "concat", "(", "[", "k_", ",", "k", "]", ",", "axis", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "v", "=", "tf", ".", "concat", "(", "[", "v_", ",", "v", "]", ",", "axis", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "", "else", ":", "\n", "                    ", "k", ",", "v", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "", "", "cache", "[", "self", ".", "layer_id", "]", "=", "(", "k", ",", "v", ")", "\n", "\n", "", "q", "=", "q", "/", "math", ".", "sqrt", "(", "dim_per_head", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "scores", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "# (bs, n_heads, qlen, klen)", "\n", "mask", "=", "tf", ".", "reshape", "(", "mask", ",", "mask_reshape", ")", "# (bs, n_heads, qlen, klen)", "\n", "# scores.masked_fill_(mask, -float('inf'))                            # (bs, n_heads, qlen, klen)", "\n", "scores", "=", "scores", "-", "1e30", "*", "(", "1.0", "-", "mask", ")", "\n", "\n", "weights", "=", "tf", ".", "nn", ".", "softmax", "(", "scores", ",", "axis", "=", "-", "1", ")", "# (bs, n_heads, qlen, klen)", "\n", "weights", "=", "self", ".", "dropout", "(", "weights", ",", "training", "=", "training", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "weights", "=", "weights", "*", "head_mask", "\n", "\n", "", "context", "=", "tf", ".", "matmul", "(", "weights", ",", "v", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "context", "=", "unshape", "(", "context", ")", "# (bs, qlen, dim)", "\n", "\n", "outputs", "=", "(", "self", ".", "out_lin", "(", "context", ")", ",", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "weights", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFTransformerFFN.__init__": [[187, 193], ["super().__init__", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Activation", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "dim_hidden", ",", "out_dim", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFTransformerFFN", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "lin1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "dim_hidden", ",", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "name", "=", "'lin1'", ")", "\n", "self", ".", "lin2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "out_dim", ",", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "name", "=", "'lin2'", ")", "\n", "self", ".", "act", "=", "tf", ".", "keras", ".", "layers", ".", "Activation", "(", "gelu", ")", "if", "config", ".", "gelu_activation", "else", "tf", ".", "keras", ".", "activations", ".", "relu", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFTransformerFFN.call": [[194, 200], ["modeling_tf_xlm.TFTransformerFFN.lin1", "modeling_tf_xlm.TFTransformerFFN.act", "modeling_tf_xlm.TFTransformerFFN.lin2", "modeling_tf_xlm.TFTransformerFFN.dropout"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "input", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "lin1", "(", "input", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ",", "training", "=", "training", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMMainLayer.__init__": [[203, 278], ["super().__init__", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Embedding", "modeling_tf_utils.TFSharedEmbeddings", "tensorflow.keras.layers.LayerNormalization", "range", "hasattr", "NotImplementedError", "tensorflow.keras.layers.Embedding", "modeling_tf_xlm.TFXLMMainLayer.attentions.append", "modeling_tf_xlm.TFXLMMainLayer.layer_norm1.append", "modeling_tf_xlm.TFXLMMainLayer.ffns.append", "modeling_tf_xlm.TFXLMMainLayer.layer_norm2.append", "config.pruned_heads.copy().items", "modeling_tf_utils.get_initializer", "modeling_tf_xlm.TFMultiHeadAttention", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_xlm.TFTransformerFFN", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_utils.get_initializer", "config.pruned_heads.copy", "modeling_tf_xlm.TFXLMMainLayer.prune_heads", "int", "list", "int", "map"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.prune_heads"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLMMainLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "# encoder / decoder, output layer", "\n", "self", ".", "is_encoder", "=", "config", ".", "is_encoder", "\n", "self", ".", "is_decoder", "=", "not", "config", ".", "is_encoder", "\n", "if", "self", ".", "is_decoder", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Currently XLM can only be used as an encoder\"", ")", "\n", "# self.with_output = with_output", "\n", "", "self", ".", "causal", "=", "config", ".", "causal", "\n", "\n", "# dictionary / languages", "\n", "self", ".", "n_langs", "=", "config", ".", "n_langs", "\n", "self", ".", "use_lang_emb", "=", "config", ".", "use_lang_emb", "\n", "self", ".", "n_words", "=", "config", ".", "n_words", "\n", "self", ".", "eos_index", "=", "config", ".", "eos_index", "\n", "self", ".", "pad_index", "=", "config", ".", "pad_index", "\n", "# self.dico = dico", "\n", "# self.id2lang = config.id2lang", "\n", "# self.lang2id = config.lang2id", "\n", "# assert len(self.dico) == self.n_words", "\n", "# assert len(self.id2lang) == len(self.lang2id) == self.n_langs", "\n", "\n", "# model parameters", "\n", "self", ".", "dim", "=", "config", ".", "emb_dim", "# 512 by default", "\n", "self", ".", "hidden_dim", "=", "self", ".", "dim", "*", "4", "# 2048 by default", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "# 8 by default", "\n", "self", ".", "n_layers", "=", "config", ".", "n_layers", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", ",", "'transformer dim must be a multiple of n_heads'", "\n", "\n", "# embeddings", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "self", ".", "attention_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "attention_dropout", ")", "\n", "\n", "self", ".", "position_embeddings", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "\n", "self", ".", "dim", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "config", ".", "embed_init_std", ")", ",", "\n", "name", "=", "'position_embeddings'", ")", "\n", "if", "config", ".", "sinusoidal_embeddings", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# create_sinusoidal_embeddings(config.max_position_embeddings, self.dim, out=self.position_embeddings.weight)", "\n", "", "if", "config", ".", "n_langs", ">", "1", "and", "config", ".", "use_lang_emb", ":", "\n", "            ", "self", ".", "lang_embeddings", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "self", ".", "n_langs", ",", "\n", "self", ".", "dim", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "config", ".", "embed_init_std", ")", ",", "\n", "name", "=", "'lang_embeddings'", ")", "\n", "", "self", ".", "embeddings", "=", "TFSharedEmbeddings", "(", "self", ".", "n_words", ",", "self", ".", "dim", ",", "initializer_range", "=", "config", ".", "embed_init_std", ",", "name", "=", "'embeddings'", ")", "# padding_idx=self.pad_index)", "\n", "self", ".", "layer_norm_emb", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'layer_norm_emb'", ")", "\n", "\n", "# transformer layers", "\n", "self", ".", "attentions", "=", "[", "]", "\n", "self", ".", "layer_norm1", "=", "[", "]", "\n", "self", ".", "ffns", "=", "[", "]", "\n", "self", ".", "layer_norm2", "=", "[", "]", "\n", "# if self.is_decoder:", "\n", "#     self.layer_norm15 = []", "\n", "#     self.encoder_attn = []", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "self", ".", "attentions", ".", "append", "(", "TFMultiHeadAttention", "(", "self", ".", "n_heads", ",", "self", ".", "dim", ",", "config", "=", "config", ",", "name", "=", "'attentions_._{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "self", ".", "layer_norm1", ".", "append", "(", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'layer_norm1_._{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "# if self.is_decoder:", "\n", "#     self.layer_norm15.append(nn.LayerNorm(self.dim, eps=config.layer_norm_eps))", "\n", "#     self.encoder_attn.append(MultiHeadAttention(self.n_heads, self.dim, dropout=self.attention_dropout))", "\n", "self", ".", "ffns", ".", "append", "(", "TFTransformerFFN", "(", "self", ".", "dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "dim", ",", "config", "=", "config", ",", "name", "=", "'ffns_._{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "self", ".", "layer_norm2", ".", "append", "(", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'layer_norm2_._{}'", ".", "format", "(", "i", ")", ")", ")", "\n", "\n", "", "if", "hasattr", "(", "config", ",", "\"pruned_heads\"", ")", ":", "\n", "            ", "pruned_heads", "=", "config", ".", "pruned_heads", ".", "copy", "(", ")", ".", "items", "(", ")", "\n", "config", ".", "pruned_heads", "=", "{", "}", "\n", "for", "layer", ",", "heads", "in", "pruned_heads", ":", "\n", "                ", "if", "self", ".", "attentions", "[", "int", "(", "layer", ")", "]", ".", "n_heads", "==", "config", ".", "n_heads", ":", "\n", "                    ", "self", ".", "prune_heads", "(", "{", "int", "(", "layer", ")", ":", "list", "(", "map", "(", "int", ",", "heads", ")", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMMainLayer.get_input_embeddings": [[280, 282], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMMainLayer._resize_token_embeddings": [[283, 285], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMMainLayer._prune_heads": [[286, 292], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMMainLayer.call": [[293, 444], ["isinstance", "tensorflow.debugging.assert_equal", "modeling_tf_xlm.get_masks", "modeling_tf_xlm.TFXLMMainLayer.layer_norm_emb", "modeling_tf_xlm.TFXLMMainLayer.dropout", "range", "isinstance", "ValueError", "tensorflow.expand_dims", "tensorflow.debugging.assert_equal", "tensorflow.debugging.assert_equal", "modeling_tf_xlm.TFXLMMainLayer.embeddings", "modeling_tf_xlm.TFXLMMainLayer.position_embeddings", "modeling_tf_xlm.TFXLMMainLayer.dropout", "modeling_tf_xlm.TFXLMMainLayer.size", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "tensorflow.reduce_sum", "tensorflow.convert_to_tensor", "modeling_tf_utils.shape_list", "tensorflow.range", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_xlm.TFXLMMainLayer.lang_embeddings", "modeling_tf_xlm.TFXLMMainLayer.embeddings", "len", "len", "len", "len", "len", "len", "len", "len", "len", "ValueError", "tensorflow.cast", "modeling_tf_utils.shape_list", "tensorflow.not_equal"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.get_masks", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "lengths", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "training", "=", "False", ")", ":", "# removed: src_enc=None, src_len=None", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "langs", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "langs", "\n", "token_type_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "position_ids", "\n", "lengths", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "lengths", "\n", "cache", "=", "inputs", "[", "6", "]", "if", "len", "(", "inputs", ")", ">", "6", "else", "cache", "\n", "head_mask", "=", "inputs", "[", "7", "]", "if", "len", "(", "inputs", ")", ">", "7", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "8", "]", "if", "len", "(", "inputs", ")", ">", "8", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "9", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "langs", "=", "inputs", ".", "get", "(", "'langs'", ",", "langs", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "lengths", "=", "inputs", ".", "get", "(", "'lengths'", ",", "lengths", ")", "\n", "cache", "=", "inputs", ".", "get", "(", "'cache'", ",", "cache", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "9", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "bs", ",", "slen", "=", "shape_list", "(", "input_ids", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "bs", ",", "slen", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "lengths", "is", "None", ":", "\n", "            ", "if", "input_ids", "is", "not", "None", ":", "\n", "                ", "lengths", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "input_ids", ",", "self", ".", "pad_index", ")", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "lengths", "=", "tf", ".", "convert_to_tensor", "(", "[", "slen", "]", "*", "bs", ",", "tf", ".", "int32", ")", "\n", "# mask = input_ids != self.pad_index", "\n", "\n", "# check inputs", "\n", "# assert shape_list(lengths)[0] == bs", "\n", "", "", "tf", ".", "debugging", ".", "assert_equal", "(", "shape_list", "(", "lengths", ")", "[", "0", "]", ",", "bs", ")", "\n", "# assert lengths.max().item() <= slen", "\n", "# input_ids = input_ids.transpose(0, 1)  # batch size as dimension 0", "\n", "# assert (src_enc is None) == (src_len is None)", "\n", "# if src_enc is not None:", "\n", "#     assert self.is_decoder", "\n", "#     assert src_enc.size(0) == bs", "\n", "\n", "# generate masks", "\n", "mask", ",", "attn_mask", "=", "get_masks", "(", "slen", ",", "lengths", ",", "self", ".", "causal", ",", "padding_mask", "=", "attention_mask", ")", "\n", "# if self.is_decoder and src_enc is not None:", "\n", "#     src_mask = torch.arange(src_len.max(), dtype=torch.long, device=lengths.device) < src_len[:, None]", "\n", "\n", "# position_ids", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "slen", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "# assert shape_list(position_ids) == [bs, slen]  # (slen, bs)", "\n", "            ", "tf", ".", "debugging", ".", "assert_equal", "(", "shape_list", "(", "position_ids", ")", ",", "[", "bs", ",", "slen", "]", ")", "\n", "# position_ids = position_ids.transpose(0, 1)", "\n", "\n", "# langs", "\n", "", "if", "langs", "is", "not", "None", ":", "\n", "# assert shape_list(langs) == [bs, slen]  # (slen, bs)", "\n", "            ", "tf", ".", "debugging", ".", "assert_equal", "(", "shape_list", "(", "langs", ")", ",", "[", "bs", ",", "slen", "]", ")", "\n", "# langs = langs.transpose(0, 1)", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x qlen x klen]", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layers", "\n", "\n", "# do not recompute cached elements", "\n", "", "if", "cache", "is", "not", "None", "and", "input_ids", "is", "not", "None", ":", "\n", "            ", "_slen", "=", "slen", "-", "cache", "[", "'slen'", "]", "\n", "input_ids", "=", "input_ids", "[", ":", ",", "-", "_slen", ":", "]", "\n", "position_ids", "=", "position_ids", "[", ":", ",", "-", "_slen", ":", "]", "\n", "if", "langs", "is", "not", "None", ":", "\n", "                ", "langs", "=", "langs", "[", ":", ",", "-", "_slen", ":", "]", "\n", "", "mask", "=", "mask", "[", ":", ",", "-", "_slen", ":", "]", "\n", "attn_mask", "=", "attn_mask", "[", ":", ",", "-", "_slen", ":", "]", "\n", "\n", "# embeddings", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "embeddings", "(", "input_ids", ")", "\n", "\n", "", "tensor", "=", "inputs_embeds", "+", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "if", "langs", "is", "not", "None", "and", "self", ".", "use_lang_emb", ":", "\n", "            ", "tensor", "=", "tensor", "+", "self", ".", "lang_embeddings", "(", "langs", ")", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "tensor", "=", "tensor", "+", "self", ".", "embeddings", "(", "token_type_ids", ")", "\n", "", "tensor", "=", "self", ".", "layer_norm_emb", "(", "tensor", ")", "\n", "tensor", "=", "self", ".", "dropout", "(", "tensor", ",", "training", "=", "training", ")", "\n", "tensor", "=", "tensor", "*", "mask", "[", "...", ",", "tf", ".", "newaxis", "]", "\n", "\n", "# transformer layers", "\n", "hidden_states", "=", "(", ")", "\n", "attentions", "=", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "hidden_states", "=", "hidden_states", "+", "(", "tensor", ",", ")", "\n", "\n", "# self attention", "\n", "", "attn_outputs", "=", "self", ".", "attentions", "[", "i", "]", "(", "[", "tensor", ",", "attn_mask", ",", "None", ",", "cache", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "attn", "=", "attn_outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attentions", "=", "attentions", "+", "(", "attn_outputs", "[", "1", "]", ",", ")", "\n", "", "attn", "=", "self", ".", "dropout", "(", "attn", ",", "training", "=", "training", ")", "\n", "tensor", "=", "tensor", "+", "attn", "\n", "tensor", "=", "self", ".", "layer_norm1", "[", "i", "]", "(", "tensor", ")", "\n", "\n", "# encoder attention (for decoder only)", "\n", "# if self.is_decoder and src_enc is not None:", "\n", "#     attn = self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)", "\n", "#     attn = F.dropout(attn, p=self.dropout, training=self.training)", "\n", "#     tensor = tensor + attn", "\n", "#     tensor = self.layer_norm15[i](tensor)", "\n", "\n", "# FFN", "\n", "tensor", "=", "tensor", "+", "self", ".", "ffns", "[", "i", "]", "(", "tensor", ")", "\n", "tensor", "=", "self", ".", "layer_norm2", "[", "i", "]", "(", "tensor", ")", "\n", "tensor", "=", "tensor", "*", "mask", "[", "...", ",", "tf", ".", "newaxis", "]", "\n", "\n", "# Add last hidden state", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "hidden_states", "=", "hidden_states", "+", "(", "tensor", ",", ")", "\n", "\n", "# update cache length", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "            ", "cache", "[", "'slen'", "]", "+=", "tensor", ".", "size", "(", "1", ")", "\n", "\n", "# move back sequence length to dimension 0", "\n", "# tensor = tensor.transpose(0, 1)", "\n", "\n", "", "outputs", "=", "(", "tensor", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attentions", ",", ")", "\n", "", "return", "outputs", "# outputs, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMPreTrainedModel.dummy_inputs": [[454, 464], ["tensorflow.constant", "tensorflow.constant", "tensorflow.constant"], "methods", ["None"], ["@", "property", "\n", "def", "dummy_inputs", "(", "self", ")", ":", "\n", "# Sometimes XLM has language embeddings so don't forget to build them as well if needed", "\n", "        ", "inputs_list", "=", "tf", ".", "constant", "(", "[", "[", "7", ",", "6", ",", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "2", ",", "3", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "4", ",", "5", "]", "]", ")", "\n", "attns_list", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "1", ",", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", "]", "]", ")", "\n", "if", "self", ".", "config", ".", "use_lang_emb", "and", "self", ".", "config", ".", "n_langs", ">", "1", ":", "\n", "            ", "langs_list", "=", "tf", ".", "constant", "(", "[", "[", "1", ",", "1", ",", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "langs_list", "=", "None", "\n", "", "return", "{", "'input_ids'", ":", "inputs_list", ",", "'attention_mask'", ":", "attns_list", ",", "'langs'", ":", "langs_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMModel.__init__": [[584, 587], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlm.TFXLMMainLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLMModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFXLMMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMModel.call": [[588, 591], ["modeling_tf_xlm.TFXLMModel.transformer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMPredLayer.__init__": [[598, 607], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLMPredLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "asm", "=", "config", ".", "asm", "\n", "self", ".", "n_words", "=", "config", ".", "n_words", "\n", "self", ".", "pad_index", "=", "config", ".", "pad_index", "\n", "if", "config", ".", "asm", "is", "False", ":", "\n", "            ", "self", ".", "input_embeddings", "=", "input_embeddings", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# self.proj = nn.AdaptiveLogSoftmaxWithLoss(", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMPredLayer.build": [[615, 622], ["modeling_tf_xlm.TFXLMPredLayer.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "# The output weights are the same as the input embeddings, but there is an output-only bias for each token.", "\n", "        ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_words", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'bias'", ")", "\n", "super", "(", "TFXLMPredLayer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMPredLayer.call": [[623, 627], ["modeling_tf_xlm.TFXLMPredLayer.input_embeddings"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "input_embeddings", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "hidden_states", "=", "hidden_states", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMWithLMHeadModel.__init__": [[657, 661], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlm.TFXLMMainLayer", "modeling_tf_xlm.TFXLMPredLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLMWithLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFXLMMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "pred_layer", "=", "TFXLMPredLayer", "(", "config", ",", "self", ".", "transformer", ".", "embeddings", ",", "name", "=", "'pred_layer_._proj'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMWithLMHeadModel.get_output_embeddings": [[662, 664], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pred_layer", ".", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMWithLMHeadModel.call": [[665, 673], ["modeling_tf_xlm.TFXLMWithLMHeadModel.transformer", "modeling_tf_xlm.TFXLMWithLMHeadModel.pred_layer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "outputs", "=", "self", ".", "pred_layer", "(", "output", ")", "\n", "outputs", "=", "(", "outputs", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMForSequenceClassification.__init__": [[704, 710], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlm.TFXLMMainLayer", "modeling_tf_utils.TFSequenceSummary"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLMForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "TFXLMMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "sequence_summary", "=", "TFSequenceSummary", "(", "config", ",", "initializer_range", "=", "config", ".", "init_std", ",", "name", "=", "'sequence_summary'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMForSequenceClassification.call": [[711, 719], ["modeling_tf_xlm.TFXLMForSequenceClassification.transformer", "modeling_tf_xlm.TFXLMForSequenceClassification.sequence_summary"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "sequence_summary", "(", "output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMForQuestionAnsweringSimple.__init__": [[751, 757], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlm.TFXLMMainLayer", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLMForQuestionAnsweringSimple", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFXLMMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "qa_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "init_std", ")", ",", "\n", "name", "=", "'qa_outputs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.TFXLMForQuestionAnsweringSimple.call": [[758, 771], ["modeling_tf_xlm.TFXLMForQuestionAnsweringSimple.transformer", "modeling_tf_xlm.TFXLMForQuestionAnsweringSimple.qa_outputs", "tensorflow.split", "tensorflow.squeeze", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "tf", ".", "split", "(", "logits", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "start_logits", "=", "tf", ".", "squeeze", "(", "start_logits", ",", "axis", "=", "-", "1", ")", "\n", "end_logits", "=", "tf", ".", "squeeze", "(", "end_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "return", "outputs", "# start_logits, end_logits, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.create_sinusoidal_embeddings": [[47, 54], ["numpy.array", "tensorflow.constant", "tensorflow.constant", "numpy.sin", "numpy.cos", "range", "numpy.power", "range"], "function", ["None"], ["def", "create_sinusoidal_embeddings", "(", "n_pos", ",", "dim", ",", "out", ")", ":", "\n", "    ", "position_enc", "=", "np", ".", "array", "(", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "j", "//", "2", ")", "/", "dim", ")", "for", "j", "in", "range", "(", "dim", ")", "]", "\n", "for", "pos", "in", "range", "(", "n_pos", ")", "\n", "]", ")", "\n", "out", "[", ":", ",", "0", ":", ":", "2", "]", "=", "tf", ".", "constant", "(", "np", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", ")", "\n", "out", "[", ":", ",", "1", ":", ":", "2", "]", "=", "tf", ".", "constant", "(", "np", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.gelu": [[56, 65], ["tensorflow.math.erf", "tensorflow.math.sqrt"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Gaussian Error Linear Unit.\n    Original Implementation of the gelu activation function in Google Bert repo when initially created.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "math", ".", "erf", "(", "x", "/", "tf", ".", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlm.get_masks": [[67, 95], ["tensorflow.debugging.assert_equal", "tensorflow.cast", "tensorflow.cast", "modeling_tf_utils.shape_list", "tensorflow.range", "tensorflow.math.less", "tensorflow.less_equal", "modeling_tf_utils.shape_list", "tensorflow.tile", "modeling_tf_utils.shape_list"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "get_masks", "(", "slen", ",", "lengths", ",", "causal", ",", "padding_mask", "=", "None", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "    ", "\"\"\"\n    Generate hidden states mask, and optionally an attention mask.\n    \"\"\"", "\n", "bs", "=", "shape_list", "(", "lengths", ")", "[", "0", "]", "\n", "if", "padding_mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "padding_mask", "\n", "", "else", ":", "\n", "# assert lengths.max().item() <= slen", "\n", "        ", "alen", "=", "tf", ".", "range", "(", "slen", ")", "\n", "mask", "=", "tf", ".", "math", ".", "less", "(", "alen", ",", "lengths", "[", ":", ",", "tf", ".", "newaxis", "]", ")", "\n", "\n", "# attention mask is the same as mask, or triangular inferior attention (causal)", "\n", "", "if", "causal", ":", "\n", "        ", "attn_mask", "=", "tf", ".", "less_equal", "(", "tf", ".", "tile", "(", "alen", "[", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", ",", "(", "bs", ",", "slen", ",", "1", ")", ")", ",", "\n", "alen", "[", "tf", ".", "newaxis", ",", ":", ",", "tf", ".", "newaxis", "]", ")", "\n", "", "else", ":", "\n", "        ", "attn_mask", "=", "mask", "\n", "\n", "# sanity check", "\n", "# assert shape_list(mask) == [bs, slen]", "\n", "", "tf", ".", "debugging", ".", "assert_equal", "(", "shape_list", "(", "mask", ")", ",", "[", "bs", ",", "slen", "]", ")", "\n", "assert", "causal", "is", "False", "or", "shape_list", "(", "attn_mask", ")", "==", "[", "bs", ",", "slen", ",", "slen", "]", "\n", "\n", "mask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", "=", "dtype", ")", "\n", "attn_mask", "=", "tf", ".", "cast", "(", "attn_mask", ",", "dtype", "=", "dtype", ")", "\n", "\n", "return", "mask", ",", "attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer.__init__": [[66, 91], ["tokenization_utils.PreTrainedTokenizer.__init__", "spm.SentencePieceProcessor", "tokenization_albert.AlbertTokenizer.sp_model.Load", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "\n", "do_lower_case", "=", "True", ",", "remove_space", "=", "True", ",", "keep_accents", "=", "False", ",", "\n", "bos_token", "=", "\"[CLS]\"", ",", "eos_token", "=", "\"[SEP]\"", ",", "unk_token", "=", "\"<unk>\"", ",", "sep_token", "=", "\"[SEP]\"", ",", "\n", "pad_token", "=", "\"<pad>\"", ",", "cls_token", "=", "\"[CLS]\"", ",", "mask_token", "=", "\"[MASK]\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AlbertTokenizer", ",", "self", ")", ".", "__init__", "(", "bos_token", "=", "bos_token", ",", "eos_token", "=", "eos_token", ",", "\n", "unk_token", "=", "unk_token", ",", "sep_token", "=", "sep_token", ",", "\n", "pad_token", "=", "pad_token", ",", "cls_token", "=", "cls_token", ",", "\n", "mask_token", "=", "mask_token", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "3", "# take into account special tokens", "\n", "\n", "try", ":", "\n", "            ", "import", "sentencepiece", "as", "spm", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"You need to install SentencePiece to use AlbertTokenizer: https://github.com/google/sentencepiece\"", "\n", "\"pip install sentencepiece\"", ")", "\n", "\n", "", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "remove_space", "=", "remove_space", "\n", "self", ".", "keep_accents", "=", "keep_accents", "\n", "self", ".", "vocab_file", "=", "vocab_file", "\n", "\n", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "sp_model", ".", "Load", "(", "vocab_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer.vocab_size": [[92, 95], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sp_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer.__getstate__": [[96, 100], ["tokenization_albert.AlbertTokenizer.__dict__.copy"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "state", "[", "\"sp_model\"", "]", "=", "None", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer.__setstate__": [[101, 110], ["spm.SentencePieceProcessor", "tokenization_albert.AlbertTokenizer.sp_model.Load", "logger.warning"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", "=", "d", "\n", "try", ":", "\n", "            ", "import", "sentencepiece", "as", "spm", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"You need to install SentencePiece to use AlbertTokenizer: https://github.com/google/sentencepiece\"", "\n", "\"pip install sentencepiece\"", ")", "\n", "", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "sp_model", ".", "Load", "(", "self", ".", "vocab_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer.preprocess_text": [[111, 128], ["outputs.lower.lower.replace().replace", "isinstance", "outputs.lower.lower.decode", "unicodedata.normalize", "outputs.lower.lower.lower", "inputs.strip().split", "outputs.lower.lower.replace", "inputs.strip", "unicodedata.combining"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "preprocess_text", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "remove_space", ":", "\n", "            ", "outputs", "=", "' '", ".", "join", "(", "inputs", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "inputs", "\n", "", "outputs", "=", "outputs", ".", "replace", "(", "\"``\"", ",", "'\"'", ")", ".", "replace", "(", "\"''\"", ",", "'\"'", ")", "\n", "\n", "if", "six", ".", "PY2", "and", "isinstance", "(", "outputs", ",", "str", ")", ":", "\n", "            ", "outputs", "=", "outputs", ".", "decode", "(", "'utf-8'", ")", "\n", "\n", "", "if", "not", "self", ".", "keep_accents", ":", "\n", "            ", "outputs", "=", "unicodedata", ".", "normalize", "(", "'NFKD'", ",", "outputs", ")", "\n", "outputs", "=", "''", ".", "join", "(", "[", "c", "for", "c", "in", "outputs", "if", "not", "unicodedata", ".", "combining", "(", "c", ")", "]", ")", "\n", "", "if", "self", ".", "do_lower_case", ":", "\n", "            ", "outputs", "=", "outputs", ".", "lower", "(", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer._tokenize": [[129, 167], ["tokenization_albert.AlbertTokenizer.preprocess_text", "isinstance", "text.encode.encode.encode", "tokenization_albert.AlbertTokenizer.sp_model.EncodeAsPieces", "tokenization_albert.AlbertTokenizer.sp_model.SampleEncodeAsPieces", "piece[].isdigit", "tokenization_albert.AlbertTokenizer.sp_model.EncodeAsPieces", "tokenization_albert.AlbertTokenizer.append", "new_pieces.extend", "new_pieces.append", "isinstance", "ret_pieces.append", "len", "str", "piece[].replace", "piece.decode.decode.decode", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer.preprocess_text", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "return_unicode", "=", "True", ",", "sample", "=", "False", ")", ":", "\n", "        ", "\"\"\" Tokenize a string.\n            return_unicode is used only for py2\n        \"\"\"", "\n", "text", "=", "self", ".", "preprocess_text", "(", "text", ")", "\n", "# note(zhiliny): in some systems, sentencepiece only accepts str for py2", "\n", "if", "six", ".", "PY2", "and", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "            ", "text", "=", "text", ".", "encode", "(", "'utf-8'", ")", "\n", "\n", "", "if", "not", "sample", ":", "\n", "            ", "pieces", "=", "self", ".", "sp_model", ".", "EncodeAsPieces", "(", "text", ")", "\n", "", "else", ":", "\n", "            ", "pieces", "=", "self", ".", "sp_model", ".", "SampleEncodeAsPieces", "(", "text", ",", "64", ",", "0.1", ")", "\n", "", "new_pieces", "=", "[", "]", "\n", "for", "piece", "in", "pieces", ":", "\n", "            ", "if", "len", "(", "piece", ")", ">", "1", "and", "piece", "[", "-", "1", "]", "==", "str", "(", "','", ")", "and", "piece", "[", "-", "2", "]", ".", "isdigit", "(", ")", ":", "\n", "                ", "cur_pieces", "=", "self", ".", "sp_model", ".", "EncodeAsPieces", "(", "\n", "piece", "[", ":", "-", "1", "]", ".", "replace", "(", "SPIECE_UNDERLINE", ",", "''", ")", ")", "\n", "if", "piece", "[", "0", "]", "!=", "SPIECE_UNDERLINE", "and", "cur_pieces", "[", "0", "]", "[", "0", "]", "==", "SPIECE_UNDERLINE", ":", "\n", "                    ", "if", "len", "(", "cur_pieces", "[", "0", "]", ")", "==", "1", ":", "\n", "                        ", "cur_pieces", "=", "cur_pieces", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                        ", "cur_pieces", "[", "0", "]", "=", "cur_pieces", "[", "0", "]", "[", "1", ":", "]", "\n", "", "", "cur_pieces", ".", "append", "(", "piece", "[", "-", "1", "]", ")", "\n", "new_pieces", ".", "extend", "(", "cur_pieces", ")", "\n", "", "else", ":", "\n", "                ", "new_pieces", ".", "append", "(", "piece", ")", "\n", "\n", "# note(zhiliny): convert back to unicode for py2", "\n", "", "", "if", "six", ".", "PY2", "and", "return_unicode", ":", "\n", "            ", "ret_pieces", "=", "[", "]", "\n", "for", "piece", "in", "new_pieces", ":", "\n", "                ", "if", "isinstance", "(", "piece", ",", "str", ")", ":", "\n", "                    ", "piece", "=", "piece", ".", "decode", "(", "'utf-8'", ")", "\n", "", "ret_pieces", ".", "append", "(", "piece", ")", "\n", "", "new_pieces", "=", "ret_pieces", "\n", "\n", "", "return", "new_pieces", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer._convert_token_to_id": [[168, 171], ["tokenization_albert.AlbertTokenizer.sp_model.PieceToId"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "sp_model", ".", "PieceToId", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer._convert_id_to_token": [[172, 178], ["tokenization_albert.AlbertTokenizer.sp_model.IdToPiece", "isinstance", "token.decode.decode.decode"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ",", "return_unicode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "token", "=", "self", ".", "sp_model", ".", "IdToPiece", "(", "index", ")", "\n", "if", "six", ".", "PY2", "and", "return_unicode", "and", "isinstance", "(", "token", ",", "str", ")", ":", "\n", "            ", "token", "=", "token", ".", "decode", "(", "'utf-8'", ")", "\n", "", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer.convert_tokens_to_string": [[179, 183], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"Converts a sequence of tokens (strings for sub-words) in a single string.\"\"\"", "\n", "out_string", "=", "''", ".", "join", "(", "tokens", ")", ".", "replace", "(", "SPIECE_UNDERLINE", ",", "' '", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer.build_inputs_with_special_tokens": [[184, 197], ["None"], "methods", ["None"], ["", "def", "build_inputs_with_special_tokens", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build model inputs from a sequence or a pair of sequence for sequence classification tasks\n        by concatenating and adding special tokens.\n        An ALBERT sequence has the following format:\n            single sequence: [CLS] X [SEP]\n            pair of sequences: [CLS] A [SEP] B [SEP]\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "cls", "+", "token_ids_0", "+", "sep", "\n", "", "return", "cls", "+", "token_ids_0", "+", "sep", "+", "token_ids_1", "+", "sep", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer.get_special_tokens_mask": [[198, 223], ["list", "ValueError", "map", "len", "len", "len"], "methods", ["None"], ["", "def", "get_special_tokens_mask", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ",", "already_has_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding\n        special tokens using the tokenizer ``prepare_for_model`` or ``encode_plus`` methods.\n\n        Args:\n            token_ids_0: list of ids (must not contain special tokens)\n            token_ids_1: Optional list of ids (must not contain special tokens), necessary when fetching sequence ids\n                for sequence pairs\n            already_has_special_tokens: (default False) Set to True if the token list is already formated with\n                special tokens for the model\n\n        Returns:\n            A list of integers in the range [0, 1]: 0 for a special token, 1 for a sequence token.\n        \"\"\"", "\n", "\n", "if", "already_has_special_tokens", ":", "\n", "            ", "if", "token_ids_1", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"You should not supply a second sequence if the provided sequence of \"", "\n", "\"ids is already formated with special tokens for the model.\"", ")", "\n", "", "return", "list", "(", "map", "(", "lambda", "x", ":", "1", "if", "x", "in", "[", "self", ".", "sep_token_id", ",", "self", ".", "cls_token_id", "]", "else", "0", ",", "token_ids_0", ")", ")", "\n", "\n", "", "if", "token_ids_1", "is", "not", "None", ":", "\n", "            ", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_1", ")", ")", "+", "[", "1", "]", "\n", "", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer.create_token_type_ids_from_sequences": [[224, 239], ["len", "len", "len"], "methods", ["None"], ["", "def", "create_token_type_ids_from_sequences", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Creates a mask from the two sequences passed to be used in a sequence-pair classification task.\n        An ALBERT sequence pair mask has the following format:\n        0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1\n        | first sequence    | second sequence\n\n        if token_ids_1 is None, only returns the first portion of the mask (0's).\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "\n", "", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "+", "len", "(", "token_ids_1", "+", "sep", ")", "*", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_albert.AlbertTokenizer.save_vocabulary": [[240, 253], ["os.path.join", "os.path.isdir", "logger.error", "os.path.abspath", "os.path.abspath", "shutil.copyfile"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save the sentencepiece vocabulary (copy original file) and special tokens file\n            to a directory.\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "out_vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "\n", "if", "os", ".", "path", ".", "abspath", "(", "self", ".", "vocab_file", ")", "!=", "os", ".", "path", ".", "abspath", "(", "out_vocab_file", ")", ":", "\n", "            ", "copyfile", "(", "self", ".", "vocab_file", ",", "out_vocab_file", ")", "\n", "\n", "", "return", "(", "out_vocab_file", ",", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.S3Obj.__init__": [[28, 40], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "filename", ",", "# type: str", "\n", "LastModified", ",", "# type: str", "\n", "ETag", ",", "# type: str", "\n", "Size", ",", "# type: int", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "filename", "=", "filename", "\n", "self", ".", "LastModified", "=", "LastModified", "\n", "self", ".", "ETag", "=", "ETag", "\n", "self", ".", "Size", "=", "Size", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.PresignedUrl.__init__": [[43, 53], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "write", ",", "# type: str", "\n", "access", ",", "# type: str", "\n", "type", ",", "# type: str", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "write", "=", "write", "\n", "self", ".", "access", "=", "access", "\n", "self", ".", "type", "=", "type", "# mime-type to send to S3.", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.__init__": [[56, 58], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "endpoint", "=", "None", ")", ":", "\n", "        ", "self", ".", "endpoint", "=", "endpoint", "if", "endpoint", "is", "not", "None", "else", "ENDPOINT", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.login": [[59, 79], ["requests.post", "requests.post.raise_for_status", "requests.post.json"], "methods", ["None"], ["", "def", "login", "(", "\n", "self", ",", "\n", "username", ",", "# type: str", "\n", "password", ",", "# type: str", "\n", ")", ":", "\n", "# type: (...) -> str", "\n", "        ", "\"\"\"\n        Call HF API to sign in a user and get a token if credentials are valid.\n\n        Outputs:\n            token if credentials are valid\n\n        Throws:\n            requests.exceptions.HTTPError if credentials are invalid\n        \"\"\"", "\n", "path", "=", "\"{}/api/login\"", ".", "format", "(", "self", ".", "endpoint", ")", "\n", "r", "=", "requests", ".", "post", "(", "path", ",", "json", "=", "{", "\"username\"", ":", "username", ",", "\"password\"", ":", "password", "}", ")", "\n", "r", ".", "raise_for_status", "(", ")", "\n", "d", "=", "r", ".", "json", "(", ")", "\n", "return", "d", "[", "\"token\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.whoami": [[80, 93], ["requests.get", "requests.get.raise_for_status", "requests.get.json"], "methods", ["None"], ["", "def", "whoami", "(", "\n", "self", ",", "\n", "token", ",", "# type: str", "\n", ")", ":", "\n", "# type: (...) -> str", "\n", "        ", "\"\"\"\n        Call HF API to know \"whoami\"\n        \"\"\"", "\n", "path", "=", "\"{}/api/whoami\"", ".", "format", "(", "self", ".", "endpoint", ")", "\n", "r", "=", "requests", ".", "get", "(", "path", ",", "headers", "=", "{", "\"authorization\"", ":", "\"Bearer {}\"", ".", "format", "(", "token", ")", "}", ")", "\n", "r", ".", "raise_for_status", "(", ")", "\n", "d", "=", "r", ".", "json", "(", ")", "\n", "return", "d", "[", "\"user\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.logout": [[94, 102], ["requests.post", "requests.post.raise_for_status"], "methods", ["None"], ["", "def", "logout", "(", "self", ",", "token", ")", ":", "\n", "# type: (...) -> void", "\n", "        ", "\"\"\"\n        Call HF API to log out.\n        \"\"\"", "\n", "path", "=", "\"{}/api/logout\"", ".", "format", "(", "self", ".", "endpoint", ")", "\n", "r", "=", "requests", ".", "post", "(", "path", ",", "headers", "=", "{", "\"authorization\"", ":", "\"Bearer {}\"", ".", "format", "(", "token", ")", "}", ")", "\n", "r", ".", "raise_for_status", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.presign": [[103, 117], ["requests.post", "requests.post.raise_for_status", "requests.post.json", "hf_api.PresignedUrl"], "methods", ["None"], ["", "def", "presign", "(", "self", ",", "token", ",", "filename", ")", ":", "\n", "# type: (...) -> PresignedUrl", "\n", "        ", "\"\"\"\n        Call HF API to get a presigned url to upload `filename` to S3.\n        \"\"\"", "\n", "path", "=", "\"{}/api/presign\"", ".", "format", "(", "self", ".", "endpoint", ")", "\n", "r", "=", "requests", ".", "post", "(", "\n", "path", ",", "\n", "headers", "=", "{", "\"authorization\"", ":", "\"Bearer {}\"", ".", "format", "(", "token", ")", "}", ",", "\n", "json", "=", "{", "\"filename\"", ":", "filename", "}", ",", "\n", ")", "\n", "r", ".", "raise_for_status", "(", ")", "\n", "d", "=", "r", ".", "json", "(", ")", "\n", "return", "PresignedUrl", "(", "**", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.presign_and_upload": [[118, 142], ["hf_api.HfApi.presign", "open", "hf_api.TqdmProgressFileReader", "requests.put", "requests.put.raise_for_status", "hf_api.TqdmProgressFileReader.close"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.presign", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.TqdmProgressFileReader.close"], ["", "def", "presign_and_upload", "(", "self", ",", "token", ",", "filename", ",", "filepath", ")", ":", "\n", "# type: (...) -> str", "\n", "        ", "\"\"\"\n        Get a presigned url, then upload file to S3.\n\n        Outputs:\n            url: Read-only url for the stored file on S3.\n        \"\"\"", "\n", "urls", "=", "self", ".", "presign", "(", "token", ",", "filename", "=", "filename", ")", "\n", "# streaming upload:", "\n", "# https://2.python-requests.org/en/master/user/advanced/#streaming-uploads", "\n", "# ", "\n", "# Even though we presign with the correct content-type,", "\n", "# the client still has to specify it when uploading the file.", "\n", "with", "open", "(", "filepath", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "pf", "=", "TqdmProgressFileReader", "(", "f", ")", "\n", "data", "=", "f", "if", "pf", ".", "total_size", ">", "0", "else", "\"\"", "\n", "\n", "r", "=", "requests", ".", "put", "(", "urls", ".", "write", ",", "data", "=", "data", ",", "headers", "=", "{", "\n", "\"content-type\"", ":", "urls", ".", "type", ",", "\n", "}", ")", "\n", "r", ".", "raise_for_status", "(", ")", "\n", "pf", ".", "close", "(", ")", "\n", "", "return", "urls", ".", "access", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.list_objs": [[143, 153], ["requests.get", "requests.get.raise_for_status", "requests.get.json", "hf_api.S3Obj"], "methods", ["None"], ["", "def", "list_objs", "(", "self", ",", "token", ")", ":", "\n", "# type: (...) -> List[S3Obj]", "\n", "        ", "\"\"\"\n        Call HF API to list all stored files for user.\n        \"\"\"", "\n", "path", "=", "\"{}/api/listObjs\"", ".", "format", "(", "self", ".", "endpoint", ")", "\n", "r", "=", "requests", ".", "get", "(", "path", ",", "headers", "=", "{", "\"authorization\"", ":", "\"Bearer {}\"", ".", "format", "(", "token", ")", "}", ")", "\n", "r", ".", "raise_for_status", "(", ")", "\n", "d", "=", "r", ".", "json", "(", ")", "\n", "return", "[", "S3Obj", "(", "**", "x", ")", "for", "x", "in", "d", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.TqdmProgressFileReader.__init__": [[164, 176], ["tqdm.tqdm.tqdm", "os.fstat", "f.fileno"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "f", "# type: io.BufferedReader", "\n", ")", ":", "\n", "        ", "self", ".", "f", "=", "f", "\n", "self", ".", "total_size", "=", "os", ".", "fstat", "(", "f", ".", "fileno", "(", ")", ")", ".", "st_size", "# type: int", "\n", "self", ".", "pbar", "=", "tqdm", "(", "total", "=", "self", ".", "total_size", ",", "leave", "=", "False", ")", "\n", "if", "six", ".", "PY3", ":", "\n", "# does not work unless PY3", "\n", "# no big deal as the CLI does not currently support PY2 anyways.", "\n", "            ", "self", ".", "read", "=", "f", ".", "read", "\n", "f", ".", "read", "=", "self", ".", "_read", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.TqdmProgressFileReader._read": [[177, 180], ["hf_api.TqdmProgressFileReader.pbar.update", "hf_api.TqdmProgressFileReader.read"], "methods", ["None"], ["", "", "def", "_read", "(", "self", ",", "n", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "pbar", ".", "update", "(", "n", ")", "\n", "return", "self", ".", "read", "(", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.TqdmProgressFileReader.close": [[181, 183], ["hf_api.TqdmProgressFileReader.pbar.close"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.TqdmProgressFileReader.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "pbar", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.save_token": [[189, 206], ["os.makedirs", "open", "f.write", "os.path.dirname", "os.makedirs", "os.path.dirname"], "methods", ["None"], ["@", "classmethod", "\n", "def", "save_token", "(", "cls", ",", "token", ")", ":", "\n", "        ", "\"\"\"\n        Save token, creating folder as needed.\n        \"\"\"", "\n", "if", "six", ".", "PY3", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "cls", ".", "path_token", ")", ",", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "# Python 2", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "cls", ".", "path_token", ")", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "                ", "if", "e", ".", "errno", "!=", "os", ".", "errno", ".", "EEXIST", ":", "\n", "                    ", "raise", "e", "\n", "", "pass", "\n", "", "", "with", "open", "(", "cls", ".", "path_token", ",", "'w+'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.get_token": [[207, 219], ["open", "f.read"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "get_token", "(", "cls", ")", ":", "\n", "        ", "\"\"\"\n        Get token or None if not existent.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "with", "open", "(", "cls", ".", "path_token", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "return", "f", ".", "read", "(", ")", "\n", "", "", "except", ":", "\n", "# this is too wide. When Py2 is dead use:", "\n", "# `except FileNotFoundError:` instead", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.delete_token": [[220, 230], ["os.remove"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "delete_token", "(", "cls", ")", ":", "\n", "        ", "\"\"\"\n        Delete token.\n        Do not fail if token does not exist.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "os", ".", "remove", "(", "cls", ".", "path_token", ")", "\n", "", "except", ":", "\n", "            ", "return", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.WarmUp.__init__": [[29, 42], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "initial_learning_rate", ",", "\n", "decay_schedule_fn", ",", "\n", "warmup_steps", ",", "\n", "power", "=", "1.0", ",", "\n", "name", "=", "None", ")", ":", "\n", "    ", "super", "(", "WarmUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "initial_learning_rate", "=", "initial_learning_rate", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "power", "=", "power", "\n", "self", ".", "decay_schedule_fn", "=", "decay_schedule_fn", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.WarmUp.__call__": [[43, 57], ["tensorflow.name_scope", "tensorflow.cast", "tensorflow.cast", "tensorflow.cond", "tensorflow.math.pow", "optimization_tf.WarmUp.decay_schedule_fn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "step", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "self", ".", "name", "or", "'WarmUp'", ")", "as", "name", ":", "\n", "# Implements polynomial warmup. i.e., if global_step < warmup_steps, the", "\n", "# learning rate will be `global_step/num_warmup_steps * init_lr`.", "\n", "      ", "global_step_float", "=", "tf", ".", "cast", "(", "step", ",", "tf", ".", "float32", ")", "\n", "warmup_steps_float", "=", "tf", ".", "cast", "(", "self", ".", "warmup_steps", ",", "tf", ".", "float32", ")", "\n", "warmup_percent_done", "=", "global_step_float", "/", "warmup_steps_float", "\n", "warmup_learning_rate", "=", "(", "\n", "self", ".", "initial_learning_rate", "*", "\n", "tf", ".", "math", ".", "pow", "(", "warmup_percent_done", ",", "self", ".", "power", ")", ")", "\n", "return", "tf", ".", "cond", "(", "global_step_float", "<", "warmup_steps_float", ",", "\n", "lambda", ":", "warmup_learning_rate", ",", "\n", "lambda", ":", "self", ".", "decay_schedule_fn", "(", "step", ")", ",", "\n", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.WarmUp.get_config": [[58, 65], ["None"], "methods", ["None"], ["", "", "def", "get_config", "(", "self", ")", ":", "\n", "    ", "return", "{", "\n", "'initial_learning_rate'", ":", "self", ".", "initial_learning_rate", ",", "\n", "'decay_schedule_fn'", ":", "self", ".", "decay_schedule_fn", ",", "\n", "'warmup_steps'", ":", "self", ".", "warmup_steps", ",", "\n", "'power'", ":", "self", ".", "power", ",", "\n", "'name'", ":", "self", ".", "name", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay.__init__": [[101, 117], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "learning_rate", "=", "0.001", ",", "\n", "beta_1", "=", "0.9", ",", "\n", "beta_2", "=", "0.999", ",", "\n", "epsilon", "=", "1e-7", ",", "\n", "amsgrad", "=", "False", ",", "\n", "weight_decay_rate", "=", "0.0", ",", "\n", "include_in_weight_decay", "=", "None", ",", "\n", "exclude_from_weight_decay", "=", "None", ",", "\n", "name", "=", "'AdamWeightDecay'", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "AdamWeightDecay", ",", "self", ")", ".", "__init__", "(", "\n", "learning_rate", ",", "beta_1", ",", "beta_2", ",", "epsilon", ",", "amsgrad", ",", "name", ",", "**", "kwargs", ")", "\n", "self", ".", "weight_decay_rate", "=", "weight_decay_rate", "\n", "self", ".", "_include_in_weight_decay", "=", "include_in_weight_decay", "\n", "self", ".", "_exclude_from_weight_decay", "=", "exclude_from_weight_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay.from_config": [[118, 124], ["super().from_config"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay.from_config"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "config", ")", ":", "\n", "    ", "\"\"\"Creates an optimizer from its config with WarmUp custom object.\"\"\"", "\n", "custom_objects", "=", "{", "'WarmUp'", ":", "WarmUp", "}", "\n", "return", "super", "(", "AdamWeightDecay", ",", "cls", ")", ".", "from_config", "(", "\n", "config", ",", "custom_objects", "=", "custom_objects", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._prepare_local": [[125, 130], ["super()._prepare_local", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._prepare_local"], ["", "def", "_prepare_local", "(", "self", ",", "var_device", ",", "var_dtype", ",", "apply_state", ")", ":", "\n", "    ", "super", "(", "AdamWeightDecay", ",", "self", ")", ".", "_prepare_local", "(", "var_device", ",", "var_dtype", ",", "\n", "apply_state", ")", "\n", "apply_state", "[", "'weight_decay_rate'", "]", "=", "tf", ".", "constant", "(", "\n", "self", ".", "weight_decay_rate", ",", "name", "=", "'adam_weight_decay_rate'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._decay_weights_op": [[131, 139], ["optimization_tf.AdamWeightDecay._do_use_weight_decay", "tensorflow.no_op", "var.assign_sub"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._do_use_weight_decay"], ["", "def", "_decay_weights_op", "(", "self", ",", "var", ",", "learning_rate", ",", "apply_state", ")", ":", "\n", "    ", "do_decay", "=", "self", ".", "_do_use_weight_decay", "(", "var", ".", "name", ")", "\n", "if", "do_decay", ":", "\n", "      ", "return", "var", ".", "assign_sub", "(", "\n", "learning_rate", "*", "var", "*", "\n", "apply_state", "[", "'weight_decay_rate'", "]", ",", "\n", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "", "return", "tf", ".", "no_op", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay.apply_gradients": [[140, 144], ["list", "tensorflow.clip_by_global_norm", "super().apply_gradients", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay.apply_gradients"], ["", "def", "apply_gradients", "(", "self", ",", "grads_and_vars", ",", "clip_norm", ",", "name", "=", "None", ")", ":", "\n", "    ", "grads", ",", "tvars", "=", "list", "(", "zip", "(", "*", "grads_and_vars", ")", ")", "\n", "(", "grads", ",", "_", ")", "=", "tf", ".", "clip_by_global_norm", "(", "grads", ",", "clip_norm", "=", "clip_norm", ")", "\n", "return", "super", "(", "AdamWeightDecay", ",", "self", ")", ".", "apply_gradients", "(", "zip", "(", "grads", ",", "tvars", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._get_lr": [[145, 157], ["apply_state.get", "optimization_tf.AdamWeightDecay._fallback_apply_state", "dict"], "methods", ["None"], ["", "def", "_get_lr", "(", "self", ",", "var_device", ",", "var_dtype", ",", "apply_state", ")", ":", "\n", "    ", "\"\"\"Retrieves the learning rate with the given state.\"\"\"", "\n", "if", "apply_state", "is", "None", ":", "\n", "      ", "return", "self", ".", "_decayed_lr_t", "[", "var_dtype", "]", ",", "{", "}", "\n", "\n", "", "apply_state", "=", "apply_state", "or", "{", "}", "\n", "coefficients", "=", "apply_state", ".", "get", "(", "(", "var_device", ",", "var_dtype", ")", ")", "\n", "if", "coefficients", "is", "None", ":", "\n", "      ", "coefficients", "=", "self", ".", "_fallback_apply_state", "(", "var_device", ",", "var_dtype", ")", "\n", "apply_state", "[", "(", "var_device", ",", "var_dtype", ")", "]", "=", "coefficients", "\n", "\n", "", "return", "coefficients", "[", "'lr_t'", "]", ",", "dict", "(", "apply_state", "=", "apply_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._resource_apply_dense": [[158, 164], ["optimization_tf.AdamWeightDecay._get_lr", "optimization_tf.AdamWeightDecay._decay_weights_op", "tensorflow.control_dependencies", "super()._resource_apply_dense"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._get_lr", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._decay_weights_op", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._resource_apply_dense"], ["", "def", "_resource_apply_dense", "(", "self", ",", "grad", ",", "var", ",", "apply_state", "=", "None", ")", ":", "\n", "    ", "lr_t", ",", "kwargs", "=", "self", ".", "_get_lr", "(", "var", ".", "device", ",", "var", ".", "dtype", ".", "base_dtype", ",", "apply_state", ")", "\n", "decay", "=", "self", ".", "_decay_weights_op", "(", "var", ",", "lr_t", ",", "apply_state", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "decay", "]", ")", ":", "\n", "      ", "return", "super", "(", "AdamWeightDecay", ",", "self", ")", ".", "_resource_apply_dense", "(", "\n", "grad", ",", "var", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._resource_apply_sparse": [[165, 171], ["optimization_tf.AdamWeightDecay._get_lr", "optimization_tf.AdamWeightDecay._decay_weights_op", "tensorflow.control_dependencies", "super()._resource_apply_sparse"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._get_lr", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._decay_weights_op", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._resource_apply_sparse"], ["", "", "def", "_resource_apply_sparse", "(", "self", ",", "grad", ",", "var", ",", "indices", ",", "apply_state", "=", "None", ")", ":", "\n", "    ", "lr_t", ",", "kwargs", "=", "self", ".", "_get_lr", "(", "var", ".", "device", ",", "var", ".", "dtype", ".", "base_dtype", ",", "apply_state", ")", "\n", "decay", "=", "self", ".", "_decay_weights_op", "(", "var", ",", "lr_t", ",", "apply_state", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "decay", "]", ")", ":", "\n", "      ", "return", "super", "(", "AdamWeightDecay", ",", "self", ")", ".", "_resource_apply_sparse", "(", "\n", "grad", ",", "var", ",", "indices", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay.get_config": [[172, 178], ["super().get_config", "super().get_config.update"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay.get_config"], ["", "", "def", "get_config", "(", "self", ")", ":", "\n", "    ", "config", "=", "super", "(", "AdamWeightDecay", ",", "self", ")", ".", "get_config", "(", ")", "\n", "config", ".", "update", "(", "{", "\n", "'weight_decay_rate'", ":", "self", ".", "weight_decay_rate", ",", "\n", "}", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.AdamWeightDecay._do_use_weight_decay": [[179, 194], ["re.search", "re.search"], "methods", ["None"], ["", "def", "_do_use_weight_decay", "(", "self", ",", "param_name", ")", ":", "\n", "    ", "\"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"", "\n", "if", "self", ".", "weight_decay_rate", "==", "0", ":", "\n", "      ", "return", "False", "\n", "\n", "", "if", "self", ".", "_include_in_weight_decay", ":", "\n", "      ", "for", "r", "in", "self", ".", "_include_in_weight_decay", ":", "\n", "        ", "if", "re", ".", "search", "(", "r", ",", "param_name", ")", "is", "not", "None", ":", "\n", "          ", "return", "True", "\n", "\n", "", "", "", "if", "self", ".", "_exclude_from_weight_decay", ":", "\n", "      ", "for", "r", "in", "self", ".", "_exclude_from_weight_decay", ":", "\n", "        ", "if", "re", ".", "search", "(", "r", ",", "param_name", ")", "is", "not", "None", ":", "\n", "          ", "return", "False", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.__init__": [[200, 208], ["tensorflow.Variable"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initializes the accumulator.\"\"\"", "\n", "self", ".", "_gradients", "=", "[", "]", "\n", "self", ".", "_accum_steps", "=", "tf", ".", "Variable", "(", "\n", "initial_value", "=", "0", ",", "\n", "dtype", "=", "tf", ".", "int64", ",", "\n", "trainable", "=", "False", ",", "\n", "aggregation", "=", "tf", ".", "VariableAggregation", ".", "ONLY_FIRST_REPLICA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.step": [[209, 213], ["optimization_tf.GradientAccumulator._accum_steps.value"], "methods", ["None"], ["", "@", "property", "\n", "def", "step", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of accumulated steps.\"\"\"", "\n", "return", "self", ".", "_accum_steps", ".", "value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.gradients": [[214, 218], ["list", "gradient.value", "optimization_tf.GradientAccumulator._get_replica_gradients"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator._get_replica_gradients"], ["", "@", "property", "\n", "def", "gradients", "(", "self", ")", ":", "\n", "        ", "\"\"\"The accumulated gradients.\"\"\"", "\n", "return", "list", "(", "gradient", ".", "value", "(", ")", "if", "gradient", "is", "not", "None", "else", "gradient", "for", "gradient", "in", "self", ".", "_get_replica_gradients", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.__call__": [[219, 232], ["zip", "optimization_tf.GradientAccumulator._accum_steps.assign_add", "optimization_tf.GradientAccumulator._gradients.extend", "len", "len", "ValueError", "optimization_tf.GradientAccumulator._get_replica_gradients", "accum_gradient.assign_add", "tensorflow.Variable", "len", "len", "tensorflow.zeros_like"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator._get_replica_gradients"], ["", "def", "__call__", "(", "self", ",", "gradients", ")", ":", "\n", "        ", "\"\"\"Accumulates :obj:`gradients`.\"\"\"", "\n", "if", "not", "self", ".", "_gradients", ":", "\n", "            ", "self", ".", "_gradients", ".", "extend", "(", "[", "tf", ".", "Variable", "(", "tf", ".", "zeros_like", "(", "gradient", ")", ",", "trainable", "=", "False", ")", "if", "gradient", "is", "not", "None", "else", "gradient", "for", "gradient", "in", "gradients", "]", ")", "\n", "\n", "", "if", "len", "(", "gradients", ")", "!=", "len", "(", "self", ".", "_gradients", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Expected %s gradients, but got %d\"", "%", "(", "len", "(", "self", ".", "_gradients", ")", ",", "len", "(", "gradients", ")", ")", ")", "\n", "\n", "", "for", "accum_gradient", ",", "gradient", "in", "zip", "(", "self", ".", "_get_replica_gradients", "(", ")", ",", "gradients", ")", ":", "\n", "            ", "if", "accum_gradient", "is", "not", "None", ":", "\n", "                ", "accum_gradient", ".", "assign_add", "(", "gradient", ")", "\n", "\n", "", "", "self", ".", "_accum_steps", ".", "assign_add", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.reset": [[233, 241], ["optimization_tf.GradientAccumulator._get_replica_gradients", "optimization_tf.GradientAccumulator._accum_steps.assign", "gradient.assign", "tensorflow.zeros_like"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator._get_replica_gradients"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the accumulated gradients.\"\"\"", "\n", "if", "self", ".", "_gradients", ":", "\n", "            ", "self", ".", "_accum_steps", ".", "assign", "(", "0", ")", "\n", "\n", "", "for", "gradient", "in", "self", ".", "_get_replica_gradients", "(", ")", ":", "\n", "            ", "if", "gradient", "is", "not", "None", ":", "\n", "                ", "gradient", ".", "assign", "(", "tf", ".", "zeros_like", "(", "gradient", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator._get_replica_gradients": [[242, 255], ["tensorflow.distribute.has_strategy", "tensorflow.distribute.get_replica_context", "gradient.device_map.select_for_current_replica", "tensorflow.distribute.get_strategy"], "methods", ["None"], ["", "", "", "def", "_get_replica_gradients", "(", "self", ")", ":", "\n", "        ", "if", "tf", ".", "distribute", ".", "has_strategy", "(", ")", ":", "\n", "# In a replica context, we want to accumulate gradients on each replica", "\n", "# without synchronization, so we directly assign the value of the", "\n", "# current replica.", "\n", "            ", "replica_context", "=", "tf", ".", "distribute", ".", "get_replica_context", "(", ")", "\n", "\n", "if", "replica_context", "is", "None", "or", "tf", ".", "distribute", ".", "get_strategy", "(", ")", ".", "num_replicas_in_sync", "==", "1", ":", "\n", "                ", "return", "self", ".", "_gradients", "\n", "\n", "", "return", "(", "gradient", ".", "device_map", ".", "select_for_current_replica", "(", "gradient", ".", "values", ",", "replica_context", ")", "for", "gradient", "in", "self", ".", "_gradients", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_gradients", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.create_optimizer": [[68, 87], ["tensorflow.keras.optimizers.schedules.PolynomialDecay", "optimization_tf.AdamWeightDecay", "optimization_tf.WarmUp"], "function", ["None"], ["", "", "def", "create_optimizer", "(", "init_lr", ",", "num_train_steps", ",", "num_warmup_steps", ")", ":", "\n", "  ", "\"\"\"Creates an optimizer with learning rate schedule.\"\"\"", "\n", "# Implements linear decay of the learning rate.", "\n", "learning_rate_fn", "=", "tf", ".", "keras", ".", "optimizers", ".", "schedules", ".", "PolynomialDecay", "(", "\n", "initial_learning_rate", "=", "init_lr", ",", "\n", "decay_steps", "=", "num_train_steps", ",", "\n", "end_learning_rate", "=", "0.0", ")", "\n", "if", "num_warmup_steps", ":", "\n", "    ", "learning_rate_fn", "=", "WarmUp", "(", "initial_learning_rate", "=", "init_lr", ",", "\n", "decay_schedule_fn", "=", "learning_rate_fn", ",", "\n", "warmup_steps", "=", "num_warmup_steps", ")", "\n", "", "optimizer", "=", "AdamWeightDecay", "(", "\n", "learning_rate", "=", "learning_rate_fn", ",", "\n", "weight_decay_rate", "=", "0.01", ",", "\n", "beta_1", "=", "0.9", ",", "\n", "beta_2", "=", "0.999", ",", "\n", "epsilon", "=", "1e-6", ",", "\n", "exclude_from_weight_decay", "=", "[", "'layer_norm'", ",", "'bias'", "]", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.__main__.main": [[2, 145], ["print", "len", "len", "len", "print", "sys.argv.pop", "sys.argv.pop", "sys.argv.pop", "convert_tf_checkpoint_to_pytorch", "print", "len", "print", "sys.argv.pop", "sys.argv.pop", "sys.argv.pop", "convert_tf_checkpoint_to_pytorch", "print", "print", "convert_openai_checkpoint_to_pytorch", "len", "len", "len", "print", "convert_transfo_xl_checkpoint_to_pytorch", "print", "len", "len", "sys.argv[].lower", "len", "print", "convert_gpt2_checkpoint_to_pytorch", "print", "len", "len", "len", "print", "convert_xlnet_checkpoint_to_pytorch", "print", "len", "len", "len", "len", "print", "convert_xlm_checkpoint_to_pytorch"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_bert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_bert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_openai_original_tf_checkpoint_to_pytorch.convert_openai_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_transfo_xl_original_tf_checkpoint_to_pytorch.convert_transfo_xl_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_gpt2_original_tf_checkpoint_to_pytorch.convert_gpt2_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_xlnet_original_tf_checkpoint_to_pytorch.convert_xlnet_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_xlm_original_pytorch_checkpoint_to_pytorch.convert_xlm_checkpoint_to_pytorch"], ["def", "main", "(", ")", ":", "\n", "    ", "import", "sys", "\n", "if", "(", "len", "(", "sys", ".", "argv", ")", "<", "4", "or", "len", "(", "sys", ".", "argv", ")", ">", "6", ")", "or", "sys", ".", "argv", "[", "1", "]", "not", "in", "[", "\"bert\"", ",", "\"gpt\"", ",", "\"transfo_xl\"", ",", "\"gpt2\"", ",", "\"xlnet\"", ",", "\"xlm\"", "]", ":", "\n", "        ", "print", "(", "\n", "\"This command line utility let you convert original (author released) model checkpoint to pytorch.\\n\"", "\n", "\"It should be used as one of: \\n\"", "\n", "\">> transformers bert TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT, \\n\"", "\n", "\">> transformers t5 TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT, \\n\"", "\n", "\">> transformers gpt OPENAI_GPT_CHECKPOINT_FOLDER_PATH PYTORCH_DUMP_OUTPUT [OPENAI_GPT_CONFIG], \\n\"", "\n", "\">> transformers transfo_xl TF_CHECKPOINT_OR_DATASET PYTORCH_DUMP_OUTPUT [TF_CONFIG] or \\n\"", "\n", "\">> transformers gpt2 TF_CHECKPOINT PYTORCH_DUMP_OUTPUT [GPT2_CONFIG] or \\n\"", "\n", "\">> transformers xlnet TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT [FINETUNING_TASK_NAME] or \\n\"", "\n", "\">> transformers xlm XLM_CHECKPOINT_PATH PYTORCH_DUMP_OUTPUT\"", ")", "\n", "", "else", ":", "\n", "        ", "if", "sys", ".", "argv", "[", "1", "]", "==", "\"bert\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", ".", "convert_bert_original_tf_checkpoint_to_pytorch", "import", "convert_tf_checkpoint_to_pytorch", "\n", "", "except", "ImportError", ":", "\n", "                ", "print", "(", "\"transformers can only be used from the commandline to convert TensorFlow models in PyTorch, \"", "\n", "\"In that case, it requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", "!=", "5", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `transformers bert TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT`\"", ")", "\n", "", "else", ":", "\n", "                ", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", ".", "pop", "(", ")", "\n", "TF_CONFIG", "=", "sys", ".", "argv", ".", "pop", "(", ")", "\n", "TF_CHECKPOINT", "=", "sys", ".", "argv", ".", "pop", "(", ")", "\n", "convert_tf_checkpoint_to_pytorch", "(", "TF_CHECKPOINT", ",", "TF_CONFIG", ",", "PYTORCH_DUMP_OUTPUT", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"t5\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", ".", "convert_t5_original_tf_checkpoint_to_pytorch", "import", "convert_tf_checkpoint_to_pytorch", "\n", "", "except", "ImportError", ":", "\n", "                ", "print", "(", "\"transformers can only be used from the commandline to convert TensorFlow models in PyTorch, \"", "\n", "\"In that case, it requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", "!=", "5", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `transformers bert TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT`\"", ")", "\n", "", "else", ":", "\n", "                ", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", ".", "pop", "(", ")", "\n", "TF_CONFIG", "=", "sys", ".", "argv", ".", "pop", "(", ")", "\n", "TF_CHECKPOINT", "=", "sys", ".", "argv", ".", "pop", "(", ")", "\n", "convert_tf_checkpoint_to_pytorch", "(", "TF_CHECKPOINT", ",", "TF_CONFIG", ",", "PYTORCH_DUMP_OUTPUT", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"gpt\"", ":", "\n", "            ", "from", ".", "convert_openai_original_tf_checkpoint_to_pytorch", "import", "convert_openai_checkpoint_to_pytorch", "\n", "if", "len", "(", "sys", ".", "argv", ")", "<", "4", "or", "len", "(", "sys", ".", "argv", ")", ">", "5", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `transformers gpt OPENAI_GPT_CHECKPOINT_FOLDER_PATH PYTORCH_DUMP_OUTPUT [OPENAI_GPT_CONFIG]`\"", ")", "\n", "", "else", ":", "\n", "                ", "OPENAI_GPT_CHECKPOINT_FOLDER_PATH", "=", "sys", ".", "argv", "[", "2", "]", "\n", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "3", "]", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "5", ":", "\n", "                    ", "OPENAI_GPT_CONFIG", "=", "sys", ".", "argv", "[", "4", "]", "\n", "", "else", ":", "\n", "                    ", "OPENAI_GPT_CONFIG", "=", "\"\"", "\n", "", "convert_openai_checkpoint_to_pytorch", "(", "OPENAI_GPT_CHECKPOINT_FOLDER_PATH", ",", "\n", "OPENAI_GPT_CONFIG", ",", "\n", "PYTORCH_DUMP_OUTPUT", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"transfo_xl\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", ".", "convert_transfo_xl_original_tf_checkpoint_to_pytorch", "import", "convert_transfo_xl_checkpoint_to_pytorch", "\n", "", "except", "ImportError", ":", "\n", "                ", "print", "(", "\"transformers can only be used from the commandline to convert TensorFlow models in PyTorch, \"", "\n", "\"In that case, it requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", "<", "4", "or", "len", "(", "sys", ".", "argv", ")", ">", "5", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `transformers transfo_xl TF_CHECKPOINT/TF_DATASET_FILE PYTORCH_DUMP_OUTPUT [TF_CONFIG]`\"", ")", "\n", "", "else", ":", "\n", "                ", "if", "'ckpt'", "in", "sys", ".", "argv", "[", "2", "]", ".", "lower", "(", ")", ":", "\n", "                    ", "TF_CHECKPOINT", "=", "sys", ".", "argv", "[", "2", "]", "\n", "TF_DATASET_FILE", "=", "\"\"", "\n", "", "else", ":", "\n", "                    ", "TF_DATASET_FILE", "=", "sys", ".", "argv", "[", "2", "]", "\n", "TF_CHECKPOINT", "=", "\"\"", "\n", "", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "3", "]", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "5", ":", "\n", "                    ", "TF_CONFIG", "=", "sys", ".", "argv", "[", "4", "]", "\n", "", "else", ":", "\n", "                    ", "TF_CONFIG", "=", "\"\"", "\n", "", "convert_transfo_xl_checkpoint_to_pytorch", "(", "TF_CHECKPOINT", ",", "TF_CONFIG", ",", "PYTORCH_DUMP_OUTPUT", ",", "TF_DATASET_FILE", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"gpt2\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", ".", "convert_gpt2_original_tf_checkpoint_to_pytorch", "import", "convert_gpt2_checkpoint_to_pytorch", "\n", "", "except", "ImportError", ":", "\n", "                ", "print", "(", "\"transformers can only be used from the commandline to convert TensorFlow models in PyTorch, \"", "\n", "\"In that case, it requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", "<", "4", "or", "len", "(", "sys", ".", "argv", ")", ">", "5", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `transformers gpt2 TF_CHECKPOINT PYTORCH_DUMP_OUTPUT [TF_CONFIG]`\"", ")", "\n", "", "else", ":", "\n", "                ", "TF_CHECKPOINT", "=", "sys", ".", "argv", "[", "2", "]", "\n", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "3", "]", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "5", ":", "\n", "                    ", "TF_CONFIG", "=", "sys", ".", "argv", "[", "4", "]", "\n", "", "else", ":", "\n", "                    ", "TF_CONFIG", "=", "\"\"", "\n", "", "convert_gpt2_checkpoint_to_pytorch", "(", "TF_CHECKPOINT", ",", "TF_CONFIG", ",", "PYTORCH_DUMP_OUTPUT", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"xlnet\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", ".", "convert_xlnet_original_tf_checkpoint_to_pytorch", "import", "convert_xlnet_checkpoint_to_pytorch", "\n", "", "except", "ImportError", ":", "\n", "                ", "print", "(", "\"transformers can only be used from the commandline to convert TensorFlow models in PyTorch, \"", "\n", "\"In that case, it requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", "<", "5", "or", "len", "(", "sys", ".", "argv", ")", ">", "6", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `transformers xlnet TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT [FINETUNING_TASK_NAME]`\"", ")", "\n", "", "else", ":", "\n", "                ", "TF_CHECKPOINT", "=", "sys", ".", "argv", "[", "2", "]", "\n", "TF_CONFIG", "=", "sys", ".", "argv", "[", "3", "]", "\n", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "4", "]", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "6", ":", "\n", "                    ", "FINETUNING_TASK", "=", "sys", ".", "argv", "[", "5", "]", "\n", "", "else", ":", "\n", "                    ", "FINETUNING_TASK", "=", "None", "\n", "\n", "", "convert_xlnet_checkpoint_to_pytorch", "(", "TF_CHECKPOINT", ",", "\n", "TF_CONFIG", ",", "\n", "PYTORCH_DUMP_OUTPUT", ",", "\n", "FINETUNING_TASK", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"xlm\"", ":", "\n", "            ", "from", ".", "convert_xlm_original_pytorch_checkpoint_to_pytorch", "import", "convert_xlm_checkpoint_to_pytorch", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "!=", "4", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `transformers xlm XLM_CHECKPOINT_PATH PYTORCH_DUMP_OUTPUT`\"", ")", "\n", "", "else", ":", "\n", "                ", "XLM_CHECKPOINT_PATH", "=", "sys", ".", "argv", "[", "2", "]", "\n", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "3", "]", "\n", "\n", "convert_xlm_checkpoint_to_pytorch", "(", "XLM_CHECKPOINT_PATH", ",", "PYTORCH_DUMP_OUTPUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_distilbert.DistilBertConfig.__init__": [[39, 70], ["configuration_utils.PretrainedConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size", "=", "30522", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "sinusoidal_pos_embds", "=", "False", ",", "\n", "n_layers", "=", "6", ",", "\n", "n_heads", "=", "12", ",", "\n", "dim", "=", "768", ",", "\n", "hidden_dim", "=", "4", "*", "768", ",", "\n", "dropout", "=", "0.1", ",", "\n", "attention_dropout", "=", "0.1", ",", "\n", "activation", "=", "'gelu'", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "tie_weights_", "=", "True", ",", "\n", "qa_dropout", "=", "0.1", ",", "\n", "seq_classif_dropout", "=", "0.2", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DistilBertConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "sinusoidal_pos_embds", "=", "sinusoidal_pos_embds", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "tie_weights_", "=", "tie_weights_", "\n", "self", ".", "qa_dropout", "=", "qa_dropout", "\n", "self", ".", "seq_classif_dropout", "=", "seq_classif_dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_distilbert.DistilBertConfig.hidden_size": [[71, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_distilbert.DistilBertConfig.num_attention_heads": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_distilbert.DistilBertConfig.num_hidden_layers": [[79, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layers", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_transfo_xl.TransfoXLConfig.__init__": [[70, 135], ["configuration_utils.PretrainedConfig.__init__", "configuration_transfo_xl.TransfoXLConfig.cutoffs.extend", "len", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size", "=", "267735", ",", "\n", "cutoffs", "=", "[", "20000", ",", "40000", ",", "200000", "]", ",", "\n", "d_model", "=", "1024", ",", "\n", "d_embed", "=", "1024", ",", "\n", "n_head", "=", "16", ",", "\n", "d_head", "=", "64", ",", "\n", "d_inner", "=", "4096", ",", "\n", "div_val", "=", "4", ",", "\n", "pre_lnorm", "=", "False", ",", "\n", "n_layer", "=", "18", ",", "\n", "tgt_len", "=", "128", ",", "\n", "ext_len", "=", "0", ",", "\n", "mem_len", "=", "1600", ",", "\n", "clamp_len", "=", "1000", ",", "\n", "same_length", "=", "True", ",", "\n", "proj_share_all_but_first", "=", "True", ",", "\n", "attn_type", "=", "0", ",", "\n", "sample_softmax", "=", "-", "1", ",", "\n", "adaptive", "=", "True", ",", "\n", "tie_weight", "=", "True", ",", "\n", "dropout", "=", "0.1", ",", "\n", "dropatt", "=", "0.0", ",", "\n", "untie_r", "=", "True", ",", "\n", "init", "=", "\"normal\"", ",", "\n", "init_range", "=", "0.01", ",", "\n", "proj_init_std", "=", "0.01", ",", "\n", "init_std", "=", "0.02", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs TransfoXLConfig.\n        \"\"\"", "\n", "super", "(", "TransfoXLConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "cutoffs", "=", "[", "]", "\n", "self", ".", "cutoffs", ".", "extend", "(", "cutoffs", ")", "\n", "self", ".", "tie_weight", "=", "tie_weight", "\n", "if", "proj_share_all_but_first", ":", "\n", "            ", "self", ".", "tie_projs", "=", "[", "False", "]", "+", "[", "True", "]", "*", "len", "(", "self", ".", "cutoffs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tie_projs", "=", "[", "False", "]", "+", "[", "False", "]", "*", "len", "(", "self", ".", "cutoffs", ")", "\n", "", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "div_val", "=", "div_val", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "same_length", "=", "same_length", "\n", "self", ".", "attn_type", "=", "attn_type", "\n", "self", ".", "clamp_len", "=", "clamp_len", "\n", "self", ".", "sample_softmax", "=", "sample_softmax", "\n", "self", ".", "adaptive", "=", "adaptive", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropatt", "=", "dropatt", "\n", "self", ".", "untie_r", "=", "untie_r", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "init_range", "=", "init_range", "\n", "self", ".", "proj_init_std", "=", "proj_init_std", "\n", "self", ".", "init_std", "=", "init_std", "\n", "self", ".", "layer_norm_epsilon", "=", "layer_norm_epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_transfo_xl.TransfoXLConfig.max_position_embeddings": [[136, 139], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tgt_len", "+", "self", ".", "ext_len", "+", "self", ".", "mem_len", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_transfo_xl.TransfoXLConfig.n_token": [[144, 147], ["None"], "methods", ["None"], ["", "@", "n_token", ".", "setter", "\n", "def", "n_token", "(", "self", ",", "value", ")", ":", "# Backward compatibility", "\n", "        ", "self", ".", "vocab_size", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_transfo_xl.TransfoXLConfig.hidden_size": [[148, 151], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_transfo_xl.TransfoXLConfig.num_attention_heads": [[152, 155], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_transfo_xl.TransfoXLConfig.num_hidden_layers": [[156, 159], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.MultiHeadAttention.__init__": [[101, 115], ["torch.nn.Module.__init__", "next", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "set"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "n_heads", ",", "dim", ",", "config", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_id", "=", "next", "(", "MultiHeadAttention", ".", "NEW_ID", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "dropout", "=", "config", ".", "attention_dropout", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "q_lin", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "k_lin", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "v_lin", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "out_lin", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.MultiHeadAttention.prune_heads": [[116, 136], ["torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_xlm.MultiHeadAttention.pruned_heads.union", "len", "set", "sum", "len", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "attention_head_size", "=", "self", ".", "dim", "//", "self", ".", "n_heads", "\n", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_heads", ",", "attention_head_size", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "\n", "for", "head", "in", "heads", ":", "\n", "            ", "head", "-=", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "# Prune linear layers", "\n", "self", ".", "q_lin", "=", "prune_linear_layer", "(", "self", ".", "q_lin", ",", "index", ")", "\n", "self", ".", "k_lin", "=", "prune_linear_layer", "(", "self", ".", "k_lin", ",", "index", ")", "\n", "self", ".", "v_lin", "=", "prune_linear_layer", "(", "self", ".", "v_lin", ",", "index", ")", "\n", "self", ".", "out_lin", "=", "prune_linear_layer", "(", "self", ".", "out_lin", ",", "index", ",", "dim", "=", "1", ")", "\n", "# Update hyper params", "\n", "self", ".", "n_heads", "=", "self", ".", "n_heads", "-", "len", "(", "heads", ")", "\n", "self", ".", "dim", "=", "attention_head_size", "*", "self", ".", "n_heads", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.MultiHeadAttention.forward": [[137, 199], ["input.size", "modeling_xlm.MultiHeadAttention.forward.shape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", ",", "kv", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Self-attention (if kv is None) or attention over source sentence (provided by kv).\n        \"\"\"", "\n", "# Input is (bs, qlen, dim)", "\n", "# Mask is (bs, klen) (non-causal) or (bs, klen, klen)", "\n", "bs", ",", "qlen", ",", "dim", "=", "input", ".", "size", "(", ")", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "klen", "=", "qlen", "if", "cache", "is", "None", "else", "cache", "[", "'slen'", "]", "+", "qlen", "\n", "", "else", ":", "\n", "            ", "klen", "=", "kv", ".", "size", "(", "1", ")", "\n", "# assert dim == self.dim, 'Dimensions do not match: %s input vs %s configured' % (dim, self.dim)", "\n", "", "n_heads", "=", "self", ".", "n_heads", "\n", "dim_per_head", "=", "self", ".", "dim", "//", "n_heads", "\n", "mask_reshape", "=", "(", "bs", ",", "1", ",", "qlen", ",", "klen", ")", "if", "mask", ".", "dim", "(", ")", "==", "3", "else", "(", "bs", ",", "1", ",", "1", ",", "klen", ")", "\n", "\n", "def", "shape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  projection \"\"\"", "\n", "return", "x", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", ",", "dim_per_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "", "def", "unshape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  compute context \"\"\"", "\n", "return", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", "*", "dim_per_head", ")", "\n", "\n", "", "q", "=", "shape", "(", "self", ".", "q_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "", "elif", "cache", "is", "None", "or", "self", ".", "layer_id", "not", "in", "cache", ":", "\n", "            ", "k", "=", "v", "=", "kv", "\n", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "k", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "v", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "layer_id", "in", "cache", ":", "\n", "                ", "if", "kv", "is", "None", ":", "\n", "                    ", "k_", ",", "v_", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k_", ",", "k", "]", ",", "dim", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v_", ",", "v", "]", ",", "dim", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "", "else", ":", "\n", "                    ", "k", ",", "v", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "", "", "cache", "[", "self", ".", "layer_id", "]", "=", "(", "k", ",", "v", ")", "\n", "\n", "", "q", "=", "q", "/", "math", ".", "sqrt", "(", "dim_per_head", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "scores", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "2", ",", "3", ")", ")", "# (bs, n_heads, qlen, klen)", "\n", "mask", "=", "(", "mask", "==", "0", ")", ".", "view", "(", "mask_reshape", ")", ".", "expand_as", "(", "scores", ")", "# (bs, n_heads, qlen, klen)", "\n", "scores", ".", "masked_fill_", "(", "mask", ",", "-", "float", "(", "'inf'", ")", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "weights", "=", "F", ".", "softmax", "(", "scores", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "type_as", "(", "scores", ")", "# (bs, n_heads, qlen, klen)", "\n", "weights", "=", "F", ".", "dropout", "(", "weights", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "weights", "=", "weights", "*", "head_mask", "\n", "\n", "", "context", "=", "torch", ".", "matmul", "(", "weights", ",", "v", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "context", "=", "unshape", "(", "context", ")", "# (bs, qlen, dim)", "\n", "\n", "outputs", "=", "(", "self", ".", "out_lin", "(", "context", ")", ",", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "weights", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.TransformerFFN.__init__": [[203, 209], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "dim_hidden", ",", "out_dim", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransformerFFN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "config", ".", "dropout", "\n", "self", ".", "lin1", "=", "nn", ".", "Linear", "(", "in_dim", ",", "dim_hidden", ")", "\n", "self", ".", "lin2", "=", "nn", ".", "Linear", "(", "dim_hidden", ",", "out_dim", ")", "\n", "self", ".", "act", "=", "gelu", "if", "config", ".", "gelu_activation", "else", "F", ".", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.TransformerFFN.forward": [[210, 216], ["modeling_xlm.TransformerFFN.lin1", "modeling_xlm.TransformerFFN.act", "modeling_xlm.TransformerFFN.lin2", "torch.nn.functional.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "lin1", "(", "input", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMPreTrainedModel.__init__": [[227, 229], ["modeling_utils.PreTrainedModel.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "XLMPreTrainedModel", ",", "self", ")", ".", "__init__", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMPreTrainedModel.dummy_inputs": [[230, 239], ["torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "@", "property", "\n", "def", "dummy_inputs", "(", "self", ")", ":", "\n", "        ", "inputs_list", "=", "torch", ".", "tensor", "(", "[", "[", "7", ",", "6", ",", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "2", ",", "3", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "4", ",", "5", "]", "]", ")", "\n", "attns_list", "=", "torch", ".", "tensor", "(", "[", "[", "1", ",", "1", ",", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", "]", "]", ")", "\n", "if", "self", ".", "config", ".", "use_lang_emb", "and", "self", ".", "config", ".", "n_langs", ">", "1", ":", "\n", "            ", "langs_list", "=", "torch", ".", "tensor", "(", "[", "[", "1", ",", "1", ",", "0", ",", "0", ",", "1", "]", ",", "[", "1", ",", "1", ",", "1", ",", "0", ",", "0", "]", ",", "[", "1", ",", "0", ",", "0", ",", "1", ",", "1", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "langs_list", "=", "None", "\n", "", "return", "{", "'input_ids'", ":", "inputs_list", ",", "'attention_mask'", ":", "attns_list", ",", "'langs'", ":", "langs_list", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMPreTrainedModel._init_weights": [[240, 253], ["isinstance", "isinstance", "isinstance", "module.bias.data.zero_", "module.weight.data.fill_", "torch.nn.init.normal_", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights. \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Embedding", ")", ":", "\n", "            ", "if", "self", ".", "config", "is", "not", "None", "and", "self", ".", "config", ".", "embed_init_std", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "self", ".", "config", ".", "embed_init_std", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "if", "self", ".", "config", "is", "not", "None", "and", "self", ".", "config", ".", "init_std", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "self", ".", "config", ".", "init_std", ")", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0.", ")", "\n", "", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMModel.__init__": [[354, 423], ["modeling_xlm.XLMPreTrainedModel.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.LayerNorm", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "hasattr", "modeling_xlm.XLMModel.init_weights", "NotImplementedError", "modeling_xlm.create_sinusoidal_embeddings", "torch.nn.Embedding", "modeling_xlm.XLMModel.attentions.append", "modeling_xlm.XLMModel.layer_norm1.append", "modeling_xlm.XLMModel.ffns.append", "modeling_xlm.XLMModel.layer_norm2.append", "config.pruned_heads.copy().items", "modeling_xlm.MultiHeadAttention", "torch.nn.LayerNorm", "modeling_xlm.TransformerFFN", "torch.nn.LayerNorm", "config.pruned_heads.copy", "modeling_xlm.XLMModel.prune_heads", "int", "list", "int", "map"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.create_sinusoidal_embeddings", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.prune_heads"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "#, dico, is_encoder, with_output):", "\n", "        ", "super", "(", "XLMModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "# encoder / decoder, output layer", "\n", "self", ".", "is_encoder", "=", "config", ".", "is_encoder", "\n", "self", ".", "is_decoder", "=", "not", "config", ".", "is_encoder", "\n", "if", "self", ".", "is_decoder", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Currently XLM can only be used as an encoder\"", ")", "\n", "# self.with_output = with_output", "\n", "", "self", ".", "causal", "=", "config", ".", "causal", "\n", "\n", "# dictionary / languages", "\n", "self", ".", "n_langs", "=", "config", ".", "n_langs", "\n", "self", ".", "use_lang_emb", "=", "config", ".", "use_lang_emb", "\n", "self", ".", "n_words", "=", "config", ".", "n_words", "\n", "self", ".", "eos_index", "=", "config", ".", "eos_index", "\n", "self", ".", "pad_index", "=", "config", ".", "pad_index", "\n", "# self.dico = dico", "\n", "# self.id2lang = config.id2lang", "\n", "# self.lang2id = config.lang2id", "\n", "# assert len(self.dico) == self.n_words", "\n", "# assert len(self.id2lang) == len(self.lang2id) == self.n_langs", "\n", "\n", "# model parameters", "\n", "self", ".", "dim", "=", "config", ".", "emb_dim", "# 512 by default", "\n", "self", ".", "hidden_dim", "=", "self", ".", "dim", "*", "4", "# 2048 by default", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "# 8 by default", "\n", "self", ".", "n_layers", "=", "config", ".", "n_layers", "\n", "self", ".", "dropout", "=", "config", ".", "dropout", "\n", "self", ".", "attention_dropout", "=", "config", ".", "attention_dropout", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", ",", "'transformer dim must be a multiple of n_heads'", "\n", "\n", "# embeddings", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "self", ".", "dim", ")", "\n", "if", "config", ".", "sinusoidal_embeddings", ":", "\n", "            ", "create_sinusoidal_embeddings", "(", "config", ".", "max_position_embeddings", ",", "self", ".", "dim", ",", "out", "=", "self", ".", "position_embeddings", ".", "weight", ")", "\n", "", "if", "config", ".", "n_langs", ">", "1", "and", "config", ".", "use_lang_emb", ":", "\n", "            ", "self", ".", "lang_embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "n_langs", ",", "self", ".", "dim", ")", "\n", "", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "n_words", ",", "self", ".", "dim", ",", "padding_idx", "=", "self", ".", "pad_index", ")", "\n", "self", ".", "layer_norm_emb", "=", "nn", ".", "LayerNorm", "(", "self", ".", "dim", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n", "# transformer layers", "\n", "self", ".", "attentions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "layer_norm1", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "ffns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "layer_norm2", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# if self.is_decoder:", "\n", "#     self.layer_norm15 = nn.ModuleList()", "\n", "#     self.encoder_attn = nn.ModuleList()", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "self", ".", "attentions", ".", "append", "(", "MultiHeadAttention", "(", "self", ".", "n_heads", ",", "self", ".", "dim", ",", "config", "=", "config", ")", ")", "\n", "self", ".", "layer_norm1", ".", "append", "(", "nn", ".", "LayerNorm", "(", "self", ".", "dim", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", ")", "\n", "# if self.is_decoder:", "\n", "#     self.layer_norm15.append(nn.LayerNorm(self.dim, eps=config.layer_norm_eps))", "\n", "#     self.encoder_attn.append(MultiHeadAttention(self.n_heads, self.dim, dropout=self.attention_dropout))", "\n", "self", ".", "ffns", ".", "append", "(", "TransformerFFN", "(", "self", ".", "dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "dim", ",", "config", "=", "config", ")", ")", "\n", "self", ".", "layer_norm2", ".", "append", "(", "nn", ".", "LayerNorm", "(", "self", ".", "dim", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", ")", "\n", "\n", "", "if", "hasattr", "(", "config", ",", "\"pruned_heads\"", ")", ":", "\n", "            ", "pruned_heads", "=", "config", ".", "pruned_heads", ".", "copy", "(", ")", ".", "items", "(", ")", "\n", "config", ".", "pruned_heads", "=", "{", "}", "\n", "for", "layer", ",", "heads", "in", "pruned_heads", ":", "\n", "                ", "if", "self", ".", "attentions", "[", "int", "(", "layer", ")", "]", ".", "n_heads", "==", "config", ".", "n_heads", ":", "\n", "                    ", "self", ".", "prune_heads", "(", "{", "int", "(", "layer", ")", ":", "list", "(", "map", "(", "int", ",", "heads", ")", ")", "}", ")", "\n", "\n", "", "", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMModel.get_input_embeddings": [[424, 426], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMModel.set_input_embeddings": [[427, 429], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "embeddings", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMModel._prune_heads": [[430, 437], ["heads_to_prune.items", "modeling_xlm.XLMModel.attentions[].prune_heads"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "attentions", "[", "layer", "]", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMModel.forward": [[438, 564], ["modeling_xlm.get_masks", "modeling_xlm.XLMModel.layer_norm_emb", "torch.nn.functional.dropout", "mask.unsqueeze().to", "range", "input_ids.size", "torch.LongTensor.size", "torch.LongTensor.max().item", "torch.arange", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "modeling_xlm.XLMModel.embeddings", "modeling_xlm.XLMModel.position_embeddings().expand_as", "torch.nn.functional.dropout", "mask.unsqueeze().to", "torch.nn.functional.dropout.size", "modeling_xlm.XLMModel.size", "torch.LongTensor", "position_ids.unsqueeze().expand.unsqueeze().expand.size", "langs.size", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "modeling_xlm.XLMModel.lang_embeddings", "modeling_xlm.XLMModel.embeddings", "mask.unsqueeze", "torch.LongTensor.max", "position_ids.unsqueeze().expand.unsqueeze().expand.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "modeling_xlm.XLMModel.position_embeddings", "mask.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_xlm.XLMModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.get_masks"], ["", "", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "lengths", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "# removed: src_enc=None, src_len=None", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "bs", ",", "slen", "=", "input_ids", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "            ", "bs", ",", "slen", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "if", "lengths", "is", "None", ":", "\n", "            ", "if", "input_ids", "is", "not", "None", ":", "\n", "                ", "lengths", "=", "(", "input_ids", "!=", "self", ".", "pad_index", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "                ", "lengths", "=", "torch", ".", "LongTensor", "(", "[", "slen", "]", "*", "bs", ")", "\n", "# mask = input_ids != self.pad_index", "\n", "\n", "# check inputs", "\n", "", "", "assert", "lengths", ".", "size", "(", "0", ")", "==", "bs", "\n", "assert", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", "<=", "slen", "\n", "# input_ids = input_ids.transpose(0, 1)  # batch size as dimension 0", "\n", "# assert (src_enc is None) == (src_len is None)", "\n", "# if src_enc is not None:", "\n", "#     assert self.is_decoder", "\n", "#     assert src_enc.size(0) == bs", "\n", "\n", "# generate masks", "\n", "mask", ",", "attn_mask", "=", "get_masks", "(", "slen", ",", "lengths", ",", "self", ".", "causal", ",", "padding_mask", "=", "attention_mask", ")", "\n", "# if self.is_decoder and src_enc is not None:", "\n", "#     src_mask = torch.arange(src_len.max(), dtype=torch.long, device=lengths.device) < src_len[:, None]", "\n", "\n", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "\n", "# position_ids", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "slen", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "(", "bs", ",", "slen", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "position_ids", ".", "size", "(", ")", "==", "(", "bs", ",", "slen", ")", "# (slen, bs)", "\n", "# position_ids = position_ids.transpose(0, 1)", "\n", "\n", "# langs", "\n", "", "if", "langs", "is", "not", "None", ":", "\n", "            ", "assert", "langs", ".", "size", "(", ")", "==", "(", "bs", ",", "slen", ")", "# (slen, bs)", "\n", "# langs = langs.transpose(0, 1)", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x qlen x klen]", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "n_layers", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layers", "\n", "\n", "# do not recompute cached elements", "\n", "", "if", "cache", "is", "not", "None", "and", "input_ids", "is", "not", "None", ":", "\n", "            ", "_slen", "=", "slen", "-", "cache", "[", "'slen'", "]", "\n", "input_ids", "=", "input_ids", "[", ":", ",", "-", "_slen", ":", "]", "\n", "position_ids", "=", "position_ids", "[", ":", ",", "-", "_slen", ":", "]", "\n", "if", "langs", "is", "not", "None", ":", "\n", "                ", "langs", "=", "langs", "[", ":", ",", "-", "_slen", ":", "]", "\n", "", "mask", "=", "mask", "[", ":", ",", "-", "_slen", ":", "]", "\n", "attn_mask", "=", "attn_mask", "[", ":", ",", "-", "_slen", ":", "]", "\n", "\n", "# embeddings", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "embeddings", "(", "input_ids", ")", "\n", "\n", "", "tensor", "=", "inputs_embeds", "+", "self", ".", "position_embeddings", "(", "position_ids", ")", ".", "expand_as", "(", "inputs_embeds", ")", "\n", "if", "langs", "is", "not", "None", "and", "self", ".", "use_lang_emb", ":", "\n", "            ", "tensor", "=", "tensor", "+", "self", ".", "lang_embeddings", "(", "langs", ")", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "tensor", "=", "tensor", "+", "self", ".", "embeddings", "(", "token_type_ids", ")", "\n", "", "tensor", "=", "self", ".", "layer_norm_emb", "(", "tensor", ")", "\n", "tensor", "=", "F", ".", "dropout", "(", "tensor", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "tensor", "*=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "to", "(", "tensor", ".", "dtype", ")", "\n", "\n", "# transformer layers", "\n", "hidden_states", "=", "(", ")", "\n", "attentions", "=", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "hidden_states", "=", "hidden_states", "+", "(", "tensor", ",", ")", "\n", "\n", "# self attention", "\n", "", "attn_outputs", "=", "self", ".", "attentions", "[", "i", "]", "(", "tensor", ",", "attn_mask", ",", "cache", "=", "cache", ",", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "attn", "=", "attn_outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attentions", "=", "attentions", "+", "(", "attn_outputs", "[", "1", "]", ",", ")", "\n", "", "attn", "=", "F", ".", "dropout", "(", "attn", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "tensor", "=", "tensor", "+", "attn", "\n", "tensor", "=", "self", ".", "layer_norm1", "[", "i", "]", "(", "tensor", ")", "\n", "\n", "# encoder attention (for decoder only)", "\n", "# if self.is_decoder and src_enc is not None:", "\n", "#     attn = self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)", "\n", "#     attn = F.dropout(attn, p=self.dropout, training=self.training)", "\n", "#     tensor = tensor + attn", "\n", "#     tensor = self.layer_norm15[i](tensor)", "\n", "\n", "# FFN", "\n", "tensor", "=", "tensor", "+", "self", ".", "ffns", "[", "i", "]", "(", "tensor", ")", "\n", "tensor", "=", "self", ".", "layer_norm2", "[", "i", "]", "(", "tensor", ")", "\n", "tensor", "*=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "to", "(", "tensor", ".", "dtype", ")", "\n", "\n", "# Add last hidden state", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "hidden_states", "=", "hidden_states", "+", "(", "tensor", ",", ")", "\n", "\n", "# update cache length", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "            ", "cache", "[", "'slen'", "]", "+=", "tensor", ".", "size", "(", "1", ")", "\n", "\n", "# move back sequence length to dimension 0", "\n", "# tensor = tensor.transpose(0, 1)", "\n", "\n", "", "outputs", "=", "(", "tensor", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attentions", ",", ")", "\n", "", "return", "outputs", "# outputs, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMPredLayer.__init__": [[570, 586], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.AdaptiveLogSoftmaxWithLoss"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMPredLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "asm", "=", "config", ".", "asm", "\n", "self", ".", "n_words", "=", "config", ".", "n_words", "\n", "self", ".", "pad_index", "=", "config", ".", "pad_index", "\n", "dim", "=", "config", ".", "emb_dim", "\n", "\n", "if", "config", ".", "asm", "is", "False", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "config", ".", "n_words", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "AdaptiveLogSoftmaxWithLoss", "(", "\n", "in_features", "=", "dim", ",", "\n", "n_classes", "=", "config", ".", "n_words", ",", "\n", "cutoffs", "=", "config", ".", "asm_cutoffs", ",", "\n", "div_value", "=", "config", ".", "asm_div_value", ",", "\n", "head_bias", "=", "True", ",", "# default is False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMPredLayer.forward": [[588, 606], ["modeling_xlm.XLMPredLayer.proj", "modeling_xlm.XLMPredLayer.proj.log_prob", "torch.nn.functional.cross_entropy", "modeling_xlm.XLMPredLayer.proj", "modeling_xlm.XLMPredLayer.view", "y.view"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.log_prob"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\" Compute the loss, and optionally the scores.\n        \"\"\"", "\n", "outputs", "=", "(", ")", "\n", "if", "self", ".", "asm", "is", "False", ":", "\n", "            ", "scores", "=", "self", ".", "proj", "(", "x", ")", "\n", "outputs", "=", "(", "scores", ",", ")", "+", "outputs", "\n", "if", "y", "is", "not", "None", ":", "\n", "                ", "loss", "=", "F", ".", "cross_entropy", "(", "scores", ".", "view", "(", "-", "1", ",", "self", ".", "n_words", ")", ",", "y", ".", "view", "(", "-", "1", ")", ",", "reduction", "=", "'elementwise_mean'", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "", "", "else", ":", "\n", "            ", "scores", "=", "self", ".", "proj", ".", "log_prob", "(", "x", ")", "\n", "outputs", "=", "(", "scores", ",", ")", "+", "outputs", "\n", "if", "y", "is", "not", "None", ":", "\n", "                ", "_", ",", "loss", "=", "self", ".", "proj", "(", "x", ",", "y", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMWithLMHeadModel.__init__": [[642, 648], ["modeling_xlm.XLMPreTrainedModel.__init__", "modeling_xlm.XLMModel", "modeling_xlm.XLMPredLayer", "modeling_xlm.XLMWithLMHeadModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMWithLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "XLMModel", "(", "config", ")", "\n", "self", ".", "pred_layer", "=", "XLMPredLayer", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMWithLMHeadModel.get_output_embeddings": [[649, 651], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pred_layer", ".", "proj", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMWithLMHeadModel.forward": [[652, 669], ["modeling_xlm.XLMWithLMHeadModel.transformer", "modeling_xlm.XLMWithLMHeadModel.pred_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "lengths", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "langs", "=", "langs", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "lengths", "=", "lengths", ",", "\n", "cache", "=", "cache", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "outputs", "=", "self", ".", "pred_layer", "(", "output", ",", "labels", ")", "\n", "outputs", "=", "outputs", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMForSequenceClassification.__init__": [[705, 713], ["modeling_xlm.XLMPreTrainedModel.__init__", "modeling_xlm.XLMModel", "modeling_utils.SequenceSummary", "modeling_xlm.XLMForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "XLMModel", "(", "config", ")", "\n", "self", ".", "sequence_summary", "=", "SequenceSummary", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMForSequenceClassification.forward": [[714, 742], ["modeling_xlm.XLMForSequenceClassification.transformer", "modeling_xlm.XLMForSequenceClassification.sequence_summary", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_xlm.XLMForSequenceClassification.view", "labels.view", "modeling_xlm.XLMForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "lengths", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "langs", "=", "langs", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "lengths", "=", "lengths", ",", "\n", "cache", "=", "cache", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "logits", "=", "self", ".", "sequence_summary", "(", "output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMForQuestionAnsweringSimple.__init__": [[790, 797], ["modeling_xlm.XLMPreTrainedModel.__init__", "modeling_xlm.XLMModel", "torch.nn.Linear", "modeling_xlm.XLMForQuestionAnsweringSimple.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMForQuestionAnsweringSimple", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "transformer", "=", "XLMModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMForQuestionAnsweringSimple.forward": [[798, 838], ["modeling_xlm.XLMForQuestionAnsweringSimple.transformer", "modeling_xlm.XLMForQuestionAnsweringSimple.qa_outputs", "modeling_xlm.XLMForQuestionAnsweringSimple.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "lengths", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "langs", "=", "langs", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "lengths", "=", "lengths", ",", "\n", "cache", "=", "cache", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "sequence_output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "outputs", "=", "outputs", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMForQuestionAnswering.__init__": [[886, 893], ["modeling_xlm.XLMPreTrainedModel.__init__", "modeling_xlm.XLMModel", "modeling_utils.SQuADHead", "modeling_xlm.XLMForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "transformer", "=", "XLMModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "SQuADHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.XLMForQuestionAnswering.forward": [[894, 915], ["modeling_xlm.XLMForQuestionAnswering.transformer", "modeling_xlm.XLMForQuestionAnswering.qa_outputs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "lengths", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "\n", "is_impossible", "=", "None", ",", "cls_index", "=", "None", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "langs", "=", "langs", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "lengths", "=", "lengths", ",", "\n", "cache", "=", "cache", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "outputs", "=", "self", ".", "qa_outputs", "(", "output", ",", "start_positions", "=", "start_positions", ",", "end_positions", "=", "end_positions", ",", "\n", "cls_index", "=", "cls_index", ",", "is_impossible", "=", "is_impossible", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "outputs", "=", "outputs", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.create_sinusoidal_embeddings": [[50, 59], ["numpy.array", "torch.FloatTensor", "torch.FloatTensor", "out.detach_", "numpy.sin", "numpy.cos", "range", "numpy.power", "range"], "function", ["None"], ["def", "create_sinusoidal_embeddings", "(", "n_pos", ",", "dim", ",", "out", ")", ":", "\n", "    ", "position_enc", "=", "np", ".", "array", "(", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "j", "//", "2", ")", "/", "dim", ")", "for", "j", "in", "range", "(", "dim", ")", "]", "\n", "for", "pos", "in", "range", "(", "n_pos", ")", "\n", "]", ")", "\n", "out", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", ")", "\n", "out", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", ")", "\n", "out", ".", "detach_", "(", ")", "\n", "out", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.gelu": [[61, 70], ["torch.erf", "math.sqrt"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    GELU activation\n    https://arxiv.org/abs/1606.08415\n    https://github.com/huggingface/pytorch-openai-transformer-lm/blob/master/model_pytorch.py#L14\n    https://github.com/huggingface/transformers/blob/master/modeling.py\n    \"\"\"", "\n", "# return 0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))", "\n", "return", "0.5", "*", "x", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_xlm.get_masks": [[72, 95], ["torch.arange", "lengths.size", "mask.size", "lengths.max().item", "alen[].repeat", "attn_mask.size", "lengths.max"], "function", ["None"], ["", "def", "get_masks", "(", "slen", ",", "lengths", ",", "causal", ",", "padding_mask", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generate hidden states mask, and optionally an attention mask.\n    \"\"\"", "\n", "alen", "=", "torch", ".", "arange", "(", "slen", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "lengths", ".", "device", ")", "\n", "if", "padding_mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "padding_mask", "\n", "", "else", ":", "\n", "        ", "assert", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", "<=", "slen", "\n", "mask", "=", "alen", "<", "lengths", "[", ":", ",", "None", "]", "\n", "\n", "# attention mask is the same as mask, or triangular inferior attention (causal)", "\n", "", "bs", "=", "lengths", ".", "size", "(", "0", ")", "\n", "if", "causal", ":", "\n", "        ", "attn_mask", "=", "alen", "[", "None", ",", "None", ",", ":", "]", ".", "repeat", "(", "bs", ",", "slen", ",", "1", ")", "<=", "alen", "[", "None", ",", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "        ", "attn_mask", "=", "mask", "\n", "\n", "# sanity check", "\n", "", "assert", "mask", ".", "size", "(", ")", "==", "(", "bs", ",", "slen", ")", "\n", "assert", "causal", "is", "False", "or", "attn_mask", ".", "size", "(", ")", "==", "(", "bs", ",", "slen", ",", "slen", ")", "\n", "\n", "return", "mask", ",", "attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_xlm_original_pytorch_checkpoint_to_pytorch.convert_xlm_checkpoint_to_pytorch": [[32, 67], ["torch.load", "state_dict.items", "dict", "dict", "print", "torch.save", "print", "print", "io.open", "f.write", "io.open", "f.write", "dict.items", "dict.items", "json.dumps", "json.dumps", "isinstance", "s.replace", "s.find"], "function", ["None"], ["def", "convert_xlm_checkpoint_to_pytorch", "(", "xlm_checkpoint_path", ",", "pytorch_dump_folder_path", ")", ":", "\n", "# Load checkpoint", "\n", "    ", "chkpt", "=", "torch", ".", "load", "(", "xlm_checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "state_dict", "=", "chkpt", "[", "'model'", "]", "\n", "\n", "# We have the base model one level deeper than the original XLM repository", "\n", "two_levels_state_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'pred_layer'", "in", "k", ":", "\n", "            ", "two_levels_state_dict", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "two_levels_state_dict", "[", "'transformer.'", "+", "k", "]", "=", "v", "\n", "\n", "", "", "config", "=", "chkpt", "[", "'params'", "]", "\n", "config", "=", "dict", "(", "(", "n", ",", "v", ")", "for", "n", ",", "v", "in", "config", ".", "items", "(", ")", "if", "not", "isinstance", "(", "v", ",", "(", "torch", ".", "FloatTensor", ",", "numpy", ".", "ndarray", ")", ")", ")", "\n", "\n", "vocab", "=", "chkpt", "[", "'dico_word2id'", "]", "\n", "vocab", "=", "dict", "(", "(", "s", "+", "'</w>'", "if", "s", ".", "find", "(", "'@@'", ")", "==", "-", "1", "and", "i", ">", "13", "else", "s", ".", "replace", "(", "'@@'", ",", "''", ")", ",", "i", ")", "for", "s", ",", "i", "in", "vocab", ".", "items", "(", ")", ")", "\n", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "WEIGHTS_NAME", "\n", "pytorch_config_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "CONFIG_NAME", "\n", "pytorch_vocab_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", "\n", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_weights_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "two_levels_state_dict", ",", "pytorch_weights_dump_path", ")", "\n", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "pytorch_config_dump_path", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "config", ",", "indent", "=", "2", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "print", "(", "\"Save vocab file to {}\"", ".", "format", "(", "pytorch_config_dump_path", ")", ")", "\n", "with", "open", "(", "pytorch_vocab_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "vocab", ",", "indent", "=", "2", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.__init__": [[51, 76], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "dict", "kwargs.pop", "dict", "kwargs.items", "dict", "zip", "setattr", "range", "int", "configuration_utils.PretrainedConfig.id2label.items", "configuration_utils.PretrainedConfig.id2label.values", "configuration_utils.PretrainedConfig.id2label.keys", "int", "configuration_utils.PretrainedConfig.label2id.items", "logger.error"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "# Attributes with defaults", "\n", "        ", "self", ".", "output_attentions", "=", "kwargs", ".", "pop", "(", "'output_attentions'", ",", "False", ")", "\n", "self", ".", "output_hidden_states", "=", "kwargs", ".", "pop", "(", "'output_hidden_states'", ",", "False", ")", "\n", "self", ".", "output_past", "=", "kwargs", ".", "pop", "(", "'output_past'", ",", "True", ")", "# Not used by all models", "\n", "self", ".", "torchscript", "=", "kwargs", ".", "pop", "(", "'torchscript'", ",", "False", ")", "# Only used by PyTorch models", "\n", "self", ".", "use_bfloat16", "=", "kwargs", ".", "pop", "(", "'use_bfloat16'", ",", "False", ")", "\n", "self", ".", "pruned_heads", "=", "kwargs", ".", "pop", "(", "'pruned_heads'", ",", "{", "}", ")", "\n", "self", ".", "is_decoder", "=", "kwargs", ".", "pop", "(", "'is_decoder'", ",", "False", ")", "\n", "\n", "# Fine-tuning task arguments", "\n", "self", ".", "finetuning_task", "=", "kwargs", ".", "pop", "(", "'finetuning_task'", ",", "None", ")", "\n", "self", ".", "num_labels", "=", "kwargs", ".", "pop", "(", "'num_labels'", ",", "2", ")", "\n", "self", ".", "id2label", "=", "kwargs", ".", "pop", "(", "'id2label'", ",", "{", "i", ":", "'LABEL_{}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "self", ".", "num_labels", ")", "}", ")", "\n", "self", ".", "id2label", "=", "dict", "(", "(", "int", "(", "key", ")", ",", "value", ")", "for", "key", ",", "value", "in", "self", ".", "id2label", ".", "items", "(", ")", ")", "\n", "self", ".", "label2id", "=", "kwargs", ".", "pop", "(", "'label2id'", ",", "dict", "(", "zip", "(", "self", ".", "id2label", ".", "values", "(", ")", ",", "self", ".", "id2label", ".", "keys", "(", ")", ")", ")", ")", "\n", "self", ".", "label2id", "=", "dict", "(", "(", "key", ",", "int", "(", "value", ")", ")", "for", "key", ",", "value", "in", "self", ".", "label2id", ".", "items", "(", ")", ")", "\n", "\n", "# Additional attributes without default values", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "", "except", "AttributeError", "as", "err", ":", "\n", "                ", "logger", ".", "error", "(", "\"Can't set {} with value {} for {}\"", ".", "format", "(", "key", ",", "value", ",", "self", ")", ")", "\n", "raise", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.save_pretrained": [[77, 88], ["os.path.isdir", "os.path.join", "configuration_utils.PretrainedConfig.to_json_file", "logger.info"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.to_json_file"], ["", "", "", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a configuration object to the directory `save_directory`, so that it\n            can be re-loaded using the :func:`~transformers.PretrainedConfig.from_pretrained` class method.\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ",", "\"Saving path should be a directory where the model and configuration can be saved\"", "\n", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "output_config_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "CONFIG_NAME", ")", "\n", "\n", "self", ".", "to_json_file", "(", "output_config_file", ")", "\n", "logger", ".", "info", "(", "\"Configuration saved in {}\"", ".", "format", "(", "output_config_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_pretrained": [[89, 204], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "hasattr", "kwargs.items", "logger.info", "os.path.isdir", "file_utils.cached_path", "cls.from_json_file", "logger.info", "logger.info", "dict", "hasattr", "kwargs.pop", "str", "os.path.join", "EnvironmentError", "EnvironmentError", "setattr", "to_remove.append", "os.path.isfile", "file_utils.is_remote_url", "file_utils.hf_bucket_url", "int", "cls.from_json_file.pruned_heads.items", "cls.pretrained_config_archive_map.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.cached_path", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_remote_url", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.hf_bucket_url"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiate a :class:`~transformers.PretrainedConfig` (or a derived class) from a pre-trained model configuration.\n\n        Parameters:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model configuration to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model configuration that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing a configuration file saved using the :func:`~transformers.PretrainedConfig.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - a path or url to a saved configuration JSON `file`, e.g.: ``./my_model_directory/configuration.json``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            kwargs: (`optional`) dict: key/value pairs with which to update the configuration object after loading.\n\n                - The values in kwargs of any keys which are configuration attributes will be used to override the loaded values.\n                - Behavior concerning key/value pairs whose keys are *not* configuration attributes is controlled by the `return_unused_kwargs` keyword parameter.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            return_unused_kwargs: (`optional`) bool:\n\n                - If False, then this function returns just the final configuration object.\n                - If True, then this functions returns a tuple `(config, unused_kwargs)` where `unused_kwargs` is a dictionary consisting of the key/value pairs whose keys are not configuration attributes: ie the part of kwargs which has not been used to update `config` and is otherwise ignored.\n\n        Examples::\n\n            # We can't instantiate directly the base class `PretrainedConfig` so let's show the examples on a\n            # derived class: BertConfig\n            config = BertConfig.from_pretrained('bert-base-uncased')    # Download configuration from S3 and cache.\n            config = BertConfig.from_pretrained('./test/saved_model/')  # E.g. config (or model) was saved using `save_pretrained('./test/saved_model/')`\n            config = BertConfig.from_pretrained('./test/saved_model/my_configuration.json')\n            config = BertConfig.from_pretrained('bert-base-uncased', output_attention=True, foo=False)\n            assert config.output_attention == True\n            config, unused_kwargs = BertConfig.from_pretrained('bert-base-uncased', output_attention=True,\n                                                               foo=False, return_unused_kwargs=True)\n            assert config.output_attention == True\n            assert unused_kwargs == {'foo': False}\n\n        \"\"\"", "\n", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "resume_download", "=", "kwargs", ".", "pop", "(", "'resume_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "return_unused_kwargs", "=", "kwargs", ".", "pop", "(", "'return_unused_kwargs'", ",", "False", ")", "\n", "\n", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_config_archive_map", ":", "\n", "            ", "config_file", "=", "cls", ".", "pretrained_config_archive_map", "[", "pretrained_model_name_or_path", "]", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "            ", "config_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "CONFIG_NAME", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "pretrained_model_name_or_path", ")", "or", "is_remote_url", "(", "pretrained_model_name_or_path", ")", ":", "\n", "            ", "config_file", "=", "pretrained_model_name_or_path", "\n", "", "else", ":", "\n", "            ", "config_file", "=", "hf_bucket_url", "(", "pretrained_model_name_or_path", ",", "postfix", "=", "CONFIG_NAME", ")", "\n", "\n", "", "try", ":", "\n", "# Load from URL or cache if already cached", "\n", "            ", "resolved_config_file", "=", "cached_path", "(", "config_file", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "\n", "proxies", "=", "proxies", ",", "resume_download", "=", "resume_download", ")", "\n", "# Load config", "\n", "config", "=", "cls", ".", "from_json_file", "(", "resolved_config_file", ")", "\n", "\n", "", "except", "EnvironmentError", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_config_archive_map", ":", "\n", "                ", "msg", "=", "\"Couldn't reach server at '{}' to download pretrained model configuration file.\"", ".", "format", "(", "\n", "config_file", ")", "\n", "", "else", ":", "\n", "                ", "msg", "=", "\"Model name '{}' was not found in model name list ({}). \"", "\"We assumed '{}' was a path or url to a configuration file named {} or \"", "\"a directory containing such a file but couldn't find any such file at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "cls", ".", "pretrained_config_archive_map", ".", "keys", "(", ")", ")", ",", "\n", "config_file", ",", "CONFIG_NAME", ")", "\n", "", "raise", "EnvironmentError", "(", "msg", ")", "\n", "\n", "", "except", "json", ".", "JSONDecodeError", ":", "\n", "            ", "msg", "=", "\"Couldn't reach server at '{}' to download configuration file or \"", "\"configuration file is not a valid JSON file. \"", "\"Please check network or file content here: {}.\"", ".", "format", "(", "config_file", ",", "resolved_config_file", ")", "\n", "raise", "EnvironmentError", "(", "msg", ")", "\n", "\n", "", "if", "resolved_config_file", "==", "config_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading configuration file {}\"", ".", "format", "(", "config_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading configuration file {} from cache at {}\"", ".", "format", "(", "\n", "config_file", ",", "resolved_config_file", ")", ")", "\n", "\n", "", "if", "hasattr", "(", "config", ",", "'pruned_heads'", ")", ":", "\n", "            ", "config", ".", "pruned_heads", "=", "dict", "(", "(", "int", "(", "key", ")", ",", "value", ")", "for", "key", ",", "value", "in", "config", ".", "pruned_heads", ".", "items", "(", ")", ")", "\n", "\n", "# Update config with kwargs if needed", "\n", "", "to_remove", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "config", ",", "key", ")", ":", "\n", "                ", "setattr", "(", "config", ",", "key", ",", "value", ")", "\n", "to_remove", ".", "append", "(", "key", ")", "\n", "", "", "for", "key", "in", "to_remove", ":", "\n", "            ", "kwargs", ".", "pop", "(", "key", ",", "None", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Model config %s\"", ",", "str", "(", "config", ")", ")", "\n", "if", "return_unused_kwargs", ":", "\n", "            ", "return", "config", ",", "kwargs", "\n", "", "else", ":", "\n", "            ", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_dict": [[205, 209], ["cls"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "\"\"\"Constructs a `Config` from a Python dictionary of parameters.\"\"\"", "\n", "return", "cls", "(", "**", "json_object", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file": [[210, 217], ["json.loads", "cls", "io.open", "reader.read"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `Config` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "dict_obj", "=", "json", ".", "loads", "(", "text", ")", "\n", "return", "cls", "(", "**", "dict_obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.__eq__": [[218, 220], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "==", "other", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.__repr__": [[221, 223], ["str", "configuration_utils.PretrainedConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.to_dict": [[224, 228], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.to_json_string": [[229, 232], ["json.dumps", "configuration_utils.PretrainedConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.to_json_file": [[233, 237], ["io.open", "writer.write", "configuration_utils.PretrainedConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string"], ["", "def", "to_json_file", "(", "self", ",", "json_file_path", ")", ":", "\n", "        ", "\"\"\" Save this instance to a json file.\"\"\"", "\n", "with", "open", "(", "json_file_path", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.MultiHeadAttention.__init__": [[85, 98], ["super().__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model_size", ",", "num_heads", ",", "output_attentions", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "output_attentions", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "d_model_size", "=", "d_model_size", "\n", "\n", "self", ".", "depth", "=", "int", "(", "d_model_size", "/", "self", ".", "num_heads", ")", "\n", "\n", "self", ".", "Wq", "=", "torch", ".", "nn", ".", "Linear", "(", "d_model_size", ",", "d_model_size", ")", "\n", "self", ".", "Wk", "=", "torch", ".", "nn", ".", "Linear", "(", "d_model_size", ",", "d_model_size", ")", "\n", "self", ".", "Wv", "=", "torch", ".", "nn", ".", "Linear", "(", "d_model_size", ",", "d_model_size", ")", "\n", "\n", "self", ".", "dense", "=", "torch", ".", "nn", ".", "Linear", "(", "d_model_size", ",", "d_model_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads": [[99, 102], ["x.reshape.reshape.reshape", "x.reshape.reshape.permute"], "methods", ["None"], ["", "def", "split_into_heads", "(", "self", ",", "x", ",", "batch_size", ")", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "self", ".", "num_heads", ",", "self", ".", "depth", ")", "\n", "return", "x", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.MultiHeadAttention.forward": [[103, 129], ["modeling_ctrl.MultiHeadAttention.Wq", "modeling_ctrl.MultiHeadAttention.Wk", "modeling_ctrl.MultiHeadAttention.Wv", "modeling_ctrl.MultiHeadAttention.split_into_heads", "modeling_ctrl.MultiHeadAttention.split_into_heads", "modeling_ctrl.MultiHeadAttention.split_into_heads", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "modeling_ctrl.scaled_dot_product_attention", "output[].permute", "output[].permute.reshape", "modeling_ctrl.MultiHeadAttention.dense", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.MultiHeadAttention.split_into_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.scaled_dot_product_attention"], ["", "def", "forward", "(", "self", ",", "v", ",", "k", ",", "q", ",", "mask", ",", "layer_past", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "q", ".", "shape", "[", "0", "]", "\n", "\n", "q", "=", "self", ".", "Wq", "(", "q", ")", "\n", "k", "=", "self", ".", "Wk", "(", "k", ")", "\n", "v", "=", "self", ".", "Wv", "(", "v", ")", "\n", "\n", "q", "=", "self", ".", "split_into_heads", "(", "q", ",", "batch_size", ")", "\n", "k", "=", "self", ".", "split_into_heads", "(", "k", ",", "batch_size", ")", "\n", "v", "=", "self", ".", "split_into_heads", "(", "v", ",", "batch_size", ")", "\n", "if", "layer_past", "is", "not", "None", ":", "\n", "            ", "past_key", ",", "past_value", "=", "layer_past", "[", "0", "]", ",", "layer_past", "[", "1", "]", "\n", "k", "=", "torch", ".", "cat", "(", "(", "past_key", ",", "k", ")", ",", "dim", "=", "-", "2", ")", "\n", "v", "=", "torch", ".", "cat", "(", "(", "past_value", ",", "v", ")", ",", "dim", "=", "-", "2", ")", "\n", "", "present", "=", "torch", ".", "stack", "(", "(", "k", ",", "v", ")", ")", "\n", "\n", "output", "=", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ",", "attention_mask", ",", "head_mask", ")", "\n", "scaled_attention", "=", "output", "[", "0", "]", ".", "permute", "(", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "attn", "=", "output", "[", "1", "]", "\n", "original_size_attention", "=", "scaled_attention", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "self", ".", "d_model_size", ")", "\n", "output", "=", "self", ".", "dense", "(", "original_size_attention", ")", "\n", "\n", "outputs", "=", "(", "output", ",", "present", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attn", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.EncoderLayer.__init__": [[139, 150], ["super().__init__", "modeling_ctrl.MultiHeadAttention", "modeling_ctrl.point_wise_feed_forward_network", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.point_wise_feed_forward_network"], ["    ", "def", "__init__", "(", "self", ",", "d_model_size", ",", "num_heads", ",", "dff", ",", "rate", "=", "0.1", ",", "output_attentions", "=", "False", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "multi_head_attention", "=", "MultiHeadAttention", "(", "d_model_size", ",", "num_heads", ",", "output_attentions", ")", "\n", "self", ".", "ffn", "=", "point_wise_feed_forward_network", "(", "d_model_size", ",", "dff", ")", "\n", "\n", "self", ".", "layernorm1", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "d_model_size", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "layernorm2", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "d_model_size", ",", "eps", "=", "1e-6", ")", "\n", "\n", "self", ".", "dropout1", "=", "torch", ".", "nn", ".", "Dropout", "(", "rate", ")", "\n", "self", ".", "dropout2", "=", "torch", ".", "nn", ".", "Dropout", "(", "rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.EncoderLayer.forward": [[151, 168], ["modeling_ctrl.EncoderLayer.layernorm1", "modeling_ctrl.EncoderLayer.multi_head_attention", "modeling_ctrl.EncoderLayer.dropout1", "modeling_ctrl.EncoderLayer.layernorm2", "modeling_ctrl.EncoderLayer.ffn", "modeling_ctrl.EncoderLayer.dropout2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ",", "layer_past", "=", "None", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "normed", "=", "self", ".", "layernorm1", "(", "x", ")", "\n", "attn_outputs", "=", "self", ".", "multi_head_attention", "(", "normed", ",", "normed", ",", "normed", ",", "mask", ",", "\n", "layer_past", "=", "layer_past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "attn_output", "=", "attn_outputs", "[", "0", "]", "\n", "attn_output", "=", "self", ".", "dropout1", "(", "attn_output", ")", "\n", "out1", "=", "x", "+", "attn_output", "\n", "\n", "out2", "=", "self", ".", "layernorm2", "(", "out1", ")", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "out2", ")", "\n", "ffn_output", "=", "self", ".", "dropout2", "(", "ffn_output", ")", "\n", "out2", "=", "out1", "+", "ffn_output", "\n", "\n", "outputs", "=", "(", "out2", ",", ")", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.CTRLPreTrainedModel._init_weights": [[178, 190], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ",", "Conv1D", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "Conv1D", ")", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.CTRLModel.__init__": [[276, 298], ["modeling_utils.PreTrainedModel.__init__", "modeling_ctrl.positional_encoding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.LayerNorm", "torch.LayerNorm", "modeling_ctrl.CTRLModel.init_weights", "modeling_ctrl.EncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.positional_encoding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CTRLModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_past", "=", "config", ".", "output_past", "\n", "\n", "self", ".", "d_model_size", "=", "config", ".", "n_embd", "\n", "self", ".", "num_layers", "=", "config", ".", "n_layer", "\n", "\n", "self", ".", "pos_encoding", "=", "positional_encoding", "(", "config", ".", "n_positions", ",", "self", ".", "d_model_size", ",", "torch", ".", "float", ")", "\n", "\n", "self", ".", "w", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "n_embd", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "nn", ".", "ModuleList", "(", "[", "EncoderLayer", "(", "config", ".", "n_embd", ",", "\n", "config", ".", "n_head", ",", "\n", "config", ".", "dff", ",", "\n", "config", ".", "resid_pdrop", ",", "\n", "config", ".", "output_attentions", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "self", ".", "layernorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "n_embd", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.CTRLModel.get_input_embeddings": [[299, 301], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.CTRLModel.set_input_embeddings": [[302, 304], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "w", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.CTRLModel._prune_heads": [[305, 311], ["heads_to_prune.items", "modeling_ctrl.CTRLModel.h[].attn.prune_heads"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n                heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "h", "[", "layer", "]", ".", "attn", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.CTRLModel.forward": [[312, 422], ["position_ids.unsqueeze().view.unsqueeze().view.view", "torch.triu().to", "torch.triu().to", "torch.triu().to", "torch.triu().to", "numpy.sqrt", "modeling_ctrl.CTRLModel.pos_encoding[].to", "modeling_ctrl.CTRLModel.dropout", "enumerate", "modeling_ctrl.CTRLModel.layernorm", "hidden_states.view.view.view", "ValueError", "[].size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze().view", "attention_mask.to.to.view", "attention_mask.to.to.unsqueeze().unsqueeze", "attention_mask.to.to.to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "token_type_ids.view.view.view", "modeling_ctrl.CTRLModel.w", "numpy.sqrt", "modeling_ctrl.CTRLModel.w", "zip", "h", "tuple", "input_ids.view.view.size", "input_ids.view.view.view", "len", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "modeling_ctrl.CTRLModel.size", "tuple.append", "ValueError", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze", "attention_mask.to.to.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "t.view", "modeling_ctrl.CTRLModel.size", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "hidden_states.view.view.view", "modeling_ctrl.CTRLModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_ctrl.CTRLModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "past", "is", "None", ":", "\n", "            ", "past_length", "=", "0", "\n", "past", "=", "[", "None", "]", "*", "len", "(", "self", ".", "h", ")", "\n", "", "else", ":", "\n", "            ", "past_length", "=", "past", "[", "0", "]", "[", "0", "]", ".", "size", "(", "-", "2", ")", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "position_ids", "=", "torch", ".", "arange", "(", "past_length", ",", "input_shape", "[", "-", "1", "]", "+", "past_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "# Attention mask.", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "            ", "attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "attention_mask", "=", "attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# head_mask has shape n_layer x batch x n_heads x N x N", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "n_layer", "\n", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "token_type_embeds", "=", "self", ".", "w", "(", "token_type_ids", ")", "\n", "token_type_embeds", "*=", "np", ".", "sqrt", "(", "self", ".", "d_model_size", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "w", "(", "input_ids", ")", "\n", "# inputs_embeds = embedded.unsqueeze(0) if len(input_ids.shape)<2 else embedded", "\n", "", "seq_len", "=", "input_shape", "[", "-", "1", "]", "\n", "mask", "=", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "seq_len", "+", "past_length", ",", "seq_len", "+", "past_length", ")", ",", "1", ")", ".", "to", "(", "inputs_embeds", ".", "device", ")", "\n", "\n", "inputs_embeds", "*=", "np", ".", "sqrt", "(", "self", ".", "d_model_size", ")", "\n", "\n", "pos_embeds", "=", "self", ".", "pos_encoding", "[", "position_ids", ",", ":", "]", ".", "to", "(", "inputs_embeds", ".", "device", ")", "\n", "\n", "hidden_states", "=", "inputs_embeds", "+", "pos_embeds", "+", "token_type_embeds", "\n", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "(", "inputs_embeds", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "presents", "=", "(", ")", "\n", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "[", "]", "\n", "for", "i", ",", "(", "h", ",", "layer_past", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "h", ",", "past", ")", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "", "outputs", "=", "h", "(", "hidden_states", ",", "\n", "mask", ",", "\n", "layer_past", "=", "layer_past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "hidden_states", ",", "present", "=", "outputs", "[", ":", "2", "]", "\n", "if", "self", ".", "output_past", ":", "\n", "                ", "presents", "=", "presents", "+", "(", "present", ",", ")", "\n", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "", "", "hidden_states", "=", "self", ".", "layernorm", "(", "hidden_states", ")", "\n", "hidden_states", "=", "hidden_states", ".", "view", "(", "*", "output_shape", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_past", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "presents", ",", ")", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# let the number of heads free (-1) so we can extract attention even after head pruning", "\n", "            ", "attention_output_shape", "=", "input_shape", "[", ":", "-", "1", "]", "+", "(", "-", "1", ",", ")", "+", "all_attentions", "[", "0", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "all_attentions", "=", "tuple", "(", "t", ".", "view", "(", "*", "attention_output_shape", ")", "for", "t", "in", "all_attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.CTRLLMHeadModel.__init__": [[466, 472], ["modeling_utils.PreTrainedModel.__init__", "modeling_ctrl.CTRLModel", "torch.Linear", "torch.Linear", "modeling_ctrl.CTRLLMHeadModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CTRLLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "CTRLModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.CTRLLMHeadModel.get_output_embeddings": [[473, 475], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.CTRLLMHeadModel.forward": [[476, 503], ["modeling_ctrl.CTRLLMHeadModel.transformer", "modeling_ctrl.CTRLLMHeadModel.lm_head", "lm_logits[].contiguous", "labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous.view", "labels[].contiguous.view", "lm_logits[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "past", "=", "past", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# Shift so that tokens < n predict n", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "# Flatten the tokens", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), lm_logits, presents, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.angle_defn": [[42, 45], ["torch.pow", "torch.pow"], "function", ["None"], ["def", "angle_defn", "(", "pos", ",", "i", ",", "d_model_size", ")", ":", "\n", "    ", "angle_rates", "=", "1", "/", "torch", ".", "pow", "(", "10000", ",", "(", "2", "*", "(", "i", "//", "2", ")", ")", "/", "d_model_size", ")", "\n", "return", "pos", "*", "angle_rates", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.positional_encoding": [[46, 57], ["modeling_ctrl.angle_defn", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cat", "torch.cat", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.float", "torch.float"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.angle_defn"], ["", "def", "positional_encoding", "(", "position", ",", "d_model_size", ",", "dtype", ")", ":", "\n", "# create the sinusoidal pattern for the positional encoding", "\n", "    ", "angle_rads", "=", "(", "angle_defn", "(", "torch", ".", "arange", "(", "position", ",", "dtype", "=", "dtype", ")", ".", "unsqueeze", "(", "1", ")", ",", "\n", "torch", ".", "arange", "(", "d_model_size", ",", "dtype", "=", "dtype", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "d_model_size", ")", ")", "\n", "\n", "sines", "=", "torch", ".", "sin", "(", "angle_rads", "[", ":", ",", "0", ":", ":", "2", "]", ")", "\n", "cosines", "=", "torch", ".", "cos", "(", "angle_rads", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "\n", "pos_encoding", "=", "torch", ".", "cat", "(", "[", "sines", ",", "cosines", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "pos_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.scaled_dot_product_attention": [[58, 82], ["torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "k.permute", "numpy.sqrt", "scaled_attention_logits.size", "scaled_attention_logits.size"], "function", ["None"], ["", "def", "scaled_dot_product_attention", "(", "q", ",", "k", ",", "v", ",", "mask", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "# calculate attention", "\n", "    ", "matmul_qk", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", "\n", "\n", "dk", "=", "k", ".", "shape", "[", "-", "1", "]", "\n", "scaled_attention_logits", "=", "matmul_qk", "/", "np", ".", "sqrt", "(", "dk", ")", "\n", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "nd", ",", "ns", "=", "scaled_attention_logits", ".", "size", "(", "-", "2", ")", ",", "scaled_attention_logits", ".", "size", "(", "-", "1", ")", "\n", "scaled_attention_logits", "+=", "(", "mask", "[", "ns", "-", "nd", ":", "ns", ",", ":", "ns", "]", "*", "-", "1e4", ")", "\n", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask", "\n", "        ", "scaled_attention_logits", "=", "scaled_attention_logits", "+", "attention_mask", "\n", "\n", "", "attention_weights", "=", "torch", ".", "softmax", "(", "scaled_attention_logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "        ", "attention_weights", "=", "attention_weights", "*", "head_mask", "\n", "\n", "", "output", "=", "torch", ".", "matmul", "(", "attention_weights", ",", "v", ")", "\n", "\n", "return", "output", ",", "attention_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_ctrl.point_wise_feed_forward_network": [[132, 136], ["torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear"], "function", ["None"], ["", "", "def", "point_wise_feed_forward_network", "(", "d_model_size", ",", "dff", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "d_model_size", ",", "dff", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "dff", ",", "d_model_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.__init__": [[63, 80], ["super().__init__", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetRelativeAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "if", "config", ".", "d_model", "%", "config", ".", "n_head", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "d_model", ",", "config", ".", "n_head", ")", ")", "\n", "\n", "", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "d_head", "=", "config", ".", "d_head", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "scale", "=", "1", "/", "(", "config", ".", "d_head", "**", "0.5", ")", "\n", "self", ".", "initializer_range", "=", "config", ".", "initializer_range", "\n", "\n", "self", ".", "layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'layer_norm'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.build": [[81, 111], ["modeling_tf_utils.get_initializer", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "modeling_tf_xlnet.TFXLNetRelativeAttention.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", "\n", "self", ".", "q", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'q'", ")", "\n", "self", ".", "k", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'k'", ")", "\n", "self", ".", "v", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'v'", ")", "\n", "self", ".", "o", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'o'", ")", "\n", "self", ".", "r", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'r'", ")", "\n", "self", ".", "r_r_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'r_r_bias'", ")", "\n", "self", ".", "r_s_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'r_s_bias'", ")", "\n", "self", ".", "r_w_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'r_w_bias'", ")", "\n", "self", ".", "seg_embed", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "2", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'seg_embed'", ")", "\n", "super", "(", "TFXLNetRelativeAttention", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.prune_heads": [[112, 114], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_shift": [[115, 126], ["modeling_tf_utils.shape_list", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "rel_shift", "(", "self", ",", "x", ",", "klen", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"perform relative shift to form the relative attention score.\"\"\"", "\n", "x_size", "=", "shape_list", "(", "x", ")", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "(", "x_size", "[", "1", "]", ",", "x_size", "[", "0", "]", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", ")", ")", "\n", "x", "=", "x", "[", "1", ":", ",", "...", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "(", "x_size", "[", "0", "]", ",", "x_size", "[", "1", "]", "-", "1", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", ")", ")", "\n", "x", "=", "x", "[", ":", ",", "0", ":", "klen", ",", ":", ",", ":", "]", "\n", "# x = torch.index_select(x, 1, torch.arange(klen, device=x.device, dtype=torch.long))", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core": [[127, 171], ["tensorflow.einsum", "tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.rel_shift", "tensorflow.nn.softmax", "modeling_tf_xlnet.TFXLNetRelativeAttention.dropout", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.einsum", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_shift", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "rel_attn_core", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Core relative positional attention operations.\"\"\"", "\n", "\n", "q_head", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", ",", "attn_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "# content based attention score", "\n", "ac", "=", "tf", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "q_head", "+", "self", ".", "r_w_bias", ",", "k_head_h", ")", "\n", "\n", "# position based attention score", "\n", "bd", "=", "tf", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "q_head", "+", "self", ".", "r_r_bias", ",", "k_head_r", ")", "\n", "bd", "=", "self", ".", "rel_shift", "(", "bd", ",", "klen", "=", "shape_list", "(", "ac", ")", "[", "1", "]", ")", "\n", "\n", "# segment based attention score", "\n", "if", "seg_mat", "is", "None", ":", "\n", "            ", "ef", "=", "0", "\n", "", "else", ":", "\n", "            ", "ef", "=", "tf", ".", "einsum", "(", "'ibnd,snd->ibns'", ",", "q_head", "+", "self", ".", "r_s_bias", ",", "self", ".", "seg_embed", ")", "\n", "ef", "=", "tf", ".", "einsum", "(", "'ijbs,ibns->ijbn'", ",", "seg_mat", ",", "ef", ")", "\n", "\n", "# merge attention scores and perform masking", "\n", "", "attn_score", "=", "(", "ac", "+", "bd", "+", "ef", ")", "*", "self", ".", "scale", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "# attn_score = attn_score * (1 - attn_mask) - 1e30 * attn_mask", "\n", "            ", "if", "attn_mask", ".", "dtype", "==", "tf", ".", "float16", ":", "\n", "                ", "attn_score", "=", "attn_score", "-", "65500", "*", "attn_mask", "\n", "", "else", ":", "\n", "                ", "attn_score", "=", "attn_score", "-", "1e30", "*", "attn_mask", "\n", "\n", "# attention probability", "\n", "", "", "attn_prob", "=", "tf", ".", "nn", ".", "softmax", "(", "attn_score", ",", "axis", "=", "1", ")", "\n", "\n", "attn_prob", "=", "self", ".", "dropout", "(", "attn_prob", ",", "training", "=", "training", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attn_prob", "=", "attn_prob", "*", "head_mask", "\n", "\n", "# attention output", "\n", "", "attn_vec", "=", "tf", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "attn_prob", ",", "v_head_h", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "return", "attn_vec", ",", "attn_prob", "\n", "\n", "", "return", "attn_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention": [[172, 186], ["tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.dropout", "modeling_tf_xlnet.TFXLNetRelativeAttention.layer_norm"], "methods", ["None"], ["", "def", "post_attention", "(", "self", ",", "inputs", ",", "residual", "=", "True", ",", "training", "=", "False", ")", ":", "\n", "        ", "\"\"\"Post-attention processing.\"\"\"", "\n", "# post-attention projection (back to `d_model`)", "\n", "h", ",", "attn_vec", "=", "inputs", "\n", "\n", "attn_out", "=", "tf", ".", "einsum", "(", "'ibnd,hnd->ibh'", ",", "attn_vec", ",", "self", ".", "o", ")", "\n", "\n", "attn_out", "=", "self", ".", "dropout", "(", "attn_out", ",", "training", "=", "training", ")", "\n", "\n", "if", "residual", ":", "\n", "            ", "attn_out", "=", "attn_out", "+", "h", "\n", "", "output", "=", "self", ".", "layer_norm", "(", "attn_out", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.call": [[187, 283], ["tensorflow.einsum", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.einsum", "tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "tensorflow.concat", "tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "tensorflow.einsum", "modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "tensorflow.concat", "len", "len", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "(", "h", ",", "g", ",", "attn_mask_h", ",", "attn_mask_g", ",", "\n", "r", ",", "seg_mat", ",", "mems", ",", "target_mapping", ",", "head_mask", ")", "=", "inputs", "\n", "\n", "if", "g", "is", "not", "None", ":", "\n", "###### Two-stream attention with relative positional encoding.", "\n", "# content based attention score", "\n", "            ", "if", "mems", "is", "not", "None", "and", "len", "(", "shape_list", "(", "mems", ")", ")", ">", "1", ":", "\n", "                ", "cat", "=", "tf", ".", "concat", "(", "[", "mems", ",", "h", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cat", "=", "h", "\n", "\n", "# content-based key head", "\n", "", "k_head_h", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "k", ")", "\n", "\n", "# content-based value head", "\n", "v_head_h", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "v", ")", "\n", "\n", "# position-based key head", "\n", "k_head_r", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "r", ",", "self", ".", "r", ")", "\n", "\n", "##### h-stream", "\n", "# content-stream query head", "\n", "q_head_h", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "h", ",", "self", ".", "q", ")", "\n", "\n", "# core attention ops", "\n", "attn_vec_h", "=", "self", ".", "rel_attn_core", "(", "\n", "[", "q_head_h", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", ",", "attn_mask_h", ",", "head_mask", "]", ",", "\n", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_vec_h", ",", "attn_prob_h", "=", "attn_vec_h", "\n", "\n", "# post processing", "\n", "", "output_h", "=", "self", ".", "post_attention", "(", "[", "h", ",", "attn_vec_h", "]", ",", "training", "=", "training", ")", "\n", "\n", "##### g-stream", "\n", "# query-stream query head", "\n", "q_head_g", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "g", ",", "self", ".", "q", ")", "\n", "\n", "# core attention ops", "\n", "if", "target_mapping", "is", "not", "None", ":", "\n", "                ", "q_head_g", "=", "tf", ".", "einsum", "(", "'mbnd,mlb->lbnd'", ",", "q_head_g", ",", "target_mapping", ")", "\n", "attn_vec_g", "=", "self", ".", "rel_attn_core", "(", "\n", "[", "q_head_g", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", ",", "attn_mask_g", ",", "head_mask", "]", ",", "\n", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attn_vec_g", ",", "attn_prob_g", "=", "attn_vec_g", "\n", "\n", "", "attn_vec_g", "=", "tf", ".", "einsum", "(", "'lbnd,mlb->mbnd'", ",", "attn_vec_g", ",", "target_mapping", ")", "\n", "", "else", ":", "\n", "                ", "attn_vec_g", "=", "self", ".", "rel_attn_core", "(", "\n", "[", "q_head_g", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", ",", "attn_mask_g", ",", "head_mask", "]", ",", "\n", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attn_vec_g", ",", "attn_prob_g", "=", "attn_vec_g", "\n", "\n", "# post processing", "\n", "", "", "output_g", "=", "self", ".", "post_attention", "(", "[", "g", ",", "attn_vec_g", "]", ",", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_prob", "=", "attn_prob_h", ",", "attn_prob_g", "\n", "\n", "", "", "else", ":", "\n", "###### Multi-head attention with relative positional encoding", "\n", "            ", "if", "mems", "is", "not", "None", "and", "len", "(", "shape_list", "(", "mems", ")", ")", ">", "1", ":", "\n", "                ", "cat", "=", "tf", ".", "concat", "(", "[", "mems", ",", "h", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cat", "=", "h", "\n", "\n", "# content heads", "\n", "", "q_head_h", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "h", ",", "self", ".", "q", ")", "\n", "k_head_h", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "k", ")", "\n", "v_head_h", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "v", ")", "\n", "\n", "# positional heads", "\n", "k_head_r", "=", "tf", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "r", ",", "self", ".", "r", ")", "\n", "\n", "# core attention ops", "\n", "attn_vec", "=", "self", ".", "rel_attn_core", "(", "\n", "[", "q_head_h", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", ",", "attn_mask_h", ",", "head_mask", "]", ",", "\n", "training", "=", "training", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_vec", ",", "attn_prob", "=", "attn_vec", "\n", "\n", "# post processing", "\n", "", "output_h", "=", "self", ".", "post_attention", "(", "[", "h", ",", "attn_vec", "]", ",", "training", "=", "training", ")", "\n", "output_g", "=", "None", "\n", "\n", "", "outputs", "=", "(", "output_h", ",", "output_g", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attn_prob", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetFeedForward.__init__": [[285, 300], ["super().__init__", "tensorflow.keras.layers.LayerNormalization", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dropout", "isinstance", "modeling_tf_utils.get_initializer", "modeling_tf_utils.get_initializer", "isinstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetFeedForward", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "layer_norm", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_eps", ",", "name", "=", "'layer_norm'", ")", "\n", "self", ".", "layer_1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "d_inner", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'layer_1'", ")", "\n", "self", ".", "layer_2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "d_model", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'layer_2'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "if", "isinstance", "(", "config", ".", "ff_activation", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "ff_activation", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "activation_function", "=", "ACT2FN", "[", "config", ".", "ff_activation", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation_function", "=", "config", ".", "ff_activation", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetFeedForward.call": [[301, 310], ["modeling_tf_xlnet.TFXLNetFeedForward.layer_1", "modeling_tf_xlnet.TFXLNetFeedForward.activation_function", "modeling_tf_xlnet.TFXLNetFeedForward.dropout", "modeling_tf_xlnet.TFXLNetFeedForward.layer_2", "modeling_tf_xlnet.TFXLNetFeedForward.dropout", "modeling_tf_xlnet.TFXLNetFeedForward.layer_norm"], "methods", ["None"], ["", "", "def", "call", "(", "self", ",", "inp", ",", "training", "=", "False", ")", ":", "\n", "        ", "output", "=", "inp", "\n", "output", "=", "self", ".", "layer_1", "(", "output", ")", "\n", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ",", "training", "=", "training", ")", "\n", "output", "=", "self", ".", "layer_2", "(", "output", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ",", "training", "=", "training", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "inp", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetLayer.__init__": [[312, 317], ["super().__init__", "modeling_tf_xlnet.TFXLNetRelativeAttention", "modeling_tf_xlnet.TFXLNetFeedForward", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "rel_attn", "=", "TFXLNetRelativeAttention", "(", "config", ",", "name", "=", "'rel_attn'", ")", "\n", "self", ".", "ff", "=", "TFXLNetFeedForward", "(", "config", ",", "name", "=", "'ff'", ")", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetLayer.call": [[318, 328], ["modeling_tf_xlnet.TFXLNetLayer.rel_attn", "modeling_tf_xlnet.TFXLNetLayer.ff", "modeling_tf_xlnet.TFXLNetLayer.ff"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "rel_attn", "(", "inputs", ",", "training", "=", "training", ")", "\n", "output_h", ",", "output_g", "=", "outputs", "[", ":", "2", "]", "\n", "\n", "if", "output_g", "is", "not", "None", ":", "\n", "            ", "output_g", "=", "self", ".", "ff", "(", "output_g", ",", "training", "=", "training", ")", "\n", "", "output_h", "=", "self", ".", "ff", "(", "output_h", ",", "training", "=", "training", ")", "\n", "\n", "outputs", "=", "(", "output_h", ",", "output_g", ")", "+", "outputs", "[", "2", ":", "]", "# Add again attentions if there are there", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetLMHead.__init__": [[331, 337], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "input_embeddings", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetLMHead", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "input_embeddings", "=", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetLMHead.build": [[338, 344], ["modeling_tf_xlnet.TFXLNetLMHead.add_weight", "super().build"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "self", ".", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'bias'", ")", "\n", "super", "(", "TFXLNetLMHead", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetLMHead.call": [[345, 349], ["modeling_tf_xlnet.TFXLNetLMHead.input_embeddings"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "input_embeddings", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "hidden_states", "=", "hidden_states", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.__init__": [[352, 372], ["super().__init__", "modeling_tf_utils.TFSharedEmbeddings", "tensorflow.keras.layers.Dropout", "modeling_tf_xlnet.TFXLNetLayer", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetMainLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_past", "=", "config", ".", "output_past", "\n", "\n", "self", ".", "mem_len", "=", "config", ".", "mem_len", "\n", "self", ".", "reuse_len", "=", "config", ".", "reuse_len", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "same_length", "=", "config", ".", "same_length", "\n", "self", ".", "attn_type", "=", "config", ".", "attn_type", "\n", "self", ".", "bi_data", "=", "config", ".", "bi_data", "\n", "self", ".", "clamp_len", "=", "config", ".", "clamp_len", "\n", "self", ".", "n_layer", "=", "config", ".", "n_layer", "\n", "self", ".", "use_bfloat16", "=", "config", ".", "use_bfloat16", "\n", "self", ".", "initializer_range", "=", "config", ".", "initializer_range", "\n", "\n", "self", ".", "word_embedding", "=", "TFSharedEmbeddings", "(", "config", ".", "vocab_size", ",", "config", ".", "d_model", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'word_embedding'", ")", "\n", "self", ".", "layer", "=", "[", "TFXLNetLayer", "(", "config", ",", "name", "=", "'layer_._{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", "]", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.get_input_embeddings": [[373, 375], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "word_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.build": [[376, 381], ["modeling_tf_utils.get_initializer", "modeling_tf_xlnet.TFXLNetMainLayer.add_weight"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "initializer", "=", "get_initializer", "(", "self", ".", "initializer_range", ")", "\n", "self", ".", "mask_emb", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "1", ",", "1", ",", "self", ".", "d_model", ")", ",", "\n", "initializer", "=", "initializer", ",", "\n", "trainable", "=", "True", ",", "name", "=", "'mask_emb'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer._resize_token_embeddings": [[382, 384], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer._prune_heads": [[385, 387], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.create_mask": [[388, 416], ["tensorflow.ones", "tensorflow.matrix_band_part", "tensorflow.matrix_band_part", "tensorflow.zeros", "tensorflow.concat", "tensorflow.matrix_band_part", "tensorflow.concat"], "methods", ["None"], ["", "def", "create_mask", "(", "self", ",", "qlen", ",", "mlen", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "        ", "\"\"\"\n        Creates causal attention mask. Float mask where 1.0 indicates masked, 0.0 indicates not-masked.\n\n        Args:\n            qlen: TODO Lysandre didn't fill\n            mlen: TODO Lysandre didn't fill\n\n        ::\n\n                  same_length=False:      same_length=True:\n                  <mlen > <  qlen >       <mlen > <  qlen >\n               ^ [0 0 0 0 0 1 1 1 1]     [0 0 0 0 0 1 1 1 1]\n                 [0 0 0 0 0 0 1 1 1]     [1 0 0 0 0 0 1 1 1]\n            qlen [0 0 0 0 0 0 0 1 1]     [1 1 0 0 0 0 0 1 1]\n                 [0 0 0 0 0 0 0 0 1]     [1 1 1 0 0 0 0 0 1]\n               v [0 0 0 0 0 0 0 0 0]     [1 1 1 1 0 0 0 0 0]\n\n        \"\"\"", "\n", "attn_mask", "=", "tf", ".", "ones", "(", "[", "qlen", ",", "qlen", "]", ",", "dtype", "=", "dtype", ")", "\n", "mask_u", "=", "tf", ".", "matrix_band_part", "(", "attn_mask", ",", "0", ",", "-", "1", ")", "\n", "mask_dia", "=", "tf", ".", "matrix_band_part", "(", "attn_mask", ",", "0", ",", "0", ")", "\n", "attn_mask_pad", "=", "tf", ".", "zeros", "(", "[", "qlen", ",", "mlen", "]", ",", "dtype", "=", "dtype", ")", "\n", "ret", "=", "tf", ".", "concat", "(", "[", "attn_mask_pad", ",", "mask_u", "-", "mask_dia", "]", ",", "1", ")", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "mask_l", "=", "tf", ".", "matrix_band_part", "(", "attn_mask", ",", "-", "1", ",", "0", ")", "\n", "ret", "=", "tf", ".", "concat", "(", "[", "ret", "[", ":", ",", ":", "qlen", "]", "+", "mask_l", "-", "mask_dia", ",", "ret", "[", ":", ",", "qlen", ":", "]", "]", ",", "1", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.cache_mem": [[417, 428], ["tensorflow.stop_gradient", "tensorflow.concat"], "methods", ["None"], ["", "def", "cache_mem", "(", "self", ",", "curr_out", ",", "prev_mem", ")", ":", "\n", "        ", "\"\"\"cache hidden states into memory.\"\"\"", "\n", "if", "self", ".", "reuse_len", "is", "not", "None", "and", "self", ".", "reuse_len", ">", "0", ":", "\n", "            ", "curr_out", "=", "curr_out", "[", ":", "self", ".", "reuse_len", "]", "\n", "\n", "", "if", "prev_mem", "is", "None", ":", "\n", "            ", "new_mem", "=", "curr_out", "[", "-", "self", ".", "mem_len", ":", "]", "\n", "", "else", ":", "\n", "            ", "new_mem", "=", "tf", ".", "concat", "(", "[", "prev_mem", ",", "curr_out", "]", ",", "0", ")", "[", "-", "self", ".", "mem_len", ":", "]", "\n", "\n", "", "return", "tf", ".", "stop_gradient", "(", "new_mem", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding": [[429, 439], ["tensorflow.einsum", "tensorflow.concat", "tensorflow.tile", "tensorflow.sin", "tensorflow.cos"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "positional_embedding", "(", "pos_seq", ",", "inv_freq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "tf", ".", "einsum", "(", "'i,d->id'", ",", "pos_seq", ",", "inv_freq", ")", "\n", "pos_emb", "=", "tf", ".", "concat", "(", "[", "tf", ".", "sin", "(", "sinusoid_inp", ")", ",", "tf", ".", "cos", "(", "sinusoid_inp", ")", "]", ",", "axis", "=", "-", "1", ")", "\n", "pos_emb", "=", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "pos_emb", "=", "tf", ".", "tile", "(", "pos_emb", ",", "[", "1", ",", "bsz", ",", "1", "]", ")", "\n", "\n", "", "return", "pos_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.relative_positional_encoding": [[440, 487], ["tensorflow.range", "tensorflow.cast", "tensorflow.range", "tensorflow.range", "tensorflow.concat", "tensorflow.range", "modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "ValueError", "tensorflow.cast", "tensorflow.cast", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "tensorflow.cast", "tensorflow.clip_by_value"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.positional_embedding"], ["", "def", "relative_positional_encoding", "(", "self", ",", "qlen", ",", "klen", ",", "bsz", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "\"\"\"create relative positional encoding.\"\"\"", "\n", "freq_seq", "=", "tf", ".", "range", "(", "0", ",", "self", ".", "d_model", ",", "2.0", ")", "\n", "if", "dtype", "is", "not", "None", "and", "dtype", "!=", "tf", ".", "float32", ":", "\n", "            ", "freq_seq", "=", "tf", ".", "cast", "(", "freq_seq", ",", "dtype", "=", "dtype", ")", "\n", "", "inv_freq", "=", "1", "/", "(", "10000", "**", "(", "freq_seq", "/", "self", ".", "d_model", ")", ")", "\n", "\n", "if", "self", ".", "attn_type", "==", "'bi'", ":", "\n", "# beg, end = klen - 1, -qlen", "\n", "            ", "beg", ",", "end", "=", "klen", ",", "-", "qlen", "\n", "", "elif", "self", ".", "attn_type", "==", "'uni'", ":", "\n", "# beg, end = klen - 1, -1", "\n", "            ", "beg", ",", "end", "=", "klen", ",", "-", "1", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown `attn_type` {}.'", ".", "format", "(", "self", ".", "attn_type", ")", ")", "\n", "\n", "", "if", "self", ".", "bi_data", ":", "\n", "            ", "fwd_pos_seq", "=", "tf", ".", "range", "(", "beg", ",", "end", ",", "-", "1.0", ")", "\n", "bwd_pos_seq", "=", "tf", ".", "range", "(", "-", "beg", ",", "-", "end", ",", "1.0", ")", "\n", "\n", "if", "dtype", "is", "not", "None", "and", "dtype", "!=", "tf", ".", "float32", ":", "\n", "                ", "fwd_pos_seq", "=", "tf", ".", "cast", "(", "fwd_pos_seq", ",", "dtype", "=", "dtype", ")", "\n", "bwd_pos_seq", "=", "tf", ".", "cast", "(", "bwd_pos_seq", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "fwd_pos_seq", "=", "tf", ".", "clip_by_value", "(", "fwd_pos_seq", ",", "-", "self", ".", "clamp_len", ",", "self", ".", "clamp_len", ")", "\n", "bwd_pos_seq", "=", "tf", ".", "clip_by_value", "(", "bwd_pos_seq", ",", "-", "self", ".", "clamp_len", ",", "self", ".", "clamp_len", ")", "\n", "\n", "", "if", "bsz", "is", "not", "None", ":", "\n", "# With bi_data, the batch size should be divisible by 2.", "\n", "                ", "assert", "bsz", "%", "2", "==", "0", "\n", "fwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ",", "bsz", "//", "2", ")", "\n", "bwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "bwd_pos_seq", ",", "inv_freq", ",", "bsz", "//", "2", ")", "\n", "", "else", ":", "\n", "                ", "fwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ")", "\n", "bwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "bwd_pos_seq", ",", "inv_freq", ")", "\n", "\n", "", "pos_emb", "=", "tf", ".", "concat", "(", "[", "fwd_pos_emb", ",", "bwd_pos_emb", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "fwd_pos_seq", "=", "tf", ".", "range", "(", "beg", ",", "end", ",", "-", "1.0", ")", "\n", "if", "dtype", "is", "not", "None", "and", "dtype", "!=", "tf", ".", "float32", ":", "\n", "                ", "fwd_pos_seq", "=", "tf", ".", "cast", "(", "fwd_pos_seq", ",", "dtype", "=", "dtype", ")", "\n", "", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "fwd_pos_seq", "=", "tf", ".", "clip_by_value", "(", "fwd_pos_seq", ",", "-", "clamp_len", ",", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ",", "bsz", ")", "\n", "\n", "", "return", "pos_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.call": [[488, 676], ["isinstance", "modeling_tf_xlnet.TFXLNetMainLayer.dropout", "modeling_tf_xlnet.TFXLNetMainLayer.relative_positional_encoding", "modeling_tf_xlnet.TFXLNetMainLayer.dropout", "enumerate", "modeling_tf_xlnet.TFXLNetMainLayer.dropout", "isinstance", "ValueError", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "tensorflow.transpose", "modeling_tf_xlnet.TFXLNetMainLayer.create_mask", "tensorflow.zeros", "tensorflow.concat", "tensorflow.cast", "tensorflow.concat", "tensorflow.cast", "modeling_tf_xlnet.TFXLNetMainLayer.word_embedding", "tensorflow.tile", "modeling_tf_xlnet.TFXLNetMainLayer.dropout", "tensorflow.zeros", "tensorflow.concat", "tensorflow.cast", "tensorflow.one_hot", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "layer_module", "tuple.append", "tensorflow.transpose", "tuple", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "tensorflow.transpose", "modeling_tf_utils.shape_list", "ValueError", "tensorflow.eye", "tensorflow.logical_not", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "len", "tuple.append", "tuple.append", "tuple", "tuple", "len", "len", "len", "len", "len", "len", "len", "len", "len", "modeling_tf_utils.shape_list", "tensorflow.transpose", "ValueError", "tensorflow.zeros", "tensorflow.equal", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "tensorflow.transpose", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "modeling_tf_xlnet.TFXLNetMainLayer.cache_mem", "tensorflow.transpose", "tensorflow.transpose", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_tf_xlnet.TFXLNetMainLayer.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.relative_positional_encoding", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.create_mask", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetMainLayer.cache_mem"], ["", "def", "call", "(", "self", ",", "inputs", ",", "attention_mask", "=", "None", ",", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "attention_mask", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "attention_mask", "\n", "mems", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "mems", "\n", "perm_mask", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "perm_mask", "\n", "target_mapping", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "target_mapping", "\n", "token_type_ids", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "token_type_ids", "\n", "input_mask", "=", "inputs", "[", "6", "]", "if", "len", "(", "inputs", ")", ">", "6", "else", "input_mask", "\n", "head_mask", "=", "inputs", "[", "7", "]", "if", "len", "(", "inputs", ")", ">", "7", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "8", "]", "if", "len", "(", "inputs", ")", ">", "8", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "9", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "mems", "=", "inputs", ".", "get", "(", "'mems'", ",", "mems", ")", "\n", "perm_mask", "=", "inputs", ".", "get", "(", "'perm_mask'", ",", "perm_mask", ")", "\n", "target_mapping", "=", "inputs", ".", "get", "(", "'target_mapping'", ",", "target_mapping", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "input_mask", "=", "inputs", ".", "get", "(", "'input_mask'", ",", "input_mask", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "9", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "# the original code for XLNet uses shapes [len, bsz] with the batch dimension at the end", "\n", "# but we want a unified interface in the library with the batch size on the first dimension", "\n", "# so we move here the first dimension (batch) to the end", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_ids", "=", "tf", ".", "transpose", "(", "input_ids", ",", "perm", "=", "(", "1", ",", "0", ")", ")", "\n", "qlen", ",", "bsz", "=", "shape_list", "(", "input_ids", ")", "[", ":", "2", "]", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "inputs_embeds", "=", "tf", ".", "transpose", "(", "inputs_embeds", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "qlen", ",", "bsz", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "2", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "token_type_ids", "=", "tf", ".", "transpose", "(", "token_type_ids", ",", "perm", "=", "(", "1", ",", "0", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "input_mask", "=", "tf", ".", "transpose", "(", "input_mask", ",", "perm", "=", "(", "1", ",", "0", ")", ")", "if", "input_mask", "is", "not", "None", "else", "None", "\n", "attention_mask", "=", "tf", ".", "transpose", "(", "attention_mask", ",", "perm", "=", "(", "1", ",", "0", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "perm_mask", "=", "tf", ".", "transpose", "(", "perm_mask", ",", "perm", "=", "(", "1", ",", "2", ",", "0", ")", ")", "if", "perm_mask", "is", "not", "None", "else", "None", "\n", "target_mapping", "=", "tf", ".", "transpose", "(", "target_mapping", ",", "perm", "=", "(", "1", ",", "2", ",", "0", ")", ")", "if", "target_mapping", "is", "not", "None", "else", "None", "\n", "\n", "mlen", "=", "shape_list", "(", "mems", "[", "0", "]", ")", "[", "0", "]", "if", "mems", "is", "not", "None", "and", "mems", "[", "0", "]", "is", "not", "None", "else", "0", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "\n", "dtype_float", "=", "tf", ".", "bfloat16", "if", "self", ".", "use_bfloat16", "else", "tf", ".", "float32", "\n", "\n", "##### Attention mask", "\n", "# causal attention mask", "\n", "if", "self", ".", "attn_type", "==", "'uni'", ":", "\n", "            ", "attn_mask", "=", "self", ".", "create_mask", "(", "qlen", ",", "mlen", ")", "\n", "attn_mask", "=", "attn_mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "", "elif", "self", ".", "attn_type", "==", "'bi'", ":", "\n", "            ", "attn_mask", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported attention type: {}'", ".", "format", "(", "self", ".", "attn_type", ")", ")", "\n", "\n", "# data mask: input mask & perm mask", "\n", "", "assert", "input_mask", "is", "None", "or", "attention_mask", "is", "None", ",", "\"You can only use one of input_mask (uses 1 for padding) \"", "\"or attention_mask (uses 0 for padding, added for compatbility with BERT). Please choose one.\"", "\n", "if", "input_mask", "is", "None", "and", "attention_mask", "is", "not", "None", ":", "\n", "            ", "input_mask", "=", "1.0", "-", "attention_mask", "\n", "", "if", "input_mask", "is", "not", "None", "and", "perm_mask", "is", "not", "None", ":", "\n", "            ", "data_mask", "=", "input_mask", "[", "None", "]", "+", "perm_mask", "\n", "", "elif", "input_mask", "is", "not", "None", "and", "perm_mask", "is", "None", ":", "\n", "            ", "data_mask", "=", "input_mask", "[", "None", "]", "\n", "", "elif", "input_mask", "is", "None", "and", "perm_mask", "is", "not", "None", ":", "\n", "            ", "data_mask", "=", "perm_mask", "\n", "", "else", ":", "\n", "            ", "data_mask", "=", "None", "\n", "\n", "", "if", "data_mask", "is", "not", "None", ":", "\n", "# all mems can be attended to", "\n", "            ", "mems_mask", "=", "tf", ".", "zeros", "(", "[", "shape_list", "(", "data_mask", ")", "[", "0", "]", ",", "mlen", ",", "bsz", "]", ",", "\n", "dtype", "=", "dtype_float", ")", "\n", "data_mask", "=", "tf", ".", "concat", "(", "[", "mems_mask", ",", "data_mask", "]", ",", "axis", "=", "1", ")", "\n", "if", "attn_mask", "is", "None", ":", "\n", "                ", "attn_mask", "=", "data_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "                ", "attn_mask", "+=", "data_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "tf", ".", "cast", "(", "attn_mask", ">", "0", ",", "dtype", "=", "dtype_float", ")", "\n", "\n", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "non_tgt_mask", "=", "-", "tf", ".", "eye", "(", "qlen", ",", "dtype", "=", "dtype_float", ")", "\n", "non_tgt_mask", "=", "tf", ".", "concat", "(", "[", "tf", ".", "zeros", "(", "[", "qlen", ",", "mlen", "]", ",", "dtype", "=", "dtype_float", ")", ",", "non_tgt_mask", "]", ",", "axis", "=", "-", "1", ")", "\n", "non_tgt_mask", "=", "tf", ".", "cast", "(", "(", "attn_mask", "+", "non_tgt_mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", ")", ">", "0", ",", "dtype", "=", "dtype_float", ")", "\n", "", "else", ":", "\n", "            ", "non_tgt_mask", "=", "None", "\n", "\n", "##### Word embeddings and prepare h & g hidden states", "\n", "", "if", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "word_emb_k", "=", "inputs_embeds", "\n", "", "else", ":", "\n", "            ", "word_emb_k", "=", "self", ".", "word_embedding", "(", "input_ids", ")", "\n", "", "output_h", "=", "self", ".", "dropout", "(", "word_emb_k", ",", "training", "=", "training", ")", "\n", "if", "target_mapping", "is", "not", "None", ":", "\n", "            ", "word_emb_q", "=", "tf", ".", "tile", "(", "self", ".", "mask_emb", ",", "[", "shape_list", "(", "target_mapping", ")", "[", "0", "]", ",", "bsz", ",", "1", "]", ")", "\n", "# else:  # We removed the inp_q input which was same as target mapping", "\n", "#     inp_q_ext = inp_q[:, :, None]", "\n", "#     word_emb_q = inp_q_ext * self.mask_emb + (1 - inp_q_ext) * word_emb_k", "\n", "output_g", "=", "self", ".", "dropout", "(", "word_emb_q", ",", "training", "=", "training", ")", "\n", "", "else", ":", "\n", "            ", "output_g", "=", "None", "\n", "\n", "##### Segment embedding", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "# Convert `token_type_ids` to one-hot `seg_mat`", "\n", "            ", "mem_pad", "=", "tf", ".", "zeros", "(", "[", "mlen", ",", "bsz", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "cat_ids", "=", "tf", ".", "concat", "(", "[", "mem_pad", ",", "token_type_ids", "]", ",", "0", ")", "\n", "\n", "# `1` indicates not in the same segment [qlen x klen x bsz]", "\n", "seg_mat", "=", "tf", ".", "cast", "(", "\n", "tf", ".", "logical_not", "(", "tf", ".", "equal", "(", "token_type_ids", "[", ":", ",", "None", "]", ",", "cat_ids", "[", "None", ",", ":", "]", ")", ")", ",", "\n", "tf", ".", "int32", ")", "\n", "seg_mat", "=", "tf", ".", "one_hot", "(", "seg_mat", ",", "2", ",", "dtype", "=", "dtype_float", ")", "\n", "", "else", ":", "\n", "            ", "seg_mat", "=", "None", "\n", "\n", "##### Positional encoding", "\n", "", "pos_emb", "=", "self", ".", "relative_positional_encoding", "(", "qlen", ",", "klen", ",", "bsz", "=", "bsz", ",", "dtype", "=", "dtype_float", ")", "\n", "pos_emb", "=", "self", ".", "dropout", "(", "pos_emb", ",", "training", "=", "training", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads] (a head_mask for each layer)", "\n", "# and head_mask is converted to shape [num_hidden_layers x qlen x klen x bsz x n_head]", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layer", "\n", "\n", "", "new_mems", "=", "(", ")", "\n", "if", "mems", "is", "None", ":", "\n", "            ", "mems", "=", "[", "None", "]", "*", "len", "(", "self", ".", "layer", ")", "\n", "\n", "", "attentions", "=", "[", "]", "\n", "hidden_states", "=", "[", "]", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "# cache new mems", "\n", "            ", "if", "self", ".", "mem_len", "is", "not", "None", "and", "self", ".", "mem_len", ">", "0", "and", "self", ".", "output_past", ":", "\n", "                ", "new_mems", "=", "new_mems", "+", "(", "self", ".", "cache_mem", "(", "output_h", ",", "mems", "[", "i", "]", ")", ",", ")", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "hidden_states", ".", "append", "(", "(", "output_h", ",", "output_g", ")", "if", "output_g", "is", "not", "None", "else", "output_h", ")", "\n", "\n", "", "outputs", "=", "layer_module", "(", "[", "output_h", ",", "output_g", ",", "non_tgt_mask", ",", "attn_mask", ",", "\n", "pos_emb", ",", "seg_mat", ",", "mems", "[", "i", "]", ",", "target_mapping", ",", "\n", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "output_h", ",", "output_g", "=", "outputs", "[", ":", "2", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "# Add last hidden state", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "hidden_states", ".", "append", "(", "(", "output_h", ",", "output_g", ")", "if", "output_g", "is", "not", "None", "else", "output_h", ")", "\n", "\n", "", "output", "=", "self", ".", "dropout", "(", "output_g", "if", "output_g", "is", "not", "None", "else", "output_h", ",", "training", "=", "training", ")", "\n", "\n", "# Prepare outputs, we transpose back here to shape [bsz, len, hidden_dim] (cf. beginning of forward() method)", "\n", "outputs", "=", "(", "tf", ".", "transpose", "(", "output", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", ",", ")", "\n", "\n", "if", "self", ".", "mem_len", "is", "not", "None", "and", "self", ".", "mem_len", ">", "0", "and", "self", ".", "output_past", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "new_mems", ",", ")", "\n", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "if", "output_g", "is", "not", "None", ":", "\n", "                ", "hidden_states", "=", "tuple", "(", "tf", ".", "transpose", "(", "h", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", "for", "hs", "in", "hidden_states", "for", "h", "in", "hs", ")", "\n", "", "else", ":", "\n", "                ", "hidden_states", "=", "tuple", "(", "tf", ".", "transpose", "(", "hs", ",", "perm", "=", "(", "1", ",", "0", ",", "2", ")", ")", "for", "hs", "in", "hidden_states", ")", "\n", "", "outputs", "=", "outputs", "+", "(", "hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "attentions", "=", "tuple", "(", "tf", ".", "transpose", "(", "t", ",", "perm", "=", "(", "2", ",", "3", ",", "0", ",", "1", ")", ")", "for", "t", "in", "attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "attentions", ",", ")", "\n", "\n", "", "return", "outputs", "# outputs, (new_mems), (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetModel.__init__": [[819, 822], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlnet.TFXLNetMainLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFXLNetMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetModel.call": [[823, 826], ["modeling_tf_xlnet.TFXLNetModel.transformer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetLMHeadModel.__init__": [[868, 872], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlnet.TFXLNetMainLayer", "modeling_tf_xlnet.TFXLNetLMHead"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFXLNetMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "lm_loss", "=", "TFXLNetLMHead", "(", "config", ",", "self", ".", "transformer", ".", "word_embedding", ",", "name", "=", "'lm_loss'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetLMHeadModel.get_output_embeddings": [[873, 875], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_loss", ".", "input_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetLMHeadModel.call": [[876, 884], ["modeling_tf_xlnet.TFXLNetLMHeadModel.transformer", "modeling_tf_xlnet.TFXLNetLMHeadModel.lm_loss"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "hidden_state", "=", "transformer_outputs", "[", "0", "]", "\n", "logits", "=", "self", ".", "lm_loss", "(", "hidden_state", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "return", "outputs", "# return logits, (mems), (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetForSequenceClassification.__init__": [[919, 928], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlnet.TFXLNetMainLayer", "modeling_tf_utils.TFSequenceSummary", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "TFXLNetMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "sequence_summary", "=", "TFSequenceSummary", "(", "config", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'sequence_summary'", ")", "\n", "self", ".", "logits_proj", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'logits_proj'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetForSequenceClassification.call": [[929, 939], ["modeling_tf_xlnet.TFXLNetForSequenceClassification.transformer", "modeling_tf_xlnet.TFXLNetForSequenceClassification.sequence_summary", "modeling_tf_xlnet.TFXLNetForSequenceClassification.logits_proj"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "output", "=", "self", ".", "sequence_summary", "(", "output", ")", "\n", "logits", "=", "self", ".", "logits_proj", "(", "output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "return", "outputs", "# return logits, (mems), (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetForTokenClassification.__init__": [[974, 982], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlnet.TFXLNetMainLayer", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "TFXLNetMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "classifier", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'classifier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetForTokenClassification.call": [[983, 992], ["modeling_tf_xlnet.TFXLNetForTokenClassification.transformer", "modeling_tf_xlnet.TFXLNetForTokenClassification.classifier"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "classifier", "(", "output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "return", "outputs", "# return logits, (mems), (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple.__init__": [[1030, 1036], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_xlnet.TFXLNetMainLayer", "tensorflow.keras.layers.Dense", "modeling_tf_utils.get_initializer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFXLNetForQuestionAnsweringSimple", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFXLNetMainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "qa_outputs", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "config", ".", "num_labels", ",", "\n", "kernel_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'qa_outputs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple.call": [[1037, 1050], ["modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple.transformer", "modeling_tf_xlnet.TFXLNetForQuestionAnsweringSimple.qa_outputs", "tensorflow.split", "tensorflow.squeeze", "tensorflow.squeeze"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "sequence_output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "tf", ".", "split", "(", "logits", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "start_logits", "=", "tf", ".", "squeeze", "(", "start_logits", ",", "axis", "=", "-", "1", ")", "\n", "end_logits", "=", "tf", ".", "squeeze", "(", "end_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "return", "outputs", "# start_logits, end_logits, (mems), (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.gelu": [[43, 51], ["tensorflow.tanh", "numpy.sqrt", "tensorflow.pow"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Implementation of the gelu activation function.\n        XLNet is using OpenAI GPT's gelu\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "tanh", "(", "\n", "(", "np", ".", "sqrt", "(", "2", "/", "np", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "tf", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_xlnet.swish": [[53, 55], ["tensorflow.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "tf", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_openai.OpenAIGPTConfig.__init__": [[59, 102], ["configuration_utils.PretrainedConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "vocab_size", "=", "40478", ",", "\n", "n_positions", "=", "512", ",", "\n", "n_ctx", "=", "512", ",", "\n", "n_embd", "=", "768", ",", "\n", "n_layer", "=", "12", ",", "\n", "n_head", "=", "12", ",", "\n", "afn", "=", "\"gelu\"", ",", "\n", "resid_pdrop", "=", "0.1", ",", "\n", "embd_pdrop", "=", "0.1", ",", "\n", "attn_pdrop", "=", "0.1", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "predict_special_tokens", "=", "True", ",", "\n", "summary_type", "=", "'cls_index'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "None", ",", "\n", "summary_proj_to_labels", "=", "True", ",", "\n", "summary_first_dropout", "=", "0.1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Constructs OpenAIGPTConfig.\n        \"\"\"", "\n", "super", "(", "OpenAIGPTConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_positions", "=", "n_positions", "\n", "self", ".", "n_embd", "=", "n_embd", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "afn", "=", "afn", "\n", "self", ".", "resid_pdrop", "=", "resid_pdrop", "\n", "self", ".", "embd_pdrop", "=", "embd_pdrop", "\n", "self", ".", "attn_pdrop", "=", "attn_pdrop", "\n", "self", ".", "layer_norm_epsilon", "=", "layer_norm_epsilon", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "predict_special_tokens", "=", "predict_special_tokens", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_first_dropout", "=", "summary_first_dropout", "\n", "self", ".", "summary_proj_to_labels", "=", "summary_proj_to_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_openai.OpenAIGPTConfig.max_position_embeddings": [[103, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_openai.OpenAIGPTConfig.hidden_size": [[107, 110], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_embd", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_openai.OpenAIGPTConfig.num_attention_heads": [[111, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_openai.OpenAIGPTConfig.num_hidden_layers": [[115, 118], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.__init__": [[28, 47], ["super().__init__", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "\n", "keep_order", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAdaptiveSoftmaxMask", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "vocab_size", "]", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "self", ".", "div_val", "=", "div_val", "\n", "\n", "self", ".", "shortlist_size", "=", "self", ".", "cutoffs", "[", "0", "]", "\n", "self", ".", "n_clusters", "=", "len", "(", "self", ".", "cutoffs", ")", "-", "1", "\n", "self", ".", "head_size", "=", "self", ".", "shortlist_size", "+", "self", ".", "n_clusters", "\n", "self", ".", "keep_order", "=", "keep_order", "\n", "\n", "self", ".", "out_layers", "=", "[", "]", "\n", "self", ".", "out_projs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build": [[48, 98], ["super().build", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "range", "range", "len", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.out_layers.append", "len", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.out_projs.append", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.out_layers.append", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_weight", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.out_projs.append", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.out_projs.append"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "if", "self", ".", "n_clusters", ">", "0", ":", "\n", "            ", "self", ".", "cluster_weight", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_clusters", ",", "self", ".", "d_embed", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'cluster_weight'", ")", "\n", "self", ".", "cluster_bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "n_clusters", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'cluster_bias'", ")", "\n", "\n", "", "if", "self", ".", "div_val", "==", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "if", "self", ".", "d_proj", "!=", "self", ".", "d_embed", ":", "\n", "                    ", "weight", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "d_embed", ",", "self", ".", "d_proj", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'out_projs_._{}'", ".", "format", "(", "i", ")", ")", "\n", "self", ".", "out_projs", ".", "append", "(", "weight", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "out_projs", ".", "append", "(", "None", ")", "\n", "", "weight", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", "self", ".", "d_embed", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'out_layers_._{}_._weight'", ".", "format", "(", "i", ")", ")", "\n", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "self", ".", "vocab_size", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'out_layers_._{}_._bias'", ".", "format", "(", "i", ")", ")", "\n", "self", ".", "out_layers", ".", "append", "(", "(", "weight", ",", "bias", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "self", ".", "d_embed", "//", "(", "self", ".", "div_val", "**", "i", ")", "\n", "\n", "weight", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "d_emb_i", ",", "self", ".", "d_proj", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'out_projs_._{}'", ".", "format", "(", "i", ")", ")", "\n", "self", ".", "out_projs", ".", "append", "(", "weight", ")", "\n", "weight", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "r_idx", "-", "l_idx", ",", "d_emb_i", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'out_layers_._{}_._weight'", ".", "format", "(", "i", ")", ")", "\n", "bias", "=", "self", ".", "add_weight", "(", "shape", "=", "(", "r_idx", "-", "l_idx", ",", ")", ",", "\n", "initializer", "=", "'zeros'", ",", "\n", "trainable", "=", "True", ",", "\n", "name", "=", "'out_layers_._{}_._bias'", ".", "format", "(", "i", ")", ")", "\n", "self", ".", "out_layers", ".", "append", "(", "(", "weight", ",", "bias", ")", ")", "\n", "", "", "super", "(", "TFAdaptiveSoftmaxMask", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit": [[99, 105], ["tensorflow.einsum", "tensorflow.einsum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_logit", "(", "x", ",", "W", ",", "b", ",", "proj", "=", "None", ")", ":", "\n", "        ", "y", "=", "x", "\n", "if", "proj", "is", "not", "None", ":", "\n", "            ", "y", "=", "tf", ".", "einsum", "(", "'ibd,ed->ibe'", ",", "y", ",", "proj", ")", "\n", "", "return", "tf", ".", "einsum", "(", "'ibd,nd->ibn'", ",", "y", ",", "W", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._gather_logprob": [[106, 112], ["modeling_tf_utils.shape_list", "tensorflow.range", "tensorflow.stack", "tensorflow.gather_nd"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "@", "staticmethod", "\n", "def", "_gather_logprob", "(", "logprob", ",", "target", ")", ":", "\n", "        ", "lp_size", "=", "shape_list", "(", "logprob", ")", "\n", "r", "=", "tf", ".", "range", "(", "lp_size", "[", "0", "]", ")", "\n", "idx", "=", "tf", ".", "stack", "(", "[", "r", ",", "target", "]", ",", "1", ")", "\n", "return", "tf", ".", "gather_nd", "(", "logprob", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.call": [[113, 176], ["tensorflow.get_variable", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit", "tensorflow.nn.log_softmax", "modeling_tf_utils.shape_list", "tensorflow.zeros", "range", "tensorflow.concat", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_loss", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask.add_metric", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "len", "tensorflow.reduce_mean", "tensorflow.zeros_initializer", "tensorflow.where", "tensorflow.concat", "tensorflow.concat", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit", "tensorflow.nn.log_softmax", "tensorflow.concat.append", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit", "tensorflow.nn.log_softmax", "tensorflow.concat.append", "tensorflow.scatter_nd", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._gather_logprob", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._gather_logprob", "tensorflow.cast", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._logit", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._gather_logprob", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_transfo_xl_utilities.TFAdaptiveSoftmaxMask._gather_logprob", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "return_mean", "=", "True", ",", "training", "=", "False", ")", ":", "\n", "        ", "hidden", ",", "target", "=", "inputs", "\n", "head_logprob", "=", "0", "\n", "if", "self", ".", "n_clusters", "==", "0", ":", "\n", "            ", "softmax_b", "=", "tf", ".", "get_variable", "(", "'bias'", ",", "[", "self", ".", "config", ".", "vocab_size", "]", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "output", "=", "self", ".", "_logit", "(", "hidden", ",", "self", ".", "out_layers", "[", "0", "]", "[", "0", "]", ",", "self", ".", "out_layers", "[", "0", "]", "[", "1", "]", ",", "self", ".", "out_projs", "[", "0", "]", ")", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "labels", "=", "target", ",", "logits", "=", "output", ")", "\n", "", "out", "=", "tf", ".", "nn", ".", "log_softmax", "(", "output", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "hidden_sizes", "=", "shape_list", "(", "hidden", ")", "\n", "out", "=", "[", "]", "\n", "loss", "=", "tf", ".", "zeros", "(", "hidden_sizes", "[", ":", "2", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "if", "target", "is", "not", "None", ":", "\n", "                    ", "mask", "=", "(", "target", ">=", "l_idx", ")", "&", "(", "target", "<", "r_idx", ")", "\n", "mask_idx", "=", "tf", ".", "where", "(", "mask", ")", "\n", "cur_target", "=", "tf", ".", "boolean_mask", "(", "target", ",", "mask", ")", "-", "l_idx", "\n", "\n", "", "if", "self", ".", "div_val", "==", "1", ":", "\n", "                    ", "cur_W", "=", "self", ".", "out_layers", "[", "0", "]", "[", "0", "]", "[", "l_idx", ":", "r_idx", "]", "\n", "cur_b", "=", "self", ".", "out_layers", "[", "0", "]", "[", "1", "]", "[", "l_idx", ":", "r_idx", "]", "\n", "", "else", ":", "\n", "                    ", "cur_W", "=", "self", ".", "out_layers", "[", "i", "]", "[", "0", "]", "\n", "cur_b", "=", "self", ".", "out_layers", "[", "i", "]", "[", "1", "]", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "cur_W", "=", "tf", ".", "concat", "(", "[", "cur_W", ",", "self", ".", "cluster_weight", "]", ",", "0", ")", "\n", "cur_b", "=", "tf", ".", "concat", "(", "[", "cur_b", ",", "self", ".", "cluster_bias", "]", ",", "0", ")", "\n", "\n", "head_logit", "=", "self", ".", "_logit", "(", "hidden", ",", "cur_W", ",", "cur_b", ",", "self", ".", "out_projs", "[", "0", "]", ")", "\n", "head_logprob", "=", "tf", ".", "nn", ".", "log_softmax", "(", "head_logit", ")", "\n", "out", ".", "append", "(", "head_logprob", "[", "...", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", ")", "\n", "if", "target", "is", "not", "None", ":", "\n", "                        ", "cur_head_logprob", "=", "tf", ".", "boolean_mask", "(", "head_logprob", ",", "mask", ")", "\n", "cur_logprob", "=", "self", ".", "_gather_logprob", "(", "cur_head_logprob", ",", "cur_target", ")", "\n", "", "", "else", ":", "\n", "                    ", "tail_logit", "=", "self", ".", "_logit", "(", "hidden", ",", "cur_W", ",", "cur_b", ",", "self", ".", "out_projs", "[", "i", "]", ")", "\n", "tail_logprob", "=", "tf", ".", "nn", ".", "log_softmax", "(", "tail_logit", ")", "\n", "cluster_prob_idx", "=", "self", ".", "cutoffs", "[", "0", "]", "+", "i", "-", "1", "# No probability for the head cluster", "\n", "logprob_i", "=", "head_logprob", "[", "...", ",", "cluster_prob_idx", ",", "None", "]", "+", "tail_logprob", "\n", "out", ".", "append", "(", "logprob_i", ")", "\n", "if", "target", "is", "not", "None", ":", "\n", "                        ", "cur_head_logprob", "=", "tf", ".", "boolean_mask", "(", "head_logprob", ",", "mask", ")", "\n", "cur_tail_logprob", "=", "tf", ".", "boolean_mask", "(", "tail_logprob", ",", "mask", ")", "\n", "cur_logprob", "=", "self", ".", "_gather_logprob", "(", "cur_tail_logprob", ",", "cur_target", ")", "\n", "cur_logprob", "+=", "cur_head_logprob", "[", ":", ",", "self", ".", "cutoff_ends", "[", "1", "]", "+", "i", "-", "1", "]", "\n", "", "", "if", "target", "is", "not", "None", ":", "\n", "                    ", "loss", "+=", "tf", ".", "scatter_nd", "(", "mask_idx", ",", "-", "cur_logprob", ",", "tf", ".", "cast", "(", "shape_list", "(", "loss", ")", ",", "dtype", "=", "tf", ".", "int64", ")", ")", "\n", "", "", "out", "=", "tf", ".", "concat", "(", "out", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "if", "target", "is", "not", "None", ":", "\n", "            ", "if", "return_mean", ":", "\n", "                ", "loss", "=", "tf", ".", "reduce_mean", "(", "loss", ")", "\n", "# Add the training-time loss value to the layer using `self.add_loss()`.", "\n", "", "self", ".", "add_loss", "(", "loss", ")", "\n", "\n", "# Log the loss as a metric (we could log arbitrary metrics,", "\n", "# including different metrics for training and inference.", "\n", "self", ".", "add_metric", "(", "loss", ",", "name", "=", "self", ".", "name", ",", "aggregation", "=", "'mean'", "if", "return_mean", "else", "''", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertEmbeddings.__init__": [[163, 170], ["transformers.modeling_bert.BertEmbeddings.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AlbertEmbeddings", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "embedding_size", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "embedding_size", ")", "\n", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "embedding_size", ")", "\n", "self", ".", "LayerNorm", "=", "torch", ".", "nn", ".", "LayerNorm", "(", "config", ".", "embedding_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertAttention.__init__": [[173, 184], ["transformers.modeling_bert.BertSelfAttention.__init__", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "set"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AlbertAttention", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "hidden_size", "=", "config", ".", "hidden_size", "\n", "self", ".", "attention_head_size", "=", "config", ".", "hidden_size", "//", "config", ".", "num_attention_heads", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertAttention.prune_heads": [[185, 207], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "transformers.modeling_bert.prune_linear_layer", "transformers.modeling_bert.prune_linear_layer", "transformers.modeling_bert.prune_linear_layer", "transformers.modeling_bert.prune_linear_layer", "modeling_albert.AlbertAttention.pruned_heads.union", "len", "set", "len", "sum", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_linear_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "# Convert to set and emove already pruned heads", "\n", "for", "head", "in", "heads", ":", "\n", "# Compute how many pruned heads are before the head and move the index accordingly", "\n", "            ", "head", "=", "head", "-", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "\n", "# Prune linear layers", "\n", "self", ".", "query", "=", "prune_linear_layer", "(", "self", ".", "query", ",", "index", ")", "\n", "self", ".", "key", "=", "prune_linear_layer", "(", "self", ".", "key", ",", "index", ")", "\n", "self", ".", "value", "=", "prune_linear_layer", "(", "self", ".", "value", ",", "index", ")", "\n", "self", ".", "dense", "=", "prune_linear_layer", "(", "self", ".", "dense", ",", "index", ",", "dim", "=", "1", ")", "\n", "\n", "# Update hyper params and store pruned heads", "\n", "self", ".", "num_attention_heads", "=", "self", ".", "num_attention_heads", "-", "len", "(", "heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "attention_head_size", "*", "self", ".", "num_attention_heads", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertAttention.forward": [[208, 250], ["modeling_albert.AlbertAttention.query", "modeling_albert.AlbertAttention.key", "modeling_albert.AlbertAttention.value", "modeling_albert.AlbertAttention.transpose_for_scores", "modeling_albert.AlbertAttention.transpose_for_scores", "modeling_albert.AlbertAttention.transpose_for_scores", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "modeling_albert.AlbertAttention.dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "context_layer.permute().contiguous.permute().contiguous.permute().contiguous", "context_layer.permute().contiguous.permute().contiguous.view", "modeling_albert.AlbertAttention.dense.weight.t().view().to", "modeling_albert.AlbertAttention.dense.bias.to", "modeling_albert.AlbertAttention.dropout", "modeling_albert.AlbertAttention.LayerNorm", "modeling_albert.AlbertAttention.transpose", "math.sqrt", "torch.Softmax", "torch.Softmax", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "context_layer.permute().contiguous.permute().contiguous.permute", "context_layer.permute().contiguous.permute().contiguous.size", "modeling_albert.AlbertAttention.dense.weight.t().view", "modeling_albert.AlbertAttention.dense.weight.t"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_albert.TFAlbertSelfAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "input_ids", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "input_ids", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "input_ids", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "            ", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attention_probs", "=", "attention_probs", "*", "head_mask", "\n", "\n", "", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "reshaped_context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "\n", "\n", "# Should find a better way to do this", "\n", "w", "=", "self", ".", "dense", ".", "weight", ".", "t", "(", ")", ".", "view", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ",", "self", ".", "hidden_size", ")", ".", "to", "(", "context_layer", ".", "dtype", ")", "\n", "b", "=", "self", ".", "dense", ".", "bias", ".", "to", "(", "context_layer", ".", "dtype", ")", "\n", "\n", "projected_context_layer", "=", "torch", ".", "einsum", "(", "\"bfnd,ndh->bfh\"", ",", "context_layer", ",", "w", ")", "+", "b", "\n", "projected_context_layer_dropout", "=", "self", ".", "dropout", "(", "projected_context_layer", ")", "\n", "layernormed_context_layer", "=", "self", ".", "LayerNorm", "(", "input_ids", "+", "projected_context_layer_dropout", ")", "\n", "return", "(", "layernormed_context_layer", ",", "attention_probs", ")", "if", "self", ".", "output_attentions", "else", "(", "layernormed_context_layer", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertLayer.__init__": [[253, 262], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "modeling_albert.AlbertAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AlbertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "full_layer_layer_norm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "attention", "=", "AlbertAttention", "(", "config", ")", "\n", "self", ".", "ffn", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "self", ".", "ffn_output", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertLayer.forward": [[263, 271], ["modeling_albert.AlbertLayer.attention", "modeling_albert.AlbertLayer.ffn", "modeling_albert.AlbertLayer.activation", "modeling_albert.AlbertLayer.ffn_output", "modeling_albert.AlbertLayer.full_layer_layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "attention_output", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", ")", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "attention_output", "[", "0", "]", ")", "\n", "ffn_output", "=", "self", ".", "activation", "(", "ffn_output", ")", "\n", "ffn_output", "=", "self", ".", "ffn_output", "(", "ffn_output", ")", "\n", "hidden_states", "=", "self", ".", "full_layer_layer_norm", "(", "ffn_output", "+", "attention_output", "[", "0", "]", ")", "\n", "\n", "return", "(", "hidden_states", ",", ")", "+", "attention_output", "[", "1", ":", "]", "# add attentions if we output them", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertLayerGroup.__init__": [[274, 280], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "modeling_albert.AlbertLayer", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AlbertLayerGroup", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "albert_layers", "=", "nn", ".", "ModuleList", "(", "[", "AlbertLayer", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "inner_group_num", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertLayerGroup.forward": [[281, 301], ["enumerate", "albert_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "layer_hidden_states", "=", "(", ")", "\n", "layer_attentions", "=", "(", ")", "\n", "\n", "for", "layer_index", ",", "albert_layer", "in", "enumerate", "(", "self", ".", "albert_layers", ")", ":", "\n", "            ", "layer_output", "=", "albert_layer", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "layer_index", "]", ")", "\n", "hidden_states", "=", "layer_output", "[", "0", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "layer_attentions", "=", "layer_attentions", "+", "(", "layer_output", "[", "1", "]", ",", ")", "\n", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "layer_hidden_states", "=", "layer_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "layer_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "layer_attentions", ",", ")", "\n", "", "return", "outputs", "# last-layer hidden state, (layer hidden states), (layer attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertTransformer.__init__": [[304, 312], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "modeling_albert.AlbertLayerGroup", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AlbertTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "embedding_hidden_mapping_in", "=", "nn", ".", "Linear", "(", "config", ".", "embedding_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "albert_layer_groups", "=", "nn", ".", "ModuleList", "(", "[", "AlbertLayerGroup", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_groups", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertTransformer.forward": [[313, 347], ["modeling_albert.AlbertTransformer.embedding_hidden_mapping_in", "range", "int", "int", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "embedding_hidden_mapping_in", "(", "hidden_states", ")", "\n", "\n", "all_attentions", "=", "(", ")", "\n", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "(", "hidden_states", ",", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "config", ".", "num_hidden_layers", ")", ":", "\n", "# Number of layers in a hidden group", "\n", "            ", "layers_per_group", "=", "int", "(", "self", ".", "config", ".", "num_hidden_layers", "/", "self", ".", "config", ".", "num_hidden_groups", ")", "\n", "\n", "# Index of the hidden group", "\n", "group_idx", "=", "int", "(", "i", "/", "(", "self", ".", "config", ".", "num_hidden_layers", "/", "self", ".", "config", ".", "num_hidden_groups", ")", ")", "\n", "\n", "# Index of the layer inside the group", "\n", "layer_idx", "=", "int", "(", "i", "-", "group_idx", "*", "layers_per_group", ")", "\n", "\n", "layer_group_output", "=", "self", ".", "albert_layer_groups", "[", "group_idx", "]", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "group_idx", "*", "layers_per_group", ":", "(", "group_idx", "+", "1", ")", "*", "layers_per_group", "]", ")", "\n", "hidden_states", "=", "layer_group_output", "[", "0", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "layer_group_output", "[", "-", "1", "]", "\n", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "\n", "", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertPreTrainedModel._init_weights": [[358, 370], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ")", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertModel.__init__": [[462, 472], ["transformers.modeling_utils.PreTrainedModel.__init__", "modeling_albert.AlbertEmbeddings", "modeling_albert.AlbertTransformer", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "modeling_albert.AlbertModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AlbertModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "embeddings", "=", "AlbertEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "AlbertTransformer", "(", "config", ")", "\n", "self", ".", "pooler", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "pooler_activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertModel.get_input_embeddings": [[473, 475], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertModel.set_input_embeddings": [[476, 478], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "embeddings", ".", "word_embeddings", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertModel._resize_token_embeddings": [[479, 484], ["modeling_albert.AlbertModel._get_resized_embeddings"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel._get_resized_embeddings"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "old_embeddings", "=", "self", ".", "embeddings", ".", "word_embeddings", "\n", "new_embeddings", "=", "self", ".", "_get_resized_embeddings", "(", "old_embeddings", ",", "new_num_tokens", ")", "\n", "self", ".", "embeddings", ".", "word_embeddings", "=", "new_embeddings", "\n", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertModel._prune_heads": [[485, 502], ["heads_to_prune.items", "int", "int", "modeling_albert.AlbertModel.encoder.albert_layer_groups[].albert_layers[].attention.prune_heads"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            ALBERT has a different architecture in that its layers are shared across groups, which then has inner groups.\n            If an ALBERT model has 12 hidden layers and 2 hidden groups, with two inner groups, there\n            is a total of 4 different layers.\n\n            These layers are flattened: the indices [0,1] correspond to the two inner groups of the first hidden layer,\n            while [2,3] correspond to the two inner groups of the second hidden layer.\n\n            Any layer with in index other than [0,1,2,3] will result in an error.\n            See base class PreTrainedModel for more information about head pruning\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "group_idx", "=", "int", "(", "layer", "/", "self", ".", "config", ".", "inner_group_num", ")", "\n", "inner_group_idx", "=", "int", "(", "layer", "-", "group_idx", "*", "self", ".", "config", ".", "inner_group_num", ")", "\n", "self", ".", "encoder", ".", "albert_layer_groups", "[", "group_idx", "]", ".", "albert_layers", "[", "inner_group_idx", "]", ".", "attention", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertModel.forward": [[503, 547], ["torch.ones.unsqueeze().unsqueeze", "torch.ones.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "modeling_albert.AlbertModel.embeddings", "modeling_albert.AlbertModel.encoder", "modeling_albert.AlbertModel.pooler_activation", "ValueError", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "modeling_albert.AlbertModel.pooler", "input_ids.size", "torch.ones.unsqueeze", "torch.ones.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "ValueError", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "inputs_embeds.size", "modeling_albert.AlbertModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_albert.AlbertModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "\n", "inputs_embeds", "=", "None", ")", ":", "\n", "\n", "        ", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "\n", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones", "(", "input_shape", ",", "device", "=", "device", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros", "(", "input_shape", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "num_hidden_layers", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "num_hidden_layers", "\n", "\n", "", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "encoder_outputs", "=", "self", ".", "encoder", "(", "embedding_output", ",", "\n", "extended_attention_mask", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "\n", "sequence_output", "=", "encoder_outputs", "[", "0", "]", "\n", "\n", "pooled_output", "=", "self", ".", "pooler_activation", "(", "self", ".", "pooler", "(", "sequence_output", "[", ":", ",", "0", "]", ")", ")", "\n", "\n", "outputs", "=", "(", "sequence_output", ",", "pooled_output", ")", "+", "encoder_outputs", "[", "1", ":", "]", "# add hidden_states and attentions if they are here", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertMLMHead.__init__": [[549, 557], ["torch.Module.__init__", "torch.LayerNorm", "torch.LayerNorm", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AlbertMLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "embedding_size", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "config", ".", "vocab_size", ")", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "embedding_size", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "config", ".", "embedding_size", ",", "config", ".", "vocab_size", ")", "\n", "self", ".", "activation", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertMLMHead.forward": [[558, 567], ["modeling_albert.AlbertMLMHead.dense", "modeling_albert.AlbertMLMHead.activation", "modeling_albert.AlbertMLMHead.LayerNorm", "modeling_albert.AlbertMLMHead.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "activation", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "decoder", "(", "hidden_states", ")", "\n", "\n", "prediction_scores", "=", "hidden_states", "+", "self", ".", "bias", "\n", "\n", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertForMaskedLM.__init__": [[592, 600], ["transformers.modeling_utils.PreTrainedModel.__init__", "modeling_albert.AlbertModel", "modeling_albert.AlbertMLMHead", "modeling_albert.AlbertForMaskedLM.init_weights", "modeling_albert.AlbertForMaskedLM.tie_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertForMaskedLM.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AlbertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "albert", "=", "AlbertModel", "(", "config", ")", "\n", "self", ".", "predictions", "=", "AlbertMLMHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertForMaskedLM.tie_weights": [[601, 607], ["modeling_albert.AlbertForMaskedLM._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "predictions", ".", "decoder", ",", "\n", "self", ".", "albert", ".", "embeddings", ".", "word_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertForMaskedLM.get_output_embeddings": [[608, 610], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "predictions", ".", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertForMaskedLM.forward": [[611, 632], ["modeling_albert.AlbertForMaskedLM.albert", "modeling_albert.AlbertForMaskedLM.predictions", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_albert.AlbertForMaskedLM.view", "masked_lm_labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "masked_lm_labels", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "albert", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", "\n", ")", "\n", "sequence_outputs", "=", "outputs", "[", "0", "]", "\n", "\n", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_outputs", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "masked_lm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertForSequenceClassification.__init__": [[668, 677], ["transformers.modeling_utils.PreTrainedModel.__init__", "modeling_albert.AlbertModel", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "modeling_albert.AlbertForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AlbertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "albert", "=", "AlbertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertForSequenceClassification.forward": [[678, 708], ["modeling_albert.AlbertForSequenceClassification.albert", "modeling_albert.AlbertForSequenceClassification.dropout", "modeling_albert.AlbertForSequenceClassification.classifier", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_albert.AlbertForSequenceClassification.view", "labels.view", "modeling_albert.AlbertForSequenceClassification.view", "labels.view"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "albert", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", "\n", ")", "\n", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertForQuestionAnswering.__init__": [[755, 763], ["transformers.modeling_utils.PreTrainedModel.__init__", "modeling_albert.AlbertModel", "torch.Linear", "torch.Linear", "modeling_albert.AlbertForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "AlbertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "albert", "=", "AlbertModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.AlbertForQuestionAnswering.forward": [[764, 802], ["modeling_albert.AlbertForQuestionAnswering.albert", "modeling_albert.AlbertForQuestionAnswering.qa_outputs", "modeling_albert.AlbertForQuestionAnswering.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "\n", "inputs_embeds", "=", "None", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ")", ":", "\n", "\n", "        ", "outputs", "=", "self", ".", "albert", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", "\n", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), start_logits, end_logits, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_albert.load_tf_weights_in_albert": [[44, 157], ["os.path.abspath", "logger.info", "tf.train.list_variables", "zip", "zip", "logger.info", "tf.train.load_variable", "names.append", "arrays.append", "print", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.replace", "name.split.split", "print", "torch.from_numpy", "torch.from_numpy", "logger.error", "logger.info", "re.fullmatch", "getattr", "len", "re.split", "getattr", "len", "int", "np.transpose", "name.split.split", "getattr", "getattr", "getattr", "getattr", "logger.info"], "function", ["None"], ["def", "load_tf_weights_in_albert", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model.\"\"\"", "\n", "try", ":", "\n", "        ", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "tf_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Converting TensorFlow checkpoint from {}\"", ".", "format", "(", "tf_path", ")", ")", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "names", "=", "[", "]", "\n", "arrays", "=", "[", "]", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "arrays", ".", "append", "(", "array", ")", "\n", "\n", "", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "arrays", ")", ":", "\n", "        ", "print", "(", "name", ")", "\n", "\n", "", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "arrays", ")", ":", "\n", "        ", "original_name", "=", "name", "\n", "\n", "# If saved from the TF HUB module", "\n", "name", "=", "name", ".", "replace", "(", "\"module/\"", ",", "\"\"", ")", "\n", "\n", "# Renaming and simplifying", "\n", "name", "=", "name", ".", "replace", "(", "\"ffn_1\"", ",", "\"ffn\"", ")", "\n", "name", "=", "name", ".", "replace", "(", "\"bert/\"", ",", "\"albert/\"", ")", "\n", "name", "=", "name", ".", "replace", "(", "\"attention_1\"", ",", "\"attention\"", ")", "\n", "name", "=", "name", ".", "replace", "(", "\"transform/\"", ",", "\"\"", ")", "\n", "name", "=", "name", ".", "replace", "(", "\"LayerNorm_1\"", ",", "\"full_layer_layer_norm\"", ")", "\n", "name", "=", "name", ".", "replace", "(", "\"LayerNorm\"", ",", "\"attention/LayerNorm\"", ")", "\n", "name", "=", "name", ".", "replace", "(", "\"transformer/\"", ",", "\"\"", ")", "\n", "\n", "# The feed forward layer had an 'intermediate' step which has been abstracted away", "\n", "name", "=", "name", ".", "replace", "(", "\"intermediate/dense/\"", ",", "\"\"", ")", "\n", "name", "=", "name", ".", "replace", "(", "\"ffn/intermediate/output/dense/\"", ",", "\"ffn_output/\"", ")", "\n", "\n", "# ALBERT attention was split between self and output which have been abstracted away", "\n", "name", "=", "name", ".", "replace", "(", "\"/output/\"", ",", "\"/\"", ")", "\n", "name", "=", "name", ".", "replace", "(", "\"/self/\"", ",", "\"/\"", ")", "\n", "\n", "# The pooler is a linear layer", "\n", "name", "=", "name", ".", "replace", "(", "\"pooler/dense\"", ",", "\"pooler\"", ")", "\n", "\n", "# The classifier was simplified to predictions from cls/predictions", "\n", "name", "=", "name", ".", "replace", "(", "\"cls/predictions\"", ",", "\"predictions\"", ")", "\n", "name", "=", "name", ".", "replace", "(", "\"predictions/attention\"", ",", "\"predictions\"", ")", "\n", "\n", "# Naming was changed to be more explicit", "\n", "name", "=", "name", ".", "replace", "(", "\"embeddings/attention\"", ",", "\"embeddings\"", ")", "\n", "name", "=", "name", ".", "replace", "(", "\"inner_group_\"", ",", "\"albert_layers/\"", ")", "\n", "name", "=", "name", ".", "replace", "(", "\"group_\"", ",", "\"albert_layer_groups/\"", ")", "\n", "\n", "# Classifier", "\n", "if", "len", "(", "name", ".", "split", "(", "\"/\"", ")", ")", "==", "1", "and", "(", "\"output_bias\"", "in", "name", "or", "\"output_weights\"", "in", "name", ")", ":", "\n", "            ", "name", "=", "\"classifier/\"", "+", "name", "\n", "\n", "# No ALBERT model currently handles the next sentence prediction task ", "\n", "", "if", "\"seq_relationship\"", "in", "name", ":", "\n", "            ", "continue", "\n", "\n", "", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "\n", "# Ignore the gradients applied by the LAMB/ADAM optimizers.", "\n", "if", "\"adam_m\"", "in", "name", "or", "\"adam_v\"", "in", "name", "or", "\"global_step\"", "in", "name", ":", "\n", "            ", "logger", ".", "info", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "\n", "", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+_\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'_(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "\n", "", "if", "l", "[", "0", "]", "==", "'kernel'", "or", "l", "[", "0", "]", "==", "'gamma'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_bias'", "or", "l", "[", "0", "]", "==", "'beta'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_weights'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'squad'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'classifier'", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "\n", "", "", "if", "m_name", "[", "-", "11", ":", "]", "==", "'_embeddings'", ":", "\n", "            ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "m_name", "==", "'kernel'", ":", "\n", "            ", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "print", "(", "\"Initialize PyTorch weight {} from {}\"", ".", "format", "(", "name", ",", "original_name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFAttention.__init__": [[59, 76], ["super().__init__", "modeling_tf_utils.TFConv1D", "modeling_tf_utils.TFConv1D", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.Dropout", "set"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nx", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "n_state", "=", "nx", "# in Attention: n_state=768 (nx=n_embd)", "\n", "# [switch nx => n_state from Block to Attention to keep identical to TF implem]", "\n", "assert", "n_state", "%", "config", ".", "n_head", "==", "0", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "split_size", "=", "n_state", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "c_attn", "=", "TFConv1D", "(", "n_state", "*", "3", ",", "nx", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_attn'", ")", "\n", "self", ".", "c_proj", "=", "TFConv1D", "(", "n_state", ",", "nx", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_proj'", ")", "\n", "self", ".", "attn_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "attn_pdrop", ")", "\n", "self", ".", "resid_dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFAttention.prune_heads": [[77, 79], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFAttention.causal_attention_mask": [[80, 89], ["tensorflow.range", "tensorflow.cast", "tensorflow.range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "causal_attention_mask", "(", "nd", ",", "ns", ",", "dtype", ")", ":", "\n", "        ", "\"\"\"1's in the lower triangle, counting from the lower right corner.\n        Same as tf.matrix_band_part(tf.ones([nd, ns]), -1, ns-nd), but doesn't produce garbage on TPUs.\n        \"\"\"", "\n", "i", "=", "tf", ".", "range", "(", "nd", ")", "[", ":", ",", "None", "]", "\n", "j", "=", "tf", ".", "range", "(", "ns", ")", "\n", "m", "=", "i", ">=", "j", "-", "ns", "+", "nd", "\n", "return", "tf", ".", "cast", "(", "m", ",", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFAttention._attn": [[90, 119], ["tensorflow.matmul", "modeling_tf_utils.shape_list", "modeling_tf_gpt2.TFAttention.causal_attention_mask", "tensorflow.reshape", "tensorflow.nn.softmax", "modeling_tf_gpt2.TFAttention.attn_dropout", "tensorflow.cast", "tensorflow.matmul", "outputs.append", "tensorflow.math.sqrt", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFAttention.causal_attention_mask", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "_attn", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "q", ",", "k", ",", "v", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "# q, k, v have shape [batch, heads, sequence, features]", "\n", "w", "=", "tf", ".", "matmul", "(", "q", ",", "k", ",", "transpose_b", "=", "True", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "dk", "=", "tf", ".", "cast", "(", "shape_list", "(", "k", ")", "[", "-", "1", "]", ",", "tf", ".", "float32", ")", "# scale attention_scores", "\n", "w", "=", "w", "/", "tf", ".", "math", ".", "sqrt", "(", "dk", ")", "\n", "\n", "# w has shape [batch, heads, dst_sequence, src_sequence], where information flows from src to dst.", "\n", "", "_", ",", "_", ",", "nd", ",", "ns", "=", "shape_list", "(", "w", ")", "\n", "b", "=", "self", ".", "causal_attention_mask", "(", "nd", ",", "ns", ",", "dtype", "=", "w", ".", "dtype", ")", "\n", "b", "=", "tf", ".", "reshape", "(", "b", ",", "[", "1", ",", "1", ",", "nd", ",", "ns", "]", ")", "\n", "w", "=", "w", "*", "b", "-", "1e4", "*", "(", "1", "-", "b", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask", "\n", "            ", "w", "=", "w", "+", "attention_mask", "\n", "\n", "", "w", "=", "tf", ".", "nn", ".", "softmax", "(", "w", ",", "axis", "=", "-", "1", ")", "\n", "w", "=", "self", ".", "attn_dropout", "(", "w", ",", "training", "=", "training", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "w", "=", "w", "*", "head_mask", "\n", "\n", "", "outputs", "=", "[", "tf", ".", "matmul", "(", "w", ",", "v", ")", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "w", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFAttention.merge_heads": [[120, 125], ["tensorflow.transpose", "modeling_tf_utils.shape_list", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "merge_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "1", ",", "3", "]", ")", "\n", "x_shape", "=", "shape_list", "(", "x", ")", "\n", "new_x_shape", "=", "x_shape", "[", ":", "-", "2", "]", "+", "[", "x_shape", "[", "-", "2", "]", "*", "x_shape", "[", "-", "1", "]", "]", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "new_x_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFAttention.split_heads": [[126, 131], ["modeling_tf_utils.shape_list", "tensorflow.reshape", "tensorflow.transpose"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "split_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_shape", "=", "shape_list", "(", "x", ")", "\n", "new_x_shape", "=", "x_shape", "[", ":", "-", "1", "]", "+", "[", "self", ".", "n_head", ",", "x_shape", "[", "-", "1", "]", "//", "self", ".", "n_head", "]", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "new_x_shape", ")", "\n", "return", "tf", ".", "transpose", "(", "x", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "# (batch, head, seq_length, head_features)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFAttention.call": [[132, 155], ["modeling_tf_gpt2.TFAttention.c_attn", "tensorflow.split", "modeling_tf_gpt2.TFAttention.split_heads", "modeling_tf_gpt2.TFAttention.split_heads", "modeling_tf_gpt2.TFAttention.split_heads", "tensorflow.stack", "modeling_tf_gpt2.TFAttention._attn", "modeling_tf_gpt2.TFAttention.merge_heads", "modeling_tf_gpt2.TFAttention.c_proj", "modeling_tf_gpt2.TFAttention.resid_dropout", "tensorflow.unstack", "tensorflow.concat", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention._attn", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.merge_heads"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "x", "=", "self", ".", "c_attn", "(", "x", ")", "\n", "query", ",", "key", ",", "value", "=", "tf", ".", "split", "(", "x", ",", "3", ",", "axis", "=", "2", ")", "\n", "query", "=", "self", ".", "split_heads", "(", "query", ")", "\n", "key", "=", "self", ".", "split_heads", "(", "key", ")", "\n", "value", "=", "self", ".", "split_heads", "(", "value", ")", "\n", "if", "layer_past", "is", "not", "None", ":", "\n", "            ", "past_key", ",", "past_value", "=", "tf", ".", "unstack", "(", "layer_past", ",", "axis", "=", "1", ")", "\n", "key", "=", "tf", ".", "concat", "(", "[", "past_key", ",", "key", "]", ",", "axis", "=", "-", "2", ")", "\n", "value", "=", "tf", ".", "concat", "(", "[", "past_value", ",", "value", "]", ",", "axis", "=", "-", "2", ")", "\n", "", "present", "=", "tf", ".", "stack", "(", "[", "key", ",", "value", "]", ",", "axis", "=", "1", ")", "\n", "\n", "attn_outputs", "=", "self", ".", "_attn", "(", "[", "query", ",", "key", ",", "value", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "a", "=", "self", ".", "merge_heads", "(", "a", ")", "\n", "a", "=", "self", ".", "c_proj", "(", "a", ")", "\n", "a", "=", "self", ".", "resid_dropout", "(", "a", ",", "training", "=", "training", ")", "\n", "\n", "outputs", "=", "[", "a", ",", "present", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "# a, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFMLP.__init__": [[158, 165], ["super().__init__", "modeling_tf_utils.TFConv1D", "modeling_tf_utils.TFConv1D", "tensorflow.keras.layers.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_state", ",", "config", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFMLP", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "c_fc", "=", "TFConv1D", "(", "n_state", ",", "nx", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_fc'", ")", "\n", "self", ".", "c_proj", "=", "TFConv1D", "(", "nx", ",", "n_state", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'c_proj'", ")", "\n", "self", ".", "act", "=", "gelu", "\n", "self", ".", "dropout", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFMLP.call": [[166, 171], ["modeling_tf_gpt2.TFMLP.act", "modeling_tf_gpt2.TFMLP.c_proj", "modeling_tf_gpt2.TFMLP.dropout", "modeling_tf_gpt2.TFMLP.c_fc"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "training", "=", "False", ")", ":", "\n", "        ", "h", "=", "self", ".", "act", "(", "self", ".", "c_fc", "(", "x", ")", ")", "\n", "h2", "=", "self", ".", "c_proj", "(", "h", ")", "\n", "h2", "=", "self", ".", "dropout", "(", "h2", ",", "training", "=", "training", ")", "\n", "return", "h2", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFBlock.__init__": [[174, 181], ["super().__init__", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_gpt2.TFAttention", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_gpt2.TFMLP"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFBlock", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "ln_1", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "name", "=", "'ln_1'", ")", "\n", "self", ".", "attn", "=", "TFAttention", "(", "nx", ",", "n_ctx", ",", "config", ",", "scale", ",", "name", "=", "'attn'", ")", "\n", "self", ".", "ln_2", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "name", "=", "'ln_2'", ")", "\n", "self", ".", "mlp", "=", "TFMLP", "(", "4", "*", "nx", ",", "config", ",", "name", "=", "'mlp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFBlock.call": [[182, 196], ["modeling_tf_gpt2.TFBlock.ln_1", "modeling_tf_gpt2.TFBlock.attn", "modeling_tf_gpt2.TFBlock.ln_2", "modeling_tf_gpt2.TFBlock.mlp"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "training", "=", "False", ")", ":", "\n", "        ", "x", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "=", "inputs", "\n", "\n", "a", "=", "self", ".", "ln_1", "(", "x", ")", "\n", "output_attn", "=", "self", ".", "attn", "(", "[", "a", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "]", ",", "training", "=", "training", ")", "\n", "a", "=", "output_attn", "[", "0", "]", "# output_attn: a, present, (attentions)", "\n", "x", "=", "x", "+", "a", "\n", "\n", "m", "=", "self", ".", "ln_2", "(", "x", ")", "\n", "m", "=", "self", ".", "mlp", "(", "m", ",", "training", "=", "training", ")", "\n", "x", "=", "x", "+", "m", "\n", "\n", "outputs", "=", "[", "x", "]", "+", "output_attn", "[", "1", ":", "]", "\n", "return", "outputs", "# x, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2MainLayer.__init__": [[199, 221], ["super().__init__", "modeling_tf_utils.TFSharedEmbeddings", "tensorflow.keras.layers.Embedding", "tensorflow.keras.layers.Dropout", "tensorflow.keras.layers.LayerNormalization", "modeling_tf_gpt2.TFBlock", "modeling_tf_utils.get_initializer", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.get_initializer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFGPT2MainLayer", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "num_hidden_layers", "=", "config", ".", "n_layer", "\n", "self", ".", "vocab_size", "=", "config", ".", "vocab_size", "\n", "self", ".", "n_embd", "=", "config", ".", "n_embd", "\n", "\n", "self", ".", "wte", "=", "TFSharedEmbeddings", "(", "config", ".", "vocab_size", ",", "\n", "config", ".", "hidden_size", ",", "\n", "initializer_range", "=", "config", ".", "initializer_range", ",", "\n", "name", "=", "'wte'", ")", "\n", "self", ".", "wpe", "=", "tf", ".", "keras", ".", "layers", ".", "Embedding", "(", "config", ".", "n_positions", ",", "\n", "config", ".", "n_embd", ",", "\n", "embeddings_initializer", "=", "get_initializer", "(", "config", ".", "initializer_range", ")", ",", "\n", "name", "=", "'wpe'", ")", "\n", "self", ".", "drop", "=", "tf", ".", "keras", ".", "layers", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "[", "TFBlock", "(", "config", ".", "n_ctx", ",", "\n", "config", ",", "\n", "scale", "=", "True", ",", "\n", "name", "=", "'h_._{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", "]", "\n", "self", ".", "ln_f", "=", "tf", ".", "keras", ".", "layers", ".", "LayerNormalization", "(", "epsilon", "=", "config", ".", "layer_norm_epsilon", ",", "name", "=", "'ln_f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2MainLayer.get_input_embeddings": [[222, 224], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "wte", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2MainLayer._resize_token_embeddings": [[225, 227], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2MainLayer._prune_heads": [[228, 233], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2MainLayer.call": [[234, 350], ["isinstance", "tensorflow.reshape", "modeling_tf_gpt2.TFGPT2MainLayer.wpe", "modeling_tf_gpt2.TFGPT2MainLayer.drop", "enumerate", "modeling_tf_gpt2.TFGPT2MainLayer.ln_f", "tensorflow.reshape", "isinstance", "ValueError", "tensorflow.cast", "modeling_tf_gpt2.TFGPT2MainLayer.wte", "tensorflow.reshape", "modeling_tf_gpt2.TFGPT2MainLayer.wte", "zip", "block", "tuple", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "tensorflow.reshape", "len", "modeling_tf_utils.shape_list", "tensorflow.range", "tuple.append", "len", "len", "len", "len", "len", "len", "len", "ValueError", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.reshape", "modeling_tf_utils.shape_list", "modeling_tf_utils.shape_list", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "past", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "past", "\n", "attention_mask", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "6", "]", "if", "len", "(", "inputs", ")", ">", "6", "else", "inputs_embeds", "\n", "assert", "len", "(", "inputs", ")", "<=", "7", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "past", "=", "inputs", ".", "get", "(", "'past'", ",", "past", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "7", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "input_ids", ")", "\n", "input_ids", "=", "tf", ".", "reshape", "(", "input_ids", ",", "[", "-", "1", ",", "input_shape", "[", "-", "1", "]", "]", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "past", "is", "None", ":", "\n", "            ", "past_length", "=", "0", "\n", "past", "=", "[", "None", "]", "*", "len", "(", "self", ".", "h", ")", "\n", "", "else", ":", "\n", "            ", "past_length", "=", "shape_list", "(", "past", "[", "0", "]", "[", "0", "]", ")", "[", "-", "2", "]", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "tf", ".", "range", "(", "past_length", ",", "input_shape", "[", "-", "1", "]", "+", "past_length", ",", "dtype", "=", "tf", ".", "int32", ")", "[", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "            ", "attention_mask", "=", "attention_mask", "[", ":", ",", "tf", ".", "newaxis", ",", "tf", ".", "newaxis", ",", ":", "]", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "\n", "attention_mask", "=", "tf", ".", "cast", "(", "attention_mask", ",", "tf", ".", "float32", ")", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "-", "10000.0", "\n", "", "else", ":", "\n", "            ", "attention_mask", "=", "None", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "", "if", "not", "head_mask", "is", "None", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "num_hidden_layers", "\n", "# head_mask = tf.constant([0] * self.num_hidden_layers)", "\n", "\n", "", "position_ids", "=", "tf", ".", "reshape", "(", "position_ids", ",", "[", "-", "1", ",", "shape_list", "(", "position_ids", ")", "[", "-", "1", "]", "]", ")", "\n", "\n", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "wte", "(", "input_ids", ",", "mode", "=", "'embedding'", ")", "\n", "", "position_embeds", "=", "self", ".", "wpe", "(", "position_ids", ")", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "tf", ".", "reshape", "(", "token_type_ids", ",", "[", "-", "1", ",", "shape_list", "(", "token_type_ids", ")", "[", "-", "1", "]", "]", ")", "\n", "token_type_embeds", "=", "self", ".", "wte", "(", "token_type_ids", ",", "mode", "=", "'embedding'", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "hidden_states", "=", "inputs_embeds", "+", "position_embeds", "+", "token_type_embeds", "\n", "hidden_states", "=", "self", ".", "drop", "(", "hidden_states", ",", "training", "=", "training", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "[", "shape_list", "(", "hidden_states", ")", "[", "-", "1", "]", "]", "\n", "\n", "presents", "=", "(", ")", "\n", "all_attentions", "=", "[", "]", "\n", "all_hidden_states", "=", "(", ")", "\n", "for", "i", ",", "(", "block", ",", "layer_past", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "h", ",", "past", ")", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "tf", ".", "reshape", "(", "hidden_states", ",", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "block", "(", "[", "hidden_states", ",", "layer_past", ",", "attention_mask", ",", "head_mask", "[", "i", "]", "]", ",", "training", "=", "training", ")", "\n", "\n", "hidden_states", ",", "present", "=", "outputs", "[", ":", "2", "]", "\n", "presents", "=", "presents", "+", "(", "present", ",", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "", "", "hidden_states", "=", "self", ".", "ln_f", "(", "hidden_states", ")", "\n", "\n", "hidden_states", "=", "tf", ".", "reshape", "(", "hidden_states", ",", "output_shape", ")", "\n", "# Add last hidden state", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", "presents", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# let the number of heads free (-1) so we can extract attention even after head pruning", "\n", "            ", "attention_output_shape", "=", "input_shape", "[", ":", "-", "1", "]", "+", "[", "-", "1", "]", "+", "shape_list", "(", "all_attentions", "[", "0", "]", ")", "[", "-", "2", ":", "]", "\n", "all_attentions", "=", "tuple", "(", "tf", ".", "reshape", "(", "t", ",", "attention_output_shape", ")", "for", "t", "in", "all_attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last hidden state, presents, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2Model.__init__": [[462, 465], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_gpt2.TFGPT2MainLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFGPT2Model", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFGPT2MainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2Model.call": [[466, 469], ["modeling_tf_gpt2.TFGPT2Model.transformer"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2LMHeadModel.__init__": [[503, 506], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_gpt2.TFGPT2MainLayer"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFGPT2LMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "self", ".", "transformer", "=", "TFGPT2MainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2LMHeadModel.get_output_embeddings": [[507, 509], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "wte", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2LMHeadModel.call": [[510, 519], ["modeling_tf_gpt2.TFGPT2LMHeadModel.transformer", "modeling_tf_gpt2.TFGPT2LMHeadModel.transformer.wte"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "inputs", ",", "**", "kwargs", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "transformer", ".", "wte", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "# lm_logits, presents, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2DoubleHeadsModel.__init__": [[575, 580], ["modeling_tf_utils.TFPreTrainedModel.__init__", "modeling_tf_gpt2.TFGPT2MainLayer", "modeling_tf_utils.TFSequenceSummary"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TFGPT2DoubleHeadsModel", ",", "self", ")", ".", "__init__", "(", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "config", ".", "num_labels", "=", "1", "\n", "self", ".", "transformer", "=", "TFGPT2MainLayer", "(", "config", ",", "name", "=", "'transformer'", ")", "\n", "self", ".", "multiple_choice_head", "=", "TFSequenceSummary", "(", "config", ",", "initializer_range", "=", "config", ".", "initializer_range", ",", "name", "=", "'multiple_choice_head'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2DoubleHeadsModel.get_output_embeddings": [[581, 583], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "wte", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.TFGPT2DoubleHeadsModel.call": [[584, 635], ["isinstance", "modeling_tf_gpt2.TFGPT2DoubleHeadsModel.transformer", "tensorflow.reshape", "modeling_tf_gpt2.TFGPT2DoubleHeadsModel.transformer.wte", "modeling_tf_gpt2.TFGPT2DoubleHeadsModel.multiple_choice_head", "tensorflow.squeeze", "isinstance", "modeling_tf_utils.shape_list", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "len", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "inputs.get", "modeling_tf_utils.shape_list", "len", "len", "len", "len", "len", "len", "len", "len", "modeling_tf_utils.shape_list"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_utils.shape_list"], ["", "def", "call", "(", "self", ",", "inputs", ",", "past", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "mc_token_ids", "=", "None", ",", "training", "=", "False", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "input_ids", "=", "inputs", "[", "0", "]", "\n", "past", "=", "inputs", "[", "1", "]", "if", "len", "(", "inputs", ")", ">", "1", "else", "past", "\n", "attention_mask", "=", "inputs", "[", "2", "]", "if", "len", "(", "inputs", ")", ">", "2", "else", "attention_mask", "\n", "token_type_ids", "=", "inputs", "[", "3", "]", "if", "len", "(", "inputs", ")", ">", "3", "else", "token_type_ids", "\n", "position_ids", "=", "inputs", "[", "4", "]", "if", "len", "(", "inputs", ")", ">", "4", "else", "position_ids", "\n", "head_mask", "=", "inputs", "[", "5", "]", "if", "len", "(", "inputs", ")", ">", "5", "else", "head_mask", "\n", "inputs_embeds", "=", "inputs", "[", "6", "]", "if", "len", "(", "inputs", ")", ">", "6", "else", "inputs_embeds", "\n", "mc_token_ids", "=", "inputs", "[", "7", "]", "if", "len", "(", "inputs", ")", ">", "7", "else", "mc_token_ids", "\n", "assert", "len", "(", "inputs", ")", "<=", "8", ",", "\"Too many inputs.\"", "\n", "", "elif", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "input_ids", "=", "inputs", ".", "get", "(", "'input_ids'", ")", "\n", "past", "=", "inputs", ".", "get", "(", "'past'", ",", "past", ")", "\n", "attention_mask", "=", "inputs", ".", "get", "(", "'attention_mask'", ",", "attention_mask", ")", "\n", "token_type_ids", "=", "inputs", ".", "get", "(", "'token_type_ids'", ",", "token_type_ids", ")", "\n", "position_ids", "=", "inputs", ".", "get", "(", "'position_ids'", ",", "position_ids", ")", "\n", "head_mask", "=", "inputs", ".", "get", "(", "'head_mask'", ",", "head_mask", ")", "\n", "inputs_embeds", "=", "inputs", ".", "get", "(", "'inputs_embeds'", ",", "inputs_embeds", ")", "\n", "mc_token_ids", "=", "inputs", ".", "get", "(", "'mc_token_ids'", ",", "mc_token_ids", ")", "\n", "assert", "len", "(", "inputs", ")", "<=", "8", ",", "\"Too many inputs.\"", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "inputs", "\n", "\n", "", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shapes", "=", "shape_list", "(", "input_ids", ")", "\n", "", "else", ":", "\n", "            ", "input_shapes", "=", "shape_list", "(", "inputs_embeds", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shapes", "[", "-", "1", "]", "\n", "\n", "flat_input_ids", "=", "tf", ".", "reshape", "(", "input_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "input_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "tf", ".", "reshape", "(", "attention_mask", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "flat_token_type_ids", "=", "tf", ".", "reshape", "(", "token_type_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_position_ids", "=", "tf", ".", "reshape", "(", "position_ids", ",", "(", "-", "1", ",", "seq_length", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "\n", "flat_inputs", "=", "[", "flat_input_ids", ",", "past", ",", "flat_attention_mask", ",", "flat_token_type_ids", ",", "flat_position_ids", ",", "head_mask", ",", "inputs_embeds", "]", "\n", "\n", "transformer_outputs", "=", "self", ".", "transformer", "(", "flat_inputs", ",", "training", "=", "training", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "hidden_states", "=", "tf", ".", "reshape", "(", "hidden_states", ",", "input_shapes", "+", "shape_list", "(", "hidden_states", ")", "[", "-", "1", ":", "]", ")", "\n", "\n", "lm_logits", "=", "self", ".", "transformer", ".", "wte", "(", "hidden_states", ",", "mode", "=", "\"linear\"", ")", "\n", "mc_logits", "=", "self", ".", "multiple_choice_head", "(", "[", "hidden_states", ",", "mc_token_ids", "]", ",", "training", "=", "training", ")", "\n", "\n", "mc_logits", "=", "tf", ".", "squeeze", "(", "mc_logits", ",", "axis", "=", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", "mc_logits", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "# lm logits, mc logits, presents, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_gpt2.gelu": [[44, 56], ["tensorflow.tanh", "numpy.sqrt", "tensorflow.pow"], "function", ["None"], ["def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"Gaussian Error Linear Unit.\n    This is a smoother version of the RELU.\n    Original paper: https://arxiv.org/abs/1606.08415\n    Args:\n        x: float Tensor to perform activation.\n    Returns:\n        `x` with the GELU activation applied.\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "tf", ".", "tanh", "(", "\n", "(", "np", ".", "sqrt", "(", "2", "/", "np", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "tf", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.__init__": [[87, 95], ["tokenization_gpt2.GPT2Tokenizer.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "errors", "=", "'replace'", ",", "bos_token", "=", "\"<s>\"", ",", "eos_token", "=", "\"</s>\"", ",", "sep_token", "=", "\"</s>\"", ",", "\n", "cls_token", "=", "\"<s>\"", ",", "unk_token", "=", "\"<unk>\"", ",", "pad_token", "=", "'<pad>'", ",", "mask_token", "=", "'<mask>'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RobertaTokenizer", ",", "self", ")", ".", "__init__", "(", "vocab_file", "=", "vocab_file", ",", "merges_file", "=", "merges_file", ",", "errors", "=", "errors", ",", "\n", "bos_token", "=", "bos_token", ",", "eos_token", "=", "eos_token", ",", "unk_token", "=", "unk_token", ",", "\n", "sep_token", "=", "sep_token", ",", "cls_token", "=", "cls_token", ",", "pad_token", "=", "pad_token", ",", "\n", "mask_token", "=", "mask_token", ",", "**", "kwargs", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "4", "# take into account special tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens": [[96, 109], ["None"], "methods", ["None"], ["", "def", "build_inputs_with_special_tokens", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build model inputs from a sequence or a pair of sequence for sequence classification tasks\n        by concatenating and adding special tokens.\n        A RoBERTa sequence has the following format:\n            single sequence: <s> X </s>\n            pair of sequences: <s> A </s></s> B </s>\n        \"\"\"", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "[", "self", ".", "cls_token_id", "]", "+", "token_ids_0", "+", "[", "self", ".", "sep_token_id", "]", "\n", "", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "return", "cls", "+", "token_ids_0", "+", "sep", "+", "sep", "+", "token_ids_1", "+", "sep", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.get_special_tokens_mask": [[110, 134], ["list", "ValueError", "map", "len", "len", "len"], "methods", ["None"], ["", "def", "get_special_tokens_mask", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ",", "already_has_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding\n        special tokens using the tokenizer ``prepare_for_model`` or ``encode_plus`` methods.\n\n        Args:\n            token_ids_0: list of ids (must not contain special tokens)\n            token_ids_1: Optional list of ids (must not contain special tokens), necessary when fetching sequence ids\n                for sequence pairs\n            already_has_special_tokens: (default False) Set to True if the token list is already formated with\n                special tokens for the model\n\n        Returns:\n            A list of integers in the range [0, 1]: 1 for a special token, 0 for a sequence token.\n        \"\"\"", "\n", "if", "already_has_special_tokens", ":", "\n", "            ", "if", "token_ids_1", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"You should not supply a second sequence if the provided sequence of \"", "\n", "\"ids is already formated with special tokens for the model.\"", ")", "\n", "", "return", "list", "(", "map", "(", "lambda", "x", ":", "1", "if", "x", "in", "[", "self", ".", "sep_token_id", ",", "self", ".", "cls_token_id", "]", "else", "0", ",", "token_ids_0", ")", ")", "\n", "\n", "", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", "]", "\n", "", "return", "[", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_0", ")", ")", "+", "[", "1", ",", "1", "]", "+", "(", "[", "0", "]", "*", "len", "(", "token_ids_1", ")", ")", "+", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.create_token_type_ids_from_sequences": [[135, 150], ["len", "len", "len"], "methods", ["None"], ["", "def", "create_token_type_ids_from_sequences", "(", "self", ",", "token_ids_0", ",", "token_ids_1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Creates a mask from the two sequences passed to be used in a sequence-pair classification task.\n        A RoBERTa sequence pair mask has the following format:\n        0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1\n        | first sequence    | second sequence\n\n        if token_ids_1 is None, only returns the first portion of the mask (0's).\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "\n", "if", "token_ids_1", "is", "None", ":", "\n", "            ", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", ")", "*", "[", "0", "]", "\n", "", "return", "len", "(", "cls", "+", "token_ids_0", "+", "sep", "+", "sep", ")", "*", "[", "0", "]", "+", "len", "(", "token_ids_1", "+", "sep", ")", "*", "[", "1", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_pytorch_checkpoint_to_tf2.convert_pt_checkpoint_to_tf": [[101, 142], ["config_class.from_json_file", "print", "model_class", "transformers.load_pytorch_checkpoint_in_tf2_model", "print", "transformers.load_pytorch_checkpoint_in_tf2_model.save_weights", "ValueError", "transformers.cached_path", "transformers.cached_path", "transformers.load_pytorch_checkpoint_in_tf2_model.", "torch.load", "pt_model_class.from_pretrained", "pto[].numpy", "tfo[].numpy", "np.amax", "print", "str", "torch.no_grad", "pt_model_class.from_pretrained.", "np.abs", "list", "MODEL_CLASSES.keys"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.load_pytorch_checkpoint_in_tf2_model", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.cached_path", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.cached_path", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["def", "convert_pt_checkpoint_to_tf", "(", "model_type", ",", "pytorch_checkpoint_path", ",", "config_file", ",", "tf_dump_path", ",", "compare_with_pt_model", "=", "False", ",", "use_cached_models", "=", "True", ")", ":", "\n", "    ", "if", "model_type", "not", "in", "MODEL_CLASSES", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unrecognized model type, should be one of {}.\"", ".", "format", "(", "list", "(", "MODEL_CLASSES", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "", "config_class", ",", "model_class", ",", "pt_model_class", ",", "aws_model_maps", ",", "aws_config_map", "=", "MODEL_CLASSES", "[", "model_type", "]", "\n", "\n", "# Initialise TF model", "\n", "if", "config_file", "in", "aws_config_map", ":", "\n", "        ", "config_file", "=", "cached_path", "(", "aws_config_map", "[", "config_file", "]", ",", "force_download", "=", "not", "use_cached_models", ")", "\n", "", "config", "=", "config_class", ".", "from_json_file", "(", "config_file", ")", "\n", "config", ".", "output_hidden_states", "=", "True", "\n", "config", ".", "output_attentions", "=", "True", "\n", "print", "(", "\"Building TensorFlow model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "tf_model", "=", "model_class", "(", "config", ")", "\n", "\n", "# Load weights from tf checkpoint", "\n", "if", "pytorch_checkpoint_path", "in", "aws_model_maps", ":", "\n", "        ", "pytorch_checkpoint_path", "=", "cached_path", "(", "aws_model_maps", "[", "pytorch_checkpoint_path", "]", ",", "force_download", "=", "not", "use_cached_models", ")", "\n", "# Load PyTorch checkpoint in tf2 model:", "\n", "", "tf_model", "=", "load_pytorch_checkpoint_in_tf2_model", "(", "tf_model", ",", "pytorch_checkpoint_path", ")", "\n", "\n", "if", "compare_with_pt_model", ":", "\n", "        ", "tfo", "=", "tf_model", "(", "tf_model", ".", "dummy_inputs", ",", "training", "=", "False", ")", "# build the network", "\n", "\n", "state_dict", "=", "torch", ".", "load", "(", "pytorch_checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "pt_model", "=", "pt_model_class", ".", "from_pretrained", "(", "pretrained_model_name_or_path", "=", "None", ",", "\n", "config", "=", "config", ",", "\n", "state_dict", "=", "state_dict", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "pto", "=", "pt_model", "(", "**", "pt_model", ".", "dummy_inputs", ")", "\n", "\n", "", "np_pt", "=", "pto", "[", "0", "]", ".", "numpy", "(", ")", "\n", "np_tf", "=", "tfo", "[", "0", "]", ".", "numpy", "(", ")", "\n", "diff", "=", "np", ".", "amax", "(", "np", ".", "abs", "(", "np_pt", "-", "np_tf", ")", ")", "\n", "print", "(", "\"Max absolute difference between models outputs {}\"", ".", "format", "(", "diff", ")", ")", "\n", "assert", "diff", "<=", "2e-2", ",", "\"Error, model absolute difference is >2e-2: {}\"", ".", "format", "(", "diff", ")", "\n", "\n", "# Save pytorch-model", "\n", "", "print", "(", "\"Save TensorFlow model to {}\"", ".", "format", "(", "tf_dump_path", ")", ")", "\n", "tf_model", ".", "save_weights", "(", "tf_dump_path", ",", "save_format", "=", "'h5'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_pytorch_checkpoint_to_tf2.convert_all_pt_checkpoints_to_tf": [[144, 202], ["os.path.isdir", "enumerate", "list", "print", "print", "print", "enumerate", "MODEL_CLASSES.keys", "ValueError", "list", "zip", "print", "print", "print", "os.path.isfile", "convert_pytorch_checkpoint_to_tf2.convert_pt_checkpoint_to_tf", "len", "aws_model_maps.keys", "transformers.cached_path", "transformers.cached_path", "transformers.cached_path", "transformers.cached_path", "os.remove", "os.remove", "list", "print", "print", "len", "os.path.join", "MODEL_CLASSES.keys"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_pytorch_checkpoint_to_tf2.convert_pt_checkpoint_to_tf", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.cached_path", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.cached_path", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.cached_path", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.cached_path"], ["", "def", "convert_all_pt_checkpoints_to_tf", "(", "args_model_type", ",", "tf_dump_path", ",", "model_shortcut_names_or_path", "=", "None", ",", "config_shortcut_names_or_path", "=", "None", ",", "\n", "compare_with_pt_model", "=", "False", ",", "use_cached_models", "=", "False", ",", "remove_cached_files", "=", "False", ",", "only_convert_finetuned_models", "=", "False", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isdir", "(", "args", ".", "tf_dump_path", ")", ",", "\"--tf_dump_path should be a directory\"", "\n", "\n", "if", "args_model_type", "is", "None", ":", "\n", "        ", "model_types", "=", "list", "(", "MODEL_CLASSES", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "model_types", "=", "[", "args_model_type", "]", "\n", "\n", "", "for", "j", ",", "model_type", "in", "enumerate", "(", "model_types", ",", "start", "=", "1", ")", ":", "\n", "        ", "print", "(", "\"=\"", "*", "100", ")", "\n", "print", "(", "\" Converting model type {}/{}: {}\"", ".", "format", "(", "j", ",", "len", "(", "model_types", ")", ",", "model_type", ")", ")", "\n", "print", "(", "\"=\"", "*", "100", ")", "\n", "if", "model_type", "not", "in", "MODEL_CLASSES", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unrecognized model type {}, should be one of {}.\"", ".", "format", "(", "model_type", ",", "list", "(", "MODEL_CLASSES", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "", "config_class", ",", "model_class", ",", "pt_model_class", ",", "aws_model_maps", ",", "aws_config_map", "=", "MODEL_CLASSES", "[", "model_type", "]", "\n", "\n", "if", "model_shortcut_names_or_path", "is", "None", ":", "\n", "            ", "model_shortcut_names_or_path", "=", "list", "(", "aws_model_maps", ".", "keys", "(", ")", ")", "\n", "", "if", "config_shortcut_names_or_path", "is", "None", ":", "\n", "            ", "config_shortcut_names_or_path", "=", "model_shortcut_names_or_path", "\n", "\n", "", "for", "i", ",", "(", "model_shortcut_name", ",", "config_shortcut_name", ")", "in", "enumerate", "(", "\n", "zip", "(", "model_shortcut_names_or_path", ",", "config_shortcut_names_or_path", ")", ",", "start", "=", "1", ")", ":", "\n", "            ", "print", "(", "\"-\"", "*", "100", ")", "\n", "if", "'-squad'", "in", "model_shortcut_name", "or", "'-mrpc'", "in", "model_shortcut_name", "or", "'-mnli'", "in", "model_shortcut_name", ":", "\n", "                ", "if", "not", "only_convert_finetuned_models", ":", "\n", "                    ", "print", "(", "\"    Skipping finetuned checkpoint {}\"", ".", "format", "(", "model_shortcut_name", ")", ")", "\n", "continue", "\n", "", "model_type", "=", "model_shortcut_name", "\n", "", "elif", "only_convert_finetuned_models", ":", "\n", "                ", "print", "(", "\"    Skipping not finetuned checkpoint {}\"", ".", "format", "(", "model_shortcut_name", ")", ")", "\n", "continue", "\n", "", "print", "(", "\"    Converting checkpoint {}/{}: {} - model_type {}\"", ".", "format", "(", "i", ",", "len", "(", "aws_config_map", ")", ",", "model_shortcut_name", ",", "model_type", ")", ")", "\n", "print", "(", "\"-\"", "*", "100", ")", "\n", "\n", "if", "config_shortcut_name", "in", "aws_config_map", ":", "\n", "                ", "config_file", "=", "cached_path", "(", "aws_config_map", "[", "config_shortcut_name", "]", ",", "force_download", "=", "not", "use_cached_models", ")", "\n", "", "else", ":", "\n", "                ", "config_file", "=", "cached_path", "(", "config_shortcut_name", ",", "force_download", "=", "not", "use_cached_models", ")", "\n", "\n", "", "if", "model_shortcut_name", "in", "aws_model_maps", ":", "\n", "                ", "model_file", "=", "cached_path", "(", "aws_model_maps", "[", "model_shortcut_name", "]", ",", "force_download", "=", "not", "use_cached_models", ")", "\n", "", "else", ":", "\n", "                ", "model_file", "=", "cached_path", "(", "model_shortcut_name", ",", "force_download", "=", "not", "use_cached_models", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "model_shortcut_name", ")", ":", "\n", "                ", "model_shortcut_name", "=", "'converted_model'", "\n", "\n", "", "convert_pt_checkpoint_to_tf", "(", "model_type", "=", "model_type", ",", "\n", "pytorch_checkpoint_path", "=", "model_file", ",", "\n", "config_file", "=", "config_file", ",", "\n", "tf_dump_path", "=", "os", ".", "path", ".", "join", "(", "tf_dump_path", ",", "model_shortcut_name", "+", "'-tf_model.h5'", ")", ",", "\n", "compare_with_pt_model", "=", "compare_with_pt_model", ")", "\n", "if", "remove_cached_files", ":", "\n", "                ", "os", ".", "remove", "(", "config_file", ")", "\n", "os", ".", "remove", "(", "model_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_bert_pytorch_checkpoint_to_original_tf.convert_pytorch_checkpoint_to_tf": [[26, 93], ["model.state_dict", "tensorflow.reset_default_graph", "os.path.isdir", "os.makedirs", "iter", "tensorflow.dtypes.as_dtype", "tensorflow.get_variable", "session.run", "session.run", "tensorflow.Session", "tensorflow.train.Saver", "tf.train.Saver.save", "name.replace.replace", "tensorflow.variables_initializer", "convert_bert_pytorch_checkpoint_to_original_tf.convert_pytorch_checkpoint_to_tf.to_tf_var_name"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.__init__.BaseTransformersCLICommand.run", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.__init__.BaseTransformersCLICommand.run"], ["def", "convert_pytorch_checkpoint_to_tf", "(", "model", ":", "BertModel", ",", "ckpt_dir", ":", "str", ",", "model_name", ":", "str", ")", ":", "\n", "\n", "    ", "\"\"\"\n    :param model:BertModel Pytorch model instance to be converted\n    :param ckpt_dir: Tensorflow model directory\n    :param model_name: model name\n    :return:\n\n    Currently supported HF models:\n        Y BertModel\n        N BertForMaskedLM\n        N BertForPreTraining\n        N BertForMultipleChoice\n        N BertForNextSentencePrediction\n        N BertForSequenceClassification\n        N BertForQuestionAnswering\n    \"\"\"", "\n", "\n", "tensors_to_transpose", "=", "(", "\n", "\"dense.weight\"", ",", "\n", "\"attention.self.query\"", ",", "\n", "\"attention.self.key\"", ",", "\n", "\"attention.self.value\"", "\n", ")", "\n", "\n", "var_map", "=", "(", "\n", "(", "'layer.'", ",", "'layer_'", ")", ",", "\n", "(", "'word_embeddings.weight'", ",", "'word_embeddings'", ")", ",", "\n", "(", "'position_embeddings.weight'", ",", "'position_embeddings'", ")", ",", "\n", "(", "'token_type_embeddings.weight'", ",", "'token_type_embeddings'", ")", ",", "\n", "(", "'.'", ",", "'/'", ")", ",", "\n", "(", "'LayerNorm/weight'", ",", "'LayerNorm/gamma'", ")", ",", "\n", "(", "'LayerNorm/bias'", ",", "'LayerNorm/beta'", ")", ",", "\n", "(", "'weight'", ",", "'kernel'", ")", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "ckpt_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ckpt_dir", ")", "\n", "\n", "", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "def", "to_tf_var_name", "(", "name", ":", "str", ")", ":", "\n", "        ", "for", "patt", ",", "repl", "in", "iter", "(", "var_map", ")", ":", "\n", "            ", "name", "=", "name", ".", "replace", "(", "patt", ",", "repl", ")", "\n", "", "return", "'bert/{}'", ".", "format", "(", "name", ")", "\n", "\n", "", "def", "create_tf_var", "(", "tensor", ":", "np", ".", "ndarray", ",", "name", ":", "str", ",", "session", ":", "tf", ".", "Session", ")", ":", "\n", "        ", "tf_dtype", "=", "tf", ".", "dtypes", ".", "as_dtype", "(", "tensor", ".", "dtype", ")", "\n", "tf_var", "=", "tf", ".", "get_variable", "(", "dtype", "=", "tf_dtype", ",", "shape", "=", "tensor", ".", "shape", ",", "name", "=", "name", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "session", ".", "run", "(", "tf", ".", "variables_initializer", "(", "[", "tf_var", "]", ")", ")", "\n", "session", ".", "run", "(", "tf_var", ")", "\n", "return", "tf_var", "\n", "\n", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "for", "var_name", "in", "state_dict", ":", "\n", "            ", "tf_name", "=", "to_tf_var_name", "(", "var_name", ")", "\n", "torch_tensor", "=", "state_dict", "[", "var_name", "]", ".", "numpy", "(", ")", "\n", "if", "any", "(", "[", "x", "in", "var_name", "for", "x", "in", "tensors_to_transpose", "]", ")", ":", "\n", "                ", "torch_tensor", "=", "torch_tensor", ".", "T", "\n", "", "tf_var", "=", "create_tf_var", "(", "tensor", "=", "torch_tensor", ",", "name", "=", "tf_name", ",", "session", "=", "session", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "set_value", "(", "tf_var", ",", "torch_tensor", ")", "\n", "tf_weight", "=", "session", ".", "run", "(", "tf_var", ")", "\n", "print", "(", "\"Successfully created {}: {}\"", ".", "format", "(", "tf_name", ",", "np", ".", "allclose", "(", "tf_weight", ",", "torch_tensor", ")", ")", ")", "\n", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "saver", ".", "save", "(", "session", ",", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "model_name", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", "+", "\".ckpt\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_bert_pytorch_checkpoint_to_original_tf.main": [[95, 126], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "transformers.BertModel.from_pretrained", "convert_bert_pytorch_checkpoint_to_original_tf.convert_pytorch_checkpoint_to_tf", "torch.load"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_bert_pytorch_checkpoint_to_original_tf.convert_pytorch_checkpoint_to_tf"], ["", "", "def", "main", "(", "raw_args", "=", "None", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_name\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"model name e.g. bert-base-uncased\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cache_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "required", "=", "False", ",", "\n", "help", "=", "\"Directory containing pytorch model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pytorch_model_path\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"/path/to/<pytorch-model-name>.bin\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tf_cache_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"Directory in which to save tensorflow model\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "raw_args", ")", "\n", "\n", "model", "=", "BertModel", ".", "from_pretrained", "(", "\n", "pretrained_model_name_or_path", "=", "args", ".", "model_name", ",", "\n", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "pytorch_model_path", ")", ",", "\n", "cache_dir", "=", "args", ".", "cache_dir", "\n", ")", "\n", "\n", "convert_pytorch_checkpoint_to_tf", "(", "\n", "model", "=", "model", ",", "\n", "ckpt_dir", "=", "args", ".", "tf_cache_dir", ",", "\n", "model_name", "=", "args", ".", "model_name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.__init__": [[131, 148], ["torch.Module.__init__", "modeling_openai.Attention.register_buffer", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "set", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nx", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n_state", "=", "nx", "# in Attention: n_state=768 (nx=n_embd)", "\n", "# [switch nx => n_state from Block to Attention to keep identical to TF implem]", "\n", "assert", "n_state", "%", "config", ".", "n_head", "==", "0", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "n_ctx", ",", "n_ctx", ")", ")", ".", "view", "(", "1", ",", "1", ",", "n_ctx", ",", "n_ctx", ")", ")", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "split_size", "=", "n_state", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "self", ".", "c_attn", "=", "Conv1D", "(", "n_state", "*", "3", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "attn_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attn_pdrop", ")", "\n", "self", ".", "resid_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.prune_heads": [[149, 167], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_utils.prune_conv1d_layer", "modeling_utils.prune_conv1d_layer", "modeling_openai.Attention.pruned_heads.union", "len", "set", "sum", "len", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_conv1d_layer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.prune_conv1d_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_head", ",", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "\n", "for", "head", "in", "heads", ":", "\n", "            ", "head", "-=", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "index_attn", "=", "torch", ".", "cat", "(", "[", "index", ",", "index", "+", "self", ".", "split_size", ",", "index", "+", "(", "2", "*", "self", ".", "split_size", ")", "]", ")", "\n", "# Prune conv1d layers", "\n", "self", ".", "c_attn", "=", "prune_conv1d_layer", "(", "self", ".", "c_attn", ",", "index_attn", ",", "dim", "=", "1", ")", "\n", "self", ".", "c_proj", "=", "prune_conv1d_layer", "(", "self", ".", "c_proj", ",", "index", ",", "dim", "=", "0", ")", "\n", "# Update hyper params", "\n", "self", ".", "split_size", "=", "(", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "*", "(", "self", ".", "n_head", "-", "len", "(", "heads", ")", ")", "\n", "self", ".", "n_head", "=", "self", ".", "n_head", "-", "len", "(", "heads", ")", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention._attn": [[168, 192], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "modeling_openai.Attention.attn_dropout", "torch.Softmax", "torch.Softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "outputs.append", "math.sqrt", "v.size", "modeling_openai.Attention.size", "modeling_openai.Attention.size"], "methods", ["None"], ["", "def", "_attn", "(", "self", ",", "q", ",", "k", ",", "v", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "w", "=", "torch", ".", "matmul", "(", "q", ",", "k", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "w", "=", "w", "/", "math", ".", "sqrt", "(", "v", ".", "size", "(", "-", "1", ")", ")", "\n", "# w = w * self.bias + -1e9 * (1 - self.bias)  # TF implem method: mask_attn_weights", "\n", "# XD: self.b may be larger than w, so we need to crop it", "\n", "", "b", "=", "self", ".", "bias", "[", ":", ",", ":", ",", ":", "w", ".", "size", "(", "-", "2", ")", ",", ":", "w", ".", "size", "(", "-", "1", ")", "]", "\n", "w", "=", "w", "*", "b", "+", "-", "1e4", "*", "(", "1", "-", "b", ")", "\n", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "# Apply the attention mask", "\n", "            ", "w", "=", "w", "+", "attention_mask", "\n", "\n", "", "w", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "w", ")", "\n", "w", "=", "self", ".", "attn_dropout", "(", "w", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "w", "=", "w", "*", "head_mask", "\n", "\n", "", "outputs", "=", "[", "torch", ".", "matmul", "(", "w", ",", "v", ")", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "w", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.merge_heads": [[193, 197], ["x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size"], "methods", ["None"], ["", "def", "merge_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "x", ".", "size", "(", "-", "2", ")", "*", "x", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct merge_states", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.split_heads": [[198, 205], ["x.view.view.view", "x.view.view.permute", "x.view.view.permute", "x.view.view.size", "x.view.view.size"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x", ",", "k", "=", "False", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "n_head", ",", "x", ".", "size", "(", "-", "1", ")", "//", "self", ".", "n_head", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct split_states", "\n", "if", "k", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.forward": [[206, 222], ["modeling_openai.Attention.c_attn", "modeling_openai.Attention.split", "modeling_openai.Attention.split_heads", "modeling_openai.Attention.split_heads", "modeling_openai.Attention.split_heads", "modeling_openai.Attention._attn", "modeling_openai.Attention.merge_heads", "modeling_openai.Attention.c_proj", "modeling_openai.Attention.resid_dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention._attn", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.merge_heads"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "c_attn", "(", "x", ")", "\n", "query", ",", "key", ",", "value", "=", "x", ".", "split", "(", "self", ".", "split_size", ",", "dim", "=", "2", ")", "\n", "query", "=", "self", ".", "split_heads", "(", "query", ")", "\n", "key", "=", "self", ".", "split_heads", "(", "key", ",", "k", "=", "True", ")", "\n", "value", "=", "self", ".", "split_heads", "(", "value", ")", "\n", "\n", "attn_outputs", "=", "self", ".", "_attn", "(", "query", ",", "key", ",", "value", ",", "attention_mask", ",", "head_mask", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "a", "=", "self", ".", "merge_heads", "(", "a", ")", "\n", "a", "=", "self", ".", "c_proj", "(", "a", ")", "\n", "a", "=", "self", ".", "resid_dropout", "(", "a", ")", "\n", "\n", "outputs", "=", "[", "a", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "# a, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.MLP.__init__": [[225, 232], ["torch.Module.__init__", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_state", ",", "config", ")", ":", "# in MLP: n_state=3072 (4 * n_embd)", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "c_fc", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "nx", ",", "n_state", ")", "\n", "self", ".", "act", "=", "ACT_FNS", "[", "config", ".", "afn", "]", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.MLP.forward": [[233, 237], ["modeling_openai.MLP.act", "modeling_openai.MLP.c_proj", "modeling_openai.MLP.dropout", "modeling_openai.MLP.c_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "act", "(", "self", ".", "c_fc", "(", "x", ")", ")", "\n", "h2", "=", "self", ".", "c_proj", "(", "h", ")", "\n", "return", "self", ".", "dropout", "(", "h2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Block.__init__": [[240, 247], ["torch.Module.__init__", "modeling_openai.Attention", "torch.LayerNorm", "torch.LayerNorm", "modeling_openai.MLP", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "attn", "=", "Attention", "(", "nx", ",", "n_ctx", ",", "config", ",", "scale", ")", "\n", "self", ".", "ln_1", "=", "nn", ".", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "4", "*", "nx", ",", "config", ")", "\n", "self", ".", "ln_2", "=", "nn", ".", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Block.forward": [[248, 258], ["modeling_openai.Block.attn", "modeling_openai.Block.ln_1", "modeling_openai.Block.mlp", "modeling_openai.Block.ln_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "attn_outputs", "=", "self", ".", "attn", "(", "x", ",", "attention_mask", "=", "attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "n", "=", "self", ".", "ln_1", "(", "x", "+", "a", ")", "\n", "m", "=", "self", ".", "mlp", "(", "n", ")", "\n", "h", "=", "self", ".", "ln_2", "(", "n", "+", "m", ")", "\n", "\n", "outputs", "=", "[", "h", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTPreTrainedModel._init_weights": [[269, 281], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ",", "Conv1D", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "Conv1D", ")", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTModel.__init__": [[357, 368], ["modeling_utils.PreTrainedModel.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "modeling_openai.OpenAIGPTModel.init_weights", "modeling_openai.Block", "range"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "tokens_embed", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "positions_embed", "=", "nn", ".", "Embedding", "(", "config", ".", "n_positions", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "config", ".", "n_ctx", ",", "config", ",", "scale", "=", "True", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTModel.get_input_embeddings": [[369, 371], ["None"], "methods", ["None"], ["", "def", "get_input_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tokens_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTModel.set_input_embeddings": [[372, 374], ["None"], "methods", ["None"], ["", "def", "set_input_embeddings", "(", "self", ",", "new_embeddings", ")", ":", "\n", "        ", "self", ".", "tokens_embed", "=", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTModel._prune_heads": [[375, 381], ["heads_to_prune.items", "modeling_openai.OpenAIGPTModel.h[].attn.prune_heads"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "h", "[", "layer", "]", ".", "attn", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTModel.forward": [[382, 464], ["modeling_openai.OpenAIGPTModel.positions_embed", "modeling_openai.OpenAIGPTModel.drop", "enumerate", "ValueError", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze().view", "attention_mask.to.to.unsqueeze().unsqueeze", "attention_mask.to.to.to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "modeling_openai.OpenAIGPTModel.tokens_embed", "token_type_ids.view.view.view", "modeling_openai.OpenAIGPTModel.tokens_embed", "block", "modeling_openai.OpenAIGPTModel.view", "input_ids.view.view.size", "input_ids.view.view.view", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "token_type_ids.view.view.size", "modeling_openai.OpenAIGPTModel.size", "ValueError", "position_ids.unsqueeze().view.unsqueeze().view.unsqueeze", "attention_mask.to.to.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "modeling_openai.OpenAIGPTModel.view", "modeling_openai.OpenAIGPTModel.size", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "modeling_openai.OpenAIGPTModel.view", "modeling_openai.OpenAIGPTModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_openai.OpenAIGPTModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", "and", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"You cannot specify both input_ids and inputs_embeds at the same time\"", ")", "\n", "", "elif", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "", "elif", "inputs_embeds", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"You have to specify either input_ids or inputs_embeds\"", ")", "\n", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "# Code is different from when we had a single embedding matrice from position and token embeddings", "\n", "            ", "device", "=", "input_ids", ".", "device", "if", "input_ids", "is", "not", "None", "else", "inputs_embeds", ".", "device", "\n", "position_ids", "=", "torch", ".", "arange", "(", "input_shape", "[", "-", "1", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "view", "(", "-", "1", ",", "input_shape", "[", "-", "1", "]", ")", "\n", "\n", "# Attention mask.", "\n", "", "if", "attention_mask", "is", "not", "None", ":", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "            ", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "attention_mask", "=", "attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "attention_mask", "=", "(", "1.0", "-", "attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# head_mask has shape n_layer x batch x n_heads x N x N", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "n_layer", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "tokens_embed", "(", "input_ids", ")", "\n", "", "position_embeds", "=", "self", ".", "positions_embed", "(", "position_ids", ")", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "token_type_embeds", "=", "self", ".", "tokens_embed", "(", "token_type_ids", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "hidden_states", "=", "inputs_embeds", "+", "position_embeds", "+", "token_type_embeds", "\n", "hidden_states", "=", "self", ".", "drop", "(", "hidden_states", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "(", "hidden_states", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "\n", "all_attentions", "=", "(", ")", "\n", "all_hidden_states", "=", "(", ")", "\n", "for", "i", ",", "block", "in", "enumerate", "(", "self", ".", "h", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "block", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "i", "]", ")", "\n", "hidden_states", "=", "outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "outputs", "[", "1", "]", ",", ")", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTLMHeadModel.__init__": [[499, 505], ["modeling_utils.PreTrainedModel.__init__", "modeling_openai.OpenAIGPTModel", "torch.Linear", "torch.Linear", "modeling_openai.OpenAIGPTLMHeadModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "OpenAIGPTModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTLMHeadModel.get_output_embeddings": [[506, 508], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTLMHeadModel.forward": [[509, 532], ["modeling_openai.OpenAIGPTLMHeadModel.transformer", "modeling_openai.OpenAIGPTLMHeadModel.lm_head", "lm_logits[].contiguous", "labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous.view", "labels[].contiguous.view", "lm_logits[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# Shift so that tokens < n predict n", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "# Flatten the tokens", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), lm_logits, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.__init__": [[590, 599], ["modeling_utils.PreTrainedModel.__init__", "modeling_openai.OpenAIGPTModel", "torch.Linear", "torch.Linear", "modeling_utils.SequenceSummary", "modeling_openai.OpenAIGPTDoubleHeadsModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTDoubleHeadsModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "config", ".", "num_labels", "=", "1", "\n", "self", ".", "transformer", "=", "OpenAIGPTModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "multiple_choice_head", "=", "SequenceSummary", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.get_output_embeddings": [[600, 602], ["None"], "methods", ["None"], ["", "def", "get_output_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "lm_head", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.forward": [[603, 631], ["modeling_openai.OpenAIGPTDoubleHeadsModel.transformer", "modeling_openai.OpenAIGPTDoubleHeadsModel.lm_head", "modeling_openai.OpenAIGPTDoubleHeadsModel.multiple_choice_head().squeeze", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous", "lm_labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_openai.OpenAIGPTDoubleHeadsModel.multiple_choice_head", "modeling_openai.OpenAIGPTDoubleHeadsModel.view", "mc_labels.view", "lm_logits[].contiguous.view", "lm_labels[].contiguous.view", "modeling_openai.OpenAIGPTDoubleHeadsModel.size", "lm_logits[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "inputs_embeds", "=", "None", ",", "\n", "mc_token_ids", "=", "None", ",", "lm_labels", "=", "None", ",", "mc_labels", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "mc_logits", "=", "self", ".", "multiple_choice_head", "(", "hidden_states", ",", "mc_token_ids", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", "mc_logits", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "mc_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "mc_logits", ".", "view", "(", "-", "1", ",", "mc_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "mc_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "", "if", "lm_labels", "is", "not", "None", ":", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "lm_labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (lm loss), (mc loss), lm logits, mc logits, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.load_tf_weights_in_openai_gpt": [[42, 117], ["logger.info", "np.cumsum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "json.load.pop", "init_params.pop", "init_params.pop", "zip", "os.path.dirname", "io.open", "json.load", "io.open", "json.load", "np.load", "np.split", "param.reshape", "arr.squeeze", "name.split.split", "logger.info", "torch.from_numpy", "torch.from_numpy", "np.prod", "range", "np.concatenate", "zip", "re.fullmatch", "re.split", "getattr", "len", "int", "getattr", "getattr", "getattr"], "function", ["None"], ["def", "load_tf_weights_in_openai_gpt", "(", "model", ",", "config", ",", "openai_checkpoint_folder_path", ")", ":", "\n", "    ", "\"\"\" Load tf pre-trained weights in a pytorch model (from NumPy arrays here)\n    \"\"\"", "\n", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "\n", "if", "'.ckpt'", "in", "openai_checkpoint_folder_path", ":", "\n", "        ", "openai_checkpoint_folder_path", "=", "os", ".", "path", ".", "dirname", "(", "openai_checkpoint_folder_path", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Loading weights from {}\"", ".", "format", "(", "openai_checkpoint_folder_path", ")", ")", "\n", "\n", "with", "open", "(", "openai_checkpoint_folder_path", "+", "'/parameters_names.json'", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "names_handle", ":", "\n", "        ", "names", "=", "json", ".", "load", "(", "names_handle", ")", "\n", "", "with", "open", "(", "openai_checkpoint_folder_path", "+", "'/params_shapes.json'", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "shapes_handle", ":", "\n", "        ", "shapes", "=", "json", ".", "load", "(", "shapes_handle", ")", "\n", "", "offsets", "=", "np", ".", "cumsum", "(", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", ")", "\n", "init_params", "=", "[", "np", ".", "load", "(", "openai_checkpoint_folder_path", "+", "'/params_{}.npy'", ".", "format", "(", "n", ")", ")", "for", "n", "in", "range", "(", "10", ")", "]", "\n", "init_params", "=", "np", ".", "split", "(", "np", ".", "concatenate", "(", "init_params", ",", "0", ")", ",", "offsets", ")", "[", ":", "-", "1", "]", "\n", "init_params", "=", "[", "param", ".", "reshape", "(", "shape", ")", "for", "param", ",", "shape", "in", "zip", "(", "init_params", ",", "shapes", ")", "]", "\n", "\n", "# This was used when we had a single embedding matrix for positions and tokens", "\n", "# init_params[0] = np.concatenate([init_params[1], init_params[0]], 0)", "\n", "# del init_params[1]", "\n", "init_params", "=", "[", "arr", ".", "squeeze", "(", ")", "for", "arr", "in", "init_params", "]", "\n", "\n", "try", ":", "\n", "        ", "assert", "model", ".", "tokens_embed", ".", "weight", ".", "shape", "==", "init_params", "[", "1", "]", ".", "shape", "\n", "assert", "model", ".", "positions_embed", ".", "weight", ".", "shape", "==", "init_params", "[", "0", "]", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "        ", "e", ".", "args", "+=", "(", "model", ".", "tokens_embed", ".", "weight", ".", "shape", ",", "init_params", "[", "1", "]", ".", "shape", ")", "\n", "e", ".", "args", "+=", "(", "model", ".", "positions_embed", ".", "weight", ".", "shape", ",", "init_params", "[", "0", "]", ".", "shape", ")", "\n", "raise", "\n", "\n", "", "model", ".", "tokens_embed", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "init_params", "[", "1", "]", ")", "\n", "model", ".", "positions_embed", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "init_params", "[", "0", "]", ")", "\n", "names", ".", "pop", "(", "0", ")", "\n", "# Pop position and token embedding arrays", "\n", "init_params", ".", "pop", "(", "0", ")", "\n", "init_params", ".", "pop", "(", "0", ")", "\n", "\n", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "init_params", ")", ":", "# names[1:n_transfer], init_params[1:n_transfer]):", "\n", "        ", "name", "=", "name", "[", "6", ":", "]", "# skip \"model/\"", "\n", "assert", "name", "[", "-", "2", ":", "]", "==", "\":0\"", "\n", "name", "=", "name", "[", ":", "-", "2", "]", "\n", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "==", "'g'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'b'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'w'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "else", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.gelu": [[119, 121], ["torch.tanh", "torch.tanh", "math.sqrt", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "x", "*", "(", "1", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.swish": [[123, 125], ["torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_albert.AlbertConfig.__init__": [[39, 101], ["configuration_utils.PretrainedConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size", "=", "30000", ",", "\n", "embedding_size", "=", "128", ",", "\n", "hidden_size", "=", "4096", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_hidden_groups", "=", "1", ",", "\n", "num_attention_heads", "=", "64", ",", "\n", "intermediate_size", "=", "16384", ",", "\n", "inner_group_num", "=", "1", ",", "\n", "hidden_act", "=", "\"gelu_new\"", ",", "\n", "hidden_dropout_prob", "=", "0", ",", "\n", "attention_probs_dropout_prob", "=", "0", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs AlbertConfig.\n\n        Args:\n            vocab_size: Vocabulary size of `inputs_ids` in `AlbertModel`.\n            embedding_size: size of voc embeddings.\n            hidden_size: Size of the encoder layers and the pooler layer.\n            num_hidden_layers: Number of hidden layers in the Transformer encoder.\n            num_hidden_groups: Number of group for the hidden layers, parameters in\n                the same group are shared.\n            num_attention_heads: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n                layer in the Transformer encoder.\n            inner_group_num: int, number of inner repetition of attention and ffn.\n            down_scale_factor: float, the scale to apply\n            hidden_act: The non-linear activation function (function or string) in the\n                encoder and pooler.\n            hidden_dropout_prob: The dropout probability for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attention_probs_dropout_prob: The dropout ratio for the attention\n                probabilities.\n            max_position_embeddings: The maximum sequence length that this model might\n                ever be used with. Typically set this to something large just in case\n                (e.g., 512 or 1024 or 2048).\n            type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n                `AlbertModel`.\n            initializer_range: The stdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "super", "(", "AlbertConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_hidden_groups", "=", "num_hidden_groups", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "inner_group_num", "=", "inner_group_num", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.convert_tf_weight_name_to_pt_weight_name": [[28, 61], ["tf_name.replace.replace", "re.sub", "tf_name.replace.replace", "re.sub", "tf_name.replace.split", "bool", "tf_name.replace.replace"], "function", ["None"], ["def", "convert_tf_weight_name_to_pt_weight_name", "(", "tf_name", ",", "start_prefix_to_remove", "=", "''", ")", ":", "\n", "    ", "\"\"\" Convert a TF 2.0 model variable name in a pytorch model weight name.\n\n        Conventions for TF2.0 scopes -> PyTorch attribute names conversions:\n            - '$1___$2' is replaced by $2 (can be used to duplicate or remove layers in TF2.0 vs PyTorch)\n            - '_._' is replaced by a new level separation (can be used to convert TF2.0 lists in PyTorch nn.ModulesList)\n\n        return tuple with:\n            - pytorch model weight name\n            - transpose: boolean indicating weither TF2.0 and PyTorch weights matrices are transposed with regards to each other\n    \"\"\"", "\n", "tf_name", "=", "tf_name", ".", "replace", "(", "':0'", ",", "''", ")", "# device ids", "\n", "tf_name", "=", "re", ".", "sub", "(", "r'/[^/]*___([^/]*)/'", ",", "r'/\\1/'", ",", "tf_name", ")", "# '$1___$2' is replaced by $2 (can be used to duplicate or remove layers in TF2.0 vs PyTorch)", "\n", "tf_name", "=", "tf_name", ".", "replace", "(", "'_._'", ",", "'/'", ")", "# '_._' is replaced by a level separation (can be used to convert TF2.0 lists in PyTorch nn.ModulesList)", "\n", "tf_name", "=", "re", ".", "sub", "(", "r'//+'", ",", "'/'", ",", "tf_name", ")", "# Remove empty levels at the end", "\n", "tf_name", "=", "tf_name", ".", "split", "(", "'/'", ")", "# Convert from TF2.0 '/' separators to PyTorch '.' separators", "\n", "tf_name", "=", "tf_name", "[", "1", ":", "]", "# Remove level zero", "\n", "\n", "# When should we transpose the weights", "\n", "transpose", "=", "bool", "(", "tf_name", "[", "-", "1", "]", "==", "'kernel'", "or", "'emb_projs'", "in", "tf_name", "or", "'out_projs'", "in", "tf_name", ")", "\n", "\n", "# Convert standard TF2.0 names in PyTorch names", "\n", "if", "tf_name", "[", "-", "1", "]", "==", "'kernel'", "or", "tf_name", "[", "-", "1", "]", "==", "'embeddings'", "or", "tf_name", "[", "-", "1", "]", "==", "'gamma'", ":", "\n", "        ", "tf_name", "[", "-", "1", "]", "=", "'weight'", "\n", "", "if", "tf_name", "[", "-", "1", "]", "==", "'beta'", ":", "\n", "        ", "tf_name", "[", "-", "1", "]", "=", "'bias'", "\n", "\n", "# Remove prefix if needed", "\n", "", "tf_name", "=", "'.'", ".", "join", "(", "tf_name", ")", "\n", "if", "start_prefix_to_remove", ":", "\n", "        ", "tf_name", "=", "tf_name", ".", "replace", "(", "start_prefix_to_remove", ",", "''", ",", "1", ")", "\n", "\n", "", "return", "tf_name", ",", "transpose", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.load_pytorch_checkpoint_in_tf2_model": [[66, 84], ["os.path.abspath", "logger.info", "torch.load", "logger.info", "modeling_tf_pytorch_utils.load_pytorch_weights_in_tf2_model", "logger.error", "sum", "t.numel", "torch.load.values"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.load_pytorch_weights_in_tf2_model"], ["", "def", "load_pytorch_checkpoint_in_tf2_model", "(", "tf_model", ",", "pytorch_checkpoint_path", ",", "tf_inputs", "=", "None", ",", "allow_missing_keys", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load pytorch checkpoints in a TF 2.0 model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "import", "torch", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a PyTorch model in TensorFlow, requires both PyTorch and TensorFlow to be installed. Please see \"", "\n", "\"https://pytorch.org/ and https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "e", "\n", "\n", "", "pt_path", "=", "os", ".", "path", ".", "abspath", "(", "pytorch_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Loading PyTorch weights from {}\"", ".", "format", "(", "pt_path", ")", ")", "\n", "\n", "pt_state_dict", "=", "torch", ".", "load", "(", "pt_path", ",", "map_location", "=", "'cpu'", ")", "\n", "logger", ".", "info", "(", "\"PyTorch checkpoint contains {:,} parameters\"", ".", "format", "(", "sum", "(", "t", ".", "numel", "(", ")", "for", "t", "in", "pt_state_dict", ".", "values", "(", ")", ")", ")", ")", "\n", "\n", "return", "load_pytorch_weights_in_tf2_model", "(", "tf_model", ",", "pt_state_dict", ",", "tf_inputs", "=", "tf_inputs", ",", "allow_missing_keys", "=", "allow_missing_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.load_pytorch_model_in_tf2_model": [[86, 92], ["pt_model.state_dict", "modeling_tf_pytorch_utils.load_pytorch_weights_in_tf2_model"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.load_pytorch_weights_in_tf2_model"], ["", "def", "load_pytorch_model_in_tf2_model", "(", "tf_model", ",", "pt_model", ",", "tf_inputs", "=", "None", ",", "allow_missing_keys", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load pytorch checkpoints in a TF 2.0 model\n    \"\"\"", "\n", "pt_state_dict", "=", "pt_model", ".", "state_dict", "(", ")", "\n", "\n", "return", "load_pytorch_weights_in_tf2_model", "(", "tf_model", ",", "pt_state_dict", ",", "tf_inputs", "=", "tf_inputs", ",", "allow_missing_keys", "=", "allow_missing_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.load_pytorch_weights_in_tf2_model": [[94, 183], ["pt_state_dict.keys", "zip", "set", "K.batch_set_value", "logger.info", "logger.info", "tf_model", "pt_state_dict.pop", "any", "list", "modeling_tf_pytorch_utils.convert_tf_weight_name_to_pt_weight_name", "pt_state_dict[].numpy", "weight_value_tuples.append", "set.discard", "tf_model", "logger.error", "key.replace", "key.replace", "old_keys.append", "new_keys.append", "pt_state_dict.keys", "AttributeError", "numpy.transpose", "len", "len", "numpy.squeeze", "s.startswith", "len", "len", "numpy.expand_dims", "list", "list", "pt_state_dict.keys"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.convert_tf_weight_name_to_pt_weight_name"], ["", "def", "load_pytorch_weights_in_tf2_model", "(", "tf_model", ",", "pt_state_dict", ",", "tf_inputs", "=", "None", ",", "allow_missing_keys", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load pytorch state_dict in a TF 2.0 model.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "torch", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "tensorflow", ".", "python", ".", "keras", "import", "backend", "as", "K", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a PyTorch model in TensorFlow, requires both PyTorch and TensorFlow to be installed. Please see \"", "\n", "\"https://pytorch.org/ and https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "e", "\n", "\n", "", "if", "tf_inputs", "is", "None", ":", "\n", "        ", "tf_inputs", "=", "tf_model", ".", "dummy_inputs", "\n", "\n", "", "if", "tf_inputs", "is", "not", "None", ":", "\n", "        ", "tfo", "=", "tf_model", "(", "tf_inputs", ",", "training", "=", "False", ")", "# Make sure model is built", "\n", "\n", "# Adapt state dict - TODO remove this and update the AWS weights files instead", "\n", "# Convert old format to new format if needed from a PyTorch state_dict", "\n", "", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "pt_state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "new_key", "=", "None", "\n", "if", "'gamma'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'gamma'", ",", "'weight'", ")", "\n", "", "if", "'beta'", "in", "key", ":", "\n", "            ", "new_key", "=", "key", ".", "replace", "(", "'beta'", ",", "'bias'", ")", "\n", "# DialoGPT format", "\n", "", "if", "key", "==", "'lm_head.decoder.weight'", ":", "\n", "            ", "new_key", "=", "'lm_head.weight'", "\n", "", "if", "new_key", ":", "\n", "            ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "        ", "pt_state_dict", "[", "new_key", "]", "=", "pt_state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "# Make sure we are able to load PyTorch base models as well as derived models (with heads)", "\n", "# TF models always have a prefix, some of PyTorch models (base ones) don't", "\n", "", "start_prefix_to_remove", "=", "''", "\n", "if", "not", "any", "(", "s", ".", "startswith", "(", "tf_model", ".", "base_model_prefix", ")", "for", "s", "in", "pt_state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "start_prefix_to_remove", "=", "tf_model", ".", "base_model_prefix", "+", "'.'", "\n", "\n", "", "symbolic_weights", "=", "tf_model", ".", "trainable_weights", "+", "tf_model", ".", "non_trainable_weights", "\n", "tf_loaded_numel", "=", "0", "\n", "weight_value_tuples", "=", "[", "]", "\n", "all_pytorch_weights", "=", "set", "(", "list", "(", "pt_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "for", "symbolic_weight", "in", "symbolic_weights", ":", "\n", "        ", "sw_name", "=", "symbolic_weight", ".", "name", "\n", "name", ",", "transpose", "=", "convert_tf_weight_name_to_pt_weight_name", "(", "sw_name", ",", "start_prefix_to_remove", "=", "start_prefix_to_remove", ")", "\n", "\n", "# Find associated numpy array in pytorch model state dict", "\n", "if", "name", "not", "in", "pt_state_dict", ":", "\n", "            ", "if", "allow_missing_keys", ":", "\n", "                ", "continue", "\n", "", "raise", "AttributeError", "(", "\"{} not found in PyTorch model\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "array", "=", "pt_state_dict", "[", "name", "]", ".", "numpy", "(", ")", "\n", "\n", "if", "transpose", ":", "\n", "            ", "array", "=", "numpy", ".", "transpose", "(", "array", ")", "\n", "\n", "", "if", "len", "(", "symbolic_weight", ".", "shape", ")", "<", "len", "(", "array", ".", "shape", ")", ":", "\n", "            ", "array", "=", "numpy", ".", "squeeze", "(", "array", ")", "\n", "", "elif", "len", "(", "symbolic_weight", ".", "shape", ")", ">", "len", "(", "array", ".", "shape", ")", ":", "\n", "            ", "array", "=", "numpy", ".", "expand_dims", "(", "array", ",", "axis", "=", "0", ")", "\n", "\n", "", "try", ":", "\n", "            ", "assert", "list", "(", "symbolic_weight", ".", "shape", ")", "==", "list", "(", "array", ".", "shape", ")", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "symbolic_weight", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "e", "\n", "\n", "", "tf_loaded_numel", "+=", "array", ".", "size", "\n", "# logger.warning(\"Initialize TF weight {}\".format(symbolic_weight.name))", "\n", "\n", "weight_value_tuples", ".", "append", "(", "(", "symbolic_weight", ",", "array", ")", ")", "\n", "all_pytorch_weights", ".", "discard", "(", "name", ")", "\n", "\n", "", "K", ".", "batch_set_value", "(", "weight_value_tuples", ")", "\n", "\n", "if", "tf_inputs", "is", "not", "None", ":", "\n", "        ", "tfo", "=", "tf_model", "(", "tf_inputs", ",", "training", "=", "False", ")", "# Make sure restore ops are run", "\n", "\n", "", "logger", ".", "info", "(", "\"Loaded {:,} parameters in the TF 2.0 model.\"", ".", "format", "(", "tf_loaded_numel", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Weights or buffers not loaded from PyTorch model: {}\"", ".", "format", "(", "all_pytorch_weights", ")", ")", "\n", "\n", "return", "tf_model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.load_tf2_checkpoint_in_pytorch_model": [[188, 220], ["os.path.abspath", "logger.info", "getattr", "getattr.", "tf_model_class.load_weights", "modeling_tf_pytorch_utils.load_tf2_model_in_pytorch_model", "tf_model_class.", "logger.error"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.load_tf2_model_in_pytorch_model"], ["", "def", "load_tf2_checkpoint_in_pytorch_model", "(", "pt_model", ",", "tf_checkpoint_path", ",", "tf_inputs", "=", "None", ",", "allow_missing_keys", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load TF 2.0 HDF5 checkpoint in a PyTorch model\n        We use HDF5 to easily do transfer learning\n        (see https://github.com/tensorflow/tensorflow/blob/ee16fcac960ae660e0e4496658a366e2f745e1f0/tensorflow/python/keras/engine/network.py#L1352-L1357).\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "import", "torch", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires both PyTorch and TensorFlow to be installed. Please see \"", "\n", "\"https://pytorch.org/ and https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "e", "\n", "\n", "", "import", "transformers", "\n", "\n", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "tf_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Loading TensorFlow weights from {}\"", ".", "format", "(", "tf_checkpoint_path", ")", ")", "\n", "\n", "# Instantiate and load the associated TF 2.0 model", "\n", "tf_model_class_name", "=", "\"TF\"", "+", "pt_model", ".", "__class__", ".", "__name__", "# Add \"TF\" at the beggining", "\n", "tf_model_class", "=", "getattr", "(", "transformers", ",", "tf_model_class_name", ")", "\n", "tf_model", "=", "tf_model_class", "(", "pt_model", ".", "config", ")", "\n", "\n", "if", "tf_inputs", "is", "None", ":", "\n", "        ", "tf_inputs", "=", "tf_model", ".", "dummy_inputs", "\n", "\n", "", "if", "tf_inputs", "is", "not", "None", ":", "\n", "        ", "tfo", "=", "tf_model", "(", "tf_inputs", ",", "training", "=", "False", ")", "# Make sure model is built", "\n", "\n", "", "tf_model", ".", "load_weights", "(", "tf_checkpoint_path", ",", "by_name", "=", "True", ")", "\n", "\n", "return", "load_tf2_model_in_pytorch_model", "(", "pt_model", ",", "tf_model", ",", "allow_missing_keys", "=", "allow_missing_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.load_tf2_model_in_pytorch_model": [[221, 227], ["modeling_tf_pytorch_utils.load_tf2_weights_in_pytorch_model"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.load_tf2_weights_in_pytorch_model"], ["", "def", "load_tf2_model_in_pytorch_model", "(", "pt_model", ",", "tf_model", ",", "allow_missing_keys", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load TF 2.0 model in a pytorch model\n    \"\"\"", "\n", "weights", "=", "tf_model", ".", "weights", "\n", "\n", "return", "load_tf2_weights_in_pytorch_model", "(", "pt_model", ",", "weights", ",", "allow_missing_keys", "=", "allow_missing_keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.load_tf2_weights_in_pytorch_model": [[229, 306], ["dict", "set", "dict.items", "pt_model.load_state_dict", "logger.info", "pt_model.named_parameters", "any", "modeling_tf_pytorch_utils.convert_tf_weight_name_to_pt_weight_name", "list", "torch.from_numpy", "torch.from_numpy", "set.discard", "len", "logger.info", "len", "logger.info", "logger.error", "tf_weight.numpy", "tf_weights_map.keys", "pt_weight.data_ptr", "AttributeError", "numpy.transpose", "len", "len", "numpy.squeeze", "s.startswith", "missing_keys_pt.append", "len", "len", "numpy.expand_dims", "list", "list", "pt_weight.data_ptr", "dict.keys", "pt_weight.data_ptr"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_tf_pytorch_utils.convert_tf_weight_name_to_pt_weight_name"], ["", "def", "load_tf2_weights_in_pytorch_model", "(", "pt_model", ",", "tf_weights", ",", "allow_missing_keys", "=", "False", ")", ":", "\n", "    ", "\"\"\" Load TF2.0 symbolic weights in a PyTorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "import", "torch", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires both PyTorch and TensorFlow to be installed. Please see \"", "\n", "\"https://pytorch.org/ and https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "e", "\n", "\n", "", "new_pt_params_dict", "=", "{", "}", "\n", "current_pt_params_dict", "=", "dict", "(", "pt_model", ".", "named_parameters", "(", ")", ")", "\n", "\n", "# Make sure we are able to load PyTorch base models as well as derived models (with heads)", "\n", "# TF models always have a prefix, some of PyTorch models (base ones) don't", "\n", "start_prefix_to_remove", "=", "''", "\n", "if", "not", "any", "(", "s", ".", "startswith", "(", "pt_model", ".", "base_model_prefix", ")", "for", "s", "in", "current_pt_params_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "start_prefix_to_remove", "=", "pt_model", ".", "base_model_prefix", "+", "'.'", "\n", "\n", "# Build a map from potential PyTorch weight names to TF 2.0 Variables", "\n", "", "tf_weights_map", "=", "{", "}", "\n", "for", "tf_weight", "in", "tf_weights", ":", "\n", "        ", "pt_name", ",", "transpose", "=", "convert_tf_weight_name_to_pt_weight_name", "(", "tf_weight", ".", "name", ",", "start_prefix_to_remove", "=", "start_prefix_to_remove", ")", "\n", "tf_weights_map", "[", "pt_name", "]", "=", "(", "tf_weight", ".", "numpy", "(", ")", ",", "transpose", ")", "\n", "\n", "", "all_tf_weights", "=", "set", "(", "list", "(", "tf_weights_map", ".", "keys", "(", ")", ")", ")", "\n", "loaded_pt_weights_data_ptr", "=", "{", "}", "\n", "missing_keys_pt", "=", "[", "]", "\n", "for", "pt_weight_name", ",", "pt_weight", "in", "current_pt_params_dict", ".", "items", "(", ")", ":", "\n", "# Handle PyTorch shared weight ()not duplicated in TF 2.0", "\n", "        ", "if", "pt_weight", ".", "data_ptr", "(", ")", "in", "loaded_pt_weights_data_ptr", ":", "\n", "            ", "new_pt_params_dict", "[", "pt_weight_name", "]", "=", "loaded_pt_weights_data_ptr", "[", "pt_weight", ".", "data_ptr", "(", ")", "]", "\n", "continue", "\n", "\n", "# Find associated numpy array in pytorch model state dict", "\n", "", "if", "pt_weight_name", "not", "in", "tf_weights_map", ":", "\n", "            ", "if", "allow_missing_keys", ":", "\n", "                ", "missing_keys_pt", ".", "append", "(", "pt_weight_name", ")", "\n", "continue", "\n", "", "raise", "AttributeError", "(", "\"{} not found in TF 2.0 model\"", ".", "format", "(", "pt_weight_name", ")", ")", "\n", "\n", "", "array", ",", "transpose", "=", "tf_weights_map", "[", "pt_weight_name", "]", "\n", "\n", "if", "transpose", ":", "\n", "            ", "array", "=", "numpy", ".", "transpose", "(", "array", ")", "\n", "\n", "", "if", "len", "(", "pt_weight", ".", "shape", ")", "<", "len", "(", "array", ".", "shape", ")", ":", "\n", "            ", "array", "=", "numpy", ".", "squeeze", "(", "array", ")", "\n", "", "elif", "len", "(", "pt_weight", ".", "shape", ")", ">", "len", "(", "array", ".", "shape", ")", ":", "\n", "            ", "array", "=", "numpy", ".", "expand_dims", "(", "array", ",", "axis", "=", "0", ")", "\n", "\n", "", "try", ":", "\n", "            ", "assert", "list", "(", "pt_weight", ".", "shape", ")", "==", "list", "(", "array", ".", "shape", ")", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pt_weight", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "e", "\n", "\n", "# logger.warning(\"Initialize PyTorch weight {}\".format(pt_weight_name))", "\n", "\n", "", "new_pt_params_dict", "[", "pt_weight_name", "]", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "loaded_pt_weights_data_ptr", "[", "pt_weight", ".", "data_ptr", "(", ")", "]", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "all_tf_weights", ".", "discard", "(", "pt_weight_name", ")", "\n", "\n", "", "missing_keys", ",", "unexpected_keys", "=", "pt_model", ".", "load_state_dict", "(", "new_pt_params_dict", ",", "strict", "=", "False", ")", "\n", "missing_keys", "+=", "missing_keys_pt", "\n", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Weights of {} not initialized from TF 2.0 model: {}\"", ".", "format", "(", "\n", "pt_model", ".", "__class__", ".", "__name__", ",", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "        ", "logger", ".", "info", "(", "\"Weights from TF 2.0 model not used in {}: {}\"", ".", "format", "(", "\n", "pt_model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Weights or buffers not loaded from TF 2.0 model: {}\"", ".", "format", "(", "all_tf_weights", ")", ")", "\n", "\n", "return", "pt_model", "\n", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_openai_original_tf_checkpoint_to_pytorch.convert_openai_checkpoint_to_pytorch": [[33, 52], ["transformers.OpenAIGPTModel", "transformers.load_tf_weights_in_openai_gpt", "print", "torch.save", "print", "transformers.OpenAIGPTConfig", "transformers.OpenAIGPTConfig.from_json_file", "transformers.OpenAIGPTModel.state_dict", "io.open", "f.write", "OpenAIGPTConfig.from_json_file.to_json_string"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_openai.load_tf_weights_in_openai_gpt", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string"], ["def", "convert_openai_checkpoint_to_pytorch", "(", "openai_checkpoint_folder_path", ",", "openai_config_file", ",", "pytorch_dump_folder_path", ")", ":", "\n", "# Construct model", "\n", "    ", "if", "openai_config_file", "==", "\"\"", ":", "\n", "        ", "config", "=", "OpenAIGPTConfig", "(", ")", "\n", "", "else", ":", "\n", "        ", "config", "=", "OpenAIGPTConfig", ".", "from_json_file", "(", "openai_config_file", ")", "\n", "", "model", "=", "OpenAIGPTModel", "(", "config", ")", "\n", "\n", "# Load weights from numpy", "\n", "load_tf_weights_in_openai_gpt", "(", "model", ",", "config", ",", "openai_checkpoint_folder_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "WEIGHTS_NAME", "\n", "pytorch_config_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "CONFIG_NAME", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_weights_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_weights_dump_path", ")", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "pytorch_config_dump_path", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_xlm.XLMConfig.__init__": [[83, 146], ["configuration_utils.PretrainedConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size", "=", "30145", ",", "\n", "emb_dim", "=", "2048", ",", "\n", "n_layers", "=", "12", ",", "\n", "n_heads", "=", "16", ",", "\n", "dropout", "=", "0.1", ",", "\n", "attention_dropout", "=", "0.1", ",", "\n", "gelu_activation", "=", "True", ",", "\n", "sinusoidal_embeddings", "=", "False", ",", "\n", "causal", "=", "False", ",", "\n", "asm", "=", "False", ",", "\n", "n_langs", "=", "1", ",", "\n", "use_lang_emb", "=", "True", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "embed_init_std", "=", "2048", "**", "-", "0.5", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "\n", "init_std", "=", "0.02", ",", "\n", "bos_index", "=", "0", ",", "\n", "eos_index", "=", "1", ",", "\n", "pad_index", "=", "2", ",", "\n", "unk_index", "=", "3", ",", "\n", "mask_index", "=", "5", ",", "\n", "is_encoder", "=", "True", ",", "\n", "summary_type", "=", "'first'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "None", ",", "\n", "summary_proj_to_labels", "=", "True", ",", "\n", "summary_first_dropout", "=", "0.1", ",", "\n", "start_n_top", "=", "5", ",", "\n", "end_n_top", "=", "5", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs XLMConfig.\n        \"\"\"", "\n", "super", "(", "XLMConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "self", ".", "gelu_activation", "=", "gelu_activation", "\n", "self", ".", "sinusoidal_embeddings", "=", "sinusoidal_embeddings", "\n", "self", ".", "causal", "=", "causal", "\n", "self", ".", "asm", "=", "asm", "\n", "self", ".", "n_langs", "=", "n_langs", "\n", "self", ".", "use_lang_emb", "=", "use_lang_emb", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "self", ".", "bos_index", "=", "bos_index", "\n", "self", ".", "eos_index", "=", "eos_index", "\n", "self", ".", "pad_index", "=", "pad_index", "\n", "self", ".", "unk_index", "=", "unk_index", "\n", "self", ".", "mask_index", "=", "mask_index", "\n", "self", ".", "is_encoder", "=", "is_encoder", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "embed_init_std", "=", "embed_init_std", "\n", "self", ".", "init_std", "=", "init_std", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_proj_to_labels", "=", "summary_proj_to_labels", "\n", "self", ".", "summary_first_dropout", "=", "summary_first_dropout", "\n", "self", ".", "start_n_top", "=", "start_n_top", "\n", "self", ".", "end_n_top", "=", "end_n_top", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_xlm.XLMConfig.n_words": [[151, 154], ["None"], "methods", ["None"], ["", "@", "n_words", ".", "setter", "\n", "def", "n_words", "(", "self", ",", "value", ")", ":", "# For backward compatibility", "\n", "        ", "self", ".", "vocab_size", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_xlm.XLMConfig.hidden_size": [[155, 158], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "emb_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_xlm.XLMConfig.num_attention_heads": [[159, 162], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_xlm.XLMConfig.num_hidden_layers": [[163, 166], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layers", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.BertJapaneseTokenizer.__init__": [[82, 141], ["tokenization_bert.BertTokenizer.__init__", "tokenization_bert.load_vocab", "collections.OrderedDict", "os.path.isfile", "ValueError", "tokenization_bert.BasicTokenizer", "tokenization_bert.WordpieceTokenizer", "tokenization_bert_japanese.BertJapaneseTokenizer.vocab.items", "tokenization_bert_japanese.MecabTokenizer", "ValueError", "tokenization_bert_japanese.CharacterTokenizer", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "False", ",", "\n", "do_word_tokenize", "=", "True", ",", "do_subword_tokenize", "=", "True", ",", "\n", "word_tokenizer_type", "=", "'basic'", ",", "subword_tokenizer_type", "=", "'wordpiece'", ",", "\n", "never_split", "=", "None", ",", "unk_token", "=", "'[UNK]'", ",", "sep_token", "=", "'[SEP]'", ",", "\n", "pad_token", "=", "'[PAD]'", ",", "cls_token", "=", "'[CLS]'", ",", "mask_token", "=", "'[MASK]'", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs a MecabBertTokenizer.\n\n        Args:\n            **vocab_file**: Path to a one-wordpiece-per-line vocabulary file.\n            **do_lower_case**: (`optional`) boolean (default True)\n                Whether to lower case the input.\n                Only has an effect when do_basic_tokenize=True.\n            **do_word_tokenize**: (`optional`) boolean (default True)\n                Whether to do word tokenization.\n            **do_subword_tokenize**: (`optional`) boolean (default True)\n                Whether to do subword tokenization.\n            **word_tokenizer_type**: (`optional`) string (default \"basic\")\n                Type of word tokenizer.\n            **subword_tokenizer_type**: (`optional`) string (default \"wordpiece\")\n                Type of subword tokenizer.\n        \"\"\"", "\n", "super", "(", "BertTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "sep_token", "=", "sep_token", ",", "\n", "pad_token", "=", "pad_token", ",", "cls_token", "=", "cls_token", ",", "\n", "mask_token", "=", "mask_token", ",", "**", "kwargs", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "3", "# take into account special tokens", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "vocab_file", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Can't find a vocabulary file at path '{}'. To load the vocabulary from a Google pretrained \"", "\n", "\"model use `tokenizer = BertTokenizer.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "ids_to_tokens", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "(", "ids", ",", "tok", ")", "for", "tok", ",", "ids", "in", "self", ".", "vocab", ".", "items", "(", ")", "]", ")", "\n", "\n", "self", ".", "do_word_tokenize", "=", "do_word_tokenize", "\n", "if", "do_word_tokenize", ":", "\n", "            ", "if", "word_tokenizer_type", "==", "'basic'", ":", "\n", "                ", "self", ".", "word_tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ",", "\n", "never_split", "=", "never_split", ",", "\n", "tokenize_chinese_chars", "=", "False", ")", "\n", "", "elif", "word_tokenizer_type", "==", "'mecab'", ":", "\n", "                ", "self", ".", "word_tokenizer", "=", "MecabTokenizer", "(", "do_lower_case", "=", "do_lower_case", ",", "\n", "never_split", "=", "never_split", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Invalid word_tokenizer_type '{}' is specified.\"", ".", "format", "(", "word_tokenizer_type", ")", ")", "\n", "\n", "", "", "self", ".", "do_subword_tokenize", "=", "do_subword_tokenize", "\n", "if", "do_subword_tokenize", ":", "\n", "            ", "if", "subword_tokenizer_type", "==", "'wordpiece'", ":", "\n", "                ", "self", ".", "subword_tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ",", "\n", "unk_token", "=", "self", ".", "unk_token", ")", "\n", "", "elif", "subword_tokenizer_type", "==", "'character'", ":", "\n", "                ", "self", ".", "subword_tokenizer", "=", "CharacterTokenizer", "(", "vocab", "=", "self", ".", "vocab", ",", "\n", "unk_token", "=", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Invalid subword_tokenizer_type '{}' is specified.\"", ".", "format", "(", "subword_tokenizer_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.BertJapaneseTokenizer._tokenize": [[143, 157], ["tokenization_bert_japanese.BertJapaneseTokenizer.word_tokenizer.tokenize", "tokenization_bert_japanese.BertJapaneseTokenizer.subword_tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "", "", "def", "_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "do_word_tokenize", ":", "\n", "            ", "tokens", "=", "self", ".", "word_tokenizer", ".", "tokenize", "(", "text", ",", "\n", "never_split", "=", "self", ".", "all_special_tokens", ")", "\n", "", "else", ":", "\n", "            ", "tokens", "=", "[", "text", "]", "\n", "\n", "", "if", "self", ".", "do_subword_tokenize", ":", "\n", "            ", "split_tokens", "=", "[", "sub_token", "for", "token", "in", "tokens", "\n", "for", "sub_token", "in", "self", ".", "subword_tokenizer", ".", "tokenize", "(", "token", ")", "]", "\n", "", "else", ":", "\n", "            ", "split_tokens", "=", "tokens", "\n", "\n", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.MecabTokenizer.__init__": [[162, 181], ["MeCab.Tagger"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "do_lower_case", "=", "False", ",", "never_split", "=", "None", ",", "normalize_text", "=", "True", ")", ":", "\n", "        ", "\"\"\"Constructs a MecabTokenizer.\n\n        Args:\n            **do_lower_case**: (`optional`) boolean (default True)\n                Whether to lower case the input.\n            **never_split**: (`optional`) list of str\n                Kept for backward compatibility purposes.\n                Now implemented directly at the base class level (see :func:`PreTrainedTokenizer.tokenize`)\n                List of token not to split.\n            **normalize_text**: (`optional`) boolean (default True)\n                Whether to apply unicode normalization to text before tokenization.\n        \"\"\"", "\n", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "never_split", "=", "never_split", "if", "never_split", "is", "not", "None", "else", "[", "]", "\n", "self", ".", "normalize_text", "=", "normalize_text", "\n", "\n", "import", "MeCab", "\n", "self", ".", "mecab", "=", "MeCab", ".", "Tagger", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.MecabTokenizer.tokenize": [[182, 210], ["tokenization_bert_japanese.MecabTokenizer.split", "unicodedata.normalize", "tokenization_bert_japanese.MecabTokenizer.mecab.parse().decode", "tokenization_bert_japanese.MecabTokenizer.mecab.parse", "line.split", "unicodedata.normalize.index", "tokens.append", "len", "token.lower.lower.lower", "tokenization_bert_japanese.MecabTokenizer.mecab.parse", "unicodedata.normalize.encode"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode"], ["", "def", "tokenize", "(", "self", ",", "text", ",", "never_split", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text.\"\"\"", "\n", "if", "self", ".", "normalize_text", ":", "\n", "            ", "text", "=", "unicodedata", ".", "normalize", "(", "'NFKC'", ",", "text", ")", "\n", "\n", "", "never_split", "=", "self", ".", "never_split", "+", "(", "never_split", "if", "never_split", "is", "not", "None", "else", "[", "]", ")", "\n", "tokens", "=", "[", "]", "\n", "\n", "if", "six", ".", "PY2", ":", "\n", "            ", "mecab_output", "=", "self", ".", "mecab", ".", "parse", "(", "text", ".", "encode", "(", "'utf-8'", ")", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "", "else", ":", "\n", "            ", "mecab_output", "=", "self", ".", "mecab", ".", "parse", "(", "text", ")", "\n", "\n", "", "cursor", "=", "0", "\n", "for", "line", "in", "mecab_output", ".", "split", "(", "'\\n'", ")", ":", "\n", "            ", "if", "line", "==", "'EOS'", ":", "\n", "                ", "break", "\n", "\n", "", "token", ",", "_", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "token_start", "=", "text", ".", "index", "(", "token", ",", "cursor", ")", "\n", "token_end", "=", "token_start", "+", "len", "(", "token", ")", "\n", "if", "self", ".", "do_lower_case", "and", "token", "not", "in", "never_split", ":", "\n", "                ", "token", "=", "token", ".", "lower", "(", ")", "\n", "\n", "", "tokens", ".", "append", "(", "token", ")", "\n", "cursor", "=", "token_end", "\n", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.__init__": [[215, 229], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_token", ",", "normalize_text", "=", "True", ")", ":", "\n", "        ", "\"\"\"Constructs a CharacterTokenizer.\n\n        Args:\n            **vocab**:\n                Vocabulary object.\n            **unk_token**: str\n                A special symbol for out-of-vocabulary token.\n            **normalize_text**: (`optional`) boolean (default True)\n                Whether to apply unicode normalization to text before tokenization.\n        \"\"\"", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "normalize_text", "=", "normalize_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize": [[230, 254], ["enumerate", "unicodedata.normalize", "output_tokens.append", "output_tokens.append"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into characters.\n\n        For example:\n            input = \"apple\"\n            output = [\"a\", \"p\", \"p\", \"l\", \"e\"]\n        Args:\n            text: A single token or whitespace separated tokens.\n                This should have already been passed through `BasicTokenizer`.\n        Returns:\n            A list of characters.\n        \"\"\"", "\n", "if", "self", ".", "normalize_text", ":", "\n", "            ", "text", "=", "unicodedata", ".", "normalize", "(", "'NFKC'", ",", "text", ")", "\n", "\n", "", "output_tokens", "=", "[", "]", "\n", "for", "i", ",", "char", "in", "enumerate", "(", "text", ")", ":", "\n", "            ", "if", "char", "not", "in", "self", ".", "vocab", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "output_tokens", ".", "append", "(", "char", ")", "\n", "\n", "", "return", "output_tokens", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_auto.AutoTokenizer.__init__": [[63, 65], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoTokenizer is designed to be instantiated \"", "\n", "\"using the `AutoTokenizer.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_auto.AutoTokenizer.from_pretrained": [[67, 154], ["ValueError", "tokenization_t5.T5Tokenizer.from_pretrained", "tokenization_distilbert.DistilBertTokenizer.from_pretrained", "tokenization_albert.AlbertTokenizer.from_pretrained", "tokenization_camembert.CamembertTokenizer.from_pretrained", "tokenization_roberta.RobertaTokenizer.from_pretrained", "tokenization_bert_japanese.BertJapaneseTokenizer.from_pretrained", "tokenization_bert.BertTokenizer.from_pretrained", "tokenization_openai.OpenAIGPTTokenizer.from_pretrained", "tokenization_gpt2.GPT2Tokenizer.from_pretrained", "tokenization_transfo_xl.TransfoXLTokenizer.from_pretrained", "tokenization_xlnet.XLNetTokenizer.from_pretrained", "tokenization_xlm.XLMTokenizer.from_pretrained", "tokenization_ctrl.CTRLTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiate a one of the tokenizer classes of the library\n        from a pre-trained model vocabulary.\n\n        The tokenizer class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `t5`: T5Tokenizer (T5 model)\n            - contains `distilbert`: DistilBertTokenizer (DistilBert model)\n            - contains `albert`: AlbertTokenizer (ALBERT model)\n            - contains `camembert`: CamembertTokenizer (CamemBERT model)\n            - contains `roberta`: RobertaTokenizer (RoBERTa model)\n            - contains `bert-base-japanese`: BertJapaneseTokenizer (Bert model)\n            - contains `bert`: BertTokenizer (Bert model)\n            - contains `openai-gpt`: OpenAIGPTTokenizer (OpenAI GPT model)\n            - contains `gpt2`: GPT2Tokenizer (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TransfoXLTokenizer (Transformer-XL model)\n            - contains `xlnet`: XLNetTokenizer (XLNet model)\n            - contains `xlm`: XLMTokenizer (XLM model)\n            - contains `ctrl`: CTRLTokenizer (Salesforce CTRL model)\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a predefined tokenizer to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a predefined tokenizer that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing vocabulary files required by the tokenizer, for instance saved using the :func:`~transformers.PreTrainedTokenizer.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - (not applicable to all derived classes) a path or url to a single saved vocabulary file if and only if the tokenizer only requires a single vocabulary file (e.g. Bert, XLNet), e.g.: ``./my_model_directory/vocab.txt``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded predefined tokenizer vocabulary files should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the vocabulary files and override the cached versions if they exists.\n\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            inputs: (`optional`) positional arguments: will be passed to the Tokenizer ``__init__`` method.\n\n            kwargs: (`optional`) keyword arguments: will be passed to the Tokenizer ``__init__`` method. Can be used to set special tokens like ``bos_token``, ``eos_token``, ``unk_token``, ``sep_token``, ``pad_token``, ``cls_token``, ``mask_token``, ``additional_special_tokens``. See parameters in the doc string of :class:`~transformers.PreTrainedTokenizer` for details.\n\n        Examples::\n\n            # Download vocabulary from S3 and cache.\n            tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')\n\n            # Download vocabulary from S3 (user-uploaded) and cache.\n            tokenizer = AutoTokenizer.from_pretrained('dbmdz/bert-base-german-cased')\n\n            # If vocabulary files are in a directory (e.g. tokenizer was saved using `save_pretrained('./test/saved_model/')`)\n            tokenizer = AutoTokenizer.from_pretrained('./test/bert_saved_model/')\n\n        \"\"\"", "\n", "if", "'t5'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "T5Tokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'albert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "AlbertTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'camembert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CamembertTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert-base-japanese'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertJapaneseTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "OpenAIGPTTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "GPT2Tokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TransfoXLTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'ctrl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CTRLTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta', 'distilbert,' 'camembert', 'ctrl', 'albert'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_xlnet.XLNetConfig.__init__": [[74, 128], ["configuration_utils.PretrainedConfig.__init__"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size", "=", "32000", ",", "\n", "d_model", "=", "1024", ",", "\n", "n_layer", "=", "24", ",", "\n", "n_head", "=", "16", ",", "\n", "d_inner", "=", "4096", ",", "\n", "ff_activation", "=", "\"gelu\"", ",", "\n", "untie_r", "=", "True", ",", "\n", "attn_type", "=", "\"bi\"", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "\n", "dropout", "=", "0.1", ",", "\n", "mem_len", "=", "None", ",", "\n", "reuse_len", "=", "None", ",", "\n", "bi_data", "=", "False", ",", "\n", "clamp_len", "=", "-", "1", ",", "\n", "same_length", "=", "False", ",", "\n", "summary_type", "=", "'last'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "'tanh'", ",", "\n", "summary_last_dropout", "=", "0.1", ",", "\n", "start_n_top", "=", "5", ",", "\n", "end_n_top", "=", "5", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs XLNetConfig.\n        \"\"\"", "\n", "super", "(", "XLNetConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "assert", "d_model", "%", "n_head", "==", "0", "\n", "self", ".", "d_head", "=", "d_model", "//", "n_head", "\n", "self", ".", "ff_activation", "=", "ff_activation", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "untie_r", "=", "untie_r", "\n", "self", ".", "attn_type", "=", "attn_type", "\n", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "reuse_len", "=", "reuse_len", "\n", "self", ".", "bi_data", "=", "bi_data", "\n", "self", ".", "clamp_len", "=", "clamp_len", "\n", "self", ".", "same_length", "=", "same_length", "\n", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_last_dropout", "=", "summary_last_dropout", "\n", "self", ".", "start_n_top", "=", "start_n_top", "\n", "self", ".", "end_n_top", "=", "end_n_top", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_xlnet.XLNetConfig.max_position_embeddings": [[129, 132], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_xlnet.XLNetConfig.n_token": [[137, 140], ["None"], "methods", ["None"], ["", "@", "n_token", ".", "setter", "\n", "def", "n_token", "(", "self", ",", "value", ")", ":", "# Backward compatibility", "\n", "        ", "self", ".", "vocab_size", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_xlnet.XLNetConfig.hidden_size": [[141, 144], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_xlnet.XLNetConfig.num_attention_heads": [[145, 148], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_xlnet.XLNetConfig.num_hidden_layers": [[149, 152], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.__init__": [[87, 112], ["tokenization_utils.PreTrainedTokenizer.__init__", "dict", "English", "English.Defaults.create_tokenizer", "io.open", "json.load", "io.open", "tuple", "zip", "logger.warning", "tokenization_bert.BasicTokenizer", "tokenization_openai.OpenAIGPTTokenizer.encoder.items", "merges_handle.read().split", "merge.split", "range", "len", "merges_handle.read"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "unk_token", "=", "\"<unk>\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "\n", "try", ":", "\n", "            ", "import", "ftfy", "\n", "from", "spacy", ".", "lang", ".", "en", "import", "English", "\n", "_nlp", "=", "English", "(", ")", "\n", "self", ".", "nlp", "=", "_nlp", ".", "Defaults", ".", "create_tokenizer", "(", "_nlp", ")", "\n", "self", ".", "fix_text", "=", "ftfy", ".", "fix_text", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"ftfy or spacy is not installed using BERT BasicTokenizer instead of SpaCy & ftfy.\"", ")", "\n", "self", ".", "nlp", "=", "BasicTokenizer", "(", "do_lower_case", "=", "True", ")", "\n", "self", ".", "fix_text", "=", "None", "\n", "\n", "", "with", "open", "(", "vocab_file", ",", "encoding", "=", "\"utf-8\"", ")", "as", "vocab_handle", ":", "\n", "            ", "self", ".", "encoder", "=", "json", ".", "load", "(", "vocab_handle", ")", "\n", "", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "with", "open", "(", "merges_file", ",", "encoding", "=", "'utf-8'", ")", "as", "merges_handle", ":", "\n", "            ", "merges", "=", "merges_handle", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", "\n", "", "merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "merges", "]", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "merges", ",", "range", "(", "len", "(", "merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.vocab_size": [[113, 116], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.bpe": [[117, 159], ["tokenization_openai.get_pairs", "tuple", "min", "tuple", "len", "len", "tokenization_openai.get_pairs", "word.index", "tuple.extend", "tuple.append", "tuple.append", "tokenization_openai.OpenAIGPTTokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.get_pairs", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "word", "=", "tuple", "(", "token", "[", ":", "-", "1", "]", ")", "+", "(", "token", "[", "-", "1", "]", "+", "'</w>'", ",", ")", "\n", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "+", "'</w>'", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "if", "word", "==", "'\\n  </w>'", ":", "\n", "            ", "word", "=", "'\\n</w>'", "\n", "", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer._tokenize": [[160, 174], ["tokenization_openai.OpenAIGPTTokenizer.nlp.tokenize", "tokenization_openai.OpenAIGPTTokenizer.nlp", "split_tokens.extend", "tokenization_openai.text_standardize", "split_tokens.extend", "tokenization_openai.OpenAIGPTTokenizer.fix_text", "tokenization_openai.OpenAIGPTTokenizer.bpe().split", "tokenization_openai.OpenAIGPTTokenizer.bpe().split", "tokenization_openai.OpenAIGPTTokenizer.bpe", "tokenization_openai.OpenAIGPTTokenizer.bpe", "token.text.lower"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.text_standardize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.bpe", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.bpe"], ["", "def", "_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\" Tokenize a string. \"\"\"", "\n", "split_tokens", "=", "[", "]", "\n", "if", "self", ".", "fix_text", "is", "None", ":", "\n", "# Using BERT's BasicTokenizer", "\n", "            ", "text", "=", "self", ".", "nlp", ".", "tokenize", "(", "text", ")", "\n", "for", "token", "in", "text", ":", "\n", "                ", "split_tokens", ".", "extend", "(", "[", "t", "for", "t", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "", "else", ":", "\n", "# Using SpaCy & ftfy (original tokenization process of OpenAI GPT)", "\n", "            ", "text", "=", "self", ".", "nlp", "(", "text_standardize", "(", "self", ".", "fix_text", "(", "text", ")", ")", ")", "\n", "for", "token", "in", "text", ":", "\n", "                ", "split_tokens", ".", "extend", "(", "[", "t", "for", "t", "in", "self", ".", "bpe", "(", "token", ".", "text", ".", "lower", "(", ")", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer._convert_token_to_id": [[175, 178], ["tokenization_openai.OpenAIGPTTokenizer.encoder.get", "tokenization_openai.OpenAIGPTTokenizer.encoder.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "encoder", ".", "get", "(", "token", ",", "self", ".", "encoder", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer._convert_id_to_token": [[179, 182], ["tokenization_openai.OpenAIGPTTokenizer.decoder.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an id in a token (BPE) using the vocab.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "get", "(", "index", ",", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.convert_tokens_to_string": [[183, 187], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "''", ".", "join", "(", "tokens", ")", ".", "replace", "(", "'</w>'", ",", "' '", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.save_vocabulary": [[188, 211], ["os.path.join", "os.path.join", "os.path.isdir", "logger.error", "io.open", "f.write", "io.open", "writer.write", "sorted", "json.dumps", "tokenization_openai.OpenAIGPTTokenizer.bpe_ranks.items", "writer.write", "logger.warning"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary and merge files to a directory.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "merge_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "encoder", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "index", "=", "0", "\n", "with", "open", "(", "merge_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "u'#version: 0.2\\n'", ")", "\n", "for", "bpe_tokens", ",", "token_index", "in", "sorted", "(", "self", ".", "bpe_ranks", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: BPE merge indices are not consecutive.\"", "\n", "\" Please check that the tokenizer is not corrupted!\"", ".", "format", "(", "merge_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "' '", ".", "join", "(", "bpe_tokens", ")", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "vocab_file", ",", "merge_file", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.get_pairs": [[50, 61], ["set", "set.add"], "function", ["None"], ["def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"\n    Return set of symbol pairs in a word.\n    word is represented as tuple of symbols (symbols being variable-length strings)\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.text_standardize": [[62, 76], ["re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub", "re.sub", "re.sub", "re.sub.strip"], "function", ["None"], ["", "def", "text_standardize", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    fixes some issues the spacy tokenizer had on books corpus\n    also does some whitespace standardization\n    \"\"\"", "\n", "text", "=", "text", ".", "replace", "(", "'\u2014'", ",", "'-'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2013'", ",", "'-'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2015'", ",", "'-'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2026'", ",", "'...'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u00b4'", ",", "\"'\"", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'''(-+|~+|!+|\"+|;+|\\?+|\\++|,+|\\)+|\\(+|\\\\+|\\/+|\\*+|\\[+|\\]+|}+|{+|\\|+|_+)'''", ",", "r' \\1 '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\s*\\n\\s*'", ",", "' \\n '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'[^\\S\\n]+'", ",", "' '", ",", "text", ")", "\n", "return", "text", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.convert_bert_original_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch": [[29, 41], ["transformers.BertConfig.from_json_file", "print", "transformers.BertForPreTraining", "transformers.load_tf_weights_in_bert", "print", "torch.save", "transformers.BertForPreTraining.state_dict", "str"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.modeling_bert.load_tf_weights_in_bert"], ["def", "convert_tf_checkpoint_to_pytorch", "(", "tf_checkpoint_path", ",", "bert_config_file", ",", "pytorch_dump_path", ")", ":", "\n", "# Initialise PyTorch model", "\n", "    ", "config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "print", "(", "\"Building PyTorch model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "model", "=", "BertForPreTraining", "(", "config", ")", "\n", "\n", "# Load weights from tf checkpoint", "\n", "load_tf_weights_in_bert", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_dump_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.__init__": [[79, 81], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoConfig is designed to be instantiated \"", "\n", "\"using the `AutoConfig.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained": [[83, 174], ["ValueError", "configuration_t5.T5Config.from_pretrained", "configuration_distilbert.DistilBertConfig.from_pretrained", "configuration_albert.AlbertConfig.from_pretrained", "configuration_camembert.CamembertConfig.from_pretrained", "configuration_roberta.RobertaConfig.from_pretrained", "configuration_bert.BertConfig.from_pretrained", "configuration_openai.OpenAIGPTConfig.from_pretrained", "configuration_gpt2.GPT2Config.from_pretrained", "configuration_transfo_xl.TransfoXLConfig.from_pretrained", "configuration_xlnet.XLNetConfig.from_pretrained", "configuration_xlm.XLMConfig.from_pretrained", "configuration_ctrl.CTRLConfig.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiate a one of the configuration classes of the library\n        from a pre-trained model configuration.\n\n        The configuration class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `t5`: T5Config (T5 model)\n            - contains `distilbert`: DistilBertConfig (DistilBERT model)\n            - contains `albert`: AlbertConfig (ALBERT model)\n            - contains `camembert`: CamembertConfig (CamemBERT model)\n            - contains `roberta`: RobertaConfig (RoBERTa model)\n            - contains `bert`: BertConfig (Bert model)\n            - contains `openai-gpt`: OpenAIGPTConfig (OpenAI GPT model)\n            - contains `gpt2`: GPT2Config (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TransfoXLConfig (Transformer-XL model)\n            - contains `xlnet`: XLNetConfig (XLNet model)\n            - contains `xlm`: XLMConfig (XLM model)\n            - contains `ctrl` : CTRLConfig (CTRL model)\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model configuration to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a string with the `identifier name` of a pre-trained model configuration that was user-uploaded to our S3, e.g.: ``dbmdz/bert-base-german-cased``.\n                - a path to a `directory` containing a configuration file saved using the :func:`~transformers.PretrainedConfig.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - a path or url to a saved configuration JSON `file`, e.g.: ``./my_model_directory/configuration.json``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            kwargs: (`optional`) dict: key/value pairs with which to update the configuration object after loading.\n\n                - The values in kwargs of any keys which are configuration attributes will be used to override the loaded values.\n                - Behavior concerning key/value pairs whose keys are *not* configuration attributes is controlled by the `return_unused_kwargs` keyword parameter.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            resume_download: (`optional`) boolean, default False:\n                Do not delete incompletely recieved file. Attempt to resume the download if such a file exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            return_unused_kwargs: (`optional`) bool:\n\n                - If False, then this function returns just the final configuration object.\n                - If True, then this functions returns a tuple `(config, unused_kwargs)` where `unused_kwargs` is a dictionary consisting of the key/value pairs whose keys are not configuration attributes: ie the part of kwargs which has not been used to update `config` and is otherwise ignored.\n\n        Examples::\n\n            config = AutoConfig.from_pretrained('bert-base-uncased')    # Download configuration from S3 and cache.\n            config = AutoConfig.from_pretrained('./test/bert_saved_model/')  # E.g. config (or model) was saved using `save_pretrained('./test/saved_model/')`\n            config = AutoConfig.from_pretrained('./test/bert_saved_model/my_configuration.json')\n            config = AutoConfig.from_pretrained('bert-base-uncased', output_attention=True, foo=False)\n            assert config.output_attention == True\n            config, unused_kwargs = AutoConfig.from_pretrained('bert-base-uncased', output_attention=True,\n                                                               foo=False, return_unused_kwargs=True)\n            assert config.output_attention == True\n            assert unused_kwargs == {'foo': False}\n\n        \"\"\"", "\n", "if", "'t5'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "T5Config", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'albert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "AlbertConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'camembert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CamembertConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "OpenAIGPTConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "GPT2Config", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TransfoXLConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'ctrl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "CTRLConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta', 'distilbert', 'camembert', 'ctrl', 'albert'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_ctrl_test.CTRLTokenizationTest.setUp": [[29, 44], ["super().setUp", "dict", "os.path.join", "os.path.join", "zip", "io.open", "fp.write", "io.open", "fp.write", "range", "len", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "CTRLTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# Adapted from Sennrich et al. 2015 and https://github.com/rsennrich/subword-nmt", "\n", "vocab", "=", "[", "'adapt'", ",", "'re@@'", ",", "'a@@'", ",", "'apt'", ",", "'c@@'", ",", "'t'", ",", "'<unk>'", "]", "\n", "vocab_tokens", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "merges", "=", "[", "\"#version: 0.2\"", ",", "'a p'", ",", "'ap t</w>'", ",", "'r e'", ",", "'a d'", ",", "'ad apt</w>'", ",", "''", "]", "\n", "self", ".", "special_tokens_map", "=", "{", "\"unk_token\"", ":", "\"<unk>\"", "}", "\n", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "self", ".", "merges_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "json", ".", "dumps", "(", "vocab_tokens", ")", "+", "\"\\n\"", ")", "\n", "", "with", "open", "(", "self", ".", "merges_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"\\n\"", ".", "join", "(", "merges", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_ctrl_test.CTRLTokenizationTest.get_tokenizer": [[45, 48], ["kwargs.update", "transformers.tokenization_ctrl.CTRLTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "update", "(", "self", ".", "special_tokens_map", ")", "\n", "return", "CTRLTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_ctrl_test.CTRLTokenizationTest.get_input_output_texts": [[49, 53], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"adapt react readapt apt\"", "\n", "output_text", "=", "u\"adapt react readapt apt\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_ctrl_test.CTRLTokenizationTest.test_full_tokenizer": [[54, 66], ["transformers.tokenization_ctrl.CTRLTokenizer", "transformers.tokenization_ctrl.CTRLTokenizer.tokenize", "tokenization_ctrl_test.CTRLTokenizationTest.assertListEqual", "tokenization_ctrl_test.CTRLTokenizationTest.assertListEqual", "transformers.tokenization_ctrl.CTRLTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "CTRLTokenizer", "(", "self", ".", "vocab_file", ",", "self", ".", "merges_file", ",", "**", "self", ".", "special_tokens_map", ")", "\n", "text", "=", "\"adapt react readapt apt\"", "\n", "bpe_tokens", "=", "'adapt re@@ a@@ c@@ t re@@ adapt apt'", ".", "split", "(", ")", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "bpe_tokens", ")", "\n", "\n", "input_tokens", "=", "tokens", "+", "[", "tokenizer", ".", "unk_token", "]", "\n", "\n", "input_bpe_tokens", "=", "[", "0", ",", "1", ",", "2", ",", "4", ",", "5", ",", "1", ",", "0", ",", "3", ",", "6", "]", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_tokens", ")", ",", "input_bpe_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_gpt2_test.GPT2ModelTest.setUp": [[221, 224], ["GPT2ModelTest.GPT2ModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "GPT2ModelTest", ".", "GPT2ModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "GPT2Config", ",", "n_embd", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_gpt2_test.GPT2ModelTest.test_config": [[225, 227], ["modeling_gpt2_test.GPT2ModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_gpt2_test.GPT2ModelTest.test_gpt2_model": [[228, 231], ["modeling_gpt2_test.GPT2ModelTest.model_tester.prepare_config_and_inputs", "modeling_gpt2_test.GPT2ModelTest.model_tester.create_and_check_gpt2_model"], "methods", ["None"], ["", "def", "test_gpt2_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_gpt2_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_gpt2_test.GPT2ModelTest.test_gpt2_lm_head_model": [[232, 235], ["modeling_gpt2_test.GPT2ModelTest.model_tester.prepare_config_and_inputs", "modeling_gpt2_test.GPT2ModelTest.model_tester.create_and_check_lm_head_model"], "methods", ["None"], ["", "def", "test_gpt2_lm_head_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_lm_head_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_gpt2_test.GPT2ModelTest.test_gpt2_double_lm_head_model": [[236, 239], ["modeling_gpt2_test.GPT2ModelTest.model_tester.prepare_config_and_inputs", "modeling_gpt2_test.GPT2ModelTest.model_tester.create_and_check_double_lm_head_model"], "methods", ["None"], ["", "def", "test_gpt2_double_lm_head_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_double_lm_head_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_gpt2_test.GPT2ModelTest.test_model_from_pretrained": [[240, 247], ["list", "GPT2Model.from_pretrained", "shutil.rmtree", "modeling_gpt2_test.GPT2ModelTest.assertIsNotNone", "GPT2_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "GPT2_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "GPT2Model", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_openai_test.OpenAIGPTModelTest.setUp": [[189, 192], ["OpenAIGPTModelTest.OpenAIGPTModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "OpenAIGPTModelTest", ".", "OpenAIGPTModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "OpenAIGPTConfig", ",", "n_embd", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_openai_test.OpenAIGPTModelTest.test_config": [[193, 195], ["modeling_openai_test.OpenAIGPTModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_openai_test.OpenAIGPTModelTest.test_openai_gpt_model": [[196, 199], ["modeling_openai_test.OpenAIGPTModelTest.model_tester.prepare_config_and_inputs", "modeling_openai_test.OpenAIGPTModelTest.model_tester.create_and_check_openai_gpt_model"], "methods", ["None"], ["", "def", "test_openai_gpt_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_openai_gpt_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_openai_test.OpenAIGPTModelTest.test_openai_gpt_lm_head_model": [[200, 203], ["modeling_openai_test.OpenAIGPTModelTest.model_tester.prepare_config_and_inputs", "modeling_openai_test.OpenAIGPTModelTest.model_tester.create_and_check_lm_head_model"], "methods", ["None"], ["", "def", "test_openai_gpt_lm_head_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_lm_head_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_openai_test.OpenAIGPTModelTest.test_openai_gpt_double_lm_head_model": [[204, 207], ["modeling_openai_test.OpenAIGPTModelTest.model_tester.prepare_config_and_inputs", "modeling_openai_test.OpenAIGPTModelTest.model_tester.create_and_check_double_lm_head_model"], "methods", ["None"], ["", "def", "test_openai_gpt_double_lm_head_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_double_lm_head_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_openai_test.OpenAIGPTModelTest.test_model_from_pretrained": [[208, 215], ["list", "OpenAIGPTModel.from_pretrained", "shutil.rmtree", "modeling_openai_test.OpenAIGPTModelTest.assertIsNotNone", "OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "OpenAIGPTModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseTokenizationTest.setUp": [[35, 45], ["super().setUp", "os.path.join", "io.open", "vocab_writer.write"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "BertJapaneseTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "vocab_tokens", "=", "[", "u\"[UNK]\"", ",", "u\"[CLS]\"", ",", "u\"[SEP]\"", ",", "\n", "u\"\u3053\u3093\u306b\u3061\u306f\"", ",", "u\"\u3053\u3093\"", ",", "u\"\u306b\u3061\u306f\"", ",", "u\"\u3070\u3093\u306f\"", ",", "u\"##\u3053\u3093\"", ",", "u\"##\u306b\u3061\u306f\"", ",", "u\"##\u3070\u3093\u306f\"", ",", "\n", "u\"\u4e16\u754c\"", ",", "u\"##\u4e16\u754c\"", ",", "u\"\u3001\"", ",", "u\"##\u3001\"", ",", "u\"\u3002\"", ",", "u\"##\u3002\"", "]", "\n", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "\"vocab_file\"", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "vocab_writer", ":", "\n", "            ", "vocab_writer", ".", "write", "(", "\"\"", ".", "join", "(", "[", "x", "+", "\"\\n\"", "for", "x", "in", "vocab_tokens", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseTokenizationTest.get_tokenizer": [[46, 48], ["transformers.tokenization_bert_japanese.BertJapaneseTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "BertJapaneseTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseTokenizationTest.get_input_output_texts": [[49, 53], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c\u3002 \\n\u3053\u3093\u3070\u3093\u306f\u3001\u4e16\u754c\u3002\"", "\n", "output_text", "=", "u\"\u3053\u3093\u306b\u3061\u306f \u3001 \u4e16\u754c \u3002 \u3053\u3093\u3070\u3093\u306f \u3001 \u4e16\u754c \u3002\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseTokenizationTest.test_full_tokenizer": [[54, 63], ["tokenization_bert_japanese_test.BertJapaneseTokenizationTest.tokenizer_class", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.tokenize", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.assertListEqual", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.assertListEqual", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "self", ".", "tokenizer_class", "(", "self", ".", "vocab_file", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c\u3002\\n\u3053\u3093\u3070\u3093\u306f\u3001\u4e16\u754c\u3002\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "\n", "[", "u\"\u3053\u3093\u306b\u3061\u306f\"", ",", "u\"\u3001\"", ",", "u\"\u4e16\u754c\"", ",", "u\"\u3002\"", ",", "\n", "u\"\u3053\u3093\"", ",", "u\"##\u3070\u3093\u306f\"", ",", "u\"\u3001\"", ",", "u\"\u4e16\u754c\"", ",", "\"\u3002\"", "]", ")", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", ",", "\n", "[", "3", ",", "12", ",", "10", ",", "14", ",", "4", ",", "9", ",", "12", ",", "10", ",", "14", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseTokenizationTest.test_mecab_tokenizer": [[64, 71], ["transformers.tokenization_bert_japanese.MecabTokenizer", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.assertListEqual", "transformers.tokenization_bert_japanese.MecabTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "test_mecab_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "MecabTokenizer", "(", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\" \\t\uff71\uff6f\uff8c\uff9f\uff99\u30b9\u30c8\u30a2\u3067iPhone\uff18 \u304c  \\n \u767a\u58f2\u3055\u308c\u305f\u3000\u3002  \"", ")", ",", "\n", "[", "u\"\u30a2\u30c3\u30d7\u30eb\u30b9\u30c8\u30a2\"", ",", "u\"\u3067\"", ",", "u\"iPhone\"", ",", "u\"8\"", ",", "u\"\u304c\"", ",", "\n", "u\"\u767a\u58f2\"", ",", "u\"\u3055\"", ",", "u\"\u308c\"", ",", "u\"\u305f\"", ",", "u\"\u3002\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseTokenizationTest.test_mecab_tokenizer_lower": [[72, 79], ["transformers.tokenization_bert_japanese.MecabTokenizer", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.assertListEqual", "transformers.tokenization_bert_japanese.MecabTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "test_mecab_tokenizer_lower", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "MecabTokenizer", "(", "do_lower_case", "=", "True", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\" \\t\uff71\uff6f\uff8c\uff9f\uff99\u30b9\u30c8\u30a2\u3067iPhone\uff18 \u304c  \\n \u767a\u58f2\u3055\u308c\u305f\u3000\u3002  \"", ")", ",", "\n", "[", "u\"\u30a2\u30c3\u30d7\u30eb\u30b9\u30c8\u30a2\"", ",", "u\"\u3067\"", ",", "u\"iphone\"", ",", "u\"8\"", ",", "u\"\u304c\"", ",", "\n", "u\"\u767a\u58f2\"", ",", "u\"\u3055\"", ",", "u\"\u308c\"", ",", "u\"\u305f\"", ",", "u\"\u3002\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseTokenizationTest.test_mecab_tokenizer_no_normalize": [[80, 87], ["transformers.tokenization_bert_japanese.MecabTokenizer", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.assertListEqual", "transformers.tokenization_bert_japanese.MecabTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "test_mecab_tokenizer_no_normalize", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "MecabTokenizer", "(", "normalize_text", "=", "False", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\" \\t\uff71\uff6f\uff8c\uff9f\uff99\u30b9\u30c8\u30a2\u3067iPhone\uff18 \u304c  \\n \u767a\u58f2\u3055\u308c\u305f\u3000\u3002  \"", ")", ",", "\n", "[", "u\"\uff71\uff6f\uff8c\uff9f\uff99\u30b9\u30c8\u30a2\"", ",", "u\"\u3067\"", ",", "u\"iPhone\"", ",", "u\"\uff18\"", ",", "u\"\u304c\"", ",", "\n", "u\"\u767a\u58f2\"", ",", "u\"\u3055\"", ",", "u\"\u308c\"", ",", "u\"\u305f\"", ",", "u\"\u3000\"", ",", "u\"\u3002\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseTokenizationTest.test_wordpiece_tokenizer": [[88, 107], ["enumerate", "transformers.tokenization_bert.WordpieceTokenizer", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.assertListEqual", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.assertListEqual", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.assertListEqual", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.assertListEqual", "transformers.tokenization_bert.WordpieceTokenizer.tokenize", "transformers.tokenization_bert.WordpieceTokenizer.tokenize", "transformers.tokenization_bert.WordpieceTokenizer.tokenize", "transformers.tokenization_bert.WordpieceTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "test_wordpiece_tokenizer", "(", "self", ")", ":", "\n", "        ", "vocab_tokens", "=", "[", "u\"[UNK]\"", ",", "u\"[CLS]\"", ",", "u\"[SEP]\"", ",", "\n", "u\"\u3053\u3093\u306b\u3061\u306f\"", ",", "u\"\u3053\u3093\"", ",", "u\"\u306b\u3061\u306f\"", "u\"\u3070\u3093\u306f\"", ",", "u\"##\u3053\u3093\"", ",", "u\"##\u306b\u3061\u306f\"", ",", "u\"##\u3070\u3093\u306f\"", "]", "\n", "\n", "vocab", "=", "{", "}", "\n", "for", "(", "i", ",", "token", ")", "in", "enumerate", "(", "vocab_tokens", ")", ":", "\n", "            ", "vocab", "[", "token", "]", "=", "i", "\n", "", "tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "vocab", ",", "unk_token", "=", "u\"[UNK]\"", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "tokenize", "(", "u\"\"", ")", ",", "[", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "tokenize", "(", "u\"\u3053\u3093\u306b\u3061\u306f\"", ")", ",", "\n", "[", "u\"\u3053\u3093\u306b\u3061\u306f\"", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "tokenize", "(", "u\"\u3053\u3093\u3070\u3093\u306f\"", ")", ",", "\n", "[", "u\"\u3053\u3093\"", ",", "u\"##\u3070\u3093\u306f\"", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "tokenize", "(", "u\"\u3053\u3093\u3070\u3093\u306f \u3053\u3093\u3070\u3093\u306b\u3061\u306f \u3053\u3093\u306b\u3061\u306f\"", ")", ",", "\n", "[", "u\"\u3053\u3093\"", ",", "u\"##\u3070\u3093\u306f\"", ",", "u\"[UNK]\"", ",", "u\"\u3053\u3093\u306b\u3061\u306f\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseTokenizationTest.test_sequence_builders": [[108, 121], ["tokenization_bert_japanese_test.BertJapaneseTokenizationTest.tokenizer_class.from_pretrained", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.encode", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.encode", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.build_inputs_with_special_tokens", "tokenization_bert_japanese_test.BertJapaneseTokenizationTest.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "@", "slow", "\n", "def", "test_sequence_builders", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "self", ".", "tokenizer_class", ".", "from_pretrained", "(", "\"bert-base-japanese\"", ")", "\n", "\n", "text", "=", "tokenizer", ".", "encode", "(", "u\"\u3042\u308a\u304c\u3068\u3046\u3002\"", ",", "add_special_tokens", "=", "False", ")", "\n", "text_2", "=", "tokenizer", ".", "encode", "(", "u\"\u3069\u3046\u3044\u305f\u3057\u307e\u3057\u3066\u3002\"", ",", "add_special_tokens", "=", "False", ")", "\n", "\n", "encoded_sentence", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ")", "\n", "encoded_pair", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ",", "text_2", ")", "\n", "\n", "# 2 is for \"[CLS]\", 3 is for \"[SEP]\"", "\n", "assert", "encoded_sentence", "==", "[", "2", "]", "+", "text", "+", "[", "3", "]", "\n", "assert", "encoded_pair", "==", "[", "2", "]", "+", "text", "+", "[", "3", "]", "+", "text_2", "+", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.setUp": [[127, 136], ["super().setUp", "os.path.join", "io.open", "vocab_writer.write"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "BertJapaneseCharacterTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "vocab_tokens", "=", "[", "u\"[UNK]\"", ",", "u\"[CLS]\"", ",", "u\"[SEP]\"", ",", "\n", "u\"\u3053\"", ",", "u\"\u3093\"", ",", "u\"\u306b\"", ",", "u\"\u3061\"", ",", "u\"\u306f\"", ",", "u\"\u3070\"", ",", "u\"\u4e16\"", ",", "u\"\u754c\"", ",", "u\"\u3001\"", ",", "u\"\u3002\"", "]", "\n", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "\"vocab_file\"", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "vocab_writer", ":", "\n", "            ", "vocab_writer", ".", "write", "(", "\"\"", ".", "join", "(", "[", "x", "+", "\"\\n\"", "for", "x", "in", "vocab_tokens", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.get_tokenizer": [[137, 141], ["transformers.tokenization_bert_japanese.BertJapaneseTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "BertJapaneseTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "\n", "subword_tokenizer_type", "=", "\"character\"", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.get_input_output_texts": [[142, 146], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c\u3002 \\n\u3053\u3093\u3070\u3093\u306f\u3001\u4e16\u754c\u3002\"", "\n", "output_text", "=", "u\"\u3053 \u3093 \u306b \u3061 \u306f \u3001 \u4e16 \u754c \u3002 \u3053 \u3093 \u3070 \u3093 \u306f \u3001 \u4e16 \u754c \u3002\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.test_full_tokenizer": [[147, 158], ["tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.tokenizer_class", "tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.tokenize", "tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.assertListEqual", "tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.assertListEqual", "tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "self", ".", "tokenizer_class", "(", "self", ".", "vocab_file", ",", "\n", "subword_tokenizer_type", "=", "\"character\"", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"\u3053\u3093\u306b\u3061\u306f\u3001\u4e16\u754c\u3002 \\n\u3053\u3093\u3070\u3093\u306f\u3001\u4e16\u754c\u3002\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "\n", "[", "u\"\u3053\"", ",", "u\"\u3093\"", ",", "u\"\u306b\"", ",", "u\"\u3061\"", ",", "u\"\u306f\"", ",", "u\"\u3001\"", ",", "u\"\u4e16\"", ",", "u\"\u754c\"", ",", "u\"\u3002\"", ",", "\n", "u\"\u3053\"", ",", "u\"\u3093\"", ",", "u\"\u3070\"", ",", "u\"\u3093\"", ",", "u\"\u306f\"", ",", "u\"\u3001\"", ",", "u\"\u4e16\"", ",", "u\"\u754c\"", ",", "u\"\u3002\"", "]", ")", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", ",", "\n", "[", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "11", ",", "9", ",", "10", ",", "12", ",", "\n", "3", ",", "4", ",", "8", ",", "4", ",", "7", ",", "11", ",", "9", ",", "10", ",", "12", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.test_character_tokenizer": [[159, 175], ["enumerate", "transformers.tokenization_bert_japanese.CharacterTokenizer", "tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.assertListEqual", "tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.assertListEqual", "tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.assertListEqual", "transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "test_character_tokenizer", "(", "self", ")", ":", "\n", "        ", "vocab_tokens", "=", "[", "u\"[UNK]\"", ",", "u\"[CLS]\"", ",", "u\"[SEP]\"", ",", "\n", "u\"\u3053\"", ",", "u\"\u3093\"", ",", "u\"\u306b\"", ",", "u\"\u3061\"", ",", "u\"\u306f\"", ",", "u\"\u3070\"", ",", "u\"\u4e16\"", ",", "u\"\u754c\"", "u\"\u3001\"", ",", "u\"\u3002\"", "]", "\n", "\n", "vocab", "=", "{", "}", "\n", "for", "(", "i", ",", "token", ")", "in", "enumerate", "(", "vocab_tokens", ")", ":", "\n", "            ", "vocab", "[", "token", "]", "=", "i", "\n", "", "tokenizer", "=", "CharacterTokenizer", "(", "vocab", "=", "vocab", ",", "unk_token", "=", "u\"[UNK]\"", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "tokenize", "(", "u\"\"", ")", ",", "[", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "tokenize", "(", "u\"\u3053\u3093\u306b\u3061\u306f\"", ")", ",", "\n", "[", "u\"\u3053\"", ",", "u\"\u3093\"", ",", "u\"\u306b\"", ",", "u\"\u3061\"", ",", "u\"\u306f\"", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "tokenize", "(", "u\"\u3053\u3093\u306b\u3061\u307b\"", ")", ",", "\n", "[", "u\"\u3053\"", ",", "u\"\u3093\"", ",", "u\"\u306b\"", ",", "u\"\u3061\"", ",", "u\"[UNK]\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.test_sequence_builders": [[176, 189], ["tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.tokenizer_class.from_pretrained", "tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.encode", "tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.encode", "tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.build_inputs_with_special_tokens", "tokenization_bert_japanese_test.BertJapaneseCharacterTokenizationTest.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "@", "slow", "\n", "def", "test_sequence_builders", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "self", ".", "tokenizer_class", ".", "from_pretrained", "(", "\"bert-base-japanese-char\"", ")", "\n", "\n", "text", "=", "tokenizer", ".", "encode", "(", "u\"\u3042\u308a\u304c\u3068\u3046\u3002\"", ",", "add_special_tokens", "=", "False", ")", "\n", "text_2", "=", "tokenizer", ".", "encode", "(", "u\"\u3069\u3046\u3044\u305f\u3057\u307e\u3057\u3066\u3002\"", ",", "add_special_tokens", "=", "False", ")", "\n", "\n", "encoded_sentence", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ")", "\n", "encoded_pair", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ",", "text_2", ")", "\n", "\n", "# 2 is for \"[CLS]\", 3 is for \"[SEP]\"", "\n", "assert", "encoded_sentence", "==", "[", "2", "]", "+", "text", "+", "[", "3", "]", "\n", "assert", "encoded_pair", "==", "[", "2", "]", "+", "text", "+", "[", "3", "]", "+", "text_2", "+", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_common_test.ConfigTester.__init__": [[794, 798], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parent", ",", "config_class", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "parent", "=", "parent", "\n", "self", ".", "config_class", "=", "config_class", "\n", "self", ".", "inputs_dict", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_common_test.ConfigTester.create_and_test_config_common_properties": [[799, 805], ["modeling_common_test.ConfigTester.config_class", "modeling_common_test.ConfigTester.parent.assertTrue", "modeling_common_test.ConfigTester.parent.assertTrue", "modeling_common_test.ConfigTester.parent.assertTrue", "modeling_common_test.ConfigTester.parent.assertTrue", "hasattr", "hasattr", "hasattr", "hasattr"], "methods", ["None"], ["", "def", "create_and_test_config_common_properties", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config_class", "(", "**", "self", ".", "inputs_dict", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'vocab_size'", ")", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'hidden_size'", ")", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'num_attention_heads'", ")", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'num_hidden_layers'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_common_test.ConfigTester.create_and_test_config_to_json_string": [[806, 811], ["modeling_common_test.ConfigTester.config_class", "json.loads", "modeling_common_test.ConfigTester.inputs_dict.items", "modeling_common_test.ConfigTester.to_json_string", "modeling_common_test.ConfigTester.parent.assertEqual"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string"], ["", "def", "create_and_test_config_to_json_string", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config_class", "(", "**", "self", ".", "inputs_dict", ")", "\n", "obj", "=", "json", ".", "loads", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "inputs_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "parent", ".", "assertEqual", "(", "obj", "[", "key", "]", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_common_test.ConfigTester.create_and_test_config_to_json_file": [[812, 819], ["modeling_common_test.ConfigTester.config_class", "os.path.join", "modeling_common_test.ConfigTester.to_json_file", "modeling_common_test.ConfigTester.config_class.from_json_file", "os.remove", "modeling_common_test.ConfigTester.parent.assertEqual", "os.getcwd", "modeling_common_test.ConfigTester.to_dict", "modeling_common_test.ConfigTester.to_dict", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.to_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict"], ["", "", "def", "create_and_test_config_to_json_file", "(", "self", ")", ":", "\n", "        ", "config_first", "=", "self", ".", "config_class", "(", "**", "self", ".", "inputs_dict", ")", "\n", "json_file_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"config_\"", "+", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "+", "\".json\"", ")", "\n", "config_first", ".", "to_json_file", "(", "json_file_path", ")", "\n", "config_second", "=", "self", ".", "config_class", ".", "from_json_file", "(", "json_file_path", ")", "\n", "os", ".", "remove", "(", "json_file_path", ")", "\n", "self", ".", "parent", ".", "assertEqual", "(", "config_second", ".", "to_dict", "(", ")", ",", "config_first", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_common_test.ConfigTester.run_common_tests": [[820, 824], ["modeling_common_test.ConfigTester.create_and_test_config_common_properties", "modeling_common_test.ConfigTester.create_and_test_config_to_json_string", "modeling_common_test.ConfigTester.create_and_test_config_to_json_file"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.create_and_test_config_common_properties", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.create_and_test_config_to_json_string", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.create_and_test_config_to_json_file"], ["", "def", "run_common_tests", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_and_test_config_common_properties", "(", ")", "\n", "self", ".", "create_and_test_config_to_json_string", "(", ")", "\n", "self", ".", "create_and_test_config_to_json_file", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_common_test.ModelUtilsTest.test_model_from_pretrained": [[863, 883], ["logging.basicConfig", "list", "BertConfig.from_pretrained", "modeling_common_test.ModelUtilsTest.assertIsNotNone", "modeling_common_test.ModelUtilsTest.assertIsInstance", "BertModel.from_pretrained", "BertModel.from_pretrained", "modeling_common_test.ModelUtilsTest.assertIsNotNone", "modeling_common_test.ModelUtilsTest.assertIsInstance", "loading_info.values", "BertConfig.from_pretrained", "BertModel.from_pretrained", "modeling_common_test.ModelUtilsTest.assertEqual", "modeling_common_test.ModelUtilsTest.assertEqual", "modeling_common_test.ModelUtilsTest.assertEqual", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys", "modeling_common_test.ModelUtilsTest.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["    ", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "config", "=", "BertConfig", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "PretrainedConfig", ")", "\n", "\n", "model", "=", "BertModel", ".", "from_pretrained", "(", "model_name", ")", "\n", "model", ",", "loading_info", "=", "BertModel", ".", "from_pretrained", "(", "model_name", ",", "output_loading_info", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "PreTrainedModel", ")", "\n", "for", "value", "in", "loading_info", ".", "values", "(", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "len", "(", "value", ")", ",", "0", ")", "\n", "\n", "", "config", "=", "BertConfig", ".", "from_pretrained", "(", "model_name", ",", "output_attentions", "=", "True", ",", "output_hidden_states", "=", "True", ")", "\n", "model", "=", "BertModel", ".", "from_pretrained", "(", "model_name", ",", "output_attentions", "=", "True", ",", "output_hidden_states", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "model", ".", "config", ".", "output_attentions", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "model", ".", "config", ".", "output_hidden_states", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "model", ".", "config", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_common_test._config_zero_init": [[58, 64], ["copy.deepcopy", "copy.deepcopy.__dict__.keys", "setattr"], "function", ["None"], ["", "def", "_config_zero_init", "(", "config", ")", ":", "\n", "    ", "configs_no_init", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "for", "key", "in", "configs_no_init", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "        ", "if", "'_range'", "in", "key", "or", "'_std'", "in", "key", "or", "'initializer_factor'", "in", "key", ":", "\n", "            ", "setattr", "(", "configs_no_init", ",", "key", ",", "0.0", ")", "\n", "", "", "return", "configs_no_init", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_common_test.ids_tensor": [[829, 843], ["range", "torch.tensor().view().contiguous", "values.append", "rng.randint", "torch.tensor().view", "torch.tensor"], "function", ["None"], ["def", "ids_tensor", "(", "shape", ",", "vocab_size", ",", "rng", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates a random int32 tensor of the shape within the vocab size.\"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "global_rng", "\n", "\n", "", "total_dims", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "        ", "total_dims", "*=", "dim", "\n", "\n", "", "values", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "total_dims", ")", ":", "\n", "        ", "values", ".", "append", "(", "rng", ".", "randint", "(", "0", ",", "vocab_size", "-", "1", ")", ")", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "data", "=", "values", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "torch_device", ")", ".", "view", "(", "shape", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_common_test.floats_tensor": [[845, 859], ["range", "torch.tensor().view().contiguous", "values.append", "torch.tensor().view", "rng.random", "torch.tensor"], "function", ["None"], ["", "def", "floats_tensor", "(", "shape", ",", "scale", "=", "1.0", ",", "rng", "=", "None", ",", "name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates a random float32 tensor of the shape within the vocab size.\"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "global_rng", "\n", "\n", "", "total_dims", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "        ", "total_dims", "*=", "dim", "\n", "\n", "", "values", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "total_dims", ")", ":", "\n", "        ", "values", ".", "append", "(", "rng", ".", "random", "(", ")", "*", "scale", ")", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "data", "=", "values", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "torch_device", ")", ".", "view", "(", "shape", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlm_test.XLMModelTest.setUp": [[292, 295], ["XLMModelTest.XLMModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "XLMModelTest", ".", "XLMModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "XLMConfig", ",", "emb_dim", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlm_test.XLMModelTest.test_config": [[296, 298], ["modeling_xlm_test.XLMModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlm_test.XLMModelTest.test_xlm_model": [[299, 302], ["modeling_xlm_test.XLMModelTest.model_tester.prepare_config_and_inputs", "modeling_xlm_test.XLMModelTest.model_tester.create_and_check_xlm_model"], "methods", ["None"], ["", "def", "test_xlm_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlm_test.XLMModelTest.test_xlm_lm_head": [[303, 306], ["modeling_xlm_test.XLMModelTest.model_tester.prepare_config_and_inputs", "modeling_xlm_test.XLMModelTest.model_tester.create_and_check_xlm_lm_head"], "methods", ["None"], ["", "def", "test_xlm_lm_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlm_test.XLMModelTest.test_xlm_simple_qa": [[307, 310], ["modeling_xlm_test.XLMModelTest.model_tester.prepare_config_and_inputs", "modeling_xlm_test.XLMModelTest.model_tester.create_and_check_xlm_simple_qa"], "methods", ["None"], ["", "def", "test_xlm_simple_qa", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_simple_qa", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlm_test.XLMModelTest.test_xlm_qa": [[311, 314], ["modeling_xlm_test.XLMModelTest.model_tester.prepare_config_and_inputs", "modeling_xlm_test.XLMModelTest.model_tester.create_and_check_xlm_qa"], "methods", ["None"], ["", "def", "test_xlm_qa", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_qa", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlm_test.XLMModelTest.test_xlm_sequence_classif": [[315, 318], ["modeling_xlm_test.XLMModelTest.model_tester.prepare_config_and_inputs", "modeling_xlm_test.XLMModelTest.model_tester.create_and_check_xlm_sequence_classif"], "methods", ["None"], ["", "def", "test_xlm_sequence_classif", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_sequence_classif", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlm_test.XLMModelTest.test_model_from_pretrained": [[319, 326], ["list", "XLMModel.from_pretrained", "shutil.rmtree", "modeling_xlm_test.XLMModelTest.assertIsNotNone", "XLM_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "XLM_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "XLMModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_ctrl_test.CTRLModelTest.setUp": [[191, 194], ["CTRLModelTest.CTRLModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "CTRLModelTest", ".", "CTRLModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "CTRLConfig", ",", "n_embd", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_ctrl_test.CTRLModelTest.test_config": [[195, 197], ["modeling_ctrl_test.CTRLModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_ctrl_test.CTRLModelTest.test_ctrl_model": [[198, 201], ["modeling_ctrl_test.CTRLModelTest.model_tester.prepare_config_and_inputs", "modeling_ctrl_test.CTRLModelTest.model_tester.create_and_check_ctrl_model"], "methods", ["None"], ["", "def", "test_ctrl_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_ctrl_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_ctrl_test.CTRLModelTest.test_ctrl_lm_head_model": [[202, 205], ["modeling_ctrl_test.CTRLModelTest.model_tester.prepare_config_and_inputs", "modeling_ctrl_test.CTRLModelTest.model_tester.create_and_check_lm_head_model"], "methods", ["None"], ["", "def", "test_ctrl_lm_head_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_lm_head_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_ctrl_test.CTRLModelTest.test_model_from_pretrained": [[206, 213], ["list", "CTRLModel.from_pretrained", "shutil.rmtree", "modeling_ctrl_test.CTRLModelTest.assertIsNotNone", "CTRL_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "CTRL_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "CTRLModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.__init__": [[28, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parent", ",", "config_class", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "parent", "=", "parent", "\n", "self", ".", "config_class", "=", "config_class", "\n", "self", ".", "inputs_dict", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.create_and_test_config_common_properties": [[33, 39], ["configuration_common_test.ConfigTester.config_class", "configuration_common_test.ConfigTester.parent.assertTrue", "configuration_common_test.ConfigTester.parent.assertTrue", "configuration_common_test.ConfigTester.parent.assertTrue", "configuration_common_test.ConfigTester.parent.assertTrue", "hasattr", "hasattr", "hasattr", "hasattr"], "methods", ["None"], ["", "def", "create_and_test_config_common_properties", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config_class", "(", "**", "self", ".", "inputs_dict", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'vocab_size'", ")", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'hidden_size'", ")", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'num_attention_heads'", ")", ")", "\n", "self", ".", "parent", ".", "assertTrue", "(", "hasattr", "(", "config", ",", "'num_hidden_layers'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.create_and_test_config_to_json_string": [[40, 45], ["configuration_common_test.ConfigTester.config_class", "json.loads", "configuration_common_test.ConfigTester.inputs_dict.items", "configuration_common_test.ConfigTester.to_json_string", "configuration_common_test.ConfigTester.parent.assertEqual"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string"], ["", "def", "create_and_test_config_to_json_string", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config_class", "(", "**", "self", ".", "inputs_dict", ")", "\n", "obj", "=", "json", ".", "loads", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "inputs_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "parent", ".", "assertEqual", "(", "obj", "[", "key", "]", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.create_and_test_config_to_json_file": [[46, 55], ["configuration_common_test.ConfigTester.config_class", "configuration_common_test.ConfigTester.parent.assertEqual", "tokenization_tests_commons.TemporaryDirectory", "os.path.join", "configuration_common_test.ConfigTester.to_json_file", "configuration_common_test.ConfigTester.config_class.from_json_file", "configuration_common_test.ConfigTester.to_dict", "configuration_common_test.ConfigTester.to_dict"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.to_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict"], ["", "", "def", "create_and_test_config_to_json_file", "(", "self", ")", ":", "\n", "        ", "config_first", "=", "self", ".", "config_class", "(", "**", "self", ".", "inputs_dict", ")", "\n", "\n", "with", "TemporaryDirectory", "(", ")", "as", "tmpdirname", ":", "\n", "            ", "json_file_path", "=", "os", ".", "path", ".", "join", "(", "tmpdirname", ",", "\"config.json\"", ")", "\n", "config_first", ".", "to_json_file", "(", "json_file_path", ")", "\n", "config_second", "=", "self", ".", "config_class", ".", "from_json_file", "(", "json_file_path", ")", "\n", "\n", "", "self", ".", "parent", ".", "assertEqual", "(", "config_second", ".", "to_dict", "(", ")", ",", "config_first", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.create_and_test_config_from_and_save_pretrained": [[56, 64], ["configuration_common_test.ConfigTester.config_class", "configuration_common_test.ConfigTester.parent.assertEqual", "tokenization_tests_commons.TemporaryDirectory", "configuration_common_test.ConfigTester.save_pretrained", "configuration_common_test.ConfigTester.config_class.from_pretrained", "configuration_common_test.ConfigTester.to_dict", "configuration_common_test.ConfigTester.to_dict"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.save_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict"], ["", "def", "create_and_test_config_from_and_save_pretrained", "(", "self", ")", ":", "\n", "        ", "config_first", "=", "self", ".", "config_class", "(", "**", "self", ".", "inputs_dict", ")", "\n", "\n", "with", "TemporaryDirectory", "(", ")", "as", "tmpdirname", ":", "\n", "            ", "config_first", ".", "save_pretrained", "(", "tmpdirname", ")", "\n", "config_second", "=", "self", ".", "config_class", ".", "from_pretrained", "(", "tmpdirname", ")", "\n", "\n", "", "self", ".", "parent", ".", "assertEqual", "(", "config_second", ".", "to_dict", "(", ")", ",", "config_first", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests": [[65, 70], ["configuration_common_test.ConfigTester.create_and_test_config_common_properties", "configuration_common_test.ConfigTester.create_and_test_config_to_json_string", "configuration_common_test.ConfigTester.create_and_test_config_to_json_file", "configuration_common_test.ConfigTester.create_and_test_config_from_and_save_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.create_and_test_config_common_properties", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.create_and_test_config_to_json_string", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.create_and_test_config_to_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.create_and_test_config_from_and_save_pretrained"], ["", "def", "run_common_tests", "(", "self", ")", ":", "\n", "        ", "self", ".", "create_and_test_config_common_properties", "(", ")", "\n", "self", ".", "create_and_test_config_to_json_string", "(", ")", "\n", "self", ".", "create_and_test_config_to_json_file", "(", ")", "\n", "self", ".", "create_and_test_config_from_and_save_pretrained", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlnet_test.TFXLNetModelTest.setUp": [[289, 292], ["TFXLNetModelTest.TFXLNetModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFXLNetModelTest", ".", "TFXLNetModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "XLNetConfig", ",", "d_inner", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlnet_test.TFXLNetModelTest.test_config": [[293, 295], ["modeling_tf_xlnet_test.TFXLNetModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlnet_test.TFXLNetModelTest.test_xlnet_base_model": [[296, 300], ["modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.set_seed", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.create_and_check_xlnet_base_model"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_xlnet_base_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_base_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlnet_test.TFXLNetModelTest.test_xlnet_lm_head": [[301, 305], ["modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.set_seed", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.create_and_check_xlnet_lm_head"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_xlnet_lm_head", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlnet_test.TFXLNetModelTest.test_xlnet_sequence_classif": [[306, 310], ["modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.set_seed", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.create_and_check_xlnet_sequence_classif"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_xlnet_sequence_classif", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_sequence_classif", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlnet_test.TFXLNetModelTest.test_xlnet_token_classification": [[311, 314], ["modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.create_and_check_xlnet_for_token_classification"], "methods", ["None"], ["", "def", "test_xlnet_token_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_for_token_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlnet_test.TFXLNetModelTest.test_xlnet_qa": [[315, 319], ["modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.set_seed", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlnet_test.TFXLNetModelTest.model_tester.create_and_check_xlnet_qa"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_xlnet_qa", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_qa", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlnet_test.TFXLNetModelTest.test_model_from_pretrained": [[320, 327], ["list", "TFXLNetModel.from_pretrained", "shutil.rmtree", "modeling_tf_xlnet_test.TFXLNetModelTest.assertIsNotNone", "TF_XLNET_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_XLNET_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TFXLNetModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_t5_test.TFT5ModelTest.setUp": [[148, 151], ["TFT5ModelTest.TFT5ModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFT5ModelTest", ".", "TFT5ModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "T5Config", ",", "d_model", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_t5_test.TFT5ModelTest.test_config": [[152, 154], ["modeling_tf_t5_test.TFT5ModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_t5_test.TFT5ModelTest.test_t5_model": [[155, 158], ["modeling_tf_t5_test.TFT5ModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_t5_test.TFT5ModelTest.model_tester.create_and_check_t5_model"], "methods", ["None"], ["", "def", "test_t5_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_t5_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_t5_test.TFT5ModelTest.test_with_lm_head": [[159, 162], ["modeling_tf_t5_test.TFT5ModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_t5_test.TFT5ModelTest.model_tester.create_and_check_t5_with_lm_head"], "methods", ["None"], ["", "def", "test_with_lm_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_t5_with_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_t5_test.TFT5ModelTest.test_model_from_pretrained": [[163, 170], ["TFT5Model.from_pretrained", "shutil.rmtree", "modeling_tf_t5_test.TFT5ModelTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "[", "'t5-small'", "]", ":", "\n", "            ", "model", "=", "TFT5Model", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_gpt2_test.TFGPT2ModelTest.setUp": [[202, 205], ["TFGPT2ModelTest.TFGPT2ModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFGPT2ModelTest", ".", "TFGPT2ModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "GPT2Config", ",", "n_embd", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_gpt2_test.TFGPT2ModelTest.test_config": [[206, 208], ["modeling_tf_gpt2_test.TFGPT2ModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_gpt2_test.TFGPT2ModelTest.test_gpt2_model": [[209, 212], ["modeling_tf_gpt2_test.TFGPT2ModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_gpt2_test.TFGPT2ModelTest.model_tester.create_and_check_gpt2_model"], "methods", ["None"], ["", "def", "test_gpt2_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_gpt2_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_gpt2_test.TFGPT2ModelTest.test_gpt2_lm_head": [[213, 216], ["modeling_tf_gpt2_test.TFGPT2ModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_gpt2_test.TFGPT2ModelTest.model_tester.create_and_check_gpt2_lm_head"], "methods", ["None"], ["", "def", "test_gpt2_lm_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_gpt2_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_gpt2_test.TFGPT2ModelTest.test_gpt2_double_head": [[217, 220], ["modeling_tf_gpt2_test.TFGPT2ModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_gpt2_test.TFGPT2ModelTest.model_tester.create_and_check_gpt2_double_head"], "methods", ["None"], ["", "def", "test_gpt2_double_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_gpt2_double_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_gpt2_test.TFGPT2ModelTest.test_model_from_pretrained": [[221, 228], ["list", "TFGPT2Model.from_pretrained", "shutil.rmtree", "modeling_tf_gpt2_test.TFGPT2ModelTest.assertIsNotNone", "TF_GPT2_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_GPT2_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TFGPT2Model", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_auto_test.TFAutoModelTest.test_model_from_pretrained": [[41, 56], ["modeling_tf_auto_test.TFAutoModelTest.assertTrue", "logging.basicConfig", "h5py.version.hdf5_version.startswith", "AutoConfig.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance", "TFAutoModel.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["    ", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "import", "h5py", "\n", "self", ".", "assertTrue", "(", "h5py", ".", "version", ".", "hdf5_version", ".", "startswith", "(", "\"1.10\"", ")", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "# for model_name in list(TF_BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys())[:1]:", "\n", "for", "model_name", "in", "[", "'bert-base-uncased'", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "TFAutoModel", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "TFBertModel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_auto_test.TFAutoModelTest.test_lmhead_model_from_pretrained": [[57, 69], ["logging.basicConfig", "AutoConfig.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance", "TFAutoModelWithLMHead.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "@", "slow", "\n", "def", "test_lmhead_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "# for model_name in list(TF_BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys())[:1]:", "\n", "for", "model_name", "in", "[", "'bert-base-uncased'", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "TFAutoModelWithLMHead", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "TFBertForMaskedLM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_auto_test.TFAutoModelTest.test_sequence_classification_model_from_pretrained": [[70, 82], ["logging.basicConfig", "AutoConfig.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance", "TFAutoModelForSequenceClassification.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "@", "slow", "\n", "def", "test_sequence_classification_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "# for model_name in list(TF_BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys())[:1]:", "\n", "for", "model_name", "in", "[", "'bert-base-uncased'", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "TFAutoModelForSequenceClassification", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "TFBertForSequenceClassification", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_auto_test.TFAutoModelTest.test_question_answering_model_from_pretrained": [[83, 95], ["logging.basicConfig", "AutoConfig.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance", "TFAutoModelForQuestionAnswering.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsNotNone", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "@", "slow", "\n", "def", "test_question_answering_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "# for model_name in list(TF_BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys())[:1]:", "\n", "for", "model_name", "in", "[", "'bert-base-uncased'", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "TFAutoModelForQuestionAnswering", ".", "from_pretrained", "(", "model_name", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "TFBertForQuestionAnswering", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_auto_test.TFAutoModelTest.test_from_pretrained_identifier": [[96, 100], ["logging.basicConfig", "TFAutoModelWithLMHead.from_pretrained", "modeling_tf_auto_test.TFAutoModelTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "def", "test_from_pretrained_identifier", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "model", "=", "TFAutoModelWithLMHead", ".", "from_pretrained", "(", "SMALL_MODEL_IDENTIFIER", ",", "force_download", "=", "True", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "TFBertForMaskedLM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_distilbert_test.TFDistilBertModelTest.setUp": [[189, 192], ["TFDistilBertModelTest.TFDistilBertModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFDistilBertModelTest", ".", "TFDistilBertModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "DistilBertConfig", ",", "dim", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_distilbert_test.TFDistilBertModelTest.test_config": [[193, 195], ["modeling_tf_distilbert_test.TFDistilBertModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_distilbert_test.TFDistilBertModelTest.test_distilbert_model": [[196, 199], ["modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.create_and_check_distilbert_model"], "methods", ["None"], ["", "def", "test_distilbert_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_distilbert_test.TFDistilBertModelTest.test_for_masked_lm": [[200, 203], ["modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.create_and_check_distilbert_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_masked_lm", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_distilbert_test.TFDistilBertModelTest.test_for_question_answering": [[204, 207], ["modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.create_and_check_distilbert_for_question_answering"], "methods", ["None"], ["", "def", "test_for_question_answering", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_question_answering", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_distilbert_test.TFDistilBertModelTest.test_for_sequence_classification": [[208, 211], ["modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_distilbert_test.TFDistilBertModelTest.model_tester.create_and_check_distilbert_for_sequence_classification"], "methods", ["None"], ["", "def", "test_for_sequence_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_sequence_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_bert_test.BertModelTest.setUp": [[314, 317], ["BertModelTest.BertModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "BertModelTest", ".", "BertModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "BertConfig", ",", "hidden_size", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_bert_test.BertModelTest.test_config": [[318, 320], ["modeling_bert_test.BertModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_bert_test.BertModelTest.test_bert_model": [[321, 324], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_model"], "methods", ["None"], ["", "def", "test_bert_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_bert_test.BertModelTest.test_bert_model_as_decoder": [[325, 328], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs_for_decoder", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_model_as_decoder"], "methods", ["None"], ["", "def", "test_bert_model_as_decoder", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs_for_decoder", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_model_as_decoder", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_bert_test.BertModelTest.test_for_masked_lm": [[329, 332], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_masked_lm", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_bert_test.BertModelTest.test_for_masked_lm_decoder": [[333, 336], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs_for_decoder", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_model_for_masked_lm_as_decoder"], "methods", ["None"], ["", "def", "test_for_masked_lm_decoder", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs_for_decoder", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_model_for_masked_lm_as_decoder", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_bert_test.BertModelTest.test_for_multiple_choice": [[337, 340], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_multiple_choice"], "methods", ["None"], ["", "def", "test_for_multiple_choice", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_multiple_choice", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_bert_test.BertModelTest.test_for_next_sequence_prediction": [[341, 344], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_next_sequence_prediction"], "methods", ["None"], ["", "def", "test_for_next_sequence_prediction", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_next_sequence_prediction", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_bert_test.BertModelTest.test_for_pretraining": [[345, 348], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_pretraining"], "methods", ["None"], ["", "def", "test_for_pretraining", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_pretraining", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_bert_test.BertModelTest.test_for_question_answering": [[349, 352], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_question_answering"], "methods", ["None"], ["", "def", "test_for_question_answering", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_question_answering", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_bert_test.BertModelTest.test_for_sequence_classification": [[353, 356], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_sequence_classification"], "methods", ["None"], ["", "def", "test_for_sequence_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_sequence_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_bert_test.BertModelTest.test_for_token_classification": [[357, 360], ["modeling_bert_test.BertModelTest.model_tester.prepare_config_and_inputs", "modeling_bert_test.BertModelTest.model_tester.create_and_check_bert_for_token_classification"], "methods", ["None"], ["", "def", "test_for_token_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_token_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_bert_test.BertModelTest.test_model_from_pretrained": [[361, 368], ["list", "BertModel.from_pretrained", "shutil.rmtree", "modeling_bert_test.BertModelTest.assertIsNotNone", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "BertModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_albert_test.TFAlbertModelTest.setUp": [[196, 200], ["TFAlbertModelTest.TFAlbertModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFAlbertModelTest", ".", "TFAlbertModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "\n", "self", ",", "config_class", "=", "AlbertConfig", ",", "hidden_size", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_albert_test.TFAlbertModelTest.test_config": [[201, 203], ["modeling_tf_albert_test.TFAlbertModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_albert_test.TFAlbertModelTest.test_albert_model": [[204, 207], ["modeling_tf_albert_test.TFAlbertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_albert_test.TFAlbertModelTest.model_tester.create_and_check_albert_model"], "methods", ["None"], ["", "def", "test_albert_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_albert_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_albert_test.TFAlbertModelTest.test_for_masked_lm": [[208, 212], ["modeling_tf_albert_test.TFAlbertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_albert_test.TFAlbertModelTest.model_tester.create_and_check_albert_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_albert_for_masked_lm", "(", "\n", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_albert_test.TFAlbertModelTest.test_for_sequence_classification": [[213, 217], ["modeling_tf_albert_test.TFAlbertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_albert_test.TFAlbertModelTest.model_tester.create_and_check_albert_for_sequence_classification"], "methods", ["None"], ["", "def", "test_for_sequence_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_albert_for_sequence_classification", "(", "\n", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_albert_test.TFAlbertModelTest.test_model_from_pretrained": [[218, 227], ["TFAlbertModel.from_pretrained", "shutil.rmtree", "modeling_tf_albert_test.TFAlbertModelTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "# for model_name in list(TF_ALBERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys())[:1]:", "\n", "for", "model_name", "in", "[", "'albert-base-uncased'", "]", ":", "\n", "            ", "model", "=", "TFAlbertModel", ".", "from_pretrained", "(", "\n", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_xlnet_test.XLNetTokenizationTest.setUp": [[32, 38], ["super().setUp", "transformers.tokenization_xlnet.XLNetTokenizer", "transformers.tokenization_xlnet.XLNetTokenizer.save_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.save_pretrained"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "XLNetTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# We have a SentencePiece fixture for testing", "\n", "tokenizer", "=", "XLNetTokenizer", "(", "SAMPLE_VOCAB", ",", "keep_accents", "=", "True", ")", "\n", "tokenizer", ".", "save_pretrained", "(", "self", ".", "tmpdirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_xlnet_test.XLNetTokenizationTest.get_tokenizer": [[39, 41], ["transformers.tokenization_xlnet.XLNetTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "XLNetTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_xlnet_test.XLNetTokenizationTest.get_input_output_texts": [[42, 46], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"This is a test\"", "\n", "output_text", "=", "u\"This is a test\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_xlnet_test.XLNetTokenizationTest.test_full_tokenizer": [[48, 75], ["transformers.tokenization_xlnet.XLNetTokenizer", "transformers.tokenization_xlnet.XLNetTokenizer.tokenize", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "transformers.tokenization_xlnet.XLNetTokenizer.tokenize", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "transformers.tokenization_xlnet.XLNetTokenizer.convert_tokens_to_ids", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "transformers.tokenization_xlnet.XLNetTokenizer.convert_ids_to_tokens", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "transformers.tokenization_xlnet.XLNetTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "XLNetTokenizer", "(", "SAMPLE_VOCAB", ",", "keep_accents", "=", "True", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u'This is a test'", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "u'\u2581This'", ",", "u'\u2581is'", ",", "u'\u2581a'", ",", "u'\u2581t'", ",", "u'est'", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", ",", "[", "285", ",", "46", ",", "10", ",", "170", ",", "382", "]", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"I was born in 92000, and this is fals\u00e9.\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "SPIECE_UNDERLINE", "+", "u'I'", ",", "SPIECE_UNDERLINE", "+", "u'was'", ",", "SPIECE_UNDERLINE", "+", "u'b'", ",", "\n", "u'or'", ",", "u'n'", ",", "SPIECE_UNDERLINE", "+", "u'in'", ",", "SPIECE_UNDERLINE", "+", "u''", ",", "\n", "u'9'", ",", "u'2'", ",", "u'0'", ",", "u'0'", ",", "u'0'", ",", "u','", ",", "SPIECE_UNDERLINE", "+", "u'and'", ",", "SPIECE_UNDERLINE", "+", "u'this'", ",", "\n", "SPIECE_UNDERLINE", "+", "u'is'", ",", "SPIECE_UNDERLINE", "+", "u'f'", ",", "u'al'", ",", "u's'", ",", "u'\u00e9'", ",", "u'.'", "]", ")", "\n", "ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "self", ".", "assertListEqual", "(", "\n", "ids", ",", "[", "8", ",", "21", ",", "84", ",", "55", ",", "24", ",", "19", ",", "7", ",", "0", ",", "\n", "602", ",", "347", ",", "347", ",", "347", ",", "3", ",", "12", ",", "66", ",", "\n", "46", ",", "72", ",", "80", ",", "6", ",", "0", ",", "4", "]", ")", "\n", "\n", "back_tokens", "=", "tokenizer", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "self", ".", "assertListEqual", "(", "back_tokens", ",", "[", "SPIECE_UNDERLINE", "+", "u'I'", ",", "SPIECE_UNDERLINE", "+", "u'was'", ",", "SPIECE_UNDERLINE", "+", "u'b'", ",", "\n", "u'or'", ",", "u'n'", ",", "SPIECE_UNDERLINE", "+", "u'in'", ",", "\n", "SPIECE_UNDERLINE", "+", "u''", ",", "u'<unk>'", ",", "u'2'", ",", "u'0'", ",", "u'0'", ",", "u'0'", ",", "u','", ",", "\n", "SPIECE_UNDERLINE", "+", "u'and'", ",", "SPIECE_UNDERLINE", "+", "u'this'", ",", "\n", "SPIECE_UNDERLINE", "+", "u'is'", ",", "SPIECE_UNDERLINE", "+", "u'f'", ",", "u'al'", ",", "u's'", ",", "\n", "u'<unk>'", ",", "u'.'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_xlnet_test.XLNetTokenizationTest.test_tokenizer_lower": [[76, 84], ["transformers.tokenization_xlnet.XLNetTokenizer", "transformers.tokenization_xlnet.XLNetTokenizer.tokenize", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual", "transformers.tokenization_xlnet.XLNetTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "test_tokenizer_lower", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "XLNetTokenizer", "(", "SAMPLE_VOCAB", ",", "do_lower_case", "=", "True", ")", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"I was born in 92000, and this is fals\u00e9.\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "SPIECE_UNDERLINE", "+", "u''", ",", "u'i'", ",", "SPIECE_UNDERLINE", "+", "u'was'", ",", "SPIECE_UNDERLINE", "+", "u'b'", ",", "\n", "u'or'", ",", "u'n'", ",", "SPIECE_UNDERLINE", "+", "u'in'", ",", "SPIECE_UNDERLINE", "+", "u''", ",", "\n", "u'9'", ",", "u'2'", ",", "u'0'", ",", "u'0'", ",", "u'0'", ",", "u','", ",", "SPIECE_UNDERLINE", "+", "u'and'", ",", "SPIECE_UNDERLINE", "+", "u'this'", ",", "\n", "SPIECE_UNDERLINE", "+", "u'is'", ",", "SPIECE_UNDERLINE", "+", "u'f'", ",", "u'al'", ",", "u'se'", ",", "u'.'", "]", ")", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "tokenize", "(", "u\"H\\u00E9llo\"", ")", ",", "[", "u\"\u2581he\"", ",", "u\"ll\"", ",", "u\"o\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_xlnet_test.XLNetTokenizationTest.test_tokenizer_no_lower": [[85, 92], ["transformers.tokenization_xlnet.XLNetTokenizer", "transformers.tokenization_xlnet.XLNetTokenizer.tokenize", "tokenization_xlnet_test.XLNetTokenizationTest.assertListEqual"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "test_tokenizer_no_lower", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "XLNetTokenizer", "(", "SAMPLE_VOCAB", ",", "do_lower_case", "=", "False", ")", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"I was born in 92000, and this is fals\u00e9.\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "SPIECE_UNDERLINE", "+", "u'I'", ",", "SPIECE_UNDERLINE", "+", "u'was'", ",", "SPIECE_UNDERLINE", "+", "u'b'", ",", "u'or'", ",", "\n", "u'n'", ",", "SPIECE_UNDERLINE", "+", "u'in'", ",", "SPIECE_UNDERLINE", "+", "u''", ",", "\n", "u'9'", ",", "u'2'", ",", "u'0'", ",", "u'0'", ",", "u'0'", ",", "u','", ",", "SPIECE_UNDERLINE", "+", "u'and'", ",", "SPIECE_UNDERLINE", "+", "u'this'", ",", "\n", "SPIECE_UNDERLINE", "+", "u'is'", ",", "SPIECE_UNDERLINE", "+", "u'f'", ",", "u'al'", ",", "u'se'", ",", "u'.'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_xlnet_test.XLNetTokenizationTest.test_sequence_builders": [[93, 105], ["transformers.tokenization_xlnet.XLNetTokenizer.from_pretrained", "transformers.tokenization_xlnet.XLNetTokenizer.from_pretrained.encode", "transformers.tokenization_xlnet.XLNetTokenizer.from_pretrained.encode", "transformers.tokenization_xlnet.XLNetTokenizer.from_pretrained.build_inputs_with_special_tokens", "transformers.tokenization_xlnet.XLNetTokenizer.from_pretrained.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "@", "slow", "\n", "def", "test_sequence_builders", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "XLNetTokenizer", ".", "from_pretrained", "(", "\"xlnet-base-cased\"", ")", "\n", "\n", "text", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "add_special_tokens", "=", "False", ")", "\n", "text_2", "=", "tokenizer", ".", "encode", "(", "\"multi-sequence build\"", ",", "add_special_tokens", "=", "False", ")", "\n", "\n", "encoded_sentence", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ")", "\n", "encoded_pair", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ",", "text_2", ")", "\n", "\n", "assert", "encoded_sentence", "==", "text", "+", "[", "4", ",", "3", "]", "\n", "assert", "encoded_pair", "==", "text", "+", "[", "4", "]", "+", "text_2", "+", "[", "4", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.model_card_test.ModelCardTester.setUp": [[26, 48], ["None"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "inputs_dict", "=", "{", "'model_details'", ":", "{", "\n", "'Organization'", ":", "'testing'", ",", "\n", "'Model date'", ":", "'today'", ",", "\n", "'Model version'", ":", "'v2.1, Developed by Test Corp in 2019.'", ",", "\n", "'Architecture'", ":", "'Convolutional Neural Network.'", ",", "\n", "}", ",", "\n", "'metrics'", ":", "'BLEU and ROUGE-1'", ",", "\n", "'evaluation_data'", ":", "{", "\n", "'Datasets'", ":", "{", "\n", "'BLEU'", ":", "'My-great-dataset-v1'", ",", "\n", "'ROUGE-1'", ":", "'My-short-dataset-v2.1'", ",", "\n", "}", ",", "\n", "'Preprocessing'", ":", "'See details on https://arxiv.org/pdf/1810.03993.pdf'", "\n", "}", ",", "\n", "'training_data'", ":", "{", "\n", "'Dataset'", ":", "'English Wikipedia dump dated 2018-12-01'", ",", "\n", "'Preprocessing'", ":", "'Using SentencePiece vocabulary of size 52k tokens. See details on https://arxiv.org/pdf/1810.03993.pdf'", "\n", "}", ",", "\n", "'quantitative_analyses'", ":", "{", "\n", "'BLEU'", ":", "55.1", ",", "\n", "'ROUGE-1'", ":", "76", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.model_card_test.ModelCardTester.test_model_card_common_properties": [[51, 62], ["transformers.model_card.ModelCard.from_dict", "model_card_test.ModelCardTester.assertTrue", "model_card_test.ModelCardTester.assertTrue", "model_card_test.ModelCardTester.assertTrue", "model_card_test.ModelCardTester.assertTrue", "model_card_test.ModelCardTester.assertTrue", "model_card_test.ModelCardTester.assertTrue", "model_card_test.ModelCardTester.assertTrue", "model_card_test.ModelCardTester.assertTrue", "model_card_test.ModelCardTester.assertTrue", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_dict"], ["", "def", "test_model_card_common_properties", "(", "self", ")", ":", "\n", "        ", "model_card", "=", "ModelCard", ".", "from_dict", "(", "self", ".", "inputs_dict", ")", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "model_card", ",", "'model_details'", ")", ")", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "model_card", ",", "'intended_use'", ")", ")", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "model_card", ",", "'factors'", ")", ")", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "model_card", ",", "'metrics'", ")", ")", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "model_card", ",", "'evaluation_data'", ")", ")", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "model_card", ",", "'training_data'", ")", ")", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "model_card", ",", "'quantitative_analyses'", ")", ")", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "model_card", ",", "'ethical_considerations'", ")", ")", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "model_card", ",", "'caveats_and_recommendations'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.model_card_test.ModelCardTester.test_model_card_to_json_string": [[63, 68], ["transformers.model_card.ModelCard.from_dict", "json.loads", "model_card_test.ModelCardTester.inputs_dict.items", "transformers.model_card.ModelCard.from_dict.to_json_string", "model_card_test.ModelCardTester.assertEqual"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_dict", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string"], ["", "def", "test_model_card_to_json_string", "(", "self", ")", ":", "\n", "        ", "model_card", "=", "ModelCard", ".", "from_dict", "(", "self", ".", "inputs_dict", ")", "\n", "obj", "=", "json", ".", "loads", "(", "model_card", ".", "to_json_string", "(", ")", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "inputs_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "obj", "[", "key", "]", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.model_card_test.ModelCardTester.test_model_card_to_json_file": [[69, 78], ["transformers.model_card.ModelCard.from_dict", "model_card_test.ModelCardTester.assertEqual", "tokenization_tests_commons.TemporaryDirectory", "os.path.join", "transformers.model_card.ModelCard.from_dict.to_json_file", "transformers.model_card.ModelCard.from_json_file", "transformers.model_card.ModelCard.from_json_file.to_dict", "transformers.model_card.ModelCard.from_dict.to_dict"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_dict", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.to_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict"], ["", "", "def", "test_model_card_to_json_file", "(", "self", ")", ":", "\n", "        ", "model_card_first", "=", "ModelCard", ".", "from_dict", "(", "self", ".", "inputs_dict", ")", "\n", "\n", "with", "TemporaryDirectory", "(", ")", "as", "tmpdirname", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "tmpdirname", ",", "u\"model_card.json\"", ")", "\n", "model_card_first", ".", "to_json_file", "(", "filename", ")", "\n", "model_card_second", "=", "ModelCard", ".", "from_json_file", "(", "filename", ")", "\n", "\n", "", "self", ".", "assertEqual", "(", "model_card_second", ".", "to_dict", "(", ")", ",", "model_card_first", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.model_card_test.ModelCardTester.test_model_card_from_and_save_pretrained": [[79, 87], ["transformers.model_card.ModelCard.from_dict", "model_card_test.ModelCardTester.assertEqual", "tokenization_tests_commons.TemporaryDirectory", "transformers.model_card.ModelCard.from_dict.save_pretrained", "transformers.model_card.ModelCard.from_pretrained", "transformers.model_card.ModelCard.from_pretrained.to_dict", "transformers.model_card.ModelCard.from_dict.to_dict"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.from_dict", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.save_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict"], ["", "def", "test_model_card_from_and_save_pretrained", "(", "self", ")", ":", "\n", "        ", "model_card_first", "=", "ModelCard", ".", "from_dict", "(", "self", ".", "inputs_dict", ")", "\n", "\n", "with", "TemporaryDirectory", "(", ")", "as", "tmpdirname", ":", "\n", "            ", "model_card_first", ".", "save_pretrained", "(", "tmpdirname", ")", "\n", "model_card_second", "=", "ModelCard", ".", "from_pretrained", "(", "tmpdirname", ")", "\n", "\n", "", "self", ".", "assertEqual", "(", "model_card_second", ".", "to_dict", "(", ")", ",", "model_card_first", ".", "to_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_transfo_xl_test.TransfoXLModelTest.setUp": [[190, 193], ["TransfoXLModelTest.TransfoXLModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TransfoXLModelTest", ".", "TransfoXLModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "TransfoXLConfig", ",", "d_embed", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_transfo_xl_test.TransfoXLModelTest.test_config": [[194, 196], ["modeling_transfo_xl_test.TransfoXLModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_transfo_xl_test.TransfoXLModelTest.test_transfo_xl_model": [[197, 202], ["modeling_transfo_xl_test.TransfoXLModelTest.model_tester.set_seed", "modeling_transfo_xl_test.TransfoXLModelTest.model_tester.prepare_config_and_inputs", "modeling_transfo_xl_test.TransfoXLModelTest.model_tester.create_transfo_xl_model", "modeling_transfo_xl_test.TransfoXLModelTest.model_tester.check_transfo_xl_model_output"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_transfo_xl_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "output_result", "=", "self", ".", "model_tester", ".", "create_transfo_xl_model", "(", "*", "config_and_inputs", ")", "\n", "self", ".", "model_tester", ".", "check_transfo_xl_model_output", "(", "output_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_transfo_xl_test.TransfoXLModelTest.test_transfo_xl_lm_head": [[203, 208], ["modeling_transfo_xl_test.TransfoXLModelTest.model_tester.set_seed", "modeling_transfo_xl_test.TransfoXLModelTest.model_tester.prepare_config_and_inputs", "modeling_transfo_xl_test.TransfoXLModelTest.model_tester.create_transfo_xl_lm_head", "modeling_transfo_xl_test.TransfoXLModelTest.model_tester.check_transfo_xl_lm_head_output"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_transfo_xl_lm_head", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "output_result", "=", "self", ".", "model_tester", ".", "create_transfo_xl_lm_head", "(", "*", "config_and_inputs", ")", "\n", "self", ".", "model_tester", ".", "check_transfo_xl_lm_head_output", "(", "output_result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_transfo_xl_test.TransfoXLModelTest.test_model_from_pretrained": [[209, 216], ["list", "TransfoXLModel.from_pretrained", "shutil.rmtree", "modeling_transfo_xl_test.TransfoXLModelTest.assertIsNotNone", "TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TransfoXLModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_utils_test.TokenizerUtilsTest.check_tokenizer_from_pretrained": [[29, 44], ["list", "tokenizer_class.max_model_input_sizes.keys", "tokenizer_class.from_pretrained", "tokenization_utils_test.TokenizerUtilsTest.assertIsNotNone", "tokenization_utils_test.TokenizerUtilsTest.assertIsInstance", "tokenization_utils_test.TokenizerUtilsTest.assertIsInstance", "tokenizer_class.from_pretrained.convert_tokens_to_ids", "tokenization_utils_test.TokenizerUtilsTest.assertIsInstance", "tokenization_utils_test.TokenizerUtilsTest.assertIsInstance", "tokenization_utils_test.TokenizerUtilsTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["    ", "def", "check_tokenizer_from_pretrained", "(", "self", ",", "tokenizer_class", ")", ":", "\n", "        ", "s3_models", "=", "list", "(", "tokenizer_class", ".", "max_model_input_sizes", ".", "keys", "(", ")", ")", "\n", "for", "model_name", "in", "s3_models", "[", ":", "1", "]", ":", "\n", "            ", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "tokenizer", ")", "\n", "self", ".", "assertIsInstance", "(", "tokenizer", ",", "tokenizer_class", ")", "\n", "self", ".", "assertIsInstance", "(", "tokenizer", ",", "PreTrainedTokenizer", ")", "\n", "\n", "for", "special_tok", "in", "tokenizer", ".", "all_special_tokens", ":", "\n", "                ", "if", "six", ".", "PY2", ":", "\n", "                    ", "self", ".", "assertIsInstance", "(", "special_tok", ",", "unicode", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "assertIsInstance", "(", "special_tok", ",", "str", ")", "\n", "", "special_tok_id", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "special_tok", ")", "\n", "self", ".", "assertIsInstance", "(", "special_tok_id", ",", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_utils_test.TokenizerUtilsTest.test_pretrained_tokenizers": [[45, 48], ["tokenization_utils_test.TokenizerUtilsTest.check_tokenizer_from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_utils_test.TokenizerUtilsTest.check_tokenizer_from_pretrained"], ["", "", "", "@", "slow", "\n", "def", "test_pretrained_tokenizers", "(", "self", ")", ":", "\n", "        ", "self", ".", "check_tokenizer_from_pretrained", "(", "GPT2Tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_openai_test.OpenAIGPTTokenizationTest.setUp": [[30, 47], ["super().setUp", "dict", "os.path.join", "os.path.join", "zip", "open", "fp.write", "open", "fp.write", "range", "json.dumps", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# Adapted from Sennrich et al. 2015 and https://github.com/rsennrich/subword-nmt", "\n", "vocab", "=", "[", "\"l\"", ",", "\"o\"", ",", "\"w\"", ",", "\"e\"", ",", "\"r\"", ",", "\"s\"", ",", "\"t\"", ",", "\"i\"", ",", "\"d\"", ",", "\"n\"", ",", "\n", "\"w</w>\"", ",", "\"r</w>\"", ",", "\"t</w>\"", ",", "\n", "\"lo\"", ",", "\"low\"", ",", "\"er</w>\"", ",", "\n", "\"low</w>\"", ",", "\"lowest</w>\"", ",", "\"newer</w>\"", ",", "\"wider</w>\"", ",", "\"<unk>\"", "]", "\n", "vocab_tokens", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "merges", "=", "[", "\"#version: 0.2\"", ",", "\"l o\"", ",", "\"lo w\"", ",", "\"e r</w>\"", ",", "\"\"", "]", "\n", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "self", ".", "merges_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "json", ".", "dumps", "(", "vocab_tokens", ")", ")", "\n", "", "with", "open", "(", "self", ".", "merges_file", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"\\n\"", ".", "join", "(", "merges", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_openai_test.OpenAIGPTTokenizationTest.get_tokenizer": [[48, 50], ["transformers.tokenization_openai.OpenAIGPTTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "OpenAIGPTTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_openai_test.OpenAIGPTTokenizationTest.get_input_output_texts": [[51, 55], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"lower newer\"", "\n", "output_text", "=", "u\"lower newer\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_openai_test.OpenAIGPTTokenizationTest.test_full_tokenizer": [[57, 69], ["transformers.tokenization_openai.OpenAIGPTTokenizer", "transformers.tokenization_openai.OpenAIGPTTokenizer.tokenize", "tokenization_openai_test.OpenAIGPTTokenizationTest.assertListEqual", "tokenization_openai_test.OpenAIGPTTokenizationTest.assertListEqual", "transformers.tokenization_openai.OpenAIGPTTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "OpenAIGPTTokenizer", "(", "self", ".", "vocab_file", ",", "self", ".", "merges_file", ")", "\n", "\n", "text", "=", "\"lower\"", "\n", "bpe_tokens", "=", "[", "\"low\"", ",", "\"er</w>\"", "]", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "bpe_tokens", ")", "\n", "\n", "input_tokens", "=", "tokens", "+", "[", "\"<unk>\"", "]", "\n", "input_bpe_tokens", "=", "[", "14", ",", "15", ",", "20", "]", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_tokens", ")", ",", "input_bpe_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_gpt2_test.GPT2TokenizationTest.setUp": [[30, 48], ["super().setUp", "dict", "os.path.join", "os.path.join", "zip", "io.open", "fp.write", "io.open", "fp.write", "range", "len", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "GPT2TokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# Adapted from Sennrich et al. 2015 and https://github.com/rsennrich/subword-nmt", "\n", "vocab", "=", "[", "\"l\"", ",", "\"o\"", ",", "\"w\"", ",", "\"e\"", ",", "\"r\"", ",", "\"s\"", ",", "\"t\"", ",", "\"i\"", ",", "\"d\"", ",", "\"n\"", ",", "\n", "\"\\u0120\"", ",", "\"\\u0120l\"", ",", "\"\\u0120n\"", ",", "\n", "\"\\u0120lo\"", ",", "\"\\u0120low\"", ",", "\"er\"", ",", "\n", "\"\\u0120lowest\"", ",", "\"\\u0120newer\"", ",", "\"\\u0120wider\"", ",", "\"<unk>\"", "]", "\n", "vocab_tokens", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "merges", "=", "[", "\"#version: 0.2\"", ",", "\"\\u0120 l\"", ",", "\"\\u0120l o\"", ",", "\"\\u0120lo w\"", ",", "\"e r\"", ",", "\"\"", "]", "\n", "self", ".", "special_tokens_map", "=", "{", "\"unk_token\"", ":", "\"<unk>\"", "}", "\n", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "self", ".", "merges_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "json", ".", "dumps", "(", "vocab_tokens", ")", "+", "\"\\n\"", ")", "\n", "", "with", "open", "(", "self", ".", "merges_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"\\n\"", ".", "join", "(", "merges", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_gpt2_test.GPT2TokenizationTest.get_tokenizer": [[49, 52], ["kwargs.update", "transformers.tokenization_gpt2.GPT2Tokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "update", "(", "self", ".", "special_tokens_map", ")", "\n", "return", "GPT2Tokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_gpt2_test.GPT2TokenizationTest.get_input_output_texts": [[53, 57], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"lower newer\"", "\n", "output_text", "=", "u\"lower newer\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_gpt2_test.GPT2TokenizationTest.test_full_tokenizer": [[58, 69], ["transformers.tokenization_gpt2.GPT2Tokenizer", "transformers.tokenization_gpt2.GPT2Tokenizer.tokenize", "tokenization_gpt2_test.GPT2TokenizationTest.assertListEqual", "tokenization_gpt2_test.GPT2TokenizationTest.assertListEqual", "transformers.tokenization_gpt2.GPT2Tokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "GPT2Tokenizer", "(", "self", ".", "vocab_file", ",", "self", ".", "merges_file", ",", "**", "self", ".", "special_tokens_map", ")", "\n", "text", "=", "\"lower newer\"", "\n", "bpe_tokens", "=", "[", "\"\\u0120low\"", ",", "\"er\"", ",", "\"\\u0120\"", ",", "\"n\"", ",", "\"e\"", ",", "\"w\"", ",", "\"er\"", "]", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "text", ",", "add_prefix_space", "=", "True", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "bpe_tokens", ")", "\n", "\n", "input_tokens", "=", "tokens", "+", "[", "tokenizer", ".", "unk_token", "]", "\n", "input_bpe_tokens", "=", "[", "14", ",", "15", ",", "10", ",", "9", ",", "3", ",", "2", ",", "15", ",", "19", "]", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_tokens", ")", ",", "input_bpe_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.hf_api_test.HfApiLoginTest.test_login_invalid": [[50, 53], ["hf_api_test.HfApiLoginTest.assertRaises", "hf_api_test.HfApiLoginTest._api.login"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.login"], ["    ", "def", "test_login_invalid", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "HTTPError", ")", ":", "\n", "            ", "self", ".", "_api", ".", "login", "(", "username", "=", "USER", ",", "password", "=", "\"fake\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.hf_api_test.HfApiLoginTest.test_login_valid": [[54, 57], ["hf_api_test.HfApiLoginTest._api.login", "hf_api_test.HfApiLoginTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.login"], ["", "", "def", "test_login_valid", "(", "self", ")", ":", "\n", "        ", "token", "=", "self", ".", "_api", ".", "login", "(", "username", "=", "USER", ",", "password", "=", "PASS", ")", "\n", "self", ".", "assertIsInstance", "(", "token", ",", "six", ".", "string_types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.hf_api_test.HfApiEndpointsTest.setUpClass": [[60, 66], ["cls._api.login"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.login"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "\"\"\"\n        Share this valid token in all tests below.\n        \"\"\"", "\n", "cls", ".", "_token", "=", "cls", ".", "_api", ".", "login", "(", "username", "=", "USER", ",", "password", "=", "PASS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.hf_api_test.HfApiEndpointsTest.test_whoami": [[67, 70], ["hf_api_test.HfApiEndpointsTest._api.whoami", "hf_api_test.HfApiEndpointsTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.whoami"], ["", "def", "test_whoami", "(", "self", ")", ":", "\n", "        ", "user", "=", "self", ".", "_api", ".", "whoami", "(", "token", "=", "self", ".", "_token", ")", "\n", "self", ".", "assertEqual", "(", "user", ",", "USER", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.hf_api_test.HfApiEndpointsTest.test_presign": [[71, 76], ["hf_api_test.HfApiEndpointsTest._api.presign", "hf_api_test.HfApiEndpointsTest.assertIsInstance", "hf_api_test.HfApiEndpointsTest.assertEqual"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.presign"], ["", "def", "test_presign", "(", "self", ")", ":", "\n", "        ", "for", "FILE_KEY", ",", "FILE_PATH", "in", "FILES", ":", "\n", "            ", "urls", "=", "self", ".", "_api", ".", "presign", "(", "token", "=", "self", ".", "_token", ",", "filename", "=", "FILE_KEY", ")", "\n", "self", ".", "assertIsInstance", "(", "urls", ",", "PresignedUrl", ")", "\n", "self", ".", "assertEqual", "(", "urls", ".", "type", ",", "\"text/plain\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.hf_api_test.HfApiEndpointsTest.test_presign_and_upload": [[77, 87], ["hf_api_test.HfApiEndpointsTest._api.presign_and_upload", "hf_api_test.HfApiEndpointsTest.assertIsInstance", "requests.get", "hf_api_test.HfApiEndpointsTest.assertEqual", "open", "f.read"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.presign_and_upload"], ["", "", "def", "test_presign_and_upload", "(", "self", ")", ":", "\n", "        ", "for", "FILE_KEY", ",", "FILE_PATH", "in", "FILES", ":", "\n", "            ", "access_url", "=", "self", ".", "_api", ".", "presign_and_upload", "(", "\n", "token", "=", "self", ".", "_token", ",", "filename", "=", "FILE_KEY", ",", "filepath", "=", "FILE_PATH", "\n", ")", "\n", "self", ".", "assertIsInstance", "(", "access_url", ",", "six", ".", "string_types", ")", "\n", "with", "open", "(", "FILE_PATH", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "body", "=", "f", ".", "read", "(", ")", "\n", "", "r", "=", "requests", ".", "get", "(", "access_url", ")", "\n", "self", ".", "assertEqual", "(", "r", ".", "text", ",", "body", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.hf_api_test.HfApiEndpointsTest.test_list_objs": [[88, 94], ["hf_api_test.HfApiEndpointsTest._api.list_objs", "hf_api_test.HfApiEndpointsTest.assertIsInstance", "len", "hf_api_test.HfApiEndpointsTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.list_objs"], ["", "", "def", "test_list_objs", "(", "self", ")", ":", "\n", "        ", "objs", "=", "self", ".", "_api", ".", "list_objs", "(", "token", "=", "self", ".", "_token", ")", "\n", "self", ".", "assertIsInstance", "(", "objs", ",", "list", ")", "\n", "if", "len", "(", "objs", ")", ">", "0", ":", "\n", "            ", "o", "=", "objs", "[", "-", "1", "]", "\n", "self", ".", "assertIsInstance", "(", "o", ",", "S3Obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.hf_api_test.HfFolderTest.test_token_workflow": [[98, 116], ["transformers.hf_api.HfFolder.save_token", "hf_api_test.HfFolderTest.assertEqual", "transformers.hf_api.HfFolder.delete_token", "transformers.hf_api.HfFolder.delete_token", "hf_api_test.HfFolderTest.assertEqual", "int", "transformers.hf_api.HfFolder.get_token", "transformers.hf_api.HfFolder.get_token", "time.time"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.save_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.delete_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.delete_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.get_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.get_token"], ["    ", "def", "test_token_workflow", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Test the whole token save/get/delete workflow,\n        with the desired behavior with respect to non-existent tokens.\n        \"\"\"", "\n", "token", "=", "\"token-{}\"", ".", "format", "(", "int", "(", "time", ".", "time", "(", ")", ")", ")", "\n", "HfFolder", ".", "save_token", "(", "token", ")", "\n", "self", ".", "assertEqual", "(", "\n", "HfFolder", ".", "get_token", "(", ")", ",", "\n", "token", "\n", ")", "\n", "HfFolder", ".", "delete_token", "(", ")", "\n", "HfFolder", ".", "delete_token", "(", ")", "\n", "# ^^ not an error, we test that the", "\n", "# second call does not fail.", "\n", "self", ".", "assertEqual", "(", "\n", "HfFolder", ".", "get_token", "(", ")", ",", "\n", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_ctrl_test.TFCTRLModelTest.setUp": [[175, 178], ["TFCTRLModelTest.TFCTRLModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFCTRLModelTest", ".", "TFCTRLModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "CTRLConfig", ",", "n_embd", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_ctrl_test.TFCTRLModelTest.test_config": [[179, 181], ["modeling_tf_ctrl_test.TFCTRLModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_ctrl_test.TFCTRLModelTest.test_ctrl_model": [[182, 185], ["modeling_tf_ctrl_test.TFCTRLModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_ctrl_test.TFCTRLModelTest.model_tester.create_and_check_ctrl_model"], "methods", ["None"], ["", "def", "test_ctrl_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_ctrl_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_ctrl_test.TFCTRLModelTest.test_ctrl_lm_head": [[186, 189], ["modeling_tf_ctrl_test.TFCTRLModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_ctrl_test.TFCTRLModelTest.model_tester.create_and_check_ctrl_lm_head"], "methods", ["None"], ["", "def", "test_ctrl_lm_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_ctrl_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_ctrl_test.TFCTRLModelTest.test_model_from_pretrained": [[190, 197], ["list", "TFCTRLModel.from_pretrained", "shutil.rmtree", "modeling_tf_ctrl_test.TFCTRLModelTest.assertIsNotNone", "TF_CTRL_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_CTRL_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TFCTRLModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_distilbert_test.DistilBertModelTest.setUp": [[209, 212], ["DistilBertModelTest.DistilBertModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "DistilBertModelTest", ".", "DistilBertModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "DistilBertConfig", ",", "dim", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_distilbert_test.DistilBertModelTest.test_config": [[213, 215], ["modeling_distilbert_test.DistilBertModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_distilbert_test.DistilBertModelTest.test_distilbert_model": [[216, 219], ["modeling_distilbert_test.DistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_distilbert_test.DistilBertModelTest.model_tester.create_and_check_distilbert_model"], "methods", ["None"], ["", "def", "test_distilbert_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_distilbert_test.DistilBertModelTest.test_for_masked_lm": [[220, 223], ["modeling_distilbert_test.DistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_distilbert_test.DistilBertModelTest.model_tester.create_and_check_distilbert_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_masked_lm", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_distilbert_test.DistilBertModelTest.test_for_question_answering": [[224, 227], ["modeling_distilbert_test.DistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_distilbert_test.DistilBertModelTest.model_tester.create_and_check_distilbert_for_question_answering"], "methods", ["None"], ["", "def", "test_for_question_answering", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_question_answering", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_distilbert_test.DistilBertModelTest.test_for_sequence_classification": [[228, 231], ["modeling_distilbert_test.DistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_distilbert_test.DistilBertModelTest.model_tester.create_and_check_distilbert_for_sequence_classification"], "methods", ["None"], ["", "def", "test_for_sequence_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_sequence_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_distilbert_test.DistilBertModelTest.test_for_token_classification": [[232, 235], ["modeling_distilbert_test.DistilBertModelTest.model_tester.prepare_config_and_inputs", "modeling_distilbert_test.DistilBertModelTest.model_tester.create_and_check_distilbert_for_token_classification"], "methods", ["None"], ["", "def", "test_for_token_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_distilbert_for_token_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_encoder_decoder_test.EncoderDecoderModelTest.test_model2model_from_pretrained": [[29, 38], ["logging.basicConfig", "list", "Model2Model.from_pretrained", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertIsInstance", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertIsInstance", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertEqual", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertEqual", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["    ", "@", "slow", "\n", "def", "test_model2model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "Model2Model", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ".", "encoder", ",", "BertModel", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ".", "decoder", ",", "BertForMaskedLM", ")", "\n", "self", ".", "assertEqual", "(", "model", ".", "decoder", ".", "config", ".", "is_decoder", ",", "True", ")", "\n", "self", ".", "assertEqual", "(", "model", ".", "encoder", ".", "config", ".", "is_decoder", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_encoder_decoder_test.EncoderDecoderModelTest.test_model2model_from_pretrained_not_bert": [[39, 49], ["logging.basicConfig", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertRaises", "Model2Model.from_pretrained", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertRaises", "Model2Model.from_pretrained", "modeling_encoder_decoder_test.EncoderDecoderModelTest.assertRaises", "Model2Model.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "def", "test_model2model_from_pretrained_not_bert", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "Model2Model", ".", "from_pretrained", "(", "'roberta'", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "Model2Model", ".", "from_pretrained", "(", "'distilbert'", ")", "\n", "\n", "", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "_", "=", "Model2Model", ".", "from_pretrained", "(", "'does-not-exist'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_roberta_test.RobertaModelTest.setUp": [[185, 188], ["RobertaModelTest.RobertaModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "RobertaModelTest", ".", "RobertaModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "RobertaConfig", ",", "hidden_size", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_roberta_test.RobertaModelTest.test_config": [[189, 191], ["modeling_roberta_test.RobertaModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_roberta_test.RobertaModelTest.test_roberta_model": [[192, 195], ["modeling_roberta_test.RobertaModelTest.model_tester.prepare_config_and_inputs", "modeling_roberta_test.RobertaModelTest.model_tester.create_and_check_roberta_model"], "methods", ["None"], ["", "def", "test_roberta_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_roberta_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_roberta_test.RobertaModelTest.test_for_masked_lm": [[196, 199], ["modeling_roberta_test.RobertaModelTest.model_tester.prepare_config_and_inputs", "modeling_roberta_test.RobertaModelTest.model_tester.create_and_check_roberta_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_roberta_for_masked_lm", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_roberta_test.RobertaModelTest.test_model_from_pretrained": [[200, 207], ["list", "RobertaModel.from_pretrained", "shutil.rmtree", "modeling_roberta_test.RobertaModelTest.assertIsNotNone", "ROBERTA_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "ROBERTA_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "RobertaModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_roberta_test.RobertaModelIntegrationTest.test_inference_masked_lm": [[212, 231], ["RobertaForMaskedLM.from_pretrained", "torch.tensor", "torch.Size", "modeling_roberta_test.RobertaModelIntegrationTest.assertEqual", "torch.Tensor", "modeling_roberta_test.RobertaModelIntegrationTest.assertTrue", "RobertaForMaskedLM.from_pretrained.", "torch.allclose"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["    ", "@", "slow", "\n", "def", "test_inference_masked_lm", "(", "self", ")", ":", "\n", "        ", "model", "=", "RobertaForMaskedLM", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "\n", "input_ids", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "]", ")", "\n", "output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "expected_shape", "=", "torch", ".", "Size", "(", "(", "1", ",", "11", ",", "50265", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n", "output", ".", "shape", ",", "\n", "expected_shape", "\n", ")", "\n", "# compare the actual values for a slice.", "\n", "expected_slice", "=", "torch", ".", "Tensor", "(", "\n", "[", "[", "[", "33.8843", ",", "-", "4.3107", ",", "22.7779", "]", ",", "\n", "[", "4.6533", ",", "-", "2.8099", ",", "13.6252", "]", ",", "\n", "[", "1.8222", ",", "-", "3.6898", ",", "8.8600", "]", "]", "]", "\n", ")", "\n", "self", ".", "assertTrue", "(", "\n", "torch", ".", "allclose", "(", "output", "[", ":", ",", ":", "3", ",", ":", "3", "]", ",", "expected_slice", ",", "atol", "=", "1e-3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_roberta_test.RobertaModelIntegrationTest.test_inference_no_head": [[233, 247], ["RobertaModel.from_pretrained", "torch.tensor", "torch.Tensor", "modeling_roberta_test.RobertaModelIntegrationTest.assertTrue", "RobertaModel.from_pretrained.", "torch.allclose"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_inference_no_head", "(", "self", ")", ":", "\n", "        ", "model", "=", "RobertaModel", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "\n", "input_ids", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "]", ")", "\n", "output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "# compare the actual values for a slice.", "\n", "expected_slice", "=", "torch", ".", "Tensor", "(", "\n", "[", "[", "[", "-", "0.0231", ",", "0.0782", ",", "0.0074", "]", ",", "\n", "[", "-", "0.1854", ",", "0.0539", ",", "-", "0.0174", "]", ",", "\n", "[", "0.0548", ",", "0.0799", ",", "0.1687", "]", "]", "]", "\n", ")", "\n", "self", ".", "assertTrue", "(", "\n", "torch", ".", "allclose", "(", "output", "[", ":", ",", ":", "3", ",", ":", "3", "]", ",", "expected_slice", ",", "atol", "=", "1e-3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_roberta_test.RobertaModelIntegrationTest.test_inference_classification_head": [[249, 263], ["RobertaForSequenceClassification.from_pretrained", "torch.tensor", "torch.Size", "modeling_roberta_test.RobertaModelIntegrationTest.assertEqual", "torch.Tensor", "modeling_roberta_test.RobertaModelIntegrationTest.assertTrue", "RobertaForSequenceClassification.from_pretrained.", "torch.allclose"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_inference_classification_head", "(", "self", ")", ":", "\n", "        ", "model", "=", "RobertaForSequenceClassification", ".", "from_pretrained", "(", "'roberta-large-mnli'", ")", "\n", "\n", "input_ids", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "]", ")", "\n", "output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "expected_shape", "=", "torch", ".", "Size", "(", "(", "1", ",", "3", ")", ")", "\n", "self", ".", "assertEqual", "(", "\n", "output", ".", "shape", ",", "\n", "expected_shape", "\n", ")", "\n", "expected_tensor", "=", "torch", ".", "Tensor", "(", "[", "[", "-", "0.9469", ",", "0.3913", ",", "0.5118", "]", "]", ")", "\n", "self", ".", "assertTrue", "(", "\n", "torch", ".", "allclose", "(", "output", ",", "expected_tensor", ",", "atol", "=", "1e-3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.setUp": [[201, 204], ["TFOpenAIGPTModelTest.TFOpenAIGPTModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFOpenAIGPTModelTest", ".", "TFOpenAIGPTModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "OpenAIGPTConfig", ",", "n_embd", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.test_config": [[205, 207], ["modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.test_openai_gpt_model": [[208, 211], ["modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.model_tester.create_and_check_openai_gpt_model"], "methods", ["None"], ["", "def", "test_openai_gpt_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_openai_gpt_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.test_openai_gpt_lm_head": [[212, 215], ["modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.model_tester.create_and_check_openai_gpt_lm_head"], "methods", ["None"], ["", "def", "test_openai_gpt_lm_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_openai_gpt_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.test_openai_gpt_double_head": [[216, 219], ["modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.model_tester.create_and_check_openai_gpt_double_head"], "methods", ["None"], ["", "def", "test_openai_gpt_double_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_openai_gpt_double_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.test_model_from_pretrained": [[220, 227], ["list", "TFOpenAIGPTModel.from_pretrained", "shutil.rmtree", "modeling_tf_openai_gpt_test.TFOpenAIGPTModelTest.assertIsNotNone", "TF_OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_OPENAI_GPT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TFOpenAIGPTModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_t5_test.T5TokenizationTest.setUp": [[32, 38], ["super().setUp", "transformers.tokenization_t5.T5Tokenizer", "transformers.tokenization_t5.T5Tokenizer.save_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.save_pretrained"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "T5TokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# We have a SentencePiece fixture for testing", "\n", "tokenizer", "=", "T5Tokenizer", "(", "SAMPLE_VOCAB", ")", "\n", "tokenizer", ".", "save_pretrained", "(", "self", ".", "tmpdirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_t5_test.T5TokenizationTest.get_tokenizer": [[39, 41], ["transformers.tokenization_t5.T5Tokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "T5Tokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_t5_test.T5TokenizationTest.get_input_output_texts": [[42, 46], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"This is a test\"", "\n", "output_text", "=", "u\"This is a test\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_t5_test.T5TokenizationTest.test_full_tokenizer": [[47, 74], ["transformers.tokenization_t5.T5Tokenizer", "transformers.tokenization_t5.T5Tokenizer.tokenize", "tokenization_t5_test.T5TokenizationTest.assertListEqual", "tokenization_t5_test.T5TokenizationTest.assertListEqual", "transformers.tokenization_t5.T5Tokenizer.tokenize", "tokenization_t5_test.T5TokenizationTest.assertListEqual", "transformers.tokenization_t5.T5Tokenizer.convert_tokens_to_ids", "tokenization_t5_test.T5TokenizationTest.assertListEqual", "transformers.tokenization_t5.T5Tokenizer.convert_ids_to_tokens", "tokenization_t5_test.T5TokenizationTest.assertListEqual", "transformers.tokenization_t5.T5Tokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "T5Tokenizer", "(", "SAMPLE_VOCAB", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u'This is a test'", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "u'\u2581This'", ",", "u'\u2581is'", ",", "u'\u2581a'", ",", "u'\u2581t'", ",", "u'est'", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", ",", "[", "285", ",", "46", ",", "10", ",", "170", ",", "382", "]", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"I was born in 92000, and this is fals\u00e9.\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "SPIECE_UNDERLINE", "+", "u'I'", ",", "SPIECE_UNDERLINE", "+", "u'was'", ",", "SPIECE_UNDERLINE", "+", "u'b'", ",", "\n", "u'or'", ",", "u'n'", ",", "SPIECE_UNDERLINE", "+", "u'in'", ",", "SPIECE_UNDERLINE", "+", "u''", ",", "\n", "u'9'", ",", "u'2'", ",", "u'0'", ",", "u'0'", ",", "u'0'", ",", "u','", ",", "SPIECE_UNDERLINE", "+", "u'and'", ",", "SPIECE_UNDERLINE", "+", "u'this'", ",", "\n", "SPIECE_UNDERLINE", "+", "u'is'", ",", "SPIECE_UNDERLINE", "+", "u'f'", ",", "u'al'", ",", "u's'", ",", "u'\u00e9'", ",", "u'.'", "]", ")", "\n", "ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "self", ".", "assertListEqual", "(", "\n", "ids", ",", "[", "8", ",", "21", ",", "84", ",", "55", ",", "24", ",", "19", ",", "7", ",", "0", ",", "\n", "602", ",", "347", ",", "347", ",", "347", ",", "3", ",", "12", ",", "66", ",", "\n", "46", ",", "72", ",", "80", ",", "6", ",", "0", ",", "4", "]", ")", "\n", "\n", "back_tokens", "=", "tokenizer", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "self", ".", "assertListEqual", "(", "back_tokens", ",", "[", "SPIECE_UNDERLINE", "+", "u'I'", ",", "SPIECE_UNDERLINE", "+", "u'was'", ",", "SPIECE_UNDERLINE", "+", "u'b'", ",", "\n", "u'or'", ",", "u'n'", ",", "SPIECE_UNDERLINE", "+", "u'in'", ",", "\n", "SPIECE_UNDERLINE", "+", "u''", ",", "u'<unk>'", ",", "u'2'", ",", "u'0'", ",", "u'0'", ",", "u'0'", ",", "u','", ",", "\n", "SPIECE_UNDERLINE", "+", "u'and'", ",", "SPIECE_UNDERLINE", "+", "u'this'", ",", "\n", "SPIECE_UNDERLINE", "+", "u'is'", ",", "SPIECE_UNDERLINE", "+", "u'f'", ",", "u'al'", ",", "u's'", ",", "\n", "u'<unk>'", ",", "u'.'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_t5_test.T5ModelTest.setUp": [[161, 164], ["T5ModelTest.T5ModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "T5ModelTest", ".", "T5ModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "T5Config", ",", "d_model", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_t5_test.T5ModelTest.test_config": [[165, 167], ["modeling_t5_test.T5ModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_t5_test.T5ModelTest.test_t5_model": [[168, 171], ["modeling_t5_test.T5ModelTest.model_tester.prepare_config_and_inputs", "modeling_t5_test.T5ModelTest.model_tester.create_and_check_t5_model"], "methods", ["None"], ["", "def", "test_t5_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_t5_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_t5_test.T5ModelTest.test_with_lm_head": [[172, 175], ["modeling_t5_test.T5ModelTest.model_tester.prepare_config_and_inputs", "modeling_t5_test.T5ModelTest.model_tester.create_and_check_t5_with_lm_head"], "methods", ["None"], ["", "def", "test_with_lm_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_t5_with_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_t5_test.T5ModelTest.test_model_from_pretrained": [[176, 183], ["list", "T5Model.from_pretrained", "shutil.rmtree", "modeling_t5_test.T5ModelTest.assertIsNotNone", "T5_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "T5_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "T5Model", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_albert_test.AlbertTokenizationTest.setUp": [[31, 37], ["super().setUp", "transformers.tokenization_albert.AlbertTokenizer", "transformers.tokenization_albert.AlbertTokenizer.save_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.save_pretrained"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "AlbertTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# We have a SentencePiece fixture for testing", "\n", "tokenizer", "=", "AlbertTokenizer", "(", "SAMPLE_VOCAB", ")", "\n", "tokenizer", ".", "save_pretrained", "(", "self", ".", "tmpdirname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_albert_test.AlbertTokenizationTest.get_tokenizer": [[38, 40], ["transformers.tokenization_albert.AlbertTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "AlbertTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_albert_test.AlbertTokenizationTest.get_input_output_texts": [[41, 45], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"this is a test\"", "\n", "output_text", "=", "u\"this is a test\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_albert_test.AlbertTokenizationTest.test_full_tokenizer": [[47, 63], ["transformers.tokenization_albert.AlbertTokenizer", "transformers.tokenization_albert.AlbertTokenizer.tokenize", "tokenization_albert_test.AlbertTokenizationTest.assertListEqual", "tokenization_albert_test.AlbertTokenizationTest.assertListEqual", "transformers.tokenization_albert.AlbertTokenizer.tokenize", "tokenization_albert_test.AlbertTokenizationTest.assertListEqual", "transformers.tokenization_albert.AlbertTokenizer.convert_tokens_to_ids", "tokenization_albert_test.AlbertTokenizationTest.assertListEqual", "transformers.tokenization_albert.AlbertTokenizer.convert_ids_to_tokens", "tokenization_albert_test.AlbertTokenizationTest.assertListEqual", "transformers.tokenization_albert.AlbertTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "AlbertTokenizer", "(", "SAMPLE_VOCAB", ",", "keep_accents", "=", "True", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u'This is a test'", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "u'\u2581this'", ",", "u'\u2581is'", ",", "u'\u2581a'", ",", "u'\u2581test'", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", ",", "[", "48", ",", "25", ",", "21", ",", "1289", "]", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"I was born in 92000, and this is fals\u00e9.\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "u'\u2581i'", ",", "u'\u2581was'", ",", "u'\u2581born'", ",", "u'\u2581in'", ",", "u'\u25819'", ",", "u'2000'", ",", "u','", ",", "u'\u2581and'", ",", "u'\u2581this'", ",", "u'\u2581is'", ",", "u'\u2581fal'", ",", "u's'", ",", "u'\u00e9'", ",", "u'.'", "]", ")", "\n", "ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "self", ".", "assertListEqual", "(", "ids", ",", "[", "31", ",", "23", ",", "386", ",", "19", ",", "561", ",", "3050", ",", "15", ",", "17", ",", "48", ",", "25", ",", "8256", ",", "18", ",", "1", ",", "9", "]", ")", "\n", "\n", "back_tokens", "=", "tokenizer", ".", "convert_ids_to_tokens", "(", "ids", ")", "\n", "self", ".", "assertListEqual", "(", "back_tokens", ",", "[", "'\u2581i'", ",", "'\u2581was'", ",", "'\u2581born'", ",", "'\u2581in'", ",", "'\u25819'", ",", "'2000'", ",", "','", ",", "'\u2581and'", ",", "'\u2581this'", ",", "'\u2581is'", ",", "'\u2581fal'", ",", "'s'", ",", "'<unk>'", ",", "'.'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_albert_test.AlbertTokenizationTest.test_sequence_builders": [[64, 75], ["transformers.tokenization_albert.AlbertTokenizer", "transformers.tokenization_albert.AlbertTokenizer.encode", "transformers.tokenization_albert.AlbertTokenizer.encode", "transformers.tokenization_albert.AlbertTokenizer.build_inputs_with_special_tokens", "transformers.tokenization_albert.AlbertTokenizer.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "def", "test_sequence_builders", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "AlbertTokenizer", "(", "SAMPLE_VOCAB", ")", "\n", "\n", "text", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ")", "\n", "text_2", "=", "tokenizer", ".", "encode", "(", "\"multi-sequence build\"", ")", "\n", "\n", "encoded_sentence", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ")", "\n", "encoded_pair", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ",", "text_2", ")", "\n", "\n", "assert", "encoded_sentence", "==", "[", "tokenizer", ".", "cls_token_id", "]", "+", "text", "+", "[", "tokenizer", ".", "sep_token_id", "]", "\n", "assert", "encoded_pair", "==", "[", "tokenizer", ".", "cls_token_id", "]", "+", "text", "+", "[", "tokenizer", ".", "sep_token_id", "]", "+", "text_2", "+", "[", "tokenizer", ".", "sep_token_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlnet_test.XLNetModelTest.setUp": [[348, 351], ["XLNetModelTest.XLNetModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "XLNetModelTest", ".", "XLNetModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "XLNetConfig", ",", "d_inner", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlnet_test.XLNetModelTest.test_config": [[352, 354], ["modeling_xlnet_test.XLNetModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlnet_test.XLNetModelTest.test_xlnet_base_model": [[355, 359], ["modeling_xlnet_test.XLNetModelTest.model_tester.set_seed", "modeling_xlnet_test.XLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_xlnet_test.XLNetModelTest.model_tester.create_and_check_xlnet_base_model"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_xlnet_base_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_base_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlnet_test.XLNetModelTest.test_xlnet_base_model_with_att_output": [[360, 365], ["modeling_xlnet_test.XLNetModelTest.model_tester.set_seed", "modeling_xlnet_test.XLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_xlnet_test.XLNetModelTest.model_tester.create_and_check_xlnet_base_model_with_att_output"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_xlnet_base_model_with_att_output", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "config_and_inputs", "[", "0", "]", ".", "output_attentions", "=", "True", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_base_model_with_att_output", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlnet_test.XLNetModelTest.test_xlnet_lm_head": [[366, 370], ["modeling_xlnet_test.XLNetModelTest.model_tester.set_seed", "modeling_xlnet_test.XLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_xlnet_test.XLNetModelTest.model_tester.create_and_check_xlnet_lm_head"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_xlnet_lm_head", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlnet_test.XLNetModelTest.test_xlnet_sequence_classif": [[371, 375], ["modeling_xlnet_test.XLNetModelTest.model_tester.set_seed", "modeling_xlnet_test.XLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_xlnet_test.XLNetModelTest.model_tester.create_and_check_xlnet_sequence_classif"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_xlnet_sequence_classif", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_sequence_classif", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlnet_test.XLNetModelTest.test_xlnet_token_classif": [[376, 380], ["modeling_xlnet_test.XLNetModelTest.model_tester.set_seed", "modeling_xlnet_test.XLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_xlnet_test.XLNetModelTest.model_tester.create_and_check_xlnet_token_classif"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_xlnet_token_classif", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_token_classif", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlnet_test.XLNetModelTest.test_xlnet_qa": [[381, 385], ["modeling_xlnet_test.XLNetModelTest.model_tester.set_seed", "modeling_xlnet_test.XLNetModelTest.model_tester.prepare_config_and_inputs", "modeling_xlnet_test.XLNetModelTest.model_tester.create_and_check_xlnet_qa"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_xlnet_qa", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlnet_qa", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_xlnet_test.XLNetModelTest.test_model_from_pretrained": [[386, 393], ["list", "XLNetModel.from_pretrained", "shutil.rmtree", "modeling_xlnet_test.XLNetModelTest.assertIsNotNone", "XLNET_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "XLNET_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "XLNetModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_distilbert_test.DistilBertTokenizationTest.get_tokenizer": [[31, 33], ["transformers.tokenization_distilbert.DistilBertTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "DistilBertTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_distilbert_test.DistilBertTokenizationTest.test_sequence_builders": [[34, 47], ["transformers.tokenization_distilbert.DistilBertTokenizer.from_pretrained", "transformers.tokenization_distilbert.DistilBertTokenizer.from_pretrained.encode", "transformers.tokenization_distilbert.DistilBertTokenizer.from_pretrained.encode", "transformers.tokenization_distilbert.DistilBertTokenizer.from_pretrained.build_inputs_with_special_tokens", "transformers.tokenization_distilbert.DistilBertTokenizer.from_pretrained.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "@", "slow", "\n", "def", "test_sequence_builders", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "DistilBertTokenizer", ".", "from_pretrained", "(", "\"distilbert-base-uncased\"", ")", "\n", "\n", "text", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "add_special_tokens", "=", "False", ")", "\n", "text_2", "=", "tokenizer", ".", "encode", "(", "\"multi-sequence build\"", ",", "add_special_tokens", "=", "False", ")", "\n", "\n", "encoded_sentence", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ")", "\n", "encoded_pair", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ",", "text_2", ")", "\n", "\n", "assert", "encoded_sentence", "==", "[", "tokenizer", ".", "cls_token_id", "]", "+", "text", "+", "[", "tokenizer", ".", "sep_token_id", "]", "\n", "assert", "encoded_pair", "==", "[", "tokenizer", ".", "cls_token_id", "]", "+", "text", "+", "[", "tokenizer", ".", "sep_token_id", "]", "+", "text_2", "+", "[", "tokenizer", ".", "sep_token_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.OptimizationTest.assertListAlmostEqual": [[62, 66], ["optimization_test.OptimizationTest.assertEqual", "zip", "len", "len", "optimization_test.OptimizationTest.assertAlmostEqual"], "methods", ["None"], ["    ", "def", "assertListAlmostEqual", "(", "self", ",", "list1", ",", "list2", ",", "tol", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "len", "(", "list1", ")", ",", "len", "(", "list2", ")", ")", "\n", "for", "a", ",", "b", "in", "zip", "(", "list1", ",", "list2", ")", ":", "\n", "            ", "self", ".", "assertAlmostEqual", "(", "a", ",", "b", ",", "delta", "=", "tol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.OptimizationTest.test_adam_w": [[67, 80], ["torch.tensor", "torch.tensor", "torch.nn.MSELoss", "AdamW", "range", "optimization_test.OptimizationTest.assertListAlmostEqual", "torch.nn.MSELoss.", "torch.nn.MSELoss.backward", "AdamW.step", "torch.tensor.grad.detach_", "torch.tensor.grad.zero_", "torch.tensor.tolist"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_tf_test.OptimizationFTest.assertListAlmostEqual", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.step"], ["", "", "def", "test_adam_w", "(", "self", ")", ":", "\n", "        ", "w", "=", "torch", ".", "tensor", "(", "[", "0.1", ",", "-", "0.2", ",", "-", "0.1", "]", ",", "requires_grad", "=", "True", ")", "\n", "target", "=", "torch", ".", "tensor", "(", "[", "0.4", ",", "0.2", ",", "-", "0.5", "]", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "# No warmup, constant schedule, no gradient clipping", "\n", "optimizer", "=", "AdamW", "(", "params", "=", "[", "w", "]", ",", "lr", "=", "2e-1", ",", "weight_decay", "=", "0.0", ")", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "            ", "loss", "=", "criterion", "(", "w", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "w", ".", "grad", ".", "detach_", "(", ")", "# No zero_grad() function on simple tensors. we do it ourselves.", "\n", "w", ".", "grad", ".", "zero_", "(", ")", "\n", "", "self", ".", "assertListAlmostEqual", "(", "w", ".", "tolist", "(", ")", ",", "[", "0.4", ",", "0.2", ",", "-", "0.5", "]", ",", "tol", "=", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.ScheduleInitTest.assertListAlmostEqual": [[88, 92], ["optimization_test.ScheduleInitTest.assertEqual", "zip", "len", "len", "optimization_test.ScheduleInitTest.assertAlmostEqual"], "methods", ["None"], ["def", "assertListAlmostEqual", "(", "self", ",", "list1", ",", "list2", ",", "tol", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "len", "(", "list1", ")", ",", "len", "(", "list2", ")", ")", "\n", "for", "a", ",", "b", "in", "zip", "(", "list1", ",", "list2", ")", ":", "\n", "            ", "self", ".", "assertAlmostEqual", "(", "a", ",", "b", ",", "delta", "=", "tol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.ScheduleInitTest.test_constant_scheduler": [[93, 103], ["get_constant_schedule", "optimization_test.unwrap_schedule", "optimization_test.ScheduleInitTest.assertEqual", "optimization_test.ScheduleInitTest.assertListEqual", "get_constant_schedule", "optimization_test.unwrap_and_save_reload_schedule", "optimization_test.ScheduleInitTest.assertListEqual", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_constant_schedule", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.unwrap_schedule", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_constant_schedule", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.unwrap_and_save_reload_schedule"], ["", "", "def", "test_constant_scheduler", "(", "self", ")", ":", "\n", "        ", "scheduler", "=", "get_constant_schedule", "(", "self", ".", "optimizer", ")", "\n", "lrs", "=", "unwrap_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "expected_learning_rates", "=", "[", "10.", "]", "*", "self", ".", "num_steps", "\n", "self", ".", "assertEqual", "(", "len", "(", "lrs", "[", "0", "]", ")", ",", "1", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "expected_learning_rates", ")", "\n", "\n", "scheduler", "=", "get_constant_schedule", "(", "self", ".", "optimizer", ")", "\n", "lrs_2", "=", "unwrap_and_save_reload_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "[", "l", "[", "0", "]", "for", "l", "in", "lrs_2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.ScheduleInitTest.test_warmup_constant_scheduler": [[104, 114], ["get_constant_schedule_with_warmup", "optimization_test.unwrap_schedule", "optimization_test.ScheduleInitTest.assertEqual", "optimization_test.ScheduleInitTest.assertListEqual", "get_constant_schedule_with_warmup", "optimization_test.unwrap_and_save_reload_schedule", "optimization_test.ScheduleInitTest.assertListEqual", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_constant_schedule_with_warmup", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.unwrap_schedule", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_constant_schedule_with_warmup", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.unwrap_and_save_reload_schedule"], ["", "def", "test_warmup_constant_scheduler", "(", "self", ")", ":", "\n", "        ", "scheduler", "=", "get_constant_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "4", ")", "\n", "lrs", "=", "unwrap_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "expected_learning_rates", "=", "[", "2.5", ",", "5.0", ",", "7.5", ",", "10.0", ",", "10.0", ",", "10.0", ",", "10.0", ",", "10.0", ",", "10.0", ",", "10.0", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "lrs", "[", "0", "]", ")", ",", "1", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "expected_learning_rates", ")", "\n", "\n", "scheduler", "=", "get_constant_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "4", ")", "\n", "lrs_2", "=", "unwrap_and_save_reload_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "[", "l", "[", "0", "]", "for", "l", "in", "lrs_2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.ScheduleInitTest.test_warmup_linear_scheduler": [[115, 125], ["get_linear_schedule_with_warmup", "optimization_test.unwrap_schedule", "optimization_test.ScheduleInitTest.assertEqual", "optimization_test.ScheduleInitTest.assertListEqual", "get_linear_schedule_with_warmup", "optimization_test.unwrap_and_save_reload_schedule", "optimization_test.ScheduleInitTest.assertListEqual", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_linear_schedule_with_warmup", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.unwrap_schedule", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_linear_schedule_with_warmup", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.unwrap_and_save_reload_schedule"], ["", "def", "test_warmup_linear_scheduler", "(", "self", ")", ":", "\n", "        ", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "2", ",", "num_training_steps", "=", "10", ")", "\n", "lrs", "=", "unwrap_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "expected_learning_rates", "=", "[", "5.0", ",", "10.0", ",", "8.75", ",", "7.5", ",", "6.25", ",", "5.0", ",", "3.75", ",", "2.5", ",", "1.25", ",", "0.0", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "lrs", "[", "0", "]", ")", ",", "1", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "expected_learning_rates", ")", "\n", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "2", ",", "num_training_steps", "=", "10", ")", "\n", "lrs_2", "=", "unwrap_and_save_reload_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "[", "l", "[", "0", "]", "for", "l", "in", "lrs_2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.ScheduleInitTest.test_warmup_cosine_scheduler": [[126, 136], ["get_cosine_schedule_with_warmup", "optimization_test.unwrap_schedule", "optimization_test.ScheduleInitTest.assertEqual", "optimization_test.ScheduleInitTest.assertListAlmostEqual", "get_cosine_schedule_with_warmup", "optimization_test.unwrap_and_save_reload_schedule", "optimization_test.ScheduleInitTest.assertListEqual", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_cosine_schedule_with_warmup", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.unwrap_schedule", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_tf_test.OptimizationFTest.assertListAlmostEqual", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_cosine_schedule_with_warmup", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.unwrap_and_save_reload_schedule"], ["", "def", "test_warmup_cosine_scheduler", "(", "self", ")", ":", "\n", "        ", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "2", ",", "num_training_steps", "=", "10", ")", "\n", "lrs", "=", "unwrap_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "expected_learning_rates", "=", "[", "5.0", ",", "10.0", ",", "9.61", ",", "8.53", ",", "6.91", ",", "5.0", ",", "3.08", ",", "1.46", ",", "0.38", ",", "0.0", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "lrs", "[", "0", "]", ")", ",", "1", ")", "\n", "self", ".", "assertListAlmostEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "expected_learning_rates", ",", "tol", "=", "1e-2", ")", "\n", "\n", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "2", ",", "num_training_steps", "=", "10", ")", "\n", "lrs_2", "=", "unwrap_and_save_reload_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "[", "l", "[", "0", "]", "for", "l", "in", "lrs_2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.ScheduleInitTest.test_warmup_cosine_hard_restart_scheduler": [[137, 147], ["get_cosine_with_hard_restarts_schedule_with_warmup", "optimization_test.unwrap_schedule", "optimization_test.ScheduleInitTest.assertEqual", "optimization_test.ScheduleInitTest.assertListAlmostEqual", "get_cosine_with_hard_restarts_schedule_with_warmup", "optimization_test.unwrap_and_save_reload_schedule", "optimization_test.ScheduleInitTest.assertListEqual", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_cosine_with_hard_restarts_schedule_with_warmup", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.unwrap_schedule", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_tf_test.OptimizationFTest.assertListAlmostEqual", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_cosine_with_hard_restarts_schedule_with_warmup", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.unwrap_and_save_reload_schedule"], ["", "def", "test_warmup_cosine_hard_restart_scheduler", "(", "self", ")", ":", "\n", "        ", "scheduler", "=", "get_cosine_with_hard_restarts_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "2", ",", "num_cycles", "=", "2", ",", "num_training_steps", "=", "10", ")", "\n", "lrs", "=", "unwrap_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "expected_learning_rates", "=", "[", "5.0", ",", "10.0", ",", "8.53", ",", "5.0", ",", "1.46", ",", "10.0", ",", "8.53", ",", "5.0", ",", "1.46", ",", "0.0", "]", "\n", "self", ".", "assertEqual", "(", "len", "(", "lrs", "[", "0", "]", ")", ",", "1", ")", "\n", "self", ".", "assertListAlmostEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "expected_learning_rates", ",", "tol", "=", "1e-2", ")", "\n", "\n", "scheduler", "=", "get_cosine_with_hard_restarts_schedule_with_warmup", "(", "self", ".", "optimizer", ",", "num_warmup_steps", "=", "2", ",", "num_cycles", "=", "2", ",", "num_training_steps", "=", "10", ")", "\n", "lrs_2", "=", "unwrap_and_save_reload_schedule", "(", "scheduler", ",", "self", ".", "num_steps", ")", "\n", "self", ".", "assertListEqual", "(", "[", "l", "[", "0", "]", "for", "l", "in", "lrs", "]", ",", "[", "l", "[", "0", "]", "for", "l", "in", "lrs_2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.unwrap_schedule": [[38, 44], ["range", "scheduler.step", "lrs.append", "scheduler.get_lr"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.step"], ["def", "unwrap_schedule", "(", "scheduler", ",", "num_steps", "=", "10", ")", ":", "\n", "    ", "lrs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "lrs", ".", "append", "(", "scheduler", ".", "get_lr", "(", ")", ")", "\n", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_test.unwrap_and_save_reload_schedule": [[45, 58], ["range", "scheduler.step", "lrs.append", "scheduler.get_lr", "tokenization_tests_commons.TemporaryDirectory", "os.path.join", "torch.save", "torch.load", "scheduler.load_state_dict", "scheduler.state_dict"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.step"], ["", "def", "unwrap_and_save_reload_schedule", "(", "scheduler", ",", "num_steps", "=", "10", ")", ":", "\n", "    ", "lrs", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "num_steps", ")", ":", "\n", "        ", "scheduler", ".", "step", "(", ")", "\n", "lrs", ".", "append", "(", "scheduler", ".", "get_lr", "(", ")", ")", "\n", "if", "step", "==", "num_steps", "//", "2", ":", "\n", "            ", "with", "TemporaryDirectory", "(", ")", "as", "tmpdirname", ":", "\n", "                ", "file_name", "=", "os", ".", "path", ".", "join", "(", "tmpdirname", ",", "'schedule.bin'", ")", "\n", "torch", ".", "save", "(", "scheduler", ".", "state_dict", "(", ")", ",", "file_name", ")", "\n", "\n", "state_dict", "=", "torch", ".", "load", "(", "file_name", ")", "\n", "scheduler", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "", "", "return", "lrs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_roberta_test.RobertaTokenizationTest.setUp": [[30, 48], ["super().setUp", "dict", "os.path.join", "os.path.join", "zip", "io.open", "fp.write", "io.open", "fp.write", "range", "len", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "RobertaTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# Adapted from Sennrich et al. 2015 and https://github.com/rsennrich/subword-nmt", "\n", "vocab", "=", "[", "\"l\"", ",", "\"o\"", ",", "\"w\"", ",", "\"e\"", ",", "\"r\"", ",", "\"s\"", ",", "\"t\"", ",", "\"i\"", ",", "\"d\"", ",", "\"n\"", ",", "\n", "\"\\u0120\"", ",", "\"\\u0120l\"", ",", "\"\\u0120n\"", ",", "\n", "\"\\u0120lo\"", ",", "\"\\u0120low\"", ",", "\"er\"", ",", "\n", "\"\\u0120lowest\"", ",", "\"\\u0120newer\"", ",", "\"\\u0120wider\"", ",", "\"<unk>\"", "]", "\n", "vocab_tokens", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "merges", "=", "[", "\"#version: 0.2\"", ",", "\"\\u0120 l\"", ",", "\"\\u0120l o\"", ",", "\"\\u0120lo w\"", ",", "\"e r\"", ",", "\"\"", "]", "\n", "self", ".", "special_tokens_map", "=", "{", "\"unk_token\"", ":", "\"<unk>\"", "}", "\n", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "self", ".", "merges_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "json", ".", "dumps", "(", "vocab_tokens", ")", "+", "\"\\n\"", ")", "\n", "", "with", "open", "(", "self", ".", "merges_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"\\n\"", ".", "join", "(", "merges", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_roberta_test.RobertaTokenizationTest.get_tokenizer": [[49, 52], ["kwargs.update", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "update", "(", "self", ".", "special_tokens_map", ")", "\n", "return", "RobertaTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_roberta_test.RobertaTokenizationTest.get_input_output_texts": [[53, 57], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"lower newer\"", "\n", "output_text", "=", "u\"lower newer\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_roberta_test.RobertaTokenizationTest.test_full_tokenizer": [[58, 69], ["transformers.tokenization_roberta.RobertaTokenizer", "transformers.tokenization_roberta.RobertaTokenizer.tokenize", "tokenization_roberta_test.RobertaTokenizationTest.assertListEqual", "tokenization_roberta_test.RobertaTokenizationTest.assertListEqual", "transformers.tokenization_roberta.RobertaTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "RobertaTokenizer", "(", "self", ".", "vocab_file", ",", "self", ".", "merges_file", ",", "**", "self", ".", "special_tokens_map", ")", "\n", "text", "=", "\"lower newer\"", "\n", "bpe_tokens", "=", "[", "\"\\u0120low\"", ",", "\"er\"", ",", "\"\\u0120\"", ",", "\"n\"", ",", "\"e\"", ",", "\"w\"", ",", "\"er\"", "]", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "text", ",", "add_prefix_space", "=", "True", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "bpe_tokens", ")", "\n", "\n", "input_tokens", "=", "tokens", "+", "[", "tokenizer", ".", "unk_token", "]", "\n", "input_bpe_tokens", "=", "[", "14", ",", "15", ",", "10", ",", "9", ",", "3", ",", "2", ",", "15", ",", "19", "]", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_tokens", ")", ",", "input_bpe_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_roberta_test.RobertaTokenizationTest.roberta_dict_integration_testing": [[70, 80], ["tokenization_roberta_test.RobertaTokenizationTest.get_tokenizer", "tokenization_roberta_test.RobertaTokenizationTest.assertListEqual", "tokenization_roberta_test.RobertaTokenizationTest.assertListEqual", "tokenization_roberta_test.RobertaTokenizationTest.encode", "tokenization_roberta_test.RobertaTokenizationTest.encode"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_test.BertTokenizationTest.get_tokenizer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode"], ["", "def", "roberta_dict_integration_testing", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "self", ".", "get_tokenizer", "(", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "encode", "(", "'Hello world!'", ",", "add_special_tokens", "=", "False", ")", ",", "\n", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "2", "]", "\n", ")", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "encode", "(", "'Hello world! c\u00e9c\u00e9 herlolip 418'", ",", "add_special_tokens", "=", "False", ")", ",", "\n", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_roberta_test.RobertaTokenizationTest.test_sequence_builders": [[82, 97], ["transformers.tokenization_roberta.RobertaTokenizer.from_pretrained", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained.encode", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained.encode", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained.encode", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained.encode", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained.build_inputs_with_special_tokens", "transformers.tokenization_roberta.RobertaTokenizer.from_pretrained.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "@", "slow", "\n", "def", "test_sequence_builders", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "RobertaTokenizer", ".", "from_pretrained", "(", "\"roberta-base\"", ")", "\n", "\n", "text", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "add_special_tokens", "=", "False", ")", "\n", "text_2", "=", "tokenizer", ".", "encode", "(", "\"multi-sequence build\"", ",", "add_special_tokens", "=", "False", ")", "\n", "\n", "encoded_text_from_decode", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "add_special_tokens", "=", "True", ")", "\n", "encoded_pair_from_decode", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "\"multi-sequence build\"", ",", "add_special_tokens", "=", "True", ")", "\n", "\n", "encoded_sentence", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ")", "\n", "encoded_pair", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ",", "text_2", ")", "\n", "\n", "assert", "encoded_sentence", "==", "encoded_text_from_decode", "\n", "assert", "encoded_pair", "==", "encoded_pair_from_decode", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_auto_test.AutoModelTest.test_model_from_pretrained": [[41, 55], ["logging.basicConfig", "list", "AutoConfig.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "AutoModel.from_pretrained", "AutoModel.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "loading_info.values", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys", "modeling_auto_test.AutoModelTest.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["    ", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "AutoModel", ".", "from_pretrained", "(", "model_name", ")", "\n", "model", ",", "loading_info", "=", "AutoModel", ".", "from_pretrained", "(", "model_name", ",", "output_loading_info", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "BertModel", ")", "\n", "for", "value", "in", "loading_info", ".", "values", "(", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "len", "(", "value", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_auto_test.AutoModelTest.test_lmhead_model_from_pretrained": [[56, 68], ["logging.basicConfig", "list", "AutoConfig.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "AutoModelWithLMHead.from_pretrained", "AutoModelWithLMHead.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "", "@", "slow", "\n", "def", "test_lmhead_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "AutoModelWithLMHead", ".", "from_pretrained", "(", "model_name", ")", "\n", "model", ",", "loading_info", "=", "AutoModelWithLMHead", ".", "from_pretrained", "(", "model_name", ",", "output_loading_info", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "BertForMaskedLM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_auto_test.AutoModelTest.test_sequence_classification_model_from_pretrained": [[69, 81], ["logging.basicConfig", "list", "AutoConfig.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "AutoModelForSequenceClassification.from_pretrained", "AutoModelForSequenceClassification.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "@", "slow", "\n", "def", "test_sequence_classification_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "AutoModelForSequenceClassification", ".", "from_pretrained", "(", "model_name", ")", "\n", "model", ",", "loading_info", "=", "AutoModelForSequenceClassification", ".", "from_pretrained", "(", "model_name", ",", "output_loading_info", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "BertForSequenceClassification", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_auto_test.AutoModelTest.test_question_answering_model_from_pretrained": [[82, 94], ["logging.basicConfig", "list", "AutoConfig.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "AutoModelForQuestionAnswering.from_pretrained", "AutoModelForQuestionAnswering.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsNotNone", "modeling_auto_test.AutoModelTest.assertIsInstance", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "@", "slow", "\n", "def", "test_question_answering_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "config", "=", "AutoConfig", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "config", ")", "\n", "self", ".", "assertIsInstance", "(", "config", ",", "BertConfig", ")", "\n", "\n", "model", "=", "AutoModelForQuestionAnswering", ".", "from_pretrained", "(", "model_name", ")", "\n", "model", ",", "loading_info", "=", "AutoModelForQuestionAnswering", ".", "from_pretrained", "(", "model_name", ",", "output_loading_info", "=", "True", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "BertForQuestionAnswering", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_auto_test.AutoModelTest.test_from_pretrained_identifier": [[95, 99], ["logging.basicConfig", "AutoModelWithLMHead.from_pretrained", "modeling_auto_test.AutoModelTest.assertIsInstance"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "def", "test_from_pretrained_identifier", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "model", "=", "AutoModelWithLMHead", ".", "from_pretrained", "(", "SMALL_MODEL_IDENTIFIER", ")", "\n", "self", ".", "assertIsInstance", "(", "model", ",", "BertForMaskedLM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_roberta_test.TFRobertaModelTest.setUp": [[178, 181], ["TFRobertaModelTest.TFRobertaModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFRobertaModelTest", ".", "TFRobertaModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "RobertaConfig", ",", "hidden_size", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_roberta_test.TFRobertaModelTest.test_config": [[182, 184], ["modeling_tf_roberta_test.TFRobertaModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_roberta_test.TFRobertaModelTest.test_roberta_model": [[185, 188], ["modeling_tf_roberta_test.TFRobertaModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_roberta_test.TFRobertaModelTest.model_tester.create_and_check_roberta_model"], "methods", ["None"], ["", "def", "test_roberta_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_roberta_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_roberta_test.TFRobertaModelTest.test_for_masked_lm": [[189, 192], ["modeling_tf_roberta_test.TFRobertaModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_roberta_test.TFRobertaModelTest.model_tester.create_and_check_roberta_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_roberta_for_masked_lm", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_roberta_test.TFRobertaModelTest.test_model_from_pretrained": [[193, 200], ["list", "TFRobertaModel.from_pretrained", "shutil.rmtree", "modeling_tf_roberta_test.TFRobertaModelTest.assertIsNotNone", "TF_ROBERTA_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_ROBERTA_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TFRobertaModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_roberta_test.TFRobertaModelIntegrationTest.test_inference_masked_lm": [[205, 224], ["TFRobertaForMaskedLM.from_pretrained", "tf.constant", "modeling_tf_roberta_test.TFRobertaModelIntegrationTest.assertEqual", "tf.constant", "modeling_tf_roberta_test.TFRobertaModelIntegrationTest.assertTrue", "TFRobertaForMaskedLM.from_pretrained.", "list", "numpy.allclose", "output[].numpy", "tf.constant.numpy", "output.numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["    ", "@", "slow", "\n", "def", "test_inference_masked_lm", "(", "self", ")", ":", "\n", "        ", "model", "=", "TFRobertaForMaskedLM", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "\n", "input_ids", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "]", ")", "\n", "output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "expected_shape", "=", "[", "1", ",", "11", ",", "50265", "]", "\n", "self", ".", "assertEqual", "(", "\n", "list", "(", "output", ".", "numpy", "(", ")", ".", "shape", ")", ",", "\n", "expected_shape", "\n", ")", "\n", "# compare the actual values for a slice.", "\n", "expected_slice", "=", "tf", ".", "constant", "(", "\n", "[", "[", "[", "33.8843", ",", "-", "4.3107", ",", "22.7779", "]", ",", "\n", "[", "4.6533", ",", "-", "2.8099", ",", "13.6252", "]", ",", "\n", "[", "1.8222", ",", "-", "3.6898", ",", "8.8600", "]", "]", "]", "\n", ")", "\n", "self", ".", "assertTrue", "(", "\n", "numpy", ".", "allclose", "(", "output", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "numpy", "(", ")", ",", "expected_slice", ".", "numpy", "(", ")", ",", "atol", "=", "1e-3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_roberta_test.TFRobertaModelIntegrationTest.test_inference_no_head": [[226, 240], ["TFRobertaModel.from_pretrained", "tf.constant", "tf.constant", "modeling_tf_roberta_test.TFRobertaModelIntegrationTest.assertTrue", "TFRobertaModel.from_pretrained.", "numpy.allclose", "output[].numpy", "tf.constant.numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_inference_no_head", "(", "self", ")", ":", "\n", "        ", "model", "=", "TFRobertaModel", ".", "from_pretrained", "(", "'roberta-base'", ")", "\n", "\n", "input_ids", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "]", ")", "\n", "output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "# compare the actual values for a slice.", "\n", "expected_slice", "=", "tf", ".", "constant", "(", "\n", "[", "[", "[", "-", "0.0231", ",", "0.0782", ",", "0.0074", "]", ",", "\n", "[", "-", "0.1854", ",", "0.0539", ",", "-", "0.0174", "]", ",", "\n", "[", "0.0548", ",", "0.0799", ",", "0.1687", "]", "]", "]", "\n", ")", "\n", "self", ".", "assertTrue", "(", "\n", "numpy", ".", "allclose", "(", "output", "[", ":", ",", ":", "3", ",", ":", "3", "]", ".", "numpy", "(", ")", ",", "expected_slice", ".", "numpy", "(", ")", ",", "atol", "=", "1e-3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_roberta_test.TFRobertaModelIntegrationTest.test_inference_classification_head": [[242, 256], ["TFRobertaForSequenceClassification.from_pretrained", "tf.constant", "modeling_tf_roberta_test.TFRobertaModelIntegrationTest.assertEqual", "tf.constant", "modeling_tf_roberta_test.TFRobertaModelIntegrationTest.assertTrue", "TFRobertaForSequenceClassification.from_pretrained.", "list", "numpy.allclose", "output.numpy", "tf.constant.numpy", "output.numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_inference_classification_head", "(", "self", ")", ":", "\n", "        ", "model", "=", "TFRobertaForSequenceClassification", ".", "from_pretrained", "(", "'roberta-large-mnli'", ")", "\n", "\n", "input_ids", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "31414", ",", "232", ",", "328", ",", "740", ",", "1140", ",", "12695", ",", "69", ",", "46078", ",", "1588", ",", "2", "]", "]", ")", "\n", "output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "expected_shape", "=", "[", "1", ",", "3", "]", "\n", "self", ".", "assertEqual", "(", "\n", "list", "(", "output", ".", "numpy", "(", ")", ".", "shape", ")", ",", "\n", "expected_shape", "\n", ")", "\n", "expected_tensor", "=", "tf", ".", "constant", "(", "[", "[", "-", "0.9469", ",", "0.3913", ",", "0.5118", "]", "]", ")", "\n", "self", ".", "assertTrue", "(", "\n", "numpy", ".", "allclose", "(", "output", ".", "numpy", "(", ")", ",", "expected_tensor", ".", "numpy", "(", ")", ",", "atol", "=", "1e-3", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_transfo_xl_test.TransfoXLTokenizationTest.setUp": [[36, 46], ["super().setUp", "os.path.join", "io.open", "vocab_writer.write"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "TransfoXLTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "vocab_tokens", "=", "[", "\n", "\"<unk>\"", ",", "\"[CLS]\"", ",", "\"[SEP]\"", ",", "\"want\"", ",", "\"unwanted\"", ",", "\"wa\"", ",", "\"un\"", ",", "\n", "\"running\"", ",", "\",\"", ",", "\"low\"", ",", "\"l\"", ",", "\n", "]", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "vocab_writer", ":", "\n", "            ", "vocab_writer", ".", "write", "(", "\"\"", ".", "join", "(", "[", "x", "+", "\"\\n\"", "for", "x", "in", "vocab_tokens", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_transfo_xl_test.TransfoXLTokenizationTest.get_tokenizer": [[47, 50], ["TransfoXLTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", "[", "'lower_case'", "]", "=", "True", "\n", "return", "TransfoXLTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_transfo_xl_test.TransfoXLTokenizationTest.get_input_output_texts": [[51, 55], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"<unk> UNwanted , running\"", "\n", "output_text", "=", "u\"<unk> unwanted, running\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_transfo_xl_test.TransfoXLTokenizationTest.test_full_tokenizer": [[56, 64], ["TransfoXLTokenizer", "TransfoXLTokenizer.tokenize", "tokenization_transfo_xl_test.TransfoXLTokenizationTest.assertListEqual", "tokenization_transfo_xl_test.TransfoXLTokenizationTest.assertListEqual", "TransfoXLTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "TransfoXLTokenizer", "(", "vocab_file", "=", "self", ".", "vocab_file", ",", "lower_case", "=", "True", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"<unk> UNwanted , running\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "\"<unk>\"", ",", "\"unwanted\"", ",", "\",\"", ",", "\"running\"", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", ",", "[", "0", ",", "4", ",", "8", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_transfo_xl_test.TransfoXLTokenizationTest.test_full_tokenizer_lower": [[65, 71], ["TransfoXLTokenizer", "tokenization_transfo_xl_test.TransfoXLTokenizationTest.assertListEqual", "TransfoXLTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "test_full_tokenizer_lower", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "TransfoXLTokenizer", "(", "lower_case", "=", "True", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\" \\tHeLLo ! how  \\n Are yoU ?  \"", ")", ",", "\n", "[", "\"hello\"", ",", "\"!\"", ",", "\"how\"", ",", "\"are\"", ",", "\"you\"", ",", "\"?\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_transfo_xl_test.TransfoXLTokenizationTest.test_full_tokenizer_no_lower": [[72, 78], ["TransfoXLTokenizer", "tokenization_transfo_xl_test.TransfoXLTokenizationTest.assertListEqual", "TransfoXLTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "test_full_tokenizer_no_lower", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "TransfoXLTokenizer", "(", "lower_case", "=", "False", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\" \\tHeLLo ! how  \\n Are yoU ?  \"", ")", ",", "\n", "[", "\"HeLLo\"", ",", "\"!\"", ",", "\"how\"", ",", "\"Are\"", ",", "\"yoU\"", ",", "\"?\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_bert_test.TFBertModelTest.setUp": [[272, 275], ["TFBertModelTest.TFBertModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFBertModelTest", ".", "TFBertModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "BertConfig", ",", "hidden_size", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_bert_test.TFBertModelTest.test_config": [[276, 278], ["modeling_tf_bert_test.TFBertModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_bert_test.TFBertModelTest.test_bert_model": [[279, 282], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_model"], "methods", ["None"], ["", "def", "test_bert_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_bert_test.TFBertModelTest.test_for_masked_lm": [[283, 286], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_masked_lm", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_bert_test.TFBertModelTest.test_for_multiple_choice": [[287, 290], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_multiple_choice"], "methods", ["None"], ["", "def", "test_for_multiple_choice", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_multiple_choice", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_bert_test.TFBertModelTest.test_for_next_sequence_prediction": [[291, 294], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_next_sequence_prediction"], "methods", ["None"], ["", "def", "test_for_next_sequence_prediction", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_next_sequence_prediction", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_bert_test.TFBertModelTest.test_for_pretraining": [[295, 298], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_pretraining"], "methods", ["None"], ["", "def", "test_for_pretraining", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_pretraining", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_bert_test.TFBertModelTest.test_for_question_answering": [[299, 302], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_question_answering"], "methods", ["None"], ["", "def", "test_for_question_answering", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_question_answering", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_bert_test.TFBertModelTest.test_for_sequence_classification": [[303, 306], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_sequence_classification"], "methods", ["None"], ["", "def", "test_for_sequence_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_sequence_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_bert_test.TFBertModelTest.test_for_token_classification": [[307, 310], ["modeling_tf_bert_test.TFBertModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_bert_test.TFBertModelTest.model_tester.create_and_check_bert_for_token_classification"], "methods", ["None"], ["", "def", "test_for_token_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_bert_for_token_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_bert_test.TFBertModelTest.test_model_from_pretrained": [[311, 319], ["TFBertModel.from_pretrained", "shutil.rmtree", "modeling_tf_bert_test.TFBertModelTest.assertIsNotNone"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "# for model_name in list(TF_BERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys())[:1]:", "\n", "for", "model_name", "in", "[", "'bert-base-uncased'", "]", ":", "\n", "            ", "model", "=", "TFBertModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_auto_test.AutoTokenizerTest.test_tokenizer_from_pretrained": [[30, 44], ["logging.basicConfig", "list", "transformers.AutoTokenizer.from_pretrained", "tokenization_auto_test.AutoTokenizerTest.assertIsNotNone", "tokenization_auto_test.AutoTokenizerTest.assertIsInstance", "tokenization_auto_test.AutoTokenizerTest.assertGreater", "list", "transformers.AutoTokenizer.from_pretrained", "tokenization_auto_test.AutoTokenizerTest.assertIsNotNone", "tokenization_auto_test.AutoTokenizerTest.assertIsInstance", "tokenization_auto_test.AutoTokenizerTest.assertGreater", "transformers.BERT_PRETRAINED_CONFIG_ARCHIVE_MAP.keys", "len", "transformers.GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP.keys", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["    ", "@", "slow", "\n", "def", "test_tokenizer_from_pretrained", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "for", "model_name", "in", "list", "(", "BERT_PRETRAINED_CONFIG_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "tokenizer", ")", "\n", "self", ".", "assertIsInstance", "(", "tokenizer", ",", "BertTokenizer", ")", "\n", "self", ".", "assertGreater", "(", "len", "(", "tokenizer", ")", ",", "0", ")", "\n", "\n", "", "for", "model_name", "in", "list", "(", "GPT2_PRETRAINED_CONFIG_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "assertIsNotNone", "(", "tokenizer", ")", "\n", "self", ".", "assertIsInstance", "(", "tokenizer", ",", "GPT2Tokenizer", ")", "\n", "self", ".", "assertGreater", "(", "len", "(", "tokenizer", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_auto_test.AutoTokenizerTest.test_tokenizer_from_pretrained_identifier": [[45, 50], ["logging.basicConfig", "transformers.AutoTokenizer.from_pretrained", "tokenization_auto_test.AutoTokenizerTest.assertIsInstance", "tokenization_auto_test.AutoTokenizerTest.assertEqual", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "def", "test_tokenizer_from_pretrained_identifier", "(", "self", ")", ":", "\n", "        ", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "SMALL_MODEL_IDENTIFIER", ")", "\n", "self", ".", "assertIsInstance", "(", "tokenizer", ",", "BertTokenizer", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "tokenizer", ")", ",", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.utils.parse_flag_from_env": [[12, 26], ["distutils.util.strtobool", "ValueError"], "function", ["None"], ["def", "parse_flag_from_env", "(", "key", ",", "default", "=", "False", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "value", "=", "os", ".", "environ", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "# KEY isn't set, default to `default`.", "\n", "        ", "_value", "=", "default", "\n", "", "else", ":", "\n", "# KEY is set, convert it to True or False.", "\n", "        ", "try", ":", "\n", "            ", "_value", "=", "strtobool", "(", "value", ")", "\n", "", "except", "ValueError", ":", "\n", "# More values are supported, but let's keep the message simple.", "\n", "            ", "raise", "ValueError", "(", "\"If set, {} must be yes or no.\"", ".", "format", "(", "key", ")", ")", "\n", "", "", "return", "_value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.utils.slow": [[31, 42], ["unittest.skip"], "function", ["None"], ["def", "slow", "(", "test_case", ")", ":", "\n", "    ", "\"\"\"\n    Decorator marking a test as slow.\n\n    Slow tests are skipped by default. Set the RUN_SLOW environment variable\n    to a truthy value to run them.\n\n    \"\"\"", "\n", "if", "not", "_run_slow_tests", ":", "\n", "        ", "test_case", "=", "unittest", ".", "skip", "(", "\"test is slow\"", ")", "(", "test_case", ")", "\n", "", "return", "test_case", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.utils.custom_tokenizers": [[44, 55], ["unittest.skip"], "function", ["None"], ["", "def", "custom_tokenizers", "(", "test_case", ")", ":", "\n", "    ", "\"\"\"\n    Decorator marking a test for a custom tokenizer.\n\n    Custom tokenizers require additional dependencies, and are skipped\n    by default. Set the RUN_CUSTOM_TOKENIZERS environment variable\n    to a truthy value to run them.\n    \"\"\"", "\n", "if", "not", "_run_custom_tokenizers", ":", "\n", "        ", "test_case", "=", "unittest", ".", "skip", "(", "\"test of custom tokenizers\"", ")", "(", "test_case", ")", "\n", "", "return", "test_case", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.utils.require_torch": [[57, 67], ["unittest.skip"], "function", ["None"], ["", "def", "require_torch", "(", "test_case", ")", ":", "\n", "    ", "\"\"\"\n    Decorator marking a test that requires PyTorch.\n\n    These tests are skipped when PyTorch isn't installed.\n\n    \"\"\"", "\n", "if", "not", "_torch_available", ":", "\n", "        ", "test_case", "=", "unittest", ".", "skip", "(", "\"test requires PyTorch\"", ")", "(", "test_case", ")", "\n", "", "return", "test_case", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.utils.require_tf": [[69, 79], ["unittest.skip"], "function", ["None"], ["", "def", "require_tf", "(", "test_case", ")", ":", "\n", "    ", "\"\"\"\n    Decorator marking a test that requires TensorFlow.\n\n    These tests are skipped when TensorFlow isn't installed.\n\n    \"\"\"", "\n", "if", "not", "_tf_available", ":", "\n", "        ", "test_case", "=", "unittest", ".", "skip", "(", "\"test requires TensorFlow\"", ")", "(", "test_case", ")", "\n", "", "return", "test_case", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_albert_test.AlbertModelTest.setUp": [[208, 211], ["AlbertModelTest.AlbertModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "AlbertModelTest", ".", "AlbertModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "AlbertConfig", ",", "hidden_size", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_albert_test.AlbertModelTest.test_config": [[212, 214], ["modeling_albert_test.AlbertModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_albert_test.AlbertModelTest.test_albert_model": [[215, 218], ["modeling_albert_test.AlbertModelTest.model_tester.prepare_config_and_inputs", "modeling_albert_test.AlbertModelTest.model_tester.create_and_check_albert_model"], "methods", ["None"], ["", "def", "test_albert_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_albert_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_albert_test.AlbertModelTest.test_for_masked_lm": [[219, 222], ["modeling_albert_test.AlbertModelTest.model_tester.prepare_config_and_inputs", "modeling_albert_test.AlbertModelTest.model_tester.create_and_check_albert_for_masked_lm"], "methods", ["None"], ["", "def", "test_for_masked_lm", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_albert_for_masked_lm", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_albert_test.AlbertModelTest.test_for_question_answering": [[223, 226], ["modeling_albert_test.AlbertModelTest.model_tester.prepare_config_and_inputs", "modeling_albert_test.AlbertModelTest.model_tester.create_and_check_albert_for_question_answering"], "methods", ["None"], ["", "def", "test_for_question_answering", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_albert_for_question_answering", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_albert_test.AlbertModelTest.test_for_sequence_classification": [[227, 230], ["modeling_albert_test.AlbertModelTest.model_tester.prepare_config_and_inputs", "modeling_albert_test.AlbertModelTest.model_tester.create_and_check_albert_for_sequence_classification"], "methods", ["None"], ["", "def", "test_for_sequence_classification", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_albert_for_sequence_classification", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_albert_test.AlbertModelTest.test_model_from_pretrained": [[231, 238], ["list", "AlbertModel.from_pretrained", "shutil.rmtree", "modeling_albert_test.AlbertModelTest.assertIsNotNone", "ALBERT_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "ALBERT_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "AlbertModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_common_test._config_zero_init": [[55, 61], ["copy.deepcopy", "copy.deepcopy.__dict__.keys", "setattr"], "function", ["None"], ["", "def", "_config_zero_init", "(", "config", ")", ":", "\n", "    ", "configs_no_init", "=", "copy", ".", "deepcopy", "(", "config", ")", "\n", "for", "key", "in", "configs_no_init", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "        ", "if", "'_range'", "in", "key", "or", "'_std'", "in", "key", ":", "\n", "            ", "setattr", "(", "configs_no_init", ",", "key", ",", "0.0", ")", "\n", "", "", "return", "configs_no_init", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_common_test.ids_tensor": [[347, 365], ["range", "tf.constant", "random.Random", "values.append", "random.Random.randint"], "function", ["None"], ["", "", "", "", "def", "ids_tensor", "(", "shape", ",", "vocab_size", ",", "rng", "=", "None", ",", "name", "=", "None", ",", "dtype", "=", "None", ")", ":", "\n", "    ", "\"\"\"Creates a random int32 tensor of the shape within the vocab size.\"\"\"", "\n", "if", "rng", "is", "None", ":", "\n", "        ", "rng", "=", "random", ".", "Random", "(", ")", "\n", "\n", "", "total_dims", "=", "1", "\n", "for", "dim", "in", "shape", ":", "\n", "        ", "total_dims", "*=", "dim", "\n", "\n", "", "values", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "total_dims", ")", ":", "\n", "        ", "values", ".", "append", "(", "rng", ".", "randint", "(", "0", ",", "vocab_size", "-", "1", ")", ")", "\n", "\n", "", "output", "=", "tf", ".", "constant", "(", "values", ",", "\n", "shape", "=", "shape", ",", "\n", "dtype", "=", "dtype", "if", "dtype", "is", "not", "None", "else", "tf", ".", "int32", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlm_test.TFXLMModelTest.setUp": [[230, 233], ["TFXLMModelTest.TFXLMModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFXLMModelTest", ".", "TFXLMModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "XLMConfig", ",", "emb_dim", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlm_test.TFXLMModelTest.test_config": [[234, 236], ["modeling_tf_xlm_test.TFXLMModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlm_test.TFXLMModelTest.test_xlm_model": [[237, 240], ["modeling_tf_xlm_test.TFXLMModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlm_test.TFXLMModelTest.model_tester.create_and_check_xlm_model"], "methods", ["None"], ["", "def", "test_xlm_model", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlm_test.TFXLMModelTest.test_xlm_lm_head": [[241, 244], ["modeling_tf_xlm_test.TFXLMModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlm_test.TFXLMModelTest.model_tester.create_and_check_xlm_lm_head"], "methods", ["None"], ["", "def", "test_xlm_lm_head", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlm_test.TFXLMModelTest.test_xlm_qa": [[245, 248], ["modeling_tf_xlm_test.TFXLMModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlm_test.TFXLMModelTest.model_tester.create_and_check_xlm_qa"], "methods", ["None"], ["", "def", "test_xlm_qa", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_qa", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlm_test.TFXLMModelTest.test_xlm_sequence_classif": [[249, 252], ["modeling_tf_xlm_test.TFXLMModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_xlm_test.TFXLMModelTest.model_tester.create_and_check_xlm_sequence_classif"], "methods", ["None"], ["", "def", "test_xlm_sequence_classif", "(", "self", ")", ":", "\n", "        ", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_xlm_sequence_classif", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_xlm_test.TFXLMModelTest.test_model_from_pretrained": [[253, 260], ["list", "XLMModel.from_pretrained", "shutil.rmtree", "modeling_tf_xlm_test.TFXLMModelTest.assertIsNotNone", "TF_XLM_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_XLM_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "XLMModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_xlm_test.XLMTokenizationTest.setUp": [[30, 47], ["super().setUp", "dict", "os.path.join", "os.path.join", "zip", "open", "fp.write", "open", "fp.write", "range", "json.dumps", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "XLMTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "# Adapted from Sennrich et al. 2015 and https://github.com/rsennrich/subword-nmt", "\n", "vocab", "=", "[", "\"l\"", ",", "\"o\"", ",", "\"w\"", ",", "\"e\"", ",", "\"r\"", ",", "\"s\"", ",", "\"t\"", ",", "\"i\"", ",", "\"d\"", ",", "\"n\"", ",", "\n", "\"w</w>\"", ",", "\"r</w>\"", ",", "\"t</w>\"", ",", "\n", "\"lo\"", ",", "\"low\"", ",", "\"er</w>\"", ",", "\n", "\"low</w>\"", ",", "\"lowest</w>\"", ",", "\"newer</w>\"", ",", "\"wider</w>\"", ",", "\"<unk>\"", "]", "\n", "vocab_tokens", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "merges", "=", "[", "\"l o 123\"", ",", "\"lo w 1456\"", ",", "\"e r</w> 1789\"", ",", "\"\"", "]", "\n", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "self", ".", "merges_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "json", ".", "dumps", "(", "vocab_tokens", ")", ")", "\n", "", "with", "open", "(", "self", ".", "merges_file", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"\\n\"", ".", "join", "(", "merges", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_xlm_test.XLMTokenizationTest.get_tokenizer": [[48, 50], ["transformers.tokenization_xlm.XLMTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "XLMTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_xlm_test.XLMTokenizationTest.get_input_output_texts": [[51, 55], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"lower newer\"", "\n", "output_text", "=", "u\"lower newer\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_xlm_test.XLMTokenizationTest.test_full_tokenizer": [[56, 69], ["transformers.tokenization_xlm.XLMTokenizer", "transformers.tokenization_xlm.XLMTokenizer.tokenize", "tokenization_xlm_test.XLMTokenizationTest.assertListEqual", "tokenization_xlm_test.XLMTokenizationTest.assertListEqual", "transformers.tokenization_xlm.XLMTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "\"\"\" Adapted from Sennrich et al. 2015 and https://github.com/rsennrich/subword-nmt \"\"\"", "\n", "tokenizer", "=", "XLMTokenizer", "(", "self", ".", "vocab_file", ",", "self", ".", "merges_file", ")", "\n", "\n", "text", "=", "\"lower\"", "\n", "bpe_tokens", "=", "[", "\"low\"", ",", "\"er</w>\"", "]", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "bpe_tokens", ")", "\n", "\n", "input_tokens", "=", "tokens", "+", "[", "\"<unk>\"", "]", "\n", "input_bpe_tokens", "=", "[", "14", ",", "15", ",", "20", "]", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_tokens", ")", ",", "input_bpe_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_xlm_test.XLMTokenizationTest.test_sequence_builders": [[70, 82], ["transformers.tokenization_xlm.XLMTokenizer.from_pretrained", "transformers.tokenization_xlm.XLMTokenizer.from_pretrained.encode", "transformers.tokenization_xlm.XLMTokenizer.from_pretrained.encode", "transformers.tokenization_xlm.XLMTokenizer.from_pretrained.build_inputs_with_special_tokens", "transformers.tokenization_xlm.XLMTokenizer.from_pretrained.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "@", "slow", "\n", "def", "test_sequence_builders", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "XLMTokenizer", ".", "from_pretrained", "(", "\"xlm-mlm-en-2048\"", ")", "\n", "\n", "text", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "add_special_tokens", "=", "False", ")", "\n", "text_2", "=", "tokenizer", ".", "encode", "(", "\"multi-sequence build\"", ",", "add_special_tokens", "=", "False", ")", "\n", "\n", "encoded_sentence", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ")", "\n", "encoded_pair", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ",", "text_2", ")", "\n", "\n", "assert", "encoded_sentence", "==", "[", "1", "]", "+", "text", "+", "[", "1", "]", "\n", "assert", "encoded_pair", "==", "[", "1", "]", "+", "text", "+", "[", "1", "]", "+", "text_2", "+", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_test.BertTokenizationTest.setUp": [[34, 44], ["super().setUp", "os.path.join", "io.open", "vocab_writer.write"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", "BertTokenizationTest", ",", "self", ")", ".", "setUp", "(", ")", "\n", "\n", "vocab_tokens", "=", "[", "\n", "\"[UNK]\"", ",", "\"[CLS]\"", ",", "\"[SEP]\"", ",", "\"want\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\"wa\"", ",", "\"un\"", ",", "\"runn\"", ",", "\n", "\"##ing\"", ",", "\",\"", ",", "\"low\"", ",", "\"lowest\"", ",", "\n", "]", "\n", "self", ".", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tmpdirname", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "vocab_writer", ":", "\n", "            ", "vocab_writer", ".", "write", "(", "\"\"", ".", "join", "(", "[", "x", "+", "\"\\n\"", "for", "x", "in", "vocab_tokens", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_test.BertTokenizationTest.get_tokenizer": [[45, 47], ["transformers.tokenization_bert.BertTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "", "def", "get_tokenizer", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "BertTokenizer", ".", "from_pretrained", "(", "self", ".", "tmpdirname", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_test.BertTokenizationTest.get_input_output_texts": [[48, 52], ["None"], "methods", ["None"], ["", "def", "get_input_output_texts", "(", "self", ")", ":", "\n", "        ", "input_text", "=", "u\"UNwant\\u00E9d,running\"", "\n", "output_text", "=", "u\"unwanted, running\"", "\n", "return", "input_text", ",", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_test.BertTokenizationTest.test_full_tokenizer": [[53, 59], ["tokenization_bert_test.BertTokenizationTest.tokenizer_class", "tokenization_bert_test.BertTokenizationTest.tokenize", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "tokenization_bert_test.BertTokenizationTest.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "test_full_tokenizer", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "self", ".", "tokenizer_class", "(", "self", ".", "vocab_file", ")", "\n", "\n", "tokens", "=", "tokenizer", ".", "tokenize", "(", "u\"UNwant\\u00E9d,running\"", ")", "\n", "self", ".", "assertListEqual", "(", "tokens", ",", "[", "\"un\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\",\"", ",", "\"runn\"", ",", "\"##ing\"", "]", ")", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", ",", "[", "7", ",", "4", ",", "5", ",", "10", ",", "8", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_test.BertTokenizationTest.test_chinese": [[60, 66], ["transformers.tokenization_bert.BasicTokenizer", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "transformers.tokenization_bert.BasicTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "test_chinese", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "BasicTokenizer", "(", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\"ah\\u535A\\u63A8zz\"", ")", ",", "\n", "[", "u\"ah\"", ",", "u\"\\u535A\"", ",", "u\"\\u63A8\"", ",", "u\"zz\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_test.BertTokenizationTest.test_basic_tokenizer_lower": [[67, 74], ["transformers.tokenization_bert.BasicTokenizer", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "transformers.tokenization_bert.BasicTokenizer.tokenize", "transformers.tokenization_bert.BasicTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "test_basic_tokenizer_lower", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "True", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\" \\tHeLLo!how  \\n Are yoU?  \"", ")", ",", "\n", "[", "\"hello\"", ",", "\"!\"", ",", "\"how\"", ",", "\"are\"", ",", "\"you\"", ",", "\"?\"", "]", ")", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "tokenize", "(", "u\"H\\u00E9llo\"", ")", ",", "[", "\"hello\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_test.BertTokenizationTest.test_basic_tokenizer_no_lower": [[75, 81], ["transformers.tokenization_bert.BasicTokenizer", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "transformers.tokenization_bert.BasicTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "test_basic_tokenizer_no_lower", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "False", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "u\" \\tHeLLo!how  \\n Are yoU?  \"", ")", ",", "\n", "[", "\"HeLLo\"", ",", "\"!\"", ",", "\"how\"", ",", "\"Are\"", ",", "\"yoU\"", ",", "\"?\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_test.BertTokenizationTest.test_wordpiece_tokenizer": [[82, 101], ["enumerate", "transformers.tokenization_bert.WordpieceTokenizer", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "tokenization_bert_test.BertTokenizationTest.assertListEqual", "transformers.tokenization_bert.WordpieceTokenizer.tokenize", "transformers.tokenization_bert.WordpieceTokenizer.tokenize", "transformers.tokenization_bert.WordpieceTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "test_wordpiece_tokenizer", "(", "self", ")", ":", "\n", "        ", "vocab_tokens", "=", "[", "\n", "\"[UNK]\"", ",", "\"[CLS]\"", ",", "\"[SEP]\"", ",", "\"want\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\"wa\"", ",", "\"un\"", ",", "\"runn\"", ",", "\n", "\"##ing\"", "\n", "]", "\n", "\n", "vocab", "=", "{", "}", "\n", "for", "(", "i", ",", "token", ")", "in", "enumerate", "(", "vocab_tokens", ")", ":", "\n", "            ", "vocab", "[", "token", "]", "=", "i", "\n", "", "tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "vocab", ",", "unk_token", "=", "\"[UNK]\"", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "tokenizer", ".", "tokenize", "(", "\"\"", ")", ",", "[", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "\"unwanted running\"", ")", ",", "\n", "[", "\"un\"", ",", "\"##want\"", ",", "\"##ed\"", ",", "\"runn\"", ",", "\"##ing\"", "]", ")", "\n", "\n", "self", ".", "assertListEqual", "(", "\n", "tokenizer", ".", "tokenize", "(", "\"unwantedX running\"", ")", ",", "[", "\"[UNK]\"", ",", "\"runn\"", ",", "\"##ing\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_test.BertTokenizationTest.test_is_whitespace": [[102, 111], ["tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertFalse", "tokenization_bert_test.BertTokenizationTest.assertFalse", "transformers.tokenization_bert._is_whitespace", "transformers.tokenization_bert._is_whitespace", "transformers.tokenization_bert._is_whitespace", "transformers.tokenization_bert._is_whitespace", "transformers.tokenization_bert._is_whitespace", "transformers.tokenization_bert._is_whitespace", "transformers.tokenization_bert._is_whitespace"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._is_whitespace", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._is_whitespace", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._is_whitespace", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._is_whitespace", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._is_whitespace", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._is_whitespace", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._is_whitespace"], ["", "def", "test_is_whitespace", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "_is_whitespace", "(", "u\" \"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_whitespace", "(", "u\"\\t\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_whitespace", "(", "u\"\\r\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_whitespace", "(", "u\"\\n\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_whitespace", "(", "u\"\\u00A0\"", ")", ")", "\n", "\n", "self", ".", "assertFalse", "(", "_is_whitespace", "(", "u\"A\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "_is_whitespace", "(", "u\"-\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_test.BertTokenizationTest.test_is_control": [[112, 119], ["tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertFalse", "tokenization_bert_test.BertTokenizationTest.assertFalse", "tokenization_bert_test.BertTokenizationTest.assertFalse", "tokenization_bert_test.BertTokenizationTest.assertFalse", "transformers.tokenization_bert._is_control", "transformers.tokenization_bert._is_control", "transformers.tokenization_bert._is_control", "transformers.tokenization_bert._is_control", "transformers.tokenization_bert._is_control"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_control", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_control", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_control", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_control", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_control"], ["", "def", "test_is_control", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "_is_control", "(", "u\"\\u0005\"", ")", ")", "\n", "\n", "self", ".", "assertFalse", "(", "_is_control", "(", "u\"A\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "_is_control", "(", "u\" \"", ")", ")", "\n", "self", ".", "assertFalse", "(", "_is_control", "(", "u\"\\t\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "_is_control", "(", "u\"\\r\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_test.BertTokenizationTest.test_is_punctuation": [[120, 128], ["tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertTrue", "tokenization_bert_test.BertTokenizationTest.assertFalse", "tokenization_bert_test.BertTokenizationTest.assertFalse", "transformers.tokenization_bert._is_punctuation", "transformers.tokenization_bert._is_punctuation", "transformers.tokenization_bert._is_punctuation", "transformers.tokenization_bert._is_punctuation", "transformers.tokenization_bert._is_punctuation", "transformers.tokenization_bert._is_punctuation"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_punctuation", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_punctuation", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_punctuation", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_punctuation", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_punctuation", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert._is_punctuation"], ["", "def", "test_is_punctuation", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "_is_punctuation", "(", "u\"-\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_punctuation", "(", "u\"$\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_punctuation", "(", "u\"`\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "_is_punctuation", "(", "u\".\"", ")", ")", "\n", "\n", "self", ".", "assertFalse", "(", "_is_punctuation", "(", "u\"A\"", ")", ")", "\n", "self", ".", "assertFalse", "(", "_is_punctuation", "(", "u\" \"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.tokenization_bert_test.BertTokenizationTest.test_sequence_builders": [[129, 141], ["tokenization_bert_test.BertTokenizationTest.tokenizer_class.from_pretrained", "tokenization_bert_test.BertTokenizationTest.encode", "tokenization_bert_test.BertTokenizationTest.encode", "tokenization_bert_test.BertTokenizationTest.build_inputs_with_special_tokens", "tokenization_bert_test.BertTokenizationTest.build_inputs_with_special_tokens"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_roberta.RobertaTokenizer.build_inputs_with_special_tokens"], ["", "@", "slow", "\n", "def", "test_sequence_builders", "(", "self", ")", ":", "\n", "        ", "tokenizer", "=", "self", ".", "tokenizer_class", ".", "from_pretrained", "(", "\"bert-base-uncased\"", ")", "\n", "\n", "text", "=", "tokenizer", ".", "encode", "(", "\"sequence builders\"", ",", "add_special_tokens", "=", "False", ")", "\n", "text_2", "=", "tokenizer", ".", "encode", "(", "\"multi-sequence build\"", ",", "add_special_tokens", "=", "False", ")", "\n", "\n", "encoded_sentence", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ")", "\n", "encoded_pair", "=", "tokenizer", ".", "build_inputs_with_special_tokens", "(", "text", ",", "text_2", ")", "\n", "\n", "assert", "encoded_sentence", "==", "[", "101", "]", "+", "text", "+", "[", "102", "]", "\n", "assert", "encoded_pair", "==", "[", "101", "]", "+", "text", "+", "[", "102", "]", "+", "text_2", "+", "[", "102", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.setUp": [[189, 192], ["TFTransfoXLModelTest.TFTransfoXLModelTester", "configuration_common_test.ConfigTester"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", "=", "TFTransfoXLModelTest", ".", "TFTransfoXLModelTester", "(", "self", ")", "\n", "self", ".", "config_tester", "=", "ConfigTester", "(", "self", ",", "config_class", "=", "TransfoXLConfig", ",", "d_embed", "=", "37", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.test_config": [[193, 195], ["modeling_tf_transfo_xl_test.TFTransfoXLModelTest.config_tester.run_common_tests"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.configuration_common_test.ConfigTester.run_common_tests"], ["", "def", "test_config", "(", "self", ")", ":", "\n", "        ", "self", ".", "config_tester", ".", "run_common_tests", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.test_transfo_xl_model": [[196, 200], ["modeling_tf_transfo_xl_test.TFTransfoXLModelTest.model_tester.set_seed", "modeling_tf_transfo_xl_test.TFTransfoXLModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_transfo_xl_test.TFTransfoXLModelTest.model_tester.create_and_check_transfo_xl_model"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_transfo_xl_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_transfo_xl_model", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.test_transfo_xl_lm_head": [[201, 205], ["modeling_tf_transfo_xl_test.TFTransfoXLModelTest.model_tester.set_seed", "modeling_tf_transfo_xl_test.TFTransfoXLModelTest.model_tester.prepare_config_and_inputs", "modeling_tf_transfo_xl_test.TFTransfoXLModelTest.model_tester.create_and_check_transfo_xl_lm_head"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "def", "test_transfo_xl_lm_head", "(", "self", ")", ":", "\n", "        ", "self", ".", "model_tester", ".", "set_seed", "(", ")", "\n", "config_and_inputs", "=", "self", ".", "model_tester", ".", "prepare_config_and_inputs", "(", ")", "\n", "self", ".", "model_tester", ".", "create_and_check_transfo_xl_lm_head", "(", "*", "config_and_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.modeling_tf_transfo_xl_test.TFTransfoXLModelTest.test_model_from_pretrained": [[206, 213], ["list", "TFTransfoXLModel.from_pretrained", "shutil.rmtree", "modeling_tf_transfo_xl_test.TFTransfoXLModelTest.assertIsNotNone", "TF_TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained"], ["", "@", "slow", "\n", "def", "test_model_from_pretrained", "(", "self", ")", ":", "\n", "        ", "cache_dir", "=", "\"/tmp/transformers_test/\"", "\n", "for", "model_name", "in", "list", "(", "TF_TRANSFO_XL_PRETRAINED_MODEL_ARCHIVE_MAP", ".", "keys", "(", ")", ")", "[", ":", "1", "]", ":", "\n", "            ", "model", "=", "TFTransfoXLModel", ".", "from_pretrained", "(", "model_name", ",", "cache_dir", "=", "cache_dir", ")", "\n", "shutil", ".", "rmtree", "(", "cache_dir", ")", "\n", "self", ".", "assertIsNotNone", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_tf_test.OptimizationFTest.assertListAlmostEqual": [[20, 24], ["optimization_tf_test.OptimizationFTest.assertEqual", "zip", "len", "len", "optimization_tf_test.OptimizationFTest.assertAlmostEqual"], "methods", ["None"], ["    ", "def", "assertListAlmostEqual", "(", "self", ",", "list1", ",", "list2", ",", "tol", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "len", "(", "list1", ")", ",", "len", "(", "list2", ")", ")", "\n", "for", "a", ",", "b", "in", "zip", "(", "list1", ",", "list2", ")", ":", "\n", "            ", "self", ".", "assertAlmostEqual", "(", "a", ",", "b", ",", "delta", "=", "tol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_tf_test.OptimizationFTest.testGradientAccumulator": [[25, 38], ["GradientAccumulator", "GradientAccumulator.", "GradientAccumulator.", "GradientAccumulator.", "optimization_tf_test.OptimizationFTest.assertEqual", "optimization_tf_test.OptimizationFTest.assertEqual", "optimization_tf_test.OptimizationFTest.assertListAlmostEqual", "GradientAccumulator.reset", "optimization_tf_test.OptimizationFTest.assertEqual", "optimization_tf_test.OptimizationFTest.assertListAlmostEqual", "optimization_tf_test.OptimizationFTest.assertRaises", "GradientAccumulator.", "len", "GradientAccumulator.gradients[].numpy().tolist", "GradientAccumulator.gradients[].numpy().tolist", "tf.constant", "tf.constant", "tf.constant", "tf.constant", "tf.constant", "GradientAccumulator.gradients[].numpy", "GradientAccumulator.gradients[].numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_tf_test.OptimizationFTest.assertListAlmostEqual", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.reset", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_tf_test.OptimizationFTest.assertListAlmostEqual"], ["", "", "def", "testGradientAccumulator", "(", "self", ")", ":", "\n", "        ", "accumulator", "=", "GradientAccumulator", "(", ")", "\n", "accumulator", "(", "[", "tf", ".", "constant", "(", "[", "1.0", ",", "2.0", "]", ")", "]", ")", "\n", "accumulator", "(", "[", "tf", ".", "constant", "(", "[", "-", "2.0", ",", "1.0", "]", ")", "]", ")", "\n", "accumulator", "(", "[", "tf", ".", "constant", "(", "[", "-", "1.0", ",", "2.0", "]", ")", "]", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "            ", "accumulator", "(", "[", "tf", ".", "constant", "(", "[", "1.0", ",", "1.0", "]", ")", ",", "tf", ".", "constant", "(", "[", "2.0", ",", "2.0", "]", ")", "]", ")", "\n", "", "self", ".", "assertEqual", "(", "accumulator", ".", "step", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "accumulator", ".", "gradients", ")", ",", "1", ")", "\n", "self", ".", "assertListAlmostEqual", "(", "accumulator", ".", "gradients", "[", "0", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "[", "-", "2.0", ",", "5.0", "]", ",", "tol", "=", "1e-2", ")", "\n", "accumulator", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "accumulator", ".", "step", ",", "0", ")", "\n", "self", ".", "assertListAlmostEqual", "(", "accumulator", ".", "gradients", "[", "0", "]", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "[", "0.0", ",", "0.0", "]", ",", "tol", "=", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.tests.optimization_tf_test.OptimizationFTest.testGradientAccumulatorDistributionStrategy": [[39, 87], ["ops.enable_eager_execution_internal", "tf.config.experimental.list_physical_devices", "tf.config.experimental.set_virtual_device_configuration", "tf.config.experimental.list_logical_devices", "tf.distribute.MirroredStrategy", "optimization_tf_test.OptimizationFTest.testGradientAccumulatorDistributionStrategy.accumulate"], "methods", ["None"], ["", "def", "testGradientAccumulatorDistributionStrategy", "(", "self", ")", ":", "\n", "        ", "context", ".", "_context", "=", "None", "\n", "ops", ".", "enable_eager_execution_internal", "(", ")", "\n", "physical_devices", "=", "tf", ".", "config", ".", "experimental", ".", "list_physical_devices", "(", "\"CPU\"", ")", "\n", "tf", ".", "config", ".", "experimental", ".", "set_virtual_device_configuration", "(", "\n", "physical_devices", "[", "0", "]", ",", "\n", "[", "tf", ".", "config", ".", "experimental", ".", "VirtualDeviceConfiguration", "(", ")", ",", "\n", "tf", ".", "config", ".", "experimental", ".", "VirtualDeviceConfiguration", "(", ")", "]", ")", "\n", "\n", "devices", "=", "tf", ".", "config", ".", "experimental", ".", "list_logical_devices", "(", "device_type", "=", "\"CPU\"", ")", "\n", "strategy", "=", "tf", ".", "distribute", ".", "MirroredStrategy", "(", "devices", "=", "[", "device", ".", "name", "for", "device", "in", "devices", "]", ")", "\n", "\n", "with", "strategy", ".", "scope", "(", ")", ":", "\n", "            ", "accumulator", "=", "GradientAccumulator", "(", ")", "\n", "variable", "=", "tf", ".", "Variable", "(", "[", "4.0", ",", "3.0", "]", ")", "\n", "optimizer", "=", "create_optimizer", "(", "5e-5", ",", "10", ",", "5", ")", "\n", "gradient_placeholder", "=", "tf", ".", "Variable", "(", "[", "0.0", ",", "0.0", "]", ",", "trainable", "=", "False", ")", "\n", "\n", "", "def", "accumulate_on_replica", "(", "gradient", ")", ":", "\n", "            ", "accumulator", "(", "[", "gradient", "]", ")", "\n", "\n", "", "def", "apply_on_replica", "(", ")", ":", "\n", "            ", "optimizer", ".", "apply_gradients", "(", "list", "(", "zip", "(", "accumulator", ".", "gradients", ",", "[", "variable", "]", ")", ")", ",", "1.0", ")", "\n", "\n", "", "@", "tf", ".", "function", "\n", "def", "accumulate", "(", "grad1", ",", "grad2", ")", ":", "\n", "            ", "with", "strategy", ".", "scope", "(", ")", ":", "\n", "                ", "gradient_placeholder", ".", "values", "[", "0", "]", ".", "assign", "(", "grad1", ")", "\n", "gradient_placeholder", ".", "values", "[", "1", "]", ".", "assign", "(", "grad2", ")", "\n", "strategy", ".", "experimental_run_v2", "(", "accumulate_on_replica", ",", "args", "=", "(", "gradient_placeholder", ",", ")", ")", "\n", "\n", "", "", "@", "tf", ".", "function", "\n", "def", "apply_grad", "(", ")", ":", "\n", "            ", "with", "strategy", ".", "scope", "(", ")", ":", "\n", "                ", "strategy", ".", "experimental_run_v2", "(", "apply_on_replica", ")", "\n", "\n", "", "", "accumulate", "(", "[", "1.0", ",", "2.0", "]", ",", "[", "-", "1.0", ",", "1.0", "]", ")", "\n", "accumulate", "(", "[", "3.0", ",", "-", "1.0", "]", ",", "[", "-", "1.0", ",", "-", "1.0", "]", ")", "\n", "accumulate", "(", "[", "-", "2.0", ",", "2.0", "]", ",", "[", "3.0", ",", "-", "2.0", "]", ")", "\n", "self", ".", "assertEqual", "(", "accumulator", ".", "step", ",", "3", ")", "\n", "self", ".", "assertListAlmostEqual", "(", "accumulator", ".", "_gradients", "[", "0", "]", ".", "values", "[", "0", "]", ".", "value", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "[", "2.0", ",", "3.0", "]", ",", "tol", "=", "1e-2", ")", "\n", "self", ".", "assertListAlmostEqual", "(", "accumulator", ".", "_gradients", "[", "0", "]", ".", "values", "[", "1", "]", ".", "value", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "[", "1.0", ",", "-", "2.0", "]", ",", "tol", "=", "1e-2", ")", "\n", "apply_grad", "(", ")", "\n", "self", ".", "assertListAlmostEqual", "(", "variable", ".", "value", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "[", "4.0", ",", "3.0", "]", ",", "tol", "=", "1e-2", ")", "\n", "accumulator", ".", "reset", "(", ")", "\n", "self", ".", "assertEqual", "(", "accumulator", ".", "step", ",", "0", ")", "\n", "self", ".", "assertListAlmostEqual", "(", "accumulator", ".", "_gradients", "[", "0", "]", ".", "values", "[", "0", "]", ".", "value", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "[", "0.0", ",", "0.0", "]", ",", "tol", "=", "1e-2", ")", "\n", "self", ".", "assertListAlmostEqual", "(", "accumulator", ".", "_gradients", "[", "0", "]", ".", "values", "[", "1", "]", ".", "value", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ",", "[", "0.0", ",", "0.0", "]", ",", "tol", "=", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.xnli.XnliProcessor.__init__": [[31, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "language", ",", "train_language", "=", "None", ")", ":", "\n", "        ", "self", ".", "language", "=", "language", "\n", "self", ".", "train_language", "=", "train_language", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.xnli.XnliProcessor.get_train_examples": [[35, 51], ["xnli.XnliProcessor._read_tsv", "enumerate", "os.path.join", "examples.append", "isinstance", "isinstance", "isinstance", "utils.InputExample"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "lg", "=", "self", ".", "language", "if", "self", ".", "train_language", "is", "None", "else", "self", ".", "train_language", "\n", "lines", "=", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"XNLI-MT-1.0/multinli/multinli.train.{}.tsv\"", ".", "format", "(", "lg", ")", ")", ")", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "'train'", ",", "i", ")", "\n", "text_a", "=", "line", "[", "0", "]", "\n", "text_b", "=", "line", "[", "1", "]", "\n", "label", "=", "\"contradiction\"", "if", "line", "[", "2", "]", "==", "\"contradictory\"", "else", "line", "[", "2", "]", "\n", "assert", "isinstance", "(", "text_a", ",", "str", ")", "and", "isinstance", "(", "text_b", ",", "str", ")", "and", "isinstance", "(", "label", ",", "str", ")", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.xnli.XnliProcessor.get_test_examples": [[52, 70], ["xnli.XnliProcessor._read_tsv", "enumerate", "os.path.join", "examples.append", "isinstance", "isinstance", "isinstance", "utils.InputExample"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_test_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "lines", "=", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"XNLI-1.0/xnli.test.tsv\"", ")", ")", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "language", "=", "line", "[", "0", "]", "\n", "if", "language", "!=", "self", ".", "language", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "'test'", ",", "i", ")", "\n", "text_a", "=", "line", "[", "6", "]", "\n", "text_b", "=", "line", "[", "7", "]", "\n", "label", "=", "line", "[", "1", "]", "\n", "assert", "isinstance", "(", "text_a", ",", "str", ")", "and", "isinstance", "(", "text_b", ",", "str", ")", "and", "isinstance", "(", "label", ",", "str", ")", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.xnli.XnliProcessor.get_labels": [[71, 74], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"contradiction\"", ",", "\"entailment\"", ",", "\"neutral\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.MrpcProcessor.get_example_from_tensor_dict": [[157, 163], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'sentence1'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'sentence2'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.MrpcProcessor.get_train_examples": [[164, 169], ["logger.info", "glue.MrpcProcessor._create_examples", "glue.MrpcProcessor._read_tsv", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "logger", ".", "info", "(", "\"LOOKING AT {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ")", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.MrpcProcessor.get_dev_examples": [[170, 174], ["glue.MrpcProcessor._create_examples", "glue.MrpcProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.MrpcProcessor.get_labels": [[175, 178], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.MrpcProcessor._create_examples": [[179, 192], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "line", "[", "3", "]", "\n", "text_b", "=", "line", "[", "4", "]", "\n", "label", "=", "line", "[", "0", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.MnliProcessor.get_example_from_tensor_dict": [[197, 203], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'premise'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'hypothesis'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.MnliProcessor.get_train_examples": [[204, 208], ["glue.MnliProcessor._create_examples", "glue.MnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.MnliProcessor.get_dev_examples": [[209, 214], ["glue.MnliProcessor._create_examples", "glue.MnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev_matched.tsv\"", ")", ")", ",", "\n", "\"dev_matched\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.MnliProcessor.get_labels": [[215, 218], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"contradiction\"", ",", "\"entailment\"", ",", "\"neutral\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.MnliProcessor._create_examples": [[219, 232], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "0", "]", ")", "\n", "text_a", "=", "line", "[", "8", "]", "\n", "text_b", "=", "line", "[", "9", "]", "\n", "label", "=", "line", "[", "-", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.MnliMismatchedProcessor.get_dev_examples": [[237, 242], ["glue.MnliMismatchedProcessor._create_examples", "glue.MnliMismatchedProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev_mismatched.tsv\"", ")", ")", ",", "\n", "\"dev_matched\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.ColaProcessor.get_example_from_tensor_dict": [[247, 253], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'sentence'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "None", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.ColaProcessor.get_train_examples": [[254, 258], ["glue.ColaProcessor._create_examples", "glue.ColaProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.ColaProcessor.get_dev_examples": [[259, 263], ["glue.ColaProcessor._create_examples", "glue.ColaProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.ColaProcessor.get_labels": [[264, 267], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.ColaProcessor._create_examples": [[268, 278], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "line", "[", "3", "]", "\n", "label", "=", "line", "[", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.Sst2Processor.get_example_from_tensor_dict": [[283, 289], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'sentence'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "None", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.Sst2Processor.get_train_examples": [[290, 294], ["glue.Sst2Processor._create_examples", "glue.Sst2Processor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.Sst2Processor.get_dev_examples": [[295, 299], ["glue.Sst2Processor._create_examples", "glue.Sst2Processor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.Sst2Processor.get_labels": [[300, 303], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.Sst2Processor._create_examples": [[304, 316], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "line", "[", "0", "]", "\n", "label", "=", "line", "[", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.StsbProcessor.get_example_from_tensor_dict": [[321, 327], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'sentence1'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'sentence2'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.StsbProcessor.get_train_examples": [[328, 332], ["glue.StsbProcessor._create_examples", "glue.StsbProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.StsbProcessor.get_dev_examples": [[333, 337], ["glue.StsbProcessor._create_examples", "glue.StsbProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.StsbProcessor.get_labels": [[338, 341], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.StsbProcessor._create_examples": [[342, 355], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "0", "]", ")", "\n", "text_a", "=", "line", "[", "7", "]", "\n", "text_b", "=", "line", "[", "8", "]", "\n", "label", "=", "line", "[", "-", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.QqpProcessor.get_example_from_tensor_dict": [[360, 366], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'question1'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'question2'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.QqpProcessor.get_train_examples": [[367, 371], ["glue.QqpProcessor._create_examples", "glue.QqpProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.QqpProcessor.get_dev_examples": [[372, 376], ["glue.QqpProcessor._create_examples", "glue.QqpProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.QqpProcessor.get_labels": [[377, 380], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.QqpProcessor._create_examples": [[381, 397], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "0", "]", ")", "\n", "try", ":", "\n", "                ", "text_a", "=", "line", "[", "3", "]", "\n", "text_b", "=", "line", "[", "4", "]", "\n", "label", "=", "line", "[", "5", "]", "\n", "", "except", "IndexError", ":", "\n", "                ", "continue", "\n", "", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.QnliProcessor.get_example_from_tensor_dict": [[402, 408], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'question'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'sentence'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.QnliProcessor.get_train_examples": [[409, 413], ["glue.QnliProcessor._create_examples", "glue.QnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.QnliProcessor.get_dev_examples": [[414, 419], ["glue.QnliProcessor._create_examples", "glue.QnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\n", "\"dev_matched\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.QnliProcessor.get_labels": [[420, 423], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"entailment\"", ",", "\"not_entailment\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.QnliProcessor._create_examples": [[424, 437], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "0", "]", ")", "\n", "text_a", "=", "line", "[", "1", "]", "\n", "text_b", "=", "line", "[", "2", "]", "\n", "label", "=", "line", "[", "-", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.RteProcessor.get_example_from_tensor_dict": [[442, 448], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'sentence1'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'sentence2'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.RteProcessor.get_train_examples": [[449, 453], ["glue.RteProcessor._create_examples", "glue.RteProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.RteProcessor.get_dev_examples": [[454, 458], ["glue.RteProcessor._create_examples", "glue.RteProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.RteProcessor.get_labels": [[459, 462], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"entailment\"", ",", "\"not_entailment\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.RteProcessor._create_examples": [[463, 476], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "0", "]", ")", "\n", "text_a", "=", "line", "[", "1", "]", "\n", "text_b", "=", "line", "[", "2", "]", "\n", "label", "=", "line", "[", "-", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.WnliProcessor.get_example_from_tensor_dict": [[481, 487], ["utils.InputExample", "tensor_dict[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "str", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "InputExample", "(", "tensor_dict", "[", "'idx'", "]", ".", "numpy", "(", ")", ",", "\n", "tensor_dict", "[", "'sentence1'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "tensor_dict", "[", "'sentence2'", "]", ".", "numpy", "(", ")", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "str", "(", "tensor_dict", "[", "'label'", "]", ".", "numpy", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.WnliProcessor.get_train_examples": [[488, 492], ["glue.WnliProcessor._create_examples", "glue.WnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.WnliProcessor.get_dev_examples": [[493, 497], ["glue.WnliProcessor._create_examples", "glue.WnliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"dev.tsv\"", ")", ")", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.WnliProcessor.get_labels": [[498, 501], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"0\"", ",", "\"1\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.WnliProcessor._create_examples": [[502, 515], ["enumerate", "examples.append", "utils.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "        ", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "0", "]", ")", "\n", "text_a", "=", "line", "[", "1", "]", "\n", "text_b", "=", "line", "[", "2", "]", "\n", "label", "=", "line", "[", "-", "1", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.glue.glue_convert_examples_to_features": [[30, 152], ["enumerate", "file_utils.is_tf_available", "isinstance", "tokenizer.encode_plus", "features.append", "file_utils.is_tf_available", "tf.data.Dataset.from_generator", "processor.get_labels", "logger.info", "logger.info", "enumerate", "logger.info", "processor.get_example_from_tensor_dict", "processor.tfds_map", "len", "len", "len", "len", "len", "len", "len", "len", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "utils.InputFeatures", "float", "KeyError", "tf.TensorShape", "tf.TensorShape", "tf.TensorShape", "tf.TensorShape", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_tf_available", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode_plus", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_tf_available", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor.get_labels", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor.get_example_from_tensor_dict", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor.tfds_map"], ["def", "glue_convert_examples_to_features", "(", "examples", ",", "tokenizer", ",", "\n", "max_length", "=", "512", ",", "\n", "task", "=", "None", ",", "\n", "label_list", "=", "None", ",", "\n", "output_mode", "=", "None", ",", "\n", "pad_on_left", "=", "False", ",", "\n", "pad_token", "=", "0", ",", "\n", "pad_token_segment_id", "=", "0", ",", "\n", "mask_padding_with_zero", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Loads a data file into a list of ``InputFeatures``\n\n    Args:\n        examples: List of ``InputExamples`` or ``tf.data.Dataset`` containing the examples.\n        tokenizer: Instance of a tokenizer that will tokenize the examples\n        max_length: Maximum example length\n        task: GLUE task\n        label_list: List of labels. Can be obtained from the processor using the ``processor.get_labels()`` method\n        output_mode: String indicating the output mode. Either ``regression`` or ``classification``\n        pad_on_left: If set to ``True``, the examples will be padded on the left rather than on the right (default)\n        pad_token: Padding token\n        pad_token_segment_id: The segment ID for the padding token (It is usually 0, but can vary such as for XLNet where it is 4)\n        mask_padding_with_zero: If set to ``True``, the attention mask will be filled by ``1`` for actual values\n            and by ``0`` for padded values. If set to ``False``, inverts it (``1`` for padded values, ``0`` for\n            actual values)\n\n    Returns:\n        If the ``examples`` input is a ``tf.data.Dataset``, will return a ``tf.data.Dataset``\n        containing the task-specific features. If the input is a list of ``InputExamples``, will return\n        a list of task-specific ``InputFeatures`` which can be fed to the model.\n\n    \"\"\"", "\n", "is_tf_dataset", "=", "False", "\n", "if", "is_tf_available", "(", ")", "and", "isinstance", "(", "examples", ",", "tf", ".", "data", ".", "Dataset", ")", ":", "\n", "        ", "is_tf_dataset", "=", "True", "\n", "\n", "", "if", "task", "is", "not", "None", ":", "\n", "        ", "processor", "=", "glue_processors", "[", "task", "]", "(", ")", "\n", "if", "label_list", "is", "None", ":", "\n", "            ", "label_list", "=", "processor", ".", "get_labels", "(", ")", "\n", "logger", ".", "info", "(", "\"Using label list %s for task %s\"", "%", "(", "label_list", ",", "task", ")", ")", "\n", "", "if", "output_mode", "is", "None", ":", "\n", "            ", "output_mode", "=", "glue_output_modes", "[", "task", "]", "\n", "logger", ".", "info", "(", "\"Using output mode %s for task %s\"", "%", "(", "output_mode", ",", "task", ")", ")", "\n", "\n", "", "", "label_map", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "label_list", ")", "}", "\n", "\n", "features", "=", "[", "]", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", ")", ":", "\n", "        ", "if", "ex_index", "%", "10000", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Writing example %d\"", "%", "(", "ex_index", ")", ")", "\n", "", "if", "is_tf_dataset", ":", "\n", "            ", "example", "=", "processor", ".", "get_example_from_tensor_dict", "(", "example", ")", "\n", "example", "=", "processor", ".", "tfds_map", "(", "example", ")", "\n", "\n", "", "inputs", "=", "tokenizer", ".", "encode_plus", "(", "\n", "example", ".", "text_a", ",", "\n", "example", ".", "text_b", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", "max_length", "=", "max_length", ",", "\n", ")", "\n", "input_ids", ",", "token_type_ids", "=", "inputs", "[", "\"input_ids\"", "]", ",", "inputs", "[", "\"token_type_ids\"", "]", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "attention_mask", "=", "[", "1", "if", "mask_padding_with_zero", "else", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "padding_length", "=", "max_length", "-", "len", "(", "input_ids", ")", "\n", "if", "pad_on_left", ":", "\n", "            ", "input_ids", "=", "(", "[", "pad_token", "]", "*", "padding_length", ")", "+", "input_ids", "\n", "attention_mask", "=", "(", "[", "0", "if", "mask_padding_with_zero", "else", "1", "]", "*", "padding_length", ")", "+", "attention_mask", "\n", "token_type_ids", "=", "(", "[", "pad_token_segment_id", "]", "*", "padding_length", ")", "+", "token_type_ids", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "input_ids", "+", "(", "[", "pad_token", "]", "*", "padding_length", ")", "\n", "attention_mask", "=", "attention_mask", "+", "(", "[", "0", "if", "mask_padding_with_zero", "else", "1", "]", "*", "padding_length", ")", "\n", "token_type_ids", "=", "token_type_ids", "+", "(", "[", "pad_token_segment_id", "]", "*", "padding_length", ")", "\n", "\n", "", "assert", "len", "(", "input_ids", ")", "==", "max_length", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "input_ids", ")", ",", "max_length", ")", "\n", "assert", "len", "(", "attention_mask", ")", "==", "max_length", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "attention_mask", ")", ",", "max_length", ")", "\n", "assert", "len", "(", "token_type_ids", ")", "==", "max_length", ",", "\"Error with input length {} vs {}\"", ".", "format", "(", "len", "(", "token_type_ids", ")", ",", "max_length", ")", "\n", "\n", "if", "output_mode", "==", "\"classification\"", ":", "\n", "            ", "label", "=", "label_map", "[", "example", ".", "label", "]", "\n", "", "elif", "output_mode", "==", "\"regression\"", ":", "\n", "            ", "label", "=", "float", "(", "example", ".", "label", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "output_mode", ")", "\n", "\n", "", "if", "ex_index", "<", "5", ":", "\n", "            ", "logger", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "logger", ".", "info", "(", "\"guid: %s\"", "%", "(", "example", ".", "guid", ")", ")", "\n", "logger", ".", "info", "(", "\"input_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"attention_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "attention_mask", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"token_type_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "token_type_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"label: %s (id = %d)\"", "%", "(", "example", ".", "label", ",", "label", ")", ")", "\n", "\n", "", "features", ".", "append", "(", "\n", "InputFeatures", "(", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "label", "=", "label", ")", ")", "\n", "\n", "", "if", "is_tf_available", "(", ")", "and", "is_tf_dataset", ":", "\n", "        ", "def", "gen", "(", ")", ":", "\n", "            ", "for", "ex", "in", "features", ":", "\n", "                ", "yield", "(", "{", "'input_ids'", ":", "ex", ".", "input_ids", ",", "\n", "'attention_mask'", ":", "ex", ".", "attention_mask", ",", "\n", "'token_type_ids'", ":", "ex", ".", "token_type_ids", "}", ",", "\n", "ex", ".", "label", ")", "\n", "\n", "", "", "return", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "gen", ",", "\n", "(", "{", "'input_ids'", ":", "tf", ".", "int32", ",", "\n", "'attention_mask'", ":", "tf", ".", "int32", ",", "\n", "'token_type_ids'", ":", "tf", ".", "int32", "}", ",", "\n", "tf", ".", "int64", ")", ",", "\n", "(", "{", "'input_ids'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'attention_mask'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "'token_type_ids'", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", "}", ",", "\n", "tf", ".", "TensorShape", "(", "[", "]", ")", ")", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputExample.__init__": [[35, 40], ["None"], "methods", ["None"], ["\n", "if", "not", "_run_slow_tests", ":", "\n", "        ", "test_case", "=", "unittest", ".", "skip", "(", "\"test is slow\"", ")", "(", "test_case", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputExample.__repr__": [[41, 43], ["str", "utils.InputExample.to_json_string"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string"], ["", "return", "test_case", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputExample.to_dict": [[44, 48], ["copy.deepcopy"], "methods", ["None"], ["", "def", "custom_tokenizers", "(", "test_case", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputExample.to_json_string": [[49, 52], ["json.dumps", "utils.InputExample.to_dict"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict"], ["\n", "if", "not", "_run_custom_tokenizers", ":", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.__init__": [[67, 72], ["None"], "methods", ["None"], ["\n", "\n", "", "def", "require_tf", "(", "test_case", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.__repr__": [[73, 75], ["str", "utils.InputFeatures.to_json_string"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string"], ["\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict": [[76, 80], ["copy.deepcopy"], "methods", ["None"], ["if", "not", "_tf_available", ":", "\n", "        ", "test_case", "=", "unittest", ".", "skip", "(", "\"test requires TensorFlow\"", ")", "(", "test_case", ")", "\n", "", "return", "test_case", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_json_string": [[81, 84], ["json.dumps", "utils.InputFeatures.to_dict"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.InputFeatures.to_dict"], ["", "if", "_torch_available", ":", "\n", "# Set the USE_CUDA environment variable to select a GPU.", "\n", "    ", "torch_device", "=", "\"cuda\"", "if", "parse_flag_from_env", "(", "\"USE_CUDA\"", ")", "else", "\"cpu\"", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor.get_example_from_tensor_dict": [[89, 97], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor.get_train_examples": [[98, 101], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor.get_dev_examples": [[102, 105], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor.get_labels": [[106, 109], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor.tfds_map": [[110, 116], ["len", "utils.DataProcessor.get_labels", "utils.DataProcessor.get_labels", "int"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor.get_labels", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor.get_labels"], []], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.utils.DataProcessor._read_tsv": [[117, 128], ["open", "csv.reader", "lines.append", "list", "unicode"], "methods", ["None"], []], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._get_example_from_tensor_dict": [[366, 388], ["squad.SquadExample", "[].numpy().decode", "[].numpy", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "tensor_dict[].numpy().decode", "[].numpy", "start.numpy", "text.numpy().decode", "zip", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy", "tensor_dict[].numpy", "text.numpy"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "_get_example_from_tensor_dict", "(", "self", ",", "tensor_dict", ",", "evaluate", "=", "False", ")", ":", "\n", "        ", "if", "not", "evaluate", ":", "\n", "            ", "answer", "=", "tensor_dict", "[", "\"answers\"", "]", "[", "\"text\"", "]", "[", "0", "]", ".", "numpy", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", "\n", "answer_start", "=", "tensor_dict", "[", "\"answers\"", "]", "[", "\"answer_start\"", "]", "[", "0", "]", ".", "numpy", "(", ")", "\n", "answers", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "answers", "=", "[", "\n", "{", "\"answer_start\"", ":", "start", ".", "numpy", "(", ")", ",", "\"text\"", ":", "text", ".", "numpy", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", "}", "\n", "for", "start", ",", "text", "in", "zip", "(", "tensor_dict", "[", "\"answers\"", "]", "[", "\"answer_start\"", "]", ",", "tensor_dict", "[", "\"answers\"", "]", "[", "\"text\"", "]", ")", "\n", "]", "\n", "\n", "answer", "=", "None", "\n", "answer_start", "=", "None", "\n", "\n", "", "return", "SquadExample", "(", "\n", "qas_id", "=", "tensor_dict", "[", "\"id\"", "]", ".", "numpy", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", ",", "\n", "question_text", "=", "tensor_dict", "[", "\"question\"", "]", ".", "numpy", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", ",", "\n", "context_text", "=", "tensor_dict", "[", "\"context\"", "]", ".", "numpy", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", ",", "\n", "answer_text", "=", "answer", ",", "\n", "start_position_character", "=", "answer_start", ",", "\n", "title", "=", "tensor_dict", "[", "\"title\"", "]", ".", "numpy", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", ",", "\n", "answers", "=", "answers", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor.get_examples_from_dataset": [[390, 420], ["tqdm.tqdm.tqdm", "examples.append", "squad.SquadProcessor._get_example_from_tensor_dict"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._get_example_from_tensor_dict"], ["", "def", "get_examples_from_dataset", "(", "self", ",", "dataset", ",", "evaluate", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Creates a list of :class:`~transformers.data.processors.squad.SquadExample` using a TFDS dataset.\n\n        Args:\n            dataset: The tfds dataset loaded from `tensorflow_datasets.load(\"squad\")`\n            evaluate: boolean specifying if in evaluation mode or in training mode\n\n        Returns:\n            List of SquadExample\n\n        Examples::\n\n            import tensorflow_datasets as tfds\n            dataset = tfds.load(\"squad\")\n\n            training_examples = get_examples_from_dataset(dataset, evaluate=False)\n            evaluation_examples = get_examples_from_dataset(dataset, evaluate=True)\n        \"\"\"", "\n", "\n", "if", "evaluate", ":", "\n", "            ", "dataset", "=", "dataset", "[", "\"validation\"", "]", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "dataset", "[", "\"train\"", "]", "\n", "\n", "", "examples", "=", "[", "]", "\n", "for", "tensor_dict", "in", "tqdm", "(", "dataset", ")", ":", "\n", "            ", "examples", ".", "append", "(", "self", ".", "_get_example_from_tensor_dict", "(", "tensor_dict", ",", "evaluate", "=", "evaluate", ")", ")", "\n", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor.get_train_examples": [[421, 442], ["squad.SquadProcessor._create_examples", "ValueError", "open", "os.path.join", "json.load"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples"], ["", "def", "get_train_examples", "(", "self", ",", "data_dir", ",", "filename", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns the training examples from the data directory.\n\n        Args:\n            data_dir: Directory containing the data files used for training and evaluating.\n            filename: None by default, specify this if the training file has a different name than the original one\n                which is `train-v1.1.json` and `train-v2.0.json` for squad versions 1.1 and 2.0 respectively.\n\n        \"\"\"", "\n", "if", "data_dir", "is", "None", ":", "\n", "            ", "data_dir", "=", "\"\"", "\n", "\n", "", "if", "self", ".", "train_file", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"SquadProcessor should be instantiated via SquadV1Processor or SquadV2Processor\"", ")", "\n", "\n", "", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "self", ".", "train_file", "if", "filename", "is", "None", "else", "filename", ")", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", "\n", ")", "as", "reader", ":", "\n", "            ", "input_data", "=", "json", ".", "load", "(", "reader", ")", "[", "\"data\"", "]", "\n", "", "return", "self", ".", "_create_examples", "(", "input_data", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor.get_dev_examples": [[443, 463], ["squad.SquadProcessor._create_examples", "ValueError", "open", "os.path.join", "json.load"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ",", "filename", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Returns the evaluation example from the data directory.\n\n        Args:\n            data_dir: Directory containing the data files used for training and evaluating.\n            filename: None by default, specify this if the evaluation file has a different name than the original one\n                which is `train-v1.1.json` and `train-v2.0.json` for squad versions 1.1 and 2.0 respectively.\n        \"\"\"", "\n", "if", "data_dir", "is", "None", ":", "\n", "            ", "data_dir", "=", "\"\"", "\n", "\n", "", "if", "self", ".", "dev_file", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"SquadProcessor should be instantiated via SquadV1Processor or SquadV2Processor\"", ")", "\n", "\n", "", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "self", ".", "dev_file", "if", "filename", "is", "None", "else", "filename", ")", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", "\n", ")", "as", "reader", ":", "\n", "            ", "input_data", "=", "json", ".", "load", "(", "reader", ")", "[", "\"data\"", "]", "\n", "", "return", "self", ".", "_create_examples", "(", "input_data", ",", "\"dev\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadProcessor._create_examples": [[464, 504], ["tqdm.tqdm.tqdm", "squad.SquadExample", "examples.append"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "input_data", ",", "set_type", ")", ":", "\n", "        ", "is_training", "=", "set_type", "==", "\"train\"", "\n", "examples", "=", "[", "]", "\n", "for", "entry", "in", "tqdm", "(", "input_data", ")", ":", "\n", "            ", "title", "=", "entry", "[", "\"title\"", "]", "\n", "for", "paragraph", "in", "entry", "[", "\"paragraphs\"", "]", ":", "\n", "                ", "context_text", "=", "paragraph", "[", "\"context\"", "]", "\n", "for", "qa", "in", "paragraph", "[", "\"qas\"", "]", ":", "\n", "                    ", "qas_id", "=", "qa", "[", "\"id\"", "]", "\n", "question_text", "=", "qa", "[", "\"question\"", "]", "\n", "start_position_character", "=", "None", "\n", "answer_text", "=", "None", "\n", "answers", "=", "[", "]", "\n", "\n", "if", "\"is_impossible\"", "in", "qa", ":", "\n", "                        ", "is_impossible", "=", "qa", "[", "\"is_impossible\"", "]", "\n", "", "else", ":", "\n", "                        ", "is_impossible", "=", "False", "\n", "\n", "", "if", "not", "is_impossible", ":", "\n", "                        ", "if", "is_training", ":", "\n", "                            ", "answer", "=", "qa", "[", "\"answers\"", "]", "[", "0", "]", "\n", "answer_text", "=", "answer", "[", "\"text\"", "]", "\n", "start_position_character", "=", "answer", "[", "\"answer_start\"", "]", "\n", "", "else", ":", "\n", "                            ", "answers", "=", "qa", "[", "\"answers\"", "]", "\n", "\n", "", "", "example", "=", "SquadExample", "(", "\n", "qas_id", "=", "qas_id", ",", "\n", "question_text", "=", "question_text", ",", "\n", "context_text", "=", "context_text", ",", "\n", "answer_text", "=", "answer_text", ",", "\n", "start_position_character", "=", "start_position_character", ",", "\n", "title", "=", "title", ",", "\n", "is_impossible", "=", "is_impossible", ",", "\n", "answers", "=", "answers", ",", "\n", ")", "\n", "\n", "examples", ".", "append", "(", "example", ")", "\n", "", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadExample.__init__": [[531, 575], ["squad._is_whitespace", "char_to_word_offset.append", "doc_tokens.append", "len", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._is_whitespace"], ["def", "__init__", "(", "\n", "self", ",", "\n", "qas_id", ",", "\n", "question_text", ",", "\n", "context_text", ",", "\n", "answer_text", ",", "\n", "start_position_character", ",", "\n", "title", ",", "\n", "answers", "=", "[", "]", ",", "\n", "is_impossible", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "qas_id", "=", "qas_id", "\n", "self", ".", "question_text", "=", "question_text", "\n", "self", ".", "context_text", "=", "context_text", "\n", "self", ".", "answer_text", "=", "answer_text", "\n", "self", ".", "title", "=", "title", "\n", "self", ".", "is_impossible", "=", "is_impossible", "\n", "self", ".", "answers", "=", "answers", "\n", "\n", "self", ".", "start_position", ",", "self", ".", "end_position", "=", "0", ",", "0", "\n", "\n", "doc_tokens", "=", "[", "]", "\n", "char_to_word_offset", "=", "[", "]", "\n", "prev_is_whitespace", "=", "True", "\n", "\n", "# Split on whitespace so that different tokens may be attributed to their original position.", "\n", "for", "c", "in", "self", ".", "context_text", ":", "\n", "            ", "if", "_is_whitespace", "(", "c", ")", ":", "\n", "                ", "prev_is_whitespace", "=", "True", "\n", "", "else", ":", "\n", "                ", "if", "prev_is_whitespace", ":", "\n", "                    ", "doc_tokens", ".", "append", "(", "c", ")", "\n", "", "else", ":", "\n", "                    ", "doc_tokens", "[", "-", "1", "]", "+=", "c", "\n", "", "prev_is_whitespace", "=", "False", "\n", "", "char_to_word_offset", ".", "append", "(", "len", "(", "doc_tokens", ")", "-", "1", ")", "\n", "\n", "", "self", ".", "doc_tokens", "=", "doc_tokens", "\n", "self", ".", "char_to_word_offset", "=", "char_to_word_offset", "\n", "\n", "# Start end end positions only has a value during evaluation.", "\n", "if", "start_position_character", "is", "not", "None", "and", "not", "is_impossible", ":", "\n", "            ", "self", ".", "start_position", "=", "char_to_word_offset", "[", "start_position_character", "]", "\n", "self", ".", "end_position", "=", "char_to_word_offset", "[", "start_position_character", "+", "len", "(", "answer_text", ")", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadFeatures.__init__": [[602, 633], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_ids", ",", "\n", "attention_mask", ",", "\n", "token_type_ids", ",", "\n", "cls_index", ",", "\n", "p_mask", ",", "\n", "example_index", ",", "\n", "unique_id", ",", "\n", "paragraph_len", ",", "\n", "token_is_max_context", ",", "\n", "tokens", ",", "\n", "token_to_orig_map", ",", "\n", "start_position", ",", "\n", "end_position", ",", "\n", ")", ":", "\n", "        ", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "attention_mask", "=", "attention_mask", "\n", "self", ".", "token_type_ids", "=", "token_type_ids", "\n", "self", ".", "cls_index", "=", "cls_index", "\n", "self", ".", "p_mask", "=", "p_mask", "\n", "\n", "self", ".", "example_index", "=", "example_index", "\n", "self", ".", "unique_id", "=", "unique_id", "\n", "self", ".", "paragraph_len", "=", "paragraph_len", "\n", "self", ".", "token_is_max_context", "=", "token_is_max_context", "\n", "self", ".", "tokens", "=", "tokens", "\n", "self", ".", "token_to_orig_map", "=", "token_to_orig_map", "\n", "\n", "self", ".", "start_position", "=", "start_position", "\n", "self", ".", "end_position", "=", "end_position", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.SquadResult.__init__": [[645, 654], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "unique_id", ",", "start_logits", ",", "end_logits", ",", "start_top_index", "=", "None", ",", "end_top_index", "=", "None", ",", "cls_logits", "=", "None", ")", ":", "\n", "        ", "self", ".", "start_logits", "=", "start_logits", "\n", "self", ".", "end_logits", "=", "end_logits", "\n", "self", ".", "unique_id", "=", "unique_id", "\n", "\n", "if", "start_top_index", ":", "\n", "            ", "self", ".", "start_top_index", "=", "start_top_index", "\n", "self", ".", "end_top_index", "=", "end_top_index", "\n", "self", ".", "cls_logits", "=", "cls_logits", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._improve_answer_span": [[22, 33], ["range", "tokenizer.tokenize", "range"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["def", "_improve_answer_span", "(", "doc_tokens", ",", "input_start", ",", "input_end", ",", "tokenizer", ",", "orig_answer_text", ")", ":", "\n", "    ", "\"\"\"Returns tokenized answer spans that better match the annotated answer.\"\"\"", "\n", "tok_answer_text", "=", "\" \"", ".", "join", "(", "tokenizer", ".", "tokenize", "(", "orig_answer_text", ")", ")", "\n", "\n", "for", "new_start", "in", "range", "(", "input_start", ",", "input_end", "+", "1", ")", ":", "\n", "        ", "for", "new_end", "in", "range", "(", "input_end", ",", "new_start", "-", "1", ",", "-", "1", ")", ":", "\n", "            ", "text_span", "=", "\" \"", ".", "join", "(", "doc_tokens", "[", "new_start", ":", "(", "new_end", "+", "1", ")", "]", ")", "\n", "if", "text_span", "==", "tok_answer_text", ":", "\n", "                ", "return", "(", "new_start", ",", "new_end", ")", "\n", "\n", "", "", "", "return", "(", "input_start", ",", "input_end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._check_is_max_context": [[35, 53], ["enumerate", "min"], "function", ["None"], ["", "def", "_check_is_max_context", "(", "doc_spans", ",", "cur_span_index", ",", "position", ")", ":", "\n", "    ", "\"\"\"Check if this is the 'max context' doc span for the token.\"\"\"", "\n", "best_score", "=", "None", "\n", "best_span_index", "=", "None", "\n", "for", "(", "span_index", ",", "doc_span", ")", "in", "enumerate", "(", "doc_spans", ")", ":", "\n", "        ", "end", "=", "doc_span", ".", "start", "+", "doc_span", ".", "length", "-", "1", "\n", "if", "position", "<", "doc_span", ".", "start", ":", "\n", "            ", "continue", "\n", "", "if", "position", ">", "end", ":", "\n", "            ", "continue", "\n", "", "num_left_context", "=", "position", "-", "doc_span", ".", "start", "\n", "num_right_context", "=", "end", "-", "position", "\n", "score", "=", "min", "(", "num_left_context", ",", "num_right_context", ")", "+", "0.01", "*", "doc_span", ".", "length", "\n", "if", "best_score", "is", "None", "or", "score", ">", "best_score", ":", "\n", "            ", "best_score", "=", "score", "\n", "best_span_index", "=", "span_index", "\n", "\n", "", "", "return", "cur_span_index", "==", "best_span_index", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._new_check_is_max_context": [[55, 75], ["enumerate", "min"], "function", ["None"], ["", "def", "_new_check_is_max_context", "(", "doc_spans", ",", "cur_span_index", ",", "position", ")", ":", "\n", "    ", "\"\"\"Check if this is the 'max context' doc span for the token.\"\"\"", "\n", "# if len(doc_spans) == 1:", "\n", "# return True", "\n", "best_score", "=", "None", "\n", "best_span_index", "=", "None", "\n", "for", "(", "span_index", ",", "doc_span", ")", "in", "enumerate", "(", "doc_spans", ")", ":", "\n", "        ", "end", "=", "doc_span", "[", "\"start\"", "]", "+", "doc_span", "[", "\"length\"", "]", "-", "1", "\n", "if", "position", "<", "doc_span", "[", "\"start\"", "]", ":", "\n", "            ", "continue", "\n", "", "if", "position", ">", "end", ":", "\n", "            ", "continue", "\n", "", "num_left_context", "=", "position", "-", "doc_span", "[", "\"start\"", "]", "\n", "num_right_context", "=", "end", "-", "position", "\n", "score", "=", "min", "(", "num_left_context", ",", "num_right_context", ")", "+", "0.01", "*", "doc_span", "[", "\"length\"", "]", "\n", "if", "best_score", "is", "None", "or", "score", ">", "best_score", ":", "\n", "            ", "best_score", "=", "score", "\n", "best_span_index", "=", "span_index", "\n", "\n", "", "", "return", "cur_span_index", "==", "best_span_index", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._is_whitespace": [[77, 81], ["ord"], "function", ["None"], ["", "def", "_is_whitespace", "(", "c", ")", ":", "\n", "    ", "if", "c", "==", "\" \"", "or", "c", "==", "\"\\t\"", "or", "c", "==", "\"\\r\"", "or", "c", "==", "\"\\n\"", "or", "ord", "(", "c", ")", "==", "0x202F", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad.squad_convert_examples_to_features": [[83, 355], ["enumerate", "tqdm.tqdm", "enumerate", "tokenizer.encode", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "orig_to_tok_index.append", "tokenizer.tokenize", "squad._improve_answer_span", "len", "tokenizer.encode_plus", "min", "tokenizer.convert_ids_to_tokens", "range", "spans.append", "len", "range", "span[].index", "numpy.array", "numpy.minimum", "features.append", "file_utils.is_torch_available", "ImportError", "torch.arange", "TensorDataset", "torch.tensor", "torch.tensor", "TensorDataset", "tf.data.Dataset.from_generator", "tokenization_bert.whitespace_tokenize", "actual_text.find", "logger.warning", "len", "tok_to_orig_index.append", "all_doc_tokens.append", "len", "len", "len", "squad._new_check_is_max_context", "squad.SquadFeatures", "torch.tensor.size", "file_utils.is_tf_available", "ImportError", "len", "len", "len", "np.minimum.tolist", "len", "len", "encoded_dict[].index", "numpy.where", "tf.TensorShape", "tf.TensorShape", "tf.TensorShape", "tf.TensorShape", "tf.TensorShape", "tf.TensorShape", "tf.TensorShape", "len", "len", "len", "len", "numpy.array"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._improve_answer_span", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode_plus", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_torch_available", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert.whitespace_tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.processors.squad._new_check_is_max_context", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.file_utils.is_tf_available"], ["", "def", "squad_convert_examples_to_features", "(", "\n", "examples", ",", "tokenizer", ",", "max_seq_length", ",", "doc_stride", ",", "max_query_length", ",", "is_training", ",", "return_dataset", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Converts a list of examples into a list of features that can be directly given as input to a model.\n    It is model-dependant and takes advantage of many of the tokenizer's features to create the model's inputs.\n\n    Args:\n        examples: list of :class:`~transformers.data.processors.squad.SquadExample`\n        tokenizer: an instance of a child of :class:`~transformers.PreTrainedTokenizer`\n        max_seq_length: The maximum sequence length of the inputs.\n        doc_stride: The stride used when the context is too large and is split across several features.\n        max_query_length: The maximum length of the query.\n        is_training: whether to create features for model evaluation or model training.\n        return_dataset: Default False. Either 'pt' or 'tf'.\n            if 'pt': returns a torch.data.TensorDataset,\n            if 'tf': returns a tf.data.Dataset\n\n    Returns:\n        list of :class:`~transformers.data.processors.squad.SquadFeatures`\n\n    Example::\n\n        processor = SquadV2Processor()\n        examples = processor.get_dev_examples(data_dir)\n\n        features = squad_convert_examples_to_features( \n            examples=examples,\n            tokenizer=tokenizer,\n            max_seq_length=args.max_seq_length,\n            doc_stride=args.doc_stride,\n            max_query_length=args.max_query_length,\n            is_training=not evaluate,\n        )\n    \"\"\"", "\n", "\n", "# Defining helper methods", "\n", "unique_id", "=", "1000000000", "\n", "\n", "features", "=", "[", "]", "\n", "for", "(", "example_index", ",", "example", ")", "in", "enumerate", "(", "tqdm", "(", "examples", ",", "desc", "=", "\"Converting examples to features\"", ")", ")", ":", "\n", "        ", "if", "is_training", "and", "not", "example", ".", "is_impossible", ":", "\n", "# Get start and end position", "\n", "            ", "start_position", "=", "example", ".", "start_position", "\n", "end_position", "=", "example", ".", "end_position", "\n", "\n", "# If the answer cannot be found in the text, then skip this example.", "\n", "actual_text", "=", "\" \"", ".", "join", "(", "example", ".", "doc_tokens", "[", "start_position", ":", "(", "end_position", "+", "1", ")", "]", ")", "\n", "cleaned_answer_text", "=", "\" \"", ".", "join", "(", "whitespace_tokenize", "(", "example", ".", "answer_text", ")", ")", "\n", "if", "actual_text", ".", "find", "(", "cleaned_answer_text", ")", "==", "-", "1", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Could not find answer: '%s' vs. '%s'\"", ",", "actual_text", ",", "cleaned_answer_text", ")", "\n", "continue", "\n", "\n", "", "", "tok_to_orig_index", "=", "[", "]", "\n", "orig_to_tok_index", "=", "[", "]", "\n", "all_doc_tokens", "=", "[", "]", "\n", "for", "(", "i", ",", "token", ")", "in", "enumerate", "(", "example", ".", "doc_tokens", ")", ":", "\n", "            ", "orig_to_tok_index", ".", "append", "(", "len", "(", "all_doc_tokens", ")", ")", "\n", "sub_tokens", "=", "tokenizer", ".", "tokenize", "(", "token", ")", "\n", "for", "sub_token", "in", "sub_tokens", ":", "\n", "                ", "tok_to_orig_index", ".", "append", "(", "i", ")", "\n", "all_doc_tokens", ".", "append", "(", "sub_token", ")", "\n", "\n", "", "", "if", "is_training", "and", "not", "example", ".", "is_impossible", ":", "\n", "            ", "tok_start_position", "=", "orig_to_tok_index", "[", "example", ".", "start_position", "]", "\n", "if", "example", ".", "end_position", "<", "len", "(", "example", ".", "doc_tokens", ")", "-", "1", ":", "\n", "                ", "tok_end_position", "=", "orig_to_tok_index", "[", "example", ".", "end_position", "+", "1", "]", "-", "1", "\n", "", "else", ":", "\n", "                ", "tok_end_position", "=", "len", "(", "all_doc_tokens", ")", "-", "1", "\n", "\n", "", "(", "tok_start_position", ",", "tok_end_position", ")", "=", "_improve_answer_span", "(", "\n", "all_doc_tokens", ",", "tok_start_position", ",", "tok_end_position", ",", "tokenizer", ",", "example", ".", "answer_text", "\n", ")", "\n", "\n", "", "spans", "=", "[", "]", "\n", "\n", "truncated_query", "=", "tokenizer", ".", "encode", "(", "\n", "example", ".", "question_text", ",", "add_special_tokens", "=", "False", ",", "max_length", "=", "max_query_length", "\n", ")", "\n", "sequence_added_tokens", "=", "tokenizer", ".", "max_len", "-", "tokenizer", ".", "max_len_single_sentence", "\n", "sequence_pair_added_tokens", "=", "tokenizer", ".", "max_len", "-", "tokenizer", ".", "max_len_sentences_pair", "\n", "\n", "span_doc_tokens", "=", "all_doc_tokens", "\n", "while", "len", "(", "spans", ")", "*", "doc_stride", "<", "len", "(", "all_doc_tokens", ")", ":", "\n", "\n", "            ", "encoded_dict", "=", "tokenizer", ".", "encode_plus", "(", "\n", "truncated_query", "if", "tokenizer", ".", "padding_side", "==", "\"right\"", "else", "span_doc_tokens", ",", "\n", "span_doc_tokens", "if", "tokenizer", ".", "padding_side", "==", "\"right\"", "else", "truncated_query", ",", "\n", "max_length", "=", "max_seq_length", ",", "\n", "return_overflowing_tokens", "=", "True", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "stride", "=", "max_seq_length", "-", "doc_stride", "-", "len", "(", "truncated_query", ")", "-", "sequence_pair_added_tokens", ",", "\n", "truncation_strategy", "=", "\"only_second\"", "if", "tokenizer", ".", "padding_side", "==", "\"right\"", "else", "\"only_first\"", ",", "\n", ")", "\n", "\n", "paragraph_len", "=", "min", "(", "\n", "len", "(", "all_doc_tokens", ")", "-", "len", "(", "spans", ")", "*", "doc_stride", ",", "\n", "max_seq_length", "-", "len", "(", "truncated_query", ")", "-", "sequence_pair_added_tokens", ",", "\n", ")", "\n", "\n", "if", "tokenizer", ".", "pad_token_id", "in", "encoded_dict", "[", "\"input_ids\"", "]", ":", "\n", "                ", "non_padded_ids", "=", "encoded_dict", "[", "\"input_ids\"", "]", "[", ":", "encoded_dict", "[", "\"input_ids\"", "]", ".", "index", "(", "tokenizer", ".", "pad_token_id", ")", "]", "\n", "", "else", ":", "\n", "                ", "non_padded_ids", "=", "encoded_dict", "[", "\"input_ids\"", "]", "\n", "\n", "", "tokens", "=", "tokenizer", ".", "convert_ids_to_tokens", "(", "non_padded_ids", ")", "\n", "\n", "token_to_orig_map", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "paragraph_len", ")", ":", "\n", "                ", "index", "=", "len", "(", "truncated_query", ")", "+", "sequence_added_tokens", "+", "i", "if", "tokenizer", ".", "padding_side", "==", "\"right\"", "else", "i", "\n", "token_to_orig_map", "[", "index", "]", "=", "tok_to_orig_index", "[", "len", "(", "spans", ")", "*", "doc_stride", "+", "i", "]", "\n", "\n", "", "encoded_dict", "[", "\"paragraph_len\"", "]", "=", "paragraph_len", "\n", "encoded_dict", "[", "\"tokens\"", "]", "=", "tokens", "\n", "encoded_dict", "[", "\"token_to_orig_map\"", "]", "=", "token_to_orig_map", "\n", "encoded_dict", "[", "\"truncated_query_with_special_tokens_length\"", "]", "=", "len", "(", "truncated_query", ")", "+", "sequence_added_tokens", "\n", "encoded_dict", "[", "\"token_is_max_context\"", "]", "=", "{", "}", "\n", "encoded_dict", "[", "\"start\"", "]", "=", "len", "(", "spans", ")", "*", "doc_stride", "\n", "encoded_dict", "[", "\"length\"", "]", "=", "paragraph_len", "\n", "\n", "spans", ".", "append", "(", "encoded_dict", ")", "\n", "\n", "if", "\"overflowing_tokens\"", "not", "in", "encoded_dict", ":", "\n", "                ", "break", "\n", "", "span_doc_tokens", "=", "encoded_dict", "[", "\"overflowing_tokens\"", "]", "\n", "\n", "", "for", "doc_span_index", "in", "range", "(", "len", "(", "spans", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "spans", "[", "doc_span_index", "]", "[", "\"paragraph_len\"", "]", ")", ":", "\n", "                ", "is_max_context", "=", "_new_check_is_max_context", "(", "spans", ",", "doc_span_index", ",", "doc_span_index", "*", "doc_stride", "+", "j", ")", "\n", "index", "=", "(", "\n", "j", "\n", "if", "tokenizer", ".", "padding_side", "==", "\"left\"", "\n", "else", "spans", "[", "doc_span_index", "]", "[", "\"truncated_query_with_special_tokens_length\"", "]", "+", "j", "\n", ")", "\n", "spans", "[", "doc_span_index", "]", "[", "\"token_is_max_context\"", "]", "[", "index", "]", "=", "is_max_context", "\n", "\n", "", "", "for", "span", "in", "spans", ":", "\n", "# Identify the position of the CLS token", "\n", "            ", "cls_index", "=", "span", "[", "\"input_ids\"", "]", ".", "index", "(", "tokenizer", ".", "cls_token_id", ")", "\n", "\n", "# p_mask: mask with 1 for token than cannot be in the answer (0 for token which can be in an answer)", "\n", "# Original TF implem also keep the classification token (set to 0) (not sure why...)", "\n", "p_mask", "=", "np", ".", "array", "(", "span", "[", "\"token_type_ids\"", "]", ")", "\n", "\n", "p_mask", "=", "np", ".", "minimum", "(", "p_mask", ",", "1", ")", "\n", "\n", "if", "tokenizer", ".", "padding_side", "==", "\"right\"", ":", "\n", "# Limit positive values to one", "\n", "                ", "p_mask", "=", "1", "-", "p_mask", "\n", "\n", "", "p_mask", "[", "np", ".", "where", "(", "np", ".", "array", "(", "span", "[", "\"input_ids\"", "]", ")", "==", "tokenizer", ".", "sep_token_id", ")", "[", "0", "]", "]", "=", "1", "\n", "\n", "# Set the CLS index to '0'", "\n", "p_mask", "[", "cls_index", "]", "=", "0", "\n", "\n", "span_is_impossible", "=", "example", ".", "is_impossible", "\n", "start_position", "=", "0", "\n", "end_position", "=", "0", "\n", "if", "is_training", "and", "not", "span_is_impossible", ":", "\n", "# For training, if our document chunk does not contain an annotation", "\n", "# we throw it out, since there is nothing to predict.", "\n", "                ", "doc_start", "=", "span", "[", "\"start\"", "]", "\n", "doc_end", "=", "span", "[", "\"start\"", "]", "+", "span", "[", "\"length\"", "]", "-", "1", "\n", "out_of_span", "=", "False", "\n", "\n", "if", "not", "(", "tok_start_position", ">=", "doc_start", "and", "tok_end_position", "<=", "doc_end", ")", ":", "\n", "                    ", "out_of_span", "=", "True", "\n", "\n", "", "if", "out_of_span", ":", "\n", "                    ", "start_position", "=", "cls_index", "\n", "end_position", "=", "cls_index", "\n", "span_is_impossible", "=", "True", "\n", "", "else", ":", "\n", "                    ", "if", "tokenizer", ".", "padding_side", "==", "\"left\"", ":", "\n", "                        ", "doc_offset", "=", "0", "\n", "", "else", ":", "\n", "                        ", "doc_offset", "=", "len", "(", "truncated_query", ")", "+", "sequence_added_tokens", "\n", "\n", "", "start_position", "=", "tok_start_position", "-", "doc_start", "+", "doc_offset", "\n", "end_position", "=", "tok_end_position", "-", "doc_start", "+", "doc_offset", "\n", "\n", "", "", "features", ".", "append", "(", "\n", "SquadFeatures", "(", "\n", "span", "[", "\"input_ids\"", "]", ",", "\n", "span", "[", "\"attention_mask\"", "]", ",", "\n", "span", "[", "\"token_type_ids\"", "]", ",", "\n", "cls_index", ",", "\n", "p_mask", ".", "tolist", "(", ")", ",", "\n", "example_index", "=", "example_index", ",", "\n", "unique_id", "=", "unique_id", ",", "\n", "paragraph_len", "=", "span", "[", "\"paragraph_len\"", "]", ",", "\n", "token_is_max_context", "=", "span", "[", "\"token_is_max_context\"", "]", ",", "\n", "tokens", "=", "span", "[", "\"tokens\"", "]", ",", "\n", "token_to_orig_map", "=", "span", "[", "\"token_to_orig_map\"", "]", ",", "\n", "start_position", "=", "start_position", ",", "\n", "end_position", "=", "end_position", ",", "\n", ")", "\n", ")", "\n", "\n", "unique_id", "+=", "1", "\n", "\n", "", "", "if", "return_dataset", "==", "\"pt\"", ":", "\n", "        ", "if", "not", "is_torch_available", "(", ")", ":", "\n", "            ", "raise", "ImportError", "(", "\"Pytorch must be installed to return a pytorch dataset.\"", ")", "\n", "\n", "# Convert to Tensors and build dataset", "\n", "", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_attention_masks", "=", "torch", ".", "tensor", "(", "[", "f", ".", "attention_mask", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_token_type_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "token_type_ids", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_cls_index", "=", "torch", ".", "tensor", "(", "[", "f", ".", "cls_index", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_p_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "p_mask", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "if", "not", "is_training", ":", "\n", "            ", "all_example_index", "=", "torch", ".", "arange", "(", "all_input_ids", ".", "size", "(", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "dataset", "=", "TensorDataset", "(", "\n", "all_input_ids", ",", "all_attention_masks", ",", "all_token_type_ids", ",", "all_example_index", ",", "all_cls_index", ",", "all_p_mask", "\n", ")", "\n", "", "else", ":", "\n", "            ", "all_start_positions", "=", "torch", ".", "tensor", "(", "[", "f", ".", "start_position", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_end_positions", "=", "torch", ".", "tensor", "(", "[", "f", ".", "end_position", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "dataset", "=", "TensorDataset", "(", "\n", "all_input_ids", ",", "\n", "all_attention_masks", ",", "\n", "all_token_type_ids", ",", "\n", "all_start_positions", ",", "\n", "all_end_positions", ",", "\n", "all_cls_index", ",", "\n", "all_p_mask", ",", "\n", ")", "\n", "\n", "", "return", "features", ",", "dataset", "\n", "", "elif", "return_dataset", "==", "\"tf\"", ":", "\n", "        ", "if", "not", "is_tf_available", "(", ")", ":", "\n", "            ", "raise", "ImportError", "(", "\"TensorFlow must be installed to return a TensorFlow dataset.\"", ")", "\n", "\n", "", "def", "gen", "(", ")", ":", "\n", "            ", "for", "ex", "in", "features", ":", "\n", "                ", "yield", "(", "\n", "{", "\n", "\"input_ids\"", ":", "ex", ".", "input_ids", ",", "\n", "\"attention_mask\"", ":", "ex", ".", "attention_mask", ",", "\n", "\"token_type_ids\"", ":", "ex", ".", "token_type_ids", ",", "\n", "}", ",", "{", "\n", "\"start_position\"", ":", "ex", ".", "start_position", ",", "\n", "\"end_position\"", ":", "ex", ".", "end_position", ",", "\n", "\"cls_index\"", ":", "ex", ".", "cls_index", ",", "\n", "\"p_mask\"", ":", "ex", ".", "p_mask", ",", "\n", "}", "\n", ")", "\n", "\n", "", "", "return", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "\n", "gen", ",", "\n", "(", "\n", "{", "\"input_ids\"", ":", "tf", ".", "int32", ",", "\"attention_mask\"", ":", "tf", ".", "int32", ",", "\"token_type_ids\"", ":", "tf", ".", "int32", "}", ",", "\n", "{", "\"start_position\"", ":", "tf", ".", "int64", ",", "\"end_position\"", ":", "tf", ".", "int64", ",", "\"cls_index\"", ":", "tf", ".", "int64", ",", "\"p_mask\"", ":", "tf", ".", "int32", "}", ",", "\n", ")", ",", "\n", "(", "\n", "{", "\n", "\"input_ids\"", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "\"attention_mask\"", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "\"token_type_ids\"", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "}", ",", "\n", "{", "\n", "\"start_position\"", ":", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "\"end_position\"", ":", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "\"cls_index\"", ":", "tf", ".", "TensorShape", "(", "[", "]", ")", ",", "\n", "\"p_mask\"", ":", "tf", ".", "TensorShape", "(", "[", "None", "]", ")", ",", "\n", "}", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.__init__.is_sklearn_available": [[31, 33], ["None"], "function", ["None"], ["SquadExample", ",", "SquadV1Processor", ",", "SquadV2Processor", ")", "\n", "\n", "if", "is_sklearn_available", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.normalize_answer": [[25, 41], ["squad_metrics.normalize_answer.white_space_fix"], "function", ["None"], ["def", "normalize_answer", "(", "s", ")", ":", "\n", "    ", "\"\"\"Lower text and remove punctuation, articles and extra whitespace.\"\"\"", "\n", "def", "remove_articles", "(", "text", ")", ":", "\n", "        ", "regex", "=", "re", ".", "compile", "(", "r'\\b(a|an|the)\\b'", ",", "re", ".", "UNICODE", ")", "\n", "return", "re", ".", "sub", "(", "regex", ",", "' '", ",", "text", ")", "\n", "\n", "", "def", "white_space_fix", "(", "text", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "text", ".", "split", "(", ")", ")", "\n", "\n", "", "def", "remove_punc", "(", "text", ")", ":", "\n", "        ", "exclude", "=", "set", "(", "string", ".", "punctuation", ")", "\n", "return", "''", ".", "join", "(", "ch", "for", "ch", "in", "text", "if", "ch", "not", "in", "exclude", ")", "\n", "\n", "", "def", "lower", "(", "text", ")", ":", "\n", "        ", "return", "text", ".", "lower", "(", ")", "\n", "", "return", "white_space_fix", "(", "remove_articles", "(", "remove_punc", "(", "lower", "(", "s", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.get_tokens": [[43, 47], ["normalize_answer().split", "squad_metrics.normalize_answer"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.normalize_answer"], ["", "def", "get_tokens", "(", "s", ")", ":", "\n", "    ", "if", "not", "s", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "normalize_answer", "(", "s", ")", ".", "split", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.compute_exact": [[49, 51], ["int", "squad_metrics.normalize_answer", "squad_metrics.normalize_answer"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.normalize_answer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.normalize_answer"], ["", "def", "compute_exact", "(", "a_gold", ",", "a_pred", ")", ":", "\n", "    ", "return", "int", "(", "normalize_answer", "(", "a_gold", ")", "==", "normalize_answer", "(", "a_pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.compute_f1": [[53, 67], ["squad_metrics.get_tokens", "squad_metrics.get_tokens", "sum", "collections.Counter", "collections.Counter", "common.values", "int", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.get_tokens", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.get_tokens"], ["", "def", "compute_f1", "(", "a_gold", ",", "a_pred", ")", ":", "\n", "    ", "gold_toks", "=", "get_tokens", "(", "a_gold", ")", "\n", "pred_toks", "=", "get_tokens", "(", "a_pred", ")", "\n", "common", "=", "collections", ".", "Counter", "(", "gold_toks", ")", "&", "collections", ".", "Counter", "(", "pred_toks", ")", "\n", "num_same", "=", "sum", "(", "common", ".", "values", "(", ")", ")", "\n", "if", "len", "(", "gold_toks", ")", "==", "0", "or", "len", "(", "pred_toks", ")", "==", "0", ":", "\n", "# If either is no-answer, then F1 is 1 if they agree, 0 otherwise", "\n", "        ", "return", "int", "(", "gold_toks", "==", "pred_toks", ")", "\n", "", "if", "num_same", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "precision", "=", "1.0", "*", "num_same", "/", "len", "(", "pred_toks", ")", "\n", "recall", "=", "1.0", "*", "num_same", "/", "len", "(", "gold_toks", ")", "\n", "f1", "=", "(", "2", "*", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", ")", "\n", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.get_raw_scores": [[69, 93], ["max", "max", "print", "squad_metrics.normalize_answer", "squad_metrics.compute_exact", "squad_metrics.compute_f1"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.normalize_answer", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.compute_exact", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.compute_f1"], ["", "def", "get_raw_scores", "(", "examples", ",", "preds", ")", ":", "\n", "    ", "\"\"\"\n    Computes the exact and f1 scores from the examples and the model predictions\n    \"\"\"", "\n", "exact_scores", "=", "{", "}", "\n", "f1_scores", "=", "{", "}", "\n", "\n", "for", "example", "in", "examples", ":", "\n", "        ", "qas_id", "=", "example", ".", "qas_id", "\n", "gold_answers", "=", "[", "answer", "[", "'text'", "]", "for", "answer", "in", "example", ".", "answers", "if", "normalize_answer", "(", "answer", "[", "'text'", "]", ")", "]", "\n", "\n", "if", "not", "gold_answers", ":", "\n", "# For unanswerable questions, only correct answer is empty string", "\n", "            ", "gold_answers", "=", "[", "''", "]", "\n", "\n", "", "if", "qas_id", "not", "in", "preds", ":", "\n", "            ", "print", "(", "'Missing prediction for %s'", "%", "qas_id", ")", "\n", "continue", "\n", "\n", "", "prediction", "=", "preds", "[", "qas_id", "]", "\n", "exact_scores", "[", "qas_id", "]", "=", "max", "(", "compute_exact", "(", "a", ",", "prediction", ")", "for", "a", "in", "gold_answers", ")", "\n", "f1_scores", "[", "qas_id", "]", "=", "max", "(", "compute_f1", "(", "a", ",", "prediction", ")", "for", "a", "in", "gold_answers", ")", "\n", "\n", "", "return", "exact_scores", ",", "f1_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.apply_no_ans_threshold": [[95, 104], ["scores.items", "float"], "function", ["None"], ["", "def", "apply_no_ans_threshold", "(", "scores", ",", "na_probs", ",", "qid_to_has_ans", ",", "na_prob_thresh", ")", ":", "\n", "    ", "new_scores", "=", "{", "}", "\n", "for", "qid", ",", "s", "in", "scores", ".", "items", "(", ")", ":", "\n", "        ", "pred_na", "=", "na_probs", "[", "qid", "]", ">", "na_prob_thresh", "\n", "if", "pred_na", ":", "\n", "            ", "new_scores", "[", "qid", "]", "=", "float", "(", "not", "qid_to_has_ans", "[", "qid", "]", ")", "\n", "", "else", ":", "\n", "            ", "new_scores", "[", "qid", "]", "=", "s", "\n", "", "", "return", "new_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.make_eval_dict": [[106, 120], ["len", "collections.OrderedDict", "len", "collections.OrderedDict", "sum", "sum", "sum", "sum", "exact_scores.values", "f1_scores.values"], "function", ["None"], ["", "def", "make_eval_dict", "(", "exact_scores", ",", "f1_scores", ",", "qid_list", "=", "None", ")", ":", "\n", "    ", "if", "not", "qid_list", ":", "\n", "        ", "total", "=", "len", "(", "exact_scores", ")", "\n", "return", "collections", ".", "OrderedDict", "(", "[", "\n", "(", "'exact'", ",", "100.0", "*", "sum", "(", "exact_scores", ".", "values", "(", ")", ")", "/", "total", ")", ",", "\n", "(", "'f1'", ",", "100.0", "*", "sum", "(", "f1_scores", ".", "values", "(", ")", ")", "/", "total", ")", ",", "\n", "(", "'total'", ",", "total", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "        ", "total", "=", "len", "(", "qid_list", ")", "\n", "return", "collections", ".", "OrderedDict", "(", "[", "\n", "(", "'exact'", ",", "100.0", "*", "sum", "(", "exact_scores", "[", "k", "]", "for", "k", "in", "qid_list", ")", "/", "total", ")", ",", "\n", "(", "'f1'", ",", "100.0", "*", "sum", "(", "f1_scores", "[", "k", "]", "for", "k", "in", "qid_list", ")", "/", "total", ")", ",", "\n", "(", "'total'", ",", "total", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.merge_eval": [[123, 126], ["None"], "function", ["None"], ["", "", "def", "merge_eval", "(", "main_eval", ",", "new_eval", ",", "prefix", ")", ":", "\n", "    ", "for", "k", "in", "new_eval", ":", "\n", "        ", "main_eval", "[", "'%s_%s'", "%", "(", "prefix", ",", "k", ")", "]", "=", "new_eval", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.find_best_thresh_v2": [[128, 160], ["sum", "sorted", "enumerate", "len"], "function", ["None"], ["", "", "def", "find_best_thresh_v2", "(", "preds", ",", "scores", ",", "na_probs", ",", "qid_to_has_ans", ")", ":", "\n", "    ", "num_no_ans", "=", "sum", "(", "1", "for", "k", "in", "qid_to_has_ans", "if", "not", "qid_to_has_ans", "[", "k", "]", ")", "\n", "cur_score", "=", "num_no_ans", "\n", "best_score", "=", "cur_score", "\n", "best_thresh", "=", "0.0", "\n", "qid_list", "=", "sorted", "(", "na_probs", ",", "key", "=", "lambda", "k", ":", "na_probs", "[", "k", "]", ")", "\n", "for", "i", ",", "qid", "in", "enumerate", "(", "qid_list", ")", ":", "\n", "        ", "if", "qid", "not", "in", "scores", ":", "\n", "            ", "continue", "\n", "", "if", "qid_to_has_ans", "[", "qid", "]", ":", "\n", "            ", "diff", "=", "scores", "[", "qid", "]", "\n", "", "else", ":", "\n", "            ", "if", "preds", "[", "qid", "]", ":", "\n", "                ", "diff", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "diff", "=", "0", "\n", "", "", "cur_score", "+=", "diff", "\n", "if", "cur_score", ">", "best_score", ":", "\n", "            ", "best_score", "=", "cur_score", "\n", "best_thresh", "=", "na_probs", "[", "qid", "]", "\n", "\n", "", "", "has_ans_score", ",", "has_ans_cnt", "=", "0", ",", "0", "\n", "for", "qid", "in", "qid_list", ":", "\n", "        ", "if", "not", "qid_to_has_ans", "[", "qid", "]", ":", "\n", "            ", "continue", "\n", "", "has_ans_cnt", "+=", "1", "\n", "\n", "if", "qid", "not", "in", "scores", ":", "\n", "            ", "continue", "\n", "", "has_ans_score", "+=", "scores", "[", "qid", "]", "\n", "\n", "", "return", "100.0", "*", "best_score", "/", "len", "(", "scores", ")", ",", "best_thresh", ",", "1.0", "*", "has_ans_score", "/", "has_ans_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.find_all_best_thresh_v2": [[162, 173], ["squad_metrics.find_best_thresh_v2", "squad_metrics.find_best_thresh_v2"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.find_best_thresh_v2", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.find_best_thresh_v2"], ["", "def", "find_all_best_thresh_v2", "(", "main_eval", ",", "preds", ",", "exact_raw", ",", "f1_raw", ",", "na_probs", ",", "qid_to_has_ans", ")", ":", "\n", "    ", "best_exact", ",", "exact_thresh", ",", "has_ans_exact", "=", "find_best_thresh_v2", "(", "\n", "preds", ",", "exact_raw", ",", "na_probs", ",", "qid_to_has_ans", ")", "\n", "best_f1", ",", "f1_thresh", ",", "has_ans_f1", "=", "find_best_thresh_v2", "(", "\n", "preds", ",", "f1_raw", ",", "na_probs", ",", "qid_to_has_ans", ")", "\n", "main_eval", "[", "'best_exact'", "]", "=", "best_exact", "\n", "main_eval", "[", "'best_exact_thresh'", "]", "=", "exact_thresh", "\n", "main_eval", "[", "'best_f1'", "]", "=", "best_f1", "\n", "main_eval", "[", "'best_f1_thresh'", "]", "=", "f1_thresh", "\n", "main_eval", "[", "'has_ans_exact'", "]", "=", "has_ans_exact", "\n", "main_eval", "[", "'has_ans_f1'", "]", "=", "has_ans_f1", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.find_best_thresh": [[175, 196], ["sum", "sorted", "enumerate", "len"], "function", ["None"], ["", "def", "find_best_thresh", "(", "preds", ",", "scores", ",", "na_probs", ",", "qid_to_has_ans", ")", ":", "\n", "    ", "num_no_ans", "=", "sum", "(", "1", "for", "k", "in", "qid_to_has_ans", "if", "not", "qid_to_has_ans", "[", "k", "]", ")", "\n", "cur_score", "=", "num_no_ans", "\n", "best_score", "=", "cur_score", "\n", "best_thresh", "=", "0.0", "\n", "qid_list", "=", "sorted", "(", "na_probs", ",", "key", "=", "lambda", "k", ":", "na_probs", "[", "k", "]", ")", "\n", "for", "_", ",", "qid", "in", "enumerate", "(", "qid_list", ")", ":", "\n", "        ", "if", "qid", "not", "in", "scores", ":", "\n", "            ", "continue", "\n", "", "if", "qid_to_has_ans", "[", "qid", "]", ":", "\n", "            ", "diff", "=", "scores", "[", "qid", "]", "\n", "", "else", ":", "\n", "            ", "if", "preds", "[", "qid", "]", ":", "\n", "                ", "diff", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "diff", "=", "0", "\n", "", "", "cur_score", "+=", "diff", "\n", "if", "cur_score", ">", "best_score", ":", "\n", "            ", "best_score", "=", "cur_score", "\n", "best_thresh", "=", "na_probs", "[", "qid", "]", "\n", "", "", "return", "100.0", "*", "best_score", "/", "len", "(", "scores", ")", ",", "best_thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.find_all_best_thresh": [[198, 206], ["squad_metrics.find_best_thresh", "squad_metrics.find_best_thresh"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.find_best_thresh", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.find_best_thresh"], ["", "def", "find_all_best_thresh", "(", "main_eval", ",", "preds", ",", "exact_raw", ",", "f1_raw", ",", "na_probs", ",", "qid_to_has_ans", ")", ":", "\n", "    ", "best_exact", ",", "exact_thresh", "=", "find_best_thresh", "(", "preds", ",", "exact_raw", ",", "na_probs", ",", "qid_to_has_ans", ")", "\n", "best_f1", ",", "f1_thresh", "=", "find_best_thresh", "(", "preds", ",", "f1_raw", ",", "na_probs", ",", "qid_to_has_ans", ")", "\n", "\n", "main_eval", "[", "'best_exact'", "]", "=", "best_exact", "\n", "main_eval", "[", "'best_exact_thresh'", "]", "=", "exact_thresh", "\n", "main_eval", "[", "'best_f1'", "]", "=", "best_f1", "\n", "main_eval", "[", "'best_f1_thresh'", "]", "=", "f1_thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.squad_evaluate": [[208, 235], ["squad_metrics.get_raw_scores", "squad_metrics.apply_no_ans_threshold", "squad_metrics.apply_no_ans_threshold", "squad_metrics.make_eval_dict", "bool", "squad_metrics.make_eval_dict", "squad_metrics.merge_eval", "squad_metrics.make_eval_dict", "squad_metrics.merge_eval", "squad_metrics.find_all_best_thresh", "qas_id_to_has_answer.items", "qas_id_to_has_answer.items"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.get_raw_scores", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.apply_no_ans_threshold", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.apply_no_ans_threshold", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.make_eval_dict", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.make_eval_dict", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.merge_eval", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.make_eval_dict", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.merge_eval", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.find_all_best_thresh"], ["", "def", "squad_evaluate", "(", "examples", ",", "preds", ",", "no_answer_probs", "=", "None", ",", "no_answer_probability_threshold", "=", "1.0", ")", ":", "\n", "    ", "qas_id_to_has_answer", "=", "{", "example", ".", "qas_id", ":", "bool", "(", "example", ".", "answers", ")", "for", "example", "in", "examples", "}", "\n", "has_answer_qids", "=", "[", "qas_id", "for", "qas_id", ",", "has_answer", "in", "qas_id_to_has_answer", ".", "items", "(", ")", "if", "has_answer", "]", "\n", "no_answer_qids", "=", "[", "qas_id", "for", "qas_id", ",", "has_answer", "in", "qas_id_to_has_answer", ".", "items", "(", ")", "if", "not", "has_answer", "]", "\n", "\n", "if", "no_answer_probs", "is", "None", ":", "\n", "        ", "no_answer_probs", "=", "{", "k", ":", "0.0", "for", "k", "in", "preds", "}", "\n", "\n", "", "exact", ",", "f1", "=", "get_raw_scores", "(", "examples", ",", "preds", ")", "\n", "\n", "exact_threshold", "=", "apply_no_ans_threshold", "(", "exact", ",", "no_answer_probs", ",", "qas_id_to_has_answer", ",", "no_answer_probability_threshold", ")", "\n", "f1_threshold", "=", "apply_no_ans_threshold", "(", "f1", ",", "no_answer_probs", ",", "qas_id_to_has_answer", ",", "no_answer_probability_threshold", ")", "\n", "\n", "evaluation", "=", "make_eval_dict", "(", "exact_threshold", ",", "f1_threshold", ")", "\n", "\n", "if", "has_answer_qids", ":", "\n", "        ", "has_ans_eval", "=", "make_eval_dict", "(", "exact_threshold", ",", "f1_threshold", ",", "qid_list", "=", "has_answer_qids", ")", "\n", "merge_eval", "(", "evaluation", ",", "has_ans_eval", ",", "'HasAns'", ")", "\n", "\n", "", "if", "no_answer_qids", ":", "\n", "        ", "no_ans_eval", "=", "make_eval_dict", "(", "exact_threshold", ",", "f1_threshold", ",", "qid_list", "=", "no_answer_qids", ")", "\n", "merge_eval", "(", "evaluation", ",", "no_ans_eval", ",", "'NoAns'", ")", "\n", "\n", "", "if", "no_answer_probs", ":", "\n", "        ", "find_all_best_thresh", "(", "evaluation", ",", "preds", ",", "exact", ",", "f1", ",", "no_answer_probs", ",", "qas_id_to_has_answer", ")", "\n", "\n", "", "return", "evaluation", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.get_final_text": [[237, 331], ["transformers.tokenization_bert.BasicTokenizer", "tok_text.find", "squad_metrics.get_final_text._strip_spaces"], "function", ["None"], ["", "def", "get_final_text", "(", "pred_text", ",", "orig_text", ",", "do_lower_case", ",", "verbose_logging", "=", "False", ")", ":", "\n", "    ", "\"\"\"Project the tokenized prediction back to the original text.\"\"\"", "\n", "\n", "# When we created the data, we kept track of the alignment between original", "\n", "# (whitespace tokenized) tokens and our WordPiece tokenized tokens. So", "\n", "# now `orig_text` contains the span of our original text corresponding to the", "\n", "# span that we predicted.", "\n", "#", "\n", "# However, `orig_text` may contain extra characters that we don't want in", "\n", "# our prediction.", "\n", "#", "\n", "# For example, let's say:", "\n", "#   pred_text = steve smith", "\n", "#   orig_text = Steve Smith's", "\n", "#", "\n", "# We don't want to return `orig_text` because it contains the extra \"'s\".", "\n", "#", "\n", "# We don't want to return `pred_text` because it's already been normalized", "\n", "# (the SQuAD eval script also does punctuation stripping/lower casing but", "\n", "# our tokenizer does additional normalization like stripping accent", "\n", "# characters).", "\n", "#", "\n", "# What we really want to return is \"Steve Smith\".", "\n", "#", "\n", "# Therefore, we have to apply a semi-complicated alignment heuristic between", "\n", "# `pred_text` and `orig_text` to get a character-to-character alignment. This", "\n", "# can fail in certain cases in which case we just return `orig_text`.", "\n", "\n", "def", "_strip_spaces", "(", "text", ")", ":", "\n", "        ", "ns_chars", "=", "[", "]", "\n", "ns_to_s_map", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "(", "i", ",", "c", ")", "in", "enumerate", "(", "text", ")", ":", "\n", "            ", "if", "c", "==", "\" \"", ":", "\n", "                ", "continue", "\n", "", "ns_to_s_map", "[", "len", "(", "ns_chars", ")", "]", "=", "i", "\n", "ns_chars", ".", "append", "(", "c", ")", "\n", "", "ns_text", "=", "\"\"", ".", "join", "(", "ns_chars", ")", "\n", "return", "(", "ns_text", ",", "ns_to_s_map", ")", "\n", "\n", "# We first tokenize `orig_text`, strip whitespace from the result", "\n", "# and `pred_text`, and check if they are the same length. If they are", "\n", "# NOT the same length, the heuristic has failed. If they are the same", "\n", "# length, we assume the characters are one-to-one aligned.", "\n", "", "tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ")", "\n", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tokenizer", ".", "tokenize", "(", "orig_text", ")", ")", "\n", "\n", "start_position", "=", "tok_text", ".", "find", "(", "pred_text", ")", "\n", "if", "start_position", "==", "-", "1", ":", "\n", "        ", "if", "verbose_logging", ":", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Unable to find text: '%s' in '%s'\"", "%", "(", "pred_text", ",", "orig_text", ")", ")", "\n", "", "return", "orig_text", "\n", "", "end_position", "=", "start_position", "+", "len", "(", "pred_text", ")", "-", "1", "\n", "\n", "(", "orig_ns_text", ",", "orig_ns_to_s_map", ")", "=", "_strip_spaces", "(", "orig_text", ")", "\n", "(", "tok_ns_text", ",", "tok_ns_to_s_map", ")", "=", "_strip_spaces", "(", "tok_text", ")", "\n", "\n", "if", "len", "(", "orig_ns_text", ")", "!=", "len", "(", "tok_ns_text", ")", ":", "\n", "        ", "if", "verbose_logging", ":", "\n", "            ", "logger", ".", "info", "(", "\"Length not equal after stripping spaces: '%s' vs '%s'\"", ",", "\n", "orig_ns_text", ",", "tok_ns_text", ")", "\n", "", "return", "orig_text", "\n", "\n", "# We then project the characters in `pred_text` back to `orig_text` using", "\n", "# the character-to-character alignment.", "\n", "", "tok_s_to_ns_map", "=", "{", "}", "\n", "for", "(", "i", ",", "tok_index", ")", "in", "tok_ns_to_s_map", ".", "items", "(", ")", ":", "\n", "        ", "tok_s_to_ns_map", "[", "tok_index", "]", "=", "i", "\n", "\n", "", "orig_start_position", "=", "None", "\n", "if", "start_position", "in", "tok_s_to_ns_map", ":", "\n", "        ", "ns_start_position", "=", "tok_s_to_ns_map", "[", "start_position", "]", "\n", "if", "ns_start_position", "in", "orig_ns_to_s_map", ":", "\n", "            ", "orig_start_position", "=", "orig_ns_to_s_map", "[", "ns_start_position", "]", "\n", "\n", "", "", "if", "orig_start_position", "is", "None", ":", "\n", "        ", "if", "verbose_logging", ":", "\n", "            ", "logger", ".", "info", "(", "\"Couldn't map start position\"", ")", "\n", "", "return", "orig_text", "\n", "\n", "", "orig_end_position", "=", "None", "\n", "if", "end_position", "in", "tok_s_to_ns_map", ":", "\n", "        ", "ns_end_position", "=", "tok_s_to_ns_map", "[", "end_position", "]", "\n", "if", "ns_end_position", "in", "orig_ns_to_s_map", ":", "\n", "            ", "orig_end_position", "=", "orig_ns_to_s_map", "[", "ns_end_position", "]", "\n", "\n", "", "", "if", "orig_end_position", "is", "None", ":", "\n", "        ", "if", "verbose_logging", ":", "\n", "            ", "logger", ".", "info", "(", "\"Couldn't map end position\"", ")", "\n", "", "return", "orig_text", "\n", "\n", "", "output_text", "=", "orig_text", "[", "orig_start_position", ":", "(", "orig_end_position", "+", "1", ")", "]", "\n", "return", "output_text", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics._get_best_indexes": [[333, 343], ["sorted", "range", "enumerate", "len", "best_indexes.append"], "function", ["None"], ["", "def", "_get_best_indexes", "(", "logits", ",", "n_best_size", ")", ":", "\n", "    ", "\"\"\"Get the n-best logits from a list.\"\"\"", "\n", "index_and_score", "=", "sorted", "(", "enumerate", "(", "logits", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "best_indexes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "index_and_score", ")", ")", ":", "\n", "        ", "if", "i", ">=", "n_best_size", ":", "\n", "            ", "break", "\n", "", "best_indexes", ".", "append", "(", "index_and_score", "[", "i", "]", "[", "0", "]", ")", "\n", "", "return", "best_indexes", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics._compute_softmax": [[345, 366], ["math.exp", "exp_scores.append", "probs.append"], "function", ["None"], ["", "def", "_compute_softmax", "(", "scores", ")", ":", "\n", "    ", "\"\"\"Compute softmax probability over raw logits.\"\"\"", "\n", "if", "not", "scores", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "max_score", "=", "None", "\n", "for", "score", "in", "scores", ":", "\n", "        ", "if", "max_score", "is", "None", "or", "score", ">", "max_score", ":", "\n", "            ", "max_score", "=", "score", "\n", "\n", "", "", "exp_scores", "=", "[", "]", "\n", "total_sum", "=", "0.0", "\n", "for", "score", "in", "scores", ":", "\n", "        ", "x", "=", "math", ".", "exp", "(", "score", "-", "max_score", ")", "\n", "exp_scores", ".", "append", "(", "x", ")", "\n", "total_sum", "+=", "x", "\n", "\n", "", "probs", "=", "[", "]", "\n", "for", "score", "in", "exp_scores", ":", "\n", "        ", "probs", ".", "append", "(", "score", "/", "total_sum", ")", "\n", "", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.compute_predictions_logits": [[368, 570], ["logger.info", "logger.info", "collections.defaultdict", "collections.namedtuple", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "example_index_to_features[].append", "enumerate", "sorted", "collections.namedtuple", "squad_metrics._compute_softmax", "enumerate", "io.open", "writer.write", "io.open", "writer.write", "squad_metrics._get_best_indexes", "squad_metrics._get_best_indexes", "sorted.append", "nbest.append", "nbest.append", "len", "total_scores.append", "collections.OrderedDict", "nbest_json.append", "len", "io.open", "writer.write", "collections.namedtuple.", "len", "tok_text.strip.replace", "tok_text.strip.replace", "tok_text.strip.strip", "squad_metrics.get_final_text", "collections.namedtuple.", "nbest.append", "len", "nbest.insert", "collections.namedtuple.", "json.dumps", "json.dumps", "sorted.append", "tok_text.strip.split", "collections.namedtuple.", "collections.namedtuple.", "json.dumps", "len", "len", "feature.token_is_max_context.get", "collections.namedtuple."], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics._compute_softmax", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics._get_best_indexes", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics._get_best_indexes", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.get_final_text"], ["", "def", "compute_predictions_logits", "(", "\n", "all_examples", ",", "\n", "all_features", ",", "\n", "all_results", ",", "\n", "n_best_size", ",", "\n", "max_answer_length", ",", "\n", "do_lower_case", ",", "\n", "output_prediction_file", ",", "\n", "output_nbest_file", ",", "\n", "output_null_log_odds_file", ",", "\n", "verbose_logging", ",", "\n", "version_2_with_negative", ",", "\n", "null_score_diff_threshold", "\n", ")", ":", "\n", "    ", "\"\"\"Write final predictions to the json file and log-odds of null if needed.\"\"\"", "\n", "logger", ".", "info", "(", "\"Writing predictions to: %s\"", "%", "(", "output_prediction_file", ")", ")", "\n", "logger", ".", "info", "(", "\"Writing nbest to: %s\"", "%", "(", "output_nbest_file", ")", ")", "\n", "\n", "example_index_to_features", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "feature", "in", "all_features", ":", "\n", "        ", "example_index_to_features", "[", "feature", ".", "example_index", "]", ".", "append", "(", "feature", ")", "\n", "\n", "", "unique_id_to_result", "=", "{", "}", "\n", "for", "result", "in", "all_results", ":", "\n", "        ", "unique_id_to_result", "[", "result", ".", "unique_id", "]", "=", "result", "\n", "\n", "", "_PrelimPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"PrelimPrediction\"", ",", "\n", "[", "\"feature_index\"", ",", "\"start_index\"", ",", "\"end_index\"", ",", "\"start_logit\"", ",", "\"end_logit\"", "]", ")", "\n", "\n", "all_predictions", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "all_nbest_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "scores_diff_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "for", "(", "example_index", ",", "example", ")", "in", "enumerate", "(", "all_examples", ")", ":", "\n", "        ", "features", "=", "example_index_to_features", "[", "example_index", "]", "\n", "\n", "prelim_predictions", "=", "[", "]", "\n", "# keep track of the minimum score of null start+end of position 0", "\n", "score_null", "=", "1000000", "# large and positive", "\n", "min_null_feature_index", "=", "0", "# the paragraph slice with min null score", "\n", "null_start_logit", "=", "0", "# the start logit at the slice with min null score", "\n", "null_end_logit", "=", "0", "# the end logit at the slice with min null score", "\n", "for", "(", "feature_index", ",", "feature", ")", "in", "enumerate", "(", "features", ")", ":", "\n", "            ", "result", "=", "unique_id_to_result", "[", "feature", ".", "unique_id", "]", "\n", "start_indexes", "=", "_get_best_indexes", "(", "result", ".", "start_logits", ",", "n_best_size", ")", "\n", "end_indexes", "=", "_get_best_indexes", "(", "result", ".", "end_logits", ",", "n_best_size", ")", "\n", "# if we could have irrelevant answers, get the min score of irrelevant", "\n", "if", "version_2_with_negative", ":", "\n", "                ", "feature_null_score", "=", "result", ".", "start_logits", "[", "0", "]", "+", "result", ".", "end_logits", "[", "0", "]", "\n", "if", "feature_null_score", "<", "score_null", ":", "\n", "                    ", "score_null", "=", "feature_null_score", "\n", "min_null_feature_index", "=", "feature_index", "\n", "null_start_logit", "=", "result", ".", "start_logits", "[", "0", "]", "\n", "null_end_logit", "=", "result", ".", "end_logits", "[", "0", "]", "\n", "", "", "for", "start_index", "in", "start_indexes", ":", "\n", "                ", "for", "end_index", "in", "end_indexes", ":", "\n", "# We could hypothetically create invalid predictions, e.g., predict", "\n", "# that the start of the span is in the question. We throw out all", "\n", "# invalid predictions.", "\n", "                    ", "if", "start_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "end_index", ">=", "len", "(", "feature", ".", "tokens", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "start_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "                        ", "continue", "\n", "", "if", "end_index", "not", "in", "feature", ".", "token_to_orig_map", ":", "\n", "                        ", "continue", "\n", "", "if", "not", "feature", ".", "token_is_max_context", ".", "get", "(", "start_index", ",", "False", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "end_index", "<", "start_index", ":", "\n", "                        ", "continue", "\n", "", "length", "=", "end_index", "-", "start_index", "+", "1", "\n", "if", "length", ">", "max_answer_length", ":", "\n", "                        ", "continue", "\n", "", "prelim_predictions", ".", "append", "(", "\n", "_PrelimPrediction", "(", "\n", "feature_index", "=", "feature_index", ",", "\n", "start_index", "=", "start_index", ",", "\n", "end_index", "=", "end_index", ",", "\n", "start_logit", "=", "result", ".", "start_logits", "[", "start_index", "]", ",", "\n", "end_logit", "=", "result", ".", "end_logits", "[", "end_index", "]", ")", ")", "\n", "", "", "", "if", "version_2_with_negative", ":", "\n", "            ", "prelim_predictions", ".", "append", "(", "\n", "_PrelimPrediction", "(", "\n", "feature_index", "=", "min_null_feature_index", ",", "\n", "start_index", "=", "0", ",", "\n", "end_index", "=", "0", ",", "\n", "start_logit", "=", "null_start_logit", ",", "\n", "end_logit", "=", "null_end_logit", ")", ")", "\n", "", "prelim_predictions", "=", "sorted", "(", "\n", "prelim_predictions", ",", "\n", "key", "=", "lambda", "x", ":", "(", "x", ".", "start_logit", "+", "x", ".", "end_logit", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "\n", "_NbestPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"NbestPrediction\"", ",", "[", "\"text\"", ",", "\"start_logit\"", ",", "\"end_logit\"", "]", ")", "\n", "\n", "seen_predictions", "=", "{", "}", "\n", "nbest", "=", "[", "]", "\n", "for", "pred", "in", "prelim_predictions", ":", "\n", "            ", "if", "len", "(", "nbest", ")", ">=", "n_best_size", ":", "\n", "                ", "break", "\n", "", "feature", "=", "features", "[", "pred", ".", "feature_index", "]", "\n", "if", "pred", ".", "start_index", ">", "0", ":", "# this is a non-null prediction", "\n", "                ", "tok_tokens", "=", "feature", ".", "tokens", "[", "pred", ".", "start_index", ":", "(", "pred", ".", "end_index", "+", "1", ")", "]", "\n", "orig_doc_start", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "start_index", "]", "\n", "orig_doc_end", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "end_index", "]", "\n", "orig_tokens", "=", "example", ".", "doc_tokens", "[", "orig_doc_start", ":", "(", "orig_doc_end", "+", "1", ")", "]", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_tokens", ")", "\n", "\n", "# De-tokenize WordPieces that have been split off.", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\" ##\"", ",", "\"\"", ")", "\n", "tok_text", "=", "tok_text", ".", "replace", "(", "\"##\"", ",", "\"\"", ")", "\n", "\n", "# Clean whitespace", "\n", "tok_text", "=", "tok_text", ".", "strip", "(", ")", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_text", ".", "split", "(", ")", ")", "\n", "orig_text", "=", "\" \"", ".", "join", "(", "orig_tokens", ")", "\n", "\n", "final_text", "=", "get_final_text", "(", "tok_text", ",", "orig_text", ",", "do_lower_case", ",", "verbose_logging", ")", "\n", "if", "final_text", "in", "seen_predictions", ":", "\n", "                    ", "continue", "\n", "\n", "", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "", "else", ":", "\n", "                ", "final_text", "=", "\"\"", "\n", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "\n", "", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "final_text", ",", "\n", "start_logit", "=", "pred", ".", "start_logit", ",", "\n", "end_logit", "=", "pred", ".", "end_logit", ")", ")", "\n", "# if we didn't include the empty option in the n-best, include it", "\n", "", "if", "version_2_with_negative", ":", "\n", "            ", "if", "\"\"", "not", "in", "seen_predictions", ":", "\n", "                ", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "\"\"", ",", "\n", "start_logit", "=", "null_start_logit", ",", "\n", "end_logit", "=", "null_end_logit", ")", ")", "\n", "\n", "# In very rare edge cases we could only have single null prediction.", "\n", "# So we just create a nonce prediction in this case to avoid failure.", "\n", "", "if", "len", "(", "nbest", ")", "==", "1", ":", "\n", "                ", "nbest", ".", "insert", "(", "0", ",", "\n", "_NbestPrediction", "(", "text", "=", "\"empty\"", ",", "start_logit", "=", "0.0", ",", "end_logit", "=", "0.0", ")", ")", "\n", "\n", "# In very rare edge cases we could have no valid predictions. So we", "\n", "# just create a nonce prediction in this case to avoid failure.", "\n", "", "", "if", "not", "nbest", ":", "\n", "            ", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "text", "=", "\"empty\"", ",", "start_logit", "=", "0.0", ",", "end_logit", "=", "0.0", ")", ")", "\n", "\n", "", "assert", "len", "(", "nbest", ")", ">=", "1", "\n", "\n", "total_scores", "=", "[", "]", "\n", "best_non_null_entry", "=", "None", "\n", "for", "entry", "in", "nbest", ":", "\n", "            ", "total_scores", ".", "append", "(", "entry", ".", "start_logit", "+", "entry", ".", "end_logit", ")", "\n", "if", "not", "best_non_null_entry", ":", "\n", "                ", "if", "entry", ".", "text", ":", "\n", "                    ", "best_non_null_entry", "=", "entry", "\n", "\n", "", "", "", "probs", "=", "_compute_softmax", "(", "total_scores", ")", "\n", "\n", "nbest_json", "=", "[", "]", "\n", "for", "(", "i", ",", "entry", ")", "in", "enumerate", "(", "nbest", ")", ":", "\n", "            ", "output", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "output", "[", "\"text\"", "]", "=", "entry", ".", "text", "\n", "output", "[", "\"probability\"", "]", "=", "probs", "[", "i", "]", "\n", "output", "[", "\"start_logit\"", "]", "=", "entry", ".", "start_logit", "\n", "output", "[", "\"end_logit\"", "]", "=", "entry", ".", "end_logit", "\n", "nbest_json", ".", "append", "(", "output", ")", "\n", "\n", "", "assert", "len", "(", "nbest_json", ")", ">=", "1", "\n", "\n", "if", "not", "version_2_with_negative", ":", "\n", "            ", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "[", "0", "]", "[", "\"text\"", "]", "\n", "", "else", ":", "\n", "# predict \"\" iff the null score - the score of best non-null > threshold", "\n", "            ", "score_diff", "=", "score_null", "-", "best_non_null_entry", ".", "start_logit", "-", "(", "\n", "best_non_null_entry", ".", "end_logit", ")", "\n", "scores_diff_json", "[", "example", ".", "qas_id", "]", "=", "score_diff", "\n", "if", "score_diff", ">", "null_score_diff_threshold", ":", "\n", "                ", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "\"\"", "\n", "", "else", ":", "\n", "                ", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "best_non_null_entry", ".", "text", "\n", "", "", "all_nbest_json", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "\n", "\n", "", "with", "open", "(", "output_prediction_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "        ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_predictions", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "with", "open", "(", "output_nbest_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "        ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_nbest_json", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "if", "version_2_with_negative", ":", "\n", "        ", "with", "open", "(", "output_null_log_odds_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "scores_diff_json", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "", "return", "all_predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.compute_predictions_log_probs": [[572, 764], ["collections.namedtuple", "collections.namedtuple", "logger.info", "collections.defaultdict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "enumerate", "example_index_to_features[].append", "enumerate", "sorted", "squad_metrics._compute_softmax", "enumerate", "io.open", "writer.write", "io.open", "writer.write", "min", "range", "tokenizer.convert_tokens_to_string", "tok_text.strip.strip", "hasattr", "squad_metrics.get_final_text", "nbest.append", "nbest.append", "total_scores.append", "collections.OrderedDict", "nbest_json.append", "len", "io.open", "writer.write", "range", "len", "tok_text.strip.split", "collections.namedtuple.", "collections.namedtuple.", "json.dumps", "json.dumps", "sorted.append", "json.dumps", "feature.token_is_max_context.get", "collections.namedtuple."], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics._compute_softmax", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.convert_tokens_to_string", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.metrics.squad_metrics.get_final_text"], ["", "def", "compute_predictions_log_probs", "(", "\n", "all_examples", ",", "\n", "all_features", ",", "\n", "all_results", ",", "\n", "n_best_size", ",", "\n", "max_answer_length", ",", "\n", "output_prediction_file", ",", "\n", "output_nbest_file", ",", "\n", "output_null_log_odds_file", ",", "\n", "start_n_top", ",", "\n", "end_n_top", ",", "\n", "version_2_with_negative", ",", "\n", "tokenizer", ",", "\n", "verbose_logging", "\n", ")", ":", "\n", "    ", "\"\"\" XLNet write prediction logic (more complex than Bert's).\n        Write final predictions to the json file and log-odds of null if needed.\n\n        Requires utils_squad_evaluate.py\n    \"\"\"", "\n", "_PrelimPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"PrelimPrediction\"", ",", "\n", "[", "\"feature_index\"", ",", "\"start_index\"", ",", "\"end_index\"", ",", "\n", "\"start_log_prob\"", ",", "\"end_log_prob\"", "]", ")", "\n", "\n", "_NbestPrediction", "=", "collections", ".", "namedtuple", "(", "# pylint: disable=invalid-name", "\n", "\"NbestPrediction\"", ",", "[", "\"text\"", ",", "\"start_log_prob\"", ",", "\"end_log_prob\"", "]", ")", "\n", "\n", "logger", ".", "info", "(", "\"Writing predictions to: %s\"", ",", "output_prediction_file", ")", "\n", "# logger.info(\"Writing nbest to: %s\" % (output_nbest_file))", "\n", "\n", "example_index_to_features", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "feature", "in", "all_features", ":", "\n", "        ", "example_index_to_features", "[", "feature", ".", "example_index", "]", ".", "append", "(", "feature", ")", "\n", "\n", "", "unique_id_to_result", "=", "{", "}", "\n", "for", "result", "in", "all_results", ":", "\n", "        ", "unique_id_to_result", "[", "result", ".", "unique_id", "]", "=", "result", "\n", "\n", "", "all_predictions", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "all_nbest_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "scores_diff_json", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "\n", "for", "(", "example_index", ",", "example", ")", "in", "enumerate", "(", "all_examples", ")", ":", "\n", "        ", "features", "=", "example_index_to_features", "[", "example_index", "]", "\n", "\n", "prelim_predictions", "=", "[", "]", "\n", "# keep track of the minimum score of null start+end of position 0", "\n", "score_null", "=", "1000000", "# large and positive", "\n", "\n", "for", "(", "feature_index", ",", "feature", ")", "in", "enumerate", "(", "features", ")", ":", "\n", "            ", "result", "=", "unique_id_to_result", "[", "feature", ".", "unique_id", "]", "\n", "\n", "cur_null_score", "=", "result", ".", "cls_logits", "\n", "\n", "# if we could have irrelevant answers, get the min score of irrelevant", "\n", "score_null", "=", "min", "(", "score_null", ",", "cur_null_score", ")", "\n", "\n", "for", "i", "in", "range", "(", "start_n_top", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "end_n_top", ")", ":", "\n", "                    ", "start_log_prob", "=", "result", ".", "start_logits", "[", "i", "]", "\n", "start_index", "=", "result", ".", "start_top_index", "[", "i", "]", "\n", "\n", "j_index", "=", "i", "*", "end_n_top", "+", "j", "\n", "\n", "end_log_prob", "=", "result", ".", "end_logits", "[", "j_index", "]", "\n", "end_index", "=", "result", ".", "end_top_index", "[", "j_index", "]", "\n", "\n", "# We could hypothetically create invalid predictions, e.g., predict", "\n", "# that the start of the span is in the question. We throw out all", "\n", "# invalid predictions.", "\n", "if", "start_index", ">=", "feature", ".", "paragraph_len", "-", "1", ":", "\n", "                        ", "continue", "\n", "", "if", "end_index", ">=", "feature", ".", "paragraph_len", "-", "1", ":", "\n", "                        ", "continue", "\n", "\n", "", "if", "not", "feature", ".", "token_is_max_context", ".", "get", "(", "start_index", ",", "False", ")", ":", "\n", "                        ", "continue", "\n", "", "if", "end_index", "<", "start_index", ":", "\n", "                        ", "continue", "\n", "", "length", "=", "end_index", "-", "start_index", "+", "1", "\n", "if", "length", ">", "max_answer_length", ":", "\n", "                        ", "continue", "\n", "\n", "", "prelim_predictions", ".", "append", "(", "\n", "_PrelimPrediction", "(", "\n", "feature_index", "=", "feature_index", ",", "\n", "start_index", "=", "start_index", ",", "\n", "end_index", "=", "end_index", ",", "\n", "start_log_prob", "=", "start_log_prob", ",", "\n", "end_log_prob", "=", "end_log_prob", ")", ")", "\n", "\n", "", "", "", "prelim_predictions", "=", "sorted", "(", "\n", "prelim_predictions", ",", "\n", "key", "=", "lambda", "x", ":", "(", "x", ".", "start_log_prob", "+", "x", ".", "end_log_prob", ")", ",", "\n", "reverse", "=", "True", ")", "\n", "\n", "seen_predictions", "=", "{", "}", "\n", "nbest", "=", "[", "]", "\n", "for", "pred", "in", "prelim_predictions", ":", "\n", "            ", "if", "len", "(", "nbest", ")", ">=", "n_best_size", ":", "\n", "                ", "break", "\n", "", "feature", "=", "features", "[", "pred", ".", "feature_index", "]", "\n", "\n", "# XLNet un-tokenizer", "\n", "# Let's keep it simple for now and see if we need all this later.", "\n", "#", "\n", "# tok_start_to_orig_index = feature.tok_start_to_orig_index", "\n", "# tok_end_to_orig_index = feature.tok_end_to_orig_index", "\n", "# start_orig_pos = tok_start_to_orig_index[pred.start_index]", "\n", "# end_orig_pos = tok_end_to_orig_index[pred.end_index]", "\n", "# paragraph_text = example.paragraph_text", "\n", "# final_text = paragraph_text[start_orig_pos: end_orig_pos + 1].strip()", "\n", "\n", "# Previously used Bert untokenizer", "\n", "tok_tokens", "=", "feature", ".", "tokens", "[", "pred", ".", "start_index", ":", "(", "pred", ".", "end_index", "+", "1", ")", "]", "\n", "orig_doc_start", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "start_index", "]", "\n", "orig_doc_end", "=", "feature", ".", "token_to_orig_map", "[", "pred", ".", "end_index", "]", "\n", "orig_tokens", "=", "example", ".", "doc_tokens", "[", "orig_doc_start", ":", "(", "orig_doc_end", "+", "1", ")", "]", "\n", "tok_text", "=", "tokenizer", ".", "convert_tokens_to_string", "(", "tok_tokens", ")", "\n", "\n", "# Clean whitespace", "\n", "tok_text", "=", "tok_text", ".", "strip", "(", ")", "\n", "tok_text", "=", "\" \"", ".", "join", "(", "tok_text", ".", "split", "(", ")", ")", "\n", "orig_text", "=", "\" \"", ".", "join", "(", "orig_tokens", ")", "\n", "\n", "if", "hasattr", "(", "tokenizer", ",", "\"do_lower_case\"", ")", ":", "\n", "                ", "do_lower_case", "=", "tokenizer", ".", "do_lower_case", "\n", "", "else", ":", "\n", "                ", "do_lower_case", "=", "tokenizer", ".", "do_lowercase_and_remove_accent", "\n", "\n", "", "final_text", "=", "get_final_text", "(", "tok_text", ",", "orig_text", ",", "do_lower_case", ",", "\n", "verbose_logging", ")", "\n", "\n", "if", "final_text", "in", "seen_predictions", ":", "\n", "                ", "continue", "\n", "\n", "", "seen_predictions", "[", "final_text", "]", "=", "True", "\n", "\n", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "\n", "text", "=", "final_text", ",", "\n", "start_log_prob", "=", "pred", ".", "start_log_prob", ",", "\n", "end_log_prob", "=", "pred", ".", "end_log_prob", ")", ")", "\n", "\n", "# In very rare edge cases we could have no valid predictions. So we", "\n", "# just create a nonce prediction in this case to avoid failure.", "\n", "", "if", "not", "nbest", ":", "\n", "            ", "nbest", ".", "append", "(", "\n", "_NbestPrediction", "(", "text", "=", "\"\"", ",", "start_log_prob", "=", "-", "1e6", ",", "\n", "end_log_prob", "=", "-", "1e6", ")", ")", "\n", "\n", "", "total_scores", "=", "[", "]", "\n", "best_non_null_entry", "=", "None", "\n", "for", "entry", "in", "nbest", ":", "\n", "            ", "total_scores", ".", "append", "(", "entry", ".", "start_log_prob", "+", "entry", ".", "end_log_prob", ")", "\n", "if", "not", "best_non_null_entry", ":", "\n", "                ", "best_non_null_entry", "=", "entry", "\n", "\n", "", "", "probs", "=", "_compute_softmax", "(", "total_scores", ")", "\n", "\n", "nbest_json", "=", "[", "]", "\n", "for", "(", "i", ",", "entry", ")", "in", "enumerate", "(", "nbest", ")", ":", "\n", "            ", "output", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "output", "[", "\"text\"", "]", "=", "entry", ".", "text", "\n", "output", "[", "\"probability\"", "]", "=", "probs", "[", "i", "]", "\n", "output", "[", "\"start_log_prob\"", "]", "=", "entry", ".", "start_log_prob", "\n", "output", "[", "\"end_log_prob\"", "]", "=", "entry", ".", "end_log_prob", "\n", "nbest_json", ".", "append", "(", "output", ")", "\n", "\n", "", "assert", "len", "(", "nbest_json", ")", ">=", "1", "\n", "assert", "best_non_null_entry", "is", "not", "None", "\n", "\n", "score_diff", "=", "score_null", "\n", "scores_diff_json", "[", "example", ".", "qas_id", "]", "=", "score_diff", "\n", "# note(zhiliny): always predict best_non_null_entry", "\n", "# and the evaluation script will search for the best threshold", "\n", "all_predictions", "[", "example", ".", "qas_id", "]", "=", "best_non_null_entry", ".", "text", "\n", "\n", "all_nbest_json", "[", "example", ".", "qas_id", "]", "=", "nbest_json", "\n", "\n", "", "with", "open", "(", "output_prediction_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "        ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_predictions", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "with", "open", "(", "output_nbest_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "        ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "all_nbest_json", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "if", "version_2_with_negative", ":", "\n", "        ", "with", "open", "(", "output_null_log_odds_file", ",", "\"w\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "json", ".", "dumps", "(", "scores_diff_json", ",", "indent", "=", "4", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "", "return", "all_predictions", "\n", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.UserCommands.register_subcommand": [[10, 25], ["parser.add_parser", "parser.add_parser.set_defaults", "parser.add_parser", "parser.add_parser.set_defaults", "parser.add_parser", "parser.add_parser.set_defaults", "parser.add_parser", "parser.add_parser.set_defaults", "parser.add_parser", "parser.add_parser.add_argument", "parser.add_parser.add_argument", "parser.add_parser.set_defaults", "user.LoginCommand", "user.WhoamiCommand", "user.LogoutCommand", "user.ListObjsCommand", "user.UploadCommand"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "register_subcommand", "(", "parser", ":", "ArgumentParser", ")", ":", "\n", "        ", "login_parser", "=", "parser", ".", "add_parser", "(", "'login'", ")", "\n", "login_parser", ".", "set_defaults", "(", "func", "=", "lambda", "args", ":", "LoginCommand", "(", "args", ")", ")", "\n", "whoami_parser", "=", "parser", ".", "add_parser", "(", "'whoami'", ")", "\n", "whoami_parser", ".", "set_defaults", "(", "func", "=", "lambda", "args", ":", "WhoamiCommand", "(", "args", ")", ")", "\n", "logout_parser", "=", "parser", ".", "add_parser", "(", "'logout'", ")", "\n", "logout_parser", ".", "set_defaults", "(", "func", "=", "lambda", "args", ":", "LogoutCommand", "(", "args", ")", ")", "\n", "list_parser", "=", "parser", ".", "add_parser", "(", "'ls'", ")", "\n", "list_parser", ".", "set_defaults", "(", "func", "=", "lambda", "args", ":", "ListObjsCommand", "(", "args", ")", ")", "\n", "# upload", "\n", "upload_parser", "=", "parser", ".", "add_parser", "(", "'upload'", ")", "\n", "upload_parser", ".", "add_argument", "(", "'path'", ",", "type", "=", "str", ",", "help", "=", "'Local path of the folder or individual file to upload.'", ")", "\n", "upload_parser", ".", "add_argument", "(", "'--filename'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'Optional: override individual object filename on S3.'", ")", "\n", "upload_parser", ".", "set_defaults", "(", "func", "=", "lambda", "args", ":", "UploadCommand", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.ANSI.bold": [[34, 37], ["None"], "methods", ["None"], ["@", "classmethod", "\n", "def", "bold", "(", "cls", ",", "s", ")", ":", "\n", "        ", "return", "\"{}{}{}\"", ".", "format", "(", "cls", ".", "_bold", ",", "s", ",", "cls", ".", "_reset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.BaseUserCommand.__init__": [[40, 43], ["transformers.hf_api.HfApi"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "_api", "=", "HfApi", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.LoginCommand.run": [[46, 67], ["print", "input", "getpass.getpass.getpass", "transformers.hf_api.HfFolder.save_token", "print", "print", "print", "user.LoginCommand._api.login", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.save_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.login"], ["    ", "def", "run", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"\"\"\n        _|    _|  _|    _|    _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|_|_|_|    _|_|      _|_|_|  _|_|_|_|  \n        _|    _|  _|    _|  _|        _|          _|    _|_|    _|  _|            _|        _|    _|  _|        _|        \n        _|_|_|_|  _|    _|  _|  _|_|  _|  _|_|    _|    _|  _|  _|  _|  _|_|      _|_|_|    _|_|_|_|  _|        _|_|_|    \n        _|    _|  _|    _|  _|    _|  _|    _|    _|    _|    _|_|  _|    _|      _|        _|    _|  _|        _|        \n        _|    _|    _|_|      _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|        _|    _|    _|_|_|  _|_|_|_|  \n\n        \"\"\"", ")", "\n", "username", "=", "input", "(", "\"Username: \"", ")", "\n", "password", "=", "getpass", "(", ")", "\n", "try", ":", "\n", "            ", "token", "=", "self", ".", "_api", ".", "login", "(", "username", ",", "password", ")", "\n", "", "except", "HTTPError", "as", "e", ":", "\n", "# probably invalid credentials, display error message.", "\n", "            ", "print", "(", "e", ")", "\n", "exit", "(", "1", ")", "\n", "", "HfFolder", ".", "save_token", "(", "token", ")", "\n", "print", "(", "\"Login successful\"", ")", "\n", "print", "(", "\"Your token:\"", ",", "token", ",", "\"\\n\"", ")", "\n", "print", "(", "\"Your token has been saved to\"", ",", "HfFolder", ".", "path_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.WhoamiCommand.run": [[70, 80], ["transformers.hf_api.HfFolder.get_token", "print", "exit", "user.WhoamiCommand.WhoamiCommand._api.whoami", "print", "print"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.get_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.whoami"], ["    ", "def", "run", "(", "self", ")", ":", "\n", "        ", "token", "=", "HfFolder", ".", "get_token", "(", ")", "\n", "if", "token", "is", "None", ":", "\n", "            ", "print", "(", "\"Not logged in\"", ")", "\n", "exit", "(", ")", "\n", "", "try", ":", "\n", "            ", "user", "=", "self", ".", "_api", ".", "whoami", "(", "token", ")", "\n", "print", "(", "user", ")", "\n", "", "except", "HTTPError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.LogoutCommand.run": [[83, 91], ["transformers.hf_api.HfFolder.get_token", "transformers.hf_api.HfFolder.delete_token", "user.LogoutCommand._api.logout", "print", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.get_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.delete_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.logout"], ["    ", "def", "run", "(", "self", ")", ":", "\n", "        ", "token", "=", "HfFolder", ".", "get_token", "(", ")", "\n", "if", "token", "is", "None", ":", "\n", "            ", "print", "(", "\"Not logged in\"", ")", "\n", "exit", "(", ")", "\n", "", "HfFolder", ".", "delete_token", "(", ")", "\n", "self", ".", "_api", ".", "logout", "(", "token", ")", "\n", "print", "(", "\"Successfully logged out.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.ListObjsCommand.tabulate": [[94, 115], ["lines.append", "lines.append", "max", "row_format.format", "row_format.format", "lines.append", "zip", "row_format.format", "len", "len", "str"], "methods", ["None"], ["    ", "def", "tabulate", "(", "self", ",", "rows", ",", "headers", ")", ":", "\n", "# type: (List[List[Union[str, int]]], List[str]) -> str", "\n", "        ", "\"\"\"\n        Inspired by:\n        stackoverflow.com/a/8356620/593036\n        stackoverflow.com/questions/9535954/printing-lists-as-tabular-data\n        \"\"\"", "\n", "col_widths", "=", "[", "max", "(", "len", "(", "str", "(", "x", ")", ")", "for", "x", "in", "col", ")", "for", "col", "in", "zip", "(", "*", "rows", ",", "headers", ")", "]", "\n", "row_format", "=", "(", "\"{{:{}}} \"", "*", "len", "(", "headers", ")", ")", ".", "format", "(", "*", "col_widths", ")", "\n", "lines", "=", "[", "]", "\n", "lines", ".", "append", "(", "\n", "row_format", ".", "format", "(", "*", "headers", ")", "\n", ")", "\n", "lines", ".", "append", "(", "\n", "row_format", ".", "format", "(", "*", "[", "\"-\"", "*", "w", "for", "w", "in", "col_widths", "]", ")", "\n", ")", "\n", "for", "row", "in", "rows", ":", "\n", "            ", "lines", ".", "append", "(", "\n", "row_format", ".", "format", "(", "*", "row", ")", "\n", ")", "\n", "", "return", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.ListObjsCommand.run": [[116, 137], ["transformers.hf_api.HfFolder.get_token", "print", "print", "exit", "user.ListObjsCommand._api.list_objs", "len", "print", "exit", "user.ListObjsCommand.tabulate", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.get_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.list_objs", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.ListObjsCommand.tabulate"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "token", "=", "HfFolder", ".", "get_token", "(", ")", "\n", "if", "token", "is", "None", ":", "\n", "            ", "print", "(", "\"Not logged in\"", ")", "\n", "exit", "(", "1", ")", "\n", "", "try", ":", "\n", "            ", "objs", "=", "self", ".", "_api", ".", "list_objs", "(", "token", ")", "\n", "", "except", "HTTPError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "exit", "(", "1", ")", "\n", "", "if", "len", "(", "objs", ")", "==", "0", ":", "\n", "            ", "print", "(", "\"No shared file yet\"", ")", "\n", "exit", "(", ")", "\n", "", "rows", "=", "[", "[", "\n", "obj", ".", "filename", ",", "\n", "obj", ".", "LastModified", ",", "\n", "obj", ".", "ETag", ",", "\n", "obj", ".", "Size", "\n", "]", "for", "obj", "in", "objs", "]", "\n", "print", "(", "\n", "self", ".", "tabulate", "(", "rows", ",", "headers", "=", "[", "\"Filename\"", ",", "\"LastModified\"", ",", "\"ETag\"", ",", "\"Size\"", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.UploadCommand.walk_dir": [[141, 157], ["list", "os.scandir", "f.is_dir", "os.path.join", "f.is_file", "user.UploadCommand.walk_dir", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.UploadCommand.walk_dir"], ["    ", "def", "walk_dir", "(", "self", ",", "rel_path", ")", ":", "\n", "        ", "\"\"\"\n        Recursively list all files in a folder.\n        \"\"\"", "\n", "entries", ":", "List", "[", "os", ".", "DirEntry", "]", "=", "list", "(", "os", ".", "scandir", "(", "rel_path", ")", ")", "\n", "files", "=", "[", "\n", "(", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "f", ".", "path", ")", ",", "# filepath", "\n", "f", ".", "path", "# filename", "\n", ")", "\n", "for", "f", "in", "entries", "if", "f", ".", "is_file", "(", ")", "\n", "]", "\n", "for", "f", "in", "entries", ":", "\n", "            ", "if", "f", ".", "is_dir", "(", ")", ":", "\n", "                ", "files", "+=", "self", ".", "walk_dir", "(", "f", ".", "path", ")", "\n", "", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.UploadCommand.run": [[158, 195], ["transformers.hf_api.HfFolder.get_token", "os.path.abspath", "os.path.isdir", "input().lower", "print", "print", "exit", "os.path.basename", "user.UploadCommand.walk_dir", "os.path.isfile", "print", "print", "exit", "user.ANSI.bold", "user.UploadCommand._api.presign_and_upload", "print", "print", "ValueError", "ValueError", "input", "os.path.basename", "user.ANSI.bold", "user.ANSI.bold"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfFolder.get_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.UploadCommand.walk_dir", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.ANSI.bold", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.HfApi.presign_and_upload", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.ANSI.bold", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.user.ANSI.bold"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "token", "=", "HfFolder", ".", "get_token", "(", ")", "\n", "if", "token", "is", "None", ":", "\n", "            ", "print", "(", "\"Not logged in\"", ")", "\n", "exit", "(", "1", ")", "\n", "", "local_path", "=", "os", ".", "path", ".", "abspath", "(", "self", ".", "args", ".", "path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "local_path", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "filename", "is", "not", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"Cannot specify a filename override when uploading a folder.\"", ")", "\n", "", "rel_path", "=", "os", ".", "path", ".", "basename", "(", "local_path", ")", "\n", "files", "=", "self", ".", "walk_dir", "(", "rel_path", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "local_path", ")", ":", "\n", "            ", "filename", "=", "self", ".", "args", ".", "filename", "if", "self", ".", "args", ".", "filename", "is", "not", "None", "else", "os", ".", "path", ".", "basename", "(", "local_path", ")", "\n", "files", "=", "[", "(", "local_path", ",", "filename", ")", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not a valid file or directory: {}\"", ".", "format", "(", "local_path", ")", ")", "\n", "\n", "", "for", "filepath", ",", "filename", "in", "files", ":", "\n", "            ", "print", "(", "\n", "\"About to upload file {} to S3 under filename {}\"", ".", "format", "(", "\n", "ANSI", ".", "bold", "(", "filepath", ")", ",", "ANSI", ".", "bold", "(", "filename", ")", "\n", ")", "\n", ")", "\n", "\n", "", "choice", "=", "input", "(", "\"Proceed? [Y/n] \"", ")", ".", "lower", "(", ")", "\n", "if", "not", "(", "choice", "==", "\"\"", "or", "choice", "==", "\"y\"", "or", "choice", "==", "\"yes\"", ")", ":", "\n", "            ", "print", "(", "\"Abort\"", ")", "\n", "exit", "(", ")", "\n", "", "print", "(", "\n", "ANSI", ".", "bold", "(", "\"Uploading... This might take a while if files are large\"", ")", "\n", ")", "\n", "for", "filepath", ",", "filename", "in", "files", ":", "\n", "            ", "access_url", "=", "self", ".", "_api", ".", "presign_and_upload", "(", "\n", "token", "=", "token", ",", "filename", "=", "filename", ",", "filepath", "=", "filepath", "\n", ")", "\n", "print", "(", "\"Your file now lives at:\"", ")", "\n", "print", "(", "access_url", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.__init__.BaseTransformersCLICommand.register_subcommand": [[5, 9], ["NotImplementedError"], "methods", ["None"], ["# see: https://github.com/abseil/abseil-py/issues/99", "\n", "# and: https://github.com/tensorflow/tensorflow/issues/26691#issuecomment-500369493", "\n", "try", ":", "\n", "    ", "import", "absl", ".", "logging", "\n", "absl", ".", "logging", ".", "set_verbosity", "(", "'info'", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.commands.__init__.BaseTransformersCLICommand.run": [[10, 13], ["NotImplementedError"], "methods", ["None"], ["absl", ".", "logging", ".", "set_stderrthreshold", "(", "'info'", ")", "\n", "absl", ".", "logging", ".", "_warn_preinit_stderr", "=", "False", "\n", "", "except", ":", "\n", "    ", "pass", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.split_to_token": [[5, 56], ["isinstance", "text.split", "enumerate", "sum", "utils_tokenizer.split_to_token.split_on_tokens"], "function", ["None"], ["def", "split_to_token", "(", "tokenizer", ",", "sent_text", ")", ":", "\n", "    ", "tgt_special_tokens", "=", "tokenizer", ".", "all_special_tokens", "# BERT <class 'list'>: ['[SEP]','[UNK]','[MASK]','[CLS]','[PAD]']", "\n", "# RoBERTa <class 'list'>: ['<mask>', '<unk>', '<pad>', '<s>', '</s>']", "\n", "def", "split_on_token", "(", "tok", ",", "text", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "split_text", "=", "text", ".", "split", "(", "tok", ")", "\n", "for", "i", ",", "sub_text", "in", "enumerate", "(", "split_text", ")", ":", "\n", "            ", "sub_text", "=", "sub_text", ".", "strip", "(", ")", "\n", "if", "i", "==", "0", "and", "not", "sub_text", ":", "\n", "                ", "result", "+=", "[", "tok", "]", "\n", "", "elif", "i", "==", "len", "(", "split_text", ")", "-", "1", ":", "\n", "                ", "if", "sub_text", ":", "\n", "                    ", "result", "+=", "[", "sub_text", "]", "\n", "", "else", ":", "\n", "                    ", "pass", "\n", "", "", "else", ":", "\n", "                ", "if", "sub_text", ":", "\n", "                    ", "result", "+=", "[", "sub_text", "]", "\n", "", "result", "+=", "[", "tok", "]", "\n", "", "", "return", "result", "\n", "\n", "", "def", "split_on_tokens", "(", "tok_list", ",", "text", ",", "tokenize_fn", ")", ":", "\n", "        ", "if", "not", "text", ":", "\n", "            ", "return", "[", "]", "\n", "", "if", "not", "tok_list", ":", "\n", "            ", "return", "re", ".", "findall", "(", "tokenizer", ".", "pat", ",", "sent_text", ")", "\n", "\n", "", "tokenized_text", "=", "[", "]", "\n", "text_list", "=", "[", "text", "]", "\n", "for", "tok", "in", "tok_list", ":", "\n", "            ", "tokenized_text", "=", "[", "]", "\n", "for", "sub_text", "in", "text_list", ":", "\n", "                ", "if", "sub_text", "not", "in", "tgt_special_tokens", ":", "\n", "                    ", "tokenized_text", "+=", "split_on_token", "(", "tok", ",", "sub_text", ")", "\n", "", "else", ":", "\n", "                    ", "tokenized_text", "+=", "[", "sub_text", "]", "\n", "", "", "text_list", "=", "tokenized_text", "\n", "\n", "", "return", "sum", "(", "(", "tokenize_fn", "(", "token", ")", "if", "token", "not", "in", "tgt_special_tokens", "else", "[", "token", "]", "for", "token", "in", "tokenized_text", ")", ",", "[", "]", ")", "\n", "\n", "", "if", "isinstance", "(", "tokenizer", ",", "BertTokenizer", ")", ":", "\n", "        ", "bert_tokenzie_fn", "=", "tokenizer", ".", "basic_tokenizer", ".", "tokenize", "# split text into full words", "\n", "sent_token_list", "=", "split_on_tokens", "(", "tgt_special_tokens", ",", "sent_text", ",", "bert_tokenzie_fn", ")", "\n", "", "elif", "isinstance", "(", "tokenizer", ",", "RobertaTokenizer", ")", ":", "\n", "        ", "roberta_tokenize_fn", "=", "lambda", "_arg", ":", "re", ".", "findall", "(", "tokenizer", ".", "pat", ",", "_arg", ")", "\n", "sent_token_list", "=", "split_on_tokens", "(", "tgt_special_tokens", ",", "sent_text", ",", "roberta_tokenize_fn", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "sent_token_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.parse_tk_idx_list_wrt_char": [[57, 254], ["isinstance", "enumerate", "enumerate", "span_list.append", "isinstance", "len", "print", "print", "len", "tk_idx_list.extend", "_text.lower.lower", "_text.lower.find", "span_list.append", "len", "enumerate", "span_list.append", "len", "len", "chr.replace", "len", "_text.lower.find", "span_list.append", "len", "print", "chr", "chr", "chr.replace", "chr.replace", "chr.replace", "chr.replace", "chr.replace", "chr.replace", "chr.replace", "chr.replace", "chr.replace", "chr.replace", "chr.replace", "chr.replace", "chr.replace", "len", "chr", "print", "str", "ord", "str", "ord"], "function", ["None"], ["", "def", "parse_tk_idx_list_wrt_char", "(", "tokenizer", ",", "_text", ",", "_token_list", ")", ":", "\n", "    ", "span_list", "=", "[", "]", "\n", "if", "isinstance", "(", "tokenizer", ",", "BertTokenizer", ")", ":", "\n", "        ", "if", "tokenizer", ".", "basic_tokenizer", ".", "do_lower_case", ":", "\n", "            ", "_text", "=", "_text", ".", "lower", "(", ")", "\n", "\n", "", "_tmp_find_idx", "=", "0", "\n", "for", "_idx", ",", "_tk", "in", "enumerate", "(", "_token_list", ")", ":", "\n", "            ", "if", "'##'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'##'", ",", "''", ")", "\n", "\n", "", "_found_idx", "=", "_text", ".", "find", "(", "_tk", ",", "_tmp_find_idx", ")", "\n", "if", "_idx", "==", "0", "and", "_found_idx", "!=", "0", ":", "\n", "                ", "_found_idx", "=", "0", "\n", "", "_end_idx", "=", "_found_idx", "+", "len", "(", "_tk", ")", "\n", "if", "_found_idx", "<", "0", ":", "\n", "                ", "for", "_c", "in", "_tk", ":", "\n", "                    ", "print", "(", "_c", "+", "'_'", "+", "str", "(", "ord", "(", "_c", ")", ")", ")", "\n", "", "", "assert", "_found_idx", ">=", "0", "\n", "# else:", "\n", "span_list", ".", "append", "(", "_found_idx", ")", "\n", "_tmp_find_idx", "=", "_end_idx", "\n", "", "span_list", ".", "append", "(", "len", "(", "_text", ")", ")", "\n", "", "elif", "isinstance", "(", "tokenizer", ",", "RobertaTokenizer", ")", ":", "\n", "        ", "_tmp_find_idx", "=", "0", "\n", "for", "_idx", ",", "_tk", "in", "enumerate", "(", "_token_list", ")", ":", "\n", "            ", "if", "_text", "==", "'-LRB- \u00b0 \u0451 \u00b0 -RRB- RT fubiz Amazing ipad Animations .'", ":", "\n", "                ", "if", "_tk", "==", "'\u0120'", ":", "\n", "                    ", "_tk", "=", "''", "\n", "", "if", "_tk", "==", "'\u00d1'", ":", "\n", "                    ", "_tk", "=", "' \u0451'", "\n", "", "if", "_tk", "==", "'\u0133'", ":", "\n", "                    ", "_tk", "=", "''", "\n", "", "if", "_tk", "==", "'\u0120\u00c2\u00b0'", ":", "\n", "                    ", "_tk", "=", "' \u00b0'", "\n", "", "", "if", "_text", "==", "'reaaaaalllly love your acting in harry potter ! Why do n\\'t you come to Korea ? \u3160\u3160'", ":", "\n", "                ", "if", "_tk", "==", "'\u00e3'", ":", "\n", "                    ", "_tk", "=", "'\u3160'", "\n", "", "if", "_tk", "==", "'\u0127'", ":", "\n", "                    ", "_tk", "=", "''", "\n", "", "if", "_tk", "==", "'\u0142'", ":", "\n", "                    ", "_tk", "=", "''", "\n", "# else:", "\n", "", "", "if", "_tk", "!=", "''", ":", "\n", "                ", "if", "_tk", "[", "0", "]", "==", "'\u0120'", ":", "\n", "                    ", "_tk", "=", "' '", "+", "_tk", "[", "1", ":", "]", "\n", "", "if", "_tk", "[", "0", "]", "==", "'\u00c2'", ":", "\n", "                    ", "_tk", "=", "chr", "(", "160", ")", "\n", "# continue", "\n", "# for twitter", "\n", "# if _tk == 'c\u00c3\u00a9':", "\n", "#     _tk = 'c\u00e9'", "\n", "", "", "if", "_tk", "==", "' \u00e2\u013b'", ":", "\n", "                ", "_tk", "=", "' '", "\n", "", "if", "_tk", "==", "'\u00a5'", ":", "\n", "                ", "_tk", "=", "chr", "(", "9829", ")", "\n", "", "if", "_tk", "==", "' \u00e2\u013a'", ":", "\n", "                ", "_tk", "=", "' '", "\n", "", "if", "_tk", "==", "'\u0133'", ":", "\n", "                ", "_tk", "=", "chr", "(", "9745", ")", "\n", "", "if", "_tk", "==", "'\u00ab'", ":", "\n", "                ", "_tk", "=", "'\u266b'", "\n", "", "if", "_tk", "==", "' \u00c2'", ":", "\n", "                ", "_tk", "=", "' '", "\n", "", "if", "_tk", "==", "'\u00ba'", ":", "\n", "                ", "_tk", "=", "'\u263a'", "\n", "", "if", "'\u00c3\u00ab'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'\u00c3\u00ab'", ",", "'\u00eb'", ")", "\n", "", "if", "_tk", "==", "' \u00e2\u013a\u0127'", ":", "\n", "                ", "_tk", "=", "' \u2605'", "\n", "", "if", "_tk", "==", "' \u00e2\u0122\u00a2'", ":", "\n", "                ", "_tk", "=", "' \u2022'", "\n", "", "if", "_tk", "==", "'\u00e2\u013a'", ":", "\n", "                ", "_tk", "=", "''", "\n", "# if _tk == '\u00c3\u00b1':", "\n", "#     _tk = '\u00f1'", "\n", "", "if", "_tk", "==", "'\u00e2\u013b\u00a5'", ":", "\n", "                ", "_tk", "=", "'\u2665'", "\n", "", "if", "_tk", "==", "' \u00e2\u013e\u0136'", ":", "\n", "                ", "_tk", "=", "' \u2714'", "\n", "", "if", "'\u00c3\u0142'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'\u00c3\u0142'", ",", "'\u00e0'", ")", "\n", "", "if", "'\u00c3\u00a9'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'\u00c3\u00a9'", ",", "'\u00e9'", ")", "\n", "", "if", "'\u00c2\u00ae'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'\u00c2\u00ae'", ",", "'\u00ae'", ")", "\n", "", "if", "_tk", "==", "'\u00ae'", ":", "\n", "                ", "_tk", "=", "'\u262e'", "\n", "", "if", "_tk", "==", "'\u00aa'", ":", "\n", "                ", "_tk", "=", "'\u266a'", "\n", "", "if", "_tk", "==", "' \u00e2'", ":", "\n", "                ", "_tk", "=", "''", "\n", "", "if", "_tk", "==", "'\u0140'", ":", "\n", "                ", "_tk", "=", "''", "\n", "", "if", "_tk", "==", "'\u013e'", ":", "\n", "                ", "_tk", "=", "'\u279c'", "\n", "", "if", "'\u00c3\u0138'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'\u00c3\u0138'", ",", "'\u00d6'", ")", "\n", "", "if", "'\u00c3\u00b3'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'\u00c3\u00b3'", ",", "'\u00f3'", ")", "\n", "", "if", "'\u00c3\u0143'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'\u00c3\u0143'", ",", "'\u00ed'", ")", "\n", "", "if", "_tk", "==", "'\u0142'", ":", "\n", "                ", "_tk", "=", "'\u2620'", "\n", "", "if", "_tk", "==", "'\u00e2\u013b'", ":", "\n", "                ", "_tk", "=", "''", "\n", "", "if", "'\u00c3\u00a3'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'\u00c3\u00a3'", ",", "'\u00e3'", ")", "\n", "", "if", "_tk", "==", "'\u00e2\u013e'", ":", "\n", "                ", "_tk", "=", "''", "\n", "", "if", "_tk", "==", "'\u0136'", ":", "\n", "                ", "_tk", "=", "'\u2714'", "\n", "", "if", "'\u00c3\u00aa'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'\u00c3\u00aa'", ",", "'\u00ea'", ")", "\n", "", "if", "_tk", "==", "' \u00e3\u0123'", ":", "\n", "                ", "_tk", "=", "'\u3063'", "\n", "", "if", "_tk", "==", "'\u00a3'", ":", "\n", "                ", "_tk", "=", "''", "\n", "", "if", "_tk", "==", "'\u00e3\u0123\u012d'", ":", "\n", "                ", "_tk", "=", "'\u304b'", "\n", "", "if", "_tk", "==", "'\u00e3\u0122\u0124'", ":", "\n", "                ", "_tk", "=", "'\u3002'", "\n", "", "if", "_tk", "==", "'\u00a4'", ":", "\n", "                ", "_tk", "=", "' \u27a4'", "\n", "", "if", "'\u00c3\u00a1'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'\u00c3\u00a1'", ",", "'\u00e1'", ")", "\n", "", "if", "_tk", "==", "' \u00c3'", ":", "\n", "                ", "_tk", "=", "' '", "\n", "", "if", "'\u00a7'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'\u00a7'", ",", "'\u00e7'", ")", "\n", "", "if", "_tk", "==", "'\u00b2'", ":", "\n", "                ", "_tk", "=", "' \u27b2'", "\n", "", "if", "'\u00c5\u00a1'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'\u00c5\u00a1'", ",", "'\u0161'", ")", "\n", "", "if", "_tk", "==", "' \u00c2\u00b0'", ":", "\n", "                ", "_tk", "=", "' \u00b0'", "\n", "# if  in _tk:", "\n", "#     _tk = _tk.replace('\u00c3\u00a7', '\u00e7')", "\n", "", "if", "_tk", "==", "'\u00c3\u00a7a'", ":", "\n", "                ", "_tk", "=", "'\u00e7a'", "\n", "", "if", "_tk", "==", "'\u00c3\u00e7a'", ":", "\n", "                ", "_tk", "=", "'\u00e7a'", "\n", "", "if", "_tk", "==", "'\u00c3\u00e7'", ":", "\n", "                ", "_tk", "=", "'\u00e7'", "\n", "\n", "", "if", "'\u00c3\u00b1'", "in", "_tk", ":", "\n", "                ", "_tk", "=", "_tk", ".", "replace", "(", "'\u00c3\u00b1'", ",", "'\u00f1'", ")", "\n", "", "if", "_tk", "==", "'\u00b9'", ":", "\n", "                ", "_tk", "=", "'\u2639'", "\n", "", "if", "_tk", "==", "' M\u00c3\u00bc'", ":", "\n", "                ", "_tk", "=", "'M\u00fc'", "\n", "\n", "# for rest15", "\n", "", "if", "_tk", "==", "' \u00e2\u0122\u0135'", ":", "\n", "                ", "_tk", "=", "' \u2013'", "\n", "", "if", "_tk", "==", "'\u00e2\u0122'", ":", "\n", "                ", "_tk", "=", "'\u2019'", "\n", "", "if", "_tk", "==", "'\u013b'", ":", "\n", "                ", "_tk", "=", "''", "\n", "", "if", "_tk", "==", "' \u00e2\u0122'", ":", "\n", "                ", "_tk", "=", "' \u2018'", "\n", "", "if", "_tk", "==", "'\u013a'", ":", "\n", "                ", "_tk", "=", "''", "\n", "\n", "# for rest16", "\n", "", "if", "_tk", "==", "'\u00e2\u0122\u0135'", ":", "\n", "                ", "_tk", "=", "'\u2013'", "\n", "", "if", "_tk", "==", "'\u00e2\u0122\u00a6'", ":", "\n", "                ", "_tk", "=", "'\u2026'", "\n", "\n", "\n", "\n", "", "_found_idx", "=", "_text", ".", "find", "(", "_tk", ",", "_tmp_find_idx", ")", "\n", "if", "_idx", "==", "0", "and", "_found_idx", "!=", "0", ":", "\n", "                ", "_found_idx", "=", "0", "\n", "", "_end_idx", "=", "_found_idx", "+", "len", "(", "_tk", ")", "\n", "if", "_found_idx", "<", "0", ":", "\n", "                ", "for", "_c", "in", "_tk", ":", "\n", "                    ", "print", "(", "_c", "+", "'_'", "+", "str", "(", "ord", "(", "_c", ")", ")", ")", "\n", "", "", "assert", "_found_idx", ">=", "0", "\n", "# else:", "\n", "span_list", ".", "append", "(", "_found_idx", ")", "\n", "_tmp_find_idx", "=", "_end_idx", "\n", "", "span_list", ".", "append", "(", "len", "(", "_text", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "if", "len", "(", "span_list", ")", "!=", "len", "(", "_token_list", ")", "+", "1", ":", "\n", "        ", "print", "(", "_text", ",", "_token_list", ")", "\n", "print", "(", "span_list", ")", "\n", "", "assert", "len", "(", "span_list", ")", "==", "len", "(", "_token_list", ")", "+", "1", "\n", "# # build char2token", "\n", "tk_idx_list", "=", "[", "]", "\n", "for", "_idx_tk", ",", "_char_start", "in", "enumerate", "(", "span_list", "[", ":", "-", "1", "]", ")", ":", "\n", "        ", "_char_end", "=", "span_list", "[", "_idx_tk", "+", "1", "]", "\n", "_token_act_len", "=", "_char_end", "-", "_char_start", "\n", "tk_idx_list", ".", "extend", "(", "[", "_idx_tk", "]", "*", "_token_act_len", ")", "\n", "", "return", "tk_idx_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.continue_tokenize_for_wordpiece": [[255, 281], ["isinstance", "tokenizer.convert_tokens_to_ids", "enumerate", "isinstance", "len", "len", "tokenizer.tokenize", "wp_list.extend", "pos_list.extend", "enumerate", "wp_list.extend", "pos_list.extend", "len", "len", "tokenizer.bpe().split", "_tk.encode", "tokenizer.bpe", "ord"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_openai.OpenAIGPTTokenizer.bpe"], ["", "def", "continue_tokenize_for_wordpiece", "(", "tokenizer", ",", "token_list", ")", ":", "\n", "    ", "wp_list", "=", "[", "]", "\n", "pos_list", "=", "[", "]", "\n", "if", "isinstance", "(", "tokenizer", ",", "BertTokenizer", ")", ":", "\n", "        ", "for", "_idx_tk", ",", "_tk", "in", "enumerate", "(", "token_list", ")", ":", "\n", "            ", "_wps", "=", "tokenizer", ".", "tokenize", "(", "_tk", ")", "\n", "wp_list", ".", "extend", "(", "_wps", ")", "\n", "pos_list", ".", "extend", "(", "[", "_idx_tk", "]", "*", "len", "(", "_wps", ")", ")", "\n", "", "", "elif", "isinstance", "(", "tokenizer", ",", "RobertaTokenizer", ")", ":", "\n", "        ", "for", "_idx_tk", ",", "_tk", "in", "enumerate", "(", "token_list", ")", ":", "\n", "            ", "if", "_tk", "in", "tokenizer", ".", "all_special_tokens", ":", "\n", "                ", "_wps", "=", "[", "_tk", "]", "\n", "", "else", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "_tk", "=", "''", ".", "join", "(", "tokenizer", ".", "byte_encoder", "[", "ord", "(", "b", ")", "]", "for", "b", "in", "_tk", ")", "\n", "", "else", ":", "\n", "                    ", "_tk", "=", "''", ".", "join", "(", "tokenizer", ".", "byte_encoder", "[", "b", "]", "for", "b", "in", "_tk", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "", "_wps", "=", "[", "bpe_token", "for", "bpe_token", "in", "tokenizer", ".", "bpe", "(", "_tk", ")", ".", "split", "(", "' '", ")", "]", "\n", "", "wp_list", ".", "extend", "(", "_wps", ")", "\n", "pos_list", ".", "extend", "(", "[", "_idx_tk", "]", "*", "len", "(", "_wps", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "id_list", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "wp_list", ")", "\n", "assert", "len", "(", "wp_list", ")", "==", "len", "(", "id_list", ")", "\n", "return", "wp_list", ",", "id_list", ",", "pos_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.char_to_token_span": [[282, 286], ["None"], "function", ["None"], ["", "def", "char_to_token_span", "(", "charidx2tokenidx", ",", "char_from", ",", "char_to", ")", ":", "\n", "    ", "token_from", "=", "charidx2tokenidx", "[", "char_from", "]", "\n", "token_to", "=", "charidx2tokenidx", "[", "char_to", "-", "1", "]", "+", "1", "\n", "return", "token_from", ",", "token_to", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.MovingAverageDict.__init__": [[427, 430], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "decay", "=", "0.99", ")", ":", "\n", "        ", "self", ".", "decay", "=", "decay", "\n", "self", ".", "ma_dict", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.MovingAverageDict.__call__": [[431, 441], ["value_dict.items", "isinstance", "isinstance", "float", "isinstance", "help.MovingAverage"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "value_dict", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "value_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "(", "np", ".", "float32", ",", "np", ".", "float64", ",", "np", ".", "float16", ")", ")", "or", "(", "isinstance", "(", "val", ",", "np", ".", "ndarray", ")", "and", "val", ".", "dtype", "==", "\"float32\"", "and", "val", ".", "ndim", "==", "0", ")", ":", "\n", "                ", "val", "=", "float", "(", "val", ")", "\n", "\n", "", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                ", "if", "key", "not", "in", "self", ".", "ma_dict", ":", "\n", "                    ", "self", ".", "ma_dict", "[", "key", "]", "=", "MovingAverage", "(", ")", "\n", "", "self", ".", "ma_dict", "[", "key", "]", "(", "val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.MovingAverageDict.get_val_dict": [[442, 447], ["help.MovingAverageDict.ma_dict.items"], "methods", ["None"], ["", "", "", "def", "get_val_dict", "(", "self", ")", ":", "\n", "        ", "dict_return", "=", "{", "}", "\n", "for", "key", ",", "ma_obj", "in", "self", ".", "ma_dict", ".", "items", "(", ")", ":", "\n", "            ", "dict_return", "[", "key", "]", "=", "ma_obj", ".", "value", "\n", "", "return", "dict_return", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.MovingAverageDict.get_val_str": [[448, 458], ["help.MovingAverageDict.get_val_dict", "list", "sorted", "help.MovingAverageDict.items", "len"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.MovingAverageDict.get_val_dict"], ["", "def", "get_val_str", "(", "self", ")", ":", "\n", "        ", "val_dict", "=", "self", ".", "get_val_dict", "(", ")", "\n", "# sort", "\n", "sorted_list", "=", "list", "(", "sorted", "(", "val_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "0", "]", ")", ")", "\n", "str_return", "=", "\"\"", "\n", "for", "key", ",", "val", "in", "sorted_list", ":", "\n", "            ", "if", "len", "(", "str_return", ")", ">", "0", ":", "\n", "                ", "str_return", "+=", "\", \"", "\n", "", "str_return", "+=", "\"%s: %.4f\"", "%", "(", "key", ",", "val", ")", "\n", "", "return", "str_return", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.MovingAverage.__init__": [[461, 464], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "decay", "=", "0.99", ")", ":", "\n", "        ", "self", ".", "decay", "=", "decay", "\n", "self", ".", "value", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.MovingAverage.__call__": [[465, 471], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "new_val", ")", ":", "\n", "        ", "if", "self", ".", "value", "is", "None", ":", "\n", "            ", "self", ".", "value", "=", "new_val", "\n", "", "else", ":", "\n", "            ", "self", ".", "value", "=", "self", ".", "decay", "*", "self", ".", "value", "+", "(", "1.", "-", "self", ".", "decay", ")", "*", "new_val", "\n", "", "return", "self", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.define_hparams_training": [[45, 147], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "define_hparams_training", "(", "parser", ")", ":", "\n", "## Required parameters", "\n", "# parser.add_argument(\"--data_dir\", default=None, type=str, required=True,", "\n", "#                     help=\"The input data dir. Should contain the .tsv files (or other data files) for the task.\")", "\n", "# parser.add_argument(\"--model_type\", default=None, type=str, required=True,", "\n", "#                     help=\"Model type selected in the list: \" + \", \".join(MODEL_CLASSES.keys()))", "\n", "# parser.add_argument(\"--model_name_or_path\", default=None, type=str, required=True,", "\n", "#                     help=\"Path to pre-trained model or shortcut name selected in the list: \" + \", \".join(", "\n", "#                         ALL_MODELS))", "\n", "# parser.add_argument(\"--task_name\", default=None, type=str, required=True,", "\n", "#                     help=\"The name of the task to train selected in the list: \" + \", \".join(processors.keys()))", "\n", "# parser.add_argument(\"--output_dir\", default=None, type=str, required=True,", "\n", "#                     help=\"The output directory where the model predictions and checkpoints will be written.\")", "\n", "\n", "## Other parameters", "\n", "    ", "parser", ".", "add_argument", "(", "\"--config_name\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Pretrained config name or path if not the same as model_name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tokenizer_name\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Pretrained tokenizer name or path if not the same as model_name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cache_dir\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Where do you want to store the pre-trained models downloaded from s3\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_seq_length\"", ",", "default", "=", "128", ",", "type", "=", "int", ",", "\n", "help", "=", "\"The maximum total input sequence length after tokenization. Sequences longer \"", "\n", "\"than this will be truncated, sequences shorter will be padded.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_train\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to run training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_eval\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to run eval on the dev set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_prediction\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to run eval on the test set and save predictions\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--evaluate_during_training\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Rul evaluation during training at each logging step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--do_lower_case\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Set this flag if you are using an uncased model.\"", ")", "\n", "\n", "\n", "# parser.add_argument(\"--per_gpu_train_batch_size\", default=8, type=int,", "\n", "#                     help=\"Batch size per GPU/CPU for training.\")", "\n", "# parser.add_argument(\"--per_gpu_eval_batch_size\", default=8, type=int,", "\n", "#                     help=\"Batch size per GPU/CPU for evaluation.\")", "\n", "parser", ".", "add_argument", "(", "\"--train_batch_size\"", ",", "default", "=", "32", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total batch size for training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_batch_size\"", ",", "default", "=", "8", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total batch size for eval.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gradient_accumulation_steps'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of updates steps to accumulate before performing a backward/update pass.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "default", "=", "5e-5", ",", "type", "=", "float", ",", "\n", "help", "=", "\"The initial learning rate for Adam.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Weight deay if we apply some.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adam_epsilon\"", ",", "default", "=", "1e-8", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Epsilon for Adam optimizer.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adam_betas\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "'betas for Adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_grad_norm\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Max gradient norm.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_train_epochs\"", ",", "default", "=", "3.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Total number of training epochs to perform.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_steps\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"If > 0: set total number of training steps to perform. Override num_train_epochs.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_steps\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "# ! change to propostion", "\n", "help", "=", "\"Linear warmup over warmup_steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_proportion\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Proportion of training to perform linear learning rate warmup for. \"", "\n", "\"E.g., 0.1 = 10%% of training.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--logging_steps'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "\"Log every X updates steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--save_steps'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "\"Save checkpoint every X updates steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_steps'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "\"Eval model every X updates steps. if X > 0\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_all_checkpoints\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Evaluate all checkpoints starting with the same prefix as model_name ending and ending with step number\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_cuda\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Avoid using CUDA when available\"", ")", "\n", "parser", ".", "add_argument", "(", "'--overwrite_output_dir'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Overwrite the content of the output directory\"", ")", "\n", "parser", ".", "add_argument", "(", "'--overwrite_cache'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Overwrite the cached training and evaluation sets\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "\n", "help", "=", "\"random seed for initialization\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--tpu'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to run on the TPU defined in the environment variables\"", ")", "\n", "parser", ".", "add_argument", "(", "'--tpu_ip_address'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "\"TPU IP address if none are set in the environment variables\"", ")", "\n", "parser", ".", "add_argument", "(", "'--tpu_name'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "\"TPU name if none are set in the environment variables\"", ")", "\n", "parser", ".", "add_argument", "(", "'--xrt_tpu_config'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "\"XRT TPU config if none are set in the environment variables\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--fp16'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to use 16-bit (mixed) precision (through NVIDIA apex) instead of 32-bit\"", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16_opt_level'", ",", "type", "=", "str", ",", "default", "=", "'O1'", ",", "\n", "help", "=", "\"For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3'].\"", "\n", "\"See details at https://nvidia.github.io/apex/amp.html\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "\"For distributed training: local_rank\"", ")", "\n", "parser", ".", "add_argument", "(", "'--server_ip'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"For distant debugging.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--server_port'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "\"For distant debugging.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_logging": [[148, 150], ["logging.basicConfig"], "function", ["None"], ["", "def", "setup_logging", "(", "args", ")", ":", "\n", "    ", "logger", ".", "basicConfig", "(", "format", "=", "'%(asctime)s: %(message)s'", ",", "level", "=", "logger", ".", "INFO", ",", "datefmt", "=", "'%m/%d %I:%M:%S %p'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed": [[151, 157], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_seed", "(", "args", ")", ":", "\n", "    ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "args", ".", "n_gpu", ">", "0", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_prerequisite": [[158, 208], ["help.setup_logging", "help.set_seed", "os.path.exists", "os.listdir", "ValueError", "os.makedirs", "print", "ptvsd.enable_attach", "ptvsd.wait_for_attach", "torch.device", "torch.cuda.device_count", "torch.cuda.set_device", "torch.device", "torch.distributed.init_process_group", "xm.xla_device", "os.path.exists", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_logging", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed"], ["", "", "def", "setup_prerequisite", "(", "args", ")", ":", "\n", "# 1. output dir", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", "and", "os", ".", "listdir", "(", "args", ".", "output_dir", ")", "and", "args", ".", "do_train", "and", "not", "args", ".", "overwrite_output_dir", ":", "\n", "        ", "raise", "ValueError", "(", "\"Output directory ({}) already exists and is not empty. Use --overwrite_output_dir to overcome.\"", ".", "format", "(", "args", ".", "output_dir", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", "and", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_dir", ")", "# Create output directory if needed", "\n", "\n", "# 2. Setup distant debugging if needed", "\n", "", "if", "args", ".", "server_ip", "and", "args", ".", "server_port", ":", "\n", "# Distant debugging - see https://code.visualstudio.com/docs/python/debugging#_attach-to-a-local-script", "\n", "        ", "import", "ptvsd", "\n", "print", "(", "\"Waiting for debugger attach\"", ")", "\n", "ptvsd", ".", "enable_attach", "(", "address", "=", "(", "args", ".", "server_ip", ",", "args", ".", "server_port", ")", ",", "redirect_output", "=", "True", ")", "\n", "ptvsd", ".", "wait_for_attach", "(", ")", "\n", "\n", "# 3. Setup CUDA, GPU & distributed training", "\n", "", "if", "args", ".", "local_rank", "==", "-", "1", "or", "args", ".", "no_cuda", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "args", ".", "no_cuda", "else", "\"cpu\"", ")", "\n", "args", ".", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ")", "\n", "args", ".", "n_gpu", "=", "1", "\n", "", "args", ".", "device", "=", "device", "\n", "\n", "# 4. setup TPU", "\n", "if", "args", ".", "tpu", ":", "\n", "        ", "if", "args", ".", "tpu_ip_address", ":", "\n", "            ", "os", ".", "environ", "[", "\"TPU_IP_ADDRESS\"", "]", "=", "args", ".", "tpu_ip_address", "\n", "", "if", "args", ".", "tpu_name", ":", "\n", "            ", "os", ".", "environ", "[", "\"TPU_NAME\"", "]", "=", "args", ".", "tpu_name", "\n", "", "if", "args", ".", "xrt_tpu_config", ":", "\n", "            ", "os", ".", "environ", "[", "\"XRT_TPU_CONFIG\"", "]", "=", "args", ".", "xrt_tpu_config", "\n", "\n", "", "assert", "\"TPU_IP_ADDRESS\"", "in", "os", ".", "environ", "\n", "assert", "\"TPU_NAME\"", "in", "os", ".", "environ", "\n", "assert", "\"XRT_TPU_CONFIG\"", "in", "os", ".", "environ", "\n", "\n", "import", "torch_xla", "\n", "import", "torch_xla", ".", "core", ".", "xla_model", "as", "xm", "\n", "args", ".", "device", "=", "xm", ".", "xla_device", "(", ")", "\n", "args", ".", "xla_model", "=", "xm", "\n", "\n", "# 5. setup logging", "\n", "", "setup_logging", "(", "args", ")", "\n", "\n", "# 6. Set Seed", "\n", "set_seed", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_training_step": [[209, 236], ["torch.utils.data.DataLoader", "torch.utils.data.RandomSampler", "torch.utils.data.distributed.DistributedSampler", "int", "math.ceil", "math.ceil", "torch.distributed.get_world_size", "len", "len"], "function", ["None"], ["", "def", "setup_training_step", "(", "args", ",", "train_dataset", ",", "**", "kwargs", ")", ":", "\n", "    ", "assert", "args", ".", "train_batch_size", "%", "(", "args", ".", "n_gpu", "*", "args", ".", "gradient_accumulation_steps", ")", "==", "0", "\n", "train_sampler", "=", "RandomSampler", "(", "train_dataset", ")", "if", "args", ".", "local_rank", "==", "-", "1", "else", "DistributedSampler", "(", "train_dataset", ")", "\n", "\n", "batch_size", "=", "args", ".", "train_batch_size", "//", "args", ".", "gradient_accumulation_steps", "\n", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "        ", "assert", "args", ".", "n_gpu", "==", "1", "\n", "num_replicas", "=", "int", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "\n", "assert", "args", ".", "train_batch_size", "%", "(", "num_replicas", "*", "args", ".", "gradient_accumulation_steps", ")", "==", "0", "\n", "batch_size", "=", "args", ".", "train_batch_size", "//", "args", ".", "gradient_accumulation_steps", "//", "num_replicas", "\n", "\n", "", "train_dataloader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "sampler", "=", "train_sampler", ",", "batch_size", "=", "batch_size", ",", "**", "kwargs", ")", "\n", "\n", "# learning step", "\n", "if", "args", ".", "max_steps", "<=", "0", ":", "\n", "        ", "t_total", "=", "len", "(", "train_dataloader", ")", "//", "args", ".", "gradient_accumulation_steps", "*", "args", ".", "num_train_epochs", "\n", "", "else", ":", "\n", "        ", "t_total", "=", "args", ".", "max_steps", "\n", "args", ".", "num_train_epochs", "=", "math", ".", "ceil", "(", "\n", "1.", "*", "args", ".", "max_steps", "*", "args", ".", "gradient_accumulation_steps", "/", "len", "(", "train_dataloader", ")", ")", "\n", "\n", "", "if", "args", ".", "warmup_steps", "<", "0", ":", "\n", "        ", "args", ".", "warmup_steps", "=", "math", ".", "ceil", "(", "t_total", "*", "args", ".", "warmup_proportion", ")", "\n", "\n", "", "args", ".", "t_total", "=", "t_total", "\n", "return", "train_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_eval_step": [[237, 250], ["torch.utils.data.DataLoader", "torch.utils.data.SequentialSampler", "torch.utils.data.distributed.DistributedSampler", "kwargs.get", "kwargs.pop"], "function", ["None"], ["", "def", "setup_eval_step", "(", "args", ",", "eval_dataset", ",", "**", "kwargs", ")", ":", "\n", "# Note that DistributedSampler samples randomly", "\n", "    ", "eval_sampler", "=", "SequentialSampler", "(", "eval_dataset", ")", "if", "args", ".", "local_rank", "==", "-", "1", "else", "DistributedSampler", "(", "eval_dataset", ")", "\n", "eval_batch_size", "=", "kwargs", ".", "get", "(", "\"eval_batch_size\"", ")", "or", "args", ".", "eval_batch_size", "\n", "\n", "try", ":", "\n", "        ", "kwargs", ".", "pop", "(", "\"eval_batch_size\"", ")", "\n", "", "except", "KeyError", ":", "\n", "        ", "pass", "\n", "\n", "", "eval_dataloader", "=", "DataLoader", "(", "\n", "eval_dataset", ",", "sampler", "=", "eval_sampler", ",", "batch_size", "=", "eval_batch_size", ",", "**", "kwargs", ")", "\n", "return", "eval_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_eval_model_for_fp16": [[251, 267], ["transformers.AdamW", "amp.initialize", "ImportError", "model.named_parameters", "model.named_parameters", "any", "any"], "function", ["None"], ["", "def", "setup_eval_model_for_fp16", "(", "args", ",", "model", ")", ":", "\n", "# Prepare optimizer and schedule (linear warmup and decay)", "\n", "    ", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.weight'", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "args", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "optimizer", "=", "AdamW", "(", "optimizer_grouped_parameters", ")", "\n", "if", "args", ".", "fp16", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "apex", "import", "amp", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\"Please install apex from https://www.github.com/nvidia/apex to use fp16 training.\"", ")", "\n", "", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "args", ".", "fp16_opt_level", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_eval_model_for_inference": [[268, 288], ["torch.device", "torch.cuda.is_available", "torch.device", "model.to", "logging.warning", "logging.warning", "transformers.AdamW", "amp.initialize", "logging.warning", "logging.warning", "model.parameters", "ImportError"], "function", ["None"], ["", "def", "setup_eval_model_for_inference", "(", "model", ",", "use_cuda", ",", "use_fp16", ",", "fp16_opt_level", "=", "None", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "warning", "(", "\"cuda is set to True but no cuda device available!\"", ")", "\n", "", "if", "use_fp16", ":", "\n", "            ", "optimizer", "=", "AdamW", "(", "model", ".", "parameters", "(", ")", ")", "\n", "try", ":", "\n", "                ", "from", "apex", "import", "amp", "\n", "", "except", "ImportError", ":", "\n", "                ", "raise", "ImportError", "(", "\"Please install apex from https://www.github.com/nvidia/apex to use fp16 training.\"", ")", "\n", "", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "fp16_opt_level", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "use_fp16", ":", "\n", "            ", "logging", ".", "warning", "(", "\"cuda is set to False but fp16 is set to True -- omit!\"", ")", "\n", "\n", "", "", "return", "model", ",", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_opt": [[289, 323], ["transformers.AdamW", "transformers.get_linear_schedule_with_warmup", "tuple", "amp.initialize", "torch.nn.DataParallel", "torch.nn.parallel.DistributedDataParallel", "len", "float", "ImportError", "torch.nn.parallel.DistributedDataParallel.named_parameters", "torch.nn.parallel.DistributedDataParallel.named_parameters", "any", "args.adam_betas.split", "any"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization.get_linear_schedule_with_warmup"], ["", "def", "setup_opt", "(", "args", ",", "model", ")", ":", "\n", "# Prepare optimizer and schedule (linear warmup and decay)", "\n", "    ", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.weight'", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "args", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "if", "args", ".", "adam_betas", "is", "not", "None", ":", "\n", "        ", "adam_betas", "=", "tuple", "(", "float", "(", "_f", ")", "for", "_f", "in", "args", ".", "adam_betas", ".", "split", "(", "\",\"", ")", ")", "\n", "assert", "len", "(", "adam_betas", ")", "==", "2", "\n", "", "else", ":", "\n", "        ", "adam_betas", "=", "(", "0.9", ",", "0.999", ")", "\n", "\n", "", "optimizer", "=", "AdamW", "(", "optimizer_grouped_parameters", ",", "lr", "=", "args", ".", "learning_rate", ",", "\n", "betas", "=", "adam_betas", ",", "eps", "=", "args", ".", "adam_epsilon", ")", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", "=", "args", ".", "warmup_steps", ",", "num_training_steps", "=", "args", ".", "t_total", ")", "\n", "if", "args", ".", "fp16", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "apex", "import", "amp", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\"Please install apex from https://www.github.com/nvidia/apex to use fp16 training.\"", ")", "\n", "", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "args", ".", "fp16_opt_level", ")", "\n", "\n", "# multi-gpu training (should be after apex fp16 initialization)", "\n", "", "if", "args", ".", "n_gpu", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "# Distributed training (should be after apex fp16 initialization)", "\n", "", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "\n", "output_device", "=", "args", ".", "local_rank", ",", "\n", "find_unused_parameters", "=", "True", ")", "\n", "", "return", "model", ",", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.update_wrt_loss": [[324, 340], ["loss.mean.mean", "loss.mean.backward", "amp.scale_loss", "scaled_loss.backward", "ImportError"], "function", ["None"], ["", "def", "update_wrt_loss", "(", "args", ",", "model", ",", "optimizer", ",", "loss", ")", ":", "\n", "    ", "if", "args", ".", "n_gpu", ">", "1", ":", "\n", "        ", "loss", "=", "loss", ".", "mean", "(", ")", "# mean() to average on multi-gpu parallel training", "\n", "", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "        ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "\n", "", "if", "args", ".", "fp16", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "apex", "import", "amp", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\"Please install apex from https://www.github.com/nvidia/apex to use fp16 training.\"", ")", "\n", "", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "loss", ".", "backward", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.model_update_wrt_gradient": [[341, 355], ["optimizer.step", "scheduler.step", "model.zero_grad", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "amp.master_params", "model.parameters", "ImportError"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.step", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.step"], ["", "def", "model_update_wrt_gradient", "(", "args", ",", "model", ",", "optimizer", ",", "scheduler", ")", ":", "\n", "    ", "if", "args", ".", "max_grad_norm", ">", "0.001", ":", "\n", "        ", "if", "args", ".", "fp16", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "apex", "import", "amp", "\n", "", "except", "ImportError", ":", "\n", "                ", "raise", "ImportError", "(", "\"Please install apex from https://www.github.com/nvidia/apex to use fp16 training.\"", ")", "\n", "", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "args", ".", "max_grad_norm", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "max_grad_norm", ")", "\n", "\n", "", "", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "# Update learning rate schedule", "\n", "model", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.adv_setup_opt": [[356, 386], ["model.get_params", "transformers.AdamW", "torch.optim.Adam", "torch.optim.Adam", "help.adv_setup_scheduler", "tuple", "len", "float", "any", "args.adam_betas.split", "any"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.get_params", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.adv_setup_scheduler"], ["", "def", "adv_setup_opt", "(", "args", ",", "model", ")", ":", "\n", "# Prepare optimizer and schedule (linear warmup and decay)", "\n", "\n", "    ", "encoder_params", ",", "task_params", ",", "disc_params", "=", "model", ".", "get_params", "(", ")", "\n", "\n", "# initialize encoder optimizer", "\n", "no_decay", "=", "[", "'bias'", ",", "'LayerNorm.weight'", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "encoder_params", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "'weight_decay'", ":", "args", ".", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "[", "p", "for", "n", ",", "p", "in", "encoder_params", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "'weight_decay'", ":", "0.0", "}", "\n", "]", "\n", "if", "args", ".", "adam_betas", "is", "not", "None", ":", "\n", "        ", "adam_betas", "=", "tuple", "(", "float", "(", "_f", ")", "for", "_f", "in", "args", ".", "adam_betas", ".", "split", "(", "\",\"", ")", ")", "\n", "assert", "len", "(", "adam_betas", ")", "==", "2", "\n", "", "else", ":", "\n", "        ", "adam_betas", "=", "(", "0.9", ",", "0.999", ")", "\n", "", "encoder_optimizer", "=", "AdamW", "(", "optimizer_grouped_parameters", ",", "lr", "=", "args", ".", "encoder_lr", ",", "\n", "betas", "=", "adam_betas", ",", "eps", "=", "args", ".", "adam_epsilon", ")", "\n", "\n", "# initialize task-related optimizer", "\n", "task_optimizer", "=", "Adam", "(", "task_params", ",", "lr", "=", "args", ".", "others_lr", ",", "eps", "=", "args", ".", "adam_epsilon", ",", "weight_decay", "=", "0", ")", "\n", "\n", "# initialize discriminator optimizer", "\n", "disc_optimizer", "=", "Adam", "(", "disc_params", ",", "lr", "=", "args", ".", "others_lr", ",", "eps", "=", "args", ".", "adam_epsilon", ",", "weight_decay", "=", "0", ")", "\n", "\n", "encoder_scheduler", ",", "task_scheduler", ",", "disc_scheduler", "=", "adv_setup_scheduler", "(", "[", "encoder_optimizer", ",", "task_optimizer", ",", "disc_optimizer", "]", ",", "num_warmup_steps", "=", "args", ".", "warmup_steps", ",", "\n", "num_training_steps", "=", "args", ".", "t_total", ")", "\n", "\n", "return", "model", ",", "encoder_optimizer", ",", "task_optimizer", ",", "disc_optimizer", ",", "encoder_scheduler", ",", "task_scheduler", ",", "disc_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.adv_setup_scheduler": [[387, 404], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.LambdaLR", "max", "max", "max", "float", "float", "float", "float", "float", "float", "float", "float", "max", "max", "max", "max"], "function", ["None"], ["", "def", "adv_setup_scheduler", "(", "optimizers", ",", "num_warmup_steps", ",", "num_training_steps", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "def", "lr_lambda_encoder", "(", "current_step", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "return", "max", "(", "0.0", ",", "float", "(", "num_training_steps", "-", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", ")", "\n", "\n", "", "def", "lr_lambda_task", "(", "current_step", ")", ":", "\n", "        ", "return", "max", "(", "0.0", ",", "float", "(", "num_training_steps", "-", "current_step", "-", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "current_step", ")", ")", ")", "\n", "\n", "", "def", "lr_lambda_disc", "(", "current_step", ")", ":", "\n", "        ", "return", "max", "(", "0.0", ",", "float", "(", "num_training_steps", "-", "current_step", "-", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "current_step", ")", ")", ")", "\n", "\n", "", "encoder_scheduler", "=", "LambdaLR", "(", "optimizers", "[", "0", "]", ",", "lr_lambda_encoder", ",", "last_epoch", ")", "\n", "task_scheduler", "=", "LambdaLR", "(", "optimizers", "[", "1", "]", ",", "lr_lambda_task", ",", "last_epoch", ")", "\n", "disc_scheduler", "=", "LambdaLR", "(", "optimizers", "[", "2", "]", ",", "lr_lambda_disc", ",", "last_epoch", ")", "\n", "\n", "return", "encoder_scheduler", ",", "task_scheduler", ",", "disc_scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.save_model_with_default_name": [[405, 422], ["logging.info", "model_to_save.save_pretrained", "os.path.exists", "os.makedirs", "hasattr", "tokenizer.save_pretrained", "torch.save", "os.path.join"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.save_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_utils.PretrainedConfig.save_pretrained"], ["", "def", "save_model_with_default_name", "(", "output_dir", ",", "model", ",", "tokenizer", ",", "args_to_save", "=", "None", ")", ":", "\n", "# Create output directory if needed", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Saving model checkpoint to %s\"", ",", "output_dir", ")", "\n", "# Save a trained model, configuration and tokenizer using `save_pretrained()`.", "\n", "# They can then be reloaded using `from_pretrained()`", "\n", "model_to_save", "=", "model", ".", "module", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", "# Take care of distributed/parallel training", "\n", "model_to_save", ".", "save_pretrained", "(", "output_dir", ")", "\n", "\n", "if", "tokenizer", "is", "not", "None", ":", "\n", "        ", "tokenizer", ".", "save_pretrained", "(", "output_dir", ")", "\n", "\n", "# Good practice: save your training arguments together with the trained model", "\n", "", "if", "args_to_save", "is", "not", "None", ":", "\n", "        ", "torch", ".", "save", "(", "args_to_save", ",", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'training_args.bin'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BertMultiAspectsCLS.__init__": [[10, 20], ["transformers.BertPreTrainedModel.__init__", "transformers.BertModel", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertMultiAspectsCLS", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "self", ".", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "num_labels", ")", "\n", "\n", "self", ".", "attn_mlp", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "self", ".", "linear_map", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", "*", "3", ",", "config", ".", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BertMultiAspectsCLS.classifier": [[21, 27], ["models.BertMultiAspectsCLS.dropout", "models.BertMultiAspectsCLS.proj", "logits.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "def", "classifier", "(", "self", ",", "emb", ")", ":", "\n", "        ", "cls_feature", "=", "self", ".", "dropout", "(", "emb", ")", "\n", "logits", "=", "self", ".", "proj", "(", "cls_feature", ")", "\n", "if", "logits", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "            ", "logits", "=", "logits", ".", "squeeze", "(", "-", "1", ")", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BertMultiAspectsCLS.forward": [[28, 86], ["models.BertMultiAspectsCLS.bert", "len", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "models.BertMultiAspectsCLS.classifier", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "enumerate", "tuple", "aspects_nums.append", "len", "len", "sum", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.BertMultiAspectsCLS.attn_mlp", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.stack.append", "torch.stack.append", "torch.stack.append", "sum", "range", "len", "len", "models.BertMultiAspectsCLS.linear_map", "range", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "multi_labels", "=", "None", ",", "multi_aspects_pos", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ")", "\n", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "bs", "=", "len", "(", "input_ids", ")", "\n", "aspects_emb", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "aspects_nums", "=", "[", "]", "# the number of aspects in each sentence", "\n", "for", "_i", "in", "range", "(", "bs", ")", ":", "\n", "            ", "_j", "=", "0", "\n", "while", "_j", "<", "len", "(", "multi_labels", "[", "_i", "]", ")", "and", "multi_labels", "[", "_i", "]", "[", "_j", "]", "!=", "-", "1", ":", "\n", "                ", "labels", ".", "append", "(", "multi_labels", "[", "_i", "]", "[", "_j", "]", ")", "\n", "asp_from", "=", "multi_aspects_pos", "[", "_i", "]", "[", "_j", "*", "2", "]", "+", "1", "# the first token is [CLS]", "\n", "asp_to", "=", "multi_aspects_pos", "[", "_i", "]", "[", "_j", "*", "2", "+", "1", "]", "+", "1", "\n", "# aspects_emb.append(torch.mean(sequence_output[_i][asp_from:asp_to],dim=0))", "\n", "# assert list(token_type_ids[_i][asp_from:asp_to]) == [1] * (int(asp_to)-int(asp_from))", "\n", "# ------ get enhanced span embedding -----", "\n", "tmp_emb", "=", "torch", ".", "cat", "(", "(", "sequence_output", "[", "_i", "]", "[", "asp_from", "]", ",", "sequence_output", "[", "_i", "]", "[", "asp_to", "-", "1", "]", ")", ",", "dim", "=", "0", ")", "\n", "attn_weight", "=", "self", ".", "attn_mlp", "(", "sequence_output", "[", "_i", "]", "[", "asp_from", ":", "asp_to", "]", ")", "\n", "attn_weight", "=", "torch", ".", "softmax", "(", "attn_weight", ",", "dim", "=", "0", ")", ".", "expand", "(", "-", "1", ",", "len", "(", "sequence_output", "[", "_i", "]", "[", "asp_from", "]", ")", ")", "\n", "attn_emb", "=", "torch", ".", "sum", "(", "attn_weight", "*", "sequence_output", "[", "_i", "]", "[", "asp_from", ":", "asp_to", "]", ",", "dim", "=", "0", ")", "\n", "aspects_emb", ".", "append", "(", "self", ".", "linear_map", "(", "torch", ".", "cat", "(", "(", "tmp_emb", ",", "attn_emb", ")", ",", "dim", "=", "0", ")", ")", ")", "\n", "# -----------------------------------------", "\n", "\n", "_j", "+=", "1", "\n", "", "aspects_nums", ".", "append", "(", "_j", ")", "\n", "\n", "", "labels", "=", "torch", ".", "tensor", "(", "labels", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "aspects_emb", "=", "torch", ".", "stack", "(", "aspects_emb", ",", "dim", "=", "0", ")", "\n", "assert", "len", "(", "labels", ")", "==", "len", "(", "aspects_emb", ")", "==", "sum", "(", "aspects_nums", ")", "\n", "\n", "logits", "=", "self", ".", "classifier", "(", "aspects_emb", ")", "\n", "cls_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "cls_loss", "=", "cls_loss_fn", "(", "logits", ",", "labels", ")", "\n", "\n", "# regular", "\n", "regular_term", "=", "0", "#", "\n", "total_times", "=", "1", "\n", "# ---------  just for different aspects ------------", "\n", "for", "_idx", ",", "_num", "in", "enumerate", "(", "aspects_nums", ")", ":", "\n", "            ", "if", "_num", ">", "1", ":", "\n", "                ", "_tmp", "=", "sum", "(", "aspects_nums", "[", ":", "_idx", "]", ")", "\n", "for", "_i", "in", "range", "(", "_tmp", ",", "_tmp", "+", "_num", "-", "1", ")", ":", "\n", "                    ", "for", "_j", "in", "range", "(", "_i", "+", "1", ",", "_tmp", "+", "_num", ")", ":", "\n", "                        ", "if", "False", "or", "labels", "[", "_i", "]", "!=", "labels", "[", "_j", "]", ":", "# do regular when they have different polarity", "\n", "# regular_term += torch.abs(torch.mean(aspects_emb[_i] * aspects_emb[_j]))", "\n", "                            ", "regular_term", "+=", "torch", ".", "abs", "(", "torch", ".", "cosine_similarity", "(", "aspects_emb", "[", "_i", "]", ",", "aspects_emb", "[", "_j", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "total_times", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "regular_term", "+=", "1", "-", "torch", ".", "cosine_similarity", "(", "aspects_emb", "[", "_i", "]", ",", "aspects_emb", "[", "_j", "]", ",", "dim", "=", "-", "1", ")", "\n", "total_times", "+=", "1", "\n", "\n", "", "", "", "", "", "outputs", "=", "[", "cls_loss", ",", "logits", ",", "labels", "]", "\n", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaMultiAspectsCLS.__init__": [[91, 101], ["transformers.BertPreTrainedModel.__init__", "transformers.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RoBERTaMultiAspectsCLS", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "self", ".", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "num_labels", ")", "\n", "\n", "self", ".", "attn_mlp", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "self", ".", "linear_map", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", "*", "3", ",", "config", ".", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaMultiAspectsCLS.classifier": [[102, 108], ["models.RoBERTaMultiAspectsCLS.dropout", "models.RoBERTaMultiAspectsCLS.proj", "logits.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "def", "classifier", "(", "self", ",", "emb", ")", ":", "\n", "        ", "cls_feature", "=", "self", ".", "dropout", "(", "emb", ")", "\n", "logits", "=", "self", ".", "proj", "(", "cls_feature", ")", "\n", "if", "logits", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "            ", "logits", "=", "logits", ".", "squeeze", "(", "-", "1", ")", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaMultiAspectsCLS.forward": [[109, 167], ["models.RoBERTaMultiAspectsCLS.roberta", "len", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "models.RoBERTaMultiAspectsCLS.classifier", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "enumerate", "tuple", "aspects_nums.append", "len", "len", "sum", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.RoBERTaMultiAspectsCLS.attn_mlp", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.softmax().expand", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.stack.append", "torch.stack.append", "torch.stack.append", "sum", "range", "len", "len", "models.RoBERTaMultiAspectsCLS.linear_map", "range", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "multi_labels", "=", "None", ",", "multi_aspects_pos", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "position_ids", ")", "\n", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "bs", "=", "len", "(", "input_ids", ")", "\n", "aspects_emb", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "aspects_nums", "=", "[", "]", "# the number of aspects in each sentence", "\n", "for", "_i", "in", "range", "(", "bs", ")", ":", "\n", "            ", "_j", "=", "0", "\n", "while", "_j", "<", "len", "(", "multi_labels", "[", "_i", "]", ")", "and", "multi_labels", "[", "_i", "]", "[", "_j", "]", "!=", "-", "1", ":", "\n", "                ", "labels", ".", "append", "(", "multi_labels", "[", "_i", "]", "[", "_j", "]", ")", "\n", "asp_from", "=", "multi_aspects_pos", "[", "_i", "]", "[", "_j", "*", "2", "]", "+", "1", "# the first token is [CLS]", "\n", "asp_to", "=", "multi_aspects_pos", "[", "_i", "]", "[", "_j", "*", "2", "+", "1", "]", "+", "1", "\n", "# aspects_emb.append(torch.mean(sequence_output[_i][asp_from:asp_to],dim=0))", "\n", "# assert list(token_type_ids[_i][asp_from:asp_to]) == [1] * (int(asp_to)-int(asp_from))", "\n", "# ------ get enhanced span embedding -----", "\n", "tmp_emb", "=", "torch", ".", "cat", "(", "(", "sequence_output", "[", "_i", "]", "[", "asp_from", "]", ",", "sequence_output", "[", "_i", "]", "[", "asp_to", "-", "1", "]", ")", ",", "dim", "=", "0", ")", "\n", "attn_weight", "=", "self", ".", "attn_mlp", "(", "sequence_output", "[", "_i", "]", "[", "asp_from", ":", "asp_to", "]", ")", "\n", "attn_weight", "=", "torch", ".", "softmax", "(", "attn_weight", ",", "dim", "=", "0", ")", ".", "expand", "(", "-", "1", ",", "len", "(", "sequence_output", "[", "_i", "]", "[", "asp_from", "]", ")", ")", "\n", "attn_emb", "=", "torch", ".", "sum", "(", "attn_weight", "*", "sequence_output", "[", "_i", "]", "[", "asp_from", ":", "asp_to", "]", ",", "dim", "=", "0", ")", "\n", "aspects_emb", ".", "append", "(", "self", ".", "linear_map", "(", "torch", ".", "cat", "(", "(", "tmp_emb", ",", "attn_emb", ")", ",", "dim", "=", "0", ")", ")", ")", "\n", "# -----------------------------------------", "\n", "\n", "_j", "+=", "1", "\n", "", "aspects_nums", ".", "append", "(", "_j", ")", "\n", "\n", "", "labels", "=", "torch", ".", "tensor", "(", "labels", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "aspects_emb", "=", "torch", ".", "stack", "(", "aspects_emb", ",", "dim", "=", "0", ")", "\n", "assert", "len", "(", "labels", ")", "==", "len", "(", "aspects_emb", ")", "==", "sum", "(", "aspects_nums", ")", "\n", "\n", "logits", "=", "self", ".", "classifier", "(", "aspects_emb", ")", "\n", "cls_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "cls_loss", "=", "cls_loss_fn", "(", "logits", ",", "labels", ")", "\n", "\n", "# regular", "\n", "regular_term", "=", "0", "#", "\n", "total_times", "=", "1", "\n", "# ---------  just for different aspects ------------", "\n", "for", "_idx", ",", "_num", "in", "enumerate", "(", "aspects_nums", ")", ":", "\n", "            ", "if", "_num", ">", "1", ":", "\n", "                ", "_tmp", "=", "sum", "(", "aspects_nums", "[", ":", "_idx", "]", ")", "\n", "for", "_i", "in", "range", "(", "_tmp", ",", "_tmp", "+", "_num", "-", "1", ")", ":", "\n", "                    ", "for", "_j", "in", "range", "(", "_i", "+", "1", ",", "_tmp", "+", "_num", ")", ":", "\n", "                        ", "if", "False", "or", "labels", "[", "_i", "]", "!=", "labels", "[", "_j", "]", ":", "# do regular when they have different polarity", "\n", "# regular_term += torch.abs(torch.mean(aspects_emb[_i] * aspects_emb[_j]))", "\n", "                            ", "regular_term", "+=", "torch", ".", "abs", "(", "torch", ".", "cosine_similarity", "(", "aspects_emb", "[", "_i", "]", ",", "aspects_emb", "[", "_j", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "total_times", "+=", "1", "\n", "", "else", ":", "\n", "                            ", "regular_term", "+=", "1", "-", "torch", ".", "cosine_similarity", "(", "aspects_emb", "[", "_i", "]", ",", "aspects_emb", "[", "_j", "]", ",", "dim", "=", "-", "1", ")", "\n", "total_times", "+=", "1", "\n", "\n", "", "", "", "", "", "outputs", "=", "[", "cls_loss", ",", "logits", ",", "labels", "]", "\n", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLS.__init__": [[172, 181], ["transformers.BertPreTrainedModel.__init__", "transformers.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Dropout", "models.RoBERTaSpanCLS.make_ffnn", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_ffnn"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RoBERTaSpanCLS", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "cls", "=", "self", ".", "make_ffnn", "(", "3", "*", "config", ".", "hidden_size", ",", "3", "*", "config", ".", "hidden_size", ",", "self", ".", "num_labels", ")", "\n", "self", ".", "attn_mlp", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLS.make_linear": [[182, 184], ["torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "make_linear", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "std", "=", "0.02", ")", ":", "\n", "        ", "return", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLS.make_ffnn": [[185, 196], ["range", "ffnn.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.RoBERTaSpanCLS.make_linear", "isinstance", "models.RoBERTaSpanCLS.make_linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "models.RoBERTaSpanCLS.make_linear", "models.RoBERTaSpanCLS.make_linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_linear", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_linear", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_linear", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_linear"], ["", "def", "make_ffnn", "(", "self", ",", "feat_size", ",", "hidden_size", ",", "output_size", ")", ":", "\n", "        ", "if", "hidden_size", "is", "None", "or", "hidden_size", "==", "0", "or", "hidden_size", "==", "[", "]", "or", "hidden_size", "==", "[", "0", "]", ":", "\n", "            ", "return", "self", ".", "make_linear", "(", "feat_size", ",", "output_size", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "hidden_size", ",", "Iterable", ")", ":", "\n", "            ", "hidden_size", "=", "[", "hidden_size", "]", "\n", "", "ffnn", "=", "[", "self", ".", "make_linear", "(", "feat_size", ",", "hidden_size", "[", "0", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_size", ")", ")", ":", "\n", "            ", "ffnn", "+=", "[", "self", ".", "make_linear", "(", "hidden_size", "[", "i", "-", "1", "]", ",", "hidden_size", "[", "i", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "", "ffnn", ".", "append", "(", "self", ".", "make_linear", "(", "hidden_size", "[", "-", "1", "]", ",", "output_size", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "ffnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLS.classifier": [[197, 201], ["models.RoBERTaSpanCLS.dropout", "models.RoBERTaSpanCLS.cls"], "methods", ["None"], ["", "def", "classifier", "(", "self", ",", "emb", ")", ":", "\n", "        ", "cls_feature", "=", "self", ".", "dropout", "(", "emb", ")", "\n", "logits", "=", "self", ".", "cls", "(", "cls_feature", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLS.forward": [[202, 243], ["models.RoBERTaSpanCLS.roberta", "attention_mask.to", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "models.RoBERTaSpanCLS.classifier", "final_embs_list.append", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.RoBERTaSpanCLS.view", "labels.view", "models.RoBERTaSpanCLS.attn_mlp"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ",", "\n", "inputs_embeds", "=", "None", ",", "labels", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "\n", "position_ids", "=", "position_ids", ",", "\n", "head_mask", "=", "head_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "input_masks", "=", "attention_mask", ".", "to", "(", "torch", ".", "bool", ")", "\n", "bs", "=", "input_ids", ".", "shape", "[", "0", "]", "\n", "\n", "final_embs_list", "=", "[", "]", "\n", "for", "bs_idx", "in", "range", "(", "bs", ")", ":", "\n", "            ", "valid_embs", "=", "sequence_output", "[", "bs_idx", "]", "[", "input_masks", "[", "bs_idx", "]", "]", "[", "1", ":", "-", "1", "]", "# the first token is [CLS] and the last token is [SEP]", "\n", "\n", "head_emb", "=", "valid_embs", "[", "0", "]", "\n", "if", "valid_embs", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "                ", "final_emb", "=", "torch", ".", "cat", "(", "[", "head_emb", ",", "head_emb", ",", "head_emb", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "tail_emb", "=", "valid_embs", "[", "-", "1", "]", "\n", "tokens_attn", "=", "torch", ".", "squeeze", "(", "self", ".", "attn_mlp", "(", "valid_embs", ")", ")", "# [num_wps]", "\n", "tokens_attn", "=", "nn", ".", "functional", ".", "softmax", "(", "tokens_attn", ")", "# [num_asp+num_spans, num_wps]", "\n", "\n", "attn_emb", "=", "torch", ".", "matmul", "(", "tokens_attn", ",", "valid_embs", ")", "\n", "\n", "final_emb", "=", "torch", ".", "cat", "(", "[", "head_emb", ",", "tail_emb", ",", "attn_emb", "]", ",", "dim", "=", "0", ")", "\n", "", "final_embs_list", ".", "append", "(", "final_emb", ")", "\n", "\n", "\n", "", "final_embs", "=", "torch", ".", "stack", "(", "final_embs_list", ",", "dim", "=", "0", ")", "# [bs, hidden_size * 3]", "\n", "\n", "logits", "=", "self", ".", "classifier", "(", "final_embs", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLSAdvDistillation.__init__": [[248, 297], ["transformers.BertPreTrainedModel.__init__", "transformers.RobertaModel", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "models.RoBERTaSpanCLSAdvDistillation.make_ffnn", "models.RoBERTaSpanCLSAdvDistillation.make_ffnn", "models.RoBERTaSpanCLSAdvDistillation.make_ffnn", "models.RoBERTaSpanCLSAdvDistillation.make_ffnn", "models.RoBERTaSpanCLSAdvDistillation.make_ffnn", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_ffnn", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_ffnn", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_ffnn", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_ffnn", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_ffnn"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RoBERTaSpanCLSAdvDistillation", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "self", ".", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n", "self", ".", "attn_mlp", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "self", ".", "save_spans_info", "=", "config", ".", "save_spans_info", "\n", "self", ".", "use_gate", "=", "config", ".", "use_gate", "\n", "self", ".", "no_distillation", "=", "config", ".", "no_distillation", "\n", "self", ".", "no_sentiment_score", "=", "config", ".", "no_sentiment_score", "\n", "self", ".", "no_adversarial", "=", "config", ".", "no_adversarial", "\n", "self", ".", "no_adv_loss", "=", "config", ".", "no_adv_loss", "\n", "self", ".", "adversarial_on_polarity", "=", "config", ".", "adversarial_on_polarity", "\n", "\n", "\n", "self", ".", "top_n", "=", "config", ".", "top_n", "# top_n spans according to the total score", "\n", "self", ".", "max_span_width", "=", "config", ".", "max_span_width", "\n", "self", ".", "use_width_features", "=", "config", ".", "use_width_features", "\n", "self", ".", "use_rela_dis_features", "=", "config", ".", "use_rela_dis_features", "\n", "self", ".", "use_dep_dis_features", "=", "config", ".", "use_dep_dis_features", "\n", "self", ".", "feature_emb_size", "=", "config", ".", "feature_emb_size", "\n", "self", ".", "span_emb_size", "=", "config", ".", "hidden_size", "*", "3", "+", "self", ".", "feature_emb_size", "if", "self", ".", "use_width_features", "else", "config", ".", "hidden_size", "*", "3", "\n", "self", ".", "max_rela_distance", "=", "config", ".", "max_rela_distance", "\n", "self", ".", "adv_loss_weight", "=", "config", ".", "adv_loss_weight", "\n", "self", ".", "max_dep_dis_distance", "=", "20", "\n", "self", ".", "pair_emb_size", "=", "self", ".", "span_emb_size", "*", "3", "+", "self", ".", "feature_emb_size", "if", "(", "self", ".", "use_rela_dis_features", "or", "self", ".", "use_dep_dis_features", ")", "else", "self", ".", "span_emb_size", "*", "3", "\n", "\n", "self", ".", "absa_cls", "=", "self", ".", "make_ffnn", "(", "self", ".", "span_emb_size", ",", "self", ".", "span_emb_size", ",", "self", ".", "num_labels", ")", "\n", "\n", "self", ".", "emb_span_width", "=", "nn", ".", "Embedding", "(", "self", ".", "max_span_width", ",", "self", ".", "feature_emb_size", ")", "if", "self", ".", "use_width_features", "else", "None", "\n", "self", ".", "emb_rela_distance", "=", "nn", ".", "Embedding", "(", "self", ".", "max_rela_distance", ",", "self", ".", "feature_emb_size", ")", "if", "self", ".", "use_rela_dis_features", "else", "None", "\n", "self", ".", "emb_dep_dis_distance", "=", "nn", ".", "Embedding", "(", "self", ".", "max_dep_dis_distance", ",", "self", ".", "feature_emb_size", ")", "if", "self", ".", "use_dep_dis_features", "else", "None", "\n", "self", ".", "span_emb_score_ffnn", "=", "self", ".", "make_ffnn", "(", "self", ".", "span_emb_size", ",", "3000", ",", "output_size", "=", "3", ")", "\n", "self", ".", "dependency_score_ffnn", "=", "self", ".", "make_ffnn", "(", "self", ".", "pair_emb_size", ",", "3000", ",", "output_size", "=", "1", ")", "# TODO: dot product/ change mlp into bert layer/ multi-head", "\n", "self", ".", "gate_ffnn", "=", "self", ".", "make_ffnn", "(", "self", ".", "span_emb_size", "*", "2", ",", "3000", ",", "output_size", "=", "self", ".", "span_emb_size", ")", "\n", "\n", "\n", "config", ".", "span_emb_size", "=", "self", ".", "span_emb_size", "\n", "\n", "# discriminator: to classify the polarity of aspect", "\n", "# single dense layer", "\n", "self", ".", "nums_bias_label", "=", "config", ".", "nums_bias_label", "\n", "\n", "# two-layer MLP", "\n", "\n", "self", ".", "disc", "=", "self", ".", "make_ffnn", "(", "self", ".", "span_emb_size", ",", "self", ".", "span_emb_size", ",", "self", ".", "nums_bias_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLSAdvDistillation.get_params": [[298, 320], ["models.RoBERTaSpanCLSAdvDistillation.named_parameters", "list", "models.RoBERTaSpanCLSAdvDistillation.disc.parameters", "list", "list", "list", "name.startswith", "name.startswith", "encoder_params.append", "list", "models.RoBERTaSpanCLSAdvDistillation.emb_span_width.parameters", "models.RoBERTaSpanCLSAdvDistillation.emb_rela_distance.parameters", "models.RoBERTaSpanCLSAdvDistillation.emb_dep_dis_distance.parameters", "list", "models.RoBERTaSpanCLSAdvDistillation.gate_ffnn.parameters", "list", "models.RoBERTaSpanCLSAdvDistillation.dependency_score_ffnn.parameters", "list", "list", "models.RoBERTaSpanCLSAdvDistillation.span_emb_score_ffnn.parameters", "models.RoBERTaSpanCLSAdvDistillation.absa_cls.parameters", "models.RoBERTaSpanCLSAdvDistillation.attn_mlp.parameters"], "methods", ["None"], ["", "def", "get_params", "(", "self", ",", "named", "=", "True", ")", ":", "\n", "# encoder parameters", "\n", "        ", "encoder_params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "name", ".", "startswith", "(", "'bert'", ")", "or", "name", ".", "startswith", "(", "'roberta'", ")", ":", "\n", "                ", "to_add", "=", "(", "name", ",", "param", ")", "if", "named", "else", "param", "\n", "encoder_params", ".", "append", "(", "to_add", ")", "\n", "\n", "# task-based parameters", "\n", "", "", "task_params", "=", "list", "(", "list", "(", "self", ".", "absa_cls", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "attn_mlp", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "span_emb_score_ffnn", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "dependency_score_ffnn", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "gate_ffnn", ".", "parameters", "(", ")", ")", ")", "\n", "if", "self", ".", "use_width_features", ":", "\n", "            ", "task_params", "+=", "list", "(", "self", ".", "emb_span_width", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "use_rela_dis_features", ":", "\n", "            ", "task_params", "+=", "list", "(", "self", ".", "emb_rela_distance", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "use_dep_dis_features", ":", "\n", "            ", "task_params", "+=", "list", "(", "self", ".", "emb_dep_dis_distance", ".", "parameters", "(", ")", ")", "\n", "\n", "", "disc_params", "=", "self", ".", "disc", ".", "parameters", "(", ")", "\n", "\n", "return", "encoder_params", ",", "task_params", ",", "disc_params", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLSAdvDistillation.make_linear": [[321, 323], ["torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "make_linear", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "std", "=", "0.02", ")", ":", "\n", "        ", "return", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLSAdvDistillation.make_ffnn": [[324, 335], ["range", "ffnn.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.RoBERTaSpanCLSAdvDistillation.make_linear", "isinstance", "models.RoBERTaSpanCLSAdvDistillation.make_linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "models.RoBERTaSpanCLSAdvDistillation.make_linear", "models.RoBERTaSpanCLSAdvDistillation.make_linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_linear", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_linear", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_linear", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_linear"], ["", "def", "make_ffnn", "(", "self", ",", "feat_size", ",", "hidden_size", ",", "output_size", ")", ":", "\n", "        ", "if", "hidden_size", "is", "None", "or", "hidden_size", "==", "0", "or", "hidden_size", "==", "[", "]", "or", "hidden_size", "==", "[", "0", "]", ":", "\n", "            ", "return", "self", ".", "make_linear", "(", "feat_size", ",", "output_size", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "hidden_size", ",", "Iterable", ")", ":", "\n", "            ", "hidden_size", "=", "[", "hidden_size", "]", "\n", "", "ffnn", "=", "[", "self", ".", "make_linear", "(", "feat_size", ",", "hidden_size", "[", "0", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_size", ")", ")", ":", "\n", "            ", "ffnn", "+=", "[", "self", ".", "make_linear", "(", "hidden_size", "[", "i", "-", "1", "]", ",", "hidden_size", "[", "i", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "", "ffnn", ".", "append", "(", "self", ".", "make_linear", "(", "hidden_size", "[", "-", "1", "]", ",", "output_size", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "ffnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLSAdvDistillation.classifier": [[336, 342], ["models.RoBERTaSpanCLSAdvDistillation.dropout", "models.RoBERTaSpanCLSAdvDistillation.absa_cls", "logits.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "def", "classifier", "(", "self", ",", "emb", ")", ":", "\n", "        ", "cls_feature", "=", "self", ".", "dropout", "(", "emb", ")", "\n", "logits", "=", "self", ".", "absa_cls", "(", "cls_feature", ")", "\n", "if", "logits", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "            ", "logits", "=", "logits", ".", "squeeze", "(", "-", "1", ")", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLSAdvDistillation.discriminator": [[343, 352], ["models.RoBERTaSpanCLSAdvDistillation.disc", "models.RoBERTaSpanCLSAdvDistillation.dropout", "emb.detach"], "methods", ["None"], ["", "def", "discriminator", "(", "self", ",", "emb", ")", ":", "\n", "# Note: detach the embedding since when don't want the gradient to flow", "\n", "#       all the way to the encoder. disc_loss is used only to change the", "\n", "#       parameters of the discriminator network", "\n", "# if self.sharing_all:", "\n", "#     pure_logits = self.absa_cls(self.dropout(emb.detach()))", "\n", "# else:", "\n", "        ", "pure_logits", "=", "self", ".", "disc", "(", "self", ".", "dropout", "(", "emb", ".", "detach", "(", ")", ")", ")", "\n", "return", "pure_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLSAdvDistillation.adv_classifier": [[353, 362], ["models.RoBERTaSpanCLSAdvDistillation.disc", "models.RoBERTaSpanCLSAdvDistillation.dropout"], "methods", ["None"], ["", "def", "adv_classifier", "(", "self", ",", "emb", ")", ":", "\n", "# Note: detach the embedding since when don't want the gradient to flow", "\n", "#       all the way to the encoder. disc_loss is used only to change the", "\n", "#       parameters of the discriminator network", "\n", "# if self.sharing_all:", "\n", "#     pure_logits = self.absa_cls(self.dropout(emb))", "\n", "# else:", "\n", "        ", "pure_logits", "=", "self", ".", "disc", "(", "self", ".", "dropout", "(", "emb", ")", ")", "\n", "return", "pure_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLSAdvDistillation.refine_aspect": [[363, 400], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.RoBERTaSpanCLSAdvDistillation.gate_ffnn", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "refine_aspect", "(", "self", ",", "asp_embs", ",", "span_embs", ",", "scores", ",", "max_num", "=", "None", ",", "dummy_scores", "=", "None", ")", ":", "\n", "# asp_embs: [num_asp, emb_size]", "\n", "# span_embs: [num_spans, emb_size]", "\n", "# scores: [num_asp, num_spans]", "\n", "\n", "# add dummy scores and get attention weights", "\n", "        ", "num_asp", "=", "asp_embs", ".", "shape", "[", "0", "]", "\n", "# dummy_scores = torch.full((num_asp, 1), fill_value=9,device=scores.device) # the dummy span's score", "\n", "# scores = torch.cat([dummy_scores, scores], dim=1)", "\n", "if", "dummy_scores", "is", "not", "None", ":", "\n", "            ", "scores", "=", "torch", ".", "cat", "(", "[", "dummy_scores", ",", "scores", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "scores", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "num_asp", ",", "1", ",", "device", "=", "scores", ".", "device", ")", ",", "scores", "]", ",", "dim", "=", "1", ")", "# [num_asp, 1 + num_spans]", "\n", "", "attn_weights", "=", "nn", ".", "functional", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "# [num_asp, 1 + num_spans]", "\n", "\n", "# get the new asp_embs with attention weight", "\n", "span_embs", "=", "torch", ".", "unsqueeze", "(", "span_embs", ",", "0", ")", ".", "repeat", "(", "num_asp", ",", "1", ",", "1", ")", "# [num_asp, num_spans, emb_size]", "\n", "# if self.use_explict_dummy_span:", "\n", "#     dummy_spans = self.dummy_span_emb(torch.tensor([0], dtype=torch.long, device=asp_embs.device)) # [1, emb_size]", "\n", "#     dummy_spans = dummy_spans.repeat(num_asp, 1) # [num_asp, emb_size]", "\n", "#     span_embs = torch.cat([torch.unsqueeze(dummy_spans, 1), span_embs], dim=1)  # [num_asp, 1 + num_spans, emb_size]", "\n", "# else:", "\n", "span_embs", "=", "torch", ".", "cat", "(", "[", "torch", ".", "unsqueeze", "(", "asp_embs", ",", "1", ")", ",", "span_embs", "]", ",", "dim", "=", "1", ")", "# [num_asp, 1 + num_spans, emb_size]", "\n", "new_asp_emb", "=", "torch", ".", "sum", "(", "torch", ".", "unsqueeze", "(", "attn_weights", ",", "2", ")", "*", "span_embs", ",", "dim", "=", "1", ")", "# [num_asp, emb_size]", "\n", "\n", "if", "self", ".", "use_gate", ":", "\n", "# get the final embedding after a gate", "\n", "            ", "gate", "=", "self", ".", "gate_ffnn", "(", "torch", ".", "cat", "(", "[", "asp_embs", ",", "new_asp_emb", "]", ",", "dim", "=", "1", ")", ")", "# [num_asp, emb_size]", "\n", "gate", "=", "torch", ".", "sigmoid", "(", "gate", ")", "\n", "# gate_mean = torch.mean(gate, dim=-1)", "\n", "refined_asp_embs", "=", "gate", "*", "new_asp_emb", "+", "(", "1", "-", "gate", ")", "*", "asp_embs", "\n", "", "else", ":", "\n", "            ", "refined_asp_embs", "=", "new_asp_emb", "\n", "\n", "# get the ranking of scores", "\n", "", "sorted_scores", ",", "indices", "=", "torch", ".", "sort", "(", "scores", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "# 0 denotes the dummy span, and other spans' indexs + 1", "\n", "return", "refined_asp_embs", ",", "indices", ",", "attn_weights", ",", "sorted_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLSAdvDistillation.get_forward_data": [[405, 614], ["models.RoBERTaSpanCLSAdvDistillation.roberta", "attention_mask.to", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "span_emb_compo_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "models.RoBERTaSpanCLSAdvDistillation.span_emb_score_ffnn", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "abs", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "models.RoBERTaSpanCLSAdvDistillation.refine_aspect", "all_asp_emb.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "models.RoBERTaSpanCLSAdvDistillation.emb_span_width", "models.RoBERTaSpanCLSAdvDistillation.dropout", "span_emb_compo_list.append", "models.RoBERTaSpanCLSAdvDistillation.attn_mlp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss.", "torch.clamp.append", "torch.clamp.append", "torch.clamp.append", "models.RoBERTaSpanCLSAdvDistillation.emb_rela_distance", "models.RoBERTaSpanCLSAdvDistillation.dropout().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "len", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "span_tokens_mask.to", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "valid_dep_dis.gather", "valid_dep_dis.gather", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "models.RoBERTaSpanCLSAdvDistillation.emb_dep_dis_distance", "models.RoBERTaSpanCLSAdvDistillation.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.RoBERTaSpanCLSAdvDistillation.dependency_score_ffnn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.gather", "torch.cat.gather", "torch.cat.gather", "atten_weights.gather", "torch.cat.gather", "torch.cat.gather", "torch.cat.gather", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "range", "models.RoBERTaSpanCLSAdvDistillation.dropout", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "indices.repeat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.refine_aspect"], ["", "def", "get_forward_data", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "multi_labels", "=", "None", ",", "multi_aspects_pos", "=", "None", ",", "sentiment_scores", "=", "None", ",", "wps2tokens", "=", "None", ",", "\n", "dep_distances", "=", "None", ",", "multi_bias_labels", "=", "None", ",", "starts_position", "=", "None", ",", "ends_position", "=", "None", ",", "\n", "senti_distributions", "=", "None", ")", ":", "\n", "        ", "device", "=", "input_ids", ".", "device", "\n", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "None", ",", "# RoBERTa do not have token_type_ids", "\n", "position_ids", "=", "position_ids", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "# [bs, seq_len, emb_size]", "\n", "\n", "all_asp_emb", "=", "[", "]", "\n", "pure_asp_embs", "=", "[", "]", "\n", "if", "self", ".", "save_spans_info", ":", "\n", "            ", "span_start_idx", "=", "[", "]", "\n", "span_end_idx", "=", "[", "]", "\n", "span_senti_scores", "=", "[", "]", "\n", "span_depend_scores", "=", "[", "]", "\n", "span_atten_weights", "=", "[", "]", "\n", "span_total_scores", "=", "[", "]", "\n", "", "input_masks", "=", "attention_mask", ".", "to", "(", "torch", ".", "bool", ")", "# [num seg, num max tokens]", "\n", "bs", "=", "input_ids", ".", "shape", "[", "0", "]", "\n", "\n", "# Get labels", "\n", "labels", "=", "[", "]", "\n", "bias_labels", "=", "[", "]", "\n", "kl_loss", "=", "0", "\n", "for", "bs_idx", "in", "range", "(", "bs", ")", ":", "\n", "# get labels and aspect terms information", "\n", "            ", "asps_from", "=", "[", "]", "\n", "asps_to", "=", "[", "]", "\n", "_j", "=", "0", "\n", "cur_aspects_pos", "=", "multi_aspects_pos", "[", "bs_idx", "]", "\n", "while", "_j", "<", "len", "(", "multi_labels", "[", "bs_idx", "]", ")", "and", "multi_labels", "[", "bs_idx", "]", "[", "_j", "]", "!=", "-", "1", ":", "\n", "                ", "labels", ".", "append", "(", "multi_labels", "[", "bs_idx", "]", "[", "_j", "]", ")", "\n", "bias_labels", ".", "append", "(", "multi_bias_labels", "[", "bs_idx", "]", "[", "_j", "]", ")", "\n", "asps_from", ".", "append", "(", "cur_aspects_pos", "[", "_j", "*", "2", "]", "+", "1", ")", "# the first token is [CLS]", "\n", "asps_to", ".", "append", "(", "cur_aspects_pos", "[", "_j", "*", "2", "+", "1", "]", "+", "1", ")", "\n", "_j", "+=", "1", "\n", "", "num_asp", "=", "_j", "\n", "asps_from", "=", "torch", ".", "tensor", "(", "asps_from", ",", "dtype", "=", "int", ",", "device", "=", "device", ")", "\n", "asps_to", "=", "torch", ".", "tensor", "(", "asps_to", ",", "dtype", "=", "int", ",", "device", "=", "device", ")", "\n", "\n", "# get wordpieces embeddings", "\n", "input_mask", "=", "input_masks", "[", "bs_idx", "]", "\n", "valid_sent", "=", "sequence_output", "[", "bs_idx", "]", "[", "input_mask", "]", "# [num_wps, hidden_size]", "\n", "num_wps", "=", "valid_sent", ".", "shape", "[", "0", "]", "-", "2", "# the head and tail are [CLS] and [SEG] respectively", "\n", "valid_dep_dis", "=", "dep_distances", "[", "bs_idx", "]", "[", "0", ":", "num_asp", ",", "0", ":", "num_wps", "]", "\n", "\n", "# all possible spans' position", "\n", "starts", "=", "starts_position", "[", "bs_idx", "]", "\n", "num_spans", "=", "0", "\n", "for", "_tmp", "in", "starts", ":", "\n", "                ", "if", "_tmp", "==", "-", "1", ":", "\n", "                    ", "break", "\n", "", "else", ":", "\n", "                    ", "num_spans", "+=", "1", "\n", "", "", "starts", "=", "starts", "[", ":", "num_spans", "]", "\n", "ends", "=", "ends_position", "[", "bs_idx", "]", "[", ":", "num_spans", "]", "\n", "senti_classifier_logits", "=", "senti_distributions", "[", "bs_idx", "]", "[", ":", "num_spans", "]", "\n", "\n", "# --------------- Get the embeddings of aspects and all spans ----------------------", "\n", "# add aspects info to span's starts and ends list to get span embeddings", "\n", "starts", ",", "ends", "=", "torch", ".", "cat", "(", "(", "asps_from", ",", "starts", ")", ")", ",", "torch", ".", "cat", "(", "(", "asps_to", ",", "ends", ")", ")", "\n", "\n", "# get all spans and aspect terms embedding", "\n", "start_embs", ",", "end_embs", "=", "valid_sent", "[", "starts", "]", ",", "valid_sent", "[", "ends", "-", "1", "]", "\n", "span_emb_compo_list", "=", "[", "start_embs", ",", "end_embs", "]", "\n", "if", "self", ".", "use_width_features", ":", "\n", "                ", "width_idx", "=", "ends", "-", "starts", "\n", "width_idx", "=", "torch", ".", "clamp", "(", "width_idx", ",", "0", ",", "self", ".", "max_span_width", ")", "\n", "width_emb", "=", "self", ".", "emb_span_width", "(", "width_idx", "-", "1", ")", "\n", "width_emb", "=", "self", ".", "dropout", "(", "width_emb", ")", "\n", "span_emb_compo_list", ".", "append", "(", "width_emb", ")", "\n", "\n", "", "span_tokens", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "arange", "(", "1", ",", "num_wps", "+", "1", ",", "device", "=", "device", ")", ",", "0", ")", ".", "repeat", "(", "num_asp", "+", "num_spans", ",", "\n", "1", ")", "# [num_asp+num_spans, num_wps]", "\n", "span_tokens_mask", "=", "(", "span_tokens", ">=", "torch", ".", "unsqueeze", "(", "starts", ",", "1", ")", ")", "&", "(", "\n", "span_tokens", "<", "torch", ".", "unsqueeze", "(", "ends", ",", "1", ")", ")", "# [num_asp+num_spans, num_wps]", "\n", "token_attn", "=", "torch", ".", "squeeze", "(", "self", ".", "attn_mlp", "(", "valid_sent", "[", "1", ":", "-", "1", "]", ")", ")", "# [num_wps]", "\n", "span_tokens_attn_raw", "=", "torch", ".", "log", "(", "span_tokens_mask", ".", "to", "(", "torch", ".", "float", ")", ")", "+", "torch", ".", "unsqueeze", "(", "token_attn", ",", "\n", "0", ")", "# [num_asp+num_spans, num_wps]  (inf & valuse)", "\n", "span_tokens_attn", "=", "nn", ".", "functional", ".", "softmax", "(", "span_tokens_attn_raw", ",", "dim", "=", "1", ")", "# [num_asp+num_spans, num_wps]", "\n", "span_attn_emb", "=", "torch", ".", "matmul", "(", "span_tokens_attn", ",", "valid_sent", "[", "1", ":", "-", "1", "]", ")", "# [num_asp+num_spans, emb_size]", "\n", "span_emb_compo_list", ".", "append", "(", "span_attn_emb", ")", "\n", "span_emb", "=", "torch", ".", "cat", "(", "span_emb_compo_list", ",", "dim", "=", "1", ")", "# [num_asp+num_spans, new_size]", "\n", "asp_emb", ",", "span_emb", "=", "span_emb", "[", ":", "num_asp", "]", ",", "span_emb", "[", "num_asp", ":", "]", "# [num_asp, new_size],  [num_spans, new_size]", "\n", "pure_asp_embs", ".", "append", "(", "asp_emb", ")", "\n", "starts", ",", "ends", "=", "starts", "[", "num_asp", ":", "]", ",", "ends", "[", "num_asp", ":", "]", "\n", "\n", "# --------------- Get the embeddings of aspects and all spans finished! ----------------------", "\n", "\n", "span_sentiment_scores", "=", "self", ".", "span_emb_score_ffnn", "(", "span_emb", ")", "\n", "if", "self", ".", "no_distillation", ":", "\n", "                ", "kl_loss", "+=", "torch", ".", "tensor", "(", "0", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "                ", "assert", "span_sentiment_scores", ".", "shape", "==", "senti_classifier_logits", ".", "shape", "\n", "span_kl_loss_fn", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'mean'", ")", "\n", "span_kl_loss", "=", "span_kl_loss_fn", "(", "torch", ".", "log_softmax", "(", "span_sentiment_scores", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "softmax", "(", "senti_classifier_logits", ",", "dim", "=", "-", "1", ")", ")", "\n", "kl_loss", "+=", "span_kl_loss", "\n", "\n", "", "if", "self", ".", "no_sentiment_score", ":", "\n", "                ", "span_sentiment_scores", "=", "torch", ".", "ones_like", "(", "span_sentiment_scores", ",", "device", "=", "device", ")", "[", ":", ",", "1", "]", "\n", "span_meaningless_scores", "=", "span_sentiment_scores", "\n", "", "else", ":", "\n", "                ", "span_sentiment_scores", "=", "1", "-", "torch", ".", "softmax", "(", "span_sentiment_scores", ",", "dim", "=", "-", "1", ")", "[", ":", ",", "1", "]", "\n", "span_meaningless_scores", "=", "1", "-", "span_sentiment_scores", "\n", "\n", "\n", "", "repeat_asp_emb", "=", "torch", ".", "unsqueeze", "(", "asp_emb", ",", "1", ")", ".", "repeat", "(", "1", ",", "num_spans", ",", "1", ")", "# [num_asp, num_spans, new_size]", "\n", "similarity_emb", "=", "repeat_asp_emb", "*", "span_emb", "# [num_asp, num_spans, new_size]", "\n", "\n", "position_info", "=", "torch", ".", "stack", "(", "[", "starts", ",", "ends", "]", ",", "dim", "=", "0", ")", ".", "t", "(", ")", "# [num_spans, 2]", "\n", "rela_position", "=", "torch", ".", "cat", "(", "[", "position_info", "for", "_", "in", "range", "(", "num_asp", ")", "]", ",", "dim", "=", "1", ")", "# [num_spans, num_asp*2]", "\n", "cur_aspects_pos", "=", "torch", ".", "unsqueeze", "(", "cur_aspects_pos", "[", ":", "num_asp", "*", "2", "]", ",", "dim", "=", "0", ")", ".", "repeat", "(", "num_spans", ",", "\n", "1", ")", "# [num_spans, num_asp*2]", "\n", "cur_aspects_pos", "=", "abs", "(", "cur_aspects_pos", "-", "rela_position", ")", "# [num_spans, num_asp*2]", "\n", "rela_position", "=", "[", "]", "\n", "for", "_n", "in", "range", "(", "0", ",", "num_asp", "*", "2", ",", "2", ")", ":", "\n", "                ", "rela_position", ".", "append", "(", "torch", ".", "min", "(", "cur_aspects_pos", "[", ":", ",", "_n", "]", ",", "cur_aspects_pos", "[", ":", ",", "_n", "+", "1", "]", ")", ")", "\n", "", "rela_position", "=", "torch", ".", "stack", "(", "rela_position", ",", "dim", "=", "1", ")", "# [num_spans, num_asp]", "\n", "rela_position", "=", "torch", ".", "clamp", "(", "rela_position", ",", "0", ",", "self", ".", "max_rela_distance", "-", "1", ")", "\n", "if", "self", ".", "use_rela_dis_features", ":", "\n", "                ", "rela_position_emb", "=", "self", ".", "emb_rela_distance", "(", "rela_position", ")", "\n", "rela_position_emb", "=", "self", ".", "dropout", "(", "rela_position_emb", ")", ".", "permute", "(", "1", ",", "0", ",", "\n", "2", ")", "# [num_asp, num_spans, feature_size]", "\n", "pair_emb", "=", "torch", ".", "cat", "(", "\n", "[", "repeat_asp_emb", ",", "torch", ".", "unsqueeze", "(", "span_emb", ",", "0", ")", ".", "repeat", "(", "num_asp", ",", "1", ",", "1", ")", ",", "similarity_emb", ",", "\n", "rela_position_emb", "]", ",", "dim", "=", "-", "1", ")", "# [num_asp, num_spans, pair_size]", "\n", "", "elif", "self", ".", "use_dep_dis_features", ":", "\n", "                ", "assert", "valid_dep_dis", ".", "shape", "==", "(", "num_asp", ",", "num_wps", ")", "\n", "starts_idx", "=", "(", "starts", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "repeat", "(", "num_asp", ",", "1", ")", "# [num_asp, nums_span]", "\n", "ends_idx", "=", "(", "ends", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "repeat", "(", "num_asp", ",", "1", ")", "\n", "span_dep_distances_start", "=", "valid_dep_dis", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "starts_idx", ")", "\n", "span_dep_distances_end", "=", "valid_dep_dis", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "ends_idx", "-", "1", ")", "\n", "span_dep_distances", "=", "torch", ".", "empty", "(", "num_asp", ",", "num_spans", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "torch", ".", "min", "(", "span_dep_distances_start", ",", "span_dep_distances_end", ",", "out", "=", "span_dep_distances", ")", "\n", "span_dep_distances", "=", "torch", ".", "clamp", "(", "span_dep_distances", ",", "0", ",", "self", ".", "max_dep_dis_distance", "-", "1", ")", "\n", "dep_dis_position_emb", "=", "self", ".", "emb_dep_dis_distance", "(", "span_dep_distances", ")", "\n", "dep_dis_position_emb", "=", "self", ".", "dropout", "(", "dep_dis_position_emb", ")", "# [num_asp, num_spans, feature_size]", "\n", "pair_emb", "=", "torch", ".", "cat", "(", "\n", "[", "repeat_asp_emb", ",", "torch", ".", "unsqueeze", "(", "span_emb", ",", "0", ")", ".", "repeat", "(", "num_asp", ",", "1", ",", "1", ")", ",", "similarity_emb", ",", "\n", "dep_dis_position_emb", "]", ",", "dim", "=", "-", "1", ")", "# [num_asp, num_spans, pair_size]", "\n", "\n", "", "else", ":", "\n", "                ", "pair_emb", "=", "torch", ".", "cat", "(", "\n", "[", "repeat_asp_emb", ",", "torch", ".", "unsqueeze", "(", "span_emb", ",", "0", ")", ".", "repeat", "(", "num_asp", ",", "1", ",", "1", ")", ",", "similarity_emb", "]", ",", "\n", "dim", "=", "-", "1", ")", "# [num_asp, num_spans, pair_size]", "\n", "", "dependency_scores", "=", "torch", ".", "softmax", "(", "torch", ".", "squeeze", "(", "self", ".", "dependency_score_ffnn", "(", "pair_emb", ")", ",", "2", ")", ",", "dim", "=", "-", "1", ")", "# [num_asp, num_spans], remove torch.tank", "\n", "scores", "=", "span_sentiment_scores", "*", "dependency_scores", "\n", "dummy_scores", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "mean", "(", "span_meaningless_scores", "*", "dependency_scores", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "1", ")", "# num_asp", "\n", "assert", "len", "(", "dummy_scores", ")", "==", "num_asp", "\n", "\n", "\n", "# refine_aspect_with_before_dummy", "\n", "weighted_asp_emb", ",", "cur_indice", ",", "atten_weights", ",", "sorted_scores", "=", "self", ".", "refine_aspect", "(", "asp_emb", ",", "span_emb", ",", "scores", ",", "dummy_scores", "=", "dummy_scores", ")", "\n", "all_asp_emb", ".", "append", "(", "weighted_asp_emb", ")", "\n", "\n", "# get the top-N spans' information", "\n", "if", "self", ".", "save_spans_info", ":", "\n", "                ", "topn", "=", "self", ".", "top_n", "\n", "indices", "=", "cur_indice", "[", ":", ",", "0", ":", "topn", "]", "# [num_asp * top_n]", "\n", "if", "num_spans", "<", "topn", ":", "\n", "                    ", "indices", "=", "torch", ".", "cat", "(", "[", "indices", ",", "indices", ".", "repeat", "(", "1", ",", "topn", ")", "]", ",", "dim", "=", "-", "1", ")", "[", ":", ",", "0", ":", "topn", "]", "\n", "\n", "", "starts", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "device", ")", ",", "starts", "]", ",", "\n", "dim", "=", "0", ")", "-", "1", "# [1 + num_spans], -1 denotes the dummy span. others denote the position in sentence text", "\n", "ends", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "device", ")", ",", "ends", "]", ",", "dim", "=", "0", ")", "-", "1", "\n", "span_start_idx", ".", "append", "(", "starts", "[", "indices", "]", ")", "\n", "span_end_idx", ".", "append", "(", "ends", "[", "indices", "]", ")", "\n", "span_sentiment_scores", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "device", ")", ",", "span_sentiment_scores", "]", ",", "\n", "dim", "=", "0", ")", "# [1 + num_spans],", "\n", "span_senti_scores", ".", "append", "(", "span_sentiment_scores", "[", "indices", "]", ")", "\n", "dependency_scores", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "zeros", "(", "num_asp", ",", "1", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ",", "dependency_scores", "]", ",", "\n", "dim", "=", "1", ")", "# [num_asp. 1 + num_spans],", "\n", "span_depend_scores", ".", "append", "(", "dependency_scores", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "indices", ")", ")", "\n", "span_atten_weights", ".", "append", "(", "atten_weights", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "indices", ")", ")", "\n", "\n", "scores", "=", "torch", ".", "cat", "(", "\n", "[", "dummy_scores", ",", "scores", "]", ",", "\n", "dim", "=", "1", ")", "\n", "span_total_scores", ".", "append", "(", "scores", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "indices", ")", ")", "\n", "\n", "", "", "labels", "=", "torch", ".", "tensor", "(", "labels", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "aspects_emb", "=", "torch", ".", "cat", "(", "all_asp_emb", ",", "dim", "=", "0", ")", "\n", "kl_loss", "=", "kl_loss", "/", "bs", "\n", "\n", "bias_labels", "=", "torch", ".", "tensor", "(", "bias_labels", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "pure_asp_embs", "=", "torch", ".", "cat", "(", "pure_asp_embs", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "if", "self", ".", "save_spans_info", ":", "\n", "            ", "span_start_idx", "=", "torch", ".", "cat", "(", "span_start_idx", ",", "dim", "=", "0", ")", "\n", "span_end_idx", "=", "torch", ".", "cat", "(", "span_end_idx", ",", "dim", "=", "0", ")", "\n", "span_atten_weights", "=", "torch", ".", "cat", "(", "span_atten_weights", ",", "dim", "=", "0", ")", "\n", "span_senti_scores", "=", "torch", ".", "cat", "(", "span_senti_scores", ",", "dim", "=", "0", ")", "\n", "span_depend_scores", "=", "torch", ".", "cat", "(", "span_depend_scores", ",", "dim", "=", "0", ")", "\n", "span_total_scores", "=", "torch", ".", "cat", "(", "span_total_scores", ",", "dim", "=", "0", ")", "\n", "\n", "outputs", "=", "[", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "bias_labels", ",", "kl_loss", ",", "\n", "span_start_idx", ",", "span_end_idx", ",", "span_atten_weights", ",", "\n", "span_total_scores", ",", "span_senti_scores", ",", "span_depend_scores", "]", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "[", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "bias_labels", ",", "kl_loss", "]", "\n", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLSAdvDistillation.encoder_forward": [[615, 647], ["models.RoBERTaSpanCLSAdvDistillation.classifier", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "models.RoBERTaSpanCLSAdvDistillation.adv_classifier", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "tuple", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss."], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.adv_classifier"], ["", "def", "encoder_forward", "(", "self", ",", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "kl_loss", ",", "bias_labels", ")", ":", "\n", "\n", "# absa classification loss", "\n", "        ", "logits", "=", "self", ".", "classifier", "(", "aspects_emb", ")", "\n", "cls_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "cls_loss", "=", "cls_loss_fn", "(", "logits", ",", "labels", ")", "\n", "\n", "# adversarial classification loss", "\n", "adv_logits", "=", "self", ".", "adv_classifier", "(", "pure_asp_embs", ")", "\n", "adv_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "adv_labels", "=", "torch", ".", "ones", "(", "labels", ".", "shape", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "labels", ".", "device", ")", "\n", "\n", "if", "self", ".", "no_adversarial", "or", "self", ".", "no_adv_loss", ":", "\n", "            ", "adv_loss", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "device", "=", "labels", ".", "device", ")", "\n", "", "elif", "self", ".", "adversarial_on_polarity", ":", "\n", "            ", "mask", "=", "(", "bias_labels", "!=", "1", ")", "\n", "tmp_bias_labels", "=", "bias_labels", "[", "mask", "]", "\n", "tmp_adv_logits", "=", "adv_logits", "[", "mask", "]", "\n", "tmp_adv_labels", "=", "torch", ".", "ones", "(", "tmp_bias_labels", ".", "shape", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "labels", ".", "device", ")", "\n", "adv_loss", "=", "adv_loss_fn", "(", "tmp_adv_logits", ",", "tmp_adv_labels", ")", "\n", "\n", "", "else", ":", "\n", "            ", "adv_loss", "=", "adv_loss_fn", "(", "adv_logits", ",", "adv_labels", ")", "\n", "\n", "\n", "\n", "\n", "", "cls_and_adv_loss", "=", "cls_loss", "+", "self", ".", "adv_loss_weight", "*", "adv_loss", "+", "kl_loss", "\n", "\n", "outputs", "=", "[", "cls_and_adv_loss", ",", "logits", ",", "labels", ",", "cls_loss", ",", "adv_loss", ",", "kl_loss", "]", "\n", "\n", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.RoBERTaSpanCLSAdvDistillation.discriminator_forward": [[648, 665], ["models.RoBERTaSpanCLSAdvDistillation.discriminator", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "tuple", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss."], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.discriminator"], ["", "def", "discriminator_forward", "(", "self", ",", "pure_asp_embs", ",", "bias_labels", ")", ":", "\n", "\n", "        ", "pure_logits", "=", "self", ".", "discriminator", "(", "pure_asp_embs", ")", "\n", "disc_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "self", ".", "no_adversarial", ":", "\n", "            ", "disc_loss", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ",", "device", "=", "pure_asp_embs", ".", "device", ")", "\n", "", "elif", "self", ".", "adversarial_on_polarity", ":", "\n", "            ", "mask", "=", "(", "bias_labels", "!=", "1", ")", "\n", "tmp_pure_logits", "=", "pure_logits", "[", "mask", "]", "\n", "tmp_bias_labels", "=", "bias_labels", "[", "mask", "]", "\n", "disc_loss", "=", "disc_loss_fn", "(", "tmp_pure_logits", ",", "tmp_bias_labels", ")", "\n", "", "else", ":", "\n", "            ", "disc_loss", "=", "disc_loss_fn", "(", "pure_logits", ",", "bias_labels", ")", "\n", "\n", "", "outputs", "=", "[", "disc_loss", ",", "pure_logits", "]", "\n", "\n", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.__init__": [[667, 717], ["transformers.BertPreTrainedModel.__init__", "transformers.BertModel", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "models.BERTSpanCLSAdvDistillation.make_ffnn", "models.BERTSpanCLSAdvDistillation.make_ffnn", "models.BERTSpanCLSAdvDistillation.make_ffnn", "models.BERTSpanCLSAdvDistillation.make_ffnn", "models.BERTSpanCLSAdvDistillation.make_ffnn", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_ffnn", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_ffnn", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_ffnn", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_ffnn", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_ffnn"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BERTSpanCLSAdvDistillation", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "self", ".", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n", "# self.senti_classifier = RoBERTaSpanCLS.from_pretrained(config.phrase_sentiment_model_path, config=config)", "\n", "\n", "\n", "self", ".", "attn_mlp", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "# self.hidden_size = config.hidden_size", "\n", "\n", "self", ".", "save_spans_info", "=", "config", ".", "save_spans_info", "\n", "self", ".", "use_gate", "=", "config", ".", "use_gate", "\n", "self", ".", "no_distillation", "=", "config", ".", "no_distillation", "\n", "self", ".", "no_sentiment_score", "=", "config", ".", "no_sentiment_score", "\n", "self", ".", "top_n", "=", "config", ".", "top_n", "# top_n spans according to the total score", "\n", "self", ".", "max_span_width", "=", "config", ".", "max_span_width", "\n", "self", ".", "use_width_features", "=", "config", ".", "use_width_features", "\n", "self", ".", "use_rela_dis_features", "=", "config", ".", "use_rela_dis_features", "\n", "self", ".", "use_dep_dis_features", "=", "config", ".", "use_dep_dis_features", "\n", "self", ".", "feature_emb_size", "=", "config", ".", "feature_emb_size", "\n", "self", ".", "span_emb_size", "=", "config", ".", "hidden_size", "*", "3", "+", "self", ".", "feature_emb_size", "if", "self", ".", "use_width_features", "else", "config", ".", "hidden_size", "*", "3", "\n", "self", ".", "max_rela_distance", "=", "config", ".", "max_rela_distance", "\n", "self", ".", "adv_loss_weight", "=", "config", ".", "adv_loss_weight", "\n", "self", ".", "max_dep_dis_distance", "=", "20", "\n", "self", ".", "pair_emb_size", "=", "self", ".", "span_emb_size", "*", "3", "+", "self", ".", "feature_emb_size", "if", "(", "self", ".", "use_rela_dis_features", "or", "self", ".", "use_dep_dis_features", ")", "else", "self", ".", "span_emb_size", "*", "3", "\n", "\n", "self", ".", "absa_cls", "=", "self", ".", "make_ffnn", "(", "self", ".", "span_emb_size", ",", "self", ".", "span_emb_size", ",", "self", ".", "num_labels", ")", "\n", "\n", "self", ".", "emb_span_width", "=", "nn", ".", "Embedding", "(", "self", ".", "max_span_width", ",", "self", ".", "feature_emb_size", ")", "if", "self", ".", "use_width_features", "else", "None", "\n", "self", ".", "emb_rela_distance", "=", "nn", ".", "Embedding", "(", "self", ".", "max_rela_distance", ",", "self", ".", "feature_emb_size", ")", "if", "self", ".", "use_rela_dis_features", "else", "None", "\n", "self", ".", "emb_dep_dis_distance", "=", "nn", ".", "Embedding", "(", "self", ".", "max_dep_dis_distance", ",", "self", ".", "feature_emb_size", ")", "if", "self", ".", "use_dep_dis_features", "else", "None", "\n", "self", ".", "span_emb_score_ffnn", "=", "self", ".", "make_ffnn", "(", "self", ".", "span_emb_size", ",", "1000", ",", "output_size", "=", "3", ")", "\n", "self", ".", "dependency_score_ffnn", "=", "self", ".", "make_ffnn", "(", "self", ".", "pair_emb_size", ",", "1000", ",", "output_size", "=", "1", ")", "\n", "self", ".", "gate_ffnn", "=", "self", ".", "make_ffnn", "(", "self", ".", "span_emb_size", "*", "2", ",", "1000", ",", "output_size", "=", "self", ".", "span_emb_size", ")", "\n", "\n", "config", ".", "span_emb_size", "=", "self", ".", "span_emb_size", "\n", "\n", "# discriminator: to classify the polarity of aspect", "\n", "# single dense layer", "\n", "self", ".", "nums_bias_label", "=", "config", ".", "nums_bias_label", "\n", "# self.disc = nn.Linear(self.span_emb_size, self.nums_bias_label)", "\n", "# self.adv_cls = nn.Linear(self.span_emb_size, self.nums_bias_label)", "\n", "\n", "# two-layer MLP", "\n", "\n", "self", ".", "disc", "=", "self", ".", "make_ffnn", "(", "self", ".", "span_emb_size", ",", "self", ".", "span_emb_size", ",", "self", ".", "nums_bias_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.get_params": [[718, 746], ["models.BERTSpanCLSAdvDistillation.named_parameters", "list", "models.BERTSpanCLSAdvDistillation.disc.parameters", "list", "list", "list", "name.startswith", "name.startswith", "encoder_params.append", "list", "models.BERTSpanCLSAdvDistillation.emb_span_width.parameters", "models.BERTSpanCLSAdvDistillation.emb_rela_distance.parameters", "models.BERTSpanCLSAdvDistillation.emb_dep_dis_distance.parameters", "list", "models.BERTSpanCLSAdvDistillation.gate_ffnn.parameters", "list", "models.BERTSpanCLSAdvDistillation.dependency_score_ffnn.parameters", "list", "list", "models.BERTSpanCLSAdvDistillation.span_emb_score_ffnn.parameters", "models.BERTSpanCLSAdvDistillation.absa_cls.parameters", "models.BERTSpanCLSAdvDistillation.attn_mlp.parameters"], "methods", ["None"], ["", "def", "get_params", "(", "self", ",", "named", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            disc_params: parameters of the discriminator/adversary\n            other_params       : parameters of the roberta, classifiers and other remain parts\n        \"\"\"", "\n", "# encoder parameters", "\n", "encoder_params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "name", ".", "startswith", "(", "'bert'", ")", "or", "name", ".", "startswith", "(", "'roberta'", ")", ":", "\n", "                ", "to_add", "=", "(", "name", ",", "param", ")", "if", "named", "else", "param", "\n", "encoder_params", ".", "append", "(", "to_add", ")", "\n", "\n", "# task-based parameters", "\n", "", "", "task_params", "=", "list", "(", "list", "(", "self", ".", "absa_cls", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "attn_mlp", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "span_emb_score_ffnn", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "dependency_score_ffnn", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "gate_ffnn", ".", "parameters", "(", ")", ")", ")", "\n", "if", "self", ".", "use_width_features", ":", "\n", "            ", "task_params", "+=", "list", "(", "self", ".", "emb_span_width", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "use_rela_dis_features", ":", "\n", "            ", "task_params", "+=", "list", "(", "self", ".", "emb_rela_distance", ".", "parameters", "(", ")", ")", "\n", "", "if", "self", ".", "use_dep_dis_features", ":", "\n", "            ", "task_params", "+=", "list", "(", "self", ".", "emb_dep_dis_distance", ".", "parameters", "(", ")", ")", "\n", "\n", "# discriminator parameters", "\n", "", "disc_params", "=", "self", ".", "disc", ".", "parameters", "(", ")", "\n", "\n", "return", "encoder_params", ",", "task_params", ",", "disc_params", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_linear": [[747, 749], ["torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "make_linear", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "std", "=", "0.02", ")", ":", "\n", "        ", "return", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_ffnn": [[750, 761], ["range", "ffnn.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.BERTSpanCLSAdvDistillation.make_linear", "isinstance", "models.BERTSpanCLSAdvDistillation.make_linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "models.BERTSpanCLSAdvDistillation.make_linear", "models.BERTSpanCLSAdvDistillation.make_linear", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_linear", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_linear", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_linear", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.make_linear"], ["", "def", "make_ffnn", "(", "self", ",", "feat_size", ",", "hidden_size", ",", "output_size", ")", ":", "\n", "        ", "if", "hidden_size", "is", "None", "or", "hidden_size", "==", "0", "or", "hidden_size", "==", "[", "]", "or", "hidden_size", "==", "[", "0", "]", ":", "\n", "            ", "return", "self", ".", "make_linear", "(", "feat_size", ",", "output_size", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "hidden_size", ",", "Iterable", ")", ":", "\n", "            ", "hidden_size", "=", "[", "hidden_size", "]", "\n", "", "ffnn", "=", "[", "self", ".", "make_linear", "(", "feat_size", ",", "hidden_size", "[", "0", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "hidden_size", ")", ")", ":", "\n", "            ", "ffnn", "+=", "[", "self", ".", "make_linear", "(", "hidden_size", "[", "i", "-", "1", "]", ",", "hidden_size", "[", "i", "]", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "dropout", "]", "\n", "", "ffnn", ".", "append", "(", "self", ".", "make_linear", "(", "hidden_size", "[", "-", "1", "]", ",", "output_size", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "ffnn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier": [[762, 768], ["models.BERTSpanCLSAdvDistillation.dropout", "models.BERTSpanCLSAdvDistillation.absa_cls", "logits.squeeze.squeeze.squeeze"], "methods", ["None"], ["", "def", "classifier", "(", "self", ",", "emb", ")", ":", "\n", "        ", "cls_feature", "=", "self", ".", "dropout", "(", "emb", ")", "\n", "logits", "=", "self", ".", "absa_cls", "(", "cls_feature", ")", "\n", "if", "logits", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "            ", "logits", "=", "logits", ".", "squeeze", "(", "-", "1", ")", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.discriminator": [[769, 775], ["models.BERTSpanCLSAdvDistillation.disc", "models.BERTSpanCLSAdvDistillation.dropout", "emb.detach"], "methods", ["None"], ["", "def", "discriminator", "(", "self", ",", "emb", ")", ":", "\n", "# Note: detach the embedding since when don't want the gradient to flow", "\n", "#       all the way to the encoder. disc_loss is used only to change the", "\n", "#       parameters of the discriminator network", "\n", "        ", "pure_logits", "=", "self", ".", "disc", "(", "self", ".", "dropout", "(", "emb", ".", "detach", "(", ")", ")", ")", "\n", "return", "pure_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.adv_classifier": [[776, 782], ["models.BERTSpanCLSAdvDistillation.disc", "models.BERTSpanCLSAdvDistillation.dropout"], "methods", ["None"], ["", "def", "adv_classifier", "(", "self", ",", "emb", ")", ":", "\n", "# Note: detach the embedding since when don't want the gradient to flow", "\n", "#       all the way to the encoder. disc_loss is used only to change the", "\n", "#       parameters of the discriminator network", "\n", "        ", "pure_logits", "=", "self", ".", "disc", "(", "self", ".", "dropout", "(", "emb", ")", ")", "\n", "return", "pure_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.refine_aspect": [[783, 815], ["torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.BERTSpanCLSAdvDistillation.gate_ffnn", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "refine_aspect", "(", "self", ",", "asp_embs", ",", "span_embs", ",", "scores", ",", "max_num", "=", "None", ",", "dummy_scores", "=", "None", ")", ":", "\n", "# asp_embs: [num_asp, emb_size]", "\n", "# span_embs: [num_spans, emb_size]", "\n", "# scores: [num_asp, num_spans]", "\n", "\n", "# add dummy scores and get attention weights", "\n", "        ", "num_asp", "=", "asp_embs", ".", "shape", "[", "0", "]", "\n", "# dummy_scores = torch.full((num_asp, 1), fill_value=9,device=scores.device) # the dummy span's score", "\n", "# scores = torch.cat([dummy_scores, scores], dim=1)", "\n", "if", "dummy_scores", "is", "not", "None", ":", "\n", "            ", "scores", "=", "torch", ".", "cat", "(", "[", "dummy_scores", ",", "scores", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "scores", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "num_asp", ",", "1", ",", "device", "=", "scores", ".", "device", ")", ",", "scores", "]", ",", "dim", "=", "1", ")", "# [num_asp, 1 + num_spans]", "\n", "", "attn_weights", "=", "nn", ".", "functional", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "# [num_asp, 1 + num_spans]", "\n", "\n", "# get the new asp_embs with attention weight", "\n", "span_embs", "=", "torch", ".", "unsqueeze", "(", "span_embs", ",", "0", ")", ".", "repeat", "(", "num_asp", ",", "1", ",", "1", ")", "# [num_asp, num_spans, emb_size]", "\n", "span_embs", "=", "torch", ".", "cat", "(", "[", "torch", ".", "unsqueeze", "(", "asp_embs", ",", "1", ")", ",", "span_embs", "]", ",", "dim", "=", "1", ")", "# [num_asp, 1 + num_spans, emb_size]", "\n", "new_asp_emb", "=", "torch", ".", "sum", "(", "torch", ".", "unsqueeze", "(", "attn_weights", ",", "2", ")", "*", "span_embs", ",", "dim", "=", "1", ")", "# [num_asp, emb_size]", "\n", "\n", "if", "self", ".", "use_gate", ":", "\n", "# get the final embedding after a gate", "\n", "            ", "gate", "=", "self", ".", "gate_ffnn", "(", "torch", ".", "cat", "(", "[", "asp_embs", ",", "new_asp_emb", "]", ",", "dim", "=", "1", ")", ")", "# [num_asp, emb_size]", "\n", "gate", "=", "torch", ".", "sigmoid", "(", "gate", ")", "\n", "gate_mean", "=", "torch", ".", "mean", "(", "gate", ",", "dim", "=", "-", "1", ")", "\n", "refined_asp_embs", "=", "gate", "*", "new_asp_emb", "+", "(", "1", "-", "gate", ")", "*", "asp_embs", "\n", "", "else", ":", "\n", "            ", "refined_asp_embs", "=", "new_asp_emb", "\n", "\n", "# get the ranking of scores", "\n", "", "sorted_scores", ",", "indices", "=", "torch", ".", "sort", "(", "scores", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "# 0 denotes the dummy span, and other spans' indexs + 1", "\n", "return", "refined_asp_embs", ",", "indices", ",", "attn_weights", ",", "sorted_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.get_forward_data": [[816, 1057], ["models.BERTSpanCLSAdvDistillation.bert", "attention_mask.to", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.functional.softmax", "torch.functional.softmax", "torch.functional.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "span_emb_compo_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "models.BERTSpanCLSAdvDistillation.span_emb_score_ffnn", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "abs", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "models.BERTSpanCLSAdvDistillation.refine_aspect", "all_asp_emb.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "models.BERTSpanCLSAdvDistillation.emb_span_width", "models.BERTSpanCLSAdvDistillation.dropout", "span_emb_compo_list.append", "models.BERTSpanCLSAdvDistillation.attn_mlp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss.", "torch.clamp.append", "torch.clamp.append", "torch.clamp.append", "models.BERTSpanCLSAdvDistillation.emb_rela_distance", "models.BERTSpanCLSAdvDistillation.dropout().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "len", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "span_tokens_mask.to", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "valid_dep_dis.gather", "valid_dep_dis.gather", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "models.BERTSpanCLSAdvDistillation.emb_dep_dis_distance", "models.BERTSpanCLSAdvDistillation.dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.BERTSpanCLSAdvDistillation.dependency_score_ffnn", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.gather", "torch.cat.gather", "torch.cat.gather", "atten_weights.gather", "torch.cat.gather", "torch.cat.gather", "torch.cat.gather", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "range", "models.BERTSpanCLSAdvDistillation.dropout", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "indices.repeat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.refine_aspect"], ["", "def", "get_forward_data", "(", "self", ",", "input_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "multi_labels", "=", "None", ",", "multi_aspects_pos", "=", "None", ",", "sentiment_scores", "=", "None", ",", "wps2tokens", "=", "None", ",", "\n", "dep_distances", "=", "None", ",", "multi_bias_labels", "=", "None", ",", "starts_position", "=", "None", ",", "ends_position", "=", "None", ",", "\n", "senti_distributions", "=", "None", ")", ":", "\n", "        ", "device", "=", "input_ids", ".", "device", "\n", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "# RoBERTa do not have token_type_ids", "\n", "position_ids", "=", "position_ids", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "# [bs, seq_len, emb_size]", "\n", "\n", "all_asp_emb", "=", "[", "]", "\n", "pure_asp_embs", "=", "[", "]", "\n", "if", "self", ".", "save_spans_info", ":", "\n", "            ", "span_start_idx", "=", "[", "]", "\n", "span_end_idx", "=", "[", "]", "\n", "span_senti_scores", "=", "[", "]", "\n", "span_depend_scores", "=", "[", "]", "\n", "span_atten_weights", "=", "[", "]", "\n", "span_total_scores", "=", "[", "]", "\n", "", "input_masks", "=", "attention_mask", ".", "to", "(", "torch", ".", "bool", ")", "# [num seg, num max tokens]", "\n", "bs", "=", "input_ids", ".", "shape", "[", "0", "]", "\n", "\n", "# Get labels", "\n", "labels", "=", "[", "]", "\n", "bias_labels", "=", "[", "]", "\n", "kl_loss", "=", "0", "\n", "for", "bs_idx", "in", "range", "(", "bs", ")", ":", "\n", "# get labels and aspect terms information", "\n", "            ", "asps_from", "=", "[", "]", "\n", "asps_to", "=", "[", "]", "\n", "_j", "=", "0", "\n", "cur_aspects_pos", "=", "multi_aspects_pos", "[", "bs_idx", "]", "\n", "while", "_j", "<", "len", "(", "multi_labels", "[", "bs_idx", "]", ")", "and", "multi_labels", "[", "bs_idx", "]", "[", "_j", "]", "!=", "-", "1", ":", "\n", "                ", "labels", ".", "append", "(", "multi_labels", "[", "bs_idx", "]", "[", "_j", "]", ")", "\n", "bias_labels", ".", "append", "(", "multi_bias_labels", "[", "bs_idx", "]", "[", "_j", "]", ")", "\n", "asps_from", ".", "append", "(", "cur_aspects_pos", "[", "_j", "*", "2", "]", "+", "1", ")", "# the first token is [CLS]", "\n", "asps_to", ".", "append", "(", "cur_aspects_pos", "[", "_j", "*", "2", "+", "1", "]", "+", "1", ")", "\n", "_j", "+=", "1", "\n", "", "num_asp", "=", "_j", "\n", "asps_from", "=", "torch", ".", "tensor", "(", "asps_from", ",", "dtype", "=", "int", ",", "device", "=", "device", ")", "\n", "asps_to", "=", "torch", ".", "tensor", "(", "asps_to", ",", "dtype", "=", "int", ",", "device", "=", "device", ")", "\n", "\n", "# get wordpieces embeddings", "\n", "input_mask", "=", "input_masks", "[", "bs_idx", "]", "\n", "valid_sent", "=", "sequence_output", "[", "bs_idx", "]", "[", "input_mask", "]", "# [num_wps, hidden_size]", "\n", "num_wps", "=", "valid_sent", ".", "shape", "[", "0", "]", "-", "2", "# the head and tail are [CLS] and [SEG] respectively", "\n", "valid_dep_dis", "=", "dep_distances", "[", "bs_idx", "]", "[", "0", ":", "num_asp", ",", "0", ":", "num_wps", "]", "\n", "\n", "# all possible spans' position", "\n", "starts", "=", "starts_position", "[", "bs_idx", "]", "\n", "num_spans", "=", "0", "\n", "for", "_tmp", "in", "starts", ":", "\n", "                ", "if", "_tmp", "==", "-", "1", ":", "\n", "                    ", "break", "\n", "", "else", ":", "\n", "                    ", "num_spans", "+=", "1", "\n", "", "", "starts", "=", "starts", "[", ":", "num_spans", "]", "\n", "ends", "=", "ends_position", "[", "bs_idx", "]", "[", ":", "num_spans", "]", "\n", "senti_classifier_logits", "=", "senti_distributions", "[", "bs_idx", "]", "[", ":", "num_spans", "]", "\n", "\n", "\n", "\n", "# --------------- Get the embeddings of aspects and all spans ----------------------", "\n", "# add aspects info to span's starts and ends list to get span embeddings", "\n", "starts", ",", "ends", "=", "torch", ".", "cat", "(", "(", "asps_from", ",", "starts", ")", ")", ",", "torch", ".", "cat", "(", "(", "asps_to", ",", "ends", ")", ")", "\n", "\n", "# get all spans and aspect terms embedding", "\n", "start_embs", ",", "end_embs", "=", "valid_sent", "[", "starts", "]", ",", "valid_sent", "[", "ends", "-", "1", "]", "\n", "span_emb_compo_list", "=", "[", "start_embs", ",", "end_embs", "]", "\n", "if", "self", ".", "use_width_features", ":", "\n", "                ", "width_idx", "=", "ends", "-", "starts", "\n", "width_idx", "=", "torch", ".", "clamp", "(", "width_idx", ",", "0", ",", "self", ".", "max_span_width", ")", "\n", "width_emb", "=", "self", ".", "emb_span_width", "(", "width_idx", "-", "1", ")", "\n", "width_emb", "=", "self", ".", "dropout", "(", "width_emb", ")", "\n", "span_emb_compo_list", ".", "append", "(", "width_emb", ")", "\n", "\n", "", "span_tokens", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "arange", "(", "1", ",", "num_wps", "+", "1", ",", "device", "=", "device", ")", ",", "0", ")", ".", "repeat", "(", "num_asp", "+", "num_spans", ",", "\n", "1", ")", "# [num_asp+num_spans, num_wps]", "\n", "span_tokens_mask", "=", "(", "span_tokens", ">=", "torch", ".", "unsqueeze", "(", "starts", ",", "1", ")", ")", "&", "(", "\n", "span_tokens", "<", "torch", ".", "unsqueeze", "(", "ends", ",", "1", ")", ")", "# [num_asp+num_spans, num_wps]", "\n", "token_attn", "=", "torch", ".", "squeeze", "(", "self", ".", "attn_mlp", "(", "valid_sent", "[", "1", ":", "-", "1", "]", ")", ")", "# [num_wps]", "\n", "span_tokens_attn_raw", "=", "torch", ".", "log", "(", "span_tokens_mask", ".", "to", "(", "torch", ".", "float", ")", ")", "+", "torch", ".", "unsqueeze", "(", "token_attn", ",", "\n", "0", ")", "# [num_asp+num_spans, num_wps]  (inf & valuse)", "\n", "span_tokens_attn", "=", "nn", ".", "functional", ".", "softmax", "(", "span_tokens_attn_raw", ",", "dim", "=", "1", ")", "# [num_asp+num_spans, num_wps]", "\n", "span_attn_emb", "=", "torch", ".", "matmul", "(", "span_tokens_attn", ",", "valid_sent", "[", "1", ":", "-", "1", "]", ")", "# [num_asp+num_spans, emb_size]", "\n", "span_emb_compo_list", ".", "append", "(", "span_attn_emb", ")", "\n", "span_emb", "=", "torch", ".", "cat", "(", "span_emb_compo_list", ",", "dim", "=", "1", ")", "# [num_asp+num_spans, new_size]", "\n", "# span_emb = self.dense(span_emb)  # TODO: note", "\n", "asp_emb", ",", "span_emb", "=", "span_emb", "[", ":", "num_asp", "]", ",", "span_emb", "[", "num_asp", ":", "]", "# [num_asp, new_size],  [num_spans, new_size]", "\n", "pure_asp_embs", ".", "append", "(", "asp_emb", ")", "\n", "starts", ",", "ends", "=", "starts", "[", "num_asp", ":", "]", ",", "ends", "[", "num_asp", ":", "]", "\n", "\n", "# --------------- Get the embeddings of aspects and all spans finished! ----------------------", "\n", "\n", "span_sentiment_scores", "=", "self", ".", "span_emb_score_ffnn", "(", "span_emb", ")", "\n", "if", "self", ".", "no_distillation", ":", "\n", "                ", "kl_loss", "+=", "torch", ".", "tensor", "(", "0", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "                ", "assert", "span_sentiment_scores", ".", "shape", "==", "senti_classifier_logits", ".", "shape", "\n", "span_kl_loss_fn", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "'mean'", ")", "\n", "span_kl_loss", "=", "span_kl_loss_fn", "(", "torch", ".", "log_softmax", "(", "span_sentiment_scores", ",", "dim", "=", "-", "1", ")", ",", "\n", "torch", ".", "softmax", "(", "senti_classifier_logits", ",", "dim", "=", "-", "1", ")", ")", "\n", "kl_loss", "+=", "span_kl_loss", "\n", "\n", "", "if", "self", ".", "no_sentiment_score", ":", "\n", "                ", "span_sentiment_scores", "=", "torch", ".", "ones_like", "(", "span_sentiment_scores", ",", "device", "=", "device", ")", "[", ":", ",", "1", "]", "\n", "span_meaningless_scores", "=", "span_sentiment_scores", "\n", "", "else", ":", "\n", "                ", "span_sentiment_scores", "=", "1", "-", "torch", ".", "softmax", "(", "span_sentiment_scores", ",", "dim", "=", "-", "1", ")", "[", ":", ",", "1", "]", "\n", "span_meaningless_scores", "=", "1", "-", "span_sentiment_scores", "\n", "\n", "\n", "", "repeat_asp_emb", "=", "torch", ".", "unsqueeze", "(", "asp_emb", ",", "1", ")", ".", "repeat", "(", "1", ",", "num_spans", ",", "1", ")", "# [num_asp, num_spans, new_size]", "\n", "similarity_emb", "=", "repeat_asp_emb", "*", "span_emb", "# [num_asp, num_spans, new_size]", "\n", "\n", "position_info", "=", "torch", ".", "stack", "(", "[", "starts", ",", "ends", "]", ",", "dim", "=", "0", ")", ".", "t", "(", ")", "# [num_spans, 2]", "\n", "rela_position", "=", "torch", ".", "cat", "(", "[", "position_info", "for", "_", "in", "range", "(", "num_asp", ")", "]", ",", "dim", "=", "1", ")", "# [num_spans, num_asp*2]", "\n", "cur_aspects_pos", "=", "torch", ".", "unsqueeze", "(", "cur_aspects_pos", "[", ":", "num_asp", "*", "2", "]", ",", "dim", "=", "0", ")", ".", "repeat", "(", "num_spans", ",", "\n", "1", ")", "# [num_spans, num_asp*2]", "\n", "cur_aspects_pos", "=", "abs", "(", "cur_aspects_pos", "-", "rela_position", ")", "# [num_spans, num_asp*2]", "\n", "rela_position", "=", "[", "]", "\n", "for", "_n", "in", "range", "(", "0", ",", "num_asp", "*", "2", ",", "2", ")", ":", "\n", "                ", "rela_position", ".", "append", "(", "torch", ".", "min", "(", "cur_aspects_pos", "[", ":", ",", "_n", "]", ",", "cur_aspects_pos", "[", ":", ",", "_n", "+", "1", "]", ")", ")", "\n", "", "rela_position", "=", "torch", ".", "stack", "(", "rela_position", ",", "dim", "=", "1", ")", "# [num_spans, num_asp]", "\n", "rela_position", "=", "torch", ".", "clamp", "(", "rela_position", ",", "0", ",", "self", ".", "max_rela_distance", "-", "1", ")", "\n", "if", "self", ".", "use_rela_dis_features", ":", "\n", "                ", "rela_position_emb", "=", "self", ".", "emb_rela_distance", "(", "rela_position", ")", "\n", "rela_position_emb", "=", "self", ".", "dropout", "(", "rela_position_emb", ")", ".", "permute", "(", "1", ",", "0", ",", "\n", "2", ")", "# [num_asp, num_spans, feature_size]", "\n", "pair_emb", "=", "torch", ".", "cat", "(", "\n", "[", "repeat_asp_emb", ",", "torch", ".", "unsqueeze", "(", "span_emb", ",", "0", ")", ".", "repeat", "(", "num_asp", ",", "1", ",", "1", ")", ",", "similarity_emb", ",", "\n", "rela_position_emb", "]", ",", "dim", "=", "-", "1", ")", "# [num_asp, num_spans, pair_size]", "\n", "", "elif", "self", ".", "use_dep_dis_features", ":", "\n", "                ", "assert", "valid_dep_dis", ".", "shape", "==", "(", "num_asp", ",", "num_wps", ")", "\n", "# span_dep_distances = [[] for _ in range(num_asp)]", "\n", "# for _asp_idx in range(0, num_asp):", "\n", "#     for _span_idx in range(num_spans):", "\n", "#         cur_min_dis = min(valid_dep_dis[_asp_idx][(starts[num_asp:][_span_idx]-1):(ends[num_asp:][_span_idx]-1)])", "\n", "#         span_dep_distances[_asp_idx].append(cur_min_dis)", "\n", "starts_idx", "=", "(", "starts", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "repeat", "(", "num_asp", ",", "1", ")", "# [num_asp, nums_span]", "\n", "ends_idx", "=", "(", "ends", "-", "1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "repeat", "(", "num_asp", ",", "1", ")", "\n", "span_dep_distances_start", "=", "valid_dep_dis", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "starts_idx", ")", "\n", "span_dep_distances_end", "=", "valid_dep_dis", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "ends_idx", "-", "1", ")", "\n", "span_dep_distances", "=", "torch", ".", "empty", "(", "num_asp", ",", "num_spans", ",", "device", "=", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "# TODO: get the average value among the complete span rather than the start or end wordpiece", "\n", "torch", ".", "min", "(", "span_dep_distances_start", ",", "span_dep_distances_end", ",", "out", "=", "span_dep_distances", ")", "\n", "# span_dep_distances = torch.tensor(span_dep_distances, device=device)", "\n", "span_dep_distances", "=", "torch", ".", "clamp", "(", "span_dep_distances", ",", "0", ",", "self", ".", "max_dep_dis_distance", "-", "1", ")", "\n", "dep_dis_position_emb", "=", "self", ".", "emb_dep_dis_distance", "(", "span_dep_distances", ")", "\n", "dep_dis_position_emb", "=", "self", ".", "dropout", "(", "dep_dis_position_emb", ")", "# [num_asp, num_spans, feature_size]", "\n", "pair_emb", "=", "torch", ".", "cat", "(", "\n", "[", "repeat_asp_emb", ",", "torch", ".", "unsqueeze", "(", "span_emb", ",", "0", ")", ".", "repeat", "(", "num_asp", ",", "1", ",", "1", ")", ",", "similarity_emb", ",", "\n", "dep_dis_position_emb", "]", ",", "dim", "=", "-", "1", ")", "# [num_asp, num_spans, pair_size]", "\n", "# pair_emb = torch.cat(", "\n", "#     [similarity_emb, repeat_asp_emb - torch.unsqueeze(span_emb, 0).repeat(num_asp, 1, 1),", "\n", "#      dep_dis_position_emb], dim=-1)  # [num_asp, num_spans, pair_size]", "\n", "\n", "", "else", ":", "\n", "                ", "pair_emb", "=", "torch", ".", "cat", "(", "\n", "[", "repeat_asp_emb", ",", "torch", ".", "unsqueeze", "(", "span_emb", ",", "0", ")", ".", "repeat", "(", "num_asp", ",", "1", ",", "1", ")", ",", "similarity_emb", "]", ",", "\n", "dim", "=", "-", "1", ")", "# [num_asp, num_spans, pair_size]", "\n", "\n", "# TODO: alter the ways of getting dependency scores and make sure the score is greater than 0", "\n", "", "dependency_scores", "=", "torch", ".", "softmax", "(", "torch", ".", "squeeze", "(", "self", ".", "dependency_score_ffnn", "(", "pair_emb", ")", ",", "2", ")", ",", "dim", "=", "-", "1", ")", "# [num_asp, num_spans], remove torch.tank", "\n", "# dependency_scores = self._rescal(dependency_scores, 0.01, 20)", "\n", "scores", "=", "span_sentiment_scores", "*", "dependency_scores", "\n", "dummy_scores", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "mean", "(", "span_meaningless_scores", "*", "dependency_scores", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "1", ")", "# num_asp", "\n", "assert", "len", "(", "dummy_scores", ")", "==", "num_asp", "\n", "# scores = dependency_scores", "\n", "# scores = span_sentiment_scores.squeeze(0).repeat(num_asp, 1)", "\n", "\n", "\n", "# refine_aspect_with_before_dummy", "\n", "weighted_asp_emb", ",", "cur_indice", ",", "atten_weights", ",", "sorted_scores", "=", "self", ".", "refine_aspect", "(", "asp_emb", ",", "span_emb", ",", "scores", ",", "dummy_scores", "=", "dummy_scores", ")", "\n", "all_asp_emb", ".", "append", "(", "weighted_asp_emb", ")", "\n", "\n", "# get the top-N spans' information", "\n", "if", "self", ".", "save_spans_info", ":", "\n", "                ", "topn", "=", "self", ".", "top_n", "\n", "indices", "=", "cur_indice", "[", ":", ",", "0", ":", "topn", "]", "# [num_asp * top_n]", "\n", "if", "num_spans", "<", "topn", ":", "\n", "                    ", "indices", "=", "torch", ".", "cat", "(", "[", "indices", ",", "indices", ".", "repeat", "(", "1", ",", "topn", ")", "]", ",", "dim", "=", "-", "1", ")", "[", ":", ",", "0", ":", "topn", "]", "\n", "\n", "", "starts", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "device", ")", ",", "starts", "]", ",", "\n", "dim", "=", "0", ")", "-", "1", "# [1 + num_spans], -1 denotes the dummy span. others denote the position in sentence text", "\n", "ends", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "device", ")", ",", "ends", "]", ",", "dim", "=", "0", ")", "-", "1", "\n", "span_start_idx", ".", "append", "(", "starts", "[", "indices", "]", ")", "\n", "span_end_idx", ".", "append", "(", "ends", "[", "indices", "]", ")", "\n", "span_sentiment_scores", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "[", "0", "]", ",", "device", "=", "device", ")", ",", "span_sentiment_scores", "]", ",", "\n", "dim", "=", "0", ")", "# [1 + num_spans],", "\n", "span_senti_scores", ".", "append", "(", "span_sentiment_scores", "[", "indices", "]", ")", "\n", "dependency_scores", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "zeros", "(", "num_asp", ",", "1", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ",", "dependency_scores", "]", ",", "\n", "dim", "=", "1", ")", "# [num_asp. 1 + num_spans],", "\n", "span_depend_scores", ".", "append", "(", "dependency_scores", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "indices", ")", ")", "\n", "span_atten_weights", ".", "append", "(", "atten_weights", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "indices", ")", ")", "\n", "# scores = torch.cat(", "\n", "#     [torch.zeros(num_asp, 1, dtype=torch.float32, device=device), scores],", "\n", "#     dim=1)", "\n", "scores", "=", "torch", ".", "cat", "(", "\n", "[", "dummy_scores", ",", "scores", "]", ",", "\n", "dim", "=", "1", ")", "\n", "span_total_scores", ".", "append", "(", "scores", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "indices", ")", ")", "\n", "\n", "", "", "labels", "=", "torch", ".", "tensor", "(", "labels", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "aspects_emb", "=", "torch", ".", "cat", "(", "all_asp_emb", ",", "dim", "=", "0", ")", "\n", "kl_loss", "=", "kl_loss", "/", "bs", "\n", "\n", "bias_labels", "=", "torch", ".", "tensor", "(", "bias_labels", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "pure_asp_embs", "=", "torch", ".", "cat", "(", "pure_asp_embs", ",", "dim", "=", "0", ")", "\n", "\n", "bias_labels", "=", "labels", "\n", "\n", "if", "self", ".", "save_spans_info", ":", "\n", "            ", "span_start_idx", "=", "torch", ".", "cat", "(", "span_start_idx", ",", "dim", "=", "0", ")", "\n", "span_end_idx", "=", "torch", ".", "cat", "(", "span_end_idx", ",", "dim", "=", "0", ")", "\n", "span_atten_weights", "=", "torch", ".", "cat", "(", "span_atten_weights", ",", "dim", "=", "0", ")", "\n", "span_senti_scores", "=", "torch", ".", "cat", "(", "span_senti_scores", ",", "dim", "=", "0", ")", "\n", "span_depend_scores", "=", "torch", ".", "cat", "(", "span_depend_scores", ",", "dim", "=", "0", ")", "\n", "# span_total_scores = span_senti_scores + span_depend_scores", "\n", "span_total_scores", "=", "torch", ".", "cat", "(", "span_total_scores", ",", "dim", "=", "0", ")", "\n", "\n", "outputs", "=", "[", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "bias_labels", ",", "kl_loss", ",", "\n", "span_start_idx", ",", "span_end_idx", ",", "span_atten_weights", ",", "\n", "span_total_scores", ",", "span_senti_scores", ",", "span_depend_scores", "]", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "[", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "bias_labels", ",", "kl_loss", "]", "\n", "\n", "# view the gate value", "\n", "# gate_value = self.gate_ffnn.parameters()", "\n", "# print(gate_value)", "\n", "# gate_value_list = [params.data for params in list(gate_value)]", "\n", "# for i, params in enumerate(gate_value_list):", "\n", "#     if i % 2 == 0:", "\n", "#         print(torch.mean(torch.mean(params, dim=-1), dim=-1))", "\n", "#     else:", "\n", "#         print(torch.mean(params, dim=-1))", "\n", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.encoder_forward": [[1058, 1076], ["models.BERTSpanCLSAdvDistillation.classifier", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "models.BERTSpanCLSAdvDistillation.adv_classifier", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.CrossEntropyLoss.", "tuple"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.classifier", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.adv_classifier"], ["", "def", "encoder_forward", "(", "self", ",", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "kl_loss", ")", ":", "\n", "\n", "# absa classification loss", "\n", "        ", "logits", "=", "self", ".", "classifier", "(", "aspects_emb", ")", "\n", "cls_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "cls_loss", "=", "cls_loss_fn", "(", "logits", ",", "labels", ")", "\n", "\n", "# adversarial classification loss", "\n", "adv_logits", "=", "self", ".", "adv_classifier", "(", "pure_asp_embs", ")", "\n", "adv_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "adv_labels", "=", "torch", ".", "ones", "(", "labels", ".", "shape", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "labels", ".", "device", ")", "\n", "adv_loss", "=", "adv_loss_fn", "(", "adv_logits", ",", "adv_labels", ")", "\n", "\n", "cls_and_adv_loss", "=", "cls_loss", "+", "self", ".", "adv_loss_weight", "*", "adv_loss", "+", "kl_loss", "\n", "\n", "outputs", "=", "[", "cls_and_adv_loss", ",", "logits", ",", "labels", ",", "cls_loss", ",", "adv_loss", ",", "kl_loss", "]", "\n", "\n", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.discriminator_forward": [[1077, 1085], ["models.BERTSpanCLSAdvDistillation.discriminator", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "tuple"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.discriminator"], ["", "def", "discriminator_forward", "(", "self", ",", "pure_asp_embs", ",", "bias_labels", ")", ":", "\n", "        ", "pure_logits", "=", "self", ".", "discriminator", "(", "pure_asp_embs", ")", "\n", "disc_loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "disc_loss", "=", "disc_loss_fn", "(", "pure_logits", ",", "bias_labels", ")", "\n", "\n", "outputs", "=", "[", "disc_loss", ",", "pure_logits", "]", "\n", "\n", "return", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.get_opinion_dataset.get_dataset": [[7, 67], ["os.path.join", "range", "len", "lines[].strip().split", "text.split", "eval", "all_data.append", "open", "f.readlines", "aspect_dict[].append", "aspect_dict[].add", "lines[].strip", "set", "aspects_list.append", "len"], "function", ["None"], ["def", "get_dataset", "(", "dataset", ",", "type", "=", "\"test\"", ")", ":", "\n", "    ", "num_sentences", "=", "0", "\n", "raw_opinion_dataset_dir", "=", "os", ".", "path", ".", "join", "(", "\"./datasets/ASTE-Data-V2-EMNLP2020/\"", ")", "\n", "if", "type", "==", "\"test\"", ":", "\n", "        ", "with", "open", "(", "raw_opinion_dataset_dir", "+", "dataset", "+", "'/test_triplets.txt'", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "lines_test", "=", "f", ".", "readlines", "(", ")", "\n", "", "lines", "=", "lines_test", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "polarity_map", "=", "{", "'N'", ":", "0", ",", "'NEU'", ":", "'neutral'", ",", "'NEG'", ":", "'negative'", ",", "'POS'", ":", "'positive'", "}", "# NO_RELATION is 0", "\n", "all_data", "=", "[", "]", "\n", "total_num", ",", "pos", ",", "neu", ",", "neg", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "lines", ")", ")", ":", "\n", "        ", "num_sentences", "+=", "1", "\n", "text", ",", "pairs", "=", "lines", "[", "i", "]", ".", "strip", "(", ")", ".", "split", "(", "'####'", ")", "\n", "aspects_list", "=", "[", "]", "\n", "tokens_list", "=", "text", ".", "split", "(", "' '", ")", "\n", "aspect_dict", "=", "{", "}", "\n", "last_asp_beg", ",", "last_asp_end", "=", "-", "1", ",", "-", "1", "\n", "for", "pair", "in", "eval", "(", "pairs", ")", ":", "\n", "\n", "            ", "ap_beg", ",", "ap_end", "=", "pair", "[", "0", "]", "[", "0", "]", ",", "pair", "[", "0", "]", "[", "-", "1", "]", "+", "1", "\n", "asp_term", "=", "' '", ".", "join", "(", "tokens_list", "[", "ap_beg", ":", "ap_end", "]", ")", "\n", "\n", "if", "aspect_dict", "==", "{", "}", "or", "aspect_dict", "[", "'term'", "]", "!=", "asp_term", ":", "\n", "                ", "assert", "aspect_dict", "==", "{", "}", "or", "len", "(", "aspect_dict", "[", "'polarity'", "]", ")", "==", "1", "\n", "\n", "aspect_dict", "=", "{", "}", "\n", "aspect_dict", "[", "'term'", "]", "=", "asp_term", "\n", "aspect_dict", "[", "'opinions'", "]", "=", "[", "]", "\n", "aspect_dict", "[", "'polarity'", "]", "=", "set", "(", ")", "\n", "total_num", "+=", "1", "\n", "\n", "", "op_beg", ",", "op_end", "=", "pair", "[", "1", "]", "[", "0", "]", ",", "pair", "[", "1", "]", "[", "-", "1", "]", "+", "1", "\n", "aspect_dict", "[", "'opinions'", "]", ".", "append", "(", "(", "' '", ".", "join", "(", "tokens_list", "[", "op_beg", ":", "op_end", "]", ")", ",", "op_beg", ",", "op_end", ")", ")", "\n", "\n", "polarity", "=", "polarity_map", "[", "pair", "[", "2", "]", "]", "\n", "aspect_dict", "[", "'polarity'", "]", ".", "add", "(", "polarity", ")", "\n", "if", "polarity", "==", "'neutral'", ":", "\n", "                ", "neu", "+=", "1", "\n", "", "elif", "polarity", "==", "'positive'", ":", "\n", "                ", "pos", "+=", "1", "\n", "", "elif", "polarity", "==", "'negative'", ":", "\n", "                ", "neg", "+=", "1", "\n", "\n", "", "if", "ap_beg", "==", "last_asp_beg", "and", "ap_end", "==", "last_asp_end", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "last_asp_beg", ",", "last_asp_end", "=", "ap_beg", ",", "ap_end", "\n", "aspects_list", ".", "append", "(", "aspect_dict", ")", "\n", "\n", "", "", "data", "=", "{", "\n", "'sent_text'", ":", "text", ",", "\n", "'terms'", ":", "aspects_list", "\n", "}", "\n", "all_data", ".", "append", "(", "data", ")", "\n", "\n", "", "return", "all_data", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__init__": [[265, 324], ["absa_dataset.AbsaDataset.data_split", "absa_dataset.AbsaDataset.tokenizer.convert_tokens_to_ids", "enumerate", "absa_dataset.AbsaDataset.example_list.append", "AttributeError", "enumerate", "str", "sample_aspects.append", "absa_dataset.AbsaDataset.example_list.append"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.data_split", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["    ", "def", "__init__", "(", "\n", "self", ",", "config", ",", "absa_dataset", ",", "data_format", ",", "data_type", ",", "tokenizer_type", ",", "tokenizer", ",", "max_seq_length", "=", "64", ",", "\n", "concat_way", "=", "\"naive\"", ",", "nums_label", "=", "3", ",", "rate", "=", "1", ",", "nums_bias_label", "=", "3", ",", "max_span_width", "=", "15", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "absa_dataset", "=", "absa_dataset", "\n", "self", ".", "data_format", "=", "data_format", "\n", "self", ".", "data_type", "=", "data_type", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "self", ".", "nums_label", "=", "nums_label", "\n", "self", ".", "nums_bias_lable", "=", "nums_bias_label", "\n", "self", ".", "max_span_width", "=", "max_span_width", "\n", "\n", "self", ".", "concat_way", "=", "concat_way", "\n", "self", ".", "dataset_path", "=", "None", "\n", "\n", "self", ".", "tokenizer_type", "=", "tokenizer_type", "\n", "\n", "self", ".", "standalone", "=", "True", "\n", "self", ".", "rm_conflict", "=", "True", "\n", "\n", "# begin to process", "\n", "self", ".", "example_list", "=", "[", "]", "\n", "if", "data_format", "==", "\"term\"", "or", "data_format", "==", "\"term_span\"", ":", "\n", "# with term as unit", "\n", "            ", "for", "sample", "in", "self", ".", "absa_dataset", ":", "\n", "                ", "for", "idx_term", ",", "term_dict", "in", "enumerate", "(", "sample", "[", "\"terms\"", "]", ")", ":", "\n", "                    ", "if", "self", ".", "rm_conflict", "and", "term_dict", "[", "\"polarity\"", "]", "==", "\"conflict\"", ":", "\n", "                        ", "continue", "\n", "", "example", "=", "{", "\n", "\"sent_id\"", ":", "sample", "[", "\"sent_id\"", "]", "+", "\"-\"", "+", "str", "(", "idx_term", ")", ",", "\n", "\"sent_text\"", ":", "sample", "[", "\"sent_text\"", "]", ",", "\n", "\"terms\"", ":", "[", "term_dict", "]", ",", "\n", "}", "\n", "self", ".", "example_list", ".", "append", "(", "example", ")", "\n", "", "", "", "elif", "data_format", "==", "\"category\"", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "elif", "data_format", "==", "\"multi_aspects\"", ":", "\n", "            ", "for", "sample", "in", "self", ".", "absa_dataset", ":", "\n", "                ", "sample_aspects", "=", "[", "]", "\n", "for", "idx_term", ",", "term_dict", "in", "enumerate", "(", "sample", "[", "\"terms\"", "]", ")", ":", "\n", "                    ", "if", "self", ".", "rm_conflict", "and", "term_dict", "[", "\"polarity\"", "]", "==", "\"conflict\"", ":", "\n", "                        ", "continue", "\n", "", "sample_aspects", ".", "append", "(", "term_dict", ")", "\n", "", "if", "sample_aspects", ":", "\n", "                    ", "sample", "[", "\"terms\"", "]", "=", "sample_aspects", "\n", "self", ".", "example_list", ".", "append", "(", "sample", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "data_format", ")", "\n", "\n", "", "self", ".", "train_rate", "=", "rate", "\n", "self", ".", "example_list", ",", "_", "=", "self", ".", "data_split", "(", "self", ".", "example_list", ",", "self", ".", "train_rate", ",", "shuffle", "=", "True", ")", "\n", "\n", "# Misc", "\n", "self", ".", "sep_token", ",", "self", ".", "cls_token", ",", "self", ".", "pad_token", "=", "self", ".", "tokenizer", ".", "sep_token", ",", "self", ".", "tokenizer", ".", "cls_token", ",", "self", ".", "tokenizer", ".", "pad_token", "\n", "self", ".", "sep_id", ",", "self", ".", "cls_id", ",", "self", ".", "pad_id", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "\n", "[", "self", ".", "sep_token", ",", "self", ".", "cls_token", ",", "self", ".", "pad_token", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.data_split": [[326, 338], ["len", "int", "random.shuffle"], "methods", ["None"], ["", "def", "data_split", "(", "self", ",", "full_list", ",", "ratio", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "n_total", "=", "len", "(", "full_list", ")", "\n", "offset", "=", "int", "(", "n_total", "*", "ratio", ")", "\n", "if", "n_total", "==", "0", "or", "offset", "<", "1", ":", "\n", "            ", "return", "[", "]", ",", "full_list", "\n", "", "if", "n_total", "==", "offset", ":", "\n", "            ", "return", "full_list", ",", "[", "]", "\n", "", "if", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "full_list", ")", "\n", "", "sublist_1", "=", "full_list", "[", ":", "offset", "]", "\n", "sublist_2", "=", "full_list", "[", "offset", ":", "]", "\n", "return", "sublist_1", ",", "sublist_2", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.get_dep_distance": [[339, 411], ["len", "nlp", "peach.utils_tokenizer.parse_tk_idx_list_wrt_char", "networkx.Graph", "nlp.to_json", "list.append", "len", "enumerate", "set", "list", "peach.utils_tokenizer.char_to_token_span", "range", "enumerate", "asp_length.append", "range", "torch.tensor", "asp_length.append", "nodeidx2wpsidx[].add", "list", "list", "set", "new_edges.union.union.union", "list", "length_dict_list.append", "range", "torch.min", "len", "range", "set", "networkx.shortest_path_length", "range", "torch.tensor", "length_dict.keys", "_tmp_list[].append", "_tmp_list[].append"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.parse_tk_idx_list_wrt_char", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.char_to_token_span"], ["", "def", "get_dep_distance", "(", "self", ",", "example", ",", "wpidx2tokenidx", ",", "num_wps", ",", "wp_list", ")", ":", "\n", "# wpidx2tokenidx: 0 denotes the [CLS] and [SEP].", "\n", "\n", "        ", "sent_text", "=", "example", "[", "\"sent_text\"", "]", "\n", "num_char", "=", "len", "(", "sent_text", ")", "\n", "doc", "=", "nlp", "(", "sent_text", ")", "\n", "nodes_list", "=", "doc", ".", "to_json", "(", ")", "[", "'tokens'", "]", "# each node is a dict.", "\n", "edges", "=", "[", "]", "\n", "charidx2nodeidx", "=", "[", "-", "1", "for", "_", "in", "range", "(", "num_char", ")", "]", "\n", "for", "node", "in", "nodes_list", ":", "\n", "            ", "_start", ",", "_end", "=", "node", "[", "'start'", "]", ",", "node", "[", "'end'", "]", "\n", "# nodes_token.append(sent_text[_start : _end])", "\n", "edges", ".", "append", "(", "(", "node", "[", "'id'", "]", ",", "node", "[", "'head'", "]", ")", ")", "\n", "charidx2nodeidx", "[", "_start", ":", "_end", "]", "=", "[", "node", "[", "'id'", "]", "for", "_", "in", "range", "(", "_end", "-", "_start", ")", "]", "\n", "if", "_start", "-", "1", ">=", "0", "and", "charidx2nodeidx", "[", "_start", "-", "1", "]", "==", "-", "1", ":", "\n", "                ", "charidx2nodeidx", "[", "_start", "-", "1", "]", "=", "node", "[", "'id'", "]", "\n", "\n", "# Omit special sentences which are hard to process.", "\n", "", "", "if", "sent_text", "==", "'\u4e54\u5e03\u65af\u641e\u4e3b\u9898\u516c\u56ed\u5566 ! -- steve jobs to help Disney turn stores into mini theme parks |'", "or", "sent_text", "==", "'-LRB- iphone apps -RRB- - star walk \u304c\u5b89\u304f\u306a\u3063\u3066\u3044\u308b - 5 stars astronomy guide -'", ":", "\n", "            ", "asp_length", "=", "[", "]", "\n", "for", "_", "in", "example", "[", "\"terms\"", "]", ":", "\n", "                ", "_tmp_list", "=", "torch", ".", "tensor", "(", "[", "-", "19", "]", "*", "num_wps", ")", "\n", "asp_length", ".", "append", "(", "_tmp_list", ")", "\n", "", "return", "asp_length", "\n", "\n", "", "charidx2wpsidx", "=", "parse_tk_idx_list_wrt_char", "(", "self", ".", "tokenizer", ",", "sent_text", ",", "wp_list", ")", "\n", "\n", "\n", "# ------- Alignment the node and wordpiect to get new edges ------------", "\n", "if", "len", "(", "nodes_list", ")", "!=", "num_wps", ":", "\n", "            ", "nodeidx2wpsidx", "=", "{", "}", "\n", "for", "_i", ",", "_ni", "in", "enumerate", "(", "charidx2nodeidx", ")", ":", "\n", "                ", "if", "_ni", "not", "in", "nodeidx2wpsidx", ":", "\n", "                    ", "nodeidx2wpsidx", "[", "_ni", "]", "=", "set", "(", ")", "\n", "", "nodeidx2wpsidx", "[", "_ni", "]", ".", "add", "(", "charidx2wpsidx", "[", "_i", "]", ")", "\n", "\n", "", "new_edges", "=", "set", "(", ")", "\n", "for", "n1", ",", "n2", "in", "edges", ":", "\n", "                ", "n1wps", "=", "list", "(", "nodeidx2wpsidx", "[", "n1", "]", ")", "\n", "n2wps", "=", "list", "(", "nodeidx2wpsidx", "[", "n2", "]", ")", "\n", "_tmp_edges", "=", "set", "(", "[", "(", "x", ",", "y", ")", "for", "x", "in", "n1wps", "for", "y", "in", "n2wps", "]", ")", "\n", "new_edges", "=", "new_edges", ".", "union", "(", "_tmp_edges", ")", "\n", "", "edges", "=", "list", "(", "new_edges", ")", "\n", "# ------------------ Get the dependency distance --------------------", "\n", "", "graph", "=", "nx", ".", "Graph", "(", "edges", ")", "\n", "asp_length", "=", "[", "]", "\n", "# for each aspect term, get a dependency distance list whose length is num_wordpiece", "\n", "for", "term_dict", "in", "example", "[", "\"terms\"", "]", ":", "\n", "            ", "from_idx", "=", "term_dict", "[", "\"from\"", "]", "\n", "to_idx", "=", "term_dict", "[", "\"to\"", "]", "\n", "# get the index of the aspect' start and end wordpiece", "\n", "wps_from_idx", ",", "wps_to_idx", "=", "char_to_token_span", "(", "charidx2wpsidx", ",", "from_idx", ",", "to_idx", ")", "\n", "length_dict_list", "=", "[", "]", "\n", "# if there are more than 1 wordpiece in current aspect, record all distance", "\n", "for", "_term_token_idx", "in", "range", "(", "wps_from_idx", ",", "wps_to_idx", ")", ":", "\n", "                ", "node_list", "=", "list", "(", "graph", ".", "nodes", ")", "\n", "length_dict_list", ".", "append", "(", "nx", ".", "shortest_path_length", "(", "graph", ",", "target", "=", "_term_token_idx", ")", ")", "\n", "", "_tmp_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "wps_to_idx", "-", "wps_from_idx", ")", "]", "\n", "\n", "for", "_i", ",", "length_dict", "in", "enumerate", "(", "length_dict_list", ")", ":", "\n", "                ", "for", "_j", "in", "range", "(", "num_wps", ")", ":", "\n", "                    ", "if", "_j", "in", "length_dict", ".", "keys", "(", ")", ":", "\n", "                        ", "_tmp_list", "[", "_i", "]", ".", "append", "(", "length_dict", "[", "_j", "]", ")", "\n", "", "else", ":", "\n", "                        ", "_tmp_list", "[", "_i", "]", ".", "append", "(", "19", ")", "\n", "\n", "", "", "", "_tmp_list", "=", "torch", ".", "min", "(", "torch", ".", "tensor", "(", "_tmp_list", ")", ",", "dim", "=", "0", ")", ".", "values", "\n", "\n", "assert", "len", "(", "_tmp_list", ")", "==", "num_wps", "\n", "asp_length", ".", "append", "(", "_tmp_list", ")", "\n", "", "return", "asp_length", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.str2ids": [[412, 419], ["absa_dataset.AbsaDataset.tokenizer.tokenize", "absa_dataset.AbsaDataset.append", "absa_dataset.AbsaDataset.tokenizer.convert_tokens_to_ids", "absa_dataset.AbsaDataset.tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_bert_japanese.CharacterTokenizer.tokenize"], ["", "def", "str2ids", "(", "self", ",", "text", ",", "max_len", "=", "None", ")", ":", "\n", "        ", "text", "=", "self", ".", "tokenizer", ".", "cls_token", "+", "\" \"", "+", "text", "\n", "wps", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "if", "max_len", "is", "not", "None", ":", "\n", "            ", "wps", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "[", ":", "max_len", "-", "1", "]", "\n", "", "wps", ".", "append", "(", "self", ".", "tokenizer", ".", "sep_token", ")", "\n", "return", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "wps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset._get_label": [[420, 433], ["AttributeError"], "methods", ["None"], ["", "def", "_get_label", "(", "self", ",", "polarity", ")", ":", "\n", "        ", "if", "polarity", "==", "\"negative\"", ":", "\n", "            ", "label", "=", "0", "\n", "", "elif", "polarity", "==", "\"neutral\"", ":", "\n", "            ", "label", "=", "1", "\n", "", "elif", "polarity", "==", "\"positive\"", ":", "\n", "            ", "if", "self", ".", "nums_label", "==", "3", ":", "\n", "                ", "label", "=", "2", "\n", "", "elif", "self", ".", "nums_label", "==", "2", ":", "\n", "                ", "label", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "polarity", ")", "\n", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset._get_bias_label": [[434, 449], ["AttributeError"], "methods", ["None"], ["", "def", "_get_bias_label", "(", "self", ",", "bias", ")", ":", "\n", "        ", "if", "bias", "==", "\"negative\"", ":", "\n", "            ", "label", "=", "0", "\n", "", "elif", "bias", "==", "\"neutral\"", ":", "\n", "            ", "label", "=", "1", "\n", "", "elif", "bias", "==", "\"positive\"", ":", "\n", "            ", "if", "self", ".", "nums_bias_lable", "==", "3", ":", "\n", "                ", "label", "=", "2", "\n", "", "elif", "self", ".", "nums_bias_lable", "==", "2", ":", "\n", "                ", "label", "=", "0", "\n", "", "", "elif", "bias", "==", "\"non-neutral\"", ":", "\n", "            ", "label", "=", "0", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "bias", ")", "\n", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__getitem__": [[450, 586], ["absa_dataset.AbsaDataset.str2ids", "absa_dataset.AbsaDataset.str2ids", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "absa_dataset.AbsaDataset.str2ids", "len", "len", "len", "peach.utils_tokenizer.split_to_token", "peach.utils_tokenizer.parse_tk_idx_list_wrt_char", "peach.utils_tokenizer.continue_tokenize_for_wordpiece", "len", "peach.utils_tokenizer.char_to_token_span", "torch.tensor.index", "aspects_pos.extend", "range", "absa_dataset.AbsaDataset._get_label", "multi_labels.append", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "sent_text.replace", "peach.utils_tokenizer.split_to_token", "peach.utils_tokenizer.parse_tk_idx_list_wrt_char", "peach.utils_tokenizer.continue_tokenize_for_wordpiece", "torch.tensor", "torch.tensor", "enumerate", "absa_dataset.AbsaDataset.get_dep_distance", "torch.tensor", "len", "range", "torch.tensor", "AttributeError", "len", "len", "torch.tensor.index", "len", "peach.utils_tokenizer.char_to_token_span", "torch.tensor.index", "aspects_pos.extend", "range", "absa_dataset.AbsaDataset._get_label", "absa_dataset.AbsaDataset._get_bias_label", "multi_labels.append", "multi_bias_labels.append", "len", "open", "json.load", "wnl.lemmatize", "torch.cat", "len", "len", "starts.append", "ends.append", "torch.tensor.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "torch.tensor.index", "os.path.join", "range", "abs", "len", "len", "torch.tensor", "torch.tensor", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.str2ids", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.str2ids", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.str2ids", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.split_to_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.parse_tk_idx_list_wrt_char", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.continue_tokenize_for_wordpiece", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.char_to_token_span", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset._get_label", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.split_to_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.parse_tk_idx_list_wrt_char", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.continue_tokenize_for_wordpiece", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.get_dep_distance", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.char_to_token_span", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset._get_label", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset._get_bias_label"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "example", "=", "self", ".", "example_list", "[", "item", "]", "\n", "sent_text", "=", "example", "[", "\"sent_text\"", "]", "\n", "if", "self", ".", "concat_way", "==", "\"naive\"", ":", "# the concatenation of aspect ans sentence", "\n", "            ", "aspect_term", "=", "example", "[", "\"terms\"", "]", "[", "0", "]", "[", "\"term\"", "]", "# each example[\"terms\"] is a list containing only one term-dict", "\n", "# since we have splited the list in __init__", "\n", "polarity", "=", "example", "[", "\"terms\"", "]", "[", "0", "]", "[", "\"polarity\"", "]", "\n", "aspect_term_ids", "=", "self", ".", "str2ids", "(", "aspect_term", ",", "max_len", "=", "16", ")", "\n", "sent_ids", "=", "self", ".", "str2ids", "(", "sent_text", ",", "max_len", "=", "self", ".", "max_seq_length", "-", "len", "(", "aspect_term_ids", ")", "+", "1", ")", "\n", "input_ids", "=", "aspect_term_ids", "+", "sent_ids", "[", "1", ":", "]", "# Begin from 1 to remove cls_token id.", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "aspect_term_ids", ")", "+", "[", "1", "]", "*", "len", "(", "sent_ids", "[", "1", ":", "]", ")", "# Aspect_term is in front of the sentence", "\n", "", "elif", "self", ".", "concat_way", "==", "\"sent\"", ":", "# sentence-level sentiment classification", "\n", "            ", "polarity", "=", "example", "[", "\"terms\"", "]", "[", "0", "]", "[", "\"polarity\"", "]", "\n", "input_ids", "=", "self", ".", "str2ids", "(", "sent_text", ",", "max_len", "=", "self", ".", "max_seq_length", ")", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "input_ids", ")", "\n", "", "elif", "self", ".", "concat_way", "==", "\"multi_aspects1\"", ":", "# MLP", "\n", "            ", "sent_tokens", "=", "split_to_token", "(", "self", ".", "tokenizer", ",", "sent_text", ")", "\n", "charidx2tokenidx", "=", "parse_tk_idx_list_wrt_char", "(", "self", ".", "tokenizer", ",", "sent_text", ",", "sent_tokens", ")", "\n", "wp_list", ",", "id_list", ",", "wpidx2tokenidx", "=", "continue_tokenize_for_wordpiece", "(", "self", ".", "tokenizer", ",", "sent_tokens", ")", "\n", "aspects_pos", "=", "[", "]", "\n", "multi_labels", "=", "[", "]", "\n", "term_mask", "=", "[", "0", "]", "*", "len", "(", "wpidx2tokenidx", ")", "\n", "for", "term_dict", "in", "example", "[", "\"terms\"", "]", ":", "\n", "                ", "from_idx", "=", "term_dict", "[", "\"from\"", "]", "\n", "to_idx", "=", "term_dict", "[", "\"to\"", "]", "\n", "token_from_idx", ",", "token_to_idx", "=", "char_to_token_span", "(", "charidx2tokenidx", ",", "from_idx", ",", "to_idx", ")", "\n", "wp_from_idx", "=", "wpidx2tokenidx", ".", "index", "(", "token_from_idx", ")", "\n", "if", "token_to_idx", ">", "wpidx2tokenidx", "[", "-", "1", "]", ":", "\n", "                    ", "wp_to_idx", "=", "len", "(", "wpidx2tokenidx", ")", "\n", "", "else", ":", "\n", "                    ", "wp_to_idx", "=", "wpidx2tokenidx", ".", "index", "(", "token_to_idx", ")", "\n", "", "aspects_pos", ".", "extend", "(", "[", "wp_from_idx", ",", "wp_to_idx", "]", ")", "# save the aspects' position", "\n", "for", "pos_idx", "in", "range", "(", "wp_from_idx", ",", "wp_to_idx", ")", ":", "\n", "                    ", "term_mask", "[", "pos_idx", "]", "=", "1", "\n", "# label", "\n", "", "label", "=", "self", ".", "_get_label", "(", "term_dict", "[", "\"polarity\"", "]", ")", "\n", "multi_labels", ".", "append", "(", "label", ")", "\n", "# if len(sent_tokens)  != len(id_list):", "\n", "#     token = []", "\n", "", "input_ids", "=", "[", "self", ".", "cls_id", "]", "+", "id_list", "+", "[", "self", ".", "sep_id", "]", "\n", "segment_ids", "=", "[", "0", "]", "+", "term_mask", "+", "[", "0", "]", "\n", "mask_ids", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "return", "torch", ".", "tensor", "(", "input_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "mask_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "segment_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "multi_labels", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "aspects_pos", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "elif", "self", ".", "concat_way", "==", "\"adv_distillation\"", ":", "# SARL", "\n", "\n", "            ", "example", "[", "\"sent_text\"", "]", "=", "sent_text", ".", "replace", "(", "'\u2019'", ",", "'\\''", ")", "# '\u2019' will make a difficult for the alignment between tokenizer and parser", "\n", "sent_text", "=", "example", "[", "\"sent_text\"", "]", "\n", "sent_tokens", "=", "split_to_token", "(", "self", ".", "tokenizer", ",", "sent_text", ")", "\n", "charidx2tokenidx", "=", "parse_tk_idx_list_wrt_char", "(", "self", ".", "tokenizer", ",", "sent_text", ",", "sent_tokens", ")", "\n", "wp_list", ",", "id_list", ",", "wpidx2tokenidx", "=", "continue_tokenize_for_wordpiece", "(", "self", ".", "tokenizer", ",", "sent_tokens", ")", "\n", "aspects_pos", "=", "[", "]", "\n", "multi_labels", "=", "[", "]", "\n", "multi_bias_labels", "=", "[", "]", "\n", "term_mask", "=", "[", "0", "]", "*", "len", "(", "wpidx2tokenidx", ")", "\n", "for", "term_dict", "in", "example", "[", "\"terms\"", "]", ":", "\n", "                ", "from_idx", "=", "term_dict", "[", "\"from\"", "]", "\n", "to_idx", "=", "term_dict", "[", "\"to\"", "]", "\n", "token_from_idx", ",", "token_to_idx", "=", "char_to_token_span", "(", "charidx2tokenidx", ",", "from_idx", ",", "to_idx", ")", "\n", "wp_from_idx", "=", "wpidx2tokenidx", ".", "index", "(", "token_from_idx", ")", "\n", "if", "token_to_idx", ">", "wpidx2tokenidx", "[", "-", "1", "]", ":", "\n", "                    ", "wp_to_idx", "=", "len", "(", "wpidx2tokenidx", ")", "\n", "", "else", ":", "\n", "                    ", "wp_to_idx", "=", "wpidx2tokenidx", ".", "index", "(", "token_to_idx", ")", "\n", "", "aspects_pos", ".", "extend", "(", "[", "wp_from_idx", ",", "wp_to_idx", "]", ")", "# save the aspects' position", "\n", "for", "pos_idx", "in", "range", "(", "wp_from_idx", ",", "wp_to_idx", ")", ":", "\n", "                    ", "term_mask", "[", "pos_idx", "]", "=", "1", "\n", "# label", "\n", "", "label", "=", "self", ".", "_get_label", "(", "term_dict", "[", "\"polarity\"", "]", ")", "\n", "bias_label", "=", "self", ".", "_get_bias_label", "(", "term_dict", "[", "\"bias\"", "]", ")", "\n", "multi_labels", ".", "append", "(", "label", ")", "\n", "multi_bias_labels", ".", "append", "(", "bias_label", ")", "\n", "\n", "", "input_ids", "=", "[", "self", ".", "cls_id", "]", "+", "id_list", "+", "[", "self", ".", "sep_id", "]", "\n", "segment_ids", "=", "[", "0", "]", "+", "term_mask", "+", "[", "0", "]", "\n", "mask_ids", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# provide the sentiment score and wpidx2tokenidx list in train phrase;", "\n", "wpidx2tokenidx", "=", "torch", ".", "tensor", "(", "wpidx2tokenidx", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "\"./datasets/SentiWords.json\"", ")", ")", "as", "f", ":", "\n", "                ", "senti_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "", "sentiment_score", "=", "[", "0", "for", "_", "in", "range", "(", "len", "(", "id_list", ")", ")", "]", "\n", "sentiment_score", "=", "torch", ".", "tensor", "(", "sentiment_score", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "_token_id", ",", "token", "in", "enumerate", "(", "sent_tokens", ")", ":", "\n", "                ", "token", "=", "token", "[", "1", ":", "]", "if", "token", "[", "0", "]", "==", "' '", "else", "token", "\n", "token", "=", "wnl", ".", "lemmatize", "(", "token", ")", "\n", "if", "token", "in", "senti_dict", ":", "\n", "                    ", "sentiment_score", "[", "torch", ".", "squeeze", "(", "(", "wpidx2tokenidx", "==", "_token_id", ")", ".", "nonzero", "(", ")", ")", "]", "=", "abs", "(", "senti_dict", "[", "token", "]", ")", "\n", "\n", "# prepare for providing wpidx2tokenidx", "\n", "", "", "wpidx2tokenidx", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "[", "-", "1", "]", ")", ",", "wpidx2tokenidx", ",", "torch", ".", "tensor", "(", "[", "-", "1", "]", ")", "]", ",", "dim", "=", "0", ")", "+", "1", "\n", "assert", "len", "(", "input_ids", ")", "==", "len", "(", "wpidx2tokenidx", ")", "\n", "\n", "# get the dependency distance between each wordpiece and each aspect, then return a [num_asp, num_wps] tensor", "\n", "asp_length", "=", "self", ".", "get_dep_distance", "(", "example", ",", "wpidx2tokenidx", ",", "len", "(", "input_ids", ")", "-", "2", ",", "wp_list", ")", "\n", "\n", "input_ids", "=", "torch", ".", "tensor", "(", "input_ids", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "spans_list", "=", "example", "[", "\"spans\"", "]", "\n", "starts", ",", "ends", ",", "senti_distribution", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "num_spans", "=", "len", "(", "spans_list", ")", "\n", "for", "_i", "in", "range", "(", "num_spans", ")", ":", "\n", "                ", "starts", ".", "append", "(", "spans_list", "[", "_i", "]", "[", "0", "]", ")", "\n", "ends", ".", "append", "(", "spans_list", "[", "_i", "]", "[", "1", "]", ")", "\n", "senti_distribution", ".", "append", "(", "spans_list", "[", "_i", "]", "[", "2", "]", ")", "\n", "\n", "", "senti_distribution", "=", "torch", ".", "tensor", "(", "senti_distribution", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "return", "input_ids", ",", "torch", ".", "tensor", "(", "mask_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "segment_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "multi_labels", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "aspects_pos", ",", "dtype", "=", "torch", ".", "long", ")", ",", "sentiment_score", ",", "wpidx2tokenidx", ",", "asp_length", ",", "torch", ".", "tensor", "(", "multi_bias_labels", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "starts", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "ends", ",", "dtype", "=", "torch", ".", "long", ")", ",", "senti_distribution", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "mask_ids", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# label", "\n", "if", "polarity", "==", "\"negative\"", ":", "\n", "            ", "label", "=", "0", "\n", "", "elif", "polarity", "==", "\"neutral\"", ":", "\n", "            ", "label", "=", "1", "\n", "", "elif", "polarity", "==", "\"positive\"", ":", "\n", "            ", "if", "self", ".", "nums_label", "==", "3", ":", "\n", "                ", "label", "=", "2", "\n", "", "elif", "self", ".", "nums_label", "==", "2", ":", "\n", "                ", "label", "=", "0", "\n", "", "", "elif", "polarity", "==", "-", "1", ":", "\n", "            ", "label", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "polarity", ")", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "input_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "mask_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "segment_ids", ",", "dtype", "=", "torch", ".", "long", ")", ",", "torch", ".", "tensor", "(", "label", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.data_collate_fn": [[587, 613], ["list", "enumerate", "tuple", "zip", "_t.t", "_tensors[].dim", "return_list.append", "return_list.append", "_t.t", "torch.nn.utils.rnn.pad_sequence", "torch.stack"], "methods", ["None"], ["", "def", "data_collate_fn", "(", "self", ",", "batch", ")", ":", "\n", "        ", "tensors_list", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "# 5", "\n", "return_list", "=", "[", "]", "\n", "for", "_idx_t", ",", "_tensors", "in", "enumerate", "(", "tensors_list", ")", ":", "\n", "            ", "if", "self", ".", "data_format", "==", "'term_hinge'", ":", "\n", "                ", "if", "_idx_t", "==", "0", ":", "\n", "                    ", "padding_value", "=", "self", ".", "pad_id", "\n", "", "elif", "_idx_t", "<", "3", ":", "\n", "                    ", "padding_value", "=", "0", "\n", "", "elif", "_idx_t", ">=", "3", ":", "\n", "                    ", "padding_value", "=", "-", "1", "\n", "", "", "else", ":", "\n", "                ", "if", "_idx_t", "==", "0", ":", "\n", "                    ", "padding_value", "=", "self", ".", "pad_id", "\n", "", "else", ":", "\n", "                    ", "padding_value", "=", "0", "\n", "", "", "_tensors", "=", "[", "_t", ".", "t", "(", ")", "for", "_t", "in", "_tensors", "]", "\n", "if", "_tensors", "[", "0", "]", ".", "dim", "(", ")", ">=", "1", ":", "\n", "                ", "_tensors", "=", "[", "_t", ".", "t", "(", ")", "for", "_t", "in", "_tensors", "]", "\n", "return_list", ".", "append", "(", "\n", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_sequence", "(", "\n", "_tensors", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", ")", ",", "# .transpose(-1, -2)", "\n", ")", "\n", "", "else", ":", "\n", "                ", "return_list", ".", "append", "(", "torch", ".", "stack", "(", "_tensors", ",", "dim", "=", "0", ")", ")", "\n", "", "", "return", "tuple", "(", "return_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.batch2feed_dict": [[614, 623], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "batch2feed_dict", "(", "cls", ",", "batch", ")", ":", "\n", "        ", "inputs", "=", "{", "\n", "'input_ids'", ":", "batch", "[", "0", "]", ",", "# bs, sl", "\n", "'attention_mask'", ":", "batch", "[", "1", "]", ",", "#", "\n", "'token_type_ids'", ":", "batch", "[", "2", "]", ",", "#", "\n", "\"labels\"", ":", "batch", "[", "-", "1", "]", ",", "#", "\n", "}", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.data_collate_fn_multi": [[625, 668], ["list", "enumerate", "tuple", "zip", "return_list.append", "return_list.append", "_t.t", "max", "max", "enumerate", "tuple", "_new_tensors.append", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "list", "torch.tensor", "torch.cat", "inner_tensors.append", "torch.stack", "len", "len", "list"], "methods", ["None"], ["", "def", "data_collate_fn_multi", "(", "self", ",", "batch", ")", ":", "\n", "        ", "tensors_list", "=", "list", "(", "zip", "(", "*", "batch", ")", ")", "#  the num of keys of input-dict", "\n", "return_list", "=", "[", "]", "\n", "for", "_idx_t", ",", "_tensors", "in", "enumerate", "(", "tensors_list", ")", ":", "\n", "            ", "if", "_idx_t", "==", "0", "or", "_idx_t", "==", "11", ":", "\n", "                ", "padding_value", "=", "self", ".", "pad_id", "\n", "", "elif", "_idx_t", "<", "3", "or", "_idx_t", ">", "11", ":", "\n", "                ", "padding_value", "=", "0", "\n", "", "else", ":", "\n", "                ", "padding_value", "=", "-", "1", "\n", "\n", "", "if", "_idx_t", "==", "7", "or", "_idx_t", ">", "10", ":", "\n", "                ", "_tensors", "=", "[", "_t", "for", "_t", "in", "_tensors", "]", "\n", "", "else", ":", "\n", "                ", "_tensors", "=", "[", "_t", ".", "t", "(", ")", "for", "_t", "in", "_tensors", "]", "\n", "", "if", "_idx_t", "==", "7", "or", "_idx_t", ">", "10", ":", "\n", "# get max seq len for padding", "\n", "                ", "_max_len_last_dim", "=", "0", "\n", "for", "_tensor", "in", "_tensors", ":", "\n", "                    ", "_local_max_len_last_dim", "=", "max", "(", "len", "(", "_t", ")", "for", "_t", "in", "list", "(", "_tensor", ")", ")", "\n", "_max_len_last_dim", "=", "max", "(", "_max_len_last_dim", ",", "_local_max_len_last_dim", ")", "\n", "# 2d padding", "\n", "", "_new_tensors", "=", "[", "]", "\n", "for", "_tensor", "in", "_tensors", ":", "# _tensor: (seq_len, seq_len)", "\n", "                    ", "inner_tensors", "=", "[", "]", "\n", "for", "idx", ",", "_", "in", "enumerate", "(", "list", "(", "_tensor", ")", ")", ":", "\n", "                        ", "_pad_shape", "=", "_max_len_last_dim", "-", "len", "(", "_tensor", "[", "idx", "]", ")", "\n", "_pad_tensor", "=", "torch", ".", "tensor", "(", "[", "padding_value", "]", "*", "_pad_shape", ",", "device", "=", "_tensor", "[", "idx", "]", ".", "device", ",", "dtype", "=", "_tensor", "[", "idx", "]", ".", "dtype", ")", "\n", "_new_inner_tensor", "=", "torch", ".", "cat", "(", "[", "_tensor", "[", "idx", "]", ",", "_pad_tensor", "]", ",", "dim", "=", "0", ")", "# padding_len", "\n", "inner_tensors", ".", "append", "(", "_new_inner_tensor", ")", "\n", "", "_tensors_tuple", "=", "tuple", "(", "ts", "for", "ts", "in", "inner_tensors", ")", "\n", "_new_tensors", ".", "append", "(", "torch", ".", "stack", "(", "_tensors_tuple", ",", "dim", "=", "0", ")", ")", "\n", "", "return_list", ".", "append", "(", "\n", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_sequence", "(", "_new_tensors", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "return_list", ".", "append", "(", "\n", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_sequence", "(", "\n", "_tensors", ",", "batch_first", "=", "True", ",", "padding_value", "=", "padding_value", ")", ",", "\n", ")", "\n", "\n", "\n", "", "", "return", "tuple", "(", "return_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.batch2feed_dict_multi": [[669, 696], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "batch2feed_dict_multi", "(", "cls", ",", "batch", ",", "concat_way", "=", "None", ")", ":", "\n", "\n", "        ", "if", "concat_way", "==", "'adv_distillation'", ":", "\n", "            ", "inputs", "=", "{", "\n", "'input_ids'", ":", "batch", "[", "0", "]", ",", "# bs, sl", "\n", "'attention_mask'", ":", "batch", "[", "1", "]", ",", "#", "\n", "'token_type_ids'", ":", "batch", "[", "2", "]", ",", "#", "\n", "\"multi_labels\"", ":", "batch", "[", "3", "]", ",", "#", "\n", "\"multi_aspects_pos\"", ":", "batch", "[", "4", "]", ",", "\n", "\"sentiment_scores\"", ":", "batch", "[", "5", "]", ",", "\n", "\"wps2tokens\"", ":", "batch", "[", "6", "]", ",", "\n", "\"dep_distances\"", ":", "batch", "[", "7", "]", ",", "\n", "\"multi_bias_labels\"", ":", "batch", "[", "8", "]", ",", "\n", "\"starts_position\"", ":", "batch", "[", "9", "]", ",", "\n", "\"ends_position\"", ":", "batch", "[", "10", "]", ",", "\n", "\"senti_distributions\"", ":", "batch", "[", "11", "]", "\n", "}", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "{", "\n", "'input_ids'", ":", "batch", "[", "0", "]", ",", "# bs, sl", "\n", "'attention_mask'", ":", "batch", "[", "1", "]", ",", "#", "\n", "'token_type_ids'", ":", "batch", "[", "2", "]", ",", "#", "\n", "\"multi_labels\"", ":", "batch", "[", "3", "]", ",", "#", "\n", "\"multi_aspects_pos\"", ":", "batch", "[", "-", "1", "]", "\n", "}", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.__len__": [[697, 699], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "example_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.load_list_from_file": [[14, 21], ["os.path.isfile", "open", "data.append", "line.strip"], "function", ["None"], ["def", "load_list_from_file", "(", "file_path", ")", ":", "\n", "    ", "data", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "            ", "for", "line", "in", "fp", ":", "\n", "                ", "data", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_semeval14_absa_xml": [[22, 51], ["lxml.etree.fromstring", "open", "f.read", "sentence.find", "sentence.find", "absa_dataset.append", "sentence.find", "dict", "int", "int", "sample[].append", "sample[].append", "dict"], "function", ["None"], ["", "def", "read_semeval14_absa_xml", "(", "xml_path", ")", ":", "\n", "    ", "absa_dataset", "=", "[", "]", "\n", "\n", "with", "open", "(", "xml_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "raw", "=", "f", ".", "read", "(", ")", "\n", "", "root", "=", "etree", ".", "fromstring", "(", "raw", ")", "\n", "for", "sentence", "in", "root", ":", "\n", "        ", "sample", "=", "{", "}", "\n", "# get sent id", "\n", "sample", "[", "\"sent_id\"", "]", "=", "sentence", ".", "attrib", "[", "\"id\"", "]", "\n", "sample", "[", "\"sent_text\"", "]", "=", "sentence", ".", "find", "(", "'text'", ")", ".", "text", "\n", "# items", "\n", "sample", "[", "\"terms\"", "]", "=", "[", "]", "\n", "terms", "=", "sentence", ".", "find", "(", "'aspectTerms'", ")", "\n", "if", "terms", "is", "not", "None", ":", "\n", "            ", "for", "term", "in", "terms", ":", "\n", "                ", "term_dict", "=", "dict", "(", "term", ".", "attrib", ")", "\n", "term_dict", "[", "\"from\"", "]", "=", "int", "(", "term_dict", "[", "\"from\"", "]", ")", "\n", "term_dict", "[", "\"to\"", "]", "=", "int", "(", "term_dict", "[", "\"to\"", "]", ")", "\n", "sample", "[", "\"terms\"", "]", ".", "append", "(", "term_dict", ")", "\n", "# categories", "\n", "", "", "sample", "[", "\"categories\"", "]", "=", "[", "]", "\n", "categories", "=", "sentence", ".", "find", "(", "'aspectCategories'", ")", "\n", "if", "categories", "is", "not", "None", ":", "\n", "            ", "for", "category", "in", "categories", ":", "\n", "                ", "sample", "[", "\"categories\"", "]", ".", "append", "(", "dict", "(", "category", ".", "attrib", ")", ")", "\n", "\n", "", "", "absa_dataset", ".", "append", "(", "sample", ")", "\n", "", "return", "absa_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_bias_absa_json": [[52, 56], ["open", "json.load"], "function", ["None"], ["", "def", "read_bias_absa_json", "(", "json_path", ")", ":", "\n", "    ", "with", "open", "(", "json_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "absa_dataset", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "absa_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_rest15_16_absa_xml": [[57, 87], ["lxml.etree.fromstring", "open", "f.read", "sentence.find", "absa_dataset.append", "sentence.find", "set", "dict", "dict.pop", "int", "int", "sample[].append", "set.add"], "function", ["None"], ["", "def", "read_rest15_16_absa_xml", "(", "xml_path", ")", ":", "\n", "    ", "absa_dataset", "=", "[", "]", "\n", "\n", "with", "open", "(", "xml_path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "raw", "=", "f", ".", "read", "(", ")", "\n", "", "root", "=", "etree", ".", "fromstring", "(", "raw", ")", "\n", "for", "review", "in", "root", ":", "\n", "        ", "for", "sentences", "in", "review", ":", "\n", "            ", "for", "sentence", "in", "sentences", ":", "\n", "                ", "sample", "=", "{", "}", "\n", "# get sent id", "\n", "sample", "[", "\"sent_id\"", "]", "=", "sentence", ".", "attrib", "[", "\"id\"", "]", "\n", "sample", "[", "\"sent_text\"", "]", "=", "sentence", ".", "find", "(", "'text'", ")", ".", "text", "\n", "# items", "\n", "sample", "[", "\"terms\"", "]", "=", "[", "]", "\n", "terms", "=", "sentence", ".", "find", "(", "'Opinions'", ")", "\n", "if", "terms", "is", "not", "None", ":", "\n", "                    ", "terms_set", "=", "set", "(", ")", "\n", "for", "term", "in", "terms", ":", "\n", "                        ", "term_dict", "=", "dict", "(", "term", ".", "attrib", ")", "\n", "if", "term_dict", "[", "\"target\"", "]", "not", "in", "terms_set", ":", "\n", "                            ", "term_dict", "[", "\"term\"", "]", "=", "term_dict", ".", "pop", "(", "\"target\"", ")", "\n", "term_dict", "[", "\"from\"", "]", "=", "int", "(", "term_dict", "[", "\"from\"", "]", ")", "\n", "term_dict", "[", "\"to\"", "]", "=", "int", "(", "term_dict", "[", "\"to\"", "]", ")", "\n", "if", "term_dict", "[", "\"term\"", "]", "!=", "'NULL'", ":", "\n", "                                ", "sample", "[", "\"terms\"", "]", ".", "append", "(", "term_dict", ")", "\n", "terms_set", ".", "add", "(", "term_dict", "[", "\"term\"", "]", ")", "\n", "\n", "", "", "", "", "absa_dataset", ".", "append", "(", "sample", ")", "\n", "", "", "", "return", "absa_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_twitter_absa_dataset": [[88, 119], ["absa_dataset.load_list_from_file", "range", "len", "sent_text_with_ph.find", "sent_text_with_ph.replace", "absa_dataset.append", "len", "len", "str", "AttributeError"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.load_list_from_file"], ["", "def", "read_twitter_absa_dataset", "(", "data_path", ")", ":", "\n", "    ", "absa_dataset", "=", "[", "]", "\n", "\n", "raw_data", "=", "load_list_from_file", "(", "data_path", ")", "\n", "assert", "len", "(", "raw_data", ")", "%", "3", "==", "0", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "raw_data", ")", ",", "3", ")", ":", "\n", "        ", "sent_text_with_ph", "=", "raw_data", "[", "i", "]", "\n", "term", "=", "raw_data", "[", "i", "+", "1", "]", "\n", "polarity_int", "=", "raw_data", "[", "i", "+", "2", "]", "\n", "\n", "if", "polarity_int", "==", "\"-1\"", ":", "\n", "            ", "polarity", "=", "\"negative\"", "\n", "", "elif", "polarity_int", "==", "\"0\"", ":", "\n", "            ", "polarity", "=", "\"neutral\"", "\n", "", "elif", "polarity_int", "==", "\"1\"", ":", "\n", "            ", "polarity", "=", "\"positive\"", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "polarity_int", ")", "\n", "\n", "", "from_idx", "=", "sent_text_with_ph", ".", "find", "(", "\"$T$\"", ")", "\n", "to_idx", "=", "from_idx", "+", "len", "(", "term", ")", "\n", "sent_text", "=", "sent_text_with_ph", ".", "replace", "(", "\"$T$\"", ",", "term", ")", "\n", "\n", "sample", "=", "{", "\n", "\"sent_id\"", ":", "str", "(", "i", "//", "3", ")", ",", "\"sent_text\"", ":", "sent_text", ",", "\n", "\"terms\"", ":", "[", "{", "\"term\"", ":", "term", ",", "\"polarity\"", ":", "polarity", ",", "\"from\"", ":", "from_idx", ",", "\"to\"", ":", "to_idx", "}", "]", ",", "\n", "\"categories\"", ":", "[", "]", ",", "\n", "}", "\n", "absa_dataset", ".", "append", "(", "sample", ")", "\n", "", "return", "absa_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_psst_normal_dataset": [[120, 168], ["str2id.items", "open", "enumerate", "open", "enumerate", "absa_dataset.append", "os.path.join", "line.strip().split", "os.path.join", "line.strip().split", "float", "len", "len", "str", "line.strip", "line.strip"], "function", ["None"], ["", "def", "read_psst_normal_dataset", "(", "data_path", ",", "offset", ")", ":", "\n", "# str2id", "\n", "    ", "str2id", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"dictionary.txt\"", ")", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "        ", "for", "idx", ",", "line", "in", "enumerate", "(", "fp", ")", ":", "\n", "            ", "if", "idx", "==", "0", ":", "\n", "                ", "continue", "\n", "", "data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"|\"", ")", "\n", "assert", "len", "(", "data", ")", "==", "2", "\n", "str2id", "[", "data", "[", "0", "]", "]", "=", "data", "[", "1", "]", "\n", "# id2label", "\n", "", "", "id2label", "=", "{", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"sentiment_labels.txt\"", ")", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fp", ":", "\n", "        ", "for", "idx", ",", "line", "in", "enumerate", "(", "fp", ")", ":", "\n", "            ", "if", "idx", "==", "0", ":", "\n", "                ", "continue", "\n", "", "data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"|\"", ")", "\n", "assert", "len", "(", "data", ")", "==", "2", "\n", "val", "=", "float", "(", "data", "[", "1", "]", ")", "\n", "# offset = 0.1", "\n", "if", "val", "<", "0.5", "-", "offset", ":", "\n", "                ", "label", "=", "0", "\n", "", "elif", "val", "<", "0.5", "+", "offset", ":", "\n", "                ", "label", "=", "1", "\n", "", "else", ":", "\n", "                ", "label", "=", "2", "\n", "", "id2label", "[", "data", "[", "0", "]", "]", "=", "label", "\n", "\n", "", "", "absa_dataset", "=", "[", "]", "\n", "for", "text", ",", "text_id", "in", "str2id", ".", "items", "(", ")", ":", "\n", "        ", "label", "=", "id2label", "[", "text_id", "]", "\n", "if", "label", "==", "0", ":", "\n", "            ", "polarity", "=", "\"negative\"", "\n", "", "elif", "label", "==", "1", ":", "\n", "            ", "polarity", "=", "\"neutral\"", "\n", "", "elif", "label", "==", "2", ":", "\n", "            ", "polarity", "=", "\"positive\"", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "\n", "\n", "", "sample", "=", "{", "\n", "\"sent_id\"", ":", "\"psst-\"", "+", "str", "(", "text_id", ")", ",", "\"sent_text\"", ":", "text", ",", "\n", "\"terms\"", ":", "[", "{", "\"term\"", ":", "None", ",", "\"polarity\"", ":", "polarity", ",", "\"from\"", ":", "-", "1", ",", "\"to\"", ":", "-", "1", "}", "]", ",", "\n", "\"categories\"", ":", "[", "]", ",", "\n", "}", "\n", "absa_dataset", ".", "append", "(", "sample", ")", "\n", "\n", "", "return", "absa_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.get_raw_datasets": [[198, 262], ["os.path.join", "os.path.join", "absa_dataset.read_semeval14_absa_xml", "os.path.join", "os.path.join", "absa_dataset.read_semeval14_absa_xml", "os.path.join", "os.path.join", "absa_dataset.read_twitter_absa_dataset", "os.path.join", "os.path.join", "absa_dataset.read_rest15_16_absa_xml", "absa_dataset.read_psst_normal_dataset", "absa_dataset.read_psst_normal_dataset", "absa_dataset.read_psst_normal_dataset", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "dataset.split", "absa_dataset.read_bias_absa_json", "os.path.join", "os.path.join", "dataset.split", "dataset.split", "absa_dataset.read_bias_absa_json", "os.path.join", "absa_dataset.read_bias_absa_json", "NotImplementedError", "dataset.split", "dataset.split"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_semeval14_absa_xml", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_semeval14_absa_xml", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_twitter_absa_dataset", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_rest15_16_absa_xml", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_psst_normal_dataset", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_psst_normal_dataset", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_psst_normal_dataset", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_bias_absa_json", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_bias_absa_json", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.read_bias_absa_json"], ["def", "get_raw_datasets", "(", "dataset", ",", "dataset_dir", "=", "None", ")", ":", "\n", "    ", "if", "dataset", "==", "\"rest14\"", ":", "\n", "        ", "dataset_dir", "=", "dataset_dir", "or", "DATASET2PATH", "[", "dataset", "]", "\n", "train_dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"Restaurants_Train_v2.xml\"", ")", "\n", "test_dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"Restaurants_Test_Gold.xml\"", ")", "\n", "dev_dataset_path", "=", "test_dataset_path", "\n", "train_dataset_raw", ",", "dev_dataset_raw", ",", "test_dataset_raw", "=", "[", "\n", "read_semeval14_absa_xml", "(", "_p", ")", "for", "_p", "in", "[", "train_dataset_path", ",", "dev_dataset_path", ",", "test_dataset_path", "]", "]", "\n", "# dev_dataset_raw = read_semeval14_absa_neutral_xml(dev_dataset_path)", "\n", "# test_dataset_raw = read_semeval14_absa_neutral_xml(test_dataset_path)   # explore the neutral results", "\n", "", "elif", "dataset", "==", "\"lap14\"", ":", "\n", "        ", "dataset_dir", "=", "dataset_dir", "or", "DATASET2PATH", "[", "dataset", "]", "\n", "train_dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"Laptop_Train_v2.xml\"", ")", "\n", "test_dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"Laptops_Test_Gold.xml\"", ")", "\n", "dev_dataset_path", "=", "test_dataset_path", "\n", "train_dataset_raw", ",", "dev_dataset_raw", ",", "test_dataset_raw", "=", "[", "\n", "read_semeval14_absa_xml", "(", "_p", ")", "for", "_p", "in", "[", "train_dataset_path", ",", "dev_dataset_path", ",", "test_dataset_path", "]", "]", "\n", "# train_dataset_raw = read_semeval14_absa_neu_sentence_xml(train_dataset_path)", "\n", "# dev_dataset_raw = read_semeval14_absa_neutral_xml(dev_dataset_path)", "\n", "# test_dataset_raw = read_semeval14_absa_neutral_xml(test_dataset_path)", "\n", "", "elif", "dataset", "==", "\"twitter\"", ":", "\n", "        ", "dataset_dir", "=", "dataset_dir", "or", "DATASET2PATH", "[", "dataset", "]", "\n", "train_dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"train.raw\"", ")", "\n", "test_dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"test.raw\"", ")", "\n", "dev_dataset_path", "=", "test_dataset_path", "\n", "train_dataset_raw", ",", "dev_dataset_raw", ",", "test_dataset_raw", "=", "[", "\n", "read_twitter_absa_dataset", "(", "_p", ")", "for", "_p", "in", "[", "train_dataset_path", ",", "dev_dataset_path", ",", "test_dataset_path", "]", "]", "\n", "# dev_dataset_raw = test_dataset_raw = read_twitter_absa_neutral_dataset(test_dataset_path)", "\n", "", "elif", "dataset", "in", "[", "\"rest15\"", ",", "\"rest16\"", "]", ":", "\n", "        ", "dataset_dir", "=", "dataset_dir", "or", "DATASET2PATH", "[", "dataset", "]", "\n", "train_dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"Restaurants_Train_Final.xml\"", ")", "\n", "test_dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "\"Restaurants_Test.xml\"", ")", "\n", "dev_dataset_path", "=", "test_dataset_path", "\n", "train_dataset_raw", ",", "dev_dataset_raw", ",", "test_dataset_raw", "=", "[", "\n", "read_rest15_16_absa_xml", "(", "_p", ")", "for", "_p", "in", "[", "train_dataset_path", ",", "dev_dataset_path", ",", "test_dataset_path", "]", "]", "\n", "", "elif", "dataset", "==", "\"psst\"", ":", "\n", "        ", "dataset_dir", "=", "dataset_dir", "or", "DATASET2PATH", "[", "dataset", "]", "\n", "train_dataset_raw", "=", "read_psst_normal_dataset", "(", "os", ".", "path", ".", "join", "(", "dataset_dir", ")", ",", "offset", "=", "0.1", ")", "\n", "dev_dataset_raw", "=", "read_psst_normal_dataset", "(", "os", ".", "path", ".", "join", "(", "dataset_dir", ")", ",", "offset", "=", "0.1", ")", "\n", "test_dataset_raw", "=", "read_psst_normal_dataset", "(", "os", ".", "path", ".", "join", "(", "dataset_dir", ")", ",", "offset", "=", "0.1", ")", "\n", "", "elif", "dataset", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "==", "\"bias\"", ":", "\n", "        ", "file_prefix", "=", "\"_\"", ".", "join", "(", "dataset", ".", "split", "(", "\"_\"", ")", "[", "1", ":", "]", ")", "\n", "dataset_dir", "=", "dataset_dir", "or", "DATASET2PATH", "[", "dataset", "]", "\n", "train_dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "file_prefix", "+", "\"_train.json\"", ")", "\n", "test_dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "file_prefix", "+", "\"_test.json\"", ")", "\n", "dev_dataset_path", "=", "test_dataset_path", "\n", "train_dataset_raw", ",", "dev_dataset_raw", ",", "test_dataset_raw", "=", "[", "\n", "read_bias_absa_json", "(", "_p", ")", "for", "_p", "in", "[", "train_dataset_path", ",", "dev_dataset_path", ",", "test_dataset_path", "]", "]", "\n", "", "elif", "dataset", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "==", "\"distillation\"", ":", "\n", "        ", "file_prefix", "=", "\"_\"", ".", "join", "(", "dataset", ".", "split", "(", "\"_\"", ")", "[", "1", ":", "]", ")", "\n", "dataset_dir", "=", "dataset_dir", "or", "DATASET2PATH", "[", "dataset", "]", "\n", "train_dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "file_prefix", "+", "\"_train.json\"", ")", "\n", "test_dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "file_prefix", "+", "\"_test.json\"", ")", "\n", "dev_dataset_path", "=", "test_dataset_path", "\n", "train_dataset_raw", ",", "dev_dataset_raw", ",", "test_dataset_raw", "=", "[", "\n", "read_bias_absa_json", "(", "_p", ")", "for", "_p", "in", "[", "train_dataset_path", ",", "dev_dataset_path", ",", "test_dataset_path", "]", "]", "\n", "", "elif", "dataset", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "==", "\"opinions\"", ":", "\n", "        ", "dataset_dir", "=", "dataset_dir", "or", "DATASET2PATH", "[", "dataset", "]", "\n", "test_dataset_path", "=", "os", ".", "path", ".", "join", "(", "dataset_dir", ",", "dataset", "+", "\"_test.json\"", ")", "\n", "train_dataset_raw", ",", "dev_dataset_raw", "=", "[", "]", ",", "[", "]", "\n", "test_dataset_raw", "=", "read_bias_absa_json", "(", "test_dataset_path", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "dataset", ",", "dataset_dir", ")", "\n", "", "return", "train_dataset_raw", ",", "dev_dataset_raw", ",", "test_dataset_raw", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.get_wordnet_bias": [[15, 69], ["enumerate", "open", "json.load", "open", "json.dump", "enumerate", "pandas.DataFrame", "pd.DataFrame.to_csv", "os.path.join", "term_dict[].split", "os.path.join", "sent_text_list.append", "aspect_list.append", "label_list.append", "bias_list.append"], "function", ["None"], ["def", "get_wordnet_bias", "(", "args", ",", "raw_dataset", ",", "dataset_name", ",", "dataset_type", ",", "see_bias", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "\"./datasets/SentiWords.json\"", ")", ")", "as", "f", ":", "\n", "        ", "senti_dict", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "_idx", ",", "sent_dict", "in", "enumerate", "(", "raw_dataset", ")", ":", "\n", "        ", "for", "term_dict", "in", "sent_dict", "[", "\"terms\"", "]", ":", "\n", "            ", "if", "term_dict", "[", "\"polarity\"", "]", "==", "\"conflict\"", ":", "\n", "                ", "continue", "\n", "", "asp_term_list", "=", "term_dict", "[", "\"term\"", "]", ".", "split", "(", "' '", ")", "\n", "tmp_score", "=", "0", "\n", "for", "asp_term", "in", "asp_term_list", ":", "\n", "                ", "if", "asp_term", "in", "senti_dict", ":", "\n", "                    ", "tmp_score", "+=", "senti_dict", "[", "asp_term", "]", "\n", "", "", "if", "tmp_score", ">", "0", ":", "\n", "                ", "term_dict", "[", "'bias'", "]", "=", "\"positive\"", "\n", "", "elif", "tmp_score", "==", "0", ":", "\n", "                ", "term_dict", "[", "'bias'", "]", "=", "\"neutral\"", "\n", "", "elif", "tmp_score", "<", "0", ":", "\n", "                ", "term_dict", "[", "'bias'", "]", "=", "\"negative\"", "\n", "\n", "", "", "", "if", "dataset_name", "in", "[", "'rest14'", ",", "'lap14'", "]", ":", "\n", "        ", "save_path", "=", "\"./datasets/SemEval-14/bias_\"", "+", "dataset_name", "+", "\"/wordnet_bias_\"", "+", "dataset_type", "+", "\".json\"", "\n", "", "elif", "dataset_name", "==", "'twitter'", ":", "\n", "        ", "save_path", "=", "\"./datasets/Twitter/bias_\"", "+", "dataset_name", "+", "\"/wordnet_bias_\"", "+", "dataset_type", "+", "\".json\"", "\n", "", "elif", "dataset_name", "==", "'rest15'", ":", "\n", "        ", "save_path", "=", "\"./datasets/SemEval-15/bias_\"", "+", "dataset_name", "+", "\"/wordnet_bias_\"", "+", "dataset_type", "+", "\".json\"", "\n", "", "elif", "dataset_name", "==", "'rest16'", ":", "\n", "        ", "save_path", "=", "\"./datasets/SemEval-16/bias_\"", "+", "dataset_name", "+", "\"/wordnet_bias_\"", "+", "dataset_type", "+", "\".json\"", "\n", "", "with", "open", "(", "save_path", ",", "'w'", ")", "as", "f_obj", ":", "\n", "        ", "json", ".", "dump", "(", "raw_dataset", ",", "f_obj", ")", "\n", "\n", "", "if", "see_bias", ":", "\n", "        ", "sent_text_list", "=", "[", "]", "\n", "aspect_list", "=", "[", "]", "\n", "label_list", "=", "[", "]", "\n", "bias_list", "=", "[", "]", "\n", "for", "_idx", ",", "sent_dict", "in", "enumerate", "(", "raw_dataset", ".", "absa_dataset", ")", ":", "\n", "            ", "sent_text", "=", "sent_dict", "[", "\"sent_text\"", "]", "\n", "for", "term_dict", "in", "sent_dict", "[", "\"terms\"", "]", ":", "\n", "                ", "if", "term_dict", "[", "\"polarity\"", "]", "==", "\"conflict\"", ":", "\n", "                    ", "continue", "\n", "", "sent_text_list", ".", "append", "(", "sent_text", ")", "\n", "aspect_list", ".", "append", "(", "term_dict", "[", "\"term\"", "]", ")", "\n", "label_list", ".", "append", "(", "term_dict", "[", "\"polarity\"", "]", ")", "\n", "bias_list", ".", "append", "(", "term_dict", "[", "\"bias\"", "]", ")", "\n", "\n", "", "", "pred_data", "=", "{", "\n", "\"sent_text\"", ":", "sent_text_list", ",", "\n", "\"aspect\"", ":", "aspect_list", ",", "\n", "\"label\"", ":", "label_list", ",", "\n", "\"bias\"", ":", "bias_list", ",", "\n", "}", "\n", "pred_data_df", "=", "pd", ".", "DataFrame", "(", "pred_data", ")", "\n", "pred_data_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"./view_wordnet_bias_\"", "+", "dataset_type", "+", "\".csv\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.get_distillation_dataset": [[70, 207], ["absa.models.RoBERTaSpanCLS.from_pretrained", "RoBERTaSpanCLS.from_pretrained.to", "tokenizer.convert_tokens_to_ids", "absa.absa_dataset.get_raw_datasets", "enumerate", "enumerate", "tqdm.tqdm", "sent_text.replace", "peach.utils_tokenizer.split_to_token", "peach.utils_tokenizer.parse_tk_idx_list_wrt_char", "peach.utils_tokenizer.continue_tokenize_for_wordpiece", "torch.tensor", "torch.tensor", "len", "torch.unsqueeze().repeat", "range", "len", "range", "range", "torch.stack().to", "torch.stack().to", "torch.cat", "range", "open", "json.dump", "len", "peach.utils_tokenizer.char_to_token_span", "torch.tensor.index", "aspects_pos.extend", "range", "torch.cat", "len", "len", "len", "len", "len", "len", "range", "torch.cat", "torch.tensor", "torch.tensor", "max", "senti_model_input_ids_list.append", "senti_model_segment_ids_list.append", "senti_model_mask_ids_list.append", "torch.no_grad", "range", "len", "len", "example[].append", "len", "torch.tensor.index", "torch.unsqueeze", "torch.arange", "range", "range", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.stack", "torch.stack", "senti_classifier_logits_list.append", "len", "torch.tensor", "torch.tensor", "torch.arange", "torch.tensor", "torch.tensor", "len", "len", "len", "RoBERTaSpanCLS.from_pretrained.", "int", "int", "distribution.detach().cpu().numpy().tolist", "torch.tensor", "torch.tensor", "torch.tensor", "distribution.detach().cpu().numpy", "int", "distribution.detach().cpu", "distribution.detach"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.get_raw_datasets", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.split_to_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.parse_tk_idx_list_wrt_char", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.continue_tokenize_for_wordpiece", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.char_to_token_span"], ["", "", "def", "get_distillation_dataset", "(", "args", ",", "config", ",", "tokenizer", ",", "dataset_name", ")", ":", "\n", "    ", "senti_classifier", "=", "RoBERTaSpanCLS", ".", "from_pretrained", "(", "args", ".", "phrase_sentiment_model_path", ",", "\n", "config", "=", "config", ")", "\n", "senti_classifier", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "sep_token", ",", "cls_token", ",", "pad_token", "=", "tokenizer", ".", "sep_token", ",", "tokenizer", ".", "cls_token", ",", "tokenizer", ".", "pad_token", "\n", "sep_id", ",", "cls_id", ",", "pad_id", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "\n", "[", "sep_token", ",", "cls_token", ",", "pad_token", "]", ",", "\n", ")", "\n", "\n", "train_dataset_raw", ",", "dev_dataset_raw", ",", "test_dataset_raw", "=", "get_raw_datasets", "(", "dataset_name", "+", "\"_wordnet_bias\"", ")", "\n", "save_path", "=", "DATASET2PATH", "[", "dataset_name", "+", "\"_wordnet_bias\"", "]", "\n", "for", "idx", ",", "absa_dataset", "in", "enumerate", "(", "[", "train_dataset_raw", ",", "test_dataset_raw", "]", ")", ":", "\n", "        ", "type", "=", "\"train\"", "if", "idx", "==", "0", "else", "\"test\"", "\n", "\n", "for", "_ex_idx", ",", "example", "in", "enumerate", "(", "tqdm", "(", "absa_dataset", ")", ")", ":", "\n", "            ", "sent_text", "=", "example", "[", "\"sent_text\"", "]", "\n", "example", "[", "\"sent_text\"", "]", "=", "sent_text", ".", "replace", "(", "'\u2019'", ",", "'\\''", ")", "# '\u2019' will make a difficult for the alignment between tokenizer and parser", "\n", "sent_text", "=", "example", "[", "\"sent_text\"", "]", "\n", "sent_tokens", "=", "split_to_token", "(", "tokenizer", ",", "sent_text", ")", "\n", "charidx2tokenidx", "=", "parse_tk_idx_list_wrt_char", "(", "tokenizer", ",", "sent_text", ",", "sent_tokens", ")", "\n", "wp_list", ",", "id_list", ",", "wpidx2tokenidx", "=", "continue_tokenize_for_wordpiece", "(", "tokenizer", ",", "sent_tokens", ")", "\n", "aspects_pos", "=", "[", "]", "\n", "term_mask", "=", "[", "0", "]", "*", "len", "(", "wpidx2tokenidx", ")", "\n", "for", "term_dict", "in", "example", "[", "\"terms\"", "]", ":", "\n", "                ", "from_idx", "=", "term_dict", "[", "\"from\"", "]", "\n", "to_idx", "=", "term_dict", "[", "\"to\"", "]", "\n", "token_from_idx", ",", "token_to_idx", "=", "char_to_token_span", "(", "charidx2tokenidx", ",", "from_idx", ",", "to_idx", ")", "\n", "wp_from_idx", "=", "wpidx2tokenidx", ".", "index", "(", "token_from_idx", ")", "\n", "if", "token_to_idx", ">", "wpidx2tokenidx", "[", "-", "1", "]", ":", "\n", "                    ", "wp_to_idx", "=", "len", "(", "wpidx2tokenidx", ")", "\n", "", "else", ":", "\n", "                    ", "wp_to_idx", "=", "wpidx2tokenidx", ".", "index", "(", "token_to_idx", ")", "\n", "", "aspects_pos", ".", "extend", "(", "[", "wp_from_idx", ",", "wp_to_idx", "]", ")", "# save the aspects' position", "\n", "for", "pos_idx", "in", "range", "(", "wp_from_idx", ",", "wp_to_idx", ")", ":", "\n", "                    ", "term_mask", "[", "pos_idx", "]", "=", "1", "\n", "\n", "", "", "input_ids", "=", "[", "cls_id", "]", "+", "id_list", "+", "[", "sep_id", "]", "\n", "\n", "# provide the sentiment score and wpidx2tokenidx list in train phrase;", "\n", "wpidx2tokenidx", "=", "torch", ".", "tensor", "(", "wpidx2tokenidx", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# prepare for providing wpidx2tokenidx", "\n", "wpidx2tokenidx", "=", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "[", "-", "1", "]", ")", ",", "wpidx2tokenidx", ",", "torch", ".", "tensor", "(", "[", "-", "1", "]", ")", "]", ",", "dim", "=", "0", ")", "+", "1", "\n", "assert", "len", "(", "input_ids", ")", "==", "len", "(", "wpidx2tokenidx", ")", "\n", "\n", "# get the dependency distance between each wordpiece and each aspect, then return a [num_asp, num_wps] tensor", "\n", "\n", "input_ids", "=", "torch", ".", "tensor", "(", "input_ids", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "# Get all possible spans' position.", "\n", "num_wps", "=", "len", "(", "input_ids", ")", "-", "2", "\n", "num_asp", "=", "len", "(", "example", "[", "\"terms\"", "]", ")", "\n", "starts", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "arange", "(", "1", ",", "num_wps", "+", "1", ")", ",", "1", ")", ".", "repeat", "(", "1", ",", "args", ".", "max_span_width", ")", "# [num_wps, max_span_width]", "\n", "ends", "=", "starts", "+", "torch", ".", "arange", "(", "0", ",", "args", ".", "max_span_width", ")", "+", "1", "# add 1 to make a slice containing at least one wordpiece", "\n", "mask", "=", "(", "ends", "<", "(", "num_wps", "+", "2", ")", ")", "\n", "asps_from", "=", "[", "aspects_pos", "[", "_i", "]", "+", "1", "for", "_i", "in", "range", "(", "0", ",", "num_asp", "*", "2", ",", "2", ")", "]", "# The first token is [CLS]", "\n", "asps_to", "=", "[", "aspects_pos", "[", "_i", "]", "+", "1", "for", "_i", "in", "range", "(", "1", ",", "num_asp", "*", "2", ",", "2", ")", "]", "\n", "assert", "len", "(", "asps_from", ")", "==", "len", "(", "asps_to", ")", "\n", "\n", "# Mask the spans do not contain aspect terms", "\n", "for", "_i", "in", "range", "(", "len", "(", "mask", ")", ")", ":", "# num_wps", "\n", "                ", "cur_mask", "=", "mask", "[", "_i", "]", "# [max_span_width]", "\n", "for", "_asp_idx", "in", "range", "(", "0", ",", "num_asp", ")", ":", "\n", "                    ", "tmp_mask", "=", "(", "starts", "[", "_i", "]", ">=", "asps_to", "[", "_asp_idx", "]", ")", "|", "(", "ends", "[", "_i", "]", "<=", "asps_from", "[", "_asp_idx", "]", ")", "\n", "cur_mask", "=", "cur_mask", "&", "tmp_mask", "\n", "", "mask", "[", "_i", "]", "=", "cur_mask", "\n", "", "starts", ",", "ends", "=", "starts", "[", "mask", "]", ",", "ends", "[", "mask", "]", "\n", "\n", "# Make sure the span contain complete token rather than wordPiece", "\n", "cur_wps2tokens", "=", "wpidx2tokenidx", "\n", "mask", "=", "(", "cur_wps2tokens", "[", "starts", "-", "1", "]", "!=", "cur_wps2tokens", "[", "starts", "]", ")", "&", "(", "\n", "cur_wps2tokens", "[", "ends", "-", "1", "]", "!=", "cur_wps2tokens", "[", "ends", "]", ")", "\n", "starts", ",", "ends", "=", "starts", "[", "mask", "]", ",", "ends", "[", "mask", "]", "\n", "\n", "# Get all possible spans' position finished.", "\n", "\n", "# get all possible candidate spans inputs for sentiment classifier", "\n", "num_spans", "=", "len", "(", "starts", ")", "\n", "senti_model_input_ids_list", "=", "[", "]", "\n", "senti_model_segment_ids_list", "=", "[", "]", "\n", "senti_model_mask_ids_list", "=", "[", "]", "\n", "\n", "max_span_len", "=", "0", "\n", "for", "_i", "in", "range", "(", "num_spans", ")", ":", "\n", "                ", "cur_senti_model_input_ids", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "tensor", "(", "[", "input_ids", "[", "0", "]", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "input_ids", "[", "starts", "[", "_i", "]", ":", "ends", "[", "_i", "]", "]", ",", "\n", "torch", ".", "tensor", "(", "[", "input_ids", "[", "-", "1", "]", "]", ",", "dtype", "=", "torch", ".", "long", ")", "]", ")", "\n", "cur_senti_model_segment_ids", "=", "torch", ".", "tensor", "(", "[", "0", "]", "*", "len", "(", "cur_senti_model_input_ids", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "cur_senti_model_mask_ids", "=", "torch", ".", "tensor", "(", "[", "1", "]", "*", "len", "(", "cur_senti_model_input_ids", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "max_span_len", "=", "max", "(", "max_span_len", ",", "len", "(", "cur_senti_model_input_ids", ")", ")", "\n", "\n", "senti_model_input_ids_list", ".", "append", "(", "cur_senti_model_input_ids", ")", "\n", "senti_model_segment_ids_list", ".", "append", "(", "cur_senti_model_segment_ids", ")", "\n", "senti_model_mask_ids_list", ".", "append", "(", "cur_senti_model_mask_ids", ")", "\n", "\n", "", "for", "_i", "in", "range", "(", "num_spans", ")", ":", "\n", "                ", "if", "len", "(", "senti_model_input_ids_list", "[", "_i", "]", ")", "<", "max_span_len", ":", "\n", "                    ", "padding_len", "=", "max_span_len", "-", "len", "(", "senti_model_input_ids_list", "[", "_i", "]", ")", "\n", "senti_model_input_ids_list", "[", "_i", "]", "=", "torch", ".", "cat", "(", "\n", "[", "senti_model_input_ids_list", "[", "_i", "]", ",", "\n", "torch", ".", "tensor", "(", "[", "int", "(", "pad_id", ")", "]", "*", "padding_len", ",", "dtype", "=", "torch", ".", "long", ")", "]", ",", "dim", "=", "0", ")", "\n", "senti_model_mask_ids_list", "[", "_i", "]", "=", "torch", ".", "cat", "(", "\n", "[", "senti_model_mask_ids_list", "[", "_i", "]", ",", "torch", ".", "tensor", "(", "[", "0", "]", "*", "padding_len", ",", "dtype", "=", "torch", ".", "long", ")", "]", ",", "dim", "=", "0", ")", "\n", "senti_model_segment_ids_list", "[", "_i", "]", "=", "torch", ".", "cat", "(", "\n", "[", "senti_model_segment_ids_list", "[", "_i", "]", ",", "torch", ".", "tensor", "(", "[", "0", "]", "*", "padding_len", ",", "dtype", "=", "torch", ".", "long", ")", "]", ",", "\n", "dim", "=", "0", ")", "\n", "\n", "", "", "senti_model_input_ids", "=", "torch", ".", "stack", "(", "senti_model_input_ids_list", ",", "dim", "=", "0", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "senti_model_mask_ids", "=", "torch", ".", "stack", "(", "senti_model_mask_ids_list", ",", "dim", "=", "0", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "senti_classifier_logits_list", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "_mini_batch_size", "=", "128", "\n", "for", "_mini_batch_start", "in", "range", "(", "0", ",", "num_spans", ",", "_mini_batch_size", ")", ":", "\n", "                    ", "if", "num_spans", "<", "_mini_batch_start", "+", "_mini_batch_size", ":", "\n", "                        ", "_mini_batch_end", "=", "num_spans", "\n", "", "else", ":", "\n", "                        ", "_mini_batch_end", "=", "_mini_batch_start", "+", "_mini_batch_size", "\n", "", "senti_input_ids", "=", "senti_model_input_ids", "[", "_mini_batch_start", ":", "_mini_batch_end", "]", "\n", "senti_mask_ids", "=", "senti_model_mask_ids", "[", "_mini_batch_start", ":", "_mini_batch_end", "]", "\n", "senti_classifier_logits", "=", "senti_classifier", "(", "senti_input_ids", ",", "\n", "attention_mask", "=", "senti_mask_ids", ",", "\n", "token_type_ids", "=", "None", ")", "[", "\n", "0", "]", "# RoBERTa do not have token_type_ids)", "\n", "senti_classifier_logits_list", ".", "append", "(", "senti_classifier_logits", ")", "\n", "", "", "senti_classifier_logits", "=", "torch", ".", "cat", "(", "senti_classifier_logits_list", ",", "dim", "=", "0", ")", "\n", "assert", "len", "(", "senti_classifier_logits", ")", "==", "len", "(", "starts", ")", "\n", "\n", "example", "[", "\"spans\"", "]", "=", "[", "]", "\n", "for", "_i", "in", "range", "(", "num_spans", ")", ":", "\n", "                ", "distribution", "=", "senti_classifier_logits", "[", "_i", "]", "\n", "assert", "ends", "[", "_i", "]", "<=", "len", "(", "input_ids", ")", "\n", "example", "[", "\"spans\"", "]", ".", "append", "(", "[", "int", "(", "starts", "[", "_i", "]", ")", ",", "int", "(", "ends", "[", "_i", "]", ")", ",", "distribution", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "]", ")", "\n", "", "", "with", "open", "(", "save_path", "+", "\"/wordnet_bias_distillation_\"", "+", "type", "+", "\".json\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "absa_dataset", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.train": [[210, 289], ["setup_training_step", "setup_opt", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "MovingAverageDict", "model.zero_grad", "tqdm.trange", "set_seed", "SummaryWriter", "len", "int", "tqdm.tqdm", "enumerate", "model.train", "tuple", "train_dataset.batch2feed_dict", "model", "update_wrt_loss", "update_wrt_loss.item", "eval_fn", "tqdm.trange.close", "open", "fp.write", "os.path.join", "train_dataset.batch2feed_dict.pop", "model_update_wrt_gradient", "MovingAverageDict.", "SummaryWriter.add_scalar", "save_model_with_default_name", "os.path.join", "t.to", "logging.info", "save_model_with_default_name", "eval_fn", "tqdm.tqdm.close", "int", "MovingAverageDict.get_val_str", "save_model_with_default_name"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_training_step", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_opt", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.train", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.batch2feed_dict", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.update_wrt_loss", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.TqdmProgressFileReader.close", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.model_update_wrt_gradient", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.save_model_with_default_name", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.save_model_with_default_name", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.TqdmProgressFileReader.close", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.MovingAverageDict.get_val_str", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.save_model_with_default_name"], ["", "", "", "def", "train", "(", "args", ",", "train_dataset", ",", "model", ",", "tokenizer", ",", "eval_dataset", "=", "None", ",", "eval_fn", "=", "None", ")", ":", "\n", "    ", "\"\"\" Train the model \"\"\"", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "tb_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"tensorboard\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "tb_writer", "=", "None", "\n", "\n", "# learning setup", "\n", "", "train_dataloader", "=", "setup_training_step", "(", "\n", "args", ",", "train_dataset", ",", "collate_fn", "=", "train_dataset", ".", "data_collate_fn", ")", "\n", "model", ",", "optimizer", ",", "scheduler", "=", "setup_opt", "(", "args", ",", "model", ")", "\n", "\n", "# Train!", "\n", "logger", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "train_dataset", ")", ")", "\n", "logger", ".", "info", "(", "\"  Num Epochs = %d\"", ",", "args", ".", "num_train_epochs", ")", "\n", "logger", ".", "info", "(", "\"  Gradient Accumulation steps = %d\"", ",", "args", ".", "gradient_accumulation_steps", ")", "\n", "logger", ".", "info", "(", "\"  Total optimization steps = %d\"", ",", "args", ".", "t_total", ")", "\n", "\n", "global_step", "=", "0", "\n", "best_accu", "=", "-", "1e5", "\n", "ma_dict", "=", "MovingAverageDict", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "train_iterator", "=", "trange", "(", "int", "(", "args", ".", "num_train_epochs", ")", ",", "desc", "=", "\"Epoch\"", ",", "disable", "=", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ")", "\n", "set_seed", "(", "args", ")", "# Added here for reproductibility (even between python 2 and 3)", "\n", "for", "_idx_epoch", "in", "train_iterator", ":", "\n", "        ", "epoch_iterator", "=", "tqdm", "(", "train_dataloader", ",", "\n", "desc", "=", "\"Iteration-{}({})\"", ".", "format", "(", "_idx_epoch", ",", "args", ".", "gradient_accumulation_steps", ")", ",", "\n", "disable", "=", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ")", "\n", "step_loss", "=", "0", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "epoch_iterator", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "batch", "=", "tuple", "(", "t", ".", "to", "(", "args", ".", "device", ")", "for", "t", "in", "batch", ")", "\n", "# assert len(batch) == 5", "\n", "feed_dict", "=", "train_dataset", ".", "batch2feed_dict", "(", "batch", ")", "\n", "if", "args", ".", "model_class", "==", "\"roberta\"", ":", "\n", "                ", "feed_dict", ".", "pop", "(", "\"token_type_ids\"", ")", "\n", "", "outputs", "=", "model", "(", "**", "feed_dict", ")", "\n", "loss", "=", "outputs", "[", "0", "]", "# model outputs are always tuple in pytorch-transformers (see doc)", "\n", "loss", "=", "update_wrt_loss", "(", "args", ",", "model", ",", "optimizer", ",", "loss", ")", "\n", "\n", "step_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "(", "step", "+", "1", ")", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                ", "model_update_wrt_gradient", "(", "args", ",", "model", ",", "optimizer", ",", "scheduler", ")", "\n", "global_step", "+=", "1", "\n", "# update loss for logging", "\n", "ma_dict", "(", "{", "\"loss\"", ":", "step_loss", "}", ")", "\n", "tb_writer", ".", "add_scalar", "(", "\"training_loss\"", ",", "step_loss", ",", "global_step", ")", "\n", "step_loss", "=", "0.", "\n", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "and", "args", ".", "logging_steps", ">", "0", "and", "global_step", "%", "args", ".", "logging_steps", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "ma_dict", ".", "get_val_str", "(", ")", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "and", "args", ".", "save_steps", ">", "0", "and", "global_step", "%", "args", ".", "save_steps", "==", "0", ":", "\n", "                    ", "save_model_with_default_name", "(", "args", ".", "output_dir", ",", "model", ",", "tokenizer", ",", "args", ")", "\n", "\n", "", "if", "eval_dataset", "is", "not", "None", "and", "args", ".", "eval_steps", ">", "0", "and", "global_step", "%", "args", ".", "eval_steps", "==", "0", ":", "\n", "                    ", "cur_accu", "=", "eval_fn", "(", "args", ",", "eval_dataset", ",", "model", ",", "tokenizer", ",", "global_step", "=", "global_step", ",", "tb_writer", "=", "tb_writer", ")", "\n", "if", "cur_accu", ">", "best_accu", ":", "\n", "                        ", "best_accu", "=", "cur_accu", "\n", "save_model_with_default_name", "(", "args", ".", "output_dir", ",", "model", ",", "tokenizer", ",", "args_to_save", "=", "args", ")", "\n", "\n", "", "", "if", "args", ".", "max_steps", ">", "0", "and", "global_step", ">", "args", ".", "max_steps", ":", "\n", "                    ", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "# evaluation each epoch or last epoch", "\n", "", "", "", "if", "(", "_idx_epoch", "==", "int", "(", "args", ".", "num_train_epochs", ")", "-", "1", ")", "or", "(", "eval_dataset", "is", "not", "None", "and", "args", ".", "eval_steps", "<=", "0", ")", ":", "\n", "            ", "cur_accu", "=", "eval_fn", "(", "args", ",", "eval_dataset", ",", "model", ",", "tokenizer", ",", "global_step", "=", "global_step", ",", "tb_writer", "=", "tb_writer", ")", "\n", "if", "cur_accu", ">", "best_accu", ":", "\n", "                ", "best_accu", "=", "cur_accu", "\n", "save_model_with_default_name", "(", "args", ".", "output_dir", ",", "model", ",", "tokenizer", ",", "args_to_save", "=", "args", ")", "\n", "\n", "", "", "if", "args", ".", "max_steps", ">", "0", "and", "global_step", ">", "args", ".", "max_steps", ":", "\n", "            ", "train_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"best_eval_results.txt\"", ")", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"{}{}\"", ".", "format", "(", "best_accu", ",", "os", ".", "linesep", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.evaluate": [[290, 401], ["logging.info", "logging.info", "logging.info", "setup_eval_step", "model.eval", "tqdm.tqdm", "np.concatenate().astype", "np.concatenate", "np.argmax", "np.mean", "sklearn.metrics.recall_score", "sklearn.metrics.precision_score", "sklearn.metrics.f1_score", "os.path.join", "len", "tuple", "eval_dataset.batch2feed_dict", "tmp_eval_loss.mean().item", "labels_list.append", "confs_list.append", "feed_dict[].size", "open", "logging.info", "writer.write", "sorted", "writer.write", "pandas.DataFrame", "pd.DataFrame.to_csv", "eval_dataset.batch2feed_dict.pop", "torch.no_grad", "model", "torch.softmax", "feed_dict[].detach().cpu().numpy", "torch.softmax.detach().cpu().numpy", "np.concatenate", "result.keys", "logging.info", "writer.write", "sent_id_list.append", "sent_text_list.append", "term_list.append", "len", "os.path.join", "_t.to", "tmp_eval_loss.mean", "str", "tb_writer.add_scalar", "np.argmax", "feed_dict[].detach().cpu", "torch.softmax.detach().cpu", "np.argmax", "str", "np.argmax", "feed_dict[].detach", "torch.softmax.detach"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_eval_step", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.batch2feed_dict"], ["", "", "", "def", "evaluate", "(", "\n", "args", ",", "eval_dataset", ",", "model", ",", "tokenizer", ",", "global_step", ",", "\n", "is_saving_pred", "=", "False", ",", "verbose", "=", "False", ",", "file_prefix", "=", "\"\"", ",", "tb_writer", "=", "None", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"***** Running evaluation at {}*****\"", ".", "format", "(", "global_step", ")", ")", "\n", "logging", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "eval_dataset", ")", ")", "\n", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "eval_batch_size", ")", "\n", "eval_dataloader", "=", "setup_eval_step", "(", "\n", "args", ",", "eval_dataset", ",", "collate_fn", "=", "eval_dataset", ".", "data_collate_fn", ",", ")", "\n", "model", ".", "eval", "(", ")", "\n", "eval_loss", ",", "eval_accuracy", "=", "0", ",", "0", "\n", "nb_eval_steps", ",", "nb_eval_examples", "=", "0", ",", "0", "\n", "\n", "_idx_ex", "=", "0", "\n", "labels_list", "=", "[", "]", "\n", "confs_list", "=", "[", "]", "\n", "for", "batch", "in", "tqdm", "(", "eval_dataloader", ",", "desc", "=", "\"Evaluating\"", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "_t", ".", "to", "(", "args", ".", "device", ")", "for", "_t", "in", "batch", ")", "\n", "feed_dict", "=", "eval_dataset", ".", "batch2feed_dict", "(", "batch", ")", "\n", "if", "args", ".", "model_class", "==", "\"roberta\"", ":", "\n", "            ", "feed_dict", ".", "pop", "(", "\"token_type_ids\"", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "outputs", "=", "model", "(", "**", "feed_dict", ")", "\n", "tmp_eval_loss", ",", "confs", "=", "outputs", "[", ":", "2", "]", "\n", "confs", "=", "torch", ".", "softmax", "(", "confs", ",", "dim", "=", "-", "1", ")", "\n", "# tmp_eval_loss, confs1, confs2 = outputs[:3]", "\n", "# confs1 = torch.softmax(confs1, dim=-1)", "\n", "# confs2 = torch.softmax(confs2, dim=-1)", "\n", "# confs = confs1.clone()", "\n", "# # ---- combination 1 -----", "\n", "# confs[:, 0] = confs1[:, 0] * confs2[:, 0]", "\n", "# confs[:, 1] = confs1[:, 1] * confs2[:, 1]", "\n", "# confs[:, 2] = confs1[:, 2] * confs2[:, 0]", "\n", "# ---- combination 2 -----", "\n", "# for _i, (p_n, neutral) in enumerate(confs2):", "\n", "#     if neutral > p_n:", "\n", "#         confs[_i][1] = 1", "\n", "\n", "", "eval_loss", "+=", "tmp_eval_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "labels_list", ".", "append", "(", "feed_dict", "[", "\"labels\"", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "confs_list", ".", "append", "(", "confs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "nb_eval_examples", "+=", "feed_dict", "[", "\"input_ids\"", "]", ".", "size", "(", "0", ")", "\n", "nb_eval_steps", "+=", "1", "\n", "", "eval_loss", "=", "eval_loss", "/", "nb_eval_steps", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels_list", ",", "axis", "=", "0", ")", ".", "astype", "(", "\"int64\"", ")", "\n", "confs", "=", "np", ".", "concatenate", "(", "confs_list", ",", "axis", "=", "0", ")", "\n", "\n", "preds", "=", "np", ".", "argmax", "(", "confs", ",", "axis", "=", "-", "1", ")", "# (confs[:,1] > thresh).astype(\"int64\")", "\n", "accu", "=", "np", ".", "mean", "(", "labels", "==", "preds", ")", "\n", "\n", "# accu = metrics.accuracy_score(labels, preds)", "\n", "import", "sklearn", "\n", "recall", "=", "sklearn", ".", "metrics", ".", "recall_score", "(", "labels", ",", "preds", ",", "average", "=", "\"macro\"", ")", "\n", "precision", "=", "sklearn", ".", "metrics", ".", "precision_score", "(", "labels", ",", "preds", ",", "average", "=", "\"macro\"", ")", "\n", "f1", "=", "sklearn", ".", "metrics", ".", "f1_score", "(", "labels", ",", "preds", ",", "average", "=", "\"macro\"", ")", "\n", "\n", "result", "=", "{", "\n", "'eval_loss'", ":", "eval_loss", ",", "\n", "\"accuracy\"", ":", "accu", ",", "\n", "\"recall\"", ":", "recall", ",", "\n", "\"precision\"", ":", "precision", ",", "\n", "\"f1\"", ":", "f1", "\n", "}", "\n", "output_eval_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "file_prefix", "+", "\"eval_results.txt\"", ")", "\n", "with", "open", "(", "output_eval_file", ",", "\"a\"", ")", "as", "writer", ":", "\n", "        ", "logging", ".", "info", "(", "\"***** Eval results at {}*****\"", ".", "format", "(", "global_step", ")", ")", "\n", "writer", ".", "write", "(", "\"***** Eval results at {}*****\\n\"", ".", "format", "(", "global_step", ")", ")", "\n", "for", "key", "in", "sorted", "(", "result", ".", "keys", "(", ")", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"  %s = %s\"", ",", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", "\n", "writer", ".", "write", "(", "\"%s = %s\\n\"", "%", "(", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", ")", "\n", "if", "tb_writer", "is", "not", "None", "and", "global_step", "is", "not", "None", ":", "\n", "                ", "tb_writer", ".", "add_scalar", "(", "key", ",", "result", "[", "key", "]", ",", "global_step", ")", "\n", "", "", "writer", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "if", "is_saving_pred", ":", "\n", "        ", "sent_id_list", "=", "[", "]", "\n", "sent_text_list", "=", "[", "]", "\n", "term_list", "=", "[", "]", "\n", "for", "absa_example", "in", "eval_dataset", ".", "example_list", ":", "\n", "            ", "sent_id_list", ".", "append", "(", "absa_example", "[", "\"sent_id\"", "]", ")", "\n", "sent_text_list", ".", "append", "(", "absa_example", "[", "\"sent_text\"", "]", ")", "\n", "term_list", ".", "append", "(", "absa_example", "[", "\"terms\"", "]", "[", "0", "]", "[", "\"term\"", "]", "or", "\"\"", ")", "\n", "\n", "", "assert", "len", "(", "sent_id_list", ")", "==", "labels", ".", "shape", "[", "0", "]", "==", "confs", ".", "shape", "[", "0", "]", "\n", "if", "args", ".", "nums_label", "==", "3", ":", "\n", "            ", "pred_data", "=", "{", "\n", "\"sent_id\"", ":", "sent_id_list", ",", "\n", "\"sent_text\"", ":", "sent_text_list", ",", "\n", "\"term\"", ":", "term_list", ",", "\n", "\"label\"", ":", "labels", ",", "\n", "\"negative\"", ":", "confs", "[", ":", ",", "0", "]", ",", "\n", "\"neutral\"", ":", "confs", "[", ":", ",", "1", "]", ",", "\n", "\"positive\"", ":", "confs", "[", ":", ",", "2", "]", ",", "\n", "\"prediction\"", ":", "np", ".", "argmax", "(", "confs", ",", "axis", "=", "1", ")", ",", "\n", "}", "\n", "", "elif", "args", ".", "nums_label", "==", "2", ":", "\n", "            ", "pred_data", "=", "{", "\n", "\"sent_id\"", ":", "sent_id_list", ",", "\n", "\"sent_text\"", ":", "sent_text_list", ",", "\n", "\"term\"", ":", "term_list", ",", "\n", "\"label\"", ":", "labels", ",", "\n", "\"pos&neg\"", ":", "confs", "[", ":", ",", "0", "]", ",", "\n", "\"neutral\"", ":", "confs", "[", ":", ",", "1", "]", ",", "\n", "\"prediction\"", ":", "np", ".", "argmax", "(", "confs", ",", "axis", "=", "1", ")", ",", "\n", "\"correct\"", ":", "labels", "==", "np", ".", "argmax", "(", "confs", ",", "axis", "=", "1", ")", "\n", "}", "\n", "", "pred_data_df", "=", "pd", ".", "DataFrame", "(", "pred_data", ")", "\n", "pred_data_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "file_prefix", "+", "\"pred_data.csv\"", ")", ")", "\n", "\n", "", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.get_span": [[404, 415], ["peach.utils_tokenizer.split_to_token", "peach.utils_tokenizer.parse_tk_idx_list_wrt_char", "peach.utils_tokenizer.continue_tokenize_for_wordpiece", "peach.utils_tokenizer.parse_tk_idx_list_wrt_char.index", "enumerate"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.split_to_token", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.parse_tk_idx_list_wrt_char", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.utils_tokenizer.continue_tokenize_for_wordpiece"], ["", "def", "get_span", "(", "tokenizer", ",", "sent_text", ",", "wps_start", ",", "wps_end", ")", ":", "\n", "    ", "if", "wps_start", "==", "-", "1", ":", "\n", "        ", "return", "\"dummy span\"", "\n", "", "sent_tokens", "=", "split_to_token", "(", "tokenizer", ",", "sent_text", ")", "\n", "charidx2tokenidx", "=", "parse_tk_idx_list_wrt_char", "(", "tokenizer", ",", "sent_text", ",", "sent_tokens", ")", "\n", "wp_list", ",", "id_list", ",", "wpidx2tokenidx", "=", "continue_tokenize_for_wordpiece", "(", "tokenizer", ",", "sent_tokens", ")", "\n", "char_start", "=", "charidx2tokenidx", ".", "index", "(", "wpidx2tokenidx", "[", "wps_start", "]", ")", "\n", "# wps_end = wpidx2tokenidx[-1] if wps_end > wpidx2tokenidx[-1] else wps_end", "\n", "wps_end", "-=", "1", "\n", "char_end", "=", "[", "idx", "for", "(", "idx", ",", "value", ")", "in", "enumerate", "(", "charidx2tokenidx", ")", "if", "value", "==", "wpidx2tokenidx", "[", "wps_end", "]", "]", "[", "-", "1", "]", "\n", "return", "sent_text", "[", "char_start", ":", "char_end", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.evaluate_multi": [[416, 711], ["logging.info", "logging.info", "logging.info", "setup_eval_step", "model.eval", "tqdm.tqdm", "np.concatenate().astype", "np.concatenate", "np.argmax", "np.mean", "sklearn.metrics.recall_score", "sklearn.metrics.precision_score", "sklearn.metrics.f1_score", "os.path.join", "len", "tuple", "eval_dataset.batch2feed_dict_multi", "tmp_eval_loss.mean().item", "labels_list.append", "confs_list.append", "feed_dict[].size", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.concatenate", "np.argmax", "np.concatenate().astype", "np.concatenate", "np.argmax", "pandas.DataFrame", "pd.DataFrame.to_csv", "pandas.DataFrame", "pd.DataFrame.to_csv", "enumerate", "np.argmax", "range", "pandas.DataFrame", "pd.DataFrame.to_csv", "open", "logging.info", "writer.write", "sorted", "writer.write", "enumerate", "eval_dataset.batch2feed_dict_multi.pop", "torch.no_grad", "torch.softmax", "tmp_cls_loss.mean().item", "tmp_disc_eval_loss.mean().item", "tmp_adv_loss.mean().item", "np.concatenate().astype.detach().cpu().numpy", "torch.softmax.detach().cpu().numpy", "bias_labels_list.append", "disc_confs_list.append", "cls_confs_list.append", "span_start_idx_list.append", "span_end_idx_list.append", "span_atten_weights_list.append", "span_total_scores_list.append", "span_senti_scores_list.append", "span_depend_scores_list.append", "np.concatenate", "len", "np.argmax", "os.path.join", "len", "os.path.join", "np.mean", "sklearn.metrics.recall_score", "sklearn.metrics.precision_score", "sklearn.metrics.f1_score", "os.path.join", "len", "os.path.join", "result.keys", "logging.info", "writer.write", "absa_train.char_evaluate_interpretable", "_t.to", "model.encoder_forward", "torch.softmax", "torch.softmax", "tmp_eval_loss.mean", "tmp_cls_loss.mean().item", "tmp_disc_eval_loss.mean().item", "tmp_adv_loss.mean().item", "tmp_kl_loss.mean().item", "np.concatenate().astype.detach().cpu().numpy", "torch.softmax.detach().cpu().numpy", "torch.softmax.detach().cpu().numpy", "np.concatenate.detach().cpu().numpy", "np.concatenate.detach().cpu().numpy", "np.concatenate.detach().cpu().numpy", "np.concatenate.detach().cpu().numpy", "np.concatenate.detach().cpu().numpy", "np.concatenate.detach().cpu().numpy", "np.concatenate", "sent_id_list.append", "sent_text_list.append", "term_list.append", "sent_id_list.append", "sent_text_list.append", "term_list.append", "open", "logging.info", "writer.write", "writer.write", "writer.write", "writer.write", "writer.write", "sent_id_list.append", "sent_text_list.append", "term_list.append", "range", "str", "tb_writer.add_scalar", "model.get_forward_data", "model.get_forward_data", "model.discriminator_forward", "model.encoder_forward", "model.encoder_forward", "torch.softmax", "torch.softmax", "tmp_cls_loss.mean", "tmp_disc_eval_loss.mean", "tmp_adv_loss.mean", "np.concatenate().astype.detach().cpu", "torch.softmax.detach().cpu", "depend_span_list.append", "range", "span.strip", "model.get_forward_data", "model.get_forward_data", "model.discriminator_forward", "model.encoder_forward", "model.encoder_forward", "torch.softmax", "torch.softmax", "model", "tmp_cls_loss.mean", "tmp_disc_eval_loss.mean", "tmp_adv_loss.mean", "tmp_kl_loss.mean", "np.concatenate().astype.detach().cpu", "torch.softmax.detach().cpu", "torch.softmax.detach().cpu", "np.concatenate.detach().cpu", "np.concatenate.detach().cpu", "np.concatenate.detach().cpu", "np.concatenate.detach().cpu", "np.concatenate.detach().cpu", "np.concatenate.detach().cpu", "absa_train.get_span", "str", "len", "str", "str", "str", "str", "str", "model.get_forward_data", "model.get_forward_data", "model.discriminator_forward", "model.encoder_forward", "np.concatenate().astype.detach", "torch.softmax.detach", "str", "str", "str", "str", "np.concatenate().astype.detach", "torch.softmax.detach", "torch.softmax.detach", "np.concatenate.detach", "np.concatenate.detach", "np.concatenate.detach", "np.concatenate.detach", "np.concatenate.detach", "np.concatenate.detach"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_eval_step", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.batch2feed_dict_multi", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.char_evaluate_interpretable", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.encoder_forward", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.get_forward_data", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.get_forward_data", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.discriminator_forward", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.encoder_forward", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.encoder_forward", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.get_forward_data", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.get_forward_data", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.discriminator_forward", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.encoder_forward", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.encoder_forward", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.get_span", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.get_forward_data", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.get_forward_data", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.discriminator_forward", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.encoder_forward"], ["", "def", "evaluate_multi", "(", "\n", "args", ",", "eval_dataset", ",", "model", ",", "tokenizer", ",", "global_step", ",", "\n", "is_saving_pred", "=", "False", ",", "is_saving_disc_pred", "=", "True", ",", "verbose", "=", "False", ",", "file_prefix", "=", "\"\"", ",", "tb_writer", "=", "None", ",", "loss_figure", "=", "False", ")", ":", "\n", "    ", "logging", ".", "info", "(", "\"***** Running evaluation at {}*****\"", ".", "format", "(", "global_step", ")", ")", "\n", "logging", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "eval_dataset", ")", ")", "\n", "logging", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "eval_batch_size", ")", "\n", "eval_dataloader", "=", "setup_eval_step", "(", "\n", "args", ",", "eval_dataset", ",", "collate_fn", "=", "eval_dataset", ".", "data_collate_fn_multi", ")", "\n", "model", ".", "eval", "(", ")", "\n", "eval_loss", ",", "eval_accuracy", "=", "0", ",", "0", "\n", "cls_eval_loss", ",", "disc_eval_loss", ",", "adv_eval_loss", ",", "kl_eval_loss", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "nb_eval_steps", ",", "nb_eval_examples", "=", "0", ",", "0", "\n", "\n", "_idx_ex", "=", "0", "\n", "labels_list", "=", "[", "]", "\n", "confs_list", "=", "[", "]", "\n", "bias_labels_list", "=", "[", "]", "\n", "disc_confs_list", "=", "[", "]", "\n", "cls_confs_list", "=", "[", "]", "\n", "span_start_idx_list", ",", "span_end_idx_list", ",", "span_atten_weights_list", ",", "span_total_scores_list", ",", "span_senti_scores_list", ",", "span_depend_scores_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "# do evaluation", "\n", "for", "batch", "in", "tqdm", "(", "eval_dataloader", ",", "desc", "=", "\"Evaluating\"", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "_t", ".", "to", "(", "args", ".", "device", ")", "for", "_t", "in", "batch", ")", "\n", "feed_dict", "=", "eval_dataset", ".", "batch2feed_dict_multi", "(", "batch", ",", "concat_way", "=", "args", ".", "concat_way", ")", "\n", "if", "args", ".", "model_class", "==", "\"roberta\"", ":", "\n", "            ", "feed_dict", ".", "pop", "(", "\"token_type_ids\"", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "concat_way", "==", "'adv'", ":", "\n", "                ", "if", "args", ".", "save_spans_info", ":", "\n", "                    ", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "bias_labels", ",", "span_start_idx", ",", "span_end_idx", ",", "span_atten_weights", ",", "span_total_scores", ",", "span_senti_scores", ",", "span_depend_scores", "=", "model", ".", "get_forward_data", "(", "**", "feed_dict", ")", "\n", "", "else", ":", "\n", "                    ", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "bias_labels", "=", "model", ".", "get_forward_data", "(", "**", "feed_dict", ")", "\n", "", "tmp_eval_loss", ",", "confs", ",", "labels", ",", "tmp_cls_loss", ",", "tmp_adv_loss", "=", "model", ".", "encoder_forward", "(", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ")", "\n", "tmp_disc_eval_loss", ",", "disc_confs", "=", "model", ".", "discriminator_forward", "(", "pure_asp_embs", ",", "bias_labels", ")", "[", ":", "2", "]", "\n", "disc_confs", "=", "torch", ".", "softmax", "(", "disc_confs", ",", "dim", "=", "-", "1", ")", "\n", "_", ",", "cls_confs", ",", "_", "=", "model", ".", "encoder_forward", "(", "pure_asp_embs", ",", "labels", ",", "pure_asp_embs", ")", "[", ":", "3", "]", "\n", "cls_confs", "=", "torch", ".", "softmax", "(", "cls_confs", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "args", ".", "concat_way", "==", "'opinion'", ":", "\n", "                ", "if", "args", ".", "save_spans_info", ":", "\n", "                    ", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "bias_labels", ",", "span_start_idx", ",", "span_end_idx", ",", "span_atten_weights", ",", "span_total_scores", ",", "span_senti_scores", ",", "span_depend_scores", ",", "gold_loss", "=", "model", ".", "get_forward_data", "(", "**", "feed_dict", ")", "\n", "", "else", ":", "\n", "                    ", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "bias_labels", "=", "model", ".", "get_forward_data", "(", "**", "feed_dict", ")", "\n", "", "tmp_eval_loss", ",", "confs", ",", "labels", ",", "tmp_cls_loss", ",", "tmp_adv_loss", ",", "tmp_gold_loss", "=", "model", ".", "encoder_forward", "(", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "gold_loss", ")", "\n", "tmp_disc_eval_loss", ",", "disc_confs", "=", "model", ".", "discriminator_forward", "(", "pure_asp_embs", ",", "bias_labels", ")", "[", ":", "2", "]", "\n", "disc_confs", "=", "torch", ".", "softmax", "(", "disc_confs", ",", "dim", "=", "-", "1", ")", "\n", "_", ",", "cls_confs", ",", "_", "=", "model", ".", "encoder_forward", "(", "pure_asp_embs", ",", "labels", ",", "pure_asp_embs", ",", "gold_loss", ")", "[", ":", "3", "]", "\n", "cls_confs", "=", "torch", ".", "softmax", "(", "cls_confs", ",", "dim", "=", "-", "1", ")", "\n", "", "elif", "args", ".", "concat_way", "==", "\"adv_distillation\"", "or", "args", ".", "concat_way", "==", "'adv_supervision'", "or", "args", ".", "concat_way", "==", "\"adv_supervision_treespan\"", ":", "\n", "                ", "if", "args", ".", "save_spans_info", ":", "\n", "                    ", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "bias_labels", ",", "kl_loss", ",", "span_start_idx", ",", "span_end_idx", ",", "span_atten_weights", ",", "span_total_scores", ",", "span_senti_scores", ",", "span_depend_scores", "=", "model", ".", "get_forward_data", "(", "**", "feed_dict", ")", "\n", "", "else", ":", "\n", "                    ", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "bias_labels", "=", "model", ".", "get_forward_data", "(", "**", "feed_dict", ")", "\n", "", "tmp_eval_loss", ",", "confs", ",", "labels", ",", "tmp_cls_loss", ",", "tmp_adv_loss", ",", "tmp_kl_loss", "=", "model", ".", "encoder_forward", "(", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "kl_loss", ",", "bias_labels", ")", "\n", "tmp_disc_eval_loss", ",", "disc_confs", "=", "model", ".", "discriminator_forward", "(", "pure_asp_embs", ",", "bias_labels", ")", "[", ":", "2", "]", "\n", "disc_confs", "=", "torch", ".", "softmax", "(", "disc_confs", ",", "dim", "=", "-", "1", ")", "\n", "_", ",", "cls_confs", ",", "_", "=", "model", ".", "encoder_forward", "(", "pure_asp_embs", ",", "labels", ",", "pure_asp_embs", ",", "kl_loss", ",", "bias_labels", ")", "[", ":", "3", "]", "\n", "cls_confs", "=", "torch", ".", "softmax", "(", "cls_confs", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "outputs", "=", "model", "(", "**", "feed_dict", ")", "\n", "\n", "", "if", "args", ".", "save_spans_info", ":", "\n", "# tmp_eval_loss, confs, labels, span_start_idx, span_end_idx, span_atten_weights, span_total_scores, span_senti_scores, span_depend_scores = outputs", "\n", "                ", "if", "args", ".", "concat_way", "==", "\"neu\"", ":", "\n", "                    ", "tmp_eval_loss", ",", "confs", ",", "labels", ",", "cls_loss", ",", "adv_loss", ",", "disc_loss", ",", "span_start_idx", ",", "span_end_idx", ",", "span_atten_weights", ",", "span_total_scores", ",", "span_senti_scores", ",", "span_depend_scores", "=", "outputs", "\n", "", "elif", "args", ".", "concat_way", "==", "\"hoi\"", ":", "\n", "                    ", "tmp_eval_loss", ",", "confs", ",", "labels", ",", "cls_loss", ",", "pure_cls_loss", ",", "span_start_idx", ",", "span_end_idx", ",", "span_atten_weights", ",", "span_total_scores", ",", "span_senti_scores", ",", "span_depend_scores", "=", "outputs", "\n", "", "", "else", ":", "\n", "                ", "tmp_eval_loss", ",", "confs", ",", "labels", "=", "outputs", "[", ":", "3", "]", "\n", "", "confs", "=", "torch", ".", "softmax", "(", "confs", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "eval_loss", "+=", "tmp_eval_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "if", "args", ".", "concat_way", "==", "\"adv\"", "or", "args", ".", "concat_way", "==", "'opinion'", ":", "\n", "            ", "cls_eval_loss", "+=", "tmp_cls_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "disc_eval_loss", "+=", "tmp_disc_eval_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "adv_eval_loss", "+=", "tmp_adv_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "elif", "args", ".", "concat_way", "==", "\"adv_distillation\"", "or", "args", ".", "concat_way", "==", "'adv_supervision'", "or", "args", ".", "concat_way", "==", "\"adv_supervision_treespan\"", ":", "\n", "            ", "cls_eval_loss", "+=", "tmp_cls_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "disc_eval_loss", "+=", "tmp_disc_eval_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "adv_eval_loss", "+=", "tmp_adv_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "kl_eval_loss", "+=", "tmp_kl_loss", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "labels_list", ".", "append", "(", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "confs_list", ".", "append", "(", "confs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "if", "args", ".", "concat_way", "==", "'adv'", "or", "args", ".", "concat_way", "==", "'opinion'", "or", "args", ".", "concat_way", "==", "\"adv_distillation\"", "or", "args", ".", "concat_way", "==", "'adv_supervision'", "or", "args", ".", "concat_way", "==", "\"adv_supervision_treespan\"", ":", "\n", "            ", "bias_labels_list", ".", "append", "(", "bias_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "disc_confs_list", ".", "append", "(", "disc_confs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "cls_confs_list", ".", "append", "(", "cls_confs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "if", "args", ".", "save_spans_info", ":", "\n", "            ", "span_start_idx_list", ".", "append", "(", "span_start_idx", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "span_end_idx_list", ".", "append", "(", "span_end_idx", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "span_atten_weights_list", ".", "append", "(", "span_atten_weights", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "span_total_scores_list", ".", "append", "(", "span_total_scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "span_senti_scores_list", ".", "append", "(", "span_senti_scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "span_depend_scores_list", ".", "append", "(", "span_depend_scores", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "nb_eval_examples", "+=", "feed_dict", "[", "\"input_ids\"", "]", ".", "size", "(", "0", ")", "\n", "nb_eval_steps", "+=", "1", "\n", "\n", "\n", "\n", "", "eval_loss", "=", "eval_loss", "/", "nb_eval_steps", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels_list", ",", "axis", "=", "0", ")", ".", "astype", "(", "\"int64\"", ")", "\n", "confs", "=", "np", ".", "concatenate", "(", "confs_list", ",", "axis", "=", "0", ")", "\n", "\n", "if", "args", ".", "save_spans_info", ":", "\n", "        ", "span_start_idx", "=", "np", ".", "concatenate", "(", "span_start_idx_list", ",", "axis", "=", "0", ")", "\n", "span_end_idx", "=", "np", ".", "concatenate", "(", "span_end_idx_list", ",", "axis", "=", "0", ")", "\n", "span_atten_weights", "=", "np", ".", "concatenate", "(", "span_atten_weights_list", ",", "axis", "=", "0", ")", "\n", "span_total_scores", "=", "np", ".", "concatenate", "(", "span_total_scores_list", ",", "axis", "=", "0", ")", "\n", "span_senti_scores", "=", "np", ".", "concatenate", "(", "span_senti_scores_list", ",", "axis", "=", "0", ")", "\n", "span_depend_scores", "=", "np", ".", "concatenate", "(", "span_depend_scores_list", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "args", ".", "concat_way", "==", "'adv'", "or", "args", ".", "concat_way", "==", "'opinion'", "or", "args", ".", "concat_way", "==", "\"adv_distillation\"", "or", "args", ".", "concat_way", "==", "'adv_supervision'", "or", "args", ".", "concat_way", "==", "\"adv_supervision_treespan\"", ":", "\n", "# record the eval loss", "\n", "        ", "cls_eval_loss", "=", "cls_eval_loss", "/", "nb_eval_steps", "\n", "disc_eval_loss", "=", "disc_eval_loss", "/", "nb_eval_steps", "\n", "adv_eval_loss", "=", "adv_eval_loss", "/", "nb_eval_steps", "\n", "if", "args", ".", "concat_way", "==", "\"adv_distillation\"", "or", "args", ".", "concat_way", "==", "'adv_supervision'", "or", "args", ".", "concat_way", "==", "\"adv_supervision_treespan\"", ":", "\n", "            ", "kl_eval_loss", "=", "kl_eval_loss", "/", "nb_eval_steps", "\n", "# record the discrimination prediction", "\n", "", "disc_confs", "=", "np", ".", "concatenate", "(", "disc_confs_list", ",", "axis", "=", "0", ")", "\n", "disc_preds", "=", "np", ".", "argmax", "(", "disc_confs", ",", "axis", "=", "-", "1", ")", "# (confs[:,1] > thresh).astype(\"int64\")", "\n", "bias_labels", "=", "np", ".", "concatenate", "(", "bias_labels_list", ",", "axis", "=", "0", ")", ".", "astype", "(", "\"int64\"", ")", "\n", "cls_confs", "=", "np", ".", "concatenate", "(", "cls_confs_list", ",", "axis", "=", "0", ")", "\n", "cls_preds", "=", "np", ".", "argmax", "(", "cls_confs", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "preds", "=", "np", ".", "argmax", "(", "confs", ",", "axis", "=", "-", "1", ")", "# (confs[:,1] > thresh).astype(\"int64\")", "\n", "accu", "=", "np", ".", "mean", "(", "labels", "==", "preds", ")", "\n", "\n", "# accu = metrics.accuracy_score(labels, preds)", "\n", "import", "sklearn", "\n", "recall", "=", "sklearn", ".", "metrics", ".", "recall_score", "(", "labels", ",", "preds", ",", "average", "=", "\"macro\"", ")", "\n", "precision", "=", "sklearn", ".", "metrics", ".", "precision_score", "(", "labels", ",", "preds", ",", "average", "=", "\"macro\"", ")", "\n", "f1", "=", "sklearn", ".", "metrics", ".", "f1_score", "(", "labels", ",", "preds", ",", "average", "=", "\"macro\"", ")", "\n", "\n", "result", "=", "{", "\n", "'eval_loss'", ":", "eval_loss", ",", "\n", "\"accuracy\"", ":", "accu", ",", "\n", "\"recall\"", ":", "recall", ",", "\n", "\"precision\"", ":", "precision", ",", "\n", "\"f1\"", ":", "f1", "\n", "}", "\n", "\n", "if", "args", ".", "concat_way", "==", "'adv'", "or", "args", ".", "concat_way", "==", "'opinion'", "or", "args", ".", "concat_way", "==", "\"adv_distillation\"", "or", "args", ".", "concat_way", "==", "'adv_supervision'", "or", "args", ".", "concat_way", "==", "\"adv_supervision_treespan\"", ":", "\n", "        ", "result", "[", "\"cls_eval_loss\"", "]", "=", "cls_eval_loss", "\n", "result", "[", "\"disc_eval_loss\"", "]", "=", "disc_eval_loss", "\n", "result", "[", "\"adv_eval_loss\"", "]", "=", "adv_eval_loss", "\n", "if", "args", ".", "concat_way", "==", "\"adv_distillation\"", "or", "args", ".", "concat_way", "==", "'adv_supervision'", "or", "args", ".", "concat_way", "==", "\"adv_supervision_treespan\"", ":", "\n", "            ", "result", "[", "\"kl_eval_loss\"", "]", "=", "kl_eval_loss", "\n", "\n", "", "", "if", "is_saving_pred", ":", "\n", "        ", "sent_id_list", "=", "[", "]", "\n", "sent_text_list", "=", "[", "]", "\n", "term_list", "=", "[", "]", "\n", "for", "absa_example", "in", "eval_dataset", ".", "example_list", ":", "\n", "            ", "for", "term_dict", "in", "absa_example", "[", "\"terms\"", "]", ":", "\n", "                ", "sent_id_list", ".", "append", "(", "absa_example", "[", "\"sent_id\"", "]", ")", "\n", "sent_text_list", ".", "append", "(", "absa_example", "[", "\"sent_text\"", "]", ")", "\n", "term_list", ".", "append", "(", "term_dict", "[", "\"term\"", "]", ")", "\n", "\n", "", "", "assert", "len", "(", "sent_id_list", ")", "==", "labels", ".", "shape", "[", "0", "]", "==", "confs", ".", "shape", "[", "0", "]", "\n", "pred_data", "=", "{", "\n", "\"sent_id\"", ":", "sent_id_list", ",", "\n", "\"sent_text\"", ":", "sent_text_list", ",", "\n", "\"term\"", ":", "term_list", ",", "\n", "\"label\"", ":", "labels", ",", "\n", "\"negative\"", ":", "confs", "[", ":", ",", "0", "]", ",", "\n", "\"neutral\"", ":", "confs", "[", ":", ",", "1", "]", ",", "\n", "\"positive\"", ":", "confs", "[", ":", ",", "2", "]", ",", "\n", "\"prediction\"", ":", "np", ".", "argmax", "(", "confs", ",", "axis", "=", "1", ")", ",", "\n", "}", "\n", "pred_data_df", "=", "pd", ".", "DataFrame", "(", "pred_data", ")", "\n", "pred_data_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "file_prefix", "+", "\"pred_data.csv\"", ")", ")", "\n", "\n", "", "if", "is_saving_disc_pred", ":", "\n", "        ", "sent_id_list", "=", "[", "]", "\n", "sent_text_list", "=", "[", "]", "\n", "term_list", "=", "[", "]", "\n", "for", "absa_example", "in", "eval_dataset", ".", "example_list", ":", "\n", "            ", "for", "term_dict", "in", "absa_example", "[", "\"terms\"", "]", ":", "\n", "                ", "sent_id_list", ".", "append", "(", "absa_example", "[", "\"sent_id\"", "]", ")", "\n", "sent_text_list", ".", "append", "(", "absa_example", "[", "\"sent_text\"", "]", ")", "\n", "term_list", ".", "append", "(", "term_dict", "[", "\"term\"", "]", ")", "\n", "\n", "", "", "assert", "len", "(", "sent_id_list", ")", "==", "labels", ".", "shape", "[", "0", "]", "==", "confs", ".", "shape", "[", "0", "]", "\n", "pred_data", "=", "{", "\n", "\"sent_id\"", ":", "sent_id_list", ",", "\n", "\"sent_text\"", ":", "sent_text_list", ",", "\n", "\"term\"", ":", "term_list", ",", "\n", "\"bias_label\"", ":", "bias_labels", ",", "\n", "\"disc_negative\"", ":", "disc_confs", "[", ":", ",", "0", "]", ",", "\n", "\"disc_neutral\"", ":", "disc_confs", "[", ":", ",", "1", "]", ",", "\n", "\"disc_positive\"", ":", "disc_confs", "[", ":", ",", "2", "]", ",", "\n", "\"disc_prediction\"", ":", "disc_preds", ",", "\n", "\"disc_correct\"", ":", "bias_labels", "==", "disc_preds", ",", "\n", "\"labels\"", ":", "labels", ",", "\n", "\"cls_negative\"", ":", "cls_confs", "[", ":", ",", "0", "]", ",", "\n", "\"cls_neutral\"", ":", "cls_confs", "[", ":", ",", "1", "]", ",", "\n", "\"cls_positive\"", ":", "cls_confs", "[", ":", ",", "2", "]", ",", "\n", "\"cls_prediction\"", ":", "cls_preds", ",", "\n", "\"cls_correct\"", ":", "cls_preds", "==", "labels", "\n", "}", "\n", "pred_data_df", "=", "pd", ".", "DataFrame", "(", "pred_data", ")", "\n", "pred_data_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "file_prefix", "+", "\"disc_pred_data.csv\"", ")", ")", "\n", "\n", "if", "file_prefix", "==", "'final_test_'", ":", "\n", "            ", "no_span_accu", "=", "np", ".", "mean", "(", "labels", "==", "cls_preds", ")", "\n", "no_span_recall", "=", "sklearn", ".", "metrics", ".", "recall_score", "(", "labels", ",", "cls_preds", ",", "average", "=", "\"macro\"", ")", "\n", "no_span_precision", "=", "sklearn", ".", "metrics", ".", "precision_score", "(", "labels", ",", "cls_preds", ",", "average", "=", "\"macro\"", ")", "\n", "no_span_f1", "=", "sklearn", ".", "metrics", ".", "f1_score", "(", "labels", ",", "cls_preds", ",", "average", "=", "\"macro\"", ")", "\n", "\n", "no_span_output_eval_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "file_prefix", "+", "\"no_span_results.txt\"", ")", "\n", "with", "open", "(", "no_span_output_eval_file", ",", "\"a\"", ")", "as", "writer", ":", "\n", "                ", "logging", ".", "info", "(", "\"***** Test results at {}*****\"", ".", "format", "(", "global_step", ")", ")", "\n", "writer", ".", "write", "(", "\"%s = %s\\n\"", "%", "(", "\"no_span_accu\"", ",", "str", "(", "no_span_accu", ")", ")", ")", "\n", "writer", ".", "write", "(", "\"%s = %s\\n\"", "%", "(", "\"no_span_precision\"", ",", "str", "(", "no_span_precision", ")", ")", ")", "\n", "writer", ".", "write", "(", "\"%s = %s\\n\"", "%", "(", "\"no_span_recall\"", ",", "str", "(", "no_span_recall", ")", ")", ")", "\n", "writer", ".", "write", "(", "\"%s = %s\\n\"", "%", "(", "\"no_span_f1\"", ",", "str", "(", "no_span_f1", ")", ")", ")", "\n", "writer", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "", "", "if", "args", ".", "save_spans_info", ":", "\n", "        ", "sent_id_list", "=", "[", "]", "\n", "sent_text_list", "=", "[", "]", "\n", "term_list", "=", "[", "]", "\n", "depend_span_list", "=", "[", "]", "\n", "case_idx", "=", "0", "\n", "for", "_idx", ",", "absa_example", "in", "enumerate", "(", "eval_dataset", ".", "example_list", ")", ":", "\n", "            ", "for", "term_dict", "in", "absa_example", "[", "\"terms\"", "]", ":", "\n", "                ", "sent_id_list", ".", "append", "(", "absa_example", "[", "\"sent_id\"", "]", ")", "\n", "sent_text_list", ".", "append", "(", "absa_example", "[", "\"sent_text\"", "]", ")", "\n", "term_list", ".", "append", "(", "term_dict", "[", "\"term\"", "]", ")", "\n", "for", "_i", "in", "range", "(", "args", ".", "top_n", ")", ":", "\n", "                    ", "depend_span_list", ".", "append", "(", "get_span", "(", "tokenizer", ",", "absa_example", "[", "\"sent_text\"", "]", ",", "span_start_idx", "[", "case_idx", "]", "[", "_i", "]", ",", "span_end_idx", "[", "case_idx", "]", "[", "_i", "]", ")", ")", "\n", "", "case_idx", "+=", "1", "\n", "\n", "", "", "assert", "len", "(", "sent_id_list", ")", "==", "labels", ".", "shape", "[", "0", "]", "==", "confs", ".", "shape", "[", "0", "]", "\n", "prediction", "=", "np", ".", "argmax", "(", "confs", ",", "axis", "=", "1", ")", "\n", "pred_data", "=", "{", "\n", "\"sent_id\"", ":", "sent_id_list", ",", "\n", "\"sent_text\"", ":", "sent_text_list", ",", "\n", "\"term\"", ":", "term_list", ",", "\n", "\"label\"", ":", "labels", ",", "\n", "\"negative\"", ":", "confs", "[", ":", ",", "0", "]", ",", "\n", "\"neutral\"", ":", "confs", "[", ":", ",", "1", "]", ",", "\n", "\"positive\"", ":", "confs", "[", ":", ",", "2", "]", ",", "\n", "\"prediction\"", ":", "prediction", ",", "\n", "\"correct\"", ":", "labels", "==", "prediction", ",", "\n", "}", "\n", "\n", "for", "_i", "in", "range", "(", "args", ".", "top_n", ")", ":", "\n", "            ", "pred_data", "[", "\"depend_span_\"", "+", "str", "(", "_i", ")", "]", "=", "[", "depend_span_list", "[", "_i", "+", "_j", "]", "for", "_j", "in", "range", "(", "0", ",", "len", "(", "depend_span_list", ")", ",", "args", ".", "top_n", ")", "]", "\n", "pred_data", "[", "\"atten_weight_\"", "+", "str", "(", "_i", ")", "]", "=", "span_atten_weights", "[", ":", ",", "_i", "]", "\n", "pred_data", "[", "\"total_score_\"", "+", "str", "(", "_i", ")", "]", "=", "span_total_scores", "[", ":", ",", "_i", "]", "\n", "pred_data", "[", "\"senti_score_\"", "+", "str", "(", "_i", ")", "]", "=", "span_senti_scores", "[", ":", ",", "_i", "]", "\n", "pred_data", "[", "\"dependency_score_\"", "+", "str", "(", "_i", ")", "]", "=", "span_depend_scores", "[", ":", ",", "_i", "]", "\n", "\n", "", "pred_data_df", "=", "pd", ".", "DataFrame", "(", "pred_data", ")", "\n", "pred_data_df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "file_prefix", "+", "\"interpretability.csv\"", ")", ")", "\n", "\n", "", "output_eval_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "file_prefix", "+", "\"eval_results.txt\"", ")", "\n", "with", "open", "(", "output_eval_file", ",", "\"a\"", ")", "as", "writer", ":", "\n", "        ", "logging", ".", "info", "(", "\"***** Eval results at {}*****\"", ".", "format", "(", "global_step", ")", ")", "\n", "writer", ".", "write", "(", "\"***** Eval results at {}*****\\n\"", ".", "format", "(", "global_step", ")", ")", "\n", "for", "key", "in", "sorted", "(", "result", ".", "keys", "(", ")", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"  %s = %s\"", ",", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", "\n", "writer", ".", "write", "(", "\"%s = %s\\n\"", "%", "(", "key", ",", "str", "(", "result", "[", "key", "]", ")", ")", ")", "\n", "if", "tb_writer", "is", "not", "None", "and", "global_step", "is", "not", "None", ":", "\n", "                ", "tb_writer", ".", "add_scalar", "(", "key", ",", "result", "[", "key", "]", ",", "global_step", ")", "\n", "", "", "writer", ".", "write", "(", "\"\\n\"", ")", "\n", "\n", "", "if", "args", ".", "eval_interpretable", "and", "file_prefix", "==", "'final_test_'", ":", "\n", "        ", "_i", "=", "0", "\n", "for", "absa_example", "in", "eval_dataset", ".", "example_list", ":", "\n", "            ", "for", "term_dict", "in", "absa_example", "[", "\"terms\"", "]", ":", "\n", "                ", "term_dict", "[", "\"ranked_spans\"", "]", "=", "[", "span", ".", "strip", "(", ")", "for", "span", "in", "depend_span_list", "[", "_i", ":", "_i", "+", "args", ".", "top_n", "]", "]", "\n", "_i", "+=", "args", ".", "top_n", "\n", "\n", "", "", "for", "_absa_idx", ",", "_absa_sample", "in", "enumerate", "(", "eval_dataset", ".", "absa_dataset", ")", ":", "\n", "            ", "for", "_example", "in", "eval_dataset", ".", "example_list", ":", "\n", "                ", "if", "_absa_sample", "[", "\"sent_id\"", "]", "==", "_example", "[", "\"sent_id\"", "]", ":", "\n", "                    ", "eval_dataset", ".", "absa_dataset", "[", "_absa_idx", "]", "=", "_example", "\n", "", "", "", "if", "\"twitter\"", "not", "in", "args", ".", "dataset", ":", "\n", "            ", "char_evaluate_interpretable", "(", "args", ",", "eval_dataset", ".", "absa_dataset", ",", "output_eval_file", ")", "\n", "", "", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.getNumofCommonSubstr": [[712, 730], ["len", "len", "range", "range", "range", "range"], "function", ["None"], ["", "def", "getNumofCommonSubstr", "(", "str1", ",", "str2", ")", ":", "\n", "    ", "lstr1", "=", "len", "(", "str1", ")", "\n", "lstr2", "=", "len", "(", "str2", ")", "\n", "record", "=", "[", "[", "0", "for", "i", "in", "range", "(", "lstr2", "+", "1", ")", "]", "for", "j", "in", "range", "(", "lstr1", "+", "1", ")", "]", "# \u591a\u4e00\u4f4d", "\n", "maxNum", "=", "0", "\n", "p", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "lstr1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "lstr2", ")", ":", "\n", "            ", "if", "str1", "[", "i", "]", "==", "str2", "[", "j", "]", ":", "\n", "# \u76f8\u540c\u5219\u7d2f\u52a0", "\n", "                ", "record", "[", "i", "+", "1", "]", "[", "j", "+", "1", "]", "=", "record", "[", "i", "]", "[", "j", "]", "+", "1", "\n", "if", "record", "[", "i", "+", "1", "]", "[", "j", "+", "1", "]", ">", "maxNum", ":", "\n", "# \u83b7\u53d6\u6700\u5927\u5339\u914d\u957f\u5ea6", "\n", "                    ", "maxNum", "=", "record", "[", "i", "+", "1", "]", "[", "j", "+", "1", "]", "\n", "# \u8bb0\u5f55\u6700\u5927\u5339\u914d\u957f\u5ea6\u7684\u7ec8\u6b62\u4f4d\u7f6e", "\n", "p", "=", "i", "+", "1", "\n", "", "", "", "", "return", "str1", "[", "p", "-", "maxNum", ":", "p", "]", ",", "maxNum", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.char_evaluate_interpretable": [[731, 832], ["absa.absa_dataset.get_raw_datasets", "range", "np.array", "np.array", "np.mean", "np.mean", "np.array", "np.mean", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "args.dataset.split", "len", "len", "np.concatenate", "open", "writer.write", "writer.write", "writer.write", "writer.write", "writer.write", "writer.write", "writer.write", "writer.write", "writer.write", "writer.write", "enumerate", "np.sum", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "list", "len", "range", "np.array.append", "np.array.append", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "term_dict.keys", "tmp_pre.append", "tmp_recall.append", "enumerate", "tmp_pre.append", "tmp_recall.append", "absa_train.getNumofCommonSubstr", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.get_raw_datasets", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.getNumofCommonSubstr"], ["", "def", "char_evaluate_interpretable", "(", "args", ",", "eval_dataset", ",", "output_eval_file", ")", ":", "\n", "    ", "dataset_name", "=", "args", ".", "dataset", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "+", "\"_wordnet_bias\"", "\n", "_", ",", "_", ",", "opinion_set", "=", "get_raw_datasets", "(", "dataset_name", "+", "\"_opinions\"", ")", "\n", "\n", "for", "topn", "in", "[", "1", ",", "3", ",", "5", ",", "10", "]", ":", "\n", "        ", "num_match", "=", "0", "\n", "num_asps", "=", "0", "\n", "num_opinion_spans", "=", "0", "\n", "no_match", "=", "0", "\n", "precision_list", "=", "[", "]", "\n", "recall_list", "=", "[", "]", "\n", "num_asps_neutral_noOT", "=", "0", "\n", "num_asps_neutral_noOT_dummy", "=", "0", "\n", "for", "sent_idx", "in", "range", "(", "len", "(", "eval_dataset", ")", ")", ":", "\n", "\n", "            ", "spans_exp", "=", "eval_dataset", "[", "sent_idx", "]", "[", "\"terms\"", "]", "\n", "\n", "opinion_exp", "=", "opinion_set", "[", "sent_idx", "]", "\n", "assert", "eval_dataset", "[", "sent_idx", "]", "[", "\"sent_id\"", "]", "==", "opinion_exp", "[", "\"sent_id\"", "]", "\n", "\n", "if", "opinion_exp", "[", "\"terms\"", "]", "==", "[", "]", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "for", "_term_idx", ",", "term_dict", "in", "enumerate", "(", "opinion_exp", "[", "\"terms\"", "]", ")", ":", "\n", "\n", "                    ", "tmp_pre", "=", "[", "]", "\n", "tmp_recall", "=", "[", "]", "\n", "if", "\"opinions\"", "not", "in", "list", "(", "term_dict", ".", "keys", "(", ")", ")", ":", "\n", "                        ", "if", "term_dict", "[", "\"polarity\"", "]", "==", "\"neutral\"", ":", "\n", "                            ", "num_asps_neutral_noOT", "+=", "1", "\n", "candi_spans_list", "=", "spans_exp", "[", "_term_idx", "]", "[", "\"ranked_spans\"", "]", "[", ":", "topn", "]", "\n", "if", "\"dummy span\"", "in", "candi_spans_list", ":", "\n", "                                ", "num_asps_neutral_noOT_dummy", "+=", "1", "\n", "", "", "", "else", ":", "\n", "                        ", "num_asps", "+=", "1", "\n", "candi_spans_list", "=", "spans_exp", "[", "_term_idx", "]", "[", "\"ranked_spans\"", "]", "[", ":", "topn", "]", "\n", "for", "opinion", "in", "term_dict", "[", "\"opinions\"", "]", ":", "\n", "                            ", "num_opinion_spans", "+=", "1", "\n", "if", "opinion", "[", "\"op_term\"", "]", "in", "candi_spans_list", ":", "# exactly match", "\n", "                                ", "num_match", "+=", "1", "\n", "tmp_pre", ".", "append", "(", "1", ")", "\n", "tmp_recall", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                                ", "_best_pre", ",", "_best_recall", "=", "0", ",", "0", "\n", "for", "_span_idx", ",", "span", "in", "enumerate", "(", "candi_spans_list", ")", ":", "\n", "                                    ", "max_overlap", "=", "getNumofCommonSubstr", "(", "span", ",", "opinion", "[", "\"op_term\"", "]", ")", "[", "1", "]", "\n", "_tmp_pre", "=", "0", "if", "len", "(", "span", ")", "==", "0", "else", "max_overlap", "/", "len", "(", "span", ")", "\n", "_tmp_rec", "=", "0", "if", "len", "(", "opinion", "[", "\"op_term\"", "]", ")", "==", "0", "else", "max_overlap", "/", "len", "(", "opinion", "[", "\"op_term\"", "]", ")", "\n", "if", "_best_pre", "<", "_tmp_pre", ":", "\n", "                                        ", "_best_pre", "=", "_tmp_pre", "\n", "_best_recall", "=", "_tmp_rec", "\n", "\n", "", "", "if", "_best_pre", "==", "0", ":", "\n", "                                    ", "no_match", "+=", "1", "\n", "", "tmp_pre", ".", "append", "(", "_best_pre", ")", "\n", "tmp_recall", ".", "append", "(", "_best_recall", ")", "\n", "\n", "", "", "num_opinions", "=", "len", "(", "tmp_pre", ")", "\n", "final_pre", ",", "final_recall", "=", "0", ",", "0", "\n", "for", "_idx", "in", "range", "(", "num_opinions", ")", ":", "\n", "                            ", "final_pre", "+=", "tmp_pre", "[", "_idx", "]", "\n", "final_recall", "+=", "tmp_recall", "[", "_idx", "]", "\n", "", "final_pre", "=", "final_pre", "/", "num_opinions", "\n", "final_recall", "=", "final_recall", "/", "num_opinions", "\n", "precision_list", ".", "append", "(", "final_pre", ")", "\n", "recall_list", ".", "append", "(", "final_recall", ")", "\n", "\n", "\n", "", "", "", "", "precision_list", "=", "np", ".", "array", "(", "precision_list", ")", "\n", "recall_list", "=", "np", ".", "array", "(", "recall_list", ")", "\n", "assert", "len", "(", "precision_list", ")", "==", "num_asps", "\n", "precision", "=", "np", ".", "mean", "(", "precision_list", ")", "\n", "recall", "=", "np", ".", "mean", "(", "recall_list", ")", "\n", "f1_supplication", "=", "np", ".", "array", "(", "[", "0", "]", "*", "np", ".", "sum", "(", "recall_list", "==", "0", ")", ")", "\n", "f1", "=", "np", ".", "mean", "(", "np", ".", "concatenate", "(", "(", "2", "*", "precision_list", "[", "recall_list", "!=", "0", "]", "*", "recall_list", "[", "recall_list", "!=", "0", "]", "/", "(", "\n", "precision_list", "[", "recall_list", "!=", "0", "]", "+", "recall_list", "[", "recall_list", "!=", "0", "]", ")", ",", "f1_supplication", ")", ",", "axis", "=", "0", ")", ")", "\n", "with", "open", "(", "output_eval_file", ",", "\"a\"", ")", "as", "writer", ":", "\n", "\n", "            ", "writer", ".", "write", "(", "\"--------- Top-\"", "+", "str", "(", "topn", ")", "+", "\" results ---------\\n\"", ")", "\n", "writer", ".", "write", "(", "\"total match: \"", "+", "str", "(", "num_match", ")", "+", "\"\\n\"", ")", "\n", "writer", ".", "write", "(", "\"em match ratio: \"", "+", "str", "(", "num_match", "/", "num_opinion_spans", ")", "+", "\"\\n\"", ")", "\n", "writer", ".", "write", "(", "\"no match: \"", "+", "str", "(", "no_match", ")", "+", "\"\\n\"", ")", "\n", "writer", ".", "write", "(", "\"precision: \"", "+", "str", "(", "precision", ")", "+", "\"\\n\"", ")", "\n", "writer", ".", "write", "(", "\"recall: \"", "+", "str", "(", "recall", ")", "+", "\"\\n\"", ")", "\n", "writer", ".", "write", "(", "\"f1: \"", "+", "str", "(", "f1", ")", "+", "\"\\n\"", ")", "\n", "writer", ".", "write", "(", "\"num_asps_neutral_noOT: \"", "+", "str", "(", "num_asps_neutral_noOT", ")", "+", "\"\\n\"", ")", "\n", "writer", ".", "write", "(", "\"num_asps_neutral_noOT_dummy: \"", "+", "str", "(", "num_asps_neutral_noOT_dummy", ")", "+", "\"\\n\"", ")", "\n", "writer", ".", "write", "(", "\"dummy_hits: \"", "+", "str", "(", "num_asps_neutral_noOT_dummy", "/", "num_asps_neutral_noOT", ")", "+", "\"\\n\\n\\n\"", ")", "\n", "\n", "", "print", "(", "\"------- Top\"", "+", "str", "(", "topn", ")", "+", "\"results ---------\"", ")", "\n", "print", "(", "\"total num of aspects with explict opinion words: \"", "+", "str", "(", "num_asps", ")", ")", "\n", "print", "(", "\"total opinion words (a aspect term may have several opinion words): \"", "+", "str", "(", "num_opinion_spans", ")", ")", "\n", "print", "(", "\"total match: \"", "+", "str", "(", "num_match", ")", ")", "\n", "print", "(", "\"em match ratio: \"", "+", "str", "(", "num_match", "/", "num_opinion_spans", ")", ")", "\n", "print", "(", "\"no match: \"", "+", "str", "(", "no_match", ")", ")", "\n", "print", "(", "\"precision: \"", "+", "str", "(", "precision", ")", ")", "\n", "print", "(", "\"recall: \"", "+", "str", "(", "recall", ")", ")", "\n", "print", "(", "\"f1: \"", "+", "str", "(", "f1", ")", ")", "\n", "print", "(", "\"num_asps_neutral_noOT: \"", "+", "str", "(", "num_asps_neutral_noOT", ")", ")", "\n", "print", "(", "\"num_asps_neutral_noOT_dummy: \"", "+", "str", "(", "num_asps_neutral_noOT_dummy", ")", ")", "\n", "print", "(", "\"dummy_hits: \"", "+", "str", "(", "num_asps_neutral_noOT_dummy", "/", "num_asps_neutral_noOT", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.train_multi": [[834, 925], ["setup_training_step", "setup_opt", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "MovingAverageDict", "model.zero_grad", "tqdm.trange", "set_seed", "SummaryWriter", "len", "int", "tqdm.tqdm", "enumerate", "model.train", "tuple", "train_dataset.batch2feed_dict_multi", "model", "update_wrt_loss", "update_wrt_loss.item", "eval_fn", "tqdm.trange.close", "open", "fp.write", "os.path.join", "train_dataset.batch2feed_dict_multi.pop", "model_update_wrt_gradient", "MovingAverageDict.", "SummaryWriter.add_scalar", "save_model_with_default_name", "os.path.join", "t.to", "len", "SummaryWriter.add_scalar", "SummaryWriter.add_scalar", "SummaryWriter.add_scalar", "SummaryWriter.add_scalar", "SummaryWriter.add_scalar", "logging.info", "save_model_with_default_name", "eval_fn", "tqdm.tqdm.close", "int", "outputs[].item", "outputs[].item", "outputs[].item", "len", "len", "outputs[].item", "outputs[].item", "MovingAverageDict.get_val_str", "save_model_with_default_name"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_training_step", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_opt", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.train", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.batch2feed_dict_multi", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.update_wrt_loss", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.TqdmProgressFileReader.close", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.model_update_wrt_gradient", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.save_model_with_default_name", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.save_model_with_default_name", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.TqdmProgressFileReader.close", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.MovingAverageDict.get_val_str", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.save_model_with_default_name"], ["", "", "def", "train_multi", "(", "args", ",", "train_dataset", ",", "model", ",", "tokenizer", ",", "eval_dataset", "=", "None", ",", "eval_fn", "=", "None", ")", ":", "\n", "    ", "\"\"\" Train the model \"\"\"", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "tb_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"tensorboard\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "tb_writer", "=", "None", "\n", "\n", "# learning setup", "\n", "", "train_dataloader", "=", "setup_training_step", "(", "\n", "args", ",", "train_dataset", ",", "collate_fn", "=", "train_dataset", ".", "data_collate_fn_multi", ")", "\n", "model", ",", "optimizer", ",", "scheduler", "=", "setup_opt", "(", "args", ",", "model", ")", "\n", "\n", "# Train!", "\n", "logger", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "train_dataset", ")", ")", "\n", "logger", ".", "info", "(", "\"  Num Epochs = %d\"", ",", "args", ".", "num_train_epochs", ")", "\n", "logger", ".", "info", "(", "\"  Gradient Accumulation steps = %d\"", ",", "args", ".", "gradient_accumulation_steps", ")", "\n", "logger", ".", "info", "(", "\"  Total optimization steps = %d\"", ",", "args", ".", "t_total", ")", "\n", "\n", "if", "args", ".", "concat_way", "==", "'adv'", "or", "args", ".", "concat_way", "==", "'opinion'", ":", "\n", "        ", "is_saving_disc_pred", "=", "True", "\n", "", "else", ":", "\n", "        ", "is_saving_disc_pred", "=", "False", "\n", "\n", "", "global_step", "=", "0", "\n", "best_accu", "=", "-", "1e5", "\n", "ma_dict", "=", "MovingAverageDict", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "train_iterator", "=", "trange", "(", "int", "(", "args", ".", "num_train_epochs", ")", ",", "desc", "=", "\"Epoch\"", ",", "disable", "=", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ")", "\n", "set_seed", "(", "args", ")", "# Added here for reproductibility (even between python 2 and 3)", "\n", "for", "_idx_epoch", "in", "train_iterator", ":", "\n", "        ", "epoch_iterator", "=", "tqdm", "(", "train_dataloader", ",", "\n", "desc", "=", "\"Iteration-{}({})\"", ".", "format", "(", "_idx_epoch", ",", "args", ".", "gradient_accumulation_steps", ")", ",", "\n", "disable", "=", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ")", "\n", "step_loss", "=", "0", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "epoch_iterator", ")", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "batch", "=", "tuple", "(", "t", ".", "to", "(", "args", ".", "device", ")", "for", "t", "in", "batch", ")", "\n", "# assert len(batch) == 5", "\n", "feed_dict", "=", "train_dataset", ".", "batch2feed_dict_multi", "(", "batch", ",", "concat_way", "=", "args", ".", "concat_way", ")", "\n", "if", "args", ".", "model_class", "==", "\"roberta\"", ":", "\n", "                ", "feed_dict", ".", "pop", "(", "\"token_type_ids\"", ")", "\n", "", "outputs", "=", "model", "(", "**", "feed_dict", ")", "\n", "loss", "=", "outputs", "[", "0", "]", "# model outputs are always tuple in pytorch-transformers (see doc)", "\n", "loss", "=", "update_wrt_loss", "(", "args", ",", "model", ",", "optimizer", ",", "loss", ")", "\n", "\n", "step_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "(", "step", "+", "1", ")", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                ", "model_update_wrt_gradient", "(", "args", ",", "model", ",", "optimizer", ",", "scheduler", ")", "\n", "global_step", "+=", "1", "\n", "# update loss for logging", "\n", "ma_dict", "(", "{", "\"loss\"", ":", "step_loss", "}", ")", "\n", "if", "len", "(", "outputs", ")", "==", "6", ":", "\n", "                    ", "tb_writer", ".", "add_scalar", "(", "\"cls_loss\"", ",", "outputs", "[", "3", "]", ".", "item", "(", ")", ",", "global_step", ")", "\n", "tb_writer", ".", "add_scalar", "(", "\"hinge_loss\"", ",", "outputs", "[", "4", "]", ".", "item", "(", ")", ",", "global_step", ")", "\n", "tb_writer", ".", "add_scalar", "(", "\"span_cls_loss\"", ",", "outputs", "[", "5", "]", ".", "item", "(", ")", ",", "global_step", ")", "\n", "", "if", "len", "(", "outputs", ")", "==", "5", "or", "len", "(", "outputs", ")", "==", "11", ":", "\n", "                    ", "tb_writer", ".", "add_scalar", "(", "\"cls_loss\"", ",", "outputs", "[", "3", "]", ".", "item", "(", ")", ",", "global_step", ")", "\n", "tb_writer", ".", "add_scalar", "(", "\"pure_cls_loss\"", ",", "outputs", "[", "4", "]", ".", "item", "(", ")", ",", "global_step", ")", "\n", "", "tb_writer", ".", "add_scalar", "(", "\"training_loss\"", ",", "step_loss", ",", "global_step", ")", "\n", "step_loss", "=", "0.", "\n", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "and", "args", ".", "logging_steps", ">", "0", "and", "global_step", "%", "args", ".", "logging_steps", "==", "0", ":", "\n", "                    ", "logging", ".", "info", "(", "ma_dict", ".", "get_val_str", "(", ")", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "and", "args", ".", "save_steps", ">", "0", "and", "global_step", "%", "args", ".", "save_steps", "==", "0", ":", "\n", "                    ", "save_model_with_default_name", "(", "args", ".", "output_dir", ",", "model", ",", "tokenizer", ",", "args", ")", "\n", "\n", "", "if", "eval_dataset", "is", "not", "None", "and", "args", ".", "eval_steps", ">", "0", "and", "global_step", "%", "args", ".", "eval_steps", "==", "0", ":", "\n", "                    ", "cur_accu", "=", "eval_fn", "(", "args", ",", "eval_dataset", ",", "model", ",", "tokenizer", ",", "global_step", "=", "global_step", ",", "tb_writer", "=", "tb_writer", ",", "is_saving_disc_pred", "=", "is_saving_disc_pred", ")", "\n", "if", "cur_accu", ">", "best_accu", ":", "\n", "                        ", "best_accu", "=", "cur_accu", "\n", "save_model_with_default_name", "(", "args", ".", "output_dir", ",", "model", ",", "tokenizer", ",", "args_to_save", "=", "args", ")", "\n", "\n", "", "", "if", "args", ".", "max_steps", ">", "0", "and", "global_step", ">", "args", ".", "max_steps", ":", "\n", "                    ", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "# evaluation each epoch or last epoch", "\n", "", "", "", "if", "(", "_idx_epoch", "==", "int", "(", "args", ".", "num_train_epochs", ")", "-", "1", ")", "or", "(", "eval_dataset", "is", "not", "None", "and", "args", ".", "eval_steps", "<=", "0", ")", ":", "\n", "            ", "cur_accu", "=", "eval_fn", "(", "args", ",", "eval_dataset", ",", "model", ",", "tokenizer", ",", "global_step", "=", "global_step", ",", "tb_writer", "=", "tb_writer", ",", "is_saving_disc_pred", "=", "is_saving_disc_pred", ")", "\n", "if", "cur_accu", ">", "best_accu", ":", "\n", "                ", "best_accu", "=", "cur_accu", "\n", "save_model_with_default_name", "(", "args", ".", "output_dir", ",", "model", ",", "tokenizer", ",", "args_to_save", "=", "args", ")", "\n", "\n", "", "", "if", "args", ".", "max_steps", ">", "0", "and", "global_step", ">", "args", ".", "max_steps", ":", "\n", "            ", "train_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"best_eval_results.txt\"", ")", ",", "\"w\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"{}{}\"", ".", "format", "(", "best_accu", ",", "os", ".", "linesep", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.train_adv": [[927, 1075], ["setup_training_step", "adv_setup_opt", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "MovingAverageDict", "model.zero_grad", "tqdm.trange", "set_seed", "SummaryWriter", "len", "int", "tqdm.tqdm", "enumerate", "model.train", "tuple", "train_dataset.batch2feed_dict_multi", "model.zero_grad", "eval_fn", "tqdm.trange.close", "open", "fp.write", "fp.write", "os.path.join", "train_dataset.batch2feed_dict_multi.pop", "random.random", "encoder_optimizer.zero_grad", "task_optimizer.zero_grad", "cls_and_adv_loss.mean.mean", "cls_and_adv_loss.mean.item", "cls_and_adv_loss.mean.backward", "encoder_optimizer.step", "task_optimizer.step", "encoder_scheduler.step", "task_scheduler.step", "MovingAverageDict.", "MovingAverageDict.", "MovingAverageDict.", "SummaryWriter.add_scalar", "SummaryWriter.add_scalar", "SummaryWriter.add_scalar", "logging.info", "save_model_with_default_name", "eval_fn", "tqdm.tqdm.close", "save_model_with_default_name", "os.path.join", "t.to", "model.get_forward_data", "model.get_forward_data", "random.random", "disc_optimizer.zero_grad", "disc_loss.mean.mean", "disc_loss.mean.item", "disc_loss.mean.backward", "disc_optimizer.step", "disc_optimizer.zero_grad", "disc_scheduler.step", "MovingAverageDict.", "SummaryWriter.add_scalar", "model.encoder_forward", "model.encoder_forward", "MovingAverageDict.", "cls_loss.item", "adv_loss.item", "SummaryWriter.add_scalar", "MovingAverageDict.get_val_str", "open", "wf.write", "wf.write", "wf.write", "save_model_with_default_name", "int", "model.discriminator_forward", "cls_loss.item", "adv_loss.item", "kl_loss.item", "os.path.join", "MovingAverageDict.get_val_str", "str", "kl_loss.item", "str"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_training_step", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.adv_setup_opt", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.set_seed", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.train", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.AbsaDataset.batch2feed_dict_multi", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.TqdmProgressFileReader.close", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.step", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.step", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.step", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.step", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.save_model_with_default_name", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.hf_api.TqdmProgressFileReader.close", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.save_model_with_default_name", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.get_forward_data", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.get_forward_data", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.step", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.optimization_tf.GradientAccumulator.step", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.encoder_forward", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.encoder_forward", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.MovingAverageDict.get_val_str", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.save_model_with_default_name", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.models.BERTSpanCLSAdvDistillation.discriminator_forward", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.MovingAverageDict.get_val_str"], ["", "", "", "def", "train_adv", "(", "args", ",", "train_dataset", ",", "model", ",", "tokenizer", ",", "eval_dataset", "=", "None", ",", "eval_fn", "=", "None", ")", ":", "\n", "    ", "\"\"\" Train the model \"\"\"", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "tb_writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"tensorboard\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "tb_writer", "=", "None", "\n", "\n", "# learning setup", "\n", "", "train_dataloader", "=", "setup_training_step", "(", "\n", "args", ",", "train_dataset", ",", "collate_fn", "=", "train_dataset", ".", "data_collate_fn_multi", ")", "\n", "model", ",", "encoder_optimizer", ",", "task_optimizer", ",", "disc_optimizer", ",", "encoder_scheduler", ",", "task_scheduler", ",", "disc_scheduler", "=", "adv_setup_opt", "(", "args", ",", "model", ")", "\n", "\n", "# Train!", "\n", "logger", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "train_dataset", ")", ")", "\n", "logger", ".", "info", "(", "\"  Num Epochs = %d\"", ",", "args", ".", "num_train_epochs", ")", "\n", "logger", ".", "info", "(", "\"  Gradient Accumulation steps = %d\"", ",", "args", ".", "gradient_accumulation_steps", ")", "\n", "logger", ".", "info", "(", "\"  Total optimization steps = %d\"", ",", "args", ".", "t_total", ")", "\n", "\n", "global_step", "=", "0", "\n", "best_accu", "=", "-", "1e5", "\n", "ma_dict", "=", "MovingAverageDict", "(", ")", "\n", "model", ".", "zero_grad", "(", ")", "\n", "train_iterator", "=", "trange", "(", "int", "(", "args", ".", "num_train_epochs", ")", ",", "desc", "=", "\"Epoch\"", ",", "disable", "=", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ")", "\n", "set_seed", "(", "args", ")", "# Added here for reproductibility (even between python 2 and 3)", "\n", "for", "_idx_epoch", "in", "train_iterator", ":", "\n", "        ", "epoch_iterator", "=", "tqdm", "(", "train_dataloader", ",", "\n", "desc", "=", "\"Iteration-{}({})\"", ".", "format", "(", "_idx_epoch", ",", "args", ".", "gradient_accumulation_steps", ")", ",", "\n", "disable", "=", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ")", "\n", "step_cls_and_adv_loss", ",", "step_disc_loss", "=", "0", ",", "0", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "epoch_iterator", ")", ":", "\n", "            ", "if", "args", ".", "disc_ratio_decrease", ":", "\n", "                ", "if", "global_step", ">", "1", "/", "3", ":", "\n", "                    ", "if", "global_step", "%", "10", "==", "0", ":", "\n", "                        ", "args", ".", "discriminator_ratio", "-=", "0.02", "\n", "\n", "# if step < 280:", "\n", "#     continue", "\n", "", "", "", "model", ".", "train", "(", ")", "\n", "batch", "=", "tuple", "(", "t", ".", "to", "(", "args", ".", "device", ")", "for", "t", "in", "batch", ")", "\n", "# assert len(batch) == 5", "\n", "feed_dict", "=", "train_dataset", ".", "batch2feed_dict_multi", "(", "batch", ",", "concat_way", "=", "args", ".", "concat_way", ")", "\n", "if", "args", ".", "model_class", "==", "\"roberta\"", ":", "\n", "                ", "feed_dict", ".", "pop", "(", "\"token_type_ids\"", ")", "\n", "\n", "\n", "# get tensors used in forward", "\n", "", "if", "args", ".", "concat_way", "==", "\"adv_distillation\"", "or", "args", ".", "concat_way", "==", "\"adv_supervision\"", "or", "args", ".", "concat_way", "==", "\"adv_supervision_treespan\"", ":", "\n", "                ", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "bias_labels", ",", "kl_loss", "=", "model", ".", "get_forward_data", "(", "**", "feed_dict", ")", "[", ":", "5", "]", "\n", "", "else", ":", "\n", "                ", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "bias_labels", "=", "model", ".", "get_forward_data", "(", "**", "feed_dict", ")", "[", ":", "4", "]", "\n", "\n", "# # ---------- View the gradients ------------------", "\n", "# para_dict_init = {}", "\n", "# for name, parms in model.named_parameters():", "\n", "#     if name == 'roberta.embeddings.word_embeddings.weight':", "\n", "#         para_dict_init[name] = parms.grad", "\n", "#     if name.split('.')[0] != 'roberta':", "\n", "#         para_dict_init[name] = parms.grad", "\n", "# # -----------------------------------", "\n", "\n", "\n", "# optimize the discriminator", "\n", "", "if", "not", "args", ".", "no_adversarial", ":", "\n", "                ", "if", "random", "(", ")", "<", "args", ".", "discriminator_ratio", ":", "\n", "                    ", "disc_optimizer", ".", "zero_grad", "(", ")", "\n", "disc_loss", "=", "model", ".", "discriminator_forward", "(", "pure_asp_embs", ",", "bias_labels", ")", "[", "0", "]", "\n", "disc_loss", "=", "disc_loss", ".", "mean", "(", ")", "\n", "step_disc_loss", "+=", "disc_loss", ".", "item", "(", ")", "\n", "disc_loss", ".", "backward", "(", ")", "\n", "disc_optimizer", ".", "step", "(", ")", "\n", "disc_optimizer", ".", "zero_grad", "(", ")", "\n", "disc_scheduler", ".", "step", "(", ")", "\n", "ma_dict", "(", "{", "\"disc_loss\"", ":", "step_disc_loss", "}", ")", "\n", "tb_writer", ".", "add_scalar", "(", "\"disc_loss\"", ",", "step_disc_loss", ",", "global_step", ")", "\n", "\n", "# optimize the encoder", "\n", "", "", "if", "random", "(", ")", "<", "args", ".", "encoder_ratio", ":", "\n", "                ", "encoder_optimizer", ".", "zero_grad", "(", ")", "\n", "task_optimizer", ".", "zero_grad", "(", ")", "\n", "if", "args", ".", "concat_way", "==", "\"adv_distillation\"", "or", "args", ".", "concat_way", "==", "\"adv_supervision\"", "or", "args", ".", "concat_way", "==", "\"adv_supervision_treespan\"", ":", "\n", "                    ", "cls_and_adv_loss", ",", "logits", ",", "_", ",", "cls_loss", ",", "adv_loss", ",", "kl_loss", "=", "model", ".", "encoder_forward", "(", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ",", "kl_loss", ",", "bias_labels", ")", "\n", "", "else", ":", "\n", "                    ", "cls_and_adv_loss", ",", "logits", ",", "_", ",", "cls_loss", ",", "adv_loss", "=", "model", ".", "encoder_forward", "(", "aspects_emb", ",", "labels", ",", "pure_asp_embs", ")", "\n", "", "cls_and_adv_loss", "=", "cls_and_adv_loss", ".", "mean", "(", ")", "\n", "step_cls_and_adv_loss", "+=", "cls_and_adv_loss", ".", "item", "(", ")", "\n", "cls_and_adv_loss", ".", "backward", "(", ")", "\n", "encoder_optimizer", ".", "step", "(", ")", "\n", "task_optimizer", ".", "step", "(", ")", "\n", "encoder_scheduler", ".", "step", "(", ")", "\n", "task_scheduler", ".", "step", "(", ")", "\n", "\n", "ma_dict", "(", "{", "\"cls_and_adv_loss\"", ":", "step_cls_and_adv_loss", "}", ")", "\n", "ma_dict", "(", "{", "\"cls_loss\"", ":", "cls_loss", ".", "item", "(", ")", "}", ")", "\n", "ma_dict", "(", "{", "\"adv_loss\"", ":", "adv_loss", ".", "item", "(", ")", "}", ")", "\n", "if", "args", ".", "concat_way", "==", "\"adv_distillation\"", "or", "args", ".", "concat_way", "==", "\"adv_supervision\"", "or", "args", ".", "concat_way", "==", "\"adv_supervision_treespan\"", ":", "\n", "                    ", "ma_dict", "(", "{", "\"kl_loss\"", ":", "kl_loss", ".", "item", "(", ")", "}", ")", "\n", "", "tb_writer", ".", "add_scalar", "(", "\"cls_and_adv_loss\"", ",", "step_cls_and_adv_loss", ",", "global_step", ")", "\n", "tb_writer", ".", "add_scalar", "(", "\"cls_loss\"", ",", "cls_loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "tb_writer", ".", "add_scalar", "(", "\"adv_loss\"", ",", "adv_loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "if", "args", ".", "concat_way", "==", "\"adv_distillation\"", "or", "args", ".", "concat_way", "==", "\"adv_supervision\"", "or", "args", ".", "concat_way", "==", "\"adv_supervision_treespan\"", ":", "\n", "                    ", "tb_writer", ".", "add_scalar", "(", "\"kl_loss\"", ",", "kl_loss", ".", "item", "(", ")", ",", "global_step", ")", "\n", "\n", "", "", "model", ".", "zero_grad", "(", ")", "\n", "\n", "global_step", "+=", "1", "\n", "# update loss for logging", "\n", "# ma_dict({\"cls_and_adv_loss\": step_cls_and_adv_loss})", "\n", "# ma_dict({\"disc_loss\": step_disc_loss})", "\n", "# tb_writer.add_scalar(\"cls_and_adv_loss\", step_cls_and_adv_loss, global_step)", "\n", "# tb_writer.add_scalar(\"disc_loss\", step_disc_loss, global_step)", "\n", "# tb_writer.add_scalar(\"cls_loss\", cls_loss.item(), global_step)", "\n", "# tb_writer.add_scalar(\"adv_loss\", adv_loss.item(), global_step)", "\n", "step_cls_and_adv_loss", ",", "step_disc_loss", "=", "0.", ",", "0.", "\n", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "and", "args", ".", "logging_steps", ">", "0", "and", "global_step", "%", "args", ".", "logging_steps", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "ma_dict", ".", "get_val_str", "(", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'loss_record.txt'", ")", ",", "'a'", ")", "as", "wf", ":", "\n", "                    ", "wf", ".", "write", "(", "str", "(", "global_step", ")", "+", "': '", ")", "\n", "wf", ".", "write", "(", "ma_dict", ".", "get_val_str", "(", ")", ")", "\n", "wf", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "and", "args", ".", "save_steps", ">", "0", "and", "global_step", "%", "args", ".", "save_steps", "==", "0", ":", "\n", "                ", "save_model_with_default_name", "(", "args", ".", "output_dir", ",", "model", ",", "tokenizer", ",", "args", ")", "\n", "\n", "", "if", "eval_dataset", "is", "not", "None", "and", "args", ".", "eval_steps", ">", "0", "and", "global_step", "%", "args", ".", "eval_steps", "==", "0", ":", "\n", "                ", "cur_accu", "=", "eval_fn", "(", "args", ",", "eval_dataset", ",", "model", ",", "tokenizer", ",", "global_step", "=", "global_step", ",", "tb_writer", "=", "tb_writer", ")", "\n", "if", "cur_accu", ">", "best_accu", ":", "\n", "                    ", "best_accu", "=", "cur_accu", "\n", "save_model_with_default_name", "(", "args", ".", "output_dir", ",", "model", ",", "tokenizer", ",", "args_to_save", "=", "args", ")", "\n", "\n", "", "", "if", "args", ".", "max_steps", ">", "0", "and", "global_step", ">", "args", ".", "max_steps", ":", "\n", "                    ", "epoch_iterator", ".", "close", "(", ")", "\n", "break", "\n", "# evaluation each epoch or last epoch", "\n", "", "", "if", "(", "_idx_epoch", "==", "int", "(", "args", ".", "num_train_epochs", ")", "-", "1", ")", "or", "(", "eval_dataset", "is", "not", "None", "and", "args", ".", "eval_steps", "<=", "0", ")", ":", "\n", "            ", "cur_accu", "=", "eval_fn", "(", "args", ",", "eval_dataset", ",", "model", ",", "tokenizer", ",", "global_step", "=", "global_step", ",", "tb_writer", "=", "tb_writer", ")", "\n", "if", "cur_accu", ">", "best_accu", ":", "\n", "                ", "best_accu", "=", "cur_accu", "\n", "save_model_with_default_name", "(", "args", ".", "output_dir", ",", "model", ",", "tokenizer", ",", "args_to_save", "=", "args", ")", "\n", "\n", "", "", "if", "args", ".", "max_steps", ">", "0", "and", "global_step", ">", "args", ".", "max_steps", ":", "\n", "            ", "train_iterator", ".", "close", "(", ")", "\n", "break", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"best_eval_results.txt\"", ")", ",", "\"a\"", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "\"training_epoch_\"", "+", "str", "(", "_idx_epoch", ")", "+", "\": \"", ")", "\n", "fp", ".", "write", "(", "\"{}{}\"", ".", "format", "(", "best_accu", ",", "os", ".", "linesep", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.main": [[1077, 1367], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "define_hparams_training", "argparse.ArgumentParser.parse_args", "setup_prerequisite", "config_class.from_pretrained", "tokenizer_class.from_pretrained", "logger.info", "absa.absa_dataset.get_raw_datasets", "absa.absa_dataset.AbsaDataset", "absa.absa_dataset.AbsaDataset", "absa.absa_dataset.AbsaDataset", "model_class.from_pretrained", "setup_eval_model_for_fp16.to", "torch.distributed.barrier", "absa_train.get_distillation_dataset", "logger.info", "torch.distributed.barrier", "absa.absa_dataset.get_raw_datasets", "range", "absa_train.train", "absa_train.evaluate", "absa_train.evaluate", "len", "absa_train.get_wordnet_bias", "model_class.from_pretrained", "setup_eval_model_for_fp16.to", "setup_eval_model_for_fp16", "absa_train.train_adv", "absa_train.evaluate_multi", "absa_train.train_multi", "absa_train.evaluate_multi", "model_class.from_pretrained", "setup_eval_model_for_fp16.to", "setup_eval_model_for_fp16", "model_class.from_pretrained", "setup_eval_model_for_fp16.to", "setup_eval_model_for_fp16"], "function", ["home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.define_hparams_training", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_prerequisite", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.get_raw_datasets", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.get_distillation_dataset", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_dataset.get_raw_datasets", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.train", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.evaluate", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.evaluate", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.get_wordnet_bias", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_eval_model_for_fp16", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.train_adv", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.evaluate_multi", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.train_multi", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.absa.absa_train.evaluate_multi", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_eval_model_for_fp16", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.transformers.configuration_auto.AutoConfig.from_pretrained", "home.repos.pwc.inspect_result.wangbo9719_sarl_absa.peach.help.setup_eval_model_for_fp16"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_class\"", ",", "default", "=", "\"roberta\"", ",", "type", "=", "str", ",", "help", "=", "\"[roberta|bert]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "default", "=", "\"rest14\"", ",", "type", "=", "str", ",", "help", "=", "\"[rest14|lap14|rest15|rest16|twitter]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_dir\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--concat_way\"", ",", "default", "=", "\"naive\"", ",", "type", "=", "str", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_format\"", ",", "default", "=", "\"term\"", ",", "type", "=", "str", ",", "help", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_name_or_path\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Path to pre-trained model or shortcut name selected in the list: \"", "+", "\", \"", ".", "join", "(", "\n", "ALL_MODELS", ")", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"The output directory where the model checkpoints will be written.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nums_label\"", ",", "default", "=", "3", ",", "type", "=", "int", ",", "\n", "help", "=", "\"The number of labels.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--train_rate\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_span_width\"", ",", "default", "=", "15", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_rela_distance\"", ",", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--feature_emb_size\"", ",", "default", "=", "30", ",", "type", "=", "int", ")", "# 32 if use multi-heads", "\n", "parser", ".", "add_argument", "(", "\"--use_width_features\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_rela_dis_features\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "\n", "parser", ".", "add_argument", "(", "\"--top_n\"", ",", "default", "=", "10", ",", "type", "=", "int", ",", "help", "=", "\"top_n spans according to the total score\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_dep_dis_features\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"use the feature about dependence distance between aspect term and other spans\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--use_gate\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_spans_info\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "# for discriminator/adversarial", "\n", "parser", ".", "add_argument", "(", "\"--encoder_lr\"", ",", "default", "=", "1e-5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--others_lr\"", ",", "default", "=", "1e-5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--phrase_sentiment_model_path\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Path to trained phrase sentiment model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nums_bias_label\"", ",", "default", "=", "3", ",", "type", "=", "int", ",", "\n", "help", "=", "\"The number of bias labels.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--adv_loss_weight\"", ",", "default", "=", "0.1", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--discriminator_ratio\"", ",", "default", "=", "0.2", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "\"--encoder_ratio\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--eval_interpretable\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--get_wordnet_bias\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--get_distillation_dataset\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--no_distillation\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_sentiment_score\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_adversarial\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_adv_loss\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adversarial_on_polarity\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--disc_ratio_decrease\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "\n", "\n", "define_hparams_training", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "setup_prerequisite", "(", "args", ")", "\n", "\n", "# Load pretrained model and tokenizer", "\n", "if", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "# Make sure only the first process in distributed training will download model & vocab", "\n", "\n", "", "if", "args", ".", "data_format", "==", "\"multi_aspects\"", ":", "\n", "# if args.concat_way == \"hoi\":", "\n", "#     if args.model_class == \"roberta\":", "\n", "#         model_class = RoBERTaHoiSpanCLS", "\n", "#         config_class = RobertaConfig", "\n", "#         tokenizer_class = RobertaTokenizer", "\n", "# elif args.concat_way == \"adv\":", "\n", "#     if args.model_class == \"roberta\":", "\n", "#         model_class = RoBERTaHoiSpanCLSAdv", "\n", "#         config_class = RobertaConfig", "\n", "#         tokenizer_class = RobertaTokenizer", "\n", "# elif args.concat_way == \"neu\":", "\n", "#     if args.model_class == \"roberta\":", "\n", "#         model_class = RoBERTaHoiSpanCLSNeu", "\n", "#         config_class = RobertaConfig", "\n", "#         tokenizer_class = RobertaTokenizer", "\n", "# elif args.concat_way == \"opinion\":", "\n", "#     if args.model_class == \"roberta\":", "\n", "#         model_class = RoBERTaHoiSpanCLSAdvOpinion", "\n", "#         config_class = RobertaConfig", "\n", "#         tokenizer_class = RobertaTokenizer", "\n", "# elif args.concat_way == \"adv_supervision\" or args.concat_way == \"adv_supervision_treespan\":", "\n", "#     if args.model_class == \"roberta\":", "\n", "#         model_class = RoBERTaHoiSpanCLSAdvSupervision", "\n", "#         config_class = RobertaConfig", "\n", "#         tokenizer_class = RobertaTokenizer", "\n", "#     elif args.model_class == \"bert\":", "\n", "#         model_class = BERTHoiSpanCLSAdvSupervision", "\n", "#         config_class = BertConfig", "\n", "#         tokenizer_class = BertTokenizer", "\n", "        ", "if", "args", ".", "concat_way", "==", "\"adv_distillation\"", ":", "\n", "            ", "if", "args", ".", "model_class", "==", "\"roberta\"", ":", "\n", "                ", "model_class", "=", "RoBERTaSpanCLSAdvDistillation", "\n", "config_class", "=", "RobertaConfig", "\n", "tokenizer_class", "=", "RobertaTokenizer", "\n", "", "elif", "args", ".", "model_class", "==", "\"bert\"", ":", "\n", "                ", "model_class", "=", "BERTSpanCLSAdvDistillation", "\n", "config_class", "=", "BertConfig", "\n", "tokenizer_class", "=", "BertTokenizer", "\n", "", "", "else", ":", "\n", "            ", "if", "args", ".", "model_class", "==", "\"bert\"", ":", "\n", "                ", "model_class", "=", "BertMultiAspectsCLS", "\n", "config_class", "=", "BertConfig", "\n", "tokenizer_class", "=", "BertTokenizer", "\n", "", "elif", "args", ".", "model_class", "==", "\"roberta\"", ":", "\n", "                ", "model_class", "=", "RoBERTaMultiAspectsCLS", "\n", "config_class", "=", "RobertaConfig", "\n", "tokenizer_class", "=", "RobertaTokenizer", "\n", "", "", "", "elif", "args", ".", "data_format", "==", "\"term_span\"", ":", "\n", "        ", "if", "args", ".", "model_class", "==", "\"bert\"", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "elif", "args", ".", "model_class", "==", "\"roberta\"", ":", "\n", "            ", "model_class", "=", "RoBERTaSpanCLS", "\n", "config_class", "=", "RobertaConfig", "\n", "tokenizer_class", "=", "RobertaTokenizer", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "model_class", "==", "\"bert\"", ":", "\n", "            ", "model_class", "=", "BertForSequenceClassification", "\n", "config_class", "=", "BertConfig", "\n", "tokenizer_class", "=", "BertTokenizer", "\n", "", "elif", "args", ".", "model_class", "==", "\"roberta\"", ":", "\n", "            ", "model_class", "=", "RobertaForSequenceClassification", "\n", "config_class", "=", "RobertaConfig", "\n", "tokenizer_class", "=", "RobertaTokenizer", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "config", "=", "config_class", ".", "from_pretrained", "(", "args", ".", "config_name", "if", "args", ".", "config_name", "else", "args", ".", "model_name_or_path", ")", "\n", "config", ".", "num_labels", "=", "args", ".", "nums_label", "\n", "\n", "config", ".", "max_span_width", "=", "args", ".", "max_span_width", "\n", "config", ".", "max_rela_distance", "=", "args", ".", "max_rela_distance", "\n", "config", ".", "feature_emb_size", "=", "args", ".", "feature_emb_size", "\n", "config", ".", "use_width_features", "=", "args", ".", "use_width_features", "\n", "config", ".", "use_rela_dis_features", "=", "args", ".", "use_rela_dis_features", "\n", "config", ".", "top_n", "=", "args", ".", "top_n", "\n", "config", ".", "use_dep_dis_features", "=", "args", ".", "use_dep_dis_features", "\n", "config", ".", "use_gate", "=", "args", ".", "use_gate", "\n", "config", ".", "save_spans_info", "=", "args", ".", "save_spans_info", "\n", "config", ".", "phrase_sentiment_model_path", "=", "args", ".", "phrase_sentiment_model_path", "\n", "\n", "config", ".", "nums_bias_label", "=", "args", ".", "nums_bias_label", "\n", "config", ".", "adv_loss_weight", "=", "args", ".", "adv_loss_weight", "\n", "\n", "config", ".", "no_distillation", "=", "args", ".", "no_distillation", "\n", "config", ".", "no_sentiment_score", "=", "args", ".", "no_sentiment_score", "\n", "config", ".", "no_adversarial", "=", "args", ".", "no_adversarial", "\n", "config", ".", "no_adv_loss", "=", "args", ".", "no_adv_loss", "\n", "config", ".", "adversarial_on_polarity", "=", "args", ".", "adversarial_on_polarity", "\n", "\n", "\n", "\n", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "\n", "args", ".", "tokenizer_name", "if", "args", ".", "tokenizer_name", "else", "args", ".", "model_name_or_path", ",", "do_lower_case", "=", "args", ".", "do_lower_case", ")", "\n", "\n", "if", "args", ".", "get_distillation_dataset", ":", "\n", "        ", "get_distillation_dataset", "(", "args", ",", "config", ",", "tokenizer", ",", "args", ".", "dataset", ")", "\n", "return", "\n", "\n", "", "logger", ".", "info", "(", "\"Training/evaluation parameters %s\"", ",", "args", ")", "\n", "\n", "# get wordnet sentiment bias datasets", "\n", "if", "args", ".", "get_wordnet_bias", ":", "\n", "        ", "for", "dataset", "in", "[", "'lap14'", ",", "'rest14'", ",", "'rest15'", ",", "'rest16'", ",", "'twitter'", "]", ":", "\n", "            ", "train_dataset_raw", ",", "dev_dataset_raw", ",", "test_dataset_raw", "=", "get_raw_datasets", "(", "dataset", ")", "\n", "dataset_list", "=", "[", "train_dataset_raw", ",", "test_dataset_raw", "]", "\n", "datatype_list", "=", "[", "'train'", ",", "'test'", "]", "\n", "for", "_i", "in", "range", "(", "len", "(", "dataset_list", ")", ")", ":", "\n", "                ", "get_wordnet_bias", "(", "args", ",", "dataset_list", "[", "_i", "]", ",", "dataset", ",", "datatype_list", "[", "_i", "]", ")", "\n", "", "", "logger", ".", "info", "(", "\"Get wordnet sentiment bias finished!\"", ")", "\n", "return", "\n", "\n", "", "train_dataset_raw", ",", "dev_dataset_raw", ",", "test_dataset_raw", "=", "get_raw_datasets", "(", "\n", "args", ".", "dataset", ",", "args", ".", "dataset_dir", ")", "\n", "train_dataset", "=", "AbsaDataset", "(", "config", ",", "train_dataset_raw", ",", "args", ".", "data_format", ",", "\"train\"", ",", "args", ".", "model_class", ",", "tokenizer", ",", "\n", "args", ".", "max_seq_length", ",", "\n", "concat_way", "=", "args", ".", "concat_way", ",", "nums_label", "=", "args", ".", "nums_label", ",", "rate", "=", "args", ".", "train_rate", ",", "\n", "nums_bias_label", "=", "args", ".", "nums_bias_label", ",", "\n", "max_span_width", "=", "args", ".", "max_span_width", ")", "\n", "dev_dataset", "=", "AbsaDataset", "(", "config", ",", "dev_dataset_raw", ",", "args", ".", "data_format", ",", "\"dev\"", ",", "args", ".", "model_class", ",", "tokenizer", ",", "\n", "args", ".", "max_seq_length", ",", "\n", "concat_way", "=", "args", ".", "concat_way", ",", "nums_label", "=", "args", ".", "nums_label", ",", "\n", "nums_bias_label", "=", "args", ".", "nums_bias_label", ",", "\n", "max_span_width", "=", "args", ".", "max_span_width", ")", "\n", "test_dataset", "=", "AbsaDataset", "(", "config", ",", "test_dataset_raw", ",", "args", ".", "data_format", ",", "\"test\"", ",", "args", ".", "model_class", ",", "tokenizer", ",", "\n", "args", ".", "max_seq_length", ",", "\n", "concat_way", "=", "args", ".", "concat_way", ",", "nums_label", "=", "args", ".", "nums_label", ",", "\n", "nums_bias_label", "=", "args", ".", "nums_bias_label", ",", "\n", "max_span_width", "=", "args", ".", "max_span_width", ")", "\n", "\n", "model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "model_name_or_path", ",", "config", "=", "config", ")", "\n", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "# Make sure only the first process in distributed training will download model & vocab", "\n", "", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "# if args.concat_way == \"sst_pre\":", "\n", "#     if args.do_train or args.do_eval:", "\n", "#         raise ValueError", "\n", "#     if args.do_prediction:", "\n", "#         sst_evaluate(args, train_dataset, model, tokenizer, global_step=None, verbose=True,", "\n", "#                      file_prefix=\"final_trainset_test_\", is_saving_pred=True, dataset_type=\"train\")", "\n", "#         sst_evaluate(args, dev_dataset, model, tokenizer, global_step=None, verbose=True,", "\n", "#                      file_prefix=\"final_devset_test_\", is_saving_pred=True, dataset_type=\"dev\")", "\n", "#         sst_evaluate(args, test_dataset, model, tokenizer, global_step=None, verbose=True,", "\n", "#                      file_prefix=\"final_testset_test_\", is_saving_pred=True, dataset_type=\"test\")", "\n", "# elif args.concat_way == \"term_only\":", "\n", "#     if args.do_train or args.do_eval:", "\n", "#         raise ValueError", "\n", "#     if args.do_prediction:", "\n", "#         get_bias_evaluate(args, train_dataset, model, tokenizer, global_step=None, verbose=True,", "\n", "#                      file_prefix=\"final_trainset_test_\", is_saving_pred=True, dataset=args.dataset, dataset_type=\"train\")", "\n", "#         get_bias_evaluate(args, dev_dataset, model, tokenizer, global_step=None, verbose=True,", "\n", "#                      file_prefix=\"final_devset_test_\", is_saving_pred=True, dataset=args.dataset,dataset_type=\"dev\")", "\n", "#         get_bias_evaluate(args, test_dataset, model, tokenizer, global_step=None, verbose=True,", "\n", "#                      file_prefix=\"final_testset_test_\", is_saving_pred=True, dataset=args.dataset,dataset_type=\"test\")", "\n", "\n", "# elif args.data_format != \"multi_aspects\" and args.concat_way != \"naive_multi\" and args.concat_way != \"naive_twitter_multi\" and args.concat_way != \"naive_sampling_spans\":", "\n", "if", "args", ".", "data_format", "!=", "\"multi_aspects\"", ":", "\n", "        ", "if", "args", ".", "do_train", ":", "\n", "            ", "train", "(", "args", ",", "train_dataset", ",", "model", ",", "tokenizer", ",", "dev_dataset", ",", "eval_fn", "=", "evaluate", ")", "\n", "", "if", "args", ".", "do_eval", "or", "args", ".", "do_prediction", ":", "\n", "            ", "if", "args", ".", "do_train", ":", "\n", "                ", "model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "output_dir", ",", "config", "=", "config", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "", "if", "args", ".", "fp16", ":", "\n", "                ", "model", "=", "setup_eval_model_for_fp16", "(", "args", ",", "model", ")", "\n", "\n", "", "evaluate", "(", "args", ",", "dev_dataset", ",", "model", ",", "tokenizer", ",", "global_step", "=", "None", ",", "verbose", "=", "True", ",", "file_prefix", "=", "\"final_dev_\"", ",", "\n", "is_saving_pred", "=", "True", ")", "\n", "evaluate", "(", "args", ",", "test_dataset", ",", "model", ",", "tokenizer", ",", "global_step", "=", "None", ",", "verbose", "=", "True", ",", "\n", "file_prefix", "=", "\"final_test_\"", ",", "is_saving_pred", "=", "True", ")", "\n", "# elif args.concat_way == \"adv\" or args.concat_way == \"adv_supervision\" or args.concat_way == \"adv_supervision_treespan\":", "\n", "#     if args.do_train:", "\n", "#         train_adv(args, train_dataset, model, tokenizer, dev_dataset, eval_fn=evaluate_multi)", "\n", "#     if args.do_eval or args.do_prediction:", "\n", "#         if args.do_train:", "\n", "#             model = model_class.from_pretrained(args.output_dir, config=config)", "\n", "#             model.to(args.device)", "\n", "#         if args.fp16:", "\n", "#             model = setup_eval_model_for_fp16(args, model)", "\n", "#         evaluate_multi(args, test_dataset, model, tokenizer, global_step=None, verbose=True, file_prefix=\"final_test_\",", "\n", "#                  is_saving_pred=True)", "\n", "", "", "elif", "args", ".", "concat_way", "==", "\"adv_distillation\"", ":", "\n", "        ", "if", "args", ".", "do_train", ":", "\n", "            ", "train_adv", "(", "args", ",", "train_dataset", ",", "model", ",", "tokenizer", ",", "dev_dataset", ",", "eval_fn", "=", "evaluate_multi", ")", "\n", "", "if", "args", ".", "do_eval", "or", "args", ".", "do_prediction", ":", "\n", "            ", "if", "args", ".", "do_train", ":", "\n", "                ", "model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "output_dir", ",", "config", "=", "config", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "", "if", "args", ".", "fp16", ":", "\n", "                ", "model", "=", "setup_eval_model_for_fp16", "(", "args", ",", "model", ")", "\n", "", "evaluate_multi", "(", "args", ",", "test_dataset", ",", "model", ",", "tokenizer", ",", "global_step", "=", "None", ",", "verbose", "=", "True", ",", "file_prefix", "=", "\"final_test_\"", ",", "\n", "is_saving_pred", "=", "True", ")", "\n", "# elif args.concat_way == \"opinion\":", "\n", "#     if args.do_train:", "\n", "#         train_opinion(args, train_dataset, model, tokenizer, dev_dataset, eval_fn=evaluate_multi)", "\n", "#     if args.do_eval or args.do_prediction:", "\n", "#         if args.do_train:", "\n", "#             model = model_class.from_pretrained(args.output_dir, config=config)", "\n", "#             model.to(args.device)", "\n", "#         if args.fp16:", "\n", "#             model = setup_eval_model_for_fp16(args, model)", "\n", "#         evaluate_multi(args, test_dataset, model, tokenizer, global_step=None, verbose=True, file_prefix=\"final_test_\",", "\n", "#                  is_saving_pred=True)", "\n", "# elif args.concat_way == \"neu\":", "\n", "#     if args.do_train:", "\n", "#         train_adv_old(args, train_dataset, model, tokenizer, dev_dataset, eval_fn=evaluate_multi)", "\n", "#     if args.do_eval or args.do_prediction:", "\n", "#         if args.do_train:", "\n", "#             model = model_class.from_pretrained(args.output_dir, config=config)", "\n", "#             model.to(args.device)", "\n", "#         if args.fp16:", "\n", "#             model = setup_eval_model_for_fp16(args, model)", "\n", "#         evaluate_multi(args, test_dataset, model, tokenizer, global_step=None, verbose=True, file_prefix=\"final_test_\",", "\n", "#                  is_saving_pred=True)", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "do_train", ":", "\n", "            ", "train_multi", "(", "args", ",", "train_dataset", ",", "model", ",", "tokenizer", ",", "dev_dataset", ",", "eval_fn", "=", "evaluate_multi", ")", "\n", "", "if", "args", ".", "do_eval", "or", "args", ".", "do_prediction", ":", "\n", "            ", "if", "args", ".", "do_train", ":", "\n", "                ", "model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "output_dir", ",", "config", "=", "config", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "", "if", "args", ".", "fp16", ":", "\n", "                ", "model", "=", "setup_eval_model_for_fp16", "(", "args", ",", "model", ")", "\n", "\n", "", "evaluate_multi", "(", "args", ",", "test_dataset", ",", "model", ",", "tokenizer", ",", "global_step", "=", "None", ",", "verbose", "=", "True", ",", "file_prefix", "=", "\"final_test_\"", ",", "\n", "is_saving_pred", "=", "True", ",", "is_saving_disc_pred", "=", "False", ")", "\n", "\n"]]}