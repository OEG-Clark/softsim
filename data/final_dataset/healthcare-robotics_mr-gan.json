{"home.repos.pwc.inspect_result.healthcare-robotics_mr-gan.others.test_activation_map.run_class_activation_maps": [[9, 101], ["keras.models.Sequential.fit", "keras.models.Sequential.evaluate", "print", "numpy.array", "test_activation_map.run_class_activation_maps.normalize"], "function", ["None"], ["def", "run_class_activation_maps", "(", "problem", "=", "'classification'", ")", ":", "\n", "    ", "count", "=", "5000", "\n", "if", "problem", "==", "'classification'", ":", "\n", "        ", "num_classes", "=", "5", "\n", "y_train", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ",", "size", "=", "count", ")", "\n", "X_train", "=", "np", ".", "random", ".", "rand", "(", "count", ",", "10", ")", "\n", "for", "i", ",", "yy", "in", "enumerate", "(", "y_train", ")", ":", "\n", "            ", "X_train", "[", "i", ",", "yy", "+", "2", "]", "=", "0.1", "\n", "X_train", "[", "i", ",", "yy", "+", "3", "]", "=", "0.2", "\n", "X_train", "[", "i", ",", "yy", "+", "4", "]", "=", "0.3", "\n", "\n", "", "y_test", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "num_classes", ",", "size", "=", "1000", ")", "\n", "X_test", "=", "np", ".", "random", ".", "rand", "(", "1000", ",", "10", ")", "\n", "for", "i", ",", "yy", "in", "enumerate", "(", "y_test", ")", ":", "\n", "            ", "X_test", "[", "i", ",", "yy", "+", "2", "]", "=", "0.1", "\n", "X_test", "[", "i", ",", "yy", "+", "3", "]", "=", "0.2", "\n", "X_test", "[", "i", ",", "yy", "+", "4", "]", "=", "0.3", "\n", "\n", "", "y_train", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_train", ",", "num_classes", ")", "\n", "y_test", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_test", ",", "num_classes", ")", "\n", "\n", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Dense", "(", "64", ",", "activation", "=", "'relu'", ",", "input_dim", "=", "10", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "64", ",", "activation", "=", "'relu'", ")", ")", "\n", "# model.add(Dense(num_classes, activation='softmax'))", "\n", "# model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])", "\n", "model", ".", "add", "(", "Dense", "(", "num_classes", ",", "activation", "=", "'sigmoid'", ")", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'mse'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "", "else", ":", "\n", "        ", "a", "=", "np", ".", "random", ".", "rand", "(", "count", ",", "3", ")", "\n", "# a = np.random.uniform(0, 10, size=(count, 3))", "\n", "X_train", "=", "np", ".", "random", ".", "rand", "(", "count", ",", "10", ")", "\n", "X_train", "[", ":", ",", "2", ":", "5", "]", "=", "a", "\n", "y_train", "=", "np", ".", "sum", "(", "a", ",", "axis", "=", "-", "1", ")", "\n", "\n", "b", "=", "np", ".", "random", ".", "rand", "(", "1000", ",", "3", ")", "\n", "X_test", "=", "np", ".", "random", ".", "rand", "(", "1000", ",", "10", ")", "\n", "X_test", "[", ":", ",", "2", ":", "5", "]", "=", "b", "\n", "y_test", "=", "np", ".", "sum", "(", "b", ",", "axis", "=", "-", "1", ")", "\n", "\n", "model", "=", "Sequential", "(", ")", "\n", "model", ".", "add", "(", "Dense", "(", "64", ",", "activation", "=", "'relu'", ",", "input_dim", "=", "10", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "64", ",", "activation", "=", "'relu'", ")", ")", "\n", "model", ".", "add", "(", "Dense", "(", "1", ")", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'mse'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "\n", "", "model", ".", "fit", "(", "X_train", ",", "y_train", ",", "epochs", "=", "50", ",", "batch_size", "=", "128", ")", "\n", "score", "=", "model", ".", "evaluate", "(", "X_test", ",", "y_test", ",", "batch_size", "=", "128", ")", "\n", "print", "(", "score", ")", "\n", "\n", "# ------- Class activation maps begins here --------", "\n", "\n", "def", "normalize", "(", "x", ")", ":", "\n", "# utility function to normalize a tensor by its L2 norm", "\n", "        ", "return", "x", "/", "(", "K", ".", "sqrt", "(", "K", ".", "mean", "(", "K", ".", "square", "(", "x", ")", ")", ")", "+", "1e-5", ")", "\n", "\n", "", "sample", "=", "np", ".", "array", "(", "[", "X_test", "[", "0", "]", "]", ")", "\n", "if", "problem", "==", "'classification'", ":", "\n", "# loss = K.categorical_crossentropy(y_test[0], model.layers[-1].output)", "\n", "# loss = model.layers[-1].output[0, np.argmax(y_test[0])]", "\n", "        ", "loss", "=", "K", ".", "mean", "(", "K", ".", "square", "(", "model", ".", "layers", "[", "-", "1", "]", ".", "output", "-", "y_test", "[", "0", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "loss", "=", "K", ".", "mean", "(", "K", ".", "square", "(", "model", ".", "layers", "[", "-", "1", "]", ".", "output", "-", "y_test", "[", "0", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "", "dense_input", "=", "model", ".", "layers", "[", "0", "]", ".", "input", "\n", "grads", "=", "normalize", "(", "K", ".", "gradients", "(", "loss", ",", "dense_input", ")", "[", "0", "]", ")", "\n", "gradient_function", "=", "K", ".", "function", "(", "[", "model", ".", "layers", "[", "0", "]", ".", "input", "]", ",", "[", "dense_input", ",", "grads", "]", ")", "\n", "\n", "output", ",", "grads_val", "=", "gradient_function", "(", "[", "sample", "]", ")", "\n", "print", "(", "np", ".", "shape", "(", "output", ")", ",", "np", ".", "shape", "(", "grads_val", ")", ")", "\n", "output", ",", "grads_val", "=", "output", "[", "0", "]", ",", "grads_val", "[", "0", "]", "\n", "\n", "class_activation_map", "=", "np", ".", "abs", "(", "grads_val", ")", "\n", "print", "(", "np", ".", "shape", "(", "class_activation_map", ")", ")", "\n", "print", "(", "output", ",", "grads_val", ")", "\n", "print", "(", "'Mean:'", ",", "np", ".", "mean", "(", "class_activation_map", ")", ",", "'Max:'", ",", "np", ".", "max", "(", "class_activation_map", ")", ")", "\n", "# if np.max(class_activation_map) < 0:", "\n", "#     class_activation_map -= np.mean(class_activation_map)", "\n", "# class_activation_map = np.maximum(class_activation_map, 0)", "\n", "# heatmap = class_activation_map / np.max(class_activation_map)", "\n", "# Normalize class activation map", "\n", "class_activation_map", "=", "(", "class_activation_map", "-", "np", ".", "min", "(", "class_activation_map", ")", ")", "/", "(", "np", ".", "max", "(", "class_activation_map", ")", "-", "np", ".", "min", "(", "class_activation_map", ")", ")", "\n", "# heatmap = class_activation_map", "\n", "heatmap", "=", "np", ".", "square", "(", "class_activation_map", ")", "\n", "print", "(", "np", ".", "min", "(", "class_activation_map", ")", ",", "np", ".", "max", "(", "class_activation_map", ")", ")", "\n", "\n", "plt", ".", "imshow", "(", "np", ".", "expand_dims", "(", "heatmap", ",", "axis", "=", "0", ")", ",", "cmap", "=", "'jet'", ",", "aspect", "=", "'auto'", ")", "\n", "plt", ".", "plot", "(", "(", "output", "-", "np", ".", "min", "(", "output", ")", ")", "/", "(", "np", ".", "max", "(", "output", ")", "-", "np", ".", "min", "(", "output", ")", ")", "-", "0.5", ",", "'w'", ")", "\n", "if", "problem", "==", "'classification'", ":", "\n", "        ", "plt", ".", "title", "(", "'Highlighted regions should be: %d, %d, %d'", "%", "(", "np", ".", "argmax", "(", "y_test", "[", "0", "]", ")", "+", "2", ",", "np", ".", "argmax", "(", "y_test", "[", "0", "]", ")", "+", "3", ",", "np", ".", "argmax", "(", "y_test", "[", "0", "]", ")", "+", "4", ")", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "title", "(", "'Highlighted regions should be: 2, 3, 4'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.healthcare-robotics_mr-gan.others.mr_nn_activation_map_py3.dataset": [[23, 72], ["dict", "enumerate", "numpy.array", "numpy.array", "print", "sys.stdout.flush", "open", "pickle.load", "enumerate", "print", "pickle.load.items", "range", "numpy.shape", "numpy.shape", "len", "np.array.append", "librosa.feature.melspectrogram", "librosa.logamplitude", "np.array.append", "numpy.array", "np.array.append", "np.array.append", "np.array.append", "librosa.logamplitude.flatten", "np.array.append", "np.array.append", "librosa.logamplitude.flatten().tolist", "np.array.append", "librosa.logamplitude.flatten().tolist", "librosa.logamplitude.flatten", "librosa.logamplitude.flatten().tolist", "librosa.logamplitude.flatten", "librosa.logamplitude.flatten"], "function", ["None"], ["def", "dataset", "(", "modalities", "=", "0", ",", "forcetempTime", "=", "4", ",", "contactmicTime", "=", "0.2", ",", "leaveObjectOut", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "materials", "=", "[", "'plastic'", ",", "'glass'", ",", "'fabric'", ",", "'metal'", ",", "'wood'", ",", "'ceramic'", "]", "\n", "X", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "objects", "=", "dict", "(", ")", "\n", "for", "m", ",", "material", "in", "enumerate", "(", "materials", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'Processing'", ",", "material", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "with", "open", "(", "'data_processed/processed_0.1sbefore_%s_times_%.2f_%.2f.pkl'", "%", "(", "material", ",", "forcetempTime", ",", "contactmicTime", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "allData", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "for", "j", ",", "(", "objName", ",", "objData", ")", "in", "enumerate", "(", "allData", ".", "items", "(", ")", ")", ":", "\n", "                ", "if", "leaveObjectOut", ":", "\n", "                    ", "objects", "[", "objName", "]", "=", "{", "'x'", ":", "[", "]", ",", "'y'", ":", "[", "]", "}", "\n", "X", "=", "objects", "[", "objName", "]", "[", "'x'", "]", "\n", "y", "=", "objects", "[", "objName", "]", "[", "'y'", "]", "\n", "", "for", "i", "in", "range", "(", "len", "(", "objData", "[", "'temperature'", "]", ")", ")", ":", "\n", "                    ", "y", ".", "append", "(", "m", ")", "\n", "\n", "if", "modalities", ">", "2", ":", "\n", "# Mel-scaled power (energy-squared) spectrogram", "\n", "                        ", "sr", "=", "48000", "\n", "S", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "np", ".", "array", "(", "objData", "[", "'contact'", "]", "[", "i", "]", ")", ",", "sr", "=", "sr", ",", "n_mels", "=", "128", ")", "\n", "# Convert to log scale (dB)", "\n", "log_S", "=", "librosa", ".", "logamplitude", "(", "S", ",", "ref_power", "=", "np", ".", "max", ")", "\n", "\n", "", "if", "modalities", "==", "0", ":", "\n", "                        ", "X", ".", "append", "(", "objData", "[", "'force0'", "]", "[", "i", "]", "+", "objData", "[", "'force1'", "]", "[", "i", "]", ")", "\n", "", "elif", "modalities", "==", "1", ":", "\n", "                        ", "X", ".", "append", "(", "objData", "[", "'temperature'", "]", "[", "i", "]", ")", "\n", "", "elif", "modalities", "==", "2", ":", "\n", "                        ", "X", ".", "append", "(", "objData", "[", "'temperature'", "]", "[", "i", "]", "+", "objData", "[", "'force0'", "]", "[", "i", "]", "+", "objData", "[", "'force1'", "]", "[", "i", "]", ")", "\n", "", "elif", "modalities", "==", "3", ":", "\n", "                        ", "X", ".", "append", "(", "log_S", ".", "flatten", "(", ")", ")", "\n", "", "elif", "modalities", "==", "4", ":", "\n", "                        ", "X", ".", "append", "(", "objData", "[", "'temperature'", "]", "[", "i", "]", "+", "log_S", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "elif", "modalities", "==", "5", ":", "\n", "                        ", "X", ".", "append", "(", "objData", "[", "'temperature'", "]", "[", "i", "]", "+", "objData", "[", "'force0'", "]", "[", "i", "]", "+", "objData", "[", "'force1'", "]", "[", "i", "]", "+", "log_S", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ")", "\n", "", "elif", "modalities", "==", "6", ":", "\n", "                        ", "X", ".", "append", "(", "objData", "[", "'force0'", "]", "[", "i", "]", "+", "objData", "[", "'force1'", "]", "[", "i", "]", "+", "log_S", ".", "flatten", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "", "", "", "", "", "if", "leaveObjectOut", ":", "\n", "        ", "return", "objects", "\n", "", "else", ":", "\n", "        ", "X", "=", "np", ".", "array", "(", "X", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'X:'", ",", "np", ".", "shape", "(", "X", ")", ",", "'y:'", ",", "np", ".", "shape", "(", "y", ")", ")", "\n", "", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.healthcare-robotics_mr-gan.others.mr_nn_activation_map_py3.mr_nn": [[73, 182], ["numpy.random.seed", "int", "sklearn.preprocessing.StandardScaler", "preprocessing.StandardScaler.fit_transform", "preprocessing.StandardScaler.transform", "sklearn.utils.shuffle", "numpy.concatenate", "numpy.concatenate", "keras.utils.to_categorical", "keras.utils.to_categorical", "keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.models.Model.fit", "numpy.array", "keras.backend.mean", "mr_nn_activation_map_py3.mr_nn.normalize"], "function", ["None"], ["", "", "def", "mr_nn", "(", "X", ",", "y", ",", "percentlabeled", "=", "50", ",", "trainTestSets", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "# Non Deterministic output", "\n", "    ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "randint", "(", "1e9", ")", ")", "\n", "\n", "materials", "=", "[", "'plastic'", ",", "'glass'", ",", "'fabric'", ",", "'metal'", ",", "'wood'", ",", "'ceramic'", "]", "\n", "test_ratio", "=", "200", "*", "len", "(", "materials", ")", "\n", "num_labeled_examples", "=", "int", "(", "10", "*", "percentlabeled", ")", "\n", "\n", "# Split into train and test sets", "\n", "if", "trainTestSets", "is", "None", ":", "\n", "        ", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "X", ",", "y", ",", "test_size", "=", "test_ratio", ",", "stratify", "=", "y", ")", "\n", "", "else", ":", "\n", "        ", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "trainTestSets", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "'Num of class examples in test set:'", ",", "[", "np", ".", "sum", "(", "y_test", "==", "i", ")", "for", "i", "in", "range", "(", "len", "(", "materials", ")", ")", "]", ")", "\n", "print", "(", "'X_train:'", ",", "np", ".", "shape", "(", "X_train", ")", ",", "'y_train:'", ",", "np", ".", "shape", "(", "y_train", ")", ",", "'X_test:'", ",", "np", ".", "shape", "(", "X_test", ")", ",", "'y_test:'", ",", "np", ".", "shape", "(", "y_test", ")", ")", "\n", "\n", "# Scale data to zero mean and unit variance", "\n", "", "scaler", "=", "preprocessing", ".", "StandardScaler", "(", ")", "\n", "X_train", "=", "scaler", ".", "fit_transform", "(", "X_train", ")", "\n", "X_test", "=", "scaler", ".", "transform", "(", "X_test", ")", "\n", "\n", "# Select labeled data", "\n", "X_train", ",", "y_train", "=", "shuffle", "(", "X_train", ",", "y_train", ")", "\n", "x_labeled", "=", "np", ".", "concatenate", "(", "[", "X_train", "[", "y_train", "==", "j", "]", "[", ":", "num_labeled_examples", "]", "for", "j", "in", "range", "(", "len", "(", "materials", ")", ")", "]", ",", "axis", "=", "0", ")", "\n", "y_labeled", "=", "np", ".", "concatenate", "(", "[", "[", "j", "]", "*", "num_labeled_examples", "for", "j", "in", "range", "(", "len", "(", "materials", ")", ")", "]", ",", "axis", "=", "0", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'x_labeled:'", ",", "np", ".", "shape", "(", "x_labeled", ")", ",", "'y_labeled:'", ",", "np", ".", "shape", "(", "y_labeled", ")", ")", "\n", "\n", "", "y_labeled", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_labeled", ",", "len", "(", "materials", ")", ")", "\n", "y_test", "=", "keras", ".", "utils", ".", "to_categorical", "(", "y_test", ",", "len", "(", "materials", ")", ")", "\n", "\n", "inputs", "=", "Input", "(", "shape", "=", "(", "X_train", ".", "shape", "[", "1", "]", ",", ")", ")", "\n", "x", "=", "GaussianNoise", "(", "0.3", ")", "(", "inputs", ")", "\n", "# x = Dense(1000, activation='relu')(x)", "\n", "# x = GaussianNoise(0.5)(x)", "\n", "# x = Dense(500, activation='relu')(x)", "\n", "# x = GaussianNoise(0.5)(x)", "\n", "# x = Dense(250, activation='relu')(x)", "\n", "# x = GaussianNoise(0.5)(x)", "\n", "# x = Dense(250, activation='relu')(x)", "\n", "# x = GaussianNoise(0.5)(x)", "\n", "# x = Dense(250, activation='relu')(x)", "\n", "\n", "x", "=", "Dense", "(", "128", ",", "activation", "=", "'relu'", ")", "(", "x", ")", "\n", "x", "=", "GaussianNoise", "(", "0.5", ")", "(", "x", ")", "\n", "x", "=", "Dense", "(", "64", ",", "activation", "=", "'relu'", ")", "(", "x", ")", "\n", "# outputs = Dense(len(materials))(x)", "\n", "# outputs = Activation('softmax')(outputs)", "\n", "# outputs = Dense(len(materials), activation='softmax')(x)", "\n", "outputs", "=", "Dense", "(", "len", "(", "materials", ")", ",", "activation", "=", "'sigmoid'", ")", "(", "x", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "inputs", ",", "outputs", "=", "outputs", ")", "\n", "model", ".", "compile", "(", "loss", "=", "'mse'", ",", "optimizer", "=", "'adam'", ",", "metrics", "=", "[", "'accuracy'", "]", ")", "\n", "# model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])", "\n", "\n", "# Train on x_labeled, y_labeled. Test on X_test, y_test", "\n", "model", ".", "fit", "(", "x_labeled", ",", "y_labeled", ",", "batch_size", "=", "20", ",", "epochs", "=", "100", ",", "validation_split", "=", "0.0", ",", "verbose", "=", "0", ")", "\n", "testerror", "=", "1.0", "-", "model", ".", "evaluate", "(", "X_test", ",", "y_test", ",", "verbose", "=", "0", ")", "[", "1", "]", "\n", "\n", "# ------- Class activation maps begins here --------", "\n", "def", "normalize", "(", "x", ")", ":", "\n", "# utility function to normalize a tensor by its L2 norm", "\n", "        ", "return", "x", "/", "(", "K", ".", "sqrt", "(", "K", ".", "mean", "(", "K", ".", "square", "(", "x", ")", ")", ")", "+", "1e-5", ")", "\n", "\n", "# sample = np.array([x_labeled[0]])", "\n", "# prediction = model.predict(sample)", "\n", "# predicted_class = np.argmax(prediction)", "\n", "# print prediction, predicted_class", "\n", "# nb_classes = 6", "\n", "# target_layer = lambda x: tf.multiply(x, K.one_hot([predicted_class], nb_classes))", "\n", "# x = model.layers[-1].output", "\n", "# x = Lambda(target_layer, output_shape=lambda y: y)(x)", "\n", "# model_cam = Model(model.layers[0].input, x)", "\n", "# loss = K.sum(model_cam.layers[-1].output)", "\n", "# dense_input = model_cam.layers[0].input", "\n", "# grads = normalize(K.gradients(loss, dense_input)[0])", "\n", "# gradient_function = K.function([model_cam.layers[0].input], [dense_input, grads])", "\n", "\n", "", "sample", "=", "np", ".", "array", "(", "[", "X_test", "[", "0", "]", "]", ")", "\n", "# loss = K.categorical_crossentropy(y_labeled[0], model.layers[-1].output)", "\n", "loss", "=", "K", ".", "mean", "(", "K", ".", "square", "(", "model", ".", "layers", "[", "-", "1", "]", ".", "output", "-", "y_test", "[", "0", "]", ")", ",", "axis", "=", "-", "1", ")", "\n", "dense_input", "=", "model", ".", "layers", "[", "0", "]", ".", "input", "\n", "grads", "=", "normalize", "(", "K", ".", "gradients", "(", "loss", ",", "dense_input", ")", "[", "0", "]", ")", "\n", "gradient_function", "=", "K", ".", "function", "(", "[", "model", ".", "layers", "[", "0", "]", ".", "input", "]", ",", "[", "dense_input", ",", "grads", "]", ")", "\n", "\n", "output", ",", "grads_val", "=", "gradient_function", "(", "[", "sample", "]", ")", "\n", "print", "(", "np", ".", "shape", "(", "output", ")", ",", "np", ".", "shape", "(", "grads_val", ")", ")", "\n", "output", ",", "grads_val", "=", "output", "[", "0", "]", ",", "grads_val", "[", "0", "]", "\n", "\n", "# class_activation_map = output * grads_val", "\n", "class_activation_map", "=", "np", ".", "abs", "(", "grads_val", ")", "\n", "print", "(", "np", ".", "shape", "(", "class_activation_map", ")", ")", "\n", "print", "(", "'Mean:'", ",", "np", ".", "mean", "(", "class_activation_map", ")", ",", "'Max:'", ",", "np", ".", "max", "(", "class_activation_map", ")", ")", "\n", "# if np.max(class_activation_map) < 0:", "\n", "#     class_activation_map -= np.mean(class_activation_map)", "\n", "# class_activation_map = np.maximum(class_activation_map, 0)", "\n", "# heatmap = class_activation_map / np.max(class_activation_map)", "\n", "# Normalize class activation map", "\n", "class_activation_map", "=", "(", "class_activation_map", "-", "np", ".", "min", "(", "class_activation_map", ")", ")", "/", "(", "np", ".", "max", "(", "class_activation_map", ")", "-", "np", ".", "min", "(", "class_activation_map", ")", ")", "\n", "heatmap", "=", "class_activation_map", "\n", "# heatmap = np.square(class_activation_map)", "\n", "print", "(", "np", ".", "min", "(", "class_activation_map", ")", ",", "np", ".", "max", "(", "class_activation_map", ")", ")", "\n", "\n", "plt", ".", "imshow", "(", "np", ".", "expand_dims", "(", "heatmap", ",", "axis", "=", "0", ")", ",", "cmap", "=", "'jet'", ",", "aspect", "=", "'auto'", ")", "\n", "plt", ".", "plot", "(", "(", "output", "-", "np", ".", "min", "(", "output", ")", ")", "/", "(", "np", ".", "max", "(", "output", ")", "-", "np", ".", "min", "(", "output", ")", ")", "-", "0.5", ",", "'w'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "# ------- Class activation maps ends here --------", "\n", "\n", "return", "testerror", "\n", "\n"]]}