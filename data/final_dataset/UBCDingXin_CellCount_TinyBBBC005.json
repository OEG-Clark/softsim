{"home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.ERDCNN.train_cnn.adjust_learning_rate": [[26, 38], ["len", "range"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate \"\"\"", "\n", "lr", "=", "lr_base", "\n", "\n", "num_decays", "=", "len", "(", "lr_decay_epochs", ")", "\n", "for", "decay_i", "in", "range", "(", "num_decays", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epochs", "[", "decay_i", "]", ":", "\n", "            ", "lr", "=", "lr", "*", "lr_decay_factor", "\n", "#end if epoch", "\n", "#end for decay_i", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.ERDCNN.train_cnn.train_cnn": [[40, 126], ["net.cuda.cuda", "unet_density.cuda.cuda", "unet_density.cuda.eval", "unet_mask.cuda.cuda", "unet_mask.cuda.eval", "torch.optim.Adam", "torch.optim.Adam", "torch.MSELoss", "timeit.default_timer", "range", "net.cuda.parameters", "print", "torch.load", "torch.load", "net.cuda.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.set_rng_state", "torch.set_rng_state", "train_cnn.adjust_learning_rate", "enumerate", "train_cnn.test_cnn", "net.cuda.train", "batch_images.type().cuda.type().cuda", "batch_counts.type().cuda.type().cuda", "unet_density.cuda.", "unet_mask.cuda.", "net.cuda.", "nn.MSELoss.", "torch.optim.Adam.zero_grad", "criterion.backward", "torch.optim.Adam.step", "criterion.cpu().item", "os.makedirs", "torch.save", "torch.save", "net.view", "batch_counts.type().cuda.view", "print", "os.path.dirname", "batch_images.type().cuda.type", "batch_counts.type().cuda.type", "criterion.cpu", "net.cuda.state_dict", "torch.optim.Adam.state_dict", "torch.get_rng_state", "torch.get_rng_state", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_fpn_mask.adjust_learning_rate", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.DRDCNN.train_cnn.test_cnn"], ["", "", "def", "train_cnn", "(", "trainloader", ",", "testloader", ",", "max_count", ",", "net", ",", "unet_density", ",", "unet_mask", ",", "path_to_ckpt", "=", "None", ")", ":", "\n", "    ", "'''\n    net: cnn net\n    unet_density: pre-trained unet\n    unet_mask: pre-trained unet\n    '''", "\n", "\n", "# nets", "\n", "net", "=", "net", ".", "cuda", "(", ")", "\n", "unet_density", "=", "unet_density", ".", "cuda", "(", ")", "\n", "unet_density", ".", "eval", "(", ")", "\n", "unet_mask", "=", "unet_mask", ".", "cuda", "(", ")", "\n", "unet_mask", ".", "eval", "(", ")", "\n", "\n", "# define optimizer", "\n", "# optimizer = torch.optim.SGD(net.parameters(), lr=lr_base, weight_decay=weight_decay)", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr_base", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "# criterion", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "resume_epoch", ">", "0", ":", "\n", "        ", "print", "(", "\"Loading ckpt to resume training the CNN >>>\"", ")", "\n", "ckpt_fullpath", "=", "path_to_ckpt", "+", "\"/{}_checkpoint_epoch_{}.pth\"", ".", "format", "(", "cnn_name", ",", "resume_epoch", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_fullpath", ")", "\n", "net", ".", "load_state_dict", "(", "checkpoint", "[", "'net_state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "checkpoint", "[", "'rng_state'", "]", ")", "\n", "steps", "=", "checkpoint", "[", "'steps'", "]", "\n", "", "else", ":", "\n", "        ", "steps", "=", "0", "\n", "\n", "", "start_time", "=", "timeit", ".", "default_timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "resume_epoch", ",", "epochs", ")", ":", "\n", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train_loss", "=", "0", "\n", "\n", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "            ", "net", ".", "train", "(", ")", "\n", "\n", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_counts", "=", "batch_samples", "[", "'count'", "]", "#normalized", "\n", "\n", "batch_size_curr", "=", "batch_images", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size_curr", "==", "batch_counts", ".", "shape", "[", "0", "]", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_counts", "=", "batch_counts", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "\n", "#forward pass", "\n", "batch_recon_maps", "=", "unet_density", "(", "batch_images", ")", "\n", "batch_recon_masks", "=", "unet_mask", "(", "batch_images", ")", "\n", "batch_pred_counts", "=", "net", "(", "batch_recon_maps", ",", "batch_recon_masks", ")", "\n", "loss", "=", "criterion", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ",", "1", ")", ",", "batch_counts", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "#backward pass", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "steps", "+=", "1", "\n", "\n", "if", "steps", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "\"{}: [step {}] [epoch {}/{}] [train loss {:.3f}] [Time {:.3f}]\"", ".", "format", "(", "cnn_name", ",", "steps", ",", "epoch", "+", "1", ",", "epochs", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "timeit", ".", "default_timer", "(", ")", "-", "start_time", ")", ")", "\n", "# end for batch_idx", "\n", "\n", "", "", "_", ",", "_", "=", "test_cnn", "(", "testloader", ",", "max_count", ",", "net", ",", "unet_density", ",", "unet_mask", ",", "verbose", "=", "True", ")", "\n", "#end for epoch", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "(", "epoch", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "            ", "save_file", "=", "path_to_ckpt", "+", "\"/{}_checkpoint_epoch_{}.pth\"", ".", "format", "(", "cnn_name", ",", "epoch", "+", "1", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'steps'", ":", "steps", ",", "\n", "'net_state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'rng_state'", ":", "torch", ".", "get_rng_state", "(", ")", "\n", "}", ",", "save_file", ")", "\n", "#end for epoch", "\n", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.ERDCNN.train_cnn.test_cnn": [[128, 166], ["net.eval.eval", "unet_density.eval.eval", "unet_mask.eval.eval", "torch.MSELoss", "torch.L1Loss", "math.sqrt", "torch.no_grad", "torch.no_grad", "enumerate", "len", "print", "batch_images.type().cuda.type().cuda", "batch_counts.type().cuda.type().cuda", "unet_density.eval.", "unet_mask.eval.", "net.eval.", "nn.MSELoss.", "nn.L1Loss.", "square_error.item", "absolute_error.item", "len", "net.view", "batch_counts.type().cuda.view", "net.view", "batch_counts.type().cuda.view", "batch_images.type().cuda.type", "batch_counts.type().cuda.type"], "function", ["None"], ["", "def", "test_cnn", "(", "testloader", ",", "max_count", ",", "net", ",", "unet_density", ",", "unet_mask", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "net", "=", "net", ".", "eval", "(", ")", "\n", "unet_density", "=", "unet_density", ".", "eval", "(", ")", "\n", "unet_mask", "=", "unet_mask", ".", "eval", "(", ")", "\n", "\n", "# criterion", "\n", "square_error", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "absolute_error", "=", "nn", ".", "L1Loss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n", "test_rmse", "=", "0", "\n", "test_mae", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_counts", "=", "batch_samples", "[", "'count'", "]", "#unnormalized", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_counts", "=", "batch_counts", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "\n", "#forward pass", "\n", "batch_recon_maps", "=", "unet_density", "(", "batch_images", ")", "\n", "batch_recon_masks", "=", "unet_mask", "(", "batch_images", ")", "\n", "batch_pred_counts", "=", "net", "(", "batch_recon_maps", ",", "batch_recon_masks", ")", "\n", "batch_pred_counts", "*=", "max_count", "#back to the original scale", "\n", "\n", "batch_sum_of_square_error", "=", "square_error", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ",", "1", ")", ",", "batch_counts", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "batch_sum_of_absolute_error", "=", "absolute_error", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ",", "1", ")", ",", "batch_counts", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "test_rmse", "+=", "batch_sum_of_square_error", ".", "item", "(", ")", "\n", "test_mae", "+=", "batch_sum_of_absolute_error", ".", "item", "(", ")", "\n", "#end for batch_idx", "\n", "", "", "test_rmse", "=", "math", ".", "sqrt", "(", "test_rmse", "/", "len", "(", "testloader", ".", "dataset", ")", ")", "\n", "test_mae", "=", "test_mae", "/", "len", "(", "testloader", ".", "dataset", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'====> Test set RMSE: %.4f; Test set MAE: %.4f'", "%", "(", "test_rmse", ",", "test_mae", ")", ")", "\n", "\n", "", "return", "test_rmse", ",", "test_mae", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.ERDCNN.opts.prepare_options": [[4, 58], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "prepare_options", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "''' Overall settings '''", "\n", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--path_vgg_dataset'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--path_tinybbbc005'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "2020", ",", "metavar", "=", "'S'", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--experiment_name'", ",", "type", "=", "str", ",", "default", "=", "'exp1'", ")", "\n", "\n", "''' Datast Settings '''", "\n", "parser", ".", "add_argument", "(", "'--num_train'", ",", "type", "=", "int", ",", "default", "=", "2400", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of training samples'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_channels'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_height'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_width'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--deleted_counts'", ",", "type", "=", "str", ",", "default", "=", "'None'", ")", "\n", "\n", "''' UNET Density Settings '''", "\n", "parser", ".", "add_argument", "(", "'--unet1_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_batch_size_train'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_lr_base'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'base learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_lr_decay_factor'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'100_150'", ",", "help", "=", "'decay lr at which epoch; separate by _'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_transform'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'data augmentation'", ")", "\n", "\n", "''' UNET Mask Settings '''", "\n", "parser", ".", "add_argument", "(", "'--unet2_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_batch_size_train'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_lr_base'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'base learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_lr_decay_factor'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'100_150'", ",", "help", "=", "'decay lr at which epoch; separate by _'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_transform'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'data augmentation'", ")", "\n", "\n", "''' DRCNN Settings '''", "\n", "parser", ".", "add_argument", "(", "'--cnn_name'", ",", "type", "=", "str", ",", "default", "=", "\"VGG19\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_batch_size_train'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_batch_size_test'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_lr_base'", ",", "type", "=", "float", ",", "default", "=", "1e-2", ",", "help", "=", "'base learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_lr_decay_factor'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'100_150'", ",", "help", "=", "'decay lr at which epoch; separate by _'", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_transform'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'data augmentation'", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.ERDCNN.train_unet_mask.adjust_learning_rate": [[27, 39], ["len", "range"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate \"\"\"", "\n", "lr", "=", "lr_base", "\n", "\n", "num_decays", "=", "len", "(", "lr_decay_epochs", ")", "\n", "for", "decay_i", "in", "range", "(", "num_decays", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epochs", "[", "decay_i", "]", ":", "\n", "            ", "lr", "=", "lr", "*", "lr_decay_factor", "\n", "#end if epoch", "\n", "#end for decay_i", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.ERDCNN.train_unet_mask.train_unet_mask": [[41, 134], ["torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "min", "torchvision.utils.save_image", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "torchvision.utils.save_image", "unet.cuda.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.BCEWithLogitsLoss", "timeit.default_timer", "range", "int", "unet.cuda.parameters", "print", "torch.load", "torch.load", "torch.load", "unet.cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "train_unet_mask.adjust_learning_rate", "enumerate", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "numpy.sqrt", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "unet.cuda.train", "batch_images.type().cuda.type().cuda", "batch_true_mask.type().cuda.type().cuda", "unet.cuda.", "nn.BCEWithLogitsLoss.", "torch.optim.SGD.zero_grad", "criterion.backward", "torch.optim.SGD.step", "criterion.cpu().item", "os.makedirs", "torch.save", "torch.save", "torch.save", "unet.view", "batch_true_mask.type().cuda.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torchvision.utils.save_image", "print", "os.path.dirname", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "batch_images.type().cuda.type", "batch_true_mask.type().cuda.type", "batch_true_mask.type().cuda.max", "batch_true_mask.type().cuda.min", "criterion.cpu", "torch.no_grad", "torch.no_grad", "torch.no_grad", "unet.cuda.", "unet.cpu", "unet.cuda.state_dict", "torch.optim.SGD.state_dict", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_fpn_mask.adjust_learning_rate"], ["", "", "def", "train_unet_mask", "(", "trainloader", ",", "test_images", ",", "test_masks", ",", "unet", ",", "save_images_folder", ",", "path_to_ckpt", "=", "None", ")", ":", "\n", "\n", "# evaluate unet on test_images (assume unnormalized)", "\n", "    ", "test_images", "=", "test_images", "/", "255.0", "\n", "test_images", "=", "torch", ".", "from_numpy", "(", "test_images", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "n_row", "=", "min", "(", "4", ",", "int", "(", "np", ".", "sqrt", "(", "test_images", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "save_image", "(", "test_images", ".", "data", ",", "save_images_folder", "+", "'/test_images.png'", ",", "nrow", "=", "n_row", ",", "normalize", "=", "False", ")", "\n", "test_masks", "=", "torch", ".", "from_numpy", "(", "test_masks", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "save_image", "(", "test_masks", ".", "data", ",", "save_images_folder", "+", "'/test_masks.png'", ",", "nrow", "=", "n_row", ",", "normalize", "=", "False", ")", "\n", "\n", "# nets", "\n", "unet", "=", "unet", ".", "cuda", "(", ")", "\n", "\n", "# define optimizer", "\n", "# optimizer = torch.optim.Adam(unet.parameters(), lr = lr_base, betas=(0.5, 0.999), weight_decay=weight_decay)", "\n", "# optimizer = torch.optim.RMSprop(unet.parameters(), lr=lr_base, alpha=0.99, eps=1e-08, weight_decay=weight_decay, momentum=0, centered=False)", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "unet", ".", "parameters", "(", ")", ",", "lr", "=", "lr_base", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "# criterion", "\n", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "# criterion = nn.BCELoss()", "\n", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "resume_epoch", ">", "0", ":", "\n", "        ", "print", "(", "\"Loading ckpt to resume training U-net >>>\"", ")", "\n", "ckpt_fullpath", "=", "path_to_ckpt", "+", "\"/unet_checkpoint_epoch_{}.pth\"", ".", "format", "(", "resume_epoch", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_fullpath", ")", "\n", "unet", ".", "load_state_dict", "(", "checkpoint", "[", "'net_state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "checkpoint", "[", "'rng_state'", "]", ")", "\n", "steps", "=", "checkpoint", "[", "'steps'", "]", "\n", "", "else", ":", "\n", "        ", "steps", "=", "0", "\n", "\n", "", "start_time", "=", "timeit", ".", "default_timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "resume_epoch", ",", "epochs", ")", ":", "\n", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train_loss", "=", "0", "\n", "\n", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "            ", "unet", ".", "train", "(", ")", "\n", "\n", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_true_mask", "=", "batch_samples", "[", "'mask'", "]", "#already normalized to [0,1]", "\n", "\n", "batch_size_curr", "=", "batch_images", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size_curr", "==", "batch_true_mask", ".", "shape", "[", "0", "]", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_true_mask", "=", "batch_true_mask", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "assert", "batch_true_mask", ".", "max", "(", ")", "<=", "1", "and", "batch_true_mask", ".", "min", "(", ")", ">=", "0", "\n", "\n", "#forward pass", "\n", "batch_recon_mask", "=", "unet", "(", "batch_images", ")", "\n", "loss", "=", "criterion", "(", "batch_recon_mask", ".", "view", "(", "-", "1", ")", ",", "batch_true_mask", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "\n", "#backward pass", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "steps", "+=", "1", "\n", "\n", "if", "steps", "%", "100", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "test_batch_recon_mask", "=", "unet", "(", "test_images", ")", "\n", "", "test_batch_recon_mask", "=", "torch", ".", "sigmoid", "(", "test_batch_recon_mask", ".", "cpu", "(", ")", ")", "\n", "test_batch_recon_mask", "[", "test_batch_recon_mask", ">=", "0.5", "]", "=", "1", "\n", "test_batch_recon_mask", "[", "test_batch_recon_mask", "<", "0.5", "]", "=", "0", "\n", "save_image", "(", "test_batch_recon_mask", ".", "data", ",", "save_images_folder", "+", "'/{}.png'", ".", "format", "(", "steps", ")", ",", "nrow", "=", "n_row", ",", "normalize", "=", "True", ")", "\n", "\n", "", "if", "steps", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "\"U-net (mask): [step {}] [epoch {}/{}] [train loss {}] [Time {}]\"", ".", "format", "(", "steps", ",", "epoch", "+", "1", ",", "epochs", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "timeit", ".", "default_timer", "(", ")", "-", "start_time", ")", ")", "\n", "# end for batch_idx", "\n", "\n", "", "", "if", "path_to_ckpt", "is", "not", "None", "and", "(", "epoch", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "            ", "save_file", "=", "path_to_ckpt", "+", "\"/unet_checkpoint_epoch_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'steps'", ":", "steps", ",", "\n", "'net_state_dict'", ":", "unet", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'rng_state'", ":", "torch", ".", "get_rng_state", "(", ")", "\n", "}", ",", "save_file", ")", "\n", "#end for epoch", "\n", "\n", "", "", "return", "unet", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.ERDCNN.train_unet_density.adjust_learning_rate": [[26, 38], ["len", "range"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate \"\"\"", "\n", "lr", "=", "lr_base", "\n", "\n", "num_decays", "=", "len", "(", "lr_decay_epochs", ")", "\n", "for", "decay_i", "in", "range", "(", "num_decays", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epochs", "[", "decay_i", "]", ":", "\n", "            ", "lr", "=", "lr", "*", "lr_decay_factor", "\n", "#end if epoch", "\n", "#end for decay_i", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.ERDCNN.train_unet_density.train_unet_density": [[40, 126], ["torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "min", "torchvision.utils.save_image", "unet.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.MSELoss", "timeit.default_timer", "range", "int", "unet.cuda.parameters", "print", "torch.load", "torch.load", "unet.cuda.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.set_rng_state", "torch.set_rng_state", "train_unet_density.adjust_learning_rate", "enumerate", "torch.from_numpy().type", "torch.from_numpy().type", "numpy.sqrt", "unet.cuda.train", "batch_images.type().cuda.type().cuda", "batch_true_maps.type().cuda.type().cuda", "unet.cuda.", "nn.MSELoss.", "torch.optim.Adam.zero_grad", "criterion.backward", "torch.optim.Adam.step", "criterion.cpu().item", "os.makedirs", "torch.save", "torch.save", "torchvision.utils.save_image", "torchvision.utils.save_image", "print", "os.path.dirname", "torch.from_numpy", "torch.from_numpy", "batch_images.type().cuda.type", "batch_true_maps.type().cuda.type", "criterion.cpu", "torch.no_grad", "torch.no_grad", "unet.cuda.", "unet.cuda.state_dict", "torch.optim.Adam.state_dict", "torch.get_rng_state", "torch.get_rng_state", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_fpn_mask.adjust_learning_rate"], ["", "", "def", "train_unet_density", "(", "trainloader", ",", "test_images", ",", "unet", ",", "save_images_folder", ",", "path_to_ckpt", "=", "None", ")", ":", "\n", "\n", "# evaluate unet on test_images (assume unnormalized)", "\n", "    ", "test_images", "=", "test_images", "/", "255.0", "\n", "test_images", "=", "(", "test_images", "-", "0.5", ")", "/", "0.5", "\n", "test_images", "=", "torch", ".", "from_numpy", "(", "test_images", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "n_row", "=", "min", "(", "4", ",", "int", "(", "np", ".", "sqrt", "(", "test_images", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "save_image", "(", "test_images", ".", "data", ",", "save_images_folder", "+", "'/test_images.png'", ",", "nrow", "=", "n_row", ",", "normalize", "=", "True", ")", "\n", "\n", "# nets", "\n", "unet", "=", "unet", ".", "cuda", "(", ")", "\n", "\n", "# define optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "unet", ".", "parameters", "(", ")", ",", "lr", "=", "lr_base", ",", "betas", "=", "(", "0.0", ",", "0.999", ")", ",", "weight_decay", "=", "weight_decay", ")", "\n", "# optimizer = torch.optim.RMSprop(unet.parameters(), lr=lr_base, alpha=0.99, eps=1e-08, weight_decay=weight_decay, momentum=0, centered=False)", "\n", "\n", "# criterion", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "resume_epoch", ">", "0", ":", "\n", "        ", "print", "(", "\"Loading ckpt to resume training U-net >>>\"", ")", "\n", "ckpt_fullpath", "=", "path_to_ckpt", "+", "\"/unet_checkpoint_epoch_{}.pth\"", ".", "format", "(", "resume_epoch", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_fullpath", ")", "\n", "unet", ".", "load_state_dict", "(", "checkpoint", "[", "'net_state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "checkpoint", "[", "'rng_state'", "]", ")", "\n", "steps", "=", "checkpoint", "[", "'steps'", "]", "\n", "", "else", ":", "\n", "        ", "steps", "=", "0", "\n", "\n", "", "start_time", "=", "timeit", ".", "default_timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "resume_epoch", ",", "epochs", ")", ":", "\n", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train_loss", "=", "0", "\n", "\n", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "            ", "unet", ".", "train", "(", ")", "\n", "\n", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_true_maps", "=", "batch_samples", "[", "'density_map'", "]", "\n", "\n", "batch_size_curr", "=", "batch_images", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size_curr", "==", "batch_true_maps", ".", "shape", "[", "0", "]", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_true_maps", "=", "batch_true_maps", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "\n", "#forward pass", "\n", "batch_recon_maps", "=", "unet", "(", "batch_images", ")", "\n", "loss", "=", "criterion", "(", "batch_recon_maps", ",", "batch_true_maps", ")", "\n", "\n", "#backward pass", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "steps", "+=", "1", "\n", "\n", "if", "steps", "%", "100", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "test_batch_recon_maps", "=", "unet", "(", "test_images", ")", "\n", "test_batch_recon_maps", "=", "test_batch_recon_maps", "/", "255.0", "\n", "", "save_image", "(", "test_batch_recon_maps", ".", "data", ",", "save_images_folder", "+", "'/tiny3bc005_{}.png'", ".", "format", "(", "steps", ")", ",", "nrow", "=", "n_row", ",", "normalize", "=", "True", ")", "\n", "save_image", "(", "batch_recon_maps", "[", "0", ":", "n_row", "**", "2", "]", ".", "data", ",", "save_images_folder", "+", "'/vgg_{}.png'", ".", "format", "(", "steps", ")", ",", "nrow", "=", "n_row", ",", "normalize", "=", "True", ")", "\n", "\n", "", "if", "steps", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "\"U-net (density): [step {}] [epoch {}/{}] [train loss {}] [Time {}]\"", ".", "format", "(", "steps", ",", "epoch", "+", "1", ",", "epochs", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "timeit", ".", "default_timer", "(", ")", "-", "start_time", ")", ")", "\n", "# end for batch_idx", "\n", "\n", "", "", "if", "path_to_ckpt", "is", "not", "None", "and", "(", "epoch", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "            ", "save_file", "=", "path_to_ckpt", "+", "\"/unet_checkpoint_epoch_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'steps'", ":", "steps", ",", "\n", "'net_state_dict'", ":", "unet", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'rng_state'", ":", "torch", ".", "get_rng_state", "(", ")", "\n", "}", ",", "save_file", ")", "\n", "#end for epoch", "\n", "\n", "", "", "return", "unet", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.ERDCNN.utils.IMGs_dataset.__init__": [[15, 43], ["super().__init__", "numpy.mean", "numpy.std", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "images", ",", "dot_annots", "=", "None", ",", "masks", "=", "None", ",", "counts", "=", "None", ",", "normalize", "=", "True", ",", "transform", "=", "False", ")", ":", "\n", "        ", "'''\n        images: numpy array images;\n        dot_annots: dot annotations; numpy array images\n        masks: segmentation masks\n        counts: cell counts\n        normalize: normalize images to [-1,1]\n        transform: random transform on images; horizontal and vertical flip, random rotation (90,180,270)\n        '''", "\n", "\n", "super", "(", "IMGs_dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "images", "=", "images", "\n", "self", ".", "image_mean", "=", "np", ".", "mean", "(", "images", ")", "\n", "self", ".", "image_std", "=", "np", ".", "std", "(", "images", ")", "\n", "self", ".", "n_images", "=", "len", "(", "self", ".", "images", ")", "\n", "self", ".", "counts", "=", "counts", "\n", "self", ".", "dot_annots", "=", "dot_annots", "\n", "self", ".", "masks", "=", "masks", "\n", "\n", "if", "self", ".", "counts", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "n_images", "==", "len", "(", "self", ".", "counts", ")", "\n", "", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "n_images", "==", "len", "(", "self", ".", "dot_annots", ")", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "n_images", "==", "len", "(", "self", ".", "masks", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.ERDCNN.utils.IMGs_dataset.__getitem__": [[44, 95], ["PIL.Image.fromarray", "numpy.random.choice", "torchvision.transforms.functional.rotate", "TransHFlip", "TransVFlip", "numpy.array", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "numpy.uint8", "numpy.array", "PIL.Image.fromarray", "torchvision.transforms.functional.rotate", "TransHFlip", "TransVFlip", "numpy.array", "PIL.Image.fromarray", "torchvision.transforms.functional.rotate", "TransHFlip", "TransVFlip", "numpy.array", "numpy.uint8", "numpy.uint8"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "## for grey scale only", "\n", "        ", "image", "=", "self", ".", "images", "[", "index", "]", "\n", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "            ", "dot_annot", "=", "self", ".", "dot_annots", "[", "index", "]", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "masks", "[", "index", "]", "\n", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "image_pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", "[", "0", "]", ")", ",", "mode", "=", "'L'", ")", "#H * W", "\n", "rotation_degree", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "array", "(", "[", "0", ",", "90", ",", "180", ",", "270", "]", ")", ")", "\n", "image_pil", "=", "torchvision", ".", "transforms", ".", "functional", ".", "rotate", "(", "image_pil", ",", "rotation_degree", ")", "\n", "image_pil", "=", "TransHFlip", "(", "image_pil", ")", "\n", "image_pil", "=", "TransVFlip", "(", "image_pil", ")", "\n", "image", "[", "0", "]", "=", "np", ".", "array", "(", "image_pil", ")", "\n", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "                ", "dot_annot_pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "dot_annot", "[", "0", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "dot_annot_pil", "=", "torchvision", ".", "transforms", ".", "functional", ".", "rotate", "(", "dot_annot_pil", ",", "rotation_degree", ")", "\n", "dot_annot_pil", "=", "TransHFlip", "(", "dot_annot_pil", ")", "\n", "dot_annot_pil", "=", "TransVFlip", "(", "dot_annot_pil", ")", "\n", "dot_annot", "[", "0", "]", "=", "np", ".", "array", "(", "dot_annot_pil", ")", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "                ", "mask_pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "mask", "[", "0", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "mask_pil", "=", "torchvision", ".", "transforms", ".", "functional", ".", "rotate", "(", "mask_pil", ",", "rotation_degree", ")", "\n", "mask_pil", "=", "TransHFlip", "(", "mask_pil", ")", "\n", "mask_pil", "=", "TransVFlip", "(", "mask_pil", ")", "\n", "mask", "[", "0", "]", "=", "np", ".", "array", "(", "mask_pil", ")", "\n", "\n", "", "", "if", "self", ".", "normalize", ":", "\n", "            ", "image", "=", "image", "/", "255.0", "\n", "image", "=", "(", "image", "-", "0.5", ")", "/", "0.5", "\n", "# image = (image-self.image_mean)/self.image_std", "\n", "\n", "", "if", "self", ".", "counts", "is", "not", "None", ":", "\n", "            ", "count", "=", "self", ".", "counts", "[", "index", "]", "\n", "\n", "", "output", "=", "{", "}", "\n", "output", "[", "'image'", "]", "=", "image", "\n", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "## Gaussian filter setting is based on line 53-54 of https://github.com/WeidiXie/cell_counting_v2/blob/master/train.py", "\n", "            ", "density_map", "=", "100.0", "*", "(", "dot_annot", "[", "0", "]", ">", "0", ")", "\n", "density_map", "=", "scipy", ".", "ndimage", ".", "gaussian_filter", "(", "density_map", ",", "sigma", "=", "(", "1", ",", "1", ")", ",", "order", "=", "0", ")", "\n", "density_map", "=", "density_map", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "output", "[", "'density_map'", "]", "=", "density_map", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "            ", "output", "[", "'mask'", "]", "=", "mask", "\n", "", "if", "self", ".", "counts", "is", "not", "None", ":", "\n", "            ", "output", "[", "'count'", "]", "=", "count", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.ERDCNN.utils.IMGs_dataset.__len__": [[96, 98], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_images", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.ERDCNN.utils.PlotLoss": [[105, 118], ["numpy.arange", "matplotlib.switch_backend", "matplotlib.style.use", "matplotlib.figure", "matplotlib.subplot", "plt.subplot.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.savefig", "numpy.array", "len"], "function", ["None"], ["", "", "def", "PlotLoss", "(", "loss", ",", "filename", ")", ":", "\n", "    ", "x_axis", "=", "np", ".", "arange", "(", "start", "=", "1", ",", "stop", "=", "len", "(", "loss", ")", "+", "1", ")", "\n", "plt", ".", "switch_backend", "(", "'agg'", ")", "\n", "mpl", ".", "style", ".", "use", "(", "'seaborn'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "111", ")", "\n", "ax", ".", "plot", "(", "x_axis", ",", "np", ".", "array", "(", "loss", ")", ")", "\n", "plt", ".", "xlabel", "(", "\"epoch\"", ")", "\n", "plt", ".", "ylabel", "(", "\"loss\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "#ax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15),  shadow=True, ncol=3)", "\n", "#plt.title('Training Loss')", "\n", "plt", ".", "savefig", "(", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.vgg.VGG.__init__": [[35, 49], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.Sequential", "torch.Sequential", "math.floor", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "math.floor"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.vgg.VGG._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_density", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", ")", "\n", "\n", "self", ".", "input_mask", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.vgg.VGG._make_layers": [[51, 67], ["torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "convs", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "\n", "in_dim", "=", "512", "*", "math", ".", "floor", "(", "img_size", "[", "0", "]", "/", "2", "**", "5", ")", "*", "math", ".", "floor", "(", "img_size", "[", "1", "]", "/", "2", "**", "5", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "1024", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "1", ")", ",", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.vgg.VGG.forward": [[68, 73], ["vgg.VGG.convs", "vgg.VGG.view", "vgg.VGG.dense", "vgg.VGG.size"], "methods", ["None"], ["nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "64", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask.UNet_mask.__init__": [[14, 26], ["torch.Module.__init__", "unet_mask.inconv", "unet_mask.down", "unet_mask.down", "unet_mask.down", "unet_mask.down", "unet_mask.up", "unet_mask.up", "unet_mask.up", "unet_mask.up", "unet_mask.outconv"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_channels", "=", "1", ",", "n_classes", "=", "1", ",", "bilinear", "=", "False", ")", ":", "\n", "        ", "super", "(", "UNet_mask", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inc", "=", "inconv", "(", "n_channels", ",", "64", ")", "\n", "self", ".", "down1", "=", "down", "(", "64", ",", "128", ")", "\n", "self", ".", "down2", "=", "down", "(", "128", ",", "256", ")", "\n", "self", ".", "down3", "=", "down", "(", "256", ",", "512", ")", "\n", "self", ".", "down4", "=", "down", "(", "512", ",", "512", ")", "\n", "self", ".", "up1", "=", "up", "(", "1024", ",", "256", ",", "bilinear", ")", "\n", "self", ".", "up2", "=", "up", "(", "512", ",", "128", ",", "bilinear", ")", "\n", "self", ".", "up3", "=", "up", "(", "256", ",", "64", ",", "bilinear", ")", "\n", "self", ".", "up4", "=", "up", "(", "128", ",", "64", ",", "bilinear", ")", "\n", "self", ".", "outc", "=", "outconv", "(", "64", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask.UNet_mask.forward": [[27, 39], ["unet_mask.UNet_mask.inc", "unet_mask.UNet_mask.down1", "unet_mask.UNet_mask.down2", "unet_mask.UNet_mask.down3", "unet_mask.UNet_mask.down4", "unet_mask.UNet_mask.up1", "unet_mask.UNet_mask.up2", "unet_mask.UNet_mask.up3", "unet_mask.UNet_mask.up4", "unet_mask.UNet_mask.outc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "inc", "(", "x", ")", "\n", "x2", "=", "self", ".", "down1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "down2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "down3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "down4", "(", "x4", ")", "\n", "x", "=", "self", ".", "up1", "(", "x5", ",", "x4", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "x3", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "x2", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "x1", ")", "\n", "x", "=", "self", ".", "outc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask.double_conv.__init__": [[43, 52], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "double_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_ch", ",", "out_ch", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask.double_conv.forward": [[54, 57], ["unet_mask.double_conv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask.inconv.__init__": [[61, 64], ["torch.Module.__init__", "unet_mask.double_conv"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "inconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "double_conv", "(", "in_ch", ",", "out_ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask.inconv.forward": [[65, 68], ["unet_mask.inconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask.down.__init__": [[72, 77], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "unet_mask.double_conv"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "down", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mpconv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "\n", "double_conv", "(", "in_ch", ",", "out_ch", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask.down.forward": [[79, 82], ["unet_mask.down.mpconv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "mpconv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask.up.__init__": [[86, 93], ["torch.Module.__init__", "unet_mask.double_conv", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ",", "bilinear", "=", "False", ")", ":", "\n", "        ", "super", "(", "up", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "bilinear", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_ch", "//", "2", ",", "in_ch", "//", "2", ",", "2", ",", "stride", "=", "2", ")", "\n", "", "self", ".", "conv", "=", "double_conv", "(", "in_ch", ",", "out_ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask.up.forward": [[94, 103], ["unet_mask.up.up", "torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_mask.up.conv", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "# input is CHW", "\n", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "(", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", ")", ")", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask.outconv.__init__": [[107, 110], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["def", "__init__", "(", "self", ",", "in_ch", ",", "out_ch", ")", ":", "\n", "        ", "super", "(", "outconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_ch", ",", "out_ch", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask.outconv.forward": [[111, 114], ["unet_mask.outconv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_density.UNet_density.__init__": [[18, 59], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc_in", "=", "1", ",", "nc_out", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "\n", "# conv 1: down", "\n", "nn", ".", "Conv2d", "(", "nc_in", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 256", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#128", "\n", "\n", "# conv 2: down", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 128", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#64", "\n", "\n", "# conv 3: down", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 64", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#32", "\n", "\n", "# conv 4", "\n", "nn", ".", "Conv2d", "(", "128", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 32", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 5: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 64", "\n", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 64", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 6: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 128", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 128", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 7: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 256", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 256", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# output", "\n", "nn", ".", "Conv2d", "(", "32", ",", "nc_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "# nn.ReLU()", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_density.UNet_density.forward": [[63, 68], ["unet_density.UNet_density.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "main", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask (backup).UNet_mask.__init__": [[18, 66], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc_in", "=", "1", ",", "nc_out", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "\n", "# conv 1: down", "\n", "nn", ".", "Conv2d", "(", "nc_in", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 256", "\n", "# nn.BatchNorm2d(32),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#128", "\n", "\n", "# conv 2: down", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 128", "\n", "# nn.BatchNorm2d(64),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#64", "\n", "\n", "# conv 3: down", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 64", "\n", "# nn.BatchNorm2d(128),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#32", "\n", "\n", "# conv 4", "\n", "nn", ".", "Conv2d", "(", "128", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 32", "\n", "# nn.BatchNorm2d(512),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 5: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 64", "\n", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 64", "\n", "# nn.BatchNorm2d(128),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 6: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 128", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 128", "\n", "# nn.BatchNorm2d(64),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 7: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 256", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 256", "\n", "# nn.BatchNorm2d(32),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# output", "\n", "nn", ".", "Conv2d", "(", "32", ",", "nc_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "# nn.Sigmoid()", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_mask (backup).UNet_mask.forward": [[70, 75], ["unet_mask (backup).UNet_mask.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "main", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_density (backup).UNet_density.__init__": [[18, 59], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc_in", "=", "1", ",", "nc_out", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "\n", "# conv 1: down", "\n", "nn", ".", "Conv2d", "(", "nc_in", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 256", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#128", "\n", "\n", "# conv 2: down", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 128", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#64", "\n", "\n", "# conv 3: down", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 64", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#32", "\n", "\n", "# conv 4", "\n", "nn", ".", "Conv2d", "(", "128", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 32", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 5: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 64", "\n", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 64", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 6: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 128", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 128", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 7: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 256", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 256", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# output", "\n", "nn", ".", "Conv2d", "(", "32", ",", "nc_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "# nn.ReLU()", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet_density (backup).UNet_density.forward": [[63, 68], ["unet_density (backup).UNet_density.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "main", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.BasicBlock.__init__": [[26, 38], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "#if stride=1, h=h; if stride=2, h=floor(h/2+1/2)", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "#h=h", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "#h=(h-1)/s+1", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.BasicBlock.forward": [[40, 46], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.Bottleneck.__init__": [[51, 65], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.Bottleneck.forward": [[67, 74], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet.__init__": [[77, 102], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.ResNet._make_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "math.floor", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "math.floor"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "24", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nc", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "# h=h", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", ",", "# h=h", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "#h=h/2; 128; does not exist in original ResNet model", "\n", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", ",", "# ResNet34: h=floor(h/2+1/2); 64", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "#h=h/2; 32; does not exist in original ResNet model", "\n", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", ",", "# ResNet34: h=floor(h/2+1/2); 16", "\n", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", ",", "# ResNet34: h=floor(h/2+1/2);8", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "4", ")", "#h/4; 2", "\n", ")", "\n", "\n", "in_dim", "=", "512", "*", "math", ".", "floor", "(", "img_size", "[", "0", "]", "/", "2", "**", "7", ")", "*", "math", ".", "floor", "(", "img_size", "[", "1", "]", "/", "2", "**", "7", ")", "*", "block", ".", "expansion", "#in original ResNet model, in_dim=512*block.expansion", "\n", "if", "num_classes", ">", "1", ":", "#classification", "\n", "            ", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "in_dim", ",", "num_classes", ")", "\n", "", "else", ":", "#regression", "\n", "            ", "self", ".", "dense", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "num_classes", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet._make_layer": [[105, 112], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet.forward": [[113, 118], ["resnet.ResNet.main", "features.view.view.view", "resnet.ResNet.dense", "features.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "main", "(", "x", ")", "\n", "features", "=", "features", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "dense", "(", "features", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet18": [[119, 121], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "num_classes", "=", "24", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet34": [[122, 124], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", "num_classes", "=", "24", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet50": [[125, 127], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", "num_classes", "=", "24", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet101": [[128, 130], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", "num_classes", "=", "24", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet152": [[131, 133], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", "num_classes", "=", "24", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet.UNet.__init__": [[18, 59], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc_in", "=", "1", ",", "nc_out", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "\n", "# conv 1: down", "\n", "nn", ".", "Conv2d", "(", "nc_in", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 256", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#128", "\n", "\n", "# conv 2: down", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 128", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#64", "\n", "\n", "# conv 3: down", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 64", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#32", "\n", "\n", "# conv 4", "\n", "nn", ".", "Conv2d", "(", "128", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 32", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 5: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 64", "\n", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 64", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 6: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 128", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 128", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 7: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 256", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 256", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# output", "\n", "nn", ".", "Conv2d", "(", "32", ",", "nc_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "# nn.ReLU()", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet.UNet.forward": [[63, 68], ["unet.UNet.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "main", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet (backup).UNet.__init__": [[18, 59], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nc_in", "=", "1", ",", "nc_out", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "\n", "# conv 1: down", "\n", "nn", ".", "Conv2d", "(", "nc_in", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 256", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#128", "\n", "\n", "# conv 2: down", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 128", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#64", "\n", "\n", "# conv 3: down", "\n", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 64", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", ",", "#32", "\n", "\n", "# conv 4", "\n", "nn", ".", "Conv2d", "(", "128", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 32", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 5: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 64", "\n", "nn", ".", "Conv2d", "(", "512", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 64", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 6: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 128", "\n", "nn", ".", "Conv2d", "(", "128", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 128", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# conv 7: up", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", ",", "# h=h*2; 256", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "#h=h; 256", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "# output", "\n", "nn", ".", "Conv2d", "(", "32", ",", "nc_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "# nn.ReLU()", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.unet (backup).UNet.forward": [[63, 68], ["unet (backup).UNet.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "out", "=", "self", ".", "main", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.vgg_count.Flatten.forward": [[11, 15], ["x.size", "x.view"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "# read in N, C, H, W", "\n", "# \"flatten\" the C * H * W values into a single vector per image", "\n", "return", "x", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.vgg_count.Counter.__init__": [[19, 60], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vgg_count.Flatten", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "vgg_count.Flatten", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "w", ",", "model_class", "=", "'VGG19'", ",", "c", "=", "1", ")", ":", "\n", "        ", "super", "(", "Counter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "cfg", "=", "{", "\n", "'VGG11'", ":", "[", "64", ",", "'M'", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "'M'", "]", ",", "\n", "'VGG13'", ":", "[", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "'M'", "]", ",", "\n", "'VGG16'", ":", "[", "\n", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "\n", "'M'", "\n", "]", ",", "\n", "'VGG19'", ":", "[", "\n", "64", ",", "64", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "\n", "512", ",", "512", ",", "512", ",", "'M'", "\n", "]", ",", "\n", "}", "\n", "\n", "in_channels", "=", "c", "\n", "\n", "arch", "=", "[", "]", "\n", "for", "v", "in", "self", ".", "cfg", "[", "model_class", "]", ":", "\n", "            ", "if", "v", "==", "'M'", ":", "\n", "                ", "arch", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "h", "=", "(", "h", "-", "2", ")", "//", "2", "+", "1", "\n", "w", "=", "(", "w", "-", "2", ")", "//", "2", "+", "1", "\n", "", "else", ":", "\n", "                ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "arch", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "v", "\n", "\n", "", "", "self", ".", "vgg", "=", "nn", ".", "Sequential", "(", "*", "arch", ")", "\n", "\n", "self", ".", "fc_mean", "=", "nn", ".", "Sequential", "(", "Flatten", "(", ")", ",", "nn", ".", "Linear", "(", "h", "*", "w", "*", "in_channels", ",", "1024", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", ")", ",", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "512", ")", ",", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Linear", "(", "512", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "fc_lvar", "=", "nn", ".", "Sequential", "(", "Flatten", "(", ")", ",", "nn", ".", "Linear", "(", "h", "*", "w", "*", "in_channels", ",", "1024", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", ")", ",", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "512", ")", ",", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Linear", "(", "512", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.vgg_count.Counter.forward": [[61, 66], ["vgg_count.Counter.vgg", "vgg_count.Counter.fc_mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "means", ",", "lv", "=", "x", "\n", "out", "=", "self", ".", "vgg", "(", "means", "[", "-", "1", "]", ")", "\n", "# return self.fc_mean(out), self.fc_lvar(out)", "\n", "return", "self", ".", "fc_mean", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.fpn_mask.FPN.__init__": [[40, 84], ["super().__init__", "range", "range", "range", "range", "heights.append", "widths.append", "setattr", "setattr", "setattr", "setattr", "setattr", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "fpn_mask.ConvBNReLUPool", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "fpn_mask.ConvBNReLUPool", "fpn_mask.ConvBNReLUPool", "fpn_mask.ConvBNReLUPool", "fpn_mask.ConvBNReLUPool", "fpn_mask.ConvBNReLUPool", "fpn_mask.ConvBNReLUPool"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.fpn_mask.ConvBNReLUPool", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.fpn_mask.ConvBNReLUPool", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.fpn_mask.ConvBNReLUPool", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.fpn_mask.ConvBNReLUPool", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.fpn_mask.ConvBNReLUPool", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.fpn_mask.ConvBNReLUPool", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.fpn_mask.ConvBNReLUPool"], ["    ", "def", "__init__", "(", "self", ",", "height", ",", "width", ",", "h", "=", "4", ",", "ratio", "=", "2", ",", "d", "=", "128", ")", ":", "\n", "        ", "\"\"\"\n        Initialize Feature Pyramid Network (FPN)\n        \"\"\"", "\n", "super", "(", "FPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# self.conv_1 = ConvBNReLUPool(3, 1, padding=1, p=0.)", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "d", "=", "d", "\n", "\n", "heights", ",", "widths", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "h", ")", ":", "\n", "            ", "height", ",", "width", "=", "height", "//", "ratio", ",", "width", "//", "ratio", "\n", "heights", ".", "append", "(", "height", ")", "\n", "widths", ".", "append", "(", "width", ")", "\n", "setattr", "(", "self", ",", "'down%s'", "%", "i", ",", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "height", ",", "width", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "h", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "'across%s'", "%", "i", ",", "\n", "ConvBNReLUPool", "(", "1", ",", "self", ".", "d", ",", "p", "=", "0.", ",", "padding", "=", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ")", ")", "\n", "height", ",", "width", "=", "heights", "[", "-", "(", "i", "+", "1", ")", "]", ",", "widths", "[", "-", "(", "i", "+", "1", ")", "]", "\n", "setattr", "(", "self", ",", "'up%s'", "%", "i", ",", "nn", ".", "UpsamplingBilinear2d", "(", "size", "=", "(", "height", ",", "width", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "h", ")", ":", "\n", "            ", "setattr", "(", "\n", "self", ",", "'conv_2_%s'", "%", "i", ",", "\n", "nn", ".", "Sequential", "(", "\n", "ConvBNReLUPool", "(", "self", ".", "d", ",", "2", "*", "self", ".", "d", ",", "p", "=", "0.", ",", "padding", "=", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ")", ",", "\n", "ConvBNReLUPool", "(", "2", "*", "self", ".", "d", ",", "2", "*", "self", ".", "d", ",", "p", "=", "0.", ",", "padding", "=", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ")", ",", "\n", "ConvBNReLUPool", "(", "2", "*", "self", ".", "d", ",", "\n", "1", ",", "\n", "leaky", "=", "False", ",", "\n", "bn", "=", "False", ",", "\n", "p", "=", "0.", ",", "\n", "padding", "=", "1", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "h", ")", ":", "\n", "            ", "setattr", "(", "\n", "self", ",", "'conv_3_%s'", "%", "i", ",", "\n", "nn", ".", "Sequential", "(", "\n", "ConvBNReLUPool", "(", "self", ".", "d", ",", "2", "*", "self", ".", "d", ",", "p", "=", "0.", ",", "padding", "=", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ")", ",", "\n", "ConvBNReLUPool", "(", "2", "*", "self", ".", "d", ",", "2", "*", "self", ".", "d", ",", "p", "=", "0.", ",", "padding", "=", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ")", ",", "\n", "ConvBNReLUPool", "(", "2", "*", "self", ".", "d", ",", "1", ",", "bn", "=", "False", ",", "p", "=", "0.", ",", "padding", "=", "1", ",", "kernel_size", "=", "(", "3", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.fpn_mask.FPN.forward": [[85, 106], ["range", "range", "enumerate", "down_sampled.append", "down_sampled[].repeat", "up_sampled.append", "up_sampled_mean.append", "up_sampled_log_var.append", "getattr", "getattr", "getattr", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Foward Pass through FPN\n        \"\"\"", "\n", "down_sampled", "=", "[", "x", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "h", ")", ":", "\n", "            ", "down_sampled", ".", "append", "(", "getattr", "(", "self", ",", "'down%s'", "%", "i", ")", "(", "down_sampled", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "up_sampled", "=", "[", "down_sampled", "[", "-", "1", "]", ".", "repeat", "(", "1", ",", "self", ".", "d", ",", "1", ",", "1", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "h", ")", ":", "\n", "            ", "up_2", "=", "getattr", "(", "self", ",", "'across%s'", "%", "i", ")", "(", "down_sampled", "[", "-", "(", "i", "+", "1", ")", "]", ")", "\n", "up_1", "=", "getattr", "(", "self", ",", "'up%s'", "%", "i", ")", "(", "up_sampled", "[", "-", "1", "]", ")", "\n", "up_sampled", ".", "append", "(", "up_1", "+", "up_2", ")", "\n", "\n", "", "up_sampled_mean", "=", "[", "]", "\n", "up_sampled_log_var", "=", "[", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "up_sampled", ")", ":", "\n", "            ", "up_sampled_mean", ".", "append", "(", "getattr", "(", "self", ",", "'conv_2_%s'", "%", "i", ")", "(", "item", ")", ")", "\n", "up_sampled_log_var", ".", "append", "(", "getattr", "(", "self", ",", "'conv_3_%s'", "%", "i", ")", "(", "item", ")", ")", "\n", "\n", "", "return", "up_sampled_mean", ",", "up_sampled_log_var", "\n", "", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.fpn_mask.ConvBNReLUPool": [[11, 37], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.ReLU", "torch.Dropout2d", "torch.MaxPool2d"], "function", ["None"], ["def", "ConvBNReLUPool", "(", "i", ",", "\n", "o", ",", "\n", "bn", "=", "True", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "p", "=", "0.5", ",", "\n", "pool", "=", "False", ",", "\n", "leaky", "=", "True", ")", ":", "\n", "    ", "model", "=", "[", "nn", ".", "Conv2d", "(", "i", ",", "o", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "]", "\n", "\n", "if", "bn", ":", "\n", "        ", "model", "+=", "[", "nn", ".", "BatchNorm2d", "(", "o", ")", "]", "\n", "\n", "", "if", "leaky", ":", "\n", "        ", "model", "+=", "[", "nn", ".", "LeakyReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "        ", "model", "+=", "[", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "\n", "", "if", "p", ">", "0.", ":", "\n", "        ", "model", "+=", "[", "nn", ".", "Dropout2d", "(", "p", ")", "]", "\n", "\n", "", "if", "pool", ":", "\n", "        ", "model", "+=", "[", "nn", ".", "MaxPool2d", "(", "2", ",", "ceil_mode", "=", "True", ")", "]", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.opts.prepare_options": [[4, 61], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "prepare_options", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "''' Overall settings '''", "\n", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--path_vgg_dataset'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--path_tinybbbc005'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "2020", ",", "metavar", "=", "'S'", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--experiment_name'", ",", "type", "=", "str", ",", "default", "=", "'exp1'", ")", "\n", "\n", "''' Datast Settings '''", "\n", "parser", ".", "add_argument", "(", "'--num_train'", ",", "type", "=", "int", ",", "default", "=", "2400", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of training samples'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_channels'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_height'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_width'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--deleted_counts'", ",", "type", "=", "str", ",", "default", "=", "'None'", ")", "\n", "\n", "''' UNET Density Settings '''", "\n", "parser", ".", "add_argument", "(", "'--unet1_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_batch_size_train'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_lr_base'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'base learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_lr_decay_factor'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'100_150'", ",", "help", "=", "'decay lr at which epoch; separate by _'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_transform'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'data augmentation'", ")", "\n", "\n", "''' UNET Mask Settings '''", "\n", "parser", ".", "add_argument", "(", "'--unet2_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_batch_size_train'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_lr_base'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'base learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_lr_decay_factor'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'100_150'", ",", "help", "=", "'decay lr at which epoch; separate by _'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_transform'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'data augmentation'", ")", "\n", "\n", "''' DRCNN Settings '''", "\n", "parser", ".", "add_argument", "(", "'--cnn_name'", ",", "type", "=", "str", ",", "default", "=", "\"VGG19\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_batch_size_train'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_batch_size_test'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_lr_base'", ",", "type", "=", "float", ",", "default", "=", "1e-2", ",", "help", "=", "'base learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_lr_decay_factor'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'100_150'", ",", "help", "=", "'decay lr at which epoch; separate by _'", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_transform'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'data augmentation'", ")", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.train_class_cnn.adjust_learning_rate": [[31, 43], ["len", "range"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate \"\"\"", "\n", "lr", "=", "lr_base", "\n", "\n", "num_decays", "=", "len", "(", "lr_decay_epochs", ")", "\n", "for", "decay_i", "in", "range", "(", "num_decays", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epochs", "[", "decay_i", "]", ":", "\n", "            ", "lr", "=", "lr", "*", "lr_decay_factor", "\n", "#end if epoch", "\n", "#end for decay_i", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.train_class_cnn.train_class_cnn": [[45, 124], ["net.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.CrossEntropyLoss", "timeit.default_timer", "range", "net.cuda.parameters", "print", "torch.load", "torch.load", "net.cuda.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.set_rng_state", "torch.set_rng_state", "train_class_cnn.adjust_learning_rate", "enumerate", "train_class_cnn.test_class_cnn", "net.cuda.train", "batch_images.type().cuda.type().cuda", "batch_labels.type().cuda.type().cuda", "net.cuda.", "nn.CrossEntropyLoss.", "torch.optim.Adam.zero_grad", "criterion.backward", "torch.optim.Adam.step", "criterion.cpu().item", "os.makedirs", "torch.save", "torch.save", "print", "os.path.dirname", "batch_images.type().cuda.type", "batch_labels.type().cuda.type", "criterion.cpu", "net.cuda.state_dict", "torch.optim.Adam.state_dict", "torch.get_rng_state", "torch.get_rng_state", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_fpn_mask.adjust_learning_rate", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.train_class_cnn.test_class_cnn"], ["", "", "def", "train_class_cnn", "(", "trainloader", ",", "testloader", ",", "classlabel_to_count", ",", "net", ",", "path_to_ckpt", "=", "None", ")", ":", "\n", "    ", "'''\n    net: cnn net\n    classlabel_to_count: a dict stores a mapping from a class label to a cell count\n    '''", "\n", "\n", "# nets", "\n", "net", "=", "net", ".", "cuda", "(", ")", "\n", "\n", "# define optimizer", "\n", "# optimizer = torch.optim.SGD(net.parameters(), lr=lr_base, weight_decay=weight_decay)", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr_base", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "# criterion", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "resume_epoch", ">", "0", ":", "\n", "        ", "print", "(", "\"Loading ckpt to resume training the CNN >>>\"", ")", "\n", "ckpt_fullpath", "=", "path_to_ckpt", "+", "\"/class_{}_checkpoint_epoch_{}.pth\"", ".", "format", "(", "cnn_name", ",", "resume_epoch", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_fullpath", ")", "\n", "net", ".", "load_state_dict", "(", "checkpoint", "[", "'net_state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "checkpoint", "[", "'rng_state'", "]", ")", "\n", "steps", "=", "checkpoint", "[", "'steps'", "]", "\n", "", "else", ":", "\n", "        ", "steps", "=", "0", "\n", "\n", "", "start_time", "=", "timeit", ".", "default_timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "resume_epoch", ",", "epochs", ")", ":", "\n", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train_loss", "=", "0", "\n", "\n", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "            ", "net", ".", "train", "(", ")", "\n", "\n", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_labels", "=", "batch_samples", "[", "'count'", "]", "#class labels", "\n", "\n", "batch_size_curr", "=", "batch_images", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size_curr", "==", "batch_labels", ".", "shape", "[", "0", "]", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_labels", "=", "batch_labels", ".", "type", "(", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "#forward pass", "\n", "batch_output", "=", "net", "(", "batch_images", ")", "\n", "loss", "=", "criterion", "(", "batch_output", ",", "batch_labels", ")", "\n", "\n", "#backward pass", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "steps", "+=", "1", "\n", "\n", "if", "steps", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "\"\\nclass {}: [step {}] [epoch {}/{}] [train loss {:.3f}] [Time {:.3f}]\"", ".", "format", "(", "cnn_name", ",", "steps", ",", "epoch", "+", "1", ",", "epochs", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "timeit", ".", "default_timer", "(", ")", "-", "start_time", ")", ")", "\n", "# end for batch_idx", "\n", "\n", "", "", "_", "=", "test_class_cnn", "(", "testloader", ",", "classlabel_to_count", ",", "net", ",", "verbose", "=", "True", ")", "\n", "#end for epoch", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "(", "epoch", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "            ", "save_file", "=", "path_to_ckpt", "+", "\"/class_{}_checkpoint_epoch_{}.pth\"", ".", "format", "(", "cnn_name", ",", "epoch", "+", "1", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'steps'", ":", "steps", ",", "\n", "'net_state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'rng_state'", ":", "torch", ".", "get_rng_state", "(", ")", "\n", "}", ",", "save_file", ")", "\n", "#end for epoch", "\n", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.train_class_cnn.test_class_cnn": [[126, 178], ["net.eval.eval", "torch.MSELoss", "torch.L1Loss", "math.sqrt", "torch.cat().numpy", "torch.cat().numpy", "torch.no_grad", "torch.no_grad", "enumerate", "len", "len", "print", "batch_images.type().cuda.type().cuda", "batch_counts.type.type", "net.eval.", "torch.max", "torch.max", "torch.tensor().type", "torch.tensor().type", "torch.cat().numpy.append", "nn.MSELoss.", "nn.L1Loss.", "square_error.item", "absolute_error.item", "len", "torch.cat", "torch.cat", "torch.tensor().type.append", "torch.tensor().type.view", "batch_counts.type.view", "torch.tensor().type.view", "batch_counts.type.view", "batch_images.type().cuda.type", "torch.tensor", "torch.tensor", "j.item", "torch.tensor().type.view", "batch_counts.type.view"], "function", ["None"], ["", "def", "test_class_cnn", "(", "testloader", ",", "classlabel_to_count", ",", "net", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "net", "=", "net", ".", "eval", "(", ")", "\n", "\n", "# criterion", "\n", "square_error", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "absolute_error", "=", "nn", ".", "L1Loss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n", "test_rmse", "=", "0", "\n", "test_mae", "=", "0", "\n", "test_acc", "=", "0", "#test accuracy", "\n", "predicted_counts", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_counts", "=", "batch_samples", "[", "'count'", "]", "#unnormalized; original cell count", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_counts", "=", "batch_counts", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n", "#forward pass", "\n", "batch_output", "=", "net", "(", "batch_images", ")", "\n", "_", ",", "batch_output", "=", "torch", ".", "max", "(", "batch_output", ".", "data", ",", "1", ")", "##convert one-hot vectors to class labels", "\n", "## convert class labels to cell counts", "\n", "batch_pred_counts", "=", "[", "]", "\n", "for", "j", "in", "batch_output", ":", "\n", "                ", "batch_pred_counts", ".", "append", "(", "classlabel_to_count", "[", "j", ".", "item", "(", ")", "]", ")", "\n", "#end j", "\n", "", "batch_pred_counts", "=", "torch", ".", "tensor", "(", "batch_pred_counts", ")", ".", "type", "(", "torch", ".", "float", ")", "\n", "predicted_counts", ".", "append", "(", "batch_pred_counts", ")", "\n", "\n", "batch_sum_of_square_error", "=", "square_error", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ")", ",", "batch_counts", ".", "view", "(", "-", "1", ")", ")", "\n", "batch_sum_of_absolute_error", "=", "absolute_error", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ")", ",", "batch_counts", ".", "view", "(", "-", "1", ")", ")", "\n", "test_rmse", "+=", "batch_sum_of_square_error", ".", "item", "(", ")", "\n", "test_mae", "+=", "batch_sum_of_absolute_error", ".", "item", "(", ")", "\n", "test_acc", "+=", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ")", "==", "batch_counts", ".", "view", "(", "-", "1", ")", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "#end for batch_idx", "\n", "", "", "test_rmse", "=", "math", ".", "sqrt", "(", "test_rmse", "/", "len", "(", "testloader", ".", "dataset", ")", ")", "\n", "test_mae", "=", "test_mae", "/", "len", "(", "testloader", ".", "dataset", ")", "\n", "test_acc", "=", "test_acc", "/", "len", "(", "testloader", ".", "dataset", ")", "\n", "predicted_counts", "=", "torch", ".", "cat", "(", "predicted_counts", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'\\n====> Test set RMSE: %.4f; Test set MAE: %.4f; Test set Acc.: %.4f'", "%", "(", "test_rmse", ",", "test_mae", ",", "test_acc", ")", ")", "\n", "\n", "", "output", "=", "{", "}", "\n", "output", "[", "'RMSE'", "]", "=", "test_rmse", "\n", "output", "[", "'MAE'", "]", "=", "test_mae", "\n", "output", "[", "'Accuracy'", "]", "=", "test_acc", "\n", "output", "[", "'Pred'", "]", "=", "predicted_counts", "\n", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.main.cnn_initialization": [[227, 241], ["torch.DataParallel", "models.vgg.VGG.cuda", "models.resnet.ResNet18", "models.resnet.ResNet34", "models.resnet.ResNet50", "models.resnet.ResNet101", "models.vgg.VGG"], "function", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet18", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet34", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet50", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.models.resnet.ResNet101"], ["if", "not", "os", ".", "path", ".", "isfile", "(", "cnn_ckpt_fullpath", ")", ":", "\n", "    ", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "\"\\n Begin Training {}:\"", ".", "format", "(", "args", ".", "cnn_name", ")", ")", "\n", "\n", "cnn_net", "=", "VGG", "(", "args", ".", "cnn_name", ")", ".", "cuda", "(", ")", "\n", "cnn_net", "=", "nn", ".", "DataParallel", "(", "cnn_net", ")", "\n", "cnn_net", "=", "train_cnn", "(", "trainloader", "=", "tiny3bc005_train_dataloader", ",", "testloader", "=", "tiny3bc005_test_dataloader", ",", "max_count", "=", "max_count", ",", "net", "=", "cnn_net", ",", "unet_density", "=", "unet_density", ",", "unet_mask", "=", "unet_mask", ",", "path_to_ckpt", "=", "path_to_ckpt_in_train", ")", "\n", "\n", "# store model", "\n", "torch", ".", "save", "(", "{", "\n", "'net_state_dict'", ":", "cnn_net", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "cnn_ckpt_fullpath", ")", "\n", "\n", "stop", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "\"{} training finished! Time elapses: {}s\"", ".", "format", "(", "args", ".", "cnn_name", ",", "stop", "-", "start", ")", ")", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.AugmentData.AugmentData": [[38, 675], ["numpy.mean().reshape", "range", "list", "range", "range", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "sklearn.linear_model.LinearRegression", "linear_model.LinearRegression.fit", "sklearn.linear_model.LinearRegression", "linear_model.LinearRegression.fit", "numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.ones", "numpy.arange", "range", "range", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.concatenate", "numpy.concatenate", "sklearn.linear_model.LinearRegression", "linear_model.LinearRegression.fit", "sklearn.linear_model.LinearRegression", "linear_model.LinearRegression.fit", "numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.arange", "range", "range", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "sklearn.linear_model.LinearRegression", "linear_model.LinearRegression.fit", "sklearn.linear_model.LinearRegression", "linear_model.LinearRegression.fit", "numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.arange", "range", "range", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.concatenate", "numpy.concatenate", "sklearn.linear_model.LinearRegression", "linear_model.LinearRegression.fit", "sklearn.linear_model.LinearRegression", "linear_model.LinearRegression.fit", "numpy.zeros", "numpy.zeros", "numpy.arange", "range", "range", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "sklearn.linear_model.LinearRegression", "linear_model.LinearRegression.fit", "sklearn.linear_model.LinearRegression", "linear_model.LinearRegression.fit", "numpy.zeros", "numpy.zeros", "numpy.ones", "numpy.arange", "range", "range", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.concatenate", "numpy.concatenate", "sklearn.linear_model.LinearRegression", "linear_model.LinearRegression.fit", "sklearn.linear_model.LinearRegression", "linear_model.LinearRegression.fit", "numpy.zeros", "numpy.zeros", "numpy.arange", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "gc.collect", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "len", "numpy.loadtxt", "range", "formula_fake_list.append", "numpy.sort", "len", "idx_per_class_1.append", "len", "intensity_real_mins.append", "intensity_real_maxs.append", "len", "numpy.arange", "numpy.random.shuffle", "matplotlib.imshow", "matplotlib.show", "len", "idx_per_class_2.append", "len", "intensity_real_mins.append", "intensity_real_maxs.append", "numpy.ones", "len", "numpy.arange", "numpy.random.shuffle", "matplotlib.imshow", "matplotlib.show", "len", "idx_per_class_3.append", "len", "intensity_real_mins.append", "intensity_real_maxs.append", "numpy.ones", "len", "numpy.arange", "numpy.random.shuffle", "matplotlib.imshow", "matplotlib.show", "len", "idx_per_class_4.append", "len", "intensity_real_mins.append", "intensity_real_maxs.append", "numpy.ones", "numpy.ones", "len", "numpy.arange", "numpy.random.shuffle", "matplotlib.imshow", "matplotlib.show", "len", "idx_per_class_5.append", "len", "intensity_real_mins.append", "intensity_real_maxs.append", "numpy.ones", "len", "numpy.arange", "numpy.random.shuffle", "matplotlib.imshow", "matplotlib.show", "len", "idx_per_class_6.append", "len", "intensity_real_mins.append", "intensity_real_maxs.append", "numpy.ones", "numpy.ones", "len", "numpy.arange", "numpy.random.shuffle", "matplotlib.imshow", "matplotlib.show", "tqdm.tqdm", "numpy.mean", "len", "formula_tmp.reshape.reshape", "numpy.array", "numpy.where", "numpy.min", "numpy.max", "numpy.array", "numpy.array", "numpy.array", "numpy.arange", "numpy.random.shuffle", "numpy.array", "range", "numpy.amax", "numpy.mean", "len", "numpy.where", "numpy.min", "numpy.max", "numpy.array", "numpy.array", "numpy.array", "numpy.arange", "numpy.random.shuffle", "numpy.array", "range", "numpy.amax", "numpy.mean", "len", "numpy.where", "numpy.min", "numpy.max", "numpy.array", "numpy.array", "numpy.array", "numpy.arange", "numpy.random.shuffle", "numpy.array", "range", "numpy.amax", "numpy.mean", "len", "numpy.where", "numpy.min", "numpy.max", "numpy.array", "numpy.array", "numpy.array", "numpy.arange", "numpy.random.shuffle", "numpy.array", "range", "numpy.amax", "numpy.mean", "len", "numpy.where", "numpy.min", "numpy.max", "numpy.array", "numpy.array", "numpy.array", "numpy.arange", "numpy.random.shuffle", "numpy.array", "range", "numpy.amax", "numpy.mean", "len", "numpy.where", "numpy.min", "numpy.max", "numpy.array", "numpy.array", "numpy.array", "numpy.arange", "numpy.random.shuffle", "numpy.array", "range", "numpy.amax", "numpy.mean", "len", "range", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "numpy.sum", "print", "numpy.sum", "len", "list", "numpy.where", "list", "len", "len", "len", "len", "numpy.where", "len", "numpy.concatenate", "range", "print", "numpy.where", "list", "len", "len", "len", "numpy.where", "len", "numpy.concatenate", "range", "print", "numpy.where", "list", "len", "len", "len", "numpy.where", "len", "numpy.concatenate", "range", "print", "numpy.where", "list", "len", "len", "numpy.where", "len", "numpy.concatenate", "range", "print", "numpy.where", "list", "len", "len", "len", "numpy.where", "len", "numpy.concatenate", "range", "print", "numpy.where", "list", "len", "len", "numpy.where", "len", "numpy.concatenate", "range", "print", "len", "str", "set", "len", "PIL.Image.fromarray", "TransHFlip", "TransVFlip", "numpy.array", "len", "numpy.sqrt", "numpy.sqrt", "len", "PIL.Image.fromarray", "TransHFlip", "TransVFlip", "numpy.array", "len", "len", "PIL.Image.fromarray", "TransHFlip", "TransVFlip", "numpy.array", "len", "len", "numpy.sqrt", "numpy.sqrt", "len", "PIL.Image.fromarray", "TransHFlip", "TransVFlip", "numpy.array", "len", "len", "PIL.Image.fromarray", "TransHFlip", "TransVFlip", "numpy.array", "len", "len", "numpy.sqrt", "numpy.sqrt", "len", "PIL.Image.fromarray", "TransHFlip", "TransVFlip", "numpy.array", "str", "linear_model.LinearRegression.predict", "linear_model.LinearRegression.predict", "numpy.random.choice", "numpy.uint8", "numpy.random.choice", "numpy.uint8", "linear_model.LinearRegression.predict", "linear_model.LinearRegression.predict", "numpy.random.choice", "numpy.uint8", "numpy.random.choice", "numpy.uint8", "linear_model.LinearRegression.predict", "linear_model.LinearRegression.predict", "numpy.random.choice", "numpy.uint8", "numpy.random.choice", "numpy.uint8", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "str", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "str", "str"], "function", ["None"], ["def", "AugmentData", "(", "IMGs_real", ",", "CellCount_real", ",", "Blur_real", ",", "Stain_real", ",", "AugClass", ",", "\n", "formula_dir", ",", "nfake", "=", "25", ",", "flipping", "=", "True", ",", "one_formula_per_class", "=", "False", ",", "\n", "show_sample_img", "=", "False", ",", "dump_fake", "=", "False", ",", "fakeImg_dir", "=", "None", ",", "do_filter", "=", "True", ",", "verbose", "=", "True", ")", ":", "\n", "#AugClass: a list of classes we want to create", "\n", "#one_formula_per_class: one formula for each class?", "\n", "\n", "    ", "Intensity_real", "=", "(", "np", ".", "mean", "(", "IMGs_real", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "###########################################################################", "\n", "# load formula for creating fake classes", "\n", "formula_fake_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "AugClass", ")", ")", ":", "#load formulae for each class", "\n", "        ", "formula_tmp", "=", "np", ".", "loadtxt", "(", "formula_dir", "+", "'C'", "+", "str", "(", "AugClass", "[", "i", "]", ")", "+", "'.csv'", ",", "dtype", "=", "np", ".", "int", ",", "delimiter", "=", "','", ")", "\n", "basis_cellcounts", "=", "formula_tmp", "[", "0", ",", "1", ":", "]", "\n", "cellcount_filename", "=", "AugClass", "[", "i", "]", "#cell count in filename", "\n", "cellcount_in_csv", "=", "formula_tmp", "[", "1", ",", "0", "]", "#cell count in csv", "\n", "assert", "cellcount_filename", "==", "cellcount_in_csv", "#they should be consistent", "\n", "formula_tmp", "=", "formula_tmp", "[", "1", ":", ",", "1", ":", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "formula_tmp", ")", ")", ":", "#check the correctness of each formula", "\n", "            ", "if", "np", ".", "sum", "(", "formula_tmp", "[", "j", "]", "*", "basis_cellcounts", ")", "!=", "cellcount_in_csv", ":", "\n", "                ", "print", "(", "(", "AugClass", "[", "i", "]", ",", "formula_tmp", "[", "j", "]", ")", ")", "\n", "", "assert", "np", ".", "sum", "(", "formula_tmp", "[", "j", "]", "*", "basis_cellcounts", ")", "==", "cellcount_in_csv", "\n", "", "if", "one_formula_per_class", ":", "\n", "            ", "formula_tmp", "=", "formula_tmp", "[", "0", "]", "#one formula for each class", "\n", "formula_tmp", "=", "formula_tmp", ".", "reshape", "(", "1", ",", "len", "(", "basis_cellcounts", ")", ")", "\n", "#the number of rows in formula_tmp represents the number of formulae for each cell count", "\n", "#store formula in the list", "\n", "", "formula_fake_list", ".", "append", "(", "formula_tmp", ")", "\n", "\n", "#unique cell count in the input dataset", "\n", "", "unique_cell_count", "=", "list", "(", "np", ".", "sort", "(", "np", ".", "array", "(", "list", "(", "set", "(", "CellCount_real", ")", ")", ")", ")", ")", "\n", "#    unique_cell_count = list(set(CellCount_real))", "\n", "\n", "###########################################################################", "\n", "# create fake classes by using existing classes", "\n", "#--------------------------------------------------------------------------", "\n", "### 1. Blur 1 and Stain 1", "\n", "idx_per_class_1", "=", "[", "]", "#indices of this combination if cell count is fixed", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_cell_count", ")", ")", ":", "\n", "        ", "idx_per_class_1", ".", "append", "(", "np", ".", "where", "(", "(", "Blur_real", "==", "1", ")", "*", "(", "Stain_real", "==", "1", ")", "*", "(", "CellCount_real", "==", "unique_cell_count", "[", "i", "]", ")", "==", "True", ")", "[", "0", "]", ")", "\n", "\n", "\n", "# filtering by a fitted linear regression;", "\n", "# rank intensities for each cell count by square error, choose first nfake images", "\n", "", "intensity_real_mins", "=", "[", "]", "\n", "intensity_real_maxs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_cell_count", ")", ")", ":", "\n", "        ", "current_cellcount", "=", "unique_cell_count", "[", "i", "]", "\n", "indx_stain_blur_count", "=", "np", ".", "where", "(", "(", "(", "Blur_real", "==", "1", ")", "*", "(", "Stain_real", "==", "1", ")", "*", "(", "CellCount_real", "==", "current_cellcount", ")", ")", "==", "True", ")", "[", "0", "]", "\n", "intensity_real_mins", ".", "append", "(", "np", ".", "min", "(", "Intensity_real", "[", "indx_stain_blur_count", "]", ")", ")", "\n", "intensity_real_maxs", ".", "append", "(", "np", ".", "max", "(", "Intensity_real", "[", "indx_stain_blur_count", "]", ")", ")", "\n", "", "y_min", "=", "np", ".", "array", "(", "intensity_real_mins", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y_max", "=", "np", ".", "array", "(", "intensity_real_maxs", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "np", ".", "array", "(", "list", "(", "unique_cell_count", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "regr_min", "=", "linear_model", ".", "LinearRegression", "(", ")", "\n", "regr_min", ".", "fit", "(", "x", ",", "y_min", ")", "\n", "regr_max", "=", "linear_model", ".", "LinearRegression", "(", ")", "\n", "regr_max", ".", "fit", "(", "x", ",", "y_max", ")", "\n", "\n", "IMGs_fake_1", "=", "np", ".", "zeros", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", "args", ".", "num_channels", ",", "args", ".", "img_height", ",", "args", ".", "img_width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "CellCount_fake_1", "=", "np", ".", "zeros", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "Blur_fake_1", "=", "np", ".", "ones", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "Stain_fake_1", "=", "np", ".", "ones", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "nfake_got_total", "=", "0", "\n", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "AugClass", ")", ")", ":", "\n", "        ", "formula_tmp", "=", "formula_fake_list", "[", "i", "]", "#formula for current class", "\n", "num_formula", "=", "formula_tmp", ".", "shape", "[", "0", "]", "#number of formulae for current class", "\n", "\n", "current_cell_count", "=", "AugClass", "[", "i", "]", "#current new class", "\n", "\n", "if", "do_filter", ":", "\n", "            ", "intensity_min", "=", "(", "regr_min", ".", "predict", "(", "np", ".", "array", "(", "[", "current_cell_count", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", "[", "0", "]", "[", "0", "]", "*", "multiple_left_bound", "\n", "intensity_max", "=", "(", "regr_max", ".", "predict", "(", "np", ".", "array", "(", "[", "current_cell_count", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", "[", "0", "]", "[", "0", "]", "*", "multiple_right_bound", "\n", "", "else", ":", "\n", "            ", "intensity_min", "=", "-", "100.0", "\n", "intensity_max", "=", "99999", "\n", "\n", "", "j", "=", "0", ";", "nfake_got_local", "=", "0", "\n", "while", "nfake_got_local", "<", "nfake", ":", "\n", "#randomly choose one formula to generate current image", "\n", "            ", "idx_formula", "=", "np", ".", "arange", "(", "num_formula", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_formula", ")", "\n", "idx_formula", "=", "idx_formula", "[", "0", "]", "\n", "\n", "#column idx of required existing classes for generating current image in existing 24 classes (col index in formula table)", "\n", "idx_required_class", "=", "np", ".", "where", "(", "formula_tmp", "[", "idx_formula", "]", "!=", "0", ")", "[", "0", "]", "\n", "#number of images for each required class", "\n", "num_required_imgs", "=", "formula_tmp", "[", "idx_formula", ",", "idx_required_class", "]", "\n", "#to store the indicies of require images in IMGs_real", "\n", "idx_required_imgs", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "tmp", "in", "range", "(", "len", "(", "idx_required_class", ")", ")", ":", "\n", "                ", "idx_required_imgs", "=", "np", ".", "concatenate", "(", "(", "idx_required_imgs", ",", "np", ".", "random", ".", "choice", "(", "idx_per_class_1", "[", "idx_required_class", "[", "tmp", "]", "]", ",", "num_required_imgs", "[", "tmp", "]", ",", "replace", "=", "False", ")", ")", ")", "\n", "", "required_imgs", "=", "IMGs_real", "[", "idx_required_imgs", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "if", "flipping", ":", "\n", "                ", "for", "tmp", "in", "range", "(", "len", "(", "idx_required_imgs", ")", ")", ":", "\n", "                    ", "PIL_im", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "required_imgs", "[", "tmp", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "PIL_im", "=", "TransHFlip", "(", "PIL_im", ")", "\n", "PIL_im", "=", "TransVFlip", "(", "PIL_im", ")", "\n", "required_imgs", "[", "tmp", "]", "=", "np", ".", "array", "(", "PIL_im", ")", "\n", "\n", "", "", "current_fake_img", "=", "np", ".", "amax", "(", "required_imgs", ",", "axis", "=", "0", ")", "\n", "current_intensity", "=", "np", ".", "mean", "(", "current_fake_img", ")", "\n", "\n", "if", "(", "(", "current_intensity", ">=", "intensity_min", ")", "and", "(", "current_intensity", "<=", "intensity_max", ")", ")", "or", "(", "current_cell_count", "<=", "threshold_for_skipping_filtering", ")", ":", "\n", "                ", "IMGs_fake_1", "[", "nfake_got_total", ":", "(", "nfake_got_total", "+", "1", ")", ",", "0", ",", ":", ",", ":", "]", "=", "current_fake_img", "\n", "CellCount_fake_1", "[", "nfake_got_total", ":", "(", "nfake_got_total", "+", "1", ")", "]", "=", "current_cell_count", "\n", "nfake_got_local", "+=", "1", "\n", "nfake_got_total", "+=", "1", "\n", "j", "=", "0", "\n", "", "elif", "j", ">", "3000", ":", "\n", "                ", "j", "=", "0", "\n", "if", "current_intensity", "<", "intensity_min", ":", "\n", "                    ", "intensity_min", "*=", "0.975", "\n", "", "if", "current_intensity", ">", "intensity_max", ":", "\n", "                    ", "intensity_max", "*=", "1.025", "\n", "\n", "", "", "j", "+=", "1", "\n", "\n", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "\"Comb:%d; Class:%d; Steps:%d; Nfake:%d; min:%.4f; max:%.4f; current:%.4f\"", "%", "(", "1", ",", "AugClass", "[", "i", "]", ",", "j", ",", "nfake_got_local", ",", "intensity_min", ",", "intensity_max", ",", "current_intensity", ")", ")", "\n", "\n", "\n", "", "", "", "if", "show_sample_img", ":", "\n", "        ", "idx_tmp", "=", "np", ".", "arange", "(", "len", "(", "IMGs_fake_1", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_tmp", ")", "\n", "idx_tmp", "=", "idx_tmp", "[", "0", "]", "\n", "plt", ".", "imshow", "(", "IMGs_fake_1", "[", "idx_tmp", "]", "[", "0", "]", ",", "cmap", "=", "'gray'", ",", "vmin", "=", "0", ",", "vmax", "=", "255", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "#--------------------------------------------------------------------------", "\n", "### 2. Blur 1 and Stain 2", "\n", "", "idx_per_class_2", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_cell_count", ")", ")", ":", "\n", "        ", "idx_per_class_2", ".", "append", "(", "np", ".", "where", "(", "(", "Blur_real", "==", "1", ")", "*", "(", "Stain_real", "==", "2", ")", "*", "(", "CellCount_real", "==", "unique_cell_count", "[", "i", "]", ")", "==", "True", ")", "[", "0", "]", ")", "\n", "\n", "# filtering by a fitted linear regression;", "\n", "# rank intensities for each cell count by square error, choose first nfake images", "\n", "", "intensity_real_mins", "=", "[", "]", "\n", "intensity_real_maxs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_cell_count", ")", ")", ":", "\n", "        ", "current_cellcount", "=", "unique_cell_count", "[", "i", "]", "\n", "indx_stain_blur_count", "=", "np", ".", "where", "(", "(", "(", "Blur_real", "==", "1", ")", "*", "(", "Stain_real", "==", "2", ")", "*", "(", "CellCount_real", "==", "current_cellcount", ")", ")", "==", "True", ")", "[", "0", "]", "\n", "intensity_real_mins", ".", "append", "(", "np", ".", "min", "(", "Intensity_real", "[", "indx_stain_blur_count", "]", ")", ")", "\n", "intensity_real_maxs", ".", "append", "(", "np", ".", "max", "(", "Intensity_real", "[", "indx_stain_blur_count", "]", ")", ")", "\n", "", "x_min", "=", "np", ".", "array", "(", "intensity_real_mins", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x_max", "=", "np", ".", "array", "(", "intensity_real_maxs", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y", "=", "np", ".", "array", "(", "list", "(", "unique_cell_count", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "X_min", "=", "np", ".", "concatenate", "(", "(", "x_min", ",", "x_min", "**", "2", ")", ",", "axis", "=", "1", ")", "\n", "X_max", "=", "np", ".", "concatenate", "(", "(", "x_max", ",", "x_max", "**", "2", ")", ",", "axis", "=", "1", ")", "\n", "regr_min", "=", "linear_model", ".", "LinearRegression", "(", ")", "\n", "regr_min", ".", "fit", "(", "X_min", ",", "y", ")", "\n", "c_min", "=", "regr_min", ".", "intercept_", "[", "0", "]", ";", "b_min", "=", "regr_min", ".", "coef_", "[", "0", "]", "[", "0", "]", ";", "a_min", "=", "regr_min", ".", "coef_", "[", "0", "]", "[", "1", "]", "\n", "regr_max", "=", "linear_model", ".", "LinearRegression", "(", ")", "\n", "regr_max", ".", "fit", "(", "X_max", ",", "y", ")", "\n", "c_max", "=", "regr_max", ".", "intercept_", "[", "0", "]", ";", "b_max", "=", "regr_max", ".", "coef_", "[", "0", "]", "[", "0", "]", ";", "a_max", "=", "regr_max", ".", "coef_", "[", "0", "]", "[", "1", "]", "\n", "\n", "IMGs_fake_2", "=", "np", ".", "zeros", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", "args", ".", "num_channels", ",", "args", ".", "img_height", ",", "args", ".", "img_width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "CellCount_fake_2", "=", "np", ".", "zeros", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "Blur_fake_2", "=", "np", ".", "ones", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "Stain_fake_2", "=", "2", "*", "np", ".", "ones", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "nfake_got_total", "=", "0", "\n", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "AugClass", ")", ")", ":", "\n", "        ", "formula_tmp", "=", "formula_fake_list", "[", "i", "]", "#formula for current class", "\n", "num_formula", "=", "formula_tmp", ".", "shape", "[", "0", "]", "#number of formulae for current class", "\n", "\n", "current_cell_count", "=", "AugClass", "[", "i", "]", "#current new class", "\n", "\n", "if", "do_filter", ":", "\n", "            ", "intensity_min", "=", "(", "-", "b_min", "+", "np", ".", "sqrt", "(", "b_min", "**", "2", "-", "4", "*", "a_min", "*", "(", "c_min", "-", "current_cell_count", ")", ")", ")", "/", "(", "2", "*", "a_min", ")", "\n", "intensity_max", "=", "(", "-", "b_max", "+", "np", ".", "sqrt", "(", "b_max", "**", "2", "-", "4", "*", "a_max", "*", "(", "c_max", "-", "current_cell_count", ")", ")", ")", "/", "(", "2", "*", "a_max", ")", "\n", "", "else", ":", "\n", "            ", "intensity_min", "=", "-", "100.0", "\n", "intensity_max", "=", "99999", "\n", "\n", "", "j", "=", "0", ";", "nfake_got_local", "=", "0", "\n", "while", "nfake_got_local", "<", "nfake", ":", "\n", "#randomly choose one formula to generate current image", "\n", "            ", "idx_formula", "=", "np", ".", "arange", "(", "num_formula", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_formula", ")", "\n", "idx_formula", "=", "idx_formula", "[", "0", "]", "\n", "\n", "#column idx of required existing classes for generating current image in existing 24 classes (col index in formula table)", "\n", "idx_required_class", "=", "np", ".", "where", "(", "formula_tmp", "[", "idx_formula", "]", "!=", "0", ")", "[", "0", "]", "\n", "#number of images for each required class", "\n", "num_required_imgs", "=", "formula_tmp", "[", "idx_formula", ",", "idx_required_class", "]", "\n", "#to store the indicies of require images in IMGs_real", "\n", "idx_required_imgs", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "tmp", "in", "range", "(", "len", "(", "idx_required_class", ")", ")", ":", "\n", "                ", "idx_required_imgs", "=", "np", ".", "concatenate", "(", "(", "idx_required_imgs", ",", "np", ".", "random", ".", "choice", "(", "idx_per_class_2", "[", "idx_required_class", "[", "tmp", "]", "]", ",", "num_required_imgs", "[", "tmp", "]", ",", "replace", "=", "False", ")", ")", ")", "\n", "", "required_imgs", "=", "IMGs_real", "[", "idx_required_imgs", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "if", "flipping", ":", "\n", "                ", "for", "tmp", "in", "range", "(", "len", "(", "idx_required_imgs", ")", ")", ":", "\n", "                    ", "PIL_im", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "required_imgs", "[", "tmp", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "PIL_im", "=", "TransHFlip", "(", "PIL_im", ")", "\n", "PIL_im", "=", "TransVFlip", "(", "PIL_im", ")", "\n", "required_imgs", "[", "tmp", "]", "=", "np", ".", "array", "(", "PIL_im", ")", "\n", "\n", "", "", "current_fake_img", "=", "np", ".", "amax", "(", "required_imgs", ",", "axis", "=", "0", ")", "\n", "current_intensity", "=", "np", ".", "mean", "(", "current_fake_img", ")", "\n", "\n", "if", "(", "(", "current_intensity", ">=", "intensity_min", ")", "and", "(", "current_intensity", "<=", "intensity_max", ")", ")", "or", "(", "current_cell_count", "<=", "threshold_for_skipping_filtering", ")", ":", "\n", "                ", "IMGs_fake_2", "[", "nfake_got_total", ":", "(", "nfake_got_total", "+", "1", ")", ",", "0", ",", ":", ",", ":", "]", "=", "current_fake_img", "\n", "CellCount_fake_2", "[", "nfake_got_total", ":", "(", "nfake_got_total", "+", "1", ")", "]", "=", "current_cell_count", "\n", "nfake_got_local", "+=", "1", "\n", "nfake_got_total", "+=", "1", "\n", "j", "=", "0", "\n", "", "elif", "j", ">", "3000", ":", "\n", "                ", "j", "=", "0", "\n", "if", "current_intensity", "<", "intensity_min", ":", "\n", "                    ", "intensity_min", "*=", "0.975", "\n", "", "if", "current_intensity", ">", "intensity_max", ":", "\n", "                    ", "intensity_max", "*=", "1.025", "\n", "", "", "j", "+=", "1", "\n", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "\"Comb:%d; Class:%d; Steps:%d; Nfake:%d; min:%.4f; max:%.4f; current:%.4f\"", "%", "(", "2", ",", "AugClass", "[", "i", "]", ",", "j", ",", "nfake_got_local", ",", "intensity_min", ",", "intensity_max", ",", "current_intensity", ")", ")", "\n", "\n", "", "", "", "if", "show_sample_img", ":", "\n", "        ", "idx_tmp", "=", "np", ".", "arange", "(", "len", "(", "IMGs_fake_2", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_tmp", ")", "\n", "idx_tmp", "=", "idx_tmp", "[", "0", "]", "\n", "plt", ".", "imshow", "(", "IMGs_fake_2", "[", "idx_tmp", "]", "[", "0", "]", ",", "cmap", "=", "'gray'", ",", "vmin", "=", "0", ",", "vmax", "=", "255", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "#--------------------------------------------------------------------------", "\n", "### 3. Blur 23 and Stain 1", "\n", "", "idx_per_class_3", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_cell_count", ")", ")", ":", "\n", "        ", "idx_per_class_3", ".", "append", "(", "np", ".", "where", "(", "(", "Blur_real", "==", "23", ")", "*", "(", "Stain_real", "==", "1", ")", "*", "(", "CellCount_real", "==", "unique_cell_count", "[", "i", "]", ")", "==", "True", ")", "[", "0", "]", ")", "\n", "\n", "# filtering by a fitted linear regression;", "\n", "# rank intensities for each cell count by square error, choose first nfake images", "\n", "", "intensity_real_mins", "=", "[", "]", "\n", "intensity_real_maxs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_cell_count", ")", ")", ":", "\n", "        ", "current_cellcount", "=", "unique_cell_count", "[", "i", "]", "\n", "indx_stain_blur_count", "=", "np", ".", "where", "(", "(", "(", "Blur_real", "==", "23", ")", "*", "(", "Stain_real", "==", "1", ")", "*", "(", "CellCount_real", "==", "current_cellcount", ")", ")", "==", "True", ")", "[", "0", "]", "\n", "intensity_real_mins", ".", "append", "(", "np", ".", "min", "(", "Intensity_real", "[", "indx_stain_blur_count", "]", ")", ")", "\n", "intensity_real_maxs", ".", "append", "(", "np", ".", "max", "(", "Intensity_real", "[", "indx_stain_blur_count", "]", ")", ")", "\n", "", "y_min", "=", "np", ".", "array", "(", "intensity_real_mins", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y_max", "=", "np", ".", "array", "(", "intensity_real_maxs", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "np", ".", "array", "(", "list", "(", "unique_cell_count", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "regr_min", "=", "linear_model", ".", "LinearRegression", "(", ")", "\n", "regr_min", ".", "fit", "(", "x", ",", "y_min", ")", "\n", "regr_max", "=", "linear_model", ".", "LinearRegression", "(", ")", "\n", "regr_max", ".", "fit", "(", "x", ",", "y_max", ")", "\n", "\n", "IMGs_fake_3", "=", "np", ".", "zeros", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", "args", ".", "num_channels", ",", "args", ".", "img_height", ",", "args", ".", "img_width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "CellCount_fake_3", "=", "np", ".", "zeros", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "Blur_fake_3", "=", "23", "*", "np", ".", "ones", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "Stain_fake_3", "=", "np", ".", "ones", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "nfake_got_total", "=", "0", "\n", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "AugClass", ")", ")", ":", "\n", "        ", "formula_tmp", "=", "formula_fake_list", "[", "i", "]", "#formula for current class", "\n", "num_formula", "=", "formula_tmp", ".", "shape", "[", "0", "]", "#number of formulae for current class", "\n", "\n", "current_cell_count", "=", "AugClass", "[", "i", "]", "#current new class", "\n", "\n", "if", "do_filter", ":", "\n", "            ", "intensity_min", "=", "(", "regr_min", ".", "predict", "(", "np", ".", "array", "(", "[", "current_cell_count", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", "[", "0", "]", "[", "0", "]", "*", "multiple_left_bound", "\n", "intensity_max", "=", "(", "regr_max", ".", "predict", "(", "np", ".", "array", "(", "[", "current_cell_count", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", "[", "0", "]", "[", "0", "]", "*", "multiple_right_bound", "\n", "", "else", ":", "\n", "            ", "intensity_min", "=", "-", "100.0", "\n", "intensity_max", "=", "99999", "\n", "\n", "", "j", "=", "0", ";", "nfake_got_local", "=", "0", "\n", "while", "nfake_got_local", "<", "nfake", ":", "\n", "#randomly choose one formula to generate current image", "\n", "            ", "idx_formula", "=", "np", ".", "arange", "(", "num_formula", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_formula", ")", "\n", "idx_formula", "=", "idx_formula", "[", "0", "]", "\n", "\n", "#column idx of required existing classes for generating current image in existing 24 classes (col index in formula table)", "\n", "idx_required_class", "=", "np", ".", "where", "(", "formula_tmp", "[", "idx_formula", "]", "!=", "0", ")", "[", "0", "]", "\n", "#number of images for each required class", "\n", "num_required_imgs", "=", "formula_tmp", "[", "idx_formula", ",", "idx_required_class", "]", "\n", "#to store the indicies of require images in IMGs_real", "\n", "idx_required_imgs", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "tmp", "in", "range", "(", "len", "(", "idx_required_class", ")", ")", ":", "\n", "                ", "idx_required_imgs", "=", "np", ".", "concatenate", "(", "(", "idx_required_imgs", ",", "np", ".", "random", ".", "choice", "(", "idx_per_class_3", "[", "idx_required_class", "[", "tmp", "]", "]", ",", "num_required_imgs", "[", "tmp", "]", ",", "replace", "=", "False", ")", ")", ")", "\n", "", "required_imgs", "=", "IMGs_real", "[", "idx_required_imgs", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "if", "flipping", ":", "\n", "                ", "for", "tmp", "in", "range", "(", "len", "(", "idx_required_imgs", ")", ")", ":", "\n", "                    ", "PIL_im", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "required_imgs", "[", "tmp", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "PIL_im", "=", "TransHFlip", "(", "PIL_im", ")", "\n", "PIL_im", "=", "TransVFlip", "(", "PIL_im", ")", "\n", "required_imgs", "[", "tmp", "]", "=", "np", ".", "array", "(", "PIL_im", ")", "\n", "\n", "", "", "current_fake_img", "=", "np", ".", "amax", "(", "required_imgs", ",", "axis", "=", "0", ")", "\n", "current_intensity", "=", "np", ".", "mean", "(", "current_fake_img", ")", "\n", "\n", "if", "(", "(", "current_intensity", ">=", "intensity_min", ")", "and", "(", "current_intensity", "<=", "intensity_max", ")", ")", "or", "(", "current_cell_count", "<=", "threshold_for_skipping_filtering", ")", ":", "\n", "                ", "IMGs_fake_3", "[", "nfake_got_total", ":", "(", "nfake_got_total", "+", "1", ")", ",", "0", ",", ":", ",", ":", "]", "=", "current_fake_img", "\n", "CellCount_fake_3", "[", "nfake_got_total", ":", "(", "nfake_got_total", "+", "1", ")", "]", "=", "current_cell_count", "\n", "nfake_got_local", "+=", "1", "\n", "nfake_got_total", "+=", "1", "\n", "j", "=", "0", "\n", "", "elif", "j", ">", "3000", ":", "\n", "                ", "j", "=", "0", "\n", "if", "current_intensity", "<", "intensity_min", ":", "\n", "                    ", "intensity_min", "*=", "0.975", "\n", "", "if", "current_intensity", ">", "intensity_max", ":", "\n", "                    ", "intensity_max", "*=", "1.025", "\n", "", "", "j", "+=", "1", "\n", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "\"Comb:%d; Class:%d; Steps:%d; Nfake:%d; min:%.4f; max:%.4f; current:%.4f\"", "%", "(", "3", ",", "AugClass", "[", "i", "]", ",", "j", ",", "nfake_got_local", ",", "intensity_min", ",", "intensity_max", ",", "current_intensity", ")", ")", "\n", "\n", "", "", "", "if", "show_sample_img", ":", "\n", "        ", "idx_tmp", "=", "np", ".", "arange", "(", "len", "(", "IMGs_fake_3", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_tmp", ")", "\n", "idx_tmp", "=", "idx_tmp", "[", "0", "]", "\n", "plt", ".", "imshow", "(", "IMGs_fake_3", "[", "idx_tmp", "]", "[", "0", "]", ",", "cmap", "=", "'gray'", ",", "vmin", "=", "0", ",", "vmax", "=", "255", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "#--------------------------------------------------------------------------", "\n", "### 4. Blur 23 and Stain 2", "\n", "", "idx_per_class_4", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_cell_count", ")", ")", ":", "\n", "        ", "idx_per_class_4", ".", "append", "(", "np", ".", "where", "(", "(", "Blur_real", "==", "23", ")", "*", "(", "Stain_real", "==", "2", ")", "*", "(", "CellCount_real", "==", "unique_cell_count", "[", "i", "]", ")", "==", "True", ")", "[", "0", "]", ")", "\n", "\n", "# filtering by a fitted linear regression;", "\n", "# rank intensities for each cell count by square error, choose first nfake images", "\n", "", "intensity_real_mins", "=", "[", "]", "\n", "intensity_real_maxs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_cell_count", ")", ")", ":", "\n", "        ", "current_cellcount", "=", "unique_cell_count", "[", "i", "]", "\n", "indx_stain_blur_count", "=", "np", ".", "where", "(", "(", "(", "Blur_real", "==", "23", ")", "*", "(", "Stain_real", "==", "2", ")", "*", "(", "CellCount_real", "==", "current_cellcount", ")", ")", "==", "True", ")", "[", "0", "]", "\n", "intensity_real_mins", ".", "append", "(", "np", ".", "min", "(", "Intensity_real", "[", "indx_stain_blur_count", "]", ")", ")", "\n", "intensity_real_maxs", ".", "append", "(", "np", ".", "max", "(", "Intensity_real", "[", "indx_stain_blur_count", "]", ")", ")", "\n", "", "x_min", "=", "np", ".", "array", "(", "intensity_real_mins", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x_max", "=", "np", ".", "array", "(", "intensity_real_maxs", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y", "=", "np", ".", "array", "(", "list", "(", "unique_cell_count", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "X_min", "=", "np", ".", "concatenate", "(", "(", "x_min", ",", "x_min", "**", "2", ")", ",", "axis", "=", "1", ")", "\n", "X_max", "=", "np", ".", "concatenate", "(", "(", "x_max", ",", "x_max", "**", "2", ")", ",", "axis", "=", "1", ")", "\n", "regr_min", "=", "linear_model", ".", "LinearRegression", "(", ")", "\n", "regr_min", ".", "fit", "(", "X_min", ",", "y", ")", "\n", "c_min", "=", "regr_min", ".", "intercept_", "[", "0", "]", ";", "b_min", "=", "regr_min", ".", "coef_", "[", "0", "]", "[", "0", "]", ";", "a_min", "=", "regr_min", ".", "coef_", "[", "0", "]", "[", "1", "]", "\n", "regr_max", "=", "linear_model", ".", "LinearRegression", "(", ")", "\n", "regr_max", ".", "fit", "(", "X_max", ",", "y", ")", "\n", "c_max", "=", "regr_max", ".", "intercept_", "[", "0", "]", ";", "b_max", "=", "regr_max", ".", "coef_", "[", "0", "]", "[", "0", "]", ";", "a_max", "=", "regr_max", ".", "coef_", "[", "0", "]", "[", "1", "]", "\n", "\n", "IMGs_fake_4", "=", "np", ".", "zeros", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", "args", ".", "num_channels", ",", "args", ".", "img_height", ",", "args", ".", "img_width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "CellCount_fake_4", "=", "np", ".", "zeros", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "Blur_fake_4", "=", "23", "*", "np", ".", "ones", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "Stain_fake_4", "=", "2", "*", "np", ".", "ones", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "nfake_got_total", "=", "0", "\n", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "AugClass", ")", ")", ":", "\n", "        ", "formula_tmp", "=", "formula_fake_list", "[", "i", "]", "#formula for current class", "\n", "num_formula", "=", "formula_tmp", ".", "shape", "[", "0", "]", "#number of formulae for current class", "\n", "\n", "current_cell_count", "=", "AugClass", "[", "i", "]", "#current new class", "\n", "\n", "if", "do_filter", ":", "\n", "            ", "intensity_min", "=", "(", "-", "b_min", "+", "np", ".", "sqrt", "(", "b_min", "**", "2", "-", "4", "*", "a_min", "*", "(", "c_min", "-", "current_cell_count", ")", ")", ")", "/", "(", "2", "*", "a_min", ")", "\n", "intensity_max", "=", "(", "-", "b_max", "+", "np", ".", "sqrt", "(", "b_max", "**", "2", "-", "4", "*", "a_max", "*", "(", "c_max", "-", "current_cell_count", ")", ")", ")", "/", "(", "2", "*", "a_max", ")", "\n", "", "else", ":", "\n", "            ", "intensity_min", "=", "-", "100.0", "\n", "intensity_max", "=", "99999", "\n", "\n", "", "j", "=", "0", ";", "nfake_got_local", "=", "0", "\n", "while", "nfake_got_local", "<", "nfake", ":", "\n", "#randomly choose one formula to generate current image", "\n", "            ", "idx_formula", "=", "np", ".", "arange", "(", "num_formula", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_formula", ")", "\n", "idx_formula", "=", "idx_formula", "[", "0", "]", "\n", "\n", "#column idx of required existing classes for generating current image in existing 24 classes (col index in formula table)", "\n", "idx_required_class", "=", "np", ".", "where", "(", "formula_tmp", "[", "idx_formula", "]", "!=", "0", ")", "[", "0", "]", "\n", "#number of images for each required class", "\n", "num_required_imgs", "=", "formula_tmp", "[", "idx_formula", ",", "idx_required_class", "]", "\n", "#to store the indicies of require images in IMGs_real", "\n", "idx_required_imgs", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "tmp", "in", "range", "(", "len", "(", "idx_required_class", ")", ")", ":", "\n", "                ", "idx_required_imgs", "=", "np", ".", "concatenate", "(", "(", "idx_required_imgs", ",", "np", ".", "random", ".", "choice", "(", "idx_per_class_4", "[", "idx_required_class", "[", "tmp", "]", "]", ",", "num_required_imgs", "[", "tmp", "]", ",", "replace", "=", "False", ")", ")", ")", "\n", "", "required_imgs", "=", "IMGs_real", "[", "idx_required_imgs", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "if", "flipping", ":", "\n", "                ", "for", "tmp", "in", "range", "(", "len", "(", "idx_required_imgs", ")", ")", ":", "\n", "                    ", "PIL_im", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "required_imgs", "[", "tmp", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "PIL_im", "=", "TransHFlip", "(", "PIL_im", ")", "\n", "PIL_im", "=", "TransVFlip", "(", "PIL_im", ")", "\n", "required_imgs", "[", "tmp", "]", "=", "np", ".", "array", "(", "PIL_im", ")", "\n", "\n", "", "", "current_fake_img", "=", "np", ".", "amax", "(", "required_imgs", ",", "axis", "=", "0", ")", "\n", "current_intensity", "=", "np", ".", "mean", "(", "current_fake_img", ")", "\n", "\n", "if", "(", "(", "current_intensity", ">=", "intensity_min", ")", "and", "(", "current_intensity", "<=", "intensity_max", ")", ")", "or", "(", "current_cell_count", "<=", "threshold_for_skipping_filtering", ")", ":", "\n", "                ", "IMGs_fake_4", "[", "nfake_got_total", ":", "(", "nfake_got_total", "+", "1", ")", ",", "0", ",", ":", ",", ":", "]", "=", "current_fake_img", "\n", "CellCount_fake_4", "[", "nfake_got_total", ":", "(", "nfake_got_total", "+", "1", ")", "]", "=", "current_cell_count", "\n", "nfake_got_local", "+=", "1", "\n", "nfake_got_total", "+=", "1", "\n", "j", "=", "0", "\n", "", "elif", "j", ">", "3000", ":", "\n", "                ", "j", "=", "0", "\n", "if", "current_intensity", "<", "intensity_min", ":", "\n", "                    ", "intensity_min", "*=", "0.975", "\n", "", "if", "current_intensity", ">", "intensity_max", ":", "\n", "                    ", "intensity_max", "*=", "1.025", "\n", "", "", "j", "+=", "1", "\n", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "\"Comb:%d; Class:%d; Steps:%d; Nfake:%d; min:%.4f; max:%.4f; current:%.4f\"", "%", "(", "4", ",", "AugClass", "[", "i", "]", ",", "j", ",", "nfake_got_local", ",", "intensity_min", ",", "intensity_max", ",", "current_intensity", ")", ")", "\n", "\n", "", "", "", "if", "show_sample_img", ":", "\n", "        ", "idx_tmp", "=", "np", ".", "arange", "(", "len", "(", "IMGs_fake_4", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_tmp", ")", "\n", "idx_tmp", "=", "idx_tmp", "[", "0", "]", "\n", "plt", ".", "imshow", "(", "IMGs_fake_4", "[", "idx_tmp", "]", "[", "0", "]", ",", "cmap", "=", "'gray'", ",", "vmin", "=", "0", ",", "vmax", "=", "255", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "#--------------------------------------------------------------------------", "\n", "### 5. Blur 48 and Stain 1", "\n", "", "idx_per_class_5", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_cell_count", ")", ")", ":", "\n", "        ", "idx_per_class_5", ".", "append", "(", "np", ".", "where", "(", "(", "Blur_real", "==", "48", ")", "*", "(", "Stain_real", "==", "1", ")", "*", "(", "CellCount_real", "==", "unique_cell_count", "[", "i", "]", ")", "==", "True", ")", "[", "0", "]", ")", "\n", "\n", "# filtering by a fitted linear regression;", "\n", "# rank intensities for each cell count by square error, choose first nfake images", "\n", "", "intensity_real_mins", "=", "[", "]", "\n", "intensity_real_maxs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_cell_count", ")", ")", ":", "\n", "        ", "current_cellcount", "=", "unique_cell_count", "[", "i", "]", "\n", "indx_stain_blur_count", "=", "np", ".", "where", "(", "(", "(", "Blur_real", "==", "48", ")", "*", "(", "Stain_real", "==", "1", ")", "*", "(", "CellCount_real", "==", "current_cellcount", ")", ")", "==", "True", ")", "[", "0", "]", "\n", "intensity_real_mins", ".", "append", "(", "np", ".", "min", "(", "Intensity_real", "[", "indx_stain_blur_count", "]", ")", ")", "\n", "intensity_real_maxs", ".", "append", "(", "np", ".", "max", "(", "Intensity_real", "[", "indx_stain_blur_count", "]", ")", ")", "\n", "", "y_min", "=", "np", ".", "array", "(", "intensity_real_mins", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y_max", "=", "np", ".", "array", "(", "intensity_real_maxs", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "np", ".", "array", "(", "list", "(", "unique_cell_count", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "regr_min", "=", "linear_model", ".", "LinearRegression", "(", ")", "\n", "regr_min", ".", "fit", "(", "x", ",", "y_min", ")", "\n", "regr_max", "=", "linear_model", ".", "LinearRegression", "(", ")", "\n", "regr_max", ".", "fit", "(", "x", ",", "y_max", ")", "\n", "\n", "IMGs_fake_5", "=", "np", ".", "zeros", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", "args", ".", "num_channels", ",", "args", ".", "img_height", ",", "args", ".", "img_width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "CellCount_fake_5", "=", "np", ".", "zeros", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "Blur_fake_5", "=", "48", "*", "np", ".", "ones", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "Stain_fake_5", "=", "np", ".", "ones", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "nfake_got_total", "=", "0", "\n", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "AugClass", ")", ")", ":", "\n", "        ", "formula_tmp", "=", "formula_fake_list", "[", "i", "]", "#formula for current class", "\n", "num_formula", "=", "formula_tmp", ".", "shape", "[", "0", "]", "#number of formulae for current class", "\n", "\n", "current_cell_count", "=", "AugClass", "[", "i", "]", "#current new class", "\n", "\n", "if", "do_filter", ":", "\n", "            ", "intensity_min", "=", "(", "regr_min", ".", "predict", "(", "np", ".", "array", "(", "[", "current_cell_count", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", "[", "0", "]", "[", "0", "]", "*", "multiple_left_bound", "\n", "intensity_max", "=", "(", "regr_max", ".", "predict", "(", "np", ".", "array", "(", "[", "current_cell_count", "]", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ")", "[", "0", "]", "[", "0", "]", "*", "multiple_right_bound", "\n", "", "else", ":", "\n", "            ", "intensity_min", "=", "-", "100.0", "\n", "intensity_max", "=", "99999", "\n", "\n", "", "j", "=", "0", ";", "nfake_got_local", "=", "0", "\n", "while", "nfake_got_local", "<", "nfake", ":", "\n", "#randomly choose one formula to generate current image", "\n", "            ", "idx_formula", "=", "np", ".", "arange", "(", "num_formula", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_formula", ")", "\n", "idx_formula", "=", "idx_formula", "[", "0", "]", "\n", "\n", "#column idx of required existing classes for generating current image in existing 24 classes (col index in formula table)", "\n", "idx_required_class", "=", "np", ".", "where", "(", "formula_tmp", "[", "idx_formula", "]", "!=", "0", ")", "[", "0", "]", "\n", "#number of images for each required class", "\n", "num_required_imgs", "=", "formula_tmp", "[", "idx_formula", ",", "idx_required_class", "]", "\n", "#to store the indicies of require images in IMGs_real", "\n", "idx_required_imgs", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "tmp", "in", "range", "(", "len", "(", "idx_required_class", ")", ")", ":", "\n", "                ", "idx_required_imgs", "=", "np", ".", "concatenate", "(", "(", "idx_required_imgs", ",", "np", ".", "random", ".", "choice", "(", "idx_per_class_5", "[", "idx_required_class", "[", "tmp", "]", "]", ",", "num_required_imgs", "[", "tmp", "]", ",", "replace", "=", "False", ")", ")", ")", "\n", "", "required_imgs", "=", "IMGs_real", "[", "idx_required_imgs", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "if", "flipping", ":", "\n", "                ", "for", "tmp", "in", "range", "(", "len", "(", "idx_required_imgs", ")", ")", ":", "\n", "                    ", "PIL_im", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "required_imgs", "[", "tmp", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "PIL_im", "=", "TransHFlip", "(", "PIL_im", ")", "\n", "PIL_im", "=", "TransVFlip", "(", "PIL_im", ")", "\n", "required_imgs", "[", "tmp", "]", "=", "np", ".", "array", "(", "PIL_im", ")", "\n", "\n", "", "", "current_fake_img", "=", "np", ".", "amax", "(", "required_imgs", ",", "axis", "=", "0", ")", "\n", "current_intensity", "=", "np", ".", "mean", "(", "current_fake_img", ")", "\n", "\n", "if", "(", "(", "current_intensity", ">=", "intensity_min", ")", "and", "(", "current_intensity", "<=", "intensity_max", ")", ")", "or", "(", "current_cell_count", "<=", "threshold_for_skipping_filtering", ")", ":", "\n", "                ", "IMGs_fake_5", "[", "nfake_got_total", ":", "(", "nfake_got_total", "+", "1", ")", ",", "0", ",", ":", ",", ":", "]", "=", "current_fake_img", "\n", "CellCount_fake_5", "[", "nfake_got_total", ":", "(", "nfake_got_total", "+", "1", ")", "]", "=", "current_cell_count", "\n", "nfake_got_local", "+=", "1", "\n", "nfake_got_total", "+=", "1", "\n", "j", "=", "0", "\n", "", "elif", "j", ">", "3000", ":", "\n", "                ", "j", "=", "0", "\n", "if", "current_intensity", "<", "intensity_min", ":", "\n", "                    ", "intensity_min", "*=", "0.975", "\n", "", "if", "current_intensity", ">", "intensity_max", ":", "\n", "                    ", "intensity_max", "*=", "1.025", "\n", "", "", "j", "+=", "1", "\n", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "\"Comb:%d; Class:%d; Steps:%d; Nfake:%d; min:%.4f; max:%.4f; current:%.4f\"", "%", "(", "5", ",", "AugClass", "[", "i", "]", ",", "j", ",", "nfake_got_local", ",", "intensity_min", ",", "intensity_max", ",", "current_intensity", ")", ")", "\n", "\n", "", "", "", "if", "show_sample_img", ":", "\n", "        ", "idx_tmp", "=", "np", ".", "arange", "(", "len", "(", "IMGs_fake_5", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_tmp", ")", "\n", "idx_tmp", "=", "idx_tmp", "[", "0", "]", "\n", "plt", ".", "imshow", "(", "IMGs_fake_5", "[", "idx_tmp", "]", "[", "0", "]", ",", "cmap", "=", "'gray'", ",", "vmin", "=", "0", ",", "vmax", "=", "255", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "#--------------------------------------------------------------------------", "\n", "### 6. Blur 48 and Stain 2", "\n", "", "idx_per_class_6", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_cell_count", ")", ")", ":", "\n", "        ", "idx_per_class_6", ".", "append", "(", "np", ".", "where", "(", "(", "Blur_real", "==", "48", ")", "*", "(", "Stain_real", "==", "2", ")", "*", "(", "CellCount_real", "==", "unique_cell_count", "[", "i", "]", ")", "==", "True", ")", "[", "0", "]", ")", "\n", "\n", "# filtering by a fitted linear regression;", "\n", "# rank intensities for each cell count by square error, choose first nfake images", "\n", "", "intensity_real_mins", "=", "[", "]", "\n", "intensity_real_maxs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_cell_count", ")", ")", ":", "\n", "        ", "current_cellcount", "=", "unique_cell_count", "[", "i", "]", "\n", "indx_stain_blur_count", "=", "np", ".", "where", "(", "(", "(", "Blur_real", "==", "48", ")", "*", "(", "Stain_real", "==", "2", ")", "*", "(", "CellCount_real", "==", "current_cellcount", ")", ")", "==", "True", ")", "[", "0", "]", "\n", "intensity_real_mins", ".", "append", "(", "np", ".", "min", "(", "Intensity_real", "[", "indx_stain_blur_count", "]", ")", ")", "\n", "intensity_real_maxs", ".", "append", "(", "np", ".", "max", "(", "Intensity_real", "[", "indx_stain_blur_count", "]", ")", ")", "\n", "", "x_min", "=", "np", ".", "array", "(", "intensity_real_mins", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x_max", "=", "np", ".", "array", "(", "intensity_real_maxs", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "y", "=", "np", ".", "array", "(", "list", "(", "unique_cell_count", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "X_min", "=", "np", ".", "concatenate", "(", "(", "x_min", ",", "x_min", "**", "2", ")", ",", "axis", "=", "1", ")", "\n", "X_max", "=", "np", ".", "concatenate", "(", "(", "x_max", ",", "x_max", "**", "2", ")", ",", "axis", "=", "1", ")", "\n", "regr_min", "=", "linear_model", ".", "LinearRegression", "(", ")", "\n", "regr_min", ".", "fit", "(", "X_min", ",", "y", ")", "\n", "c_min", "=", "regr_min", ".", "intercept_", "[", "0", "]", ";", "b_min", "=", "regr_min", ".", "coef_", "[", "0", "]", "[", "0", "]", ";", "a_min", "=", "regr_min", ".", "coef_", "[", "0", "]", "[", "1", "]", "\n", "regr_max", "=", "linear_model", ".", "LinearRegression", "(", ")", "\n", "regr_max", ".", "fit", "(", "X_max", ",", "y", ")", "\n", "c_max", "=", "regr_max", ".", "intercept_", "[", "0", "]", ";", "b_max", "=", "regr_max", ".", "coef_", "[", "0", "]", "[", "0", "]", ";", "a_max", "=", "regr_max", ".", "coef_", "[", "0", "]", "[", "1", "]", "\n", "\n", "IMGs_fake_6", "=", "np", ".", "zeros", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", "args", ".", "num_channels", ",", "args", ".", "img_height", ",", "args", ".", "img_width", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "CellCount_fake_6", "=", "np", ".", "zeros", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "Blur_fake_6", "=", "48", "*", "np", ".", "ones", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "Stain_fake_6", "=", "2", "*", "np", ".", "ones", "(", "(", "nfake", "*", "len", "(", "AugClass", ")", ",", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "nfake_got_total", "=", "0", "\n", "for", "i", "in", "np", ".", "arange", "(", "len", "(", "AugClass", ")", ")", ":", "\n", "        ", "formula_tmp", "=", "formula_fake_list", "[", "i", "]", "#formula for current class", "\n", "num_formula", "=", "formula_tmp", ".", "shape", "[", "0", "]", "#number of formulae for current class", "\n", "\n", "current_cell_count", "=", "AugClass", "[", "i", "]", "#current new class", "\n", "\n", "if", "do_filter", ":", "\n", "            ", "intensity_min", "=", "(", "-", "b_min", "+", "np", ".", "sqrt", "(", "b_min", "**", "2", "-", "4", "*", "a_min", "*", "(", "c_min", "-", "current_cell_count", ")", ")", ")", "/", "(", "2", "*", "a_min", ")", "\n", "intensity_max", "=", "(", "-", "b_max", "+", "np", ".", "sqrt", "(", "b_max", "**", "2", "-", "4", "*", "a_max", "*", "(", "c_max", "-", "current_cell_count", ")", ")", ")", "/", "(", "2", "*", "a_max", ")", "\n", "", "else", ":", "\n", "            ", "intensity_min", "=", "-", "100.0", "\n", "intensity_max", "=", "99999", "\n", "\n", "", "j", "=", "0", ";", "nfake_got_local", "=", "0", "\n", "while", "nfake_got_local", "<", "nfake", ":", "\n", "#randomly choose one formula to generate current image", "\n", "            ", "idx_formula", "=", "np", ".", "arange", "(", "num_formula", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_formula", ")", "\n", "idx_formula", "=", "idx_formula", "[", "0", "]", "\n", "\n", "#column idx of required existing classes for generating current image in existing 24 classes (col index in formula table)", "\n", "idx_required_class", "=", "np", ".", "where", "(", "formula_tmp", "[", "idx_formula", "]", "!=", "0", ")", "[", "0", "]", "\n", "#number of images for each required class", "\n", "num_required_imgs", "=", "formula_tmp", "[", "idx_formula", ",", "idx_required_class", "]", "\n", "#to store the indicies of require images in IMGs_real", "\n", "idx_required_imgs", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "tmp", "in", "range", "(", "len", "(", "idx_required_class", ")", ")", ":", "\n", "                ", "idx_required_imgs", "=", "np", ".", "concatenate", "(", "(", "idx_required_imgs", ",", "np", ".", "random", ".", "choice", "(", "idx_per_class_6", "[", "idx_required_class", "[", "tmp", "]", "]", ",", "num_required_imgs", "[", "tmp", "]", ",", "replace", "=", "False", ")", ")", ")", "\n", "", "required_imgs", "=", "IMGs_real", "[", "idx_required_imgs", ",", "0", ",", ":", ",", ":", "]", "\n", "\n", "if", "flipping", ":", "\n", "                ", "for", "tmp", "in", "range", "(", "len", "(", "idx_required_imgs", ")", ")", ":", "\n", "                    ", "PIL_im", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "required_imgs", "[", "tmp", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "PIL_im", "=", "TransHFlip", "(", "PIL_im", ")", "\n", "PIL_im", "=", "TransVFlip", "(", "PIL_im", ")", "\n", "required_imgs", "[", "tmp", "]", "=", "np", ".", "array", "(", "PIL_im", ")", "\n", "\n", "", "", "current_fake_img", "=", "np", ".", "amax", "(", "required_imgs", ",", "axis", "=", "0", ")", "\n", "current_intensity", "=", "np", ".", "mean", "(", "current_fake_img", ")", "\n", "\n", "if", "(", "(", "current_intensity", ">=", "intensity_min", ")", "and", "(", "current_intensity", "<=", "intensity_max", ")", ")", "or", "(", "current_cell_count", "<=", "threshold_for_skipping_filtering", ")", ":", "\n", "                ", "IMGs_fake_6", "[", "nfake_got_total", ":", "(", "nfake_got_total", "+", "1", ")", ",", "0", ",", ":", ",", ":", "]", "=", "current_fake_img", "\n", "CellCount_fake_6", "[", "nfake_got_total", ":", "(", "nfake_got_total", "+", "1", ")", "]", "=", "current_cell_count", "\n", "nfake_got_local", "+=", "1", "\n", "nfake_got_total", "+=", "1", "\n", "j", "=", "0", "\n", "", "elif", "j", ">", "3000", ":", "\n", "                ", "j", "=", "0", "\n", "if", "current_intensity", "<", "intensity_min", ":", "\n", "                    ", "intensity_min", "*=", "0.95", "\n", "", "if", "current_intensity", ">", "intensity_max", ":", "\n", "                    ", "intensity_max", "*=", "1.05", "\n", "", "", "j", "+=", "1", "\n", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "\"Comb:%d; Class:%d; Steps:%d; Nfake:%d; min:%.4f; max:%.4f; current:%.4f\"", "%", "(", "6", ",", "AugClass", "[", "i", "]", ",", "j", ",", "nfake_got_local", ",", "intensity_min", ",", "intensity_max", ",", "current_intensity", ")", ")", "\n", "\n", "", "", "", "if", "show_sample_img", ":", "\n", "        ", "idx_tmp", "=", "np", ".", "arange", "(", "len", "(", "IMGs_fake_6", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_tmp", ")", "\n", "idx_tmp", "=", "idx_tmp", "[", "0", "]", "\n", "plt", ".", "imshow", "(", "IMGs_fake_6", "[", "idx_tmp", "]", "[", "0", "]", ",", "cmap", "=", "'gray'", ",", "vmin", "=", "0", ",", "vmax", "=", "255", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "#############################################################", "\n", "# attach fake images to the end of training images", "\n", "", "IMGs_fake", "=", "np", ".", "concatenate", "(", "(", "IMGs_fake_1", ",", "IMGs_fake_2", ",", "IMGs_fake_3", ",", "IMGs_fake_4", ",", "IMGs_fake_5", ",", "IMGs_fake_6", ")", ",", "axis", "=", "0", ")", "\n", "CellCount_fake", "=", "np", ".", "concatenate", "(", "(", "CellCount_fake_1", ",", "CellCount_fake_2", ",", "CellCount_fake_3", ",", "CellCount_fake_4", ",", "CellCount_fake_5", ",", "CellCount_fake_6", ")", ")", "\n", "Blur_fake", "=", "np", ".", "concatenate", "(", "(", "Blur_fake_1", ",", "Blur_fake_2", ",", "Blur_fake_3", ",", "Blur_fake_4", ",", "Blur_fake_5", ",", "Blur_fake_6", ")", ")", "\n", "Stain_fake", "=", "np", ".", "concatenate", "(", "(", "Stain_fake_1", ",", "Stain_fake_2", ",", "Stain_fake_3", ",", "Stain_fake_4", ",", "Stain_fake_5", ",", "Stain_fake_6", ")", ")", "\n", "\n", "# dump fake images", "\n", "if", "dump_fake", ":", "\n", "        ", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "IMGs_fake", ")", ")", ")", ":", "\n", "            ", "image_array", "=", "IMGs_fake", "[", "i", "]", "[", "0", "]", "\n", "filename", "=", "fakeImg_dir", "+", "'FakeImg_indx'", "+", "str", "(", "i", ")", "+", "'_CellCount'", "+", "str", "(", "CellCount_fake", "[", "i", "]", ")", "+", "'_blur'", "+", "str", "(", "Blur_fake", "[", "i", "]", ")", "+", "'_stain'", "+", "str", "(", "Stain_fake", "[", "i", "]", ")", "+", "'.png'", "\n", "im", "=", "PIL", ".", "Image", ".", "fromarray", "(", "image_array", ")", "\n", "im", ".", "save", "(", "filename", ")", "\n", "\n", "", "", "del", "IMGs_fake_1", ",", "IMGs_fake_2", ",", "IMGs_fake_3", ",", "IMGs_fake_4", ",", "IMGs_fake_5", ",", "IMGs_fake_6", ";", "gc", ".", "collect", "(", ")", "\n", "\n", "IMGs_all", "=", "np", ".", "concatenate", "(", "(", "IMGs_real", ",", "IMGs_fake", ")", ",", "axis", "=", "0", ")", "\n", "CellCount_all", "=", "np", ".", "concatenate", "(", "(", "CellCount_real", ",", "CellCount_fake", ")", ")", "\n", "Blur_all", "=", "np", ".", "concatenate", "(", "(", "Blur_real", ",", "Blur_fake", ")", ")", "\n", "Stain_all", "=", "np", ".", "concatenate", "(", "(", "Stain_real", ",", "Stain_fake", ")", ")", "\n", "\n", "return", "IMGs_all", ",", "CellCount_all", ",", "Blur_all", ",", "Stain_all", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.train_regre_cnn.adjust_learning_rate": [[31, 43], ["len", "range"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate \"\"\"", "\n", "lr", "=", "lr_base", "\n", "\n", "num_decays", "=", "len", "(", "lr_decay_epochs", ")", "\n", "for", "decay_i", "in", "range", "(", "num_decays", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epochs", "[", "decay_i", "]", ":", "\n", "            ", "lr", "=", "lr", "*", "lr_decay_factor", "\n", "#end if epoch", "\n", "#end for decay_i", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.train_regre_cnn.train_regre_cnn": [[45, 123], ["net.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.MSELoss", "timeit.default_timer", "range", "net.cuda.parameters", "print", "torch.load", "torch.load", "net.cuda.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.set_rng_state", "torch.set_rng_state", "train_regre_cnn.adjust_learning_rate", "enumerate", "train_regre_cnn.test_regre_cnn", "net.cuda.train", "batch_images.type().cuda.type().cuda", "batch_counts.type().cuda.type().cuda", "net.cuda.", "nn.MSELoss.", "torch.optim.Adam.zero_grad", "criterion.backward", "torch.optim.Adam.step", "criterion.cpu().item", "os.makedirs", "torch.save", "torch.save", "net.view", "batch_counts.type().cuda.view", "print", "os.path.dirname", "batch_images.type().cuda.type", "batch_counts.type().cuda.type", "criterion.cpu", "net.cuda.state_dict", "torch.optim.Adam.state_dict", "torch.get_rng_state", "torch.get_rng_state", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_fpn_mask.adjust_learning_rate", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.train_regre_cnn.test_regre_cnn"], ["", "", "def", "train_regre_cnn", "(", "trainloader", ",", "testloader", ",", "max_count", ",", "net", ",", "path_to_ckpt", "=", "None", ")", ":", "\n", "    ", "'''\n    net: cnn net\n    '''", "\n", "\n", "# nets", "\n", "net", "=", "net", ".", "cuda", "(", ")", "\n", "\n", "# define optimizer", "\n", "# optimizer = torch.optim.SGD(net.parameters(), lr=lr_base, weight_decay=weight_decay)", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr_base", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "# criterion", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "resume_epoch", ">", "0", ":", "\n", "        ", "print", "(", "\"Loading ckpt to resume training the CNN >>>\"", ")", "\n", "ckpt_fullpath", "=", "path_to_ckpt", "+", "\"/regre_{}_checkpoint_epoch_{}.pth\"", ".", "format", "(", "cnn_name", ",", "resume_epoch", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_fullpath", ")", "\n", "net", ".", "load_state_dict", "(", "checkpoint", "[", "'net_state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "checkpoint", "[", "'rng_state'", "]", ")", "\n", "steps", "=", "checkpoint", "[", "'steps'", "]", "\n", "", "else", ":", "\n", "        ", "steps", "=", "0", "\n", "\n", "", "start_time", "=", "timeit", ".", "default_timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "resume_epoch", ",", "epochs", ")", ":", "\n", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train_loss", "=", "0", "\n", "\n", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "            ", "net", ".", "train", "(", ")", "\n", "\n", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_counts", "=", "batch_samples", "[", "'count'", "]", "#normalized", "\n", "\n", "batch_size_curr", "=", "batch_images", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size_curr", "==", "batch_counts", ".", "shape", "[", "0", "]", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_counts", "=", "batch_counts", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "\n", "#forward pass", "\n", "batch_pred_counts", "=", "net", "(", "batch_images", ")", "\n", "loss", "=", "criterion", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ")", ",", "batch_counts", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "#backward pass", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "steps", "+=", "1", "\n", "\n", "if", "steps", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "\"\\nregre {}: [step {}] [epoch {}/{}] [train loss {:.3f}] [Time {:.3f}]\"", ".", "format", "(", "cnn_name", ",", "steps", ",", "epoch", "+", "1", ",", "epochs", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "timeit", ".", "default_timer", "(", ")", "-", "start_time", ")", ")", "\n", "# end for batch_idx", "\n", "\n", "", "", "_", "=", "test_regre_cnn", "(", "testloader", ",", "max_count", ",", "net", ",", "verbose", "=", "True", ")", "\n", "#end for epoch", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "(", "epoch", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "            ", "save_file", "=", "path_to_ckpt", "+", "\"/regre_{}_checkpoint_epoch_{}.pth\"", ".", "format", "(", "cnn_name", ",", "epoch", "+", "1", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'steps'", ":", "steps", ",", "\n", "'net_state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'rng_state'", ":", "torch", ".", "get_rng_state", "(", ")", "\n", "}", ",", "save_file", ")", "\n", "#end for epoch", "\n", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.train_regre_cnn.test_regre_cnn": [[125, 168], ["net.eval.eval", "torch.MSELoss", "torch.L1Loss", "math.sqrt", "torch.cat().numpy", "torch.cat().numpy", "torch.no_grad", "torch.no_grad", "enumerate", "len", "print", "batch_images.type().cuda.type().cuda", "batch_counts.type.type", "net.eval.", "batch_pred_counts.cpu.cpu", "torch.cat().numpy.append", "nn.MSELoss.", "nn.L1Loss.", "square_error.item", "absolute_error.item", "len", "torch.cat", "torch.cat", "batch_pred_counts.cpu.view", "batch_counts.type.view", "batch_pred_counts.cpu.view", "batch_counts.type.view", "batch_images.type().cuda.type"], "function", ["None"], ["", "def", "test_regre_cnn", "(", "testloader", ",", "max_count", ",", "net", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "net", "=", "net", ".", "eval", "(", ")", "\n", "\n", "# criterion", "\n", "square_error", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "absolute_error", "=", "nn", ".", "L1Loss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n", "test_rmse", "=", "0", "\n", "test_mae", "=", "0", "\n", "predicted_counts", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_counts", "=", "batch_samples", "[", "'count'", "]", "#unnormalized", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_counts", "=", "batch_counts", ".", "type", "(", "torch", ".", "float", ")", "\n", "\n", "#forward pass", "\n", "batch_pred_counts", "=", "net", "(", "batch_images", ")", "\n", "batch_pred_counts", "=", "batch_pred_counts", ".", "cpu", "(", ")", "\n", "batch_pred_counts", "*=", "max_count", "#back to the original scale", "\n", "predicted_counts", ".", "append", "(", "batch_pred_counts", ")", "\n", "\n", "batch_sum_of_square_error", "=", "square_error", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ")", ",", "batch_counts", ".", "view", "(", "-", "1", ")", ")", "\n", "batch_sum_of_absolute_error", "=", "absolute_error", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ")", ",", "batch_counts", ".", "view", "(", "-", "1", ")", ")", "\n", "test_rmse", "+=", "batch_sum_of_square_error", ".", "item", "(", ")", "\n", "test_mae", "+=", "batch_sum_of_absolute_error", ".", "item", "(", ")", "\n", "#end for batch_idx", "\n", "", "", "test_rmse", "=", "math", ".", "sqrt", "(", "test_rmse", "/", "len", "(", "testloader", ".", "dataset", ")", ")", "\n", "test_mae", "=", "test_mae", "/", "len", "(", "testloader", ".", "dataset", ")", "\n", "predicted_counts", "=", "torch", ".", "cat", "(", "predicted_counts", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'\\n====> Test set RMSE: %.4f; Test set MAE: %.4f'", "%", "(", "test_rmse", ",", "test_mae", ")", ")", "\n", "\n", "", "output", "=", "{", "}", "\n", "output", "[", "'RMSE'", "]", "=", "test_rmse", "\n", "output", "[", "'MAE'", "]", "=", "test_mae", "\n", "output", "[", "'Pred'", "]", "=", "predicted_counts", "\n", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.utils.IMGs_dataset.__init__": [[15, 43], ["super().__init__", "numpy.mean", "numpy.std", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "images", ",", "dot_annots", "=", "None", ",", "masks", "=", "None", ",", "counts", "=", "None", ",", "normalize", "=", "True", ",", "transform", "=", "False", ")", ":", "\n", "        ", "'''\n        images: numpy array images;\n        dot_annots: dot annotations; numpy array images\n        masks: segmentation masks\n        counts: cell counts\n        normalize: normalize images to [-1,1]\n        transform: random transform on images; horizontal and vertical flip, random rotation (90,180,270)\n        '''", "\n", "\n", "super", "(", "IMGs_dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "images", "=", "images", "\n", "self", ".", "image_mean", "=", "np", ".", "mean", "(", "images", ")", "\n", "self", ".", "image_std", "=", "np", ".", "std", "(", "images", ")", "\n", "self", ".", "n_images", "=", "len", "(", "self", ".", "images", ")", "\n", "self", ".", "counts", "=", "counts", "\n", "self", ".", "dot_annots", "=", "dot_annots", "\n", "self", ".", "masks", "=", "masks", "\n", "\n", "if", "self", ".", "counts", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "n_images", "==", "len", "(", "self", ".", "counts", ")", "\n", "", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "n_images", "==", "len", "(", "self", ".", "dot_annots", ")", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "n_images", "==", "len", "(", "self", ".", "masks", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.utils.IMGs_dataset.__getitem__": [[44, 95], ["PIL.Image.fromarray", "TransHFlip", "TransVFlip", "numpy.array", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "numpy.uint8", "PIL.Image.fromarray", "torchvision.transforms.functional.rotate", "TransHFlip", "TransVFlip", "numpy.array", "PIL.Image.fromarray", "torchvision.transforms.functional.rotate", "TransHFlip", "TransVFlip", "numpy.array", "numpy.uint8", "numpy.uint8"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "## for grey scale only", "\n", "        ", "image", "=", "self", ".", "images", "[", "index", "]", "\n", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "            ", "dot_annot", "=", "self", ".", "dot_annots", "[", "index", "]", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "masks", "[", "index", "]", "\n", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "image_pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", "[", "0", "]", ")", ",", "mode", "=", "'L'", ")", "#H * W", "\n", "rotation_degree", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "array", "(", "[", "0", ",", "90", ",", "180", ",", "270", "]", ")", ")", "\n", "image_pil", "=", "torchvision", ".", "transforms", ".", "functional", ".", "rotate", "(", "image_pil", ",", "rotation_degree", ")", "\n", "image_pil", "=", "TransHFlip", "(", "image_pil", ")", "\n", "image_pil", "=", "TransVFlip", "(", "image_pil", ")", "\n", "image", "[", "0", "]", "=", "np", ".", "array", "(", "image_pil", ")", "\n", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "                ", "dot_annot_pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "dot_annot", "[", "0", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "dot_annot_pil", "=", "torchvision", ".", "transforms", ".", "functional", ".", "rotate", "(", "dot_annot_pil", ",", "rotation_degree", ")", "\n", "dot_annot_pil", "=", "TransHFlip", "(", "dot_annot_pil", ")", "\n", "dot_annot_pil", "=", "TransVFlip", "(", "dot_annot_pil", ")", "\n", "dot_annot", "[", "0", "]", "=", "np", ".", "array", "(", "dot_annot_pil", ")", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "                ", "mask_pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "mask", "[", "0", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "mask_pil", "=", "torchvision", ".", "transforms", ".", "functional", ".", "rotate", "(", "mask_pil", ",", "rotation_degree", ")", "\n", "mask_pil", "=", "TransHFlip", "(", "mask_pil", ")", "\n", "mask_pil", "=", "TransVFlip", "(", "mask_pil", ")", "\n", "mask", "[", "0", "]", "=", "np", ".", "array", "(", "mask_pil", ")", "\n", "\n", "", "", "if", "self", ".", "normalize", ":", "\n", "            ", "image", "=", "image", "/", "255.0", "\n", "image", "=", "(", "image", "-", "0.5", ")", "/", "0.5", "\n", "# image = (image-self.image_mean)/self.image_std", "\n", "\n", "", "if", "self", ".", "counts", "is", "not", "None", ":", "\n", "            ", "count", "=", "self", ".", "counts", "[", "index", "]", "\n", "\n", "", "output", "=", "{", "}", "\n", "output", "[", "'image'", "]", "=", "image", "\n", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "## Gaussian filter setting is based on line 53-54 of https://github.com/WeidiXie/cell_counting_v2/blob/master/train.py", "\n", "            ", "density_map", "=", "100.0", "*", "(", "dot_annot", "[", "0", "]", ">", "0", ")", "\n", "density_map", "=", "scipy", ".", "ndimage", ".", "gaussian_filter", "(", "density_map", ",", "sigma", "=", "(", "1", ",", "1", ")", ",", "order", "=", "0", ")", "\n", "density_map", "=", "density_map", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "output", "[", "'density_map'", "]", "=", "density_map", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "            ", "output", "[", "'mask'", "]", "=", "mask", "\n", "", "if", "self", ".", "counts", "is", "not", "None", ":", "\n", "            ", "output", "[", "'count'", "]", "=", "count", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.utils.IMGs_dataset.__len__": [[96, 98], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_images", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.AfCCNN.utils.PlotLoss": [[102, 115], ["numpy.arange", "matplotlib.switch_backend", "matplotlib.style.use", "matplotlib.figure", "matplotlib.subplot", "plt.subplot.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.savefig", "numpy.array", "len"], "function", ["None"], ["\n", "\n", "################################################################################", "\n", "", "", "def", "PlotLoss", "(", "loss", ",", "filename", ")", ":", "\n", "    ", "x_axis", "=", "np", ".", "arange", "(", "start", "=", "1", ",", "stop", "=", "len", "(", "loss", ")", "+", "1", ")", "\n", "plt", ".", "switch_backend", "(", "'agg'", ")", "\n", "mpl", ".", "style", ".", "use", "(", "'seaborn'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "111", ")", "\n", "ax", ".", "plot", "(", "x_axis", ",", "np", ".", "array", "(", "loss", ")", ")", "\n", "plt", ".", "xlabel", "(", "\"epoch\"", ")", "\n", "plt", ".", "ylabel", "(", "\"loss\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "#ax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15),  shadow=True, ncol=3)", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.DRDCNN.train_cnn.adjust_learning_rate": [[26, 38], ["len", "range"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate \"\"\"", "\n", "lr", "=", "lr_base", "\n", "\n", "num_decays", "=", "len", "(", "lr_decay_epochs", ")", "\n", "for", "decay_i", "in", "range", "(", "num_decays", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epochs", "[", "decay_i", "]", ":", "\n", "            ", "lr", "=", "lr", "*", "lr_decay_factor", "\n", "#end if epoch", "\n", "#end for decay_i", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.DRDCNN.train_cnn.train_cnn": [[40, 122], ["net.cuda.cuda", "unet.cuda.cuda", "unet.cuda.eval", "torch.optim.Adam", "torch.optim.Adam", "torch.MSELoss", "timeit.default_timer", "range", "net.cuda.parameters", "print", "torch.load", "torch.load", "net.cuda.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.set_rng_state", "torch.set_rng_state", "train_cnn.adjust_learning_rate", "enumerate", "train_cnn.test_cnn", "net.cuda.train", "batch_images.type().cuda.type().cuda", "batch_counts.type().cuda.type().cuda", "unet.cuda.", "net.cuda.", "nn.MSELoss.", "torch.optim.Adam.zero_grad", "criterion.backward", "torch.optim.Adam.step", "criterion.cpu().item", "os.makedirs", "torch.save", "torch.save", "net.view", "batch_counts.type().cuda.view", "print", "os.path.dirname", "batch_images.type().cuda.type", "batch_counts.type().cuda.type", "criterion.cpu", "unet.cuda.state_dict", "torch.optim.Adam.state_dict", "torch.get_rng_state", "torch.get_rng_state", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_fpn_mask.adjust_learning_rate", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.DRDCNN.train_cnn.test_cnn"], ["", "", "def", "train_cnn", "(", "trainloader", ",", "testloader", ",", "max_count", ",", "net", ",", "unet_density", ",", "unet_mask", ",", "path_to_ckpt", "=", "None", ")", ":", "\n", "    ", "'''\n    net: cnn net\n    unet_density: pre-trained unet\n    unet_mask: pre-trained unet\n    '''", "\n", "\n", "# nets", "\n", "net", "=", "net", ".", "cuda", "(", ")", "\n", "unet_density", "=", "unet_density", ".", "cuda", "(", ")", "\n", "unet_density", ".", "eval", "(", ")", "\n", "unet_mask", "=", "unet_mask", ".", "cuda", "(", ")", "\n", "unet_mask", ".", "eval", "(", ")", "\n", "\n", "# define optimizer", "\n", "# optimizer = torch.optim.SGD(net.parameters(), lr=lr_base, weight_decay=weight_decay)", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "lr_base", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "# criterion", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "resume_epoch", ">", "0", ":", "\n", "        ", "print", "(", "\"Loading ckpt to resume training the CNN >>>\"", ")", "\n", "ckpt_fullpath", "=", "path_to_ckpt", "+", "\"/{}_checkpoint_epoch_{}.pth\"", ".", "format", "(", "cnn_name", ",", "resume_epoch", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_fullpath", ")", "\n", "net", ".", "load_state_dict", "(", "checkpoint", "[", "'net_state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "checkpoint", "[", "'rng_state'", "]", ")", "\n", "steps", "=", "checkpoint", "[", "'steps'", "]", "\n", "", "else", ":", "\n", "        ", "steps", "=", "0", "\n", "\n", "", "start_time", "=", "timeit", ".", "default_timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "resume_epoch", ",", "epochs", ")", ":", "\n", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train_loss", "=", "0", "\n", "\n", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "            ", "net", ".", "train", "(", ")", "\n", "\n", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_counts", "=", "batch_samples", "[", "'count'", "]", "#normalized", "\n", "\n", "batch_size_curr", "=", "batch_images", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size_curr", "==", "batch_counts", ".", "shape", "[", "0", "]", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_counts", "=", "batch_counts", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "\n", "#forward pass", "\n", "batch_recon_maps", "=", "unet_density", "(", "batch_images", ")", "\n", "batch_recon_masks", "=", "unet_mask", "(", "batch_images", ")", "\n", "batch_pred_counts", "=", "net", "(", "batch_recon_maps", ",", "batch_recon_masks", ")", "\n", "loss", "=", "criterion", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ",", "1", ")", ",", "batch_counts", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "#backward pass", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "steps", "+=", "1", "\n", "\n", "if", "steps", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "\"{}: [step {}] [epoch {}/{}] [train loss {:.3f}] [Time {:.3f}]\"", ".", "format", "(", "cnn_name", ",", "steps", ",", "epoch", "+", "1", ",", "epochs", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "timeit", ".", "default_timer", "(", ")", "-", "start_time", ")", ")", "\n", "# end for batch_idx", "\n", "\n", "", "", "_", ",", "_", "=", "test_cnn", "(", "testloader", ",", "max_count", ",", "net", ",", "unet_density", ",", "unet_mask", ",", "verbose", "=", "True", ")", "\n", "#end for epoch", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "(", "epoch", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "            ", "save_file", "=", "path_to_ckpt", "+", "\"/{}_checkpoint_epoch_{}.pth\"", ".", "format", "(", "cnn_name", ",", "epoch", "+", "1", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'steps'", ":", "steps", ",", "\n", "'net_state_dict'", ":", "net", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'rng_state'", ":", "torch", ".", "get_rng_state", "(", ")", "\n", "}", ",", "save_file", ")", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.DRDCNN.train_cnn.test_cnn": [[124, 160], ["net.eval.eval", "unet.eval.eval", "torch.MSELoss", "torch.L1Loss", "math.sqrt", "torch.no_grad", "torch.no_grad", "enumerate", "len", "print", "batch_images.type().cuda.type().cuda", "batch_counts.type().cuda.type().cuda", "unet.eval.", "net.eval.", "nn.MSELoss.", "nn.L1Loss.", "square_error.item", "absolute_error.item", "len", "net.view", "batch_counts.type().cuda.view", "net.view", "batch_counts.type().cuda.view", "batch_images.type().cuda.type", "batch_counts.type().cuda.type"], "function", ["None"], ["\n", "", "", "return", "net", "\n", "\n", "\n", "", "def", "test_cnn", "(", "testloader", ",", "max_count", ",", "net", ",", "unet_density", ",", "unet_mask", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "net", "=", "net", ".", "eval", "(", ")", "\n", "unet_density", "=", "unet_density", ".", "eval", "(", ")", "\n", "unet_mask", "=", "unet_mask", ".", "eval", "(", ")", "\n", "\n", "# criterion", "\n", "square_error", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "absolute_error", "=", "nn", ".", "L1Loss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n", "test_rmse", "=", "0", "\n", "test_mae", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_counts", "=", "batch_samples", "[", "'count'", "]", "#unnormalized", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_counts", "=", "batch_counts", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "\n", "#forward pass", "\n", "batch_recon_maps", "=", "unet_density", "(", "batch_images", ")", "\n", "batch_recon_masks", "=", "unet_mask", "(", "batch_images", ")", "\n", "batch_pred_counts", "=", "net", "(", "batch_recon_maps", ",", "batch_recon_masks", ")", "\n", "batch_pred_counts", "*=", "max_count", "#back to the original scale", "\n", "\n", "batch_sum_of_square_error", "=", "square_error", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ",", "1", ")", ",", "batch_counts", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "batch_sum_of_absolute_error", "=", "absolute_error", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ",", "1", ")", ",", "batch_counts", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "test_rmse", "+=", "batch_sum_of_square_error", ".", "item", "(", ")", "\n", "test_mae", "+=", "batch_sum_of_absolute_error", ".", "item", "(", ")", "\n", "#end for batch_idx", "\n", "", "", "test_rmse", "=", "math", ".", "sqrt", "(", "test_rmse", "/", "len", "(", "testloader", ".", "dataset", ")", ")", "\n", "test_mae", "=", "test_mae", "/", "len", "(", "testloader", ".", "dataset", ")", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.DRDCNN.opts.prepare_options": [[4, 48], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "prepare_options", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "''' Overall settings '''", "\n", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--path_vgg_dataset'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--path_tinybbbc005'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "2020", ",", "metavar", "=", "'S'", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--experiment_name'", ",", "type", "=", "str", ",", "default", "=", "'exp1'", ")", "\n", "\n", "''' Datast Settings '''", "\n", "parser", ".", "add_argument", "(", "'--num_train'", ",", "type", "=", "int", ",", "default", "=", "2400", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of training samples'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_channels'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_height'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_width'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--deleted_counts'", ",", "type", "=", "str", ",", "default", "=", "'None'", ")", "\n", "\n", "''' UNET Density Settings '''", "\n", "parser", ".", "add_argument", "(", "'--unet1_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_batch_size_train'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_lr_base'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'base learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_lr_decay_factor'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'100_150'", ",", "help", "=", "'decay lr at which epoch; separate by _'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_transform'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'data augmentation'", ")", "\n", "\n", "''' UNET Mask Settings '''", "\n", "parser", ".", "add_argument", "(", "'--unet2_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_batch_size_train'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_lr_base'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'base learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_lr_decay_factor'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'100_150'", ",", "help", "=", "'decay lr at which epoch; separate by _'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_transform'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'data augmentation'", ")", "\n", "\n", "''' DRCNN Settings '''", "\n", "parser", ".", "add_argument", "(", "'--cnn_name'", ",", "type", "=", "str", ",", "default", "=", "\"VGG19\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_batch_size_train'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_batch_size_test'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_lr_base'", ",", "type", "=", "float", ",", "default", "=", "1e-2", ",", "help", "=", "'base learning rate'", ")", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.DRDCNN.train_unet.adjust_learning_rate": [[26, 38], ["len", "range"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate \"\"\"", "\n", "lr", "=", "lr_base", "\n", "\n", "num_decays", "=", "len", "(", "lr_decay_epochs", ")", "\n", "for", "decay_i", "in", "range", "(", "num_decays", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epochs", "[", "decay_i", "]", ":", "\n", "            ", "lr", "=", "lr", "*", "lr_decay_factor", "\n", "#end if epoch", "\n", "#end for decay_i", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.DRDCNN.train_unet.train_unet": [[40, 126], ["torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "min", "torchvision.utils.save_image", "unet.cuda.cuda", "torch.optim.Adam", "torch.optim.Adam", "torch.MSELoss", "timeit.default_timer", "range", "int", "unet.cuda.parameters", "print", "torch.load", "torch.load", "unet.cuda.load_state_dict", "torch.optim.Adam.load_state_dict", "torch.set_rng_state", "torch.set_rng_state", "train_unet.adjust_learning_rate", "enumerate", "torch.from_numpy().type", "torch.from_numpy().type", "numpy.sqrt", "unet.cuda.train", "batch_images.type().cuda.type().cuda", "batch_true_maps.type().cuda.type().cuda", "unet.cuda.", "nn.MSELoss.", "torch.optim.Adam.zero_grad", "criterion.backward", "torch.optim.Adam.step", "criterion.cpu().item", "os.makedirs", "torch.save", "torch.save", "torchvision.utils.save_image", "torchvision.utils.save_image", "print", "os.path.dirname", "torch.from_numpy", "torch.from_numpy", "batch_images.type().cuda.type", "batch_true_maps.type().cuda.type", "criterion.cpu", "torch.no_grad", "torch.no_grad", "unet.cuda.", "unet.cuda.state_dict", "torch.optim.Adam.state_dict", "torch.get_rng_state", "torch.get_rng_state", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_fpn_mask.adjust_learning_rate"], ["", "", "def", "train_unet", "(", "trainloader", ",", "test_images", ",", "unet", ",", "save_images_folder", ",", "path_to_ckpt", "=", "None", ")", ":", "\n", "\n", "# evaluate unet on test_images (assume unnormalized)", "\n", "    ", "test_images", "=", "test_images", "/", "255.0", "\n", "test_images", "=", "(", "test_images", "-", "0.5", ")", "/", "0.5", "\n", "test_images", "=", "torch", ".", "from_numpy", "(", "test_images", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "n_row", "=", "min", "(", "4", ",", "int", "(", "np", ".", "sqrt", "(", "test_images", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "save_image", "(", "test_images", ".", "data", ",", "save_images_folder", "+", "'/test_images.png'", ",", "nrow", "=", "n_row", ",", "normalize", "=", "True", ")", "\n", "\n", "# nets", "\n", "unet", "=", "unet", ".", "cuda", "(", ")", "\n", "\n", "# define optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "unet", ".", "parameters", "(", ")", ",", "lr", "=", "lr_base", ",", "betas", "=", "(", "0.0", ",", "0.999", ")", ",", "weight_decay", "=", "weight_decay", ")", "\n", "# optimizer = torch.optim.RMSprop(unet.parameters(), lr=lr_base, alpha=0.99, eps=1e-08, weight_decay=weight_decay, momentum=0, centered=False)", "\n", "\n", "# criterion", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "resume_epoch", ">", "0", ":", "\n", "        ", "print", "(", "\"Loading ckpt to resume training U-net >>>\"", ")", "\n", "ckpt_fullpath", "=", "path_to_ckpt", "+", "\"/unet_checkpoint_epoch_{}.pth\"", ".", "format", "(", "resume_epoch", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_fullpath", ")", "\n", "unet", ".", "load_state_dict", "(", "checkpoint", "[", "'net_state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "checkpoint", "[", "'rng_state'", "]", ")", "\n", "steps", "=", "checkpoint", "[", "'steps'", "]", "\n", "", "else", ":", "\n", "        ", "steps", "=", "0", "\n", "\n", "", "start_time", "=", "timeit", ".", "default_timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "resume_epoch", ",", "epochs", ")", ":", "\n", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train_loss", "=", "0", "\n", "\n", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "            ", "unet", ".", "train", "(", ")", "\n", "\n", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_true_maps", "=", "batch_samples", "[", "'density_map'", "]", "\n", "\n", "batch_size_curr", "=", "batch_images", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size_curr", "==", "batch_true_maps", ".", "shape", "[", "0", "]", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_true_maps", "=", "batch_true_maps", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "\n", "#forward pass", "\n", "batch_recon_maps", "=", "unet", "(", "batch_images", ")", "\n", "loss", "=", "criterion", "(", "batch_recon_maps", ",", "batch_true_maps", ")", "\n", "\n", "#backward pass", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "steps", "+=", "1", "\n", "\n", "if", "steps", "%", "100", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "test_batch_recon_maps", "=", "unet", "(", "test_images", ")", "\n", "test_batch_recon_maps", "=", "test_batch_recon_maps", "/", "255.0", "\n", "", "save_image", "(", "test_batch_recon_maps", ".", "data", ",", "save_images_folder", "+", "'/tiny3bc005_{}.png'", ".", "format", "(", "steps", ")", ",", "nrow", "=", "n_row", ",", "normalize", "=", "True", ")", "\n", "save_image", "(", "batch_recon_maps", "[", "0", ":", "n_row", "**", "2", "]", ".", "data", ",", "save_images_folder", "+", "'/vgg_{}.png'", ".", "format", "(", "steps", ")", ",", "nrow", "=", "n_row", ",", "normalize", "=", "True", ")", "\n", "\n", "", "if", "steps", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "\"U-net: [step {}] [epoch {}/{}] [train loss {}] [Time {}]\"", ".", "format", "(", "steps", ",", "epoch", "+", "1", ",", "epochs", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "timeit", ".", "default_timer", "(", ")", "-", "start_time", ")", ")", "\n", "# end for batch_idx", "\n", "\n", "", "", "if", "path_to_ckpt", "is", "not", "None", "and", "(", "epoch", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "            ", "save_file", "=", "path_to_ckpt", "+", "\"/unet_checkpoint_epoch_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'steps'", ":", "steps", ",", "\n", "'net_state_dict'", ":", "unet", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'rng_state'", ":", "torch", ".", "get_rng_state", "(", ")", "\n", "}", ",", "save_file", ")", "\n", "#end for epoch", "\n", "\n", "", "", "return", "unet", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.DRDCNN.utils.IMGs_dataset.__init__": [[15, 43], ["super().__init__", "numpy.mean", "numpy.std", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "images", ",", "dot_annots", "=", "None", ",", "masks", "=", "None", ",", "counts", "=", "None", ",", "normalize", "=", "True", ",", "transform", "=", "False", ")", ":", "\n", "        ", "'''\n        images: numpy array images;\n        dot_annots: dot annotations; numpy array images\n        masks: segmentation masks\n        counts: cell counts\n        normalize: normalize images to [-1,1]\n        transform: random transform on images; horizontal and vertical flip, random rotation (90,180,270)\n        '''", "\n", "\n", "super", "(", "IMGs_dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "images", "=", "images", "\n", "self", ".", "image_mean", "=", "np", ".", "mean", "(", "images", ")", "\n", "self", ".", "image_std", "=", "np", ".", "std", "(", "images", ")", "\n", "self", ".", "n_images", "=", "len", "(", "self", ".", "images", ")", "\n", "self", ".", "counts", "=", "counts", "\n", "self", ".", "dot_annots", "=", "dot_annots", "\n", "self", ".", "masks", "=", "masks", "\n", "\n", "if", "self", ".", "counts", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "n_images", "==", "len", "(", "self", ".", "counts", ")", "\n", "", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "n_images", "==", "len", "(", "self", ".", "dot_annots", ")", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "n_images", "==", "len", "(", "self", ".", "masks", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.DRDCNN.utils.IMGs_dataset.__getitem__": [[44, 100], ["PIL.Image.fromarray", "numpy.random.choice", "torchvision.transforms.functional.rotate", "TransHFlip", "TransVFlip", "numpy.array", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "numpy.uint8", "numpy.array", "PIL.Image.fromarray", "torchvision.transforms.functional.rotate", "TransHFlip", "TransVFlip", "numpy.array", "PIL.Image.fromarray", "torchvision.transforms.functional.rotate", "TransHFlip", "TransVFlip", "numpy.array", "numpy.uint8", "numpy.uint8"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "## for grey scale only", "\n", "        ", "image", "=", "self", ".", "images", "[", "index", "]", "\n", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "            ", "dot_annot", "=", "self", ".", "dot_annots", "[", "index", "]", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "masks", "[", "index", "]", "\n", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "image_pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", "[", "0", "]", ")", ",", "mode", "=", "'L'", ")", "#H * W", "\n", "rotation_degree", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "array", "(", "[", "0", ",", "90", ",", "180", ",", "270", "]", ")", ")", "\n", "image_pil", "=", "torchvision", ".", "transforms", ".", "functional", ".", "rotate", "(", "image_pil", ",", "rotation_degree", ")", "\n", "image_pil", "=", "TransHFlip", "(", "image_pil", ")", "\n", "image_pil", "=", "TransVFlip", "(", "image_pil", ")", "\n", "image", "[", "0", "]", "=", "np", ".", "array", "(", "image_pil", ")", "\n", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "                ", "dot_annot_pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "dot_annot", "[", "0", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "dot_annot_pil", "=", "torchvision", ".", "transforms", ".", "functional", ".", "rotate", "(", "dot_annot_pil", ",", "rotation_degree", ")", "\n", "dot_annot_pil", "=", "TransHFlip", "(", "dot_annot_pil", ")", "\n", "dot_annot_pil", "=", "TransVFlip", "(", "dot_annot_pil", ")", "\n", "dot_annot", "[", "0", "]", "=", "np", ".", "array", "(", "dot_annot_pil", ")", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "                ", "mask_pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "mask", "[", "0", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "mask_pil", "=", "torchvision", ".", "transforms", ".", "functional", ".", "rotate", "(", "mask_pil", ",", "rotation_degree", ")", "\n", "mask_pil", "=", "TransHFlip", "(", "mask_pil", ")", "\n", "mask_pil", "=", "TransVFlip", "(", "mask_pil", ")", "\n", "mask", "[", "0", "]", "=", "np", ".", "array", "(", "mask_pil", ")", "\n", "\n", "", "", "if", "self", ".", "normalize", ":", "\n", "            ", "image", "=", "image", "/", "255.0", "\n", "image", "=", "(", "image", "-", "0.5", ")", "/", "0.5", "\n", "# image = (image-self.image_mean)/self.image_std", "\n", "\n", "", "if", "self", ".", "counts", "is", "not", "None", ":", "\n", "            ", "count", "=", "self", ".", "counts", "[", "index", "]", "\n", "\n", "", "output", "=", "{", "}", "\n", "output", "[", "'image'", "]", "=", "image", "\n", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "## Gaussian filter setting is based on line 53-54 of https://github.com/WeidiXie/cell_counting_v2/blob/master/train.py", "\n", "            ", "density_map", "=", "100.0", "*", "(", "dot_annot", "[", "0", "]", ">", "0", ")", "\n", "density_map", "=", "scipy", ".", "ndimage", ".", "gaussian_filter", "(", "density_map", ",", "sigma", "=", "(", "1", ",", "1", ")", ",", "order", "=", "0", ")", "\n", "density_map", "=", "density_map", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "output", "[", "'density_map'", "]", "=", "density_map", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "            ", "output", "[", "'mask'", "]", "=", "mask", "\n", "", "if", "self", ".", "counts", "is", "not", "None", ":", "\n", "            ", "output", "[", "'count'", "]", "=", "count", "\n", "\n", "", "return", "output", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_images", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.DRDCNN.utils.IMGs_dataset.__len__": [[101, 103], ["None"], "methods", ["None"], ["\n", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.DRDCNN.utils.PlotLoss": [[110, 123], ["numpy.arange", "matplotlib.switch_backend", "matplotlib.style.use", "matplotlib.figure", "matplotlib.subplot", "plt.subplot.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.savefig", "numpy.array", "len"], "function", ["None"], ["ax", "=", "plt", ".", "subplot", "(", "111", ")", "\n", "ax", ".", "plot", "(", "x_axis", ",", "np", ".", "array", "(", "loss", ")", ")", "\n", "plt", ".", "xlabel", "(", "\"epoch\"", ")", "\n", "plt", ".", "ylabel", "(", "\"loss\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "#ax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15),  shadow=True, ncol=3)", "\n", "#plt.title('Training Loss')", "\n", "plt", ".", "savefig", "(", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_vgg_count.adjust_learning_rate": [[26, 38], ["len", "range"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate \"\"\"", "\n", "lr", "=", "lr_base", "\n", "\n", "num_decays", "=", "len", "(", "lr_decay_epochs", ")", "\n", "for", "decay_i", "in", "range", "(", "num_decays", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epochs", "[", "decay_i", "]", ":", "\n", "            ", "lr", "=", "lr", "*", "lr_decay_factor", "\n", "#end if epoch", "\n", "#end for decay_i", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_vgg_count.train_vgg": [[40, 134], ["net.cuda.cuda", "fpn.cuda.cuda", "torch.Sequential", "torch.optim.SGD", "torch.optim.SGD", "torch.MSELoss", "timeit.default_timer", "range", "collections.OrderedDict", "net.cuda.parameters", "print", "torch.load", "torch.load", "net.cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "torch.set_rng_state", "torch.set_rng_state", "train_vgg_count.adjust_learning_rate", "enumerate", "train_vgg_count.test_vgg", "net.cuda.train", "nn.Sequential.named_parameters", "batch_images.type().cuda.type().cuda", "batch_counts.type().cuda.type().cuda", "nn.Sequential.", "nn.MSELoss.", "torch.optim.SGD.zero_grad", "criterion.backward", "torch.optim.SGD.step", "criterion.cpu().item", "os.makedirs", "torch.save", "torch.save", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "print", "os.path.dirname", "batch_images.type().cuda.type", "batch_counts.type().cuda.type", "criterion.cpu", "nn.Sequential.state_dict", "torch.optim.SGD.state_dict", "torch.get_rng_state", "torch.get_rng_state", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_fpn_mask.adjust_learning_rate", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_vgg_count.test_vgg"], ["", "", "def", "train_vgg", "(", "trainloader", ",", "testloader", ",", "max_count", ",", "fpn", ",", "net", ",", "path_to_ckpt", "=", "None", ")", ":", "\n", "    ", "'''\n    net: cnn net\n    unet_density: pre-trained unet\n    unet_mask: pre-trained unet\n    '''", "\n", "\n", "# nets", "\n", "net", "=", "net", ".", "cuda", "(", ")", "\n", "fpn", "=", "fpn", ".", "cuda", "(", ")", "\n", "model", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "(", "'fpn'", ",", "fpn", ")", ",", "(", "'counter'", ",", "net", ")", "]", ")", ")", "\n", "\n", "# define optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr_base", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "# optimizer = torch.optim.Adam(net.parameters(), lr=lr_base, weight_decay=weight_decay)", "\n", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "resume_epoch", ">", "0", ":", "\n", "        ", "print", "(", "\"Loading ckpt to resume training the CNN >>>\"", ")", "\n", "ckpt_fullpath", "=", "path_to_ckpt", "+", "\"/{}_checkpoint_epoch_{}.pth\"", ".", "format", "(", "cnn_name", ",", "resume_epoch", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_fullpath", ")", "\n", "net", ".", "load_state_dict", "(", "checkpoint", "[", "'net_state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "checkpoint", "[", "'rng_state'", "]", ")", "\n", "steps", "=", "checkpoint", "[", "'steps'", "]", "\n", "", "else", ":", "\n", "        ", "steps", "=", "0", "\n", "\n", "", "start_time", "=", "timeit", ".", "default_timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "resume_epoch", ",", "epochs", ")", ":", "\n", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train_loss", "=", "0", "\n", "\n", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "            ", "net", ".", "train", "(", ")", "\n", "\n", "for", "name", ",", "params", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'fpn'", "in", "name", ":", "\n", "                    ", "params", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_counts", "=", "batch_samples", "[", "'count'", "]", "#normalized", "\n", "\n", "batch_size_curr", "=", "batch_images", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size_curr", "==", "batch_counts", ".", "shape", "[", "0", "]", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_counts", "=", "batch_counts", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "\n", "#forward pass", "\n", "batch_pred_counts", "=", "model", "(", "batch_images", ")", "\n", "# loss = counter_loss(batch_pred_counts, batch_counts)", "\n", "\n", "# loss = counter_loss(batch_pred_counts, batch_counts)", "\n", "loss", "=", "criterion", "(", "torch", ".", "squeeze", "(", "batch_pred_counts", ")", ",", "torch", ".", "squeeze", "(", "batch_counts", ")", ")", "\n", "\n", "#backward pass", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "steps", "+=", "1", "\n", "\n", "if", "steps", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "\"{}: [step {}] [epoch {}/{}] [train loss {:.3f}] [Time {:.3f}]\"", ".", "format", "(", "\n", "cnn_name", ",", "steps", ",", "epoch", "+", "1", ",", "epochs", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "\n", "timeit", ".", "default_timer", "(", ")", "-", "start_time", ")", ")", "\n", "# end for batch_idx", "\n", "\n", "", "", "_", ",", "_", "=", "test_vgg", "(", "testloader", ",", "max_count", ",", "model", ",", "verbose", "=", "True", ")", "\n", "#end for epoch", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "(", "epoch", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "            ", "save_file", "=", "path_to_ckpt", "+", "\"/{}_checkpoint_epoch_{}.pth\"", ".", "format", "(", "cnn_name", ",", "epoch", "+", "1", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'steps'", ":", "steps", ",", "\n", "'net_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'rng_state'", ":", "torch", ".", "get_rng_state", "(", ")", "\n", "}", ",", "save_file", ")", "\n", "#end for epoch", "\n", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_vgg_count.test_vgg": [[136, 173], ["model.eval.eval", "torch.MSELoss", "torch.L1Loss", "math.sqrt", "torch.no_grad", "torch.no_grad", "enumerate", "len", "print", "batch_images.type().cuda.type().cuda", "batch_counts.type().cuda.type().cuda", "model.eval.", "nn.MSELoss.", "nn.L1Loss.", "square_error.item", "absolute_error.item", "len", "model.view", "batch_counts.type().cuda.view", "model.view", "batch_counts.type().cuda.view", "batch_images.type().cuda.type", "batch_counts.type().cuda.type"], "function", ["None"], ["", "def", "test_vgg", "(", "testloader", ",", "max_count", ",", "model", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "model", "=", "model", ".", "eval", "(", ")", "\n", "\n", "# criterion", "\n", "square_error", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "absolute_error", "=", "nn", ".", "L1Loss", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n", "test_rmse", "=", "0", "\n", "test_mae", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "testloader", ")", ":", "\n", "            ", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_counts", "=", "batch_samples", "[", "'count'", "]", "#unnormalized", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_counts", "=", "batch_counts", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "\n", "#forward pass", "\n", "# batch_pred_counts, _ = model(batch_images)", "\n", "batch_pred_counts", "=", "model", "(", "batch_images", ")", "\n", "batch_pred_counts", "*=", "max_count", "#back to the original scale", "\n", "\n", "batch_sum_of_square_error", "=", "square_error", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "batch_counts", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "batch_sum_of_absolute_error", "=", "absolute_error", "(", "batch_pred_counts", ".", "view", "(", "-", "1", ",", "1", ")", ",", "\n", "batch_counts", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "test_rmse", "+=", "batch_sum_of_square_error", ".", "item", "(", ")", "\n", "test_mae", "+=", "batch_sum_of_absolute_error", ".", "item", "(", ")", "\n", "#end for batch_idx", "\n", "", "", "test_rmse", "=", "math", ".", "sqrt", "(", "test_rmse", "/", "len", "(", "testloader", ".", "dataset", ")", ")", "\n", "test_mae", "=", "test_mae", "/", "len", "(", "testloader", ".", "dataset", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'====> Test set RMSE: %.4f; Test set MAE: %.4f'", "%", "(", "test_rmse", ",", "test_mae", ")", ")", "\n", "\n", "", "return", "test_rmse", ",", "test_mae", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.opts.prepare_options": [[4, 48], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "prepare_options", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "\n", "''' Overall settings '''", "\n", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--path_vgg_dataset'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--path_tinybbbc005'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "2020", ",", "metavar", "=", "'S'", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--experiment_name'", ",", "type", "=", "str", ",", "default", "=", "'exp1'", ")", "\n", "\n", "''' Datast Settings '''", "\n", "parser", ".", "add_argument", "(", "'--num_train'", ",", "type", "=", "int", ",", "default", "=", "2400", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of training samples'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_channels'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_height'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_width'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--deleted_counts'", ",", "type", "=", "str", ",", "default", "=", "'None'", ")", "\n", "\n", "''' UNET Density Settings '''", "\n", "parser", ".", "add_argument", "(", "'--unet1_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_batch_size_train'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_lr_base'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'base learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_lr_decay_factor'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'100_150'", ",", "help", "=", "'decay lr at which epoch; separate by _'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet1_transform'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'data augmentation'", ")", "\n", "\n", "''' UNET Mask Settings '''", "\n", "parser", ".", "add_argument", "(", "'--unet2_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_batch_size_train'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_lr_base'", ",", "type", "=", "float", ",", "default", "=", "1e-3", ",", "help", "=", "'base learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_lr_decay_factor'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_lr_decay_epochs'", ",", "type", "=", "str", ",", "default", "=", "'100_150'", ",", "help", "=", "'decay lr at which epoch; separate by _'", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--unet2_transform'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'data augmentation'", ")", "\n", "\n", "''' DRCNN Settings '''", "\n", "parser", ".", "add_argument", "(", "'--cnn_name'", ",", "type", "=", "str", ",", "default", "=", "\"VGG19\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_resume_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_batch_size_train'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_batch_size_test'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_lr_base'", ",", "type", "=", "float", ",", "default", "=", "1e-2", ",", "help", "=", "'base learning rate'", ")", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_fpn_mask.adjust_learning_rate": [[26, 38], ["len", "range"], "function", ["None"], ["def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "\"\"\"decrease the learning rate \"\"\"", "\n", "lr", "=", "lr_base", "\n", "\n", "num_decays", "=", "len", "(", "lr_decay_epochs", ")", "\n", "for", "decay_i", "in", "range", "(", "num_decays", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epochs", "[", "decay_i", "]", ":", "\n", "            ", "lr", "=", "lr", "*", "lr_decay_factor", "\n", "#end if epoch", "\n", "#end for decay_i", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_fpn_mask.train_fpn_mask": [[40, 150], ["torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "min", "torchvision.utils.save_image", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "torch.from_numpy().type().cuda", "torchvision.utils.save_image", "fpn.cuda.cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "timeit.default_timer", "range", "int", "fpn.cuda.parameters", "print", "torch.load", "torch.load", "torch.load", "fpn.cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "torch.set_rng_state", "torch.set_rng_state", "torch.set_rng_state", "train_fpn_mask.adjust_learning_rate", "enumerate", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "numpy.sqrt", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "fpn.cuda.train", "batch_images.type().cuda.type().cuda", "batch_true_mask.type().cuda.type().cuda", "fpn.cuda.", "utils.fpn_loss", "torch.optim.SGD.zero_grad", "utils.fpn_loss.backward", "torch.optim.SGD.step", "utils.fpn_loss.cpu().item", "os.makedirs", "torch.save", "torch.save", "torch.save", "test_batch_recon_mask_mean[].cpu", "torch.exp().cpu", "torch.exp().cpu", "torch.exp().cpu", "torchvision.utils.save_image", "torchvision.utils.save_image", "print", "os.path.dirname", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "batch_images.type().cuda.type", "batch_true_mask.type().cuda.type", "batch_true_mask.type().cuda.max", "batch_true_mask.type().cuda.min", "utils.fpn_loss.cpu", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fpn.cuda.", "fpn.cuda.state_dict", "torch.optim.SGD.state_dict", "torch.get_rng_state", "torch.get_rng_state", "torch.get_rng_state", "torch.exp", "torch.exp", "torch.exp", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.train_fpn_mask.adjust_learning_rate", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.fpn_loss"], ["", "", "def", "train_fpn_mask", "(", "trainloader", ",", "test_images", ",", "test_masks", ",", "fpn", ",", "save_images_folder", ",", "path_to_ckpt", "=", "None", ")", ":", "\n", "\n", "# evaluate fpn on test_images (assume unnormalized)", "\n", "    ", "test_images", "=", "test_images", "/", "255.0", "\n", "test_images", "=", "torch", ".", "from_numpy", "(", "test_images", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "n_row", "=", "min", "(", "4", ",", "int", "(", "np", ".", "sqrt", "(", "test_images", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "save_image", "(", "test_images", ".", "data", ",", "\n", "save_images_folder", "+", "'/test_images.png'", ",", "\n", "nrow", "=", "n_row", ",", "\n", "normalize", "=", "False", ")", "\n", "test_masks", "=", "torch", ".", "from_numpy", "(", "test_masks", ")", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "save_image", "(", "test_masks", ".", "data", ",", "save_images_folder", "+", "'/test_masks.png'", ",", "nrow", "=", "n_row", ",", "normalize", "=", "False", ")", "\n", "\n", "# nets", "\n", "fpn", "=", "fpn", ".", "cuda", "(", ")", "\n", "\n", "# define optimizer", "\n", "# optimizer = torch.optim.Adam(fpn.parameters(), lr = lr_base, betas=(0.5, 0.999), weight_decay=weight_decay)", "\n", "# optimizer = torch.optim.RMSprop(fpn.parameters(), lr=lr_base, alpha=0.99, eps=1e-08, weight_decay=weight_decay, momentum=0, centered=False)", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "fpn", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "lr_base", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "if", "path_to_ckpt", "is", "not", "None", "and", "resume_epoch", ">", "0", ":", "\n", "        ", "print", "(", "\"Loading ckpt to resume training FPN >>>\"", ")", "\n", "ckpt_fullpath", "=", "path_to_ckpt", "+", "\"/fpn_checkpoint_epoch_{}.pth\"", ".", "format", "(", "resume_epoch", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "ckpt_fullpath", ")", "\n", "fpn", ".", "load_state_dict", "(", "checkpoint", "[", "'net_state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "torch", ".", "set_rng_state", "(", "checkpoint", "[", "'rng_state'", "]", ")", "\n", "steps", "=", "checkpoint", "[", "'steps'", "]", "\n", "", "else", ":", "\n", "        ", "steps", "=", "0", "\n", "\n", "", "start_time", "=", "timeit", ".", "default_timer", "(", ")", "\n", "for", "epoch", "in", "range", "(", "resume_epoch", ",", "epochs", ")", ":", "\n", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "train_loss", "=", "0", "\n", "\n", "for", "batch_idx", ",", "batch_samples", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "\n", "            ", "fpn", ".", "train", "(", ")", "\n", "\n", "batch_images", "=", "batch_samples", "[", "'image'", "]", "\n", "batch_true_mask", "=", "batch_samples", "[", "'mask'", "]", "#already normalized to [0,1]", "\n", "\n", "batch_size_curr", "=", "batch_images", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size_curr", "==", "batch_true_mask", ".", "shape", "[", "0", "]", "\n", "\n", "batch_images", "=", "batch_images", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "batch_true_mask", "=", "batch_true_mask", ".", "type", "(", "torch", ".", "float", ")", ".", "cuda", "(", ")", "\n", "assert", "batch_true_mask", ".", "max", "(", ")", "<=", "1", "and", "batch_true_mask", ".", "min", "(", ")", ">=", "0", "\n", "\n", "#forward pass", "\n", "### TODO: accumulate gradient", "\n", "batch_recon_mask_mean_var", "=", "fpn", "(", "batch_images", ")", "\n", "loss", "=", "fpn_loss", "(", "batch_recon_mask_mean_var", ",", "batch_true_mask", ")", "\n", "\n", "#backward pass", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "+=", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "steps", "+=", "1", "\n", "\n", "if", "steps", "%", "100", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "test_batch_recon_mask_mean", ",", "test_batch_recon_mask_logvar", "=", "fpn", "(", "test_images", ")", "\n", "\n", "", "test_batch_recon_mask_mean", "=", "test_batch_recon_mask_mean", "[", "-", "1", "]", ".", "cpu", "(", ")", "\n", "test_batch_recon_mask_var", "=", "torch", ".", "exp", "(", "test_batch_recon_mask_logvar", "[", "-", "1", "]", ")", ".", "cpu", "(", ")", "\n", "# test_batch_recon_mask_mean = torch.sigmoid(test_batch_recon_mask_mean[-1]).cpu()", "\n", "# test_batch_recon_mask_var = torch.sigmoid(torch.exp(test_batch_recon_mask_logvar[-1])).cpu()", "\n", "# test_batch_recon_mask_mean[test_batch_recon_mask_mean >= 0.5] = 1", "\n", "# test_batch_recon_mask_mean[test_batch_recon_mask_mean < 0.5] = 0", "\n", "# test_batch_recon_mask_var[test_batch_recon_mask_var >= 0.5] = 1", "\n", "# test_batch_recon_mask_var[test_batch_recon_mask_var < 0.5] = 0", "\n", "save_image", "(", "test_batch_recon_mask_mean", ".", "data", ",", "\n", "save_images_folder", "+", "'/mean_{}.png'", ".", "format", "(", "steps", ")", ",", "\n", "nrow", "=", "n_row", ",", "\n", "normalize", "=", "True", ")", "\n", "save_image", "(", "test_batch_recon_mask_var", ".", "data", ",", "\n", "save_images_folder", "+", "'/var_{}.png'", ".", "format", "(", "steps", ")", ",", "\n", "nrow", "=", "n_row", ",", "\n", "normalize", "=", "True", ")", "\n", "\n", "", "if", "steps", "%", "20", "==", "0", ":", "\n", "                ", "print", "(", "\"FPN (mask): [step {}] [epoch {}/{}] [train loss {}] [Time {}]\"", ".", "format", "(", "\n", "steps", ",", "epoch", "+", "1", ",", "epochs", ",", "train_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "\n", "timeit", ".", "default_timer", "(", ")", "-", "start_time", ")", ")", "\n", "# end for batch_idx", "\n", "\n", "", "", "if", "path_to_ckpt", "is", "not", "None", "and", "(", "epoch", "+", "1", ")", "%", "50", "==", "0", ":", "\n", "            ", "save_file", "=", "path_to_ckpt", "+", "\"/fpn_checkpoint_epoch_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "save_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "'steps'", ":", "steps", ",", "\n", "'net_state_dict'", ":", "fpn", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'rng_state'", ":", "torch", ".", "get_rng_state", "(", ")", "\n", "}", ",", "save_file", ")", "\n", "#end for epoch", "\n", "\n", "", "", "return", "fpn", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__": [[16, 44], ["super().__init__", "numpy.mean", "numpy.std", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__init__"], ["        ", "'''\n        images: numpy array images;\n        dot_annots: dot annotations; numpy array images\n        masks: segmentation masks\n        counts: cell counts\n        normalize: normalize images to [-1,1]\n        transform: random transform on images; horizontal and vertical flip, random rotation (90,180,270)\n        '''", "\n", "\n", "super", "(", "IMGs_dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "images", "=", "images", "\n", "self", ".", "image_mean", "=", "np", ".", "mean", "(", "images", ")", "\n", "self", ".", "image_std", "=", "np", ".", "std", "(", "images", ")", "\n", "self", ".", "n_images", "=", "len", "(", "self", ".", "images", ")", "\n", "self", ".", "counts", "=", "counts", "\n", "self", ".", "dot_annots", "=", "dot_annots", "\n", "self", ".", "masks", "=", "masks", "\n", "\n", "if", "self", ".", "counts", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "n_images", "==", "len", "(", "self", ".", "counts", ")", "\n", "", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "n_images", "==", "len", "(", "self", ".", "dot_annots", ")", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "n_images", "==", "len", "(", "self", ".", "masks", ")", "\n", "", "self", ".", "transform", "=", "transform", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__getitem__": [[45, 97], ["PIL.Image.fromarray", "numpy.random.choice", "torchvision.transforms.functional.rotate", "TransHFlip", "TransVFlip", "numpy.array", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "numpy.uint8", "numpy.array", "PIL.Image.fromarray", "torchvision.transforms.functional.rotate", "TransHFlip", "TransVFlip", "numpy.array", "PIL.Image.fromarray", "torchvision.transforms.functional.rotate", "TransHFlip", "TransVFlip", "numpy.array", "numpy.uint8", "numpy.uint8"], "methods", ["None"], ["\n", "## for grey scale only", "\n", "        ", "image", "=", "self", ".", "images", "[", "index", "]", "\n", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "            ", "dot_annot", "=", "self", ".", "dot_annots", "[", "index", "]", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "            ", "mask", "=", "self", ".", "masks", "[", "index", "]", "\n", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "image_pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "image", "[", "0", "]", ")", ",", "mode", "=", "'L'", ")", "#H * W", "\n", "rotation_degree", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "array", "(", "[", "0", ",", "90", ",", "180", ",", "270", "]", ")", ")", "\n", "image_pil", "=", "torchvision", ".", "transforms", ".", "functional", ".", "rotate", "(", "image_pil", ",", "rotation_degree", ")", "\n", "image_pil", "=", "TransHFlip", "(", "image_pil", ")", "\n", "image_pil", "=", "TransVFlip", "(", "image_pil", ")", "\n", "image", "[", "0", "]", "=", "np", ".", "array", "(", "image_pil", ")", "\n", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "                ", "dot_annot_pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "dot_annot", "[", "0", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "dot_annot_pil", "=", "torchvision", ".", "transforms", ".", "functional", ".", "rotate", "(", "dot_annot_pil", ",", "rotation_degree", ")", "\n", "dot_annot_pil", "=", "TransHFlip", "(", "dot_annot_pil", ")", "\n", "dot_annot_pil", "=", "TransVFlip", "(", "dot_annot_pil", ")", "\n", "dot_annot", "[", "0", "]", "=", "np", ".", "array", "(", "dot_annot_pil", ")", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "                ", "mask_pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "mask", "[", "0", "]", ")", ",", "mode", "=", "'L'", ")", "\n", "mask_pil", "=", "torchvision", ".", "transforms", ".", "functional", ".", "rotate", "(", "mask_pil", ",", "rotation_degree", ")", "\n", "mask_pil", "=", "TransHFlip", "(", "mask_pil", ")", "\n", "mask_pil", "=", "TransVFlip", "(", "mask_pil", ")", "\n", "mask", "[", "0", "]", "=", "np", ".", "array", "(", "mask_pil", ")", "\n", "\n", "", "", "if", "self", ".", "normalize", ":", "\n", "            ", "image", "=", "image", "/", "255.0", "\n", "image", "=", "(", "image", "-", "0.5", ")", "/", "0.5", "\n", "# image = (image-self.image_mean)/self.image_std", "\n", "\n", "", "if", "self", ".", "counts", "is", "not", "None", ":", "\n", "            ", "count", "=", "self", ".", "counts", "[", "index", "]", "\n", "\n", "", "output", "=", "{", "}", "\n", "output", "[", "'image'", "]", "=", "image", "\n", "if", "self", ".", "dot_annots", "is", "not", "None", ":", "\n", "## Gaussian filter setting is based on line 53-54 of https://github.com/WeidiXie/cell_counting_v2/blob/master/train.py", "\n", "            ", "density_map", "=", "100.0", "*", "(", "dot_annot", "[", "0", "]", ">", "0", ")", "\n", "density_map", "=", "scipy", ".", "ndimage", ".", "gaussian_filter", "(", "density_map", ",", "sigma", "=", "(", "1", ",", "1", ")", ",", "order", "=", "0", ")", "\n", "density_map", "=", "density_map", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "output", "[", "'density_map'", "]", "=", "density_map", "\n", "", "if", "self", ".", "masks", "is", "not", "None", ":", "\n", "            ", "output", "[", "'mask'", "]", "=", "mask", "\n", "", "if", "self", ".", "counts", "is", "not", "None", ":", "\n", "            ", "output", "[", "'count'", "]", "=", "count", "\n", "\n", "", "return", "output", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_images", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.IMGs_dataset.__len__": [[98, 100], ["None"], "methods", ["None"], ["\n", "\n", "\n"]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.PlotLoss": [[107, 120], ["numpy.arange", "matplotlib.switch_backend", "matplotlib.style.use", "matplotlib.figure", "matplotlib.subplot", "plt.subplot.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.savefig", "numpy.array", "len"], "function", ["None"], ["plt", ".", "switch_backend", "(", "'agg'", ")", "\n", "mpl", ".", "style", ".", "use", "(", "'seaborn'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "111", ")", "\n", "ax", ".", "plot", "(", "x_axis", ",", "np", ".", "array", "(", "loss", ")", ")", "\n", "plt", ".", "xlabel", "(", "\"epoch\"", ")", "\n", "plt", ".", "ylabel", "(", "\"loss\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "#ax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15),  shadow=True, ncol=3)", "\n", "#plt.title('Training Loss')", "\n", "plt", ".", "savefig", "(", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.tv_loss": [[126, 143], ["img.size", "torch.sum", "torch.sum"], "function", ["None"], []], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.bloss": [[145, 148], ["torch.Threshold", "torch.mean", "torch.mean", "nn.Threshold.", "torch.exp", "torch.exp", "nn.Threshold."], "function", ["None"], []], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.fpn_loss": [[151, 160], ["zip", "x_i.size", "torch.AdaptiveAvgPool2d", "torch.sum", "torch.sum", "utils.bloss", "utils.tv_loss", "nn.AdaptiveAvgPool2d."], "function", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.bloss", "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.tv_loss"], []], "home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.counter_loss": [[162, 165], ["utils.bloss"], "function", ["home.repos.pwc.inspect_result.UBCDingXin_CellCount_TinyBBBC005.FPNCNN.utils.bloss"], []]}