{"home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.src.consensus_maximizer.ConsensusMaximizer.__init__": [[32, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "est_y", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.src.consensus_maximizer.ConsensusMaximizer.solve_soft_auto": [[35, 84], ["cvxpy.Variable", "numpy.asarray", "cvxpy.Problem", "print", "print", "cvxpy.Problem.solve", "print", "print", "numpy.max", "cvxpy.sum_squares", "cvxpy.sum_squares", "cvxpy.Minimize", "ValueError", "enumerate", "cvxpy.Problem.is_dcp", "cvxpy.Problem.is_dcp", "numpy.abs", "cvxpy.sum", "enumerate", "ValueError", "numpy.where", "range", "numpy.ones", "range", "numpy.where", "numpy.array().T.reshape", "len", "len", "numpy.array", "numpy.meshgrid"], "methods", ["None"], ["", "def", "solve_soft_auto", "(", "self", ",", "dataset", ",", "comparison_margin", "=", "0.1", ",", "score_lambda", "=", "0.01", ",", "toggle_variance_loss", "=", "False", ",", "comp_constraint", "=", "\"random\"", ")", ":", "\n", "        ", "\"\"\"\n        Using CVXPY to specify obj and constraint(need to derive from reviewer feedbacks)\n        \"\"\"", "\n", "num_papers", "=", "dataset", ".", "paper_to_rating", ".", "shape", "[", "0", "]", "\n", "num_reviews", "=", "dataset", ".", "paper_to_rating", ".", "shape", "[", "1", "]", "\n", "est_y", "=", "cp", ".", "Variable", "(", "(", "num_papers", ",", "num_reviews", ")", ")", "\n", "if", "toggle_variance_loss", ":", "\n", "            ", "mean_ys", "=", "cp", ".", "sum", "(", "est_y", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "/", "num_reviews", "\n", "var_loss", "=", "cp", ".", "sum_squares", "(", "est_y", "-", "mean_ys", "@", "np", ".", "ones", "(", "(", "1", ",", "num_reviews", ")", ")", ")", "\n", "bin_loss", "=", "cp", ".", "sum_squares", "(", "est_y", "-", "dataset", ".", "paper_to_rating", ")", "\n", "obj", "=", "cp", ".", "Minimize", "(", "var_loss", "+", "score_lambda", "*", "bin_loss", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not implemented yet\"", ")", "\n", "", "constraints", "=", "[", "]", "\n", "\n", "ratings_matrix", "=", "np", ".", "asarray", "(", "dataset", ".", "paper_to_rating", ")", "\n", "constraints", "+=", "[", "est_y", "<=", "ratings_matrix", "+", "0.5", "]", "\n", "constraints", "+=", "[", "est_y", ">=", "ratings_matrix", "-", "0.5", "]", "\n", "\n", "\n", "if", "comp_constraint", "==", "\"random\"", ":", "\n", "            ", "for", "reviewer_id", ",", "paper_ids", "in", "enumerate", "(", "dataset", ".", "reviewer_to_paper", ")", ":", "\n", "                ", "positions", "=", "np", ".", "where", "(", "dataset", ".", "paper_to_reviewer", "[", "paper_ids", "]", "==", "reviewer_id", ")", "[", "1", "]", "# elem z: the position of this reviewer in the zth paper (in paper_ids)", "\n", "constraints", "+=", "[", "est_y", "[", "paper_ids", "[", "j_idx", "]", ",", "positions", "[", "j_idx", "]", "]", ">=", "(", "est_y", "[", "paper_ids", "[", "j_idx", "+", "1", "]", ",", "positions", "[", "j_idx", "+", "1", "]", "]", "+", "comparison_margin", ")", "for", "j_idx", "in", "range", "(", "len", "(", "paper_ids", ")", "-", "1", ")", "]", "\n", "\n", "", "", "elif", "comp_constraint", "==", "\"partial\"", ":", "\n", "            ", "for", "reviewer_id", ",", "paper_ids", "in", "enumerate", "(", "dataset", ".", "reviewer_to_paper", ")", ":", "\n", "                ", "positions", "=", "np", ".", "where", "(", "dataset", ".", "paper_to_reviewer", "[", "paper_ids", "]", "==", "reviewer_id", ")", "[", "1", "]", "\n", "# paper_id_to_position = {paper_ids[i]: positions[i] for i in range(len(paper_ids))} # paper_id : position of this reviewer", "\n", "list_of_groups", "=", "dataset", ".", "reviewer_to_list_of_groups", "[", "reviewer_id", "]", "\n", "for", "group_idx", "in", "range", "(", "len", "(", "list_of_groups", ")", "-", "1", ")", ":", "\n", "                    ", "pairs", "=", "np", ".", "array", "(", "np", ".", "meshgrid", "(", "list_of_groups", "[", "group_idx", "]", ",", "list_of_groups", "[", "group_idx", "+", "1", "]", ")", ")", ".", "T", ".", "reshape", "(", "[", "-", "1", ",", "2", "]", ")", "# each row is a pair of papers, one in each of the two groups", "\n", "for", "j", ",", "j_prime", "in", "pairs", ":", "\n", "                        ", "constraints", "+=", "[", "est_y", "[", "paper_ids", "[", "j", "]", ",", "positions", "[", "j", "]", "]", "-", "est_y", "[", "paper_ids", "[", "j_prime", "]", ",", "positions", "[", "j_prime", "]", "]", ">=", "comparison_margin", "]", "\n", "", "", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Not implemented yet, check comp_constraint: {}\"", ".", "format", "(", "comp_constraint", ")", ")", "\n", "\n", "", "soft_prob", "=", "cp", ".", "Problem", "(", "obj", ",", "constraints", ")", "\n", "print", "(", "\"Is DPP? \"", ",", "soft_prob", ".", "is_dcp", "(", "dpp", "=", "True", ")", ")", "\n", "print", "(", "\"Is DCP? \"", ",", "soft_prob", ".", "is_dcp", "(", "dpp", "=", "False", ")", ")", "\n", "soft_prob", ".", "solve", "(", "solver", "=", "cp", ".", "CVXOPT", ",", "verbose", "=", "False", ",", "feastol", "=", "1e-6", ")", "# Returns the optimal value.", "\n", "print", "(", "\"status:\"", ",", "soft_prob", ".", "status", ")", "\n", "print", "(", "\"optimal value\"", ",", "soft_prob", ".", "value", ")", "\n", "np_est_y", "=", "est_y", ".", "value", "\n", "\n", "\"\"\" DEPRECATED: Check whether constraints are violated \"\"\"", "\n", "max_diff", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "np_est_y", "-", "dataset", ".", "paper_to_rating", ")", ")", "\n", "return", "np_est_y", ",", "max_diff", "\n", "", "", ""]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.src.borda_subjective.borda_sub": [[16, 64], ["dataset.paper_to_rating.copy", "enumerate", "print", "dataset.paper_to_rating.copy", "enumerate", "numpy.linspace", "numpy.zeros", "ValueError", "numpy.where", "numpy.where", "len", "enumerate", "numpy.zeros_like", "enumerate", "str", "numpy.linspace", "numpy.where", "sorted", "len", "numpy.mean", "numpy.where", "sorted", "len", "numpy.max", "numpy.mean", "numpy.unique", "len", "numpy.unique", "numpy.unique", "len"], "function", ["None"], ["def", "borda_sub", "(", "dataset", ",", "comparison_margin", ",", "mode", ",", "toggle_partial_ranking", "=", "False", ")", ":", "\n", "    ", "num_reviews", "=", "dataset", ".", "reviewer_to_rating", ".", "shape", "[", "1", "]", "\n", "if", "toggle_partial_ranking", "==", "False", ":", "\n", "        ", "if", "mode", "==", "\"all\"", ":", "# all scores are adjusted ", "\n", "            ", "adjust_amount", "=", "np", ".", "linspace", "(", "(", "num_reviews", "-", "1", ")", "*", "comparison_margin", ",", "0", ",", "num", "=", "num_reviews", ")", "\n", "", "elif", "mode", "==", "\"same\"", ":", "# only same scored are adjusted", "\n", "            ", "adjust_amount", "=", "np", ".", "zeros", "(", "num_reviews", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Check mode={}\"", ".", "format", "(", "str", "(", "mode", ")", ")", ")", "\n", "", "est_y", "=", "dataset", ".", "paper_to_rating", ".", "copy", "(", ")", "\n", "for", "reviewer_id", ",", "paper_ids", "in", "enumerate", "(", "dataset", ".", "reviewer_to_paper", ")", ":", "\n", "            ", "positions", "=", "np", ".", "where", "(", "dataset", ".", "paper_to_reviewer", "[", "paper_ids", "]", "==", "reviewer_id", ")", "[", "1", "]", "\n", "if", "mode", "==", "\"all\"", ":", "\n", "                ", "est_y", "[", "paper_ids", ",", "positions", "]", "=", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", "+", "adjust_amount", "\n", "", "elif", "mode", "==", "\"same\"", ":", "\n", "                ", "list_of_group", "=", "[", "np", ".", "where", "(", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", "==", "v", ")", "[", "0", "]", "for", "v", "in", "sorted", "(", "np", ".", "unique", "(", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", ")", ",", "reverse", "=", "True", ")", "]", "\n", "for", "group", "in", "list_of_group", ":", "\n", "                    ", "if", "len", "(", "group", ")", "<=", "1", ":", "\n", "                        ", "continue", "\n", "", "adjust_amount", "=", "np", ".", "linspace", "(", "(", "len", "(", "group", ")", "-", "1", ")", "*", "comparison_margin", ",", "0", ",", "num", "=", "len", "(", "group", ")", ")", "\n", "score", "=", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", "[", "group", "]", "+", "adjust_amount", "\n", "score", "-=", "np", ".", "mean", "(", "score", ")", "-", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", "[", "group", "[", "0", "]", "]", "\n", "\n", "est_y", "[", "paper_ids", "[", "group", "]", ",", "positions", "[", "group", "]", "]", "=", "score", "\n", "", "", "", "", "else", ":", "\n", "        ", "print", "(", "\"Partial comparison constraint ON\"", ")", "\n", "est_y", "=", "dataset", ".", "paper_to_rating", ".", "copy", "(", ")", "\n", "for", "reviewer_id", ",", "paper_ids", "in", "enumerate", "(", "dataset", ".", "reviewer_to_paper", ")", ":", "\n", "            ", "positions", "=", "np", ".", "where", "(", "dataset", ".", "paper_to_reviewer", "[", "paper_ids", "]", "==", "reviewer_id", ")", "[", "1", "]", "\n", "if", "mode", "==", "\"all\"", ":", "\n", "                ", "total_groups", "=", "len", "(", "dataset", ".", "reviewer_to_list_of_groups", "[", "reviewer_id", "]", ")", "\n", "for", "idx", ",", "group", "in", "enumerate", "(", "dataset", ".", "reviewer_to_list_of_groups", "[", "reviewer_id", "]", ")", ":", "\n", "                    ", "est_y", "[", "paper_ids", "[", "group", "]", ",", "positions", "[", "group", "]", "]", "=", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", "[", "group", "]", "+", "comparison_margin", "*", "(", "total_groups", "-", "1", "-", "idx", ")", "\n", "", "", "elif", "mode", "==", "\"same\"", ":", "# same bin", "\n", "# create vector for group number", "\n", "                ", "group_number", "=", "np", ".", "zeros_like", "(", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", ")", "\n", "for", "idx", ",", "group", "in", "enumerate", "(", "dataset", ".", "reviewer_to_list_of_groups", "[", "reviewer_id", "]", ")", ":", "\n", "                    ", "group_number", "[", "group", "]", "=", "idx", "\n", "", "list_of_tie_group", "=", "[", "np", ".", "where", "(", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", "==", "v", ")", "[", "0", "]", "for", "v", "in", "sorted", "(", "np", ".", "unique", "(", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", ")", ",", "reverse", "=", "True", ")", "]", "\n", "for", "tied", "in", "list_of_tie_group", ":", "\n", "                    ", "if", "len", "(", "np", ".", "unique", "(", "group_number", "[", "tied", "]", ")", ")", "==", "1", ":", "\n", "                        ", "continue", "# only one group in this set of tied papers", "\n", "", "coefficients", "=", "np", ".", "max", "(", "group_number", "[", "tied", "]", ")", "-", "group_number", "[", "tied", "]", "\n", "score", "=", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", "[", "tied", "]", "+", "comparison_margin", "*", "coefficients", "\n", "score", "-=", "np", ".", "mean", "(", "score", ")", "-", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", "[", "tied", "[", "0", "]", "]", "\n", "\n", "est_y", "[", "paper_ids", "[", "tied", "]", ",", "positions", "[", "tied", "]", "]", "=", "score", "\n", "", "", "", "", "return", "est_y", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.src.borda_subjective.borda_even": [[65, 79], ["dataset.paper_to_rating.copy", "enumerate", "numpy.where", "numpy.where", "sorted", "len", "numpy.linspace", "numpy.unique", "len"], "function", ["None"], ["", "def", "borda_even", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"\n    DEPRECATED A naive baseline where tied scores are pushed to evenly-spaced values.\n    \"\"\"", "\n", "est_y", "=", "dataset", ".", "paper_to_rating", ".", "copy", "(", ")", "\n", "for", "reviewer_id", ",", "paper_ids", "in", "enumerate", "(", "dataset", ".", "reviewer_to_paper", ")", ":", "\n", "        ", "positions", "=", "np", ".", "where", "(", "dataset", ".", "paper_to_reviewer", "[", "paper_ids", "]", "==", "reviewer_id", ")", "[", "1", "]", "\n", "list_of_group", "=", "[", "np", ".", "where", "(", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", "==", "v", ")", "[", "0", "]", "for", "v", "in", "sorted", "(", "np", ".", "unique", "(", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", ")", ",", "reverse", "=", "True", ")", "]", "\n", "for", "group", "in", "list_of_group", ":", "\n", "            ", "if", "len", "(", "group", ")", "<=", "1", ":", "\n", "                ", "continue", "\n", "", "adjusted_scores", "=", "np", ".", "linspace", "(", "start", "=", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", "[", "group", "[", "1", "]", "]", "-", "0.5", ",", "stop", "=", "dataset", ".", "reviewer_to_rating", "[", "reviewer_id", "]", "[", "group", "[", "1", "]", "]", "+", "0.5", ",", "num", "=", "len", "(", "group", ")", "+", "2", ",", "endpoint", "=", "True", ")", "[", ":", ":", "-", "1", "]", "\n", "est_y", "[", "paper_ids", "[", "group", "]", ",", "positions", "[", "group", "]", "]", "=", "adjusted_scores", "[", "1", ":", "-", "1", "]", "\n", "", "", "return", "est_y", "\n", "", ""]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.utils.utils_funcs.to_np": [[18, 22], ["tensor.data.cpu().numpy", "tensor.data.cpu"], "function", ["None"], ["def", "to_np", "(", "tensor", ")", ":", "\n", "\t", "\"\"\"converts torch tensor to numpy\"\"\"", "\n", "data", "=", "tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.utils.utils_funcs.plot_mat": [[23, 48], ["matplotlib.subplots", "cmap.set_under", "matplotlib.imshow", "range", "ax.set_xticks", "ax.set_yticks", "ax.set_xticklabels", "ax.set_yticklabels", "ax.tick_params", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.show", "range", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "ax.text"], "function", ["None"], ["", "def", "plot_mat", "(", "valmat", ",", "k_l", ",", "k_r", ",", "b_l", ",", "b_r", ")", ":", "\n", "\t", "'''Plots'''", "\n", "xm", ",", "xn", "=", "valmat", ".", "shape", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "cmap", "=", "plt", ".", "cm", ".", "OrRd", "\n", "cmap", ".", "set_under", "(", "color", "=", "'gray'", ")", "\n", "plt", ".", "imshow", "(", "valmat", ",", "cmap", "=", "cmap", ")", "\n", "for", "i", "in", "range", "(", "xn", ")", ":", "# i = num_bnins? / x-axis", "\n", "\t\t", "for", "j", "in", "range", "(", "xm", ")", ":", "# j = k", "\n", "\t\t\t", "c", "=", "valmat", "[", "j", ",", "i", "]", "\n", "ax", ".", "text", "(", "i", ",", "j", ",", "\"{:.3f}\"", ".", "format", "(", "c", "*", "10", ")", ",", "va", "=", "'center'", ",", "ha", "=", "'center'", ")", "\n", "\n", "# plt.gca().set_xticklabels(np.arange(1, 6, 1))", "\n", "# plt.gca().set_yticklabels(np.arange(1, 5, 1))", "\n", "", "", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "xn", ")", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "arange", "(", "xm", ")", ")", "\n", "# ... and label them with the respective list entries", "\n", "ax", ".", "set_xticklabels", "(", "np", ".", "arange", "(", "b_l", ",", "b_r", "+", "1", ",", "1", ")", ")", "\n", "ax", ".", "set_yticklabels", "(", "np", ".", "arange", "(", "k_l", ",", "k_r", "+", "1", ",", "1", ")", ")", "\n", "ax", ".", "tick_params", "(", "top", "=", "True", ",", "bottom", "=", "False", ",", "\n", "labeltop", "=", "True", ",", "labelbottom", "=", "False", ")", "\n", "plt", ".", "xlabel", "(", "'b value'", ")", "\n", "plt", ".", "ylabel", "(", "'k value'", ")", "\n", "plt", ".", "title", "(", "'Increment in regularized Kendall-tau distance (10^-1)'", ",", "y", "=", "-", "0.01", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.utils.utils_funcs.get_index": [[49, 62], ["x.flatten.flatten", "numpy.random.uniform", "numpy.lexsort", "ValueError", "len"], "function", ["None"], ["", "def", "get_index", "(", "x", ",", "tie", "=", "\"random\"", ",", "order", "=", "\"descend\"", ")", ":", "\n", "\t", "\"\"\"\n\treturn index that sort the elements in descending order, break ties randomly\n\t\"\"\"", "\n", "x", "=", "x", ".", "flatten", "(", ")", "\n", "if", "tie", "==", "\"random\"", ":", "\n", "\t\t", "shuffle_", "=", "np", ".", "random", ".", "uniform", "(", "size", "=", "len", "(", "x", ")", ")", "# (d, )", "\n", "idx", "=", "np", ".", "lexsort", "(", "(", "shuffle_", ",", "x", ")", ")", "# sort by a, then by b", "\n", "if", "order", "==", "\"descend\"", ":", "\n", "\t\t\t", "idx", "=", "idx", "[", ":", ":", "-", "1", "]", "# descending order", "\n", "", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"other break tie method not supported now\"", ")", "\n", "", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.utils.utils_funcs.get_rank": [[63, 77], ["utils_funcs.get_index", "numpy.zeros_like", "numpy.arange", "ValueError", "len"], "function", ["home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.utils.utils_funcs.get_index"], ["", "def", "get_rank", "(", "x", ",", "tie", "=", "\"random\"", ",", "order", "=", "\"descend\"", ")", ":", "\n", "\t", "\"\"\"\n\tInput x: numpy array (d,)\n\tOutput rank: numpy array(d,) is the descending rank corresponding to each item in x\n\tbreak ties randomly\n\t\"\"\"", "\n", "if", "tie", "==", "\"random\"", ":", "\n", "\t\t", "idx", "=", "get_index", "(", "x", ",", "tie", ",", "order", ")", "\n", "# temp = np.argsort(x)[::-1] # indices for descending order", "\n", "ranks", "=", "np", ".", "zeros_like", "(", "x", ",", "dtype", "=", "np", ".", "int", ")", "\n", "ranks", "[", "idx", "]", "=", "np", ".", "arange", "(", "len", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "ValueError", "(", "\"other method not supported now\"", ")", "\n", "", "return", "ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.utils.utils_funcs.sigmoid": [[78, 80], ["numpy.exp"], "function", ["None"], ["", "def", "sigmoid", "(", "x", ")", ":", "\n", "\t", "return", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.utils.utils_funcs.kendalltau_dist": [[81, 101], ["len", "len", "numpy.where", "len", "numpy.where", "len", "len", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.where", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "kendalltau_dist", "(", "true_a", ",", "test_b", ",", "regularize", "=", "True", ",", "use_rank", "=", "True", ")", ":", "\n", "\t", "n", "=", "len", "(", "true_a", ")", "\n", "assert", "n", "==", "len", "(", "test_b", ")", "\n", "if", "use_rank", ":", "\n", "\t\t", "\"\"\" If vector true_a and test_b are ranks. Assumes no ties.\"\"\"", "\n", "diff_a", "=", "np", ".", "expand_dims", "(", "true_a", ",", "axis", "=", "1", ")", "-", "np", ".", "expand_dims", "(", "true_a", ",", "axis", "=", "0", ")", "# element {i, j} = a(i) - a(j)", "\n", "diff_b", "=", "np", ".", "expand_dims", "(", "test_b", ",", "axis", "=", "1", ")", "-", "np", ".", "expand_dims", "(", "test_b", ",", "axis", "=", "0", ")", "\n", "idxs_a", "=", "np", ".", "where", "(", "diff_a", ">", "0", ")", "# where ra(i)>ra(j)", "\n", "tau", "=", "len", "(", "np", ".", "where", "(", "diff_b", "[", "idxs_a", "]", "<", "0", ")", "[", "0", "]", ")", "# i, j where r(i)> ra(j) but rb(i)<rb(j)", "\n", "", "else", ":", "\n", "\t\t", "\"\"\" If vectors are scores(that induce ranks). Allows ties and treats them as 0.5 error per tie\"\"\"", "\n", "diff_a", "=", "np", ".", "expand_dims", "(", "true_a", ",", "axis", "=", "1", ")", "-", "np", ".", "expand_dims", "(", "true_a", ",", "axis", "=", "0", ")", "# element {i, j} = a(i) - a(j)", "\n", "idxs_a", "=", "np", ".", "where", "(", "diff_a", ">", "0", ")", "# where ra(i)>ra(j)", "\n", "diff_b", "=", "np", ".", "expand_dims", "(", "test_b", ",", "axis", "=", "1", ")", "-", "np", ".", "expand_dims", "(", "test_b", ",", "axis", "=", "0", ")", "\n", "tau", "=", "len", "(", "np", ".", "where", "(", "diff_b", "[", "idxs_a", "]", "<", "0", ")", "[", "0", "]", ")", "# i, j where ra(i)> ra(j) but rb(i)<rb(j)", "\n", "tau_ties", "=", "len", "(", "np", ".", "where", "(", "diff_b", "[", "idxs_a", "]", "==", "0", ")", "[", "0", "]", ")", "# i, j where ra(i)> ra(j) but rb(i)=rb(j) (ties. )", "\n", "tau", "+=", "tau_ties", "*", "0.5", "\n", "", "if", "regularize", ":", "\n", "\t\t", "tau", "=", "2", "*", "tau", "/", "(", "n", "*", "(", "n", "-", "1", ")", ")", "\n", "", "return", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.utils.utils_funcs.partial_kendalltau_dist_utils": [[102, 126], ["numpy.where", "len", "len", "len", "numpy.expand_dims", "numpy.expand_dims", "numpy.random.uniform", "len", "len", "diff_true_y.flatten", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "len", "numpy.where", "numpy.where", "numpy.where", "diff_test_y.flatten", "diff_test_y.flatten", "diff_test_y.flatten"], "function", ["None"], ["", "def", "partial_kendalltau_dist_utils", "(", "true_y", ",", "test_y", ",", "regularize", "=", "True", ",", "random_ties", "=", "True", ")", ":", "\n", "\t", "\"\"\"For all pairs (i,j) where i<j, check disagreement only if original score_(i)!= original_score(j) \"\"\"", "\n", "# print(\"calling utils partial kt dist\")", "\n", "assert", "len", "(", "test_y", ")", "==", "len", "(", "true_y", ")", "\n", "diff_true_y", "=", "np", ".", "expand_dims", "(", "true_y", ",", "axis", "=", "1", ")", "-", "np", ".", "expand_dims", "(", "true_y", ",", "axis", "=", "0", ")", "# element {i, j} = true_y(i) - true_y(j)", "\n", "true_i_beats_j_flat_idx", "=", "np", ".", "where", "(", "diff_true_y", ".", "flatten", "(", ")", ">", "0", ")", "\n", "num_ij", "=", "len", "(", "true_i_beats_j_flat_idx", "[", "0", "]", ")", "#|{i, j, s.t. y_i > y_j}|", "\n", "# print(\"num_ij = {}\".format(num_ij))", "\n", "if", "random_ties", ":", "\n", "# break ties in test_y randomly, need the master algorithm to run multiples times to approximate the expected KT distance", "\n", "\t\t", "test_y", "+=", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "1e-6", ",", "high", "=", "1e-6", ",", "size", "=", "test_y", ".", "shape", ")", "# only to break ties", "\n", "diff_test_y", "=", "np", ".", "expand_dims", "(", "test_y", ",", "axis", "=", "1", ")", "-", "np", ".", "expand_dims", "(", "test_y", ",", "axis", "=", "0", ")", "\n", "tau_1", "=", "len", "(", "np", ".", "where", "(", "diff_test_y", ".", "flatten", "(", ")", "[", "true_i_beats_j_flat_idx", "]", "<", "0", ")", "[", "0", "]", ")", "\n", "\n", "", "else", ":", "\n", "# treat ties as 0.5 error, directly calculate expected KT distance. ", "\n", "\t\t", "diff_test_y", "=", "np", ".", "expand_dims", "(", "test_y", ",", "axis", "=", "1", ")", "-", "np", ".", "expand_dims", "(", "test_y", ",", "axis", "=", "0", ")", "\n", "tau_1", "=", "len", "(", "np", ".", "where", "(", "diff_test_y", ".", "flatten", "(", ")", "[", "true_i_beats_j_flat_idx", "]", "<", "0", ")", "[", "0", "]", ")", "\n", "\"\"\" calculate number of ties\"\"\"", "\n", "tau_1_ties", "=", "0.5", "*", "len", "(", "np", ".", "where", "(", "diff_test_y", ".", "flatten", "(", ")", "[", "true_i_beats_j_flat_idx", "]", "==", "0", ")", "[", "0", "]", ")", "\n", "tau_1", "=", "tau_1", "+", "tau_1_ties", "\n", "", "if", "regularize", ":", "\n", "\t\t", "tau_1", "=", "tau_1", "/", "num_ij", "\n", "", "return", "tau_1", "\n", "", ""]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.visualization.viz_all.plot_lambda_histogram": [[26, 42], ["open", "pickle.load", "open.close", "print", "matplotlib.subplots", "numpy.linspace", "seaborn.histplot", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.ylim", "ax.tick_params", "fig.tight_layout", "matplotlib.show", "numpy.max"], "function", ["None"], ["def", "plot_lambda_histogram", "(", "file_dir", ",", "title", ")", ":", "\n", "    ", "\"\"\" Plot histogram for selected values of lambda \"\"\"", "\n", "file", "=", "open", "(", "folder", "+", "file_dir", "+", "\"/lambdas_dict\"", ",", "\"rb\"", ")", "\n", "qv_lambdas", "=", "pickle", ".", "load", "(", "file", ")", "\n", "file", ".", "close", "(", ")", "\n", "print", "(", "\"largest data is {}\"", ".", "format", "(", "np", ".", "max", "(", "qv_lambdas", ")", ")", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "newbins", "=", "np", ".", "linspace", "(", "0", ",", "2000", ",", "50", ")", "\n", "sns", ".", "histplot", "(", "data", "=", "qv_lambdas", ",", "stat", "=", "\"probability\"", ",", "bins", "=", "newbins", ")", "\n", "plt", ".", "ylabel", "(", "'Frequency'", ",", "fontsize", "=", "regular_font_size", ")", "\n", "plt", ".", "xlabel", "(", "'Values of lambdas'", ",", "fontsize", "=", "regular_font_size", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "1", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'both'", ",", "labelsize", "=", "regular_font_size", ")", "\n", "# ax.set_title(title)", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.visualization.viz_all.calculate_ties_percentage": [[43, 51], ["numpy.round", "numpy.triu_indices", "len", "numpy.expand_dims", "numpy.expand_dims", "float", "len", "numpy.where"], "function", ["None"], ["", "def", "calculate_ties_percentage", "(", "vector", ")", ":", "\n", "    ", "vector", "=", "np", ".", "round", "(", "vector", ",", "decimals", "=", "4", ")", "\n", "diff_matrix", "=", "np", ".", "expand_dims", "(", "vector", ",", "axis", "=", "1", ")", "-", "np", ".", "expand_dims", "(", "vector", ",", "axis", "=", "0", ")", "# element {i, j} = vector(i) - vector(j)", "\n", "assert", "diff_matrix", ".", "shape", "[", "0", "]", "==", "diff_matrix", ".", "shape", "[", "1", "]", "# assert square", "\n", "ind", "=", "np", ".", "triu_indices", "(", "n", "=", "diff_matrix", ".", "shape", "[", "0", "]", ",", "k", "=", "1", ")", "# only coordinates (i,j) s.t. i<j", "\n", "num_ties", "=", "len", "(", "np", ".", "where", "(", "diff_matrix", "[", "ind", "]", "==", "0", ")", "[", "0", "]", ")", "# number of such pairs", "\n", "percentage_ties", "=", "float", "(", "num_ties", ")", "/", "len", "(", "ind", "[", "0", "]", ")", "# total number of ties", "\n", "return", "percentage_ties", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.visualization.viz_all.print_difference": [[52, 63], ["float", "print", "print", "print"], "function", ["None"], ["", "def", "print_difference", "(", "a", ",", "b", ",", "type", "=", "\"percent\"", ")", ":", "\n", "    ", "assert", "type", "in", "[", "\"percent\"", ",", "\"value\"", "]", "\n", "diff", "=", "a", "-", "b", "\n", "diff", "=", "float", "(", "diff", ")", "\n", "if", "type", "==", "\"percent\"", ":", "\n", "        ", "if", "diff", ">=", "0", ":", "# a>b", "\n", "            ", "print", "(", "\"a is larger than b by {} percent\"", ".", "format", "(", "(", "diff", "/", "b", ")", "*", "100", ")", ")", "\n", "", "if", "diff", "<", "0", ":", "# a<b", "\n", "            ", "print", "(", "\"a is less than b by {} percent\"", ".", "format", "(", "(", "-", "diff", "/", "b", ")", "*", "100", ")", ")", "\n", "", "", "if", "type", "==", "\"value\"", ":", "\n", "        ", "print", "(", "\"a - b = {}\"", ".", "format", "(", "diff", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.data_loader.dataset_peerread.Dataset_sub_iclr.__init__": [[20, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "reviewer_mode", "=", "\"random\"", ")", ":", "\n", "        ", "self", ".", "num_assigns", "=", "0", "\n", "self", ".", "num_scores", "=", "3", "\n", "self", ".", "reviewer_mode", "=", "reviewer_mode", "\n", "self", ".", "reviewer_to_paper", "=", "[", "]", "# num_reviewer x num_assigns", "\n", "self", ".", "reviewer_to_rating", "=", "[", "]", "\n", "self", ".", "paper_to_reviewer", "=", "[", "]", "\n", "self", ".", "paper_to_rating", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.data_loader.dataset_peerread.Dataset_sub_iclr.load_data": [[29, 67], ["print", "print", "os.path.join", "print", "sorted", "len", "glob.glob", "peerread_models.Paper.Paper.from_json", "peerread_models.Paper.Paper.from_json.get_reviews", "len", "list_of_scores.append", "papers.append", "len", "len", "ValueError", "len", "len", "scores.append", "comments.append", "r.get_recommendation", "r.get_comments"], "methods", ["None"], ["", "def", "load_data", "(", "self", ",", "path", "=", "\"peerread_data/iclr_2017\"", ")", ":", "\n", "################################", "\n", "# read reviews", "\n", "################################", "\n", "        ", "papers", "=", "[", "]", "\n", "list_of_scores", "=", "[", "]", "\n", "lost_scores", "=", "0", "\n", "total_scores", "=", "0", "\n", "for", "split", "in", "[", "\"train\"", ",", "\"test\"", ",", "\"dev\"", "]", ":", "\n", "            ", "paper_json_dir", "=", "os", ".", "path", ".", "join", "(", "path", ",", "split", ",", "\"reviews\"", ")", "\n", "print", "(", "'Reading reviews from...'", ",", "paper_json_dir", ")", "\n", "paper_json_filenames", "=", "sorted", "(", "glob", ".", "glob", "(", "'{}/*.json'", ".", "format", "(", "paper_json_dir", ")", ")", ")", "\n", "\n", "for", "paper_json_filename", "in", "paper_json_filenames", ":", "\n", "                ", "paper", "=", "Paper", ".", "from_json", "(", "paper_json_filename", ")", "\n", "scores", "=", "[", "]", "\n", "if", "not", "paper", ":", "continue", "\n", "reviews", "=", "paper", ".", "get_reviews", "(", ")", "\n", "comments", "=", "[", "]", "# screen out duplicate reviews", "\n", "for", "r", "in", "reviews", ":", "\n", "                    ", "if", "'RECOMMENDATION'", "in", "r", ".", "__dict__", "and", "r", ".", "__dict__", "[", "'RECOMMENDATION'", "]", "is", "not", "None", ":", "\n", "                        ", "if", "'COMMENTS'", "in", "r", ".", "__dict__", "and", "r", ".", "__dict__", "[", "'COMMENTS'", "]", "is", "not", "\"\"", ":", "\n", "                            ", "if", "r", ".", "__dict__", "[", "'COMMENTS'", "]", "not", "in", "comments", ":", "\n", "                                ", "scores", ".", "append", "(", "r", ".", "get_recommendation", "(", ")", ")", "\n", "comments", ".", "append", "(", "r", ".", "get_comments", "(", ")", ")", "\n", "", "", "", "", "total_scores", "+=", "len", "(", "scores", ")", "\n", "if", "len", "(", "scores", ")", ">", "self", ".", "num_scores", ":", "\n", "                    ", "lost_scores", "+=", "len", "(", "scores", ")", "-", "self", ".", "num_scores", "\n", "scores", "=", "scores", "[", ":", "self", ".", "num_scores", "]", "\n", "\n", "", "if", "len", "(", "scores", ")", "<", "self", ".", "num_scores", ":", "\n", "                    ", "raise", "ValueError", "(", "\"{} doesn't have enough score of {}, it only has {} scores\"", ".", "format", "(", "paper_json_filename", ",", "self", ".", "num_scores", ",", "len", "(", "scores", ")", ")", ")", "\n", "\n", "", "list_of_scores", ".", "append", "(", "scores", ")", "\n", "papers", ".", "append", "(", "paper", ")", "\n", "", "", "print", "(", "'Total number of papers'", ",", "len", "(", "papers", ")", ")", "\n", "print", "(", "'Lost {} out of {} scores to ensure every paper have the same number of scores'", ".", "format", "(", "lost_scores", ",", "total_scores", ")", ")", "\n", "return", "papers", ",", "list_of_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.data_loader.dataset_peerread.Dataset_sub_iclr.get_data": [[69, 126], ["dataset_peerread.Dataset_sub_iclr.load_data", "len", "numpy.vstack", "numpy.ceil", "numpy.full", "print", "get_rank().reshape", "len", "range", "numpy.vstack", "numpy.vstack", "get_rank", "numpy.random.permutation", "numpy.split", "range", "numpy.vstack", "numpy.vstack", "dataset_peerread.Dataset_sub_iclr.original_scores.flatten", "numpy.argsort", "dataset_peerread.Dataset_sub_iclr.reviewer_to_rating.append", "dataset_peerread.Dataset_sub_iclr.reviewer_to_paper.append", "numpy.random.permutation", "numpy.split", "dataset_peerread.Dataset_sub_iclr.reviewer_to_rating.append", "dataset_peerread.Dataset_sub_iclr.reviewer_to_list_of_groups.append", "dataset_peerread.Dataset_sub_iclr.reviewer_to_paper.append", "numpy.argsort", "numpy.full", "numpy.where", "sorted", "numpy.full", "numpy.full", "numpy.full", "numpy.unique", "numpy.full", "numpy.full"], "methods", ["home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.data_loader.dataset_peerread.Dataset_sub_iclr.load_data", "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.utils.utils_funcs.get_rank"], ["", "def", "get_data", "(", "self", ",", "num_assigns", ",", "path", "=", "\"peerread_data/iclr_2017\"", ",", "comparison_constraint", "=", "\"partial\"", ")", ":", "\n", "        ", "assert", "comparison_constraint", "in", "[", "\"partial\"", ",", "\"random\"", ",", "\"strict\"", "]", "\n", "self", ".", "num_assigns", "=", "num_assigns", "# start from 2", "\n", "papers", ",", "original_scores", "=", "self", ".", "load_data", "(", "path", "=", "path", ")", "\n", "if", "(", "len", "(", "papers", ")", "%", "2", ")", "==", "1", ":", "\n", "            ", "papers", "=", "papers", "[", ":", "-", "1", "]", "\n", "original_scores", "=", "original_scores", "[", ":", "-", "1", "]", "\n", "print", "(", "\"Discard last paper for simplicity, need num of papers to be even\"", ")", "\n", "", "self", ".", "num_item", "=", "len", "(", "papers", ")", "\n", "\n", "self", ".", "original_scores", "=", "np", ".", "vstack", "(", "original_scores", ")", "\n", "\"\"\" Put into 5 bins \"\"\"", "\n", "self", ".", "paper_to_rating", "=", "np", ".", "ceil", "(", "self", ".", "original_scores", "/", "2", ")", "\n", "\n", "\"\"\"Further quantize\"\"\"", "\n", "# self.original_scores = self.paper_to_rating", "\n", "# self.paper_to_rating = np.ceil(self.original_scores/2)", "\n", "self", ".", "paper_to_reviewer", "=", "np", ".", "full", "(", "(", "self", ".", "num_item", ",", "self", ".", "num_scores", ")", ",", "-", "1", ")", "\n", "\n", "if", "comparison_constraint", "==", "\"random\"", ":", "\n", "            ", "self", ".", "y_ranking", "=", "get_rank", "(", "self", ".", "original_scores", ".", "flatten", "(", ")", ")", ".", "reshape", "(", "self", ".", "original_scores", ".", "shape", ")", "\n", "if", "self", ".", "reviewer_mode", "==", "\"random\"", ":", "\n", "                ", "reviewer_index", "=", "0", "\n", "for", "score_position", "in", "range", "(", "self", ".", "num_scores", ")", ":", "\n", "                    ", "perm", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "num_item", ")", "\n", "for", "paper_ids", "in", "np", ".", "split", "(", "perm", ",", "self", ".", "num_item", "/", "num_assigns", ")", ":", "\n", "                        ", "ranked_ind", "=", "np", ".", "argsort", "(", "self", ".", "y_ranking", "[", "paper_ids", ",", "np", ".", "full", "(", "(", "num_assigns", ",", ")", ",", "score_position", ")", "]", ")", "\n", "self", ".", "reviewer_to_rating", ".", "append", "(", "self", ".", "paper_to_rating", "[", "paper_ids", "[", "ranked_ind", "]", ",", "np", ".", "full", "(", "(", "num_assigns", ",", ")", ",", "score_position", ")", "]", ")", "\n", "self", ".", "reviewer_to_paper", ".", "append", "(", "paper_ids", "[", "ranked_ind", "]", ")", "\n", "\n", "self", ".", "paper_to_reviewer", "[", "paper_ids", ",", "np", ".", "full", "(", "(", "num_assigns", ",", ")", ",", "score_position", ")", "]", "=", "reviewer_index", "\n", "\n", "reviewer_index", "+=", "1", "\n", "\n", "", "", "self", ".", "reviewer_to_paper", "=", "np", ".", "vstack", "(", "self", ".", "reviewer_to_paper", ")", "\n", "self", ".", "reviewer_to_rating", "=", "np", ".", "vstack", "(", "self", ".", "reviewer_to_rating", ")", "\n", "\n", "", "", "elif", "comparison_constraint", "==", "\"partial\"", ":", "\n", "            ", "self", ".", "reviewer_to_list_of_groups", "=", "[", "]", "\n", "if", "self", ".", "reviewer_mode", "==", "\"random\"", ":", "\n", "                ", "reviewer_index", "=", "0", "\n", "for", "score_position", "in", "range", "(", "self", ".", "num_scores", ")", ":", "\n", "                    ", "perm", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "num_item", ")", "\n", "for", "paper_ids", "in", "np", ".", "split", "(", "perm", ",", "self", ".", "num_item", "/", "num_assigns", ")", ":", "\n", "                        ", "z", "=", "self", ".", "original_scores", "[", "paper_ids", ",", "np", ".", "full", "(", "(", "num_assigns", ",", ")", ",", "score_position", ")", "]", "\n", "ranked_ind", "=", "np", ".", "argsort", "(", "z", ")", "[", ":", ":", "-", "1", "]", "\n", "self", ".", "reviewer_to_rating", ".", "append", "(", "self", ".", "paper_to_rating", "[", "paper_ids", "[", "ranked_ind", "]", ",", "np", ".", "full", "(", "(", "num_assigns", ",", ")", ",", "score_position", ")", "]", ")", "\n", "list_of_groups", "=", "[", "np", ".", "where", "(", "z", "[", "ranked_ind", "]", "==", "v", ")", "[", "0", "]", "for", "v", "in", "sorted", "(", "np", ".", "unique", "(", "z", ")", ",", "reverse", "=", "True", ")", "]", "\n", "self", ".", "reviewer_to_list_of_groups", ".", "append", "(", "list_of_groups", ")", "# CHANGED PART", "\n", "self", ".", "reviewer_to_paper", ".", "append", "(", "paper_ids", "[", "ranked_ind", "]", ")", "\n", "self", ".", "paper_to_reviewer", "[", "paper_ids", ",", "np", ".", "full", "(", "(", "num_assigns", ",", ")", ",", "score_position", ")", "]", "=", "reviewer_index", "\n", "reviewer_index", "+=", "1", "\n", "", "", "self", ".", "reviewer_to_paper", "=", "np", ".", "vstack", "(", "self", ".", "reviewer_to_paper", ")", "\n", "self", ".", "reviewer_to_rating", "=", "np", ".", "vstack", "(", "self", ".", "reviewer_to_rating", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.data_loader.dataset_peerread.Dataset_sub_iclr.partial_kendalltau_dist": [[127, 132], ["dataset_peerread.Dataset_sub_iclr.original_scores.flatten", "partial_kendalltau_dist_utils", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.utils.utils_funcs.partial_kendalltau_dist_utils"], ["", "", "def", "partial_kendalltau_dist", "(", "self", ",", "test_y", ",", "regularize", "=", "True", ")", ":", "\n", "        ", "\"\"\"For all pairs (i,j) where i<j, check disagreement only if original score(i)!= original_score(j) \"\"\"", "\n", "true_y", "=", "self", ".", "original_scores", ".", "flatten", "(", ")", "\n", "errors", "=", "partial_kendalltau_dist_utils", "(", "true_y", ",", "test_y", ",", "regularize", ",", "False", ")", "\n", "return", "np", ".", "mean", "(", "errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.data_loader.dataset_subjective.Dataset_sub.__init__": [[23, 27], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_item", ",", "configs", "=", "None", ")", ":", "\n", "        ", "self", ".", "num_item", "=", "num_item", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "has_data", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.data_loader.dataset_subjective.Dataset_sub.get_combined_data": [[28, 92], ["numpy.full", "numpy.zeros", "range", "numpy.vstack", "numpy.vstack", "numpy.round", "numpy.round", "data_dist.lower", "numpy.random.uniform", "numpy.random.permutation", "numpy.split", "numpy.savez", "print", "numpy.load", "numpy.round", "numpy.round", "data_dist.lower", "numpy.random.normal", "numpy.clip", "ValueError", "numpy.clip", "numpy.vstack.append", "numpy.vstack.append", "print", "numpy.random.normal", "numpy.argsort", "numpy.full", "numpy.full"], "methods", ["None"], ["", "def", "get_combined_data", "(", "self", ",", "num_scores", ",", "num_assigns", ",", "loadpath", "=", "None", ",", "savepath", "=", "None", ",", "model", "=", "'Thurstone'", ",", "data_dist", "=", "'uniform'", ",", "noise_std", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        num_assigns: The number of papers each reviewer gets. They will provide a full ranking among these papers, as well as quantized scores for each. \n        num_scores: The number of times each paper is reviewed. \n        model: the generative model. So far we only support Thurstone. \n        \"\"\"", "\n", "# assert model.lower()=='thurstone'", "\n", "# assert self.num_item % num_assigns == 0", "\n", "if", "loadpath", "is", "None", ":", "\n", "            ", "reviewer_to_paper", "=", "[", "]", "# num_reviewer x num_assigns", "\n", "reviewer_to_score", "=", "[", "]", "\n", "paper_to_reviewer", "=", "np", ".", "full", "(", "(", "self", ".", "num_item", ",", "num_scores", ")", ",", "-", "1", ")", "\n", "paper_to_score", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_item", ",", "num_scores", ")", ")", "\n", "if", "data_dist", ".", "lower", "(", ")", "==", "'uniform'", ":", "\n", "                ", "data_x", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "1", ",", "high", "=", "9.0", ",", "size", "=", "(", "self", ".", "num_item", ",", ")", ")", "\n", "", "elif", "data_dist", ".", "lower", "(", ")", "==", "'gaussian'", ":", "\n", "                ", "data_x", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "5.0", ",", "scale", "=", "2.0", ",", "size", "=", "(", "self", ".", "num_item", ",", ")", ")", "\n", "np", ".", "clip", "(", "data_x", ",", "0", ",", "10", ",", "out", "=", "data_x", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Do not recognize data_dist = {}\"", ".", "format", "(", "data_dist", ")", ")", "\n", "", "reviewer_index", "=", "0", "\n", "for", "score_position", "in", "range", "(", "num_scores", ")", ":", "\n", "                ", "perm", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "num_item", ")", "\n", "for", "paper_ids", "in", "np", ".", "split", "(", "perm", ",", "self", ".", "num_item", "/", "num_assigns", ")", ":", "\n", "                    ", "scores", "=", "data_x", "[", "paper_ids", "]", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "noise_std", ",", "num_assigns", ")", "\n", "np", ".", "clip", "(", "scores", ",", "0", ",", "10", ",", "out", "=", "scores", ")", "\n", "\n", "ranked_ind", "=", "np", ".", "argsort", "(", "scores", ")", "[", ":", ":", "-", "1", "]", "# indices that rank papers in paper_ids in decreasing order", "\n", "reviewer_to_score", ".", "append", "(", "scores", "[", "ranked_ind", "]", ")", "\n", "reviewer_to_paper", ".", "append", "(", "paper_ids", "[", "ranked_ind", "]", ")", "\n", "\n", "paper_to_score", "[", "paper_ids", ",", "np", ".", "full", "(", "(", "num_assigns", ",", ")", ",", "score_position", ")", "]", "=", "scores", "\n", "paper_to_reviewer", "[", "paper_ids", ",", "np", ".", "full", "(", "(", "num_assigns", ",", ")", ",", "score_position", ")", "]", "=", "reviewer_index", "\n", "reviewer_index", "+=", "1", "\n", "\n", "", "", "reviewer_to_paper", "=", "np", ".", "vstack", "(", "reviewer_to_paper", ")", "\n", "reviewer_to_score", "=", "np", ".", "vstack", "(", "reviewer_to_score", ")", "\n", "self", ".", "reviewer_to_paper", "=", "reviewer_to_paper", "\n", "self", ".", "reviewer_to_score", "=", "reviewer_to_score", "\n", "self", ".", "reviewer_to_rating", "=", "np", ".", "round", "(", "self", ".", "reviewer_to_score", ")", "\n", "self", ".", "paper_to_reviewer", "=", "paper_to_reviewer", "\n", "self", ".", "paper_to_score", "=", "paper_to_score", "\n", "self", ".", "paper_to_rating", "=", "np", ".", "round", "(", "self", ".", "paper_to_score", ")", "\n", "self", ".", "noise_std", "=", "noise_std", "\n", "self", ".", "data_x", "=", "data_x", "\n", "\n", "if", "savepath", "is", "not", "None", ":", "\n", "                ", "np", ".", "savez", "(", "savepath", ",", "reviewer_to_paper", "=", "reviewer_to_paper", ",", "reviewer_to_score", "=", "reviewer_to_score", ",", "paper_to_reviewer", "=", "paper_to_reviewer", ",", "paper_to_score", "=", "paper_to_score", ",", "noise_std", "=", "noise_std", ",", "data_x", "=", "data_x", ")", "\n", "print", "(", "\"saved data to %s\"", "%", "savepath", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "data", "=", "np", ".", "load", "(", "loadpath", ")", "\n", "self", ".", "reviewer_to_paper", "=", "data", "[", "'reviewer_to_paper'", "]", "\n", "self", ".", "reviewer_to_score", "=", "data", "[", "'reviewer_to_score'", "]", "\n", "self", ".", "reviewer_to_rating", "=", "np", ".", "round", "(", "self", ".", "reviewer_to_score", ")", "\n", "self", ".", "paper_to_reviewer", "=", "data", "[", "'paper_to_reviewer'", "]", "\n", "self", ".", "paper_to_score", "=", "data", "[", "'paper_to_score'", "]", "\n", "self", ".", "paper_to_rating", "=", "np", ".", "round", "(", "self", ".", "paper_to_score", ")", "\n", "self", ".", "noise_std", "=", "data", "[", "'noise_std'", "]", "\n", "self", ".", "data_x", "=", "data", "[", "'data_x'", "]", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"check this path: %s\"", "%", "loadpath", ")", "\n", "", "", "self", ".", "has_data", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.data_loader.dataset_subjective.Dataset_sub.partial_kendalltau_dist": [[93, 98], ["dataset_subjective.Dataset_sub.paper_to_score.flatten", "partial_kendalltau_dist_utils", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.myusha_rankings_and_quantized_scores.utils.utils_funcs.partial_kendalltau_dist_utils"], ["", "def", "partial_kendalltau_dist", "(", "self", ",", "test_y", ",", "regularize", "=", "True", ")", ":", "\n", "        ", "\"\"\"For all pairs (i,j) where i<j, check disagreement only if original score(i)!= original_score(j) \"\"\"", "\n", "true_y", "=", "self", ".", "paper_to_score", ".", "flatten", "(", ")", "\n", "errors", "=", "partial_kendalltau_dist_utils", "(", "true_y", ",", "test_y", ",", "regularize", ",", "False", ")", "\n", "return", "np", ".", "mean", "(", "errors", ")", "", "", "", ""]]}