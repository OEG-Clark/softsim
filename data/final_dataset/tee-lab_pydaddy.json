{"home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE.__init__": [[36, 43], ["sde.SDE.__dict__.update"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        pass\n\n        .. document private functions\n        \"\"\"", "\n", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._drift": [[44, 72], ["None"], "methods", ["None"], ["", "def", "_drift", "(", "self", ",", "X", ",", "t_int", ",", "Dt", ")", ":", "\n", "        ", "r\"\"\"\n        Get Drift coeffecient vector of data.\n\n        Args\n        ----\n        X : array_like\n                Time Series data\n        t_int : float\n                time difference betwen consecutive observations\n        Dt : float\n                drift calculation timescale\n\n        Returns\n        -------\n        diff : array_like\n            Diffusion in time series\n\n        Notes\n        -----\n        Drift is calculated as follows\n\n        .. math::\n            drift = \\frac{x(i+Dt)-x(i)}{tint * Dt}\n        \"\"\"", "\n", "\n", "# return np.array([b - a for a, b in zip(X, X[Dt:])]) / (t_int * Dt)", "\n", "return", "(", "X", "[", "Dt", ":", "]", "-", "X", "[", ":", "-", "Dt", "]", ")", "/", "(", "t_int", "*", "Dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._residual": [[73, 81], ["len", "max", "sde.SDE._drift"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._drift"], ["", "def", "_residual", "(", "self", ",", "X", ",", "t_int", ",", "Dt", ",", "dt", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Get the residual.\n        \"\"\"", "\n", "p", "=", "len", "(", "X", ")", "-", "max", "(", "dt", ",", "Dt", ")", "\n", "drift", "=", "self", ".", "_drift", "(", "X", ",", "t_int", ",", "Dt", ")", "[", ":", "p", "]", "\n", "res", "=", "(", "X", "[", "dt", ":", "]", "-", "X", "[", ":", "-", "dt", "]", ")", "[", ":", "p", "]", "-", "drift", "*", "(", "t_int", "*", "dt", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion_from_residual": [[82, 96], ["F"], "methods", ["None"], ["", "def", "_diffusion_from_residual", "(", "self", ",", "X", ",", "F", ",", "t_int", ",", "dt", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Get diffusion using residuals about drift function.\n\n        Parameters\n        ----------\n        X (np.array): Time-series\n        t_int (float): Time-step\n        F (Callable): Drift function\n        \"\"\"", "\n", "drift", "=", "F", "(", "X", "[", ":", "-", "dt", "]", ")", "\n", "finite_diff", "=", "X", "[", "dt", ":", "]", "-", "X", "[", ":", "-", "dt", "]", "\n", "residual", "=", "finite_diff", "-", "drift", "*", "t_int", "\n", "return", "residual", "**", "2", "/", "t_int", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion": [[97, 118], ["numpy.square"], "methods", ["None"], ["", "def", "_diffusion", "(", "self", ",", "X", ",", "t_int", ",", "dt", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Get Diffusion coefficient vector of data\n\n        Parameters\n        ----------\n        X : array_like\n            time series data\n        t_int : float\n            time step in time series\n        dt : int\n            diffusion calculation timescale\n\n        Returns\n        --------\n        diff : array.\n            Diffusion\n        \"\"\"", "\n", "\n", "# return np.square(np.array([b - a for a, b in zip(X, X[dt:])])) / (t_int * dt)", "\n", "return", "np", ".", "square", "(", "X", "[", "dt", ":", "]", "-", "X", "[", ":", "-", "dt", "]", ")", "/", "(", "t_int", "*", "dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion_x_from_residual": [[119, 124], ["F1"], "methods", ["None"], ["", "def", "_diffusion_x_from_residual", "(", "self", ",", "x", ",", "y", ",", "F1", ",", "t_int", ",", "dt", ")", ":", "\n", "        ", "drift", "=", "F1", "(", "x", "[", ":", "-", "dt", "]", ",", "y", "[", ":", "-", "dt", "]", ")", "\n", "finite_diff", "=", "x", "[", "dt", ":", "]", "-", "x", "[", ":", "-", "dt", "]", "\n", "residual", "=", "finite_diff", "-", "drift", "*", "t_int", "\n", "return", "residual", "**", "2", "/", "t_int", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion_y_from_residual": [[125, 130], ["F2"], "methods", ["None"], ["", "def", "_diffusion_y_from_residual", "(", "self", ",", "x", ",", "y", ",", "F2", ",", "t_int", ",", "dt", ")", ":", "\n", "        ", "drift", "=", "F2", "(", "x", "[", ":", "-", "dt", "]", ",", "y", "[", ":", "-", "dt", "]", ")", "\n", "finite_diff", "=", "y", "[", "dt", ":", "]", "-", "y", "[", ":", "-", "dt", "]", "\n", "residual", "=", "finite_diff", "-", "drift", "*", "t_int", "\n", "return", "residual", "**", "2", "/", "t_int", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion_xy_from_residual": [[131, 137], ["F1", "F2"], "methods", ["None"], ["", "def", "_diffusion_xy_from_residual", "(", "self", ",", "x", ",", "y", ",", "F1", ",", "F2", ",", "t_int", ",", "dt", ")", ":", "\n", "        ", "drift_x", "=", "F1", "(", "x", "[", ":", "-", "dt", "]", ",", "y", "[", ":", "-", "dt", "]", ")", "\n", "drift_y", "=", "F2", "(", "x", "[", ":", "-", "dt", "]", ",", "y", "[", ":", "-", "dt", "]", ")", "\n", "residual_x", "=", "(", "x", "[", "dt", ":", "]", "-", "x", "[", ":", "-", "dt", "]", ")", "-", "drift_x", "\n", "residual_y", "=", "(", "y", "[", "dt", ":", "]", "-", "y", "[", ":", "-", "dt", "]", ")", "-", "drift_y", "\n", "return", "residual_x", "*", "residual_y", "/", "dt", "*", "t_int", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion_xy": [[138, 158], ["None"], "methods", ["None"], ["", "def", "_diffusion_xy", "(", "self", ",", "x", ",", "y", ",", "t_int", ",", "dt", ")", ":", "\n", "        ", "\"\"\"\n        Get cross-correlation coefficients between x and y arrays.\n\n        Args\n        ----\n        x : numpy.array\n                x data\n        y : numpy.array\n                y data\n        t_int : float\n                time difference betwen consecutive observations\n        dt : diffusion calculation timescale\n\n        Returns\n        -------\n        diffusion_xy : numpy.array\n                cross-correlation coefficients between x and y data\n        \"\"\"", "\n", "return", "(", "(", "x", "[", "dt", ":", "]", "-", "x", "[", ":", "-", "dt", "]", ")", "*", "(", "y", "[", "dt", ":", "]", "-", "y", "[", ":", "-", "dt", "]", ")", ")", "/", "(", "dt", "*", "t_int", ")", "\n", "#return np.array([(b - a) * (d - c) for a, b, c, d in zip(x, x[dt:], y, y[dt:])]) / (dt * t_int)", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion_yx": [[160, 180], ["None"], "methods", ["None"], ["", "def", "_diffusion_yx", "(", "self", ",", "x", ",", "y", ",", "t_int", ",", "dt", ")", ":", "\n", "        ", "\"\"\"\n        Get cross-correlation coefficients between x and y arrays.\n\n        Args\n        ----\n        x : numpy.array\n                x data\n        y : numpy.array\n                y data\n        t_int : float\n                time difference betwen consecutive observations\n        dt : diffusion calculation timescale\n\n        Returns\n        -------\n        diffusion_xy : numpy.array\n                cross-correlation coefficients between y and x data\n        \"\"\"", "\n", "return", "(", "(", "x", "[", "dt", ":", "]", "-", "x", "[", ":", "-", "dt", "]", ")", "*", "(", "y", "[", "dt", ":", "]", "-", "y", "[", ":", "-", "dt", "]", ")", ")", "/", "(", "dt", "*", "t_int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._km_coefficient": [[181, 183], ["None"], "methods", ["None"], ["", "def", "_km_coefficient", "(", "self", ",", "order", ",", "X", ",", "t_int", ")", ":", "\n", "        ", "return", "(", "X", "[", "1", ":", "]", "-", "X", "[", ":", "-", "1", "]", ")", "**", "order", "#/ (t_int) # * factorial(order))", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._isValidRange": [[184, 199], ["isinstance", "len"], "methods", ["None"], ["", "def", "_isValidRange", "(", "self", ",", "r", ")", ":", "\n", "        ", "\"\"\"\n        Checks if the specified range of order parameter is valid range\n\n        Args\n        ----\n        r : tuple, list\n                range of order parameter\n\n        Returns\n        -------\n        bool\n                True if valid, False if not.\n        \"\"\"", "\n", "return", "isinstance", "(", "r", ",", "(", "list", ",", "tuple", ")", ")", "and", "len", "(", "r", ")", "==", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._order_parameter": [[200, 230], ["numpy.arange", "sde.SDE._isValidRange", "numpy.linspace", "min", "min", "max", "min", "max", "max"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._isValidRange"], ["", "def", "_order_parameter", "(", "self", ",", "X", ",", "inc", ",", "r", ")", ":", "\n", "        ", "\"\"\"\n        Get order parameter array for a given range and increments\n\n        If range is None or not valid, order parameter array will be generated considering\n        maxmium and mimimum limits of the data as the range\n\n        Args\n        ----\n        X : numpy.array\n                data\n        inc : float\n                step increments in order parameter\n        r : tuple, list\n                range of the order parameter\n\n        Returns\n        -------\n        tuple\n                first element will be the order parameter array\n                second element is the rangen used\n        \"\"\"", "\n", "if", "r", "is", "None", ":", "\n", "            ", "r", "=", "(", "min", "(", "X", ")", ",", "max", "(", "X", ")", ")", "\n", "", "if", "not", "self", ".", "_isValidRange", "(", "r", ")", ":", "\n", "            ", "r", "=", "(", "min", "(", "X", ")", ",", "max", "(", "X", ")", ")", "\n", "", "if", "self", ".", "bins", ":", "\n", "#return np.linspace(min(X), max(X), self.bins)", "\n", "            ", "return", "np", ".", "linspace", "(", "r", "[", "0", "]", ",", "r", "[", "-", "1", "]", ",", "self", ".", "bins", ")", "\n", "", "return", "np", ".", "arange", "(", "min", "(", "r", ")", ",", "max", "(", "r", ")", "+", "inc", ",", "inc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._drift_and_diffusion": [[231, 318], ["sde.SDE._order_parameter", "sde.SDE._drift", "collections.namedtuple", "collections.namedtuple.", "fitters.PolyFit1D", "sde.SDE._diffusion_from_residual", "fitters.PolyFit1D", "sde.SDE._diffusion", "drift_ebar.append", "diff_ebar.append", "drift_num.append", "diff_num.append", "numpy.isnan", "numpy.isnan", "fitters.PolyFit1D.tune_and_fit", "fitters.PolyFit1D.fit", "fitters.PolyFit1D.tune_and_fit", "fitters.PolyFit1D.fit", "numpy.where", "warnings.catch_warnings", "warnings.simplefilter", "avgdiff.append", "avgdrift.append", "len", "len", "numpy.array", "numpy.array", "max", "numpy.logical_and", "numpy.nanmean", "numpy.nanmean", "numpy.nanstd", "numpy.sqrt", "numpy.nanstd", "numpy.sqrt", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._order_parameter", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._drift", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion_from_residual", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.tune_and_fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.tune_and_fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit"], ["", "def", "_drift_and_diffusion", "(", "self", ",", "X", ",", "t_int", ",", "Dt", ",", "dt", ",", "inc", ",", "\n", "drift_threshold", ",", "drift_degree", ",", "drift_alpha", ",", "\n", "diff_threshold", ",", "diff_degree", ",", "diff_alpha", ",", "\n", "fast_mode", ")", ":", "\n", "        ", "\"\"\"\n        Get drift and diffusion coefficients for a given timeseries data\n\n        Args\n        ----\n        X : numpy.array\n                time series data\n        t_int : float\n                time difference betwen consecutive observations\n        Dt : int\n                timescale to calculate drift\n        dt : int\n                timescale to claculate diffusion\n        inc : float\n                step increments in order parameter\n        drift_threshold : float or None\n                threshold to use for fitting drift function. If None, automatic model selection will be used.\n        diff_threshold : float or None\n                threshold to use for fitting diffusion function. If None, automatic model selection will be used.\n        Returns\n        ----\n        ---\n        diff : array\n            diffusion of the data\n        drift : array.\n            drift, of the data\n        avgdiff : array\n            average diffusion\n        avgdrift : array\n            average drift \n        op : array\n            order parameter\n        \"\"\"", "\n", "op", "=", "self", ".", "_order_parameter", "(", "X", ",", "inc", ",", "self", ".", "op_range", ")", "\n", "avgdiff", ",", "avgdrift", "=", "[", "]", ",", "[", "]", "\n", "drift", "=", "self", ".", "_drift", "(", "X", ",", "t_int", ",", "Dt", ")", "\n", "\n", "if", "not", "fast_mode", ":", "\n", "            ", "X_", "=", "X", "[", ":", "-", "Dt", "]", "\n", "nan_idx", "=", "np", ".", "isnan", "(", "X_", ")", "|", "np", ".", "isnan", "(", "drift", ")", "\n", "X_", "=", "X_", "[", "~", "nan_idx", "]", "\n", "drift_", "=", "drift", "[", "~", "nan_idx", "]", "\n", "\n", "fitter", "=", "PolyFit1D", "(", "max_degree", "=", "drift_degree", ",", "threshold", "=", "drift_threshold", ",", "alpha", "=", "drift_alpha", ")", "\n", "if", "drift_threshold", "is", "None", ":", "\n", "                ", "F", "=", "fitter", ".", "tune_and_fit", "(", "X_", ",", "drift_", ")", "\n", "", "else", ":", "\n", "                ", "F", "=", "fitter", ".", "fit", "(", "X", "[", ":", "-", "Dt", "]", ",", "drift_", ")", "\n", "\n", "", "diff", "=", "self", ".", "_diffusion_from_residual", "(", "X", ",", "F", ",", "t_int", ",", "dt", "=", "dt", ")", "\n", "diff_", "=", "diff", "[", "~", "nan_idx", "]", "\n", "fitter", "=", "PolyFit1D", "(", "max_degree", "=", "diff_degree", ",", "threshold", "=", "diff_threshold", ",", "alpha", "=", "diff_alpha", ")", "\n", "if", "diff_threshold", "is", "None", ":", "\n", "                ", "G", "=", "fitter", ".", "tune_and_fit", "(", "X_", ",", "diff_", ")", "\n", "", "else", ":", "\n", "                ", "G", "=", "fitter", ".", "fit", "(", "X_", ",", "diff_", ")", "\n", "", "", "else", ":", "\n", "            ", "diff", "=", "self", ".", "_diffusion", "(", "X", ",", "t_int", ",", "dt", "=", "dt", ")", "\n", "F", "=", "G", "=", "None", "\n", "\n", "", "drift_ebar", "=", "[", "]", "\n", "diff_ebar", "=", "[", "]", "\n", "drift_num", "=", "[", "]", "\n", "diff_num", "=", "[", "]", "\n", "X", "=", "X", "[", "0", ":", "-", "max", "(", "Dt", ",", "dt", ")", "]", "\n", "for", "b", "in", "op", ":", "\n", "            ", "i", "=", "np", ".", "where", "(", "np", ".", "logical_and", "(", "X", "<", "(", "b", "+", "inc", ")", ",", "X", ">=", "b", ")", ")", "[", "0", "]", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "category", "=", "RuntimeWarning", ")", "\n", "avgdiff", ".", "append", "(", "np", ".", "nanmean", "(", "diff", "[", "i", "]", ")", ")", "\n", "avgdrift", ".", "append", "(", "np", ".", "nanmean", "(", "drift", "[", "i", "]", ")", ")", "\n", "", "drift_ebar", ".", "append", "(", "np", ".", "nanstd", "(", "drift", "[", "i", "]", ")", "/", "np", ".", "sqrt", "(", "len", "(", "drift", "[", "i", "]", ")", ")", ")", "\n", "diff_ebar", ".", "append", "(", "np", ".", "nanstd", "(", "diff", "[", "i", "]", ")", "/", "np", ".", "sqrt", "(", "len", "(", "diff", "[", "i", "]", ")", ")", ")", "\n", "drift_num", ".", "append", "(", "len", "(", "drift", "[", "i", "]", ")", ")", "\n", "diff_num", ".", "append", "(", "len", "(", "diff", "[", "i", "]", ")", ")", "\n", "# return diff, drift, np.array(avgdiff), np.array(avgdrift), op, drift_ebar, diff_ebar, drift_num, diff_num, F, G", "\n", "", "DD", "=", "namedtuple", "(", "'DD'", ",", "'diff drift avgdiff avgdrift op drift_ebar diff_ebar drift_num diff_num F G'", ")", "\n", "return", "DD", "(", "\n", "diff", "=", "diff", ",", "drift", "=", "drift", ",", "\n", "avgdiff", "=", "np", ".", "array", "(", "avgdiff", ")", ",", "avgdrift", "=", "np", ".", "array", "(", "avgdrift", ")", ",", "op", "=", "op", ",", "\n", "drift_ebar", "=", "drift_ebar", ",", "diff_ebar", "=", "diff_ebar", ",", "\n", "drift_num", "=", "drift_num", ",", "diff_num", "=", "diff_num", ",", "\n", "F", "=", "F", ",", "G", "=", "G", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._vector_drift_diff": [[320, 440], ["sde.SDE._order_parameter", "sde.SDE._order_parameter", "sde.SDE._drift", "sde.SDE._drift", "numpy.stack", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "collections.namedtuple", "collections.namedtuple.", "fitters.PolyFit2D", "sde.SDE._diffusion_x_from_residual", "sde.SDE._diffusion_y_from_residual", "sde.SDE._diffusion_xy_from_residual", "fitters.PolyFit2D", "sde.SDE._diffusion", "sde.SDE._diffusion", "sde.SDE._diffusion_xy", "sde.SDE._diffusion_yx", "numpy.isnan", "fitters.PolyFit2D.tune_and_fit", "fitters.PolyFit2D.tune_and_fit", "fitters.PolyFit2D.fit", "fitters.PolyFit2D.fit", "fitters.PolyFit2D.tune_and_fit", "fitters.PolyFit2D.tune_and_fit", "fitters.PolyFit2D.tune_and_fit", "fitters.PolyFit2D.fit", "fitters.PolyFit2D.fit", "fitters.PolyFit2D.fit", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "numpy.isnan().any", "numpy.isnan", "numpy.where", "warnings.catch_warnings", "warnings.simplefilter", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "max", "max", "numpy.logical_and", "numpy.isnan", "numpy.logical_and", "numpy.logical_and"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._order_parameter", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._order_parameter", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._drift", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._drift", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion_x_from_residual", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion_y_from_residual", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion_xy_from_residual", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion_xy", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._diffusion_yx", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.tune_and_fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.tune_and_fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.tune_and_fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.tune_and_fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.tune_and_fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit"], ["", "def", "_vector_drift_diff", "(", "self", ",", "x", ",", "y", ",", "inc_x", ",", "inc_y", ",", "t_int", ",", "Dt", ",", "dt", ",", "\n", "drift_threshold", ",", "drift_degree", ",", "drift_alpha", ",", "\n", "diff_threshold", ",", "diff_degree", ",", "diff_alpha", ",", "\n", "fast_mode", ")", ":", "\n", "        ", "\"\"\"\n        Get average binned drift and diffusion coefficients for given x and y data\n\n        Args\n        ----\n        x : array_like\n            timeseries x data\n        y : array_like\n            timesereis y data\n        inc_x : float\n            step increment of order parameter for x\n        inc_y : float\n            step increment of order parameter for y\n        Dt : int\n            timescale to calculate drift\n        dt : int\n            timescale to calculate diffusion\n\n        Returns\n        -------\n        list\n            [avgdriftX, avgdriftY, avgdiffX, avgdiffY, avgdiffXY, op_x, op_y]\n        \"\"\"", "\n", "\n", "# FIXME diffusionYX = diffusionXY, so all diffusionYX variables can be removed.", "\n", "op_x", "=", "self", ".", "_order_parameter", "(", "x", ",", "inc_x", ",", "self", ".", "op_x_range", ")", "\n", "op_y", "=", "self", ".", "_order_parameter", "(", "y", ",", "inc_y", ",", "self", ".", "op_y_range", ")", "\n", "\n", "driftX", "=", "self", ".", "_drift", "(", "x", ",", "t_int", ",", "Dt", ")", "\n", "driftY", "=", "self", ".", "_drift", "(", "y", ",", "t_int", ",", "Dt", ")", "\n", "\n", "v", "=", "np", ".", "stack", "(", "(", "x", "[", ":", "-", "Dt", "]", ",", "y", "[", ":", "-", "Dt", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "if", "not", "fast_mode", ":", "\n", "            ", "nan_idx", "=", "np", ".", "isnan", "(", "v", ")", ".", "any", "(", "axis", "=", "1", ")", "|", "np", ".", "isnan", "(", "driftX", ")", "|", "np", ".", "isnan", "(", "driftY", ")", "\n", "v", "=", "v", "[", "~", "nan_idx", "]", "\n", "driftX_", "=", "driftX", "[", "~", "nan_idx", "]", "\n", "driftY_", "=", "driftY", "[", "~", "nan_idx", "]", "\n", "\n", "fitter", "=", "PolyFit2D", "(", "max_degree", "=", "drift_degree", ",", "threshold", "=", "drift_threshold", ",", "alpha", "=", "drift_alpha", ")", "\n", "if", "drift_threshold", "is", "None", ":", "\n", "                ", "F1", "=", "fitter", ".", "tune_and_fit", "(", "v", ",", "driftX_", ")", "\n", "F2", "=", "fitter", ".", "tune_and_fit", "(", "v", ",", "driftY_", ")", "\n", "", "else", ":", "\n", "                ", "F1", "=", "fitter", ".", "fit", "(", "v", ",", "driftX_", ")", "\n", "F2", "=", "fitter", ".", "fit", "(", "v", ",", "driftY_", ")", "\n", "\n", "", "diffusionX", "=", "self", ".", "_diffusion_x_from_residual", "(", "x", ",", "y", ",", "F1", ",", "t_int", ",", "dt", ")", "\n", "diffusionY", "=", "self", ".", "_diffusion_y_from_residual", "(", "x", ",", "y", ",", "F1", ",", "t_int", ",", "dt", ")", "\n", "diffusionXY", "=", "self", ".", "_diffusion_xy_from_residual", "(", "x", ",", "y", ",", "F1", ",", "F2", ",", "t_int", ",", "dt", ")", "\n", "diffusionYX", "=", "diffusionXY", "# self._diffusion_xy_from_residual(x, y, F1, F2, t_int, dt)", "\n", "\n", "diffusionX_", "=", "diffusionX", "[", "~", "nan_idx", "]", "\n", "diffusionY_", "=", "diffusionY", "[", "~", "nan_idx", "]", "\n", "diffusionXY_", "=", "diffusionXY", "[", "~", "nan_idx", "]", "\n", "diffusionYX_", "=", "diffusionXY_", "\n", "fitter", "=", "PolyFit2D", "(", "max_degree", "=", "diff_degree", ",", "threshold", "=", "diff_threshold", ",", "alpha", "=", "diff_alpha", ")", "\n", "if", "diff_threshold", "is", "None", ":", "\n", "                ", "G11", "=", "fitter", ".", "tune_and_fit", "(", "v", ",", "diffusionX_", ")", "\n", "G22", "=", "fitter", ".", "tune_and_fit", "(", "v", ",", "diffusionY_", ")", "\n", "G12", "=", "fitter", ".", "tune_and_fit", "(", "v", ",", "diffusionXY_", ")", "\n", "G21", "=", "G12", "\n", "", "else", ":", "\n", "                ", "G11", "=", "fitter", ".", "fit", "(", "v", ",", "diffusionX_", ")", "\n", "G22", "=", "fitter", ".", "fit", "(", "v", ",", "diffusionY_", ")", "\n", "G12", "=", "fitter", ".", "fit", "(", "v", ",", "diffusionXY_", ")", "\n", "G21", "=", "G12", "\n", "", "", "else", ":", "\n", "            ", "diffusionX", "=", "self", ".", "_diffusion", "(", "x", ",", "t_int", ",", "dt", ")", "\n", "diffusionY", "=", "self", ".", "_diffusion", "(", "y", ",", "t_int", ",", "dt", ")", "\n", "diffusionXY", "=", "self", ".", "_diffusion_xy", "(", "x", ",", "y", ",", "t_int", ",", "dt", ")", "\n", "diffusionYX", "=", "self", ".", "_diffusion_yx", "(", "x", ",", "y", ",", "t_int", ",", "dt", ")", "\n", "\n", "F1", "=", "F2", "=", "None", "\n", "G11", "=", "G22", "=", "G12", "=", "G21", "=", "None", "\n", "\n", "", "avgdriftX", "=", "np", ".", "zeros", "(", "(", "len", "(", "op_x", ")", ",", "len", "(", "op_y", ")", ")", ")", "\n", "avgdriftY", "=", "np", ".", "zeros", "(", "(", "len", "(", "op_x", ")", ",", "len", "(", "op_y", ")", ")", ")", "\n", "avgdiffX", "=", "np", ".", "zeros", "(", "(", "len", "(", "op_x", ")", ",", "len", "(", "op_y", ")", ")", ")", "\n", "avgdiffY", "=", "np", ".", "zeros", "(", "(", "len", "(", "op_x", ")", ",", "len", "(", "op_y", ")", ")", ")", "\n", "avgdiffXY", "=", "np", ".", "zeros", "(", "(", "len", "(", "op_x", ")", ",", "len", "(", "op_y", ")", ")", ")", "\n", "avgdiffYX", "=", "np", ".", "zeros", "(", "(", "len", "(", "op_x", ")", ",", "len", "(", "op_y", ")", ")", ")", "\n", "\n", "m", "=", "0", "\n", "x_", ",", "y_", "=", "x", "[", "0", ":", "-", "max", "(", "Dt", ",", "dt", ")", "]", ",", "y", "[", "0", ":", "-", "max", "(", "Dt", ",", "dt", ")", "]", "\n", "for", "bin_x", "in", "op_y", ":", "\n", "            ", "n", "=", "0", "\n", "for", "bin_y", "in", "op_x", ":", "\n", "                ", "i", "=", "np", ".", "where", "(", "\n", "np", ".", "logical_and", "(", "\n", "np", ".", "logical_and", "(", "x_", "<", "(", "bin_x", "+", "inc_x", ")", ",", "x_", ">=", "bin_x", ")", ",", "\n", "np", ".", "logical_and", "(", "y_", "<", "(", "bin_y", "+", "inc_y", ")", ",", "y_", ">=", "bin_y", ")", ",", "\n", ")", "\n", ")", "[", "0", "]", "\n", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                    ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ",", "category", "=", "RuntimeWarning", ")", "\n", "avgdriftX", "[", "n", ",", "m", "]", "=", "np", ".", "nanmean", "(", "driftX", "[", "i", "]", ")", "\n", "avgdriftY", "[", "n", ",", "m", "]", "=", "np", ".", "nanmean", "(", "driftY", "[", "i", "]", ")", "\n", "avgdiffX", "[", "n", ",", "m", "]", "=", "np", ".", "nanmean", "(", "diffusionX", "[", "i", "]", ")", "\n", "avgdiffY", "[", "n", ",", "m", "]", "=", "np", ".", "nanmean", "(", "diffusionY", "[", "i", "]", ")", "\n", "avgdiffXY", "[", "n", ",", "m", "]", "=", "np", ".", "nanmean", "(", "diffusionXY", "[", "i", "]", ")", "\n", "avgdiffYX", "[", "n", ",", "m", "]", "=", "np", ".", "nanmean", "(", "diffusionYX", "[", "i", "]", ")", "\n", "", "n", "=", "n", "+", "1", "\n", "", "m", "=", "m", "+", "1", "\n", "", "DD", "=", "namedtuple", "(", "'DD'", ",", "\n", "'driftX driftY diffusionX diffusionY diffusionXY diffusionYX '", "\n", "'avgdriftX avgdriftY avgdiffX avgdiffY avgdiffXY avgdiffYX '", "\n", "'op_x op_y F1 F2 G11 G22 G12 G21'", ")", "\n", "return", "DD", "(", "\n", "driftX", "=", "driftX", ",", "driftY", "=", "driftY", ",", "diffusionX", "=", "diffusionX", ",", "diffusionY", "=", "diffusionY", ",", "\n", "diffusionXY", "=", "diffusionXY", ",", "diffusionYX", "=", "diffusionYX", ",", "\n", "avgdriftX", "=", "avgdriftX", ",", "avgdriftY", "=", "avgdriftY", ",", "\n", "avgdiffX", "=", "avgdiffX", ",", "avgdiffY", "=", "avgdiffY", ",", "avgdiffXY", "=", "avgdiffXY", ",", "avgdiffYX", "=", "avgdiffYX", ",", "\n", "op_x", "=", "op_x", ",", "op_y", "=", "op_y", ",", "\n", "F1", "=", "F1", ",", "F2", "=", "F2", ",", "G11", "=", "G11", ",", "G22", "=", "G22", ",", "G12", "=", "G12", ",", "G21", "=", "G21", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE.__call__": [[444, 472], ["sde.SDE.__dict__.update", "sde.SDE._drift_and_diffusion"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._drift_and_diffusion"], ["", "def", "__call__", "(", "self", ",", "X", ",", "t_int", ",", "Dt", ",", "dt", "=", "1", ",", "inc", "=", "0.01", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Calcualtes drift, diffusion, average drift and avarage difussion.\n\n        Parameters\n        ----------\n        X : list, array_like\n                time series data\n        t_int :float\n                time step in time series\n        Dt : float\n                analysis time step\n        inc = 0.01 : float\n                max increment for binning thae data\n\n        returns\n        -------\n        diff : array_like\n                diffusion in time series\n        drift : array_like\n                drift in time series\n        avgdiff : array_like\n                avarage diffusion\n        avgdrift : array_like\n                avaerage drift\n        \"\"\"", "\n", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "return", "self", ".", "_drift_and_diffusion", "(", "X", ",", "t_int", ",", "Dt", ",", "inc", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.characterize.Main.__init__": [[25, 97], ["characterize.Main.__dict__.update", "pydaddy.preprocessing.Preprocessing.__init__", "pydaddy.analysis.GaussianTest.__init__", "pydaddy.analysis.AutoCorrelation.__init__", "characterize.Main._autobins"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.characterize.Main._autobins"], ["def", "__init__", "(", "\n", "self", ",", "\n", "data", ",", "\n", "t", "=", "1", ",", "\n", "Dt", "=", "None", ",", "\n", "dt", "=", "1", ",", "\n", "t_lag", "=", "1000", ",", "\n", "bins", "=", "None", ",", "\n", "inc", "=", "None", ",", "\n", "inc_x", "=", "None", ",", "\n", "inc_y", "=", "None", ",", "\n", "fft", "=", "True", ",", "\n", "slider_timescales", "=", "None", ",", "\n", "n_trials", "=", "1", ",", "\n", "show_summary", "=", "True", ",", "\n", "drift_threshold", "=", "None", ",", "\n", "diff_threshold", "=", "None", ",", "\n", "drift_degree", "=", "5", ",", "\n", "diff_degree", "=", "5", ",", "\n", "drift_alpha", "=", "0", ",", "\n", "diff_alpha", "=", "0", ",", "\n", "fast_mode", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "self", ".", "_data", "=", "data", "\n", "self", ".", "_t", "=", "t", "\n", "self", ".", "Dt", "=", "Dt", "\n", "\n", "self", ".", "t_lag", "=", "t_lag", "\n", "self", ".", "inc", "=", "inc", "\n", "self", ".", "inc_x", "=", "inc_x", "\n", "self", ".", "inc_y", "=", "inc_y", "\n", "self", ".", "dt", "=", "dt", "\n", "self", ".", "fft", "=", "fft", "\n", "self", ".", "n_trials", "=", "n_trials", "\n", "self", ".", "_show_summary", "=", "show_summary", "\n", "\n", "# self.drift_order = None", "\n", "# self.diff_order = None", "\n", "\n", "self", ".", "op_range", "=", "None", "\n", "self", ".", "op_x_range", "=", "None", "\n", "self", ".", "op_y_range", "=", "None", "\n", "if", "bins", ":", "\n", "            ", "self", ".", "bins", "=", "bins", "\n", "", "elif", "not", "(", "self", ".", "inc", "or", "(", "self", ".", "inc_x", "and", "self", ".", "inc_y", ")", ")", ":", "\n", "            ", "self", ".", "bins", "=", "self", ".", "_autobins", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bins", "=", "None", "\n", "", "self", ".", "slider_timescales", "=", "slider_timescales", "\n", "\n", "self", ".", "fast_mode", "=", "fast_mode", "\n", "\n", "self", ".", "drift_threshold", "=", "drift_threshold", "\n", "self", ".", "drift_degree", "=", "drift_degree", "\n", "self", ".", "drift_alpha", "=", "drift_alpha", "\n", "\n", "self", ".", "diff_threshold", "=", "diff_threshold", "\n", "self", ".", "diff_degree", "=", "diff_degree", "\n", "self", ".", "diff_alpha", "=", "diff_alpha", "\n", "\n", "\"\"\"\n        # When t_lag is greater than timeseries length, reassign its value as length of data\n        if self.t_lag > len(data[0]):\n            print('Warning : t_lag is greater that the length of data; setting t_lag as {}\\n'.format(len(data[0]) - 1))\n            self.t_lag = len(data[0]) - 1\n        \"\"\"", "\n", "\n", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "Preprocessing", ".", "__init__", "(", "self", ")", "\n", "GaussianTest", ".", "__init__", "(", "self", ")", "\n", "AutoCorrelation", ".", "__init__", "(", "self", ")", "\n", "# SDE.__init__(self)", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.characterize.Main._autobins": [[102, 113], ["int", "numpy.cbrt", "len", "int", "max", "scipy.stats.iqr", "len", "numpy.cbrt", "numpy.nanmax", "numpy.nanmin", "scipy.stats.iqr", "len", "numpy.nanmax", "numpy.nanmin"], "methods", ["None"], ["", "def", "_autobins", "(", "self", ")", ":", "\n", "        ", "\"\"\" Optimal number of bins using Freedman-Diaconis rule. \"\"\"", "\n", "\n", "binwidth_x", "=", "2", "*", "iqr", "(", "self", ".", "_data", "[", "0", "]", ",", "nan_policy", "=", "'omit'", ")", "/", "np", ".", "cbrt", "(", "len", "(", "self", ".", "_data", "[", "0", "]", ")", ")", "\n", "n", "=", "int", "(", "(", "np", ".", "nanmax", "(", "self", ".", "_data", "[", "0", "]", ")", "-", "np", ".", "nanmin", "(", "self", ".", "_data", "[", "0", "]", ")", ")", "/", "binwidth_x", ")", "\n", "if", "len", "(", "self", ".", "_data", ")", ">", "1", ":", "# Vector", "\n", "            ", "binwidth_y", "=", "2", "*", "iqr", "(", "self", ".", "_data", "[", "1", "]", ",", "nan_policy", "=", "'omit'", ")", "/", "np", ".", "cbrt", "(", "len", "(", "self", ".", "_data", "[", "1", "]", ")", ")", "\n", "n_y", "=", "int", "(", "(", "np", ".", "nanmax", "(", "self", ".", "_data", "[", "1", "]", ")", "-", "np", ".", "nanmin", "(", "self", ".", "_data", "[", "1", "]", ")", ")", "/", "binwidth_y", ")", "\n", "n", "=", "max", "(", "n", ",", "n_y", ")", "\n", "# print(f'Number of bins chosen: {n}')", "\n", "", "return", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.characterize.Main._slider_data": [[114, 216], ["sorted", "tqdm.tqdm", "dict", "dict", "dict", "map", "dict", "dict", "dict", "dict", "set().union", "characterize.Main._vector_drift_diff", "characterize.Main._drift_and_diffusion", "characterize.Main._drift_slider.keys", "set"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._vector_drift_diff", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._drift_and_diffusion"], ["", "def", "_slider_data", "(", "self", ",", "Mx", ",", "My", ",", "update", "=", "False", ")", ":", "\n", "        ", "if", "update", ":", "\n", "            ", "drift_data_dict", "=", "self", ".", "_drift_slider", "\n", "diff_data_dict", "=", "self", ".", "_diff_slider", "\n", "cross_diff_dict", "=", "self", ".", "_cross_diff_slider", "\n", "if", "not", "self", ".", "vector", ":", "\n", "                ", "ebar_drift_dict", "=", "self", ".", "_scalar_drift_ebars", "\n", "ebar_diff_dict", "=", "self", ".", "_scalar_diff_ebars", "\n", "num_drift_dict", "=", "self", ".", "_scalar_diff_nums", "\n", "num_diff_dict", "=", "self", ".", "_scalar_drift_nums", "\n", "", "", "else", ":", "\n", "            ", "drift_data_dict", "=", "dict", "(", ")", "\n", "diff_data_dict", "=", "dict", "(", ")", "\n", "cross_diff_dict", "=", "dict", "(", ")", "\n", "if", "not", "self", ".", "vector", ":", "\n", "                ", "ebar_drift_dict", "=", "dict", "(", ")", "\n", "ebar_diff_dict", "=", "dict", "(", ")", "\n", "num_drift_dict", "=", "dict", "(", ")", "\n", "num_diff_dict", "=", "dict", "(", ")", "\n", "", "", "time_scale_list", "=", "sorted", "(", "map", "(", "int", ",", "set", "(", "self", ".", "slider_timescales", ")", ".", "union", "(", "[", "self", ".", "dt", ",", "self", ".", "Dt", "]", ")", ")", ")", "\n", "for", "time_scale", "in", "tqdm", ".", "tqdm", "(", "time_scale_list", ",", "desc", "=", "'Generating Slider data'", ")", ":", "\n", "            ", "if", "update", "and", "time_scale", "in", "self", ".", "_drift_slider", ".", "keys", "(", ")", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "vector", ":", "\n", "                ", "dd", "=", "self", ".", "_vector_drift_diff", "(", "\n", "Mx", ",", "\n", "My", ",", "\n", "inc_x", "=", "self", ".", "inc_x", ",", "\n", "inc_y", "=", "self", ".", "inc_y", ",", "\n", "t_int", "=", "self", ".", "t_int", ",", "\n", "Dt", "=", "time_scale", ",", "\n", "dt", "=", "time_scale", ",", "\n", "fast_mode", "=", "True", ",", "\n", "drift_threshold", "=", "None", ",", "\n", "drift_degree", "=", "None", ",", "\n", "drift_alpha", "=", "None", ",", "\n", "diff_threshold", "=", "None", ",", "\n", "diff_degree", "=", "None", ",", "\n", "diff_alpha", "=", "None", "\n", ")", "\n", "#avgdriftX = dd.avgdriftX", "\n", "#avgdriftY = dd.avgdriftY", "\n", "#avgdiffX = dd.avgdiffX", "\n", "#avgdiffY = dd.avgdiffY", "\n", "#avgdiffXY = dd.avgdiffXY", "\n", "#avgdiffYX = dd.avgdiffYX", "\n", "#op_x = dd.op_x", "\n", "#op_y = dd.op_y", "\n", "self", ".", "F1", ",", "self", ".", "F2", ",", "self", ".", "G11", ",", "self", ".", "G22", ",", "self", ".", "G12", ",", "self", ".", "G21", "=", "[", "None", "]", "*", "6", "\n", "#if time_scale == 1:", "\n", "#    self._driftX_ = dd.driftX", "\n", "#    self._driftY_ = dd.driftY", "\n", "#    self._diffusionX_ = dd.diffusionX", "\n", "#    self._diffusionY_ = dd.diffusionY", "\n", "#    self._diffusionXY_ = dd.diffusionXY", "\n", "#    self._diffusionYX_ = dd.diffusionYX", "\n", "#_, _, _, _, _, _, \\", "\n", "#avgdriftX, avgdriftY, avgdiffX, avgdiffY, avgdiffXY, avgdiffYX, op_x, op_y = \\", "\n", "#    self._vector_drift_diff(Mx,", "\n", "#                            My,", "\n", "#                            inc_x=self.inc_x,", "\n", "#                            inc_y=self.inc_y,", "\n", "#                            t_int=self.t_int,", "\n", "#                            Dt=time_scale,", "\n", "#                            dt=time_scale)", "\n", "drift_data", "=", "[", "dd", ".", "avgdriftX", "/", "self", ".", "n_trials", ",", "dd", ".", "avgdriftY", "/", "self", ".", "n_trials", ",", "dd", ".", "op_x", ",", "dd", ".", "op_y", "]", "\n", "diff_data", "=", "[", "dd", ".", "avgdiffX", "/", "self", ".", "n_trials", ",", "dd", ".", "avgdiffY", "/", "self", ".", "n_trials", ",", "dd", ".", "op_x", ",", "dd", ".", "op_y", "]", "\n", "cross_diff_data", "=", "[", "dd", ".", "avgdiffXY", "/", "self", ".", "n_trials", ",", "dd", ".", "avgdiffYX", "/", "self", ".", "n_trials", ",", "dd", ".", "op_x", ",", "dd", ".", "op_y", "]", "\n", "", "else", ":", "\n", "                ", "dd", "=", "self", ".", "_drift_and_diffusion", "(", "self", ".", "_X", ",", "\n", "self", ".", "t_int", ",", "\n", "Dt", "=", "time_scale", ",", "\n", "dt", "=", "time_scale", ",", "\n", "inc", "=", "self", ".", "inc", ",", "\n", "fast_mode", "=", "True", ",", "\n", "drift_threshold", "=", "None", ",", "\n", "drift_degree", "=", "None", ",", "\n", "drift_alpha", "=", "None", ",", "\n", "diff_threshold", "=", "None", ",", "\n", "diff_degree", "=", "None", ",", "\n", "diff_alpha", "=", "None", ")", "\n", "\n", "#_, _, avgdiff, avgdrift, op, drift_ebar, diff_ebar, drift_num, diff_num, _, _ \\", "\n", "#    = self._drift_and_diffusion(Mx, t_int=self.t_int, Dt=time_scale, dt=time_scale, inc=self.inc)", "\n", "self", ".", "F", ",", "self", ".", "G", "=", "None", ",", "None", "\n", "drift_data", "=", "[", "dd", ".", "avgdrift", "/", "self", ".", "n_trials", ",", "dd", ".", "op", "]", "\n", "diff_data", "=", "[", "dd", ".", "avgdiff", "/", "self", ".", "n_trials", ",", "dd", ".", "op", "]", "\n", "ebar_drift_dict", "[", "time_scale", "]", "=", "dd", ".", "drift_ebar", "\n", "ebar_diff_dict", "[", "time_scale", "]", "=", "dd", ".", "diff_ebar", "\n", "num_drift_dict", "[", "time_scale", "]", "=", "dd", ".", "drift_num", "\n", "num_diff_dict", "[", "time_scale", "]", "=", "dd", ".", "diff_num", "\n", "\n", "", "drift_data_dict", "[", "time_scale", "]", "=", "drift_data", "\n", "diff_data_dict", "[", "time_scale", "]", "=", "diff_data", "\n", "\n", "if", "self", ".", "vector", ":", "\n", "                ", "cross_diff_dict", "[", "time_scale", "]", "=", "cross_diff_data", "\n", "\n", "", "", "if", "self", ".", "vector", ":", "\n", "            ", "return", "drift_data_dict", ",", "diff_data_dict", ",", "cross_diff_dict", "\n", "", "self", ".", "_avaiable_timescales", "=", "time_scale_list", "\n", "return", "drift_data_dict", ",", "diff_data_dict", ",", "ebar_drift_dict", ",", "ebar_diff_dict", ",", "num_drift_dict", ",", "num_diff_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.characterize.Main.__call__": [[217, 348], ["characterize.Main.__dict__.update", "characterize.Main._preprocess", "pydaddy.daddy.Daddy", "dict", "dict", "dict", "dict", "dict", "dict", "characterize.Main._drift_and_diffusion", "dict", "dict", "dict", "characterize.Main._vector_drift_diff"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._preprocess", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._drift_and_diffusion", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._vector_drift_diff"], ["", "def", "__call__", "(", "self", ",", "data", ",", "t", "=", "1", ",", "Dt", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "# if t is None and t_int is None:", "\n", "#\traise InputError(\"Either 't' or 't_int' must be given, both cannot be None\")", "\n", "self", ".", "_t", "=", "t", "\n", "\"\"\"\n        if len(data) == 1:\n            self._X = np.array(data[0])\n            self._M_square = np.array(data[0])\n            self.vector = False\n        elif len(data) == 2:\n            self._Mx, self._My = np.array(data[0]), np.array(data[1])\n            self._M_square = self._Mx**2 + self._My**2\n            self._X = self._Mx.copy()\n            self.vector = True\n        else:\n            raise InputError('Characterize(data=[Mx,My],...)',\n                             'data input must be a list of length 1 or 2!')\n\n        #if t_int is None: self.t_int = self._timestep(t)\n        if not hasattr(t, \"__len__\"):\n            self.t_int = t\n        else:\n            if len(t) != len(self._M_square):\n                raise InputError(\n                    \"len(Mx^2 + My^2) == len(t)\",\n                    \"TimeSeries and time-stamps must be of same length\")\n            self.t_int = self._timestep(t)\n\n        #print('opt_dt')\n        \"\"\"", "\n", "self", ".", "_preprocess", "(", ")", "\n", "\"\"\"\n        self.dt_ = self._optimium_timescale(self._X,\n                                           self._M_square,\n                                           t_int=self.t_int,\n                                           Dt=Dt,\n                                           max_order=self.max_order,\n                                           t_lag=self.t_lag,\n                                           inc=self.inc_x)\n        \"\"\"", "\n", "if", "not", "self", ".", "vector", ":", "\n", "#if not self._is_valid_slider_timescale_list(self.slider_timescales):", "\n", "            ", "self", ".", "_drift_slider", "=", "dict", "(", ")", "\n", "self", ".", "_diff_slider", "=", "dict", "(", ")", "\n", "self", ".", "_scalar_drift_ebars", "=", "dict", "(", ")", "\n", "self", ".", "_scalar_diff_ebars", "=", "dict", "(", ")", "\n", "self", ".", "_scalar_drift_nums", "=", "dict", "(", ")", "\n", "self", ".", "_scalar_diff_nums", "=", "dict", "(", ")", "\n", "\n", "self", ".", "_diffusion_", ",", "self", ".", "_drift_", ",", "self", ".", "_avgdiff_", ",", "self", ".", "_avgdrift_", ",", "self", ".", "_op_", ",", "self", ".", "_drift_ebar", ",", "self", ".", "_diff_ebar", ",", "self", ".", "_drift_num", ",", "self", ".", "_diff_num", ",", "F", ",", "G", "=", "self", ".", "_drift_and_diffusion", "(", "self", ".", "_X", ",", "\n", "self", ".", "t_int", ",", "\n", "Dt", "=", "self", ".", "Dt", ",", "\n", "dt", "=", "self", ".", "dt", ",", "\n", "inc", "=", "self", ".", "inc", ",", "\n", "fast_mode", "=", "self", ".", "fast_mode", ",", "\n", "drift_threshold", "=", "self", ".", "drift_threshold", ",", "\n", "drift_degree", "=", "self", ".", "drift_degree", ",", "\n", "drift_alpha", "=", "self", ".", "drift_alpha", ",", "\n", "diff_threshold", "=", "self", ".", "diff_threshold", ",", "\n", "diff_degree", "=", "self", ".", "diff_degree", ",", "\n", "diff_alpha", "=", "self", ".", "diff_alpha", ")", "\n", "self", ".", "_avgdiff_", "=", "self", ".", "_avgdiff_", "/", "self", ".", "n_trials", "\n", "self", ".", "_avgdrift_", "=", "self", ".", "_avgdrift_", "/", "self", ".", "n_trials", "\n", "self", ".", "_drift_slider", "[", "self", ".", "Dt", "]", "=", "[", "self", ".", "_avgdrift_", ",", "self", ".", "_op_", "]", "\n", "self", ".", "_diff_slider", "[", "self", ".", "dt", "]", "=", "[", "self", ".", "_avgdiff_", ",", "self", ".", "_op_", "]", "\n", "self", ".", "_scalar_drift_ebars", "[", "self", ".", "Dt", "]", "=", "self", ".", "_drift_ebar", "\n", "self", ".", "_scalar_diff_ebars", "[", "self", ".", "dt", "]", "=", "self", ".", "_diff_ebar", "\n", "self", ".", "_scalar_drift_nums", "[", "self", ".", "dt", "]", "=", "self", ".", "_drift_num", "\n", "self", ".", "_scalar_diff_nums", "[", "self", ".", "dt", "]", "=", "self", ".", "_diff_num", "\n", "self", ".", "F", "=", "F", "\n", "self", ".", "G", "=", "G", "\n", "#else:", "\n", "#    # FIXME self._drift_ and self._diffusion_ variable need to be set here.", "\n", "#    self._drift_slider, self._diff_slider, self._scalar_drift_ebars, self._scalar_diff_ebars, \\", "\n", "#    self._scalar_drift_nums, self._scalar_diff_nums = self._slider_data(self._X, None)", "\n", "#    self._avgdrift_, self._op_ = self._drift_slider[self.Dt]", "\n", "#    self._avgdiff_ = self._diff_slider[self.dt][0]", "\n", "#    self._drift_ebar = self._scalar_drift_ebars[self.Dt]", "\n", "#    self._diff_ebar = self._scalar_diff_ebars[self.dt]", "\n", "#    self._drift_num = self._scalar_drift_nums[self.Dt]", "\n", "#    self._diff_num = self._scalar_diff_nums[self.Dt]", "\n", "self", ".", "_cross_diff_slider", "=", "None", "\n", "\n", "", "else", ":", "\n", "#if not self._is_valid_slider_timescale_list(self.slider_timescales):", "\n", "            ", "self", ".", "_drift_slider", "=", "dict", "(", ")", "\n", "self", ".", "_diff_slider", "=", "dict", "(", ")", "\n", "self", ".", "_cross_diff_slider", "=", "dict", "(", ")", "\n", "self", ".", "_driftX_", ",", "self", ".", "_driftY_", ",", "self", ".", "_diffusionX_", ",", "self", ".", "_diffusionY_", ",", "self", ".", "_diffusionXY_", ",", "self", ".", "_diffusionYX_", ",", "self", ".", "_avgdriftX_", ",", "self", ".", "_avgdriftY_", ",", "self", ".", "_avgdiffX_", ",", "self", ".", "_avgdiffY_", ",", "self", ".", "_avgdiffXY_", ",", "self", ".", "_avgdiffYX_", ",", "self", ".", "_op_x_", ",", "self", ".", "_op_y_", ",", "self", ".", "F1", ",", "self", ".", "F2", ",", "self", ".", "G11", ",", "self", ".", "G22", ",", "self", ".", "G12", ",", "self", ".", "G21", "=", "self", ".", "_vector_drift_diff", "(", "\n", "self", ".", "_Mx", ",", "\n", "self", ".", "_My", ",", "\n", "inc_x", "=", "self", ".", "inc_x", ",", "\n", "inc_y", "=", "self", ".", "inc_y", ",", "\n", "t_int", "=", "self", ".", "t_int", ",", "\n", "Dt", "=", "self", ".", "Dt", ",", "\n", "dt", "=", "self", ".", "dt", ",", "\n", "fast_mode", "=", "self", ".", "fast_mode", ",", "\n", "drift_threshold", "=", "self", ".", "drift_threshold", ",", "\n", "drift_degree", "=", "self", ".", "drift_degree", ",", "\n", "drift_alpha", "=", "self", ".", "drift_alpha", ",", "\n", "diff_threshold", "=", "self", ".", "diff_threshold", ",", "\n", "diff_degree", "=", "self", ".", "diff_degree", ",", "\n", "diff_alpha", "=", "self", ".", "diff_alpha", "\n", ")", "\n", "self", ".", "_avgdriftX_", "=", "self", ".", "_avgdriftX_", "/", "self", ".", "n_trials", "\n", "self", ".", "_avgdriftY_", "=", "self", ".", "_avgdriftY_", "/", "self", ".", "n_trials", "\n", "self", ".", "_avgdiffX_", "=", "self", ".", "_avgdiffX_", "/", "self", ".", "n_trials", "\n", "self", ".", "_avgdiffY_", "=", "self", ".", "_avgdiffY_", "/", "self", ".", "n_trials", "\n", "self", ".", "_avgdiffXY_", "=", "self", ".", "_avgdiffXY_", "/", "self", ".", "n_trials", "\n", "self", ".", "_drift_slider", "[", "self", ".", "Dt", "]", "=", "[", "self", ".", "_avgdriftX_", ",", "self", ".", "_avgdriftY_", ",", "self", ".", "_op_x_", ",", "self", ".", "_op_y_", "]", "\n", "self", ".", "_diff_slider", "[", "self", ".", "dt", "]", "=", "[", "self", ".", "_avgdiffX_", ",", "self", ".", "_avgdiffY_", ",", "self", ".", "_op_x_", ",", "self", ".", "_op_y_", "]", "\n", "self", ".", "_cross_diff_slider", "[", "self", ".", "dt", "]", "=", "[", "self", ".", "_avgdiffXY_", ",", "self", ".", "_avgdiffYX_", ",", "self", ".", "_op_x_", ",", "self", ".", "_op_y_", "]", "\n", "#else:", "\n", "#    # FIXME self._driftX_, etc. need to be set here.", "\n", "#    self._drift_slider, self._diff_slider, self._cross_diff_slider = self._slider_data(self._Mx, self._My)", "\n", "#    self._avgdriftX_, self._avgdriftY_, self._op_x_, self._op_y_ = self._drift_slider[self.Dt]", "\n", "#    self._avgdiffX_, self._avgdiffY_ = self._diff_slider[self.dt][:2]", "\n", "#    self._avgdiffXY_, self._avgdiffYX_ = self._cross_diff_slider[self.dt][:2]", "\n", "\n", "# inc = self.inc_x if self.vector else self.inc", "\n", "# self.gaussian_noise, self._noise, self._kl_dist, self.k, self.l_lim, self.h_lim, self._noise_correlation = self._noise_analysis(", "\n", "#\tself._X, self.Dt, self.dt, self.t_int, inc=inc, point=0)", "\n", "# X, Dt, dt, t_int, inc=0.01, point=0,", "\n", "", "return", "Daddy", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.characterize.Characterize.__new__": [[393, 437], ["characterize.Main", "Main."], "methods", ["None"], ["def", "__new__", "(", "\n", "cls", ",", "\n", "data", ",", "\n", "t", "=", "1.0", ",", "\n", "Dt", "=", "1", ",", "\n", "dt", "=", "1", ",", "\n", "bins", "=", "None", ",", "\n", "inc", "=", "None", ",", "\n", "inc_x", "=", "None", ",", "\n", "inc_y", "=", "None", ",", "\n", "#slider_timescales=None,", "\n", "n_trials", "=", "1", ",", "\n", "show_summary", "=", "True", ",", "\n", "#drift_threshold=None,", "\n", "#diff_threshold=None,", "\n", "#drift_degree=5,", "\n", "#diff_degree=5,", "\n", "#drift_alpha=0,", "\n", "#diff_alpha=0,", "\n", "#fit_functions=False,", "\n", "**", "kwargs", ")", ":", "\n", "        ", "ddsde", "=", "Main", "(", "\n", "data", "=", "data", ",", "\n", "t", "=", "t", ",", "\n", "Dt", "=", "Dt", ",", "\n", "dt", "=", "dt", ",", "\n", "bins", "=", "bins", ",", "\n", "inc", "=", "inc", ",", "\n", "inc_x", "=", "inc_x", ",", "\n", "inc_y", "=", "inc_y", ",", "\n", "slider_timescales", "=", "None", ",", "\n", "n_trials", "=", "n_trials", ",", "\n", "show_summary", "=", "show_summary", ",", "\n", "drift_threshold", "=", "None", ",", "\n", "diff_threshold", "=", "None", ",", "\n", "drift_degree", "=", "None", ",", "\n", "diff_degree", "=", "None", ",", "\n", "drift_alpha", "=", "None", ",", "\n", "diff_alpha", "=", "None", ",", "\n", "#fast_mode=not fit_functions,", "\n", "fast_mode", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "\n", "return", "ddsde", "(", "data", "=", "data", ",", "t", "=", "t", ",", "Dt", "=", "Dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.characterize.load_sample_data": [[439, 468], ["pkg_resources.resource_stream", "pkg_resources.resource_stream.close", "numpy.loadtxt", "numpy.loadtxt"], "function", ["None"], ["", "", "def", "load_sample_data", "(", "data_path", ")", ":", "\n", "    ", "r\"\"\"\n    Load the sample distrubuted data\n\n    data\n    \u251c\u2500\u2500 fish_data\n    \u2502   \u2514\u2500\u2500 ectropus.csv\n    \u2514\u2500\u2500 model_data\n        \u251c\u2500\u2500 scalar\n        \u2502   \u251c\u2500\u2500 pairwise.csv\n        \u2502   \u2514\u2500\u2500 ternary.csv\n        \u2514\u2500\u2500 vector\n            \u251c\u2500\u2500 pairwise.csv\n            \u2514\u2500\u2500 ternary.csv\n\n\n    Each data file in pairwise, ternary and extras have two columns;\n    first column is the timeseries data x, and the second one is the time stamp\n\n    vector_data.csv also has two columns but contains the vector data x1 and x2 with missing time stamp. Use t_int=0.12.\n    \"\"\"", "\n", "stream", "=", "pkg_resources", ".", "resource_stream", "(", "'pydaddy'", ",", "data_path", ")", "\n", "try", ":", "\n", "        ", "res", "=", "np", ".", "loadtxt", "(", "stream", ",", "delimiter", "=", "','", ")", "\n", "", "except", ":", "\n", "        ", "res", "=", "np", ".", "loadtxt", "(", "stream", ")", "\n", "\n", "", "stream", ".", "close", "(", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.characterize.load_sample_dataset": [[470, 515], ["data_dict.keys", "print", "pydaddy.preprocessing.InputError", "characterize.load_sample_data", "characterize.load_sample_data", "list", "data_dict.keys"], "function", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.tests.tests.load_sample_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.tests.tests.load_sample_data"], ["", "def", "load_sample_dataset", "(", "name", ")", ":", "\n", "    ", "r\"\"\"\n    Load sample data set provided.\n\n    Available data sets:\n\n    'fish-data-etroplus'\n\n    'model-data-scalar-pairwise'\n\n    'model-data-scalar-ternary'\n\n    'model-data-vector-pairwise'\n\n    'model-data-vector-ternary'\n\n    Parameters\n    ----------\n    name : str\n        name of the data set\n\n    Returns\n    -------\n    data : list\n        timeseries data\n    t : float, array\n        timescale\n    \"\"\"", "\n", "\n", "data_dict", "=", "{", "\n", "'fish-data-etroplus'", ":", "'data/fish_data/ectropus.csv'", ",", "\n", "'model-data-scalar-pairwise'", ":", "'data/model_data/scalar/pairwise.csv'", ",", "\n", "'model-data-scalar-ternary'", ":", "'data/model_data/scalar/ternary.csv'", ",", "\n", "'model-data-vector-pairwise'", ":", "'data/model_data/vector/pairwise.csv'", ",", "\n", "'model-data-vector-ternary'", ":", "'data/model_data/vector/ternary.csv'", "\n", "}", "\n", "if", "name", "not", "in", "data_dict", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "'Invalid data set name\\nAvaiable data set\\n{}'", ".", "format", "(", "list", "(", "data_dict", ".", "keys", "(", ")", ")", ")", ")", "\n", "raise", "InputError", "(", "''", ",", "'Invalid data set name'", ")", "\n", "\n", "", "if", "'scalar'", "in", "name", ":", "\n", "        ", "M", ",", "t", "=", "load_sample_data", "(", "data_dict", "[", "name", "]", ")", ".", "T", "\n", "return", "[", "M", "]", ",", "t", "\n", "", "Mx", ",", "My", "=", "load_sample_data", "(", "data_dict", "[", "name", "]", ")", ".", "T", "\n", "return", "[", "Mx", ",", "My", "]", ",", "0.12", "\n", "", ""]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics.__init__": [[19, 24], ["metrics.Metrics.__dict__.update"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tUtility function module\n\t\t\"\"\"", "\n", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._rms": [[25, 41], ["numpy.array", "numpy.array", "numpy.sqrt().mean", "numpy.sqrt().mean", "numpy.sqrt", "numpy.sqrt", "numpy.square", "numpy.square", "numpy.array.mean"], "methods", ["None"], ["", "def", "_rms", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tCalculates root mean square error of x\n\n\t\tParameters\n\t\t----------\n\t\tx : array\n\t\t\tinput \n\n\t\tReturns\n\t\t-------\n\t\trms : float\n\t\t\trms error\n\t\t\"\"\"", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "return", "np", ".", "sqrt", "(", "np", ".", "square", "(", "x", "-", "x", ".", "mean", "(", ")", ")", ")", ".", "mean", "(", ")", "\n", "#return np.nanmean(np.sqrt(np.square(x2 - x1)))", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._R2": [[43, 70], ["metrics.Metrics._R2_adj", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.square", "numpy.square", "numpy.square", "numpy.square", "poly", "numpy.nanmean", "numpy.nanmean"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._R2_adj"], ["", "def", "_R2", "(", "self", ",", "data", ",", "op", ",", "poly", ",", "k", ",", "adj", "=", "False", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tR-square value between the predicted and expected values\n\n\t\tParameters\n\t\t----------\n\t\tdata : array\n\t\t\tdepended variable values, expected values, data\n\t\top : array\n\t\t\tindependent variable values\n\t\tpoly : numpy.poly1d\n\t\t\tnumpy polynomial fitted object\n\t\tk : int\n\t\t\tdegree of the polynomial poly\n\t\tadj : bool\n\t\t\tif True, use R2-adjusted method instead of R2\n\n\t\tReturns\n\t\t-------\n\t\tR2 : float\n\t\t\tR2 or R2-adjusted depending upon 'adj' value\n\t\t\"\"\"", "\n", "if", "adj", ":", "\n", "\t\t\t", "return", "self", ".", "_R2_adj", "(", "data", ",", "op", ",", "poly", ",", "k", ")", "\n", "", "return", "1", "-", "(", "\n", "np", ".", "nanmean", "(", "np", ".", "square", "(", "data", "-", "poly", "(", "op", ")", ")", ")", "\n", "/", "np", ".", "nanmean", "(", "np", ".", "square", "(", "data", "-", "np", ".", "nanmean", "(", "data", ")", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._R2_adj": [[72, 98], ["len", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.square", "numpy.square", "numpy.square", "numpy.square", "poly", "numpy.nanmean", "numpy.nanmean"], "methods", ["None"], ["", "def", "_R2_adj", "(", "self", ",", "data", ",", "op", ",", "poly", ",", "k", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet R-squared adjusted parameter between data and fitted polynomial\n\n\t\tParameters\n\t\t----------\n\t\tdata : array\n\t\t\tdepended variable values, expected values, data\n\t\top : array\n\t\t\tindependent variable for which the data is defined\n\t\tpoly : numpy.poly1d\n\t\t\tnumpy polynomial fitted object\n\t\tk : int\n\t\t\tdegree of polynomial\n\n\t\tReturns\n\t\t-------\n\t\tR2-adjusted : folat\n\t\t\tR2 adjusted parameter between data and fitted polynomial\n\t\t\"\"\"", "\n", "r2", "=", "1", "-", "(", "\n", "np", ".", "nanmean", "(", "np", ".", "square", "(", "data", "-", "poly", "(", "op", ")", ")", ")", "\n", "/", "np", ".", "nanmean", "(", "np", ".", "square", "(", "data", "-", "np", ".", "nanmean", "(", "data", ")", ")", ")", "\n", ")", "\n", "n", "=", "len", "(", "op", ")", "\n", "return", "1", "-", "(", "(", "(", "1", "-", "r2", ")", "*", "(", "n", "-", "1", ")", ")", "/", "(", "n", "-", "k", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._fit_poly": [[99, 128], ["numpy.argwhere", "numpy.argwhere", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.polyfit", "numpy.polyfit", "numpy.isnan", "numpy.isnan", "numpy.poly1d", "numpy.poly1d"], "methods", ["None"], ["", "def", "_fit_poly", "(", "self", ",", "x", ",", "y", ",", "deg", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tFits polynomial of degree `deg`\n\n\t\tParameters\n\t\t----------\n\t\tx : array\n\t\t\tindependent variable\n\t\ty_: array\n\t\t\tdepended variable\n\t\tdeg : int\n\t\t\tdegree of the polynomial\n\n\t\tReturns\n\t\t-------\n\t\tpoly : numpy.poly1d\n\t\t\tpolynomial object\n\t\tx : array\n\t\t\tvalues of x for where y in defined\n\n\t\tNotes\n\t\t-----\n\t\tThe nan values in the input x and y (if any) will be ignored.\n\t\t\"\"\"", "\n", "nan_idx", "=", "np", ".", "argwhere", "(", "np", ".", "isnan", "(", "y", ")", ")", "\n", "x_", "=", "np", ".", "delete", "(", "x", ",", "nan_idx", ")", "\n", "y_", "=", "np", ".", "delete", "(", "y", ",", "nan_idx", ")", "\n", "z", "=", "np", ".", "polyfit", "(", "x_", ",", "y_", ",", "deg", ")", "\n", "return", "np", ".", "poly1d", "(", "z", ")", ",", "x_", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._fit_poly_sparse": [[129, 161], ["numpy.argwhere", "numpy.argwhere", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.zeros", "numpy.zeros", "range", "numpy.zeros", "numpy.zeros", "numpy.ones_like", "numpy.ones_like", "range", "numpy.isnan", "numpy.isnan", "sklearn.linear_model.ridge_regression", "numpy.poly1d", "numpy.poly1d", "numpy.sum", "numpy.sum", "warnings.warn", "numpy.abs", "numpy.abs", "numpy.flipud", "numpy.flipud"], "methods", ["None"], ["", "def", "_fit_poly_sparse", "(", "self", ",", "x", ",", "y", ",", "deg", ",", "threshold", "=", "0.05", ",", "alpha", "=", "0", ",", "weights", "=", "None", ")", ":", "\n", "\t\t", "\"\"\" Fit a polynomial using sparse regression using STLSQ (Sequentially thresholded least-squares)\n\t\tParameters:\n\t\t\tx, y: (np.array) Independent and dependent variables\n\t\t\tdeg: (int) Maximum degree of the polynomial\n\t\t\tthreshold: (float) Threshold for sparse fit.\n\t\t\"\"\"", "\n", "\n", "nan_idx", "=", "np", ".", "argwhere", "(", "np", ".", "isnan", "(", "y", ")", ")", "\n", "x_", "=", "np", ".", "delete", "(", "x", ",", "nan_idx", ")", "\n", "y_", "=", "np", ".", "delete", "(", "y", ",", "nan_idx", ")", "\n", "weights", "=", "np", ".", "delete", "(", "weights", ",", "nan_idx", ")", "\n", "\n", "maxiter", "=", "deg", "\n", "\n", "dictionary", "=", "np", ".", "zeros", "(", "(", "x_", ".", "shape", "[", "0", "]", ",", "deg", "+", "1", ")", ")", "\n", "for", "d", "in", "range", "(", "deg", "+", "1", ")", ":", "\n", "\t\t\t", "dictionary", "[", ":", ",", "d", "]", "=", "x_", "**", "d", "\n", "\n", "", "coeffs", "=", "np", ".", "zeros", "(", "deg", "+", "1", ")", "\n", "keep", "=", "np", ".", "ones_like", "(", "coeffs", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "it", "in", "range", "(", "maxiter", ")", ":", "\n", "\t\t\t", "if", "np", ".", "sum", "(", "keep", ")", "==", "0", ":", "\n", "\t\t\t\t", "warnings", ".", "warn", "(", "'Sparsity threshold is too big, eliminated all parameters.'", ")", "\n", "break", "\n", "# coeffs_, _, _, _ = np.linalg.lstsq(dictionary[:, keep], y_)", "\n", "", "coeffs_", "=", "ridge_regression", "(", "dictionary", "[", ":", ",", "keep", "]", ",", "y_", ",", "alpha", "=", "alpha", ",", "sample_weight", "=", "weights", ")", "\n", "coeffs", "[", "keep", "]", "=", "coeffs_", "\n", "keep", "=", "(", "np", ".", "abs", "(", "coeffs", ")", ">", "threshold", ")", "\n", "coeffs", "[", "~", "keep", "]", "=", "0", "\n", "\n", "", "return", "np", ".", "poly1d", "(", "np", ".", "flipud", "(", "coeffs", ")", ")", ",", "x_", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._nan_helper": [[162, 176], ["numpy.isnan", "numpy.isnan", "z.nonzero"], "methods", ["None"], ["", "def", "_nan_helper", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tHelper function used to handle missing data\n\n\t\tParameters\n\t\t----------\n\t\tx : array\n\t\t\tdata\n\n\t\tReturns\n\t\t-------\n\t\tcallable function\n\t\t\"\"\"", "\n", "return", "np", ".", "isnan", "(", "x", ")", ",", "lambda", "z", ":", "z", ".", "nonzero", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._interpolate_missing": [[177, 200], ["metrics.Metrics._nan_helper", "numpy.interp", "numpy.interp", "y.copy", "x", "x"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._nan_helper"], ["", "def", "_interpolate_missing", "(", "self", ",", "y", ",", "copy", "=", "True", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tInterpolate missing data\n\n\t\tParameters\n\t\t----------\n\t\ty : array\n\t\t\tdata with missing (nan) values\n\t\tcopy : bool, optional(default=True)\n\t\t\tif True makes a copy of the input array object\n\n\t\tReturns\n\t\t-------\n\t\ty : array\n\t\t\tinterpolated data\n\t\t\"\"\"", "\n", "if", "copy", ":", "\n", "\t\t\t", "k", "=", "y", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "k", "=", "y", "\n", "", "nans", ",", "x", "=", "self", ".", "_nan_helper", "(", "k", ")", "\n", "k", "[", "nans", "]", "=", "np", ".", "interp", "(", "x", "(", "nans", ")", ",", "x", "(", "~", "nans", ")", ",", "k", "[", "~", "nans", "]", ")", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._kl_divergence": [[201, 220], ["numpy.nansum", "numpy.nansum", "numpy.log", "numpy.log", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "def", "_kl_divergence", "(", "self", ",", "p", ",", "q", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tCalculates KL divergence between two probablity distrubitions p and q\n\n\t\tParameters\n\t\t----------\n\t\tp : array\n\t\t\tdistrubution p\n\t\tq : array\n\t\t\tdistrubution q\n\n\t\tReturns\n\t\t-------\n\t\tkl_divergence : float\n\t\t\tkl divergence between p and q\n\t\t\"\"\"", "\n", "k", "=", "p", "*", "np", ".", "log", "(", "np", ".", "abs", "(", "(", "(", "p", "+", "1e-100", ")", "/", "(", "q", "+", "1e-100", ")", ")", ")", ")", "\n", "# k[np.where(np.isnan(k))] = 0", "\n", "return", "np", ".", "nansum", "(", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._divergence": [[221, 243], ["numpy.histogram", "numpy.histogram", "numpy.histogram", "numpy.histogram", "scipy.spatial.distance.jensenshannon"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.histogram", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.histogram", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.histogram", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.histogram"], ["", "def", "_divergence", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet the divergence between two timeseries data,\n\t\tthe divergence returned here is defined as follows:\n\t\tdivergence = 0.5*(KL_divergence(p,q) + KL_divergence(q,p))\n\n\t\tThe probablity density of a and b input timeseries is calculated\n\t\tbefore finding the divergence.\n\n\t\tParameters\n\t\t----------\n\t\ta : array\n\t\t\tobserved timeseries data\n\t\tb : array\n\t\t\tsimulated timeseries data\n\t\tReturns\n\t\t-------\n\t\tdivergence : float\n\t\t\"\"\"", "\n", "a", ",", "bins_a", "=", "np", ".", "histogram", "(", "a", ",", "bins", "=", "100", ",", "density", "=", "True", ")", "\n", "b", ",", "bins_b", "=", "np", ".", "histogram", "(", "b", ",", "bins", "=", "bins_a", ",", "density", "=", "True", ")", "\n", "return", "jensenshannon", "(", "a", ",", "b", ")", "\n", "#a_b = np.sum(np.where((a != 0)&(b != 0), a * np.log(a / b), 0))", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._fit_plane": [[247, 292], ["range", "Plane", "numpy.column_stack", "numpy.column_stack", "scipy.linalg.lstsq", "numpy.isnan", "numpy.isnan", "numpy.isnan", "numpy.isnan", "numpy.isnan", "numpy.isnan", "numpy.ones", "numpy.ones", "x.flatten", "y.flatten", "print", "print", "print"], "methods", ["None"], ["", "def", "_fit_plane", "(", "self", ",", "x", ",", "y", ",", "z", ",", "order", "=", "2", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tFits n-th order plane to data in the form z = f(x,y)\n\t\twhere f(x,y) the best fit equation of plane for the data\n\t\tcomputed using least square method.\n\n\t\tArgs\n\t\t----\n\t\tx : 2D array\n\t\t\torder parameter x\n\t\ty : 2D array\n\t\t\torder parameter y\n\t\tz : 2D array\n\t\t\tderrived drift or diffusion data\n\t\torder : int\n\t\t\torder of the 2D plane to fit\n\n\t\tReturns\n\t\t-------\n\t\tpydaddy.metrics.Plane\n\t\t\tA callable object takes in x and y as inputs and\n\t\t\treturns z = f(x,y), where f(x,y) is the fitted function\n\t\t\tof the plane.\n\t\t\"\"\"", "\n", "x", "=", "x", "[", "~", "np", ".", "isnan", "(", "z", ")", "]", "\n", "y", "=", "y", "[", "~", "np", ".", "isnan", "(", "z", ")", "]", "\n", "z", "=", "z", "[", "~", "np", ".", "isnan", "(", "z", ")", "]", "\n", "\n", "A", "=", "np", ".", "c_", "[", "np", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "x", ".", "flatten", "(", ")", ",", "y", ".", "flatten", "(", ")", "]", "\n", "n", "=", "order", "\n", "\n", "for", "k", "in", "range", "(", "n", "+", "1", ")", ":", "\n", "\t\t\t", "A", "=", "np", ".", "column_stack", "(", "(", "A", ",", "x", "**", "(", "n", "-", "k", ")", "*", "y", "**", "k", ")", ")", "\n", "\n", "", "try", ":", "\n", "\t\t\t", "C", ",", "_", ",", "_", ",", "_", "=", "scipy", ".", "linalg", ".", "lstsq", "(", "A", ",", "z", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t\t", "if", "e", ".", "__class__", ".", "__name__", "==", "'ValueError'", ":", "\n", "\t\t\t\t", "print", "(", "\"Unable to fit plane, incompatable parameters\"", ")", "\n", "", "elif", "e", ".", "__class__", ".", "__name__", "==", "'LinAlgError'", ":", "\n", "\t\t\t\t", "print", "(", "\"Unable to fit plane, computation doesnot converge\"", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "print", "(", "\"Unable to fit plane, {}\"", ".", "format", "(", "e", ".", "__class__", ".", "__name__", ")", ")", "\n", "", "return", "None", "\n", "", "return", "Plane", "(", "coefficients", "=", "C", ",", "order", "=", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._make_directory": [[293, 319], ["metrics.Metrics._make_directory", "type", "p.split.split.split", "len", "os.path.join", "os.mkdir", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._make_directory"], ["", "def", "_make_directory", "(", "self", ",", "p", ",", "i", "=", "1", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tRecursively create directorie for a given path\n\n\t\tParameters\n\t\t----------\n\t\tpath : str\n\t\t\tdestination path\n\n\t\tReturns\n\t\t-------\n\t\tpath : str\n\t\t\tpath of created directory, same as input path.\n\t\t\"\"\"", "\n", "if", "type", "(", "p", ")", "!=", "list", ":", "\n", "\t\t\t", "p", "=", "p", ".", "split", "(", "\"/\"", ")", "\n", "", "if", "p", "[", "0", "]", "==", "''", ":", "\n", "\t\t\t", "p", "[", "0", "]", "=", "'/'", "\n", "", "if", "i", ">", "len", "(", "p", ")", ":", "\n", "\t\t\t", "return", "os", ".", "path", ".", "join", "(", "*", "p", ")", "\n", "", "else", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "*", "p", "[", "0", ":", "i", "]", ")", ")", "\n", "", "except", "(", "FileExistsError", ",", "FileNotFoundError", ")", ":", "\n", "\t\t\t\t", "pass", "\n", "", "", "return", "self", ".", "_make_directory", "(", "p", ",", "i", "=", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_data_range": [[320, 325], ["round", "round", "numpy.nanmin", "numpy.nanmin", "numpy.nanmax", "numpy.nanmax"], "methods", ["None"], ["", "def", "_get_data_range", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet range of the values in x, (min(x), max(x)), rounded to 3 decimal places.\n\t\t\"\"\"", "\n", "return", "(", "round", "(", "np", ".", "nanmin", "(", "x", ")", ",", "3", ")", ",", "round", "(", "np", ".", "nanmax", "(", "x", ")", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._remove_nan": [[326, 361], ["numpy.array", "numpy.array", "numpy.where", "numpy.where", "numpy.where", "numpy.where", "numpy.isnan", "numpy.isnan", "numpy.isnan", "numpy.isnan", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.delete"], "methods", ["None"], ["", "def", "_remove_nan", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tRemoves NaN's by deleting the indices where both `x` and `y` have NaN's\n\n\t\tParameters\n\t\t----------\n\t\tx : array\n\t\t\tfirst input\n\t\ty : array\n\t\t\tsecond input\n\n\t\tReturns\n\t\t-------\n\t\tarray\n\t\t\tx, y - with all nan's removed\n\n\t\t\"\"\"", "\n", "nan_idx", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "x", ")", ")", "and", "np", ".", "where", "(", "np", ".", "isnan", "(", "y", ")", ")", "\n", "return", "np", ".", "array", "(", "[", "np", ".", "delete", "(", "x", ",", "nan_idx", ")", ",", "np", ".", "delete", "(", "y", ",", "nan_idx", ")", "]", ")", "\n", "\n", "#def _isValidSliderRange(self, r):", "\n", "\"\"\"\n\t\tChecks if the given range for slider is a valid range\n\n\t\tParameters\n\t\t----------\n\t\tr : list, tuple\n\t\t\trange of order parameter\n\n\t\tReturns\n\t\t-------\n\t\tbool\n\t\t\tTrue if valid, else False\n\n\t\t\"\"\"", "\n", "#\tif r is None or r == 'default':", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._is_valid_slider_timescale_list": [[367, 411], ["isinstance", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_is_valid_slider_timescale_list", "(", "self", ",", "slider_list", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tChecks if the given slider timescale lists contains valid entries\n\n\t\tParameters\n\t\t----------\n\t\tslider_list : list, tuple\n\t\t\ttimescales to include in the slider\n\n\t\tReturns\n\t\t-------\n\t\tbool\n\t\t\tTrue if all values are valid, else False \n\t\t\"\"\"", "\n", "if", "slider_list", "is", "None", ":", "\n", "\t\t\t", "return", "False", "\n", "", "if", "(", "\n", "isinstance", "(", "slider_list", ",", "(", "list", ",", "tuple", ",", "range", ")", ")", "\n", "and", "(", "np", ".", "array", "(", "slider_list", ")", ">=", "1", ")", ".", "all", "(", ")", "\n", ")", ":", "\n", "\t\t\t", "return", "True", "\n", "", "return", "False", "\n", "\n", "#def _get_slider_timescales(self, slider_range, slider_scale_list):", "\n", "\"\"\"\n\t\tTimes scales to generate the drift and diffusion plot slider\n\n\t\tParameters\n\t\t----------\n\t\tslider_range : list, tuple\n\t\t\trange for the slider\n\n\t\tslider_scale_list : list, tuple\n\t\t\ttimescales to include in the slider\n\n\t\tReturns\n\t\t-------\n\t\tlist\n\t\t\tsorted list of the timescales to include in the slider\n\n\t\tNotes\n\t\t-----\n\t\tAll dublicate values in the list (if any) will be removed\n\t\t\"\"\"", "\n", "#t_list = []", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._closest_time_scale": [[429, 436], ["list", "numpy.abs().argmin", "numpy.abs().argmin", "slider.keys", "numpy.abs", "numpy.abs", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "_closest_time_scale", "(", "self", ",", "time_scale", ",", "slider", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGives closest matching time scale avaiable from the slider keys.\n\t\t\"\"\"", "\n", "timescale", "=", "list", "(", "slider", ".", "keys", "(", ")", ")", "\n", "i", "=", "np", ".", "abs", "(", "np", ".", "array", "(", "timescale", ")", "-", "time_scale", ")", ".", "argmin", "(", ")", "\n", "return", "timescale", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_data_from_slider": [[437, 485], ["metrics.Metrics._drift_slider.keys", "print", "metrics.Metrics._closest_time_scale", "print", "metrics.Metrics._diff_slider.keys", "print", "metrics.Metrics._closest_time_scale", "print", "metrics.Metrics._drift_slider.keys", "print", "metrics.Metrics._closest_time_scale", "print", "metrics.Metrics._diff_slider.keys", "print", "metrics.Metrics._closest_time_scale", "print", "metrics.Metrics._drift_slider.keys", "metrics.Metrics._diff_slider.keys", "metrics.Metrics._drift_slider.keys", "metrics.Metrics._diff_slider.keys"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._closest_time_scale", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._closest_time_scale", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._closest_time_scale", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._closest_time_scale"], ["", "def", "_get_data_from_slider", "(", "self", ",", "drift_time_scale", "=", "None", ",", "diff_time_scale", "=", "None", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet drift and diffusion data from slider data dictionary, if key not valid, returns the data corresponding to closest matching one.\n\t\t\"\"\"", "\n", "if", "self", ".", "vector", ":", "\n", "\t\t\t", "if", "drift_time_scale", "is", "None", ":", "\n", "\t\t\t\t\t", "drift_x", ",", "drift_y", "=", "self", ".", "_data_avgdriftX", ",", "self", ".", "_data_avgdriftY", "\n", "", "if", "diff_time_scale", "is", "None", ":", "\n", "\t\t\t\t", "diff_x", ",", "diff_y", ",", "diff_xy", ",", "diff_yx", "=", "self", ".", "_data_avgdiffX", ",", "self", ".", "_data_avgdiffY", ",", "self", ".", "_data_avgdiffXY", ",", "self", ".", "_data_avgdiffYX", "\n", "\n", "", "if", "drift_time_scale", "is", "not", "None", ":", "\n", "\t\t\t\t", "if", "drift_time_scale", "not", "in", "self", ".", "_drift_slider", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t\t", "print", "(", "\"\\n{} not in list:\\n{}\"", ".", "format", "(", "drift_time_scale", ",", "self", ".", "_drift_slider", ".", "keys", "(", ")", ")", ")", "\n", "drift_time_scale", "=", "self", ".", "_closest_time_scale", "(", "drift_time_scale", ",", "self", ".", "_drift_slider", ")", "\n", "print", "(", "\"Choosing {}; (closest matching timescale from the avaiable ones)\"", ".", "format", "(", "drift_time_scale", ")", ")", "\n", "", "drift_x", ",", "drift_y", "=", "self", ".", "_drift_slider", "[", "drift_time_scale", "]", "[", "0", "]", ",", "self", ".", "_drift_slider", "[", "drift_time_scale", "]", "[", "1", "]", "\n", "\n", "", "if", "diff_time_scale", "is", "not", "None", ":", "\n", "\t\t\t\t", "if", "diff_time_scale", "not", "in", "self", ".", "_diff_slider", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t\t", "print", "(", "\"\\n{} not in list:\\n{}\"", ".", "format", "(", "diff_time_scale", ",", "self", ".", "_diff_slider", ".", "keys", "(", ")", ")", ")", "\n", "diff_time_scale", "=", "self", ".", "_closest_time_scale", "(", "diff_time_scale", ",", "self", ".", "_diff_slider", ")", "\n", "print", "(", "\"Choosing {}; (closest matching timescale from the avaiable ones)\"", ".", "format", "(", "diff_time_scale", ")", ")", "\n", "", "diff_x", ",", "diff_y", "=", "self", ".", "_diff_slider", "[", "diff_time_scale", "]", "[", "0", "]", ",", "self", ".", "_diff_slider", "[", "diff_time_scale", "]", "[", "1", "]", "\n", "diff_xy", ",", "diff_yx", "=", "self", ".", "_cross_diff_slider", "[", "diff_time_scale", "]", "[", "0", "]", ",", "self", ".", "_cross_diff_slider", "[", "diff_time_scale", "]", "[", "1", "]", "\n", "\n", "", "return", "drift_x", ",", "drift_y", ",", "diff_x", ",", "diff_y", ",", "diff_xy", ",", "diff_yx", "\n", "", "else", ":", "\n", "\t\t\t", "if", "drift_time_scale", "is", "None", ":", "\n", "\t\t\t\t", "drift", "=", "self", ".", "_data_avgdrift", "\n", "\n", "", "if", "diff_time_scale", "is", "None", ":", "\n", "\t\t\t\t", "diff", "=", "self", ".", "_data_avgdiff", "\n", "\n", "", "if", "drift_time_scale", "is", "not", "None", ":", "\n", "\t\t\t\t", "if", "drift_time_scale", "not", "in", "self", ".", "_drift_slider", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t\t", "print", "(", "\"\\n{} not in list:\\n{}\"", ".", "format", "(", "drift_time_scale", ",", "self", ".", "_drift_slider", ".", "keys", "(", ")", ")", ")", "\n", "drift_time_scale", "=", "self", ".", "_closest_time_scale", "(", "drift_time_scale", ",", "self", ".", "_drift_slider", ")", "\n", "print", "(", "\"Choosing {}; (closest matching timescale from the avaiable ones)\"", ".", "format", "(", "drift_time_scale", ")", ")", "\n", "", "drift", "=", "self", ".", "_drift_slider", "[", "drift_time_scale", "]", "[", "0", "]", "\n", "\n", "", "if", "diff_time_scale", "is", "not", "None", ":", "\n", "\t\t\t\t", "if", "diff_time_scale", "not", "in", "self", ".", "_diff_slider", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t\t", "print", "(", "\"\\n{} not in list:\\n{}\"", ".", "format", "(", "diff_time_scale", ",", "self", ".", "_diff_slider", ".", "keys", "(", ")", ")", ")", "\n", "diff_time_scale", "=", "self", ".", "_closest_time_scale", "(", "diff_time_scale", ",", "self", ".", "_diff_slider", ")", "\n", "print", "(", "\"Choosing {}; (closest matching timescale from the avaiable ones)\"", ".", "format", "(", "diff_time_scale", ")", ")", "\n", "", "diff", "=", "self", ".", "_diff_slider", "[", "diff_time_scale", "]", "[", "0", "]", "\n", "\n", "", "return", "drift", ",", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_num_points": [[486, 510], ["NotImplementedError", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "metrics.Metrics._drift_slider.keys", "print", "metrics.Metrics._closest_time_scale", "print", "metrics.Metrics._diff_slider.keys", "print", "metrics.Metrics._closest_time_scale", "print", "metrics.Metrics._drift_slider.keys", "metrics.Metrics._diff_slider.keys"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._closest_time_scale", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._closest_time_scale"], ["", "", "def", "_get_num_points", "(", "self", ",", "drift_time_scale", ",", "diff_time_scale", ")", ":", "\n", "\t\t", "if", "self", ".", "vector", ":", "\n", "\t\t\t", "raise", "NotImplementedError", "(", "'_get_num_points() is not implemented for vector data.'", ")", "\n", "\n", "", "if", "drift_time_scale", "is", "None", ":", "\n", "\t\t\t", "drift_num", "=", "self", ".", "_data_drift_num", "\n", "", "else", ":", "\n", "\t\t\t", "if", "drift_time_scale", "not", "in", "self", ".", "_drift_slider", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "print", "(", "\"\\n{} not in list:\\n{}\"", ".", "format", "(", "drift_time_scale", ",", "self", ".", "_drift_slider", ".", "keys", "(", ")", ")", ")", "\n", "drift_time_scale", "=", "self", ".", "_closest_time_scale", "(", "drift_time_scale", ",", "self", ".", "_drift_slider", ")", "\n", "print", "(", "\"Choosing {}; (closest matching timescale from the avaiable ones)\"", ".", "format", "(", "drift_time_scale", ")", ")", "\n", "", "drift_num", "=", "self", ".", "_data_drift_nums", "[", "drift_time_scale", "]", "\n", "\n", "\n", "", "if", "diff_time_scale", "is", "None", ":", "\n", "\t\t\t", "diff_num", "=", "self", ".", "_data_diff_num", "\n", "", "else", ":", "\n", "\t\t\t", "if", "diff_time_scale", "not", "in", "self", ".", "_diff_slider", ".", "keys", "(", ")", ":", "\n", "\t\t\t\t", "print", "(", "\"\\n{} not in list:\\n{}\"", ".", "format", "(", "diff_time_scale", ",", "self", ".", "_diff_slider", ".", "keys", "(", ")", ")", ")", "\n", "diff_time_scale", "=", "self", ".", "_closest_time_scale", "(", "diff_time_scale", ",", "self", ".", "_diff_slider", ")", "\n", "print", "(", "\"Choosing {}; (closest matching timescale from the avaiable ones)\"", ".", "format", "(", "diff_time_scale", ")", ")", "\n", "", "diff_num", "=", "self", ".", "_data_diff_nums", "[", "diff_time_scale", "]", "\n", "\n", "", "return", "np", ".", "array", "(", "drift_num", ")", ",", "np", ".", "array", "(", "diff_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._stack_slider_data": [[511, 518], ["numpy.column_stack", "numpy.column_stack", "[].flatten"], "methods", ["None"], ["", "def", "_stack_slider_data", "(", "self", ",", "d", ",", "slider_data", ",", "index", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tStack data from slider dictionary, corresponding to the given index, into columns of numpy array.\n\t\t\"\"\"", "\n", "for", "i", "in", "slider_data", ":", "\n", "\t\t\t", "d", "=", "np", ".", "column_stack", "(", "(", "d", ",", "slider_data", "[", "i", "]", "[", "index", "]", ".", "flatten", "(", ")", ")", ")", "\n", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._csv_header": [[519, 533], ["list", "list"], "methods", ["None"], ["", "def", "_csv_header", "(", "self", ",", "prefix", ",", "file_name", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGenerate headers for CSV file.\n\t\t\"\"\"", "\n", "headers", "=", "\"x,\"", "\n", "if", "self", ".", "vector", ":", "\n", "\t\t\t", "headers", "=", "\"x,y,\"", "\n", "", "if", "'drift'", "in", "file_name", ":", "\n", "\t\t\t", "timescales", "=", "list", "(", "self", ".", "_drift_slider", ")", "\n", "", "else", ":", "\n", "\t\t\t", "timescales", "=", "list", "(", "self", ".", "_diff_slider", ")", "\n", "", "for", "i", "in", "timescales", ":", "\n", "\t\t\t", "headers", "=", "headers", "+", "\"{}-{},\"", ".", "format", "(", "prefix", ",", "i", ")", "\n", "", "return", "headers", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_stacked_data": [[534, 567], ["dict", "numpy.meshgrid", "numpy.meshgrid", "metrics.Metrics._stack_slider_data", "metrics.Metrics._stack_slider_data", "metrics.Metrics._stack_slider_data", "metrics.Metrics._stack_slider_data", "metrics.Metrics._stack_slider_data", "metrics.Metrics._stack_slider_data", "metrics.Metrics._stack_slider_data", "metrics.Metrics._stack_slider_data", "numpy.vstack", "numpy.vstack", "data.copy", "data.copy", "data.copy", "data.copy", "data.copy", "data.copy", "data.copy", "data.copy", "x.flatten", "y.flatten"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._stack_slider_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._stack_slider_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._stack_slider_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._stack_slider_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._stack_slider_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._stack_slider_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._stack_slider_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._stack_slider_data"], ["", "def", "_get_stacked_data", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet a dictionary of all (op_x, op_y, driftX, driftY, diffX, diffY) slider data stacked into numpy arrays.\n\t\t\"\"\"", "\n", "data_dict", "=", "dict", "(", ")", "\n", "if", "self", ".", "vector", ":", "\n", "\t\t\t", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "self", ".", "_data_op_x", ",", "self", ".", "_data_op_y", ")", "\n", "data", "=", "np", ".", "vstack", "(", "(", "x", ".", "flatten", "(", ")", ",", "y", ".", "flatten", "(", ")", ")", ")", ".", "T", "\n", "data_dict", "[", "\"drift_x\"", "]", "=", "self", ".", "_stack_slider_data", "(", "\n", "data", ".", "copy", "(", ")", ",", "self", ".", "_drift_slider", ",", "index", "=", "0", "\n", ")", "\n", "data_dict", "[", "\"drift_y\"", "]", "=", "self", ".", "_stack_slider_data", "(", "\n", "data", ".", "copy", "(", ")", ",", "self", ".", "_drift_slider", ",", "index", "=", "1", "\n", ")", "\n", "data_dict", "[", "\"diffusion_x\"", "]", "=", "self", ".", "_stack_slider_data", "(", "\n", "data", ".", "copy", "(", ")", ",", "self", ".", "_diff_slider", ",", "index", "=", "0", "\n", ")", "\n", "data_dict", "[", "\"diffusion_y\"", "]", "=", "self", ".", "_stack_slider_data", "(", "\n", "data", ".", "copy", "(", ")", ",", "self", ".", "_diff_slider", ",", "index", "=", "1", "\n", ")", "\n", "data_dict", "[", "\"diffusion_xy\"", "]", "=", "self", ".", "_stack_slider_data", "(", "\n", "data", ".", "copy", "(", ")", ",", "self", ".", "_cross_diff_slider", ",", "index", "=", "0", ")", "\n", "data_dict", "[", "\"diffusion_yx\"", "]", "=", "self", ".", "_stack_slider_data", "(", "\n", "data", ".", "copy", "(", ")", ",", "self", ".", "_cross_diff_slider", ",", "index", "=", "1", ")", "\n", "", "else", ":", "\n", "\t\t\t", "data", "=", "self", ".", "_data_op", "\n", "data_dict", "[", "\"drift\"", "]", "=", "self", ".", "_stack_slider_data", "(", "\n", "data", ".", "copy", "(", ")", ",", "self", ".", "_drift_slider", ",", "index", "=", "0", "\n", ")", "\n", "data_dict", "[", "\"diffusion\"", "]", "=", "self", ".", "_stack_slider_data", "(", "\n", "data", ".", "copy", "(", ")", ",", "self", ".", "_diff_slider", ",", "index", "=", "0", "\n", ")", "\n", "", "return", "data_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._save_csv": [[568, 579], ["os.path.join", "numpy.savetxt", "numpy.savetxt", "file_name.endswith", "metrics.Metrics._csv_header"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._csv_header"], ["", "def", "_save_csv", "(", "self", ",", "dir_path", ",", "file_name", ",", "data", ",", "fmt", "=", "\"%.4f\"", ",", "add_headers", "=", "True", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tSave data to CSV file.\n\t\t\"\"\"", "\n", "if", "not", "file_name", ".", "endswith", "(", "\".csv\"", ")", ":", "\n", "\t\t\t", "file_name", "=", "file_name", "+", "\".csv\"", "\n", "", "savepath", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "file_name", ")", "\n", "prefix", "=", "\"Dt\"", "if", "\"drift\"", "in", "file_name", "else", "\"dt\"", "\n", "headers", "=", "self", ".", "_csv_header", "(", "prefix", ",", "file_name", ")", "if", "add_headers", "else", "\"\"", "\n", "np", ".", "savetxt", "(", "savepath", ",", "data", ",", "fmt", "=", "fmt", ",", "header", "=", "headers", ",", "delimiter", "=", "\",\"", ",", "comments", "=", "\"\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._combined_data_dict": [[580, 611], ["dict", "range", "range"], "methods", ["None"], ["", "def", "_combined_data_dict", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet all drift and diffusion data in dictionary format.\n\t\t\"\"\"", "\n", "combined_data", "=", "dict", "(", ")", "\n", "if", "self", ".", "vector", ":", "\n", "\t\t\t", "k", "=", "[", "\"x\"", ",", "\"y\"", "]", "\n", "k_", "=", "[", "\"xy\"", ",", "\"yx\"", "]", "\n", "combined_data", "[", "\"x\"", "]", "=", "self", ".", "_data_op_x", "\n", "combined_data", "[", "\"y\"", "]", "=", "self", ".", "_data_op_y", "\n", "for", "i", "in", "self", ".", "_drift_slider", ":", "\n", "\t\t\t\t", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "\t\t\t\t\t", "drift_key", "=", "\"drift_{}_{}\"", ".", "format", "(", "k", "[", "j", "]", ",", "i", ")", "\n", "combined_data", "[", "drift_key", "]", "=", "self", ".", "_drift_slider", "[", "i", "]", "[", "j", "]", "\n", "", "", "for", "i", "in", "self", ".", "_diff_slider", ":", "\n", "\t\t\t\t", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "\t\t\t\t\t", "diff_key", "=", "\"diffusion_{}_{}\"", ".", "format", "(", "k", "[", "j", "]", ",", "i", ")", "\n", "cross_diff_key", "=", "\"diffusion_{}_{}\"", ".", "format", "(", "k_", "[", "j", "]", ",", "i", ")", "\n", "combined_data", "[", "diff_key", "]", "=", "self", ".", "_diff_slider", "[", "i", "]", "[", "j", "]", "\n", "combined_data", "[", "cross_diff_key", "]", "=", "self", ".", "_cross_diff_slider", "[", "i", "]", "[", "j", "]", "\n", "\n", "", "", "", "else", ":", "\n", "\t\t\t", "combined_data", "[", "\"x\"", "]", "=", "self", ".", "_data_op", "\n", "for", "i", "in", "self", ".", "_drift_slider", ":", "\n", "\t\t\t\t", "drift_key", "=", "\"drift_{}\"", ".", "format", "(", "i", ")", "\n", "combined_data", "[", "drift_key", "]", "=", "self", ".", "_drift_slider", "[", "i", "]", "[", "0", "]", "\n", "\n", "", "for", "i", "in", "self", ".", "_diff_slider", ":", "\n", "\t\t\t\t", "diff_key", "=", "\"diffusion_{}\"", ".", "format", "(", "i", ")", "\n", "combined_data", "[", "diff_key", "]", "=", "self", ".", "_diff_slider", "[", "i", "]", "[", "0", "]", "\n", "", "", "return", "combined_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._zip_dir": [[612, 618], ["os.path.dirname", "shutil.make_archive"], "methods", ["None"], ["", "def", "_zip_dir", "(", "self", ",", "dir_path", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tMake ZIP file of the exported result.\n\t\t\"\"\"", "\n", "file_name", "=", "os", ".", "path", ".", "dirname", "(", "dir_path", ")", "\n", "return", "shutil", ".", "make_archive", "(", "dir_path", ",", "\"zip\"", ",", "dir_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._isnotebook": [[619, 631], ["get_ipython"], "methods", ["None"], ["", "def", "_isnotebook", "(", "self", ")", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "shell", "=", "get_ipython", "(", ")", ".", "__class__", ".", "__name__", "\n", "#print(shell)", "\n", "if", "shell", "==", "'ZMQInteractiveShell'", ":", "\n", "\t\t\t\t", "return", "True", "# Jupyter notebook or qtconsole", "\n", "", "elif", "shell", "==", "'TerminalInteractiveShell'", ":", "\n", "\t\t\t\t", "return", "False", "# Terminal running IPython", "\n", "", "else", ":", "\n", "\t\t\t\t", "return", "False", "# Other type (?)", "\n", "", "", "except", "NameError", ":", "\n", "\t\t\t", "return", "False", "# Probably standard Python interpreter", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation.__init__": [[24, 26], ["analysis.AutoCorrelation.__dict__.update"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf": [[27, 58], ["numpy.isnan().any", "numpy.arange", "c.insert", "analysis.AutoCorrelation._acf_fft", "analysis.AutoCorrelation._nan_acf", "numpy.array", "numpy.isnan", "numpy.corrcoef"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf_fft", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._nan_acf"], ["", "def", "_acf", "(", "self", ",", "data", ",", "t_lag", ")", ":", "\n", "        ", "\"\"\"\n\t\tGet auto correaltion function for given `data` and lag `t_lag`\n\n\t\tParameters\n\t\t----------\n\t\tdata : array\n\t\t\ttimeseries data\n\t\tt_lag : int\n\t\t\tmaxmium lag\n\n\t\tReturns\n\t\t-------\n\t\tx : array\n\t\t\tlags\n\t\tc : array\n\t\t\tcorrelation values\n\t\t\n\t\tNotes\n\t\t-----\n\t\tIf fft flag is set True and no valid fft points are found,\n\t\tthe method uses standard formula method to calculate the autocorrealtion function\n\t\t\"\"\"", "\n", "if", "self", ".", "fft", ":", "\n", "            ", "return", "self", ".", "_acf_fft", "(", "data", ",", "t_lag", ")", "\n", "", "if", "np", ".", "isnan", "(", "data", ")", ".", "any", "(", ")", ":", "\n", "            ", "return", "self", ".", "_nan_acf", "(", "data", ",", "t_lag", ")", "\n", "", "x", "=", "np", ".", "arange", "(", "0", ",", "t_lag", ")", "\n", "c", "=", "[", "np", ".", "corrcoef", "(", "data", "[", ":", "-", "i", "]", ",", "data", "[", "i", ":", "]", ")", "[", "0", "]", "[", "1", "]", "for", "i", "in", "x", "[", "1", ":", "]", "]", "\n", "c", ".", "insert", "(", "0", ",", "1", ")", "\n", "return", "x", ",", "np", ".", "array", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._ccf": [[59, 69], ["numpy.arange", "c.insert", "numpy.isnan().any", "numpy.isnan().any", "analysis.AutoCorrelation._nan_ccf", "numpy.array", "numpy.isnan", "numpy.isnan", "numpy.corrcoef"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._nan_ccf"], ["", "def", "_ccf", "(", "self", ",", "x", ",", "y", ",", "t_lag", ")", ":", "\n", "        ", "\"\"\"\" Returns the cross-correlation function between x and y. \"\"\"", "\n", "\n", "if", "np", ".", "isnan", "(", "x", ")", ".", "any", "(", ")", "or", "np", ".", "isnan", "(", "y", ")", ".", "any", "(", ")", ":", "\n", "            ", "return", "self", ".", "_nan_ccf", "(", "x", ",", "y", ",", "t_lag", ")", "\n", "\n", "", "lags", "=", "np", ".", "arange", "(", "0", ",", "t_lag", ")", "\n", "c", "=", "[", "np", ".", "corrcoef", "(", "x", "[", ":", "-", "i", "]", ",", "y", "[", "i", ":", "]", ")", "[", "0", "]", "[", "1", "]", "for", "i", "in", "lags", "[", "1", ":", "]", "]", "\n", "c", ".", "insert", "(", "0", ",", "1", ")", "\n", "return", "lags", ",", "np", ".", "array", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf_fft": [[70, 83], ["numpy.isnan().any", "numpy.arange", "numpy.fft.ifft", "analysis.AutoCorrelation._nan_acf", "data.mean", "numpy.square", "numpy.isnan", "numpy.abs", "numpy.fft.fft"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._nan_acf"], ["", "def", "_acf_fft", "(", "self", ",", "data", ",", "t_lag", ")", ":", "\n", "        ", "\"\"\"\n\t\tCalculates autocorrelation using wiener khinchin theorem.\n\t\t\"\"\"", "\n", "if", "np", ".", "isnan", "(", "data", ")", ".", "any", "(", ")", ":", "\n", "# print('Missing values in time series')", "\n", "            ", "self", ".", "fft", "=", "False", "\n", "return", "self", ".", "_nan_acf", "(", "data", ",", "t_lag", ")", "\n", "", "data", "=", "data", "-", "data", ".", "mean", "(", ")", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "t_lag", ")", "\n", "c", "=", "np", ".", "fft", ".", "ifft", "(", "np", ".", "square", "(", "np", ".", "abs", "(", "np", ".", "fft", ".", "fft", "(", "data", ")", ")", ")", ")", "\n", "c", "/=", "c", "[", "0", "]", "\n", "return", "x", ",", "c", "[", "0", ":", "t_lag", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._nan_acf": [[84, 97], ["numpy.nanmean", "c.append", "range", "c.append", "numpy.arange", "numpy.array", "numpy.nanmean", "numpy.nanvar", "numpy.nanmean", "numpy.sqrt", "numpy.nanvar", "numpy.nanvar"], "methods", ["None"], ["", "def", "_nan_acf", "(", "self", ",", "data", ",", "t_lag", ")", ":", "\n", "        ", "\"\"\"\n\t\tCalculates autocorrealtion using the correaltion formula, ignoring all points\n\t\twith nan's\n\t\t\"\"\"", "\n", "c", "=", "[", "]", "\n", "mue", "=", "np", ".", "nanmean", "(", "data", ")", "\n", "c", ".", "append", "(", "(", "np", ".", "nanmean", "(", "\n", "(", "data", "-", "mue", ")", "*", "(", "data", "-", "mue", ")", ")", ")", "/", "np", ".", "nanvar", "(", "data", "-", "mue", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "t_lag", ")", ":", "\n", "            ", "c", ".", "append", "(", "(", "np", ".", "nanmean", "(", "(", "data", "[", ":", "-", "i", "]", "-", "mue", ")", "*", "(", "data", "[", "i", ":", "]", "-", "mue", ")", ")", ")", "/", "\n", "(", "np", ".", "sqrt", "(", "np", ".", "nanvar", "(", "data", "[", ":", "-", "i", "]", ")", "*", "np", ".", "nanvar", "(", "(", "data", "[", "i", ":", "]", ")", ")", ")", ")", ")", "\n", "", "return", "np", ".", "arange", "(", "t_lag", ")", ",", "np", ".", "array", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._nan_ccf": [[98, 114], ["c.append", "range", "numpy.nanmean", "numpy.nanmean", "c.append", "numpy.arange", "numpy.array", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd", "numpy.nanmean", "numpy.nanstd", "numpy.nanstd"], "methods", ["None"], ["", "def", "_nan_ccf", "(", "self", ",", "data_x", ",", "data_y", ",", "t_lag", ")", ":", "\n", "        ", "\"\"\"\n\t\tCalculates cross-correlation using the correaltion formula, ignoring all points\n\t\twith nan's\n\t\t\"\"\"", "\n", "\n", "c", "=", "[", "]", "\n", "mu_x", ",", "mu_y", "=", "np", ".", "nanmean", "(", "data_x", ")", ",", "np", ".", "nanmean", "(", "data_y", ")", "\n", "c", ".", "append", "(", "(", "np", ".", "nanmean", "(", "\n", "(", "data_x", "-", "mu_x", ")", "*", "(", "data_y", "-", "mu_y", ")", ")", ")", "/", "\n", "(", "np", ".", "nanstd", "(", "data_x", "-", "mu_x", ")", "*", "np", ".", "nanstd", "(", "data_y", "-", "mu_y", ")", ")", "\n", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "t_lag", ")", ":", "\n", "            ", "c", ".", "append", "(", "(", "np", ".", "nanmean", "(", "(", "data_x", "[", ":", "-", "i", "]", "-", "mu_x", ")", "*", "(", "data_y", "[", "i", ":", "]", "-", "mu_y", ")", ")", ")", "/", "\n", "(", "np", ".", "nanstd", "(", "data_x", "[", ":", "-", "i", "]", ")", "*", "np", ".", "nanstd", "(", "(", "data_y", "[", "i", ":", "]", ")", ")", ")", ")", "\n", "", "return", "np", ".", "arange", "(", "t_lag", ")", ",", "np", ".", "array", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._fit_exp": [[115, 137], ["scipy.optimize.curve_fit", "scipy.optimize.curve_fit", "scipy.optimize.curve_fit", "scipy.optimize.curve_fit", "numpy.exp"], "methods", ["None"], ["", "def", "_fit_exp", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n\t\tFits an exponential function of the form a*exp((-1/b)*t) + c\n\n\t\tParameters\n\t\t----------\n\t\tx : array\n\t\t\tx data\n\t\ty : array\n\t\t\ty data\n\n\t\tReturns\n\t\t-------\n\t\tparams: Tuple (a, b, c) containing the fitted parameters.\n\t\tcov: Covariance matrix of errors\n\t\tNotes\n\t\t-----\n\t\tReference : scipy.optimize.curve_fit\n\t\t\"\"\"", "\n", "fn", "=", "lambda", "t", ",", "a", ",", "b", ",", "c", ":", "a", "*", "np", ".", "exp", "(", "(", "-", "t", "/", "b", ")", ")", "+", "c", "\n", "params", ",", "cov", "=", "scipy", ".", "optimize", ".", "curve_fit", "(", "fn", ",", "x", ",", "y", ")", "\n", "return", "params", ",", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._get_autocorr_time": [[138, 149], ["analysis.AutoCorrelation._acf", "analysis.AutoCorrelation._fit_exp", "int", "numpy.ceil", "int", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._fit_exp"], ["", "def", "_get_autocorr_time", "(", "self", ",", "X", ",", "t_lag", "=", "1000", ",", "update", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n\t\tGet the autocorrelation time of data `X`, for the analysis.\n\t\t\"\"\"", "\n", "t_lag", ",", "c", "=", "self", ".", "_acf", "(", "X", ",", "t_lag", ")", "\n", "self", ".", "_autocorr_x", ",", "self", ".", "_autocorr_y", "=", "t_lag", ",", "c", "\n", "# t_lag, c = self._autocorr(X, t_lag)", "\n", "(", "a", ",", "b", ",", "c", ")", ",", "_", "=", "self", ".", "_fit_exp", "(", "t_lag", ",", "c", ")", "\n", "if", "update", ":", "\n", "            ", "self", ".", "_a", ",", "self", ".", "autocorrelation_time", ",", "self", ".", "_c", "=", "a", ",", "int", "(", "np", ".", "ceil", "(", "b", ")", ")", ",", "c", "\n", "", "return", "int", "(", "np", ".", "ceil", "(", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._act": [[150, 155], ["analysis.AutoCorrelation._get_autocorr_time"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._get_autocorr_time"], ["", "def", "_act", "(", "self", ",", "X", ",", "t_lag", "=", "1000", ")", ":", "\n", "        ", "\"\"\"\n\t\tGet autocorrelation time of X.\n\t\t\"\"\"", "\n", "return", "self", ".", "_get_autocorr_time", "(", "X", ",", "t_lag", "=", "t_lag", ",", "update", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.UnderlyingNoise.__init__": [[164, 167], ["analysis.UnderlyingNoise.__dict__.update", "pydaddy.sde.SDE.__init__"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "SDE", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.UnderlyingNoise._noise": [[168, 196], ["analysis.UnderlyingNoise._residual_timeseries"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.UnderlyingNoise._residual_timeseries"], ["", "def", "_noise", "(", "self", ",", "X", ",", "bins", ",", "avg_drift", ",", "inc", ",", "t_int", ",", "point", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n\t\tGet noise from `X` at a paticular point\n\n\t\tParameters\n\t\t----------\n\t\tX : array\n\t\t\ttime series\n\t\tinc : float\n\t\t\tbinning increments\n\t\tpoint : float\n\t\t\tpoint at which noise is to be extracted\n\t\tDt : int\n\t\t\tdrift time scale\n\t\tt_int : int\n\t\t\ttime difference between consecutive observations\n\n\t\tReturns\n\t\t-------\n\t\tarray\n\t\t\t noise extracted from data at given point \n\t\t\"\"\"", "\n", "\n", "x", "=", "X", "[", ":", "-", "1", "]", "\n", "# i = np.where(np.logical_and(x <= (point + inc), x >= point))[0]", "\n", "# noise = self._residual(X, t_int=t_int, Dt=Dt, dt=dt) / np.sqrt(t_int * dt)", "\n", "noise", "=", "self", ".", "_residual_timeseries", "(", "X", ",", "bins", ",", "avg_drift", ",", "t_int", ")", "\n", "return", "noise", "[", "(", "point", "<=", "x", ")", "&", "(", "x", "<", "point", "+", "inc", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.UnderlyingNoise._noise_vector": [[199, 206], ["analysis.UnderlyingNoise._residual_timeseries_vector"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.UnderlyingNoise._residual_timeseries_vector"], ["", "def", "_noise_vector", "(", "self", ",", "X", ",", "Y", ",", "bins_x", ",", "bins_y", ",", "avg_drift_x", ",", "avg_drift_y", ",", "inc_x", ",", "inc_y", ",", "t_int", ",", "point_x", "=", "0", ",", "point_y", "=", "0", ")", ":", "\n", "        ", "x", ",", "y", "=", "X", "[", ":", "-", "1", "]", ",", "Y", "[", ":", "-", "1", "]", "\n", "noise_x", ",", "noise_y", "=", "self", ".", "_residual_timeseries_vector", "(", "X", "=", "X", ",", "Y", "=", "Y", ",", "\n", "bins_x", "=", "bins_x", ",", "bins_y", "=", "bins_y", ",", "\n", "avg_drift_x", "=", "avg_drift_x", ",", "avg_drift_y", "=", "avg_drift_y", ",", "\n", "t_int", "=", "t_int", ")", "\n", "return", "noise_x", "[", "(", "point_x", "<=", "x", ")", "&", "(", "x", "<", "point_x", "+", "inc_x", ")", "]", ",", "noise_y", "[", "(", "point_y", "<=", "y", ")", "&", "(", "y", "<", "point_y", "+", "inc_y", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.UnderlyingNoise._residual_timeseries": [[210, 221], ["enumerate", "numpy.sqrt", "numpy.argwhere", "len"], "methods", ["None"], ["", "def", "_residual_timeseries", "(", "self", ",", "X", ",", "Dt", ",", "bins", ",", "avg_drift", ",", "t_int", ")", ":", "\n", "        ", "res", "=", "(", "X", "[", "Dt", ":", "]", "-", "X", "[", ":", "-", "Dt", "]", ")", "\n", "for", "i", ",", "x", "in", "enumerate", "(", "X", "[", ":", "-", "Dt", "]", ")", ":", "\n", "# Find bin-index corresponding to x: minimum i such that x < bins[i], assuming bins is sorted", "\n", "            ", "try", ":", "\n", "                ", "bin", "=", "np", ".", "argwhere", "(", "x", "<", "bins", ")", "[", "0", "]", "[", "0", "]", "\n", "", "except", "IndexError", ":", "\n", "                ", "bin", "=", "len", "(", "bins", ")", "-", "1", "\n", "", "res", "[", "i", "]", "-=", "avg_drift", "[", "bin", "]", "*", "t_int", "\n", "\n", "", "return", "res", "/", "np", ".", "sqrt", "(", "t_int", "*", "Dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.UnderlyingNoise._residual_timeseries_vector": [[222, 241], ["enumerate", "zip", "numpy.sqrt", "numpy.sqrt", "numpy.argwhere", "len", "numpy.argwhere", "len"], "methods", ["None"], ["", "def", "_residual_timeseries_vector", "(", "self", ",", "X", ",", "Y", ",", "Dt", ",", "bins_x", ",", "bins_y", ",", "avg_drift_x", ",", "avg_drift_y", ",", "t_int", ")", ":", "\n", "        ", "res_x", "=", "X", "[", "Dt", ":", "]", "-", "X", "[", ":", "-", "Dt", "]", "\n", "res_y", "=", "Y", "[", "Dt", ":", "]", "-", "Y", "[", ":", "-", "Dt", "]", "\n", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "zip", "(", "X", "[", ":", "-", "Dt", "]", ",", "Y", "[", ":", "-", "Dt", "]", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "bin_x", "=", "np", ".", "argwhere", "(", "x", "<", "bins_x", ")", "[", "0", "]", "[", "0", "]", "\n", "", "except", "IndexError", ":", "\n", "                ", "bin_x", "=", "len", "(", "bins_x", ")", "-", "1", "\n", "\n", "", "try", ":", "\n", "                ", "bin_y", "=", "np", ".", "argwhere", "(", "y", "<", "bins_y", ")", "[", "0", "]", "[", "0", "]", "\n", "", "except", "IndexError", ":", "\n", "                ", "bin_y", "=", "len", "(", "bins_y", ")", "-", "1", "\n", "\n", "", "res_x", "[", "i", "]", "-=", "avg_drift_x", "[", "bin_x", ",", "bin_y", "]", "*", "t_int", "\n", "res_y", "[", "i", "]", "-=", "avg_drift_y", "[", "bin_x", ",", "bin_y", "]", "*", "t_int", "\n", "\n", "", "return", "res_x", "/", "np", ".", "sqrt", "(", "Dt", "*", "t_int", ")", ",", "res_y", "/", "np", ".", "sqrt", "(", "Dt", "*", "t_int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.GaussianTest.__init__": [[250, 255], ["analysis.UnderlyingNoise.__init__", "pydaddy.metrics.Metrics.__init__", "analysis.AutoCorrelation.__init__", "analysis.GaussianTest.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "UnderlyingNoise", ".", "__init__", "(", "self", ")", "\n", "Metrics", ".", "__init__", "(", "self", ")", "\n", "AutoCorrelation", ".", "__init__", "(", "self", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.GaussianTest._get_critical_values": [[256, 267], ["numpy.histogram", "numpy.cumsum", "numpy.where", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.histogram"], ["", "def", "_get_critical_values", "(", "self", ",", "kl_dist", ")", ":", "\n", "        ", "\"\"\"\n\t\tGet critical values of null hypothesis, \n\t\ti.e values at the boundries of 2.5% and 97.5% of null hypothesis\n\t\t\"\"\"", "\n", "hist", ",", "self", ".", "_X1", "=", "np", ".", "histogram", "(", "kl_dist", ",", "normed", "=", "True", ")", "\n", "dx", "=", "self", ".", "_X1", "[", "1", "]", "-", "self", ".", "_X1", "[", "0", "]", "\n", "self", ".", "_f", "=", "np", ".", "cumsum", "(", "hist", ")", "*", "dx", "\n", "l_lim", "=", "self", ".", "_X1", "[", "1", ":", "]", "[", "np", ".", "where", "(", "self", ".", "_f", "<=", "0.025", ")", "]", "[", "-", "1", "]", "\n", "h_lim", "=", "self", ".", "_X1", "[", "1", ":", "]", "[", "np", ".", "where", "(", "self", ".", "_f", ">=", "0.975", ")", "]", "[", "0", "]", "\n", "return", "l_lim", ",", "h_lim", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.GaussianTest._noise_analysis": [[268, 319], ["analysis.GaussianTest.__dict__.update", "analysis.GaussianTest._noise", "tqdm.tqdm.tqdm", "analysis.GaussianTest._get_critical_values", "analysis.GaussianTest._kl_divergence", "print", "range", "numpy.random.normal", "numpy.random.normal", "kl_dist.append", "numpy.random.normal", "analysis.GaussianTest._acf", "analysis.GaussianTest._kl_divergence", "print", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.UnderlyingNoise._noise", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.GaussianTest._get_critical_values", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._kl_divergence", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._kl_divergence"], ["", "def", "_noise_analysis", "(", "self", ",", "X", ",", "Dt", ",", "dt", ",", "t_int", ",", "inc", ",", "point", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n\t\tCheck if noise is gaussian\n\n\t\tParameters\n\t\t----------\n\t\tX : array\n\t\t\ttimeseries data\n\t\tDt : int\n\t\t\tdrift timescale\n\t\tinc : float\n\t\t\tincrement in order parameter of X\n\t\tpoint : int\n\t\t\tpoint at which noise is to be extracted\n\t\t\n\t\tReturns\n\t\t-------\n\t\ttuple\n\t\t\t- gaussian_noise (bool) : True is the noise is gaussian\n\t\t\t- noise (array) : extracted noise\n\t\t\t- kl_dist (array) : null hypothesis uses\n\t\t\t- k (float) : test statistics used for test of hypothesis\n\t\t\t- l_lim (float) : lower critical limit\n\t\t\t- h_lim (float) : upper critical limit\n\t\t\t- noise_correlation (array) : noise autocorrelation\n\t\t\"\"\"", "\n", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "noise", "=", "self", ".", "_noise", "(", "X", ",", "Dt", ",", "dt", ",", "t_int", ",", "inc", ",", "point", ")", "\n", "# noise[np.isnan(noise)] = 0", "\n", "s", "=", "noise", ".", "size", "\n", "if", "s", "==", "0", ":", "\n", "            ", "print", "(", "'Warning : Length of noise is 0'", ")", "\n", "", "kl_dist", "=", "[", "]", "\n", "# for _ in tqdm(range(10000), desc='Gaussian check for underlying noise'):", "\n", "for", "_", "in", "tqdm", "(", "range", "(", "1000", ")", ")", ":", "\n", "            ", "p", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "s", ")", "\n", "q", "=", "np", ".", "random", ".", "normal", "(", "size", "=", "s", ")", "\n", "kl_dist", ".", "append", "(", "self", ".", "_kl_divergence", "(", "p", ",", "q", ")", ")", "\n", "", "l_lim", ",", "h_lim", "=", "self", ".", "_get_critical_values", "(", "kl_dist", ")", "\n", "k", "=", "self", ".", "_kl_divergence", "(", "noise", ",", "np", ".", "random", ".", "normal", "(", "size", "=", "s", ")", ")", "\n", "gaussian_noise", "=", "True", "if", "k", ">=", "l_lim", "and", "k", "<=", "h_lim", "else", "False", "\n", "if", "s", ":", "\n", "            ", "t_lag", "=", "s", "-", "1", "if", "s", "<=", "10", "else", "10", "\n", "", "else", ":", "\n", "            ", "t_lag", "=", "0", "\n", "", "try", ":", "\n", "            ", "noise_correlation", "=", "self", ".", "_acf", "(", "noise", ",", "t_lag", "=", "10", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "print", "(", "'Warning : ValueError '", ",", "e", ",", "'While finding noise correlation\\n'", ")", "\n", "noise_correlation", "=", "np", ".", "arange", "(", "0", ",", "t_lag", ")", ",", "np", ".", "arange", "(", "0", ",", "t_lag", ")", "*", "np", ".", "nan", "\n", "", "return", "gaussian_noise", ",", "noise", ",", "kl_dist", ",", "k", ",", "l_lim", ",", "h_lim", ",", "noise_correlation", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing.__init__": [[13, 16], ["preprocessing.Preprocessing.__dict__.update", "pydaddy.analysis.GaussianTest.__init__"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "\t\t", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "GaussianTest", ".", "__init__", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._r2_vs_order": [[17, 31], ["range", "preprocessing.Preprocessing._fit_poly", "preprocessing.Preprocessing._fit_poly", "r2_drift.append", "r2_diff.append", "preprocessing.Preprocessing._R2", "preprocessing.Preprocessing._R2"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._fit_poly", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._fit_poly", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._R2", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._R2"], ["", "def", "_r2_vs_order", "(", "self", ",", "op1", ",", "op2", ",", "avgDrift", ",", "avgDiff", ",", "max_order", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet R2 for different order\n\t\t\"\"\"", "\n", "r2_drift", "=", "[", "]", "\n", "r2_diff", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "max_order", ")", ":", "\n", "\t\t\t", "p_drift", ",", "_", "=", "self", ".", "_fit_poly", "(", "x", "=", "op1", ",", "y", "=", "avgDrift", ",", "deg", "=", "i", ")", "\n", "p_diff", ",", "_", "=", "self", ".", "_fit_poly", "(", "x", "=", "op2", ",", "y", "=", "avgDiff", ",", "deg", "=", "i", ")", "\n", "r2_drift", ".", "append", "(", "\n", "self", ".", "_R2", "(", "data", "=", "avgDrift", ",", "op", "=", "op1", ",", "poly", "=", "p_drift", ",", "k", "=", "i", ",", "adj", "=", "True", ")", ")", "\n", "r2_diff", ".", "append", "(", "\n", "self", ".", "_R2", "(", "data", "=", "avgDiff", ",", "op", "=", "op2", ",", "poly", "=", "p_diff", ",", "k", "=", "i", ",", "adj", "=", "True", ")", ")", "\n", "", "return", "r2_drift", ",", "r2_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._remove_nan": [[32, 40], ["numpy.argwhere", "numpy.linspace", "numpy.isnan", "numpy.delete", "numpy.delete", "len", "len", "len"], "methods", ["None"], ["", "def", "_remove_nan", "(", "self", ",", "x", ",", "y", ",", "sample_size", "=", "10", ")", ":", "\n", "\t\t", "nan_idx", "=", "np", ".", "argwhere", "(", "np", ".", "isnan", "(", "y", ")", ")", "\n", "\n", "x", ",", "y", "=", "np", ".", "delete", "(", "x", ",", "nan_idx", ")", ",", "np", ".", "delete", "(", "y", ",", "nan_idx", ")", "\n", "if", "len", "(", "x", ")", "<", "sample_size", ":", "\n", "\t\t\t", "sample_size", "=", "len", "(", "x", ")", "\n", "", "idx", "=", "np", ".", "linspace", "(", "0", ",", "len", "(", "x", ")", "-", "1", ",", "sample_size", ",", "dtype", "=", "np", ".", "int", ")", "\n", "return", "x", "[", "idx", "]", ",", "y", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._remove_outliers": [[41, 53], ["numpy.nanquantile", "numpy.nanquantile"], "methods", ["None"], ["", "def", "_remove_outliers", "(", "self", ",", "xs", ",", "y", ",", "quantile", "=", "0.01", ")", ":", "\n", "\t\t", "\"\"\" Remove points corresponding to outliers in y. xs is a list of one or more arrays, indices corresponding\n\t\tto outliers in y will be removed from each array in xs as well. \"\"\"", "\n", "\n", "lb", "=", "np", ".", "nanquantile", "(", "y", ",", "quantile", ")", "\n", "ub", "=", "np", ".", "nanquantile", "(", "y", ",", "1", "-", "quantile", ")", "\n", "\n", "cond", "=", "(", "lb", "<=", "y", ")", "&", "(", "y", "<=", "ub", ")", "\n", "y", "=", "y", "[", "cond", "]", "\n", "xs", "=", "[", "x", "[", "cond", "]", "for", "x", "in", "xs", "]", "\n", "\n", "return", "xs", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._r2_vs_order_multi_dt": [[54, 84], ["preprocessing.Preprocessing._act", "sorted", "r2_drift_m_dt.append", "r2_diff_m_dt.append", "set().union", "preprocessing.Preprocessing._drift_and_diffusion", "preprocessing.Preprocessing._remove_nan", "preprocessing.Preprocessing._remove_nan", "preprocessing.Preprocessing._r2_vs_order", "r2_drift_m_dt.append", "r2_diff_m_dt.append", "set", "set", "len", "len", "map", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._act", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._drift_and_diffusion", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._remove_nan", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._remove_nan", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._r2_vs_order"], ["", "def", "_r2_vs_order_multi_dt", "(", "self", ",", "\n", "X", ",", "\n", "M_square", ",", "\n", "t_int", ",", "\n", "dt", "=", "1", ",", "\n", "max_order", "=", "10", ",", "\n", "inc", "=", "0.01", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet R2 vs order for different Dt\n\t\t\"\"\"", "\n", "r2_drift_m_dt", "=", "[", "]", "\n", "r2_diff_m_dt", "=", "[", "]", "\n", "max_dt", "=", "self", ".", "_act", "(", "M_square", ",", "t_lag", "=", "self", ".", "t_lag", ")", "\n", "N", "=", "8", "\n", "time_scale_list", "=", "sorted", "(", "set", "(", "map", "(", "int", ",", "np", ".", "linspace", "(", "1", ",", "max_dt", ",", "N", ")", ")", ")", ".", "union", "(", "set", "(", "[", "self", ".", "Dt", "]", ")", ")", ")", "\n", "for", "time_scale", "in", "time_scale_list", ":", "\n", "\t\t\t", "drift", ",", "diff", ",", "avgDiff", ",", "avgDrift", ",", "op", ",", "drift_ebar", ",", "diff_ebar", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "_drift_and_diffusion", "(", "\n", "X", ",", "t_int", ",", "Dt", "=", "time_scale", ",", "dt", "=", "time_scale", ",", "inc", "=", "inc", ")", "\n", "op1", ",", "avgDrift", "=", "self", ".", "_remove_nan", "(", "op", ",", "avgDrift", ")", "\n", "op2", ",", "avgDiff", "=", "self", ".", "_remove_nan", "(", "op", ",", "avgDiff", ")", "\n", "if", "len", "(", "avgDrift", ")", "==", "0", "or", "len", "(", "avgDiff", ")", "==", "0", ":", "\n", "\t\t\t\t", "continue", "\n", "", "r2_drift", ",", "r2_diff", "=", "self", ".", "_r2_vs_order", "(", "op1", ",", "op2", ",", "avgDrift", ",", "avgDiff", ",", "max_order", ")", "\n", "r2_drift_m_dt", ".", "append", "(", "r2_drift", ")", "\n", "r2_diff_m_dt", ".", "append", "(", "r2_diff", ")", "\n", "\n", "", "r2_drift_m_dt", ".", "append", "(", "time_scale_list", ")", "\n", "r2_diff_m_dt", ".", "append", "(", "time_scale_list", ")", "\n", "\n", "return", "r2_drift_m_dt", ",", "r2_diff_m_dt", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._rms_variation": [[85, 93], ["range", "numpy.array", "len", "y.append", "preprocessing.Preprocessing._rms"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._rms"], ["", "def", "_rms_variation", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet rms variation of array\n\t\t\"\"\"", "\n", "y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "\t\t\t", "y", ".", "append", "(", "self", ".", "_rms", "(", "x", "[", "i", ":", "]", ")", ")", "\n", "", "return", "np", ".", "array", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._o1": [[94, 101], ["preprocessing.Preprocessing._o1", "x.mean"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._o1"], ["", "def", "_o1", "(", "self", ",", "x", ",", "i", "=", "0", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tAll possible values of order\n\t\t\"\"\"", "\n", "if", "x", "[", "i", "]", "<", "x", ".", "mean", "(", ")", ":", "\n", "\t\t\t", "return", "i", "\n", "", "return", "self", ".", "_o1", "(", "x", ",", "i", "=", "i", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._o2": [[102, 107], ["numpy.ceil", "preprocessing.Preprocessing._fit_exp", "range", "len"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._fit_exp"], ["", "def", "_o2", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tLeast likely values of order\n\t\t\"\"\"", "\n", "return", "np", ".", "ceil", "(", "self", ".", "_fit_exp", "(", "range", "(", "len", "(", "x", ")", ")", ",", "x", ")", "[", "0", "]", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._get_o1_o2": [[109, 119], ["o1.append", "o2.append", "numpy.array", "preprocessing.Preprocessing._o1", "preprocessing.Preprocessing._o2", "preprocessing.Preprocessing._rms_variation"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._o1", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._o2", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._rms_variation"], ["", "def", "_get_o1_o2", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet o1 and o2 values for r2_adjusted multiple Dt\n\t\t\"\"\"", "\n", "o1", "=", "[", "]", "\n", "o2", "=", "[", "]", "\n", "for", "i", "in", "x", ":", "\n", "\t\t\t", "o1", ".", "append", "(", "self", ".", "_o1", "(", "self", ".", "_rms_variation", "(", "i", ")", ")", ")", "\n", "o2", ".", "append", "(", "self", ".", "_o2", "(", "i", ")", ")", "\n", "", "return", "np", ".", "array", "(", "o1", ")", ",", "o2", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._find_order": [[120, 150], ["numpy.array", "preprocessing.Preprocessing._o1", "preprocessing.Preprocessing._get_o1_o2", "numpy.all", "set", "sorted", "range", "len", "numpy.array", "preprocessing.Preprocessing._rms_variation", "numpy.where", "numpy.delete", "set", "numpy.any", "len"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._o1", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._get_o1_o2", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._rms_variation"], ["", "def", "_find_order", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet expected order by elemination least likely to be values from all possble values.\n\t\tThen decides the order by looking at the R2 values.\n\t\t\"\"\"", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", "!=", "2", ":", "\n", "\t\t\t", "x", "=", "np", ".", "array", "(", "[", "x", "]", ")", "\n", "", "return", "self", ".", "_o1", "(", "self", ".", "_rms_variation", "(", "x", "[", "0", "]", ")", ")", "\n", "\n", "o1", ",", "o2", "=", "self", ".", "_get_o1_o2", "(", "x", ")", "\n", "if", "np", ".", "all", "(", "o1", "==", "o1", "[", "0", "]", ")", ":", "\n", "\t\t\t", "return", "o1", "[", "0", "]", "\n", "", "for", "d", "in", "set", "(", "o2", ")", ":", "\n", "\t\t\t", "i", "=", "np", ".", "where", "(", "o1", "==", "d", ")", "\n", "o1", "=", "np", ".", "delete", "(", "o1", ",", "i", ")", "\n", "", "p", "=", "sorted", "(", "set", "(", "o1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "p", ")", "-", "1", ")", ":", "\n", "\t\t\t", "if", "np", ".", "any", "(", "x", "[", ":", ",", "p", "[", "i", "]", "]", ">", "x", "[", ":", ",", "p", "[", "i", "+", "1", "]", "]", ")", ":", "\n", "\t\t\t\t", "return", "p", "[", "i", "]", "\n", "", "", "return", "p", "[", "-", "1", "]", "\n", "\n", "\"\"\"\n\t\to = []\n\t\tfor i in range(len(x)):\n\t\t\trms_x = self._rms_variation(x[i])\n\t\t\td = np.abs(np.diff(rms_x)[:-1] - np.diff(rms_x, 2))\n\t\t\to.append(np.where(d <= 0.25*d.mean())[0][0])\n\t\treturn mode(o).mode[0]\n\t\t\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._order": [[152, 184], ["preprocessing.Preprocessing._r2_vs_order_multi_dt", "preprocessing.Preprocessing._get_autocorr_time", "numpy.abs().argmin", "numpy.array", "numpy.array", "preprocessing.Preprocessing._find_order", "preprocessing.Preprocessing._find_order", "numpy.ceil", "numpy.abs", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._r2_vs_order_multi_dt", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._get_autocorr_time", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._find_order", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._find_order"], ["", "def", "_order", "(", "self", ",", "\n", "X", ",", "\n", "M_square", ",", "\n", "t_int", ",", "\n", "Dt", "=", "'auto'", ",", "\n", "dt", "=", "1", ",", "\n", "max_order", "=", "10", ",", "\n", "inc", "=", "0.01", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tFind the order of drift and diffusion, and timescale based on drift order.\n\n\t\tNotes\n\t\t-----\n\t\t\tTime scale = autocorrelation time if drift order is 1, else its auto correaltion time.\n\t\t\"\"\"", "\n", "\n", "#R2_adj multiple Dt", "\n", "self", ".", "_r2_drift_m_dt", ",", "self", ".", "_r2_diff_m_dt", "=", "self", ".", "_r2_vs_order_multi_dt", "(", "X", ",", "M_square", ",", "t_int", "=", "t_int", ",", "inc", "=", "inc", ",", "dt", "=", "dt", ",", "max_order", "=", "max_order", ")", "\n", "\n", "if", "self", ".", "drift_order", "is", "None", ":", "\n", "\t\t\t", "self", ".", "drift_order", "=", "self", ".", "_find_order", "(", "self", ".", "_r2_drift_m_dt", "[", ":", "-", "1", "]", ")", "\n", "", "if", "self", ".", "diff_order", "is", "None", ":", "\n", "\t\t\t", "self", ".", "diff_order", "=", "self", ".", "_find_order", "(", "self", ".", "_r2_diff_m_dt", "[", ":", "-", "1", "]", ")", "\n", "\n", "", "autocorr_time", "=", "self", ".", "_get_autocorr_time", "(", "M_square", ",", "t_lag", "=", "self", ".", "t_lag", ")", "\n", "optimum_dt", "=", "autocorr_time", "-", "1", "if", "self", ".", "drift_order", "==", "1", "else", "autocorr_time", "/", "10", "\n", "\n", "k", "=", "np", ".", "abs", "(", "np", ".", "array", "(", "self", ".", "_r2_drift_m_dt", "[", "-", "1", "]", ")", "-", "optimum_dt", ")", ".", "argmin", "(", ")", "\n", "self", ".", "_r2_drift", "=", "np", ".", "array", "(", "self", ".", "_r2_drift_m_dt", "[", "k", "]", ")", "\n", "self", ".", "_r2_diff", "=", "np", ".", "array", "(", "self", ".", "_r2_diff_m_dt", "[", "0", "]", ")", "\n", "\n", "return", "self", ".", "drift_order", ",", "self", ".", "_r2_drift", ",", "np", ".", "ceil", "(", "optimum_dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._optimium_timescale": [[186, 206], ["preprocessing.Preprocessing._order", "int"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._order"], ["", "def", "_optimium_timescale", "(", "self", ",", "\n", "X", ",", "\n", "M_square", ",", "\n", "t_int", ",", "\n", "Dt", "=", "'auto'", ",", "\n", "max_order", "=", "10", ",", "\n", "t_lag", "=", "1000", ",", "\n", "inc", "=", "0.01", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tGet timescale based on observed order of drift\n\t\t\"\"\"", "\n", "order", ",", "r2", ",", "optimum_dt", "=", "self", ".", "_order", "(", "X", ",", "\n", "M_square", ",", "\n", "t_int", ",", "\n", "Dt", "=", "Dt", ",", "\n", "max_order", "=", "max_order", ",", "\n", "inc", "=", "inc", ")", "\n", "if", "Dt", "!=", "'auto'", ":", "\n", "\t\t\t", "return", "Dt", "\n", "", "return", "int", "(", "optimum_dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._preprocess": [[207, 215], ["preprocessing.Preprocessing._validate_inputs"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._validate_inputs"], ["", "def", "_preprocess", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "_validate_inputs", "(", ")", "\n", "# inc = self.inc_x if self.vector else self.inc", "\n", "# self._r2_drift_m_dt, self._r2_diff_m_dt = self._r2_vs_order_multi_dt(self._X, self._M_square, t_int=self.t_int ,inc=inc, dt=self.dt, max_order=self.max_order)", "\n", "# k = self._r2_drift_m_dt[-1].index(self.Dt)", "\n", "# self._r2_drift = np.array(self._r2_drift_m_dt[k])", "\n", "# self._r2_diff = np.array(self._r2_diff_m_dt[0])", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._timestep": [[216, 218], ["len"], "methods", ["None"], ["", "def", "_timestep", "(", "self", ",", "t", ")", ":", "\n", "\t\t", "return", "(", "t", "[", "-", "1", "]", "-", "t", "[", "0", "]", ")", "/", "(", "len", "(", "t", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._validate_inputs": [[219, 323], ["hasattr", "preprocessing.Preprocessing._get_autocorr_time", "isinstance", "preprocessing.InputError", "numpy.isinf().any", "len", "preprocessing.Preprocessing._data[].flatten", "preprocessing.Preprocessing._timestep", "len", "print", "preprocessing.Preprocessing._act", "preprocessing.Preprocessing._act", "preprocessing.Preprocessing._isValidRange", "isinstance", "print", "ValueError", "len", "preprocessing.Preprocessing._Mx.copy", "preprocessing.InputError", "len", "len", "preprocessing.InputError", "isinstance", "preprocessing.InputError", "len", "print", "preprocessing.Preprocessing._isValidRange", "preprocessing.Preprocessing._isValidRange", "int", "isinstance", "preprocessing.InputError", "preprocessing.Preprocessing._is_valid_slider_timescale_list", "numpy.isinf", "numpy.array().flatten", "numpy.array().flatten", "numpy.nanmin", "numpy.nanmax", "numpy.nanmin", "numpy.nanmax", "print", "print", "preprocessing.InputError", "numpy.ceil", "len", "numpy.nanmin", "numpy.nanmax", "numpy.nanmin", "numpy.nanmax", "numpy.nanmin", "numpy.nanmax", "numpy.nanmin", "numpy.nanmax", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._get_autocorr_time", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._timestep", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._act", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._act", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._isValidRange", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._isValidRange", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._isValidRange", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._is_valid_slider_timescale_list"], ["", "def", "_validate_inputs", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tInitailize and validate all inputs.\n\t\t\"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "_data", ",", "Iterable", ")", ":", "\n", "\t\t\t", "raise", "InputError", "(", "'Characterize(data=[Mx,My],...)'", ",", "\n", "'data input must be a list of length 1 or 2!'", ")", "\n", "", "for", "d", "in", "self", ".", "_data", ":", "\n", "\t\t\t", "if", "np", ".", "isinf", "(", "d", ")", ".", "any", "(", ")", ":", "\n", "\t\t\t\t", "raise", "ValueError", "(", "'TimeSeries data must not contain inf'", ")", "\n", "", "", "if", "len", "(", "self", ".", "_data", ")", "==", "1", ":", "\n", "\t\t\t", "self", ".", "_X", "=", "self", ".", "_data", "[", "0", "]", ".", "flatten", "(", ")", "\n", "self", ".", "_M_square", "=", "self", ".", "_X", "\n", "self", ".", "vector", "=", "False", "\n", "", "elif", "len", "(", "self", ".", "_data", ")", "==", "2", ":", "\n", "\t\t\t", "self", ".", "_Mx", ",", "self", ".", "_My", "=", "np", ".", "array", "(", "self", ".", "_data", "[", "0", "]", ")", ".", "flatten", "(", ")", ",", "np", ".", "array", "(", "self", ".", "_data", "[", "1", "]", ")", ".", "flatten", "(", ")", "\n", "self", ".", "_M_square", "=", "self", ".", "_Mx", "**", "2", "+", "self", ".", "_My", "**", "2", "\n", "self", ".", "_X", "=", "self", ".", "_Mx", ".", "copy", "(", ")", "\n", "self", ".", "vector", "=", "True", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "InputError", "(", "'Characterize(data=[Mx,My],...)'", ",", "\n", "'data input must be a list of length 1 or 2!'", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ".", "_t", ",", "\"__len__\"", ")", ":", "\n", "\t\t\t", "self", ".", "t_int", "=", "self", ".", "_timestep", "(", "self", ".", "_t", ")", "\n", "if", "len", "(", "self", ".", "_t", ")", "!=", "len", "(", "self", ".", "_M_square", ")", ":", "\n", "\t\t\t\t", "raise", "InputError", "(", "\"len(t) = len(Mx) = len(My)\"", ",", "\"TimeSeries and time-stamps must be of same length\"", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "self", ".", "t_int", "=", "self", ".", "_t", "\n", "if", "not", "isinstance", "(", "self", ".", "_t", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "\t\t\t\t", "raise", "InputError", "(", "\"t <float> or <array>\"", ",", "\"Time increment must either array or float type\"", ")", "\n", "\n", "", "", "if", "self", ".", "t_lag", ">=", "len", "(", "self", ".", "_X", ")", ":", "\n", "\t\t\t", "print", "(", "'Warning : t_lag ({}) is greater that the length of data; setting t_lag as {}\\n'", ".", "format", "(", "\n", "self", ".", "t_lag", ",", "\n", "len", "(", "self", ".", "_data", "[", "0", "]", ")", "-", "1", ")", ")", "\n", "self", ".", "t_lag", "=", "len", "(", "self", ".", "_X", ")", "-", "1", "\n", "", "self", ".", "autocorrelation_time", "=", "self", ".", "_get_autocorr_time", "(", "self", ".", "_M_square", ")", "\n", "\n", "if", "self", ".", "vector", ":", "\n", "\t\t\t", "self", ".", "_act_mx", "=", "self", ".", "_act", "(", "self", ".", "_Mx", ")", "\n", "self", ".", "_act_my", "=", "self", ".", "_act", "(", "self", ".", "_My", ")", "\n", "\n", "", "if", "not", "self", ".", "_isValidRange", "(", "self", ".", "op_range", ")", ":", "\n", "\t\t\t", "if", "self", ".", "op_range", "is", "None", ":", "\n", "\t\t\t\t", "self", ".", "op_range", "=", "(", "np", ".", "nanmin", "(", "self", ".", "_X", ")", ",", "np", ".", "nanmax", "(", "self", ".", "_X", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "print", "(", "\"Warning : given order parameter range is not in valid (typle or list of length 2) format\\nUsing range of data\"", ")", "\n", "self", ".", "op_range", "=", "(", "np", ".", "nanmin", "(", "self", ".", "_X", ")", ",", "np", ".", "nanmax", "(", "self", ".", "_X", ")", ")", "\n", "\n", "", "", "if", "self", ".", "vector", ":", "\n", "\t\t\t", "if", "not", "self", ".", "_isValidRange", "(", "self", ".", "op_x_range", ")", ":", "\n", "\t\t\t\t", "if", "self", ".", "op_x_range", "is", "None", ":", "\n", "\t\t\t\t\t", "self", ".", "op_x_range", "=", "(", "np", ".", "nanmin", "(", "self", ".", "_Mx", ")", ",", "np", ".", "nanmax", "(", "self", ".", "_Mx", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "print", "(", "\"Warning : given order parameter range is not in valid (typle or list of length 2) format\\nUsing range of data\"", ")", "\n", "self", ".", "op_x_range", "=", "(", "np", ".", "nanmin", "(", "self", ".", "_Mx", ")", ",", "np", ".", "nanmax", "(", "self", ".", "_Mx", ")", ")", "\n", "\n", "", "", "if", "not", "self", ".", "_isValidRange", "(", "self", ".", "op_y_range", ")", ":", "\n", "\t\t\t\t", "if", "self", ".", "op_y_range", "is", "None", ":", "\n", "\t\t\t\t\t", "self", ".", "op_y_range", "=", "(", "np", ".", "nanmin", "(", "self", ".", "_My", ")", ",", "np", ".", "nanmax", "(", "self", ".", "_My", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "print", "(", "\"Warning : given order parameter range is not in valid (typle or list of length 2) format\\nUsing range of data\"", ")", "\n", "self", ".", "op_y_range", "=", "(", "np", ".", "nanmin", "(", "self", ".", "_My", ")", ",", "np", ".", "nanmax", "(", "self", ".", "_My", ")", ")", "\n", "\n", "\n", "", "", "", "if", "self", ".", "bins", ":", "\n", "\t\t\t", "if", "self", ".", "vector", ":", "\n", "#r_mx = (min(self._Mx), max(self._Mx))", "\n", "\t\t\t\t", "r_mx", "=", "self", ".", "op_x_range", "\n", "r_my", "=", "self", ".", "op_y_range", "\n", "#r_my = (min(self._My), max(self._My))", "\n", "self", ".", "inc_x", "=", "(", "r_mx", "[", "-", "1", "]", "-", "r_mx", "[", "0", "]", ")", "/", "self", ".", "bins", "\n", "self", ".", "inc_y", "=", "(", "r_my", "[", "-", "1", "]", "-", "r_my", "[", "0", "]", ")", "/", "self", ".", "bins", "\n", "self", ".", "inc", "=", "self", ".", "inc_x", "/", "10", "\n", "#r = (min(self._X), max(self._X))", "\n", "", "r", "=", "self", ".", "op_range", "\n", "self", ".", "inc", "=", "(", "r", "[", "-", "1", "]", "-", "r", "[", "0", "]", ")", "/", "self", ".", "bins", "\n", "", "else", ":", "\n", "\t\t\t", "try", ":", "\n", "\t\t\t\t", "assert", "self", ".", "inc", ">", "0", "\n", "assert", "self", ".", "inc_x", ">", "0", "\n", "assert", "self", ".", "inc_y", ">", "0", "\n", "", "except", "AssertionError", ":", "\n", "\t\t\t\t", "raise", "InputError", "(", "\"inc, inc_x, inc_y must be > 0\"", ",", "\" inc, inc_x, inc_y must be > 0\"", ")", "\n", "\n", "", "", "try", ":", "\n", "\t\t\t", "assert", "isinstance", "(", "self", ".", "dt", ",", "int", ")", "\n", "assert", "self", ".", "dt", ">=", "1", "\n", "if", "self", ".", "Dt", "is", "None", ":", "\n", "\t\t\t\t", "self", ".", "Dt", "=", "int", "(", "np", ".", "ceil", "(", "self", ".", "autocorrelation_time", "/", "10", ")", ")", "\n", "", "assert", "isinstance", "(", "self", ".", "Dt", ",", "int", ")", "and", "self", ".", "Dt", ">=", "1", "\n", "", "except", "AssertionError", ":", "\n", "\t\t\t", "raise", "InputError", "(", "\"dt and Dt must be int and >= 1\"", ",", "\"dt and Dt must be int and >= 1\"", ")", "\n", "\n", "#if not self._isValidSliderRange(self.slider_range):", "\n", "#\tself.slider_range = 'default'", "\n", "#\tprint(\"\\n[Warning] : Entered slider range is not in valid format. Using default range.\\nValid format <(slider_start, slider_stop, n_steps)>\\nAll values must be >= 1\\n\")", "\n", "\n", "", "if", "not", "self", ".", "_is_valid_slider_timescale_list", "(", "self", ".", "slider_timescales", ")", "and", "self", ".", "slider_timescales", "is", "not", "None", ":", "\n", "\t\t\t", "print", "(", "\"\\n[Warning] : Given slider timescale list is not valid, or contains invalid timescales\"", ")", "\n", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.InputError.__init__": [[342, 345], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "expression", ",", "message", ")", ":", "\n", "\t\t", "self", ".", "expression", "=", "expression", "\n", "self", ".", "message", "=", "message", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize.__init__": [[18, 27], ["int", "visualize.Visualize.__dict__.update", "pydaddy.metrics.Metrics.__init__", "seaborn.color_palette"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__"], ["def", "__init__", "(", "self", ",", "op_x", ",", "op_y", ",", "op", ",", "autocorrelation_time", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "op_x", "=", "op_x", "\n", "self", ".", "op_y", "=", "op_y", "\n", "self", ".", "op", "=", "op", "\n", "self", ".", "autocorrelation_time", "=", "int", "(", "autocorrelation_time", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "Metrics", ".", "__init__", "(", "self", ")", "\n", "\n", "self", ".", "_c_pallet", "=", "sns", ".", "color_palette", "(", "\"colorblind\"", ",", "as_cmap", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes": [[28, 52], ["ax.spines[].set_visible", "ax.spines[].set_visible", "ax.set_title", "ax.set_xlabel", "ax.set_ylabel"], "methods", ["None"], ["", "def", "_stylize_axes", "(", "self", ",", "\n", "ax", ",", "\n", "x_label", "=", "None", ",", "\n", "y_label", "=", "None", ",", "\n", "title", "=", "None", ",", "\n", "tick_size", "=", "20", ",", "\n", "title_size", "=", "20", ",", "\n", "label_size", "=", "20", ",", "\n", "label_pad", "=", "12", ")", ":", "\n", "        ", "\"\"\"\n        Beautify the plot axis\n        \"\"\"", "\n", "\n", "# Hide the top and right spines of the axis", "\n", "ax", ".", "spines", "[", "'top'", "]", ".", "set_visible", "(", "False", ")", "\n", "ax", ".", "spines", "[", "'right'", "]", ".", "set_visible", "(", "False", ")", "\n", "\n", "ax", ".", "set_title", "(", "title", ",", "fontsize", "=", "title_size", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "x_label", ",", "fontsize", "=", "label_size", ")", "#, labelpad=label_pad)", "\n", "ax", ".", "set_ylabel", "(", "y_label", ",", "fontsize", "=", "label_size", ")", "#, labelpad=label_pad)", "\n", "# ax.tick_params(axis='both', which='major', labelsize=tick_size)", "\n", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_summary": [[53, 434], ["plot_text.keys", "text.update", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.figure", "matplotlib.figure", "matplotlib.GridSpec", "matplotlib.GridSpec", "matplotlib.figure.add_subplot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.set_yticks", "visualize.Visualize._stylize_axes", "plt.figure.add_subplot.minorticks_on", "plt.figure.add_subplot.legend", "plt.figure.add_subplot.grid", "matplotlib.figure.add_subplot", "visualize.Visualize._plot_data", "visualize.Visualize._update_axis_range", "plt.figure.add_subplot.set_title", "matplotlib.figure.add_subplot", "visualize.Visualize._plot_data", "visualize.Visualize._update_axis_range", "plt.figure.add_subplot.set_title", "matplotlib.figure.add_subplot", "visualize.Visualize._plot_data", "visualize.Visualize._update_axis_range", "plt.figure.add_subplot.set_title", "matplotlib.figure.add_subplot", "visualize.Visualize._plot_data", "plt.figure.add_subplot.set_title", "matplotlib.figure.add_subplot", "visualize.Visualize._plot_data", "plt.figure.add_subplot.set_title", "matplotlib.figure.add_subplot", "visualize.Visualize._plot_data", "visualize.Visualize._update_axis_range", "plt.figure.add_subplot.set_title", "matplotlib.figure.add_subplot", "seaborn.distplot", "visualize.Visualize._stylize_axes", "matplotlib.figure.add_subplot", "visualize.Visualize._plot_3d_hisogram", "matplotlib.figure.add_subplot", "visualize.Visualize._ddsde._acf", "visualize.Visualize._ddsde._acf", "visualize.Visualize._ddsde._acf", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.legend", "visualize.Visualize._stylize_axes", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.figure", "matplotlib.figure", "matplotlib.figure.add_gridspec", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.set_ylim", "visualize.Visualize._stylize_axes", "visualize.Visualize._ddsde._acf", "plt.figure.add_subplot.plot", "visualize.Visualize._stylize_axes", "seaborn.distplot", "visualize.Visualize._stylize_axes", "plt.figure.add_subplot.errorbar", "visualize.Visualize._stylize_axes", "plt.figure.add_subplot.errorbar", "visualize.Visualize._stylize_axes", "text.keys", "print", "range", "range", "numpy.linspace().round", "max", "numpy.sqrt", "len", "len", "range", "min", "max", "plt.figure.add_subplot.plot", "plt.figure.add_subplot.plot", "max", "numpy.nanmax", "numpy.nanmax", "min", "min", "min", "min", "visualize.Visualize._ddsde.F", "visualize.Visualize._ddsde.G", "numpy.linspace", "numpy.nanmax", "numpy.nanmax", "len", "len", "len", "len", "min", "max", "numpy.nanmin", "numpy.nanmin", "numpy.nanmax", "numpy.nanmax"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._update_axis_range", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._update_axis_range", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._update_axis_range", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._update_axis_range", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_3d_hisogram", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes"], ["", "def", "_plot_summary", "(", "self", ",", "\n", "data", ",", "\n", "vector", "=", "True", ",", "\n", "kde", "=", "False", ",", "\n", "tick_size", "=", "12", ",", "\n", "title_size", "=", "15", ",", "\n", "label_size", "=", "15", ",", "\n", "label_pad", "=", "8", ",", "\n", "n_ticks", "=", "3", ",", "\n", "timeseries_start", "=", "0", ",", "\n", "timeseries_end", "=", "1000", ",", "\n", "**", "plot_text", ")", ":", "\n", "        ", "\"\"\"\n        Plots the summary chart\n        \"\"\"", "\n", "text", "=", "{", "\n", "'timeseries_title'", ":", "'Time Series'", ",", "\n", "'timeseries_xlabel'", ":", "'Time index'", ",", "\n", "'timeseries_ylabel'", ":", "'M'", ",", "\n", "'hist_title'", ":", "''", ",", "\n", "'hist_xlabel'", ":", "'M'", ",", "\n", "'hist_ylabel'", ":", "'Frequency'", ",", "\n", "'drift_title'", ":", "'Drift'", ",", "\n", "'drift_xlabel'", ":", "'M'", ",", "\n", "'drift_ylabel'", ":", "'F'", ",", "\n", "'diffusion_title'", ":", "'Diffusion'", ",", "\n", "'diffusion_xlabel'", ":", "'M'", ",", "\n", "'diffusion_ylabel'", ":", "'$G$'", ",", "\n", "\n", "'timeseries1_title'", ":", "'Time Series'", ",", "\n", "'timeseries1_ylabel'", ":", "'$M_{x}, M_{y}$'", ",", "\n", "'timeseries1_xlabel'", ":", "''", ",", "\n", "'timeseries1_legend1'", ":", "'$M_{x}$'", ",", "\n", "'timeseries1_legend2'", ":", "'$M_{y}$'", ",", "\n", "'timeseries2_title'", ":", "''", ",", "\n", "'timeseries2_xlabel'", ":", "'Time index'", ",", "\n", "'timeseries2_ylabel'", ":", "'$|M|$'", ",", "\n", "\n", "'2dhist1_title'", ":", "''", ",", "\n", "'2dhist1_xlabel'", ":", "'$M_{x}$'", ",", "\n", "'2dhist1_ylabel'", ":", "'Frequency'", ",", "\n", "\n", "'2dhist2_title'", ":", "''", ",", "\n", "'2dhist2_xlabel'", ":", "'$M_{y}$'", ",", "\n", "'2dhist2_ylabel'", ":", "'Frequency'", ",", "\n", "\n", "'2dhist3_title'", ":", "''", ",", "\n", "'2dhist3_xlabel'", ":", "'$|M|$'", ",", "\n", "'2dhist3_ylabel'", ":", "'Frequency'", ",", "\n", "\n", "'3dhist_title'", ":", "''", ",", "\n", "'3dhist_xlabel'", ":", "'$M_{x}$'", ",", "\n", "'3dhist_ylabel'", ":", "'$M_{y}$'", ",", "\n", "'3dhist_zlabel'", ":", "'Frequency'", ",", "\n", "\n", "'autocorr_title'", ":", "'Autocorrelation'", ",", "\n", "'autocorr_xlabel'", ":", "''", ",", "\n", "'autocorr_ylabel_1d'", ":", "'$\\\\rho_{x}$'", ",", "\n", "'autocorr_ylabel_2d'", ":", "'Autocorrelation '", ",", "\n", "\n", "'driftx_title'", ":", "'Drift X'", ",", "\n", "'driftx_xlabel'", ":", "'$M_{x}$'", ",", "\n", "'driftx_ylabel'", ":", "'$M_{y}$'", ",", "\n", "'driftx_zlabel'", ":", "'$F_{1}$'", ",", "\n", "\n", "'drifty_title'", ":", "'Drift Y'", ",", "\n", "'drifty_xlabel'", ":", "'$M_{x}$'", ",", "\n", "'drifty_ylabel'", ":", "'$M_{y}$'", ",", "\n", "'drifty_zlabel'", ":", "'$F_{2}$'", ",", "\n", "\n", "'diffusionx_title'", ":", "'Diffusion X'", ",", "\n", "'diffusionx_xlabel'", ":", "'$M_{x}$'", ",", "\n", "'diffusionx_ylabel'", ":", "'$M_{y}$'", ",", "\n", "'diffusionx_zlabel'", ":", "'$G_{11}$'", ",", "\n", "\n", "'diffusiony_title'", ":", "'Diffusion Y'", ",", "\n", "'diffusiony_xlabel'", ":", "'$M_{x}$'", ",", "\n", "'diffusiony_ylabel'", ":", "'$M_{y}$'", ",", "\n", "'diffusiony_zlabel'", ":", "'$G_{22}$'", ",", "\n", "\n", "'diffusionxy_title'", ":", "'Diffusion XY'", ",", "\n", "'diffusionxy_xlabel'", ":", "'$M_{x}$'", ",", "\n", "'diffusionxy_ylabel'", ":", "'$M_{y}$'", ",", "\n", "'diffusionxy_zlabel'", ":", "'$G_{12}$'", ",", "\n", "\n", "'diffusionyx_title'", ":", "'Diffusion YX'", ",", "\n", "'diffusionyx_xlabel'", ":", "'$M_{x}$'", ",", "\n", "'diffusionyx_ylabel'", ":", "'$M_{y}$'", ",", "\n", "'diffusionyx_zlabel'", ":", "'$G_{21}$'", ",", "\n", "\n", "}", "\n", "for", "k", "in", "plot_text", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "text", ".", "keys", "(", ")", ":", "\n", "                ", "print", "(", "\"{} not a valid plot text key\"", ".", "format", "(", "k", ")", ")", "\n", "", "", "text", ".", "update", "(", "plot_text", ")", "\n", "if", "vector", ":", "\n", "            ", "Mx", ",", "My", ",", "driftX", ",", "driftY", ",", "diffX", ",", "diffY", ",", "diffXY", "=", "data", "\n", "# M = np.sqrt(Mx ** 2 + My ** 2)  # Not plotting |M| anymore.", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "9", ")", ",", "dpi", "=", "100", ")", "\n", "gs", "=", "gridspec", ".", "GridSpec", "(", "nrows", "=", "3", ",", "ncols", "=", "4", ",", "width_ratios", "=", "(", "2", ",", "2", ",", "3", ",", "3", ")", ",", "figure", "=", "fig", ")", "\n", "\n", "# Mx, My timeseries", "\n", "Mx_axis", "=", "fig", ".", "add_subplot", "(", "gs", "[", "0", ",", "0", ":", "2", "]", ")", "\n", "Mx_axis", ".", "plot", "(", "range", "(", "timeseries_start", ",", "timeseries_end", ")", ",", "Mx", "[", "timeseries_start", ":", "timeseries_end", "]", ",", "\n", "label", "=", "text", "[", "'timeseries1_legend1'", "]", ")", "\n", "Mx_axis", ".", "plot", "(", "range", "(", "timeseries_start", ",", "timeseries_end", ")", ",", "My", "[", "timeseries_start", ":", "timeseries_end", "]", ",", "color", "=", "'red'", ",", "\n", "label", "=", "text", "[", "'timeseries1_legend2'", "]", ")", "\n", "# Mx_axis.set_xticks([])", "\n", "Mx_axis", ".", "set_yticks", "(", "\n", "np", ".", "linspace", "(", "min", "(", "np", ".", "nanmin", "(", "Mx", ")", ",", "np", ".", "nanmin", "(", "My", ")", ")", ",", "max", "(", "np", ".", "nanmax", "(", "Mx", ")", ",", "np", ".", "nanmax", "(", "My", ")", ")", ",", "n_ticks", ")", ".", "round", "(", "2", ")", ")", "\n", "self", ".", "_stylize_axes", "(", "Mx_axis", ",", "\n", "x_label", "=", "text", "[", "'timeseries1_xlabel'", "]", ",", "# '',", "\n", "y_label", "=", "text", "[", "'timeseries1_ylabel'", "]", ",", "# '$M_{x}, M_{y}$',", "\n", "title", "=", "text", "[", "'timeseries1_title'", "]", ",", "# 'Time Series',", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "Mx_axis", ".", "minorticks_on", "(", ")", "\n", "Mx_axis", ".", "legend", "(", "loc", "=", "\"best\"", ")", "\n", "Mx_axis", ".", "grid", "(", "\"on\"", ")", "\n", "\n", "# |M| timeseries.", "\n", "# My_axis = fig.add_subplot(gs[1, 0:2])", "\n", "# My_axis.plot(range(timeseries_start, timeseries_end), M[timeseries_start:timeseries_end])", "\n", "# My_axis.set_yticks(np.linspace(min(M), max(M), n_ticks).round(2))", "\n", "# self._stylize_axes(My_axis,", "\n", "#                    x_label=text['timeseries2_xlabel'],  # 'Time Index',", "\n", "#                    y_label=text['timeseries2_ylabel'],  # '$|M|$',", "\n", "#                    title=text['timeseries2_title'],  # '',", "\n", "#                    tick_size=tick_size,", "\n", "#                    title_size=title_size,", "\n", "#                    label_size=label_size,", "\n", "#                    label_pad=label_pad)", "\n", "# My_axis.minorticks_on()", "\n", "# My_axis.grid(\"on\")", "\n", "\n", "driftX_axis", "=", "fig", ".", "add_subplot", "(", "gs", "[", "0", ",", "2", "]", ",", "projection", "=", "'3d'", ")", "\n", "_", ",", "driftX_axis", "=", "self", ".", "_plot_data", "(", "driftX", ",", "\n", "ax", "=", "driftX_axis", ",", "\n", "title", "=", "text", "[", "'driftx_title'", "]", ",", "# \"Drift X\",", "\n", "x_label", "=", "text", "[", "'driftx_xlabel'", "]", ",", "# '$m_{x}$',", "\n", "y_label", "=", "text", "[", "'driftx_ylabel'", "]", ",", "# '$m_{y}$',", "\n", "z_label", "=", "text", "[", "'driftx_zlabel'", "]", ",", "# '$F_{1}$',", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "\n", "self", ".", "_update_axis_range", "(", "driftX_axis", ",", "driftX", ",", "both", "=", "True", ")", "\n", "driftX_axis", ".", "set_title", "(", "text", "[", "'driftx_title'", "]", ",", "size", "=", "title_size", ",", "y", "=", "1.0", ")", "\n", "\n", "driftY_axis", "=", "fig", ".", "add_subplot", "(", "gs", "[", "0", ",", "3", "]", ",", "projection", "=", "'3d'", ")", "\n", "_", ",", "driftY_axis", "=", "self", ".", "_plot_data", "(", "driftY", ",", "\n", "ax", "=", "driftY_axis", ",", "\n", "title", "=", "text", "[", "'drifty_title'", "]", ",", "# \"Drift Y\",", "\n", "x_label", "=", "text", "[", "'drifty_xlabel'", "]", ",", "# '$m_{x}$',", "\n", "y_label", "=", "text", "[", "'drifty_ylabel'", "]", ",", "# '$m_{y}$',", "\n", "z_label", "=", "text", "[", "'drifty_zlabel'", "]", ",", "# '$F_{2}$',", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "\n", "self", ".", "_update_axis_range", "(", "driftY_axis", ",", "driftY", ",", "both", "=", "True", ")", "\n", "driftY_axis", ".", "set_title", "(", "text", "[", "'drifty_title'", "]", ",", "size", "=", "title_size", ",", "y", "=", "1.0", ")", "\n", "\n", "diffX_axis", "=", "fig", ".", "add_subplot", "(", "gs", "[", "1", ",", "2", "]", ",", "projection", "=", "'3d'", ")", "\n", "_", ",", "diffX_axis", "=", "self", ".", "_plot_data", "(", "diffX", ",", "\n", "ax", "=", "diffX_axis", ",", "\n", "title", "=", "text", "[", "'diffusionx_title'", "]", ",", "# \"Diffusion X\",", "\n", "x_label", "=", "text", "[", "'diffusionx_xlabel'", "]", ",", "# '$m_{x}$',", "\n", "y_label", "=", "text", "[", "'diffusionx_ylabel'", "]", ",", "# '$m_{y}$',", "\n", "z_label", "=", "text", "[", "'diffusionx_zlabel'", "]", ",", "# '$G_{11}$',", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "\n", "self", ".", "_update_axis_range", "(", "diffX_axis", ",", "diffX", ",", "both", "=", "False", ")", "\n", "diffX_axis", ".", "set_title", "(", "text", "[", "'diffusionx_title'", "]", ",", "size", "=", "title_size", ",", "y", "=", "1.0", ")", "\n", "\n", "zlim", "=", "(", "-", "max", "(", "np", ".", "nanmax", "(", "diffX", ")", ",", "np", ".", "nanmax", "(", "diffY", ")", ")", ",", "max", "(", "np", ".", "nanmax", "(", "diffX", ")", ",", "np", ".", "nanmax", "(", "diffY", ")", ")", ")", "\n", "\n", "diffXY_axis", "=", "fig", ".", "add_subplot", "(", "gs", "[", "1", ",", "3", "]", ",", "projection", "=", "'3d'", ")", "\n", "_", ",", "diffXY_axis", "=", "self", ".", "_plot_data", "(", "diffXY", ",", "\n", "ax", "=", "diffXY_axis", ",", "\n", "title", "=", "text", "[", "'diffusionxy_title'", "]", ",", "# \"Diffusion Y\",", "\n", "x_label", "=", "text", "[", "'diffusionxy_xlabel'", "]", ",", "# '$m_{x}$',", "\n", "y_label", "=", "text", "[", "'diffusionxy_ylabel'", "]", ",", "# '$m_{y}$',", "\n", "z_label", "=", "text", "[", "'diffusionxy_zlabel'", "]", ",", "# '$G_{22}$',", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ",", "\n", "zlim", "=", "zlim", ")", "\n", "\n", "diffXY_axis", ".", "set_title", "(", "text", "[", "'diffusionxy_title'", "]", ",", "size", "=", "title_size", ",", "y", "=", "1.0", ")", "\n", "\n", "\n", "# self._update_axis_range(diffXY_axis, diffXY, both=True)", "\n", "\n", "diffYX_axis", "=", "fig", ".", "add_subplot", "(", "gs", "[", "2", ",", "2", "]", ",", "projection", "=", "'3d'", ")", "\n", "_", ",", "diffYX_axis", "=", "self", ".", "_plot_data", "(", "diffXY", ",", "\n", "ax", "=", "diffYX_axis", ",", "\n", "title", "=", "text", "[", "'diffusionyx_title'", "]", ",", "# \"Diffusion Y\",", "\n", "x_label", "=", "text", "[", "'diffusionyx_xlabel'", "]", ",", "# '$m_{x}$',", "\n", "y_label", "=", "text", "[", "'diffusionyx_ylabel'", "]", ",", "# '$m_{y}$',", "\n", "z_label", "=", "text", "[", "'diffusionyx_zlabel'", "]", ",", "# '$G_{22}$',", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ",", "\n", "zlim", "=", "zlim", ")", "\n", "\n", "# self._update_axis_range(diffYX_axis, diffXY, both=True)", "\n", "diffYX_axis", ".", "set_title", "(", "text", "[", "'diffusionyx_title'", "]", ",", "size", "=", "title_size", ",", "y", "=", "1.0", ")", "\n", "\n", "diffY_axis", "=", "fig", ".", "add_subplot", "(", "gs", "[", "2", ",", "3", "]", ",", "projection", "=", "'3d'", ")", "\n", "_", ",", "diffY_axis", "=", "self", ".", "_plot_data", "(", "diffY", ",", "\n", "ax", "=", "diffY_axis", ",", "\n", "title", "=", "text", "[", "'diffusiony_title'", "]", ",", "# \"Diffusion Y\",", "\n", "x_label", "=", "text", "[", "'diffusiony_xlabel'", "]", ",", "# '$m_{x}$',", "\n", "y_label", "=", "text", "[", "'diffusiony_ylabel'", "]", ",", "# '$m_{y}$',", "\n", "z_label", "=", "text", "[", "'diffusiony_zlabel'", "]", ",", "# '$G_{22}$',", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "\n", "self", ".", "_update_axis_range", "(", "diffY_axis", ",", "diffY", ",", "both", "=", "False", ")", "\n", "diffY_axis", ".", "set_title", "(", "text", "[", "'diffusiony_title'", "]", ",", "size", "=", "title_size", ",", "y", "=", "1.0", ")", "\n", "\n", "# Histogram of |M|", "\n", "distM_axis", "=", "fig", ".", "add_subplot", "(", "gs", "[", "2", ",", "1", "]", ")", "\n", "distM_axis", "=", "sns", ".", "distplot", "(", "np", ".", "sqrt", "(", "Mx", "**", "2", "+", "My", "**", "2", ")", ",", "kde", "=", "kde", ",", "ax", "=", "distM_axis", ",", "norm_hist", "=", "True", ")", "\n", "# ticks = [str(i) + \"K\" for i in (np.array(distM_axis.get_yticks()) / 1000).round(1)]", "\n", "# distM_axis.set_yticklabels(ticks)", "\n", "self", ".", "_stylize_axes", "(", "distM_axis", ",", "\n", "x_label", "=", "text", "[", "'2dhist3_xlabel'", "]", ",", "# '|M|',", "\n", "y_label", "=", "text", "[", "'2dhist3_ylabel'", "]", ",", "# 'Frequency',", "\n", "title", "=", "text", "[", "'2dhist3_title'", "]", ",", "# '',", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "\n", "# Histogram of M", "\n", "pdf_axis", "=", "fig", ".", "add_subplot", "(", "gs", "[", "2", ",", "0", "]", ",", "projection", "=", "'3d'", ")", "\n", "pdf_axis", "=", "self", ".", "_plot_3d_hisogram", "(", "Mx", ",", "My", ",", "ax", "=", "pdf_axis", ",", "title", "=", "''", ",", "title_size", "=", "title_size", ",", "tick_size", "=", "tick_size", ",", "\n", "label_size", "=", "label_size", ",", "label_pad", "=", "label_pad", ")", "\n", "\n", "# Autocorrelation of Mx, My and |M|", "\n", "ac_axis", "=", "fig", ".", "add_subplot", "(", "gs", "[", "1", ",", "0", ":", "2", "]", ")", "\n", "\n", "lags", ",", "acf_x", "=", "self", ".", "_ddsde", ".", "_acf", "(", "Mx", ",", "t_lag", "=", "min", "(", "timeseries_end", ",", "len", "(", "Mx", ")", ")", ")", "\n", "_", ",", "acf_y", "=", "self", ".", "_ddsde", ".", "_acf", "(", "My", ",", "t_lag", "=", "min", "(", "timeseries_end", ",", "len", "(", "My", ")", ")", ")", "\n", "_", ",", "acf_m", "=", "self", ".", "_ddsde", ".", "_acf", "(", "(", "Mx", "**", "2", "+", "My", "**", "2", ")", ",", "t_lag", "=", "min", "(", "timeseries_end", ",", "len", "(", "Mx", ")", ")", ")", "\n", "\n", "ac_axis", ".", "plot", "(", "lags", ",", "acf_x", ",", "label", "=", "'$\\\\rho_{M_x}$'", ")", "\n", "ac_axis", ".", "plot", "(", "lags", ",", "acf_y", ",", "color", "=", "'r'", ",", "label", "=", "'$\\\\rho_{M_y}$'", ")", "\n", "ac_axis", ".", "plot", "(", "lags", ",", "acf_m", ",", "color", "=", "'k'", ",", "label", "=", "'$\\\\rho_{|M|^2}$'", ")", "\n", "ac_axis", ".", "legend", "(", ")", "\n", "self", ".", "_stylize_axes", "(", "ac_axis", ",", "\n", "x_label", "=", "text", "[", "'autocorr_xlabel'", "]", ",", "\n", "y_label", "=", "text", "[", "'autocorr_ylabel_2d'", "]", ",", "\n", "title", "=", "text", "[", "'autocorr_title'", "]", ",", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "", "else", ":", "\n", "# Time Series", "\n", "            ", "M", ",", "drift", ",", "diff", ",", "drift_ebar", ",", "diff_ebar", "=", "data", "\n", "if", "timeseries_end", ">", "len", "(", "M", ")", ":", "\n", "                ", "timeseries_end", "=", "len", "(", "M", ")", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "gs", "=", "fig", ".", "add_gridspec", "(", "4", ",", "2", ")", "\n", "\n", "ax_ts", "=", "fig", ".", "add_subplot", "(", "gs", "[", "0", ",", "0", "]", ")", "\n", "ax_ac", "=", "fig", ".", "add_subplot", "(", "gs", "[", "1", ",", "0", "]", ")", "\n", "ax_dist", "=", "fig", ".", "add_subplot", "(", "gs", "[", "2", ":", ",", "0", "]", ")", "\n", "ax_drift", "=", "fig", ".", "add_subplot", "(", "gs", "[", "0", ":", "2", ",", "1", "]", ")", "\n", "ax_diff", "=", "fig", ".", "add_subplot", "(", "gs", "[", "2", ":", ",", "1", "]", ")", "\n", "\n", "M_", "=", "M", "[", "timeseries_start", ":", "timeseries_end", "]", "\n", "ax_ts", ".", "plot", "(", "range", "(", "timeseries_start", ",", "timeseries_end", ")", ",", "M_", ")", "\n", "ax_ts", ".", "set_ylim", "(", "min", "(", "M_", ")", ",", "max", "(", "M_", ")", ")", "\n", "self", ".", "_stylize_axes", "(", "ax_ts", ",", "\n", "x_label", "=", "text", "[", "'timeseries_xlabel'", "]", ",", "# 'Time Index',", "\n", "y_label", "=", "text", "[", "'timeseries_ylabel'", "]", ",", "# '|M|',", "\n", "title", "=", "text", "[", "'timeseries_title'", "]", ",", "# 'Time Series',", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "\n", "lags", ",", "acf", "=", "self", ".", "_ddsde", ".", "_acf", "(", "M", ",", "t_lag", "=", "min", "(", "timeseries_end", ",", "len", "(", "M", ")", ")", ")", "\n", "ax_ac", ".", "plot", "(", "lags", ",", "acf", ")", "\n", "self", ".", "_stylize_axes", "(", "ax_ac", ",", "\n", "x_label", "=", "text", "[", "'autocorr_xlabel'", "]", ",", "\n", "y_label", "=", "text", "[", "'autocorr_ylabel_1d'", "]", ",", "\n", "title", "=", "text", "[", "'autocorr_title'", "]", ",", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "\n", "# TODO Autocorr", "\n", "\n", "# Dist |M|", "\n", "sns", ".", "distplot", "(", "M", ",", "kde", "=", "kde", ",", "ax", "=", "ax_dist", ")", "\n", "# ax[1][0].set_xticks(np.linspace(min(M), max(M), 5))", "\n", "self", ".", "_stylize_axes", "(", "ax_dist", ",", "\n", "x_label", "=", "text", "[", "'hist_xlabel'", "]", ",", "# 'M',", "\n", "y_label", "=", "text", "[", "'hist_ylabel'", "]", ",", "# 'Frequency',", "\n", "title", "=", "text", "[", "'hist_title'", "]", ",", "# '',", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "\n", "# Drift", "\n", "# p_drift, _ = self._fit_poly(self.op, drift, drift_order)", "\n", "# ax[0][1].scatter(self.op, drift, marker='.', label='drift')", "\n", "ax_drift", ".", "errorbar", "(", "self", ".", "op", ",", "drift", ",", "yerr", "=", "drift_ebar", ",", "fmt", "=", "'o'", ",", "label", "=", "'drift'", ")", "\n", "if", "self", ".", "_ddsde", ".", "F", ":", "\n", "                ", "ax_drift", ".", "plot", "(", "self", ".", "op", ",", "self", ".", "_ddsde", ".", "F", "(", "self", ".", "op", ")", ")", "\n", "", "\"\"\"\n            ax[0][1].plot(self.op,\n                             p_drift(self.op),\n                             #marker='.',\n                             alpha=0.3,\n                             color='black',\n                             label='poly_fit')\n            \"\"\"", "\n", "# ax[0][1].set_xticks(np.linspace(min(self.op), max(self.op), 5))", "\n", "# ax[0][1].set_yticks(np.linspace(min(drift), max(drift), 5))", "\n", "self", ".", "_stylize_axes", "(", "ax_drift", ",", "\n", "x_label", "=", "text", "[", "'drift_xlabel'", "]", ",", "# 'm',", "\n", "y_label", "=", "text", "[", "'drift_ylabel'", "]", ",", "# 'F',", "\n", "title", "=", "text", "[", "'drift_title'", "]", ",", "# 'Drift',", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "# ax[0][1].legend(loc=1, frameon=False, fontsize=tick_size)", "\n", "# Diffusion", "\n", "# p_diff, _ = self._fit_poly(self.op, diff, diff_order)", "\n", "# ax[1][1].scatter(self.op, diff, marker='.', label='diffusion')", "\n", "ax_diff", ".", "errorbar", "(", "self", ".", "op", ",", "diff", ",", "yerr", "=", "diff_ebar", ",", "fmt", "=", "'o'", ",", "label", "=", "'diffusion'", ")", "\n", "if", "self", ".", "_ddsde", ".", "G", ":", "\n", "                ", "ax_diff", ".", "plot", "(", "self", ".", "op", ",", "self", ".", "_ddsde", ".", "G", "(", "self", ".", "op", ")", ")", "\n", "", "\"\"\"\n            ax[1][1].plot(self.op,\n                             p_diff(self.op),\n                             #marker='.',\n                             alpha=0.3,\n                             color='black',\n                             label='poly_fit')\n            \"\"\"", "\n", "# ax[1][1].set_xticks(np.linspace(min(self.op), max(self.op), 5))", "\n", "# ax[1][1].set_yticks(np.linspace(min(diff), max(diff), 5))", "\n", "self", ".", "_stylize_axes", "(", "ax_diff", ",", "\n", "x_label", "=", "text", "[", "'diffusion_xlabel'", "]", ",", "# 'm',", "\n", "y_label", "=", "text", "[", "'diffusion_ylabel'", "]", ",", "# '$G^{2}$',", "\n", "title", "=", "text", "[", "'diffusion_title'", "]", ",", "# 'Diffusion',", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "# ax[1][1].legend(loc=1, frameon=False, fontsize=tick_size)", "\n", "\n", "# plt.tight_layout()", "\n", "# plt.subplots_adjust(bottom=0.3)", "\n", "# fig.add_axes([0,0,1,1]).axis(\"off\")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "# return fig", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._update_axis_range": [[436, 445], ["ax.set_zlim3d", "numpy.nanquantile", "numpy.nanquantile"], "methods", ["None"], ["", "def", "_update_axis_range", "(", "self", ",", "ax", ",", "x", ",", "both", "=", "True", ")", ":", "\n", "        ", "quantiles", "=", "(", "np", ".", "nanquantile", "(", "x", ",", "0.01", ")", ",", "np", ".", "nanquantile", "(", "x", ",", "0.99", ")", ")", "\n", "q_range", "=", "quantiles", "[", "1", "]", "-", "quantiles", "[", "0", "]", "\n", "if", "both", ":", "\n", "            ", "ax_range", "=", "(", "quantiles", "[", "0", "]", "-", "0.05", "*", "q_range", ",", "quantiles", "[", "1", "]", "+", "0.05", "*", "q_range", ")", "\n", "", "else", ":", "\n", "            ", "ax_range", "=", "(", "0", ",", "quantiles", "[", "1", "]", "+", "0.1", "*", "q_range", ")", "\n", "\n", "", "ax", ".", "set_zlim3d", "(", "ax_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_timeseries": [[447, 521], ["plot_text.keys", "text.update", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.subplots", "matplotlib.subplots", "ax[].plot", "ax[].set_xticks", "ax[].set_yticks", "visualize.Visualize._stylize_axes", "ax[].plot", "ax[].set_xticks", "ax[].set_yticks", "visualize.Visualize._stylize_axes", "numpy.sqrt", "ax[].plot", "ax[].set_yticks", "visualize.Visualize._stylize_axes", "matplotlib.subplots", "matplotlib.subplots", "ax.plot", "visualize.Visualize._stylize_axes", "ax.set_yticks", "text.keys", "print", "len", "len", "range", "numpy.linspace().round", "range", "numpy.linspace().round", "range", "numpy.linspace().round", "len", "len", "range", "numpy.linspace().round", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "min", "max", "min", "max", "min", "max", "min", "max"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes"], ["", "def", "_plot_timeseries", "(", "self", ",", "\n", "timeseries", ",", "\n", "vector", ",", "\n", "start", "=", "0", ",", "\n", "stop", "=", "1000", ",", "\n", "n_ticks", "=", "3", ",", "\n", "dpi", "=", "150", ",", "\n", "tick_size", "=", "12", ",", "\n", "title_size", "=", "14", ",", "\n", "label_size", "=", "14", ",", "\n", "label_pad", "=", "0", ",", "\n", "**", "plot_text", ")", ":", "\n", "        ", "\"\"\"\n        Plots timeseries figure\n        \"\"\"", "\n", "text", "=", "{", "\n", "'timeseries_title'", ":", "'Time Series'", ",", "\n", "'timeseries_xlabel'", ":", "'Time Index'", ",", "\n", "'timeseries_ylabel'", ":", "'M'", ",", "\n", "\n", "'timeseries1_title'", ":", "'Time Series'", ",", "\n", "'timeseries1_xlabel'", ":", "''", ",", "\n", "'timeseries1_ylabel'", ":", "'$M_{x}$'", ",", "\n", "\n", "'timeseries2_title'", ":", "''", ",", "\n", "'timeseries2_xlabel'", ":", "''", ",", "\n", "'timeseries2_ylabel'", ":", "'$M_{y}$'", ",", "\n", "\n", "'timeseries3_title'", ":", "''", ",", "\n", "'timeseries3_xlabel'", ":", "''", ",", "\n", "'timeseries3_ylabel'", ":", "'$|M|$'", "\n", "}", "\n", "for", "k", "in", "plot_text", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "text", ".", "keys", "(", ")", ":", "\n", "                ", "print", "(", "\"{} not a valid plot text key\"", ".", "format", "(", "k", ")", ")", "\n", "", "", "text", ".", "update", "(", "plot_text", ")", "\n", "if", "vector", ":", "\n", "            ", "Mx", ",", "My", "=", "timeseries", "\n", "if", "stop", ">", "len", "(", "Mx", ")", ":", "\n", "                ", "stop", "=", "len", "(", "Mx", ")", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "3", ",", "ncols", "=", "1", ",", "dpi", "=", "150", ",", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "ax", "[", "0", "]", ".", "plot", "(", "range", "(", "start", ",", "stop", ")", ",", "Mx", "[", "start", ":", "stop", "]", ",", "linewidth", "=", "1", ")", "\n", "ax", "[", "0", "]", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", "[", "0", "]", ".", "set_yticks", "(", "np", ".", "linspace", "(", "min", "(", "Mx", ")", ",", "max", "(", "Mx", ")", ",", "n_ticks", ")", ".", "round", "(", "2", ")", ")", "\n", "self", ".", "_stylize_axes", "(", "ax", "[", "0", "]", ",", "x_label", "=", "text", "[", "'timeseries1_xlabel'", "]", ",", "y_label", "=", "text", "[", "'timeseries1_ylabel'", "]", ",", "\n", "title", "=", "text", "[", "'timeseries1_title'", "]", ",", "label_size", "=", "label_size", ",", "title_size", "=", "title_size", ",", "\n", "tick_size", "=", "tick_size", ")", "\n", "\n", "ax", "[", "1", "]", ".", "plot", "(", "range", "(", "start", ",", "stop", ")", ",", "My", "[", "start", ":", "stop", "]", ",", "linewidth", "=", "1", ")", "\n", "ax", "[", "1", "]", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", "[", "1", "]", ".", "set_yticks", "(", "np", ".", "linspace", "(", "min", "(", "My", ")", ",", "max", "(", "My", ")", ",", "n_ticks", ")", ".", "round", "(", "2", ")", ")", "\n", "self", ".", "_stylize_axes", "(", "ax", "[", "1", "]", ",", "x_label", "=", "text", "[", "'timeseries2_xlabel'", "]", ",", "y_label", "=", "text", "[", "'timeseries2_ylabel'", "]", ",", "\n", "title", "=", "text", "[", "'timeseries2_title'", "]", ",", "label_size", "=", "label_size", ",", "tick_size", "=", "tick_size", ")", "\n", "\n", "M", "=", "np", ".", "sqrt", "(", "Mx", "**", "2", "+", "My", "**", "2", ")", "\n", "ax", "[", "2", "]", ".", "plot", "(", "range", "(", "start", ",", "stop", ")", ",", "M", "[", "start", ":", "stop", "]", ",", "linewidth", "=", "1", ")", "\n", "ax", "[", "2", "]", ".", "set_yticks", "(", "np", ".", "linspace", "(", "min", "(", "M", ")", ",", "max", "(", "M", ")", ",", "n_ticks", ")", ".", "round", "(", "2", ")", ")", "\n", "self", ".", "_stylize_axes", "(", "ax", "[", "2", "]", ",", "x_label", "=", "text", "[", "'timeseries3_xlabel'", "]", ",", "y_label", "=", "text", "[", "'timeseries3_ylabel'", "]", ",", "\n", "title", "=", "text", "[", "'timeseries3_title'", "]", ",", "label_size", "=", "label_size", ",", "tick_size", "=", "tick_size", ")", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "Mx", "=", "timeseries", "[", "0", "]", "\n", "if", "stop", ">", "len", "(", "Mx", ")", ":", "\n", "                ", "stop", "=", "len", "(", "Mx", ")", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "dpi", "=", "150", ",", "figsize", "=", "(", "6", ",", "3", ")", ")", "\n", "ax", ".", "plot", "(", "range", "(", "start", ",", "stop", ")", ",", "Mx", "[", "start", ":", "stop", "]", ",", "linewidth", "=", "1", ")", "\n", "self", ".", "_stylize_axes", "(", "ax", ",", "x_label", "=", "text", "[", "'timeseries_xlabel'", "]", ",", "y_label", "=", "text", "[", "'timeseries_ylabel'", "]", ",", "\n", "title", "=", "text", "[", "'timeseries_title'", "]", ",", "tick_size", "=", "tick_size", ",", "label_size", "=", "label_size", ",", "\n", "title_size", "=", "title_size", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "linspace", "(", "min", "(", "Mx", ")", ",", "max", "(", "Mx", ")", ",", "n_ticks", ")", ".", "round", "(", "2", ")", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_histograms": [[522, 623], ["plot_text.keys", "text.update", "matplotlib.tight_layout", "matplotlib.tight_layout", "numpy.sqrt", "matplotlib.subplots", "matplotlib.subplots", "matplotlib.subplots_adjust", "matplotlib.subplots_adjust", "seaborn.distplot", "visualize.Visualize._stylize_axes", "seaborn.distplot", "visualize.Visualize._stylize_axes", "seaborn.distplot", "visualize.Visualize._stylize_axes", "matplotlib.subplots", "matplotlib.subplots", "seaborn.distplot", "visualize.Visualize._stylize_axes", "ax[].set_yticklabels", "seaborn.distplot", "visualize.Visualize._stylize_axes", "ax[].set_yticklabels", "text.keys", "print", "[].hist2d", "matplotlib.colorbar", "matplotlib.colorbar", "visualize.Visualize._stylize_axes", "[].remove", "fig.add_subplot", "[].set_title", "visualize.Visualize._plot_3d_hisogram", "numpy.sqrt", "str", "str", "numpy.array", "numpy.array", "ax[].get_yticks", "ax[].get_yticks"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_3d_hisogram"], ["", "def", "_plot_histograms", "(", "self", ",", "\n", "timeseries", ",", "\n", "vector", ",", "\n", "heatmap", "=", "False", ",", "\n", "dpi", "=", "150", ",", "\n", "kde", "=", "False", ",", "\n", "title_size", "=", "14", ",", "\n", "label_size", "=", "15", ",", "\n", "tick_size", "=", "12", ",", "\n", "label_pad", "=", "8", ",", "\n", "**", "plot_text", ")", ":", "\n", "        ", "\"\"\"\n        Plot histogram figures\n        \"\"\"", "\n", "\n", "text", "=", "{", "\n", "'hist_title'", ":", "''", ",", "\n", "'hist_xlabel'", ":", "'M'", ",", "\n", "'hist_ylabel'", ":", "'Frequency'", ",", "\n", "\n", "'hist1_title'", ":", "''", ",", "\n", "'hist1_xlabel'", ":", "'$M_{x}$'", ",", "\n", "'hist1_ylabel'", ":", "'Frequency'", ",", "\n", "\n", "'hist2_title'", ":", "''", ",", "\n", "'hist2_xlabel'", ":", "'$M_{y}$'", ",", "\n", "'hist2_ylabel'", ":", "'Frequency'", ",", "\n", "\n", "'hist3_title'", ":", "''", ",", "\n", "'hist3_xlabel'", ":", "'$|M|$'", ",", "\n", "'hist3_ylabel'", ":", "'Frequency'", ",", "\n", "\n", "'hist4_title'", ":", "''", ",", "\n", "'hist4_xlabel'", ":", "'$M_{x}$'", ",", "\n", "'hist4_ylabel'", ":", "'$M_{y}$'", ",", "\n", "'hist4_zlabel'", ":", "'Frequency'", "\n", "}", "\n", "for", "k", "in", "plot_text", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "text", ".", "keys", "(", ")", ":", "\n", "                ", "print", "(", "\"{} not a valid plot text key\"", ".", "format", "(", "k", ")", ")", "\n", "", "", "text", ".", "update", "(", "plot_text", ")", "\n", "if", "vector", ":", "\n", "            ", "Mx", ",", "My", "=", "timeseries", "\n", "M", "=", "np", ".", "sqrt", "(", "Mx", "**", "2", "+", "My", "**", "2", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "2", ",", "ncols", "=", "2", ",", "dpi", "=", "150", ",", "figsize", "=", "(", "10", ",", "8", ")", ")", "\n", "plt", ".", "subplots_adjust", "(", "wspace", "=", "0.4", ",", "hspace", "=", "0.4", ")", "\n", "ax", "[", "0", "]", "[", "0", "]", "=", "sns", ".", "distplot", "(", "Mx", ",", "kde", "=", "kde", ",", "ax", "=", "ax", "[", "0", "]", "[", "0", "]", ",", "norm_hist", "=", "True", ")", "\n", "# if not kde:", "\n", "#     ticks = [str(i) + \"K\" for i in (np.array(ax[0][0].get_yticks()) / 1000).round(1)]", "\n", "#     ax[0][0].set_yticklabels(ticks)", "\n", "self", ".", "_stylize_axes", "(", "ax", "[", "0", "]", "[", "0", "]", ",", "x_label", "=", "text", "[", "'hist1_xlabel'", "]", ",", "y_label", "=", "text", "[", "'hist1_ylabel'", "]", ",", "\n", "title", "=", "text", "[", "'hist1_title'", "]", ",", "tick_size", "=", "tick_size", ",", "label_size", "=", "label_size", ",", "\n", "title_size", "=", "title_size", ",", "label_pad", "=", "label_pad", ")", "\n", "\n", "ax", "[", "0", "]", "[", "1", "]", "=", "sns", ".", "distplot", "(", "My", ",", "kde", "=", "kde", ",", "ax", "=", "ax", "[", "0", "]", "[", "1", "]", ",", "norm_hist", "=", "True", ")", "\n", "# if not kde:", "\n", "#     ticks = [str(i) + \"K\" for i in (np.array(ax[0][1].get_yticks()) / 1000).round(1)]", "\n", "#     ax[0][1].set_yticklabels(ticks)", "\n", "self", ".", "_stylize_axes", "(", "ax", "[", "0", "]", "[", "1", "]", ",", "x_label", "=", "text", "[", "'hist2_xlabel'", "]", ",", "y_label", "=", "text", "[", "'hist2_ylabel'", "]", ",", "\n", "title", "=", "text", "[", "'hist2_title'", "]", ",", "tick_size", "=", "tick_size", ",", "label_size", "=", "label_size", ",", "\n", "title_size", "=", "title_size", ",", "label_pad", "=", "label_pad", ")", "\n", "\n", "ax", "[", "1", "]", "[", "0", "]", "=", "sns", ".", "distplot", "(", "M", ",", "kde", "=", "kde", ",", "ax", "=", "ax", "[", "1", "]", "[", "0", "]", ",", "norm_hist", "=", "True", ")", "\n", "# if not kde:", "\n", "#     ticks = [str(i) + \"K\" for i in (np.array(ax[1][0].get_yticks()) / 1000).round(1)]", "\n", "#     ax[1][0].set_yticklabels(ticks)", "\n", "self", ".", "_stylize_axes", "(", "ax", "[", "1", "]", "[", "0", "]", ",", "x_label", "=", "text", "[", "'hist3_xlabel'", "]", ",", "y_label", "=", "text", "[", "'hist3_ylabel'", "]", ",", "\n", "title", "=", "text", "[", "'hist3_title'", "]", ",", "tick_size", "=", "tick_size", ",", "label_size", "=", "label_size", ",", "\n", "title_size", "=", "title_size", ",", "label_pad", "=", "label_pad", ")", "\n", "if", "heatmap", ":", "\n", "                ", "_", ",", "_", ",", "_", ",", "hist", "=", "ax", "[", "1", "]", "[", "1", "]", ".", "hist2d", "(", "Mx", ",", "My", ",", "self", ".", "_ddsde", ".", "bins", ",", "density", "=", "True", ")", "\n", "plt", ".", "colorbar", "(", "hist", ",", "ax", "=", "ax", "[", "1", "]", "[", "1", "]", ")", "\n", "self", ".", "_stylize_axes", "(", "ax", "[", "1", "]", "[", "1", "]", ",", "x_label", "=", "text", "[", "'hist4_xlabel'", "]", ",", "y_label", "=", "text", "[", "'hist4_ylabel'", "]", ",", "\n", "title", "=", "''", ",", "tick_size", "=", "tick_size", ",", "label_size", "=", "label_size", ",", "\n", "title_size", "=", "title_size", ",", "label_pad", "=", "label_pad", ")", "\n", "", "else", ":", "\n", "                ", "ax", "[", "1", "]", "[", "1", "]", ".", "remove", "(", ")", "\n", "ax", "[", "1", "]", "[", "1", "]", "=", "fig", ".", "add_subplot", "(", "2", ",", "2", ",", "4", ",", "projection", "=", "'3d'", ")", "\n", "ax", "[", "1", "]", "[", "1", "]", ".", "set_title", "(", "'3d Histogram'", ")", "\n", "ax", "[", "1", "]", "[", "1", "]", "=", "self", ".", "_plot_3d_hisogram", "(", "Mx", ",", "My", ",", "ax", "=", "ax", "[", "1", "]", "[", "1", "]", ",", "title", "=", "text", "[", "'hist4_title'", "]", ",", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "tick_size", "=", "tick_size", ",", "label_pad", "=", "label_pad", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "M", "=", "timeseries", "[", "0", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "2", ",", "dpi", "=", "150", ",", "figsize", "=", "(", "8", ",", "4", ")", ")", "\n", "ax", "[", "0", "]", "=", "sns", ".", "distplot", "(", "M", ",", "kde", "=", "kde", ",", "ax", "=", "ax", "[", "0", "]", ")", "\n", "self", ".", "_stylize_axes", "(", "ax", "[", "0", "]", ",", "x_label", "=", "text", "[", "'hist_xlabel'", "]", ",", "y_label", "=", "text", "[", "'hist_ylabel'", "]", ",", "\n", "title", "=", "text", "[", "'hist_title'", "]", ",", "tick_size", "=", "tick_size", ",", "label_size", "=", "label_size", ",", "\n", "title_size", "=", "title_size", ",", "label_pad", "=", "label_pad", ")", "\n", "ticks", "=", "[", "str", "(", "i", ")", "+", "\"K\"", "for", "i", "in", "(", "np", ".", "array", "(", "ax", "[", "0", "]", ".", "get_yticks", "(", ")", ")", "/", "1000", ")", ".", "round", "(", "1", ")", "]", "\n", "ax", "[", "0", "]", ".", "set_yticklabels", "(", "ticks", ")", "\n", "\n", "ax", "[", "1", "]", "=", "sns", ".", "distplot", "(", "np", ".", "sqrt", "(", "M", "**", "2", ")", ",", "kde", "=", "kde", ",", "ax", "=", "ax", "[", "1", "]", ")", "\n", "self", ".", "_stylize_axes", "(", "ax", "[", "1", "]", ",", "x_label", "=", "\"|{}|\"", ".", "format", "(", "text", "[", "'hist_xlabel'", "]", ")", ",", "y_label", "=", "text", "[", "'hist_ylabel'", "]", ",", "\n", "title", "=", "text", "[", "'hist_title'", "]", ",", "tick_size", "=", "tick_size", ",", "label_size", "=", "label_size", ",", "\n", "title_size", "=", "title_size", ",", "label_pad", "=", "label_pad", ")", "\n", "ticks", "=", "[", "str", "(", "i", ")", "+", "\"K\"", "for", "i", "in", "(", "np", ".", "array", "(", "ax", "[", "1", "]", ".", "get_yticks", "(", ")", ")", "/", "1000", ")", ".", "round", "(", "1", ")", "]", "\n", "ax", "[", "1", "]", ".", "set_yticklabels", "(", "ticks", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_autocorrelation_1d": [[624, 633], ["matplotlib.subplots", "matplotlib.subplots", "ax.plot", "visualize.Visualize._stylize_axes", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.show", "matplotlib.show"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes"], ["", "def", "_plot_autocorrelation_1d", "(", "self", ",", "lags", ",", "acf", ")", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "8", ",", "4", ")", ")", "\n", "ax", ".", "plot", "(", "lags", ",", "acf", ")", "\n", "self", ".", "_stylize_axes", "(", "ax", "=", "ax", ",", "\n", "x_label", "=", "'Time index'", ",", "y_label", "=", "'Autocorrelation'", ",", "\n", "title", "=", "'Autocorrelation'", "\n", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_autocorrelation_2d": [[634, 655], ["matplotlib.subplots", "matplotlib.subplots", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].set_ylim", "ax[].legend", "visualize.Visualize._stylize_axes", "visualize.Visualize._stylize_axes", "matplotlib.tight_layout", "matplotlib.tight_layout", "matplotlib.show", "matplotlib.show", "ax[].get_ylim"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes"], ["", "def", "_plot_autocorrelation_2d", "(", "self", ",", "lags", ",", "acfx", ",", "acfy", ",", "acfm", ",", "ccf", ")", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "1", ",", "figsize", "=", "(", "8", ",", "8", ")", ")", "\n", "\n", "ax", "[", "0", "]", ".", "plot", "(", "lags", ",", "acfx", ",", "label", "=", "'$\\\\sigma_{M_x}$'", ")", "\n", "ax", "[", "0", "]", ".", "plot", "(", "lags", ",", "acfy", ",", "label", "=", "'$\\\\sigma_{M_y}$'", ")", "\n", "ax", "[", "0", "]", ".", "plot", "(", "lags", ",", "acfm", ",", "label", "=", "'$\\\\sigma_{|M|^2}$'", ")", "\n", "\n", "ax", "[", "1", "]", ".", "plot", "(", "lags", ",", "ccf", ",", "label", "=", "'$\\\\sigma_{M_x M_y}$'", ")", "\n", "ax", "[", "1", "]", ".", "set_ylim", "(", "ax", "[", "0", "]", ".", "get_ylim", "(", ")", ")", "\n", "\n", "ax", "[", "0", "]", ".", "legend", "(", ")", "\n", "self", ".", "_stylize_axes", "(", "ax", "=", "ax", "[", "0", "]", ",", "\n", "x_label", "=", "'Time index'", ",", "y_label", "=", "'Autocorrelation'", ",", "\n", "title", "=", "'Autocorrelation'", "\n", ")", "\n", "self", ".", "_stylize_axes", "(", "ax", "=", "ax", "[", "1", "]", ",", "\n", "x_label", "=", "'Time index'", ",", "y_label", "=", "'Cross-correlation'", ",", "\n", "title", "=", "'Cross-correlation'", "\n", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_noise_characterstics": [[656, 779], ["matplotlib.subplots", "matplotlib.subplots", "[].plot", "visualize.Visualize._stylize_axes", "visualize.Visualize._stylize_axes", "seaborn.distplot", "visualize.Visualize._stylize_axes", "seaborn.distplot", "[].get_ylim", "[].plot", "[].plot", "[].plot", "visualize.Visualize._stylize_axes", "[].legend", "matplotlib.tight_layout", "matplotlib.tight_layout", "len", "numpy.linspace", "numpy.linspace", "numpy.linspace", "len", "numpy.ones", "len", "numpy.ones", "len", "numpy.ones", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._stylize_axes"], ["", "def", "_plot_noise_characterstics", "(", "self", ",", "\n", "data", ",", "\n", "dpi", "=", "150", ",", "\n", "kde", "=", "True", ",", "\n", "title_size", "=", "14", ",", "\n", "tick_size", "=", "15", ",", "\n", "label_size", "=", "15", ",", "\n", "label_pad", "=", "8", ")", ":", "\n", "        ", "\"\"\"\n        Plot noise charactersitic figure\n        \"\"\"", "\n", "\n", "noise", ",", "kl_dist", ",", "X1", ",", "h_lim", ",", "k", ",", "l_lim", ",", "f", ",", "noise_correlation", "=", "data", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "nrows", "=", "2", ",", "ncols", "=", "2", ",", "dpi", "=", "150", ",", "figsize", "=", "(", "10", ",", "8", ")", ")", "\n", "\n", "ax", "[", "0", "]", "[", "0", "]", ".", "plot", "(", "noise", "[", "0", ":", "1000", "]", ")", "\n", "self", ".", "_stylize_axes", "(", "ax", "[", "0", "]", "[", "0", "]", ",", "\n", "x_label", "=", "''", ",", "\n", "y_label", "=", "'Noise'", ",", "\n", "title", "=", "\"Residuals\"", ",", "\n", "tick_size", "=", "tick_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "\n", "lags", "=", "50", "\n", "if", "len", "(", "noise", ")", "<", "lags", "+", "1", ":", "\n", "            ", "lags", "=", "len", "(", "noise", ")", "-", "1", "\n", "# statsmodels.graphics.tsaplots.plot_acf(noise, lags=lags, ax=ax[1][0], missing='conservative')", "\n", "# ax[1][0].plot(noise_correlation[0], noise_correlation[1])", "\n", "", "self", ".", "_stylize_axes", "(", "ax", "[", "1", "]", "[", "0", "]", ",", "\n", "x_label", "=", "'lags'", ",", "\n", "y_label", "=", "'ACF(Noise)'", ",", "\n", "title", "=", "\"Noise Autocorrelation\"", ",", "\n", "tick_size", "=", "tick_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "\n", "ax", "[", "0", "]", "[", "1", "]", "=", "sns", ".", "distplot", "(", "noise", ",", "kde", "=", "kde", ",", "ax", "=", "ax", "[", "0", "]", "[", "1", "]", ")", "\n", "self", ".", "_stylize_axes", "(", "ax", "[", "0", "]", "[", "1", "]", ",", "\n", "x_label", "=", "''", ",", "\n", "y_label", "=", "'Density'", ",", "\n", "title", "=", "\"Noise Distribution\"", ",", "\n", "tick_size", "=", "tick_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "\n", "ax", "[", "1", "]", "[", "1", "]", "=", "sns", ".", "distplot", "(", "kl_dist", ",", "kde", "=", "kde", ",", "ax", "=", "ax", "[", "1", "]", "[", "1", "]", ")", "\n", "start", ",", "stop", "=", "ax", "[", "1", "]", "[", "1", "]", ".", "get_ylim", "(", ")", "\n", "ax", "[", "1", "]", "[", "1", "]", ".", "plot", "(", "np", ".", "ones", "(", "len", "(", "X1", ")", ")", "*", "l_lim", ",", "\n", "np", ".", "linspace", "(", "start", ",", "stop", ",", "len", "(", "X1", ")", ")", ",", "'r'", ",", "label", "=", "'2.5%'", ")", "\n", "ax", "[", "1", "]", "[", "1", "]", ".", "plot", "(", "np", ".", "ones", "(", "len", "(", "X1", ")", ")", "*", "k", ",", "\n", "np", ".", "linspace", "(", "start", ",", "stop", ",", "len", "(", "X1", ")", ")", ",", "'g'", ",", "label", "=", "'Test Statistics'", ")", "\n", "ax", "[", "1", "]", "[", "1", "]", ".", "plot", "(", "np", ".", "ones", "(", "len", "(", "X1", ")", ")", "*", "h_lim", ",", "\n", "np", ".", "linspace", "(", "start", ",", "stop", ",", "len", "(", "X1", ")", ")", ",", "'r'", ",", "label", "=", "'97.5%'", ".", "format", "(", "h_lim", ")", ")", "\n", "self", ".", "_stylize_axes", "(", "ax", "[", "1", "]", "[", "1", "]", ",", "\n", "x_label", "=", "''", ",", "\n", "y_label", "=", "''", ",", "\n", "title", "=", "\"Hypothesis Testing\"", ",", "\n", "tick_size", "=", "tick_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_pad", "=", "label_pad", ")", "\n", "ax", "[", "1", "]", "[", "1", "]", ".", "legend", "(", "prop", "=", "{", "'size'", ":", "6", "}", ")", "\n", "\"\"\"\n        ax[0][0] = sns.distplot(noise, kde=kde, ax=ax[0][0])\n        self._stylize_axes(ax[0][0],\t\n                        x_label='', \n                        y_label='Density', \n                        title=\"Noise Distrubution\", \n                        tick_size=tick_size, \n                        label_size=label_size, \n                        title_size=title_size, \n                        label_pad=label_pad)\n\n        ax[0][1].plot(noise_correlation[0], noise_correlation[1])\n        self._stylize_axes(ax[0][1],\t\n                        x_label='', \n                        y_label='Correlation coeff', \n                        title=\"Noise Correlation\", \n                        tick_size=tick_size, \n                        label_size=label_size, \n                        title_size=title_size, \n                        label_pad=label_pad)\n\n        ax[1][0] = sns.distplot(kl_dist, kde=kde, ax=ax[1][0])\n        start, stop = ax[1][0].get_ylim()\n        ax[1][0].plot(np.ones(len(X1)) * l_lim,\n         np.linspace(start, stop, len(X1)), 'r', label='lower_cl')\n        ax[1][0].plot(np.ones(len(X1)) * k,\n         np.linspace(start, stop, len(X1)), 'g', label='Test Statistics')\n        ax[1][0].plot(np.ones(len(X1)) * h_lim,\n         np.linspace(start, stop, len(X1)), 'r', label='upper_cl')\n        self._stylize_axes(ax[1][0],\t\n                x_label='', \n                y_label='', \n                title=\"Null hypothesis\", \n                tick_size=tick_size, \n                label_size=label_size, \n                title_size=title_size, \n                label_pad=label_pad)\n        ax[1][0].legend(prop={'size':6})\n\n        \n        ax[1][1].plot(X1[1:], f)\n        ax[1][1].plot(np.ones(len(X1[1:])) * l_lim, f, 'r', label='lower_cl')\n        ax[1][1].plot(np.ones(len(X1[1:])) * h_lim, f, 'r', label='upper_cl')\n        ax[1][1].plot(np.ones(len(X1[1:])) * k, f, 'g', label='Test Stat')\n        self._stylize_axes(ax[1][1],\t\n                x_label='', \n                y_label='', \n                title=\"CDF\", \n                tick_size=tick_size, \n                label_size=label_size, \n                title_size=title_size, \n                label_pad=label_pad)\n        ax[1][1].legend(loc=1, prop={'size':6})\n        \"\"\"", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._remove_nans": [[780, 787], ["numpy.array", "numpy.where", "numpy.where", "numpy.isnan", "numpy.isnan", "numpy.delete", "numpy.delete"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_remove_nans", "(", "Mx", ",", "My", ")", ":", "\n", "        ", "\"\"\"\n        Remove nan's from data\n        \"\"\"", "\n", "nan_idx", "=", "(", "np", ".", "where", "(", "np", ".", "isnan", "(", "Mx", ")", ")", "and", "np", ".", "where", "(", "np", ".", "isnan", "(", "My", ")", ")", ")", "\n", "return", "np", ".", "array", "(", "[", "np", ".", "delete", "(", "Mx", ",", "nan_idx", ")", ",", "np", ".", "delete", "(", "My", ",", "nan_idx", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_3d_hisogram": [[788, 825], ["visualize.Visualize._histogram3d", "matplotlib.cm.coolwarm", "matplotlib.cm.coolwarm", "plt.figure.add_subplot.bar3d", "plt.figure.add_subplot.set_xlabel", "plt.figure.add_subplot.set_ylabel", "plt.figure.add_subplot.zaxis.set_rotate_label", "plt.figure.add_subplot.set_zlabel", "visualize.Visualize._set_zaxis_to_left", "plt.figure.add_subplot.xaxis.set_pane_color", "plt.figure.add_subplot.yaxis.set_pane_color", "plt.figure.add_subplot.zaxis.set_pane_color", "plt.figure.add_subplot.set_xticks", "plt.figure.add_subplot.set_yticks", "plt.figure.add_subplot.set_title", "plt.figure.add_subplot.tick_params", "matplotlib.figure", "matplotlib.figure", "matplotlib.figure.add_subplot", "visualize.Visualize._remove_nans", "numpy.linspace", "numpy.linspace", "dz.flatten", "float", "round", "round", "round", "round", "dz.max", "numpy.nanmin", "numpy.nanmax", "numpy.nanmin", "numpy.nanmax"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._histogram3d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._set_zaxis_to_left", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._remove_nans"], ["", "def", "_plot_3d_hisogram", "(", "self", ",", "Mx", ",", "My", ",", "ax", "=", "None", ",", "title", "=", "\"PDF\"", ",", "xlabel", "=", "\"$M_{x}$\"", ",", "ylabel", "=", "\"$M_{y}$\"", ",", "zlabel", "=", "\"Frequency\"", ",", "\n", "tick_size", "=", "12", ",", "title_size", "=", "14", ",", "label_size", "=", "10", ",", "label_pad", "=", "12", ",", "r_fig", "=", "False", ",", "dpi", "=", "150", ")", ":", "\n", "        ", "\"\"\"\n        Plot 3d bar plot\n        \"\"\"", "\n", "if", "ax", "is", "None", ":", "\n", "            ", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "dpi", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "projection", "=", "\"3d\"", ")", "\n", "\n", "", "H", ",", "edges", ",", "X", ",", "Y", ",", "Z", ",", "dx", ",", "dy", ",", "dz", "=", "self", ".", "_histogram3d", "(", "self", ".", "_remove_nans", "(", "Mx", ",", "My", ")", ")", "\n", "colors", "=", "plt", ".", "cm", ".", "coolwarm", "(", "dz", ".", "flatten", "(", ")", "/", "float", "(", "dz", ".", "max", "(", ")", ")", ")", "\n", "hist3d", "=", "ax", ".", "bar3d", "(", "X", ",", "Y", ",", "Z", ",", "dx", ",", "dy", ",", "dz", ",", "alpha", "=", "0.6", ",", "cmap", "=", "plt", ".", "cm", ".", "coolwarm", ",", "color", "=", "colors", ")", "\n", "ax", ".", "set_xlabel", "(", "xlabel", ",", "fontsize", "=", "label_size", ",", "labelpad", "=", "label_pad", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ",", "fontsize", "=", "label_size", ",", "labelpad", "=", "label_pad", ")", "\n", "ax", ".", "zaxis", ".", "set_rotate_label", "(", "False", ")", "\n", "ax", ".", "set_zlabel", "(", "zlabel", ",", "fontsize", "=", "label_size", ",", "labelpad", "=", "label_pad", ",", "rotation", "=", "90", ")", "\n", "ax", "=", "self", ".", "_set_zaxis_to_left", "(", "ax", ")", "\n", "\n", "# make the panes transparent", "\n", "ax", ".", "xaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "zaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "\n", "# make the grid lines transparent", "\n", "ax", ".", "xaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "ax", ".", "yaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "ax", ".", "zaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "# Set ticks lable and its fontsize", "\n", "ax", ".", "set_xticks", "(", "np", ".", "linspace", "(", "round", "(", "np", ".", "nanmin", "(", "Mx", ")", ",", "2", ")", ",", "round", "(", "np", ".", "nanmax", "(", "Mx", ")", ",", "2", ")", ",", "3", ")", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "linspace", "(", "round", "(", "np", ".", "nanmin", "(", "My", ")", ",", "2", ")", ",", "round", "(", "np", ".", "nanmax", "(", "My", ")", ",", "2", ")", ",", "3", ")", ")", "\n", "ax", ".", "set_title", "(", "title", ",", "fontsize", "=", "title_size", ")", "\n", "# ticks = [str(i) + \"K\" for i in (np.array(ax.get_zticks()) / 1000).round(1)]", "\n", "# ax.set_zticklabels(ticks)", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'major'", ",", "labelsize", "=", "tick_size", ",", "pad", "=", "5", ")", "\n", "if", "r_fig", ":", "\n", "            ", "return", "fig", ",", "ax", "\n", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._slider_3d": [[826, 1113], ["text.update", "list", "plotly.subplots.make_subplots", "numpy.meshgrid", "list", "plotly.subplots.make_subplots.update_layout", "isinstance", "range", "slider_data.keys", "dict", "dict", "numpy.meshgrid", "range", "len", "dict", "steps.append", "dict", "dict", "dict", "dict", "dict", "numpy.linspace", "numpy.linspace", "range", "dict", "dict", "dict", "dict", "dict", "dict", "numpy.cos", "numpy.sin", "plotly.subplots.make_subplots.append_trace", "range", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "dict", "plotly.Scatter3d", "plotly.subplots.make_subplots.append_trace", "type", "plotly.Surface", "title_template.format", "list", "list.index", "len", "x.flatten", "y.flatten", "data[].flatten", "dict", "len", "str", "slider_data.keys", "list.index", "len", "data[].flatten", "dict"], "methods", ["None"], ["", "def", "_slider_3d", "(", "self", ",", "slider_data", ",", "init_pos", "=", "0", ",", "prefix", "=", "'dt'", ",", "zlim", "=", "None", ",", "order", "=", "None", ",", "polar", "=", "False", ",", "**", "plot_text", ")", ":", "\n", "        ", "\"\"\"\n        Get slider for analysed vector data.\n        \"\"\"", "\n", "slider_texts", "=", "{", "\n", "'dt'", ":", "{", "\n", "'title1'", ":", "'Diffusion X'", ",", "\n", "'x_label1'", ":", "'mx'", ",", "\n", "'y_label1'", ":", "'my'", ",", "\n", "'z_label1'", ":", "'G11'", ",", "\n", "\n", "'title2'", ":", "'Diffusion Y'", ",", "\n", "'x_label2'", ":", "'mx'", ",", "\n", "'y_label2'", ":", "'my'", ",", "\n", "'z_label2'", ":", "'G22'", "}", ",", "\n", "\n", "'Dt'", ":", "{", "\n", "'title1'", ":", "'Drift X'", ",", "\n", "'x_label1'", ":", "'mx'", ",", "\n", "'y_label1'", ":", "'my'", ",", "\n", "'z_label1'", ":", "'F1'", ",", "\n", "\n", "'title2'", ":", "'Drift Y'", ",", "\n", "'x_label2'", ":", "'mx'", ",", "\n", "'y_label2'", ":", "'my'", ",", "\n", "'z_label2'", ":", "'F2'", "}", ",", "\n", "\n", "'c_dt'", ":", "{", "\n", "'title1'", ":", "'Diffusion XY'", ",", "\n", "'x_label1'", ":", "'mx'", ",", "\n", "'y_label1'", ":", "'my'", ",", "\n", "'z_label1'", ":", "'G12'", ",", "\n", "\n", "'title2'", ":", "'Diffusion YX'", ",", "\n", "'x_label2'", ":", "'mx'", ",", "\n", "'y_label2'", ":", "'my'", ",", "\n", "'z_label2'", ":", "'G21'", "}", "\n", "}", "\n", "\n", "text", "=", "slider_texts", "[", "prefix", "]", "\n", "text", ".", "update", "(", "plot_text", ")", "\n", "\n", "dt_s", "=", "list", "(", "slider_data", ".", "keys", "(", ")", ")", "\n", "opt_step", "=", "dt_s", "[", "init_pos", "]", "\n", "if", "prefix", "==", "'Dt'", ":", "\n", "            ", "t", "=", "'Drift'", "\n", "t_tex", "=", "\"\\Delta t\"", "\n", "sub_titles", "=", "(", "text", "[", "'title1'", "]", ",", "text", "[", "'title2'", "]", ")", "\n", "scene1", "=", "dict", "(", "\n", "xaxis", "=", "dict", "(", "showbackground", "=", "True", ")", ",", "\n", "yaxis", "=", "dict", "(", "showbackground", "=", "True", ")", ",", "\n", "zaxis", "=", "dict", "(", "showbackground", "=", "True", ",", ")", ",", "\n", "xaxis_title", "=", "text", "[", "'x_label1'", "]", ",", "\n", "yaxis_title", "=", "text", "[", "'y_label1'", "]", ",", "\n", "zaxis_title", "=", "text", "[", "'z_label1'", "]", ",", "\n", ")", "\n", "scene2", "=", "dict", "(", "\n", "xaxis", "=", "dict", "(", "showbackground", "=", "True", ")", ",", "\n", "yaxis", "=", "dict", "(", "showbackground", "=", "True", ")", ",", "\n", "zaxis", "=", "dict", "(", "showbackground", "=", "True", ",", ")", ",", "\n", "xaxis_title", "=", "text", "[", "'x_label2'", "]", ",", "\n", "yaxis_title", "=", "text", "[", "'y_label2'", "]", ",", "\n", "zaxis_title", "=", "text", "[", "'z_label2'", "]", ",", "\n", ")", "\n", "func", "=", "[", "self", ".", "F1", ",", "self", ".", "F2", "]", "\n", "func_name", "=", "[", "'$F_1(x, y)$'", ",", "'$F_2(x, y)$'", "]", "\n", "", "elif", "prefix", "==", "'dt'", ":", "\n", "            ", "t", "=", "'Diffusion'", "\n", "t_tex", "=", "\"\\delta t\"", "\n", "sub_titles", "=", "(", "text", "[", "'title1'", "]", ",", "text", "[", "'title2'", "]", ")", "\n", "scene1", "=", "dict", "(", "\n", "xaxis", "=", "dict", "(", "showbackground", "=", "True", ")", ",", "\n", "yaxis", "=", "dict", "(", "showbackground", "=", "True", ")", ",", "\n", "zaxis", "=", "dict", "(", "showbackground", "=", "True", ",", ")", ",", "\n", "xaxis_title", "=", "text", "[", "'x_label1'", "]", ",", "\n", "yaxis_title", "=", "text", "[", "'y_label1'", "]", ",", "\n", "zaxis_title", "=", "text", "[", "'z_label1'", "]", ",", "\n", ")", "\n", "scene2", "=", "dict", "(", "\n", "xaxis", "=", "dict", "(", "showbackground", "=", "True", ")", ",", "\n", "yaxis", "=", "dict", "(", "showbackground", "=", "True", ")", ",", "\n", "zaxis", "=", "dict", "(", "showbackground", "=", "True", ",", ")", ",", "\n", "xaxis_title", "=", "text", "[", "'x_label2'", "]", ",", "\n", "yaxis_title", "=", "text", "[", "'y_label2'", "]", ",", "\n", "zaxis_title", "=", "text", "[", "'z_label2'", "]", ",", "\n", ")", "\n", "func", "=", "[", "self", ".", "G11", ",", "self", ".", "G22", "]", "\n", "func_name", "=", "[", "'$G_{11}(x, y)$'", ",", "'$G_{22}(x, y)$'", "]", "\n", "", "else", ":", "\n", "            ", "prefix", "=", "'dt'", "\n", "t", "=", "'Cross Diffusion'", "\n", "t_tex", "=", "\"\\delta t\"", "\n", "sub_titles", "=", "(", "text", "[", "'title1'", "]", ",", "text", "[", "'title2'", "]", ")", "\n", "scene1", "=", "dict", "(", "\n", "xaxis", "=", "dict", "(", "showbackground", "=", "True", ")", ",", "\n", "yaxis", "=", "dict", "(", "showbackground", "=", "True", ")", ",", "\n", "zaxis", "=", "dict", "(", "showbackground", "=", "True", ",", "range", "=", "zlim", ")", ",", "\n", "xaxis_title", "=", "text", "[", "'x_label1'", "]", ",", "\n", "yaxis_title", "=", "text", "[", "'y_label1'", "]", ",", "\n", "zaxis_title", "=", "text", "[", "'z_label1'", "]", ",", "\n", ")", "\n", "scene2", "=", "dict", "(", "\n", "xaxis", "=", "dict", "(", "showbackground", "=", "True", ")", ",", "\n", "yaxis", "=", "dict", "(", "showbackground", "=", "True", ")", ",", "\n", "zaxis", "=", "dict", "(", "showbackground", "=", "True", ",", "range", "=", "zlim", ")", ",", "\n", "xaxis_title", "=", "text", "[", "'x_label2'", "]", ",", "\n", "yaxis_title", "=", "text", "[", "'y_label2'", "]", ",", "\n", "zaxis_title", "=", "text", "[", "'z_label2'", "]", ",", "\n", ")", "\n", "func", "=", "[", "self", ".", "G12", ",", "self", ".", "G21", "]", "\n", "func_name", "=", "[", "'$G_{12}(x, y)$'", ",", "'$G_{21}(x, y)$'", "]", "\n", "", "nrows", ",", "ncols", "=", "1", ",", "2", "\n", "title_template", "=", "r\"$\\text{{ {0} |  Autocorrelation time (Mx, My, |M^2|) : ({4}, {5}, {1}) }} | \\text{{ Slider switched to }}{2}= {3}$\"", "\n", "fig", "=", "make_subplots", "(", "\n", "rows", "=", "nrows", ",", "\n", "cols", "=", "ncols", ",", "\n", "specs", "=", "[", "\n", "[", "{", "\n", "'type'", ":", "'scene'", "\n", "}", ",", "{", "\n", "'type'", ":", "'scene'", "\n", "}", "]", ",", "\n", "]", ",", "\n", "print_grid", "=", "False", ",", "\n", "subplot_titles", "=", "sub_titles", ",", "\n", "horizontal_spacing", "=", "0.1", ",", "\n", ")", "\n", "\n", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "self", ".", "op_x", ",", "self", ".", "op_y", ")", "\n", "if", "polar", ":", "\n", "            ", "r", ",", "theta", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "50", ")", ",", "np", ".", "linspace", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ",", "90", ")", ")", "\n", "x_", ",", "y_", "=", "r", "*", "np", ".", "cos", "(", "theta", ")", ",", "r", "*", "np", ".", "sin", "(", "theta", ")", "\n", "", "else", ":", "\n", "            ", "x_", ",", "y_", "=", "x", ",", "y", "\n", "\n", "", "n", "=", "list", "(", "sub_titles", ")", "\n", "for", "dt", "in", "slider_data", ":", "\n", "            ", "data", "=", "slider_data", "[", "dt", "]", "\n", "visible", "=", "'legendonly'", "\n", "if", "dt", "==", "opt_step", ":", "\n", "                ", "visible", "=", "True", "\n", "", "k", "=", "0", "\n", "for", "r", "in", "range", "(", "1", ",", "nrows", "+", "1", ")", ":", "\n", "                ", "for", "c", "in", "range", "(", "1", ",", "ncols", "+", "1", ")", ":", "\n", "# marker_colour = 'blue'", "\n", "# if k % 2: marker_colour = 'red'", "\n", "                    ", "marker_colour", "=", "self", ".", "_c_pallet", "[", "dt_s", ".", "index", "(", "dt", ")", "%", "len", "(", "self", ".", "_c_pallet", ")", "]", "\n", "if", "k", "%", "2", ":", "marker_colour", "=", "self", ".", "_c_pallet", "[", "dt_s", ".", "index", "(", "dt", ")", "%", "len", "(", "self", ".", "_c_pallet", ")", "]", "\n", "fig", ".", "append_trace", "(", "\n", "go", ".", "Scatter3d", "(", "x", "=", "(", "x", ".", "flatten", "(", ")", ")", ",", "\n", "y", "=", "(", "y", ".", "flatten", "(", ")", ")", ",", "\n", "z", "=", "(", "data", "[", "k", "]", ".", "flatten", "(", ")", ")", ",", "\n", "opacity", "=", "1", ",", "\n", "mode", "=", "'markers'", ",", "\n", "# marker=dict(size=3, color=marker_colour),", "\n", "marker", "=", "dict", "(", "\n", "color", "=", "(", "data", "[", "k", "]", ".", "flatten", "(", ")", ")", ",", "\n", "colorscale", "=", "'Viridis'", ",", "\n", "# color=marker_colour,", "\n", "size", "=", "3", ",", "\n", "line", "=", "dict", "(", "\n", "color", "=", "'black'", ",", "\n", "width", "=", "0", "\n", ")", "\n", ")", ",", "\n", "name", "=", "\"{}, {}\"", ".", "format", "(", "n", "[", "k", "]", ",", "dt", ")", ",", "\n", "visible", "=", "visible", ")", ",", "\n", "row", "=", "r", ",", "\n", "col", "=", "c", ",", "\n", ")", "\n", "if", "func", "[", "c", "-", "1", "]", "and", "(", "type", "(", "func", "[", "c", "-", "1", "]", ")", "is", "not", "tuple", ")", ":", "#isinstance(order, int):", "\n", "# x, y = np.meshgrid(self.op_x, self.op_y)", "\n", "                        ", "z", "=", "func", "[", "c", "-", "1", "]", "(", "x_", ",", "y_", ")", "\n", "# z[np.isnan(data[k])] = np.nan", "\n", "# c_s = []", "\n", "# for _ in range(len(x.flatten())):", "\n", "#     c_s.append([1, 'rgb(1, 0, 0)'])", "\n", "# try:", "\n", "#     plane = self._fit_plane(x=x, y=y, z=data[k], order=order)", "\n", "# except:", "\n", "#     print('Unable to fit plane')", "\n", "#     order = None", "\n", "#     k = k + 1", "\n", "#     continue", "\n", "fig", ".", "append_trace", "(", "\n", "go", ".", "Surface", "(", "\n", "x", "=", "x_", ",", "\n", "y", "=", "y_", ",", "\n", "z", "=", "z", ",", "\n", "opacity", "=", "0.3", ",", "\n", "name", "=", "func_name", "[", "c", "-", "1", "]", ",", "\n", "visible", "=", "visible", ",", "\n", "showscale", "=", "False", ",", "\n", "colorscale", "=", "'Viridis'", ",", "\n", "# colorscale=c_s,", "\n", "# surfacecolor=c_s,", "\n", ")", ",", "\n", "row", "=", "r", ",", "\n", "col", "=", "c", ",", "\n", ")", "\n", "", "k", "=", "k", "+", "1", "\n", "", "", "", "fig", ".", "update_layout", "(", "\n", "autosize", "=", "True", ",", "\n", "scene1_aspectmode", "=", "'cube'", ",", "\n", "scene2_aspectmode", "=", "'cube'", ",", "\n", "scene1", "=", "scene1", ",", "\n", "scene2", "=", "scene2", ",", "\n", "scene1_zaxis_range", "=", "zlim", ",", "\n", "scene2_zaxis_range", "=", "zlim", ",", "\n", "# scene1_zaxis_range=[np.nanmin(data[0]), np.nanmax(data[0])],", "\n", "# scene2_zaxis_range=[np.nanmin(data[1]), np.nanmax(data[1])],", "\n", "# scene3 = scene,", "\n", "# scene4 = scene,", "\n", "title_text", "=", "t", ",", "\n", "title_x", "=", "0.5", ",", "\n", "# title_text=title_template.format(t, self.autocorrelation_time,", "\n", "#                                  t_tex,", "\n", "#                                  dt_s[init_pos], self._act_mx, self._act_my),", "\n", "height", "=", "600", ",", "\n", "width", "=", "900", ",", "\n", "# updatemenus=[", "\n", "#\tdict(", "\n", "#\t\ttype=\"buttons\",", "\n", "#\t\tdirection=\"left\",", "\n", "#\t\tbuttons=list([", "\n", "#\t\t\tdict(", "\n", "#\t\t\t\targs=[{", "\n", "#\t\t\t\t\t\"type\": [\"scatter3d\", \"scatter3d\"]", "\n", "#\t\t\t\t}],", "\n", "#\t\t\t\t#{'traces': [0, 1]}],", "\n", "#\t\t\t\tlabel=\"3D\",", "\n", "#\t\t\t\tmethod=\"restyle\"),", "\n", "#\t\t\tdict(", "\n", "#\t\t\t\targs=[{", "\n", "#\t\t\t\t\t\"type\": [\"heatmap\", \"heatmap\"]", "\n", "#\t\t\t\t}],", "\n", "#\t\t\t\t#{'traces': [0, 1]}],", "\n", "#\t\t\t\tlabel=\"Heatmap\",", "\n", "#\t\t\t\tmethod=\"restyle\")", "\n", "#\t\t]),", "\n", "#\t\tpad={", "\n", "#\t\t\t\"r\": 10,", "\n", "#\t\t\t\"t\": 10", "\n", "#\t\t},", "\n", "#\t\tshowactive=True,", "\n", "#\t\tx=0.11,", "\n", "#\t\txanchor=\"left\",", "\n", "#\t\ty=1.1,", "\n", "#\t\tyanchor=\"top\"),", "\n", "# ]", "\n", ")", "\n", "\n", "steps", "=", "[", "]", "\n", "step_n", "=", "2", "\n", "if", "isinstance", "(", "order", ",", "int", ")", ":", "\n", "            ", "step_n", "=", "4", "\n", "", "for", "i", "in", "range", "(", "len", "(", "slider_data", ")", ")", ":", "\n", "            ", "step", "=", "dict", "(", "\n", "method", "=", "'update'", ",", "\n", "args", "=", "[", "{", "\n", "\"visible\"", ":", "[", "'legendonly'", "]", "*", "len", "(", "fig", ".", "data", ")", "\n", "}", ",", "{", "\n", "\"title\"", ":", "\n", "title_template", ".", "format", "(", "t", ",", "self", ".", "autocorrelation_time", ",", "t_tex", ",", "\n", "str", "(", "dt_s", "[", "i", "]", ")", ",", "self", ".", "_act_mx", ",", "self", ".", "_act_my", ")", ",", "\n", "}", "]", ",", "# layout attribute", "\n", "label", "=", "'{} {}'", ".", "format", "(", "prefix", ",", "\n", "list", "(", "slider_data", ".", "keys", "(", ")", ")", "[", "i", "]", ")", ")", "\n", "# step['args'][0][i*4:i*4+4] = [True for j in range(4)]", "\n", "# step['args'][0]['visible'][i * 2:i * 2 + 2] = [True for j in range(2)]", "\n", "step", "[", "'args'", "]", "[", "0", "]", "[", "'visible'", "]", "[", "i", "*", "step_n", ":", "i", "*", "step_n", "+", "step_n", "]", "=", "[", "True", "for", "j", "in", "range", "(", "step_n", ")", "]", "\n", "\n", "steps", ".", "append", "(", "step", ")", "\n", "\n", "", "sliders", "=", "[", "\n", "dict", "(", "\n", "currentvalue", "=", "{", "\"prefix\"", ":", "\"{} : \"", ".", "format", "(", "prefix", ")", "}", ",", "\n", "active", "=", "init_pos", ",", "\n", "steps", "=", "steps", ",", "\n", ")", "\n", "]", "\n", "\n", "fig", ".", "layout", ".", "sliders", "=", "sliders", "\n", "fig", ".", "layout", ".", "template", "=", "'plotly_white'", "\n", "# fig.layout.template = 'plotly'", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._slider_2d": [[1114, 1230], ["text.update", "plotly.Figure", "list", "sorted", "plotly.Figure.update_layout", "plotly.Figure.update_xaxes", "plotly.Figure.update_yaxes", "range", "data.keys", "data.keys", "plotly.Figure.add_trace", "plotly.Figure.update_yaxes", "len", "dict", "steps.append", "dict", "plotly.Scatter", "plotly.Figure.add_trace", "dict", "dict", "type", "plotly.Scatter", "range", "list.index", "len", "dict", "str", "dict", "func", "title_template.format", "list", "dict", "len", "str", "data.keys"], "methods", ["None"], ["", "def", "_slider_2d", "(", "self", ",", "slider_data", ",", "init_pos", "=", "0", ",", "limits", "=", "None", ",", "prefix", "=", "'Dt'", ",", "**", "plot_text", ")", ":", "\n", "        ", "\"\"\"\n        Get slider for analysed scalar data\n        \"\"\"", "\n", "slider_texts", "=", "{", "\n", "'Dt'", ":", "{", "\n", "'x_label'", ":", "'m'", ",", "\n", "'y_label'", ":", "'F1'", "\n", "}", ",", "\n", "'dt'", ":", "{", "\n", "'x_label'", ":", "'m'", ",", "\n", "'y_label'", ":", "'F2'", "\n", "}", "\n", "}", "\n", "text", "=", "slider_texts", "[", "prefix", "]", "\n", "text", ".", "update", "(", "plot_text", ")", "\n", "data", "=", "slider_data", "\n", "title_template", "=", "r\"$\\text{{ {0} |  Auto correlation time : {1} }} | \\text{{ Slider switched to }}{2}= {3}$\"", "\n", "if", "prefix", "==", "'Dt'", ":", "\n", "            ", "t", "=", "'Drift'", "\n", "t_tex", "=", "\"\\Delta t\"", "\n", "func", "=", "self", ".", "F", "\n", "func_name", "=", "'F(x)'", "\n", "", "else", ":", "\n", "            ", "t", "=", "'Diffusion'", "\n", "t_tex", "=", "\"\\delta t\"", "\n", "func", "=", "self", ".", "G", "\n", "func_name", "=", "'G(x)'", "\n", "\n", "# Create figure", "\n", "", "fig", "=", "go", ".", "Figure", "(", ")", "\n", "# Add traces, one for each slider step", "\n", "dt_s", "=", "list", "(", "data", ".", "keys", "(", ")", ")", "\n", "opt_step", "=", "dt_s", "[", "init_pos", "]", "\n", "for", "step", "in", "sorted", "(", "data", ".", "keys", "(", ")", ")", ":", "\n", "            ", "visible", "=", "'legendonly'", "\n", "if", "step", "==", "opt_step", ":", "\n", "                ", "visible", "=", "True", "\n", "", "marker_colour", "=", "\"red\"", "\n", "marker_colour", "=", "self", ".", "_c_pallet", "[", "dt_s", ".", "index", "(", "step", ")", "%", "len", "(", "self", ".", "_c_pallet", ")", "]", "\n", "fig", ".", "add_trace", "(", "\n", "go", ".", "Scatter", "(", "\n", "visible", "=", "visible", ",", "\n", "mode", "=", "'markers'", ",", "\n", "marker", "=", "dict", "(", "\n", "color", "=", "marker_colour", ",", "\n", "size", "=", "10", ",", "\n", "opacity", "=", "1", ",", "\n", "line", "=", "dict", "(", "\n", "color", "=", "'black'", ",", "\n", "width", "=", "1", "\n", ")", "\n", ")", ",", "\n", "# line=dict(color=marker_colour, width=6),", "\n", "name", "=", "\"{} = {}\"", ".", "format", "(", "prefix", ",", "str", "(", "step", ")", ")", ",", "\n", "x", "=", "data", "[", "step", "]", "[", "-", "1", "]", ",", "\n", "y", "=", "data", "[", "step", "]", "[", "0", "]", ")", ")", "\n", "if", "func", "and", "type", "(", "func", ")", "is", "not", "tuple", ":", "# isinstance(polynomial_order, int):", "\n", "# poly, op = self._fit_poly(data[step][-1], data[step][0], polynomial_order)", "\n", "\n", "                ", "x", "=", "data", "[", "step", "]", "[", "-", "1", "]", "\n", "fig", ".", "add_trace", "(", "\n", "go", ".", "Scatter", "(", "\n", "visible", "=", "visible", ",", "\n", "# mode='markers',", "\n", "opacity", "=", "0.3", ",", "\n", "line", "=", "dict", "(", "color", "=", "marker_colour", ",", "width", "=", "6", ")", ",", "\n", "name", "=", "func_name", ",", "\n", "x", "=", "x", ",", "\n", "y", "=", "func", "(", "x", ")", ")", ")", "\n", "\n", "", "", "fig", ".", "update_layout", "(", "\n", "autosize", "=", "False", ",", "\n", "scene_aspectmode", "=", "'cube'", ",", "\n", "title_text", "=", "t", ",", "\n", "title_x", "=", "0.5", ",", "\n", "# title_text=title_template.format(t, self.autocorrelation_time,", "\n", "#                                  t_tex,", "\n", "#                                  dt_s[init_pos]),", "\n", "height", "=", "600", ",", "\n", "width", "=", "600", ",", "\n", ")", "\n", "fig", ".", "update_xaxes", "(", "title", "=", "dict", "(", "text", "=", "text", "[", "'x_label'", "]", ")", ")", "\n", "fig", ".", "update_yaxes", "(", "title", "=", "dict", "(", "text", "=", "text", "[", "'y_label'", "]", ")", ")", "\n", "\n", "if", "limits", ":", "\n", "            ", "fig", ".", "update_yaxes", "(", "range", "=", "limits", ")", "\n", "\n", "\n", "# Create and add slider", "\n", "", "steps", "=", "[", "]", "\n", "step_n", "=", "1", "\n", "for", "i", "in", "range", "(", "len", "(", "dt_s", ")", ")", ":", "\n", "            ", "step", "=", "dict", "(", "\n", "method", "=", "\"update\"", ",", "\n", "args", "=", "[", "{", "\"visible\"", ":", "[", "'legendonly'", "]", "*", "len", "(", "fig", ".", "data", ")", "}", ",", "\n", "{", "\"title\"", ":", "title_template", ".", "format", "(", "t", ",", "self", ".", "autocorrelation_time", ",", "t_tex", ",", "str", "(", "dt_s", "[", "i", "]", ")", ")", "}", "]", ",", "\n", "# layout attribute", "\n", "label", "=", "'{} {}'", ".", "format", "(", "prefix", ",", "\n", "list", "(", "data", ".", "keys", "(", ")", ")", "[", "i", "]", ")", ")", "\n", "\n", "# step[\"args\"][0][\"visible\"][i] = True  # Toggle i'th trace to \"visible\"", "\n", "step", "[", "'args'", "]", "[", "0", "]", "[", "'visible'", "]", "[", "i", "*", "step_n", ":", "i", "*", "step_n", "+", "step_n", "]", "=", "[", "True", "for", "j", "in", "range", "(", "step_n", ")", "]", "\n", "steps", ".", "append", "(", "step", ")", "\n", "\n", "", "sliders", "=", "[", "dict", "(", "\n", "active", "=", "init_pos", ",", "\n", "currentvalue", "=", "{", "\"prefix\"", ":", "\"{}: \"", ".", "format", "(", "prefix", ")", "}", ",", "\n", "# pad={\"t\": 50},", "\n", "steps", "=", "steps", "\n", ")", "]", "\n", "\n", "fig", ".", "layout", ".", "sliders", "=", "sliders", "\n", "fig", ".", "layout", ".", "template", "=", "'plotly_white'", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._thrace_pane": [[1231, 1270], ["visualize.Visualize.op_x.copy", "visualize.Visualize.op_y.copy", "numpy.array", "numpy.array", "numpy.nanmean", "numpy.nanmean", "numpy.where", "numpy.array.append", "numpy.where", "numpy.array.append", "numpy.sqrt", "numpy.sqrt", "numpy.isnan", "visualize.Visualize._fit_poly", "p", "numpy.isnan", "visualize.Visualize._fit_poly", "p", "numpy.square", "numpy.square", "numpy.zeros", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._fit_poly", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._fit_poly"], ["", "def", "_thrace_pane", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Thrace an arbetery surface that covers the data points.\n\n        Notes\n        -----\n        To be used only to get a better visual of the shape of the surface.\n        \"\"\"", "\n", "op_x", "=", "self", ".", "op_x", ".", "copy", "(", ")", "\n", "op_y", "=", "self", ".", "op_y", ".", "copy", "(", ")", "\n", "plane1", "=", "[", "]", "\n", "plane2", "=", "[", "]", "\n", "for", "y", "in", "data", ":", "\n", "            ", "nan_idx", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "y", ")", ")", "\n", "try", ":", "\n", "                ", "p", ",", "x", "=", "self", ".", "_fit_poly", "(", "op_x", ",", "y", ",", "deg", "=", "6", ")", "\n", "d", "=", "p", "(", "op_x", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "d", "=", "np", ".", "zeros", "(", "y", ".", "shape", ")", "\n", "", "d", "[", "nan_idx", "]", "=", "np", ".", "nan", "\n", "plane1", ".", "append", "(", "d", ")", "\n", "\n", "", "for", "y", "in", "data", ".", "T", ":", "\n", "            ", "nan_idx", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "y", ")", ")", "\n", "try", ":", "\n", "                ", "p", ",", "x", "=", "self", ".", "_fit_poly", "(", "op_x", ",", "y", ",", "deg", "=", "6", ")", "\n", "d", "=", "p", "(", "op_x", ")", "\n", "", "except", ":", "\n", "                ", "d", "=", "np", ".", "zeros", "(", "y", ".", "shape", ")", "\n", "", "d", "[", "nan_idx", "]", "=", "np", ".", "nan", "\n", "plane2", ".", "append", "(", "d", ")", "\n", "\n", "", "plane1", "=", "np", ".", "array", "(", "plane1", ")", "\n", "plane2", "=", "np", ".", "array", "(", "plane2", ")", "\n", "err_1", "=", "np", ".", "nanmean", "(", "np", ".", "sqrt", "(", "np", ".", "square", "(", "plane1", "-", "data", ")", ")", ")", "\n", "err_2", "=", "np", ".", "nanmean", "(", "np", ".", "sqrt", "(", "np", ".", "square", "(", "plane2", "-", "data", ".", "T", ")", ")", ")", "\n", "if", "err_1", "<", "err_2", ":", "\n", "            ", "return", "0", ",", "plane1", "\n", "", "return", "1", ",", "plane2", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._set_zaxis_to_left": [[1271, 1287], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_set_zaxis_to_left", "(", "ax", ")", ":", "\n", "        ", "\"\"\"\n        Sets the z-axis of 3d figure to left\n        \"\"\"", "\n", "default_planes", "=", "(", "\n", "(", "0", ",", "3", ",", "7", ",", "4", ")", ",", "(", "1", ",", "2", ",", "6", ",", "5", ")", ",", "# yz planes", "\n", "(", "0", ",", "1", ",", "5", ",", "4", ")", ",", "(", "3", ",", "2", ",", "6", ",", "7", ")", ",", "# xz planes", "\n", "(", "0", ",", "1", ",", "2", ",", "3", ")", ",", "(", "4", ",", "5", ",", "6", ",", "7", ")", ",", "# xy planes", "\n", ")", "\n", "tmp_planes", "=", "ax", ".", "zaxis", ".", "_PLANES", "\n", "if", "tmp_planes", "==", "default_planes", ":", "\n", "            ", "ax", ".", "zaxis", ".", "_PLANES", "=", "(", "tmp_planes", "[", "2", "]", ",", "tmp_planes", "[", "3", "]", ",", "\n", "tmp_planes", "[", "0", "]", ",", "tmp_planes", "[", "1", "]", ",", "\n", "tmp_planes", "[", "4", "]", ",", "tmp_planes", "[", "5", "]", ")", "\n", "", "return", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data": [[1288, 1399], ["data_in.copy", "numpy.where", "visualize.Visualize.op_x.copy", "visualize.Visualize.op_y.copy", "numpy.meshgrid", "data_in.copy.copy", "plt.figure.add_subplot.set_title", "plt.figure.add_subplot.scatter3D", "plt.figure.add_subplot.set_xlabel", "plt.figure.add_subplot.set_ylabel", "plt.figure.add_subplot.zaxis.set_rotate_label", "plt.figure.add_subplot.set_zlabel", "visualize.Visualize._set_zaxis_to_left", "plt.figure.add_subplot.xaxis.set_pane_color", "plt.figure.add_subplot.yaxis.set_pane_color", "plt.figure.add_subplot.zaxis.set_pane_color", "plt.figure.add_subplot.set_xlim3d", "plt.figure.add_subplot.set_ylim3d", "plt.figure.add_subplot.set_xticks", "plt.figure.add_subplot.set_yticks", "plt.figure.add_subplot.ticklabel_format", "plt.figure.add_subplot.ticklabel_format", "plt.figure.add_subplot.tick_params", "visualize.Visualize._plot_heatmap", "matplotlib.figure", "matplotlib.figure", "matplotlib.figure.add_subplot", "plt.figure.add_subplot.cla", "visualize.Visualize._thrace_pane", "data_in.copy.copy.ravel", "round", "round", "round", "round", "numpy.linspace", "numpy.linspace", "plt.figure.add_subplot.legend", "plt.figure.add_subplot.set_zlim3d", "data_in.copy.copy.ravel", "plt.figure.add_subplot.plot_surface", "plt.figure.add_subplot.plot_surface", "round", "round", "round", "round", "numpy.nanstd", "numpy.nanstd"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._set_zaxis_to_left", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_heatmap", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._thrace_pane"], ["", "def", "_plot_data", "(", "self", ",", "\n", "data_in", ",", "\n", "title", "=", "'title'", ",", "\n", "x_label", "=", "'$m_x$'", ",", "\n", "y_label", "=", "'$m_y$'", ",", "\n", "z_label", "=", "'z'", ",", "\n", "zlim", "=", "None", ",", "\n", "ax", "=", "None", ",", "\n", "clear", "=", "True", ",", "\n", "legend", "=", "False", ",", "\n", "plot_plane", "=", "False", ",", "\n", "tick_size", "=", "12", ",", "\n", "title_size", "=", "16", ",", "\n", "label_size", "=", "14", ",", "\n", "label_pad", "=", "12", ",", "\n", "label", "=", "None", ",", "\n", "order", "=", "3", ",", "\n", "m", "=", "False", ",", "\n", "m_th", "=", "2", ",", "\n", "dpi", "=", "150", ",", "\n", "heatmap", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Plot data on a 3d axis\n        \"\"\"", "\n", "\n", "fig", "=", "None", "\n", "if", "heatmap", ":", "\n", "            ", "return", "self", ".", "_plot_heatmap", "(", "data_in", ",", "title", "=", "title", ")", "\n", "", "if", "ax", "is", "None", ":", "\n", "            ", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "dpi", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "projection", "=", "\"3d\"", ")", "\n", "\n", "# ax = self._set_zaxis_to_left(ax)", "\n", "\n", "", "data", "=", "data_in", ".", "copy", "(", ")", "\n", "mask", "=", "np", ".", "where", "(", "(", "(", "data", ">", "m_th", "*", "np", ".", "nanstd", "(", "data", ")", ")", "|", "\n", "(", "data", "<", "-", "m_th", "*", "np", ".", "nanstd", "(", "data", ")", ")", ")", ")", "\n", "if", "m", ":", "\n", "# print(mask)", "\n", "            ", "data", "[", "mask", "]", "=", "np", ".", "nan", "\n", "", "if", "clear", ":", "\n", "            ", "ax", ".", "cla", "(", ")", "\n", "", "op_x", "=", "self", ".", "op_x", ".", "copy", "(", ")", "\n", "op_y", "=", "self", ".", "op_y", ".", "copy", "(", ")", "\n", "\n", "plane", "=", "[", "]", "\n", "if", "plot_plane", ":", "\n", "            ", "plane_id", ",", "plane", "=", "self", ".", "_thrace_pane", "(", "data", ")", "\n", "\n", "", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "op_x", ",", "op_y", ")", "\n", "z", "=", "data", ".", "copy", "(", ")", "\n", "ax", ".", "set_title", "(", "title", ",", "fontsize", "=", "title_size", ")", "\n", "\n", "ax", ".", "scatter3D", "(", "x", ",", "y", ",", "z", ".", "ravel", "(", ")", ",", "c", "=", "z", ".", "ravel", "(", ")", ",", "label", "=", "label", ",", "marker", "=", "'.'", ")", "\n", "if", "plot_plane", ":", "\n", "            ", "if", "plane_id", ":", "\n", "# print('Plane 2')", "\n", "                ", "ax", ".", "plot_surface", "(", "\n", "y", ",", "\n", "x", ",", "\n", "plane", ",", "\n", "rstride", "=", "1", ",", "\n", "cstride", "=", "1", ",", "\n", "alpha", "=", "0.5", ",", "\n", ")", "\n", "", "else", ":", "\n", "# print('Plane 1')", "\n", "                ", "ax", ".", "plot_surface", "(", "\n", "x", ",", "\n", "y", ",", "\n", "plane", ",", "\n", "rstride", "=", "1", ",", "\n", "cstride", "=", "1", ",", "\n", "alpha", "=", "0.5", ",", "\n", ")", "\n", "", "", "ax", ".", "set_xlabel", "(", "x_label", ",", "fontsize", "=", "label_size", ",", "labelpad", "=", "label_pad", ")", "\n", "ax", ".", "set_ylabel", "(", "y_label", ",", "fontsize", "=", "label_size", ",", "labelpad", "=", "label_pad", ")", "\n", "ax", ".", "zaxis", ".", "set_rotate_label", "(", "False", ")", "\n", "ax", ".", "set_zlabel", "(", "z_label", ",", "fontsize", "=", "label_size", ",", "labelpad", "=", "label_pad", ",", "rotation", "=", "90", ")", "\n", "ax", "=", "self", ".", "_set_zaxis_to_left", "(", "ax", ")", "\n", "\n", "# make the panes transparent", "\n", "ax", ".", "xaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "zaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "# make the grid lines transparent", "\n", "ax", ".", "xaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "ax", ".", "yaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "ax", ".", "zaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "# Set ticks lable and its fontsize", "\n", "ax", ".", "set_xlim3d", "(", "round", "(", "op_x", "[", "0", "]", ",", "2", ")", ",", "round", "(", "op_x", "[", "-", "1", "]", ",", "2", ")", ")", "\n", "ax", ".", "set_ylim3d", "(", "round", "(", "op_x", "[", "0", "]", ",", "2", ")", ",", "round", "(", "op_x", "[", "-", "1", "]", ",", "2", ")", ")", "\n", "ax", ".", "set_xticks", "(", "np", ".", "linspace", "(", "round", "(", "op_x", "[", "0", "]", ",", "2", ")", ",", "round", "(", "op_x", "[", "-", "1", "]", ",", "2", ")", ",", "3", ")", ")", "\n", "ax", ".", "set_yticks", "(", "np", ".", "linspace", "(", "round", "(", "op_y", "[", "0", "]", ",", "2", ")", ",", "round", "(", "op_y", "[", "-", "1", "]", ",", "2", ")", ",", "3", ")", ")", "\n", "# ax.xaxis.set_major_formatter(mtick.FormatStrFormatter('%.1e'))", "\n", "ax", ".", "ticklabel_format", "(", "style", "=", "'sci'", ",", "axis", "=", "'x'", ",", "scilimits", "=", "(", "0", ",", "0", ")", ",", "useMathText", "=", "True", ")", "\n", "ax", ".", "ticklabel_format", "(", "style", "=", "'sci'", ",", "axis", "=", "'y'", ",", "scilimits", "=", "(", "0", ",", "0", ")", ",", "useMathText", "=", "True", ")", "\n", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'major'", ",", "labelsize", "=", "tick_size", ")", "\n", "# ax.xaxis._axinfo['label']['space_factor'] = 2.0", "\n", "# ax.yaxis._axinfo['label']['space_factor'] = 2.0", "\n", "# ax.zaxis._axinfo['label']['space_factor'] = 2.0", "\n", "# plt.tight_layout()", "\n", "if", "legend", ":", "\n", "# plt.legend(prop={'size': 14})", "\n", "            ", "ax", ".", "legend", "(", ")", "\n", "\n", "", "if", "zlim", ":", "\n", "            ", "ax", ".", "set_zlim3d", "(", "zlim", ")", "\n", "\n", "", "return", "fig", ",", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_heatmap": [[1400, 1421], ["matplotlib.figure", "matplotlib.figure", "matplotlib.suptitle", "matplotlib.suptitle", "seaborn.heatmap", "seaborn.heatmap.set_xlabel", "seaborn.heatmap.set_ylabel", "seaborn.heatmap.tick_params", "matplotlib.tight_layout", "matplotlib.tight_layout"], "methods", ["None"], ["", "def", "_plot_heatmap", "(", "self", ",", "data", ",", "title", "=", "'title'", ",", "num_ticks", "=", "5", ")", ":", "\n", "        ", "\"\"\"\n        Plots heatmap of data\n        \"\"\"", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "suptitle", "(", "title", ",", "verticalalignment", "=", "'center'", ",", "ha", "=", "'right'", ")", "\n", "# ticks = self.op_x.copy()", "\n", "# ticks_loc = np.linspace(0, len(ticks), num_ticks)", "\n", "# ticks = np.linspace(min(ticks), max(ticks), num_ticks).round(2)", "\n", "ax", "=", "sns", ".", "heatmap", "(", "data", ",", "\n", "# xticklabels=ticks[::-1],", "\n", "# yticklabels=ticks,", "\n", "cmap", "=", "plt", ".", "cm", ".", "coolwarm", ",", "\n", "center", "=", "0", ")", "\n", "ax", ".", "set_xlabel", "(", "'$m_x$'", ",", "fontsize", "=", "16", ",", "labelpad", "=", "10", ")", "\n", "ax", ".", "set_ylabel", "(", "'$m_y$'", ",", "fontsize", "=", "16", ",", "labelpad", "=", "10", ")", "\n", "# ax.set_xticks(ticks_loc)", "\n", "# ax.set_yticks(ticks_loc)", "\n", "ax", ".", "tick_params", "(", "axis", "=", "'both'", ",", "which", "=", "'major'", ",", "labelsize", "=", "14", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "return", "fig", ",", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._histogram3d": [[1422, 1523], ["numpy.histogramdd", "numpy.array", "numpy.sort", "numpy.array", "range", "numpy.zeros", "numpy.append.reshape", "numpy.size", "len", "range", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "list", "list", "numpy.append", "matplotlib.figure", "matplotlib.figure", "matplotlib.figure.add_subplot", "matplotlib.cm.jet", "matplotlib.cm.jet", "plt.figure.add_subplot.bar3d", "numpy.linspace", "numpy.linspace", "matplotlib.gca", "matplotlib.gca", "matplotlib.cm.jet", "matplotlib.cm.jet", "plt.figure.add_subplot.bar3d", "min", "max", "min", "max", "numpy.append.flatten", "float", "matplotlib.close", "matplotlib.close", "matplotlib.figure", "matplotlib.figure", "matplotlib.figure.add_subplot", "matplotlib.cm.jet", "matplotlib.cm.jet", "plt.figure.add_subplot.bar3d", "numpy.append.max", "numpy.append.flatten", "float", "numpy.append.max", "matplotlib.get_fignums", "matplotlib.get_fignums", "numpy.append.flatten", "float", "numpy.append.max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_histogram3d", "(", "x", ",", "\n", "bins", "=", "20", ",", "\n", "normed", "=", "False", ",", "\n", "color", "=", "'blue'", ",", "\n", "alpha", "=", "1", ",", "\n", "hold", "=", "False", ",", "\n", "plot_hist", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Plotting a 3D histogram\n\n        Parameters\n        ----------\n\n        sample : array_like.\n            The data to be histogrammed. It must be an (N,2) array or data\n            that can be converted to such. The rows of the resulting array\n            are the coordinates of points in a 2 dimensional polytope.\n\n        bins : sequence or int, optional, default: 10.\n            The bin specification:\n\n            * A sequence of arrays describing the bin edges along each dimension.\n            * The number of bins for each dimension (bins =[binx,biny])\n            * The number of bins for all dimensions (bins = bins).\n\n        normed : bool, optional, default: False.\n            If False, returns the number of samples in each bin.\n            If True, returns the bin density bin_count / sample_count / bin_volume.\n\n        color: string, matplotlib color arg, default = 'blue'\n\n        alpha: float, optional, default: 1.\n            0.0 transparent through 1.0 opaque\n\n        hold: boolean, optional, default: False\n\n        Returns\n        --------\n        H : ndarray.\n            The bidimensional histogram of sample x.\n\n        edges : list.\n            A list of 2 arrays describing the bin edges for each dimension.\n\n        Examples\n        --------\n        >>> r = np.random.randn(1000,2)\n        >>> H, edges = np._histogram3d(r,bins=[10,15])\n        \"\"\"", "\n", "\n", "if", "np", ".", "size", "(", "bins", ")", "==", "1", ":", "\n", "            ", "bins", "=", "[", "bins", ",", "bins", "]", "\n", "\n", "", "if", "(", "len", "(", "x", ")", "==", "2", ")", ":", "\n", "            ", "x", "=", "x", ".", "T", "\n", "\n", "", "H", ",", "edges", "=", "np", ".", "histogramdd", "(", "x", ",", "bins", ",", "density", "=", "True", ")", "\n", "\n", "H", "=", "H", ".", "T", "\n", "X", "=", "np", ".", "array", "(", "\n", "list", "(", "np", ".", "linspace", "(", "min", "(", "edges", "[", "0", "]", ")", ",", "max", "(", "edges", "[", "0", "]", ")", ",", "bins", "[", "0", "]", ")", ")", "*", "bins", "[", "1", "]", ")", "\n", "Y", "=", "np", ".", "sort", "(", "\n", "list", "(", "np", ".", "linspace", "(", "min", "(", "edges", "[", "1", "]", ")", ",", "max", "(", "edges", "[", "1", "]", ")", ",", "bins", "[", "1", "]", ")", ")", "*", "bins", "[", "0", "]", ")", "\n", "\n", "dz", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "bins", "[", "1", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "bins", "[", "0", "]", ")", ":", "\n", "                ", "dz", "=", "np", ".", "append", "(", "dz", ",", "H", "[", "i", "]", "[", "j", "]", ")", "\n", "\n", "", "", "Z", "=", "np", ".", "zeros", "(", "bins", "[", "0", "]", "*", "bins", "[", "1", "]", ")", "\n", "\n", "dx", "=", "X", "[", "1", "]", "-", "X", "[", "0", "]", "\n", "dy", "=", "Y", "[", "bins", "[", "0", "]", "]", "-", "Y", "[", "0", "]", "\n", "\n", "if", "plot_hist", ":", "\n", "            ", "if", "(", "not", "hold", ")", ":", "\n", "                ", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "300", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "colors", "=", "plt", ".", "cm", ".", "jet", "(", "dz", ".", "flatten", "(", ")", "/", "float", "(", "dz", ".", "max", "(", ")", ")", ")", "\n", "ax", ".", "bar3d", "(", "X", ",", "Y", ",", "Z", ",", "dx", ",", "dy", ",", "dz", ",", "alpha", "=", "alpha", ",", "color", "=", "colors", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "colors", "=", "plt", ".", "cm", ".", "jet", "(", "dz", ".", "flatten", "(", ")", "/", "float", "(", "dz", ".", "max", "(", ")", ")", ")", "\n", "ax", ".", "bar3d", "(", "X", ",", "Y", ",", "Z", ",", "dx", ",", "dy", ",", "dz", ",", "alpha", "=", "alpha", ",", "color", "=", "colors", ")", "\n", "", "except", ":", "\n", "                    ", "plt", ".", "close", "(", "plt", ".", "get_fignums", "(", ")", "[", "-", "1", "]", ")", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "colors", "=", "plt", ".", "cm", ".", "jet", "(", "dz", ".", "flatten", "(", ")", "/", "float", "(", "dz", ".", "max", "(", ")", ")", ")", "\n", "ax", ".", "bar3d", "(", "X", ",", "Y", ",", "Z", ",", "dx", ",", "dy", ",", "dz", ",", "alpha", "=", "alpha", ",", "color", "=", "colors", ")", "\n", "\n", "", "", "plt", ".", "xlabel", "(", "'X'", ")", "\n", "plt", ".", "ylabel", "(", "'Y'", ")", "\n", "", "edges", "=", "[", "X", ",", "Y", "]", "\n", "H", "=", "dz", ".", "reshape", "(", "bins", "[", "0", "]", ",", "bins", "[", "1", "]", ")", "\n", "\n", "# return H, edges;", "\n", "return", "H", ",", "edges", ",", "X", ",", "Y", ",", "Z", ",", "dx", ",", "dy", ",", "dz", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._noise_plot": [[1524, 1535], ["numpy.nanstd", "numpy.linspace", "scipy.stats.norm.pdf", "ax.hist", "ax.plot", "ax.set", "ax.legend"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_noise_plot", "(", "ax", ",", "residual", ",", "title", ")", ":", "\n", "        ", "sigma", "=", "np", ".", "nanstd", "(", "residual", ")", "\n", "x", "=", "np", ".", "linspace", "(", "-", "6", "*", "sigma", ",", "6", "*", "sigma", ",", "100", ")", "\n", "gaussian", "=", "norm", ".", "pdf", "(", "x", ",", "scale", "=", "sigma", ")", "\n", "\n", "ax", ".", "hist", "(", "residual", ",", "bins", "=", "100", ",", "density", "=", "True", ",", "histtype", "=", "'stepfilled'", ",", "label", "=", "'Actual'", ")", "\n", "ax", ".", "plot", "(", "x", ",", "gaussian", ",", "label", "=", "'Theoretical'", ")", "\n", "\n", "ax", ".", "set", "(", "xlabel", "=", "'Residual'", ",", "ylabel", "=", "'Density'", ",", "title", "=", "title", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._noise_plot_2d": [[1536, 1554], ["cls._histogram3d", "matplotlib.cm.YlGnBu", "matplotlib.cm.YlGnBu", "cls._set_zaxis_to_left.bar3d", "cls._set_zaxis_to_left.set", "cls._set_zaxis_to_left", "cls._set_zaxis_to_left.xaxis.set_pane_color", "cls._set_zaxis_to_left.yaxis.set_pane_color", "cls._set_zaxis_to_left.zaxis.set_pane_color", "cls._remove_nans", "dz.flatten", "float", "dz.max"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._histogram3d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._set_zaxis_to_left", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._remove_nans"], ["", "@", "classmethod", "\n", "def", "_noise_plot_2d", "(", "cls", ",", "ax", ",", "res_x", ",", "res_y", ",", "title", ")", ":", "\n", "        ", "H", ",", "edges", ",", "X", ",", "Y", ",", "Z", ",", "dx", ",", "dy", ",", "dz", "=", "cls", ".", "_histogram3d", "(", "cls", ".", "_remove_nans", "(", "res_x", ",", "res_y", ")", ")", "\n", "colors", "=", "plt", ".", "cm", ".", "YlGnBu", "(", "dz", ".", "flatten", "(", ")", "/", "float", "(", "dz", ".", "max", "(", ")", ")", ")", "\n", "ax", ".", "bar3d", "(", "X", ",", "Y", ",", "Z", ",", "dx", ",", "dy", ",", "dz", ",", "alpha", "=", "0.6", ",", "cmap", "=", "plt", ".", "cm", ".", "YlGnBu", ",", "color", "=", "colors", ")", "\n", "ax", ".", "set", "(", "xlabel", "=", "'$\\eta_x$'", ",", "ylabel", "=", "'$\\eta_y$'", ",", "title", "=", "title", ")", "\n", "\n", "ax", "=", "cls", ".", "_set_zaxis_to_left", "(", "ax", ")", "\n", "\n", "# make the panes transparent", "\n", "ax", ".", "xaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "zaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "\n", "# make the grid lines transparent", "\n", "ax", ".", "xaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "ax", ".", "yaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "ax", ".", "zaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._matrix_plot": [[1555, 1564], ["ax.imshow", "range", "ax.set", "range", "ax.text"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_matrix_plot", "(", "ax", ",", "mat", ")", ":", "\n", "        ", "ax", ".", "imshow", "(", "mat", ",", "vmin", "=", "-", "1", ",", "vmax", "=", "1", ",", "cmap", "=", "'RdBu'", ")", "\n", "for", "i", "in", "range", "(", "mat", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "mat", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "col", "=", "'w'", "if", "i", "==", "j", "else", "'k'", "\n", "ax", ".", "text", "(", "j", ",", "i", ",", "f'{mat[i, j]:.3f}'", ",", "ha", "=", "'center'", ",", "va", "=", "'center'", ",", "size", "=", "'small'", ",", "color", "=", "col", ")", "\n", "\n", "", "", "ax", ".", "set", "(", "xticks", "=", "[", "]", ",", "yticks", "=", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._qq_plot": [[1565, 1577], ["numpy.nanstd", "scipy.stats.probplot", "ax.axline", "ax.plot", "ax.axis", "ax.set", "ax.set_yticks", "ax.get_xticks", "numpy.nanmin", "numpy.nanmax"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_qq_plot", "(", "ax", ",", "residual", ",", "title", ")", ":", "\n", "        ", "sigma", "=", "np", ".", "nanstd", "(", "residual", ")", "\n", "(", "osm", ",", "osr", ")", ",", "_", "=", "probplot", "(", "residual", ",", "sparams", "=", "(", "0", ",", "sigma", ")", ")", "\n", "ax", ".", "axline", "(", "xy1", "=", "(", "-", "1", ",", "-", "1", ")", ",", "xy2", "=", "(", "1", ",", "1", ")", ",", "color", "=", "'k'", ")", "\n", "ax", ".", "plot", "(", "osm", ",", "osr", ",", "'.'", ")", "\n", "\n", "ax", ".", "axis", "(", "'equal'", ")", "\n", "ax", ".", "set", "(", "xlabel", "=", "'Actual'", ",", "ylabel", "=", "'Theoretical'", ",", "\n", "xlim", "=", "(", "1.1", "*", "np", ".", "nanmin", "(", "(", "osm", ",", "osr", ")", ")", ",", "1.1", "*", "np", ".", "nanmax", "(", "(", "osm", ",", "osr", ")", ")", ")", ",", "\n", "title", "=", "title", ")", "\n", "ax", ".", "set_yticks", "(", "ax", ".", "get_xticks", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._acf_plot": [[1578, 1589], ["ax.plot", "ax.axvline", "ax.set", "ax.legend", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_acf_plot", "(", "ax", ",", "acf", ",", "lags", ",", "a", ",", "b", ",", "c", ",", "act", ",", "title", ")", ":", "\n", "        ", "acf", ",", "lags", "=", "acf", "[", ":", "(", "10", "*", "int", "(", "np", ".", "ceil", "(", "act", ")", ")", ")", "]", ",", "lags", "[", ":", "(", "10", "*", "int", "(", "np", ".", "ceil", "(", "act", ")", ")", ")", "]", "\n", "\n", "# expfit = a * np.exp(-lags / b) + c", "\n", "ax", ".", "plot", "(", "lags", ",", "acf", ",", "label", "=", "'Autocorrelation'", ")", "\n", "# ax.plot(lags, expfit, '--', label='Exponential fit')", "\n", "ax", ".", "axvline", "(", "act", ",", "label", "=", "'Autocorr. time'", ",", "color", "=", "'k'", ")", "\n", "\n", "ax", ".", "set", "(", "xlabel", "=", "'Time lag'", ",", "ylabel", "=", "'Autocorr.'", ",", "title", "=", "title", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._acf_plot_multi": [[1590, 1601], ["ax.plot", "ax.plot", "ax.axvline", "ax.axvline", "ax.set", "ax.legend", "max", "int", "int", "numpy.ceil", "numpy.ceil"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_acf_plot_multi", "(", "ax", ",", "acf1", ",", "acf2", ",", "lags", ",", "act1", ",", "act2", ",", "title", "=", "None", ")", ":", "\n", "        ", "lim", "=", "10", "*", "max", "(", "int", "(", "np", ".", "ceil", "(", "act1", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "act2", ")", ")", ")", "\n", "acf1", ",", "acf2", ",", "lags", "=", "acf1", "[", ":", "lim", "]", ",", "acf2", "[", ":", "lim", "]", ",", "lags", "[", ":", "lim", "]", "\n", "ax", ".", "plot", "(", "lags", ",", "acf1", ",", "label", "=", "'Autocorr. $\\\\eta_x$'", ")", "\n", "ax", ".", "plot", "(", "lags", ",", "acf2", ",", "label", "=", "'Autocorr. $\\\\eta_y$'", ")", "\n", "ax", ".", "axvline", "(", "act1", ",", "color", "=", "'k'", ")", "# label='ACT (X)')", "\n", "ax", ".", "axvline", "(", "act2", ",", "color", "=", "'k'", ")", "# label='ACT (Y)')", "\n", "\n", "ax", ".", "set", "(", "xlabel", "=", "'Time lag'", ",", "ylabel", "=", "'Autocorr.'", ",", "title", "=", "title", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._km_plot": [[1602, 1610], ["ax.axline", "ax.plot", "ax.axis", "ax.set", "ax.set_yticks", "ax.get_xticks"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_km_plot", "(", "ax", ",", "km_2", ",", "km_4", ",", "title", ")", ":", "\n", "        ", "ax", ".", "axline", "(", "xy1", "=", "(", "0", ",", "0", ")", ",", "slope", "=", "1", ",", "color", "=", "'k'", ")", "\n", "ax", ".", "plot", "(", "3", "*", "(", "km_2", "**", "2", ")", ",", "km_4", ",", "'.'", ")", "\n", "\n", "ax", ".", "axis", "(", "'equal'", ")", "\n", "ax", ".", "set", "(", "xlabel", "=", "'$3 \\cdot K_2^2$'", ",", "ylabel", "=", "'$K_4$'", ",", "title", "=", "title", ")", "\n", "ax", ".", "set_yticks", "(", "ax", ".", "get_xticks", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._show_histograms_1d": [[1611, 1617], ["ax.hist", "ax.hist", "ax.set", "ax.legend"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_show_histograms_1d", "(", "ax", ",", "x1", ",", "x2", ",", "xlabel", ",", "title", ")", ":", "\n", "        ", "ax", ".", "hist", "(", "x1", ",", "bins", "=", "100", ",", "density", "=", "True", ",", "histtype", "=", "'stepfilled'", ",", "alpha", "=", "0.5", ",", "label", "=", "'Original'", ")", "\n", "ax", ".", "hist", "(", "x2", ",", "bins", "=", "100", ",", "density", "=", "True", ",", "histtype", "=", "'stepfilled'", ",", "alpha", "=", "0.5", ",", "label", "=", "'Bootstrapped'", ")", "\n", "ax", ".", "set", "(", "xlabel", "=", "xlabel", ",", "title", "=", "title", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._show_histograms_2d": [[1618, 1641], ["cls._histogram3d", "matplotlib.cm.YlGnBu", "matplotlib.cm.YlGnBu", "cls._set_zaxis_to_left.bar3d", "cls._histogram3d", "matplotlib.cm.OrRd", "matplotlib.cm.OrRd", "cls._set_zaxis_to_left.bar3d", "cls._set_zaxis_to_left", "cls._set_zaxis_to_left.xaxis.set_pane_color", "cls._set_zaxis_to_left.yaxis.set_pane_color", "cls._set_zaxis_to_left.zaxis.set_pane_color", "cls._set_zaxis_to_left.set", "cls._remove_nans", "cls._remove_nans", "dz.flatten", "float", "dz.flatten", "float", "dz.max", "dz.max"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._histogram3d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._histogram3d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._set_zaxis_to_left", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._remove_nans", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._remove_nans"], ["", "@", "classmethod", "\n", "def", "_show_histograms_2d", "(", "cls", ",", "ax", ",", "x1", ",", "x2", ",", "title", ")", ":", "\n", "        ", "H", ",", "edges", ",", "X", ",", "Y", ",", "Z", ",", "dx", ",", "dy", ",", "dz", "=", "cls", ".", "_histogram3d", "(", "cls", ".", "_remove_nans", "(", "x1", "[", "0", "]", ",", "x1", "[", "1", "]", ")", ")", "\n", "colors", "=", "plt", ".", "cm", ".", "YlGnBu", "(", "dz", ".", "flatten", "(", ")", "/", "float", "(", "dz", ".", "max", "(", ")", ")", ")", "\n", "ax", ".", "bar3d", "(", "X", ",", "Y", ",", "Z", ",", "dx", ",", "dy", ",", "dz", ",", "alpha", "=", "0.4", ",", "cmap", "=", "plt", ".", "cm", ".", "YlGnBu", ",", "color", "=", "colors", ")", "\n", "\n", "H", ",", "edges", ",", "X", ",", "Y", ",", "Z", ",", "dx", ",", "dy", ",", "dz", "=", "cls", ".", "_histogram3d", "(", "cls", ".", "_remove_nans", "(", "x2", "[", "0", "]", ",", "x2", "[", "1", "]", ")", ")", "\n", "colors", "=", "plt", ".", "cm", ".", "OrRd", "(", "dz", ".", "flatten", "(", ")", "/", "float", "(", "dz", ".", "max", "(", ")", ")", ")", "\n", "ax", ".", "bar3d", "(", "X", ",", "Y", ",", "Z", ",", "dx", ",", "dy", ",", "dz", ",", "alpha", "=", "0.4", ",", "cmap", "=", "plt", ".", "cm", ".", "OrRd", ",", "color", "=", "colors", ")", "\n", "\n", "ax", "=", "cls", ".", "_set_zaxis_to_left", "(", "ax", ")", "\n", "\n", "# make the panes transparent", "\n", "ax", ".", "xaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "zaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "\n", "# make the grid lines transparent", "\n", "ax", ".", "xaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "ax", ".", "yaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "ax", ".", "zaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "ax", ".", "set", "(", "xlabel", "=", "'$M_x$'", ",", "ylabel", "=", "'$M_y$'", ",", "title", "=", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._show_functions_1d": [[1642, 1648], ["ax.plot", "ax.plot", "ax.set", "ax.legend", "f", "fhat"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_show_functions_1d", "(", "ax", ",", "xs", ",", "f", ",", "fhat", ",", "ylabel", ",", "title", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "xs", ",", "f", "(", "xs", ")", ",", "linewidth", "=", "3", ",", "label", "=", "'Original'", ")", "\n", "ax", ".", "plot", "(", "xs", ",", "fhat", "(", "xs", ")", ",", "linewidth", "=", "3", ",", "label", "=", "'Bootstrapped'", ")", "\n", "ax", ".", "set", "(", "xlabel", "=", "'$x$'", ",", "ylabel", "=", "ylabel", ",", "title", "=", "title", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._show_functions_2d": [[1649, 1671], ["numpy.meshgrid", "cls._set_zaxis_to_left.plot_wireframe", "cls._set_zaxis_to_left.plot_wireframe", "cls._set_zaxis_to_left", "cls._set_zaxis_to_left.xaxis.set_pane_color", "cls._set_zaxis_to_left.yaxis.set_pane_color", "cls._set_zaxis_to_left.zaxis.set_pane_color", "cls._set_zaxis_to_left.set", "cls._set_zaxis_to_left.legend", "numpy.linspace", "numpy.linspace", "f", "fhat", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._set_zaxis_to_left"], ["", "@", "classmethod", "\n", "def", "_show_functions_2d", "(", "cls", ",", "ax", ",", "f", ",", "fhat", ",", "title", ")", ":", "\n", "        ", "r", ",", "theta", "=", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "50", ")", ",", "np", ".", "linspace", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ",", "90", ")", ")", "\n", "x", ",", "y", "=", "r", "*", "np", ".", "cos", "(", "theta", ")", ",", "r", "*", "np", ".", "sin", "(", "theta", ")", "\n", "\n", "ax", ".", "plot_wireframe", "(", "x", ",", "y", ",", "f", "(", "x", ",", "y", ")", ",", "alpha", "=", "0.5", ",", "color", "=", "'#1f77b4'", ",", "label", "=", "'Original'", ")", "\n", "ax", ".", "plot_wireframe", "(", "x", ",", "y", ",", "fhat", "(", "x", ",", "y", ")", ",", "alpha", "=", "0.5", ",", "color", "=", "'#ff7f0e'", ",", "label", "=", "'Bootstrapped'", ")", "\n", "\n", "ax", "=", "cls", ".", "_set_zaxis_to_left", "(", "ax", ")", "\n", "\n", "# make the panes transparent", "\n", "ax", ".", "xaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "yaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "ax", ".", "zaxis", ".", "set_pane_color", "(", "(", "1.0", ",", "1.0", ",", "1.0", ",", "0.0", ")", ")", "\n", "\n", "# make the grid lines transparent", "\n", "ax", ".", "xaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "ax", ".", "yaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "ax", ".", "zaxis", ".", "_axinfo", "[", "\"grid\"", "]", "[", "'color'", "]", "=", "(", "1", ",", "1", ",", "1", ",", "0", ")", "\n", "\n", "ax", ".", "set", "(", "xlabel", "=", "'$M_x$'", ",", "ylabel", "=", "'$M_y$'", ",", "title", "=", "title", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.__console__.main": [[37, 58], ["parser.parse_args", "str", "pkg_resources.resource_string", "subprocess.call", "print", "print", "os.system", "os.remove", "os.remove", "open", "f.write", "pkg_resources.resource_string.decode"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "os", ".", "environ", "[", "'pydaddy_data_file'", "]", "=", "args", ".", "file", "\n", "os", ".", "environ", "[", "'pydaddy_data_col_fmt'", "]", "=", "args", ".", "column_format", "\n", "os", ".", "environ", "[", "'pydaddy_data_delimiter'", "]", "=", "args", ".", "delimiter", "\n", "os", ".", "environ", "[", "'pydaddy_t'", "]", "=", "str", "(", "args", ".", "t", ")", "\n", "\n", "report_nb", "=", "pkg_resources", ".", "resource_string", "(", "'pydaddy'", ",", "'report/report'", ")", "\n", "\n", "with", "open", "(", "'sample_report.ipynb'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "report_nb", ".", "decode", "(", ")", ")", "\n", "\n", "", "cmd", "=", "'jupyter nbconvert --log-level ERROR --execute --TemplateExporter.exclude_input=True sample_report.ipynb --to html'", "\n", "\n", "subprocess", ".", "call", "(", "\"clear\"", ")", "\n", "print", "(", "banner", ")", "\n", "print", "(", "\"*Experimental feature*\"", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "os", ".", "remove", "(", "'sample_report.ipynb'", ")", "\n", "os", ".", "remove", "(", "'data.pydaddy.csv'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.__init__._isnotebook": [[41, 53], ["get_ipython"], "function", ["None"], ["def", "_isnotebook", "(", ")", ":", "\n", "\t", "try", ":", "\n", "\t\t", "shell", "=", "get_ipython", "(", ")", ".", "__class__", ".", "__name__", "\n", "# print(shell)", "\n", "if", "shell", "==", "'ZMQInteractiveShell'", ":", "\n", "\t\t\t", "return", "True", "# Jupyter notebook or qtconsole", "\n", "", "elif", "shell", "==", "'TerminalInteractiveShell'", ":", "\n", "\t\t\t", "return", "False", "# Terminal running IPython", "\n", "", "else", ":", "\n", "\t\t\t", "return", "False", "# Other type (?)", "\n", "", "", "except", "NameError", ":", "\n", "\t\t", "return", "False", "# Probably standard Python interpreter", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.__init__": [[28, 82], ["dict", "time.strftime", "daddy.Daddy.__dict__.update", "pydaddy.preprocessing.Preprocessing.__init__", "pydaddy.visualize.Visualize.__init__", "numpy.sqrt", "pydaddy.visualize.Visualize.__init__", "time.gmtime", "daddy.Daddy.summary"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.summary"], ["def", "__init__", "(", "self", ",", "ddsde", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "vector", "=", "ddsde", ".", "vector", "\n", "self", ".", "_ddsde", "=", "ddsde", "\n", "self", ".", "fft", "=", "ddsde", ".", "fft", "\n", "self", ".", "op_range", "=", "ddsde", ".", "op_range", "\n", "self", ".", "op_x_range", "=", "ddsde", ".", "op_x_range", "\n", "self", ".", "op_y_range", "=", "ddsde", ".", "op_y_range", "\n", "self", ".", "Dt", "=", "ddsde", ".", "Dt", "\n", "self", ".", "dt", "=", "ddsde", ".", "dt", "\n", "\n", "self", ".", "fast_mode", "=", "ddsde", ".", "fast_mode", "\n", "self", ".", "fitters", "=", "dict", "(", ")", "\n", "\n", "if", "not", "self", ".", "vector", ":", "\n", "            ", "self", ".", "_data_X", "=", "ddsde", ".", "_X", "\n", "self", ".", "_data_t", "=", "ddsde", ".", "_t", "\n", "self", ".", "_data_op", "=", "ddsde", ".", "_op_", "\n", "\n", "self", ".", "F", ",", "self", ".", "G", "=", "ddsde", ".", "F", ",", "ddsde", ".", "G", "\n", "\n", "# self.drift_order = ddsde.drift_order", "\n", "# self.diff_order = ddsde.diff_order", "\n", "\n", "Visualize", ".", "__init__", "(", "self", ",", "None", ",", "None", ",", "self", ".", "_data_op", ",", "\n", "self", ".", "_ddsde", ".", "autocorrelation_time", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_data_Mx", "=", "ddsde", ".", "_Mx", "\n", "self", ".", "_data_My", "=", "ddsde", ".", "_My", "\n", "self", ".", "_data_M", "=", "np", ".", "sqrt", "(", "self", ".", "_data_Mx", "**", "2", "+", "self", ".", "_data_My", "**", "2", ")", "\n", "self", ".", "_data_op_x", "=", "ddsde", ".", "_op_x_", "\n", "self", ".", "_data_op_y", "=", "ddsde", ".", "_op_y_", "\n", "\n", "self", ".", "F1", ",", "self", ".", "F2", "=", "ddsde", ".", "F1", ",", "ddsde", ".", "F2", "\n", "self", ".", "G11", ",", "self", ".", "G22", "=", "ddsde", ".", "G11", ",", "ddsde", ".", "G22", "\n", "self", ".", "G12", ",", "self", ".", "G21", "=", "ddsde", ".", "G12", ",", "ddsde", ".", "G21", "\n", "\n", "# self._drift_slider = ddsde._drift_slider", "\n", "# self._diff_slider = ddsde._diff_slider", "\n", "\n", "Visualize", ".", "__init__", "(", "self", ",", "self", ".", "_data_op_x", ",", "self", ".", "_data_op_y", ",", "None", ",", "\n", "self", ".", "_ddsde", ".", "autocorrelation_time", ",", "_act_mx", "=", "self", ".", "_ddsde", ".", "_act_mx", ",", "\n", "_act_my", "=", "self", ".", "_ddsde", ".", "_act_my", ")", "\n", "\n", "", "self", ".", "_drift_slider", "=", "ddsde", ".", "_drift_slider", "\n", "self", ".", "_diff_slider", "=", "ddsde", ".", "_diff_slider", "\n", "self", ".", "_cross_diff_slider", "=", "ddsde", ".", "_cross_diff_slider", "\n", "\n", "self", ".", "res_dir", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ",", "time", ".", "gmtime", "(", ")", ")", "\n", "\n", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "Preprocessing", ".", "__init__", "(", "self", ")", "\n", "\n", "if", "ddsde", ".", "_show_summary", ":", "\n", "            ", "self", ".", "summary", "(", "ret_fig", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._data_avgdrift": [[86, 90], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "_data_avgdrift", "(", "self", ")", ":", "\n", "        ", "\"\"\" :meta private \"\"\"", "\n", "return", "self", ".", "_ddsde", ".", "_avgdrift_", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._data_avgdiff": [[91, 95], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_data_avgdiff", "(", "self", ")", ":", "\n", "        ", "\"\"\" :meta private \"\"\"", "\n", "return", "self", ".", "_ddsde", ".", "_avgdiff_", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._data_drift_ebar": [[96, 100], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_data_drift_ebar", "(", "self", ")", ":", "\n", "        ", "\"\"\" :meta private: \"\"\"", "\n", "return", "self", ".", "_ddsde", ".", "_drift_ebar", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._data_diff_ebar": [[101, 105], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_data_diff_ebar", "(", "self", ")", ":", "\n", "        ", "\"\"\" :meta private: \"\"\"", "\n", "return", "self", ".", "_ddsde", ".", "_diff_ebar", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._data_avgdriftX": [[106, 110], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_data_avgdriftX", "(", "self", ")", ":", "\n", "        ", "\"\"\" :meta private: \"\"\"", "\n", "return", "self", ".", "_ddsde", ".", "_avgdriftX_", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._data_avgdriftY": [[111, 115], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_data_avgdriftY", "(", "self", ")", ":", "\n", "        ", "\"\"\" :meta private: \"\"\"", "\n", "return", "self", ".", "_ddsde", ".", "_avgdriftY_", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._data_avgdiffX": [[116, 120], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_data_avgdiffX", "(", "self", ")", ":", "\n", "        ", "\"\"\" :meta private: \"\"\"", "\n", "return", "self", ".", "_ddsde", ".", "_avgdiffX_", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._data_avgdiffY": [[121, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_data_avgdiffY", "(", "self", ")", ":", "\n", "        ", "\"\"\" :meta private: \"\"\"", "\n", "return", "self", ".", "_ddsde", ".", "_avgdiffY_", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._data_avgdiffXY": [[126, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_data_avgdiffXY", "(", "self", ")", ":", "\n", "        ", "\"\"\" :meta private: \"\"\"", "\n", "return", "self", ".", "_ddsde", ".", "_avgdiffXY_", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._data_avgdiffYX": [[131, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "_data_avgdiffYX", "(", "self", ")", ":", "\n", "        ", "\"\"\" :meta private: \"\"\"", "\n", "return", "self", ".", "_ddsde", ".", "_avgdiffYX_", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.export_data": [[136, 199], ["pandas.DataFrame", "df[].isna().all", "pandas.DataFrame.to_csv", "dict", "dict", "dict", "numpy.meshgrid", "dict", "df[].isna", "x.flatten", "y.flatten", "daddy.Daddy._data_avgdriftX.flatten", "daddy.Daddy._data_avgdriftY.flatten", "daddy.Daddy._data_avgdiffX.flatten", "daddy.Daddy._data_avgdiffX.flatten", "daddy.Daddy._data_avgdriftX.flatten"], "methods", ["None"], ["", "def", "export_data", "(", "self", ",", "filename", "=", "None", ",", "raw", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Returns a pandas dataframe containing the drift and diffusion values.\n        Args\n        ----\n        filename : str, optional (default=None).\n            If provided, the data will be saved as a CSV at the given path. Else, a dataframe will be returned.\n        raw : bool, optional (default=False)\n            If True, the raw, the drift and diffusion will be returned as raw unbinned data. Otherwise (default),\n            drift and diffusion as binwise-average Kramers-Moyal coefficients are returned.\n\n        Returns\n        -------\n        df : Pandas dataframe containing the estimated drift and diffusion coefficients.\n\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "vector", ":", "\n", "            ", "if", "raw", ":", "\n", "                ", "data_dict", "=", "dict", "(", "\n", "x", "=", "self", ".", "_data_X", "[", ":", "-", "1", "]", ",", "\n", "drift", "=", "self", ".", "_ddsde", ".", "_drift_", ",", "\n", "diffusion", "=", "self", ".", "_ddsde", ".", "_diffusion_", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "data_dict", "=", "dict", "(", "\n", "x", "=", "self", ".", "_data_op", ",", "\n", "drift", "=", "self", ".", "_data_avgdrift", ",", "\n", "diffusion", "=", "self", ".", "_data_avgdiff", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "raw", ":", "\n", "                ", "data_dict", "=", "dict", "(", "\n", "x", "=", "self", ".", "_data_Mx", "[", ":", "-", "1", "]", ",", "\n", "y", "=", "self", ".", "_data_My", "[", ":", "-", "1", "]", ",", "\n", "drift_x", "=", "self", ".", "_ddsde", ".", "_driftX_", ",", "\n", "drift_y", "=", "self", ".", "_ddsde", ".", "_driftY_", ",", "\n", "diffusion_x", "=", "self", ".", "_ddsde", ".", "_diffusionX_", ",", "\n", "diffusion_y", "=", "self", ".", "_ddsde", ".", "_diffusionY_", ",", "\n", "diffusion_xy", "=", "self", ".", "_ddsde", ".", "_diffusionXY_", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "self", ".", "_data_op_x", ",", "self", ".", "_data_op_y", ")", "\n", "data_dict", "=", "dict", "(", "\n", "x", "=", "x", ".", "flatten", "(", ")", ",", "\n", "y", "=", "y", ".", "flatten", "(", ")", ",", "\n", "drift_x", "=", "self", ".", "_data_avgdriftX", ".", "flatten", "(", ")", ",", "\n", "drift_y", "=", "self", ".", "_data_avgdriftY", ".", "flatten", "(", ")", ",", "\n", "diffusion_x", "=", "self", ".", "_data_avgdiffX", ".", "flatten", "(", ")", ",", "\n", "diffusion_y", "=", "self", ".", "_data_avgdiffX", ".", "flatten", "(", ")", ",", "\n", "diffusion_xy", "=", "self", ".", "_data_avgdriftX", ".", "flatten", "(", ")", ",", "\n", ")", "\n", "\n", "", "", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "data_dict", ")", "\n", "\n", "if", "self", ".", "vector", ":", "\n", "            ", "na_rows", "=", "df", "[", "[", "'drift_x'", ",", "'drift_y'", ",", "'diffusion_x'", ",", "'diffusion_y'", ",", "'diffusion_xy'", "]", "]", ".", "isna", "(", ")", ".", "all", "(", "axis", "=", "1", ")", "\n", "df", "=", "df", "[", "~", "na_rows", "]", "\n", "\n", "", "if", "filename", ":", "\n", "            ", "df", ".", "to_csv", "(", "filename", ")", "\n", "", "else", ":", "\n", "            ", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.data": [[200, 229], ["collections.namedtuple", "daddy.Daddy._get_data_from_slider", "collections.namedtuple.", "collections.namedtuple", "daddy.Daddy._get_data_from_slider", "daddy.Daddy._get_num_points", "collections.namedtuple."], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_data_from_slider", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_data_from_slider", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_num_points"], ["", "", "def", "data", "(", "self", ",", "drift_time_scale", "=", "None", ",", "diff_time_scale", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Get the drift, diffusion and order parameter data for any timescale the analysis is done.\n\n        Args\n        ----\n        drift_time_scale : int, optional(default=None)\n            time-scale of drift data, if None, returns data analysed for given dt\n        diff_time_scale : int, optional(default=None)\n            time-scale of diffusion data, if None, returns data analysed for given delta_t\n\n        Returns\n        -------\n        list\n            - if vector, [avgdriftX, avgdriftY, avgdiffX, avgdiffY, op_x, op_y]\n            - else, [avgdrift, avgdiff, op]\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "vector", ":", "\n", "            ", "Data", "=", "namedtuple", "(", "'Data'", ",", "(", "'drift'", ",", "'diff'", ",", "'drift_num'", ",", "'diff_num'", ",", "'op'", ")", ")", "\n", "drift", ",", "diff", "=", "self", ".", "_get_data_from_slider", "(", "drift_time_scale", ",", "diff_time_scale", ")", "\n", "# _ , diff = self._get_data_from_slider(diff_time_scale)", "\n", "drift_num", ",", "diff_num", "=", "self", ".", "_get_num_points", "(", "drift_time_scale", ",", "diff_time_scale", ")", "\n", "return", "Data", "(", "drift", ",", "diff", ",", "drift_num", ",", "diff_num", ",", "self", ".", "_data_op", ")", "\n", "\n", "", "Data", "=", "namedtuple", "(", "'Data'", ",", "(", "'driftX'", ",", "'driftY'", ",", "'diffX'", ",", "'diffY'", ",", "'diffXY'", ",", "'diffYX'", ",", "'op_x'", ",", "'op_y'", ")", ")", "\n", "driftX", ",", "driftY", ",", "diffX", ",", "diffY", ",", "diffXY", ",", "diffYX", "=", "self", ".", "_get_data_from_slider", "(", "drift_time_scale", ",", "diff_time_scale", ")", "\n", "# _, _, diffX, diffY, diffXY, diffYX = self._get_data_from_slider(diff_time_scale)", "\n", "return", "Data", "(", "driftX", ",", "driftY", ",", "diffX", ",", "diffY", ",", "diffXY", ",", "diffYX", ",", "self", ".", "_data_op_x", ",", "self", ".", "_data_op_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.plot_data": [[237, 315], ["collections.namedtuple", "daddy.Daddy._plot_data", "collections.namedtuple."], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data"], ["", "def", "plot_data", "(", "self", ",", "\n", "data_in", ",", "\n", "ax", "=", "None", ",", "\n", "clear", "=", "False", ",", "\n", "title", "=", "None", ",", "\n", "x_label", "=", "'x'", ",", "\n", "y_label", "=", "'y'", ",", "\n", "z_label", "=", "'z'", ",", "\n", "tick_size", "=", "12", ",", "\n", "title_size", "=", "16", ",", "\n", "label_size", "=", "14", ",", "\n", "label_pad", "=", "12", ",", "\n", "legend_label", "=", "None", ",", "\n", "dpi", "=", "150", ")", ":", "\n", "        ", "\"\"\"\n        Plot and visualize vector drift or diffusion data of a 3d axis\n\n        Can be used plot multiple data on the same figure and compare by passing the axis of\n        figure.\n\n        Args\n        ----\n        data_in : numpy.array\n            vector drift or diffusion data to plot\n        ax : figure axis, (default=None)\n            Ia ax is None, a new axis will be created and data will be plotted on it.\n        clear : bool, (default=False)\n            if True, clear the figure.\n        title : str, (default=None)\n            title of the figure\n        x_label : str, (default='x')\n            x-axis label\n        y_label : str, (default='y')\n            y-axis label\n        z_label : str, (default='z')\n            z-axis label\n        tick_size : int, (default=12)\n            axis ticks font size\n        title_size : int, (default=16)\n            title font size\n        label_size : int, (default=14)\n            axis label font size\n        label_pad : int, (default=12)\n            axis label padding\n        legend_label : str, (default=None)\n            data legend label\n        dpi : int, (default=150)\n            figure resolution\n\n        Returns\n        -------\n        ax : 3d figure axis\n            axis of the 3d figure.\n        fig : matplotlib figure\n            returns figure only if the input ax is None.\n\n        \"\"\"", "\n", "\n", "legend", "=", "True", "if", "legend_label", "else", "False", "\n", "DataPlot", "=", "namedtuple", "(", "'DataPlot'", ",", "(", "'fig'", ",", "'ax'", ")", ")", "\n", "fig", ",", "ax", "=", "self", ".", "_plot_data", "(", "data_in", ",", "\n", "ax", "=", "ax", ",", "\n", "title", "=", "title", ",", "\n", "x_label", "=", "x_label", ",", "\n", "y_label", "=", "y_label", ",", "\n", "z_label", "=", "z_label", ",", "\n", "clear", "=", "clear", ",", "\n", "legend", "=", "legend", ",", "\n", "tick_size", "=", "tick_size", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ",", "\n", "label", "=", "legend_label", ",", "\n", "dpi", "=", "dpi", ")", "\n", "return", "DataPlot", "(", "ax", ".", "figure", ",", "ax", ")", "\n", "if", "fig", "is", "None", ":", "\n", "            ", "return", "ax", "\n", "", "return", "ax", ",", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.parameters": [[316, 333], ["dict", "daddy.Daddy._ddsde.__dict__.keys", "str", "str"], "methods", ["None"], ["", "def", "parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\t\tGet all given and assumed parameters used for the analysis\n\n\t\tArgs\n\t\t----\n\n\t\tReturns\n\t\t-------\n\t\tparams : dict, json\n\t\t\tall parameters given and assumed used for analysis\n\t\t\"\"\"", "\n", "params", "=", "dict", "(", ")", "\n", "for", "keys", "in", "self", ".", "_ddsde", ".", "__dict__", ".", "keys", "(", ")", ":", "\n", "            ", "if", "str", "(", "keys", ")", "[", "0", "]", "!=", "'_'", ":", "\n", "                ", "params", "[", "keys", "]", "=", "str", "(", "self", ".", "_ddsde", ".", "__dict__", "[", "keys", "]", ")", "\n", "", "", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.fit": [[334, 406], ["setattr", "TypeError", "numpy.stack", "pydaddy.fitters.PolyFit2D", "pydaddy.fitters.PolyFit1D", "pydaddy.fitters.PolyFit1D.tune_and_fit", "pydaddy.fitters.PolyFit1D.fit", "numpy.isnan().any", "numpy.isnan", "numpy.isnan", "numpy.isnan", "TypeError", "numpy.isnan", "TypeError"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.tune_and_fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit"], ["", "def", "fit", "(", "self", ",", "function_name", ",", "order", "=", "None", ",", "threshold", "=", "0.05", ",", "alpha", "=", "0", ",", "tune", "=", "False", ",", "thresholds", "=", "None", ",", "library", "=", "None", ",", "\n", "plot", "=", "False", ")", ":", "\n", "\n", "        ", "if", "not", "(", "order", "or", "library", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'You should either specify the order of the polynomial, or provide a library.'", ")", "\n", "\n", "", "if", "library", ":", "\n", "            ", "order", "=", "1", "\n", "\n", "", "if", "self", ".", "vector", ":", "\n", "# x = [self._Mx[:-1], self._My[:-1]]", "\n", "# x = np.stack((self._Mx[:-1], self._My[:-1]), axis=1)", "\n", "            ", "x", "=", "np", ".", "stack", "(", "(", "self", ".", "_ddsde", ".", "_Mx", ",", "self", ".", "_ddsde", ".", "_My", ")", ",", "axis", "=", "1", ")", "\n", "if", "function_name", "==", "'F1'", ":", "\n", "                ", "x", "=", "x", "[", ":", "-", "self", ".", "Dt", "]", "\n", "y", "=", "self", ".", "_ddsde", ".", "_driftX_", "\n", "", "elif", "function_name", "==", "'F2'", ":", "\n", "                ", "x", "=", "x", "[", ":", "-", "self", ".", "Dt", "]", "\n", "y", "=", "self", ".", "_ddsde", ".", "_driftY_", "\n", "", "elif", "function_name", "==", "'G11'", ":", "\n", "                ", "x", "=", "x", "[", ":", "-", "self", ".", "dt", "]", "\n", "y", "=", "self", ".", "_ddsde", ".", "_diffusionX_", "\n", "", "elif", "function_name", "==", "'G22'", ":", "\n", "                ", "x", "=", "x", "[", ":", "-", "self", ".", "dt", "]", "\n", "y", "=", "self", ".", "_ddsde", ".", "_diffusionY_", "\n", "", "elif", "function_name", "in", "[", "'G12'", ",", "'G21'", "]", ":", "\n", "                ", "x", "=", "x", "[", ":", "-", "self", ".", "dt", "]", "\n", "y", "=", "self", ".", "_ddsde", ".", "_diffusionXY_", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "'Invalid function name for vector analysis'", ")", "\n", "\n", "# Handle missing values (NaNs) if present", "\n", "", "nan_idx", "=", "np", ".", "isnan", "(", "x", ")", ".", "any", "(", "axis", "=", "1", ")", "|", "np", ".", "isnan", "(", "y", ")", "\n", "x", "=", "x", "[", "~", "nan_idx", "]", "\n", "y", "=", "y", "[", "~", "nan_idx", "]", "\n", "\n", "fitter", "=", "PolyFit2D", "(", "max_degree", "=", "order", ",", "threshold", "=", "threshold", ",", "alpha", "=", "alpha", ",", "library", "=", "library", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "_ddsde", ".", "_X", "[", ":", "-", "self", ".", "Dt", "]", "\n", "if", "function_name", "==", "'G'", ":", "\n", "# y = self._diffusion(self._X, t_int=self.t_int, dt=1)", "\n", "# F = self.fit('F', order=5, tune=True)", "\n", "# y = self._diffusion_from_residual(self._X, F=F, t_int=self.t_int, dt=1)", "\n", "                ", "y", "=", "self", ".", "_ddsde", ".", "_diffusion_", "\n", "", "elif", "function_name", "==", "'F'", ":", "\n", "                ", "y", "=", "self", ".", "_ddsde", ".", "_drift_", "\n", "", "else", ":", "\n", "                ", "raise", "TypeError", "(", "'Invalid function name for scalar analysis'", ")", "\n", "\n", "# Handle missing values (NaNs) if present", "\n", "", "nan_idx", "=", "np", ".", "isnan", "(", "x", ")", "|", "np", ".", "isnan", "(", "y", ")", "\n", "x", "=", "x", "[", "~", "nan_idx", "]", "\n", "y", "=", "y", "[", "~", "nan_idx", "]", "\n", "\n", "fitter", "=", "PolyFit1D", "(", "max_degree", "=", "order", ",", "threshold", "=", "threshold", ",", "alpha", "=", "alpha", ",", "library", "=", "library", ")", "\n", "#", "\n", "", "if", "tune", ":", "\n", "            ", "res", "=", "fitter", ".", "tune_and_fit", "(", "x", ",", "y", ",", "thresholds", ",", "plot", "=", "plot", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "fitter", ".", "fit", "(", "x", ",", "y", ")", "\n", "\n", "", "setattr", "(", "self", ",", "function_name", ",", "res", ")", "\n", "self", ".", "fitters", "[", "function_name", "]", "=", "fitter", "\n", "\n", "if", "function_name", "in", "[", "'G12'", ",", "'G21'", "]", ":", "\n", "            ", "self", ".", "G12", "=", "res", "\n", "self", ".", "G21", "=", "res", "\n", "\n", "self", ".", "fitters", "[", "'G12'", "]", "=", "fitter", "\n", "self", ".", "fitters", "[", "'G21'", "]", "=", "fitter", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.simulate": [[407, 464], ["numpy.arange", "sdeint.itoint", "numpy.count_nonzero", "NotImplementedError", "numpy.array", "numpy.diag", "numpy.array", "sdeint.itoint", "daddy.Daddy.F", "numpy.sqrt", "numpy.abs", "daddy.Daddy.F1", "daddy.Daddy.F2", "numpy.sqrt", "numpy.sqrt", "daddy.Daddy.G", "numpy.abs", "numpy.abs", "daddy.Daddy.G11", "daddy.Daddy.G22"], "methods", ["None"], ["", "def", "simulate", "(", "self", ",", "t_int", ",", "timepoints", ",", "x0", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Generate simulated time-series with the fitted SDE model.\n\n        Generates a simulated timeseries, with specified sampling time and duration, based on the SDE model discovered\n        by PyDaddy. The drift and diffusion functions should be fit using fit() function before using simulate().\n\n        Args:\n        -----\n        t_int : float\n            Sampling time for the simulated time-series\n        timepoints : int\n            Number of time-points to simulate\n        x0 : float (scalar) or list of two floats (vector), (default=None)\n            Initial condition. If no value is passed, 0 ([0, 0] for vector) is taken as the initial condition.\n\n        Returns:\n        --------\n        x : Simulated timeseries with  `timepoints` timepoints.\n\n        \"\"\"", "\n", "\n", "tspan", "=", "np", ".", "arange", "(", "0", ",", "t_int", "*", "timepoints", ",", "step", "=", "t_int", ")", "\n", "\n", "if", "self", ".", "vector", ":", "\n", "            ", "assert", "(", "self", ".", "F1", "and", "self", ".", "F2", "and", "self", ".", "G11", "and", "self", ".", "G22", "and", "self", ".", "G12", ")", ",", "\"\"\" Use fit() function to fit F1, F2, G11, G12, G21, G22 before using simulate(). \"\"\"", "\n", "\n", "if", "np", ".", "count_nonzero", "(", "self", ".", "G12", ")", "!=", "0", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'simulate() is not implemented for systems with non-zero cross diffusion terms G12, G21.'", ")", "\n", "\n", "", "def", "F", "(", "x", ",", "t", ")", ":", "\n", "                ", "return", "np", ".", "array", "(", "[", "self", ".", "F1", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ",", "self", ".", "F2", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", "]", ")", "\n", "\n", "", "def", "G", "(", "x", ",", "t", ")", ":", "\n", "                ", "return", "np", ".", "diag", "(", "[", "np", ".", "sqrt", "(", "np", ".", "abs", "(", "self", ".", "G11", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ")", ")", ",", "np", ".", "sqrt", "(", "np", ".", "abs", "(", "self", ".", "G22", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ")", ")", ")", "]", ")", "\n", "\n", "", "if", "x0", "is", "None", ":", "\n", "                ", "x0", "=", "np", ".", "array", "(", "[", "0.", ",", "0.", "]", ")", "\n", "", "x", "=", "sdeint", ".", "itoint", "(", "f", "=", "F", ",", "G", "=", "G", ",", "y0", "=", "x0", ",", "tspan", "=", "tspan", ")", ".", "T", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "(", "self", ".", "F", "and", "self", ".", "G", ")", ",", "'Use fit() function to fit F, G before using simulate().'", "\n", "\n", "if", "x0", "is", "None", ":", "\n", "                ", "x0", "=", "0.", "\n", "\n", "", "def", "F", "(", "x", ",", "t", ")", ":", "\n", "                ", "return", "self", ".", "F", "(", "x", ")", "\n", "\n", "", "def", "G", "(", "x", ",", "t", ")", ":", "\n", "                ", "return", "np", ".", "sqrt", "(", "np", ".", "abs", "(", "self", ".", "G", "(", "x", ")", ")", ")", "\n", "\n", "", "x", "=", "sdeint", ".", "itoint", "(", "f", "=", "F", ",", "G", "=", "G", ",", "y0", "=", "x0", ",", "tspan", "=", "tspan", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.summary": [[465, 670], ["sys.stdout.flush", "daddy.Daddy._plot_summary", "matplotlib.show", "ValueError", "list", "range", "print", "list", "range", "print", "daddy.Daddy._get_data_range", "round", "daddy.Daddy._get_data_range", "round", "map", "len", "summary.append", "summary.append", "int", "summary_format.format", "print", "print", "daddy.Daddy._get_data_range", "round", "daddy.Daddy._get_data_range", "round", "daddy.Daddy._get_data_range", "round", "map", "len", "summary.append", "summary.append", "int", "summary_format.format", "print", "print", "print", "print", "print", "numpy.nanmean", "numpy.sqrt", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.nanmean", "numpy.sqrt", "len", "numpy.sqrt", "len"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_summary", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_data_range", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_data_range", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_data_range", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_data_range", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_data_range"], ["", "def", "summary", "(", "self", ",", "start", "=", "0", ",", "end", "=", "1000", ",", "kde", "=", "True", ",", "tick_size", "=", "12", ",", "title_size", "=", "15", ",", "label_size", "=", "15", ",", "label_pad", "=", "8", ",", "n_ticks", "=", "3", ",", "\n", "ret_fig", "=", "False", ",", "**", "plot_text", ")", ":", "\n", "\n", "        ", "\"\"\"\n        \t\tPrint summary of data and show summary plots chart\n\n        \t\tArgs\n        \t\t----\n        \t\t\tstart : int, (default=0)\n        \t\t\t\tstarting index, begin plotting timeseries from this point\n        \t\t\tend : int, default=1000\n        \t\t\t\tend point, plots timeseries till this index\n        \t\t\tkde : bool, (default=False)\n        \t\t\t\tif True, plot kde for histograms\n        \t\t\ttitle_size : int, (default=15)\n        \t\t\t\ttitle font size\n        \t\t\ttick_size : int, (default=12)\n        \t\t\t\taxis tick size\n        \t\t\tlabel_size : int, (default=15)\n        \t\t\t\tlabel font size\n        \t\t\tlabel_pad : int, (default=8)\n        \t\t\t\taxis label padding\n        \t\t\tn_ticks : int, (default=3)\n        \t\t\t\tnumber of axis ticks\n        \t\t\tret_fig : bool, (default=True)\n        \t\t\t\tif True return figure object\n\n        \t\t\t**plot_text:\n        \t\t\t\tplots' title and axis texts\n\n        \t\t\t\tFor scalar analysis summary plot:\n        \t\t\t\t\ttimeseries_title : title of timeseries plot\n\n        \t\t\t\t\ttimeseries_xlabel : x label of timeseries\n\n        \t\t\t\t\ttimeseries_ylabel : y label of timeseries\n\n        \t\t\t\t\tdrift_title : drift plot title\n\n        \t\t\t\t\tdrift_xlabel : drift plot x label\n\n        \t\t\t\t\tdrift_ylabel : drift plot ylabel\n\n        \t\t\t\t\tdiffusion_title : diffusion plot title\n\n        \t\t\t\t\tdiffusion_xlabel : diffusion plot x label\n\n        \t\t\t\t\tdiffusion_ylabel : diffusion plot y label\n\n        \t\t\t\tFor vector analysis summary plot:\n        \t\t\t\t\ttimeseries1_title : first timeseries plot title\n\n        \t\t\t\t\ttimeseries1_ylabel : first timeseries plot ylabel\n\n        \t\t\t\t\ttimeseries1_xlabel : first timeseries plot xlabel\n\n        \t\t\t\t\ttimeseries1_legend1 : first timeseries (Mx) legend label\n\n        \t\t\t\t\ttimeseries1_legend2 : first timeseries (My) legend label\n\n        \t\t\t\t\ttimeseries2_title : second timeseries plot title\n\n        \t\t\t\t\ttimeseries2_xlabel : second timeseries plot x label\n\n        \t\t\t\t\ttimeseries2_ylabel : second timeseries plot y label\n\n        \t\t\t\t\t2dhist1_title : Mx 2d histogram title\n\n        \t\t\t\t\t2dhist1_xlabel : Mx 2d histogram x label\n\n        \t\t\t\t\t2dhist1_ylabel : Mx 2d histogram y label\n\n        \t\t\t\t\t2dhist2_title : My 2d histogram title\n\n        \t\t\t\t\t2dhist2_xlabel : My 2d histogram x label\n\n        \t\t\t\t\t2dhist2_ylabel : My 2d histogram y label\n\n        \t\t\t\t\t2dhist3_title :  M 3d histogram title\n\n        \t\t\t\t\t2dhist3_xlabel : M 2d histogram x label\n\n        \t\t\t\t\t2dhist3_ylabel : M 2d histogram y label\n\n        \t\t\t\t\t3dhist_title :  3d histogram title\n\n        \t\t\t\t\t3dhist_xlabel : 3d histogram x label\n\n        \t\t\t\t\t3dhist_ylabel : 3d histogram y label\n\n        \t\t\t\t\t3dhist_zlabel : 3d histogram z label\n\n        \t\t\t\t\tdriftx_title : drift x plot title\n\n        \t\t\t\t\tdriftx_xlabel : drift x plot x label\n\n        \t\t\t\t\tdriftx_ylabel : drift x plot y label\n\n        \t\t\t\t\tdriftx_zlabel : drift x plot z label\n\n        \t\t\t\t\tdrifty_title : drift y plot title\n\n        \t\t\t\t\tdrifty_xlabel : drift y plot x label\n\n        \t\t\t\t\tdrifty_ylabel : drift y plot y label\n\n        \t\t\t\t\tdrifty_zlabel : drift y plot z label\n\n        \t\t\t\t\tdiffusionx_title : diffusion x plot title\n\n        \t\t\t\t\tdiffusionx_xlabel : diffusion x plot x label\n\n        \t\t\t\t\tdiffusionx_ylabel : diffusion x plot y label\n\n        \t\t\t\t\tdiffusionx_zlabel : diffusion x plot z label\n\n        \t\t\t\t\tdiffusiony_title : diffusion y plot title\n\n        \t\t\t\t\tdiffusiony_xlabel : diffusion y plot x label\n\n        \t\t\t\t\tdiffusiony_ylabel : diffusion y plot y label\n\n        \t\t\t\t\tdiffusiony_zlabel : diffusion y plot z label\n\n        \t\tReturns\n        \t\t-------\n        \t\t\tNone, or figure\n\n        \t\tRaises\n        \t\t------\n        \t\tValueError\n        \t\t\tIf start is greater than end\n        \t\t\"\"\"", "\n", "\n", "if", "start", ">", "end", ":", "\n", "            ", "raise", "ValueError", "(", "\"'start' sould not be greater than 'end'\"", ")", "\n", "\n", "", "if", "not", "self", ".", "vector", ":", "\n", "            ", "fields", "=", "[", "'M range'", ",", "'M mean'", ",", "\n", "'|M| range'", ",", "'|M| mean'", ",", "\n", "'Autocorr time (M)'", ",", "'(Dt, dt)'", ",", "\n", "]", "\n", "\n", "values", "=", "[", "self", ".", "_get_data_range", "(", "self", ".", "_data_X", ")", ",", "round", "(", "np", ".", "nanmean", "(", "self", ".", "_data_X", ")", ",", "3", ")", ",", "\n", "self", ".", "_get_data_range", "(", "np", ".", "sqrt", "(", "self", ".", "_data_X", "**", "2", ")", ")", ",", "\n", "round", "(", "np", ".", "nanmean", "(", "np", ".", "sqrt", "(", "self", ".", "_data_X", "**", "2", ")", ")", ",", "3", ")", ",", "\n", "self", ".", "autocorrelation_time", ",", "(", "self", ".", "_ddsde", ".", "Dt", ",", "self", ".", "_ddsde", ".", "dt", ")", ",", "\n", "]", "\n", "values", "=", "list", "(", "map", "(", "str", ",", "values", ")", ")", "\n", "summary", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "fields", ")", ")", ":", "\n", "                ", "summary", ".", "append", "(", "fields", "[", "i", "]", ")", "\n", "summary", ".", "append", "(", "values", "[", "i", "]", ")", "\n", "", "summary_format", "=", "(", "\"| {:<20} : {:^15}\"", "*", "1", "+", "\"|\\n\"", ")", "*", "int", "(", "len", "(", "fields", ")", "/", "1", ")", "\n", "print", "(", "summary_format", ".", "format", "(", "*", "summary", ")", ")", "\n", "if", "self", ".", "_ddsde", ".", "F", ":", "\n", "                ", "print", "(", "f'Drift:\\n{self._ddsde.F}\\n'", ")", "\n", "", "if", "self", ".", "_ddsde", ".", "G", ":", "\n", "                ", "print", "(", "f'Diffusion:\\n{self._ddsde.G}\\n'", ")", "\n", "", "data", "=", "[", "self", ".", "_data_X", ",", "self", ".", "_data_avgdrift", ",", "self", ".", "_data_avgdiff", ",", "self", ".", "_data_drift_ebar", ",", "self", ".", "_data_diff_ebar", "]", "\n", "\n", "", "else", ":", "\n", "            ", "fields", "=", "[", "'Mx range'", ",", "'Mx mean'", ",", "\n", "'My range'", ",", "'My mean'", ",", "\n", "'|M| range'", ",", "'|M| mean'", ",", "\n", "'Autocorr time (Mx, My, |M^2|)'", ",", "'(Dt, dt)'", ",", "\n", "]", "\n", "\n", "values", "=", "[", "self", ".", "_get_data_range", "(", "self", ".", "_data_Mx", ")", ",", "round", "(", "np", ".", "nanmean", "(", "self", ".", "_data_Mx", ")", ",", "3", ")", ",", "\n", "self", ".", "_get_data_range", "(", "self", ".", "_data_My", ")", ",", "round", "(", "np", ".", "nanmean", "(", "self", ".", "_data_My", ")", ",", "3", ")", ",", "\n", "self", ".", "_get_data_range", "(", "self", ".", "_data_M", ")", ",", "\n", "round", "(", "np", ".", "nanmean", "(", "np", ".", "sqrt", "(", "self", ".", "_data_Mx", "**", "2", "+", "self", ".", "_data_My", "**", "2", ")", ")", ",", "3", ")", ",", "\n", "(", "self", ".", "_ddsde", ".", "_act_mx", ",", "self", ".", "_ddsde", ".", "_act_my", ",", "self", ".", "autocorrelation_time", ")", ",", "\n", "(", "self", ".", "_ddsde", ".", "Dt", ",", "self", ".", "_ddsde", ".", "dt", ")", "\n", "]", "\n", "values", "=", "list", "(", "map", "(", "str", ",", "values", ")", ")", "\n", "summary", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "fields", ")", ")", ":", "\n", "                ", "summary", ".", "append", "(", "fields", "[", "i", "]", ")", "\n", "summary", ".", "append", "(", "values", "[", "i", "]", ")", "\n", "", "summary_format", "=", "(", "\"| {:<30} : {:^15}\"", "*", "1", "+", "\"|\\n\"", ")", "*", "int", "(", "len", "(", "fields", ")", "/", "1", ")", "\n", "# print(", "\n", "#     \"Note: All summary and plots are rounded to third decimal place.\\nCalculations, however, are accurate and account for missing values too.\\n\\n\")", "\n", "print", "(", "summary_format", ".", "format", "(", "*", "summary", ")", ")", "\n", "if", "self", ".", "_ddsde", ".", "F1", ":", "\n", "                ", "print", "(", "f'Drift (F1): {self._ddsde.F1}'", ")", "\n", "", "if", "self", ".", "_ddsde", ".", "F2", ":", "\n", "                ", "print", "(", "f'Drift (F2): {self._ddsde.F2}'", ")", "\n", "", "if", "self", ".", "_ddsde", ".", "G11", ":", "\n", "                ", "print", "(", "f'Diffusion (G11): {self._ddsde.G11}'", ")", "\n", "", "if", "self", ".", "_ddsde", ".", "G22", ":", "\n", "                ", "print", "(", "f'Diffusion (G22): {self._ddsde.G22}'", ")", "\n", "", "if", "self", ".", "_ddsde", ".", "G21", ":", "\n", "                ", "print", "(", "f'Cross diffusion (G12, G21): {self._ddsde.G21}'", ")", "\n", "", "data", "=", "[", "self", ".", "_data_Mx", ",", "self", ".", "_data_My", ",", "self", ".", "_data_avgdriftX", ",", "self", ".", "_data_avgdriftY", ",", "self", ".", "_data_avgdiffX", ",", "\n", "self", ".", "_data_avgdiffY", ",", "self", ".", "_data_avgdiffXY", "]", "\n", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "fig", "=", "self", ".", "_plot_summary", "(", "data", ",", "self", ".", "vector", ",", "kde", "=", "kde", ",", "tick_size", "=", "tick_size", ",", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "label_pad", "=", "label_pad", ",", "n_ticks", "=", "n_ticks", ",", "timeseries_start", "=", "start", ",", "\n", "timeseries_end", "=", "end", ",", "**", "plot_text", ")", "\n", "plt", ".", "show", "(", ")", "\n", "if", "ret_fig", ":", "\n", "            ", "return", "fig", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.timeseries": [[671, 751], ["daddy.Daddy._plot_timeseries", "matplotlib.show", "ValueError"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_timeseries"], ["", "def", "timeseries", "(", "self", ",", "\n", "start", "=", "0", ",", "\n", "end", "=", "1000", ",", "\n", "n_ticks", "=", "3", ",", "\n", "dpi", "=", "150", ",", "\n", "tick_size", "=", "12", ",", "\n", "title_size", "=", "14", ",", "\n", "label_size", "=", "14", ",", "\n", "label_pad", "=", "0", ",", "\n", "**", "plot_text", ")", ":", "\n", "        ", "\"\"\"\n\t\tShow plot of input data\n\n\t\tArgs\n\t\t----\n\t\tstart : int, (default=0)\n\t\t\tstarting index, begin plotting timeseries from this point\n\t\tend : int, default=1000\n\t\t\tend point, plots timeseries till this index\n\t\tn_ticks : int, (default=3)\n\t\t\tnumber of axis ticks\n\t\tdpi : int, (default=150)\n\t\t\tdpi of the figure\n\t\ttitle_size : int, (default=15)\n\t\t\ttitle font size\n\t\ttick_size : int, (default=12)\n\t\t\taxis tick size\n\t\tlabel_size : int, (default=15)\n\t\t\tlabel font size\n\t\tlabel_pad : int, (default=8)\n\t\t\taxis label padding\n\t\t**plot_text:\n\t\t\tplots' title and axis texts\n\n\t\t\tFor scalar analysis plot:\n\t\t\t\ttimeseries_title : title\n\n\t\t\t\ttimeseries_xlabel : x label\n\n\t\t\t\ttimeseries_ylabel : y label\n\n\t\t\tFor vector analysis plot:\n\t\t\t\ttimeseries1_title : first timeseries plot title\n\n\t\t\t\ttimeseries1_xlabel : first timeseries plot x label\n\n\t\t\t\ttimeseries1_ylabel : first timeseries plot y lable\n\n\t\t\t\ttimeseries2_title : second timeseries plot title\n\n\t\t\t\ttimeseries2_xlabel : second timeseries plot x label\n\n\t\t\t\ttimeseries2_ylabel : second timeseries plot y label\n\n\t\t\t\ttimeseries3_title : third timeseries plot title\n\n\t\t\t\ttimeseries3_xlabel : third timeseries plot x label\n\n\t\t\t\ttimeseries3_ylabel : third timeseries plot y label\n\n\t\tReturns\n\t\t-------\n\t\ttime series plot : matplotlib.pyplot.figure\n\n\t\tRaises\n\t\t------\n\t\tValueError\n\t\t\tIf start is greater than end\n\t\t\"\"\"", "\n", "if", "start", ">", "end", ":", "\n", "            ", "raise", "ValueError", "(", "\"'start' sould not be greater than 'end'\"", ")", "\n", "", "if", "self", ".", "vector", ":", "\n", "            ", "data", "=", "[", "self", ".", "_data_Mx", ",", "self", ".", "_data_My", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "[", "self", ".", "_data_X", "]", "\n", "", "fig", "=", "self", ".", "_plot_timeseries", "(", "data", ",", "self", ".", "vector", ",", "start", "=", "start", ",", "stop", "=", "end", ",", "n_ticks", "=", "n_ticks", ",", "dpi", "=", "dpi", ",", "\n", "tick_size", "=", "tick_size", ",", "title_size", "=", "title_size", ",", "label_size", "=", "label_size", ",", "\n", "label_pad", "=", "label_pad", ",", "**", "plot_text", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.histogram": [[752, 831], ["daddy.Daddy._plot_histograms", "matplotlib.show"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_histograms"], ["", "def", "histogram", "(", "self", ",", "\n", "kde", "=", "False", ",", "\n", "heatmap", "=", "False", ",", "\n", "dpi", "=", "150", ",", "\n", "title_size", "=", "14", ",", "\n", "label_size", "=", "15", ",", "\n", "tick_size", "=", "12", ",", "\n", "label_pad", "=", "8", ",", "\n", "**", "plot_text", ")", ":", "\n", "        ", "\"\"\"\n\t\tShow histogram polt chart\n\n\t\tArgs\n\t\t----\n\t\tkde : bool, (default=False)\n\t\t\tIf True, plots kde for histograms\n\t\tdpi : int, (defautl=150)\n\t\t\tfigure resolution\n\t\ttitle_size : int, (default=14)\n\t\t\ttitle font size\n\t\tlabel_size : int, (default=15)\n\t\t\taxis label font size\n\t\ttick_size : int, (default=12)\n\t\t\taxis ticks font size\n\t\tlabel_pad : int, (default=8)\n\t\t\taxis label padding\n\t\t**plot_text:\n\t\t\tplots' axis and title text\n\n\t\t\tFor scalar analysis histograms:\n\t\t\t\thist_title : title\n\n\t\t\t\thist_xlabel : x label\n\n\t\t\t\thist_ylabel : y label\n\n\t\t\tFor vector analysis histograms:\n\t\t\t\thist1_title : first histogram title\n\n\t\t\t\thist1_xlabel : first histogram x label\n\n\t\t\t\thist1_ylabel : first histogram y label\n\n\t\t\t\thist2_title : second histogram title\n\n\t\t\t\thist2_xlabel : second histogram x label\n\n\t\t\t\thist2_ylabel : second histogram y label\n\n\t\t\t\thist3_title : third histogram title\n\n\t\t\t\thist3_xlabel : third histogram x label\n\n\t\t\t\thist3_ylabel : third histogram y label\n\n\t\t\t\thist4_title : fourth (3d) histogram title\n\t\t\t\thist4_xlabel : fourth (3d) histogram x label\n\t\t\t\thist4_ylabel : fourth (3d) histogram y label\n\t\t\t\thist4_zlabel : fourth (3d) histogram z label\n\n\t\tReturns\n\t\t-------\n\t\thistogam chart : matplotlib.pyplot.figure\n\t\t\"\"\"", "\n", "if", "self", ".", "vector", ":", "\n", "            ", "data", "=", "[", "self", ".", "_data_Mx", ",", "self", ".", "_data_My", "]", "\n", "", "else", ":", "\n", "            ", "data", "=", "[", "self", ".", "_data_X", "]", "\n", "", "fig", "=", "self", ".", "_plot_histograms", "(", "data", ",", "\n", "self", ".", "vector", ",", "\n", "heatmap", "=", "heatmap", ",", "\n", "dpi", "=", "dpi", ",", "\n", "kde", "=", "kde", ",", "\n", "title_size", "=", "title_size", ",", "\n", "label_size", "=", "label_size", ",", "\n", "tick_size", "=", "tick_size", ",", "\n", "label_pad", "=", "label_pad", ",", "\n", "**", "plot_text", ")", "\n", "plt", ".", "show", "(", ")", "\n", "# return fig", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.autocorrelation": [[833, 843], ["daddy.Daddy._ddsde._acf", "daddy.Daddy._plot_autocorrelation_1d", "daddy.Daddy._ddsde._acf", "daddy.Daddy._ddsde._acf", "daddy.Daddy._ddsde._acf", "daddy.Daddy._ddsde._ccf", "daddy.Daddy._plot_autocorrelation_2d", "min", "min", "min", "min", "min", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_autocorrelation_1d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._ccf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_autocorrelation_2d"], ["", "def", "autocorrelation", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "vector", ":", "\n", "            ", "lags", ",", "acf", "=", "self", ".", "_ddsde", ".", "_acf", "(", "self", ".", "_data_X", ",", "min", "(", "1000", ",", "len", "(", "self", ".", "_data_X", ")", ")", ")", "\n", "self", ".", "_plot_autocorrelation_1d", "(", "lags", ",", "acf", ")", "\n", "", "else", ":", "\n", "            ", "lags", ",", "acfm", "=", "self", ".", "_ddsde", ".", "_acf", "(", "self", ".", "_data_M", "**", "2", ",", "min", "(", "1000", ",", "len", "(", "self", ".", "_data_M", ")", ")", ")", "\n", "_", ",", "acfx", "=", "self", ".", "_ddsde", ".", "_acf", "(", "self", ".", "_data_Mx", ",", "min", "(", "1000", ",", "len", "(", "self", ".", "_data_Mx", ")", ")", ")", "\n", "_", ",", "acfy", "=", "self", ".", "_ddsde", ".", "_acf", "(", "self", ".", "_data_My", ",", "min", "(", "1000", ",", "len", "(", "self", ".", "_data_My", ")", ")", ")", "\n", "_", ",", "ccf", "=", "self", ".", "_ddsde", ".", "_ccf", "(", "self", ".", "_data_Mx", ",", "self", ".", "_data_My", ",", "min", "(", "1000", ",", "len", "(", "self", ".", "_data_Mx", ")", ")", ")", "\n", "self", ".", "_plot_autocorrelation_2d", "(", "lags", ",", "acfx", ",", "acfy", ",", "acfm", ",", "ccf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._update_slider_data": [[845, 868], ["daddy.Daddy._is_valid_slider_timescale_list", "daddy.Daddy._ddsde._slider_data", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "daddy.Daddy._ddsde._slider_data", "collections.OrderedDict", "collections.OrderedDict", "sorted", "sorted", "sorted", "sorted", "daddy.Daddy._cross_diff_slider.items", "sorted", "sorted", "map", "map", "daddy.Daddy._drift_slider.items", "daddy.Daddy._diff_slider.items", "daddy.Daddy._drift_slider.items", "daddy.Daddy._diff_slider.items", "set", "set().union", "list", "set"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._is_valid_slider_timescale_list", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.characterize.Main._slider_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.characterize.Main._slider_data"], ["", "", "def", "_update_slider_data", "(", "self", ",", "slider_timescales", ")", ":", "\n", "        ", "if", "self", ".", "_is_valid_slider_timescale_list", "(", "slider_timescales", ")", ":", "\n", "            ", "if", "self", ".", "_ddsde", ".", "slider_timescales", "is", "None", ":", "\n", "                ", "self", ".", "_ddsde", ".", "slider_timescales", "=", "sorted", "(", "map", "(", "int", ",", "set", "(", "slider_timescales", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_ddsde", ".", "slider_timescales", "=", "sorted", "(", "\n", "map", "(", "int", ",", "set", "(", "self", ".", "_ddsde", ".", "slider_timescales", ")", ".", "union", "(", "list", "(", "slider_timescales", ")", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "self", ".", "vector", ":", "\n", "            ", "self", ".", "_drift_slider", ",", "self", ".", "_diff_slider", ",", "self", ".", "_cross_diff_slider", "=", "self", ".", "_ddsde", ".", "_slider_data", "(", "self", ".", "_ddsde", ".", "_Mx", ",", "\n", "self", ".", "_ddsde", ".", "_My", ",", "\n", "update", "=", "True", ")", "\n", "self", ".", "_drift_slider", "=", "OrderedDict", "(", "sorted", "(", "self", ".", "_drift_slider", ".", "items", "(", ")", ")", ")", "\n", "self", ".", "_diff_slider", "=", "OrderedDict", "(", "sorted", "(", "self", ".", "_diff_slider", ".", "items", "(", ")", ")", ")", "\n", "self", ".", "_cross_diff_slider", "=", "OrderedDict", "(", "self", ".", "_cross_diff_slider", ".", "items", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_drift_slider", ",", "self", ".", "_diff_slider", ",", "self", ".", "_scalar_drift_ebars", ",", "self", ".", "_scalar_diff_ebars", ",", "self", ".", "_scalar_drift_var", ",", "self", ".", "scalar_diff_var", "=", "self", ".", "_ddsde", ".", "_slider_data", "(", "self", ".", "_ddsde", ".", "_X", ",", "None", ",", "update", "=", "True", ")", "\n", "self", ".", "_drift_slider", "=", "OrderedDict", "(", "sorted", "(", "self", ".", "_drift_slider", ".", "items", "(", ")", ")", ")", "\n", "self", ".", "_diff_slider", "=", "OrderedDict", "(", "sorted", "(", "self", ".", "_diff_slider", ".", "items", "(", ")", ")", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.drift": [[869, 919], ["daddy.Daddy._update_slider_data", "list", "numpy.abs().argmin", "daddy.Daddy.show", "daddy.Daddy._drift_slider.keys", "len", "daddy.Daddy._slider_3d", "daddy.Daddy._slider_2d", "numpy.abs", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._update_slider_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._slider_3d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._slider_2d"], ["", "def", "drift", "(", "self", ",", "limits", "=", "None", ",", "polar", "=", "False", ",", "slider_timescales", "=", "None", ",", "**", "plot_text", ")", ":", "\n", "        ", "\"\"\"\n\t\tDisplay drift slider figure\n\n\t\tArgs\n\t\t----\n\t\tpolynomial_order : None or int, default=None\n\t\t\torder of polynomial to fit, if None, no fitting is done.\n\t\t**plot_text:\n\t\t\tplots' axis and text label\n\n\t\t\tFor scalar analysis\n\t\t\t\tx_lable : x axis label\n\n\t\t\t\ty_label : y axis label\n\n\t\t\tFor vector analysis\n\t\t\t\ttitle1 : first plot title\n\n\t\t\t\tx_label1 : first plot x label\n\n\t\t\t\ty_label1 : first plot y label\n\n\t\t\t\tz_label1 : first plot z label\n\n\t\t\t\ttitle2 : second plot title\n\n\t\t\t\tx_label2 : second plot x label\n\n\t\t\t\ty_label2 : seocnd plot y label\n\n\t\t\t\tz_label2 : second plot z label\n\n\t\tReturns\n\t\t-------\n\t\topens drift slider : None\n\t\t\"\"\"", "\n", "self", ".", "_update_slider_data", "(", "slider_timescales", ")", "\n", "dt_s", "=", "list", "(", "self", ".", "_drift_slider", ".", "keys", "(", ")", ")", "\n", "if", "not", "len", "(", "dt_s", ")", ":", "# empty slider", "\n", "            ", "return", "None", "\n", "", "init_pos", "=", "np", ".", "abs", "(", "np", ".", "array", "(", "dt_s", ")", "-", "self", ".", "_ddsde", ".", "Dt", ")", ".", "argmin", "(", ")", "\n", "if", "self", ".", "vector", ":", "\n", "            ", "fig", "=", "self", ".", "_slider_3d", "(", "self", ".", "_drift_slider", ",", "prefix", "=", "'Dt'", ",", "init_pos", "=", "init_pos", ",", "zlim", "=", "limits", ",", "polar", "=", "polar", ",", "\n", "**", "plot_text", ")", "\n", "", "else", ":", "\n", "            ", "fig", "=", "self", ".", "_slider_2d", "(", "self", ".", "_drift_slider", ",", "prefix", "=", "'Dt'", ",", "init_pos", "=", "init_pos", ",", "limits", "=", "limits", ",", "\n", "**", "plot_text", ")", "\n", "", "fig", ".", "show", "(", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.diffusion": [[920, 944], ["daddy.Daddy._update_slider_data", "list", "daddy.Daddy.show", "daddy.Daddy._diff_slider.keys", "len", "daddy.Daddy._slider_3d", "daddy.Daddy._slider_2d"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._update_slider_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._slider_3d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._slider_2d"], ["", "def", "diffusion", "(", "self", ",", "slider_timescales", "=", "None", ",", "limits", "=", "None", ",", "polar", "=", "False", ",", "**", "plot_text", ")", ":", "\n", "        ", "\"\"\"\n\t\tDisplay diffusion slider figure\n\n\t\tArgs\n\t\t----\n\t\tpolynomial_order : None or int, default=None\n\t\t\torder of polynomial to fit, if None, no fitting is done.\n\t\tReturns\n\t\t-------\n\t\topens diffusion slider : None\n\t\t\"\"\"", "\n", "self", ".", "_update_slider_data", "(", "slider_timescales", ")", "\n", "dt_s", "=", "list", "(", "self", ".", "_diff_slider", ".", "keys", "(", ")", ")", "\n", "if", "not", "len", "(", "dt_s", ")", ":", "# empty slider", "\n", "            ", "return", "None", "\n", "", "if", "self", ".", "vector", ":", "\n", "            ", "fig", "=", "self", ".", "_slider_3d", "(", "self", ".", "_diff_slider", ",", "prefix", "=", "'dt'", ",", "init_pos", "=", "0", ",", "zlim", "=", "limits", ",", "polar", "=", "polar", ",", "\n", "**", "plot_text", ")", "\n", "", "else", ":", "\n", "            ", "fig", "=", "self", ".", "_slider_2d", "(", "self", ".", "_diff_slider", ",", "prefix", "=", "'dt'", ",", "init_pos", "=", "0", ",", "limits", "=", "limits", ",", "\n", "**", "plot_text", ")", "\n", "", "fig", ".", "show", "(", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.cross_diffusion": [[945, 975], ["daddy.Daddy._update_slider_data", "list", "daddy.Daddy._slider_3d", "daddy.Daddy.show", "print", "daddy.Daddy._cross_diff_slider.keys", "len", "max", "max", "numpy.nanmax", "numpy.nanmax", "numpy.nanmax", "numpy.nanmax"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._update_slider_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._slider_3d"], ["", "def", "cross_diffusion", "(", "self", ",", "slider_timescales", "=", "None", ",", "limits", "=", "None", ",", "polar", "=", "False", ",", "**", "plot_text", ")", ":", "\n", "        ", "\"\"\"\n\t\tDisplay diffusion cross correlation slider figure\n\n\t\tArgs\n\t\t----\n\t\tpolynomial_order : None or int, default=None\n\t\t\torder of polynomial to fit, if None, no fitting is done.\n\t\tReturns\n\t\t-------\n\t\topens diffusion slider : None\n\t\t\"\"\"", "\n", "if", "not", "self", ".", "vector", ":", "\n", "            ", "print", "(", "\"N/A\"", ")", "\n", "return", "None", "\n", "", "self", ".", "_update_slider_data", "(", "slider_timescales", ")", "\n", "dt_s", "=", "list", "(", "self", ".", "_cross_diff_slider", ".", "keys", "(", ")", ")", "\n", "if", "not", "len", "(", "dt_s", ")", ":", "# empty slider", "\n", "            ", "return", "None", "\n", "\n", "", "if", "limits", ":", "\n", "            ", "zlim", "=", "limits", "\n", "", "else", ":", "\n", "            ", "zlim", "=", "(", "-", "max", "(", "np", ".", "nanmax", "(", "self", ".", "_data_avgdiffX", ")", ",", "np", ".", "nanmax", "(", "self", ".", "_data_avgdiffY", ")", ")", ",", "\n", "max", "(", "np", ".", "nanmax", "(", "self", ".", "_data_avgdiffX", ")", ",", "np", ".", "nanmax", "(", "self", ".", "_data_avgdiffY", ")", ")", ")", "\n", "\n", "", "fig", "=", "self", ".", "_slider_3d", "(", "self", ".", "_cross_diff_slider", ",", "prefix", "=", "'c_dt'", ",", "init_pos", "=", "0", ",", "zlim", "=", "zlim", ",", "polar", "=", "polar", ",", "\n", "**", "plot_text", ")", "\n", "fig", ".", "show", "(", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.visualize": [[976, 1133], ["daddy.Daddy._get_data_from_slider", "matplotlib.figure", "matplotlib.suptitle", "matplotlib.figure", "matplotlib.suptitle", "seaborn.distplot", "matplotlib.xlim", "matplotlib.xticks", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.figure", "matplotlib.suptitle", "matplotlib.errorbar", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.xlim", "matplotlib.xticks", "matplotlib.figure", "matplotlib.suptitle", "matplotlib.errorbar", "matplotlib.xlim", "matplotlib.xticks", "matplotlib.xlabel", "matplotlib.ylabel", "daddy.Daddy._get_data_from_slider", "daddy.Daddy._plot_3d_hisogram", "daddy.Daddy._plot_data", "daddy.Daddy._plot_data", "daddy.Daddy._plot_data", "daddy.Daddy._plot_data", "daddy.Daddy._plot_data", "daddy.Daddy._plot_data", "matplotlib.plot", "numpy.linspace", "numpy.linspace", "numpy.linspace", "matplotlib.plot", "min", "max", "min", "max", "min", "max", "min", "max", "min", "max", "min", "max", "daddy.Daddy._closest_time_scale", "daddy.Daddy._closest_time_scale"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_data_from_slider", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._get_data_from_slider", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_3d_hisogram", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._plot_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._closest_time_scale", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.metrics.Metrics._closest_time_scale"], ["", "def", "visualize", "(", "self", ",", "drift_time_scale", "=", "None", ",", "diff_time_scale", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\t\tDisplay drift and diffusion plots for a time scale.\n\n\t\tArgs\n\t\t----\n\t\ttime_scale : int, optional(default=None)\n\t\t\ttimescale for which drift and diffusion plots need to be shown.\n\t\t\tIf None, displays the plots for inputed timescale.\n\n\t\tReturns\n\t\t-------\n\t\t\tdisplays plots : None\n\t\t\"\"\"", "\n", "if", "not", "self", ".", "vector", ":", "\n", "            ", "drift", ",", "diff", "=", "self", ".", "_get_data_from_slider", "(", "drift_time_scale", ",", "diff_time_scale", ")", "\n", "# _, diff = self._get_data_from_slider(diff_time_scale)", "\n", "if", "drift_time_scale", "is", "None", ":", "\n", "                ", "drift_ebar", "=", "self", ".", "_data_drift_ebar", "\n", "", "else", ":", "\n", "                ", "drift_ebar", "=", "self", ".", "_ddsde", ".", "_scalar_drift_ebars", "[", "\n", "self", ".", "_closest_time_scale", "(", "drift_time_scale", ",", "self", ".", "_ddsde", ".", "_scalar_drift_ebars", ")", "]", "\n", "", "if", "diff_time_scale", "is", "None", ":", "\n", "                ", "diff_ebar", "=", "self", ".", "_data_diff_ebar", "\n", "", "else", ":", "\n", "                ", "diff_ebar", "=", "self", ".", "_ddsde", ".", "_scalar_diff_ebars", "[", "\n", "self", ".", "_closest_time_scale", "(", "diff_time_scale", ",", "self", ".", "_ddsde", ".", "_scalar_diff_ebars", ")", "]", "\n", "\n", "# Time series", "\n", "", "fig1", "=", "plt", ".", "figure", "(", "dpi", "=", "150", ")", "\n", "plt", ".", "suptitle", "(", "\"Time Series\"", ")", "\n", "# l = int(len(self._data_X) / 4)", "\n", "l", "=", "1000", "\n", "try", ":", "\n", "                ", "plt", ".", "plot", "(", "self", ".", "_data_t", "[", "0", ":", "l", "]", ",", "self", ".", "_data_X", "[", "0", ":", "l", "]", ")", "\n", "", "except", ":", "\n", "                ", "plt", ".", "plot", "(", "self", ".", "_data_X", "[", "0", ":", "l", "]", ")", "\n", "\n", "# PDF", "\n", "", "fig2", "=", "plt", ".", "figure", "(", "dpi", "=", "150", ",", "figsize", "=", "(", "5", ",", "5", ")", ")", "\n", "plt", ".", "suptitle", "(", "\"PDF\"", ")", "\n", "sns", ".", "distplot", "(", "self", ".", "_data_X", ")", "\n", "plt", ".", "xlim", "(", "[", "min", "(", "self", ".", "_data_X", ")", ",", "max", "(", "self", ".", "_data_X", ")", "]", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "linspace", "(", "min", "(", "self", ".", "_data_X", ")", ",", "max", "(", "self", ".", "_data_X", ")", ",", "5", ")", ")", "\n", "plt", ".", "ylabel", "(", "'PDF'", ")", "\n", "plt", ".", "xlabel", "(", "'M'", ")", "\n", "\n", "# Drift", "\n", "fig3", "=", "plt", ".", "figure", "(", "dpi", "=", "150", ",", "figsize", "=", "(", "5", ",", "5", ")", ")", "\n", "plt", ".", "suptitle", "(", "\"Drift\"", ")", "\n", "# p_drift, _ = self._fit_poly(self._data_op, drift,", "\n", "#\t\t\t\t\t\t\tself.drift_order)", "\n", "# plt.scatter(self._data_op, drift, marker='.')", "\n", "plt", ".", "errorbar", "(", "self", ".", "_data_op", ",", "drift", ",", "yerr", "=", "drift_ebar", ",", "fmt", "=", "'o'", ")", "\n", "\"\"\"\n\t\t\tplt.scatter(self._data_op,\n\t\t\t\t\t\tp_drift(self._data_op),\n\t\t\t\t\t\tmarker='.',\n\t\t\t\t\t\talpha=0.4)\n\t\t\t\"\"\"", "\n", "plt", ".", "xlabel", "(", "'M'", ")", "\n", "plt", ".", "ylabel", "(", "\"F\"", ")", "\n", "plt", ".", "xlim", "(", "[", "min", "(", "self", ".", "_data_op", ")", ",", "max", "(", "self", ".", "_data_op", ")", "]", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "linspace", "(", "min", "(", "self", ".", "_data_op", ")", ",", "max", "(", "self", ".", "_data_op", ")", ",", "5", ")", ")", "\n", "\n", "# Diffusion", "\n", "fig4", "=", "plt", ".", "figure", "(", "dpi", "=", "150", ",", "figsize", "=", "(", "5", ",", "5", ")", ")", "\n", "plt", ".", "suptitle", "(", "\"Diffusion\"", ")", "\n", "# p_diff, _ = self._fit_poly(self._data_op, diff,", "\n", "#\t\t\t\t\t\t   self.diff_order)", "\n", "# plt.scatter(self._data_op, diff, marker='.')", "\n", "plt", ".", "errorbar", "(", "self", ".", "_data_op", ",", "diff", ",", "yerr", "=", "diff_ebar", ",", "fmt", "=", "'o'", ")", "\n", "\"\"\"\n\t\t\tplt.scatter(self._data_op,\n\t\t\t\t\t\tp_diff(self._data_op),\n\t\t\t\t\t\tmarker='.',\n\t\t\t\t\t\talpha=0.4)\n\t\t\t\"\"\"", "\n", "plt", ".", "xlim", "(", "[", "min", "(", "self", ".", "_data_op", ")", ",", "max", "(", "self", ".", "_data_op", ")", "]", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "linspace", "(", "min", "(", "self", ".", "_data_op", ")", ",", "max", "(", "self", ".", "_data_op", ")", ",", "5", ")", ")", "\n", "plt", ".", "xlabel", "(", "\"M\"", ")", "\n", "plt", ".", "ylabel", "(", "'$G^{2}$'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "driftX", ",", "driftY", ",", "diffX", ",", "diffY", ",", "diffXY", ",", "diffYX", "=", "self", ".", "_get_data_from_slider", "(", "drift_time_scale", ",", "diff_time_scale", ")", "\n", "# _, _, diffX, diffY, diffXY, diffYX = self._get_data_from_slider(diff_time_scale)", "\n", "fig1", ",", "_", "=", "self", ".", "_plot_3d_hisogram", "(", "self", ".", "_data_Mx", ",", "self", ".", "_data_My", ",", "title", "=", "'PDF'", ",", "xlabel", "=", "\"$M_{x}$\"", ",", "tick_size", "=", "12", ",", "\n", "label_size", "=", "12", ",", "title_size", "=", "12", ",", "r_fig", "=", "True", ")", "\n", "\n", "fig5", ",", "_", "=", "self", ".", "_plot_data", "(", "driftX", ",", "\n", "plot_plane", "=", "False", ",", "\n", "title", "=", "'Drift X'", ",", "\n", "z_label", "=", "'$F_{1}(m)$'", ",", "\n", "tick_size", "=", "12", ",", "\n", "label_size", "=", "14", ",", "\n", "title_size", "=", "16", ")", "\n", "\"\"\"\n            fig5_1, _ = self._plot_data(self._data_avgdriftX,\n                                        title='DriftX_heatmap',\n                                        heatmap=True)\n            \"\"\"", "\n", "\n", "fig4", ",", "_", "=", "self", ".", "_plot_data", "(", "driftY", ",", "\n", "plot_plane", "=", "False", ",", "\n", "title", "=", "'Drift Y'", ",", "\n", "z_label", "=", "'$F_{2}(m)$'", ",", "\n", "tick_size", "=", "12", ",", "\n", "label_size", "=", "14", ",", "\n", "title_size", "=", "16", ")", "\n", "\"\"\"\n            fig4_1, _ = self._plot_data(self._data_avgdriftY,\n                                        title='DriftY_heatmap',\n                                        heatmap=True)\n            \"\"\"", "\n", "\n", "fig3", ",", "_", "=", "self", ".", "_plot_data", "(", "diffX", ",", "\n", "plot_plane", "=", "False", ",", "\n", "title", "=", "'Diffusion X'", ",", "\n", "z_label", "=", "'$G_{11}(m)$'", ",", "\n", "tick_size", "=", "12", ",", "\n", "label_size", "=", "14", ",", "\n", "title_size", "=", "16", ")", "\n", "\"\"\"\n            fig3_1, _ = self._plot_data(self._data_avgdiffX,\n                                        title='DiffX_heatmap',\n                                        heatmap=True)\n            \"\"\"", "\n", "\n", "fig2", ",", "_", "=", "self", ".", "_plot_data", "(", "diffY", ",", "\n", "plot_plane", "=", "False", ",", "\n", "title", "=", "'Diffusion Y'", ",", "\n", "z_label", "=", "'$G_{22}(m)$'", ",", "\n", "tick_size", "=", "12", ",", "\n", "label_size", "=", "14", ",", "\n", "title_size", "=", "16", ")", "\n", "\"\"\"\n            fig2_1, _ = self._plot_data(self._data_avgdiffY,\n                                        title='DiffY_heatmap',\n                                        heatmap=True)\n            \"\"\"", "\n", "\n", "fig6", ",", "_", "=", "self", ".", "_plot_data", "(", "diffXY", ",", "\n", "plot_plane", "=", "False", ",", "\n", "title", "=", "'Diffusion XY'", ",", "\n", "z_label", "=", "'$G_{12}(m)$'", ",", "\n", "tick_size", "=", "12", ",", "\n", "label_size", "=", "14", ",", "\n", "title_size", "=", "16", ")", "\n", "\n", "fig7", ",", "_", "=", "self", ".", "_plot_data", "(", "diffYX", ",", "\n", "plot_plane", "=", "False", ",", "\n", "title", "=", "'Diffusion YX'", ",", "\n", "z_label", "=", "'$G_{21}(m)$'", ",", "\n", "tick_size", "=", "12", ",", "\n", "label_size", "=", "14", ",", "\n", "title_size", "=", "16", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.noise_diagnostics": [[1134, 1247], ["daddy.Daddy._ddsde._residual_timeseries_vector", "numpy.ma.corrcoef", "daddy.Daddy._ddsde._acf", "daddy.Daddy._ddsde._acf", "daddy.Daddy._ddsde._fit_exp", "daddy.Daddy._ddsde._fit_exp", "print", "print", "print", "print", "print", "matplotlib.figure", "matplotlib.figure.add_gridspec", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "mpl_toolkits.axes_grid1.inset_locator.inset_axes", "daddy.Daddy._noise_plot_2d", "daddy.Daddy._matrix_plot", "daddy.Daddy._acf_plot_multi", "daddy.Daddy._qq_plot", "daddy.Daddy._qq_plot", "matplotlib.tight_layout", "matplotlib.show", "daddy.Daddy._ddsde._residual_timeseries", "daddy.Daddy._ddsde._acf", "daddy.Daddy._ddsde._fit_exp", "daddy.Daddy._km_coefficient", "daddy.Daddy._km_coefficient", "numpy.zeros", "numpy.zeros", "enumerate", "print", "print", "print", "print", "matplotlib.subplots", "daddy.Daddy._noise_plot", "daddy.Daddy._qq_plot", "daddy.Daddy._acf_plot", "daddy.Daddy._km_plot", "matplotlib.tight_layout", "matplotlib.show", "len", "len", "numpy.nanmean", "numpy.nanmean", "numpy.ma.masked_invalid", "numpy.ma.masked_invalid", "min", "min", "min", "len", "len", "numpy.nanmean", "numpy.nanmean", "len", "numpy.nanmean", "numpy.nanstd", "scipy.stats.skew", "scipy.stats.kurtosis"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.UnderlyingNoise._residual_timeseries_vector", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._fit_exp", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._fit_exp", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._noise_plot_2d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._matrix_plot", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._acf_plot_multi", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._qq_plot", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._qq_plot", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.UnderlyingNoise._residual_timeseries", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._acf", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.analysis.AutoCorrelation._fit_exp", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._km_coefficient", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.sde.SDE._km_coefficient", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._noise_plot", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._qq_plot", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._acf_plot", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._km_plot"], ["", "def", "noise_diagnostics", "(", "self", ",", "loc", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "vector", ":", "\n", "            ", "if", "loc", "is", "None", ":", "\n", "                ", "loc", "=", "(", "0", ",", "0", ")", "\n", "\n", "", "X", ",", "Y", "=", "self", ".", "_ddsde", ".", "_Mx", ",", "self", ".", "_ddsde", ".", "_My", "\n", "Dt", "=", "self", ".", "_ddsde", ".", "Dt", "\n", "inc_x", ",", "inc_y", "=", "self", ".", "_ddsde", ".", "inc_x", ",", "self", ".", "_ddsde", ".", "inc_y", "\n", "t_int", "=", "self", ".", "_ddsde", ".", "t_int", "\n", "op_x", ",", "op_y", "=", "self", ".", "_ddsde", ".", "_op_x_", ",", "self", ".", "_ddsde", ".", "_op_y_", "\n", "avg_drift_x", ",", "avg_drift_y", "=", "self", ".", "_ddsde", ".", "_avgdriftX_", ",", "self", ".", "_ddsde", ".", "_avgdriftY_", "\n", "res_x", ",", "res_y", "=", "self", ".", "_ddsde", ".", "_residual_timeseries_vector", "(", "\n", "X", "=", "X", ",", "Y", "=", "Y", ",", "Dt", "=", "Dt", ",", "\n", "bins_x", "=", "op_x", ",", "bins_y", "=", "op_y", ",", "\n", "avg_drift_x", "=", "avg_drift_x", ",", "avg_drift_y", "=", "avg_drift_y", ",", "\n", "t_int", "=", "t_int", "\n", ")", "\n", "\n", "noise_dist_x", "=", "res_x", "[", "(", "loc", "[", "0", "]", "<=", "X", "[", ":", "-", "Dt", "]", ")", "&", "(", "X", "[", ":", "-", "Dt", "]", "<", "loc", "[", "0", "]", "+", "inc_x", ")", "&", "(", "loc", "[", "1", "]", "<=", "Y", "[", ":", "-", "Dt", "]", ")", "&", "(", "Y", "[", ":", "-", "Dt", "]", "<", "loc", "[", "1", "]", "+", "inc_y", ")", "]", "\n", "noise_dist_y", "=", "res_y", "[", "(", "loc", "[", "0", "]", "<=", "X", "[", ":", "-", "Dt", "]", ")", "&", "(", "X", "[", ":", "-", "Dt", "]", "<", "loc", "[", "0", "]", "+", "inc_x", ")", "&", "(", "loc", "[", "1", "]", "<=", "Y", "[", ":", "-", "Dt", "]", ")", "&", "(", "Y", "[", ":", "-", "Dt", "]", "<", "loc", "[", "1", "]", "+", "inc_y", ")", "]", "\n", "noise_corr", "=", "np", ".", "ma", ".", "corrcoef", "(", "[", "np", ".", "ma", ".", "masked_invalid", "(", "noise_dist_x", ")", ",", "\n", "np", ".", "ma", ".", "masked_invalid", "(", "noise_dist_y", ")", "]", ")", "\n", "\n", "lags", ",", "acf_x", "=", "self", ".", "_ddsde", ".", "_acf", "(", "res_x", ",", "t_lag", "=", "min", "(", "100", ",", "len", "(", "res_x", ")", ")", ")", "\n", "_", ",", "acf_y", "=", "self", ".", "_ddsde", ".", "_acf", "(", "res_y", ",", "t_lag", "=", "min", "(", "100", ",", "len", "(", "res_y", ")", ")", ")", "\n", "\n", "(", "_", ",", "bx", ",", "_", ")", ",", "_", "=", "self", ".", "_ddsde", ".", "_fit_exp", "(", "lags", ",", "acf_x", ")", "# Fit a * exp(-t / b) + c", "\n", "act_x", "=", "bx", "\n", "\n", "(", "_", ",", "by", ",", "_", ")", ",", "_", "=", "self", ".", "_ddsde", ".", "_fit_exp", "(", "lags", ",", "acf_y", ")", "# Fit a * exp(-t / b) + c", "\n", "act_y", "=", "by", "\n", "\n", "# Summary information", "\n", "print", "(", "'Noise statistics:'", ")", "\n", "print", "(", "f'Mean: ({np.nanmean(noise_dist_x):.4f}, {np.nanmean(noise_dist_y):.4f})'", ")", "\n", "print", "(", "f'Correlation matrix:\\n'", "\n", "f'    {noise_corr[0, 0]:+.4f}    {noise_corr[0, 1]:+.4f}\\n'", "\n", "f'    {noise_corr[1, 0]:+.4f}    {noise_corr[1, 1]:+.4f}'", ")", "\n", "\n", "print", "(", "'\\nNoise autocorrelation time:'", ")", "\n", "print", "(", "f'    eta_x: {act_x:.3f} timesteps ({act_x * Dt * t_int:.3f}s)'", "\n", "f'    eta_y: {act_y:.3f} timesteps ({act_y * Dt * t_int:.3f}s)'", ")", "\n", "\n", "# Summary figures", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "7", ",", "7", ")", ")", "\n", "gs", "=", "fig", ".", "add_gridspec", "(", "4", ",", "2", ")", "\n", "ax_2d", "=", "fig", ".", "add_subplot", "(", "gs", "[", ":", "2", ",", "0", "]", ",", "projection", "=", "'3d'", ")", "\n", "ax_acf", "=", "fig", ".", "add_subplot", "(", "gs", "[", ":", "2", ",", "1", "]", ")", "\n", "# ax_acf2 = fig.add_subplot(gs[1, 1])", "\n", "ax_qqx", "=", "fig", ".", "add_subplot", "(", "gs", "[", "2", ":", ",", "0", "]", ")", "\n", "ax_qqy", "=", "fig", ".", "add_subplot", "(", "gs", "[", "2", ":", ",", "1", "]", ")", "\n", "ax_corr", "=", "inset_axes", "(", "ax_2d", ",", "width", "=", "'30%'", ",", "height", "=", "'39%'", ",", "loc", "=", "'upper left'", ")", "\n", "\n", "self", ".", "_noise_plot_2d", "(", "ax_2d", ",", "noise_dist_x", ",", "noise_dist_y", ",", "title", "=", "'Residual Distribution'", ")", "\n", "self", ".", "_matrix_plot", "(", "ax_corr", ",", "noise_corr", ")", "\n", "# self._acf_plot(ax_acf1, acf, lags, a, b, c, act, title='Autocorrelation: $|\\\\eta|$')", "\n", "self", ".", "_acf_plot_multi", "(", "ax_acf", ",", "acf_x", ",", "acf_y", ",", "lags", ",", "act_x", ",", "act_y", ",", "title", "=", "'Autocorrelation: $\\\\eta_x, \\\\eta_y$'", ")", "\n", "self", ".", "_qq_plot", "(", "ax_qqx", ",", "noise_dist_x", ",", "title", "=", "'QQ Plot: $\\\\eta_x$'", ")", "\n", "self", ".", "_qq_plot", "(", "ax_qqy", ",", "noise_dist_y", ",", "title", "=", "'QQ Plot: $\\\\eta_y$'", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "loc", "is", "None", ":", "\n", "                ", "loc", "=", "0", "\n", "", "X", "=", "self", ".", "_ddsde", ".", "_X", "\n", "Dt", "=", "self", ".", "_ddsde", ".", "Dt", "\n", "inc", "=", "self", ".", "_ddsde", ".", "inc", "\n", "t_int", "=", "self", ".", "_ddsde", ".", "t_int", "\n", "op", "=", "self", ".", "_ddsde", ".", "_op_", "\n", "avg_drift", "=", "self", ".", "_ddsde", ".", "_avgdrift_", "\n", "residual", "=", "self", ".", "_ddsde", ".", "_residual_timeseries", "(", "X", "=", "X", ",", "\n", "Dt", "=", "Dt", ",", "\n", "bins", "=", "op", ",", "\n", "avg_drift", "=", "avg_drift", ",", "\n", "t_int", "=", "t_int", ",", "\n", ")", "\n", "\n", "noise_distribution", "=", "residual", "[", "(", "loc", "<=", "X", "[", ":", "-", "Dt", "]", ")", "&", "(", "X", "[", ":", "-", "Dt", "]", "<", "loc", "+", "inc", ")", "]", "\n", "\n", "# Compute residual autocorrelation", "\n", "lags", ",", "acf", "=", "self", ".", "_ddsde", ".", "_acf", "(", "residual", ",", "t_lag", "=", "min", "(", "100", ",", "len", "(", "residual", ")", ")", ")", "\n", "(", "a", ",", "b", ",", "c", ")", ",", "_", "=", "self", ".", "_ddsde", ".", "_fit_exp", "(", "lags", ",", "acf", ")", "# Fit a * exp(-t / b) + c", "\n", "act", "=", "b", "\n", "\n", "# Compute 2nd and 4th Kramers-Moyal coefficients", "\n", "km_2", "=", "self", ".", "_km_coefficient", "(", "2", ",", "X", ",", "t_int", ")", "\n", "km_4", "=", "self", ".", "_km_coefficient", "(", "4", ",", "X", ",", "t_int", ")", "\n", "\n", "km_2_avg", "=", "np", ".", "zeros", "(", "len", "(", "op", ")", ")", "\n", "km_4_avg", "=", "np", ".", "zeros", "(", "len", "(", "op", ")", ")", "\n", "X", "=", "X", "[", ":", "-", "1", "]", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "op", ")", ":", "\n", "                ", "km_2_avg", "[", "i", "]", "=", "np", ".", "nanmean", "(", "km_2", "[", "(", "b", "<=", "X", ")", "&", "(", "X", "<", "(", "b", "+", "inc", ")", ")", "]", ")", "\n", "km_4_avg", "[", "i", "]", "=", "np", ".", "nanmean", "(", "km_4", "[", "(", "b", "<=", "X", ")", "&", "(", "X", "<", "(", "b", "+", "inc", ")", ")", "]", ")", "\n", "\n", "# Print summary data", "\n", "", "print", "(", "'Noise statistics:'", ")", "\n", "print", "(", "f'\\tMean: {np.nanmean(noise_distribution):.4f} \\t\\tStd. Dev.: {np.nanstd(noise_distribution):.4f}'", ")", "\n", "print", "(", "f'\\tSkewness: {skew(noise_distribution, nan_policy=\"omit\"):.4f}'", "\n", "f'\\tKurtosis: {kurtosis(noise_distribution, nan_policy=\"omit\"):.4f}'", ")", "\n", "\n", "print", "(", "f'\\nNoise autocorrelation time: {act:.3f} time-steps ({act * Dt * t_int:.3f}s)'", ")", "\n", "\n", "# Plot figures", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "2", ",", "figsize", "=", "(", "7", ",", "7", ")", ",", "dpi", "=", "100", ")", "\n", "self", ".", "_noise_plot", "(", "ax", "[", "0", ",", "0", "]", ",", "noise_distribution", ",", "title", "=", "'Residual Distribution'", ")", "\n", "self", ".", "_qq_plot", "(", "ax", "[", "0", ",", "1", "]", ",", "noise_distribution", ",", "title", "=", "'QQ Plot'", ")", "\n", "self", ".", "_acf_plot", "(", "ax", "[", "1", ",", "0", "]", ",", "acf", ",", "lags", ",", "a", ",", "b", ",", "c", ",", "act", ",", "title", "=", "'Residual Autocorrelation'", ")", "\n", "self", ".", "_km_plot", "(", "ax", "[", "1", ",", "1", "]", ",", "km_2_avg", ",", "km_4_avg", ",", "title", "=", "'KM Coefficients'", ")", "\n", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.fit_diagnostics": [[1248, 1290], ["numpy.meshgrid", "print", "daddy.Daddy._print_function_diagnostics_2d", "daddy.Daddy._print_function_diagnostics_2d", "daddy.Daddy._print_function_diagnostics_2d", "daddy.Daddy._print_function_diagnostics_2d", "daddy.Daddy._print_function_diagnostics_2d", "print", "daddy.Daddy._print_function_diagnostics", "daddy.Daddy._print_function_diagnostics"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._print_function_diagnostics_2d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._print_function_diagnostics_2d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._print_function_diagnostics_2d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._print_function_diagnostics_2d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._print_function_diagnostics_2d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._print_function_diagnostics", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._print_function_diagnostics"], ["", "", "def", "fit_diagnostics", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "vector", ":", "\n", "            ", "if", "not", "(", "self", ".", "F1", "or", "self", ".", "F2", "or", "self", ".", "G11", "or", "self", ".", "G12", "or", "self", ".", "G21", ")", ":", "\n", "                ", "print", "(", "'Use fit() to fit functions before calling fit_diagnostics().'", ")", "\n", "return", "\n", "\n", "", "x", ",", "y", "=", "np", ".", "meshgrid", "(", "self", ".", "_ddsde", ".", "_op_x_", ",", "self", ".", "_ddsde", ".", "_op_y_", ")", "\n", "\n", "if", "self", ".", "F1", ":", "\n", "                ", "z", "=", "self", ".", "_ddsde", ".", "_avgdriftX_", "\n", "self", ".", "_print_function_diagnostics_2d", "(", "self", ".", "F1", ",", "x", ",", "y", ",", "z", ",", "name", "=", "'Drift'", ",", "symbol", "=", "'F1'", ")", "\n", "\n", "", "if", "self", ".", "F2", ":", "\n", "                ", "z", "=", "self", ".", "_ddsde", ".", "_avgdriftY_", "\n", "self", ".", "_print_function_diagnostics_2d", "(", "self", ".", "F2", ",", "x", ",", "y", ",", "z", ",", "name", "=", "'Drift'", ",", "symbol", "=", "'F2'", ")", "\n", "\n", "", "if", "self", ".", "G11", ":", "\n", "                ", "z", "=", "self", ".", "_ddsde", ".", "_avgdiffX_", "\n", "self", ".", "_print_function_diagnostics_2d", "(", "self", ".", "G11", ",", "x", ",", "y", ",", "z", ",", "name", "=", "'Diffusion'", ",", "symbol", "=", "'G11'", ")", "\n", "\n", "", "if", "self", ".", "G22", ":", "\n", "                ", "z", "=", "self", ".", "_ddsde", ".", "_avgdiffY_", "\n", "self", ".", "_print_function_diagnostics_2d", "(", "self", ".", "G22", ",", "x", ",", "y", ",", "z", ",", "name", "=", "'Diffusion'", ",", "symbol", "=", "'G22'", ")", "\n", "\n", "", "if", "self", ".", "G12", ":", "\n", "                ", "z", "=", "self", ".", "_ddsde", ".", "_avgdiffXY_", "\n", "self", ".", "_print_function_diagnostics_2d", "(", "self", ".", "G21", ",", "x", ",", "y", ",", "z", ",", "name", "=", "'Cross-diffusion'", ",", "symbol", "=", "'G12 = G21'", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "(", "self", ".", "F", "is", "None", ")", "and", "(", "self", ".", "G", "is", "None", ")", ":", "\n", "                ", "print", "(", "'Use fit() to fit functions before calling fit_diagnostics().'", ")", "\n", "return", "\n", "\n", "", "x", "=", "self", ".", "_ddsde", ".", "_op_", "\n", "\n", "if", "self", ".", "F", ":", "\n", "                ", "y", "=", "self", ".", "_ddsde", ".", "_avgdrift_", "\n", "self", ".", "_print_function_diagnostics", "(", "self", ".", "F", ",", "x", ",", "y", ",", "name", "=", "'Drift'", ",", "symbol", "=", "'F'", ")", "\n", "\n", "", "if", "self", ".", "G", ":", "\n", "                ", "y", "=", "self", ".", "_ddsde", ".", "_avgdiff_", "\n", "self", ".", "_print_function_diagnostics", "(", "self", ".", "G", ",", "x", ",", "y", ",", "name", "=", "'Diffusion'", ",", "symbol", "=", "'G'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.model_diagnostics": [[1291, 1402], ["matplotlib.tight_layout", "matplotlib.show", "print", "daddy.Daddy.simulate", "print", "pydaddy.Characterize", "pydaddy.Characterize.fit", "pydaddy.Characterize.fit", "pydaddy.Characterize.fit", "pydaddy.Characterize.fit", "pydaddy.Characterize.fit", "matplotlib.figure", "matplotlib.figure.add_gridspec", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "daddy.Daddy._show_histograms_2d", "daddy.Daddy._show_histograms_1d", "daddy.Daddy._show_functions_2d", "daddy.Daddy._show_functions_2d", "daddy.Daddy._show_functions_2d", "daddy.Daddy._show_functions_2d", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "daddy.Daddy.simulate", "pydaddy.Characterize", "pydaddy.Characterize.fit", "pydaddy.Characterize.fit", "matplotlib.subplots", "daddy.Daddy._show_histograms_1d", "daddy.Daddy._show_functions_1d", "daddy.Daddy._show_functions_1d", "print", "print", "print", "print", "print", "print", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.simulate", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._show_histograms_2d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._show_histograms_1d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._show_functions_2d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._show_functions_2d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._show_functions_2d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._show_functions_2d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.simulate", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._show_histograms_1d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._show_functions_1d", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.visualize.Visualize._show_functions_1d"], ["", "", "", "def", "model_diagnostics", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "vector", ":", "\n", "            ", "print", "(", "'Generating simulated timeseries ...'", ")", "\n", "timepoints", "=", "self", ".", "_data_Mx", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "simulate", "(", "t_int", "=", "self", ".", "_ddsde", ".", "t_int", ",", "timepoints", "=", "timepoints", ")", "\n", "\n", "print", "(", "'Re-estimating drift and diffusion from simulated timeseries ...'", ")", "\n", "ddsde", "=", "pydaddy", ".", "Characterize", "(", "data", "=", "x", ",", "t", "=", "self", ".", "_ddsde", ".", "t_int", ",", "Dt", "=", "self", ".", "Dt", ",", "dt", "=", "self", ".", "dt", ",", "show_summary", "=", "False", ")", "\n", "\n", "# FIXME: Set orders, thresholds, library during fitting.", "\n", "F1hat", "=", "ddsde", ".", "fit", "(", "'F1'", ",", "\n", "order", "=", "self", ".", "fitters", "[", "'F1'", "]", ".", "max_degree", ",", "\n", "threshold", "=", "self", ".", "fitters", "[", "'F1'", "]", ".", "threshold", ",", "\n", "alpha", "=", "self", ".", "fitters", "[", "'F1'", "]", ".", "alpha", ",", "\n", "library", "=", "self", ".", "fitters", "[", "'F1'", "]", ".", "library", ")", "\n", "\n", "F2hat", "=", "ddsde", ".", "fit", "(", "'F2'", ",", "\n", "order", "=", "self", ".", "fitters", "[", "'F2'", "]", ".", "max_degree", ",", "\n", "threshold", "=", "self", ".", "fitters", "[", "'F2'", "]", ".", "threshold", ",", "\n", "alpha", "=", "self", ".", "fitters", "[", "'F2'", "]", ".", "alpha", ",", "\n", "library", "=", "self", ".", "fitters", "[", "'F2'", "]", ".", "library", ")", "\n", "\n", "G11hat", "=", "ddsde", ".", "fit", "(", "'G11'", ",", "\n", "order", "=", "self", ".", "fitters", "[", "'G11'", "]", ".", "max_degree", ",", "\n", "threshold", "=", "self", ".", "fitters", "[", "'G11'", "]", ".", "threshold", ",", "\n", "alpha", "=", "self", ".", "fitters", "[", "'G11'", "]", ".", "alpha", ",", "\n", "library", "=", "self", ".", "fitters", "[", "'G11'", "]", ".", "library", ")", "\n", "\n", "G22hat", "=", "ddsde", ".", "fit", "(", "'G22'", ",", "\n", "order", "=", "self", ".", "fitters", "[", "'G22'", "]", ".", "max_degree", ",", "\n", "threshold", "=", "self", ".", "fitters", "[", "'G22'", "]", ".", "threshold", ",", "\n", "alpha", "=", "self", ".", "fitters", "[", "'G22'", "]", ".", "alpha", ",", "\n", "library", "=", "self", ".", "fitters", "[", "'G22'", "]", ".", "library", ")", "\n", "\n", "G12hat", "=", "ddsde", ".", "fit", "(", "'G12'", ",", "\n", "order", "=", "self", ".", "fitters", "[", "'G12'", "]", ".", "max_degree", ",", "\n", "threshold", "=", "self", ".", "fitters", "[", "'G12'", "]", ".", "threshold", ",", "\n", "alpha", "=", "self", ".", "fitters", "[", "'G12'", "]", ".", "alpha", ",", "\n", "library", "=", "self", ".", "fitters", "[", "'G12'", "]", ".", "library", ")", "\n", "\n", "# fig, ax = plt.subplots(2, 3, figsize=(12, 8), dpi=100)", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "8", ")", ",", "dpi", "=", "100", ")", "\n", "gs", "=", "fig", ".", "add_gridspec", "(", "2", ",", "3", ")", "\n", "ax_mxmy", "=", "fig", ".", "add_subplot", "(", "gs", "[", "0", ",", "0", "]", ",", "projection", "=", "'3d'", ")", "\n", "ax_modm", "=", "fig", ".", "add_subplot", "(", "gs", "[", "1", ",", "0", "]", ")", "\n", "ax_f1", "=", "fig", ".", "add_subplot", "(", "gs", "[", "0", ",", "1", "]", ",", "projection", "=", "'3d'", ")", "\n", "ax_f2", "=", "fig", ".", "add_subplot", "(", "gs", "[", "1", ",", "1", "]", ",", "projection", "=", "'3d'", ")", "\n", "ax_g11", "=", "fig", ".", "add_subplot", "(", "gs", "[", "0", ",", "2", "]", ",", "projection", "=", "'3d'", ")", "\n", "ax_g22", "=", "fig", ".", "add_subplot", "(", "gs", "[", "1", ",", "2", "]", ",", "projection", "=", "'3d'", ")", "\n", "\n", "self", ".", "_show_histograms_2d", "(", "ax_mxmy", ",", "[", "self", ".", "_data_Mx", ",", "self", ".", "_data_My", "]", ",", "x", ",", "title", "=", "'$M$ histogram'", ")", "\n", "self", ".", "_show_histograms_1d", "(", "ax_modm", ",", "self", ".", "_data_M", ",", "np", ".", "sqrt", "(", "x", "[", "0", "]", "**", "2", "+", "x", "[", "1", "]", "**", "2", ")", ",", "xlabel", "=", "'$|M|$'", ",", "\n", "title", "=", "'$|M|$ histogram'", ")", "\n", "self", ".", "_show_functions_2d", "(", "ax_f1", ",", "self", ".", "F1", ",", "F1hat", ",", "title", "=", "'$F_{1}$'", ")", "\n", "self", ".", "_show_functions_2d", "(", "ax_f2", ",", "self", ".", "F2", ",", "F2hat", ",", "title", "=", "'$F_{2}$'", ")", "\n", "self", ".", "_show_functions_2d", "(", "ax_g11", ",", "self", ".", "G11", ",", "G11hat", ",", "title", "=", "'$F_{11}$'", ")", "\n", "self", ".", "_show_functions_2d", "(", "ax_g22", ",", "self", ".", "G22", ",", "G22hat", ",", "title", "=", "'$G_{22}$'", ")", "\n", "\n", "print", "(", "f'F1:'", ")", "\n", "print", "(", "f'  Original: {self.F1}'", ")", "\n", "print", "(", "f'  Bootstrapped: {F1hat}'", ")", "\n", "\n", "print", "(", "f'F2:'", ")", "\n", "print", "(", "f'  Original: {self.F2}'", ")", "\n", "print", "(", "f'  Bootstrapped: {F2hat}'", ")", "\n", "\n", "print", "(", "f'G11:'", ")", "\n", "print", "(", "f'  Original: {self.G11}'", ")", "\n", "print", "(", "f'  Bootstrapped: {G11hat}'", ")", "\n", "\n", "print", "(", "f'G22:'", ")", "\n", "print", "(", "f'  Original: {self.G22}'", ")", "\n", "print", "(", "f'  Bootstrapped: {G22hat}'", ")", "\n", "\n", "print", "(", "f'G12 / G21:'", ")", "\n", "print", "(", "f'  Original: {self.G12}'", ")", "\n", "print", "(", "f'  Bootstrapped: {G12hat}'", ")", "\n", "\n", "", "else", ":", "\n", "# Generate simulated time-series", "\n", "            ", "timepoints", "=", "self", ".", "_data_X", ".", "shape", "[", "0", "]", "\n", "x", "=", "self", ".", "simulate", "(", "t_int", "=", "self", ".", "_ddsde", ".", "t_int", ",", "timepoints", "=", "timepoints", ")", "\n", "\n", "ddsde", "=", "pydaddy", ".", "Characterize", "(", "data", "=", "[", "x", "]", ",", "t", "=", "self", ".", "_ddsde", ".", "t_int", ",", "Dt", "=", "self", ".", "Dt", ",", "dt", "=", "self", ".", "dt", ",", "show_summary", "=", "False", ")", "\n", "\n", "Fhat", "=", "ddsde", ".", "fit", "(", "'F'", ",", "order", "=", "self", ".", "fitters", "[", "'F'", "]", ".", "max_degree", ",", "\n", "threshold", "=", "self", ".", "fitters", "[", "'F'", "]", ".", "threshold", ",", "\n", "alpha", "=", "self", ".", "fitters", "[", "'F'", "]", ".", "alpha", ",", "\n", "library", "=", "self", ".", "fitters", "[", "'F'", "]", ".", "library", ")", "\n", "\n", "Ghat", "=", "ddsde", ".", "fit", "(", "'G'", ",", "order", "=", "self", ".", "fitters", "[", "'G'", "]", ".", "max_degree", ",", "\n", "threshold", "=", "self", ".", "fitters", "[", "'G'", "]", ".", "threshold", ",", "\n", "alpha", "=", "self", ".", "fitters", "[", "'G'", "]", ".", "alpha", ",", "\n", "library", "=", "self", ".", "fitters", "[", "'G'", "]", ".", "library", ")", "\n", "\n", "# xs = np.linspace(np.nanmin(self._data_X), np.nanmax(self._data_X), 100)", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "1", ",", "3", ",", "figsize", "=", "(", "12", ",", "4", ")", ",", "dpi", "=", "100", ")", "\n", "self", ".", "_show_histograms_1d", "(", "ax", "[", "0", "]", ",", "self", ".", "_data_X", ",", "x", ",", "xlabel", "=", "'$x$'", ",", "title", "=", "'Histogram'", ")", "\n", "self", ".", "_show_functions_1d", "(", "ax", "[", "1", "]", ",", "self", ".", "op", ",", "self", ".", "F", ",", "Fhat", ",", "ylabel", "=", "'F'", ",", "title", "=", "'Drift'", ")", "\n", "self", ".", "_show_functions_1d", "(", "ax", "[", "2", "]", ",", "self", ".", "op", ",", "self", ".", "G", ",", "Ghat", ",", "ylabel", "=", "'G'", ",", "title", "=", "'Diffusion'", ")", "\n", "\n", "print", "(", "'Drift:'", ")", "\n", "print", "(", "f'    Original: {self.F}'", ")", "\n", "print", "(", "f'    Bootstrapped: {Fhat}'", ")", "\n", "print", "(", "'\\nDiffusion:'", ")", "\n", "print", "(", "f'    Original: {self.G}'", ")", "\n", "print", "(", "f'    Bootstrapped: {Ghat}'", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._print_function_diagnostics": [[1403, 1417], ["f", "daddy.Daddy._remove_outliers", "print", "print", "print", "len", "len", "numpy.nansum", "numpy.nansum", "numpy.nansum", "numpy.nansum", "numpy.nanmean", "numpy.nanmean"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._remove_outliers"], ["", "def", "_print_function_diagnostics", "(", "self", ",", "f", ",", "x", ",", "y", ",", "name", ",", "symbol", ")", ":", "\n", "        ", "n", ",", "k", "=", "len", "(", "x", ")", ",", "len", "(", "f", ")", "\n", "\n", "y_fit", "=", "f", "(", "x", ")", "\n", "(", "x_", ",", "y_fit_", ")", ",", "y_", "=", "self", ".", "_remove_outliers", "(", "[", "x", ",", "y_fit", "]", ",", "y", ")", "\n", "r2", "=", "1", "-", "np", ".", "nansum", "(", "(", "y", "-", "y_fit", ")", "**", "2", ")", "/", "np", ".", "nansum", "(", "(", "y", "-", "np", ".", "nanmean", "(", "y", ")", ")", "**", "2", ")", "\n", "r2_", "=", "1", "-", "np", ".", "nansum", "(", "(", "y_", "-", "y_fit_", ")", "**", "2", ")", "/", "np", ".", "nansum", "(", "(", "y_", "-", "np", ".", "nanmean", "(", "y_", ")", ")", "**", "2", ")", "\n", "\n", "r2", "=", "1", "-", "(", "(", "1", "-", "r2", ")", "*", "(", "n", "-", "1", ")", "/", "(", "n", "-", "k", "-", "1", ")", ")", "\n", "r2_", "=", "1", "-", "(", "(", "1", "-", "r2_", ")", "*", "(", "n", "-", "1", ")", "/", "(", "n", "-", "k", "-", "1", ")", ")", "\n", "\n", "print", "(", "f'\\n{name}:\\n {symbol} = {f}'", ")", "\n", "print", "(", "f'    Adjusted R-squared : {r2:.4f}'", ")", "\n", "print", "(", "f'    Adjusted R-squared (without outliers) : {r2_:.4f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy._print_function_diagnostics_2d": [[1418, 1432], ["f", "daddy.Daddy._remove_outliers", "print", "print", "print", "numpy.count_nonzero", "numpy.nansum", "numpy.nansum", "numpy.nansum", "numpy.nansum", "numpy.nanmean", "numpy.nanmean"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.preprocessing.Preprocessing._remove_outliers"], ["", "def", "_print_function_diagnostics_2d", "(", "self", ",", "f", ",", "x", ",", "y", ",", "z", ",", "name", ",", "symbol", ")", ":", "\n", "        ", "n", ",", "k", "=", "x", ".", "size", ",", "np", ".", "count_nonzero", "(", "f", ")", "\n", "\n", "z_fit", "=", "f", "(", "x", ",", "y", ")", "\n", "(", "x_", ",", "y_", ",", "z_fit_", ")", ",", "z_", "=", "self", ".", "_remove_outliers", "(", "[", "x", ",", "y", ",", "z_fit", "]", ",", "z", ")", "\n", "r2", "=", "1", "-", "(", "np", ".", "nansum", "(", "(", "z", "-", "z_fit", ")", "**", "2", ")", "/", "np", ".", "nansum", "(", "(", "z", "-", "np", ".", "nanmean", "(", "z", ")", ")", "**", "2", ")", ")", "\n", "r2_", "=", "1", "-", "(", "np", ".", "nansum", "(", "(", "z_", "-", "z_fit_", ")", "**", "2", ")", "/", "np", ".", "nansum", "(", "(", "z_", "-", "np", ".", "nanmean", "(", "z_", ")", ")", "**", "2", ")", ")", "\n", "\n", "r2", "=", "1", "-", "(", "(", "1", "-", "r2", ")", "*", "(", "n", "-", "1", ")", "/", "(", "n", "-", "k", "-", "1", ")", ")", "\n", "r2_", "=", "1", "-", "(", "(", "1", "-", "r2_", ")", "*", "(", "n", "-", "1", ")", "/", "(", "n", "-", "k", "-", "1", ")", ")", "\n", "\n", "print", "(", "f'\\n{name}:\\n {symbol} = {f}'", ")", "\n", "print", "(", "f'    Adjusted R-squared : {r2:.4f}'", ")", "\n", "print", "(", "f'    Adjusted R-squared (without outliers) : {r2_:.4f}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.PathNotFound.__init__": [[1450, 1453], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "full_path", ",", "message", ")", ":", "\n", "        ", "self", ".", "full_path", "=", "full_path", "\n", "self", ".", "message", "=", "message", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.Poly.__init__": [[12, 16], ["numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "coeffs", ",", "degree", ",", "stderr", ")", ":", "\n", "        ", "self", ".", "coeffs", "=", "np", ".", "array", "(", "coeffs", ")", "\n", "self", ".", "degree", "=", "degree", "\n", "self", ".", "stderr", "=", "stderr", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.Poly.__repr__": [[17, 19], ["fitters.Poly.__str__"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.Poly2D.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.Poly.__array__": [[20, 22], ["None"], "methods", ["None"], ["", "def", "__array__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "coeffs", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.Poly.__len__": [[23, 25], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "coeffs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.Poly.__call__": [[26, 28], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.Poly.__str__": [[29, 31], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.Poly1D.__init__": [[37, 44], ["fitters.Poly.__init__", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__"], ["def", "__init__", "(", "self", ",", "coeffs", ",", "degree", ",", "stderr", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "coeffs", ")", "==", "(", "degree", "+", "1", ")", ",", "f'For degree {degree}, number of coefficients mut be {(degree + 1)}'", "\n", "assert", "(", "stderr", "is", "None", ")", "or", "len", "(", "stderr", ")", "==", "len", "(", "coeffs", ")", ",", "'Coefficient array `coeffs` and coefficients error array `stderr` should have the same length.'", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "coeffs", ",", "degree", ",", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.Poly1D.__call__": [[45, 49], ["numpy.array", "terms_with_coeffs.sum", "numpy.moveaxis", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "terms", "=", "np", ".", "array", "(", "[", "x", "**", "n", "for", "n", "in", "range", "(", "self", ".", "degree", "+", "1", ")", "]", ")", "\n", "terms_with_coeffs", "=", "self", ".", "coeffs", "*", "np", ".", "moveaxis", "(", "terms", ",", "0", ",", "-", "1", ")", "\n", "return", "terms_with_coeffs", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.Poly1D.__str__": [[50, 69], ["fitters.Poly1D.__str__.term"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "def", "term", "(", "n", ")", ":", "\n", "            ", "if", "n", "==", "0", ":", "\n", "                ", "return", "''", "\n", "", "if", "n", "==", "1", ":", "\n", "                ", "return", "'x'", "\n", "", "return", "f'x^{n}'", "\n", "\n", "", "terms", "=", "[", "term", "(", "n", ")", "for", "m", "in", "range", "(", "self", ".", "degree", "+", "1", ")", "for", "n", "in", "range", "(", "self", ".", "degree", "-", "m", "+", "1", ")", "]", "\n", "if", "self", ".", "stderr", "is", "not", "None", ":", "\n", "            ", "terms_with_coeffs", "=", "[", "f'({c:.3f} \u00b1 {e:.3f}){t}'", "for", "(", "c", ",", "e", ",", "t", ")", "in", "zip", "(", "self", ".", "coeffs", ",", "self", ".", "stderr", ",", "terms", ")", "if", "\n", "c", "!=", "0", "]", "\n", "", "else", ":", "\n", "            ", "terms_with_coeffs", "=", "[", "f'{c:.3f}{t}'", "for", "(", "c", ",", "t", ")", "in", "zip", "(", "self", ".", "coeffs", ",", "terms", ")", "if", "c", "!=", "0", "]", "\n", "\n", "", "if", "terms_with_coeffs", ":", "\n", "            ", "return", "' + '", ".", "join", "(", "terms_with_coeffs", ")", "\n", "", "else", ":", "\n", "            ", "return", "'0'", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.Poly2D.__init__": [[75, 82], ["fitters.Poly.__init__", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__"], ["def", "__init__", "(", "self", ",", "coeffs", ",", "degree", ",", "stderr", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "coeffs", ")", "==", "(", "degree", "+", "1", ")", "*", "(", "degree", "+", "2", ")", "/", "2", ",", "f'For degree {degree}, number of coefficients mut be {(degree + 1) * (degree + 2) / 2}'", "\n", "assert", "(", "stderr", "is", "None", ")", "or", "len", "(", "stderr", ")", "==", "len", "(", "coeffs", ")", ",", "'Coefficient array `coeffs` and coefficients error array `stderr` should have the same length.'", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "coeffs", ",", "degree", ",", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.Poly2D.__call__": [[83, 89], ["numpy.array", "terms_with_coeffs.sum", "numpy.moveaxis", "range", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "terms", "=", "np", ".", "array", "(", "[", "(", "x", "**", "n", ")", "*", "(", "y", "**", "m", ")", "\n", "for", "m", "in", "range", "(", "self", ".", "degree", "+", "1", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "degree", "-", "m", "+", "1", ")", "]", ")", "\n", "terms_with_coeffs", "=", "self", ".", "coeffs", "*", "np", ".", "moveaxis", "(", "terms", ",", "0", ",", "-", "1", ")", "\n", "return", "terms_with_coeffs", ".", "sum", "(", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.Poly2D.__str__": [[90, 119], ["fitters.Poly2D.__str__.term"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "def", "term", "(", "m", ",", "n", ")", ":", "\n", "            ", "if", "m", "==", "0", ":", "\n", "                ", "xterm", "=", "''", "\n", "", "elif", "m", "==", "1", ":", "\n", "                ", "xterm", "=", "'x'", "\n", "", "else", ":", "\n", "                ", "xterm", "=", "f'x^{m}'", "\n", "\n", "", "if", "n", "==", "0", ":", "\n", "                ", "yterm", "=", "''", "\n", "", "elif", "n", "==", "1", ":", "\n", "                ", "yterm", "=", "'y'", "\n", "", "else", ":", "\n", "                ", "yterm", "=", "f'y^{n}'", "\n", "\n", "", "return", "xterm", "+", "yterm", "\n", "\n", "", "terms", "=", "[", "term", "(", "n", ",", "m", ")", "for", "m", "in", "range", "(", "self", ".", "degree", "+", "1", ")", "for", "n", "in", "range", "(", "self", ".", "degree", "-", "m", "+", "1", ")", "]", "\n", "if", "self", ".", "stderr", "is", "not", "None", ":", "\n", "            ", "terms_with_coeffs", "=", "[", "f'({c:.3f} \u00b1 {e:.3f}){t}'", "for", "(", "c", ",", "e", ",", "t", ")", "in", "zip", "(", "self", ".", "coeffs", ",", "self", ".", "stderr", ",", "terms", ")", "if", "\n", "c", "!=", "0", "]", "\n", "", "else", ":", "\n", "            ", "terms_with_coeffs", "=", "[", "f'{c:.3f}{t}'", "for", "(", "c", ",", "t", ")", "in", "zip", "(", "self", ".", "coeffs", ",", "terms", ")", "if", "c", "!=", "0", "]", "\n", "\n", "", "if", "terms_with_coeffs", ":", "\n", "            ", "return", "' + '", ".", "join", "(", "terms_with_coeffs", ")", "\n", "", "else", ":", "\n", "            ", "return", "'0'", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.__init__": [[124, 136], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "threshold", "=", "0", ",", "max_degree", "=", "5", ",", "alpha", "=", "0", ",", "library", "=", "None", ")", ":", "\n", "        ", "\"\"\" Initialize the PolyFit object with appropriate regression parameters.\n        Parameters:\n            threshold: Sparsity threshold (can be optimized using model_selection())\n            max_degree: Maximum degree for polynomial fits\n            alpha: Regularization parameter for ridge regression\n            library: Library of candidate functions (optional). Should be a list of callables.\n        \"\"\"", "\n", "self", ".", "max_degree", "=", "max_degree", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "library", "=", "library", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit": [[137, 185], ["range", "numpy.ones_like.sum", "numpy.sqrt", "numpy.zeros", "numpy.ones_like", "fitters.PolyFitBase._get_poly_dictionary", "fitters.PolyFitBase._get_coeffs", "numpy.ones_like", "sklearn.linear_model.ridge_regression", "numpy.linalg.inv", "numpy.diagonal", "fitters.PolyFitBase._get_callable_poly", "numpy.vstack", "len", "numpy.sum", "warnings.warn", "numpy.abs", "f"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D._get_poly_dictionary", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D._get_coeffs", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D._get_callable_poly"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", ",", "weights", "=", "None", ")", ":", "\n", "        ", "\"\"\" Fit a polynomial using sparse regression using STLSQ (Sequentially thresholded least-squares)\n        Parameters:\n            x (np.array or list): Independent variable. Could either be an array (for 1D case) or\n                a list of two arrays (for 2D case).\n            y (np.array): Dependent variable\n            weights (np.array): Sample weights for regression.\n                If None (default), simple unweighted ridge regression will be performed.\n        Returns:\n            np.poly1d object for 1D case, Poly2D object for 2D case.\n        \"\"\"", "\n", "\n", "if", "self", ".", "library", ":", "\n", "            ", "dictionary", "=", "np", ".", "vstack", "(", "[", "f", "(", "x", ")", "for", "f", "in", "self", ".", "library", "]", ")", ".", "T", "\n", "coeffs", "=", "np", ".", "zeros", "(", "len", "(", "self", ".", "library", ")", ")", "\n", "keep", "=", "np", ".", "ones_like", "(", "coeffs", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "ispoly", "=", "False", "\n", "", "else", ":", "# Default polynomial dictionary", "\n", "            ", "dictionary", "=", "self", ".", "_get_poly_dictionary", "(", "x", ")", "\n", "coeffs", "=", "self", ".", "_get_coeffs", "(", ")", "\n", "keep", "=", "np", ".", "ones_like", "(", "coeffs", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "ispoly", "=", "True", "\n", "\n", "", "maxiter", "=", "dictionary", ".", "shape", "[", "1", "]", "\n", "\n", "for", "it", "in", "range", "(", "maxiter", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "keep", ")", "==", "0", ":", "\n", "                ", "warnings", ".", "warn", "(", "'Sparsity threshold is too big, eliminated all parameters.'", ")", "\n", "break", "\n", "", "coeffs_", "=", "ridge_regression", "(", "dictionary", "[", ":", ",", "keep", "]", ",", "y", ",", "alpha", "=", "self", ".", "alpha", ",", "sample_weight", "=", "weights", ")", "\n", "# print(f'coeffs: {coeffs_}')", "\n", "coeffs", "[", "keep", "]", "=", "coeffs_", "\n", "keep", "=", "(", "np", ".", "abs", "(", "coeffs", ")", ">", "self", ".", "threshold", ")", "\n", "coeffs", "[", "~", "keep", "]", "=", "0", "\n", "\n", "# Compute errors in coefficients", "\n", "", "N", "=", "y", ".", "shape", "[", "0", "]", "# Number of samples", "\n", "p", "=", "keep", ".", "sum", "(", ")", "# Number of nonzero terms", "\n", "yhat", "=", "dictionary", "@", "coeffs", "\n", "rsos", "=", "(", "y", "-", "yhat", ")", ".", "T", "@", "(", "y", "-", "yhat", ")", "\n", "sigma_2", "=", "rsos", "/", "(", "N", "-", "p", ")", "\n", "var_coeff", "=", "np", ".", "linalg", ".", "inv", "(", "dictionary", ".", "T", "@", "dictionary", ")", "*", "sigma_2", "\n", "stderr", "=", "np", ".", "sqrt", "(", "np", ".", "diagonal", "(", "var_coeff", ")", ")", "\n", "\n", "if", "ispoly", ":", "\n", "            ", "return", "self", ".", "_get_callable_poly", "(", "coeffs", ",", "stderr", ")", "\n", "", "else", ":", "\n", "            ", "return", "coeffs", ",", "stderr", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.model_selection": [[186, 265], ["numpy.array", "fitters.PolyFitBase.fit", "numpy.array.append", "nparams.append", "plotly.subplots.make_subplots", "plotly.subplots.make_subplots.add_scatter", "plotly.subplots.make_subplots.add_scatter", "plotly.subplots.make_subplots.update_xaxes", "plotly.subplots.make_subplots.update_yaxes", "plotly.subplots.make_subplots.update_yaxes", "plotly.subplots.make_subplots.update_layout", "plotly.subplots.make_subplots.show", "fitters.PolyFitBase._get_bic", "fitters.PolyFitBase._get_cv_error", "numpy.count_nonzero", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase._get_bic", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase._get_cv_error"], ["", "", "def", "model_selection", "(", "self", ",", "thresholds", ",", "x", ",", "y", ",", "weights", "=", "None", ",", "method", "=", "'cv'", ",", "plot", "=", "False", ")", ":", "\n", "        ", "\"\"\" Automatically choose the best threshold using BIC.\n        Parameters:\n            thresholds: List of thresholds to search over.\n            x, y: Data to be used for parameter tuning.\n            weights: (Optional) weights for fitting.\n            method: {'bic', 'cv'} The metric used for model selection\n            plot: If true, plot the model selection curves\n        \"\"\"", "\n", "\n", "assert", "method", "in", "[", "'bic'", ",", "'cv'", "]", ",", "\"Parameter 'model_selection' should be 'bic' or 'cv'.\"", "\n", "metric_name", "=", "{", "'bic'", ":", "'BIC'", ",", "'cv'", ":", "'CV Error'", "}", "\n", "\n", "# print('Finding best threshold for polynomial fit ...')", "\n", "# best_thresh = 0", "\n", "# best_metric = np.inf", "\n", "\n", "metrics", "=", "[", "]", "\n", "nparams", "=", "[", "]", "\n", "for", "thresh", "in", "thresholds", ":", "\n", "            ", "self", ".", "threshold", "=", "thresh", "\n", "p", "=", "self", ".", "fit", "(", "x", ",", "y", ",", "weights", ")", "\n", "if", "method", "==", "'bic'", ":", "\n", "                ", "metric", "=", "self", ".", "_get_bic", "(", "p", ",", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                ", "metric", "=", "self", ".", "_get_cv_error", "(", "x", ",", "y", ",", "folds", "=", "5", ")", "\n", "\n", "", "metrics", ".", "append", "(", "metric", ")", "\n", "nparams", ".", "append", "(", "np", ".", "count_nonzero", "(", "p", ")", ")", "\n", "# print(f'poly: {p}')", "\n", "# print(f'degree = {degree}, threshold: {thresh}, BIC: {bic}')", "\n", "# print(f'threshold: {thresh:.4f}, {metric_name[method]}: {metric:.4f}, poly: {p}')", "\n", "# if metric <= best_metric:", "\n", "#     best_metric = metric", "\n", "#     best_thresh = thresh", "\n", "\n", "", "metrics", "=", "np", ".", "array", "(", "metrics", ")", "\n", "errordelta", "=", "metrics", "[", "1", ":", "]", "-", "metrics", "[", ":", "-", "1", "]", "\n", "best_thresh", "=", "thresholds", "[", ":", "-", "1", "]", "[", "np", ".", "argmax", "(", "errordelta", ")", "]", "\n", "if", "plot", ":", "\n", "# fig = make_subplots(rows=2, cols=1, shared_xaxes=True,", "\n", "#                     vertical_spacing=0.01)", "\n", "#", "\n", "# fig.add_scatter(row=1, col=1, x=thresholds, y=metrics)", "\n", "# fig.add_scatter(row=2, col=1, x=thresholds, y=nparams)", "\n", "#", "\n", "# # fig.update_xaxes(row=1, col=1, title_text='Threshold')", "\n", "# fig.update_xaxes(row=2, col=1, title_text='Threshold')", "\n", "# fig.update_yaxes(row=1, col=1, title_text=metric_name[method])", "\n", "# fig.update_yaxes(row=2, col=1, title_text='No. of terms')", "\n", "\n", "            ", "fig", "=", "make_subplots", "(", "specs", "=", "[", "[", "{", "\"secondary_y\"", ":", "True", "}", "]", "]", ")", "\n", "fig", ".", "add_scatter", "(", "x", "=", "thresholds", ",", "y", "=", "metrics", ",", "secondary_y", "=", "False", ",", "name", "=", "metric_name", "[", "method", "]", ")", "\n", "fig", ".", "add_scatter", "(", "x", "=", "thresholds", ",", "y", "=", "nparams", ",", "secondary_y", "=", "True", ",", "name", "=", "'No. of terms'", ")", "\n", "\n", "fig", ".", "update_xaxes", "(", "title_text", "=", "'Threshold'", ")", "\n", "fig", ".", "update_yaxes", "(", "title_text", "=", "metric_name", "[", "method", "]", ",", "secondary_y", "=", "False", ")", "\n", "fig", ".", "update_yaxes", "(", "title_text", "=", "'No. of terms'", ",", "secondary_y", "=", "True", ")", "\n", "\n", "fig", ".", "update_layout", "(", "width", "=", "800", ",", "height", "=", "600", ",", "\n", "title_text", "=", "f'{metric_name[method]} Model selection'", ",", "\n", "title_x", "=", "0.5", ",", ")", "\n", "fig", ".", "show", "(", ")", "\n", "\n", "# fig, ax = plt.subplots(1, 3, figsize=(12, 4))", "\n", "# ax[0].plot(thresholds, metrics, '.-')", "\n", "# ax[0].set(xlabel='Sparsity Threshold', ylabel=metric_name[method])", "\n", "#", "\n", "# metrics = np.array(metrics)", "\n", "# errordelta = metrics[1:] - metrics[:-1]", "\n", "# ax[1].plot(thresholds[:-1], errordelta, '.-')", "\n", "# ax[1].set(xlabel='Sparsity Threshold', ylabel=f'Change in {metric_name[method]}')", "\n", "#", "\n", "# ax[2].plot(thresholds, nparams, '.-')", "\n", "# ax[2].set(xlabel='Sparsity Threshold', ylabel='Nonzero Coefficients')", "\n", "# plt.tight_layout()", "\n", "# plt.show()", "\n", "# print(f'Model selection complete. Chosen threshold = {best_thresh}')", "\n", "", "self", ".", "threshold", "=", "best_thresh", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.tune_and_fit": [[266, 282], ["fitters.PolyFitBase.model_selection", "fitters.PolyFitBase.fit", "numpy.array", "numpy.linspace", "fitters.PolyFitBase.fit", "numpy.max", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.model_selection", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit"], ["", "def", "tune_and_fit", "(", "self", ",", "x", ",", "y", ",", "thresholds", "=", "None", ",", "steps", "=", "20", ",", "plot", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x, y: Data to fit\n            thresholds: List of thresholds to try, will be automatically chosen if None\n            steps: When auto-choosing thesholds, the number of steps to take in the threshold range.\n            plot: Whether to plot the cross-validation error curves.\n        \"\"\"", "\n", "\n", "if", "thresholds", "is", "None", ":", "\n", "            ", "self", ".", "threshold", "=", "0", "\n", "p", "=", "np", ".", "array", "(", "self", ".", "fit", "(", "x", ",", "y", ")", ")", "\n", "thresholds", "=", "np", ".", "linspace", "(", "0", ",", "np", ".", "max", "(", "np", ".", "abs", "(", "p", ")", ")", ",", "steps", ",", "endpoint", "=", "False", ")", "\n", "\n", "", "self", ".", "model_selection", "(", "thresholds", "=", "thresholds", ",", "x", "=", "x", ",", "y", "=", "y", ",", "plot", "=", "plot", ")", "\n", "return", "self", ".", "fit", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase._get_cv_error": [[283, 292], ["sklearn.model_selection.KFold", "sklearn.model_selection.KFold.split", "numpy.mean", "fitters.PolyFitBase.fit", "numpy.mean", "cv_errors.append", "fitters.PolyFitBase._evaluate"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase.fit", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase._evaluate"], ["", "def", "_get_cv_error", "(", "self", ",", "x", ",", "y", ",", "folds", ")", ":", "\n", "        ", "kf", "=", "KFold", "(", "n_splits", "=", "folds", ",", "shuffle", "=", "False", ")", "\n", "cv_errors", "=", "[", "]", "\n", "for", "train", ",", "test", "in", "kf", ".", "split", "(", "x", ",", "y", ")", ":", "\n", "            ", "p", "=", "self", ".", "fit", "(", "x", "[", "train", "]", ",", "y", "[", "train", "]", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "y", "[", "test", "]", "-", "self", ".", "_evaluate", "(", "p", ",", "x", "[", "test", "]", ")", ")", "**", "2", ")", "\n", "cv_errors", ".", "append", "(", "mse", ")", "\n", "\n", "", "return", "np", ".", "mean", "(", "cv_errors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase._get_bic": [[293, 303], ["numpy.count_nonzero", "len", "numpy.mean", "numpy.log", "fitters.PolyFitBase._evaluate"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase._evaluate"], ["", "def", "_get_bic", "(", "self", ",", "p", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\" Compute the BIC for a fitted polynomial with given data x, y. \"\"\"", "\n", "\n", "dof", "=", "np", ".", "count_nonzero", "(", "p", ")", "# Degrees of freedom", "\n", "n_samples", "=", "len", "(", "y", ")", "\n", "mse", "=", "np", ".", "mean", "(", "(", "y", "-", "self", ".", "_evaluate", "(", "p", ",", "x", ")", ")", "**", "2", ")", "# np.mean(y ** 2)  # Normalized mean-squared error", "\n", "# bic = np.log(n_samples) * dof + n_samples * np.log(mse / n_samples)", "\n", "# print(f'dof: {dof}, n_samples: {n_samples}, mse: {mse}, bic: {bic}')", "\n", "bic", "=", "2", "*", "dof", "+", "n_samples", "*", "np", ".", "log", "(", "mse", "/", "n_samples", ")", "\n", "return", "bic", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase._get_poly_dictionary": [[304, 306], ["None"], "methods", ["None"], ["", "def", "_get_poly_dictionary", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase._get_callable_poly": [[307, 309], ["None"], "methods", ["None"], ["", "def", "_get_callable_poly", "(", "self", ",", "coeffs", ",", "stderr", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase._get_coeffs": [[310, 312], ["None"], "methods", ["None"], ["", "def", "_get_coeffs", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase._evaluate": [[313, 322], ["numpy.sum", "fitters.PolyFitBase._evaluate_poly", "numpy.vstack", "f"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D._evaluate_poly"], ["", "def", "_evaluate", "(", "self", ",", "c", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "library", ":", "# Fitting with custom library", "\n", "# In this case, c is an array of coefficients.", "\n", "            ", "dictionary", "=", "np", ".", "vstack", "(", "[", "f", "(", "x", ")", "for", "f", "in", "self", ".", "library", "]", ")", ".", "T", "\n", "return", "np", ".", "sum", "(", "c", "[", "0", "]", "*", "dictionary", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "# Fitting with default polynomial library", "\n", "# In this case, c is a callable polynomial.", "\n", "# c = self._get_callable_poly(c)", "\n", "            ", "return", "self", ".", "_evaluate_poly", "(", "c", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFitBase._evaluate_poly": [[323, 325], ["None"], "methods", ["None"], ["", "", "def", "_evaluate_poly", "(", "self", ",", "c", ",", "x", ")", ":", "\n", "        ", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit1D.__init__": [[328, 330], ["fitters.PolyFitBase.__init__"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit1D._get_poly_dictionary": [[331, 333], ["numpy.array", "range"], "methods", ["None"], ["", "def", "_get_poly_dictionary", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "x", "**", "d", "for", "d", "in", "range", "(", "self", ".", "max_degree", "+", "1", ")", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit1D._get_callable_poly": [[334, 337], ["fitters.Poly1D"], "methods", ["None"], ["", "def", "_get_callable_poly", "(", "self", ",", "coeffs", ",", "stderr", ")", ":", "\n", "        ", "\"\"\" Construct a callable polynomial from a given coefficient array. \"\"\"", "\n", "return", "Poly1D", "(", "coeffs", "=", "coeffs", ",", "degree", "=", "self", ".", "max_degree", ",", "stderr", "=", "stderr", ")", "# return np.poly1d(np.flipud(coeffs))", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit1D._get_coeffs": [[338, 340], ["numpy.zeros"], "methods", ["None"], ["", "def", "_get_coeffs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "self", ".", "max_degree", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit1D._evaluate_poly": [[341, 343], ["c"], "methods", ["None"], ["", "def", "_evaluate_poly", "(", "self", ",", "c", ",", "x", ")", ":", "\n", "        ", "return", "c", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__": [[346, 348], ["fitters.PolyFitBase.__init__"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D._get_poly_dictionary": [[349, 354], ["numpy.array", "range", "range"], "methods", ["None"], ["", "def", "_get_poly_dictionary", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "y", "=", "x", "[", ":", ",", "0", "]", ",", "x", "[", ":", ",", "1", "]", "\n", "return", "np", ".", "array", "(", "[", "(", "x", "**", "n", ")", "*", "(", "y", "**", "m", ")", "\n", "for", "m", "in", "range", "(", "self", ".", "max_degree", "+", "1", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "max_degree", "-", "m", "+", "1", ")", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D._get_callable_poly": [[355, 357], ["fitters.Poly2D"], "methods", ["None"], ["", "def", "_get_callable_poly", "(", "self", ",", "coeffs", ",", "stderr", ")", ":", "\n", "        ", "return", "Poly2D", "(", "coeffs", "=", "coeffs", ",", "degree", "=", "self", ".", "max_degree", ",", "stderr", "=", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D._get_coeffs": [[358, 360], ["numpy.zeros", "int"], "methods", ["None"], ["", "def", "_get_coeffs", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "int", "(", "(", "self", ".", "max_degree", "+", "1", ")", "*", "(", "self", ".", "max_degree", "+", "2", ")", "/", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.fitters.PolyFit2D._evaluate_poly": [[361, 363], ["c"], "methods", ["None"], ["", "def", "_evaluate_poly", "(", "self", ",", "c", ",", "x", ")", ":", "\n", "        ", "return", "c", "(", "x", "[", ":", ",", "0", "]", ",", "x", "[", ":", ",", "1", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.tests.tests.load_sample_data": [[11, 37], ["pkg_resources.resource_stream", "numpy.loadtxt", "numpy.loadtxt"], "function", ["None"], ["def", "load_sample_data", "(", "data_path", ")", ":", "\n", "\t", "\"\"\"\n\tLoad the sample distrubuted data\n\n\tdata\n\t\u251c\u2500\u2500 fish_data\n\u2502\t\t\u2514\u2500\u2500 ectropus.csv\n\t\u2514\u2500\u2500 model_data\n\t\t\u251c\u2500\u2500 scalar\n\t\t\u2502\t\u251c\u2500\u2500 pairwise.csv\n\t\t\u2502\t\u2514\u2500\u2500 ternary.csv\n\t\t\u2514\u2500\u2500 vector\n\t\t\t\u251c\u2500\u2500 pairwise.csv\n\t\t\t\u2514\u2500\u2500 ternary.csv\n\n\n\tEach data file in pairwise, ternary and extras have two columns;\n\tfirst column is the timeseries data x, and the second one is the time stamp\n\n\tvector_data.csv also has two columns but contains the vector data x1 and x2 with missing time stamp. Use t_int=0.12.\n\t\"\"\"", "\n", "stream", "=", "pkg_resources", ".", "resource_stream", "(", "'pydaddy'", ",", "data_path", ")", "\n", "try", ":", "\n", "\t\t", "return", "np", ".", "loadtxt", "(", "stream", ",", "delimiter", "=", "','", ")", "\n", "", "except", ":", "\n", "\t\t", "return", "np", ".", "loadtxt", "(", "stream", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.tests.tests.scalar_test": [[39, 67], ["tests.load_sample_data", "pydaddy.Characterize", "pydaddy.Characterize.data", "pydaddy.Characterize.parameters", "pydaddy.Characterize.visualize", "pydaddy.Characterize.diagnostic", "pydaddy.Characterize.noise_characterstics", "pydaddy.Characterize.save_data", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.tests.tests.load_sample_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.parameters", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.visualize"], ["", "", "def", "scalar_test", "(", "data_path", "=", "'data/model_data/scalar/ternary.csv'", ",", "show", "=", "False", ",", "save", "=", "False", ")", ":", "\n", "\t", "data", "=", "load_sample_data", "(", "data_path", ")", "\n", "X", "=", "data", "[", ":", ",", "0", "]", "\n", "t", "=", "data", "[", ":", ",", "1", "]", "\n", "t_int", "=", "t", "[", "-", "1", "]", "/", "len", "(", "t", ")", "\n", "\n", "# # Analyse", "\n", "out", "=", "pydaddy", ".", "Characterize", "(", "data", "=", "[", "X", "]", ",", "t", "=", "t", ")", "\n", "\n", "drift", ",", "diff", ",", "avgdrift", ",", "avgdiff", ",", "op", "=", "out", ".", "data", "(", ")", "\n", "len", "(", "diff", ")", ",", "len", "(", "drift", ")", ",", "len", "(", "avgdrift", ")", ",", "len", "(", "avgdiff", ")", ",", "len", "(", "op", ")", "\n", "\n", "# # View parameters", "\n", "out", ".", "parameters", "(", "save", "=", "save", ")", "\n", "\n", "# # Visualize Output", "\n", "out", ".", "visualize", "(", "show", "=", "show", ",", "save", "=", "save", ")", "\n", "\n", "# # Diagnostics graphs", "\n", "out", ".", "diagnostic", "(", "show", "=", "show", ",", "save", "=", "save", ")", "\n", "\n", "# # Noise Characterstics", "\n", "out", ".", "noise_characterstics", "(", "show", "=", "show", ",", "save", "=", "save", ")", "\n", "\n", "# #Save data", "\n", "out", ".", "save_data", "(", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.tests.tests.vector_test": [[69, 97], ["tests.load_sample_data", "pydaddy.Characterize", "pydaddy.Characterize.data", "pydaddy.Characterize.parameters", "pydaddy.Characterize.visualize", "pydaddy.Characterize.diagnostic", "pydaddy.Characterize.noise_characterstics", "pydaddy.Characterize.save_data"], "function", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.tests.tests.load_sample_data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.data", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.parameters", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.visualize"], ["", "def", "vector_test", "(", "data_path", "=", "'data/model_data/vector/ternary.csv'", ",", "show", "=", "False", ",", "save", "=", "False", ")", ":", "\n", "\t", "data", "=", "load_sample_data", "(", "data_path", ")", "\n", "vel_x", "=", "data", "[", ":", ",", "0", "]", "\n", "vel_y", "=", "data", "[", ":", ",", "1", "]", "\n", "tint", "=", "0.12", "\n", "\n", "# # Initialize object with parameters", "\n", "out", "=", "pydaddy", ".", "Characterize", "(", "[", "vel_x", ",", "vel_y", "]", ",", "t", "=", "0.12", ")", "\n", "\n", "# # Analyse", "\n", "out", ".", "data", "(", ")", "\n", "\n", "# # View parameters", "\n", "out", ".", "parameters", "(", "save", "=", "save", ")", "\n", "\n", "# # Visualize Output", "\n", "out", ".", "visualize", "(", "show", "=", "show", ",", "save", "=", "save", ")", "\n", "\n", "# # Diagnostics graphs", "\n", "out", ".", "diagnostic", "(", "show", "=", "show", ",", "save", "=", "save", ")", "\n", "\n", "# # Noise analysis", "\n", "out", ".", "noise_characterstics", "(", "show", "=", "show", ",", "save", "=", "save", ")", "\n", "\n", "# # Save data", "\n", "out", ".", "save_data", "(", ")", "\n", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.tests.test_simulate.TestSimulateVector.setUp": [[12, 15], ["pydaddy.load_sample_dataset", "pydaddy.Characterize"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.characterize.load_sample_dataset"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "data", ",", "t", "=", "pydaddy", ".", "load_sample_dataset", "(", "'model-data-vector-ternary'", ")", "\n", "self", ".", "ddsde", "=", "pydaddy", ".", "Characterize", "(", "data", ",", "t", "=", "1", ",", "Dt", "=", "1", ",", "bins", "=", "20", ",", "show_summary", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.tests.test_simulate.TestSimulateVector.test_corner_cases": [[16, 35], ["pydaddy.fitters.Poly2D", "pydaddy.fitters.Poly2D", "pydaddy.fitters.Poly2D", "print", "test_simulate.TestSimulateVector.assertRaises", "test_simulate.TestSimulateVector.ddsde.simulate", "test_simulate.TestSimulateVector.assertRaises", "test_simulate.TestSimulateVector.ddsde.simulate", "test_simulate.TestSimulateVector.assertRaises", "test_simulate.TestSimulateVector.ddsde.simulate"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.simulate", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.simulate", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.simulate"], ["", "def", "test_corner_cases", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "AssertionError", ",", "\n", "msg", "=", "'Should have raised AssertionError when all functions missing.'", ")", ":", "\n", "            ", "self", ".", "ddsde", ".", "simulate", "(", "t_int", "=", "0.12", ",", "timepoints", "=", "1000", ")", "\n", "\n", "", "self", ".", "ddsde", ".", "_ddsde", ".", "F1", "=", "Poly2D", "(", "degree", "=", "2", ",", "coeffs", "=", "[", "0", ",", "0", ",", "1", ",", "3", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "ddsde", ".", "_ddsde", ".", "G11", "=", "Poly2D", "(", "degree", "=", "2", ",", "coeffs", "=", "[", "0", ",", "0", ",", "1", ",", "-", "3", ",", "0", ",", "0", "]", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "AssertionError", ",", "\n", "msg", "=", "'Should have raised AssertionError when some functions missing.'", ")", ":", "\n", "            ", "self", ".", "ddsde", ".", "simulate", "(", "t_int", "=", "0.12", ",", "timepoints", "=", "1000", ")", "\n", "\n", "", "self", ".", "ddsde", ".", "_ddsde", ".", "G12", "=", "Poly2D", "(", "degree", "=", "2", ",", "coeffs", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "AssertionError", ",", "\n", "msg", "=", "'Should have raised AssertionError when some functions missing.'", ")", ":", "\n", "            ", "self", ".", "ddsde", ".", "simulate", "(", "t_int", "=", "0.12", ",", "timepoints", "=", "1000", ")", "\n", "\n", "", "print", "(", "'ddsde.simulate() vector corner-case tests passed.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.tests.test_simulate.TestSimulateVector.test_simulate": [[36, 46], ["pydaddy.fitters.Poly2D", "pydaddy.fitters.Poly2D", "pydaddy.fitters.Poly2D", "pydaddy.fitters.Poly2D", "pydaddy.fitters.Poly2D", "test_simulate.TestSimulateVector.ddsde.simulate", "print"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.simulate"], ["", "def", "test_simulate", "(", "self", ")", ":", "\n", "        ", "self", ".", "ddsde", ".", "_ddsde", ".", "F1", "=", "Poly2D", "(", "degree", "=", "2", ",", "coeffs", "=", "[", "0", ",", "0", ",", "1", ",", "3", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "ddsde", ".", "_ddsde", ".", "F2", "=", "Poly2D", "(", "degree", "=", "2", ",", "coeffs", "=", "[", "0", ",", "0", ",", "1", ",", "3", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "ddsde", ".", "_ddsde", ".", "G11", "=", "Poly2D", "(", "degree", "=", "2", ",", "coeffs", "=", "[", "0", ",", "0", ",", "1", ",", "3", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "ddsde", ".", "_ddsde", ".", "G22", "=", "Poly2D", "(", "degree", "=", "2", ",", "coeffs", "=", "[", "0", ",", "0", ",", "1", ",", "3", ",", "0", ",", "0", "]", ")", "\n", "self", ".", "ddsde", ".", "_ddsde", ".", "G12", "=", "Poly2D", "(", "degree", "=", "2", ",", "coeffs", "=", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ")", "\n", "\n", "self", ".", "ddsde", ".", "simulate", "(", "t_int", "=", "0.12", ",", "timepoints", "=", "1000", ")", "\n", "\n", "print", "(", "'ddsde.simulate() vector simulation test passed.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.tests.test_simulate.TestSimulateScalar.setUp": [[50, 53], ["pydaddy.load_sample_dataset", "pydaddy.Characterize"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.characterize.load_sample_dataset"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "data", ",", "t", "=", "pydaddy", ".", "load_sample_dataset", "(", "'model-data-scalar-ternary'", ")", "\n", "self", ".", "ddsde", "=", "pydaddy", ".", "Characterize", "(", "data", ",", "t", "=", "1", ",", "Dt", "=", "1", ",", "bins", "=", "20", ",", "show_summary", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.tests.test_simulate.TestSimulateScalar.test_corner_cases": [[54, 66], ["pydaddy.fitters.Poly1D", "print", "test_simulate.TestSimulateScalar.assertRaises", "test_simulate.TestSimulateScalar.ddsde.simulate", "test_simulate.TestSimulateScalar.assertRaises", "test_simulate.TestSimulateScalar.ddsde.simulate"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.simulate", "home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.simulate"], ["", "def", "test_corner_cases", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "assertRaises", "(", "AssertionError", ",", "\n", "msg", "=", "'Should have raised AssertionError when all functions missing.'", ")", ":", "\n", "            ", "self", ".", "ddsde", ".", "simulate", "(", "t_int", "=", "0.12", ",", "timepoints", "=", "1000", ")", "\n", "\n", "", "self", ".", "ddsde", ".", "_ddsde", ".", "F", "=", "Poly1D", "(", "degree", "=", "3", ",", "coeffs", "=", "[", "1", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "with", "self", ".", "assertRaises", "(", "AssertionError", ",", "\n", "msg", "=", "'Should have raised AssertionError when F is missing.'", ")", ":", "\n", "            ", "self", ".", "ddsde", ".", "simulate", "(", "t_int", "=", "0.12", ",", "timepoints", "=", "1000", ")", "\n", "\n", "", "print", "(", "'ddsde.simulate() scalar corner-case tests passed.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tee-lab_pydaddy.tests.test_simulate.TestSimulateScalar.test_simulate": [[67, 73], ["pydaddy.fitters.Poly1D", "pydaddy.fitters.Poly1D", "test_simulate.TestSimulateScalar.ddsde.simulate", "print"], "methods", ["home.repos.pwc.inspect_result.tee-lab_pydaddy.pydaddy.daddy.Daddy.simulate"], ["", "def", "test_simulate", "(", "self", ")", ":", "\n", "        ", "self", ".", "ddsde", ".", "_ddsde", ".", "F", "=", "Poly1D", "(", "degree", "=", "3", ",", "coeffs", "=", "[", "1", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "self", ".", "ddsde", ".", "_ddsde", ".", "G", "=", "Poly1D", "(", "degree", "=", "4", ",", "coeffs", "=", "[", "0", ",", "0", ",", "1", ",", "0", ",", "1", "]", ")", "\n", "\n", "self", ".", "ddsde", ".", "simulate", "(", "t_int", "=", "0.12", ",", "timepoints", "=", "1000", ")", "\n", "print", "(", "'ddsde.simulate() scalar simulation test passed.'", ")", "\n", "\n"]]}