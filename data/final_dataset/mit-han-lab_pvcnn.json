{"home.repos.pwc.inspect_result.mit-han-lab_pvcnn.None.train.prepare": [[7, 76], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "print", "configs.update_from_modules", "get_save_path", "configs.update_from_arguments", "set_cuda_visible_devices", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "configs.evaluate.best_checkpoint_path.endswith", "configs.evaluate.best_checkpoint_path.replace", "configs.evaluate.best_checkpoint_path.replace", "configs.evaluate.dataset.items", "metrics.append", "os.path.join", "os.path.dirname", "len", "os.path.join", "metrics.append", "m.replace"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.update_from_modules", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.get_save_path", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.update_from_arguments", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.device.set_cuda_visible_devices"], ["def", "prepare", "(", ")", ":", "\n", "    ", "from", "utils", ".", "common", "import", "get_save_path", "\n", "from", "utils", ".", "config", "import", "configs", "\n", "from", "utils", ".", "device", "import", "set_cuda_visible_devices", "\n", "\n", "# since PyTorch jams device selection, we have to parse args before import torch (issue #26790)", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'configs'", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--devices'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "args", ",", "opts", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "if", "args", ".", "devices", "is", "not", "None", "and", "args", ".", "devices", "!=", "'cpu'", ":", "\n", "        ", "gpus", "=", "set_cuda_visible_devices", "(", "args", ".", "devices", ")", "\n", "", "else", ":", "\n", "        ", "gpus", "=", "[", "]", "\n", "\n", "", "print", "(", "f'==> loading configs from {args.configs}'", ")", "\n", "configs", ".", "update_from_modules", "(", "*", "args", ".", "configs", ")", "\n", "# define save path", "\n", "configs", ".", "train", ".", "save_path", "=", "get_save_path", "(", "*", "args", ".", "configs", ",", "prefix", "=", "'runs'", ")", "\n", "\n", "# override configs with args", "\n", "configs", ".", "update_from_arguments", "(", "*", "opts", ")", "\n", "if", "len", "(", "gpus", ")", "==", "0", ":", "\n", "        ", "configs", ".", "device", "=", "'cpu'", "\n", "configs", ".", "device_ids", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "configs", ".", "device", "=", "'cuda'", "\n", "configs", ".", "device_ids", "=", "gpus", "\n", "", "if", "args", ".", "evaluate", "and", "configs", ".", "evaluate", ".", "fn", "is", "not", "None", ":", "\n", "        ", "if", "'dataset'", "in", "configs", ".", "evaluate", ":", "\n", "            ", "for", "k", ",", "v", "in", "configs", ".", "evaluate", ".", "dataset", ".", "items", "(", ")", ":", "\n", "                ", "configs", ".", "dataset", "[", "k", "]", "=", "v", "\n", "", "", "", "else", ":", "\n", "        ", "configs", ".", "evaluate", "=", "None", "\n", "\n", "", "if", "configs", ".", "evaluate", "is", "None", ":", "\n", "        ", "metrics", "=", "[", "]", "\n", "if", "'metric'", "in", "configs", ".", "train", "and", "configs", ".", "train", ".", "metric", "is", "not", "None", ":", "\n", "            ", "metrics", ".", "append", "(", "configs", ".", "train", ".", "metric", ")", "\n", "", "if", "'metrics'", "in", "configs", ".", "train", "and", "configs", ".", "train", ".", "metrics", "is", "not", "None", ":", "\n", "            ", "for", "m", "in", "configs", ".", "train", ".", "metrics", ":", "\n", "                ", "if", "m", "not", "in", "metrics", ":", "\n", "                    ", "metrics", ".", "append", "(", "m", ")", "\n", "", "", "", "configs", ".", "train", ".", "metrics", "=", "metrics", "\n", "configs", ".", "train", ".", "metric", "=", "None", "if", "len", "(", "metrics", ")", "==", "0", "else", "metrics", "[", "0", "]", "\n", "\n", "save_path", "=", "configs", ".", "train", ".", "save_path", "\n", "configs", ".", "train", ".", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'latest.pth.tar'", ")", "\n", "configs", ".", "train", ".", "checkpoints_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'latest'", ",", "'e{}.pth.tar'", ")", "\n", "configs", ".", "train", ".", "best_checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "train", ".", "save_path", ",", "'best.pth.tar'", ")", "\n", "best_checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best'", ")", "\n", "configs", ".", "train", ".", "best_checkpoint_paths", "=", "{", "\n", "m", ":", "os", ".", "path", ".", "join", "(", "best_checkpoints_dir", ",", "'best.{}.pth.tar'", ".", "format", "(", "m", ".", "replace", "(", "'/'", ",", "'.'", ")", ")", ")", "\n", "for", "m", "in", "configs", ".", "train", ".", "metrics", "\n", "}", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "configs", ".", "train", ".", "checkpoints_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "best_checkpoints_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "if", "'best_checkpoint_path'", "not", "in", "configs", ".", "evaluate", "or", "configs", ".", "evaluate", ".", "best_checkpoint_path", "is", "None", ":", "\n", "            ", "if", "'best_checkpoint_path'", "in", "configs", ".", "train", "and", "configs", ".", "train", ".", "best_checkpoint_path", "is", "not", "None", ":", "\n", "                ", "configs", ".", "evaluate", ".", "best_checkpoint_path", "=", "configs", ".", "train", ".", "best_checkpoint_path", "\n", "", "else", ":", "\n", "                ", "configs", ".", "evaluate", ".", "best_checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "train", ".", "save_path", ",", "'best.pth.tar'", ")", "\n", "", "", "assert", "configs", ".", "evaluate", ".", "best_checkpoint_path", ".", "endswith", "(", "'.pth.tar'", ")", "\n", "configs", ".", "evaluate", ".", "predictions_path", "=", "configs", ".", "evaluate", ".", "best_checkpoint_path", ".", "replace", "(", "'.pth.tar'", ",", "'.predictions'", ")", "\n", "configs", ".", "evaluate", ".", "stats_path", "=", "configs", ".", "evaluate", ".", "best_checkpoint_path", ".", "replace", "(", "'.pth.tar'", ",", "'.eval.npy'", ")", "\n", "\n", "", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.None.train.main": [[78, 263], ["train.prepare", "random.seed", "np.random.seed", "torch.manual_seed", "print", "print", "prepare.dataset", "print", "prepare.model", "torch.nn.DataParallel.to", "prepare.train.criterion().to", "prepare.train.optimizer", "os.path.exists", "prepare.evaluate.fn", "torch.nn.DataParallel.train", "tqdm", "prepare.train.meters.items", "torch.nn.DataParallel.eval", "dict.items", "prepare.get", "DataLoader", "torch.nn.DataParallel", "torch.nn.DataParallel.parameters", "print", "torch.load", "print", "torch.nn.DataParallel.load_state_dict", "torch.load.get", "torch.load.get", "print", "prepare.train.scheduler", "dict", "loaders.items", "dict.items", "tensorboardX.SummaryWriter", "range", "isinstance", "isinstance", "configs.train.optimizer.zero_grad", "torch.nn.DataParallel.", "configs.train.criterion().to.", "writer.add_scalar", "criterion.backward", "configs.train.optimizer.step", "configs.train.scheduler.step", "meter", "torch.no_grad", "tqdm", "meter.compute", "torch.initial_seed", "prepare.train.criterion", "torch.load.pop", "print", "configs.train.optimizer.load_state_dict", "dict.get", "print", "print", "train.main.train"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.eval.prepare", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.voxelization.AvgVoxelization.backward", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum.MeterFrustumKitti.compute"], ["", "def", "main", "(", ")", ":", "\n", "    ", "configs", "=", "prepare", "(", ")", "\n", "if", "configs", ".", "evaluate", "is", "not", "None", ":", "\n", "        ", "configs", ".", "evaluate", ".", "fn", "(", "configs", ")", "\n", "return", "\n", "\n", "", "import", "numpy", "as", "np", "\n", "import", "tensorboardX", "\n", "import", "torch", "\n", "import", "torch", ".", "backends", ".", "cudnn", "as", "cudnn", "\n", "from", "torch", ".", "utils", ".", "data", "import", "DataLoader", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "################################", "\n", "# Train / Eval Kernel Function #", "\n", "################################", "\n", "\n", "# train kernel", "\n", "def", "train", "(", "model", ",", "loader", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "current_step", ",", "writer", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "for", "inputs", ",", "targets", "in", "tqdm", "(", "loader", ",", "desc", "=", "'train'", ",", "ncols", "=", "0", ")", ":", "\n", "            ", "if", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", ":", "\n", "                    ", "batch_size", "=", "v", ".", "size", "(", "0", ")", "\n", "inputs", "[", "k", "]", "=", "v", ".", "to", "(", "configs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "", "else", ":", "\n", "                ", "batch_size", "=", "inputs", ".", "size", "(", "0", ")", "\n", "inputs", "=", "inputs", ".", "to", "(", "configs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "if", "isinstance", "(", "targets", ",", "dict", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "targets", ".", "items", "(", ")", ":", "\n", "                    ", "targets", "[", "k", "]", "=", "v", ".", "to", "(", "configs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "", "else", ":", "\n", "                ", "targets", "=", "targets", ".", "to", "(", "configs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/train'", ",", "loss", ".", "item", "(", ")", ",", "current_step", ")", "\n", "current_step", "+=", "batch_size", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "if", "scheduler", "is", "not", "None", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "# evaluate kernel", "\n", "", "", "def", "evaluate", "(", "model", ",", "loader", ",", "split", "=", "'test'", ")", ":", "\n", "        ", "meters", "=", "{", "}", "\n", "for", "k", ",", "meter", "in", "configs", ".", "train", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "meters", "[", "k", ".", "format", "(", "split", ")", "]", "=", "meter", "(", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "inputs", ",", "targets", "in", "tqdm", "(", "loader", ",", "desc", "=", "split", ",", "ncols", "=", "0", ")", ":", "\n", "                ", "if", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "                    ", "for", "k", ",", "v", "in", "inputs", ".", "items", "(", ")", ":", "\n", "                        ", "inputs", "[", "k", "]", "=", "v", ".", "to", "(", "configs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "", "else", ":", "\n", "                    ", "inputs", "=", "inputs", ".", "to", "(", "configs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "if", "isinstance", "(", "targets", ",", "dict", ")", ":", "\n", "                    ", "for", "k", ",", "v", "in", "targets", ".", "items", "(", ")", ":", "\n", "                        ", "targets", "[", "k", "]", "=", "v", ".", "to", "(", "configs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "", "else", ":", "\n", "                    ", "targets", "=", "targets", ".", "to", "(", "configs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "", "outputs", "=", "model", "(", "inputs", ")", "\n", "for", "meter", "in", "meters", ".", "values", "(", ")", ":", "\n", "                    ", "meter", ".", "update", "(", "outputs", ",", "targets", ")", "\n", "", "", "", "for", "k", ",", "meter", "in", "meters", ".", "items", "(", ")", ":", "\n", "            ", "meters", "[", "k", "]", "=", "meter", ".", "compute", "(", ")", "\n", "", "return", "meters", "\n", "\n", "###########", "\n", "# Prepare #", "\n", "###########", "\n", "\n", "", "if", "configs", ".", "device", "==", "'cuda'", ":", "\n", "        ", "cudnn", ".", "benchmark", "=", "True", "\n", "if", "configs", ".", "get", "(", "'deterministic'", ",", "False", ")", ":", "\n", "            ", "cudnn", ".", "deterministic", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "", "", "if", "(", "'seed'", "not", "in", "configs", ")", "or", "(", "configs", ".", "seed", "is", "None", ")", ":", "\n", "        ", "configs", ".", "seed", "=", "torch", ".", "initial_seed", "(", ")", "%", "(", "2", "**", "32", "-", "1", ")", "\n", "", "seed", "=", "configs", ".", "seed", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "print", "(", "configs", ")", "\n", "\n", "#####################################################################", "\n", "# Initialize DataLoaders, Model, Criterion, LRScheduler & Optimizer #", "\n", "#####################################################################", "\n", "\n", "print", "(", "f'\\n==> loading dataset \"{configs.dataset}\"'", ")", "\n", "dataset", "=", "configs", ".", "dataset", "(", ")", "\n", "loaders", "=", "{", "}", "\n", "for", "split", "in", "dataset", ":", "\n", "        ", "loaders", "[", "split", "]", "=", "DataLoader", "(", "\n", "dataset", "[", "split", "]", ",", "shuffle", "=", "(", "split", "==", "'train'", ")", ",", "batch_size", "=", "configs", ".", "train", ".", "batch_size", ",", "\n", "num_workers", "=", "configs", ".", "data", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "\n", "worker_init_fn", "=", "lambda", "worker_id", ":", "np", ".", "random", ".", "seed", "(", "seed", "+", "worker_id", ")", "\n", ")", "\n", "\n", "", "print", "(", "f'\\n==> creating model \"{configs.model}\"'", ")", "\n", "model", "=", "configs", ".", "model", "(", ")", "\n", "if", "configs", ".", "device", "==", "'cuda'", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", "=", "model", ".", "to", "(", "configs", ".", "device", ")", "\n", "criterion", "=", "configs", ".", "train", ".", "criterion", "(", ")", ".", "to", "(", "configs", ".", "device", ")", "\n", "optimizer", "=", "configs", ".", "train", ".", "optimizer", "(", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "last_epoch", ",", "best_metrics", "=", "-", "1", ",", "{", "m", ":", "None", "for", "m", "in", "configs", ".", "train", ".", "metrics", "}", "\n", "if", "os", ".", "path", ".", "exists", "(", "configs", ".", "train", ".", "checkpoint_path", ")", ":", "\n", "        ", "print", "(", "f'==> loading checkpoint \"{configs.train.checkpoint_path}\"'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "configs", ".", "train", ".", "checkpoint_path", ")", "\n", "print", "(", "' => loading model'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "'model'", ")", ")", "\n", "if", "'optimizer'", "in", "checkpoint", "and", "checkpoint", "[", "'optimizer'", "]", "is", "not", "None", ":", "\n", "            ", "print", "(", "' => loading optimizer'", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "'optimizer'", ")", ")", "\n", "", "last_epoch", "=", "checkpoint", ".", "get", "(", "'epoch'", ",", "last_epoch", ")", "\n", "meters", "=", "checkpoint", ".", "get", "(", "'meters'", ",", "{", "}", ")", "\n", "for", "m", "in", "configs", ".", "train", ".", "metrics", ":", "\n", "            ", "best_metrics", "[", "m", "]", "=", "meters", ".", "get", "(", "m", "+", "'_best'", ",", "best_metrics", "[", "m", "]", ")", "\n", "", "del", "checkpoint", "\n", "\n", "", "if", "'scheduler'", "in", "configs", ".", "train", "and", "configs", ".", "train", ".", "scheduler", "is", "not", "None", ":", "\n", "        ", "configs", ".", "train", ".", "scheduler", ".", "last_epoch", "=", "last_epoch", "\n", "print", "(", "f'==> creating scheduler \"{configs.train.scheduler}\"'", ")", "\n", "scheduler", "=", "configs", ".", "train", ".", "scheduler", "(", "optimizer", ")", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "None", "\n", "\n", "############", "\n", "# Training #", "\n", "############", "\n", "\n", "", "if", "last_epoch", ">=", "configs", ".", "train", ".", "num_epochs", ":", "\n", "        ", "meters", "=", "dict", "(", ")", "\n", "for", "split", ",", "loader", "in", "loaders", ".", "items", "(", ")", ":", "\n", "            ", "if", "split", "!=", "'train'", ":", "\n", "                ", "meters", ".", "update", "(", "evaluate", "(", "model", ",", "loader", "=", "loader", ",", "split", "=", "split", ")", ")", "\n", "", "", "for", "k", ",", "meter", "in", "meters", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f'[{k}] = {meter:2f}'", ")", "\n", "", "return", "\n", "\n", "", "with", "tensorboardX", ".", "SummaryWriter", "(", "configs", ".", "train", ".", "save_path", ")", "as", "writer", ":", "\n", "        ", "for", "current_epoch", "in", "range", "(", "last_epoch", "+", "1", ",", "configs", ".", "train", ".", "num_epochs", ")", ":", "\n", "            ", "current_step", "=", "current_epoch", "*", "len", "(", "dataset", "[", "'train'", "]", ")", "\n", "\n", "# train", "\n", "print", "(", "f'\\n==> training epoch {current_epoch}/{configs.train.num_epochs}'", ")", "\n", "train", "(", "model", ",", "loader", "=", "loaders", "[", "'train'", "]", ",", "criterion", "=", "criterion", ",", "optimizer", "=", "optimizer", ",", "scheduler", "=", "scheduler", ",", "\n", "current_step", "=", "current_step", ",", "writer", "=", "writer", ")", "\n", "current_step", "+=", "len", "(", "dataset", "[", "'train'", "]", ")", "\n", "\n", "# evaluate", "\n", "meters", "=", "dict", "(", ")", "\n", "for", "split", ",", "loader", "in", "loaders", ".", "items", "(", ")", ":", "\n", "                ", "if", "split", "!=", "'train'", ":", "\n", "                    ", "meters", ".", "update", "(", "evaluate", "(", "model", ",", "loader", "=", "loader", ",", "split", "=", "split", ")", ")", "\n", "\n", "# check whether it is the best", "\n", "", "", "best", "=", "{", "m", ":", "False", "for", "m", "in", "configs", ".", "train", ".", "metrics", "}", "\n", "for", "m", "in", "configs", ".", "train", ".", "metrics", ":", "\n", "                ", "if", "best_metrics", "[", "m", "]", "is", "None", "or", "best_metrics", "[", "m", "]", "<", "meters", "[", "m", "]", ":", "\n", "                    ", "best_metrics", "[", "m", "]", ",", "best", "[", "m", "]", "=", "meters", "[", "m", "]", ",", "True", "\n", "", "meters", "[", "m", "+", "'_best'", "]", "=", "best_metrics", "[", "m", "]", "\n", "# log in tensorboard", "\n", "", "for", "k", ",", "meter", "in", "meters", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "f'[{k}] = {meter:2f}'", ")", "\n", "writer", ".", "add_scalar", "(", "k", ",", "meter", ",", "current_step", ")", "\n", "\n", "# save checkpoint", "\n", "", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "current_epoch", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'meters'", ":", "meters", ",", "\n", "'configs'", ":", "configs", ",", "\n", "}", ",", "configs", ".", "train", ".", "checkpoint_path", ")", "\n", "shutil", ".", "copyfile", "(", "configs", ".", "train", ".", "checkpoint_path", ",", "configs", ".", "train", ".", "checkpoints_path", ".", "format", "(", "current_epoch", ")", ")", "\n", "for", "m", "in", "configs", ".", "train", ".", "metrics", ":", "\n", "                ", "if", "best", "[", "m", "]", ":", "\n", "                    ", "shutil", ".", "copyfile", "(", "configs", ".", "train", ".", "checkpoint_path", ",", "configs", ".", "train", ".", "best_checkpoint_paths", "[", "m", "]", ")", "\n", "", "", "if", "best", ".", "get", "(", "configs", ".", "train", ".", "metric", ",", "False", ")", ":", "\n", "                ", "shutil", ".", "copyfile", "(", "configs", ".", "train", ".", "checkpoint_path", ",", "configs", ".", "train", ".", "best_checkpoint_path", ")", "\n", "", "print", "(", "f'[save_path] = {configs.train.save_path}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.None.train_dml.prepare": [[7, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "print", "configs.update_from_modules", "get_save_path", "configs.update_from_arguments", "set_cuda_visible_devices", "len", "configs.train.get", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "configs.evaluate.best_checkpoint_path.endswith", "configs.evaluate.best_checkpoint_path.replace", "configs.evaluate.best_checkpoint_path.replace", "configs.evaluate.dataset.items", "metrics.append", "os.path.join", "os.path.dirname", "os.path.join", "os.path.join", "os.makedirs", "len", "os.path.join", "os.path.join", "metrics.append", "m.replace", "m.replace"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.update_from_modules", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.get_save_path", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.update_from_arguments", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.device.set_cuda_visible_devices"], ["def", "prepare", "(", ")", ":", "\n", "    ", "from", "utils", ".", "common", "import", "get_save_path", "\n", "from", "utils", ".", "config", "import", "configs", "\n", "from", "utils", ".", "device", "import", "set_cuda_visible_devices", "\n", "\n", "# since PyTorch jams device selection, we have to parse args before import torch (issue #26790)", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'configs'", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--devices'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ")", "\n", "args", ",", "opts", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "if", "args", ".", "devices", "is", "not", "None", "and", "args", ".", "devices", "!=", "'cpu'", ":", "\n", "        ", "gpus", "=", "set_cuda_visible_devices", "(", "args", ".", "devices", ")", "\n", "", "else", ":", "\n", "        ", "gpus", "=", "[", "]", "\n", "\n", "", "print", "(", "f'==> loading configs from {args.configs}'", ")", "\n", "configs", ".", "update_from_modules", "(", "*", "args", ".", "configs", ")", "\n", "# define save path", "\n", "configs", ".", "train", ".", "save_path", "=", "get_save_path", "(", "*", "args", ".", "configs", ",", "prefix", "=", "'runs'", ")", "\n", "\n", "# override configs with args", "\n", "configs", ".", "update_from_arguments", "(", "*", "opts", ")", "\n", "if", "len", "(", "gpus", ")", "==", "0", ":", "\n", "        ", "configs", ".", "device", "=", "'cpu'", "\n", "configs", ".", "device_ids", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "configs", ".", "device", "=", "'cuda'", "\n", "configs", ".", "device_ids", "=", "gpus", "\n", "", "if", "args", ".", "evaluate", "and", "configs", ".", "evaluate", ".", "fn", "is", "not", "None", ":", "\n", "        ", "if", "'dataset'", "in", "configs", ".", "evaluate", ":", "\n", "            ", "for", "k", ",", "v", "in", "configs", ".", "evaluate", ".", "dataset", ".", "items", "(", ")", ":", "\n", "                ", "configs", ".", "dataset", "[", "k", "]", "=", "v", "\n", "", "", "", "else", ":", "\n", "        ", "configs", ".", "evaluate", "=", "None", "\n", "\n", "", "if", "configs", ".", "evaluate", "is", "None", ":", "\n", "        ", "configs", ".", "train", ".", "deep_mutual_learning", "=", "configs", ".", "train", ".", "get", "(", "'deep_mutual_learning'", ",", "True", ")", "\n", "metrics", "=", "[", "]", "\n", "if", "'metric'", "in", "configs", ".", "train", "and", "configs", ".", "train", ".", "metric", "is", "not", "None", ":", "\n", "            ", "metrics", ".", "append", "(", "configs", ".", "train", ".", "metric", ")", "\n", "", "if", "'metrics'", "in", "configs", ".", "train", "and", "configs", ".", "train", ".", "metrics", "is", "not", "None", ":", "\n", "            ", "for", "m", "in", "configs", ".", "train", ".", "metrics", ":", "\n", "                ", "if", "m", "not", "in", "metrics", ":", "\n", "                    ", "metrics", ".", "append", "(", "m", ")", "\n", "", "", "", "configs", ".", "train", ".", "metrics", "=", "metrics", "\n", "configs", ".", "train", ".", "metric", "=", "None", "if", "len", "(", "metrics", ")", "==", "0", "else", "metrics", "[", "0", "]", "\n", "\n", "save_path", "=", "configs", ".", "train", ".", "save_path", "\n", "configs", ".", "train", ".", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'latest.pth.tar'", ")", "\n", "configs", ".", "train", ".", "checkpoints_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'latest'", ",", "'e{}.pth.tar'", ")", "\n", "configs", ".", "train", ".", "best_checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best.pth.tar'", ")", "\n", "best_checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best'", ")", "\n", "configs", ".", "train", ".", "best_checkpoint_paths", "=", "{", "\n", "m", ":", "os", ".", "path", ".", "join", "(", "best_checkpoints_dir", ",", "'best.{}.pth.tar'", ".", "format", "(", "m", ".", "replace", "(", "'/'", ",", "'.'", ")", ")", ")", "\n", "for", "m", "in", "configs", ".", "train", ".", "metrics", "\n", "}", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "configs", ".", "train", ".", "checkpoints_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "best_checkpoints_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "configs", ".", "train", ".", "deep_mutual_learning", ":", "\n", "            ", "configs", ".", "train", ".", "best_student_checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best_student.pth.tar'", ")", "\n", "best_student_checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best_student'", ")", "\n", "configs", ".", "train", ".", "best_student_checkpoint_paths", "=", "{", "\n", "m", ":", "os", ".", "path", ".", "join", "(", "best_student_checkpoints_dir", ",", "'best.{}.pth.tar'", ".", "format", "(", "m", ".", "replace", "(", "'/'", ",", "'.'", ")", ")", ")", "\n", "for", "m", "in", "configs", ".", "train", ".", "metrics", "\n", "}", "\n", "os", ".", "makedirs", "(", "best_student_checkpoints_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "'best_checkpoint_path'", "not", "in", "configs", ".", "evaluate", "or", "configs", ".", "evaluate", ".", "best_checkpoint_path", "is", "None", ":", "\n", "            ", "if", "'best_checkpoint_path'", "in", "configs", ".", "train", "and", "configs", ".", "train", ".", "best_checkpoint_path", "is", "not", "None", ":", "\n", "                ", "configs", ".", "evaluate", ".", "best_checkpoint_path", "=", "configs", ".", "train", ".", "best_checkpoint_path", "\n", "", "else", ":", "\n", "                ", "configs", ".", "evaluate", ".", "best_checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "train", ".", "save_path", ",", "'best.pth.tar'", ")", "\n", "", "", "assert", "configs", ".", "evaluate", ".", "best_checkpoint_path", ".", "endswith", "(", "'.pth.tar'", ")", "\n", "configs", ".", "evaluate", ".", "predictions_path", "=", "configs", ".", "evaluate", ".", "best_checkpoint_path", ".", "replace", "(", "'.pth.tar'", ",", "'.predictions'", ")", "\n", "configs", ".", "evaluate", ".", "stats_path", "=", "configs", ".", "evaluate", ".", "best_checkpoint_path", ".", "replace", "(", "'.pth.tar'", ",", "'.eval.npy'", ")", "\n", "\n", "", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.None.train_dml.main": [[87, 330], ["train_dml.prepare", "random.seed", "np.random.seed", "torch.manual_seed", "print", "print", "prepare.dataset", "print", "prepare.model", "torch.nn.DataParallel.to", "prepare.train.criterion().to", "prepare.train.optimizer", "os.path.exists", "prepare.evaluate.fn", "torch.nn.DataParallel.train", "tqdm", "prepare.train.meters.items", "torch.nn.DataParallel.eval", "checkpoint.get.items", "prepare.get", "DataLoader", "torch.nn.DataParallel", "torch.nn.DataParallel.parameters", "prepare.model", "torch.nn.DataParallel.to", "prepare.train.optimizer", "KLLoss", "print", "torch.load", "print", "torch.nn.DataParallel.load_state_dict", "torch.load.get", "torch.load.get", "prepare.train.get", "print", "prepare.train.scheduler", "loaders.items", "checkpoint.get.items", "checkpoint.get.items", "tensorboardX.SummaryWriter", "range", "torch.nn.DataParallel.train", "inputs.to.to", "targets.to.to", "configs.train.scheduler.step", "meter", "torch.no_grad", "tqdm", "meter.compute", "torch.initial_seed", "prepare.train.criterion", "torch.nn.DataParallel", "torch.nn.DataParallel.parameters", "torch.load.pop", "print", "configs.train.optimizer.load_state_dict", "checkpoint.get.get", "torch.load.get", "print", "dict", "dict", "print", "print", "print", "train_dml.main.train"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.eval.prepare", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum.MeterFrustumKitti.compute"], ["", "def", "main", "(", ")", ":", "\n", "    ", "configs", "=", "prepare", "(", ")", "\n", "if", "configs", ".", "evaluate", "is", "not", "None", ":", "\n", "        ", "configs", ".", "evaluate", ".", "fn", "(", "configs", ")", "\n", "return", "\n", "\n", "", "import", "numpy", "as", "np", "\n", "import", "tensorboardX", "\n", "import", "torch", "\n", "import", "torch", ".", "backends", ".", "cudnn", "as", "cudnn", "\n", "from", "torch", ".", "utils", ".", "data", "import", "DataLoader", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "from", "modules", "import", "KLLoss", "\n", "\n", "################################", "\n", "# Train / Eval Kernel Function #", "\n", "################################", "\n", "\n", "# train kernel", "\n", "def", "train", "(", "model", ",", "loader", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "current_step", ",", "writer", ",", "schedule_per_epoch", "=", "True", ",", "\n", "model_student", "=", "None", ",", "criterion_dml", "=", "None", ",", "optimizer_student", "=", "None", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "if", "model_student", "is", "not", "None", ":", "\n", "            ", "model_student", ".", "train", "(", ")", "\n", "", "for", "inputs", ",", "targets", "in", "tqdm", "(", "loader", ",", "desc", "=", "'train'", ",", "ncols", "=", "0", ")", ":", "\n", "            ", "inputs", "=", "inputs", ".", "to", "(", "configs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "targets", "=", "targets", ".", "to", "(", "configs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "if", "model_student", "is", "None", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/train'", ",", "loss", ".", "item", "(", ")", ",", "current_step", ")", "\n", "current_step", "+=", "targets", ".", "size", "(", "0", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "# deep mutual learning", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "outputs_student", "=", "model_student", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "+", "criterion_dml", "(", "outputs_student", ",", "outputs", ")", "\n", "loss_student", "=", "criterion", "(", "outputs_student", ",", "targets", ")", "+", "criterion_dml", "(", "outputs", ",", "outputs_student", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/train'", ",", "loss", ".", "item", "(", ")", ",", "current_step", ")", "\n", "writer", ".", "add_scalar", "(", "'loss/train_student'", ",", "loss_student", ".", "item", "(", ")", ",", "current_step", ")", "\n", "current_step", "+=", "targets", ".", "size", "(", "0", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "loss_student", ".", "backward", "(", ")", "\n", "optimizer_student", ".", "step", "(", ")", "\n", "", "if", "not", "schedule_per_epoch", "and", "scheduler", "is", "not", "None", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "", "", "if", "schedule_per_epoch", "and", "scheduler", "is", "not", "None", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "# evaluate kernel", "\n", "", "", "def", "evaluate", "(", "model", ",", "loader", ",", "split", "=", "'test'", ")", ":", "\n", "        ", "meters", "=", "{", "}", "\n", "for", "k", ",", "meter", "in", "configs", ".", "train", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "meters", "[", "k", ".", "format", "(", "split", ")", "]", "=", "meter", "(", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "inputs", ",", "targets", "in", "tqdm", "(", "loader", ",", "desc", "=", "split", ",", "ncols", "=", "0", ")", ":", "\n", "                ", "inputs", "=", "inputs", ".", "to", "(", "configs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "targets", "=", "targets", ".", "to", "(", "configs", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "for", "meter", "in", "meters", ".", "values", "(", ")", ":", "\n", "                    ", "meter", ".", "update", "(", "outputs", ",", "targets", ")", "\n", "", "", "", "for", "k", ",", "meter", "in", "meters", ".", "items", "(", ")", ":", "\n", "            ", "meters", "[", "k", "]", "=", "meter", ".", "compute", "(", ")", "\n", "", "return", "meters", "\n", "\n", "###########", "\n", "# Prepare #", "\n", "###########", "\n", "\n", "", "if", "configs", ".", "device", "==", "'cuda'", ":", "\n", "        ", "cudnn", ".", "benchmark", "=", "True", "\n", "if", "configs", ".", "get", "(", "'deterministic'", ",", "False", ")", ":", "\n", "            ", "cudnn", ".", "deterministic", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "", "", "if", "(", "'seed'", "not", "in", "configs", ")", "or", "(", "configs", ".", "seed", "is", "None", ")", ":", "\n", "        ", "configs", ".", "seed", "=", "torch", ".", "initial_seed", "(", ")", "%", "(", "2", "**", "32", "-", "1", ")", "\n", "", "seed", "=", "configs", ".", "seed", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "print", "(", "configs", ")", "\n", "\n", "#####################################################################", "\n", "# Initialize DataLoaders, Model, Criterion, LRScheduler & Optimizer #", "\n", "#####################################################################", "\n", "\n", "print", "(", "f'\\n==> loading dataset \"{configs.dataset}\"'", ")", "\n", "dataset", "=", "configs", ".", "dataset", "(", ")", "\n", "loaders", "=", "{", "}", "\n", "for", "split", "in", "dataset", ":", "\n", "        ", "loaders", "[", "split", "]", "=", "DataLoader", "(", "\n", "dataset", "[", "split", "]", ",", "shuffle", "=", "(", "split", "==", "'train'", ")", ",", "batch_size", "=", "configs", ".", "train", ".", "batch_size", ",", "\n", "num_workers", "=", "configs", ".", "data", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "\n", "worker_init_fn", "=", "lambda", "worker_id", ":", "np", ".", "random", ".", "seed", "(", "seed", "+", "worker_id", ")", "\n", ")", "\n", "\n", "", "print", "(", "f'\\n==> creating model \"{configs.model}\"'", ")", "\n", "model", "=", "configs", ".", "model", "(", ")", "\n", "if", "configs", ".", "device", "==", "'cuda'", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", "=", "model", ".", "to", "(", "configs", ".", "device", ")", "\n", "criterion", "=", "configs", ".", "train", ".", "criterion", "(", ")", ".", "to", "(", "configs", ".", "device", ")", "\n", "optimizer", "=", "configs", ".", "train", ".", "optimizer", "(", "model", ".", "parameters", "(", ")", ")", "\n", "if", "configs", ".", "train", ".", "deep_mutual_learning", ":", "\n", "        ", "model_student", "=", "configs", ".", "model", "(", ")", "\n", "if", "configs", ".", "device", "==", "'cuda'", ":", "\n", "            ", "model_student", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model_student", ")", "\n", "", "model_student", "=", "model_student", ".", "to", "(", "configs", ".", "device", ")", "\n", "optimizer_student", "=", "configs", ".", "train", ".", "optimizer", "(", "model_student", ".", "parameters", "(", ")", ")", "\n", "criterion_dml", "=", "KLLoss", "(", ")", "\n", "", "else", ":", "\n", "        ", "model_student", ",", "optimizer_student", ",", "criterion_dml", "=", "None", ",", "None", ",", "None", "\n", "\n", "", "last_epoch", "=", "-", "1", "\n", "best_metrics", "=", "{", "m", ":", "None", "for", "m", "in", "configs", ".", "train", ".", "metrics", "}", "\n", "best_metrics_student", "=", "{", "m", ":", "None", "for", "m", "in", "configs", ".", "train", ".", "metrics", "}", "\n", "if", "os", ".", "path", ".", "exists", "(", "configs", ".", "train", ".", "checkpoint_path", ")", ":", "\n", "        ", "print", "(", "f'==> loading checkpoint \"{configs.train.checkpoint_path}\"'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "configs", ".", "train", ".", "checkpoint_path", ")", "\n", "print", "(", "' => loading model'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "'model'", ")", ")", "\n", "if", "'optimizer'", "in", "checkpoint", "and", "checkpoint", "[", "'optimizer'", "]", "is", "not", "None", ":", "\n", "            ", "print", "(", "' => loading optimizer'", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "'optimizer'", ")", ")", "\n", "", "last_epoch", "=", "checkpoint", ".", "get", "(", "'epoch'", ",", "last_epoch", ")", "\n", "meters", "=", "checkpoint", ".", "get", "(", "'meters'", ",", "{", "}", ")", "\n", "for", "m", "in", "configs", ".", "train", ".", "metrics", ":", "\n", "            ", "best_metrics", "[", "m", "]", "=", "meters", ".", "get", "(", "m", "+", "'_best'", ",", "best_metrics", "[", "m", "]", ")", "\n", "\n", "", "if", "configs", ".", "train", ".", "deep_mutual_learning", ":", "\n", "            ", "if", "'model_student'", "in", "checkpoint", "and", "checkpoint", "[", "'model_student'", "]", "is", "not", "None", ":", "\n", "                ", "print", "(", "' => loading model_student'", ")", "\n", "model_student", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "'model_student'", ")", ")", "\n", "", "if", "'optimizer_student'", "in", "checkpoint", "and", "checkpoint", "[", "'optimizer_student'", "]", "is", "not", "None", ":", "\n", "                ", "print", "(", "' => loading optimizer_student'", ")", "\n", "optimizer_student", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "'optimizer_student'", ")", ")", "\n", "", "meters_student", "=", "checkpoint", ".", "get", "(", "'meters_student'", ",", "{", "}", ")", "\n", "for", "m", "in", "configs", ".", "train", ".", "metrics", ":", "\n", "                ", "best_metrics_student", "[", "m", "]", "=", "meters_student", ".", "get", "(", "m", "+", "'_best'", ",", "best_metrics_student", "[", "m", "]", ")", "\n", "\n", "", "", "", "if", "'scheduler'", "in", "configs", ".", "train", "and", "configs", ".", "train", ".", "scheduler", "is", "not", "None", ":", "\n", "        ", "scheduler_unit", "=", "configs", ".", "train", ".", "get", "(", "'scheduler_unit'", ",", "'epoch'", ")", "\n", "schedule_per_epoch", "=", "(", "scheduler_unit", "is", "None", ")", "or", "(", "scheduler_unit", "==", "'epoch'", ")", "\n", "configs", ".", "train", ".", "scheduler_unit", "=", "'epoch'", "if", "schedule_per_epoch", "else", "'iter'", "\n", "last_unit", "=", "last_epoch", "\n", "if", "not", "schedule_per_epoch", ":", "\n", "            ", "last_unit", "=", "(", "last_epoch", "+", "1", ")", "*", "len", "(", "loaders", "[", "'train'", "]", ")", "-", "1", "\n", "", "if", "'T_max'", "in", "configs", ".", "train", ".", "scheduler", ":", "\n", "            ", "configs", ".", "train", ".", "scheduler", ".", "T_max", "=", "configs", ".", "train", ".", "num_epochs", "\n", "if", "not", "schedule_per_epoch", ":", "\n", "                ", "configs", ".", "train", ".", "scheduler", ".", "T_max", "*=", "len", "(", "loaders", "[", "'train'", "]", ")", "\n", "", "print", "(", "f'==> modify scheduler T_max to {configs.train.scheduler.T_max} {configs.train.scheduler_unit}s'", ")", "\n", "", "print", "(", "f'==> creating scheduler \"{configs.train.scheduler}\" from {last_unit} {configs.train.scheduler_unit}'", ")", "\n", "scheduler", "=", "configs", ".", "train", ".", "scheduler", "(", "optimizer", ",", "last_epoch", "=", "last_unit", ")", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "None", "\n", "schedule_per_epoch", "=", "True", "\n", "\n", "############", "\n", "# Training #", "\n", "############", "\n", "\n", "", "if", "last_epoch", ">=", "configs", ".", "train", ".", "num_epochs", ":", "\n", "        ", "meters", ",", "meters_student", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "split", ",", "loader", "in", "loaders", ".", "items", "(", ")", ":", "\n", "            ", "if", "split", "!=", "'train'", ":", "\n", "                ", "meters", ".", "update", "(", "evaluate", "(", "model", ",", "loader", "=", "loader", ",", "split", "=", "split", ")", ")", "\n", "if", "configs", ".", "train", ".", "deep_mutual_learning", ":", "\n", "                    ", "meters_student", ".", "update", "(", "evaluate", "(", "model_student", ",", "loader", "=", "loader", ",", "split", "=", "split", ")", ")", "\n", "", "", "", "for", "k", ",", "meter", "in", "meters", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f'[{k}] = {meter:2f}'", ")", "\n", "", "for", "k", ",", "meter", "in", "meters_student", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "f'[{k}_student] = {meter:2f}'", ")", "\n", "", "return", "\n", "\n", "", "with", "tensorboardX", ".", "SummaryWriter", "(", "configs", ".", "train", ".", "save_path", ")", "as", "writer", ":", "\n", "        ", "for", "current_epoch", "in", "range", "(", "last_epoch", "+", "1", ",", "configs", ".", "train", ".", "num_epochs", ")", ":", "\n", "            ", "current_step", "=", "current_epoch", "*", "len", "(", "dataset", "[", "'train'", "]", ")", "\n", "\n", "# train", "\n", "print", "(", "f'\\n==> training epoch {current_epoch}/{configs.train.num_epochs}'", ")", "\n", "train", "(", "model", ",", "loader", "=", "loaders", "[", "'train'", "]", ",", "criterion", "=", "criterion", ",", "optimizer", "=", "optimizer", ",", "scheduler", "=", "scheduler", ",", "\n", "current_step", "=", "current_step", ",", "writer", "=", "writer", ",", "schedule_per_epoch", "=", "schedule_per_epoch", ",", "\n", "model_student", "=", "model_student", ",", "criterion_dml", "=", "criterion_dml", ",", "optimizer_student", "=", "optimizer_student", ")", "\n", "current_step", "+=", "len", "(", "dataset", "[", "'train'", "]", ")", "\n", "\n", "# evaluate", "\n", "meters", ",", "meters_student", "=", "dict", "(", ")", ",", "dict", "(", ")", "\n", "for", "split", ",", "loader", "in", "loaders", ".", "items", "(", ")", ":", "\n", "                ", "if", "split", "!=", "'train'", ":", "\n", "                    ", "meters", ".", "update", "(", "evaluate", "(", "model", ",", "loader", "=", "loader", ",", "split", "=", "split", ")", ")", "\n", "if", "configs", ".", "train", ".", "deep_mutual_learning", ":", "\n", "                        ", "meters_student", ".", "update", "(", "evaluate", "(", "model_student", ",", "loader", "=", "loader", ",", "split", "=", "split", ")", ")", "\n", "\n", "# check whether it is the best", "\n", "", "", "", "best", ",", "best_student", "=", "{", "m", ":", "False", "for", "m", "in", "configs", ".", "train", ".", "metrics", "}", ",", "{", "m", ":", "False", "for", "m", "in", "configs", ".", "train", ".", "metrics", "}", "\n", "for", "m", "in", "configs", ".", "train", ".", "metrics", ":", "\n", "                ", "if", "best_metrics", "[", "m", "]", "is", "None", "or", "best_metrics", "[", "m", "]", "<", "meters", "[", "m", "]", ":", "\n", "                    ", "best_metrics", "[", "m", "]", ",", "best", "[", "m", "]", "=", "meters", "[", "m", "]", ",", "True", "\n", "", "meters", "[", "m", "+", "'_best'", "]", "=", "best_metrics", "[", "m", "]", "\n", "if", "configs", ".", "train", ".", "deep_mutual_learning", ":", "\n", "                    ", "if", "best_metrics_student", "[", "m", "]", "is", "None", "or", "best_metrics_student", "[", "m", "]", "<", "meters_student", "[", "m", "]", ":", "\n", "                        ", "best_metrics_student", "[", "m", "]", ",", "best_student", "[", "m", "]", "=", "meters_student", "[", "m", "]", ",", "True", "\n", "", "meters_student", "[", "m", "+", "'_best'", "]", "=", "best_metrics_student", "[", "m", "]", "\n", "# log in tensorboard", "\n", "", "", "for", "k", ",", "meter", "in", "meters", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "f'[{k}] = {meter:2f}'", ")", "\n", "writer", ".", "add_scalar", "(", "k", ",", "meter", ",", "current_step", ")", "\n", "", "for", "k", ",", "meter", "in", "meters_student", ".", "items", "(", ")", ":", "\n", "                ", "print", "(", "f'[{k}_student] = {meter:2f}'", ")", "\n", "writer", ".", "add_scalar", "(", "k", "+", "'_student'", ",", "meter", ",", "current_step", ")", "\n", "\n", "# save checkpoint", "\n", "", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "current_epoch", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'model_student'", ":", "model_student", ".", "state_dict", "(", ")", "if", "configs", ".", "train", ".", "deep_mutual_learning", "else", "None", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_student'", ":", "optimizer", ".", "state_dict", "(", ")", "if", "configs", ".", "train", ".", "deep_mutual_learning", "else", "None", ",", "\n", "'meters'", ":", "meters", ",", "\n", "'meters_student'", ":", "meters_student", ",", "\n", "'configs'", ":", "configs", ",", "\n", "}", ",", "configs", ".", "train", ".", "checkpoint_path", ")", "\n", "shutil", ".", "copyfile", "(", "configs", ".", "train", ".", "checkpoint_path", ",", "configs", ".", "train", ".", "checkpoints_path", ".", "format", "(", "current_epoch", ")", ")", "\n", "for", "m", "in", "configs", ".", "train", ".", "metrics", ":", "\n", "                ", "if", "best", "[", "m", "]", ":", "\n", "                    ", "shutil", ".", "copyfile", "(", "configs", ".", "train", ".", "checkpoint_path", ",", "configs", ".", "train", ".", "best_checkpoint_paths", "[", "m", "]", ")", "\n", "", "if", "best_student", "[", "m", "]", ":", "\n", "                    ", "shutil", ".", "copyfile", "(", "configs", ".", "train", ".", "checkpoint_path", ",", "configs", ".", "train", ".", "best_student_checkpoint_paths", "[", "m", "]", ")", "\n", "", "", "if", "best", ".", "get", "(", "configs", ".", "train", ".", "metric", ",", "False", ")", ":", "\n", "                ", "shutil", ".", "copyfile", "(", "configs", ".", "train", ".", "checkpoint_path", ",", "configs", ".", "train", ".", "best_checkpoint_path", ")", "\n", "", "if", "best_student", ".", "get", "(", "configs", ".", "train", ".", "metric", ",", "False", ")", ":", "\n", "                ", "shutil", ".", "copyfile", "(", "configs", ".", "train", ".", "checkpoint_path", ",", "configs", ".", "train", ".", "best_student_checkpoint_path", ")", "\n", "", "print", "(", "f'[save_path] = {configs.train.save_path}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.__init__": [[13, 26], ["utils.container.G.__init__", "TypeError", "TypeError", "TypeError", "callable", "isinstance", "isinstance", "repr", "repr", "repr"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "func", "=", "None", ",", "args", "=", "None", ",", "keys", "=", "None", ",", "detach", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "func", "is", "not", "None", "and", "not", "callable", "(", "func", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'func \"{}\" is not a callable function or class'", ".", "format", "(", "repr", "(", "func", ")", ")", ")", "\n", "", "if", "args", "is", "not", "None", "and", "not", "isinstance", "(", "args", ",", "(", "collections", ".", "Sequence", ",", "collections", ".", "UserList", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'args \"{}\" is not an iterable tuple or list'", ".", "format", "(", "repr", "(", "args", ")", ")", ")", "\n", "", "if", "keys", "is", "not", "None", "and", "not", "isinstance", "(", "keys", ",", "(", "collections", ".", "Sequence", ",", "collections", ".", "UserList", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'keys \"{}\" is not an iterable tuple or list'", ".", "format", "(", "repr", "(", "keys", ")", ")", ")", "\n", "", "self", ".", "__dict__", "[", "'_func_'", "]", "=", "func", "\n", "self", ".", "__dict__", "[", "'_args_'", "]", "=", "args", "\n", "self", ".", "__dict__", "[", "'_detach_'", "]", "=", "detach", "\n", "self", ".", "__dict__", "[", "'_keys_'", "]", "=", "keys", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.__call__": [[27, 64], ["config.Config.items", "collections.deque", "config.Config._func_", "list", "collections.deque.popleft", "list", "kwargs.setdefault", "isinstance", "enumerate", "isinstance", "isinstance", "collections.deque.append", "isinstance", "collections.deque.popleft.items", "list", "isinstance", "v."], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "_func_", "is", "None", ":", "\n", "            ", "return", "self", "\n", "\n", "# override args", "\n", "", "if", "args", ":", "\n", "            ", "args", "=", "list", "(", "args", ")", "\n", "", "elif", "self", ".", "_args_", ":", "\n", "            ", "args", "=", "list", "(", "self", ".", "_args_", ")", "\n", "\n", "# override kwargs", "\n", "", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "_keys_", "is", "None", "or", "k", "in", "self", ".", "_keys_", ":", "\n", "                ", "kwargs", ".", "setdefault", "(", "k", ",", "v", ")", "\n", "\n", "# recursively call non-detached funcs", "\n", "", "", "queue", "=", "collections", ".", "deque", "(", "[", "args", ",", "kwargs", "]", ")", "\n", "while", "queue", ":", "\n", "            ", "x", "=", "queue", ".", "popleft", "(", ")", "\n", "\n", "if", "isinstance", "(", "x", ",", "(", "collections", ".", "Sequence", ",", "collections", ".", "UserList", ")", ")", "and", "not", "isinstance", "(", "x", ",", "six", ".", "string_types", ")", ":", "\n", "                ", "items", "=", "enumerate", "(", "x", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "(", "collections", ".", "Mapping", ",", "collections", ".", "UserDict", ")", ")", ":", "\n", "                ", "items", "=", "x", ".", "items", "(", ")", "\n", "", "else", ":", "\n", "                ", "items", "=", "[", "]", "\n", "\n", "", "for", "k", ",", "v", "in", "items", ":", "\n", "                ", "if", "isinstance", "(", "v", ",", "tuple", ")", ":", "\n", "                    ", "v", "=", "x", "[", "k", "]", "=", "list", "(", "v", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "Config", ")", ":", "\n", "                    ", "if", "v", ".", "_detach_", ":", "\n", "                        ", "continue", "\n", "", "v", "=", "x", "[", "k", "]", "=", "v", "(", ")", "\n", "", "queue", ".", "append", "(", "v", ")", "\n", "\n", "", "", "return", "self", ".", "_func_", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.__str__": [[65, 93], ["config.Config.items", "isinstance", "str", "enumerate", "str", "str", "str", "v.__str__", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.__str__"], ["", "def", "__str__", "(", "self", ",", "indent", "=", "0", ")", ":", "\n", "        ", "text", "=", "''", "\n", "if", "self", ".", "_func_", "is", "not", "None", ":", "\n", "            ", "text", "+=", "' '", "*", "indent", "+", "'[func] = '", "+", "str", "(", "self", ".", "_func_", ")", "\n", "extra", "=", "False", "\n", "if", "self", ".", "_detach_", ":", "\n", "                ", "text", "+=", "' (detach='", "+", "str", "(", "self", ".", "_detach_", ")", "\n", "extra", "=", "True", "\n", "", "if", "self", ".", "_keys_", ":", "\n", "                ", "text", "+=", "', '", "if", "extra", "else", "' ('", "\n", "text", "+=", "'keys='", "+", "str", "(", "self", ".", "_keys_", ")", "\n", "extra", "=", "True", "\n", "", "text", "+=", "')\\n'", "if", "extra", "else", "'\\n'", "\n", "if", "self", ".", "_args_", ":", "\n", "                ", "for", "k", ",", "v", "in", "enumerate", "(", "self", ".", "_args_", ")", ":", "\n", "                    ", "text", "+=", "' '", "*", "indent", "+", "'[args:'", "+", "str", "(", "k", ")", "+", "'] = '", "+", "str", "(", "v", ")", "+", "'\\n'", "\n", "\n", "", "", "", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "text", "+=", "' '", "*", "indent", "+", "'['", "+", "str", "(", "k", ")", "+", "']'", "\n", "if", "isinstance", "(", "v", ",", "Config", ")", ":", "\n", "                ", "text", "+=", "'\\n'", "+", "v", ".", "__str__", "(", "indent", "+", "2", ")", "\n", "", "else", ":", "\n", "                ", "text", "+=", "' = '", "+", "str", "(", "v", ")", "\n", "", "text", "+=", "'\\n'", "\n", "\n", "", "while", "text", "and", "text", "[", "-", "1", "]", "==", "'\\n'", ":", "\n", "            ", "text", "=", "text", "[", ":", "-", "1", "]", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.__repr__": [[94, 108], ["repr", "repr", "repr", "config.Config.items", "str", "repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "text", "=", "''", "\n", "if", "self", ".", "_func_", "is", "not", "None", ":", "\n", "            ", "text", "+=", "repr", "(", "self", ".", "_func_", ")", "\n", "\n", "", "items", "=", "[", "]", "\n", "if", "self", ".", "_func_", "is", "not", "None", "and", "self", ".", "_args_", ":", "\n", "            ", "items", "+=", "[", "repr", "(", "v", ")", "for", "v", "in", "self", ".", "_args_", "]", "\n", "", "items", "+=", "[", "str", "(", "k", ")", "+", "'='", "+", "repr", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", "]", "\n", "if", "self", ".", "_func_", "is", "not", "None", "and", "self", ".", "_detach_", ":", "\n", "            ", "items", "+=", "[", "'detach='", "+", "repr", "(", "self", ".", "_detach_", ")", "]", "\n", "\n", "", "text", "+=", "'('", "+", "', '", ".", "join", "(", "items", ")", "+", "')'", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.update_from_modules": [[109, 114], ["module.replace().replace.replace().replace.replace().replace", "importlib.import_module", "module.replace().replace.replace().replace.replace"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "update_from_modules", "(", "*", "modules", ")", ":", "\n", "        ", "for", "module", "in", "modules", ":", "\n", "            ", "module", "=", "module", ".", "replace", "(", "'.py'", ",", "''", ")", ".", "replace", "(", "'/'", ",", "'.'", ")", "\n", "importlib", ".", "import_module", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.update_from_arguments": [[115, 118], ["config.update_configs_from_arguments"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.update_configs_from_arguments"], ["", "", "@", "staticmethod", "\n", "def", "update_from_arguments", "(", "*", "args", ")", ":", "\n", "        ", "update_configs_from_arguments", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.update_configs_from_module": [[123, 143], ["set", "set.add", "importlib.util.spec_from_file_location", "importlib.util.module_from_spec", "importlib.util.spec_from_file_location.loader.exec_module", "os.path.normpath", "enumerate", "config.update_configs_from_module.exec_module_once"], "function", ["None"], ["def", "update_configs_from_module", "(", "*", "mods", ")", ":", "\n", "    ", "imported_modules", "=", "set", "(", ")", "\n", "\n", "# from https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path", "\n", "def", "exec_module_once", "(", "module", ")", ":", "\n", "        ", "if", "module", "in", "imported_modules", ":", "\n", "            ", "return", "\n", "", "imported_modules", ".", "add", "(", "module", ")", "\n", "spec", "=", "importlib", ".", "util", ".", "spec_from_file_location", "(", "os", ".", "path", ".", "basename", "(", "module", ")", ",", "module", ")", "\n", "foo", "=", "importlib", ".", "util", ".", "module_from_spec", "(", "spec", ")", "\n", "spec", ".", "loader", ".", "exec_module", "(", "foo", ")", "\n", "\n", "", "for", "mod", "in", "mods", ":", "\n", "        ", "mod", "=", "os", ".", "path", ".", "normpath", "(", "mod", ")", "\n", "for", "index", ",", "char", "in", "enumerate", "(", "mod", ")", ":", "\n", "            ", "if", "index", "==", "0", "or", "char", "==", "os", ".", "sep", ":", "\n", "                ", "submod", "=", "os", ".", "path", ".", "join", "(", "mod", "[", ":", "index", "]", ",", "'__init__.py'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "submod", ")", ":", "\n", "                    ", "exec_module_once", "(", "submod", ")", "\n", "", "", "", "exec_module_once", "(", "mod", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.update_configs_from_arguments": [[145, 177], ["len", "arg.replace.startswith", "config.update_configs_from_arguments.parse"], "function", ["None"], ["", "", "def", "update_configs_from_arguments", "(", "args", ")", ":", "\n", "    ", "index", "=", "0", "\n", "\n", "while", "index", "<", "len", "(", "args", ")", ":", "\n", "        ", "arg", "=", "args", "[", "index", "]", "\n", "\n", "if", "arg", ".", "startswith", "(", "'--configs.'", ")", ":", "\n", "            ", "arg", "=", "arg", ".", "replace", "(", "'--configs.'", ",", "''", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unrecognized argument \"{}\"'", ".", "format", "(", "arg", ")", ")", "\n", "\n", "", "if", "'='", "in", "arg", ":", "\n", "            ", "index", ",", "keys", ",", "val", "=", "index", "+", "1", ",", "arg", "[", ":", "arg", ".", "index", "(", "'='", ")", "]", ".", "split", "(", "'.'", ")", ",", "arg", "[", "arg", ".", "index", "(", "'='", ")", "+", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "index", ",", "keys", ",", "val", "=", "index", "+", "2", ",", "arg", ".", "split", "(", "'.'", ")", ",", "args", "[", "index", "+", "1", "]", "\n", "\n", "", "config", "=", "configs", "\n", "for", "k", "in", "keys", "[", ":", "-", "1", "]", ":", "\n", "            ", "if", "k", "not", "in", "config", ":", "\n", "                ", "config", "[", "k", "]", "=", "Config", "(", ")", "\n", "", "config", "=", "config", "[", "k", "]", "\n", "\n", "", "def", "parse", "(", "x", ")", ":", "\n", "            ", "if", "(", "x", "[", "0", "]", "==", "'\\''", "and", "x", "[", "-", "1", "]", "==", "'\\''", ")", "or", "(", "x", "[", "0", "]", "==", "'\\\"'", "and", "x", "[", "-", "1", "]", "==", "'\\\"'", ")", ":", "\n", "                ", "return", "x", "[", "1", ":", "-", "1", "]", "\n", "", "try", ":", "\n", "                ", "x", "=", "eval", "(", "x", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "return", "x", "\n", "\n", "", "config", "[", "keys", "[", "-", "1", "]", "]", "=", "parse", "(", "val", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.device.set_cuda_visible_devices": [[6, 22], ["devs.split", "dev.strip().lower.strip().lower", "dev.strip().lower.startswith", "map", "gpus.extend", "gpus.append", "str", "dev.strip().lower.strip", "dev.strip().lower.split", "range", "int"], "function", ["None"], ["def", "set_cuda_visible_devices", "(", "devs", ")", ":", "\n", "    ", "gpus", "=", "[", "]", "\n", "for", "dev", "in", "devs", ".", "split", "(", "','", ")", ":", "\n", "        ", "dev", "=", "dev", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "if", "dev", "==", "'cpu'", ":", "\n", "            ", "continue", "\n", "", "if", "dev", ".", "startswith", "(", "'gpu'", ")", ":", "\n", "            ", "dev", "=", "dev", "[", "3", ":", "]", "\n", "", "if", "'-'", "in", "dev", ":", "\n", "            ", "l", ",", "r", "=", "map", "(", "int", ",", "dev", ".", "split", "(", "'-'", ")", ")", "\n", "gpus", ".", "extend", "(", "range", "(", "l", ",", "r", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "gpus", ".", "append", "(", "int", "(", "dev", ")", ")", "\n", "\n", "", "", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "','", ".", "join", "(", "[", "str", "(", "gpu", ")", "for", "gpu", "in", "gpus", "]", ")", "\n", "return", "gpus", "\n", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.get_save_path": [[6, 32], ["dict", "os.path.join", "c.replace().replace().split.replace().replace().split", "len", "enumerate", "common.get_save_path.get_str"], "function", ["None"], ["def", "get_save_path", "(", "*", "configs", ",", "prefix", "=", "'runs'", ")", ":", "\n", "    ", "memo", "=", "dict", "(", ")", "\n", "for", "c", "in", "configs", ":", "\n", "        ", "cmemo", "=", "memo", "\n", "c", "=", "c", ".", "replace", "(", "'configs/'", ",", "''", ")", ".", "replace", "(", "'.py'", ",", "''", ")", ".", "split", "(", "'/'", ")", "\n", "for", "m", "in", "c", ":", "\n", "            ", "if", "m", "not", "in", "cmemo", ":", "\n", "                ", "cmemo", "[", "m", "]", "=", "dict", "(", ")", "\n", "", "cmemo", "=", "cmemo", "[", "m", "]", "\n", "\n", "", "", "def", "get_str", "(", "m", ",", "p", ")", ":", "\n", "        ", "n", "=", "len", "(", "m", ")", "\n", "if", "n", ">", "1", ":", "\n", "            ", "p", "+=", "'['", "\n", "", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "m", ".", "items", "(", ")", ")", ":", "\n", "            ", "p", "+=", "k", "\n", "if", "len", "(", "v", ")", ">", "0", ":", "\n", "                ", "p", "+=", "'.'", "\n", "", "p", "=", "get_str", "(", "v", ",", "p", ")", "\n", "if", "n", ">", "1", "and", "i", "<", "n", "-", "1", ":", "\n", "                ", "p", "+=", "'+'", "\n", "", "", "if", "n", ">", "1", ":", "\n", "            ", "p", "+=", "']'", "\n", "", "return", "p", "\n", "\n", "", "return", "os", ".", "path", ".", "join", "(", "prefix", ",", "get_str", "(", "memo", ",", "''", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.container.G.__getattr__": [[6, 10], ["AttributeError"], "methods", ["None"], ["    ", "def", "__getattr__", "(", "self", ",", "k", ")", ":", "\n", "        ", "if", "k", "not", "in", "self", ":", "\n", "            ", "raise", "AttributeError", "(", "k", ")", "\n", "", "return", "self", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.container.G.__setattr__": [[11, 13], ["None"], "methods", ["None"], ["", "def", "__setattr__", "(", "self", ",", "k", ",", "v", ")", ":", "\n", "        ", "self", "[", "k", "]", "=", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.container.G.__delattr__": [[14, 16], ["None"], "methods", ["None"], ["", "def", "__delattr__", "(", "self", ",", "k", ")", ":", "\n", "        ", "del", "self", "[", "k", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.div_up": [[12, 15], ["numba.jit"], "function", ["None"], ["@", "numba", ".", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "div_up", "(", "m", ",", "n", ")", ":", "\n", "    ", "return", "m", "//", "n", "+", "(", "m", "%", "n", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.rbbox_to_corners": [[17, 40], ["numba.cuda.jit", "math.cos", "math.sin", "numba.cuda.local.array", "numba.cuda.local.array", "range"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "rbbox_to_corners", "(", "corners", ",", "rbbox", ")", ":", "\n", "# generate clockwise corners and rotate it clockwise", "\n", "    ", "angle", "=", "rbbox", "[", "4", "]", "\n", "a_cos", "=", "math", ".", "cos", "(", "angle", ")", "\n", "a_sin", "=", "math", ".", "sin", "(", "angle", ")", "\n", "center_x", "=", "rbbox", "[", "0", "]", "\n", "center_y", "=", "rbbox", "[", "1", "]", "\n", "x_d", "=", "rbbox", "[", "2", "]", "\n", "y_d", "=", "rbbox", "[", "3", "]", "\n", "corners_x", "=", "cuda", ".", "local", ".", "array", "(", "(", "4", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners_y", "=", "cuda", ".", "local", ".", "array", "(", "(", "4", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners_x", "[", "0", "]", "=", "-", "x_d", "/", "2", "\n", "corners_x", "[", "1", "]", "=", "-", "x_d", "/", "2", "\n", "corners_x", "[", "2", "]", "=", "x_d", "/", "2", "\n", "corners_x", "[", "3", "]", "=", "x_d", "/", "2", "\n", "corners_y", "[", "0", "]", "=", "-", "y_d", "/", "2", "\n", "corners_y", "[", "1", "]", "=", "y_d", "/", "2", "\n", "corners_y", "[", "2", "]", "=", "y_d", "/", "2", "\n", "corners_y", "[", "3", "]", "=", "-", "y_d", "/", "2", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "corners", "[", "2", "*", "i", "]", "=", "a_cos", "*", "corners_x", "[", "i", "]", "+", "a_sin", "*", "corners_y", "[", "i", "]", "+", "center_x", "\n", "corners", "[", "2", "*", "i", "+", "1", "]", "=", "-", "a_sin", "*", "corners_x", "[", "i", "]", "+", "a_cos", "*", "corners_y", "[", "i", "]", "+", "center_y", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.point_in_quadrilateral": [[42, 58], ["numba.cuda.jit"], "function", ["None"], ["", "", "@", "cuda", ".", "jit", "(", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "point_in_quadrilateral", "(", "pt_x", ",", "pt_y", ",", "corners", ")", ":", "\n", "    ", "ab0", "=", "corners", "[", "2", "]", "-", "corners", "[", "0", "]", "\n", "ab1", "=", "corners", "[", "3", "]", "-", "corners", "[", "1", "]", "\n", "ad0", "=", "corners", "[", "6", "]", "-", "corners", "[", "0", "]", "\n", "ad1", "=", "corners", "[", "7", "]", "-", "corners", "[", "1", "]", "\n", "ap0", "=", "pt_x", "-", "corners", "[", "0", "]", "\n", "ap1", "=", "pt_y", "-", "corners", "[", "1", "]", "\n", "\n", "ab_ab", "=", "ab0", "*", "ab0", "+", "ab1", "*", "ab1", "\n", "ab_ap", "=", "ab0", "*", "ap0", "+", "ab1", "*", "ap1", "\n", "ad_ad", "=", "ad0", "*", "ad0", "+", "ad1", "*", "ad1", "\n", "ad_ap", "=", "ad0", "*", "ap0", "+", "ad1", "*", "ap1", "\n", "\n", "eps", "=", "-", "1e-6", "\n", "return", "ab_ab", "-", "ab_ap", ">=", "eps", "and", "ab_ap", ">=", "eps", "and", "ad_ad", "-", "ad_ap", ">=", "eps", "and", "ad_ap", ">=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.line_segment_intersection": [[60, 101], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "line_segment_intersection", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", ":", "\n", "    ", "a", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "b", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "c", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "d", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "a", "[", "0", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "a", "[", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "\n", "b", "[", "0", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "]", "\n", "b", "[", "1", "]", "=", "pts1", "[", "2", "*", "(", "(", "i", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "\n", "c", "[", "0", "]", "=", "pts2", "[", "2", "*", "j", "]", "\n", "c", "[", "1", "]", "=", "pts2", "[", "2", "*", "j", "+", "1", "]", "\n", "\n", "d", "[", "0", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "]", "\n", "d", "[", "1", "]", "=", "pts2", "[", "2", "*", "(", "(", "j", "+", "1", ")", "%", "4", ")", "+", "1", "]", "\n", "ba_0", "=", "b", "[", "0", "]", "-", "a", "[", "0", "]", "\n", "ba_1", "=", "b", "[", "1", "]", "-", "a", "[", "1", "]", "\n", "da_0", "=", "d", "[", "0", "]", "-", "a", "[", "0", "]", "\n", "ca_0", "=", "c", "[", "0", "]", "-", "a", "[", "0", "]", "\n", "da_1", "=", "d", "[", "1", "]", "-", "a", "[", "1", "]", "\n", "ca_1", "=", "c", "[", "1", "]", "-", "a", "[", "1", "]", "\n", "acd", "=", "da_1", "*", "ca_0", ">", "ca_1", "*", "da_0", "\n", "bcd", "=", "(", "d", "[", "1", "]", "-", "b", "[", "1", "]", ")", "*", "(", "c", "[", "0", "]", "-", "b", "[", "0", "]", ")", ">", "(", "c", "[", "1", "]", "-", "b", "[", "1", "]", ")", "*", "(", "d", "[", "0", "]", "-", "b", "[", "0", "]", ")", "\n", "if", "acd", "!=", "bcd", ":", "\n", "        ", "abc", "=", "ca_1", "*", "ba_0", ">", "ba_1", "*", "ca_0", "\n", "abd", "=", "da_1", "*", "ba_0", ">", "ba_1", "*", "da_0", "\n", "if", "abc", "!=", "abd", ":", "\n", "            ", "dc0", "=", "d", "[", "0", "]", "-", "c", "[", "0", "]", "\n", "dc1", "=", "d", "[", "1", "]", "-", "c", "[", "1", "]", "\n", "ab_ba", "=", "a", "[", "0", "]", "*", "b", "[", "1", "]", "-", "b", "[", "0", "]", "*", "a", "[", "1", "]", "\n", "cd_dc", "=", "c", "[", "0", "]", "*", "d", "[", "1", "]", "-", "d", "[", "0", "]", "*", "c", "[", "1", "]", "\n", "dh", "=", "ba_1", "*", "dc0", "-", "ba_0", "*", "dc1", "\n", "dx", "=", "ab_ba", "*", "dc0", "-", "ba_0", "*", "cd_dc", "\n", "dy", "=", "ab_ba", "*", "dc1", "-", "ba_1", "*", "cd_dc", "\n", "temp_pts", "[", "0", "]", "=", "dx", "/", "dh", "\n", "temp_pts", "[", "1", "]", "=", "dy", "/", "dh", "\n", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.quadrilateral_intersection": [[103, 125], ["numba.cuda.jit", "range", "numba.cuda.local.array", "range", "iou.point_in_quadrilateral", "iou.point_in_quadrilateral", "range", "iou.line_segment_intersection"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.point_in_quadrilateral", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.point_in_quadrilateral", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.line_segment_intersection"], ["", "@", "cuda", ".", "jit", "(", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "quadrilateral_intersection", "(", "pts1", ",", "pts2", ",", "int_pts", ")", ":", "\n", "    ", "num_of_inter", "=", "0", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "if", "point_in_quadrilateral", "(", "pts1", "[", "2", "*", "i", "]", ",", "pts1", "[", "2", "*", "i", "+", "1", "]", ",", "pts2", ")", ":", "\n", "            ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "pts1", "[", "2", "*", "i", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "pts1", "[", "2", "*", "i", "+", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "", "if", "point_in_quadrilateral", "(", "pts2", "[", "2", "*", "i", "]", ",", "pts2", "[", "2", "*", "i", "+", "1", "]", ",", "pts1", ")", ":", "\n", "            ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "pts2", "[", "2", "*", "i", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "pts2", "[", "2", "*", "i", "+", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "", "", "temp_pts", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "            ", "has_pts", "=", "line_segment_intersection", "(", "pts1", ",", "pts2", ",", "i", ",", "j", ",", "temp_pts", ")", "\n", "if", "has_pts", ":", "\n", "                ", "int_pts", "[", "num_of_inter", "*", "2", "]", "=", "temp_pts", "[", "0", "]", "\n", "int_pts", "[", "num_of_inter", "*", "2", "+", "1", "]", "=", "temp_pts", "[", "1", "]", "\n", "num_of_inter", "+=", "1", "\n", "\n", "", "", "", "return", "num_of_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.sort_vertex_in_convex_polygon": [[127, 162], ["numba.cuda.jit", "numba.cuda.local.array", "range", "numba.cuda.local.array", "numba.cuda.local.array", "range", "range", "math.sqrt"], "function", ["None"], ["", "@", "cuda", ".", "jit", "(", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "sort_vertex_in_convex_polygon", "(", "int_pts", ",", "num_of_inter", ")", ":", "\n", "    ", "if", "num_of_inter", ">", "0", ":", "\n", "        ", "center", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "center", "[", ":", "]", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_of_inter", ")", ":", "\n", "            ", "center", "[", "0", "]", "+=", "int_pts", "[", "2", "*", "i", "]", "\n", "center", "[", "1", "]", "+=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "\n", "", "center", "[", "0", "]", "/=", "num_of_inter", "\n", "center", "[", "1", "]", "/=", "num_of_inter", "\n", "v", "=", "cuda", ".", "local", ".", "array", "(", "(", "2", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "vs", "=", "cuda", ".", "local", ".", "array", "(", "(", "16", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "num_of_inter", ")", ":", "\n", "            ", "v", "[", "0", "]", "=", "int_pts", "[", "2", "*", "i", "]", "-", "center", "[", "0", "]", "\n", "v", "[", "1", "]", "=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "-", "center", "[", "1", "]", "\n", "d", "=", "math", ".", "sqrt", "(", "v", "[", "0", "]", "*", "v", "[", "0", "]", "+", "v", "[", "1", "]", "*", "v", "[", "1", "]", ")", "\n", "v", "[", "0", "]", "=", "v", "[", "0", "]", "/", "d", "\n", "v", "[", "1", "]", "=", "v", "[", "1", "]", "/", "d", "\n", "if", "v", "[", "1", "]", "<", "0", ":", "\n", "                ", "v", "[", "0", "]", "=", "-", "2", "-", "v", "[", "0", "]", "\n", "", "vs", "[", "i", "]", "=", "v", "[", "0", "]", "\n", "", "for", "i", "in", "range", "(", "1", ",", "num_of_inter", ")", ":", "\n", "            ", "if", "vs", "[", "i", "-", "1", "]", ">", "vs", "[", "i", "]", ":", "\n", "                ", "temp", "=", "vs", "[", "i", "]", "\n", "tx", "=", "int_pts", "[", "2", "*", "i", "]", "\n", "ty", "=", "int_pts", "[", "2", "*", "i", "+", "1", "]", "\n", "j", "=", "i", "\n", "while", "j", ">", "0", "and", "vs", "[", "j", "-", "1", "]", ">", "temp", ":", "\n", "                    ", "vs", "[", "j", "]", "=", "vs", "[", "j", "-", "1", "]", "\n", "int_pts", "[", "j", "*", "2", "]", "=", "int_pts", "[", "j", "*", "2", "-", "2", "]", "\n", "int_pts", "[", "j", "*", "2", "+", "1", "]", "=", "int_pts", "[", "j", "*", "2", "-", "1", "]", "\n", "j", "-=", "1", "\n", "", "vs", "[", "j", "]", "=", "temp", "\n", "int_pts", "[", "j", "*", "2", "]", "=", "tx", "\n", "int_pts", "[", "j", "*", "2", "+", "1", "]", "=", "ty", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.triangle_area": [[164, 167], ["numba.cuda.jit"], "function", ["None"], ["", "", "", "", "@", "cuda", ".", "jit", "(", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "triangle_area", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "(", "(", "a", "[", "0", "]", "-", "c", "[", "0", "]", ")", "*", "(", "b", "[", "1", "]", "-", "c", "[", "1", "]", ")", "-", "(", "a", "[", "1", "]", "-", "c", "[", "1", "]", ")", "*", "(", "b", "[", "0", "]", "-", "c", "[", "0", "]", ")", ")", "/", "2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.area": [[169, 175], ["numba.cuda.jit", "range", "abs", "iou.triangle_area"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.triangle_area"], ["", "@", "cuda", ".", "jit", "(", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "area", "(", "int_pts", ",", "num_of_inter", ")", ":", "\n", "    ", "area_val", "=", "0.0", "\n", "for", "i", "in", "range", "(", "num_of_inter", "-", "2", ")", ":", "\n", "        ", "area_val", "+=", "abs", "(", "triangle_area", "(", "int_pts", "[", ":", "2", "]", ",", "int_pts", "[", "2", "*", "i", "+", "2", ":", "2", "*", "i", "+", "4", "]", ",", "int_pts", "[", "2", "*", "i", "+", "4", ":", "2", "*", "i", "+", "6", "]", ")", ")", "\n", "", "return", "area_val", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.inter": [[177, 189], ["numba.cuda.jit", "numba.cuda.local.array", "numba.cuda.local.array", "numba.cuda.local.array", "iou.rbbox_to_corners", "iou.rbbox_to_corners", "iou.quadrilateral_intersection", "iou.sort_vertex_in_convex_polygon", "iou.area"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.rbbox_to_corners", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.rbbox_to_corners", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.quadrilateral_intersection", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.sort_vertex_in_convex_polygon", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.area"], ["", "@", "cuda", ".", "jit", "(", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "inter", "(", "rbbox1", ",", "rbbox2", ")", ":", "\n", "    ", "corners1", "=", "cuda", ".", "local", ".", "array", "(", "(", "8", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "corners2", "=", "cuda", ".", "local", ".", "array", "(", "(", "8", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "intersection_corners", "=", "cuda", ".", "local", ".", "array", "(", "(", "16", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "rbbox_to_corners", "(", "corners1", ",", "rbbox1", ")", "\n", "rbbox_to_corners", "(", "corners2", ",", "rbbox2", ")", "\n", "\n", "num_intersection", "=", "quadrilateral_intersection", "(", "corners1", ",", "corners2", ",", "intersection_corners", ")", "\n", "sort_vertex_in_convex_polygon", "(", "intersection_corners", ",", "num_intersection", ")", "\n", "return", "area", "(", "intersection_corners", ",", "num_intersection", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.dev_rotate_iou_eval": [[191, 204], ["numba.cuda.jit", "iou.inter"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.inter"], ["", "@", "cuda", ".", "jit", "(", "'(float32[:], float32[:], int32)'", ",", "device", "=", "True", ",", "inline", "=", "True", ")", "\n", "def", "dev_rotate_iou_eval", "(", "rbox1", ",", "rbox2", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "area1", "=", "rbox1", "[", "2", "]", "*", "rbox1", "[", "3", "]", "\n", "area2", "=", "rbox2", "[", "2", "]", "*", "rbox2", "[", "3", "]", "\n", "area_inter", "=", "inter", "(", "rbox1", ",", "rbox2", ")", "\n", "if", "criterion", "==", "-", "1", ":", "\n", "        ", "return", "area_inter", "/", "(", "area1", "+", "area2", "-", "area_inter", ")", "\n", "", "elif", "criterion", "==", "0", ":", "\n", "        ", "return", "area_inter", "/", "area1", "\n", "", "elif", "criterion", "==", "1", ":", "\n", "        ", "return", "area_inter", "/", "area2", "\n", "", "else", ":", "\n", "        ", "return", "area_inter", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.rotate_iou_kernel_eval": [[206, 237], ["numba.cuda.jit", "min", "min", "numba.cuda.shared.array", "numba.cuda.shared.array", "numba.cuda.syncthreads", "range", "iou.dev_rotate_iou_eval"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.dev_rotate_iou_eval"], ["", "", "@", "cuda", ".", "jit", "(", "'(int64, int64, float32[:], float32[:], float32[:], int32)'", ",", "fastmath", "=", "False", ")", "\n", "def", "rotate_iou_kernel_eval", "(", "N", ",", "K", ",", "dev_boxes", ",", "dev_query_boxes", ",", "dev_iou", ",", "criterion", "=", "-", "1", ")", ":", "\n", "    ", "threads_per_block", "=", "8", "*", "8", "\n", "row_start", "=", "cuda", ".", "blockIdx", ".", "x", "\n", "col_start", "=", "cuda", ".", "blockIdx", ".", "y", "\n", "tx", "=", "cuda", ".", "threadIdx", ".", "x", "\n", "row_size", "=", "min", "(", "N", "-", "row_start", "*", "threads_per_block", ",", "threads_per_block", ")", "\n", "col_size", "=", "min", "(", "K", "-", "col_start", "*", "threads_per_block", ",", "threads_per_block", ")", "\n", "block_boxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "block_qboxes", "=", "cuda", ".", "shared", ".", "array", "(", "shape", "=", "(", "64", "*", "5", ",", ")", ",", "dtype", "=", "numba", ".", "float32", ")", "\n", "\n", "dev_query_box_idx", "=", "threads_per_block", "*", "col_start", "+", "tx", "\n", "dev_box_idx", "=", "threads_per_block", "*", "row_start", "+", "tx", "\n", "if", "tx", "<", "col_size", ":", "\n", "        ", "block_qboxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "0", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "1", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "2", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "3", "]", "\n", "block_qboxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_query_boxes", "[", "dev_query_box_idx", "*", "5", "+", "4", "]", "\n", "", "if", "tx", "<", "row_size", ":", "\n", "        ", "block_boxes", "[", "tx", "*", "5", "+", "0", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "0", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "1", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "1", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "2", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "2", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "3", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "3", "]", "\n", "block_boxes", "[", "tx", "*", "5", "+", "4", "]", "=", "dev_boxes", "[", "dev_box_idx", "*", "5", "+", "4", "]", "\n", "", "cuda", ".", "syncthreads", "(", ")", "\n", "if", "tx", "<", "row_size", ":", "\n", "        ", "for", "i", "in", "range", "(", "col_size", ")", ":", "\n", "            ", "offset", "=", "row_start", "*", "threads_per_block", "*", "K", "+", "col_start", "*", "threads_per_block", "+", "tx", "*", "K", "+", "i", "\n", "dev_iou", "[", "offset", "]", "=", "dev_rotate_iou_eval", "(", "\n", "block_qboxes", "[", "i", "*", "5", ":", "i", "*", "5", "+", "5", "]", ",", "block_boxes", "[", "tx", "*", "5", ":", "tx", "*", "5", "+", "5", "]", ",", "criterion", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.rotate_iou_gpu_eval": [[240, 270], ["boxes.astype.astype", "query_boxes.astype.astype", "numpy.zeros", "numba.cuda.select_device", "numba.cuda.stream", "np.zeros.astype", "iou.div_up", "iou.div_up", "cuda.stream.auto_synchronize", "numba.cuda.to_device", "numba.cuda.to_device", "numba.cuda.to_device", "cuda.to_device.copy_to_host", "boxes.astype.reshape", "query_boxes.astype.reshape", "np.zeros.reshape", "np.zeros.reshape"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.div_up", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.div_up"], ["", "", "", "def", "rotate_iou_gpu_eval", "(", "boxes", ",", "query_boxes", ",", "criterion", "=", "-", "1", ",", "device_id", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    rotated box iou running in gpu. 8x faster than cpu version (take 5ms in one example with numba.cuda code).\n    convert from [this project](https://github.com/hongzhenwang/RRPN-revise/tree/master/lib/rotation).\n    :param boxes: rbboxes, format: centers, dims, angles(clockwise when positive), FloatTensor[N, 5]\n    :param query_boxes: FloatTensor[K, 5]\n    :param criterion: optional, default: -1\n    :param device_id: int, optional, default: 0\n    :return:\n    \"\"\"", "\n", "boxes", "=", "boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "query_boxes", "=", "query_boxes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "N", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "K", "=", "query_boxes", ".", "shape", "[", "0", "]", "\n", "iou", "=", "np", ".", "zeros", "(", "(", "N", ",", "K", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "N", "==", "0", "or", "K", "==", "0", ":", "\n", "        ", "return", "iou", "\n", "", "threads_per_block", "=", "8", "*", "8", "\n", "cuda", ".", "select_device", "(", "device_id", ")", "\n", "blocks_per_grid", "=", "(", "div_up", "(", "N", ",", "threads_per_block", ")", ",", "div_up", "(", "K", ",", "threads_per_block", ")", ")", "\n", "\n", "stream", "=", "cuda", ".", "stream", "(", ")", "\n", "with", "stream", ".", "auto_synchronize", "(", ")", ":", "\n", "        ", "boxes_dev", "=", "cuda", ".", "to_device", "(", "boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "query_boxes_dev", "=", "cuda", ".", "to_device", "(", "query_boxes", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "iou_dev", "=", "cuda", ".", "to_device", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", ")", "\n", "rotate_iou_kernel_eval", "[", "blocks_per_grid", ",", "threads_per_block", ",", "stream", "]", "(", "N", ",", "K", ",", "boxes_dev", ",", "query_boxes_dev", ",", "\n", "iou_dev", ",", "criterion", ")", "\n", "iou_dev", ".", "copy_to_host", "(", "iou", ".", "reshape", "(", "[", "-", "1", "]", ")", ",", "stream", "=", "stream", ")", "\n", "", "return", "iou", ".", "astype", "(", "boxes", ".", "dtype", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.get_label_annotation": [[13, 33], ["dict", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "open", "f.readlines", "line.strip().split", "numpy.array().reshape", "numpy.array", "numpy.zeros", "float", "int", "float", "numpy.array", "numpy.array", "numpy.array", "len", "len", "line.strip", "numpy.array", "float", "len", "float", "float", "float", "float"], "function", ["None"], ["                ", "cmemo", "[", "m", "]", "=", "dict", "(", ")", "\n", "", "cmemo", "=", "cmemo", "[", "m", "]", "\n", "\n", "", "", "def", "get_str", "(", "m", ",", "p", ")", ":", "\n", "        ", "n", "=", "len", "(", "m", ")", "\n", "if", "n", ">", "1", ":", "\n", "            ", "p", "+=", "'['", "\n", "", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "m", ".", "items", "(", ")", ")", ":", "\n", "            ", "p", "+=", "k", "\n", "if", "len", "(", "v", ")", ">", "0", ":", "\n", "                ", "p", "+=", "'.'", "\n", "", "p", "=", "get_str", "(", "v", ",", "p", ")", "\n", "if", "n", ">", "1", "and", "i", "<", "n", "-", "1", ":", "\n", "                ", "p", "+=", "'+'", "\n", "", "", "if", "n", ">", "1", ":", "\n", "            ", "p", "+=", "']'", "\n", "", "return", "p", "\n", "\n", "", "return", "os", ".", "path", ".", "join", "(", "prefix", ",", "get_str", "(", "memo", ",", "''", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.get_label_annotations": [[35, 51], ["pathlib.Path", "pathlib.Path().glob", "re.compile", "filter", "sorted", "isinstance", "list", "annotations.append", "int", "range", "common.get_label_annotation", "pathlib.Path", "re.compile.match"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.get_label_annotation"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.eval_from_files": [[53, 66], ["common.get_label_annotations", "isinstance", "common.get_label_annotations", "eval.get_official_eval_result", "print", "open", "f.readlines", "int"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.get_label_annotations", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.get_label_annotations", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.get_official_eval_result"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.get_map": [[14, 19], ["range"], "function", ["None"], ["def", "prepare", "(", ")", ":", "\n", "    ", "from", "utils", ".", "common", "import", "get_save_path", "\n", "from", "utils", ".", "config", "import", "configs", "\n", "from", "utils", ".", "device", "import", "set_cuda_visible_devices", "\n", "\n", "# since PyTorch jams device selection, we have to parse args before import torch (issue #26790)", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.get_split_parts": [[21, 28], ["None"], "function", ["None"], ["parser", ".", "add_argument", "(", "'configs'", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--devices'", ",", "default", "=", "None", ")", "\n", "args", ",", "opts", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "if", "args", ".", "devices", "is", "not", "None", "and", "args", ".", "devices", "!=", "'cpu'", ":", "\n", "        ", "gpus", "=", "set_cuda_visible_devices", "(", "args", ".", "devices", ")", "\n", "", "else", ":", "\n", "        ", "gpus", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.image_box_overlap": [[30, 52], ["numba.jit", "numpy.zeros", "range", "range", "min", "max", "min", "max"], "function", ["None"], ["configs", ".", "update_from_modules", "(", "*", "args", ".", "configs", ")", "\n", "# define save path", "\n", "save_path", "=", "get_save_path", "(", "*", "args", ".", "configs", ",", "prefix", "=", "'runs'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "configs", ".", "train", ".", "save_path", "=", "save_path", "\n", "configs", ".", "train", ".", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'latest.pth.tar'", ")", "\n", "configs", ".", "train", ".", "best_checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best.pth.tar'", ")", "\n", "\n", "# override configs with args", "\n", "configs", ".", "update_from_arguments", "(", "*", "opts", ")", "\n", "if", "len", "(", "gpus", ")", "==", "0", ":", "\n", "        ", "configs", ".", "device", "=", "'cpu'", "\n", "configs", ".", "device_ids", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "configs", ".", "device", "=", "'cuda'", "\n", "configs", ".", "device_ids", "=", "gpus", "\n", "", "configs", ".", "dataset", ".", "split", "=", "configs", ".", "evaluate", ".", "dataset", ".", "split", "\n", "if", "'best_checkpoint_path'", "not", "in", "configs", ".", "evaluate", "or", "configs", ".", "evaluate", ".", "best_checkpoint_path", "is", "None", ":", "\n", "        ", "if", "'best_checkpoint_path'", "in", "configs", ".", "train", "and", "configs", ".", "train", ".", "best_checkpoint_path", "is", "not", "None", ":", "\n", "            ", "configs", ".", "evaluate", ".", "best_checkpoint_path", "=", "configs", ".", "train", ".", "best_checkpoint_path", "\n", "", "else", ":", "\n", "            ", "configs", ".", "evaluate", ".", "best_checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "train", ".", "save_path", ",", "'best.pth.tar'", ")", "\n", "", "", "assert", "configs", ".", "evaluate", ".", "best_checkpoint_path", ".", "endswith", "(", "'.pth.tar'", ")", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.bev_box_overlap": [[54, 56], ["iou.rotate_iou_gpu_eval"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.rotate_iou_gpu_eval"], ["\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.d3_box_overlap_kernel": [[58, 93], ["numba.jit", "range", "range", "min", "max"], "function", ["None"], ["", "def", "evaluate", "(", "configs", "=", "None", ")", ":", "\n", "    ", "configs", "=", "prepare", "(", ")", "if", "configs", "is", "None", "else", "configs", "\n", "\n", "import", "math", "\n", "import", "torch", "\n", "import", "torch", ".", "backends", ".", "cudnn", "as", "cudnn", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "from", "meters", ".", "shapenet", "import", "MeterShapeNet", "\n", "\n", "###########", "\n", "# Prepare #", "\n", "###########", "\n", "\n", "if", "configs", ".", "device", "==", "'cuda'", ":", "\n", "        ", "cudnn", ".", "benchmark", "=", "True", "\n", "if", "configs", ".", "get", "(", "'deterministic'", ",", "False", ")", ":", "\n", "            ", "cudnn", ".", "deterministic", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "", "", "if", "(", "'seed'", "not", "in", "configs", ")", "or", "(", "configs", ".", "seed", "is", "None", ")", ":", "\n", "        ", "configs", ".", "seed", "=", "torch", ".", "initial_seed", "(", ")", "%", "(", "2", "**", "32", "-", "1", ")", "\n", "", "seed", "=", "configs", ".", "seed", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "print", "(", "configs", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "configs", ".", "evaluate", ".", "stats_path", ")", ":", "\n", "        ", "stats", "=", "np", ".", "load", "(", "configs", ".", "evaluate", ".", "stats_path", ")", "\n", "print", "(", "'clssIoU: {}'", ".", "format", "(", "'  '", ".", "join", "(", "map", "(", "'{:>8.2f}'", ".", "format", ",", "stats", "[", ":", ",", "0", "]", "/", "stats", "[", ":", ",", "1", "]", "*", "100", ")", ")", ")", ")", "\n", "print", "(", "'meanIoU: {:4.2f}'", ".", "format", "(", "stats", "[", ":", ",", "0", "]", ".", "sum", "(", ")", "/", "stats", "[", ":", ",", "1", "]", ".", "sum", "(", ")", "*", "100", ")", ")", "\n", "return", "\n", "\n", "#################################", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.d3_box_overlap": [[95, 105], ["list", "list.pop", "list.pop", "iou.rotate_iou_gpu_eval", "eval.d3_box_overlap_kernel", "range"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.iou.rotate_iou_gpu_eval", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.d3_box_overlap_kernel"], ["#################################", "\n", "\n", "", "print", "(", "f'\\n==> loading dataset \"{configs.dataset}\"'", ")", "\n", "dataset", "=", "configs", ".", "dataset", "(", ")", "[", "configs", ".", "dataset", ".", "split", "]", "\n", "meter", "=", "MeterShapeNet", "(", ")", "\n", "\n", "print", "(", "f'\\n==> creating model \"{configs.model}\"'", ")", "\n", "model", "=", "configs", ".", "model", "(", ")", "\n", "if", "configs", ".", "device", "==", "'cuda'", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", "=", "model", ".", "to", "(", "configs", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.calculate_iou_partly": [[107, 171], ["numpy.stack", "numpy.stack", "len", "eval.get_split_parts", "list", "list.pop", "enumerate", "len", "len", "range", "parted_overlaps.append", "range", "len", "len", "numpy.concatenate", "numpy.concatenate", "eval.image_box_overlap", "overlaps.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "bev_box_overlap().astype", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "d3_box_overlap().astype", "ValueError", "eval.bev_box_overlap", "eval.d3_box_overlap"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.get_split_parts", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.image_box_overlap", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.bev_box_overlap", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.d3_box_overlap"], ["if", "os", ".", "path", ".", "exists", "(", "configs", ".", "evaluate", ".", "best_checkpoint_path", ")", ":", "\n", "        ", "print", "(", "f'==> loading checkpoint \"{configs.evaluate.best_checkpoint_path}\"'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "configs", ".", "evaluate", ".", "best_checkpoint_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "'model'", ")", ")", "\n", "del", "checkpoint", "\n", "", "else", ":", "\n", "        ", "return", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "##############", "\n", "# Evaluation #", "\n", "##############", "\n", "\n", "stats", "=", "np", ".", "zeros", "(", "(", "configs", ".", "data", ".", "num_shapes", ",", "2", ")", ")", "\n", "\n", "for", "shape_index", ",", "(", "file_path", ",", "shape_id", ")", "in", "enumerate", "(", "tqdm", "(", "dataset", ".", "file_paths", ",", "desc", "=", "'eval'", ",", "ncols", "=", "0", ")", ")", ":", "\n", "        ", "data", "=", "np", ".", "loadtxt", "(", "file_path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "total_num_points_in_shape", "=", "data", ".", "shape", "[", "0", "]", "\n", "confidences", "=", "np", ".", "zeros", "(", "total_num_points_in_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "predictions", "=", "np", ".", "full", "(", "total_num_points_in_shape", ",", "-", "1", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "coords", "=", "data", "[", ":", ",", ":", "3", "]", "\n", "if", "dataset", ".", "normalize", ":", "\n", "            ", "coords", "=", "dataset", ".", "normalize_point_cloud", "(", "coords", ")", "\n", "", "coords", "=", "coords", ".", "transpose", "(", ")", "\n", "ground_truth", "=", "data", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "if", "dataset", ".", "with_normal", ":", "\n", "            ", "normal", "=", "data", "[", ":", ",", "3", ":", "6", "]", ".", "transpose", "(", ")", "\n", "if", "dataset", ".", "with_one_hot_shape_id", ":", "\n", "                ", "shape_one_hot", "=", "np", ".", "zeros", "(", "(", "dataset", ".", "num_shapes", ",", "coords", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "shape_one_hot", "[", "shape_id", ",", ":", "]", "=", "1.0", "\n", "point_set", "=", "np", ".", "concatenate", "(", "[", "coords", ",", "normal", ",", "shape_one_hot", "]", ")", "\n", "", "else", ":", "\n", "                ", "point_set", "=", "np", ".", "concatenate", "(", "[", "coords", ",", "normal", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "dataset", ".", "with_one_hot_shape_id", ":", "\n", "                ", "shape_one_hot", "=", "np", ".", "zeros", "(", "(", "dataset", ".", "num_shapes", ",", "coords", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "shape_one_hot", "[", "shape_id", ",", ":", "]", "=", "1.0", "\n", "point_set", "=", "np", ".", "concatenate", "(", "[", "coords", ",", "shape_one_hot", "]", ")", "\n", "", "else", ":", "\n", "                ", "point_set", "=", "coords", "\n", "", "", "extra_batch_size", "=", "configs", ".", "evaluate", ".", "num_votes", "*", "math", ".", "ceil", "(", "total_num_points_in_shape", "/", "dataset", ".", "num_points", ")", "\n", "total_num_voted_points", "=", "extra_batch_size", "*", "dataset", ".", "num_points", "\n", "num_repeats", "=", "math", ".", "ceil", "(", "total_num_voted_points", "/", "total_num_points_in_shape", ")", "\n", "shuffled_point_indices", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "total_num_points_in_shape", ")", ",", "num_repeats", ")", "\n", "shuffled_point_indices", "=", "shuffled_point_indices", "[", ":", "total_num_voted_points", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "shuffled_point_indices", ")", "\n", "start_class", ",", "end_class", "=", "meter", ".", "part_class_to_shape_part_classes", "[", "ground_truth", "[", "0", "]", "]", "\n", "\n", "# model inference", "\n", "inputs", "=", "torch", ".", "from_numpy", "(", "\n", "point_set", "[", ":", ",", "shuffled_point_indices", "]", ".", "reshape", "(", "-", "1", ",", "extra_batch_size", ",", "dataset", ".", "num_points", ")", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", ")", ".", "float", "(", ")", ".", "to", "(", "configs", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "vote_confidences", "=", "F", ".", "softmax", "(", "model", "(", "inputs", ")", ",", "dim", "=", "1", ")", "\n", "vote_confidences", ",", "vote_predictions", "=", "vote_confidences", "[", ":", ",", "start_class", ":", "end_class", ",", ":", "]", ".", "max", "(", "dim", "=", "1", ")", "\n", "vote_confidences", "=", "vote_confidences", ".", "view", "(", "total_num_voted_points", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vote_predictions", "=", "(", "vote_predictions", "+", "start_class", ")", ".", "view", "(", "total_num_voted_points", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "update_shape_predictions", "(", "vote_confidences", ",", "vote_predictions", ",", "shuffled_point_indices", ",", "\n", "confidences", ",", "predictions", ",", "total_num_voted_points", ")", "\n", "update_stats", "(", "stats", ",", "ground_truth", ",", "predictions", ",", "shape_id", ",", "start_class", ",", "end_class", ")", "\n", "\n", "", "np", ".", "save", "(", "configs", ".", "evaluate", ".", "stats_path", ",", "stats", ")", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.clean_data": [[173, 223], ["_class_names[].lower", "len", "len", "range", "range", "[].lower", "abs", "ignored_gt.append", "dc_bboxes.append", "[].lower", "ignored_dt.append", "ignored_gt.append", "ignored_gt.append", "ignored_dt.append", "ignored_dt.append"], "function", ["None"], ["print", "(", "'meanIoU: {:4.2f}'", ".", "format", "(", "stats", "[", ":", ",", "0", "]", ".", "sum", "(", ")", "/", "stats", "[", ":", ",", "1", "]", ".", "sum", "(", ")", "*", "100", ")", ")", "\n", "\n", "\n", "", "@", "numba", ".", "jit", "(", ")", "\n", "def", "update_shape_predictions", "(", "vote_confidences", ",", "vote_predictions", ",", "shuffled_point_indices", ",", "\n", "shape_confidences", ",", "shape_predictions", ",", "total_num_voted_points", ")", ":", "\n", "    ", "for", "p", "in", "range", "(", "total_num_voted_points", ")", ":", "\n", "        ", "point_index", "=", "shuffled_point_indices", "[", "p", "]", "\n", "current_confidence", "=", "vote_confidences", "[", "p", "]", "\n", "if", "current_confidence", ">", "shape_confidences", "[", "point_index", "]", ":", "\n", "            ", "shape_confidences", "[", "point_index", "]", "=", "current_confidence", "\n", "shape_predictions", "[", "point_index", "]", "=", "vote_predictions", "[", "p", "]", "\n", "\n", "\n", "", "", "", "@", "numba", ".", "jit", "(", ")", "\n", "def", "update_stats", "(", "stats", ",", "ground_truth", ",", "predictions", ",", "shape_id", ",", "start_class", ",", "end_class", ")", ":", "\n", "    ", "iou", "=", "0.0", "\n", "for", "i", "in", "range", "(", "start_class", ",", "end_class", ")", ":", "\n", "        ", "igt", "=", "(", "ground_truth", "==", "i", ")", "\n", "ipd", "=", "(", "predictions", "==", "i", ")", "\n", "union", "=", "np", ".", "sum", "(", "igt", "|", "ipd", ")", "\n", "intersection", "=", "np", ".", "sum", "(", "igt", "&", "ipd", ")", "\n", "if", "union", "==", "0", ":", "\n", "            ", "iou", "+=", "1", "\n", "", "else", ":", "\n", "            ", "iou", "+=", "intersection", "/", "union", "\n", "", "", "iou", "/=", "(", "end_class", "-", "start_class", ")", "\n", "stats", "[", "shape_id", "]", "[", "0", "]", "+=", "iou", "\n", "stats", "[", "shape_id", "]", "[", "1", "]", "+=", "1", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "evaluate", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval._prepare_data": [[225, 250], ["range", "numpy.stack", "len", "eval.clean_data", "ignored_gts.append", "ignored_dets.append", "np.stack.append", "dontcares.append", "numpy.concatenate", "numpy.concatenate", "gt_datas_list.append", "dt_datas_list.append", "numpy.array", "numpy.array", "len", "numpy.zeros().astype", "numpy.stack().astype", "numpy.zeros", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.clean_data"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.compute_statistics_jit": [[252, 347], ["numba.jit", "numpy.zeros", "numpy.zeros", "range", "range", "range", "range", "eval.image_box_overlap", "range", "numpy.zeros", "range", "range", "numpy.sum", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.image_box_overlap"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.get_thresholds": [[349, 367], ["scores.sort", "enumerate", "thresholds.append", "len", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.fused_compute_statistics": [[369, 394], ["numba.jit", "range", "enumerate", "eval.compute_statistics_jit"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.compute_statistics_jit"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.eval_class": [[396, 469], ["len", "eval.get_split_parts", "eval.calculate_iou_partly", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "len", "enumerate", "eval._prepare_data", "enumerate", "range", "numpy.array", "eval.get_thresholds", "numpy.array", "numpy.zeros", "enumerate", "range", "range", "len", "eval.compute_statistics_jit", "np.array.tolist", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "eval.fused_compute_statistics", "len", "len", "numpy.max", "len", "numpy.max", "len"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.get_split_parts", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.calculate_iou_partly", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval._prepare_data", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.get_thresholds", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.compute_statistics_jit", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.fused_compute_statistics"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.do_eval": [[471, 479], ["range", "eval.eval_class"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.eval_class"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.print_str": [[481, 488], ["sysio.StringIO.truncate", "sysio.StringIO.seek", "print", "sysio.StringIO.getvalue", "io.StringIO"], "function", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.get_official_eval_result": [[490, 557], ["numpy.array", "eval.do_eval", "dict", "enumerate", "isinstance", "isinstance", "eval.get_map", "eval.get_map", "eval.get_map", "eval.print_str", "eval.print_str", "eval.print_str", "eval.print_str", "class_to_name.items", "current_classes_int.append", "current_classes_int.append", "eval.get_map", "eval.print_str"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.do_eval", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.get_map", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.get_map", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.get_map", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.print_str", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.print_str", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.print_str", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.print_str", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.get_map", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.eval.print_str"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.meters.s3dis.MeterS3DIS.__init__": [[7, 13], ["super().__init__", "s3dis.MeterS3DIS.reset"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum.MeterFrustumKitti.reset"], ["    ", "def", "__init__", "(", "self", ",", "metric", "=", "'iou'", ",", "num_classes", "=", "13", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "metric", "in", "[", "'overall'", ",", "'class'", ",", "'iou'", "]", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.meters.s3dis.MeterS3DIS.reset": [[14, 20], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_seen", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "self", ".", "total_correct", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "self", ".", "total_positive", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "self", ".", "total_seen_num", "=", "0", "\n", "self", ".", "total_correct_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.meters.s3dis.MeterS3DIS.update": [[21, 35], ["outputs.argmax", "targets.numel", "torch.sum().item", "range", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "outputs", ":", "torch", ".", "Tensor", ",", "targets", ":", "torch", ".", "Tensor", ")", ":", "\n", "# outputs: B x 13 x num_points, targets: B x num_points", "\n", "        ", "predictions", "=", "outputs", ".", "argmax", "(", "1", ")", "\n", "if", "self", ".", "metric", "==", "'overall'", ":", "\n", "            ", "self", ".", "total_seen_num", "+=", "targets", ".", "numel", "(", ")", "\n", "self", ".", "total_correct_num", "+=", "torch", ".", "sum", "(", "targets", "==", "predictions", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "# self.metric == 'class' or self.metric == 'iou':", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "itargets", "=", "(", "targets", "==", "i", ")", "\n", "ipredictions", "=", "(", "predictions", "==", "i", ")", "\n", "self", ".", "total_seen", "[", "i", "]", "+=", "torch", ".", "sum", "(", "itargets", ")", ".", "item", "(", ")", "\n", "self", ".", "total_positive", "[", "i", "]", "+=", "torch", ".", "sum", "(", "ipredictions", ")", ".", "item", "(", ")", "\n", "self", ".", "total_correct", "[", "i", "]", "+=", "torch", ".", "sum", "(", "itargets", "&", "ipredictions", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.meters.s3dis.MeterS3DIS.compute": [[36, 58], ["range", "range"], "methods", ["None"], ["", "", "", "def", "compute", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "metric", "==", "'class'", ":", "\n", "            ", "accuracy", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "total_seen", "=", "self", ".", "total_seen", "[", "i", "]", "\n", "if", "total_seen", "==", "0", ":", "\n", "                    ", "accuracy", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "accuracy", "+=", "self", ".", "total_correct", "[", "i", "]", "/", "total_seen", "\n", "", "", "return", "accuracy", "/", "self", ".", "num_classes", "\n", "", "elif", "self", ".", "metric", "==", "'iou'", ":", "\n", "            ", "iou", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "total_seen", "=", "self", ".", "total_seen", "[", "i", "]", "\n", "if", "total_seen", "==", "0", ":", "\n", "                    ", "iou", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "total_correct", "=", "self", ".", "total_correct", "[", "i", "]", "\n", "iou", "+=", "total_correct", "/", "(", "total_seen", "+", "self", ".", "total_positive", "[", "i", "]", "-", "total_correct", ")", "\n", "", "", "return", "iou", "/", "self", ".", "num_classes", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "total_correct_num", "/", "self", ".", "total_seen_num", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.meters.shapenet.MeterShapeNet.__init__": [[27, 41], ["super().__init__", "shapenet.MeterShapeNet.shape_name_to_part_classes.items", "shapenet.MeterShapeNet.reset", "range", "part_class_to_shape_part_classes.append"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum.MeterFrustumKitti.reset"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "50", ",", "num_shapes", "=", "16", ",", "shape_name_to_part_classes", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_shapes", "=", "num_shapes", "\n", "\n", "self", ".", "shape_name_to_part_classes", "=", "default_shape_name_to_part_classes", "if", "shape_name_to_part_classes", "is", "None", "else", "shape_name_to_part_classes", "\n", "part_class_to_shape_part_classes", "=", "[", "]", "\n", "for", "shape_name", ",", "shape_part_classes", "in", "self", ".", "shape_name_to_part_classes", ".", "items", "(", ")", ":", "\n", "            ", "start_class", ",", "end_class", "=", "shape_part_classes", "[", "0", "]", ",", "shape_part_classes", "[", "-", "1", "]", "+", "1", "\n", "for", "_", "in", "range", "(", "start_class", ",", "end_class", ")", ":", "\n", "                ", "part_class_to_shape_part_classes", ".", "append", "(", "(", "start_class", ",", "end_class", ")", ")", "\n", "", "", "self", ".", "part_class_to_shape_part_classes", "=", "part_class_to_shape_part_classes", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.meters.shapenet.MeterShapeNet.reset": [[42, 45], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "iou_sum", "=", "0", "\n", "self", ".", "shape_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.meters.shapenet.MeterShapeNet.update": [[46, 65], ["range", "outputs.size", "range", "torch.argmax", "torch.sum().item", "torch.sum().item", "targets[].item", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "outputs", ":", "torch", ".", "Tensor", ",", "targets", ":", "torch", ".", "Tensor", ")", ":", "\n", "# outputs: B x num_classes x num_points, targets: B x num_points", "\n", "        ", "for", "b", "in", "range", "(", "outputs", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "start_class", ",", "end_class", "=", "self", ".", "part_class_to_shape_part_classes", "[", "targets", "[", "b", ",", "0", "]", ".", "item", "(", ")", "]", "\n", "prediction", "=", "torch", ".", "argmax", "(", "outputs", "[", "b", ",", "start_class", ":", "end_class", ",", ":", "]", ",", "dim", "=", "0", ")", "+", "start_class", "\n", "target", "=", "targets", "[", "b", ",", ":", "]", "\n", "iou", "=", "0.0", "\n", "for", "i", "in", "range", "(", "start_class", ",", "end_class", ")", ":", "\n", "                ", "itarget", "=", "(", "target", "==", "i", ")", "\n", "iprediction", "=", "(", "prediction", "==", "i", ")", "\n", "union", "=", "torch", ".", "sum", "(", "itarget", "|", "iprediction", ")", ".", "item", "(", ")", "\n", "intersection", "=", "torch", ".", "sum", "(", "itarget", "&", "iprediction", ")", ".", "item", "(", ")", "\n", "if", "union", "==", "0", ":", "\n", "                    ", "iou", "+=", "1.0", "\n", "", "else", ":", "\n", "                    ", "iou", "+=", "intersection", "/", "union", "\n", "", "", "iou", "/=", "(", "end_class", "-", "start_class", ")", "\n", "self", ".", "iou_sum", "+=", "iou", "\n", "self", ".", "shape_count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.meters.shapenet.MeterShapeNet.compute": [[66, 68], ["None"], "methods", ["None"], ["", "", "def", "compute", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "iou_sum", "/", "self", ".", "shape_count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum.MeterFrustumKitti.__init__": [[11, 22], ["super().__init__", "size_templates.view", "torch.arange", "frustum.MeterFrustumKitti.reset"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum.MeterFrustumKitti.reset"], ["    ", "def", "__init__", "(", "self", ",", "num_heading_angle_bins", ",", "num_size_templates", ",", "size_templates", ",", "class_name_to_class_id", ",", "\n", "metric", "=", "'iou_3d'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "metric", "in", "[", "'iou_2d'", ",", "'iou_3d'", ",", "'accuracy'", ",", "'iou_3d_accuracy'", ",", "'iou_3d_class_accuracy'", "]", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "num_heading_angle_bins", "=", "num_heading_angle_bins", "\n", "self", ".", "num_size_templates", "=", "num_size_templates", "\n", "self", ".", "size_templates", "=", "size_templates", ".", "view", "(", "self", ".", "num_size_templates", ",", "3", ")", "\n", "self", ".", "heading_angle_bin_centers", "=", "torch", ".", "arange", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "2", "*", "np", ".", "pi", "/", "self", ".", "num_heading_angle_bins", ")", "\n", "self", ".", "class_name_to_class_id", "=", "class_name_to_class_id", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum.MeterFrustumKitti.reset": [[23, 31], ["frustum.MeterFrustumKitti.class_name_to_class_id.keys", "frustum.MeterFrustumKitti.class_name_to_class_id.keys"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_seen_num", "=", "0", "\n", "self", ".", "total_correct_num", "=", "0", "\n", "self", ".", "iou_3d_corrent_num", "=", "0", "\n", "self", ".", "iou_2d_sum", "=", "0", "\n", "self", ".", "iou_3d_sum", "=", "0", "\n", "self", ".", "iou_3d_corrent_num_per_class", "=", "{", "cls", ":", "0", "for", "cls", "in", "self", ".", "class_name_to_class_id", ".", "keys", "(", ")", "}", "\n", "self", ".", "total_seen_num_per_class", "=", "{", "cls", ":", "0", "for", "cls", "in", "self", ".", "class_name_to_class_id", ".", "keys", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum.MeterFrustumKitti.update": [[32, 75], ["mask_logits_target.numel", "torch.sum().item", "targets[].cpu().numpy", "center.size", "torch.arange", "frustum.MeterFrustumKitti.size_templates.to", "frustum.MeterFrustumKitti.heading_angle_bin_centers.to", "torch.argmax", "torch.argmax", "modules.frustum.get_box_corners_3d", "modules.frustum.get_box_corners_3d", "meters.kitti.utils.get_box_iou_3d", "iou_2d.sum", "iou_3d.sum", "numpy.sum", "frustum.MeterFrustumKitti.class_name_to_class_id.items", "modules.frustum.get_box_corners_3d.cpu().numpy", "modules.frustum.get_box_corners_3d.cpu().numpy", "numpy.sum", "numpy.sum", "torch.sum", "targets[].cpu", "modules.frustum.get_box_corners_3d.cpu", "modules.frustum.get_box_corners_3d.cpu", "mask_logits.argmax"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.frustum.get_box_corners_3d", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.frustum.get_box_corners_3d", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.utils.get_box_iou_3d"], ["", "def", "update", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "if", "self", ".", "metric", "==", "'accuracy'", ":", "\n", "            ", "mask_logits", "=", "outputs", "[", "'mask_logits'", "]", "\n", "mask_logits_target", "=", "targets", "[", "'mask_logits'", "]", "\n", "self", ".", "total_seen_num", "+=", "mask_logits_target", ".", "numel", "(", ")", "\n", "self", ".", "total_correct_num", "+=", "torch", ".", "sum", "(", "mask_logits", ".", "argmax", "(", "dim", "=", "1", ")", "==", "mask_logits_target", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "center", "=", "outputs", "[", "'center'", "]", "# (B, 3)", "\n", "heading_scores", "=", "outputs", "[", "'heading_scores'", "]", "# (B, NH)", "\n", "heading_residuals", "=", "outputs", "[", "'heading_residuals'", "]", "# (B, NH)", "\n", "size_scores", "=", "outputs", "[", "'size_scores'", "]", "# (B, NS)", "\n", "size_residuals", "=", "outputs", "[", "'size_residuals'", "]", "# (B, NS, 3)", "\n", "\n", "center_target", "=", "targets", "[", "'center'", "]", "# (B, 3)", "\n", "heading_bin_id_target", "=", "targets", "[", "'heading_bin_id'", "]", "# (B, )", "\n", "heading_residual_target", "=", "targets", "[", "'heading_residual'", "]", "# (B, )", "\n", "size_template_id_target", "=", "targets", "[", "'size_template_id'", "]", "# (B, )", "\n", "size_residual_target", "=", "targets", "[", "'size_residual'", "]", "# (B, 3)", "\n", "class_id_target", "=", "targets", "[", "'class_id'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B, )", "\n", "\n", "batch_size", "=", "center", ".", "size", "(", "0", ")", "\n", "batch_id", "=", "torch", ".", "arange", "(", "batch_size", ",", "device", "=", "center", ".", "device", ")", "\n", "self", ".", "size_templates", "=", "self", ".", "size_templates", ".", "to", "(", "center", ".", "device", ")", "\n", "self", ".", "heading_angle_bin_centers", "=", "self", ".", "heading_angle_bin_centers", ".", "to", "(", "center", ".", "device", ")", "\n", "\n", "heading_bin_id", "=", "torch", ".", "argmax", "(", "heading_scores", ",", "dim", "=", "1", ")", "\n", "heading", "=", "self", ".", "heading_angle_bin_centers", "[", "heading_bin_id", "]", "+", "heading_residuals", "[", "batch_id", ",", "heading_bin_id", "]", "\n", "size_template_id", "=", "torch", ".", "argmax", "(", "size_scores", ",", "dim", "=", "1", ")", "\n", "size", "=", "self", ".", "size_templates", "[", "size_template_id", "]", "+", "size_residuals", "[", "batch_id", ",", "size_template_id", "]", "# (B, 3)", "\n", "corners", "=", "get_box_corners_3d", "(", "centers", "=", "center", ",", "headings", "=", "heading", ",", "sizes", "=", "size", ",", "with_flip", "=", "False", ")", "# (B, 8, 3)", "\n", "heading_target", "=", "self", ".", "heading_angle_bin_centers", "[", "heading_bin_id_target", "]", "+", "heading_residual_target", "# (B, )", "\n", "size_target", "=", "self", ".", "size_templates", "[", "size_template_id_target", "]", "+", "size_residual_target", "# (B, 3)", "\n", "corners_target", "=", "get_box_corners_3d", "(", "centers", "=", "center_target", ",", "headings", "=", "heading_target", ",", "\n", "sizes", "=", "size_target", ",", "with_flip", "=", "False", ")", "# (B, 8, 3)", "\n", "iou_3d", ",", "iou_2d", "=", "get_box_iou_3d", "(", "corners", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "corners_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "iou_2d_sum", "+=", "iou_2d", ".", "sum", "(", ")", "\n", "self", ".", "iou_3d_sum", "+=", "iou_3d", ".", "sum", "(", ")", "\n", "self", ".", "iou_3d_corrent_num", "+=", "np", ".", "sum", "(", "iou_3d", ">=", "0.7", ")", "\n", "self", ".", "total_seen_num", "+=", "batch_size", "\n", "for", "cls", ",", "cls_id", "in", "self", ".", "class_name_to_class_id", ".", "items", "(", ")", ":", "\n", "                ", "mask", "=", "(", "class_id_target", "==", "cls_id", ")", "\n", "self", ".", "iou_3d_corrent_num_per_class", "[", "cls", "]", "+=", "np", ".", "sum", "(", "iou_3d", "[", "mask", "]", ">=", "(", "0.7", "if", "cls", "==", "'Car'", "else", "0.5", ")", ")", "\n", "self", ".", "total_seen_num_per_class", "[", "cls", "]", "+=", "np", ".", "sum", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum.MeterFrustumKitti.compute": [[76, 90], ["sum", "len", "max", "frustum.MeterFrustumKitti.class_name_to_class_id.keys"], "methods", ["None"], ["", "", "", "def", "compute", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "metric", "==", "'iou_3d'", ":", "\n", "            ", "return", "self", ".", "iou_3d_sum", "/", "self", ".", "total_seen_num", "\n", "", "elif", "self", ".", "metric", "==", "'iou_2d'", ":", "\n", "            ", "return", "self", ".", "iou_2d_sum", "/", "self", ".", "total_seen_num", "\n", "", "elif", "self", ".", "metric", "==", "'accuracy'", ":", "\n", "            ", "return", "self", ".", "total_correct_num", "/", "self", ".", "total_seen_num", "\n", "", "elif", "self", ".", "metric", "==", "'iou_3d_accuracy'", ":", "\n", "            ", "return", "self", ".", "iou_3d_corrent_num", "/", "self", ".", "total_seen_num", "\n", "", "elif", "self", ".", "metric", "==", "'iou_3d_class_accuracy'", ":", "\n", "            ", "return", "sum", "(", "self", ".", "iou_3d_corrent_num_per_class", "[", "cls", "]", "/", "max", "(", "self", ".", "total_seen_num_per_class", "[", "cls", "]", ",", "1", ")", "\n", "for", "cls", "in", "self", ".", "class_name_to_class_id", ".", "keys", "(", ")", ")", "/", "len", "(", "self", ".", "class_name_to_class_id", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.utils.poly_area": [[23, 33], ["numba.njit", "numpy.abs", "numpy.dot", "numpy.dot", "numpy.roll", "numpy.roll"], "function", ["None"], ["@", "numba", ".", "njit", "(", ")", "\n", "def", "poly_area", "(", "coords", ")", ":", "\n", "    ", "\"\"\"\n    calculate area of polygon given x-y coordinates\n    (ref: http://stackoverflow.com/questions/24467972/calculate-area-of-polygon-given-x-y-coordinates)\n    :param coords: FloatTensor[4, 2]\n    \"\"\"", "\n", "x", "=", "coords", "[", ":", ",", "0", "]", "\n", "y", "=", "coords", "[", ":", ",", "1", "]", "\n", "return", "0.5", "*", "np", ".", "abs", "(", "np", ".", "dot", "(", "x", ",", "np", ".", "roll", "(", "y", ",", "1", ")", ")", "-", "np", ".", "dot", "(", "y", ",", "np", ".", "roll", "(", "x", ",", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.utils.polygon_clip": [[35, 78], ["utils.polygon_clip.inside"], "function", ["None"], ["", "def", "polygon_clip", "(", "subject_polygon", ",", "clip_polygon", ")", ":", "\n", "    ", "\"\"\"\n    clip a polygon with another polygon\n    (ref: https://rosettacode.org/wiki/Sutherland-Hodgman_polygon_clipping#Python)\n    :param subject_polygon: a list of (x,y) 2d points, any polygon\n    :param clip_polygon: a list of (x,y) 2d points, has to be *convex*\n    :return:\n        a list of (x,y) vertex point for the intersection polygon\n    \"\"\"", "\n", "\n", "def", "inside", "(", "p", ")", ":", "\n", "        ", "return", "(", "cp2", "[", "0", "]", "-", "cp1", "[", "0", "]", ")", "*", "(", "p", "[", "1", "]", "-", "cp1", "[", "1", "]", ")", ">", "(", "cp2", "[", "1", "]", "-", "cp1", "[", "1", "]", ")", "*", "(", "p", "[", "0", "]", "-", "cp1", "[", "0", "]", ")", "\n", "\n", "", "def", "compute_intersection", "(", ")", ":", "\n", "        ", "dc", "=", "[", "cp1", "[", "0", "]", "-", "cp2", "[", "0", "]", ",", "cp1", "[", "1", "]", "-", "cp2", "[", "1", "]", "]", "\n", "dp", "=", "[", "s", "[", "0", "]", "-", "e", "[", "0", "]", ",", "s", "[", "1", "]", "-", "e", "[", "1", "]", "]", "\n", "n1", "=", "cp1", "[", "0", "]", "*", "cp2", "[", "1", "]", "-", "cp1", "[", "1", "]", "*", "cp2", "[", "0", "]", "\n", "n2", "=", "s", "[", "0", "]", "*", "e", "[", "1", "]", "-", "s", "[", "1", "]", "*", "e", "[", "0", "]", "\n", "n3", "=", "1.0", "/", "(", "dc", "[", "0", "]", "*", "dp", "[", "1", "]", "-", "dc", "[", "1", "]", "*", "dp", "[", "0", "]", ")", "\n", "return", "[", "(", "n1", "*", "dp", "[", "0", "]", "-", "n2", "*", "dc", "[", "0", "]", ")", "*", "n3", ",", "(", "n1", "*", "dp", "[", "1", "]", "-", "n2", "*", "dc", "[", "1", "]", ")", "*", "n3", "]", "\n", "\n", "", "output_list", "=", "subject_polygon", "\n", "cp1", "=", "clip_polygon", "[", "-", "1", "]", "\n", "\n", "for", "clip_vertex", "in", "clip_polygon", ":", "\n", "        ", "cp2", "=", "clip_vertex", "\n", "input_list", "=", "output_list", "\n", "output_list", "=", "[", "]", "\n", "s", "=", "input_list", "[", "-", "1", "]", "\n", "\n", "for", "subject_vertex", "in", "input_list", ":", "\n", "            ", "e", "=", "subject_vertex", "\n", "if", "inside", "(", "e", ")", ":", "\n", "                ", "if", "not", "inside", "(", "s", ")", ":", "\n", "                    ", "output_list", ".", "append", "(", "compute_intersection", "(", ")", ")", "\n", "", "output_list", ".", "append", "(", "e", ")", "\n", "", "elif", "inside", "(", "s", ")", ":", "\n", "                ", "output_list", ".", "append", "(", "compute_intersection", "(", ")", ")", "\n", "", "s", "=", "e", "\n", "", "cp1", "=", "cp2", "\n", "if", "len", "(", "output_list", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "", "return", "output_list", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.utils.convex_hull_intersection": [[80, 94], ["utils.polygon_clip", "scipy.spatial.ConvexHull"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.utils.polygon_clip"], ["", "def", "convex_hull_intersection", "(", "p1", ",", "pt", ")", ":", "\n", "    ", "\"\"\"\n    compute area of two convex hull's intersection area\n    :param p1: a list of (x,y) tuples of hull vertices\n    :param pt: a list of (x,y) tuples of hull vertices\n    :return:\n        a list of (x,y) for the intersection and its volume\n    \"\"\"", "\n", "inter_p", "=", "polygon_clip", "(", "p1", ",", "pt", ")", "\n", "if", "inter_p", "is", "not", "None", ":", "\n", "        ", "hull_inter", "=", "ConvexHull", "(", "inter_p", ")", "\n", "return", "inter_p", ",", "hull_inter", ".", "volume", "\n", "", "else", ":", "\n", "        ", "return", "None", ",", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.utils.box_volume_3d": [[96, 102], ["numba.njit", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "", "@", "numba", ".", "njit", "(", ")", "\n", "def", "box_volume_3d", "(", "corners", ")", ":", "\n", "    ", "a", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", ":", ",", "0", "]", "-", "corners", "[", ":", ",", "1", "]", ")", "**", "2", ")", ")", "\n", "b", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", ":", ",", "1", "]", "-", "corners", "[", ":", ",", "2", "]", ")", "**", "2", ")", ")", "\n", "c", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", ":", ",", "0", "]", "-", "corners", "[", ":", ",", "4", "]", ")", "**", "2", ")", ")", "\n", "return", "a", "*", "b", "*", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.utils.get_box_iou_3d": [[104, 141], ["numpy.zeros", "numpy.zeros", "range", "utils.poly_area", "utils.poly_area", "utils.convex_hull_intersection", "min", "max", "utils.box_volume_3d", "utils.box_volume_3d", "utils.get_box_iou_3d", "numpy.array", "numpy.array", "max"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.utils.poly_area", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.utils.poly_area", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.utils.convex_hull_intersection", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.utils.box_volume_3d", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.utils.box_volume_3d", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.utils.get_box_iou_3d"], ["", "def", "get_box_iou_3d", "(", "corners_1", ",", "corners_t", ")", ":", "\n", "    ", "\"\"\"\n    calculate iou of 3d box\n    :param corners_1: FloatTensor[B, 3, 8], assume up direction is negative Y\n    :param corners_t: FloatTensor[B, 3, 8], assume up direction is negative Y\n        NOTE: corner points are in counter clockwise order, e.g.,\n          2--1\n        3--0 5\n        7--4\n    :return:\n        iou_3d: 3D bounding box IoU, FloatTensor[B]\n        iou_2d: bird's eye view 2D bounding box IoU, FloatTensor[B]\n    \"\"\"", "\n", "if", "corners_1", ".", "ndim", "==", "3", ":", "\n", "        ", "batch_size", "=", "corners_1", ".", "shape", "[", "0", "]", "\n", "iou_3d", "=", "np", ".", "zeros", "(", "batch_size", ")", "\n", "iou_2d", "=", "np", ".", "zeros", "(", "batch_size", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "iou_3d", "[", "b", "]", ",", "iou_2d", "[", "b", "]", "=", "get_box_iou_3d", "(", "corners_1", "[", "b", "]", ",", "corners_t", "[", "b", "]", ")", "\n", "", "return", "iou_3d", ",", "iou_2d", "\n", "", "else", ":", "\n", "# corner points are in counter clockwise order", "\n", "        ", "corners_1_upper_xz", "=", "[", "(", "corners_1", "[", "0", ",", "3", "]", ",", "corners_1", "[", "2", ",", "3", "]", ")", ",", "(", "corners_1", "[", "0", ",", "2", "]", ",", "corners_1", "[", "2", ",", "2", "]", ")", ",", "\n", "(", "corners_1", "[", "0", ",", "1", "]", ",", "corners_1", "[", "2", ",", "1", "]", ")", ",", "(", "corners_1", "[", "0", ",", "0", "]", ",", "corners_1", "[", "2", ",", "0", "]", ")", "]", "\n", "corners_t_upper_xz", "=", "[", "(", "corners_t", "[", "0", ",", "3", "]", ",", "corners_t", "[", "2", ",", "3", "]", ")", ",", "(", "corners_t", "[", "0", ",", "2", "]", ",", "corners_t", "[", "2", ",", "2", "]", ")", ",", "\n", "(", "corners_t", "[", "0", ",", "1", "]", ",", "corners_t", "[", "2", ",", "1", "]", ")", ",", "(", "corners_t", "[", "0", ",", "0", "]", ",", "corners_t", "[", "2", ",", "0", "]", ")", "]", "\n", "area_1", "=", "poly_area", "(", "np", ".", "array", "(", "corners_1_upper_xz", ")", ")", "\n", "area_2", "=", "poly_area", "(", "np", ".", "array", "(", "corners_t_upper_xz", ")", ")", "\n", "inter", ",", "inter_area", "=", "convex_hull_intersection", "(", "corners_1_upper_xz", ",", "corners_t_upper_xz", ")", "\n", "iou_2d", "=", "inter_area", "/", "(", "area_1", "+", "area_2", "-", "inter_area", ")", "\n", "y_max", "=", "min", "(", "corners_1", "[", "1", ",", "0", "]", ",", "corners_t", "[", "1", ",", "0", "]", ")", "\n", "y_min", "=", "max", "(", "corners_1", "[", "1", ",", "4", "]", ",", "corners_t", "[", "1", ",", "4", "]", ")", "\n", "inter_vol", "=", "inter_area", "*", "max", "(", "0.0", ",", "y_max", "-", "y_min", ")", "\n", "vol1", "=", "box_volume_3d", "(", "corners_1", ")", "\n", "vol2", "=", "box_volume_3d", "(", "corners_t", ")", "\n", "iou_3d", "=", "inter_vol", "/", "(", "vol1", "+", "vol2", "-", "inter_vol", ")", "\n", "return", "iou_3d", ",", "iou_2d", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum.FrustumKitti.__init__": [[12, 36], ["dict.__init__", "isinstance", "frustum._FrustumKittiDataset", "frustum._FrustumKittiDataset", "enumerate"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["metric", "=", "'iou_3d'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "metric", "in", "[", "'iou_2d'", ",", "'iou_3d'", ",", "'accuracy'", ",", "'iou_3d_accuracy'", ",", "'iou_3d_class_accuracy'", "]", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "num_heading_angle_bins", "=", "num_heading_angle_bins", "\n", "self", ".", "num_size_templates", "=", "num_size_templates", "\n", "self", ".", "size_templates", "=", "size_templates", ".", "view", "(", "self", ".", "num_size_templates", ",", "3", ")", "\n", "self", ".", "heading_angle_bin_centers", "=", "torch", ".", "arange", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "2", "*", "np", ".", "pi", "/", "self", ".", "num_heading_angle_bins", ")", "\n", "self", ".", "class_name_to_class_id", "=", "class_name_to_class_id", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_seen_num", "=", "0", "\n", "self", ".", "total_correct_num", "=", "0", "\n", "self", ".", "iou_3d_corrent_num", "=", "0", "\n", "self", ".", "iou_2d_sum", "=", "0", "\n", "self", ".", "iou_3d_sum", "=", "0", "\n", "self", ".", "iou_3d_corrent_num_per_class", "=", "{", "cls", ":", "0", "for", "cls", "in", "self", ".", "class_name_to_class_id", ".", "keys", "(", ")", "}", "\n", "self", ".", "total_seen_num_per_class", "=", "{", "cls", ":", "0", "for", "cls", "in", "self", ".", "class_name_to_class_id", ".", "keys", "(", ")", "}", "\n", "\n", "", "def", "update", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "if", "self", ".", "metric", "==", "'accuracy'", ":", "\n", "            ", "mask_logits", "=", "outputs", "[", "'mask_logits'", "]", "\n", "mask_logits_target", "=", "targets", "[", "'mask_logits'", "]", "\n", "self", ".", "total_seen_num", "+=", "mask_logits_target", ".", "numel", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum._FrustumKittiDataset.__init__": [[39, 91], ["len", "utils.container.G", "enumerate", "open", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "open", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "pickle.load", "os.path.join", "os.path.join"], "methods", ["None"], ["            ", "center", "=", "outputs", "[", "'center'", "]", "# (B, 3)", "\n", "heading_scores", "=", "outputs", "[", "'heading_scores'", "]", "# (B, NH)", "\n", "heading_residuals", "=", "outputs", "[", "'heading_residuals'", "]", "# (B, NH)", "\n", "size_scores", "=", "outputs", "[", "'size_scores'", "]", "# (B, NS)", "\n", "size_residuals", "=", "outputs", "[", "'size_residuals'", "]", "# (B, NS, 3)", "\n", "\n", "center_target", "=", "targets", "[", "'center'", "]", "# (B, 3)", "\n", "heading_bin_id_target", "=", "targets", "[", "'heading_bin_id'", "]", "# (B, )", "\n", "heading_residual_target", "=", "targets", "[", "'heading_residual'", "]", "# (B, )", "\n", "size_template_id_target", "=", "targets", "[", "'size_template_id'", "]", "# (B, )", "\n", "size_residual_target", "=", "targets", "[", "'size_residual'", "]", "# (B, 3)", "\n", "class_id_target", "=", "targets", "[", "'class_id'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B, )", "\n", "\n", "batch_size", "=", "center", ".", "size", "(", "0", ")", "\n", "batch_id", "=", "torch", ".", "arange", "(", "batch_size", ",", "device", "=", "center", ".", "device", ")", "\n", "self", ".", "size_templates", "=", "self", ".", "size_templates", ".", "to", "(", "center", ".", "device", ")", "\n", "self", ".", "heading_angle_bin_centers", "=", "self", ".", "heading_angle_bin_centers", ".", "to", "(", "center", ".", "device", ")", "\n", "\n", "heading_bin_id", "=", "torch", ".", "argmax", "(", "heading_scores", ",", "dim", "=", "1", ")", "\n", "heading", "=", "self", ".", "heading_angle_bin_centers", "[", "heading_bin_id", "]", "+", "heading_residuals", "[", "batch_id", ",", "heading_bin_id", "]", "\n", "size_template_id", "=", "torch", ".", "argmax", "(", "size_scores", ",", "dim", "=", "1", ")", "\n", "size", "=", "self", ".", "size_templates", "[", "size_template_id", "]", "+", "size_residuals", "[", "batch_id", ",", "size_template_id", "]", "# (B, 3)", "\n", "corners", "=", "get_box_corners_3d", "(", "centers", "=", "center", ",", "headings", "=", "heading", ",", "sizes", "=", "size", ",", "with_flip", "=", "False", ")", "# (B, 8, 3)", "\n", "heading_target", "=", "self", ".", "heading_angle_bin_centers", "[", "heading_bin_id_target", "]", "+", "heading_residual_target", "# (B, )", "\n", "size_target", "=", "self", ".", "size_templates", "[", "size_template_id_target", "]", "+", "size_residual_target", "# (B, 3)", "\n", "corners_target", "=", "get_box_corners_3d", "(", "centers", "=", "center_target", ",", "headings", "=", "heading_target", ",", "\n", "sizes", "=", "size_target", ",", "with_flip", "=", "False", ")", "# (B, 8, 3)", "\n", "iou_3d", ",", "iou_2d", "=", "get_box_iou_3d", "(", "corners", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "corners_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "iou_2d_sum", "+=", "iou_2d", ".", "sum", "(", ")", "\n", "self", ".", "iou_3d_sum", "+=", "iou_3d", ".", "sum", "(", ")", "\n", "self", ".", "iou_3d_corrent_num", "+=", "np", ".", "sum", "(", "iou_3d", ">=", "0.7", ")", "\n", "self", ".", "total_seen_num", "+=", "batch_size", "\n", "for", "cls", ",", "cls_id", "in", "self", ".", "class_name_to_class_id", ".", "items", "(", ")", ":", "\n", "                ", "mask", "=", "(", "class_id_target", "==", "cls_id", ")", "\n", "self", ".", "iou_3d_corrent_num_per_class", "[", "cls", "]", "+=", "np", ".", "sum", "(", "iou_3d", "[", "mask", "]", ">=", "(", "0.7", "if", "cls", "==", "'Car'", "else", "0.5", ")", ")", "\n", "self", ".", "total_seen_num_per_class", "[", "cls", "]", "+=", "np", ".", "sum", "(", "mask", ")", "\n", "\n", "", "", "", "def", "compute", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "metric", "==", "'iou_3d'", ":", "\n", "            ", "return", "self", ".", "iou_3d_sum", "/", "self", ".", "total_seen_num", "\n", "", "elif", "self", ".", "metric", "==", "'iou_2d'", ":", "\n", "            ", "return", "self", ".", "iou_2d_sum", "/", "self", ".", "total_seen_num", "\n", "", "elif", "self", ".", "metric", "==", "'accuracy'", ":", "\n", "            ", "return", "self", ".", "total_correct_num", "/", "self", ".", "total_seen_num", "\n", "", "elif", "self", ".", "metric", "==", "'iou_3d_accuracy'", ":", "\n", "            ", "return", "self", ".", "iou_3d_corrent_num", "/", "self", ".", "total_seen_num", "\n", "", "elif", "self", ".", "metric", "==", "'iou_3d_class_accuracy'", ":", "\n", "            ", "return", "sum", "(", "self", ".", "iou_3d_corrent_num_per_class", "[", "cls", "]", "/", "max", "(", "self", ".", "total_seen_num_per_class", "[", "cls", "]", ",", "1", ")", "\n", "for", "cls", "in", "self", ".", "class_name_to_class_id", ".", "keys", "(", ")", ")", "/", "len", "(", "self", ".", "class_name_to_class_id", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum._FrustumKittiDataset.__len__": [[92, 94], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum._FrustumKittiDataset.__getitem__": [[95, 148], ["numpy.zeros", "one_hot_vector.astype.astype.astype", "numpy.random.choice", "frustum._FrustumKittiDataset.angle_to_bin_id", "frustum._FrustumKittiDataset.rotate_points_along_y", "frustum._FrustumKittiDataset.rotate_points_along_y().squeeze", "numpy.sqrt", "numpy.clip", "numpy.copy", "numpy.random.random", "numpy.sum", "mask_logits.astype", "frustum._FrustumKittiDataset.astype", "numpy.array", "size_residual.astype", "rotation_angle.astype", "frustum._FrustumKittiDataset.rotate_points_along_y", "frustum._FrustumKittiDataset.astype", "frustum._FrustumKittiDataset.astype", "numpy.expand_dims", "numpy.random.randn"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum._FrustumKittiDataset.angle_to_bin_id", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum._FrustumKittiDataset.rotate_points_along_y", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum._FrustumKittiDataset.rotate_points_along_y"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum._FrustumKittiDataset.rotate_points_along_y": [[149, 165], ["numpy.cos", "numpy.sin", "numpy.dot"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.kitti.frustum._FrustumKittiDataset.angle_to_bin_id": [[166, 184], ["int", "float"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.datasets.s3dis._S3DISDataset.__init__": [[11, 59], ["int", "range", "areas.append", "os.listdir", "os.listdir.sort", "os.path.join", "os.path.join", "areas.append", "os.path.join", "h5py.File", "range", "scene_list[].append", "os.path.join", "index_to_filename.append"], "methods", ["None"], ["self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_seen", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "self", ".", "total_correct", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "self", ".", "total_positive", "=", "[", "0", "]", "*", "self", ".", "num_classes", "\n", "self", ".", "total_seen_num", "=", "0", "\n", "self", ".", "total_correct_num", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "outputs", ":", "torch", ".", "Tensor", ",", "targets", ":", "torch", ".", "Tensor", ")", ":", "\n", "# outputs: B x 13 x num_points, targets: B x num_points", "\n", "        ", "predictions", "=", "outputs", ".", "argmax", "(", "1", ")", "\n", "if", "self", ".", "metric", "==", "'overall'", ":", "\n", "            ", "self", ".", "total_seen_num", "+=", "targets", ".", "numel", "(", ")", "\n", "self", ".", "total_correct_num", "+=", "torch", ".", "sum", "(", "targets", "==", "predictions", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "# self.metric == 'class' or self.metric == 'iou':", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "itargets", "=", "(", "targets", "==", "i", ")", "\n", "ipredictions", "=", "(", "predictions", "==", "i", ")", "\n", "self", ".", "total_seen", "[", "i", "]", "+=", "torch", ".", "sum", "(", "itargets", ")", ".", "item", "(", ")", "\n", "self", ".", "total_positive", "[", "i", "]", "+=", "torch", ".", "sum", "(", "ipredictions", ")", ".", "item", "(", ")", "\n", "self", ".", "total_correct", "[", "i", "]", "+=", "torch", ".", "sum", "(", "itargets", "&", "ipredictions", ")", ".", "item", "(", ")", "\n", "\n", "", "", "", "def", "compute", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "metric", "==", "'class'", ":", "\n", "            ", "accuracy", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "total_seen", "=", "self", ".", "total_seen", "[", "i", "]", "\n", "if", "total_seen", "==", "0", ":", "\n", "                    ", "accuracy", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "accuracy", "+=", "self", ".", "total_correct", "[", "i", "]", "/", "total_seen", "\n", "", "", "return", "accuracy", "/", "self", ".", "num_classes", "\n", "", "elif", "self", ".", "metric", "==", "'iou'", ":", "\n", "            ", "iou", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "total_seen", "=", "self", ".", "total_seen", "[", "i", "]", "\n", "if", "total_seen", "==", "0", ":", "\n", "                    ", "iou", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "total_correct", "=", "self", ".", "total_correct", "[", "i", "]", "\n", "iou", "+=", "total_correct", "/", "(", "total_seen", "+", "self", ".", "total_positive", "[", "i", "]", "-", "total_correct", ")", "\n", "", "", "return", "iou", "/", "self", ".", "num_classes", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "total_correct_num", "/", "self", ".", "total_seen_num", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.datasets.s3dis._S3DISDataset.__len__": [[60, 62], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.datasets.s3dis._S3DISDataset.__getitem__": [[63, 95], ["numpy.array().astype", "numpy.array().astype", "numpy.random.choice", "current_window_data[].transpose", "s3dis._S3DISDataset.cache.keys", "h5py.File", "len", "numpy.random.randint", "list", "list.sort", "s3dis._S3DISDataset.cache.pop", "numpy.array", "numpy.array", "s3dis._S3DISDataset.cache.keys", "s3dis._S3DISDataset.cache.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.datasets.s3dis.S3DIS.__init__": [[98, 107], ["dict.__init__", "s3dis._S3DISDataset", "isinstance"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.datasets.shapenet._ShapeNetDataset.__init__": [[11, 47], ["open", "enumerate", "os.path.join", "line.strip().split", "open", "json.load", "os.path.join", "file_path.split", "file_paths.append", "line.strip", "os.path.join"], "methods", ["None"], ["'Chair'", ":", "[", "12", ",", "13", ",", "14", ",", "15", "]", ",", "\n", "'Earphone'", ":", "[", "16", ",", "17", ",", "18", "]", ",", "\n", "'Guitar'", ":", "[", "19", ",", "20", ",", "21", "]", ",", "\n", "'Knife'", ":", "[", "22", ",", "23", "]", ",", "\n", "'Lamp'", ":", "[", "24", ",", "25", ",", "26", ",", "27", "]", ",", "\n", "'Laptop'", ":", "[", "28", ",", "29", "]", ",", "\n", "'Motorbike'", ":", "[", "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", "]", ",", "\n", "'Mug'", ":", "[", "36", ",", "37", "]", ",", "\n", "'Pistol'", ":", "[", "38", ",", "39", ",", "40", "]", ",", "\n", "'Rocket'", ":", "[", "41", ",", "42", ",", "43", "]", ",", "\n", "'Skateboard'", ":", "[", "44", ",", "45", ",", "46", "]", ",", "\n", "'Table'", ":", "[", "47", ",", "48", ",", "49", "]", ",", "\n", "}", "\n", "\n", "\n", "class", "MeterShapeNet", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "50", ",", "num_shapes", "=", "16", ",", "shape_name_to_part_classes", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_shapes", "=", "num_shapes", "\n", "\n", "self", ".", "shape_name_to_part_classes", "=", "default_shape_name_to_part_classes", "if", "shape_name_to_part_classes", "is", "None", "else", "shape_name_to_part_classes", "\n", "part_class_to_shape_part_classes", "=", "[", "]", "\n", "for", "shape_name", ",", "shape_part_classes", "in", "self", ".", "shape_name_to_part_classes", ".", "items", "(", ")", ":", "\n", "            ", "start_class", ",", "end_class", "=", "shape_part_classes", "[", "0", "]", ",", "shape_part_classes", "[", "-", "1", "]", "+", "1", "\n", "for", "_", "in", "range", "(", "start_class", ",", "end_class", ")", ":", "\n", "                ", "part_class_to_shape_part_classes", ".", "append", "(", "(", "start_class", ",", "end_class", ")", ")", "\n", "", "", "self", ".", "part_class_to_shape_part_classes", "=", "part_class_to_shape_part_classes", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "iou_sum", "=", "0", "\n", "self", ".", "shape_count", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "outputs", ":", "torch", ".", "Tensor", ",", "targets", ":", "torch", ".", "Tensor", ")", ":", "\n", "# outputs: B x num_classes x num_points, targets: B x num_points", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.datasets.shapenet._ShapeNetDataset.__getitem__": [[48, 82], ["numpy.random.choice", "coords[].transpose", "numpy.loadtxt().astype", "data[].astype", "shapenet._ShapeNetDataset.jitter_point_cloud", "normal[].transpose", "label[].transpose", "shapenet._ShapeNetDataset.normalize_point_cloud", "len", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "numpy.loadtxt"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.datasets.shapenet._ShapeNetDataset.jitter_point_cloud", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.datasets.shapenet._ShapeNetDataset.normalize_point_cloud"], ["        ", "for", "b", "in", "range", "(", "outputs", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "start_class", ",", "end_class", "=", "self", ".", "part_class_to_shape_part_classes", "[", "targets", "[", "b", ",", "0", "]", ".", "item", "(", ")", "]", "\n", "prediction", "=", "torch", ".", "argmax", "(", "outputs", "[", "b", ",", "start_class", ":", "end_class", ",", ":", "]", ",", "dim", "=", "0", ")", "+", "start_class", "\n", "target", "=", "targets", "[", "b", ",", ":", "]", "\n", "iou", "=", "0.0", "\n", "for", "i", "in", "range", "(", "start_class", ",", "end_class", ")", ":", "\n", "                ", "itarget", "=", "(", "target", "==", "i", ")", "\n", "iprediction", "=", "(", "prediction", "==", "i", ")", "\n", "union", "=", "torch", ".", "sum", "(", "itarget", "|", "iprediction", ")", ".", "item", "(", ")", "\n", "intersection", "=", "torch", ".", "sum", "(", "itarget", "&", "iprediction", ")", ".", "item", "(", ")", "\n", "if", "union", "==", "0", ":", "\n", "                    ", "iou", "+=", "1.0", "\n", "", "else", ":", "\n", "                    ", "iou", "+=", "intersection", "/", "union", "\n", "", "", "iou", "/=", "(", "end_class", "-", "start_class", ")", "\n", "self", ".", "iou_sum", "+=", "iou", "\n", "self", ".", "shape_count", "+=", "1", "\n", "\n", "", "", "def", "compute", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "iou_sum", "/", "self", ".", "shape_count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.datasets.shapenet._ShapeNetDataset.__len__": [[83, 85], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.datasets.shapenet._ShapeNetDataset.normalize_point_cloud": [[86, 91], ["numpy.mean", "numpy.max", "numpy.linalg.norm"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.datasets.shapenet._ShapeNetDataset.jitter_point_cloud": [[92, 102], ["numpy.clip().astype", "numpy.clip", "numpy.random.randn"], "methods", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.datasets.shapenet.ShapeNet.__init__": [[105, 116], ["dict.__init__", "shapenet._ShapeNetDataset", "isinstance"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.ball_query.BallQuery.__init__": [[10, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "radius", ",", "num_neighbors", ",", "include_coordinates", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "num_neighbors", "=", "num_neighbors", "\n", "self", ".", "include_coordinates", "=", "include_coordinates", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.ball_query.BallQuery.forward": [[16, 31], ["points_coords.contiguous.contiguous.contiguous", "centers_coords.contiguous.contiguous.contiguous", "modules.ball_query", "modules.grouping", "centers_coords.contiguous.contiguous.unsqueeze", "modules.grouping", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.ball_query.ball_query"], ["", "def", "forward", "(", "self", ",", "points_coords", ",", "centers_coords", ",", "points_features", "=", "None", ")", ":", "\n", "        ", "points_coords", "=", "points_coords", ".", "contiguous", "(", ")", "\n", "centers_coords", "=", "centers_coords", ".", "contiguous", "(", ")", "\n", "neighbor_indices", "=", "F", ".", "ball_query", "(", "centers_coords", ",", "points_coords", ",", "self", ".", "radius", ",", "self", ".", "num_neighbors", ")", "\n", "neighbor_coordinates", "=", "F", ".", "grouping", "(", "points_coords", ",", "neighbor_indices", ")", "\n", "neighbor_coordinates", "=", "neighbor_coordinates", "-", "centers_coords", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "if", "points_features", "is", "None", ":", "\n", "            ", "assert", "self", ".", "include_coordinates", ",", "'No Features For Grouping'", "\n", "neighbor_features", "=", "neighbor_coordinates", "\n", "", "else", ":", "\n", "            ", "neighbor_features", "=", "F", ".", "grouping", "(", "points_features", ",", "neighbor_indices", ")", "\n", "if", "self", ".", "include_coordinates", ":", "\n", "                ", "neighbor_features", "=", "torch", ".", "cat", "(", "[", "neighbor_coordinates", ",", "neighbor_features", "]", ",", "dim", "=", "1", ")", "\n", "", "", "return", "neighbor_features", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.ball_query.BallQuery.extra_repr": [[32, 35], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'radius={}, num_neighbors={}{}'", ".", "format", "(", "\n", "self", ".", "radius", ",", "self", ".", "num_neighbors", ",", "', include coordinates'", "if", "self", ".", "include_coordinates", "else", "''", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.loss.KLLoss.forward": [[9, 11], ["modules.kl_loss"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.loss.kl_loss"], ["    ", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "F", ".", "kl_loss", "(", "x", ",", "y", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.pointnet.PointNetAModule.__init__": [[12, 31], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "isinstance", "mlps.append", "isinstance", "modules.shared_mlp.SharedMLP"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "include_coordinates", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "out_channels", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "[", "out_channels", "]", "]", "\n", "", "elif", "not", "isinstance", "(", "out_channels", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "out_channels", "]", "\n", "\n", "", "mlps", "=", "[", "]", "\n", "total_out_channels", "=", "0", "\n", "for", "_out_channels", "in", "out_channels", ":", "\n", "            ", "mlps", ".", "append", "(", "\n", "SharedMLP", "(", "in_channels", "=", "in_channels", "+", "(", "3", "if", "include_coordinates", "else", "0", ")", ",", "\n", "out_channels", "=", "_out_channels", ",", "dim", "=", "1", ")", "\n", ")", "\n", "total_out_channels", "+=", "_out_channels", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "include_coordinates", "=", "include_coordinates", "\n", "self", ".", "out_channels", "=", "total_out_channels", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", "mlps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.pointnet.PointNetAModule.forward": [[32, 44], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.zeros.size", "torch.zeros.size", "features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mlp().max", "mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", ",", "coords", "=", "inputs", "\n", "if", "self", ".", "include_coordinates", ":", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "coords", "]", ",", "dim", "=", "1", ")", "\n", "", "coords", "=", "torch", ".", "zeros", "(", "(", "coords", ".", "size", "(", "0", ")", ",", "3", ",", "1", ")", ",", "device", "=", "coords", ".", "device", ")", "\n", "if", "len", "(", "self", ".", "mlps", ")", ">", "1", ":", "\n", "            ", "features_list", "=", "[", "]", "\n", "for", "mlp", "in", "self", ".", "mlps", ":", "\n", "                ", "features_list", ".", "append", "(", "mlp", "(", "features", ")", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "values", ")", "\n", "", "return", "torch", ".", "cat", "(", "features_list", ",", "dim", "=", "1", ")", ",", "coords", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "mlps", "[", "0", "]", "(", "features", ")", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "values", ",", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.pointnet.PointNetAModule.extra_repr": [[45, 47], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'out_channels={self.out_channels}, include_coordinates={self.include_coordinates}'", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.pointnet.PointNetSAModule.__init__": [[50, 79], ["torch.Module.__init__", "zip", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "isinstance", "isinstance", "len", "len", "isinstance", "len", "len", "groupers.append", "mlps.append", "len", "len", "isinstance", "modules.ball_query.BallQuery", "modules.shared_mlp.SharedMLP", "len"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_centers", ",", "radius", ",", "num_neighbors", ",", "in_channels", ",", "out_channels", ",", "include_coordinates", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "radius", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "radius", "=", "[", "radius", "]", "\n", "", "if", "not", "isinstance", "(", "num_neighbors", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "num_neighbors", "=", "[", "num_neighbors", "]", "*", "len", "(", "radius", ")", "\n", "", "assert", "len", "(", "radius", ")", "==", "len", "(", "num_neighbors", ")", "\n", "if", "not", "isinstance", "(", "out_channels", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "[", "out_channels", "]", "]", "*", "len", "(", "radius", ")", "\n", "", "elif", "not", "isinstance", "(", "out_channels", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "out_channels", "]", "*", "len", "(", "radius", ")", "\n", "", "assert", "len", "(", "radius", ")", "==", "len", "(", "out_channels", ")", "\n", "\n", "groupers", ",", "mlps", "=", "[", "]", ",", "[", "]", "\n", "total_out_channels", "=", "0", "\n", "for", "_radius", ",", "_out_channels", ",", "_num_neighbors", "in", "zip", "(", "radius", ",", "out_channels", ",", "num_neighbors", ")", ":", "\n", "            ", "groupers", ".", "append", "(", "\n", "BallQuery", "(", "radius", "=", "_radius", ",", "num_neighbors", "=", "_num_neighbors", ",", "include_coordinates", "=", "include_coordinates", ")", "\n", ")", "\n", "mlps", ".", "append", "(", "\n", "SharedMLP", "(", "in_channels", "=", "in_channels", "+", "(", "3", "if", "include_coordinates", "else", "0", ")", ",", "\n", "out_channels", "=", "_out_channels", ",", "dim", "=", "2", ")", "\n", ")", "\n", "total_out_channels", "+=", "_out_channels", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "num_centers", "=", "num_centers", "\n", "self", ".", "out_channels", "=", "total_out_channels", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", "groupers", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", "mlps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.pointnet.PointNetSAModule.forward": [[80, 90], ["modules.furthest_point_sample", "zip", "features_list.append", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mlp().max", "mlp", "grouper"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.sampling.furthest_point_sample"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", ",", "coords", "=", "inputs", "\n", "centers_coords", "=", "F", ".", "furthest_point_sample", "(", "coords", ",", "self", ".", "num_centers", ")", "\n", "features_list", "=", "[", "]", "\n", "for", "grouper", ",", "mlp", "in", "zip", "(", "self", ".", "groupers", ",", "self", ".", "mlps", ")", ":", "\n", "            ", "features_list", ".", "append", "(", "mlp", "(", "grouper", "(", "coords", ",", "centers_coords", ",", "features", ")", ")", ".", "max", "(", "dim", "=", "-", "1", ")", ".", "values", ")", "\n", "", "if", "len", "(", "features_list", ")", ">", "1", ":", "\n", "            ", "return", "torch", ".", "cat", "(", "features_list", ",", "dim", "=", "1", ")", ",", "centers_coords", "\n", "", "else", ":", "\n", "            ", "return", "features_list", "[", "0", "]", ",", "centers_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.pointnet.PointNetSAModule.extra_repr": [[91, 93], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'num_centers={self.num_centers}, out_channels={self.out_channels}'", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.pointnet.PointNetFPModule.__init__": [[96, 99], ["torch.Module.__init__", "modules.shared_mlp.SharedMLP"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "SharedMLP", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.pointnet.PointNetFPModule.forward": [[100, 112], ["modules.nearest_neighbor_interpolate", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pointnet.PointNetFPModule.mlp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "len", "(", "inputs", ")", "==", "3", ":", "\n", "            ", "points_coords", ",", "centers_coords", ",", "centers_features", "=", "inputs", "\n", "points_features", "=", "None", "\n", "", "else", ":", "\n", "            ", "points_coords", ",", "centers_coords", ",", "centers_features", ",", "points_features", "=", "inputs", "\n", "", "interpolated_features", "=", "F", ".", "nearest_neighbor_interpolate", "(", "points_coords", ",", "centers_coords", ",", "centers_features", ")", "\n", "if", "points_features", "is", "not", "None", ":", "\n", "            ", "interpolated_features", "=", "torch", ".", "cat", "(", "\n", "[", "interpolated_features", ",", "points_features", "]", ",", "dim", "=", "1", "\n", ")", "\n", "", "return", "self", ".", "mlp", "(", "interpolated_features", ")", ",", "points_coords", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.pvconv.PVConv.__init__": [[12, 32], ["torch.Module.__init__", "modules.voxelization.Voxelization", "torch.Sequential", "modules.shared_mlp.SharedMLP", "torch.Conv3d", "torch.BatchNorm3d", "torch.LeakyReLU", "torch.Conv3d", "torch.BatchNorm3d", "torch.LeakyReLU", "voxel_layers.append", "modules.se.SE3d"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "resolution", ",", "with_se", "=", "False", ",", "normalize", "=", "True", ",", "eps", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "resolution", "=", "resolution", "\n", "\n", "self", ".", "voxelization", "=", "Voxelization", "(", "resolution", ",", "normalize", "=", "normalize", ",", "eps", "=", "eps", ")", "\n", "voxel_layers", "=", "[", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "kernel_size", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ",", "eps", "=", "1e-4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "nn", ".", "Conv3d", "(", "out_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "kernel_size", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ",", "eps", "=", "1e-4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "\n", "]", "\n", "if", "with_se", ":", "\n", "            ", "voxel_layers", ".", "append", "(", "SE3d", "(", "out_channels", ")", ")", "\n", "", "self", ".", "voxel_layers", "=", "nn", ".", "Sequential", "(", "*", "voxel_layers", ")", "\n", "self", ".", "point_features", "=", "SharedMLP", "(", "in_channels", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.pvconv.PVConv.forward": [[33, 40], ["pvconv.PVConv.voxelization", "pvconv.PVConv.voxel_layers", "modules.trilinear_devoxelize", "pvconv.PVConv.point_features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", ",", "coords", "=", "inputs", "\n", "voxel_features", ",", "voxel_coords", "=", "self", ".", "voxelization", "(", "features", ",", "coords", ")", "\n", "voxel_features", "=", "self", ".", "voxel_layers", "(", "voxel_features", ")", "\n", "voxel_features", "=", "F", ".", "trilinear_devoxelize", "(", "voxel_features", ",", "voxel_coords", ",", "self", ".", "resolution", ",", "self", ".", "training", ")", "\n", "fused_features", "=", "voxel_features", "+", "self", ".", "point_features", "(", "features", ")", "\n", "return", "fused_features", ",", "coords", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.se.SE3d.__init__": [[7, 14], ["torch.Module.__init__", "torch.Sequential", "torch.Linear", "torch.ReLU", "torch.Linear", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "8", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.se.SE3d.forward": [[16, 18], ["se.SE3d.fc().view", "se.SE3d.fc", "inputs.mean().mean().mean", "inputs.mean().mean", "inputs.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "inputs", "*", "self", ".", "fc", "(", "inputs", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", ")", ".", "view", "(", "inputs", ".", "shape", "[", "0", "]", ",", "inputs", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.shared_mlp.SharedMLP.__init__": [[7, 28], ["torch.Module.__init__", "torch.Sequential", "isinstance", "layers.extend", "conv", "bn", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "dim", "==", "1", ":", "\n", "            ", "conv", "=", "nn", ".", "Conv1d", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "\n", "", "elif", "dim", "==", "2", ":", "\n", "            ", "conv", "=", "nn", ".", "Conv2d", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "", "if", "not", "isinstance", "(", "out_channels", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "out_channels", "]", "\n", "", "layers", "=", "[", "]", "\n", "for", "oc", "in", "out_channels", ":", "\n", "            ", "layers", ".", "extend", "(", "[", "\n", "conv", "(", "in_channels", ",", "oc", ",", "1", ")", ",", "\n", "bn", "(", "oc", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "]", ")", "\n", "in_channels", "=", "oc", "\n", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.shared_mlp.SharedMLP.forward": [[29, 34], ["isinstance", "shared_mlp.SharedMLP.layers", "shared_mlp.SharedMLP.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "return", "(", "self", ".", "layers", "(", "inputs", "[", "0", "]", ")", ",", "*", "inputs", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "layers", "(", "inputs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.frustum.FrustumPointNetLoss.__init__": [[12, 25], ["torch.Module.__init__", "frustum.FrustumPointNetLoss.register_buffer", "frustum.FrustumPointNetLoss.register_buffer", "size_templates.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["metric", "=", "'iou_3d'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "metric", "in", "[", "'iou_2d'", ",", "'iou_3d'", ",", "'accuracy'", ",", "'iou_3d_accuracy'", ",", "'iou_3d_class_accuracy'", "]", "\n", "self", ".", "metric", "=", "metric", "\n", "self", ".", "num_heading_angle_bins", "=", "num_heading_angle_bins", "\n", "self", ".", "num_size_templates", "=", "num_size_templates", "\n", "self", ".", "size_templates", "=", "size_templates", ".", "view", "(", "self", ".", "num_size_templates", ",", "3", ")", "\n", "self", ".", "heading_angle_bin_centers", "=", "torch", ".", "arange", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "2", "*", "np", ".", "pi", "/", "self", ".", "num_heading_angle_bins", ")", "\n", "self", ".", "class_name_to_class_id", "=", "class_name_to_class_id", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "total_seen_num", "=", "0", "\n", "self", ".", "total_correct_num", "=", "0", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.frustum.FrustumPointNetLoss.forward": [[27, 90], ["center.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "modules.huber_loss", "modules.huber_loss", "modules.huber_loss", "modules.huber_loss", "frustum.get_box_corners_3d", "frustum.get_box_corners_3d", "modules.huber_loss", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.loss.huber_loss", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.loss.huber_loss", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.loss.huber_loss", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.loss.huber_loss", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.frustum.get_box_corners_3d", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.frustum.get_box_corners_3d", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.loss.huber_loss"], ["self", ".", "iou_2d_sum", "=", "0", "\n", "self", ".", "iou_3d_sum", "=", "0", "\n", "self", ".", "iou_3d_corrent_num_per_class", "=", "{", "cls", ":", "0", "for", "cls", "in", "self", ".", "class_name_to_class_id", ".", "keys", "(", ")", "}", "\n", "self", ".", "total_seen_num_per_class", "=", "{", "cls", ":", "0", "for", "cls", "in", "self", ".", "class_name_to_class_id", ".", "keys", "(", ")", "}", "\n", "\n", "", "def", "update", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "if", "self", ".", "metric", "==", "'accuracy'", ":", "\n", "            ", "mask_logits", "=", "outputs", "[", "'mask_logits'", "]", "\n", "mask_logits_target", "=", "targets", "[", "'mask_logits'", "]", "\n", "self", ".", "total_seen_num", "+=", "mask_logits_target", ".", "numel", "(", ")", "\n", "self", ".", "total_correct_num", "+=", "torch", ".", "sum", "(", "mask_logits", ".", "argmax", "(", "dim", "=", "1", ")", "==", "mask_logits_target", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "center", "=", "outputs", "[", "'center'", "]", "# (B, 3)", "\n", "heading_scores", "=", "outputs", "[", "'heading_scores'", "]", "# (B, NH)", "\n", "heading_residuals", "=", "outputs", "[", "'heading_residuals'", "]", "# (B, NH)", "\n", "size_scores", "=", "outputs", "[", "'size_scores'", "]", "# (B, NS)", "\n", "size_residuals", "=", "outputs", "[", "'size_residuals'", "]", "# (B, NS, 3)", "\n", "\n", "center_target", "=", "targets", "[", "'center'", "]", "# (B, 3)", "\n", "heading_bin_id_target", "=", "targets", "[", "'heading_bin_id'", "]", "# (B, )", "\n", "heading_residual_target", "=", "targets", "[", "'heading_residual'", "]", "# (B, )", "\n", "size_template_id_target", "=", "targets", "[", "'size_template_id'", "]", "# (B, )", "\n", "size_residual_target", "=", "targets", "[", "'size_residual'", "]", "# (B, 3)", "\n", "class_id_target", "=", "targets", "[", "'class_id'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B, )", "\n", "\n", "batch_size", "=", "center", ".", "size", "(", "0", ")", "\n", "batch_id", "=", "torch", ".", "arange", "(", "batch_size", ",", "device", "=", "center", ".", "device", ")", "\n", "self", ".", "size_templates", "=", "self", ".", "size_templates", ".", "to", "(", "center", ".", "device", ")", "\n", "self", ".", "heading_angle_bin_centers", "=", "self", ".", "heading_angle_bin_centers", ".", "to", "(", "center", ".", "device", ")", "\n", "\n", "heading_bin_id", "=", "torch", ".", "argmax", "(", "heading_scores", ",", "dim", "=", "1", ")", "\n", "heading", "=", "self", ".", "heading_angle_bin_centers", "[", "heading_bin_id", "]", "+", "heading_residuals", "[", "batch_id", ",", "heading_bin_id", "]", "\n", "size_template_id", "=", "torch", ".", "argmax", "(", "size_scores", ",", "dim", "=", "1", ")", "\n", "size", "=", "self", ".", "size_templates", "[", "size_template_id", "]", "+", "size_residuals", "[", "batch_id", ",", "size_template_id", "]", "# (B, 3)", "\n", "corners", "=", "get_box_corners_3d", "(", "centers", "=", "center", ",", "headings", "=", "heading", ",", "sizes", "=", "size", ",", "with_flip", "=", "False", ")", "# (B, 8, 3)", "\n", "heading_target", "=", "self", ".", "heading_angle_bin_centers", "[", "heading_bin_id_target", "]", "+", "heading_residual_target", "# (B, )", "\n", "size_target", "=", "self", ".", "size_templates", "[", "size_template_id_target", "]", "+", "size_residual_target", "# (B, 3)", "\n", "corners_target", "=", "get_box_corners_3d", "(", "centers", "=", "center_target", ",", "headings", "=", "heading_target", ",", "\n", "sizes", "=", "size_target", ",", "with_flip", "=", "False", ")", "# (B, 8, 3)", "\n", "iou_3d", ",", "iou_2d", "=", "get_box_iou_3d", "(", "corners", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "corners_target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "iou_2d_sum", "+=", "iou_2d", ".", "sum", "(", ")", "\n", "self", ".", "iou_3d_sum", "+=", "iou_3d", ".", "sum", "(", ")", "\n", "self", ".", "iou_3d_corrent_num", "+=", "np", ".", "sum", "(", "iou_3d", ">=", "0.7", ")", "\n", "self", ".", "total_seen_num", "+=", "batch_size", "\n", "for", "cls", ",", "cls_id", "in", "self", ".", "class_name_to_class_id", ".", "items", "(", ")", ":", "\n", "                ", "mask", "=", "(", "class_id_target", "==", "cls_id", ")", "\n", "self", ".", "iou_3d_corrent_num_per_class", "[", "cls", "]", "+=", "np", ".", "sum", "(", "iou_3d", "[", "mask", "]", ">=", "(", "0.7", "if", "cls", "==", "'Car'", "else", "0.5", ")", ")", "\n", "self", ".", "total_seen_num_per_class", "[", "cls", "]", "+=", "np", ".", "sum", "(", "mask", ")", "\n", "\n", "", "", "", "def", "compute", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "metric", "==", "'iou_3d'", ":", "\n", "            ", "return", "self", ".", "iou_3d_sum", "/", "self", ".", "total_seen_num", "\n", "", "elif", "self", ".", "metric", "==", "'iou_2d'", ":", "\n", "            ", "return", "self", ".", "iou_2d_sum", "/", "self", ".", "total_seen_num", "\n", "", "elif", "self", ".", "metric", "==", "'accuracy'", ":", "\n", "            ", "return", "self", ".", "total_correct_num", "/", "self", ".", "total_seen_num", "\n", "", "elif", "self", ".", "metric", "==", "'iou_3d_accuracy'", ":", "\n", "            ", "return", "self", ".", "iou_3d_corrent_num", "/", "self", ".", "total_seen_num", "\n", "", "elif", "self", ".", "metric", "==", "'iou_3d_class_accuracy'", ":", "\n", "            ", "return", "sum", "(", "self", ".", "iou_3d_corrent_num_per_class", "[", "cls", "]", "/", "max", "(", "self", ".", "total_seen_num_per_class", "[", "cls", "]", ",", "1", ")", "\n", "for", "cls", "in", "self", ".", "class_name_to_class_id", ".", "keys", "(", ")", ")", "/", "len", "(", "self", ".", "class_name_to_class_id", ")", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.frustum.get_box_corners_3d": [[92, 125], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cos", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.sin", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "centers.unsqueeze.unsqueeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack", "torch.stack", "torch.stack", "torch.matmul", "torch.matmul", "torch.matmul", "torch.stack", "torch.stack", "torch.stack", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "function", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.voxelization.Voxelization.__init__": [[10, 15], ["torch.Module.__init__", "int"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "resolution", ",", "normalize", "=", "True", ",", "eps", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "r", "=", "int", "(", "resolution", ")", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.voxelization.Voxelization.forward": [[16, 26], ["coords.detach.detach.detach", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.round().to", "torch.round().to", "torch.round().to", "torch.round().to", "coords.detach.detach.mean", "modules.avg_voxelize", "torch.round", "torch.round", "torch.round", "torch.round", "torch.clamp.norm().max", "torch.clamp.norm().max", "torch.clamp.norm", "torch.clamp.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "coords", ")", ":", "\n", "        ", "coords", "=", "coords", ".", "detach", "(", ")", "\n", "norm_coords", "=", "coords", "-", "coords", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "norm_coords", "=", "norm_coords", "/", "(", "norm_coords", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "max", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "values", "*", "2.0", "+", "self", ".", "eps", ")", "+", "0.5", "\n", "", "else", ":", "\n", "            ", "norm_coords", "=", "(", "norm_coords", "+", "1", ")", "/", "2.0", "\n", "", "norm_coords", "=", "torch", ".", "clamp", "(", "norm_coords", "*", "self", ".", "r", ",", "0", ",", "self", ".", "r", "-", "1", ")", "\n", "vox_coords", "=", "torch", ".", "round", "(", "norm_coords", ")", ".", "to", "(", "torch", ".", "int32", ")", "\n", "return", "F", ".", "avg_voxelize", "(", "features", ",", "vox_coords", ",", "self", ".", "r", ")", ",", "norm_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.modules.voxelization.Voxelization.extra_repr": [[27, 29], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'resolution={}{}'", ".", "format", "(", "self", ".", "r", ",", "', normalized eps = {}'", ".", "format", "(", "self", ".", "eps", ")", "if", "self", ".", "normalize", "else", "''", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.devoxelization.TrilinearDevoxelization.forward": [[9, 28], ["features.contiguous().view.contiguous().view.contiguous().view", "coords.contiguous.contiguous.contiguous", "modules.functional.backend._backend.trilinear_devoxelize_forward", "ctx.save_for_backward", "features.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "coords", ",", "resolution", ",", "is_training", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param coords: the coordinates of points, FloatTensor[B, 3, N]\n        :param features: FloatTensor[B, C, R, R, R]\n        :param resolution: int, the voxel resolution\n        :param is_training: bool, training mode\n        :return:\n            FloatTensor[B, C, N]\n        \"\"\"", "\n", "B", ",", "C", "=", "features", ".", "shape", "[", ":", "2", "]", "\n", "features", "=", "features", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "C", ",", "-", "1", ")", "\n", "coords", "=", "coords", ".", "contiguous", "(", ")", "\n", "outs", ",", "inds", ",", "wgts", "=", "_backend", ".", "trilinear_devoxelize_forward", "(", "resolution", ",", "is_training", ",", "coords", ",", "features", ")", "\n", "if", "is_training", ":", "\n", "            ", "ctx", ".", "save_for_backward", "(", "inds", ",", "wgts", ")", "\n", "ctx", ".", "r", "=", "resolution", "\n", "", "return", "outs", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.devoxelization.TrilinearDevoxelization.backward": [[29, 40], ["modules.functional.backend._backend.trilinear_devoxelize_backward", "grad_output.contiguous", "modules.functional.backend._backend.trilinear_devoxelize_backward.view", "grad_output.size", "grad_output.size"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "\"\"\"\n        :param ctx: \n        :param grad_output: gradient of outputs, FloatTensor[B, C, N]\n        :return:\n            gradient of inputs, FloatTensor[B, C, R, R, R]\n        \"\"\"", "\n", "inds", ",", "wgts", "=", "ctx", ".", "saved_tensors", "\n", "grad_inputs", "=", "_backend", ".", "trilinear_devoxelize_backward", "(", "grad_output", ".", "contiguous", "(", ")", ",", "inds", ",", "wgts", ",", "ctx", ".", "r", ")", "\n", "return", "grad_inputs", ".", "view", "(", "grad_output", ".", "size", "(", "0", ")", ",", "grad_output", ".", "size", "(", "1", ")", ",", "ctx", ".", "r", ",", "ctx", ".", "r", ",", "ctx", ".", "r", ")", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.ball_query.ball_query": [[8, 20], ["centers_coords.contiguous.contiguous", "points_coords.contiguous.contiguous", "modules.functional.backend._backend.ball_query"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.ball_query.ball_query"], ["\n", "class", "BallQuery", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "radius", ",", "num_neighbors", ",", "include_coordinates", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "num_neighbors", "=", "num_neighbors", "\n", "self", ".", "include_coordinates", "=", "include_coordinates", "\n", "\n", "", "def", "forward", "(", "self", ",", "points_coords", ",", "centers_coords", ",", "points_features", "=", "None", ")", ":", "\n", "        ", "points_coords", "=", "points_coords", ".", "contiguous", "(", ")", "\n", "centers_coords", "=", "centers_coords", ".", "contiguous", "(", ")", "\n", "neighbor_indices", "=", "F", ".", "ball_query", "(", "centers_coords", ",", "points_coords", ",", "self", ".", "radius", ",", "self", ".", "num_neighbors", ")", "\n", "neighbor_coordinates", "=", "F", ".", "grouping", "(", "points_coords", ",", "neighbor_indices", ")", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.interpolatation.NeighborInterpolation.forward": [[9, 28], ["centers_coords.contiguous.contiguous.contiguous", "points_coords.contiguous.contiguous.contiguous", "centers_features.contiguous.contiguous.contiguous", "modules.functional.backend._backend.three_nearest_neighbors_interpolate_forward", "ctx.save_for_backward", "centers_coords.contiguous.contiguous.size"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "points_coords", ",", "centers_coords", ",", "centers_features", ")", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param points_coords: coordinates of points, FloatTensor[B, 3, N]\n        :param centers_coords: coordinates of centers, FloatTensor[B, 3, M]\n        :param centers_features: features of centers, FloatTensor[B, C, M]\n        :return:\n            points_features: features of points, FloatTensor[B, C, N]\n        \"\"\"", "\n", "centers_coords", "=", "centers_coords", ".", "contiguous", "(", ")", "\n", "points_coords", "=", "points_coords", ".", "contiguous", "(", ")", "\n", "centers_features", "=", "centers_features", ".", "contiguous", "(", ")", "\n", "points_features", ",", "indices", ",", "weights", "=", "_backend", ".", "three_nearest_neighbors_interpolate_forward", "(", "\n", "points_coords", ",", "centers_coords", ",", "centers_features", "\n", ")", "\n", "ctx", ".", "save_for_backward", "(", "indices", ",", "weights", ")", "\n", "ctx", ".", "num_centers", "=", "centers_coords", ".", "size", "(", "-", "1", ")", "\n", "return", "points_features", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.interpolatation.NeighborInterpolation.backward": [[29, 36], ["modules.functional.backend._backend.three_nearest_neighbors_interpolate_backward", "grad_output.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "indices", ",", "weights", "=", "ctx", ".", "saved_tensors", "\n", "grad_centers_features", "=", "_backend", ".", "three_nearest_neighbors_interpolate_backward", "(", "\n", "grad_output", ".", "contiguous", "(", ")", ",", "indices", ",", "weights", ",", "ctx", ".", "num_centers", "\n", ")", "\n", "return", "None", ",", "None", ",", "grad_centers_features", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.loss.kl_loss": [[7, 11], ["torch.softmax", "torch.log_softmax", "torch.mean", "torch.mean", "F.softmax.detach", "torch.sum", "torch.sum", "torch.log", "torch.log"], "function", ["None"], ["\n", "class", "KLLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "return", "F", ".", "kl_loss", "(", "x", ",", "y", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.loss.huber_loss": [[13, 18], ["torch.abs", "torch.abs", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.full_like", "torch.full_like"], "function", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.grouping.Grouping.forward": [[9, 23], ["features.contiguous.contiguous.contiguous", "indices.contiguous.contiguous.contiguous", "ctx.save_for_backward", "features.contiguous.contiguous.size", "modules.functional.backend._backend.grouping_forward"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "indices", ")", ":", "\n", "        ", "\"\"\"\n        :param ctx:\n        :param features: features of points, FloatTensor[B, C, N]\n        :param indices: neighbor indices of centers, IntTensor[B, M, U], M is #centers, U is #neighbors\n        :return:\n            grouped_features: grouped features, FloatTensor[B, C, M, U]\n        \"\"\"", "\n", "features", "=", "features", ".", "contiguous", "(", ")", "\n", "indices", "=", "indices", ".", "contiguous", "(", ")", "\n", "ctx", ".", "save_for_backward", "(", "indices", ")", "\n", "ctx", ".", "num_points", "=", "features", ".", "size", "(", "-", "1", ")", "\n", "return", "_backend", ".", "grouping_forward", "(", "features", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.grouping.Grouping.backward": [[24, 29], ["modules.functional.backend._backend.grouping_backward", "grad_output.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "indices", ",", "=", "ctx", ".", "saved_tensors", "\n", "grad_features", "=", "_backend", ".", "grouping_backward", "(", "grad_output", ".", "contiguous", "(", ")", ",", "indices", ",", "ctx", ".", "num_points", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.sampling.Gather.forward": [[11, 26], ["features.contiguous.contiguous.contiguous", "indices.int().contiguous.int().contiguous.int().contiguous", "ctx.save_for_backward", "features.contiguous.contiguous.size", "modules.functional.backend._backend.gather_features_forward", "indices.int().contiguous.int().contiguous.int"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "indices", ")", ":", "\n", "        ", "\"\"\"\n        Gather\n        :param ctx:\n        :param features: features of points, FloatTensor[B, C, N]\n        :param indices: centers' indices in points, IntTensor[b, m]\n        :return:\n            centers_coords: coordinates of sampled centers, FloatTensor[B, C, M]\n        \"\"\"", "\n", "features", "=", "features", ".", "contiguous", "(", ")", "\n", "indices", "=", "indices", ".", "int", "(", ")", ".", "contiguous", "(", ")", "\n", "ctx", ".", "save_for_backward", "(", "indices", ")", "\n", "ctx", ".", "num_points", "=", "features", ".", "size", "(", "-", "1", ")", "\n", "return", "_backend", ".", "gather_features_forward", "(", "features", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.sampling.Gather.backward": [[27, 32], ["modules.functional.backend._backend.gather_features_backward", "grad_output.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "indices", ",", "=", "ctx", ".", "saved_tensors", "\n", "grad_features", "=", "_backend", ".", "gather_features_backward", "(", "grad_output", ".", "contiguous", "(", ")", ",", "indices", ",", "ctx", ".", "num_points", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.sampling.furthest_point_sample": [[37, 49], ["coords.contiguous.contiguous", "modules.functional.backend._backend.furthest_point_sampling", "gather"], "function", ["None"], ["def", "furthest_point_sample", "(", "coords", ",", "num_samples", ")", ":", "\n", "    ", "\"\"\"\n    Uses iterative furthest point sampling to select a set of npoint features that have the largest\n    minimum distance to the sampled point set\n    :param coords: coordinates of points, FloatTensor[B, 3, N]\n    :param num_samples: int, M\n    :return:\n       centers_coords: coordinates of sampled centers, FloatTensor[B, 3, M]\n    \"\"\"", "\n", "coords", "=", "coords", ".", "contiguous", "(", ")", "\n", "indices", "=", "_backend", ".", "furthest_point_sampling", "(", "coords", ",", "num_samples", ")", "\n", "return", "gather", "(", "coords", ",", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.sampling.logits_mask": [[51, 85], ["torch.lt", "torch.sum", "torch.zeros", "range", "gather", "torch.lt.view", "torch.sum", "torch.max().float", "current_mask.nonzero().view", "current_mask.nonzero().view.numel", "numpy.random.choice", "masked_coords_mean.view", "torch.max", "current_mask.nonzero", "numpy.concatenate", "numpy.random.shuffle", "torch.ones_like", "numpy.arange().repeat", "numpy.random.choice", "numpy.arange"], "function", ["None"], ["", "def", "logits_mask", "(", "coords", ",", "logits", ",", "num_points_per_object", ")", ":", "\n", "    ", "\"\"\"\n    Use logits to sample points\n    :param coords: coords of points, FloatTensor[B, 3, N]\n    :param logits: binary classification logits, FloatTensor[B, 2, N]\n    :param num_points_per_object: M, #points per object after masking, int\n    :return:\n        selected_coords: FloatTensor[B, 3, M]\n        masked_coords_mean: mean coords of selected points, FloatTensor[B, 3]\n        mask: mask to select points, BoolTensor[B, N]\n    \"\"\"", "\n", "batch_size", ",", "_", ",", "num_points", "=", "coords", ".", "shape", "\n", "mask", "=", "torch", ".", "lt", "(", "logits", "[", ":", ",", "0", ",", ":", "]", ",", "logits", "[", ":", ",", "1", ",", ":", "]", ")", "# [B, N]", "\n", "num_candidates", "=", "torch", ".", "sum", "(", "mask", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# [B, 1]", "\n", "masked_coords", "=", "coords", "*", "mask", ".", "view", "(", "batch_size", ",", "1", ",", "num_points", ")", "# [B, C, N]", "\n", "masked_coords_mean", "=", "torch", ".", "sum", "(", "masked_coords", ",", "dim", "=", "-", "1", ")", "/", "torch", ".", "max", "(", "num_candidates", ",", "\n", "torch", ".", "ones_like", "(", "num_candidates", ")", ")", ".", "float", "(", ")", "# [B, C]", "\n", "selected_indices", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "num_points_per_object", ")", ",", "device", "=", "coords", ".", "device", ",", "dtype", "=", "torch", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "current_mask", "=", "mask", "[", "i", "]", "# [N]", "\n", "current_candidates", "=", "current_mask", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "current_num_candidates", "=", "current_candidates", ".", "numel", "(", ")", "\n", "if", "current_num_candidates", ">=", "num_points_per_object", ":", "\n", "            ", "choices", "=", "np", ".", "random", ".", "choice", "(", "current_num_candidates", ",", "num_points_per_object", ",", "replace", "=", "False", ")", "\n", "selected_indices", "[", "i", "]", "=", "current_candidates", "[", "choices", "]", "\n", "", "elif", "current_num_candidates", ">", "0", ":", "\n", "            ", "choices", "=", "np", ".", "concatenate", "(", "[", "\n", "np", ".", "arange", "(", "current_num_candidates", ")", ".", "repeat", "(", "num_points_per_object", "//", "current_num_candidates", ")", ",", "\n", "np", ".", "random", ".", "choice", "(", "current_num_candidates", ",", "num_points_per_object", "%", "current_num_candidates", ",", "replace", "=", "False", ")", "\n", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "choices", ")", "\n", "selected_indices", "[", "i", "]", "=", "current_candidates", "[", "choices", "]", "\n", "", "", "selected_coords", "=", "gather", "(", "masked_coords", "-", "masked_coords_mean", ".", "view", "(", "batch_size", ",", "-", "1", ",", "1", ")", ",", "selected_indices", ")", "\n", "return", "selected_coords", ",", "masked_coords_mean", ",", "mask", "\n", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.voxelization.AvgVoxelization.forward": [[9, 25], ["features.contiguous.contiguous.contiguous", "coords.int().contiguous.int().contiguous.int().contiguous", "modules.functional.backend._backend.avg_voxelize_forward", "ctx.save_for_backward", "out.view", "coords.int().contiguous.int().contiguous.int"], "methods", ["None"], ["class", "Voxelization", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "resolution", ",", "normalize", "=", "True", ",", "eps", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "r", "=", "int", "(", "resolution", ")", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "", "def", "forward", "(", "self", ",", "features", ",", "coords", ")", ":", "\n", "        ", "coords", "=", "coords", ".", "detach", "(", ")", "\n", "norm_coords", "=", "coords", "-", "coords", ".", "mean", "(", "2", ",", "keepdim", "=", "True", ")", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "norm_coords", "=", "norm_coords", "/", "(", "norm_coords", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "max", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "values", "*", "2.0", "+", "self", ".", "eps", ")", "+", "0.5", "\n", "", "else", ":", "\n", "            ", "norm_coords", "=", "(", "norm_coords", "+", "1", ")", "/", "2.0", "\n", "", "norm_coords", "=", "torch", ".", "clamp", "(", "norm_coords", "*", "self", ".", "r", ",", "0", ",", "self", ".", "r", "-", "1", ")", "\n", "vox_coords", "=", "torch", ".", "round", "(", "norm_coords", ")", ".", "to", "(", "torch", ".", "int32", ")", "\n", "return", "F", ".", "avg_voxelize", "(", "features", ",", "vox_coords", ",", "self", ".", "r", ")", ",", "norm_coords", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.voxelization.AvgVoxelization.backward": [[26, 38], ["modules.functional.backend._backend.avg_voxelize_backward", "grad_output.contiguous().view", "grad_output.contiguous"], "methods", ["None"], ["\n", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'resolution={}{}'", ".", "format", "(", "self", ".", "r", ",", "', normalized eps = {}'", ".", "format", "(", "self", ".", "eps", ")", "if", "self", ".", "normalize", "else", "''", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.eval.prepare": [[14, 56], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "print", "configs.update_from_modules", "get_save_path", "os.makedirs", "os.path.join", "os.path.join", "configs.update_from_arguments", "configs.evaluate.best_checkpoint_path.endswith", "configs.evaluate.best_checkpoint_path.replace", "set_cuda_visible_devices", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.update_from_modules", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.get_save_path", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.update_from_arguments", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.device.set_cuda_visible_devices"], ["def", "prepare", "(", ")", ":", "\n", "    ", "from", "utils", ".", "common", "import", "get_save_path", "\n", "from", "utils", ".", "config", "import", "configs", "\n", "from", "utils", ".", "device", "import", "set_cuda_visible_devices", "\n", "\n", "# since PyTorch jams device selection, we have to parse args before import torch (issue #26790)", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'configs'", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--devices'", ",", "default", "=", "None", ")", "\n", "args", ",", "opts", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "if", "args", ".", "devices", "is", "not", "None", "and", "args", ".", "devices", "!=", "'cpu'", ":", "\n", "        ", "gpus", "=", "set_cuda_visible_devices", "(", "args", ".", "devices", ")", "\n", "", "else", ":", "\n", "        ", "gpus", "=", "[", "]", "\n", "\n", "", "print", "(", "f'==> loading configs from {args.configs}'", ")", "\n", "configs", ".", "update_from_modules", "(", "*", "args", ".", "configs", ")", "\n", "# define save path", "\n", "save_path", "=", "get_save_path", "(", "*", "args", ".", "configs", ",", "prefix", "=", "'runs'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "configs", ".", "train", ".", "save_path", "=", "save_path", "\n", "configs", ".", "train", ".", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'latest.pth.tar'", ")", "\n", "configs", ".", "train", ".", "best_checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best.pth.tar'", ")", "\n", "\n", "# override configs with args", "\n", "configs", ".", "update_from_arguments", "(", "*", "opts", ")", "\n", "if", "len", "(", "gpus", ")", "==", "0", ":", "\n", "        ", "configs", ".", "device", "=", "'cpu'", "\n", "configs", ".", "device_ids", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "configs", ".", "device", "=", "'cuda'", "\n", "configs", ".", "device_ids", "=", "gpus", "\n", "", "configs", ".", "dataset", ".", "split", "=", "configs", ".", "evaluate", ".", "dataset", ".", "split", "\n", "if", "'best_checkpoint_path'", "not", "in", "configs", ".", "evaluate", "or", "configs", ".", "evaluate", ".", "best_checkpoint_path", "is", "None", ":", "\n", "        ", "if", "'best_checkpoint_path'", "in", "configs", ".", "train", "and", "configs", ".", "train", ".", "best_checkpoint_path", "is", "not", "None", ":", "\n", "            ", "configs", ".", "evaluate", ".", "best_checkpoint_path", "=", "configs", ".", "train", ".", "best_checkpoint_path", "\n", "", "else", ":", "\n", "            ", "configs", ".", "evaluate", ".", "best_checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "train", ".", "save_path", ",", "'best.pth.tar'", ")", "\n", "", "", "assert", "configs", ".", "evaluate", ".", "best_checkpoint_path", ".", "endswith", "(", "'.pth.tar'", ")", "\n", "configs", ".", "evaluate", ".", "stats_path", "=", "configs", ".", "evaluate", ".", "best_checkpoint_path", ".", "replace", "(", "'.pth.tar'", ",", "'.eval.npy'", ")", "\n", "\n", "return", "configs", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.eval.evaluate": [[58, 174], ["random.seed", "numpy.random.seed", "torch.manual_seed", "print", "os.path.exists", "print", "MeterShapeNet", "print", "configs.model", "torch.nn.DataParallel.to", "os.path.exists", "torch.nn.DataParallel.eval", "numpy.zeros", "enumerate", "numpy.save", "print", "print", "eval.prepare", "configs.get", "numpy.load", "print", "print", "configs.dataset", "torch.nn.DataParallel", "print", "torch.load", "torch.nn.DataParallel.load_state_dict", "tqdm", "numpy.loadtxt().astype", "numpy.zeros", "numpy.full", "dataset.normalize_point_cloud.transpose", "data[].astype", "math.ceil", "numpy.tile", "numpy.random.shuffle", "torch.from_numpy().float().to", "eval.update_shape_predictions", "eval.update_stats", "torch.initial_seed", "torch.load.pop", "dataset.normalize_point_cloud", "data[].transpose", "math.ceil", "numpy.arange", "torch.no_grad", "F.softmax", "vote_confidences[].max", "vote_confidences.view().cpu().numpy.view().cpu().numpy", "numpy.loadtxt", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "torch.from_numpy().float", "torch.nn.DataParallel.", "map", "map", "vote_confidences.view().cpu().numpy.view().cpu", "stats[].sum", "stats[].sum", "stats[].sum", "stats[].sum", "torch.from_numpy", "point_set[].reshape().transpose", "vote_confidences.view().cpu().numpy.view", "point_set[].reshape"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.eval.prepare", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.eval.update_shape_predictions", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.eval.update_stats", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.datasets.shapenet._ShapeNetDataset.normalize_point_cloud"], ["", "def", "evaluate", "(", "configs", "=", "None", ")", ":", "\n", "    ", "configs", "=", "prepare", "(", ")", "if", "configs", "is", "None", "else", "configs", "\n", "\n", "import", "math", "\n", "import", "torch", "\n", "import", "torch", ".", "backends", ".", "cudnn", "as", "cudnn", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "from", "meters", ".", "shapenet", "import", "MeterShapeNet", "\n", "\n", "###########", "\n", "# Prepare #", "\n", "###########", "\n", "\n", "if", "configs", ".", "device", "==", "'cuda'", ":", "\n", "        ", "cudnn", ".", "benchmark", "=", "True", "\n", "if", "configs", ".", "get", "(", "'deterministic'", ",", "False", ")", ":", "\n", "            ", "cudnn", ".", "deterministic", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "", "", "if", "(", "'seed'", "not", "in", "configs", ")", "or", "(", "configs", ".", "seed", "is", "None", ")", ":", "\n", "        ", "configs", ".", "seed", "=", "torch", ".", "initial_seed", "(", ")", "%", "(", "2", "**", "32", "-", "1", ")", "\n", "", "seed", "=", "configs", ".", "seed", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "print", "(", "configs", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "configs", ".", "evaluate", ".", "stats_path", ")", ":", "\n", "        ", "stats", "=", "np", ".", "load", "(", "configs", ".", "evaluate", ".", "stats_path", ")", "\n", "print", "(", "'clssIoU: {}'", ".", "format", "(", "'  '", ".", "join", "(", "map", "(", "'{:>8.2f}'", ".", "format", ",", "stats", "[", ":", ",", "0", "]", "/", "stats", "[", ":", ",", "1", "]", "*", "100", ")", ")", ")", ")", "\n", "print", "(", "'meanIoU: {:4.2f}'", ".", "format", "(", "stats", "[", ":", ",", "0", "]", ".", "sum", "(", ")", "/", "stats", "[", ":", ",", "1", "]", ".", "sum", "(", ")", "*", "100", ")", ")", "\n", "return", "\n", "\n", "#################################", "\n", "# Initialize DataLoaders, Model #", "\n", "#################################", "\n", "\n", "", "print", "(", "f'\\n==> loading dataset \"{configs.dataset}\"'", ")", "\n", "dataset", "=", "configs", ".", "dataset", "(", ")", "[", "configs", ".", "dataset", ".", "split", "]", "\n", "meter", "=", "MeterShapeNet", "(", ")", "\n", "\n", "print", "(", "f'\\n==> creating model \"{configs.model}\"'", ")", "\n", "model", "=", "configs", ".", "model", "(", ")", "\n", "if", "configs", ".", "device", "==", "'cuda'", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", "=", "model", ".", "to", "(", "configs", ".", "device", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "configs", ".", "evaluate", ".", "best_checkpoint_path", ")", ":", "\n", "        ", "print", "(", "f'==> loading checkpoint \"{configs.evaluate.best_checkpoint_path}\"'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "configs", ".", "evaluate", ".", "best_checkpoint_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "'model'", ")", ")", "\n", "del", "checkpoint", "\n", "", "else", ":", "\n", "        ", "return", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "##############", "\n", "# Evaluation #", "\n", "##############", "\n", "\n", "stats", "=", "np", ".", "zeros", "(", "(", "configs", ".", "data", ".", "num_shapes", ",", "2", ")", ")", "\n", "\n", "for", "shape_index", ",", "(", "file_path", ",", "shape_id", ")", "in", "enumerate", "(", "tqdm", "(", "dataset", ".", "file_paths", ",", "desc", "=", "'eval'", ",", "ncols", "=", "0", ")", ")", ":", "\n", "        ", "data", "=", "np", ".", "loadtxt", "(", "file_path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "total_num_points_in_shape", "=", "data", ".", "shape", "[", "0", "]", "\n", "confidences", "=", "np", ".", "zeros", "(", "total_num_points_in_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "predictions", "=", "np", ".", "full", "(", "total_num_points_in_shape", ",", "-", "1", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "coords", "=", "data", "[", ":", ",", ":", "3", "]", "\n", "if", "dataset", ".", "normalize", ":", "\n", "            ", "coords", "=", "dataset", ".", "normalize_point_cloud", "(", "coords", ")", "\n", "", "coords", "=", "coords", ".", "transpose", "(", ")", "\n", "ground_truth", "=", "data", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "if", "dataset", ".", "with_normal", ":", "\n", "            ", "normal", "=", "data", "[", ":", ",", "3", ":", "6", "]", ".", "transpose", "(", ")", "\n", "if", "dataset", ".", "with_one_hot_shape_id", ":", "\n", "                ", "shape_one_hot", "=", "np", ".", "zeros", "(", "(", "dataset", ".", "num_shapes", ",", "coords", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "shape_one_hot", "[", "shape_id", ",", ":", "]", "=", "1.0", "\n", "point_set", "=", "np", ".", "concatenate", "(", "[", "coords", ",", "normal", ",", "shape_one_hot", "]", ")", "\n", "", "else", ":", "\n", "                ", "point_set", "=", "np", ".", "concatenate", "(", "[", "coords", ",", "normal", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "dataset", ".", "with_one_hot_shape_id", ":", "\n", "                ", "shape_one_hot", "=", "np", ".", "zeros", "(", "(", "dataset", ".", "num_shapes", ",", "coords", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "shape_one_hot", "[", "shape_id", ",", ":", "]", "=", "1.0", "\n", "point_set", "=", "np", ".", "concatenate", "(", "[", "coords", ",", "shape_one_hot", "]", ")", "\n", "", "else", ":", "\n", "                ", "point_set", "=", "coords", "\n", "", "", "extra_batch_size", "=", "configs", ".", "evaluate", ".", "num_votes", "*", "math", ".", "ceil", "(", "total_num_points_in_shape", "/", "dataset", ".", "num_points", ")", "\n", "total_num_voted_points", "=", "extra_batch_size", "*", "dataset", ".", "num_points", "\n", "num_repeats", "=", "math", ".", "ceil", "(", "total_num_voted_points", "/", "total_num_points_in_shape", ")", "\n", "shuffled_point_indices", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "total_num_points_in_shape", ")", ",", "num_repeats", ")", "\n", "shuffled_point_indices", "=", "shuffled_point_indices", "[", ":", "total_num_voted_points", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "shuffled_point_indices", ")", "\n", "start_class", ",", "end_class", "=", "meter", ".", "part_class_to_shape_part_classes", "[", "ground_truth", "[", "0", "]", "]", "\n", "\n", "# model inference", "\n", "inputs", "=", "torch", ".", "from_numpy", "(", "\n", "point_set", "[", ":", ",", "shuffled_point_indices", "]", ".", "reshape", "(", "-", "1", ",", "extra_batch_size", ",", "dataset", ".", "num_points", ")", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", ")", ".", "float", "(", ")", ".", "to", "(", "configs", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "vote_confidences", "=", "F", ".", "softmax", "(", "model", "(", "inputs", ")", ",", "dim", "=", "1", ")", "\n", "vote_confidences", ",", "vote_predictions", "=", "vote_confidences", "[", ":", ",", "start_class", ":", "end_class", ",", ":", "]", ".", "max", "(", "dim", "=", "1", ")", "\n", "vote_confidences", "=", "vote_confidences", ".", "view", "(", "total_num_voted_points", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vote_predictions", "=", "(", "vote_predictions", "+", "start_class", ")", ".", "view", "(", "total_num_voted_points", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "update_shape_predictions", "(", "vote_confidences", ",", "vote_predictions", ",", "shuffled_point_indices", ",", "\n", "confidences", ",", "predictions", ",", "total_num_voted_points", ")", "\n", "update_stats", "(", "stats", ",", "ground_truth", ",", "predictions", ",", "shape_id", ",", "start_class", ",", "end_class", ")", "\n", "\n", "", "np", ".", "save", "(", "configs", ".", "evaluate", ".", "stats_path", ",", "stats", ")", "\n", "print", "(", "'clssIoU: {}'", ".", "format", "(", "'  '", ".", "join", "(", "map", "(", "'{:>8.2f}'", ".", "format", ",", "stats", "[", ":", ",", "0", "]", "/", "stats", "[", ":", ",", "1", "]", "*", "100", ")", ")", ")", ")", "\n", "print", "(", "'meanIoU: {:4.2f}'", ".", "format", "(", "stats", "[", ":", ",", "0", "]", ".", "sum", "(", ")", "/", "stats", "[", ":", ",", "1", "]", ".", "sum", "(", ")", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.eval.update_shape_predictions": [[176, 185], ["numba.jit", "range"], "function", ["None"], ["", "@", "numba", ".", "jit", "(", ")", "\n", "def", "update_shape_predictions", "(", "vote_confidences", ",", "vote_predictions", ",", "shuffled_point_indices", ",", "\n", "shape_confidences", ",", "shape_predictions", ",", "total_num_voted_points", ")", ":", "\n", "    ", "for", "p", "in", "range", "(", "total_num_voted_points", ")", ":", "\n", "        ", "point_index", "=", "shuffled_point_indices", "[", "p", "]", "\n", "current_confidence", "=", "vote_confidences", "[", "p", "]", "\n", "if", "current_confidence", ">", "shape_confidences", "[", "point_index", "]", ":", "\n", "            ", "shape_confidences", "[", "point_index", "]", "=", "current_confidence", "\n", "shape_predictions", "[", "point_index", "]", "=", "vote_predictions", "[", "p", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.eval.update_stats": [[187, 202], ["numba.jit", "range", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "", "", "@", "numba", ".", "jit", "(", ")", "\n", "def", "update_stats", "(", "stats", ",", "ground_truth", ",", "predictions", ",", "shape_id", ",", "start_class", ",", "end_class", ")", ":", "\n", "    ", "iou", "=", "0.0", "\n", "for", "i", "in", "range", "(", "start_class", ",", "end_class", ")", ":", "\n", "        ", "igt", "=", "(", "ground_truth", "==", "i", ")", "\n", "ipd", "=", "(", "predictions", "==", "i", ")", "\n", "union", "=", "np", ".", "sum", "(", "igt", "|", "ipd", ")", "\n", "intersection", "=", "np", ".", "sum", "(", "igt", "&", "ipd", ")", "\n", "if", "union", "==", "0", ":", "\n", "            ", "iou", "+=", "1", "\n", "", "else", ":", "\n", "            ", "iou", "+=", "intersection", "/", "union", "\n", "", "", "iou", "/=", "(", "end_class", "-", "start_class", ")", "\n", "stats", "[", "shape_id", "]", "[", "0", "]", "+=", "iou", "\n", "stats", "[", "shape_id", "]", "[", "1", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.pointnetpp.PointNet2.__init__": [[10, 35], ["torch.Module.__init__", "models.utils.create_pointnet2_sa_components", "torch.ModuleList", "torch.ModuleList", "models.utils.create_pointnet2_fp_modules", "torch.ModuleList", "torch.ModuleList", "models.utils.create_mlp_components", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet2_sa_components", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet2_fp_modules", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "num_shapes", ",", "sa_blocks", ",", "fp_blocks", ",", "with_one_hot_shape_id", "=", "True", ",", "\n", "extra_feature_channels", "=", "3", ",", "width_multiplier", "=", "1", ",", "voxel_resolution_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "extra_feature_channels", ">=", "0", "\n", "\n", "self", ".", "in_channels", "=", "extra_feature_channels", "+", "3", "\n", "self", ".", "num_shapes", "=", "num_shapes", "\n", "self", ".", "with_one_hot_shape_id", "=", "with_one_hot_shape_id", "\n", "\n", "sa_layers", ",", "sa_in_channels", ",", "channels_sa_features", ",", "_", "=", "create_pointnet2_sa_components", "(", "\n", "sa_blocks", "=", "sa_blocks", ",", "extra_feature_channels", "=", "extra_feature_channels", ",", "width_multiplier", "=", "width_multiplier", "\n", ")", "\n", "self", ".", "sa_layers", "=", "nn", ".", "ModuleList", "(", "sa_layers", ")", "\n", "\n", "# use one hot vector in the last fp module", "\n", "sa_in_channels", "[", "0", "]", "+=", "num_shapes", "if", "with_one_hot_shape_id", "else", "0", "\n", "fp_layers", ",", "channels_fp_features", "=", "create_pointnet2_fp_modules", "(", "\n", "fp_blocks", "=", "fp_blocks", ",", "in_channels", "=", "channels_sa_features", ",", "sa_in_channels", "=", "sa_in_channels", ",", "\n", "width_multiplier", "=", "width_multiplier", ",", "voxel_resolution_multiplier", "=", "voxel_resolution_multiplier", "\n", ")", "\n", "self", ".", "fp_layers", "=", "nn", ".", "ModuleList", "(", "fp_layers", ")", "\n", "\n", "layers", ",", "_", "=", "create_mlp_components", "(", "in_channels", "=", "channels_fp_features", ",", "out_channels", "=", "[", "128", ",", "0.5", ",", "num_classes", "]", ",", "\n", "classifier", "=", "True", ",", "dim", "=", "2", ",", "width_multiplier", "=", "width_multiplier", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.pointnetpp.PointNet2.forward": [[36, 57], ["features_with_one_hot_vectors.contiguous", "enumerate", "pointnetpp.PointNet2.classifier", "features[].contiguous", "features[].contiguous", "in_features_list.append", "coords_list.append", "sa_module", "fp_module", "inputs.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# inputs : [B, in_channels + S, N]", "\n", "        ", "features", "=", "inputs", "[", ":", ",", ":", "self", ".", "in_channels", ",", ":", "]", "\n", "if", "self", ".", "with_one_hot_shape_id", ":", "\n", "            ", "assert", "inputs", ".", "size", "(", "1", ")", "==", "self", ".", "in_channels", "+", "self", ".", "num_shapes", "\n", "features_with_one_hot_vectors", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "features_with_one_hot_vectors", "=", "features", "\n", "\n", "", "coords", ",", "features", "=", "features", "[", ":", ",", ":", "3", ",", ":", "]", ".", "contiguous", "(", ")", ",", "features", "[", ":", ",", "3", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "coords_list", ",", "in_features_list", "=", "[", "]", ",", "[", "]", "\n", "for", "sa_module", "in", "self", ".", "sa_layers", ":", "\n", "            ", "in_features_list", ".", "append", "(", "features", ")", "\n", "coords_list", ".", "append", "(", "coords", ")", "\n", "features", ",", "coords", "=", "sa_module", "(", "(", "features", ",", "coords", ")", ")", "\n", "", "in_features_list", "[", "0", "]", "=", "features_with_one_hot_vectors", ".", "contiguous", "(", ")", "\n", "\n", "for", "fp_idx", ",", "fp_module", "in", "enumerate", "(", "self", ".", "fp_layers", ")", ":", "\n", "            ", "features", ",", "coords", "=", "fp_module", "(", "(", "coords_list", "[", "-", "1", "-", "fp_idx", "]", ",", "coords", ",", "features", ",", "in_features_list", "[", "-", "1", "-", "fp_idx", "]", ")", ")", "\n", "\n", "", "return", "self", ".", "classifier", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.pointnetpp.PointNet2SSG.__init__": [[67, 73], ["pointnetpp.PointNet2.__init__"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "num_shapes", ",", "extra_feature_channels", "=", "3", ",", "width_multiplier", "=", "1", ",", "\n", "voxel_resolution_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_classes", "=", "num_classes", ",", "num_shapes", "=", "num_shapes", ",", "sa_blocks", "=", "self", ".", "sa_blocks", ",", "fp_blocks", "=", "self", ".", "fp_blocks", ",", "\n", "with_one_hot_shape_id", "=", "False", ",", "extra_feature_channels", "=", "extra_feature_channels", ",", "\n", "width_multiplier", "=", "width_multiplier", ",", "voxel_resolution_multiplier", "=", "voxel_resolution_multiplier", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.pointnetpp.PointNet2MSG.__init__": [[84, 90], ["pointnetpp.PointNet2.__init__"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "num_shapes", ",", "extra_feature_channels", "=", "3", ",", "width_multiplier", "=", "1", ",", "\n", "voxel_resolution_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_classes", "=", "num_classes", ",", "num_shapes", "=", "num_shapes", ",", "sa_blocks", "=", "self", ".", "sa_blocks", ",", "fp_blocks", "=", "self", ".", "fp_blocks", ",", "\n", "with_one_hot_shape_id", "=", "True", ",", "extra_feature_channels", "=", "extra_feature_channels", ",", "\n", "width_multiplier", "=", "width_multiplier", ",", "voxel_resolution_multiplier", "=", "voxel_resolution_multiplier", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.pointnet.Transformer.__init__": [[10, 27], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules.SharedMLP", "modules.SharedMLP", "modules.SharedMLP", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["\n", "class", "PointNetAModule", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "include_coordinates", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "out_channels", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "[", "out_channels", "]", "]", "\n", "", "elif", "not", "isinstance", "(", "out_channels", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "out_channels", "]", "\n", "\n", "", "mlps", "=", "[", "]", "\n", "total_out_channels", "=", "0", "\n", "for", "_out_channels", "in", "out_channels", ":", "\n", "            ", "mlps", ".", "append", "(", "\n", "SharedMLP", "(", "in_channels", "=", "in_channels", "+", "(", "3", "if", "include_coordinates", "else", "0", ")", ",", "\n", "out_channels", "=", "_out_channels", ",", "dim", "=", "1", ")", "\n", ")", "\n", "total_out_channels", "+=", "_out_channels", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.pointnet.Transformer.forward": [[29, 35], ["pointnet.Transformer.tranformer", "transform_weight.view.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.max", "torch.max", "torch.max", "torch.max", "pointnet.Transformer.features"], "methods", ["None"], ["self", ".", "out_channels", "=", "total_out_channels", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", "mlps", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", ",", "coords", "=", "inputs", "\n", "if", "self", ".", "include_coordinates", ":", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "coords", "]", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.pointnet.PointNet.__init__": [[40, 68], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "int", "range", "modules.SharedMLP", "torch.Dropout", "torch.Dropout", "modules.SharedMLP", "torch.Dropout", "torch.Dropout", "modules.SharedMLP", "torch.Conv1d", "torch.Conv1d", "int", "layers.append", "layers.append", "int", "int", "int", "int", "int", "torch.Sequential", "torch.Sequential", "modules.SharedMLP", "pointnet.Transformer", "modules.SharedMLP"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["                ", "features_list", ".", "append", "(", "mlp", "(", "features", ")", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "values", ")", "\n", "", "return", "torch", ".", "cat", "(", "features_list", ",", "dim", "=", "1", ")", ",", "coords", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "mlps", "[", "0", "]", "(", "features", ")", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "values", ",", "coords", "\n", "\n", "", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'out_channels={self.out_channels}, include_coordinates={self.include_coordinates}'", "\n", "\n", "\n", "", "", "class", "PointNetSAModule", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_centers", ",", "radius", ",", "num_neighbors", ",", "in_channels", ",", "out_channels", ",", "include_coordinates", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "radius", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "radius", "=", "[", "radius", "]", "\n", "", "if", "not", "isinstance", "(", "num_neighbors", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "num_neighbors", "=", "[", "num_neighbors", "]", "*", "len", "(", "radius", ")", "\n", "", "assert", "len", "(", "radius", ")", "==", "len", "(", "num_neighbors", ")", "\n", "if", "not", "isinstance", "(", "out_channels", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "[", "out_channels", "]", "]", "*", "len", "(", "radius", ")", "\n", "", "elif", "not", "isinstance", "(", "out_channels", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "out_channels", "]", "*", "len", "(", "radius", ")", "\n", "", "assert", "len", "(", "radius", ")", "==", "len", "(", "out_channels", ")", "\n", "\n", "groupers", ",", "mlps", "=", "[", "]", ",", "[", "]", "\n", "total_out_channels", "=", "0", "\n", "for", "_radius", ",", "_out_channels", ",", "_num_neighbors", "in", "zip", "(", "radius", ",", "out_channels", ",", "num_neighbors", ")", ":", "\n", "            ", "groupers", ".", "append", "(", "\n", "BallQuery", "(", "radius", "=", "_radius", ",", "num_neighbors", "=", "_num_neighbors", ",", "include_coordinates", "=", "include_coordinates", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.pointnet.PointNet.forward": [[70, 83], ["features.size", "range", "out_features_list.append", "pointnet.PointNet.classifier", "inputs.size", "len", "out_features_list.append", "features.max().values.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "features.max"], "methods", ["None"], ["SharedMLP", "(", "in_channels", "=", "in_channels", "+", "(", "3", "if", "include_coordinates", "else", "0", ")", ",", "\n", "out_channels", "=", "_out_channels", ",", "dim", "=", "2", ")", "\n", ")", "\n", "total_out_channels", "+=", "_out_channels", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "num_centers", "=", "num_centers", "\n", "self", ".", "out_channels", "=", "total_out_channels", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", "groupers", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", "mlps", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", ",", "coords", "=", "inputs", "\n", "centers_coords", "=", "F", ".", "furthest_point_sample", "(", "coords", ",", "self", ".", "num_centers", ")", "\n", "features_list", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.pvcnn.PVCNN.__init__": [[12, 29], ["torch.Module.__init__", "models.utils.create_pointnet_components", "torch.ModuleList", "torch.ModuleList", "models.utils.create_mlp_components", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet_components", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "num_shapes", ",", "extra_feature_channels", "=", "3", ",", "\n", "width_multiplier", "=", "1", ",", "voxel_resolution_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "extra_feature_channels", ">=", "0", "\n", "self", ".", "in_channels", "=", "extra_feature_channels", "+", "3", "\n", "self", ".", "num_shapes", "=", "num_shapes", "\n", "\n", "layers", ",", "channels_point", ",", "concat_channels_point", "=", "create_pointnet_components", "(", "\n", "blocks", "=", "self", ".", "blocks", ",", "in_channels", "=", "self", ".", "in_channels", ",", "with_se", "=", "True", ",", "normalize", "=", "False", ",", "\n", "width_multiplier", "=", "width_multiplier", ",", "voxel_resolution_multiplier", "=", "voxel_resolution_multiplier", "\n", ")", "\n", "self", ".", "point_features", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "\n", "layers", ",", "_", "=", "create_mlp_components", "(", "in_channels", "=", "(", "num_shapes", "+", "channels_point", "+", "concat_channels_point", ")", ",", "\n", "out_channels", "=", "[", "256", ",", "0.2", ",", "256", ",", "0.2", ",", "128", ",", "num_classes", "]", ",", "\n", "classifier", "=", "True", ",", "dim", "=", "2", ",", "width_multiplier", "=", "width_multiplier", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.shapenet.pvcnn.PVCNN.forward": [[30, 43], ["features.size", "range", "out_features_list.append", "pvcnn.PVCNN.classifier", "len", "out_features_list.append", "features.max().values.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "features.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# inputs : [B, in_channels + S, N]", "\n", "        ", "features", "=", "inputs", "[", ":", ",", ":", "self", ".", "in_channels", ",", ":", "]", "\n", "one_hot_vectors", "=", "inputs", "[", ":", ",", "-", "self", ".", "num_shapes", ":", ",", ":", "]", "\n", "num_points", "=", "features", ".", "size", "(", "-", "1", ")", "\n", "\n", "coords", "=", "features", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "out_features_list", "=", "[", "one_hot_vectors", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "point_features", ")", ")", ":", "\n", "            ", "features", ",", "_", "=", "self", ".", "point_features", "[", "i", "]", "(", "(", "features", ",", "coords", ")", ")", "\n", "out_features_list", ".", "append", "(", "features", ")", "\n", "", "out_features_list", ".", "append", "(", "features", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "values", ".", "repeat", "(", "[", "1", ",", "1", ",", "num_points", "]", ")", ")", "\n", "return", "self", ".", "classifier", "(", "torch", ".", "cat", "(", "out_features_list", ",", "dim", "=", "1", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.eval.prepare": [[15, 59], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "print", "configs.update_from_modules", "get_save_path", "os.makedirs", "os.path.join", "configs.update_from_arguments", "configs.evaluate.best_checkpoint_path.endswith", "configs.evaluate.best_checkpoint_path.replace", "configs.evaluate.best_checkpoint_path.replace", "set_cuda_visible_devices", "len", "configs.evaluate.dataset.items", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.update_from_modules", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.get_save_path", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.update_from_arguments", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.device.set_cuda_visible_devices"], ["    ", "from", "utils", ".", "common", "import", "get_save_path", "\n", "from", "utils", ".", "config", "import", "configs", "\n", "from", "utils", ".", "device", "import", "set_cuda_visible_devices", "\n", "\n", "# since PyTorch jams device selection, we have to parse args before import torch (issue #26790)", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'configs'", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--devices'", ",", "default", "=", "None", ")", "\n", "args", ",", "opts", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "if", "args", ".", "devices", "is", "not", "None", "and", "args", ".", "devices", "!=", "'cpu'", ":", "\n", "        ", "gpus", "=", "set_cuda_visible_devices", "(", "args", ".", "devices", ")", "\n", "", "else", ":", "\n", "        ", "gpus", "=", "[", "]", "\n", "\n", "", "print", "(", "f'==> loading configs from {args.configs}'", ")", "\n", "configs", ".", "update_from_modules", "(", "*", "args", ".", "configs", ")", "\n", "# define save path", "\n", "save_path", "=", "get_save_path", "(", "*", "args", ".", "configs", ",", "prefix", "=", "'runs'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "configs", ".", "train", ".", "save_path", "=", "save_path", "\n", "configs", ".", "train", ".", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'latest.pth.tar'", ")", "\n", "configs", ".", "train", ".", "best_checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best.pth.tar'", ")", "\n", "\n", "# override configs with args", "\n", "configs", ".", "update_from_arguments", "(", "*", "opts", ")", "\n", "if", "len", "(", "gpus", ")", "==", "0", ":", "\n", "        ", "configs", ".", "device", "=", "'cpu'", "\n", "configs", ".", "device_ids", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "configs", ".", "device", "=", "'cuda'", "\n", "configs", ".", "device_ids", "=", "gpus", "\n", "", "configs", ".", "dataset", ".", "split", "=", "configs", ".", "evaluate", ".", "dataset", ".", "split", "\n", "if", "'best_checkpoint_path'", "not", "in", "configs", ".", "evaluate", "or", "configs", ".", "evaluate", ".", "best_checkpoint_path", "is", "None", ":", "\n", "        ", "if", "'best_checkpoint_path'", "in", "configs", ".", "train", "and", "configs", ".", "train", ".", "best_checkpoint_path", "is", "not", "None", ":", "\n", "            ", "configs", ".", "evaluate", ".", "best_checkpoint_path", "=", "configs", ".", "train", ".", "best_checkpoint_path", "\n", "", "else", ":", "\n", "            ", "configs", ".", "evaluate", ".", "best_checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "train", ".", "save_path", ",", "'best.pth.tar'", ")", "\n", "", "", "assert", "configs", ".", "evaluate", ".", "best_checkpoint_path", ".", "endswith", "(", "'.pth.tar'", ")", "\n", "configs", ".", "evaluate", ".", "stats_path", "=", "configs", ".", "evaluate", ".", "best_checkpoint_path", ".", "replace", "(", "'.pth.tar'", ",", "'.eval.npy'", ")", "\n", "\n", "return", "configs", "\n", "\n", "\n", "", "def", "evaluate", "(", "configs", "=", "None", ")", ":", "\n", "    ", "configs", "=", "prepare", "(", ")", "if", "configs", "is", "None", "else", "configs", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.eval.evaluate": [[61, 224], ["print", "print", "configs.model", "torch.nn.DataParallel.to", "os.path.exists", "torch.nn.DataParallel.eval", "range", "dict.items", "eval.prepare", "configs.get", "dict", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "configs.dataset", "torch.nn.DataParallel", "print", "torch.load", "torch.nn.DataParallel.load_state_dict", "random.seed", "numpy.random.seed", "torch.manual_seed", "os.path.exists", "DataLoader", "numpy.zeros", "configs.data.size_templates.to", "torch.arange().to", "numpy.save", "eval.write_predictions", "eval_from_files", "print", "v.items", "torch.initial_seed", "configs.evaluate.stats_path.replace", "os.path.dirname", "os.path.dirname", "torch.load.pop", "print", "print", "os.path.join.format", "os.path.join.format", "print", "numpy.load", "eval.write_predictions", "eval_from_files", "torch.no_grad", "tqdm", "current_results.items", "numpy.asarray", "np.asarray.mean", "np.asarray.std", "np.asarray.max", "print", "random.randint", "current_results.items", "len", "torch.arange", "inputs.items", "torch.nn.DataParallel.", "center.cpu().numpy.size", "torch.arange", "torch.argmax", "torch.argmax", "center.cpu().numpy.cpu().numpy", "heading.cpu().numpy.cpu().numpy", "size.cpu().numpy.cpu().numpy", "targets[].cpu().numpy", "targets[].cpu().numpy", "eval.update_predictions", "v.items", "int", "v.items", "numpy.random.seed", "v.to", "dict", "[].append", "time.time", "dict", "[].append", "center.cpu().numpy.cpu", "heading.cpu().numpy.cpu", "size.cpu().numpy.cpu", "targets[].cpu", "targets[].cpu", "zip"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.eval.prepare", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.eval.write_predictions", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.eval_from_files", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.eval.write_predictions", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.eval_from_files", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.eval.update_predictions"], ["import", "math", "\n", "import", "torch", "\n", "import", "torch", ".", "backends", ".", "cudnn", "as", "cudnn", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "from", "meters", ".", "shapenet", "import", "MeterShapeNet", "\n", "\n", "###########", "\n", "# Prepare #", "\n", "###########", "\n", "\n", "if", "configs", ".", "device", "==", "'cuda'", ":", "\n", "        ", "cudnn", ".", "benchmark", "=", "True", "\n", "if", "configs", ".", "get", "(", "'deterministic'", ",", "False", ")", ":", "\n", "            ", "cudnn", ".", "deterministic", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "", "", "if", "(", "'seed'", "not", "in", "configs", ")", "or", "(", "configs", ".", "seed", "is", "None", ")", ":", "\n", "        ", "configs", ".", "seed", "=", "torch", ".", "initial_seed", "(", ")", "%", "(", "2", "**", "32", "-", "1", ")", "\n", "", "seed", "=", "configs", ".", "seed", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "print", "(", "configs", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "configs", ".", "evaluate", ".", "stats_path", ")", ":", "\n", "        ", "stats", "=", "np", ".", "load", "(", "configs", ".", "evaluate", ".", "stats_path", ")", "\n", "print", "(", "'clssIoU: {}'", ".", "format", "(", "'  '", ".", "join", "(", "map", "(", "'{:>8.2f}'", ".", "format", ",", "stats", "[", ":", ",", "0", "]", "/", "stats", "[", ":", ",", "1", "]", "*", "100", ")", ")", ")", ")", "\n", "print", "(", "'meanIoU: {:4.2f}'", ".", "format", "(", "stats", "[", ":", ",", "0", "]", ".", "sum", "(", ")", "/", "stats", "[", ":", ",", "1", "]", ".", "sum", "(", ")", "*", "100", ")", ")", "\n", "return", "\n", "\n", "#################################", "\n", "# Initialize DataLoaders, Model #", "\n", "#################################", "\n", "\n", "", "print", "(", "f'\\n==> loading dataset \"{configs.dataset}\"'", ")", "\n", "dataset", "=", "configs", ".", "dataset", "(", ")", "[", "configs", ".", "dataset", ".", "split", "]", "\n", "meter", "=", "MeterShapeNet", "(", ")", "\n", "\n", "print", "(", "f'\\n==> creating model \"{configs.model}\"'", ")", "\n", "model", "=", "configs", ".", "model", "(", ")", "\n", "if", "configs", ".", "device", "==", "'cuda'", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", "=", "model", ".", "to", "(", "configs", ".", "device", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "configs", ".", "evaluate", ".", "best_checkpoint_path", ")", ":", "\n", "        ", "print", "(", "f'==> loading checkpoint \"{configs.evaluate.best_checkpoint_path}\"'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "configs", ".", "evaluate", ".", "best_checkpoint_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "'model'", ")", ")", "\n", "del", "checkpoint", "\n", "", "else", ":", "\n", "        ", "return", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "##############", "\n", "# Evaluation #", "\n", "##############", "\n", "\n", "stats", "=", "np", ".", "zeros", "(", "(", "configs", ".", "data", ".", "num_shapes", ",", "2", ")", ")", "\n", "\n", "for", "shape_index", ",", "(", "file_path", ",", "shape_id", ")", "in", "enumerate", "(", "tqdm", "(", "dataset", ".", "file_paths", ",", "desc", "=", "'eval'", ",", "ncols", "=", "0", ")", ")", ":", "\n", "        ", "data", "=", "np", ".", "loadtxt", "(", "file_path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "total_num_points_in_shape", "=", "data", ".", "shape", "[", "0", "]", "\n", "confidences", "=", "np", ".", "zeros", "(", "total_num_points_in_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "predictions", "=", "np", ".", "full", "(", "total_num_points_in_shape", ",", "-", "1", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "coords", "=", "data", "[", ":", ",", ":", "3", "]", "\n", "if", "dataset", ".", "normalize", ":", "\n", "            ", "coords", "=", "dataset", ".", "normalize_point_cloud", "(", "coords", ")", "\n", "", "coords", "=", "coords", ".", "transpose", "(", ")", "\n", "ground_truth", "=", "data", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "if", "dataset", ".", "with_normal", ":", "\n", "            ", "normal", "=", "data", "[", ":", ",", "3", ":", "6", "]", ".", "transpose", "(", ")", "\n", "if", "dataset", ".", "with_one_hot_shape_id", ":", "\n", "                ", "shape_one_hot", "=", "np", ".", "zeros", "(", "(", "dataset", ".", "num_shapes", ",", "coords", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "shape_one_hot", "[", "shape_id", ",", ":", "]", "=", "1.0", "\n", "point_set", "=", "np", ".", "concatenate", "(", "[", "coords", ",", "normal", ",", "shape_one_hot", "]", ")", "\n", "", "else", ":", "\n", "                ", "point_set", "=", "np", ".", "concatenate", "(", "[", "coords", ",", "normal", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "dataset", ".", "with_one_hot_shape_id", ":", "\n", "                ", "shape_one_hot", "=", "np", ".", "zeros", "(", "(", "dataset", ".", "num_shapes", ",", "coords", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "shape_one_hot", "[", "shape_id", ",", ":", "]", "=", "1.0", "\n", "point_set", "=", "np", ".", "concatenate", "(", "[", "coords", ",", "shape_one_hot", "]", ")", "\n", "", "else", ":", "\n", "                ", "point_set", "=", "coords", "\n", "", "", "extra_batch_size", "=", "configs", ".", "evaluate", ".", "num_votes", "*", "math", ".", "ceil", "(", "total_num_points_in_shape", "/", "dataset", ".", "num_points", ")", "\n", "total_num_voted_points", "=", "extra_batch_size", "*", "dataset", ".", "num_points", "\n", "num_repeats", "=", "math", ".", "ceil", "(", "total_num_voted_points", "/", "total_num_points_in_shape", ")", "\n", "shuffled_point_indices", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "total_num_points_in_shape", ")", ",", "num_repeats", ")", "\n", "shuffled_point_indices", "=", "shuffled_point_indices", "[", ":", "total_num_voted_points", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "shuffled_point_indices", ")", "\n", "start_class", ",", "end_class", "=", "meter", ".", "part_class_to_shape_part_classes", "[", "ground_truth", "[", "0", "]", "]", "\n", "\n", "# model inference", "\n", "inputs", "=", "torch", ".", "from_numpy", "(", "\n", "point_set", "[", ":", ",", "shuffled_point_indices", "]", ".", "reshape", "(", "-", "1", ",", "extra_batch_size", ",", "dataset", ".", "num_points", ")", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", ")", ".", "float", "(", ")", ".", "to", "(", "configs", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "vote_confidences", "=", "F", ".", "softmax", "(", "model", "(", "inputs", ")", ",", "dim", "=", "1", ")", "\n", "vote_confidences", ",", "vote_predictions", "=", "vote_confidences", "[", ":", ",", "start_class", ":", "end_class", ",", ":", "]", ".", "max", "(", "dim", "=", "1", ")", "\n", "vote_confidences", "=", "vote_confidences", ".", "view", "(", "total_num_voted_points", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vote_predictions", "=", "(", "vote_predictions", "+", "start_class", ")", ".", "view", "(", "total_num_voted_points", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "update_shape_predictions", "(", "vote_confidences", ",", "vote_predictions", ",", "shuffled_point_indices", ",", "\n", "confidences", ",", "predictions", ",", "total_num_voted_points", ")", "\n", "update_stats", "(", "stats", ",", "ground_truth", ",", "predictions", ",", "shape_id", ",", "start_class", ",", "end_class", ")", "\n", "\n", "", "np", ".", "save", "(", "configs", ".", "evaluate", ".", "stats_path", ",", "stats", ")", "\n", "print", "(", "'clssIoU: {}'", ".", "format", "(", "'  '", ".", "join", "(", "map", "(", "'{:>8.2f}'", ".", "format", ",", "stats", "[", ":", ",", "0", "]", "/", "stats", "[", ":", ",", "1", "]", "*", "100", ")", ")", ")", ")", "\n", "print", "(", "'meanIoU: {:4.2f}'", ".", "format", "(", "stats", "[", ":", ",", "0", "]", ".", "sum", "(", ")", "/", "stats", "[", ":", ",", "1", "]", ".", "sum", "(", ")", "*", "100", ")", ")", "\n", "\n", "\n", "", "@", "numba", ".", "jit", "(", ")", "\n", "def", "update_shape_predictions", "(", "vote_confidences", ",", "vote_predictions", ",", "shuffled_point_indices", ",", "\n", "shape_confidences", ",", "shape_predictions", ",", "total_num_voted_points", ")", ":", "\n", "    ", "for", "p", "in", "range", "(", "total_num_voted_points", ")", ":", "\n", "        ", "point_index", "=", "shuffled_point_indices", "[", "p", "]", "\n", "current_confidence", "=", "vote_confidences", "[", "p", "]", "\n", "if", "current_confidence", ">", "shape_confidences", "[", "point_index", "]", ":", "\n", "            ", "shape_confidences", "[", "point_index", "]", "=", "current_confidence", "\n", "shape_predictions", "[", "point_index", "]", "=", "vote_predictions", "[", "p", "]", "\n", "\n", "\n", "", "", "", "@", "numba", ".", "jit", "(", ")", "\n", "def", "update_stats", "(", "stats", ",", "ground_truth", ",", "predictions", ",", "shape_id", ",", "start_class", ",", "end_class", ")", ":", "\n", "    ", "iou", "=", "0.0", "\n", "for", "i", "in", "range", "(", "start_class", ",", "end_class", ")", ":", "\n", "        ", "igt", "=", "(", "ground_truth", "==", "i", ")", "\n", "ipd", "=", "(", "predictions", "==", "i", ")", "\n", "union", "=", "np", ".", "sum", "(", "igt", "|", "ipd", ")", "\n", "intersection", "=", "np", ".", "sum", "(", "igt", "&", "ipd", ")", "\n", "if", "union", "==", "0", ":", "\n", "            ", "iou", "+=", "1", "\n", "", "else", ":", "\n", "            ", "iou", "+=", "intersection", "/", "union", "\n", "", "", "iou", "/=", "(", "end_class", "-", "start_class", ")", "\n", "stats", "[", "shape_id", "]", "[", "0", "]", "+=", "iou", "\n", "stats", "[", "shape_id", "]", "[", "1", "]", "+=", "1", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "evaluate", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.eval.update_predictions": [[226, 245], ["numba.jit", "range", "numpy.cos", "numpy.sin"], "function", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.eval.write_predictions": [[247, 283], ["range", "os.path.exists", "os.mkdir", "results.items", "results[].append", "shutil.rmtree", "os.path.join", "os.path.exists", "sorted", "open", "f.writelines", "open", "f.readlines", "idx.strip.strip", "os.path.join", "os.path.exists", "pathlib.Path().touch", "results.keys", "pathlib.Path"], "function", ["None"], []], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.frustum_net.FrustumNet.__init__": [[15, 35], ["torch.Module.__init__", "instance_segmentation_net", "models.kitti.frustum.center_regression_net.CenterRegressionNet", "box_estimation_net", "frustum_net.FrustumNet.register_buffer", "isinstance", "size_templates.view"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "instance_segmentation_net", ",", "box_estimation_net", ",", "\n", "num_heading_angle_bins", ",", "num_size_templates", ",", "num_points_per_object", ",", "\n", "size_templates", ",", "extra_feature_channels", "=", "1", ",", "width_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "width_multiplier", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "width_multiplier", "=", "[", "width_multiplier", "]", "*", "3", "\n", "", "self", ".", "in_channels", "=", "3", "+", "extra_feature_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_heading_angle_bins", "=", "num_heading_angle_bins", "\n", "self", ".", "num_size_templates", "=", "num_size_templates", "\n", "self", ".", "num_points_per_object", "=", "num_points_per_object", "\n", "\n", "self", ".", "inst_seg_net", "=", "instance_segmentation_net", "(", "num_classes", "=", "num_classes", ",", "\n", "extra_feature_channels", "=", "extra_feature_channels", ",", "\n", "width_multiplier", "=", "width_multiplier", "[", "0", "]", ")", "\n", "self", ".", "center_reg_net", "=", "CenterRegressionNet", "(", "num_classes", "=", "num_classes", ",", "width_multiplier", "=", "width_multiplier", "[", "1", "]", ")", "\n", "self", ".", "box_est_net", "=", "box_estimation_net", "(", "num_classes", "=", "num_classes", ",", "num_heading_angle_bins", "=", "num_heading_angle_bins", ",", "\n", "num_size_templates", "=", "num_size_templates", ",", "\n", "width_multiplier", "=", "width_multiplier", "[", "2", "]", ")", "\n", "self", ".", "register_buffer", "(", "'size_templates'", ",", "size_templates", ".", "view", "(", "1", ",", "self", ".", "num_size_templates", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.frustum_net.FrustumNet.forward": [[36, 69], ["frustum_net.FrustumNet.inst_seg_net", "modules.logits_mask", "frustum_net.FrustumNet.center_reg_net", "frustum_net.FrustumNet.box_est_net", "frustum_net.FrustumNet.split", "dict", "estimations[].view", "one_hot_vectors.dim", "frustum_net.FrustumNet.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.functional.sampling.logits_mask"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", "=", "inputs", "[", "'features'", "]", "\n", "one_hot_vectors", "=", "inputs", "[", "'one_hot_vectors'", "]", "\n", "assert", "one_hot_vectors", ".", "dim", "(", ")", "==", "2", "\n", "\n", "# foreground/background segmentation", "\n", "mask_logits", "=", "self", ".", "inst_seg_net", "(", "{", "'features'", ":", "features", ",", "'one_hot_vectors'", ":", "one_hot_vectors", "}", ")", "\n", "# mask out Background points", "\n", "foreground_coords", ",", "foreground_coords_mean", ",", "_", "=", "F", ".", "logits_mask", "(", "\n", "coords", "=", "features", "[", ":", ",", ":", "3", ",", ":", "]", ",", "logits", "=", "mask_logits", ",", "num_points_per_object", "=", "self", ".", "num_points_per_object", "\n", ")", "\n", "# center regression", "\n", "delta_coords", "=", "self", ".", "center_reg_net", "(", "{", "'coords'", ":", "foreground_coords", ",", "'one_hot_vectors'", ":", "one_hot_vectors", "}", ")", "\n", "foreground_coords", "=", "foreground_coords", "-", "delta_coords", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# box estimation", "\n", "estimation", "=", "self", ".", "box_est_net", "(", "{", "'coords'", ":", "foreground_coords", ",", "'one_hot_vectors'", ":", "one_hot_vectors", "}", ")", "\n", "estimations", "=", "estimation", ".", "split", "(", "[", "3", ",", "self", ".", "num_heading_angle_bins", ",", "self", ".", "num_heading_angle_bins", ",", "\n", "self", ".", "num_size_templates", ",", "self", ".", "num_size_templates", "*", "3", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# parse results", "\n", "outputs", "=", "dict", "(", ")", "\n", "outputs", "[", "'mask_logits'", "]", "=", "mask_logits", "\n", "outputs", "[", "'center_reg'", "]", "=", "foreground_coords_mean", "+", "delta_coords", "\n", "outputs", "[", "'center'", "]", "=", "estimations", "[", "0", "]", "+", "outputs", "[", "'center_reg'", "]", "\n", "outputs", "[", "'heading_scores'", "]", "=", "estimations", "[", "1", "]", "\n", "outputs", "[", "'heading_residuals_normalized'", "]", "=", "estimations", "[", "2", "]", "\n", "outputs", "[", "'heading_residuals'", "]", "=", "estimations", "[", "2", "]", "*", "(", "np", ".", "pi", "/", "self", ".", "num_heading_angle_bins", ")", "\n", "outputs", "[", "'size_scores'", "]", "=", "estimations", "[", "3", "]", "\n", "size_residuals_normalized", "=", "estimations", "[", "4", "]", ".", "view", "(", "-", "1", ",", "self", ".", "num_size_templates", ",", "3", ")", "\n", "outputs", "[", "'size_residuals_normalized'", "]", "=", "size_residuals_normalized", "\n", "outputs", "[", "'size_residuals'", "]", "=", "size_residuals_normalized", "*", "self", ".", "size_templates", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.frustum_net.FrustumPointNet.__init__": [[72, 79], ["frustum_net.FrustumNet.__init__"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "num_heading_angle_bins", ",", "num_size_templates", ",", "num_points_per_object", ",", "\n", "size_templates", ",", "extra_feature_channels", "=", "1", ",", "width_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", "=", "num_classes", ",", "instance_segmentation_net", "=", "InstanceSegmentationPointNet", ",", "\n", "box_estimation_net", "=", "BoxEstimationPointNet", ",", "num_heading_angle_bins", "=", "num_heading_angle_bins", ",", "\n", "num_size_templates", "=", "num_size_templates", ",", "num_points_per_object", "=", "num_points_per_object", ",", "\n", "size_templates", "=", "size_templates", ",", "extra_feature_channels", "=", "extra_feature_channels", ",", "\n", "width_multiplier", "=", "width_multiplier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.frustum_net.FrustumPointNet2.__init__": [[82, 89], ["frustum_net.FrustumNet.__init__"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "num_heading_angle_bins", ",", "num_size_templates", ",", "num_points_per_object", ",", "\n", "size_templates", ",", "extra_feature_channels", "=", "1", ",", "width_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", "=", "num_classes", ",", "instance_segmentation_net", "=", "InstanceSegmentationPointNet2", ",", "\n", "box_estimation_net", "=", "BoxEstimationPointNet2", ",", "num_heading_angle_bins", "=", "num_heading_angle_bins", ",", "\n", "num_size_templates", "=", "num_size_templates", ",", "num_points_per_object", "=", "num_points_per_object", ",", "\n", "size_templates", "=", "size_templates", ",", "extra_feature_channels", "=", "extra_feature_channels", ",", "\n", "width_multiplier", "=", "width_multiplier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.frustum_net.FrustumPVCNNE.__init__": [[92, 101], ["functools.partial", "frustum_net.FrustumNet.__init__"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "num_heading_angle_bins", ",", "num_size_templates", ",", "num_points_per_object", ",", "\n", "size_templates", ",", "extra_feature_channels", "=", "1", ",", "width_multiplier", "=", "1", ",", "voxel_resolution_multiplier", "=", "1", ")", ":", "\n", "        ", "instance_segmentation_net", "=", "functools", ".", "partial", "(", "InstanceSegmentationPVCNN", ",", "\n", "voxel_resolution_multiplier", "=", "voxel_resolution_multiplier", ")", "\n", "super", "(", ")", ".", "__init__", "(", "num_classes", "=", "num_classes", ",", "instance_segmentation_net", "=", "instance_segmentation_net", ",", "\n", "box_estimation_net", "=", "BoxEstimationPointNet", ",", "num_heading_angle_bins", "=", "num_heading_angle_bins", ",", "\n", "num_size_templates", "=", "num_size_templates", ",", "num_points_per_object", "=", "num_points_per_object", ",", "\n", "size_templates", "=", "size_templates", ",", "extra_feature_channels", "=", "extra_feature_channels", ",", "\n", "width_multiplier", "=", "width_multiplier", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.center_regression_net.CenterRegressionNet.__init__": [[12, 24], ["torch.Module.__init__", "models.utils.create_mlp_components", "torch.Sequential", "torch.Sequential", "models.utils.create_mlp_components", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "3", ",", "width_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "3", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "layers", ",", "channels", "=", "create_mlp_components", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "blocks", ",", "\n", "classifier", "=", "False", ",", "dim", "=", "2", ",", "width_multiplier", "=", "width_multiplier", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "layers", ",", "_", "=", "create_mlp_components", "(", "in_channels", "=", "(", "channels", "+", "num_classes", ")", ",", "out_channels", "=", "[", "256", ",", "128", ",", "3", "]", ",", "\n", "classifier", "=", "True", ",", "dim", "=", "1", ",", "width_multiplier", "=", "width_multiplier", ")", "\n", "self", ".", "regression", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.frustum.center_regression_net.CenterRegressionNet.forward": [[25, 33], ["center_regression_net.CenterRegressionNet.features", "center_regression_net.CenterRegressionNet.regression", "one_hot_vectors.dim", "center_regression_net.CenterRegressionNet.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "coords", "=", "inputs", "[", "'coords'", "]", "\n", "one_hot_vectors", "=", "inputs", "[", "'one_hot_vectors'", "]", "\n", "assert", "one_hot_vectors", ".", "dim", "(", ")", "==", "2", "# [B, C]", "\n", "\n", "features", "=", "self", ".", "features", "(", "coords", ")", "\n", "features", "=", "features", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", ".", "values", "\n", "return", "self", ".", "regression", "(", "torch", ".", "cat", "(", "[", "features", ",", "one_hot_vectors", "]", ",", "dim", "=", "1", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.eval.prepare": [[14, 54], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "print", "configs.update_from_modules", "get_save_path", "os.makedirs", "configs.update_from_arguments", "configs.evaluate.best_checkpoint_path.endswith", "configs.evaluate.best_checkpoint_path.replace", "set_cuda_visible_devices", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.update_from_modules", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.common.get_save_path", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.config.Config.update_from_arguments", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.utils.device.set_cuda_visible_devices"], ["def", "prepare", "(", ")", ":", "\n", "    ", "from", "utils", ".", "common", "import", "get_save_path", "\n", "from", "utils", ".", "config", "import", "configs", "\n", "from", "utils", ".", "device", "import", "set_cuda_visible_devices", "\n", "\n", "# since PyTorch jams device selection, we have to parse args before import torch (issue #26790)", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'configs'", ",", "nargs", "=", "'+'", ")", "\n", "parser", ".", "add_argument", "(", "'--devices'", ",", "default", "=", "None", ")", "\n", "args", ",", "opts", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "if", "args", ".", "devices", "is", "not", "None", "and", "args", ".", "devices", "!=", "'cpu'", ":", "\n", "        ", "gpus", "=", "set_cuda_visible_devices", "(", "args", ".", "devices", ")", "\n", "", "else", ":", "\n", "        ", "gpus", "=", "[", "]", "\n", "\n", "", "print", "(", "f'==> loading configs from {args.configs}'", ")", "\n", "configs", ".", "update_from_modules", "(", "*", "args", ".", "configs", ")", "\n", "# define save path", "\n", "save_path", "=", "get_save_path", "(", "*", "args", ".", "configs", ",", "prefix", "=", "'runs'", ")", "\n", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "configs", ".", "train", ".", "save_path", "=", "save_path", "\n", "configs", ".", "train", ".", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'latest.pth.tar'", ")", "\n", "configs", ".", "train", ".", "best_checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "'best.pth.tar'", ")", "\n", "\n", "# override configs with args", "\n", "configs", ".", "update_from_arguments", "(", "*", "opts", ")", "\n", "if", "len", "(", "gpus", ")", "==", "0", ":", "\n", "        ", "configs", ".", "device", "=", "'cpu'", "\n", "configs", ".", "device_ids", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "configs", ".", "device", "=", "'cuda'", "\n", "configs", ".", "device_ids", "=", "gpus", "\n", "", "configs", ".", "dataset", ".", "split", "=", "configs", ".", "evaluate", ".", "dataset", ".", "split", "\n", "if", "'best_checkpoint_path'", "not", "in", "configs", ".", "evaluate", "or", "configs", ".", "evaluate", ".", "best_checkpoint_path", "is", "None", ":", "\n", "        ", "if", "'best_checkpoint_path'", "in", "configs", ".", "train", "and", "configs", ".", "train", ".", "best_checkpoint_path", "is", "not", "None", ":", "\n", "            ", "configs", ".", "evaluate", ".", "best_checkpoint_path", "=", "configs", ".", "train", ".", "best_checkpoint_path", "\n", "", "else", ":", "\n", "            ", "configs", ".", "evaluate", ".", "best_checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "train", ".", "save_path", ",", "'best.pth.tar'", ")", "\n", "", "", "assert", "configs", ".", "evaluate", ".", "best_checkpoint_path", ".", "endswith", "(", "'.pth.tar'", ")", "\n", "configs", ".", "evaluate", ".", "stats_path", "=", "configs", ".", "evaluate", ".", "best_checkpoint_path", ".", "replace", "(", "'.pth.tar'", ",", "'.eval.npy'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.eval.evaluate": [[56, 186], ["random.seed", "numpy.random.seed", "torch.manual_seed", "print", "os.path.exists", "print", "print", "configs.model", "torch.nn.DataParallel.to", "os.path.exists", "torch.nn.DataParallel.eval", "len", "numpy.zeros", "enumerate", "numpy.save", "eval.evaluate.print_stats"], "function", ["None"], ["\n", "\n", "", "def", "evaluate", "(", "configs", "=", "None", ")", ":", "\n", "    ", "configs", "=", "prepare", "(", ")", "if", "configs", "is", "None", "else", "configs", "\n", "\n", "import", "math", "\n", "import", "torch", "\n", "import", "torch", ".", "backends", ".", "cudnn", "as", "cudnn", "\n", "import", "torch", ".", "nn", ".", "functional", "as", "F", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "from", "meters", ".", "shapenet", "import", "MeterShapeNet", "\n", "\n", "###########", "\n", "# Prepare #", "\n", "###########", "\n", "\n", "if", "configs", ".", "device", "==", "'cuda'", ":", "\n", "        ", "cudnn", ".", "benchmark", "=", "True", "\n", "if", "configs", ".", "get", "(", "'deterministic'", ",", "False", ")", ":", "\n", "            ", "cudnn", ".", "deterministic", "=", "True", "\n", "cudnn", ".", "benchmark", "=", "False", "\n", "", "", "if", "(", "'seed'", "not", "in", "configs", ")", "or", "(", "configs", ".", "seed", "is", "None", ")", ":", "\n", "        ", "configs", ".", "seed", "=", "torch", ".", "initial_seed", "(", ")", "%", "(", "2", "**", "32", "-", "1", ")", "\n", "", "seed", "=", "configs", ".", "seed", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "print", "(", "configs", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "configs", ".", "evaluate", ".", "stats_path", ")", ":", "\n", "        ", "stats", "=", "np", ".", "load", "(", "configs", ".", "evaluate", ".", "stats_path", ")", "\n", "print", "(", "'clssIoU: {}'", ".", "format", "(", "'  '", ".", "join", "(", "map", "(", "'{:>8.2f}'", ".", "format", ",", "stats", "[", ":", ",", "0", "]", "/", "stats", "[", ":", ",", "1", "]", "*", "100", ")", ")", ")", ")", "\n", "print", "(", "'meanIoU: {:4.2f}'", ".", "format", "(", "stats", "[", ":", ",", "0", "]", ".", "sum", "(", ")", "/", "stats", "[", ":", ",", "1", "]", ".", "sum", "(", ")", "*", "100", ")", ")", "\n", "return", "\n", "\n", "#################################", "\n", "# Initialize DataLoaders, Model #", "\n", "#################################", "\n", "\n", "", "print", "(", "f'\\n==> loading dataset \"{configs.dataset}\"'", ")", "\n", "dataset", "=", "configs", ".", "dataset", "(", ")", "[", "configs", ".", "dataset", ".", "split", "]", "\n", "meter", "=", "MeterShapeNet", "(", ")", "\n", "\n", "print", "(", "f'\\n==> creating model \"{configs.model}\"'", ")", "\n", "model", "=", "configs", ".", "model", "(", ")", "\n", "if", "configs", ".", "device", "==", "'cuda'", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", "=", "model", ".", "to", "(", "configs", ".", "device", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "configs", ".", "evaluate", ".", "best_checkpoint_path", ")", ":", "\n", "        ", "print", "(", "f'==> loading checkpoint \"{configs.evaluate.best_checkpoint_path}\"'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "configs", ".", "evaluate", ".", "best_checkpoint_path", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "'model'", ")", ")", "\n", "del", "checkpoint", "\n", "", "else", ":", "\n", "        ", "return", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "##############", "\n", "# Evaluation #", "\n", "##############", "\n", "\n", "stats", "=", "np", ".", "zeros", "(", "(", "configs", ".", "data", ".", "num_shapes", ",", "2", ")", ")", "\n", "\n", "for", "shape_index", ",", "(", "file_path", ",", "shape_id", ")", "in", "enumerate", "(", "tqdm", "(", "dataset", ".", "file_paths", ",", "desc", "=", "'eval'", ",", "ncols", "=", "0", ")", ")", ":", "\n", "        ", "data", "=", "np", ".", "loadtxt", "(", "file_path", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "total_num_points_in_shape", "=", "data", ".", "shape", "[", "0", "]", "\n", "confidences", "=", "np", ".", "zeros", "(", "total_num_points_in_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "predictions", "=", "np", ".", "full", "(", "total_num_points_in_shape", ",", "-", "1", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n", "coords", "=", "data", "[", ":", ",", ":", "3", "]", "\n", "if", "dataset", ".", "normalize", ":", "\n", "            ", "coords", "=", "dataset", ".", "normalize_point_cloud", "(", "coords", ")", "\n", "", "coords", "=", "coords", ".", "transpose", "(", ")", "\n", "ground_truth", "=", "data", "[", ":", ",", "-", "1", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "if", "dataset", ".", "with_normal", ":", "\n", "            ", "normal", "=", "data", "[", ":", ",", "3", ":", "6", "]", ".", "transpose", "(", ")", "\n", "if", "dataset", ".", "with_one_hot_shape_id", ":", "\n", "                ", "shape_one_hot", "=", "np", ".", "zeros", "(", "(", "dataset", ".", "num_shapes", ",", "coords", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "shape_one_hot", "[", "shape_id", ",", ":", "]", "=", "1.0", "\n", "point_set", "=", "np", ".", "concatenate", "(", "[", "coords", ",", "normal", ",", "shape_one_hot", "]", ")", "\n", "", "else", ":", "\n", "                ", "point_set", "=", "np", ".", "concatenate", "(", "[", "coords", ",", "normal", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "dataset", ".", "with_one_hot_shape_id", ":", "\n", "                ", "shape_one_hot", "=", "np", ".", "zeros", "(", "(", "dataset", ".", "num_shapes", ",", "coords", ".", "shape", "[", "-", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "shape_one_hot", "[", "shape_id", ",", ":", "]", "=", "1.0", "\n", "point_set", "=", "np", ".", "concatenate", "(", "[", "coords", ",", "shape_one_hot", "]", ")", "\n", "", "else", ":", "\n", "                ", "point_set", "=", "coords", "\n", "", "", "extra_batch_size", "=", "configs", ".", "evaluate", ".", "num_votes", "*", "math", ".", "ceil", "(", "total_num_points_in_shape", "/", "dataset", ".", "num_points", ")", "\n", "total_num_voted_points", "=", "extra_batch_size", "*", "dataset", ".", "num_points", "\n", "num_repeats", "=", "math", ".", "ceil", "(", "total_num_voted_points", "/", "total_num_points_in_shape", ")", "\n", "shuffled_point_indices", "=", "np", ".", "tile", "(", "np", ".", "arange", "(", "total_num_points_in_shape", ")", ",", "num_repeats", ")", "\n", "shuffled_point_indices", "=", "shuffled_point_indices", "[", ":", "total_num_voted_points", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "shuffled_point_indices", ")", "\n", "start_class", ",", "end_class", "=", "meter", ".", "part_class_to_shape_part_classes", "[", "ground_truth", "[", "0", "]", "]", "\n", "\n", "# model inference", "\n", "inputs", "=", "torch", ".", "from_numpy", "(", "\n", "point_set", "[", ":", ",", "shuffled_point_indices", "]", ".", "reshape", "(", "-", "1", ",", "extra_batch_size", ",", "dataset", ".", "num_points", ")", ".", "transpose", "(", "1", ",", "0", ",", "2", ")", "\n", ")", ".", "float", "(", ")", ".", "to", "(", "configs", ".", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "vote_confidences", "=", "F", ".", "softmax", "(", "model", "(", "inputs", ")", ",", "dim", "=", "1", ")", "\n", "vote_confidences", ",", "vote_predictions", "=", "vote_confidences", "[", ":", ",", "start_class", ":", "end_class", ",", ":", "]", ".", "max", "(", "dim", "=", "1", ")", "\n", "vote_confidences", "=", "vote_confidences", ".", "view", "(", "total_num_voted_points", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vote_predictions", "=", "(", "vote_predictions", "+", "start_class", ")", ".", "view", "(", "total_num_voted_points", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "update_shape_predictions", "(", "vote_confidences", ",", "vote_predictions", ",", "shuffled_point_indices", ",", "\n", "confidences", ",", "predictions", ",", "total_num_voted_points", ")", "\n", "update_stats", "(", "stats", ",", "ground_truth", ",", "predictions", ",", "shape_id", ",", "start_class", ",", "end_class", ")", "\n", "\n", "", "np", ".", "save", "(", "configs", ".", "evaluate", ".", "stats_path", ",", "stats", ")", "\n", "print", "(", "'clssIoU: {}'", ".", "format", "(", "'  '", ".", "join", "(", "map", "(", "'{:>8.2f}'", ".", "format", ",", "stats", "[", ":", ",", "0", "]", "/", "stats", "[", ":", ",", "1", "]", "*", "100", ")", ")", ")", ")", "\n", "print", "(", "'meanIoU: {:4.2f}'", ".", "format", "(", "stats", "[", ":", ",", "0", "]", ".", "sum", "(", ")", "/", "stats", "[", ":", ",", "1", "]", ".", "sum", "(", ")", "*", "100", ")", ")", "\n", "\n", "\n", "", "@", "numba", ".", "jit", "(", ")", "\n", "def", "update_shape_predictions", "(", "vote_confidences", ",", "vote_predictions", ",", "shuffled_point_indices", ",", "\n", "shape_confidences", ",", "shape_predictions", ",", "total_num_voted_points", ")", ":", "\n", "    ", "for", "p", "in", "range", "(", "total_num_voted_points", ")", ":", "\n", "        ", "point_index", "=", "shuffled_point_indices", "[", "p", "]", "\n", "current_confidence", "=", "vote_confidences", "[", "p", "]", "\n", "if", "current_confidence", ">", "shape_confidences", "[", "point_index", "]", ":", "\n", "            ", "shape_confidences", "[", "point_index", "]", "=", "current_confidence", "\n", "shape_predictions", "[", "point_index", "]", "=", "vote_predictions", "[", "p", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.eval.update_scene_predictions": [[188, 204], ["numba.jit", "range", "range"], "function", ["None"], ["def", "update_stats", "(", "stats", ",", "ground_truth", ",", "predictions", ",", "shape_id", ",", "start_class", ",", "end_class", ")", ":", "\n", "    ", "iou", "=", "0.0", "\n", "for", "i", "in", "range", "(", "start_class", ",", "end_class", ")", ":", "\n", "        ", "igt", "=", "(", "ground_truth", "==", "i", ")", "\n", "ipd", "=", "(", "predictions", "==", "i", ")", "\n", "union", "=", "np", ".", "sum", "(", "igt", "|", "ipd", ")", "\n", "intersection", "=", "np", ".", "sum", "(", "igt", "&", "ipd", ")", "\n", "if", "union", "==", "0", ":", "\n", "            ", "iou", "+=", "1", "\n", "", "else", ":", "\n", "            ", "iou", "+=", "intersection", "/", "union", "\n", "", "", "iou", "/=", "(", "end_class", "-", "start_class", ")", "\n", "stats", "[", "shape_id", "]", "[", "0", "]", "+=", "iou", "\n", "stats", "[", "shape_id", "]", "[", "1", "]", "+=", "1", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.eval.update_stats": [[206, 215], ["numba.jit", "range", "int", "int"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.pvcnnpp.PVCNN2.__init__": [[22, 43], ["torch.Module.__init__", "models.utils.create_pointnet2_sa_components", "torch.ModuleList", "models.utils.create_pointnet2_fp_modules", "torch.ModuleList", "models.utils.create_mlp_components", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet2_sa_components", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet2_fp_modules", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "extra_feature_channels", "=", "6", ",", "width_multiplier", "=", "1", ",", "voxel_resolution_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "extra_feature_channels", "+", "3", "\n", "\n", "sa_layers", ",", "sa_in_channels", ",", "channels_sa_features", ",", "_", "=", "create_pointnet2_sa_components", "(", "\n", "sa_blocks", "=", "self", ".", "sa_blocks", ",", "extra_feature_channels", "=", "extra_feature_channels", ",", "with_se", "=", "True", ",", "\n", "width_multiplier", "=", "width_multiplier", ",", "voxel_resolution_multiplier", "=", "voxel_resolution_multiplier", "\n", ")", "\n", "self", ".", "sa_layers", "=", "nn", ".", "ModuleList", "(", "sa_layers", ")", "\n", "\n", "# only use extra features in the last fp module", "\n", "sa_in_channels", "[", "0", "]", "=", "extra_feature_channels", "\n", "fp_layers", ",", "channels_fp_features", "=", "create_pointnet2_fp_modules", "(", "\n", "fp_blocks", "=", "self", ".", "fp_blocks", ",", "in_channels", "=", "channels_sa_features", ",", "sa_in_channels", "=", "sa_in_channels", ",", "with_se", "=", "True", ",", "\n", "width_multiplier", "=", "width_multiplier", ",", "voxel_resolution_multiplier", "=", "voxel_resolution_multiplier", "\n", ")", "\n", "self", ".", "fp_layers", "=", "nn", ".", "ModuleList", "(", "fp_layers", ")", "\n", "\n", "layers", ",", "_", "=", "create_mlp_components", "(", "in_channels", "=", "channels_fp_features", ",", "out_channels", "=", "[", "128", ",", "0.5", ",", "num_classes", "]", ",", "\n", "classifier", "=", "True", ",", "dim", "=", "2", ",", "width_multiplier", "=", "width_multiplier", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.pvcnnpp.PVCNN2.forward": [[44, 60], ["isinstance", "inputs[].contiguous", "enumerate", "pvcnnpp.PVCNN2.classifier", "inputs[].contiguous", "in_features_list.append", "coords_list.append", "sa_blocks", "fp_blocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "isinstance", "(", "inputs", ",", "dict", ")", ":", "\n", "            ", "inputs", "=", "inputs", "[", "'features'", "]", "\n", "\n", "", "coords", ",", "features", "=", "inputs", "[", ":", ",", ":", "3", ",", ":", "]", ".", "contiguous", "(", ")", ",", "inputs", "\n", "coords_list", ",", "in_features_list", "=", "[", "]", ",", "[", "]", "\n", "for", "sa_blocks", "in", "self", ".", "sa_layers", ":", "\n", "            ", "in_features_list", ".", "append", "(", "features", ")", "\n", "coords_list", ".", "append", "(", "coords", ")", "\n", "features", ",", "coords", "=", "sa_blocks", "(", "(", "features", ",", "coords", ")", ")", "\n", "", "in_features_list", "[", "0", "]", "=", "inputs", "[", ":", ",", "3", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "for", "fp_idx", ",", "fp_blocks", "in", "enumerate", "(", "self", ".", "fp_layers", ")", ":", "\n", "            ", "features", ",", "coords", "=", "fp_blocks", "(", "(", "coords_list", "[", "-", "1", "-", "fp_idx", "]", ",", "coords", ",", "features", ",", "in_features_list", "[", "-", "1", "-", "fp_idx", "]", ")", ")", "\n", "\n", "", "return", "self", ".", "classifier", "(", "features", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.pointnet.PointNet.__init__": [[12, 28], ["torch.Module.__init__", "models.utils.create_pointnet_components", "torch.Sequential", "torch.Sequential", "models.utils.create_mlp_components", "torch.Sequential", "torch.Sequential", "models.utils.create_mlp_components", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet_components", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "include_coordinates", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "out_channels", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "[", "out_channels", "]", "]", "\n", "", "elif", "not", "isinstance", "(", "out_channels", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "out_channels", "]", "\n", "\n", "", "mlps", "=", "[", "]", "\n", "total_out_channels", "=", "0", "\n", "for", "_out_channels", "in", "out_channels", ":", "\n", "            ", "mlps", ".", "append", "(", "\n", "SharedMLP", "(", "in_channels", "=", "in_channels", "+", "(", "3", "if", "include_coordinates", "else", "0", ")", ",", "\n", "out_channels", "=", "_out_channels", ",", "dim", "=", "1", ")", "\n", ")", "\n", "total_out_channels", "+=", "_out_channels", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "include_coordinates", "=", "include_coordinates", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.pointnet.PointNet.forward": [[29, 37], ["isinstance", "pointnet.PointNet.point_features", "pointnet.PointNet.cloud_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pointnet.PointNet.classifier", "pointnet.PointNet.max", "pointnet.PointNet.unsqueeze().repeat", "pointnet.PointNet.unsqueeze", "inputs.size"], "methods", ["None"], ["self", ".", "out_channels", "=", "total_out_channels", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", "mlps", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", ",", "coords", "=", "inputs", "\n", "if", "self", ".", "include_coordinates", ":", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "coords", "]", ",", "dim", "=", "1", ")", "\n", "", "coords", "=", "torch", ".", "zeros", "(", "(", "coords", ".", "size", "(", "0", ")", ",", "3", ",", "1", ")", ",", "device", "=", "coords", ".", "device", ")", "\n", "if", "len", "(", "self", ".", "mlps", ")", ">", "1", ":", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.pvcnn.PVCNN.__init__": [[12, 33], ["torch.Module.__init__", "models.utils.create_pointnet_components", "torch.ModuleList", "torch.ModuleList", "models.utils.create_mlp_components", "torch.Sequential", "torch.Sequential", "models.utils.create_mlp_components", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet_components", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "num_shapes", ",", "extra_feature_channels", "=", "3", ",", "\n", "width_multiplier", "=", "1", ",", "voxel_resolution_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "extra_feature_channels", ">=", "0", "\n", "self", ".", "in_channels", "=", "extra_feature_channels", "+", "3", "\n", "self", ".", "num_shapes", "=", "num_shapes", "\n", "\n", "layers", ",", "channels_point", ",", "concat_channels_point", "=", "create_pointnet_components", "(", "\n", "blocks", "=", "self", ".", "blocks", ",", "in_channels", "=", "self", ".", "in_channels", ",", "with_se", "=", "True", ",", "normalize", "=", "False", ",", "\n", "width_multiplier", "=", "width_multiplier", ",", "voxel_resolution_multiplier", "=", "voxel_resolution_multiplier", "\n", ")", "\n", "self", ".", "point_features", "=", "nn", ".", "ModuleList", "(", "layers", ")", "\n", "\n", "layers", ",", "_", "=", "create_mlp_components", "(", "in_channels", "=", "(", "num_shapes", "+", "channels_point", "+", "concat_channels_point", ")", ",", "\n", "out_channels", "=", "[", "256", ",", "0.2", ",", "256", ",", "0.2", ",", "128", ",", "num_classes", "]", ",", "\n", "classifier", "=", "True", ",", "dim", "=", "2", ",", "width_multiplier", "=", "width_multiplier", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# inputs : [B, in_channels + S, N]", "\n", "        ", "features", "=", "inputs", "[", ":", ",", ":", "self", ".", "in_channels", ",", ":", "]", "\n", "one_hot_vectors", "=", "inputs", "[", ":", ",", "-", "self", ".", "num_shapes", ":", ",", ":", "]", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.pvcnn.PVCNN.forward": [[34, 47], ["isinstance", "range", "pvcnn.PVCNN.cloud_features", "out_features_list.append", "pvcnn.PVCNN.classifier", "len", "out_features_list.append", "pvcnn.PVCNN.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pvcnn.PVCNN.max", "pvcnn.PVCNN.unsqueeze", "coords.size"], "methods", ["None"], ["num_points", "=", "features", ".", "size", "(", "-", "1", ")", "\n", "\n", "coords", "=", "features", "[", ":", ",", ":", "3", ",", ":", "]", "\n", "out_features_list", "=", "[", "one_hot_vectors", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "point_features", ")", ")", ":", "\n", "            ", "features", ",", "_", "=", "self", ".", "point_features", "[", "i", "]", "(", "(", "features", ",", "coords", ")", ")", "\n", "out_features_list", ".", "append", "(", "features", ")", "\n", "", "out_features_list", ".", "append", "(", "features", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "values", ".", "repeat", "(", "[", "1", ",", "1", ",", "num_points", "]", ")", ")", "\n", "return", "self", ".", "classifier", "(", "torch", ".", "cat", "(", "out_features_list", ",", "dim", "=", "1", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.prepare_label": [[12, 78], ["os.listdir", "os.path.join", "os.listdir", "os.path.isdir", "os.path.join", "print", "os.path.join", "os.path.exists", "numpy.zeros", "numpy.zeros", "os.listdir", "numpy.delete", "numpy.delete", "numpy.save", "numpy.save", "open().close", "os.path.isdir", "os.path.join", "print", "os.path.exists", "os.makedirs", "print", "os.path.join", "numpy.tile", "numpy.vstack", "numpy.vstack", "obj.split", "open", "numpy.loadtxt", "print", "os.path.join"], "function", ["None"], ["def", "prepare_label", "(", "data_dir", ",", "output_dir", ")", ":", "\n", "    ", "object_dict", "=", "{", "\n", "'clutter'", ":", "0", ",", "\n", "'ceiling'", ":", "1", ",", "\n", "'floor'", ":", "2", ",", "\n", "'wall'", ":", "3", ",", "\n", "'beam'", ":", "4", ",", "\n", "'column'", ":", "5", ",", "\n", "'door'", ":", "6", ",", "\n", "'window'", ":", "7", ",", "\n", "'table'", ":", "8", ",", "\n", "'chair'", ":", "9", ",", "\n", "'sofa'", ":", "10", ",", "\n", "'bookcase'", ":", "11", ",", "\n", "'board'", ":", "12", "\n", "}", "\n", "\n", "for", "area", "in", "os", ".", "listdir", "(", "data_dir", ")", ":", "\n", "        ", "path_area", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "area", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path_area", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "path_dir_rooms", "=", "os", ".", "listdir", "(", "path_area", ")", "\n", "for", "room", "in", "path_dir_rooms", ":", "\n", "            ", "path_annotations", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "area", ",", "room", ",", "'Annotations'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path_annotations", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "print", "(", "path_annotations", ")", "\n", "path_prepare_label", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "area", ",", "room", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path_prepare_label", ",", "'.labels'", ")", ")", ":", "\n", "                ", "print", "(", "f'{path_prepare_label} already processed, skipping'", ")", "\n", "continue", "\n", "\n", "", "xyz_room", "=", "np", ".", "zeros", "(", "(", "1", ",", "6", ")", ")", "\n", "label_room", "=", "np", ".", "zeros", "(", "(", "1", ",", "1", ")", ")", "\n", "# make store directories", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path_prepare_label", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path_prepare_label", ")", "\n", "\n", "", "path_objects", "=", "os", ".", "listdir", "(", "path_annotations", ")", "\n", "for", "obj", "in", "path_objects", ":", "\n", "                ", "object_key", "=", "obj", ".", "split", "(", "'_'", ",", "1", ")", "[", "0", "]", "\n", "try", ":", "\n", "                    ", "val", "=", "object_dict", "[", "object_key", "]", "\n", "", "except", "KeyError", ":", "\n", "                    ", "continue", "\n", "", "print", "(", "f'{room}/{obj[:-4]}'", ")", "\n", "xyz_object_path", "=", "os", ".", "path", ".", "join", "(", "path_annotations", ",", "obj", ")", "\n", "try", ":", "\n", "                    ", "xyz_object", "=", "np", ".", "loadtxt", "(", "xyz_object_path", ")", "[", ":", ",", ":", "]", "# (N,6)", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "                    ", "print", "(", "f'ERROR: cannot load {xyz_object_path}: {e}'", ")", "\n", "continue", "\n", "", "label_object", "=", "np", ".", "tile", "(", "val", ",", "(", "xyz_object", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "# (N,1)", "\n", "xyz_room", "=", "np", ".", "vstack", "(", "(", "xyz_room", ",", "xyz_object", ")", ")", "\n", "label_room", "=", "np", ".", "vstack", "(", "(", "label_room", ",", "label_object", ")", ")", "\n", "\n", "", "xyz_room", "=", "np", ".", "delete", "(", "xyz_room", ",", "[", "0", "]", ",", "0", ")", "\n", "label_room", "=", "np", ".", "delete", "(", "label_room", ",", "[", "0", "]", ",", "0", ")", "\n", "\n", "np", ".", "save", "(", "path_prepare_label", "+", "'/xyzrgb.npy'", ",", "xyz_room", ")", "\n", "np", ".", "save", "(", "path_prepare_label", "+", "'/label.npy'", ",", "label_room", ")", "\n", "\n", "# Marker indicating we've processed this room", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "path_prepare_label", ",", "'.labels'", ")", ",", "'w'", ")", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.main": [[80, 287], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "prepare_data.prepare_label", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "print", "os.path.join", "enumerate", "os.path.join", "os.path.exists", "os.path.join", "print", "numpy.load", "os.path.join", "print", "numpy.load().astype().flatten", "numpy.split", "numpy.amin", "numpy.amax", "numpy.max", "numpy.max", "numpy.max", "open().close", "os.listdir", "print", "numpy.amin", "print", "numpy.amax", "numpy.floor().astype", "print", "numpy.unique", "numpy.split", "print", "dict", "range", "range", "print", "reversed", "range", "range", "datetime.datetime.now", "numpy.load().astype", "numpy.amin", "numpy.argsort", "numpy.cumsum", "range", "numpy.amin", "numpy.floor().astype", "numpy.unique", "numpy.split", "int", "range", "numpy.array", "len", "int", "int", "numpy.random.shuffle", "numpy.split", "numpy.min", "numpy.min", "numpy.concatenate", "range", "open", "datetime.datetime.now", "datetime.datetime.now", "numpy.floor", "numpy.concatenate", "numpy.array", "numpy.argsort", "numpy.cumsum", "numpy.average", "math.ceil", "point_indices_repeated.extend", "math.ceil", "math.ceil", "list", "datetime.datetime.now", "numpy.load", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now", "datetime.datetime.now", "numpy.floor", "numpy.repeat", "numpy.random.shuffle", "list", "numpy.cumsum", "os.path.join", "print", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.close", "print", "os.path.join", "prepare_data.save_ply_property_batch", "os.path.join", "prepare_data.save_ply_color_batch", "datetime.datetime.now", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.prepare_label", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.save_ply_property_batch", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.save_ply_color_batch"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "default_data_dir", "=", "'data/s3dis/Stanford3dDataset_v1.2_Aligned_Version'", "\n", "default_output_dir", "=", "'data/s3dis/pointcnn'", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--data'", ",", "dest", "=", "'data_dir'", ",", "default", "=", "default_data_dir", ",", "\n", "help", "=", "f'Path to S3DIS data (default is {default_data_dir})'", ")", "\n", "parser", ".", "add_argument", "(", "'-f'", ",", "'--folder'", ",", "dest", "=", "'output_dir'", ",", "default", "=", "default_output_dir", ",", "\n", "help", "=", "f'Folder to write labels (default is {default_output_dir})'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_num_points'", ",", "'-m'", ",", "help", "=", "'Max point number of each sample'", ",", "type", "=", "int", ",", "default", "=", "8192", ")", "\n", "parser", ".", "add_argument", "(", "'--block_size'", ",", "'-b'", ",", "help", "=", "'Block size'", ",", "type", "=", "float", ",", "default", "=", "1.5", ")", "\n", "parser", ".", "add_argument", "(", "'--grid_size'", ",", "'-g'", ",", "help", "=", "'Grid size'", ",", "type", "=", "float", ",", "default", "=", "0.03", ")", "\n", "parser", ".", "add_argument", "(", "'--save_ply'", ",", "'-s'", ",", "help", "=", "'Convert .pts to .ply'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "prepare_label", "(", "data_dir", "=", "args", ".", "data_dir", ",", "output_dir", "=", "args", ".", "output_dir", ")", "\n", "\n", "root", "=", "args", ".", "output_dir", "\n", "max_num_points", "=", "args", ".", "max_num_points", "\n", "\n", "batch_size", "=", "2048", "\n", "data", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_num_points", ",", "9", ")", ")", "\n", "data_num", "=", "np", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "label", "=", "np", ".", "zeros", "(", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "label_seg", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_num_points", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "indices_split_to_full", "=", "np", ".", "zeros", "(", "(", "batch_size", ",", "max_num_points", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "area_idx", "in", "range", "(", "1", ",", "7", ")", ":", "\n", "        ", "folder", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'Area_%d'", "%", "area_idx", ")", "\n", "datasets", "=", "[", "dataset", "for", "dataset", "in", "os", ".", "listdir", "(", "folder", ")", "]", "\n", "for", "dataset_idx", ",", "dataset", "in", "enumerate", "(", "datasets", ")", ":", "\n", "            ", "dataset_marker", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "dataset", ",", "'.dataset'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "dataset_marker", ")", ":", "\n", "                ", "print", "(", "f'{datetime.now()}-{folder}/{dataset} already processed, skipping'", ")", "\n", "continue", "\n", "", "filename_data", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "dataset", ",", "'xyzrgb.npy'", ")", "\n", "print", "(", "f'{datetime.now()}-Loading {filename_data}...'", ")", "\n", "# Modified according to PointNet convensions.", "\n", "xyzrgb", "=", "np", ".", "load", "(", "filename_data", ")", "\n", "xyzrgb", "[", ":", ",", "0", ":", "3", "]", "-=", "np", ".", "amin", "(", "xyzrgb", ",", "axis", "=", "0", ")", "[", "0", ":", "3", "]", "\n", "\n", "filename_labels", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "dataset", ",", "'label.npy'", ")", "\n", "print", "(", "f'{datetime.now()}-Loading {filename_labels}...'", ")", "\n", "labels", "=", "np", ".", "load", "(", "filename_labels", ")", ".", "astype", "(", "int", ")", ".", "flatten", "(", ")", "\n", "\n", "xyz", ",", "rgb", "=", "np", ".", "split", "(", "xyzrgb", ",", "[", "3", "]", ",", "axis", "=", "-", "1", ")", "\n", "xyz_min", "=", "np", ".", "amin", "(", "xyz", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "xyz_max", "=", "np", ".", "amax", "(", "xyz", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "xyz_center", "=", "(", "xyz_min", "+", "xyz_max", ")", "/", "2", "\n", "xyz_center", "[", "0", "]", "[", "-", "1", "]", "=", "xyz_min", "[", "0", "]", "[", "-", "1", "]", "\n", "# Remark: Don't do global alignment.", "\n", "# xyz = xyz - xyz_center", "\n", "rgb", "=", "rgb", "/", "255.0", "\n", "max_room_x", "=", "np", ".", "max", "(", "xyz", "[", ":", ",", "0", "]", ")", "\n", "max_room_y", "=", "np", ".", "max", "(", "xyz", "[", ":", ",", "1", "]", ")", "\n", "max_room_z", "=", "np", ".", "max", "(", "xyz", "[", ":", ",", "2", "]", ")", "\n", "\n", "offsets", "=", "[", "(", "'zero'", ",", "0.0", ")", ",", "(", "'half'", ",", "args", ".", "block_size", "/", "2", ")", "]", "\n", "for", "offset_name", ",", "offset", "in", "offsets", ":", "\n", "                ", "idx_h5", "=", "0", "\n", "idx", "=", "0", "\n", "\n", "print", "(", "f'{datetime.now()}-Computing block id of {xyzrgb.shape[0]} points...'", ")", "\n", "xyz_min", "=", "np", ".", "amin", "(", "xyz", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "offset", "\n", "xyz_max", "=", "np", ".", "amax", "(", "xyz", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "block_size", "=", "(", "args", ".", "block_size", ",", "args", ".", "block_size", ",", "2", "*", "(", "xyz_max", "[", "0", ",", "-", "1", "]", "-", "xyz_min", "[", "0", ",", "-", "1", "]", ")", ")", "\n", "# Note: Don't split over z axis.", "\n", "xyz_blocks", "=", "np", ".", "floor", "(", "(", "xyz", "-", "xyz_min", ")", "/", "block_size", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "print", "(", "f'{datetime.now()}-Collecting points belong to each block...'", ")", "\n", "blocks", ",", "point_block_indices", ",", "block_point_counts", "=", "np", ".", "unique", "(", "xyz_blocks", ",", "return_inverse", "=", "True", ",", "\n", "return_counts", "=", "True", ",", "axis", "=", "0", ")", "\n", "block_point_indices", "=", "np", ".", "split", "(", "np", ".", "argsort", "(", "point_block_indices", ")", ",", "np", ".", "cumsum", "(", "block_point_counts", "[", ":", "-", "1", "]", ")", ")", "\n", "print", "(", "f'{datetime.now()}-{dataset} is split into {blocks.shape[0]} blocks.'", ")", "\n", "\n", "block_to_block_idx_map", "=", "dict", "(", ")", "\n", "for", "block_idx", "in", "range", "(", "blocks", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "block", "=", "(", "blocks", "[", "block_idx", "]", "[", "0", "]", ",", "blocks", "[", "block_idx", "]", "[", "1", "]", ")", "\n", "block_to_block_idx_map", "[", "(", "block", "[", "0", "]", ",", "block", "[", "1", "]", ")", "]", "=", "block_idx", "\n", "\n", "# merge small blocks into one of their big neighbors", "\n", "", "block_point_count_threshold", "=", "max_num_points", "/", "10", "\n", "nbr_block_offsets", "=", "[", "(", "0", ",", "1", ")", ",", "(", "1", ",", "0", ")", ",", "(", "0", ",", "-", "1", ")", ",", "(", "-", "1", ",", "0", ")", ",", "(", "-", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "1", ",", "-", "1", ")", ",", "(", "-", "1", ",", "-", "1", ")", "]", "\n", "block_merge_count", "=", "0", "\n", "for", "block_idx", "in", "range", "(", "blocks", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "if", "block_point_counts", "[", "block_idx", "]", ">=", "block_point_count_threshold", ":", "\n", "                        ", "continue", "\n", "\n", "", "block", "=", "(", "blocks", "[", "block_idx", "]", "[", "0", "]", ",", "blocks", "[", "block_idx", "]", "[", "1", "]", ")", "\n", "for", "x", ",", "y", "in", "nbr_block_offsets", ":", "\n", "                        ", "nbr_block", "=", "(", "block", "[", "0", "]", "+", "x", ",", "block", "[", "1", "]", "+", "y", ")", "\n", "if", "nbr_block", "not", "in", "block_to_block_idx_map", ":", "\n", "                            ", "continue", "\n", "\n", "", "nbr_block_idx", "=", "block_to_block_idx_map", "[", "nbr_block", "]", "\n", "if", "block_point_counts", "[", "nbr_block_idx", "]", "<", "block_point_count_threshold", ":", "\n", "                            ", "continue", "\n", "\n", "", "block_point_indices", "[", "nbr_block_idx", "]", "=", "np", ".", "concatenate", "(", "\n", "[", "block_point_indices", "[", "nbr_block_idx", "]", ",", "block_point_indices", "[", "block_idx", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "block_point_indices", "[", "block_idx", "]", "=", "np", ".", "array", "(", "[", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "block_merge_count", "=", "block_merge_count", "+", "1", "\n", "break", "\n", "", "", "print", "(", "f'{datetime.now()}-{block_merge_count} of {blocks.shape[0]} blocks are merged.'", ")", "\n", "\n", "idx_last_non_empty_block", "=", "0", "\n", "for", "block_idx", "in", "reversed", "(", "range", "(", "blocks", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "                    ", "if", "block_point_indices", "[", "block_idx", "]", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "                        ", "idx_last_non_empty_block", "=", "block_idx", "\n", "break", "\n", "\n", "# uniformly sample each block", "\n", "", "", "for", "block_idx", "in", "range", "(", "idx_last_non_empty_block", "+", "1", ")", ":", "\n", "                    ", "point_indices", "=", "block_point_indices", "[", "block_idx", "]", "\n", "if", "point_indices", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "block_points", "=", "xyz", "[", "point_indices", "]", "\n", "block_min", "=", "np", ".", "amin", "(", "block_points", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "xyz_grids", "=", "np", ".", "floor", "(", "(", "block_points", "-", "block_min", ")", "/", "args", ".", "grid_size", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "grids", ",", "point_grid_indices", ",", "grid_point_counts", "=", "np", ".", "unique", "(", "xyz_grids", ",", "return_inverse", "=", "True", ",", "\n", "return_counts", "=", "True", ",", "axis", "=", "0", ")", "\n", "grid_point_indices", "=", "np", ".", "split", "(", "np", ".", "argsort", "(", "point_grid_indices", ")", ",", "np", ".", "cumsum", "(", "grid_point_counts", "[", ":", "-", "1", "]", ")", ")", "\n", "grid_point_count_avg", "=", "int", "(", "np", ".", "average", "(", "grid_point_counts", ")", ")", "\n", "point_indices_repeated", "=", "[", "]", "\n", "for", "grid_idx", "in", "range", "(", "grids", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "point_indices_in_block", "=", "grid_point_indices", "[", "grid_idx", "]", "\n", "repeat_num", "=", "math", ".", "ceil", "(", "grid_point_count_avg", "/", "point_indices_in_block", ".", "shape", "[", "0", "]", ")", "\n", "if", "repeat_num", ">", "1", ":", "\n", "                            ", "point_indices_in_block", "=", "np", ".", "repeat", "(", "point_indices_in_block", ",", "repeat_num", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "point_indices_in_block", ")", "\n", "point_indices_in_block", "=", "point_indices_in_block", "[", ":", "grid_point_count_avg", "]", "\n", "", "point_indices_repeated", ".", "extend", "(", "list", "(", "point_indices", "[", "point_indices_in_block", "]", ")", ")", "\n", "", "block_point_indices", "[", "block_idx", "]", "=", "np", ".", "array", "(", "point_indices_repeated", ")", "\n", "block_point_counts", "[", "block_idx", "]", "=", "len", "(", "point_indices_repeated", ")", "\n", "\n", "", "for", "block_idx", "in", "range", "(", "idx_last_non_empty_block", "+", "1", ")", ":", "\n", "                    ", "point_indices", "=", "block_point_indices", "[", "block_idx", "]", "\n", "if", "point_indices", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                        ", "continue", "\n", "\n", "", "block_point_num", "=", "point_indices", ".", "shape", "[", "0", "]", "\n", "block_split_num", "=", "int", "(", "math", ".", "ceil", "(", "block_point_num", "*", "1.0", "/", "max_num_points", ")", ")", "\n", "point_num_avg", "=", "int", "(", "math", ".", "ceil", "(", "block_point_num", "*", "1.0", "/", "block_split_num", ")", ")", "\n", "point_nums", "=", "[", "point_num_avg", "]", "*", "block_split_num", "\n", "point_nums", "[", "-", "1", "]", "=", "block_point_num", "-", "(", "point_num_avg", "*", "(", "block_split_num", "-", "1", ")", ")", "\n", "starts", "=", "[", "0", "]", "+", "list", "(", "np", ".", "cumsum", "(", "point_nums", ")", ")", "\n", "\n", "# Modified following convensions of PointNet.", "\n", "np", ".", "random", ".", "shuffle", "(", "point_indices", ")", "\n", "block_points", "=", "xyz", "[", "point_indices", "]", "\n", "block_rgb", "=", "rgb", "[", "point_indices", "]", "\n", "block_labels", "=", "labels", "[", "point_indices", "]", "\n", "x", ",", "y", ",", "z", "=", "np", ".", "split", "(", "block_points", ",", "(", "1", ",", "2", ")", ",", "axis", "=", "-", "1", ")", "\n", "norm_x", "=", "x", "/", "max_room_x", "\n", "norm_y", "=", "y", "/", "max_room_y", "\n", "norm_z", "=", "z", "/", "max_room_z", "\n", "\n", "minx", "=", "np", ".", "min", "(", "x", ")", "\n", "miny", "=", "np", ".", "min", "(", "y", ")", "\n", "x", "=", "x", "-", "(", "minx", "+", "args", ".", "block_size", "/", "2", ")", "\n", "y", "=", "y", "-", "(", "miny", "+", "args", ".", "block_size", "/", "2", ")", "\n", "\n", "block_xyzrgb", "=", "np", ".", "concatenate", "(", "[", "x", ",", "y", ",", "z", ",", "block_rgb", ",", "norm_x", ",", "norm_y", ",", "norm_z", "]", ",", "axis", "=", "-", "1", ")", "\n", "for", "block_split_idx", "in", "range", "(", "block_split_num", ")", ":", "\n", "                        ", "start", "=", "starts", "[", "block_split_idx", "]", "\n", "point_num", "=", "point_nums", "[", "block_split_idx", "]", "\n", "end", "=", "start", "+", "point_num", "\n", "idx_in_batch", "=", "idx", "%", "batch_size", "\n", "data", "[", "idx_in_batch", ",", "0", ":", "point_num", ",", "...", "]", "=", "block_xyzrgb", "[", "start", ":", "end", ",", ":", "]", "\n", "data_num", "[", "idx_in_batch", "]", "=", "point_num", "\n", "label", "[", "idx_in_batch", "]", "=", "dataset_idx", "# won't be used...", "\n", "label_seg", "[", "idx_in_batch", ",", "0", ":", "point_num", "]", "=", "block_labels", "[", "start", ":", "end", "]", "\n", "indices_split_to_full", "[", "idx_in_batch", ",", "0", ":", "point_num", "]", "=", "point_indices", "[", "start", ":", "end", "]", "\n", "\n", "if", "(", "(", "idx", "+", "1", ")", "%", "batch_size", "==", "0", ")", "or", "(", "block_idx", "==", "idx_last_non_empty_block", "and", "block_split_idx", "==", "block_split_num", "-", "1", ")", ":", "\n", "                            ", "item_num", "=", "idx_in_batch", "+", "1", "\n", "filename_h5", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "dataset", ",", "f'{offset_name}_{idx_h5:d}.h5'", ")", "\n", "print", "(", "f'{datetime.now()}-Saving {filename_h5}...'", ")", "\n", "\n", "file", "=", "h5py", ".", "File", "(", "filename_h5", ",", "'w'", ")", "\n", "file", ".", "create_dataset", "(", "'data'", ",", "data", "=", "data", "[", "0", ":", "item_num", ",", "...", "]", ")", "\n", "file", ".", "create_dataset", "(", "'data_num'", ",", "data", "=", "data_num", "[", "0", ":", "item_num", ",", "...", "]", ")", "\n", "file", ".", "create_dataset", "(", "'label'", ",", "data", "=", "label", "[", "0", ":", "item_num", ",", "...", "]", ")", "\n", "file", ".", "create_dataset", "(", "'label_seg'", ",", "data", "=", "label_seg", "[", "0", ":", "item_num", ",", "...", "]", ")", "\n", "file", ".", "create_dataset", "(", "'indices_split_to_full'", ",", "data", "=", "indices_split_to_full", "[", "0", ":", "item_num", ",", "...", "]", ")", "\n", "file", ".", "close", "(", ")", "\n", "\n", "if", "args", ".", "save_ply", ":", "\n", "                                ", "print", "(", "f'{datetime.now()}-Saving ply of {filename_h5}...'", ")", "\n", "filepath_label_ply", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "dataset", ",", "'ply_label'", ",", "\n", "f'label_{offset_name}_{idx_h5:d}'", ")", "\n", "save_ply_property_batch", "(", "data", "[", "0", ":", "item_num", ",", ":", ",", "0", ":", "3", "]", ",", "label_seg", "[", "0", ":", "item_num", ",", "...", "]", ",", "\n", "filepath_label_ply", ",", "data_num", "[", "0", ":", "item_num", ",", "...", "]", ",", "14", ")", "\n", "\n", "filepath_rgb_ply", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "dataset", ",", "'ply_rgb'", ",", "\n", "f'rgb_{offset_name}_{idx_h5:d}'", ")", "\n", "save_ply_color_batch", "(", "data", "[", "0", ":", "item_num", ",", ":", ",", "0", ":", "3", "]", ",", "data", "[", "0", ":", "item_num", ",", ":", ",", "3", ":", "6", "]", "*", "255", ",", "\n", "filepath_rgb_ply", ",", "data_num", "[", "0", ":", "item_num", ",", "...", "]", ")", "\n", "\n", "", "idx_h5", "=", "idx_h5", "+", "1", "\n", "", "idx", "=", "idx", "+", "1", "\n", "\n", "# Marker indicating we've processed this dataset", "\n", "", "", "", "open", "(", "dataset_marker", ",", "'w'", ")", ".", "close", "(", ")", "\n", "", "", "print", "(", "f'{datetime.now()}-Done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.save_ply": [[289, 322], ["numpy.core.records.fromarrays", "len", "numpy.empty", "plyfile.PlyData", "plyfile.PlyData.write", "points.transpose", "numpy.core.records.fromarrays", "numpy.core.records.fromarrays", "os.path.exists", "os.makedirs", "normals.transpose", "len", "len", "plyfile.PlyElement.describe", "os.path.dirname", "os.path.dirname", "colors.transpose"], "function", ["None"], ["", "def", "save_ply", "(", "points", ",", "filename", ",", "colors", "=", "None", ",", "normals", "=", "None", ")", ":", "\n", "    ", "vertex", "=", "np", ".", "core", ".", "records", ".", "fromarrays", "(", "points", ".", "transpose", "(", ")", ",", "names", "=", "'x, y, z'", ",", "formats", "=", "'f4, f4, f4'", ")", "\n", "n", "=", "len", "(", "vertex", ")", "\n", "desc", "=", "vertex", ".", "dtype", ".", "descr", "\n", "\n", "if", "normals", "is", "not", "None", ":", "\n", "        ", "vertex_normal", "=", "np", ".", "core", ".", "records", ".", "fromarrays", "(", "normals", ".", "transpose", "(", ")", ",", "names", "=", "'nx, ny, nz'", ",", "formats", "=", "'f4, f4, f4'", ")", "\n", "assert", "len", "(", "vertex_normal", ")", "==", "n", "\n", "desc", "=", "desc", "+", "vertex_normal", ".", "dtype", ".", "descr", "\n", "\n", "", "if", "colors", "is", "not", "None", ":", "\n", "        ", "vertex_color", "=", "np", ".", "core", ".", "records", ".", "fromarrays", "(", "colors", ".", "transpose", "(", ")", "*", "255", ",", "names", "=", "'red, green, blue'", ",", "\n", "formats", "=", "'u1, u1, u1'", ")", "\n", "assert", "len", "(", "vertex_color", ")", "==", "n", "\n", "desc", "=", "desc", "+", "vertex_color", ".", "dtype", ".", "descr", "\n", "\n", "", "vertex_all", "=", "np", ".", "empty", "(", "n", ",", "dtype", "=", "desc", ")", "\n", "\n", "for", "prop", "in", "vertex", ".", "dtype", ".", "names", ":", "\n", "        ", "vertex_all", "[", "prop", "]", "=", "vertex", "[", "prop", "]", "\n", "\n", "", "if", "normals", "is", "not", "None", ":", "\n", "        ", "for", "prop", "in", "vertex_normal", ".", "dtype", ".", "names", ":", "\n", "            ", "vertex_all", "[", "prop", "]", "=", "vertex_normal", "[", "prop", "]", "\n", "\n", "", "", "if", "colors", "is", "not", "None", ":", "\n", "        ", "for", "prop", "in", "vertex_color", ".", "dtype", ".", "names", ":", "\n", "            ", "vertex_all", "[", "prop", "]", "=", "vertex_color", "[", "prop", "]", "\n", "\n", "", "", "ply", "=", "plyfile", ".", "PlyData", "(", "[", "plyfile", ".", "PlyElement", ".", "describe", "(", "vertex_all", ",", "'vertex'", ")", "]", ",", "text", "=", "False", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ")", "\n", "", "ply", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.save_ply_property": [[324, 334], ["numpy.full", "matplotlib.cm.get_cmap", "range", "prepare_data.save_ply", "numpy.array", "cm.get_cmap."], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.save_ply"], ["", "def", "save_ply_property", "(", "points", ",", "property", ",", "property_max", ",", "filename", ",", "cmap_name", "=", "'tab20'", ")", ":", "\n", "    ", "point_num", "=", "points", ".", "shape", "[", "0", "]", "\n", "colors", "=", "np", ".", "full", "(", "points", ".", "shape", ",", "0.5", ")", "\n", "cmap", "=", "cm", ".", "get_cmap", "(", "cmap_name", ")", "\n", "for", "point_idx", "in", "range", "(", "point_num", ")", ":", "\n", "        ", "if", "property", "[", "point_idx", "]", "==", "0", ":", "\n", "            ", "colors", "[", "point_idx", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "colors", "[", "point_idx", "]", "=", "cmap", "(", "property", "[", "point_idx", "]", "/", "property_max", ")", "[", ":", "3", "]", "\n", "", "", "save_ply", "(", "points", ",", "filename", ",", "colors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.save_ply_color_batch": [[336, 348], ["range", "isinstance", "isinstance", "os.path.splitext", "prepare_data.save_ply", "prepare_data.save_ply"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.save_ply", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.save_ply"], ["", "def", "save_ply_color_batch", "(", "points_batch", ",", "colors_batch", ",", "file_path", ",", "points_num", "=", "None", ")", ":", "\n", "    ", "batch_size", "=", "points_batch", ".", "shape", "[", "0", "]", "\n", "if", "not", "isinstance", "(", "file_path", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "basename", "=", "os", ".", "path", ".", "splitext", "(", "file_path", ")", "[", "0", "]", "\n", "ext", "=", "'.ply'", "\n", "", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "point_num", "=", "points_batch", ".", "shape", "[", "1", "]", "if", "points_num", "is", "None", "else", "points_num", "[", "batch_idx", "]", "\n", "if", "isinstance", "(", "file_path", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "save_ply", "(", "points_batch", "[", "batch_idx", "]", "[", ":", "point_num", "]", ",", "file_path", "[", "batch_idx", "]", ",", "colors_batch", "[", "batch_idx", "]", "[", ":", "point_num", "]", ")", "\n", "", "else", ":", "\n", "            ", "save_ply", "(", "points_batch", "[", "batch_idx", "]", "[", ":", "point_num", "]", ",", "f'{basename}_{batch_idx:04d}{ext}'", ",", "\n", "colors_batch", "[", "batch_idx", "]", "[", ":", "point_num", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.save_ply_property_batch": [[350, 365], ["range", "isinstance", "numpy.max", "isinstance", "os.path.splitext", "prepare_data.save_ply_property", "prepare_data.save_ply_property"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.save_ply_property", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.s3dis.prepare_data.save_ply_property"], ["", "", "", "def", "save_ply_property_batch", "(", "points_batch", ",", "property_batch", ",", "file_path", ",", "points_num", "=", "None", ",", "property_max", "=", "None", ",", "\n", "cmap_name", "=", "'tab20'", ")", ":", "\n", "    ", "batch_size", "=", "points_batch", ".", "shape", "[", "0", "]", "\n", "if", "not", "isinstance", "(", "file_path", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "basename", "=", "os", ".", "path", ".", "splitext", "(", "file_path", ")", "[", "0", "]", "\n", "ext", "=", "'.ply'", "\n", "", "property_max", "=", "np", ".", "max", "(", "property_batch", ")", "if", "property_max", "is", "None", "else", "property_max", "\n", "for", "batch_idx", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "point_num", "=", "points_batch", ".", "shape", "[", "1", "]", "if", "points_num", "is", "None", "else", "points_num", "[", "batch_idx", "]", "\n", "if", "isinstance", "(", "file_path", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "save_ply_property", "(", "points_batch", "[", "batch_idx", "]", "[", ":", "point_num", "]", ",", "property_batch", "[", "batch_idx", "]", "[", ":", "point_num", "]", ",", "\n", "property_max", ",", "file_path", "[", "batch_idx", "]", ",", "cmap_name", ")", "\n", "", "else", ":", "\n", "            ", "save_ply_property", "(", "points_batch", "[", "batch_idx", "]", "[", ":", "point_num", "]", ",", "property_batch", "[", "batch_idx", "]", "[", ":", "point_num", "]", ",", "\n", "property_max", ",", "f'{basename}_{batch_idx:04d}{ext}'", ",", "cmap_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils._linear_bn_relu": [[11, 13], ["torch.Sequential", "torch.Linear", "torch.BatchNorm1d", "torch.ReLU"], "function", ["None"], ["# distributed under the License is distributed on an \"AS IS\" BASIS,", "\n", "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.", "\n", "# See the License for the specific language governing permissions and", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components": [[15, 46], ["isinstance", "len", "torch.Sequential", "layers.append", "int", "layers.append", "layers.append", "layers.append", "layers.append", "layers.append", "int", "len", "torch.Dropout", "block", "torch.Linear", "utils._linear_bn_relu", "torch.Conv1d", "modules.SharedMLP", "int", "int"], "function", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils._linear_bn_relu"], ["\n", "import", "numba", "\n", "import", "numpy", "as", "np", "\n", "from", "scipy", ".", "spatial", "import", "ConvexHull", "\n", "\n", "__all__", "=", "[", "'get_box_iou_3d'", "]", "\n", "\n", "\n", "@", "numba", ".", "njit", "(", ")", "\n", "def", "poly_area", "(", "coords", ")", ":", "\n", "    ", "\"\"\"\n    calculate area of polygon given x-y coordinates\n    (ref: http://stackoverflow.com/questions/24467972/calculate-area-of-polygon-given-x-y-coordinates)\n    :param coords: FloatTensor[4, 2]\n    \"\"\"", "\n", "x", "=", "coords", "[", ":", ",", "0", "]", "\n", "y", "=", "coords", "[", ":", ",", "1", "]", "\n", "return", "0.5", "*", "np", ".", "abs", "(", "np", ".", "dot", "(", "x", ",", "np", ".", "roll", "(", "y", ",", "1", ")", ")", "-", "np", ".", "dot", "(", "y", ",", "np", ".", "roll", "(", "x", ",", "1", ")", ")", ")", "\n", "\n", "\n", "", "def", "polygon_clip", "(", "subject_polygon", ",", "clip_polygon", ")", ":", "\n", "    ", "\"\"\"\n    clip a polygon with another polygon\n    (ref: https://rosettacode.org/wiki/Sutherland-Hodgman_polygon_clipping#Python)\n    :param subject_polygon: a list of (x,y) 2d points, any polygon\n    :param clip_polygon: a list of (x,y) 2d points, has to be *convex*\n    :return:\n        a list of (x,y) vertex point for the intersection polygon\n    \"\"\"", "\n", "\n", "def", "inside", "(", "p", ")", ":", "\n", "        ", "return", "(", "cp2", "[", "0", "]", "-", "cp1", "[", "0", "]", ")", "*", "(", "p", "[", "1", "]", "-", "cp1", "[", "1", "]", ")", ">", "(", "cp2", "[", "1", "]", "-", "cp1", "[", "1", "]", ")", "*", "(", "p", "[", "0", "]", "-", "cp1", "[", "0", "]", ")", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet_components": [[48, 65], ["int", "range", "functools.partial", "layers.append", "functools.partial.", "int"], "function", ["None"], ["", "def", "compute_intersection", "(", ")", ":", "\n", "        ", "dc", "=", "[", "cp1", "[", "0", "]", "-", "cp2", "[", "0", "]", ",", "cp1", "[", "1", "]", "-", "cp2", "[", "1", "]", "]", "\n", "dp", "=", "[", "s", "[", "0", "]", "-", "e", "[", "0", "]", ",", "s", "[", "1", "]", "-", "e", "[", "1", "]", "]", "\n", "n1", "=", "cp1", "[", "0", "]", "*", "cp2", "[", "1", "]", "-", "cp1", "[", "1", "]", "*", "cp2", "[", "0", "]", "\n", "n2", "=", "s", "[", "0", "]", "*", "e", "[", "1", "]", "-", "s", "[", "1", "]", "*", "e", "[", "0", "]", "\n", "n3", "=", "1.0", "/", "(", "dc", "[", "0", "]", "*", "dp", "[", "1", "]", "-", "dc", "[", "1", "]", "*", "dp", "[", "0", "]", ")", "\n", "return", "[", "(", "n1", "*", "dp", "[", "0", "]", "-", "n2", "*", "dc", "[", "0", "]", ")", "*", "n3", ",", "(", "n1", "*", "dp", "[", "1", "]", "-", "n2", "*", "dc", "[", "1", "]", ")", "*", "n3", "]", "\n", "\n", "", "output_list", "=", "subject_polygon", "\n", "cp1", "=", "clip_polygon", "[", "-", "1", "]", "\n", "\n", "for", "clip_vertex", "in", "clip_polygon", ":", "\n", "        ", "cp2", "=", "clip_vertex", "\n", "input_list", "=", "output_list", "\n", "output_list", "=", "[", "]", "\n", "s", "=", "input_list", "[", "-", "1", "]", "\n", "\n", "for", "subject_vertex", "in", "input_list", ":", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet2_sa_components": [[67, 110], ["sa_in_channels.append", "sa_blocks.append", "int", "range", "isinstance", "functools.partial", "functools.partial.", "len", "sa_layers.append", "sa_layers.append", "functools.partial", "sa_blocks.append", "_out_channels.append", "_out_channels.append", "torch.Sequential", "functools.partial.", "int", "int", "int"], "function", ["None"], ["if", "inside", "(", "e", ")", ":", "\n", "                ", "if", "not", "inside", "(", "s", ")", ":", "\n", "                    ", "output_list", ".", "append", "(", "compute_intersection", "(", ")", ")", "\n", "", "output_list", ".", "append", "(", "e", ")", "\n", "", "elif", "inside", "(", "s", ")", ":", "\n", "                ", "output_list", ".", "append", "(", "compute_intersection", "(", ")", ")", "\n", "", "s", "=", "e", "\n", "", "cp1", "=", "cp2", "\n", "if", "len", "(", "output_list", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "", "return", "output_list", "\n", "\n", "\n", "", "def", "convex_hull_intersection", "(", "p1", ",", "pt", ")", ":", "\n", "    ", "\"\"\"\n    compute area of two convex hull's intersection area\n    :param p1: a list of (x,y) tuples of hull vertices\n    :param pt: a list of (x,y) tuples of hull vertices\n    :return:\n        a list of (x,y) for the intersection and its volume\n    \"\"\"", "\n", "inter_p", "=", "polygon_clip", "(", "p1", ",", "pt", ")", "\n", "if", "inter_p", "is", "not", "None", ":", "\n", "        ", "hull_inter", "=", "ConvexHull", "(", "inter_p", ")", "\n", "return", "inter_p", ",", "hull_inter", ".", "volume", "\n", "", "else", ":", "\n", "        ", "return", "None", ",", "0.0", "\n", "\n", "\n", "", "", "@", "numba", ".", "njit", "(", ")", "\n", "def", "box_volume_3d", "(", "corners", ")", ":", "\n", "    ", "a", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", ":", ",", "0", "]", "-", "corners", "[", ":", ",", "1", "]", ")", "**", "2", ")", ")", "\n", "b", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", ":", ",", "1", "]", "-", "corners", "[", ":", ",", "2", "]", ")", "**", "2", ")", ")", "\n", "c", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", ":", ",", "0", "]", "-", "corners", "[", ":", ",", "4", "]", ")", "**", "2", ")", ")", "\n", "return", "a", "*", "b", "*", "c", "\n", "\n", "\n", "", "def", "get_box_iou_3d", "(", "corners_1", ",", "corners_t", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet2_fp_modules": [[112, 141], ["enumerate", "tuple", "fp_blocks.append", "modules.PointNetFPModule", "int", "range", "len", "fp_layers.append", "fp_layers.append", "int", "functools.partial", "fp_blocks.append", "torch.Sequential", "functools.partial.", "int"], "function", ["None"], ["\n", "if", "corners_1", ".", "ndim", "==", "3", ":", "\n", "        ", "batch_size", "=", "corners_1", ".", "shape", "[", "0", "]", "\n", "iou_3d", "=", "np", ".", "zeros", "(", "batch_size", ")", "\n", "iou_2d", "=", "np", ".", "zeros", "(", "batch_size", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "iou_3d", "[", "b", "]", ",", "iou_2d", "[", "b", "]", "=", "get_box_iou_3d", "(", "corners_1", "[", "b", "]", ",", "corners_t", "[", "b", "]", ")", "\n", "", "return", "iou_3d", ",", "iou_2d", "\n", "", "else", ":", "\n", "# corner points are in counter clockwise order", "\n", "        ", "corners_1_upper_xz", "=", "[", "(", "corners_1", "[", "0", ",", "3", "]", ",", "corners_1", "[", "2", ",", "3", "]", ")", ",", "(", "corners_1", "[", "0", ",", "2", "]", ",", "corners_1", "[", "2", ",", "2", "]", ")", ",", "\n", "(", "corners_1", "[", "0", ",", "1", "]", ",", "corners_1", "[", "2", ",", "1", "]", ")", ",", "(", "corners_1", "[", "0", ",", "0", "]", ",", "corners_1", "[", "2", ",", "0", "]", ")", "]", "\n", "corners_t_upper_xz", "=", "[", "(", "corners_t", "[", "0", ",", "3", "]", ",", "corners_t", "[", "2", ",", "3", "]", ")", ",", "(", "corners_t", "[", "0", ",", "2", "]", ",", "corners_t", "[", "2", ",", "2", "]", ")", ",", "\n", "(", "corners_t", "[", "0", ",", "1", "]", ",", "corners_t", "[", "2", ",", "1", "]", ")", ",", "(", "corners_t", "[", "0", ",", "0", "]", ",", "corners_t", "[", "2", ",", "0", "]", ")", "]", "\n", "area_1", "=", "poly_area", "(", "np", ".", "array", "(", "corners_1_upper_xz", ")", ")", "\n", "area_2", "=", "poly_area", "(", "np", ".", "array", "(", "corners_t_upper_xz", ")", ")", "\n", "inter", ",", "inter_area", "=", "convex_hull_intersection", "(", "corners_1_upper_xz", ",", "corners_t_upper_xz", ")", "\n", "iou_2d", "=", "inter_area", "/", "(", "area_1", "+", "area_2", "-", "inter_area", ")", "\n", "y_max", "=", "min", "(", "corners_1", "[", "1", ",", "0", "]", ",", "corners_t", "[", "1", ",", "0", "]", ")", "\n", "y_min", "=", "max", "(", "corners_1", "[", "1", ",", "4", "]", ",", "corners_t", "[", "1", ",", "4", "]", ")", "\n", "inter_vol", "=", "inter_area", "*", "max", "(", "0.0", ",", "y_max", "-", "y_min", ")", "\n", "vol1", "=", "box_volume_3d", "(", "corners_1", ")", "\n", "vol2", "=", "box_volume_3d", "(", "corners_t", ")", "\n", "iou_3d", "=", "inter_vol", "/", "(", "vol1", "+", "vol2", "-", "inter_vol", ")", "\n", "return", "iou_3d", ",", "iou_2d", "\n", "", "", ""]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.segmentation.pointnetpp.InstanceSegmentationNet2.__init__": [[10, 35], ["torch.Module.__init__", "models.utils.create_pointnet2_sa_components", "torch.ModuleList", "torch.ModuleList", "models.utils.create_pointnet2_fp_modules", "torch.ModuleList", "torch.ModuleList", "models.utils.create_mlp_components", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet2_sa_components", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet2_fp_modules", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "num_shapes", ",", "sa_blocks", ",", "fp_blocks", ",", "with_one_hot_shape_id", "=", "True", ",", "\n", "extra_feature_channels", "=", "3", ",", "width_multiplier", "=", "1", ",", "voxel_resolution_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "extra_feature_channels", ">=", "0", "\n", "\n", "self", ".", "in_channels", "=", "extra_feature_channels", "+", "3", "\n", "self", ".", "num_shapes", "=", "num_shapes", "\n", "self", ".", "with_one_hot_shape_id", "=", "with_one_hot_shape_id", "\n", "\n", "sa_layers", ",", "sa_in_channels", ",", "channels_sa_features", ",", "_", "=", "create_pointnet2_sa_components", "(", "\n", "sa_blocks", "=", "sa_blocks", ",", "extra_feature_channels", "=", "extra_feature_channels", ",", "width_multiplier", "=", "width_multiplier", "\n", ")", "\n", "self", ".", "sa_layers", "=", "nn", ".", "ModuleList", "(", "sa_layers", ")", "\n", "\n", "# use one hot vector in the last fp module", "\n", "sa_in_channels", "[", "0", "]", "+=", "num_shapes", "if", "with_one_hot_shape_id", "else", "0", "\n", "fp_layers", ",", "channels_fp_features", "=", "create_pointnet2_fp_modules", "(", "\n", "fp_blocks", "=", "fp_blocks", ",", "in_channels", "=", "channels_sa_features", ",", "sa_in_channels", "=", "sa_in_channels", ",", "\n", "width_multiplier", "=", "width_multiplier", ",", "voxel_resolution_multiplier", "=", "voxel_resolution_multiplier", "\n", ")", "\n", "self", ".", "fp_layers", "=", "nn", ".", "ModuleList", "(", "fp_layers", ")", "\n", "\n", "layers", ",", "_", "=", "create_mlp_components", "(", "in_channels", "=", "channels_fp_features", ",", "out_channels", "=", "[", "128", ",", "0.5", ",", "num_classes", "]", ",", "\n", "classifier", "=", "True", ",", "dim", "=", "2", ",", "width_multiplier", "=", "width_multiplier", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.segmentation.pointnetpp.InstanceSegmentationNet2.forward": [[36, 57], ["torch.cat.contiguous", "torch.cat.contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "pointnetpp.InstanceSegmentationNet2.classifier", "one_hot_vectors.dim", "features[].contiguous", "features[].contiguous", "in_features_list.append", "coords_list.append", "sa_module", "fp_module", "one_hot_vectors.unsqueeze().repeat", "one_hot_vectors.unsqueeze", "extra_features.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# inputs : [B, in_channels + S, N]", "\n", "        ", "features", "=", "inputs", "[", ":", ",", ":", "self", ".", "in_channels", ",", ":", "]", "\n", "if", "self", ".", "with_one_hot_shape_id", ":", "\n", "            ", "assert", "inputs", ".", "size", "(", "1", ")", "==", "self", ".", "in_channels", "+", "self", ".", "num_shapes", "\n", "features_with_one_hot_vectors", "=", "inputs", "\n", "", "else", ":", "\n", "            ", "features_with_one_hot_vectors", "=", "features", "\n", "\n", "", "coords", ",", "features", "=", "features", "[", ":", ",", ":", "3", ",", ":", "]", ".", "contiguous", "(", ")", ",", "features", "[", ":", ",", "3", ":", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "coords_list", ",", "in_features_list", "=", "[", "]", ",", "[", "]", "\n", "for", "sa_module", "in", "self", ".", "sa_layers", ":", "\n", "            ", "in_features_list", ".", "append", "(", "features", ")", "\n", "coords_list", ".", "append", "(", "coords", ")", "\n", "features", ",", "coords", "=", "sa_module", "(", "(", "features", ",", "coords", ")", ")", "\n", "", "in_features_list", "[", "0", "]", "=", "features_with_one_hot_vectors", ".", "contiguous", "(", ")", "\n", "\n", "for", "fp_idx", ",", "fp_module", "in", "enumerate", "(", "self", ".", "fp_layers", ")", ":", "\n", "            ", "features", ",", "coords", "=", "fp_module", "(", "(", "coords_list", "[", "-", "1", "-", "fp_idx", "]", ",", "coords", ",", "features", ",", "in_features_list", "[", "-", "1", "-", "fp_idx", "]", ")", ")", "\n", "\n", "", "return", "self", ".", "classifier", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.segmentation.pointnetpp.InstanceSegmentationPointNet2.__init__": [[67, 71], ["pointnetpp.InstanceSegmentationNet2.__init__"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "num_shapes", ",", "extra_feature_channels", "=", "3", ",", "width_multiplier", "=", "1", ",", "\n", "voxel_resolution_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "num_classes", "=", "num_classes", ",", "num_shapes", "=", "num_shapes", ",", "sa_blocks", "=", "self", ".", "sa_blocks", ",", "fp_blocks", "=", "self", ".", "fp_blocks", ",", "\n", "with_one_hot_shape_id", "=", "False", ",", "extra_feature_channels", "=", "extra_feature_channels", ",", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.segmentation.pointnet.InstanceSegmentationNet.__init__": [[10, 33], ["torch.Module.__init__", "models.utils.create_pointnet_components", "torch.Sequential", "torch.Sequential", "models.utils.create_pointnet_components", "torch.Sequential", "torch.Sequential", "models.utils.create_mlp_components", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet_components", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet_components", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components"], ["\n", "class", "PointNetAModule", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "include_coordinates", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "out_channels", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "[", "out_channels", "]", "]", "\n", "", "elif", "not", "isinstance", "(", "out_channels", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "out_channels", "]", "\n", "\n", "", "mlps", "=", "[", "]", "\n", "total_out_channels", "=", "0", "\n", "for", "_out_channels", "in", "out_channels", ":", "\n", "            ", "mlps", ".", "append", "(", "\n", "SharedMLP", "(", "in_channels", "=", "in_channels", "+", "(", "3", "if", "include_coordinates", "else", "0", ")", ",", "\n", "out_channels", "=", "_out_channels", ",", "dim", "=", "1", ")", "\n", ")", "\n", "total_out_channels", "+=", "_out_channels", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "include_coordinates", "=", "include_coordinates", "\n", "self", ".", "out_channels", "=", "total_out_channels", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", "mlps", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", ",", "coords", "=", "inputs", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.segmentation.pointnet.InstanceSegmentationNet.forward": [[34, 44], ["features.size", "inputs[].unsqueeze().repeat", "pointnet.InstanceSegmentationNet.point_features", "pointnet.InstanceSegmentationNet.cloud_features", "cloud_features.max().values.repeat.max().values.repeat.max().values.repeat", "pointnet.InstanceSegmentationNet.classifier", "inputs[].unsqueeze().repeat.dim", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs[].unsqueeze", "cloud_features.max().values.repeat.max().values.repeat.max"], "methods", ["None"], ["if", "self", ".", "include_coordinates", ":", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "coords", "]", ",", "dim", "=", "1", ")", "\n", "", "coords", "=", "torch", ".", "zeros", "(", "(", "coords", ".", "size", "(", "0", ")", ",", "3", ",", "1", ")", ",", "device", "=", "coords", ".", "device", ")", "\n", "if", "len", "(", "self", ".", "mlps", ")", ">", "1", ":", "\n", "            ", "features_list", "=", "[", "]", "\n", "for", "mlp", "in", "self", ".", "mlps", ":", "\n", "                ", "features_list", ".", "append", "(", "mlp", "(", "features", ")", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "values", ")", "\n", "", "return", "torch", ".", "cat", "(", "features_list", ",", "dim", "=", "1", ")", ",", "coords", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "mlps", "[", "0", "]", "(", "features", ")", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "values", ",", "coords", "\n", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.segmentation.pointnet.InstanceSegmentationPointNet.__init__": [[50, 54], ["pointnet.InstanceSegmentationNet.__init__"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_centers", ",", "radius", ",", "num_neighbors", ",", "in_channels", ",", "out_channels", ",", "include_coordinates", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "radius", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "radius", "=", "[", "radius", "]", "\n", "", "if", "not", "isinstance", "(", "num_neighbors", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.segmentation.pointnet.InstanceSegmentationPVCNN.__init__": [[61, 66], ["pointnet.InstanceSegmentationNet.__init__"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["", "assert", "len", "(", "radius", ")", "==", "len", "(", "out_channels", ")", "\n", "\n", "groupers", ",", "mlps", "=", "[", "]", ",", "[", "]", "\n", "total_out_channels", "=", "0", "\n", "for", "_radius", ",", "_out_channels", ",", "_num_neighbors", "in", "zip", "(", "radius", ",", "out_channels", ",", "num_neighbors", ")", ":", "\n", "            ", "groupers", ".", "append", "(", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnetpp.BoxEstimationNet2.__init__": [[10, 28], ["torch.Module.__init__", "models.utils.create_pointnet2_sa_components", "torch.Sequential", "torch.Sequential", "models.utils.create_mlp_components", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet2_sa_components", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "num_shapes", ",", "sa_blocks", ",", "fp_blocks", ",", "with_one_hot_shape_id", "=", "True", ",", "\n", "extra_feature_channels", "=", "3", ",", "width_multiplier", "=", "1", ",", "voxel_resolution_multiplier", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "extra_feature_channels", ">=", "0", "\n", "\n", "self", ".", "in_channels", "=", "extra_feature_channels", "+", "3", "\n", "self", ".", "num_shapes", "=", "num_shapes", "\n", "self", ".", "with_one_hot_shape_id", "=", "with_one_hot_shape_id", "\n", "\n", "sa_layers", ",", "sa_in_channels", ",", "channels_sa_features", ",", "_", "=", "create_pointnet2_sa_components", "(", "\n", "sa_blocks", "=", "sa_blocks", ",", "extra_feature_channels", "=", "extra_feature_channels", ",", "width_multiplier", "=", "width_multiplier", "\n", ")", "\n", "self", ".", "sa_layers", "=", "nn", ".", "ModuleList", "(", "sa_layers", ")", "\n", "\n", "# use one hot vector in the last fp module", "\n", "sa_in_channels", "[", "0", "]", "+=", "num_shapes", "if", "with_one_hot_shape_id", "else", "0", "\n", "fp_layers", ",", "channels_fp_features", "=", "create_pointnet2_fp_modules", "(", "\n", "fp_blocks", "=", "fp_blocks", ",", "in_channels", "=", "channels_sa_features", ",", "sa_in_channels", "=", "sa_in_channels", ",", "\n", "width_multiplier", "=", "width_multiplier", ",", "voxel_resolution_multiplier", "=", "voxel_resolution_multiplier", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnetpp.BoxEstimationNet2.forward": [[32, 40], ["pointnetpp.BoxEstimationNet2.features", "features.view.view.view", "pointnetpp.BoxEstimationNet2.classifier", "one_hot_vectors.dim", "features.view.view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["layers", ",", "_", "=", "create_mlp_components", "(", "in_channels", "=", "channels_fp_features", ",", "out_channels", "=", "[", "128", ",", "0.5", ",", "num_classes", "]", ",", "\n", "classifier", "=", "True", ",", "dim", "=", "2", ",", "width_multiplier", "=", "width_multiplier", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "# inputs : [B, in_channels + S, N]", "\n", "        ", "features", "=", "inputs", "[", ":", ",", ":", "self", ".", "in_channels", ",", ":", "]", "\n", "if", "self", ".", "with_one_hot_shape_id", ":", "\n", "            ", "assert", "inputs", ".", "size", "(", "1", ")", "==", "self", ".", "in_channels", "+", "self", ".", "num_shapes", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnetpp.BoxEstimationPointNet2.__init__": [[49, 53], ["pointnetpp.BoxEstimationNet2.__init__"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["coords_list", ".", "append", "(", "coords", ")", "\n", "features", ",", "coords", "=", "sa_module", "(", "(", "features", ",", "coords", ")", ")", "\n", "", "in_features_list", "[", "0", "]", "=", "features_with_one_hot_vectors", ".", "contiguous", "(", ")", "\n", "\n", "for", "fp_idx", ",", "fp_module", "in", "enumerate", "(", "self", ".", "fp_layers", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationNet.__init__": [[10, 28], ["torch.Module.__init__", "models.utils.create_pointnet_components", "torch.Sequential", "torch.Sequential", "models.utils.create_mlp_components", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_pointnet_components", "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.models.utils.create_mlp_components"], ["\n", "class", "PointNetAModule", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "include_coordinates", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "out_channels", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "[", "out_channels", "]", "]", "\n", "", "elif", "not", "isinstance", "(", "out_channels", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "out_channels", "=", "[", "out_channels", "]", "\n", "\n", "", "mlps", "=", "[", "]", "\n", "total_out_channels", "=", "0", "\n", "for", "_out_channels", "in", "out_channels", ":", "\n", "            ", "mlps", ".", "append", "(", "\n", "SharedMLP", "(", "in_channels", "=", "in_channels", "+", "(", "3", "if", "include_coordinates", "else", "0", ")", ",", "\n", "out_channels", "=", "_out_channels", ",", "dim", "=", "1", ")", "\n", ")", "\n", "total_out_channels", "+=", "_out_channels", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "include_coordinates", "=", "include_coordinates", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationNet.forward": [[32, 40], ["pointnet.BoxEstimationNet.features", "pointnet.BoxEstimationNet.classifier", "one_hot_vectors.dim", "features.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "features", ",", "coords", "=", "inputs", "\n", "if", "self", ".", "include_coordinates", ":", "\n", "            ", "features", "=", "torch", ".", "cat", "(", "[", "features", ",", "coords", "]", ",", "dim", "=", "1", ")", "\n", "", "coords", "=", "torch", ".", "zeros", "(", "(", "coords", ".", "size", "(", "0", ")", ",", "3", ",", "1", ")", ",", "device", "=", "coords", ".", "device", ")", "\n", "if", "len", "(", "self", ".", "mlps", ")", ">", "1", ":", "\n", "            ", "features_list", "=", "[", "]", "\n", "for", "mlp", "in", "self", ".", "mlps", ":", "\n", "                ", "features_list", ".", "append", "(", "mlp", "(", "features", ")", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "values", ")", "\n"]], "home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__": [[45, 48], ["pointnet.BoxEstimationNet.__init__"], "methods", ["home.repos.pwc.inspect_result.mit-han-lab_pvcnn.box_estimation.pointnet.BoxEstimationPointNet.__init__"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'out_channels={self.out_channels}, include_coordinates={self.include_coordinates}'", "\n", "\n", "\n"]]}