{"home.repos.pwc.inspect_result.yunhuiguo_Depthwise_Convolution_for_Multiple_Domain_Learning.None.imdbfolder_coco.ImageFolder.__init__": [[25, 43], ["len", "RuntimeError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "index", "=", "None", ",", "\n", "labels", "=", "None", ",", "imgs", "=", "None", ",", "loader", "=", "pil_loader", ",", "skip_label_indexing", "=", "0", ")", ":", "\n", "\n", "        ", "if", "len", "(", "imgs", ")", "==", "0", ":", "\n", "            ", "raise", "(", "RuntimeError", "(", "\"Found 0 images in subfolders of: \"", "+", "root", "+", "\"\\n\"", "\n", "\"Supported image extensions are: \"", "+", "\",\"", ".", "join", "(", "IMG_EXTENSIONS", ")", ")", ")", "\n", "\n", "", "self", ".", "root", "=", "root", "\n", "if", "index", "is", "not", "None", ":", "\n", "            ", "imgs", "=", "[", "imgs", "[", "i", "]", "for", "i", "in", "index", "]", "\n", "", "self", ".", "imgs", "=", "imgs", "\n", "if", "index", "is", "not", "None", ":", "\n", "            ", "if", "skip_label_indexing", "==", "0", ":", "\n", "                ", "labels", "=", "[", "labels", "[", "i", "]", "for", "i", "in", "index", "]", "\n", "", "", "self", ".", "labels", "=", "labels", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.yunhuiguo_Depthwise_Convolution_for_Multiple_Domain_Learning.None.imdbfolder_coco.ImageFolder.__getitem__": [[44, 54], ["imdbfolder_coco.ImageFolder.loader", "imdbfolder_coco.ImageFolder.transform", "imdbfolder_coco.ImageFolder.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "self", ".", "imgs", "[", "index", "]", "[", "0", "]", "\n", "target", "=", "self", ".", "labels", "[", "index", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.yunhuiguo_Depthwise_Convolution_for_Multiple_Domain_Learning.None.imdbfolder_coco.ImageFolder.__len__": [[55, 57], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunhuiguo_Depthwise_Convolution_for_Multiple_Domain_Learning.None.imdbfolder_coco.pil_loader": [[19, 21], ["PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "    ", "return", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunhuiguo_Depthwise_Convolution_for_Multiple_Domain_Learning.None.imdbfolder_coco.prepare_data_loaders": [[59, 149], ["range", "open", "pickle.load", "len", "num_classes.append", "config_task.offset.append", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train_loaders.append", "val_loaders.append", "range", "range", "pycocotools.coco.COCO", "pycocotools.coco.COCO.getImgIds", "pycocotools.coco.COCO.getAnnIds", "pycocotools.coco.COCO.loadAnns", "pycocotools.coco.COCO.loadImgs", "min", "max", "range", "int", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "imdbfolder_coco.ImageFolder", "imdbfolder_coco.ImageFolder", "len", "len", "len", "imgnames.append", "int", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "prepare_data_loaders", "(", "dataset_names", ",", "data_dir", ",", "imdb_dir", ",", "shuffle_train", "=", "True", ",", "index", "=", "None", ")", ":", "\n", "    ", "train_loaders", "=", "[", "]", "\n", "val_loaders", "=", "[", "]", "\n", "num_classes", "=", "[", "]", "\n", "train", "=", "[", "0", "]", "\n", "val", "=", "[", "1", "]", "\n", "config_task", ".", "offset", "=", "[", "]", "\n", "\n", "imdb_names_train", "=", "[", "imdb_dir", "+", "'/'", "+", "dataset_names", "[", "i", "]", "+", "'_train.json'", "for", "i", "in", "range", "(", "len", "(", "dataset_names", ")", ")", "]", "\n", "imdb_names_val", "=", "[", "imdb_dir", "+", "'/'", "+", "dataset_names", "[", "i", "]", "+", "'_val.json'", "for", "i", "in", "range", "(", "len", "(", "dataset_names", ")", ")", "]", "\n", "imdb_names", "=", "[", "imdb_names_train", ",", "imdb_names_val", "]", "\n", "\n", "with", "open", "(", "data_dir", "+", "'decathlon_mean_std.pickle'", ",", "'rb'", ")", "as", "handle", ":", "\n", "        ", "dict_mean_std", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "dataset_names", ")", ")", ":", "\n", "        ", "imgnames_train", "=", "[", "]", "\n", "imgnames_val", "=", "[", "]", "\n", "labels_train", "=", "[", "]", "\n", "labels_val", "=", "[", "]", "\n", "for", "itera1", "in", "train", "+", "val", ":", "\n", "            ", "annFile", "=", "imdb_names", "[", "itera1", "]", "[", "i", "]", "\n", "coco", "=", "COCO", "(", "annFile", ")", "\n", "imgIds", "=", "coco", ".", "getImgIds", "(", ")", "\n", "annIds", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "imgIds", ")", "\n", "anno", "=", "coco", ".", "loadAnns", "(", "annIds", ")", "\n", "images", "=", "coco", ".", "loadImgs", "(", "imgIds", ")", "\n", "timgnames", "=", "[", "img", "[", "'file_name'", "]", "for", "img", "in", "images", "]", "\n", "timgnames_id", "=", "[", "img", "[", "'id'", "]", "for", "img", "in", "images", "]", "\n", "labels", "=", "[", "int", "(", "ann", "[", "'category_id'", "]", ")", "-", "1", "for", "ann", "in", "anno", "]", "\n", "min_lab", "=", "min", "(", "labels", ")", "\n", "labels", "=", "[", "lab", "-", "min_lab", "for", "lab", "in", "labels", "]", "\n", "max_lab", "=", "max", "(", "labels", ")", "\n", "\n", "imgnames", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "timgnames", ")", ")", ":", "\n", "                ", "imgnames", ".", "append", "(", "(", "data_dir", "+", "'/'", "+", "timgnames", "[", "j", "]", ",", "timgnames_id", "[", "j", "]", ")", ")", "\n", "\n", "", "if", "itera1", "in", "train", ":", "\n", "                ", "imgnames_train", "+=", "imgnames", "\n", "labels_train", "+=", "labels", "\n", "", "if", "itera1", "in", "val", ":", "\n", "                ", "imgnames_val", "+=", "imgnames", "\n", "labels_val", "+=", "labels", "\n", "\n", "", "", "num_classes", ".", "append", "(", "int", "(", "max_lab", "+", "1", ")", ")", "\n", "config_task", ".", "offset", ".", "append", "(", "min_lab", ")", "\n", "means", "=", "dict_mean_std", "[", "dataset_names", "[", "i", "]", "+", "'mean'", "]", "\n", "stds", "=", "dict_mean_std", "[", "dataset_names", "[", "i", "]", "+", "'std'", "]", "\n", "\n", "\n", "if", "dataset_names", "[", "i", "]", "in", "[", "'gtsrb'", ",", "'omniglot'", ",", "'svhn'", "]", ":", "# no horz flip ", "\n", "            ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "72", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "72", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "means", ",", "stds", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "72", ")", ",", "\n", "#transforms.RandomCrop(64),", "\n", "transforms", ".", "CenterCrop", "(", "72", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "means", ",", "stds", ")", ",", "\n", "]", ")", "\n", "", "if", "dataset_names", "[", "i", "]", "in", "[", "'gtsrb'", ",", "'omniglot'", ",", "'svhn'", "]", ":", "# no horz flip ", "\n", "            ", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "72", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "72", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "means", ",", "stds", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "72", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "64", ")", ",", "\n", "#transforms.CenterCrop(72),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "means", ",", "stds", ")", ",", "\n", "]", ")", "\n", "\n", "", "img_path", "=", "data_dir", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "ImageFolder", "(", "data_dir", ",", "transform_train", ",", "None", ",", "index", ",", "labels_train", ",", "imgnames_train", ")", ",", "batch_size", "=", "128", ",", "shuffle", "=", "shuffle_train", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "valloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "ImageFolder", "(", "data_dir", ",", "transform_test", ",", "None", ",", "None", ",", "labels_val", ",", "imgnames_val", ")", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ",", "pin_memory", "=", "True", ")", "\n", "train_loaders", ".", "append", "(", "trainloader", ")", "\n", "val_loaders", ".", "append", "(", "valloader", ")", "\n", "\n", "", "return", "train_loaders", ",", "val_loaders", ",", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.yunhuiguo_Depthwise_Convolution_for_Multiple_Domain_Learning.None.sgd.SGD.__init__": [[7, 15], ["dict", "super().__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yunhuiguo_Depthwise_Convolution_for_Multiple_Domain_Learning.None.sgd.SGD.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "0.1", ",", "momentum", "=", "0", ",", "dampening", "=", "0", ",", "\n", "weight_decay", "=", "0", ",", "nesterov", "=", "False", ")", ":", "\n", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "dampening", "=", "dampening", ",", "\n", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "nesterov", ")", "\n", "if", "nesterov", "and", "(", "momentum", "<=", "0", "or", "dampening", "!=", "0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Nesterov momentum requires a momentum and zero dampening\"", ")", "\n", "", "super", "(", "SGD", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunhuiguo_Depthwise_Convolution_for_Multiple_Domain_Learning.None.sgd.SGD.__setstate__": [[16, 20], ["super().__setstate__", "group.setdefault"], "methods", ["home.repos.pwc.inspect_result.yunhuiguo_Depthwise_Convolution_for_Multiple_Domain_Learning.None.sgd.SGD.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", "SGD", ",", "self", ")", ".", "__setstate__", "(", "state", ")", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "group", ".", "setdefault", "(", "'nesterov'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yunhuiguo_Depthwise_Convolution_for_Multiple_Domain_Learning.None.sgd.SGD.step": [[21, 63], ["closure", "p.data.add_", "d_p.add.add.add_", "d_p.add.add.clone", "d_p.add.clone.mul_().add_", "d_p.add.add.add", "d_p.add.clone.mul_"], "methods", ["None"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "d_p", "=", "p", ".", "grad", ".", "data", "\n", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "'''\n                siz = p.grad.size()\n                if len(siz) > 3:\n                    if siz[2] == 3:\n                        weight_decay = config_task.decay3x3[config_task.task]\n                    #elif siz[2] == 1:\n                    #    weight_decay = config_task.decay1x1[config_task.task]\n                '''", "\n", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", ".", "add_", "(", "weight_decay", ",", "p", ".", "data", ")", "\n", "\n", "", "if", "momentum", "!=", "0", ":", "\n", "                    ", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "d_p", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "1", "-", "dampening", ",", "d_p", ")", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "momentum", ",", "buf", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "", "", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", ",", "d_p", ")", "\n", "\n", "", "", "return", "loss", "\n", "\n"]]}