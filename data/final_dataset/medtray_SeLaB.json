{"home.repos.pwc.inspect_result.medtray_SeLaB.None.selab_train.extract_n_layer": [[91, 102], ["n.split.split", "n.split.index", "int", "any"], "function", ["None"], ["def", "extract_n_layer", "(", "n", ",", "max_n_layer", "=", "-", "1", ")", ":", "\n", "    ", "n", "=", "n", ".", "split", "(", "'.'", ")", "\n", "try", ":", "\n", "        ", "idx", "=", "n", ".", "index", "(", "\"layer\"", ")", "\n", "n_layer", "=", "int", "(", "n", "[", "idx", "+", "1", "]", ")", "+", "1", "\n", "", "except", ":", "\n", "        ", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "[", "\"embeddings\"", ",", "\"word_embedding\"", ",", "\"mask_emb\"", "]", ")", ":", "\n", "            ", "n_layer", "=", "0", "\n", "", "else", ":", "\n", "            ", "n_layer", "=", "max_n_layer", "\n", "", "", "return", "n_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.table_reader.DataReaderBert.__init__": [[15, 64], ["enumerate", "numpy.where", "torch.Tensor", "X.type.type.type", "torch.tensor", "torch.Tensor().unsqueeze", "y.type.type.type", "numpy.random.shuffle", "table_reader.pad_or_crop", "table_reader.DataReaderBert.tokenizer.convert_tokens_to_ids", "X.type.type.append", "y.type.type.append", "list", "table_reader.DataReaderBert.tokenizer.tokenize", "numpy.random.shuffle", "numpy.array", "torch.Tensor", "json.loads().values", "table_reader.DataReaderBert.tokenizer.tokenize", "col.lower", "json.loads"], "methods", ["home.repos.pwc.inspect_result.medtray_SeLaB.None.table_reader.pad_or_crop"], ["    ", "def", "__init__", "(", "self", ",", "line", ",", "tokenizer", ",", "word2int", ",", "max_values_tokens", ",", "max_headers_tokens", ",", "max_tokens", ",", "only_values", ",", "contexts", ",", "loaded", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "max_tokens", "=", "max_tokens", "\n", "self", ".", "padding", "=", "'[PAD]'", "\n", "tokens_limit", "=", "450", "\n", "\n", "X", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "\n", "if", "not", "loaded", ":", "\n", "            ", "table_cols", "=", "list", "(", "json", ".", "loads", "(", "line", ")", ".", "values", "(", ")", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "table_cols", "=", "line", "\n", "\n", "", "for", "index", ",", "(", "col", ",", "features", ")", "in", "enumerate", "(", "table_cols", ")", ":", "\n", "            ", "values", "=", "features", "[", "'content'", "]", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "values", ")", "\n", "values", "=", "values", "[", ":", "tokens_limit", "]", "\n", "\n", "values_tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "' '", ".", "join", "(", "values", ")", ",", "add_special_tokens", "=", "False", ")", "[", ":", "max_values_tokens", "]", "\n", "\n", "if", "only_values", ":", "\n", "                ", "input_tokens", "=", "[", "'[CLS]'", "]", "+", "values_tokens", "+", "[", "'[SEP]'", "]", "+", "[", "'[SEP]'", "]", "\n", "", "else", ":", "\n", "#context = features['context']", "\n", "                ", "context", "=", "contexts", "[", "index", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "context", ")", "\n", "context", "=", "context", "[", ":", "tokens_limit", "]", "\n", "atts_tokens", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "' '", ".", "join", "(", "context", ")", ",", "add_special_tokens", "=", "False", ")", "[", ":", "max_headers_tokens", "]", "\n", "input_tokens", "=", "[", "'[CLS]'", "]", "+", "values_tokens", "+", "[", "'[SEP]'", "]", "+", "atts_tokens", "+", "[", "'[SEP]'", "]", "\n", "\n", "", "input_tokens", "=", "pad_or_crop", "(", "input_tokens", ",", "self", ".", "max_tokens", ",", "self", ".", "padding", ")", "\n", "word2indices", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "input_tokens", ")", "\n", "X", ".", "append", "(", "word2indices", ")", "\n", "y", ".", "append", "(", "word2int", "[", "col", ".", "lower", "(", ")", "]", ")", "\n", "\n", "", "attention_mask", "=", "np", ".", "where", "(", "np", ".", "array", "(", "X", ")", "!=", "0", ",", "1", ",", "0", ")", "\n", "X", "=", "torch", ".", "Tensor", "(", "X", ")", "\n", "X", "=", "X", ".", "type", "(", "dtype", "=", "torch", ".", "int64", ")", "\n", "attention_mask", "=", "torch", ".", "tensor", "(", "attention_mask", ")", "\n", "y", "=", "torch", ".", "Tensor", "(", "y", ")", ".", "unsqueeze", "(", "1", ")", "\n", "y", "=", "y", ".", "type", "(", "dtype", "=", "torch", ".", "int64", ")", "\n", "\n", "self", ".", "features", "=", "X", "\n", "self", ".", "labels", "=", "y", "\n", "self", ".", "masks", "=", "attention_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.table_reader.DataReaderBert.__getitem__": [[66, 69], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "t", ")", ":", "\n", "\n", "        ", "return", "self", ".", "features", "[", "t", "]", ",", "self", ".", "masks", "[", "t", "]", ",", "self", ".", "labels", "[", "t", "]", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.table_reader.DataReaderBert.__len__": [[69, 72], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "len", "(", "self", ".", "features", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.table_reader.pad_or_crop": [[7, 13], ["len", "len", "len"], "function", ["None"], ["def", "pad_or_crop", "(", "field", ",", "max_tokens", ",", "to_add", ")", ":", "\n", "    ", "if", "len", "(", "field", ")", ">", "max_tokens", ":", "\n", "        ", "field", "=", "field", "[", "0", ":", "max_tokens", "]", "\n", "", "if", "len", "(", "field", ")", "<", "max_tokens", ":", "\n", "        ", "field", "+=", "[", "to_add", "]", "*", "(", "max_tokens", "-", "len", "(", "field", ")", ")", "\n", "", "return", "field", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.MyEncoder.default": [[142, 151], ["isinstance", "int", "isinstance", "float", "isinstance", "obj.tolist", "super().default"], "methods", ["home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.MyEncoder.default"], ["    ", "def", "default", "(", "self", ",", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "numpy", ".", "integer", ")", ":", "\n", "            ", "return", "int", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "numpy", ".", "floating", ")", ":", "\n", "            ", "return", "float", "(", "obj", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "numpy", ".", "ndarray", ")", ":", "\n", "            ", "return", "obj", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", "MyEncoder", ",", "self", ")", ".", "default", "(", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.dataFile.__init__": [[161, 170], ["d_path.split"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "d_path", ")", ":", "\n", "        ", "self", ".", "path", "=", "d_path", "\n", "self", ".", "df_id", "=", "d_path", ".", "split", "(", "'\\\\'", ")", "[", "-", "1", "]", "\n", "self", ".", "header", "=", "None", "\n", "self", ".", "status", "=", "False", "\n", "self", ".", "reason", "=", "None", "\n", "self", ".", "col_num", "=", "0", "\n", "self", ".", "data_size", "=", "0", "\n", "self", ".", "num_rows", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.dataFile.show_few_data": [[172, 179], ["open", "range", "print", "print", "open.readline"], "methods", ["None"], ["", "def", "show_few_data", "(", "self", ",", "num_line", "=", "3", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "f", "=", "open", "(", "self", ".", "path", ",", "'r'", ")", "\n", "for", "i", "in", "range", "(", "num_line", ")", ":", "\n", "                ", "print", "(", "f", ".", "readline", "(", ")", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "\"reading file error.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.dataFile.get_raw_content": [[180, 188], ["open", "open.read", "print"], "methods", ["None"], ["", "", "def", "get_raw_content", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "f", "=", "open", "(", "self", ".", "path", ",", "'r'", ")", "\n", "content", "=", "f", ".", "read", "(", ")", "\n", "", "except", ":", "\n", "            ", "content", "=", "\"\"", "\n", "print", "(", "\"reading file error.\"", ")", "\n", "", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.dataFile.read_data_cols": [[189, 208], ["os.path.getsize", "os.path.getsize", "os.path.getsize", "os.path.getsize", "pandas.read_csv", "list", "len"], "methods", ["None"], ["", "def", "read_data_cols", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "data_size", "=", "os", ".", "path", ".", "getsize", "(", "self", ".", "path", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "path", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ",", "dtype", "=", "str", ",", "na_filter", "=", "False", ")", "\n", "self", ".", "header", "=", "list", "(", "df", ")", "\n", "self", ".", "status", "=", "True", "\n", "self", ".", "col_num", "=", "len", "(", "self", ".", "header", ")", "\n", "\n", "# with codecs.open(self.path, encoding=\"utf-8\", errors=\"replace\") as ifile:", "\n", "#     reader = csv.reader(ifile, delimiter=',', quotechar='\"')", "\n", "#     for header in reader:", "\n", "#         self.header = header", "\n", "#         self.status = True", "\n", "#         self.col_num = len(self.header)", "\n", "#         break", "\n", "return", "True", "\n", "", "except", ":", "\n", "            ", "self", ".", "reason", "=", "\"open error\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.dataFile.row_and_cell_count": [[209, 222], ["codecs.open", "csv.reader", "csv.reader.next", "cell_counter.update"], "methods", ["None"], ["", "", "def", "row_and_cell_count", "(", "self", ",", "cell_counter", ",", "normalize", "=", "False", ")", ":", "\n", "        ", "self", ".", "row_num", "=", "0", "\n", "try", ":", "\n", "            ", "with", "codecs", ".", "open", "(", "self", ".", "path", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"replace\"", ")", "as", "ifile", ":", "\n", "                ", "reader", "=", "csv", ".", "reader", "(", "ifile", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ")", "\n", "reader", ".", "next", "(", ")", "# jump the header", "\n", "for", "row", "in", "reader", ":", "\n", "                    ", "self", ".", "row_num", "+=", "1", "\n", "cell_counter", ".", "update", "(", "row", ")", "\n", "", "", "return", "cell_counter", "\n", "", "except", ":", "\n", "            ", "self", ".", "reason", "=", "\"open error\"", "\n", "return", "cell_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.resource.__init__": [[227, 234], ["utils2.resource.read_datasets"], "methods", ["home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.resource.read_datasets"], ["    ", "def", "__init__", "(", "self", ",", "\n", "r_path", ",", "ids", "=", "None", ")", ":", "\n", "        ", "self", ".", "path", "=", "r_path", "\n", "self", ".", "data_num", "=", "0", "\n", "self", ".", "data_type", "=", "[", "]", "\n", "self", ".", "ids", "=", "ids", "\n", "self", ".", "read_datasets", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.resource.r_notes_prep": [[236, 239], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "r_notes_prep", "(", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.resource.read_datasets": [[240, 253], ["len", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "utils2.dataFile", "utils2.dataFile.read_data_cols", "utils2.resource.data_files.append"], "methods", ["home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.dataFile.read_data_cols"], ["", "def", "read_datasets", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ids", "is", "not", "None", ":", "\n", "            ", "self", ".", "resources", "=", "self", ".", "ids", "\n", "", "else", ":", "\n", "            ", "self", ".", "resources", "=", "os", ".", "listdir", "(", "self", ".", "path", ")", "\n", "", "self", ".", "num_data", "=", "len", "(", "self", ".", "resources", ")", "\n", "self", ".", "data_files", "=", "[", "]", "\n", "# read all dataset columns", "\n", "for", "rs", "in", "self", ".", "resources", ":", "\n", "            ", "rs", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "rs", ")", "\n", "df", "=", "dataFile", "(", "rs", ")", "\n", "df", ".", "read_data_cols", "(", ")", "\n", "self", ".", "data_files", ".", "append", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.isEnglish": [[25, 32], ["s.encode().decode", "s.encode"], "function", ["None"], ["def", "isEnglish", "(", "s", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "s", ".", "encode", "(", "encoding", "=", "'utf-8'", ")", ".", "decode", "(", "'ascii'", ")", "\n", "", "except", "UnicodeDecodeError", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.camel_case_split": [[33, 36], ["re.finditer", "m.group"], "function", ["None"], ["", "", "def", "camel_case_split", "(", "identifier", ")", ":", "\n", "    ", "matches", "=", "re", ".", "finditer", "(", "'.+?(?:(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|$)'", ",", "identifier", ")", "\n", "return", "[", "m", ".", "group", "(", "0", ")", "for", "m", "in", "matches", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.preprocess": [[38, 69], ["re.sub", "re.sub", "w.strip.strip", "wpt.tokenize", "tokens.lower.lower", "utils2.camel_case_split"], "function", ["home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.camel_case_split"], ["", "def", "preprocess", "(", "input", ",", "wpt", ",", "stop_words", ")", ":", "\n", "\n", "    ", "res", "=", "re", ".", "sub", "(", "\"([\\(\\[]).*?([\\)\\]])\"", ",", "\"\\g<1>\\g<2>\"", ",", "input", ")", "\n", "\n", "to_remove", "=", "[", "'('", ",", "')'", ",", "'{'", ",", "'}'", ",", "'['", ",", "']'", "]", "\n", "\n", "ss", "=", "[", "s", "for", "s", "in", "res", "if", "s", "not", "in", "to_remove", "]", "\n", "ss", "=", "''", ".", "join", "(", "ss", ")", "\n", "\n", "\n", "w", "=", "re", ".", "sub", "(", "r'[^a-zA-Z0-9@$%\\s]'", ",", "' '", ",", "ss", ",", "re", ".", "I", "|", "re", ".", "A", ")", "\n", "w", "=", "w", ".", "strip", "(", ")", "\n", "# tokenize document", "\n", "tokens", "=", "wpt", ".", "tokenize", "(", "w", ")", "\n", "# filter stopwords out of document", "\n", "filtered_tokens", "=", "[", "token", "for", "token", "in", "tokens", "if", "token", "not", "in", "stop_words", "]", "\n", "\n", "camel_tokens", "=", "[", "]", "\n", "\n", "for", "w", "in", "filtered_tokens", ":", "\n", "        ", "inter", "=", "camel_case_split", "(", "w", ")", "\n", "camel_tokens", "+=", "inter", "\n", "\n", "", "tokens", "=", "camel_tokens", "\n", "\n", "# convert to lower case", "\n", "tokens", "=", "' '", ".", "join", "(", "tokens", ")", "\n", "tokens", "=", "tokens", ".", "lower", "(", ")", "\n", "\n", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.topn_accuracy_from_probabilities": [[71, 102], ["range", "collections.Counter", "range", "numpy.array", "range", "numpy.array", "len", "len", "new_X.append", "new_y.append", "len", "numpy.argpartition", "new_X.append", "new_y.append"], "function", ["None"], ["", "def", "topn_accuracy_from_probabilities", "(", "probs", ",", "y_test", ",", "topn", "=", "10", ",", "freq_filter", "=", "0", ",", "only_seen", "=", "False", ",", "seen_labels", "=", "None", ")", ":", "\n", "\n", "    ", "if", "freq_filter", "!=", "0", ":", "\n", "        ", "label_ct", "=", "Counter", "(", "y_test", ")", "\n", "new_X", "=", "[", "]", "\n", "new_y", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "y_test", ")", ")", ":", "\n", "            ", "if", "label_ct", "[", "y_test", "[", "idx", "]", "]", "<=", "freq_filter", ":", "\n", "                ", "continue", "\n", "", "new_X", ".", "append", "(", "probs", "[", "idx", "]", ")", "\n", "new_y", ".", "append", "(", "y_test", "[", "idx", "]", ")", "\n", "", "probs", "=", "np", ".", "array", "(", "new_X", ")", "\n", "y_test", "=", "new_y", "\n", "", "if", "only_seen", ":", "\n", "\n", "        ", "new_X", "=", "[", "]", "\n", "new_y", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "y_test", ")", ")", ":", "\n", "            ", "if", "y_test", "[", "idx", "]", "in", "seen_labels", ":", "\n", "                ", "new_X", ".", "append", "(", "probs", "[", "idx", "]", ")", "\n", "new_y", ".", "append", "(", "y_test", "[", "idx", "]", ")", "\n", "", "", "probs", "=", "np", ".", "array", "(", "new_X", ")", "\n", "y_test", "=", "new_y", "\n", "\n", "", "correct_ct", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "probs", ")", ")", ":", "\n", "        ", "prob", "=", "probs", "[", "i", "]", "\n", "topn_rs", "=", "np", ".", "argpartition", "(", "prob", ",", "-", "topn", ")", "[", "-", "topn", ":", "]", "\n", "if", "y_test", "[", "i", "]", "in", "topn_rs", ":", "\n", "            ", "correct_ct", "+=", "1", "\n", "", "", "return", "correct_ct", "*", "1.0", "/", "probs", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.load_checkpoint": [[104, 121], ["os.path.isfile", "os.path.isfile", "print", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "print", "print"], "function", ["None"], ["", "def", "load_checkpoint", "(", "model", ",", "optimizer", ",", "losslogger", ",", "filename", ",", "device", ")", ":", "\n", "# Note: Input model & optimizer should be pre-defined.  This routine only updates their states.", "\n", "    ", "start_epoch", "=", "0", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ",", "map_location", "=", "device", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "losslogger", "=", "checkpoint", "[", "'losslogger'", "]", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "filename", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "del", "checkpoint", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "\n", "", "return", "model", ",", "optimizer", ",", "start_epoch", ",", "losslogger", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.load_checkpoint_for_eval": [[123, 138], ["os.path.isfile", "os.path.isfile", "print", "torch.load", "model.eval.load_state_dict", "print", "model.eval.eval", "print"], "function", ["None"], ["", "def", "load_checkpoint_for_eval", "(", "model", ",", "filename", ")", ":", "\n", "# Note: Input model & optimizer should be pre-defined.  This routine only updates their states.", "\n", "    ", "start_epoch", "=", "0", "\n", "if", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "filename", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "filename", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "model", "=", "model", ".", "eval", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "filename", ")", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.resource_preprocessing": [[255, 263], ["utils2.wrong_csv", "utils2.normalize_headers"], "function", ["home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.wrong_csv", "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.normalize_headers"], ["", "", "", "def", "resource_preprocessing", "(", "all_resources", ")", ":", "\n", "    ", "'''\n    1. wrong csv files\n    2. normalize special characters\n    '''", "\n", "resources", "=", "wrong_csv", "(", "all_resources", ")", "\n", "resources", "=", "normalize_headers", "(", "resources", ")", "\n", "return", "resources", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.wrong_csv": [[265, 312], ["range", "len", "pandas.read_csv"], "function", ["None"], ["", "def", "wrong_csv", "(", "resources", ")", ":", "\n", "    ", "'''\n    1. if line length <=1, false\n    2. if line length >1, len(line1.splits) != len(line2.splits), false\n    3. no headers ?\n    '''", "\n", "\n", "for", "df_idx", "in", "range", "(", "len", "(", "resources", ".", "data_files", ")", ")", ":", "\n", "#f = open(resources.data_files[df_idx].path, 'r')", "\n", "        ", "try", ":", "\n", "            ", "df", "=", "pd", ".", "read_csv", "(", "resources", ".", "data_files", "[", "df_idx", "]", ".", "path", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ",", "dtype", "=", "str", ",", "na_filter", "=", "False", ")", "\n", "resources", ".", "data_files", "[", "df_idx", "]", ".", "num_rows", "=", "df", ".", "shape", "[", "0", "]", "\n", "", "except", ":", "\n", "            ", "resources", ".", "data_files", "[", "df_idx", "]", ".", "status", "=", "False", "\n", "\n", "# try:", "\n", "#     line1 = f.readline()", "\n", "#     line2 = f.readline()", "\n", "#     line3 = f.readline()", "\n", "# except:", "\n", "#     resources.data_files[df_idx].status = False", "\n", "#     resources.data_files[df_idx].reason = 'few lines'", "\n", "#     continue", "\n", "# if len(line1.strip().split(',')) <= 1:", "\n", "#     resources.data_files[df_idx].status = False", "\n", "#     resources.data_files[df_idx].reason = 'few columns'", "\n", "#     continue", "\n", "# if len(line2.strip().split(',')) != len(line3.strip().split(',')):", "\n", "#     resources.data_files[df_idx].status = False", "\n", "#     resources.data_files[df_idx].reason = \"not aligned\"", "\n", "#     continue", "\n", "# if line2 == '':", "\n", "#     resources.data_files[df_idx].status = False", "\n", "#     resources.data_files[df_idx].reason = \"no data\"", "\n", "#     continue", "\n", "#", "\n", "# false_header = False", "\n", "# for each in line1.split(','):", "\n", "#     if len(each) == 0:", "\n", "#         false_header = True", "\n", "#         break", "\n", "# if false_header:", "\n", "#     resources.data_files[df_idx].status = False", "\n", "#     resources.data_files[df_idx].reason = \"false header\"", "\n", "#     continue", "\n", "\n", "", "", "return", "resources", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.normalize_headers": [[314, 331], ["range", "len", "range", "len", "range", "len", "resources[].data_files[].header[].lower", "list", "range", "len", "chrs[].isalpha", "chrs[].isdigit"], "function", ["None"], ["", "def", "normalize_headers", "(", "resources", ")", ":", "\n", "    ", "'''\n\n    '''", "\n", "for", "idx", "in", "range", "(", "len", "(", "resources", ")", ")", ":", "\n", "        ", "for", "df_idx", "in", "range", "(", "len", "(", "resources", "[", "idx", "]", ".", "data_files", ")", ")", ":", "\n", "            ", "if", "not", "resources", "[", "idx", "]", ".", "data_files", "[", "df_idx", "]", ".", "status", ":", "\n", "                ", "continue", "\n", "", "for", "h_idx", "in", "range", "(", "len", "(", "resources", "[", "idx", "]", ".", "data_files", "[", "df_idx", "]", ".", "header", ")", ")", ":", "\n", "                ", "resources", "[", "idx", "]", ".", "data_files", "[", "df_idx", "]", ".", "header", "[", "h_idx", "]", "=", "resources", "[", "idx", "]", ".", "data_files", "[", "df_idx", "]", ".", "header", "[", "\n", "h_idx", "]", ".", "lower", "(", ")", "\n", "chrs", "=", "list", "(", "resources", "[", "idx", "]", ".", "data_files", "[", "df_idx", "]", ".", "header", "[", "h_idx", "]", ")", "\n", "for", "ch_idx", "in", "range", "(", "len", "(", "chrs", ")", ")", ":", "\n", "                    ", "if", "(", "not", "chrs", "[", "ch_idx", "]", ".", "isalpha", "(", ")", ")", "and", "(", "not", "chrs", "[", "ch_idx", "]", ".", "isdigit", "(", ")", ")", ":", "\n", "                        ", "chrs", "[", "ch_idx", "]", "=", "'_'", "\n", "", "", "resources", "[", "idx", "]", ".", "data_files", "[", "df_idx", "]", ".", "header", "[", "h_idx", "]", "=", "''", ".", "join", "(", "chrs", ")", ".", "lower", "(", ")", "\n", "", "", "", "return", "resources", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.normalize_header_name": [[332, 350], ["range", "print", "len", "pandas.read_csv", "list", "os.path.split", "os.path.split", "os.path.join", "os.path.join", "pd.read_csv.to_csv", "utils2.preprocess"], "function", ["home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.preprocess"], ["", "def", "normalize_header_name", "(", "resources", ",", "new_folder", ",", "wpt", ",", "stop_words", ")", ":", "\n", "\n", "    ", "for", "df_idx", "in", "range", "(", "len", "(", "resources", ".", "data_files", ")", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "resources", ".", "data_files", "[", "df_idx", "]", ".", "path", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ",", "dtype", "=", "str", ",", "na_filter", "=", "False", ")", "\n", "\n", "columns", "=", "list", "(", "df", ")", "\n", "#columns=['speed (in km/h)','weight [kg]','team\\'s loosing']", "\n", "new_columns", "=", "[", "]", "\n", "for", "colum", "in", "columns", ":", "\n", "            ", "new_columns", "+=", "[", "preprocess", "(", "colum", ",", "wpt", ",", "stop_words", ")", "]", "\n", "\n", "", "df", ".", "columns", "=", "new_columns", "\n", "\n", "head", ",", "tail", "=", "os", ".", "path", ".", "split", "(", "resources", ".", "data_files", "[", "df_idx", "]", ".", "path", ")", "\n", "new_path", "=", "os", ".", "path", ".", "join", "(", "new_folder", ",", "tail", ")", "\n", "df", ".", "to_csv", "(", "new_path", ",", "encoding", "=", "'utf-8-sig'", ",", "index", "=", "False", ")", "\n", "\n", "", "print", "(", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.filter_empty_header_name": [[351, 371], ["range", "print", "len", "pandas.read_csv", "list", "len", "pd.read_csv.drop", "os.path.split", "os.path.split", "os.path.join", "os.path.join", "pd.read_csv.to_csv", "len", "print", "column.lower", "len"], "function", ["None"], ["", "def", "filter_empty_header_name", "(", "resources", ",", "new_folder", ")", ":", "\n", "\n", "    ", "for", "df_idx", "in", "range", "(", "len", "(", "resources", ".", "data_files", ")", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "resources", ".", "data_files", "[", "df_idx", "]", ".", "path", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ",", "dtype", "=", "str", ",", "na_filter", "=", "True", ")", "\n", "\n", "columns", "=", "list", "(", "df", ")", "\n", "\n", "columns_to_drop", "=", "[", "column", "for", "column", "in", "columns", "if", "'unnamed'", "in", "column", ".", "lower", "(", ")", "or", "len", "(", "column", ")", "==", "0", "]", "\n", "\n", "for", "col", "in", "columns", ":", "\n", "            ", "if", "len", "(", "col", ")", "==", "0", ":", "\n", "                ", "print", "(", "'here'", ")", "\n", "\n", "", "", "if", "len", "(", "columns_to_drop", ")", ">", "0", ":", "\n", "            ", "df", ".", "drop", "(", "columns_to_drop", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "head", ",", "tail", "=", "os", ".", "path", ".", "split", "(", "resources", ".", "data_files", "[", "df_idx", "]", ".", "path", ")", "\n", "new_path", "=", "os", ".", "path", ".", "join", "(", "new_folder", ",", "tail", ")", "\n", "df", ".", "to_csv", "(", "new_path", ",", "index", "=", "False", ")", "\n", "\n", "", "", "print", "(", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.filter_columns": [[372, 396], ["range", "print", "len", "pandas.read_csv", "list", "pd.read_csv.drop", "list", "len", "os.path.split", "os.path.split", "os.path.join", "os.path.join", "pd.read_csv.to_csv", "columns_to_drop.append", "column.lower"], "function", ["None"], ["", "def", "filter_columns", "(", "resources", ",", "new_folder", ",", "column_dict", ",", "threshold", ")", ":", "\n", "\n", "    ", "for", "df_idx", "in", "range", "(", "len", "(", "resources", ".", "data_files", ")", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "resources", ".", "data_files", "[", "df_idx", "]", ".", "path", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ",", "dtype", "=", "str", ",", "na_filter", "=", "False", ")", "\n", "\n", "columns", "=", "list", "(", "df", ")", "\n", "\n", "columns_to_drop", "=", "[", "]", "\n", "for", "column", "in", "columns", ":", "\n", "            ", "if", "column_dict", "[", "column", ".", "lower", "(", ")", "]", "<", "threshold", ":", "\n", "                ", "columns_to_drop", ".", "append", "(", "column", ")", "\n", "\n", "", "", "df", ".", "drop", "(", "columns_to_drop", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "\n", "\n", "new_att", "=", "list", "(", "df", ")", "\n", "\n", "if", "len", "(", "new_att", ")", ">=", "3", ":", "\n", "            ", "head", ",", "tail", "=", "os", ".", "path", ".", "split", "(", "resources", ".", "data_files", "[", "df_idx", "]", ".", "path", ")", "\n", "new_path", "=", "os", ".", "path", ".", "join", "(", "new_folder", ",", "tail", ")", "\n", "\n", "df", ".", "to_csv", "(", "new_path", ",", "encoding", "=", "'utf-8-sig'", ",", "index", "=", "False", ")", "\n", "\n", "\n", "", "", "print", "(", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.pre_cell": [[398, 408], ["cell.lower.strip", "cell.lower.lower"], "function", ["None"], ["", "def", "pre_cell", "(", "cell", ",", "case_folding", "=", "True", ")", ":", "\n", "    ", "'''\n    preprocess cell before extracting features\n    1. case folding\n    2. replace numbers ?\n    '''", "\n", "cell", "=", "cell", ".", "strip", "(", ")", "\n", "if", "case_folding", ":", "\n", "        ", "cell", "=", "cell", ".", "lower", "(", ")", "\n", "", "return", "cell", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.get_col": [[410, 426], ["col[].copy", "dict", "len"], "function", ["None"], ["", "def", "get_col", "(", "col", ")", ":", "\n", "\n", "    ", "context", "=", "col", "[", "1", "]", ".", "copy", "(", ")", "\n", "col", "=", "col", "[", "0", "]", "\n", "if", "len", "(", "col", ")", "==", "0", ":", "\n", "        ", "return", "False", "\n", "\n", "\n", "", "feature_dict", "=", "dict", "(", ")", "\n", "\n", "feature_dict", "[", "'content'", "]", "=", "col", "\n", "feature_dict", "[", "'context'", "]", "=", "context", "\n", "\n", "\n", "\n", "return", "feature_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.build_headers_dict": [[428, 453], ["collections.Counter", "numpy.save", "range", "collections.Counter.update", "len", "cols[].lower", "el.lower"], "function", ["None"], ["", "def", "build_headers_dict", "(", "all_resources", ")", ":", "\n", "    ", "word2int", "=", "{", "}", "\n", "headers_counter", "=", "Counter", "(", ")", "\n", "ll", "=", "-", "1", "\n", "for", "each_data", "in", "all_resources", ".", "data_files", ":", "\n", "# d_path = each_data.path", "\n", "# df = pd.read_csv(d_path, delimiter=',', quotechar='\"', dtype=str, na_filter=True)", "\n", "# cols = df.columns", "\n", "# with codecs.open(d_path, encoding=\"utf-8\", errors=\"replace\") as ifile:", "\n", "#     reader = csv.reader(ifile, delimiter=',', quotechar='\"')", "\n", "#     for headers in reader:", "\n", "#         cols=headers", "\n", "#         break", "\n", "\n", "        ", "cols", "=", "each_data", ".", "header", "\n", "\n", "for", "ii", "in", "range", "(", "len", "(", "cols", ")", ")", ":", "\n", "            ", "header_name", "=", "cols", "[", "ii", "]", ".", "lower", "(", ")", "\n", "if", "header_name", "not", "in", "word2int", ":", "\n", "                ", "ll", "+=", "1", "\n", "word2int", "[", "header_name", "]", "=", "ll", "\n", "", "", "headers_counter", ".", "update", "(", "[", "el", ".", "lower", "(", ")", "for", "el", "in", "cols", "]", ")", "\n", "\n", "", "np", ".", "save", "(", "word2int_path", ",", "word2int", ")", "\n", "return", "headers_counter", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.extract_values": [[455, 499], ["open", "multiprocessing.Pool", "len", "nltk.tokenize.ToktokTokenizer", "open.close", "print", "pandas.read_csv", "range", "print", "multiprocessing.Pool.map", "list", "list", "open.write", "print", "len", "list", "contents[].append", "zip", "filter", "df[].dropna().tolist", "cols.copy", "json.dumps", "df[].dropna"], "function", ["None"], ["", "def", "extract_values", "(", "all_resources", ",", "train", "=", "True", ")", ":", "\n", "# extracting features:", "\n", "    ", "if", "train", ":", "\n", "        ", "fdict_path", "=", "train_features_path", "\n", "", "else", ":", "\n", "        ", "fdict_path", "=", "test_features_path", "\n", "\n", "", "f", "=", "open", "(", "fdict_path", ",", "'w'", ")", "\n", "pool", "=", "ThreadPool", "(", "8", ")", "\n", "\n", "total", "=", "len", "(", "all_resources", ".", "data_files", ")", "\n", "count", "=", "0", "\n", "toktok", "=", "ToktokTokenizer", "(", ")", "\n", "\n", "for", "each_data", "in", "all_resources", ".", "data_files", ":", "\n", "#try:", "\n", "\n", "            ", "tid", "=", "each_data", ".", "df_id", "\n", "print", "(", "tid", ")", "\n", "d_path", "=", "each_data", ".", "path", "\n", "df", "=", "pd", ".", "read_csv", "(", "d_path", ",", "delimiter", "=", "','", ",", "quotechar", "=", "'\"'", ",", "dtype", "=", "str", ",", "na_filter", "=", "True", ")", "\n", "cols", "=", "df", ".", "columns", "\n", "contents", "=", "[", "[", "df", "[", "each_col", "]", ".", "dropna", "(", ")", ".", "tolist", "(", ")", "]", "for", "each_col", "in", "cols", "]", "\n", "\n", "for", "ii", "in", "range", "(", "len", "(", "cols", ")", ")", ":", "\n", "                ", "inter_cols", "=", "list", "(", "cols", ".", "copy", "(", ")", ")", "\n", "del", "inter_cols", "[", "ii", "]", "\n", "contents", "[", "ii", "]", ".", "append", "(", "inter_cols", ")", "\n", "\n", "", "print", "(", "\"extract content finished\"", ")", "\n", "\n", "cols_features", "=", "pool", ".", "map", "(", "get_col", ",", "contents", ")", "\n", "\n", "all_col_features", "=", "list", "(", "zip", "(", "cols", ",", "cols_features", ")", ")", "\n", "all_col_features", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "[", "1", "]", ",", "all_col_features", ")", ")", "\n", "\n", "# tid=os.path.join(output_folder,'1')", "\n", "f", ".", "write", "(", "json", ".", "dumps", "(", "{", "tid", ":", "all_col_features", "}", ",", "cls", "=", "MyEncoder", ")", "+", "'\\n'", ")", "\n", "count", "+=", "1", "\n", "print", "(", "\"finish {0} out of {1}\"", ".", "format", "(", "count", ",", "total", ")", ")", "\n", "#except Exception as e:", "\n", "#    print(e)", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.MRR": [[500, 506], ["numpy.mean", "range"], "function", ["None"], ["", "def", "MRR", "(", "ranked_indices", ",", "y", ")", ":", "\n", "\n", "    ", "rs", "=", "[", "(", "ranked_indices", "[", "i", ",", ":", "]", "==", "y", "[", "i", "]", ")", ".", "nonzero", "(", ")", "[", "0", "]", "for", "i", "in", "range", "(", "ranked_indices", ".", "shape", "[", "0", "]", ")", "]", "\n", "mrr", "=", "np", ".", "mean", "(", "[", "1.", "/", "(", "r", "[", "0", "]", "+", "1", ")", "if", "r", ".", "size", "else", "0.", "for", "r", "in", "rs", "]", ")", "\n", "\n", "return", "mrr", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.topn_accuracy": [[508, 522], ["int", "range", "numpy.concatenate", "range", "preds.append", "len", "clf.predict_proba", "numpy.argsort"], "function", ["None"], ["", "def", "topn_accuracy", "(", "clf", ",", "X_test", ",", "y_test", ",", "topn", "=", "10", ")", ":", "\n", "    ", "preds", "=", "[", "]", "\n", "iters", "=", "int", "(", "X_test", ".", "shape", "[", "0", "]", "/", "1000", ")", "\n", "for", "i", "in", "range", "(", "iters", "+", "1", ")", ":", "\n", "        ", "preds", ".", "append", "(", "clf", ".", "predict_proba", "(", "X_test", "[", "i", "*", "1000", ":", "(", "i", "*", "1000", "+", "1000", ")", "]", ")", ")", "\n", "", "probs", "=", "np", ".", "concatenate", "(", "preds", ")", "\n", "correct_ct", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "probs", ")", ")", ":", "\n", "        ", "prob", "=", "probs", "[", "i", "]", "\n", "#topn_rs = np.argpartition(prob, -topn)[-topn:]", "\n", "topn_rs", "=", "np", ".", "argsort", "(", "prob", ")", "[", ":", ":", "-", "1", "]", "[", ":", "topn", "]", "\n", "if", "y_test", "[", "i", "]", "in", "clf", ".", "classes_", "[", "topn_rs", "]", ":", "\n", "            ", "correct_ct", "+=", "1", "\n", "", "", "return", "correct_ct", "*", "1.0", "/", "X_test", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.medtray_SeLaB.None.utils2.precision_recall_f1": [[524, 554], ["numpy.argmax", "sklearn.metrics.precision_recall_fscore_support", "sklearn.metrics.precision_recall_fscore_support", "collections.Counter", "range", "numpy.array", "range", "numpy.array", "len", "new_X.append", "new_y.append", "len", "new_X.append", "new_y.append"], "function", ["None"], ["", "def", "precision_recall_f1", "(", "preds", ",", "y_test", ",", "freq_filter", "=", "0", ",", "only_seen", "=", "False", ",", "seen_labels", "=", "None", ")", ":", "\n", "\n", "    ", "if", "freq_filter", "!=", "0", ":", "\n", "        ", "label_ct", "=", "Counter", "(", "y_test", ")", "\n", "new_X", "=", "[", "]", "\n", "new_y", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "y_test", ")", ")", ":", "\n", "            ", "if", "label_ct", "[", "y_test", "[", "idx", "]", "]", "<=", "freq_filter", ":", "\n", "                ", "continue", "\n", "", "new_X", ".", "append", "(", "preds", "[", "idx", "]", ")", "\n", "new_y", ".", "append", "(", "y_test", "[", "idx", "]", ")", "\n", "", "preds", "=", "np", ".", "array", "(", "new_X", ")", "\n", "y_test", "=", "new_y", "\n", "", "if", "only_seen", ":", "\n", "\n", "        ", "new_X", "=", "[", "]", "\n", "new_y", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "y_test", ")", ")", ":", "\n", "            ", "if", "y_test", "[", "idx", "]", "in", "seen_labels", ":", "\n", "                ", "new_X", ".", "append", "(", "preds", "[", "idx", "]", ")", "\n", "new_y", ".", "append", "(", "y_test", "[", "idx", "]", ")", "\n", "", "", "preds", "=", "np", ".", "array", "(", "new_X", ")", "\n", "y_test", "=", "new_y", "\n", "\n", "", "pred_label", "=", "np", ".", "argmax", "(", "preds", ",", "axis", "=", "1", ")", "\n", "\n", "macro", "=", "precision_recall_fscore_support", "(", "y_test", ",", "pred_label", ",", "average", "=", "'macro'", ")", "\n", "micro", "=", "precision_recall_fscore_support", "(", "y_test", ",", "pred_label", ",", "average", "=", "'micro'", ")", "\n", "\n", "return", "macro", ",", "micro", "", "", ""]]}