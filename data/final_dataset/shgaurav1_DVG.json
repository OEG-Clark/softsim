{"home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.get_testing_batch": [[99, 104], ["utils.normalize_data"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.normalize_data"], ["def", "get_testing_batch", "(", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "sequence", "in", "test_loader", ":", "\n", "            ", "batch", "=", "utils", ".", "normalize_data", "(", "opt", ",", "dtype", ",", "sequence", ")", "\n", "yield", "batch", "\n", "", "", "", "testing_batch_generator", "=", "get_testing_batch", "(", ")", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.make_gifs": [[107, 218], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "frame_predictor.init_hidden", "posterior_gen.append", "range", "numpy.zeros", "numpy.zeros", "progressbar.ProgressBar().start", "range", "progressbar.ProgressBar().start.finish", "utils.clear_progressbar", "range", "encoder", "h.detach.detach", "progressbar.ProgressBar().start.update", "frame_predictor.init_hidden", "all_gen.append", "all_gen[].append", "range", "utils.eval_seq", "numpy.mean", "numpy.argsort", "range", "utils.save_gif_with_text", "encoder", "h_target[].detach", "frame_predictor", "posterior_gen.append", "frame_predictor().detach", "print", "likelihood", "decoder().detach", "print", "posterior_gen.append", "progressbar.ProgressBar", "encoder", "h.detach.detach", "numpy.random.randint", "gifs[].append", "text[].append", "gifs[].append", "text[].append", "gifs[].append", "text[].append", "range", "gp_layer", "encoder", "h_target[].detach", "frame_predictor", "all_gen[].append", "frame_predictor().detach", "print", "gen_seq.append", "gt_seq.append", "all_gen[].append", "range", "range", "range", "generate_frames.add_border", "generate_frames.add_border", "generate_frames.add_border", "len", "gifs[].append", "text[].append", "frame_predictor", "str", "frame_predictor().detach.transpose().view", "decoder", "str", "print", "likelihood", "decoder().detach", "print", "decoder().detach", "decoder().detach.data.cpu().numpy", "x[].data.cpu().numpy", "generate_frames.add_border", "frame_predictor", "str", "gp_layer", "frame_predictor().detach.transpose", "likelihood.mean.transpose", "str", "h.detach.transpose().view", "decoder", "str", "decoder", "decoder().detach.data.cpu", "x[].data.cpu", "h.detach.transpose", "likelihood.rsample().transpose", "likelihood.rsample"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.init_hidden", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.clear_progressbar", "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.init_hidden", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.eval_seq", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.save_gif_with_text", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.add_border", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.add_border", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.add_border", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.add_border"], ["def", "make_gifs", "(", "x", ",", "idx", ",", "name", ",", "loaded_model", ")", ":", "\n", "\n", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "frame_predictor", ".", "hidden", "=", "frame_predictor", ".", "init_hidden", "(", ")", "\n", "posterior_gen", "=", "[", "]", "\n", "posterior_gen", ".", "append", "(", "x", "[", "0", "]", ")", "\n", "x_in", "=", "x", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "opt", ".", "n_eval", ")", ":", "\n", "            ", "h", "=", "encoder", "(", "x_in", ")", "\n", "if", "opt", ".", "last_frame_skip", "or", "i", "<", "opt", ".", "n_past", ":", "\n", "                ", "h", ",", "skip", "=", "h", "\n", "", "else", ":", "\n", "                ", "h", ",", "_", "=", "h", "\n", "", "h", "=", "h", ".", "detach", "(", ")", "\n", "if", "i", "<", "opt", ".", "n_past", ":", "\n", "                ", "h_target", "=", "encoder", "(", "x", "[", "i", "]", ")", "\n", "h_target", "=", "h_target", "[", "0", "]", ".", "detach", "(", ")", "\n", "frame_predictor", "(", "h", ")", "\n", "x_in", "=", "x", "[", "i", "]", "\n", "posterior_gen", ".", "append", "(", "x_in", ")", "\n", "", "else", ":", "\n", "                ", "h_pred", "=", "frame_predictor", "(", "h", ")", ".", "detach", "(", ")", "\n", "print", "(", "str", "(", "i", ")", "+", "\" started\"", ")", "\n", "final_hpred", "=", "likelihood", "(", "gp_layer", "(", "h_pred", ".", "transpose", "(", "0", ",", "1", ")", ".", "view", "(", "90", ",", "50", ",", "1", ")", ")", ")", "\n", "x_in", "=", "decoder", "(", "[", "final_hpred", ".", "mean", ".", "transpose", "(", "0", ",", "1", ")", ",", "skip", "]", ")", ".", "detach", "(", ")", "\n", "print", "(", "str", "(", "i", ")", "+", "\" completed\"", ")", "\n", "posterior_gen", ".", "append", "(", "x_in", ")", "\n", "\n", "\n", "\n", "", "", "nsample", "=", "100", "#opt.nsample", "\n", "ssim", "=", "np", ".", "zeros", "(", "(", "opt", ".", "batch_size", ",", "nsample", ",", "opt", ".", "n_eval", "-", "opt", ".", "n_past", ")", ")", "\n", "psnr", "=", "np", ".", "zeros", "(", "(", "opt", ".", "batch_size", ",", "nsample", ",", "opt", ".", "n_eval", "-", "opt", ".", "n_past", ")", ")", "\n", "progress", "=", "progressbar", ".", "ProgressBar", "(", "nsample", ")", ".", "start", "(", ")", "\n", "all_gen", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "nsample", ")", ":", "\n", "            ", "progress", ".", "update", "(", "s", "+", "1", ")", "\n", "gen_seq", "=", "[", "]", "\n", "gt_seq", "=", "[", "]", "\n", "frame_predictor", ".", "hidden", "=", "frame_predictor", ".", "init_hidden", "(", ")", "\n", "x_in", "=", "x", "[", "0", "]", "\n", "all_gen", ".", "append", "(", "[", "]", ")", "\n", "all_gen", "[", "s", "]", ".", "append", "(", "x_in", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "opt", ".", "n_eval", ")", ":", "\n", "                ", "h", "=", "encoder", "(", "x_in", ")", "\n", "if", "opt", ".", "last_frame_skip", "or", "i", "<", "opt", ".", "n_past", ":", "\n", "                    ", "h", ",", "skip", "=", "h", "\n", "", "else", ":", "\n", "                    ", "h", ",", "_", "=", "h", "\n", "", "h", "=", "h", ".", "detach", "(", ")", "\n", "if", "i", "<", "opt", ".", "n_past", ":", "\n", "                    ", "h_target", "=", "encoder", "(", "x", "[", "i", "]", ")", "\n", "h_target", "=", "h_target", "[", "0", "]", ".", "detach", "(", ")", "\n", "frame_predictor", "(", "h", ")", "\n", "x_in", "=", "x", "[", "i", "]", "\n", "all_gen", "[", "s", "]", ".", "append", "(", "x_in", ")", "\n", "", "else", ":", "\n", "                    ", "h_pred", "=", "frame_predictor", "(", "h", ")", ".", "detach", "(", ")", "\n", "print", "(", "str", "(", "s", ")", "+", "\" started\"", ")", "\n", "if", "i", "%", "15", "==", "0", ":", "\n", "                        ", "print", "(", "str", "(", "s", ")", "+", "\" started\"", ")", "\n", "final_hpred", "=", "likelihood", "(", "gp_layer", "(", "h", ".", "transpose", "(", "0", ",", "1", ")", ".", "view", "(", "90", ",", "50", ",", "1", ")", ")", ")", "\n", "x_in", "=", "decoder", "(", "[", "final_hpred", ".", "rsample", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", ",", "skip", "]", ")", ".", "detach", "(", ")", "\n", "print", "(", "str", "(", "s", ")", "+", "\" completed\"", ")", "\n", "", "else", ":", "\n", "                        ", "x_in", "=", "decoder", "(", "[", "h_pred", ",", "skip", "]", ")", ".", "detach", "(", ")", "\n", "", "gen_seq", ".", "append", "(", "x_in", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "gt_seq", ".", "append", "(", "x", "[", "i", "]", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_gen", "[", "s", "]", ".", "append", "(", "x_in", ")", "\n", "", "", "_", ",", "ssim", "[", ":", ",", "s", ",", ":", "]", ",", "psnr", "[", ":", ",", "s", ",", ":", "]", "=", "utils", ".", "eval_seq", "(", "gt_seq", ",", "gen_seq", ")", "\n", "\n", "\n", "", "progress", ".", "finish", "(", ")", "\n", "utils", ".", "clear_progressbar", "(", ")", "\n", "\n", "###### ssim ######", "\n", "for", "i", "in", "range", "(", "opt", ".", "batch_size", ")", ":", "\n", "            ", "gifs", "=", "[", "[", "]", "for", "t", "in", "range", "(", "opt", ".", "n_eval", ")", "]", "\n", "text", "=", "[", "[", "]", "for", "t", "in", "range", "(", "opt", ".", "n_eval", ")", "]", "\n", "mean_ssim", "=", "np", ".", "mean", "(", "ssim", "[", "i", "]", ",", "1", ")", "\n", "ordered", "=", "np", ".", "argsort", "(", "mean_ssim", ")", "\n", "rand_sidx", "=", "[", "np", ".", "random", ".", "randint", "(", "nsample", ")", "for", "s", "in", "range", "(", "3", ")", "]", "\n", "for", "t", "in", "range", "(", "opt", ".", "n_eval", ")", ":", "\n", "# gt ", "\n", "                ", "gifs", "[", "t", "]", ".", "append", "(", "add_border", "(", "x", "[", "t", "]", "[", "i", "]", ",", "'green'", ")", ")", "\n", "text", "[", "t", "]", ".", "append", "(", "'Ground\\ntsruth'", ")", "\n", "#posterior ", "\n", "if", "t", "<", "opt", ".", "n_past", ":", "\n", "                    ", "color", "=", "'green'", "\n", "", "else", ":", "\n", "                    ", "color", "=", "'red'", "\n", "", "gifs", "[", "t", "]", ".", "append", "(", "add_border", "(", "posterior_gen", "[", "t", "]", "[", "i", "]", ",", "color", ")", ")", "\n", "text", "[", "t", "]", ".", "append", "(", "'Approx.\\nposterior'", ")", "\n", "# best ", "\n", "if", "t", "<", "opt", ".", "n_past", ":", "\n", "                    ", "color", "=", "'green'", "\n", "", "else", ":", "\n", "                    ", "color", "=", "'red'", "\n", "", "sidx", "=", "ordered", "[", "-", "1", "]", "\n", "gifs", "[", "t", "]", ".", "append", "(", "add_border", "(", "all_gen", "[", "sidx", "]", "[", "t", "]", "[", "i", "]", ",", "color", ")", ")", "\n", "text", "[", "t", "]", ".", "append", "(", "'Best SSIM'", ")", "\n", "# random 3", "\n", "for", "s", "in", "range", "(", "len", "(", "rand_sidx", ")", ")", ":", "\n", "                    ", "gifs", "[", "t", "]", ".", "append", "(", "add_border", "(", "all_gen", "[", "rand_sidx", "[", "s", "]", "]", "[", "t", "]", "[", "i", "]", ",", "color", ")", ")", "\n", "text", "[", "t", "]", ".", "append", "(", "'Random\\nsample %d'", "%", "(", "s", "+", "1", ")", ")", "\n", "\n", "", "", "fname", "=", "'%s/sample_%s_%d.gif'", "%", "(", "opt", ".", "log_dir", ",", "name", ",", "idx", "+", "i", ")", "\n", "utils", ".", "save_gif_with_text", "(", "fname", ",", "gifs", ",", "text", ")", "\n", "return", "ssim", ",", "psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.generation": [[220, 225], ["[].detach", "frame_predictor().detach", "decoder().detach", "frame_predictor", "decoder", "encoder"], "function", ["None"], ["", "", "", "def", "generation", "(", "x_in", ",", "skip", ")", ":", "\n", "    ", "h", "=", "encoder", "(", "x_in", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "h_pred", "=", "frame_predictor", "(", "h", ")", ".", "detach", "(", ")", "\n", "x_out", "=", "decoder", "(", "[", "h_pred", ",", "skip", "]", ")", ".", "detach", "(", ")", "\n", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.var_value": [[227, 233], ["[].detach", "likelihood", "numpy.concatenate", "gp_layer", "numpy.linalg.norm", "[].detach.transpose().view", "likelihood.variance.cpu().detach().numpy().transpose", "encoder", "[].detach.transpose", "likelihood.variance.cpu().detach().numpy", "likelihood.variance.cpu().detach", "likelihood.variance.cpu"], "function", ["None"], ["", "def", "var_value", "(", "x_in", ",", "context_array", ")", ":", "\n", "    ", "h", "=", "encoder", "(", "x_in", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "final_pred", "=", "likelihood", "(", "gp_layer", "(", "h", ".", "transpose", "(", "0", ",", "1", ")", ".", "view", "(", "90", ",", "50", ",", "1", ")", ")", ")", "\n", "value", "=", "np", ".", "linalg", ".", "norm", "(", "final_pred", ".", "variance", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", ")", ",", "axis", "=", "1", ")", "[", "3", "]", "\n", "context_array", "=", "np", ".", "concatenate", "(", "[", "context_array", "[", "1", ":", "]", ",", "[", "value", "]", "]", ")", "\n", "return", "value", ",", "context_array", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.plot_rec": [[235, 246], ["min", "range", "utils.save_tensors_image", "range", "to_plot.append", "len", "row.append"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.save_tensors_image"], ["", "def", "plot_rec", "(", "x", ",", "index", ",", "frames_generated", ",", "depth", ")", ":", "\n", "\n", "    ", "to_plot", "=", "[", "]", "\n", "nrow", "=", "min", "(", "opt", ".", "batch_size", ",", "1", ")", "\n", "for", "i", "in", "range", "(", "nrow", ")", ":", "\n", "        ", "row", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "0", ",", "len", "(", "x", ")", ",", "3", ")", ":", "\n", "            ", "row", ".", "append", "(", "x", "[", "t", "]", "[", "index", "]", ")", "\n", "", "to_plot", ".", "append", "(", "row", ")", "\n", "", "fname", "=", "'recursive_generation/%d/heuristic_gp_trigger_%d_%d.png'", "%", "(", "index", ",", "depth", ",", "frames_generated", ")", "\n", "utils", ".", "save_tensors_image", "(", "fname", ",", "to_plot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.GPtrigger_gen": [[249, 301], ["range", "frame_predictor.init_hidden", "range", "numpy.array", "range", "generate_frames.plot_rec", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "encoder", "[].detach.detach", "likelihood", "np.array.append", "generate_frames.generation", "values.append", "gen_seq.append", "generate_frames.var_value", "values.append", "gen_seq.append", "gp_layer", "numpy.linalg.norm", "numpy.mean", "[].detach", "likelihood", "decoder().detach", "generate_frames.generation", "[].detach.transpose().view", "likelihood.variance.cpu().detach().numpy().transpose", "numpy.std", "gp_layer", "[].detach.transpose().view", "decoder", "[].detach.transpose", "likelihood.variance.cpu().detach().numpy", "encoder", "[].detach.transpose", "likelihood.rsample().transpose", "likelihood.variance.cpu().detach", "likelihood.rsample", "likelihood.variance.cpu"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.init_hidden", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.plot_rec", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.generation", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.var_value", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.generation"], ["", "def", "GPtrigger_gen", "(", "x", ")", ":", "\n", "\n", "    ", "for", "index", "in", "range", "(", "opt", ".", "batch_size", ")", ":", "\n", "        ", "frame_predictor", ".", "hidden", "=", "frame_predictor", ".", "init_hidden", "(", ")", "\n", "context_array", "=", "[", "]", "\n", "depth", "=", "1", "\n", "x_in", "=", "x", "[", "0", "]", "\n", "gen_seq", "=", "[", "]", "\n", "frames_generated", "=", "0", "\n", "triggers", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "lstm_values", "=", "[", "]", "\n", "det_seq", "=", "[", "]", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'recursive_generation'", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "'recursive_generation'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "'./recursive_generation/%d'", "%", "index", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "'./recursive_generation/%d'", "%", "index", ")", "\n", "", "for", "i", "in", "range", "(", "12", ")", ":", "\n", "            ", "h", "=", "encoder", "(", "x_in", ")", "\n", "if", "i", "<", "5", ":", "\n", "                ", "h", ",", "skip", "=", "h", "\n", "", "else", ":", "\n", "                ", "h", ",", "_", "=", "h", "\n", "", "h", ".", "detach", "(", ")", "\n", "final_pred", "=", "likelihood", "(", "gp_layer", "(", "h", ".", "transpose", "(", "0", ",", "1", ")", ".", "view", "(", "90", ",", "50", ",", "1", ")", ")", ")", "\n", "\n", "value", "=", "np", ".", "linalg", ".", "norm", "(", "final_pred", ".", "variance", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", ")", ",", "axis", "=", "1", ")", "[", "index", "]", "\n", "context_array", ".", "append", "(", "value", ")", "\n", "x_out", "=", "generation", "(", "x_in", ",", "skip", ")", "\n", "values", ".", "append", "(", "value", ")", "\n", "gen_seq", ".", "append", "(", "x_out", ")", "\n", "x_in", "=", "x_out", "\n", "\n", "# Creating a threshold using first 12 frames (This includes context frames+ generated frames)", "\n", "", "context_array", "=", "np", ".", "array", "(", "context_array", ")", "\n", "\n", "for", "i", "in", "range", "(", "12", ",", "105", ")", ":", "\n", "# Updating the threshold", "\n", "            ", "value", ",", "context_array", "=", "var_value", "(", "x_in", ",", "context_array", ")", "\n", "threshold", "=", "np", ".", "mean", "(", "context_array", ")", "+", "(", "2", "+", "0.01", "*", "depth", ")", "*", "np", ".", "std", "(", "context_array", ")", "\n", "if", "value", ">", "threshold", ":", "\n", "                ", "h", "=", "encoder", "(", "x_in", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "final_pred", "=", "likelihood", "(", "gp_layer", "(", "h", ".", "transpose", "(", "0", ",", "1", ")", ".", "view", "(", "90", ",", "50", ",", "1", ")", ")", ")", "\n", "x_out", "=", "decoder", "(", "[", "final_pred", ".", "rsample", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", ",", "skip", "]", ")", ".", "detach", "(", ")", "\n", "\n", "", "else", ":", "\n", "                ", "x_out", "=", "generation", "(", "x_in", ",", "skip", ")", "\n", "", "values", ".", "append", "(", "value", ")", "\n", "gen_seq", ".", "append", "(", "x_out", ")", "\n", "x_in", "=", "x_out", "\n", "\n", "", "plot_rec", "(", "gen_seq", ",", "index", ",", "frames_generated", ",", "depth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.generate_frames.add_border": [[306, 320], ["torch.autograd.Variable", "x.size", "x.size", "torch.zeros", "torch.zeros", "torch.zeros", "range"], "function", ["None"], ["", "", "def", "add_border", "(", "x", ",", "color", ",", "pad", "=", "1", ")", ":", "\n", "    ", "w", "=", "x", ".", "size", "(", ")", "[", "1", "]", "\n", "nc", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "px", "=", "Variable", "(", "torch", ".", "zeros", "(", "3", ",", "w", "+", "2", "*", "pad", "+", "30", ",", "w", "+", "2", "*", "pad", ")", ")", "\n", "if", "color", "==", "'red'", ":", "\n", "        ", "px", "[", "0", "]", "=", "0.7", "\n", "", "elif", "color", "==", "'green'", ":", "\n", "        ", "px", "[", "1", "]", "=", "0.7", "\n", "", "if", "nc", "==", "1", ":", "\n", "        ", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "            ", "px", "[", "c", ",", "pad", ":", "w", "+", "pad", ",", "pad", ":", "w", "+", "pad", "]", "=", "x", "\n", "", "", "else", ":", "\n", "        ", "px", "[", ":", ",", "pad", ":", "w", "+", "pad", ",", "pad", ":", "w", "+", "pad", "]", "=", "x", "\n", "", "return", "px", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.train.get_training_batch": [[124, 129], ["utils.normalize_data"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.normalize_data"], ["def", "get_training_batch", "(", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "sequence", "in", "train_loader", ":", "\n", "            ", "batch", "=", "utils", ".", "normalize_data", "(", "opt", ",", "dtype", ",", "sequence", ")", "\n", "yield", "batch", "\n", "", "", "", "training_batch_generator", "=", "get_training_batch", "(", ")", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.train.get_testing_batch": [[132, 137], ["utils.normalize_data"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.normalize_data"], ["def", "get_testing_batch", "(", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "sequence", "in", "test_loader", ":", "\n", "            ", "batch", "=", "utils", ".", "normalize_data", "(", "opt", ",", "dtype", ",", "sequence", ")", "\n", "yield", "batch", "\n", "", "", "", "testing_batch_generator", "=", "get_testing_batch", "(", ")", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.train.train_GP_Frame_predictor": [[146, 173], ["optimizer.zero_grad", "max_ll.sum.backward", "optimizer.step", "gpytorch.settings.use_toeplitz", "frame_predictor.init_hidden", "range", "max_ll.sum", "max_ll.sum().data.cpu().numpy", "encoder", "[].detach", "gp_layer", "mll", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "encoder.detach", "encoder.transpose().view", "[].detach.transpose", "max_ll.sum().data.cpu", "encoder", "encoder.transpose", "max_ll.sum"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.init_hidden"], ["def", "train_GP_Frame_predictor", "(", "x", ")", ":", "\n", "    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "with", "gpytorch", ".", "settings", ".", "use_toeplitz", "(", "False", ")", ":", "\n", "# initialize the hidden state.", "\n", "        ", "frame_predictor", ".", "hidden", "=", "frame_predictor", ".", "init_hidden", "(", ")", "\n", "\n", "mse_latent", "=", "0", "\n", "max_ll", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "opt", ".", "n_past", "+", "opt", ".", "n_future", ")", ":", "\n", "            ", "h", "=", "encoder", "(", "x", "[", "i", "-", "1", "]", ")", "\n", "h_target", "=", "encoder", "(", "x", "[", "i", "]", ")", "[", "0", "]", ".", "detach", "(", ")", "\n", "\n", "if", "opt", ".", "last_frame_skip", "or", "i", "<", "opt", ".", "n_past", ":", "\n", "                ", "h", ",", "skip", "=", "h", "\n", "", "else", ":", "\n", "                ", "h", "=", "h", "[", "0", "]", "\n", "h", ".", "detach", "(", ")", "\n", "\n", "", "h_pred", "=", "gp_layer", "(", "h", ".", "transpose", "(", "0", ",", "1", ")", ".", "view", "(", "90", ",", "50", ",", "1", ")", ")", "\n", "max_ll", "-=", "mll", "(", "h_pred", ",", "h_target", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "\n", "", "loss", "=", "max_ll", ".", "sum", "(", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "return", "max_ll", ".", "sum", "(", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "(", "opt", ".", "n_past", "+", "opt", ".", "n_future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.train.train_frame_predictor": [[175, 199], ["frame_predictor.zero_grad", "frame_predictor.init_hidden", "range", "loss.backward", "frame_predictor_optimizer.step", "encoder", "frame_predictor", "mse_latent_criterion", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "mse_latent.data.cpu().numpy", "encoder", "mse_latent.data.cpu"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.init_hidden"], ["", "def", "train_frame_predictor", "(", "x", ")", ":", "\n", "    ", "frame_predictor", ".", "zero_grad", "(", ")", "\n", "# initialize the hidden state.", "\n", "frame_predictor", ".", "hidden", "=", "frame_predictor", ".", "init_hidden", "(", ")", "\n", "\n", "mse_latent", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "opt", ".", "n_past", "+", "opt", ".", "n_future", ")", ":", "\n", "        ", "h", "=", "encoder", "(", "x", "[", "i", "-", "1", "]", ")", "\n", "h_target", "=", "encoder", "(", "x", "[", "i", "]", ")", "[", "0", "]", "\n", "if", "opt", ".", "last_frame_skip", "or", "i", "<", "opt", ".", "n_past", ":", "\n", "            ", "h", ",", "skip", "=", "h", "\n", "", "else", ":", "\n", "            ", "h", "=", "h", "[", "0", "]", "\n", "", "h_pred", "=", "frame_predictor", "(", "h", ")", "\n", "\n", "mse_latent", "+=", "mse_latent_criterion", "(", "h_pred", ",", "h_target", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "loss", "=", "mse_latent", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "frame_predictor_optimizer", ".", "step", "(", ")", "\n", "\n", "return", "mse_latent", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "(", "opt", ".", "n_past", "+", "opt", ".", "n_future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.train.train_model": [[200, 249], ["encoder.zero_grad", "decoder.zero_grad", "frame_predictor.zero_grad", "frame_predictor.init_hidden", "range", "loss.backward", "frame_predictor_optimizer.step", "encoder_optimizer.step", "decoder_optimizer.step", "optimizer.step", "encoder", "frame_predictor", "mse_latent_criterion", "gp_layer", "mll", "decoder", "decoder", "mse_latent_criterion", "decoder", "mse_criterion", "mse_latent_criterion", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "encoder", "encoder.transpose().view", "h_target.transpose", "max_ll.sum", "mse_latent.data.cpu().numpy", "mse_latent.data.cpu().numpy", "gp_layer.mean.transpose", "encoder.transpose", "mse_latent.data.cpu", "mse_latent.data.cpu"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.init_hidden"], ["", "def", "train_model", "(", "x", ")", ":", "\n", "    ", "encoder", ".", "zero_grad", "(", ")", "\n", "decoder", ".", "zero_grad", "(", ")", "\n", "frame_predictor", ".", "zero_grad", "(", ")", "\n", "\n", "# initialize the hidden state.", "\n", "frame_predictor", ".", "hidden", "=", "frame_predictor", ".", "init_hidden", "(", ")", "\n", "\n", "mse", "=", "0", "\n", "mse_latent", "=", "0", "\n", "mse_gp", "=", "0", "\n", "max_ll", "=", "0", "\n", "ae_mse", "=", "0", "\n", "for", "i", "in", "range", "(", "1", ",", "opt", ".", "n_past", "+", "opt", ".", "n_future", ")", ":", "\n", "        ", "h", "=", "encoder", "(", "x", "[", "i", "-", "1", "]", ")", "\n", "h_target", "=", "encoder", "(", "x", "[", "i", "]", ")", "[", "0", "]", "\n", "\n", "if", "opt", ".", "last_frame_skip", "or", "i", "<", "opt", ".", "n_past", ":", "\n", "            ", "h", ",", "skip", "=", "h", "\n", "", "else", ":", "\n", "            ", "h", "=", "h", "[", "0", "]", "\n", "\n", "", "h_pred", "=", "frame_predictor", "(", "h", ")", "\n", "mse_latent", "+=", "mse_latent_criterion", "(", "h_pred", ",", "h_target", ")", "\n", "\n", "gp_pred", "=", "gp_layer", "(", "h", ".", "transpose", "(", "0", ",", "1", ")", ".", "view", "(", "90", ",", "opt", ".", "batch_size", ",", "1", ")", ")", "\n", "max_ll", "-=", "mll", "(", "gp_pred", ",", "h_target", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "x_pred", "=", "decoder", "(", "[", "h_pred", ",", "skip", "]", ")", "\n", "\n", "x_target_pred", "=", "decoder", "(", "[", "h_target", ",", "skip", "]", ")", "\n", "ae_mse", "+=", "mse_latent_criterion", "(", "x_target_pred", ",", "x", "[", "i", "]", ")", "\n", "\n", "x_pred_gp", "=", "decoder", "(", "[", "gp_pred", ".", "mean", ".", "transpose", "(", "0", ",", "1", ")", ",", "skip", "]", ")", "\n", "mse", "+=", "mse_criterion", "(", "x_pred", ",", "x", "[", "i", "]", ")", "\n", "mse_gp", "+=", "mse_latent_criterion", "(", "x_pred_gp", ",", "x", "[", "i", "]", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "\n", "\n", "", "loss", "=", "1000", "*", "ae_mse", "+", "0.001", "*", "mse", "+", "0.01", "*", "mse_latent", "+", "0.001", "*", "mse_gp", "+", "0.0001", "*", "max_ll", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "frame_predictor_optimizer", ".", "step", "(", ")", "\n", "encoder_optimizer", ".", "step", "(", ")", "\n", "decoder_optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "return", "mse_latent", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "(", "opt", ".", "n_past", "+", "opt", ".", "n_future", ")", ",", "mse_latent", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "/", "(", "opt", ".", "n_past", "+", "opt", ".", "n_future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.train.finetune_temporal_encoders": [[250, 254], ["train.train_frame_predictor", "train.train_GP_Frame_predictor"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.train.train_frame_predictor", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.train.train_GP_Frame_predictor"], ["", "def", "finetune_temporal_encoders", "(", "x", ")", ":", "\n", "    ", "temporal_lstm_loss", "=", "train_frame_predictor", "(", "x", ")", "\n", "temporal_gp_loss", "=", "train_GP_Frame_predictor", "(", "x", ")", "\n", "return", "temporal_gp_loss", "+", "temporal_lstm_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.train.plot": [[256, 336], ["range", "min", "range", "utils.save_tensors_image", "utils.save_gif", "frame_predictor.init_hidden", "gen_seq[].append", "range", "range", "to_plot.append", "range", "range", "range", "range", "range", "encoder", "h.detach.detach", "range", "row.append", "range", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "len", "range", "to_plot.append", "row.append", "range", "gifs[].append", "len", "encoder", "h_target[].detach", "frame_predictor", "gen_seq[].append", "frame_predictor().detach", "torch.sum", "torch.sum", "torch.sum", "row.append", "len", "row.append", "print", "likelihood", "decoder().detach", "gen_seq[].append", "print", "decoder().detach", "gen_seq[].append", "frame_predictor", "gp_layer", "str", "h.detach.transpose().view", "decoder", "str", "decoder", "[].data.cpu", "[].data.cpu", "h.detach.transpose", "likelihood.rsample().transpose", "likelihood.rsample"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.save_tensors_image", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.save_gif", "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.init_hidden"], ["", "def", "plot", "(", "x", ",", "epoch", ")", ":", "\n", "    ", "nsample", "=", "5", "\n", "gen_seq", "=", "[", "[", "]", "for", "i", "in", "range", "(", "nsample", ")", "]", "\n", "gt_seq", "=", "[", "x", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]", "\n", "\n", "\n", "for", "s", "in", "range", "(", "nsample", ")", ":", "\n", "        ", "frame_predictor", ".", "hidden", "=", "frame_predictor", ".", "init_hidden", "(", ")", "\n", "gen_seq", "[", "s", "]", ".", "append", "(", "x", "[", "0", "]", ")", "\n", "x_in", "=", "x", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "opt", ".", "n_eval", ")", ":", "\n", "            ", "h", "=", "encoder", "(", "x_in", ")", "\n", "if", "opt", ".", "last_frame_skip", "or", "i", "<", "opt", ".", "n_past", ":", "\n", "                ", "h", ",", "skip", "=", "h", "\n", "", "else", ":", "\n", "                ", "h", ",", "_", "=", "h", "\n", "", "h", "=", "h", ".", "detach", "(", ")", "\n", "if", "i", "<", "opt", ".", "n_past", ":", "\n", "                ", "h_target", "=", "encoder", "(", "x", "[", "i", "]", ")", "\n", "h_target", "=", "h_target", "[", "0", "]", ".", "detach", "(", ")", "\n", "frame_predictor", "(", "h", ")", "\n", "x_in", "=", "x", "[", "i", "]", "\n", "gen_seq", "[", "s", "]", ".", "append", "(", "x_in", ")", "\n", "", "else", ":", "\n", "                ", "h_pred", "=", "frame_predictor", "(", "h", ")", ".", "detach", "(", ")", "\n", "if", "i", "==", "10", ":", "\n", "                    ", "print", "(", "str", "(", "s", ")", "+", "\" started\"", ")", "\n", "final_hpred", "=", "likelihood", "(", "gp_layer", "(", "h", ".", "transpose", "(", "0", ",", "1", ")", ".", "view", "(", "90", ",", "opt", ".", "batch_size", ",", "1", ")", ")", ")", "\n", "x_in", "=", "decoder", "(", "[", "final_hpred", ".", "rsample", "(", ")", ".", "transpose", "(", "0", ",", "1", ")", ",", "skip", "]", ")", ".", "detach", "(", ")", "\n", "gen_seq", "[", "s", "]", ".", "append", "(", "x_in", ")", "\n", "print", "(", "str", "(", "s", ")", "+", "\" completed\"", ")", "\n", "", "else", ":", "\n", "                    ", "x_in", "=", "decoder", "(", "[", "h_pred", ",", "skip", "]", ")", ".", "detach", "(", ")", "\n", "gen_seq", "[", "s", "]", ".", "append", "(", "x_in", ")", "\n", "\n", "# -------------- creating the GIFs ---------------------------", "\n", "", "", "", "", "to_plot", "=", "[", "]", "\n", "gifs", "=", "[", "[", "]", "for", "t", "in", "range", "(", "opt", ".", "n_eval", ")", "]", "\n", "nrow", "=", "min", "(", "opt", ".", "batch_size", ",", "10", ")", "\n", "for", "i", "in", "range", "(", "nrow", ")", ":", "\n", "# ground truth sequence", "\n", "        ", "row", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "opt", ".", "n_eval", ")", ":", "\n", "            ", "row", ".", "append", "(", "gt_seq", "[", "t", "]", "[", "i", "]", ")", "\n", "", "to_plot", ".", "append", "(", "row", ")", "\n", "\n", "# best sequence", "\n", "min_mse", "=", "1e7", "\n", "for", "s", "in", "range", "(", "nsample", ")", ":", "\n", "            ", "mse", "=", "0", "\n", "for", "t", "in", "range", "(", "opt", ".", "n_eval", ")", ":", "\n", "                ", "mse", "+=", "torch", ".", "sum", "(", "(", "gt_seq", "[", "t", "]", "[", "i", "]", ".", "data", ".", "cpu", "(", ")", "-", "gen_seq", "[", "s", "]", "[", "t", "]", "[", "i", "]", ".", "data", ".", "cpu", "(", ")", ")", "**", "2", ")", "\n", "", "if", "mse", "<", "min_mse", ":", "\n", "                ", "min_mse", "=", "mse", "\n", "min_idx", "=", "s", "\n", "\n", "", "", "s_list", "=", "[", "min_idx", ",", "\n", "np", ".", "random", ".", "randint", "(", "nsample", ")", ",", "\n", "np", ".", "random", ".", "randint", "(", "nsample", ")", ",", "\n", "np", ".", "random", ".", "randint", "(", "nsample", ")", ",", "\n", "np", ".", "random", ".", "randint", "(", "nsample", ")", "]", "\n", "for", "ss", "in", "range", "(", "len", "(", "s_list", ")", ")", ":", "\n", "            ", "s", "=", "s_list", "[", "ss", "]", "\n", "row", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "opt", ".", "n_eval", ")", ":", "\n", "                ", "row", ".", "append", "(", "gen_seq", "[", "s", "]", "[", "t", "]", "[", "i", "]", ")", "\n", "", "to_plot", ".", "append", "(", "row", ")", "\n", "", "for", "t", "in", "range", "(", "opt", ".", "n_eval", ")", ":", "\n", "            ", "row", "=", "[", "]", "\n", "row", ".", "append", "(", "gt_seq", "[", "t", "]", "[", "i", "]", ")", "\n", "for", "ss", "in", "range", "(", "len", "(", "s_list", ")", ")", ":", "\n", "                ", "s", "=", "s_list", "[", "ss", "]", "\n", "row", ".", "append", "(", "gen_seq", "[", "s", "]", "[", "t", "]", "[", "i", "]", ")", "\n", "", "gifs", "[", "t", "]", ".", "append", "(", "row", ")", "\n", "\n", "", "", "fname", "=", "'%s/sample_%d.png'", "%", "(", "opt", ".", "output_path", ",", "epoch", ")", "\n", "utils", ".", "save_tensors_image", "(", "fname", ",", "to_plot", ")", "\n", "\n", "fname", "=", "'%s/sample_%d.gif'", "%", "(", "opt", ".", "output_path", ",", "epoch", ")", "#add path", "\n", "utils", ".", "save_gif", "(", "fname", ",", "gifs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.load_dataset": [[27, 82], ["MovingMNIST", "MovingMNIST", "RobotPush", "RobotPush", "KTH", "KTH", "UCF", "UCF"], "function", ["None"], ["def", "load_dataset", "(", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "dataset", "==", "'smmnist'", ":", "\n", "        ", "from", "data", ".", "moving_mnist", "import", "MovingMNIST", "\n", "train_data", "=", "MovingMNIST", "(", "\n", "train", "=", "True", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "n_past", "+", "opt", ".", "n_future", ",", "\n", "image_size", "=", "opt", ".", "image_width", ",", "\n", "deterministic", "=", "False", ",", "\n", "num_digits", "=", "opt", ".", "num_digits", ")", "\n", "test_data", "=", "MovingMNIST", "(", "\n", "train", "=", "False", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "n_eval", ",", "\n", "image_size", "=", "opt", ".", "image_width", ",", "\n", "deterministic", "=", "False", ",", "\n", "num_digits", "=", "opt", ".", "num_digits", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'bair'", ":", "\n", "        ", "from", "data", ".", "bair", "import", "RobotPush", "\n", "train_data", "=", "RobotPush", "(", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "train", "=", "True", ",", "\n", "seq_len", "=", "opt", ".", "n_past", "+", "opt", ".", "n_future", ",", "\n", "image_size", "=", "opt", ".", "image_width", ")", "\n", "test_data", "=", "RobotPush", "(", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "train", "=", "False", ",", "\n", "seq_len", "=", "opt", ".", "n_eval", ",", "\n", "image_size", "=", "opt", ".", "image_width", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'kth'", ":", "\n", "        ", "from", "data", ".", "kth", "import", "KTH", "\n", "train_data", "=", "KTH", "(", "\n", "train", "=", "True", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "n_past", "+", "opt", ".", "n_future", ",", "\n", "image_size", "=", "opt", ".", "image_width", ")", "\n", "test_data", "=", "KTH", "(", "\n", "train", "=", "False", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "n_eval", ",", "\n", "image_size", "=", "opt", ".", "image_width", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'ucf'", ":", "\n", "        ", "from", "data", ".", "ucf", "import", "UCF", "\n", "train_data", "=", "UCF", "(", "\n", "train", "=", "True", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "n_past", "+", "opt", ".", "n_future", ",", "\n", "image_size", "=", "opt", ".", "image_width", ")", "\n", "test_data", "=", "UCF", "(", "\n", "train", "=", "False", ",", "\n", "data_root", "=", "opt", ".", "data_root", ",", "\n", "seq_len", "=", "opt", ".", "n_eval", ",", "\n", "image_size", "=", "opt", ".", "image_width", ")", "\n", "\n", "", "return", "train_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.sequence_input": [[83, 85], ["torch.autograd.Variable", "x.type"], "function", ["None"], ["", "def", "sequence_input", "(", "seq", ",", "dtype", ")", ":", "\n", "    ", "return", "[", "Variable", "(", "x", ".", "type", "(", "dtype", ")", ")", "for", "x", "in", "seq", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.normalize_data": [[86, 96], ["sequence.transpose_", "sequence.transpose_().transpose_", "sequence.transpose_", "utils.sequence_input", "targets.cuda", "sequence.transpose_"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.sequence_input"], ["", "def", "normalize_data", "(", "opt", ",", "dtype", ",", "sequence", ")", ":", "\n", "    ", "sequence", ",", "targets", "=", "sequence", "# , targets", "\n", "# sequence = sequence", "\n", "if", "opt", ".", "dataset", "==", "'smmnist'", "or", "opt", ".", "dataset", "==", "'ucf'", "or", "opt", ".", "dataset", "==", "'kth'", "or", "opt", ".", "dataset", "==", "'bair'", ":", "\n", "        ", "sequence", ".", "transpose_", "(", "0", ",", "1", ")", "\n", "sequence", ".", "transpose_", "(", "3", ",", "4", ")", ".", "transpose_", "(", "2", ",", "3", ")", "\n", "", "else", ":", "\n", "        ", "sequence", ".", "transpose_", "(", "0", ",", "1", ")", "\n", "\n", "", "return", "sequence_input", "(", "sequence", ",", "dtype", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.is_sequence": [[97, 103], ["hasattr", "hasattr", "hasattr", "hasattr", "type"], "function", ["None"], ["", "def", "is_sequence", "(", "arg", ")", ":", "\n", "    ", "return", "(", "not", "hasattr", "(", "arg", ",", "\"strip\"", ")", "and", "\n", "not", "type", "(", "arg", ")", "is", "np", ".", "ndarray", "and", "\n", "not", "hasattr", "(", "arg", ",", "\"dot\"", ")", "and", "\n", "(", "hasattr", "(", "arg", ",", "\"__getitem__\"", ")", "or", "\n", "hasattr", "(", "arg", ",", "\"__iter__\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.image_tensor": [[104, 151], ["len", "utils.is_sequence", "torch.ones", "enumerate", "torch.ones", "enumerate", "hasattr", "utils.image_tensor", "images[].dim", "images[].size", "images[].size", "images[].size", "images[].size", "images[].size", "result[].copy_", "images[].dim", "images[].size", "images[].size", "images[].size", "images[].size", "images[].size", "result[].copy_", "inputs.dim", "isinstance", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.is_sequence", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.image_tensor"], ["", "def", "image_tensor", "(", "inputs", ",", "padding", "=", "1", ")", ":", "\n", "# assert is_sequence(inputs)", "\n", "    ", "assert", "len", "(", "inputs", ")", ">", "0", "\n", "# print(inputs)", "\n", "\n", "# if this is a list of lists, unpack them all and grid them up", "\n", "if", "is_sequence", "(", "inputs", "[", "0", "]", ")", "or", "(", "hasattr", "(", "inputs", ",", "\"dim\"", ")", "and", "inputs", ".", "dim", "(", ")", ">", "4", ")", ":", "\n", "        ", "images", "=", "[", "image_tensor", "(", "x", ")", "for", "x", "in", "inputs", "]", "\n", "if", "images", "[", "0", "]", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "c_dim", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "x_dim", "=", "images", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "y_dim", "=", "images", "[", "0", "]", ".", "size", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "c_dim", "=", "1", "\n", "x_dim", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "y_dim", "=", "images", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "\n", "", "result", "=", "torch", ".", "ones", "(", "c_dim", ",", "\n", "x_dim", "*", "len", "(", "images", ")", "+", "padding", "*", "(", "len", "(", "images", ")", "-", "1", ")", ",", "\n", "y_dim", ")", "\n", "for", "i", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "            ", "result", "[", ":", ",", "i", "*", "x_dim", "+", "i", "*", "padding", ":", "\n", "(", "i", "+", "1", ")", "*", "x_dim", "+", "i", "*", "padding", ",", ":", "]", ".", "copy_", "(", "image", ")", "\n", "\n", "", "return", "result", "\n", "\n", "# if this is just a list, make a stacked image", "\n", "", "else", ":", "\n", "        ", "images", "=", "[", "x", ".", "data", "if", "isinstance", "(", "x", ",", "torch", ".", "autograd", ".", "Variable", ")", "else", "x", "\n", "for", "x", "in", "inputs", "]", "\n", "# print(images)", "\n", "if", "images", "[", "0", "]", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "c_dim", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "x_dim", "=", "images", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "y_dim", "=", "images", "[", "0", "]", ".", "size", "(", "2", ")", "\n", "", "else", ":", "\n", "            ", "c_dim", "=", "1", "\n", "x_dim", "=", "images", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "y_dim", "=", "images", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "\n", "", "result", "=", "torch", ".", "ones", "(", "c_dim", ",", "\n", "x_dim", ",", "\n", "y_dim", "*", "len", "(", "images", ")", "+", "padding", "*", "(", "len", "(", "images", ")", "-", "1", ")", ")", "\n", "for", "i", ",", "image", "in", "enumerate", "(", "images", ")", ":", "\n", "            ", "result", "[", ":", ",", ":", ",", "i", "*", "y_dim", "+", "i", "*", "padding", ":", "\n", "(", "i", "+", "1", ")", "*", "y_dim", "+", "i", "*", "padding", "]", ".", "copy_", "(", "image", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.save_np_img": [[152, 159], ["scipy.misc.toimage", "scipy.misc.toimage.save", "numpy.tile", "np.tile.max"], "function", ["None"], ["", "", "def", "save_np_img", "(", "fname", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "x", "=", "np", ".", "tile", "(", "x", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "img", "=", "scipy", ".", "misc", ".", "toimage", "(", "x", ",", "\n", "high", "=", "255", "*", "x", ".", "max", "(", ")", ",", "\n", "channel_axis", "=", "0", ")", "\n", "img", ".", "save", "(", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.make_image": [[160, 166], ["tensor.expand.cpu().clamp", "scipy.misc.toimage", "tensor.expand.size", "tensor.expand.expand", "tensor.expand.numpy", "tensor.expand.cpu", "tensor.expand.size", "tensor.expand.size", "tensor.expand.numpy().max", "tensor.expand.numpy"], "function", ["None"], ["", "def", "make_image", "(", "tensor", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "cpu", "(", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "if", "tensor", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "        ", "tensor", "=", "tensor", ".", "expand", "(", "3", ",", "tensor", ".", "size", "(", "1", ")", ",", "tensor", ".", "size", "(", "2", ")", ")", "\n", "# pdb.set_trace()", "\n", "", "return", "scipy", ".", "misc", ".", "toimage", "(", "tensor", ".", "numpy", "(", ")", ",", "high", "=", "255", "*", "tensor", ".", "numpy", "(", ")", ".", "max", "(", ")", ",", "channel_axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.draw_text_tensor": [[167, 174], ["tensor.transpose().transpose().data.cpu().numpy", "PIL.Image.fromarray", "PIL.ImageDraw.Draw", "ImageDraw.Draw.text", "numpy.asarray", "torch.autograd.Variable().transpose().transpose", "numpy.uint8", "tensor.transpose().transpose().data.cpu", "torch.autograd.Variable().transpose", "torch.autograd.Variable", "tensor.transpose().transpose", "torch.Tensor", "tensor.transpose"], "function", ["None"], ["", "def", "draw_text_tensor", "(", "tensor", ",", "text", ")", ":", "\n", "    ", "np_x", "=", "tensor", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pil", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "np_x", "*", "255", ")", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "pil", ")", "\n", "draw", ".", "text", "(", "(", "4", ",", "64", ")", ",", "text", ",", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "img", "=", "np", ".", "asarray", "(", "pil", ")", "\n", "return", "Variable", "(", "torch", ".", "Tensor", "(", "img", "/", "255.", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.save_gif": [[175, 183], ["imageio.mimsave", "utils.image_tensor", "img.transpose().transpose().clamp.cpu", "img.transpose().transpose().clamp.transpose().transpose().clamp", "images.append", "img.transpose().transpose().clamp.numpy", "img.transpose().transpose().clamp.transpose().transpose", "img.transpose().transpose().clamp.transpose"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.image_tensor"], ["", "def", "save_gif", "(", "filename", ",", "inputs", ",", "duration", "=", "0.25", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "tensor", "in", "inputs", ":", "\n", "        ", "img", "=", "image_tensor", "(", "tensor", ",", "padding", "=", "0", ")", "\n", "img", "=", "img", ".", "cpu", "(", ")", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "images", ".", "append", "(", "img", ".", "numpy", "(", ")", ")", "\n", "", "imageio", ".", "mimsave", "(", "filename", ",", "images", ",", "duration", "=", "duration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.save_gif_with_text": [[184, 192], ["zip", "imageio.mimsave", "utils.image_tensor", "img.transpose().transpose().clamp().numpy.cpu", "img.transpose().transpose().clamp().numpy.transpose().transpose().clamp().numpy", "images.append", "utils.draw_text_tensor", "img.transpose().transpose().clamp().numpy.transpose().transpose().clamp", "zip", "img.transpose().transpose().clamp().numpy.transpose().transpose", "img.transpose().transpose().clamp().numpy.transpose"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.image_tensor", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.draw_text_tensor"], ["", "def", "save_gif_with_text", "(", "filename", ",", "inputs", ",", "text", ",", "duration", "=", "0.25", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "tensor", ",", "text", "in", "zip", "(", "inputs", ",", "text", ")", ":", "\n", "        ", "img", "=", "image_tensor", "(", "[", "draw_text_tensor", "(", "ti", ",", "texti", ")", "for", "ti", ",", "texti", "in", "zip", "(", "tensor", ",", "text", ")", "]", ",", "padding", "=", "0", ")", "\n", "img", "=", "img", ".", "cpu", "(", ")", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "clamp", "(", "0", ",", "1", ")", ".", "numpy", "(", ")", "\n", "images", ".", "append", "(", "img", ")", "\n", "", "imageio", ".", "mimsave", "(", "filename", ",", "images", ",", "duration", "=", "duration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.save_image": [[193, 196], ["utils.make_image", "make_image.save"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.make_image"], ["", "def", "save_image", "(", "filename", ",", "tensor", ")", ":", "\n", "    ", "img", "=", "make_image", "(", "tensor", ")", "\n", "img", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.save_tensors_image": [[197, 200], ["utils.image_tensor", "utils.save_image"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.image_tensor", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.save_image"], ["", "def", "save_tensors_image", "(", "filename", ",", "inputs", ",", "padding", "=", "1", ")", ":", "\n", "    ", "images", "=", "image_tensor", "(", "inputs", ",", "padding", ")", "\n", "return", "save_image", "(", "filename", ",", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.prod": [[201, 203], ["functools.reduce"], "function", ["None"], ["", "def", "prod", "(", "l", ")", ":", "\n", "    ", "return", "functools", ".", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.batch_flatten": [[204, 206], ["x.resize", "x.size", "utils.prod", "x.size"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.prod"], ["", "def", "batch_flatten", "(", "x", ")", ":", "\n", "    ", "return", "x", ".", "resize", "(", "x", ".", "size", "(", "0", ")", ",", "prod", "(", "x", ".", "size", "(", ")", "[", "1", ":", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.clear_progressbar": [[207, 214], ["print", "print", "print"], "function", ["None"], ["", "def", "clear_progressbar", "(", ")", ":", "\n", "# moves up 3 lines", "\n", "    ", "print", "(", "\"\\033[2A\"", ")", "\n", "# deletes the whole line, regardless of character position", "\n", "print", "(", "\"\\033[2K\"", ")", "\n", "# moves up two lines again", "\n", "print", "(", "\"\\033[2A\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.mse_metric": [[215, 219], ["numpy.sum", "float"], "function", ["None"], ["", "def", "mse_metric", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "err", "=", "np", ".", "sum", "(", "(", "x1", "-", "x2", ")", "**", "2", ")", "\n", "err", "/=", "float", "(", "x1", ".", "shape", "[", "0", "]", "*", "x1", ".", "shape", "[", "1", "]", "*", "x1", ".", "shape", "[", "2", "]", ")", "\n", "return", "err", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.eval_seq": [[220, 235], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "range", "skimage.measure.compare_ssim", "skimage.measure.compare_psnr"], "function", ["None"], ["", "def", "eval_seq", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "T", "=", "len", "(", "gt", ")", "\n", "bs", "=", "gt", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "ssim", "=", "np", ".", "zeros", "(", "(", "bs", ",", "T", ")", ")", "\n", "psnr", "=", "np", ".", "zeros", "(", "(", "bs", ",", "T", ")", ")", "\n", "mse", "=", "np", ".", "zeros", "(", "(", "bs", ",", "T", ")", ")", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "        ", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "gt", "[", "t", "]", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "ssim", "[", "i", ",", "t", "]", "+=", "ssim_metric", "(", "gt", "[", "t", "]", "[", "i", "]", "[", "c", "]", ",", "pred", "[", "t", "]", "[", "i", "]", "[", "c", "]", ")", "\n", "psnr", "[", "i", ",", "t", "]", "+=", "psnr_metric", "(", "gt", "[", "t", "]", "[", "i", "]", "[", "c", "]", ",", "pred", "[", "t", "]", "[", "i", "]", "[", "c", "]", ")", "\n", "", "ssim", "[", "i", ",", "t", "]", "/=", "gt", "[", "t", "]", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "psnr", "[", "i", ",", "t", "]", "/=", "gt", "[", "t", "]", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "return", "mse", ",", "ssim", ",", "psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.finn_eval_seq": [[237, 257], ["len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "range", "range", "utils.mse_metric", "finn_ssim().mean", "math.isnan", "utils.finn_psnr", "utils.finn_ssim"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.mse_metric", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.finn_psnr", "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.finn_ssim"], ["", "def", "finn_eval_seq", "(", "gt", ",", "pred", ")", ":", "\n", "    ", "T", "=", "len", "(", "gt", ")", "\n", "bs", "=", "gt", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "ssim", "=", "np", ".", "zeros", "(", "(", "bs", ",", "T", ")", ")", "\n", "psnr", "=", "np", ".", "zeros", "(", "(", "bs", ",", "T", ")", ")", "\n", "mse", "=", "np", ".", "zeros", "(", "(", "bs", ",", "T", ")", ")", "\n", "for", "i", "in", "range", "(", "bs", ")", ":", "\n", "        ", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "gt", "[", "t", "]", "[", "i", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "res", "=", "finn_ssim", "(", "gt", "[", "t", "]", "[", "i", "]", "[", "c", "]", ",", "pred", "[", "t", "]", "[", "i", "]", "[", "c", "]", ")", ".", "mean", "(", ")", "\n", "if", "math", ".", "isnan", "(", "res", ")", ":", "\n", "                    ", "ssim", "[", "i", ",", "t", "]", "+=", "-", "1", "\n", "", "else", ":", "\n", "                    ", "ssim", "[", "i", ",", "t", "]", "+=", "res", "\n", "", "psnr", "[", "i", ",", "t", "]", "+=", "finn_psnr", "(", "gt", "[", "t", "]", "[", "i", "]", "[", "c", "]", ",", "pred", "[", "t", "]", "[", "i", "]", "[", "c", "]", ")", "\n", "", "ssim", "[", "i", ",", "t", "]", "/=", "gt", "[", "t", "]", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "psnr", "[", "i", ",", "t", "]", "/=", "gt", "[", "t", "]", "[", "i", "]", ".", "shape", "[", "0", "]", "\n", "mse", "[", "i", ",", "t", "]", "=", "mse_metric", "(", "gt", "[", "t", "]", "[", "i", "]", ",", "pred", "[", "t", "]", "[", "i", "]", ")", "\n", "\n", "", "", "return", "mse", ",", "ssim", ",", "psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.finn_psnr": [[259, 262], ["numpy.log", "numpy.log"], "function", ["None"], ["", "def", "finn_psnr", "(", "x", ",", "y", ")", ":", "\n", "    ", "mse", "=", "(", "(", "x", "-", "y", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "return", "10", "*", "np", ".", "log", "(", "1", "/", "mse", ")", "/", "np", ".", "log", "(", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.gaussian2": [[264, 269], ["numpy.exp"], "function", ["None"], ["", "def", "gaussian2", "(", "size", ",", "sigma", ")", ":", "\n", "    ", "A", "=", "1", "/", "(", "2.0", "*", "np", ".", "pi", "*", "sigma", "**", "2", ")", "\n", "x", ",", "y", "=", "np", ".", "mgrid", "[", "-", "size", "//", "2", "+", "1", ":", "size", "//", "2", "+", "1", ",", "-", "size", "//", "2", "+", "1", ":", "size", "//", "2", "+", "1", "]", "\n", "g", "=", "A", "*", "np", ".", "exp", "(", "-", "(", "(", "x", "**", "2", "/", "(", "2.0", "*", "sigma", "**", "2", ")", ")", "+", "(", "y", "**", "2", "/", "(", "2.0", "*", "sigma", "**", "2", ")", ")", ")", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.fspecial_gauss": [[270, 274], ["numpy.exp", "np.exp.sum"], "function", ["None"], ["", "def", "fspecial_gauss", "(", "size", ",", "sigma", ")", ":", "\n", "    ", "x", ",", "y", "=", "np", ".", "mgrid", "[", "-", "size", "//", "2", "+", "1", ":", "size", "//", "2", "+", "1", ",", "-", "size", "//", "2", "+", "1", ":", "size", "//", "2", "+", "1", "]", "\n", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "**", "2", "+", "y", "**", "2", ")", "/", "(", "2.0", "*", "sigma", "**", "2", ")", ")", ")", "\n", "return", "g", "/", "g", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.finn_ssim": [[275, 302], ["img1.cpu().numpy().astype.cpu().numpy().astype", "img2.cpu().numpy().astype.cpu().numpy().astype", "utils.fspecial_gauss", "scipy.signal.fftconvolve", "scipy.signal.fftconvolve", "scipy.signal.fftconvolve", "scipy.signal.fftconvolve", "scipy.signal.fftconvolve", "img1.cpu().numpy().astype.cpu().numpy", "img2.cpu().numpy().astype.cpu().numpy", "img1.cpu().numpy().astype.cpu", "img2.cpu().numpy().astype.cpu"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.fspecial_gauss"], ["", "def", "finn_ssim", "(", "img1", ",", "img2", ",", "cs_map", "=", "False", ")", ":", "\n", "\n", "    ", "img1", "=", "img1", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "img2", "=", "img2", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "size", "=", "11", "\n", "sigma", "=", "1.5", "\n", "window", "=", "fspecial_gauss", "(", "size", ",", "sigma", ")", "\n", "K1", "=", "0.01", "\n", "K2", "=", "0.03", "\n", "L", "=", "1", "#bitdepth of image", "\n", "C1", "=", "(", "K1", "*", "L", ")", "**", "2", "\n", "C2", "=", "(", "K2", "*", "L", ")", "**", "2", "\n", "mu1", "=", "signal", ".", "fftconvolve", "(", "img1", ",", "window", ",", "mode", "=", "'valid'", ")", "\n", "mu2", "=", "signal", ".", "fftconvolve", "(", "img2", ",", "window", ",", "mode", "=", "'valid'", ")", "\n", "mu1_sq", "=", "mu1", "*", "mu1", "\n", "mu2_sq", "=", "mu2", "*", "mu2", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "sigma1_sq", "=", "signal", ".", "fftconvolve", "(", "img1", "*", "img1", ",", "window", ",", "mode", "=", "'valid'", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "signal", ".", "fftconvolve", "(", "img2", "*", "img2", ",", "window", ",", "mode", "=", "'valid'", ")", "-", "mu2_sq", "\n", "sigma12", "=", "signal", ".", "fftconvolve", "(", "img1", "*", "img2", ",", "window", ",", "mode", "=", "'valid'", ")", "-", "mu1_mu2", "\n", "if", "cs_map", ":", "\n", "        ", "return", "(", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", ",", "\n", "(", "2.0", "*", "sigma12", "+", "C2", ")", "/", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "(", "(", "2", "*", "mu1_mu2", "+", "C1", ")", "*", "(", "2", "*", "sigma12", "+", "C2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "C1", ")", "*", "\n", "(", "sigma1_sq", "+", "sigma2_sq", "+", "C2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.None.utils.init_weights": [[304, 312], ["m.weight.data.normal_", "m.bias.data.fill_", "classname.find", "classname.find", "classname.find", "m.weight.data.normal_", "m.bias.data.fill_"], "function", ["None"], ["", "", "def", "init_weights", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_64.dcgan_conv.__init__": [[5, 11], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ")", ":", "\n", "        ", "super", "(", "dcgan_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nin", ",", "nout", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nout", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_64.dcgan_conv.forward": [[13, 15], ["dcgan_64.dcgan_conv.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_64.dcgan_upconv.__init__": [[17, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ")", ":", "\n", "        ", "super", "(", "dcgan_upconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "nin", ",", "nout", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nout", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_64.dcgan_upconv.forward": [[25, 27], ["dcgan_64.dcgan_upconv.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_64.encoder.__init__": [[29, 46], ["torch.Module.__init__", "dcgan_64.dcgan_conv", "dcgan_64.dcgan_conv", "dcgan_64.dcgan_conv", "dcgan_64.dcgan_conv", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "nf", "=", "64", "\n", "# input is (nc) x 64 x 64", "\n", "self", ".", "c1", "=", "dcgan_conv", "(", "nc", ",", "nf", ")", "\n", "# state size. (nf) x 32 x 32", "\n", "self", ".", "c2", "=", "dcgan_conv", "(", "nf", ",", "nf", "*", "2", ")", "\n", "# state size. (nf*2) x 16 x 16", "\n", "self", ".", "c3", "=", "dcgan_conv", "(", "nf", "*", "2", ",", "nf", "*", "4", ")", "\n", "# state size. (nf*4) x 8 x 8", "\n", "self", ".", "c4", "=", "dcgan_conv", "(", "nf", "*", "4", ",", "nf", "*", "8", ")", "\n", "# state size. (nf*8) x 4 x 4", "\n", "self", ".", "c5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "dim", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_64.encoder.forward": [[48, 55], ["dcgan_64.encoder.c1", "dcgan_64.encoder.c2", "dcgan_64.encoder.c3", "dcgan_64.encoder.c4", "dcgan_64.encoder.c5", "dcgan_64.encoder.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h1", "=", "self", ".", "c1", "(", "input", ")", "\n", "h2", "=", "self", ".", "c2", "(", "h1", ")", "\n", "h3", "=", "self", ".", "c3", "(", "h2", ")", "\n", "h4", "=", "self", ".", "c4", "(", "h3", ")", "\n", "h5", "=", "self", ".", "c5", "(", "h4", ")", "\n", "return", "h5", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ")", ",", "[", "h1", ",", "h2", ",", "h3", ",", "h4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_64.decoder.__init__": [[58, 78], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "dcgan_64.dcgan_upconv", "dcgan_64.dcgan_upconv", "dcgan_64.dcgan_upconv", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "nf", "=", "64", "\n", "self", ".", "upc1", "=", "nn", ".", "Sequential", "(", "\n", "# input is Z, going into a convolution", "\n", "nn", ".", "ConvTranspose2d", "(", "dim", ",", "nf", "*", "8", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "# state size. (nf*8) x 4 x 4", "\n", "self", ".", "upc2", "=", "dcgan_upconv", "(", "nf", "*", "8", "*", "2", ",", "nf", "*", "4", ")", "\n", "# state size. (nf*4) x 8 x 8", "\n", "self", ".", "upc3", "=", "dcgan_upconv", "(", "nf", "*", "4", "*", "2", ",", "nf", "*", "2", ")", "\n", "# state size. (nf*2) x 16 x 16", "\n", "self", ".", "upc4", "=", "dcgan_upconv", "(", "nf", "*", "2", "*", "2", ",", "nf", ")", "\n", "# state size. (nf) x 32 x 32", "\n", "self", ".", "upc5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "nf", "*", "2", ",", "nc", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", "# state size. (nc) x 64 x 64", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_64.decoder.forward": [[81, 89], ["dcgan_64.decoder.upc1", "dcgan_64.decoder.upc2", "dcgan_64.decoder.upc3", "dcgan_64.decoder.upc4", "dcgan_64.decoder.upc5", "vec.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "vec", ",", "skip", "=", "input", "\n", "d1", "=", "self", ".", "upc1", "(", "vec", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ",", "1", ",", "1", ")", ")", "\n", "d2", "=", "self", ".", "upc2", "(", "torch", ".", "cat", "(", "[", "d1", ",", "skip", "[", "3", "]", "]", ",", "1", ")", ")", "\n", "d3", "=", "self", ".", "upc3", "(", "torch", ".", "cat", "(", "[", "d2", ",", "skip", "[", "2", "]", "]", ",", "1", ")", ")", "\n", "d4", "=", "self", ".", "upc4", "(", "torch", ".", "cat", "(", "[", "d3", ",", "skip", "[", "1", "]", "]", ",", "1", ")", ")", "\n", "output", "=", "self", ".", "upc5", "(", "torch", ".", "cat", "(", "[", "d4", ",", "skip", "[", "0", "]", "]", ",", "1", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.gp_models.GPRegressionLayer1.__init__": [[11, 19], ["gpytorch.variational.CholeskyVariationalDistribution", "torch.rand", "gpytorch.variational.WhitenedVariationalStrategy", "gpytorch.models.AbstractVariationalGP.__init__", "gpytorch.means.ConstantMean", "gpytorch.kernels.ScaleKernel", "gpytorch.kernels.RBFKernel"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_dims", "=", "90", ",", "num_inducing_points", "=", "40", ")", ":", "\n", "        ", "variational_distribution", "=", "CholeskyVariationalDistribution", "(", "num_inducing_points", "=", "num_inducing_points", ",", "batch_size", "=", "num_dims", ")", "\n", "inducing_points", "=", "torch", ".", "rand", "(", "num_dims", ",", "num_inducing_points", ",", "1", ")", "\n", "variational_strategy", "=", "WhitenedVariationalStrategy", "(", "self", ",", "inducing_points", ",", "variational_distribution", ",", "learn_inducing_locations", "=", "True", ")", "\n", "super", "(", "GPRegressionLayer1", ",", "self", ")", ".", "__init__", "(", "variational_strategy", ")", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ConstantMean", "(", "batch_size", "=", "num_dims", ")", "\n", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "\n", "gpytorch", ".", "kernels", ".", "RBFKernel", "(", "batch_size", "=", "num_dims", ")", ",", "batch_size", "=", "num_dims", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.gp_models.GPRegressionLayer1.forward": [[21, 25], ["gp_models.GPRegressionLayer1.mean_module", "gp_models.GPRegressionLayer1.covar_module", "gpytorch.distributions.MultivariateNormal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.cnn_block_frame.CNNBlockFrame.__init__": [[4, 31], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Dropout", "torch.Linear", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU", "torch.MaxPool3d", "torch.Dropout", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU", "torch.MaxPool3d", "torch.Dropout", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU", "torch.MaxPool3d", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CNNBlockFrame", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "1", ",", "16", ",", "kernel_size", "=", "(", "4", ",", "5", ",", "5", ")", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "16", ",", "32", ",", "kernel_size", "=", "(", "4", ",", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "32", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2304", ",", "128", ")", "#2304", "\n", "self", ".", "dropfc1", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.cnn_block_frame.CNNBlockFrame.forward": [[32, 44], ["cnn_block_frame.CNNBlockFrame.conv1", "cnn_block_frame.CNNBlockFrame.conv2", "cnn_block_frame.CNNBlockFrame.conv3", "cnn_block_frame.CNNBlockFrame.view", "cnn_block_frame.CNNBlockFrame.fc1", "cnn_block_frame.CNNBlockFrame.dropfc1", "cnn_block_frame.CNNBlockFrame.fc2", "cnn_block_frame.CNNBlockFrame.size", "torch.ReLU"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc1", "(", "out", ")", "\n", "out", "=", "nn", ".", "ReLU", "(", ")", "(", "out", ")", "\n", "out", "=", "self", ".", "dropfc1", "(", "out", ")", "\n", "out", "=", "self", ".", "fc2", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.cnn_block_frame.CNNBlockFrame3.__init__": [[46, 73], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Dropout", "torch.Linear", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU", "torch.MaxPool3d", "torch.Dropout", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU", "torch.MaxPool3d", "torch.Dropout", "torch.Conv3d", "torch.BatchNorm3d", "torch.ReLU", "torch.MaxPool3d", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CNNBlockFrame3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "3", ",", "16", ",", "kernel_size", "=", "(", "4", ",", "5", ",", "5", ")", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "16", ",", "32", ",", "kernel_size", "=", "(", "4", ",", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "32", ",", "64", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "2", ",", "2", ",", "2", ")", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "2304", ",", "128", ")", "#2304", "\n", "self", ".", "dropfc1", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.cnn_block_frame.CNNBlockFrame3.forward": [[74, 86], ["cnn_block_frame.CNNBlockFrame3.conv1", "cnn_block_frame.CNNBlockFrame3.conv2", "cnn_block_frame.CNNBlockFrame3.conv3", "cnn_block_frame.CNNBlockFrame3.view", "cnn_block_frame.CNNBlockFrame3.fc1", "cnn_block_frame.CNNBlockFrame3.dropfc1", "cnn_block_frame.CNNBlockFrame3.fc2", "cnn_block_frame.CNNBlockFrame3.size", "torch.ReLU"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc1", "(", "out", ")", "\n", "out", "=", "nn", ".", "ReLU", "(", ")", "(", "out", ")", "\n", "out", "=", "self", ".", "dropfc1", "(", "out", ")", "\n", "out", "=", "self", ".", "fc2", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.lstm.__init__": [[43, 57], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lstm.lstm.init_hidden", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "range"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__", "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.init_hidden"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "hidden_size", ",", "n_layers", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "lstm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "embed", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "LSTMCell", "(", "hidden_size", ",", "hidden_size", ")", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "output", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", ",", "\n", "#nn.BatchNorm1d(output_size),", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "hidden", "=", "self", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.lstm.init_hidden": [[58, 64], ["range", "hidden.append", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "        ", "hidden", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "hidden", ".", "append", "(", "(", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", ")", ")", "\n", "", "return", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.lstm.forward": [[65, 73], ["lstm.lstm.embed", "range", "lstm.lstm.output", "input.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "embedded", "=", "self", ".", "embed", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "input_size", ")", ")", "\n", "h_in", "=", "embedded", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "self", ".", "hidden", "[", "i", "]", "=", "self", ".", "lstm", "[", "i", "]", "(", "h_in", ",", "self", ".", "hidden", "[", "i", "]", ")", "\n", "h_in", "=", "self", ".", "hidden", "[", "i", "]", "[", "0", "]", "\n", "\n", "", "return", "self", ".", "output", "(", "h_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gru.__init__": [[76, 90], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lstm.gru.init_hidden", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "torch.GRUCell", "range"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__", "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.init_hidden"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "hidden_size", ",", "n_layers", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "gru", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "embed", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ")", "\n", "self", ".", "gru", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "GRUCell", "(", "hidden_size", ",", "hidden_size", ")", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "output", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", ",", "\n", "#nn.BatchNorm1d(output_size),", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "hidden", "=", "self", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gru.init_hidden": [[91, 96], ["range", "hidden.append", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "        ", "hidden", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "hidden", ".", "append", "(", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", ")", "\n", "", "return", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gru.forward": [[97, 105], ["lstm.gru.embed", "range", "lstm.gru.output", "input.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "embedded", "=", "self", ".", "embed", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "input_size", ")", ")", "\n", "h_in", "=", "embedded", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "self", ".", "hidden", "[", "i", "]", "=", "self", ".", "gru", "[", "i", "]", "(", "h_in", ",", "self", ".", "hidden", "[", "i", "]", ")", "\n", "h_in", "=", "self", ".", "hidden", "[", "i", "]", "#[0]", "\n", "\n", "", "return", "self", ".", "output", "(", "h_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.rnn.__init__": [[108, 122], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "lstm.rnn.init_hidden", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.RNNCell", "torch.RNNCell", "torch.RNNCell", "torch.RNNCell", "range"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__", "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.init_hidden"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "hidden_size", ",", "n_layers", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "rnn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "embed", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ")", "\n", "self", ".", "rnn", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "RNNCell", "(", "hidden_size", ",", "hidden_size", ")", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "output", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", ",", "\n", "#nn.BatchNorm1d(output_size),", "\n", "nn", ".", "Tanh", "(", ")", ")", "\n", "self", ".", "hidden", "=", "self", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.rnn.init_hidden": [[123, 128], ["range", "hidden.append", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "        ", "hidden", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "hidden", ".", "append", "(", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", ")", "\n", "", "return", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.rnn.forward": [[129, 137], ["lstm.rnn.embed", "range", "lstm.rnn.output", "input.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "embedded", "=", "self", ".", "embed", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "input_size", ")", ")", "\n", "h_in", "=", "embedded", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "self", ".", "hidden", "[", "i", "]", "=", "self", ".", "rnn", "[", "i", "]", "(", "h_in", ",", "self", ".", "hidden", "[", "i", "]", ")", "\n", "h_in", "=", "self", ".", "hidden", "[", "i", "]", "#[0]", "\n", "\n", "", "return", "self", ".", "output", "(", "h_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.__init__": [[141, 153], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "lstm.gaussian_lstm.init_hidden", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "range"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__", "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.init_hidden"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ",", "hidden_size", ",", "n_layers", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "gaussian_lstm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "embed", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "LSTMCell", "(", "hidden_size", ",", "hidden_size", ")", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", "]", ")", "\n", "self", ".", "mu_net", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "self", ".", "logvar_net", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "output_size", ")", "\n", "self", ".", "hidden", "=", "self", ".", "init_hidden", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.init_hidden": [[154, 160], ["range", "hidden.append", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ")", ":", "\n", "        ", "hidden", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "hidden", ".", "append", "(", "(", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "self", ".", "batch_size", ",", "self", ".", "hidden_size", ")", ".", "cuda", "(", ")", ")", ")", ")", "\n", "", "return", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.reparameterize": [[161, 165], ["logvar.mul().exp_.mul().exp_.mul().exp_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "logvar.mul().exp_.mul().exp_.data.new().normal_", "logvar.mul().exp_.mul().exp_.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "logvar.mul().exp_.mul().exp_.data.new", "logvar.mul().exp_.mul().exp_.size"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "logvar", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "eps", "=", "Variable", "(", "logvar", ".", "data", ".", "new", "(", "logvar", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", ")", "\n", "return", "eps", ".", "mul", "(", "logvar", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.lstm.gaussian_lstm.forward": [[166, 176], ["lstm.gaussian_lstm.embed", "range", "lstm.gaussian_lstm.mu_net", "lstm.gaussian_lstm.logvar_net", "lstm.gaussian_lstm.reparameterize", "input.view"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_64.gaussian_encoder.reparameterize"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "embedded", "=", "self", ".", "embed", "(", "input", ".", "view", "(", "-", "1", ",", "self", ".", "input_size", ")", ")", "\n", "h_in", "=", "embedded", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "self", ".", "hidden", "[", "i", "]", "=", "self", ".", "lstm", "[", "i", "]", "(", "h_in", ",", "self", ".", "hidden", "[", "i", "]", ")", "\n", "h_in", "=", "self", ".", "hidden", "[", "i", "]", "[", "0", "]", "\n", "", "mu", "=", "self", ".", "mu_net", "(", "h_in", ")", "\n", "logvar", "=", "self", ".", "logvar_net", "(", "h_in", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "return", "z", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_64.vgg_layer.__init__": [[6, 12], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ")", ":", "\n", "        ", "super", "(", "vgg_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nin", ",", "nout", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nout", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_64.vgg_layer.forward": [[14, 16], ["vgg_64.vgg_layer.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_64.encoder.__init__": [[18, 50], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "# 64 x 64", "\n", "self", ".", "c1", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "nc", ",", "64", ")", ",", "\n", "vgg_layer", "(", "64", ",", "64", ")", ",", "\n", ")", "\n", "# 32 x 32", "\n", "self", ".", "c2", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "64", ",", "128", ")", ",", "\n", "vgg_layer", "(", "128", ",", "128", ")", ",", "\n", ")", "\n", "# 16 x 16 ", "\n", "self", ".", "c3", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "128", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", ")", "\n", "# 8 x 8", "\n", "self", ".", "c4", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "256", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", ")", "\n", "# 4 x 4", "\n", "self", ".", "c5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "dim", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "mp", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_64.encoder.forward": [[51, 58], ["vgg_64.encoder.c1", "vgg_64.encoder.c2", "vgg_64.encoder.c3", "vgg_64.encoder.c4", "vgg_64.encoder.c5", "vgg_64.encoder.mp", "vgg_64.encoder.mp", "vgg_64.encoder.mp", "vgg_64.encoder.mp", "vgg_64.encoder.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h1", "=", "self", ".", "c1", "(", "input", ")", "# 64 -> 32", "\n", "h2", "=", "self", ".", "c2", "(", "self", ".", "mp", "(", "h1", ")", ")", "# 32 -> 16", "\n", "h3", "=", "self", ".", "c3", "(", "self", ".", "mp", "(", "h2", ")", ")", "# 16 -> 8", "\n", "h4", "=", "self", ".", "c4", "(", "self", ".", "mp", "(", "h3", ")", ")", "# 8 -> 4", "\n", "h5", "=", "self", ".", "c5", "(", "self", ".", "mp", "(", "h4", ")", ")", "# 4 -> 1", "\n", "return", "h5", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ")", ",", "[", "h1", ",", "h2", ",", "h3", ",", "h4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_64.decoder.__init__": [[61, 94], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "# 1 x 1 -> 4 x 4", "\n", "self", ".", "upc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "dim", ",", "512", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "# 8 x 8", "\n", "self", ".", "upc2", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "512", "*", "2", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "256", ")", "\n", ")", "\n", "# 16 x 16", "\n", "self", ".", "upc3", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "256", "*", "2", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "128", ")", "\n", ")", "\n", "# 32 x 32", "\n", "self", ".", "upc4", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "128", "*", "2", ",", "128", ")", ",", "\n", "vgg_layer", "(", "128", ",", "64", ")", "\n", ")", "\n", "# 64 x 64", "\n", "self", ".", "upc5", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "64", "*", "2", ",", "64", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "nc", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "up", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_64.decoder.forward": [[95, 107], ["vgg_64.decoder.upc1", "vgg_64.decoder.up", "vgg_64.decoder.upc2", "vgg_64.decoder.up", "vgg_64.decoder.upc3", "vgg_64.decoder.up", "vgg_64.decoder.upc4", "vgg_64.decoder.up", "vgg_64.decoder.upc5", "vec.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "vec", ",", "skip", "=", "input", "\n", "d1", "=", "self", ".", "upc1", "(", "vec", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ",", "1", ",", "1", ")", ")", "# 1 -> 4", "\n", "up1", "=", "self", ".", "up", "(", "d1", ")", "# 4 -> 8", "\n", "d2", "=", "self", ".", "upc2", "(", "torch", ".", "cat", "(", "[", "up1", ",", "skip", "[", "3", "]", "]", ",", "1", ")", ")", "# 8 x 8", "\n", "up2", "=", "self", ".", "up", "(", "d2", ")", "# 8 -> 16 ", "\n", "d3", "=", "self", ".", "upc3", "(", "torch", ".", "cat", "(", "[", "up2", ",", "skip", "[", "2", "]", "]", ",", "1", ")", ")", "# 16 x 16 ", "\n", "up3", "=", "self", ".", "up", "(", "d3", ")", "# 8 -> 32 ", "\n", "d4", "=", "self", ".", "upc4", "(", "torch", ".", "cat", "(", "[", "up3", ",", "skip", "[", "1", "]", "]", ",", "1", ")", ")", "# 32 x 32", "\n", "up4", "=", "self", ".", "up", "(", "d4", ")", "# 32 -> 64", "\n", "output", "=", "self", ".", "upc5", "(", "torch", ".", "cat", "(", "[", "up4", ",", "skip", "[", "0", "]", "]", ",", "1", ")", ")", "# 64 x 64", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_64.gaussian_encoder.__init__": [[109, 144], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "vgg_64.vgg_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "output_size", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "gaussian_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "# 64 x 64", "\n", "self", ".", "c1", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "nc", ",", "64", ")", ",", "\n", "vgg_layer", "(", "64", ",", "64", ")", ",", "\n", ")", "\n", "# 32 x 32", "\n", "self", ".", "c2", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "64", ",", "128", ")", ",", "\n", "vgg_layer", "(", "128", ",", "128", ")", ",", "\n", ")", "\n", "# 16 x 16 ", "\n", "self", ".", "c3", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "128", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", ")", "\n", "# 8 x 8", "\n", "self", ".", "c4", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "256", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", ")", "\n", "# 4 x 4", "\n", "self", ".", "c5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "dim", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "mp", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "mu_net", "=", "nn", ".", "Linear", "(", "dim", ",", "output_size", ")", "\n", "self", ".", "logvar_net", "=", "nn", ".", "Linear", "(", "dim", ",", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_64.gaussian_encoder.reparameterize": [[145, 149], ["logvar.mul().exp_.mul().exp_.mul().exp_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "logvar.mul().exp_.mul().exp_.data.new().normal_", "logvar.mul().exp_.mul().exp_.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "logvar.mul().exp_.mul().exp_.data.new", "logvar.mul().exp_.mul().exp_.size"], "methods", ["None"], ["", "def", "reparameterize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "        ", "logvar", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "eps", "=", "Variable", "(", "logvar", ".", "data", ".", "new", "(", "logvar", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", ")", "\n", "return", "eps", ".", "mul", "(", "logvar", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_64.gaussian_encoder.forward": [[150, 160], ["vgg_64.gaussian_encoder.c1", "vgg_64.gaussian_encoder.c2", "vgg_64.gaussian_encoder.c3", "vgg_64.gaussian_encoder.c4", "vgg_64.gaussian_encoder.c5", "vgg_64.gaussian_encoder.mu_net", "vgg_64.gaussian_encoder.logvar_net", "vgg_64.gaussian_encoder.reparameterize", "vgg_64.gaussian_encoder.mp", "vgg_64.gaussian_encoder.mp", "vgg_64.gaussian_encoder.mp", "vgg_64.gaussian_encoder.mp", "vgg_64.gaussian_encoder.view", "vgg_64.gaussian_encoder.view"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_64.gaussian_encoder.reparameterize"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h1", "=", "self", ".", "c1", "(", "input", ")", "# 64 -> 32", "\n", "h2", "=", "self", ".", "c2", "(", "self", ".", "mp", "(", "h1", ")", ")", "# 32 -> 16", "\n", "h3", "=", "self", ".", "c3", "(", "self", ".", "mp", "(", "h2", ")", ")", "# 16 -> 8", "\n", "h4", "=", "self", ".", "c4", "(", "self", ".", "mp", "(", "h3", ")", ")", "# 8 -> 4", "\n", "h5", "=", "self", ".", "c5", "(", "self", ".", "mp", "(", "h4", ")", ")", "# 4 -> 1", "\n", "mu", "=", "self", ".", "mu_net", "(", "h5", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ")", ")", "\n", "logvar", "=", "self", ".", "logvar_net", "(", "h5", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ")", ")", "\n", "z", "=", "self", ".", "reparameterize", "(", "mu", ",", "logvar", ")", "\n", "return", "z", ",", "mu", ",", "logvar", ",", "[", "h1", ",", "h2", ",", "h3", ",", "h4", "]", "\n", "# return  h5.view(-1, self.dim),", ""]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_128.dcgan_conv.__init__": [[5, 11], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ")", ":", "\n", "        ", "super", "(", "dcgan_conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nin", ",", "nout", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nout", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_128.dcgan_conv.forward": [[13, 15], ["dcgan_128.dcgan_conv.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_128.dcgan_upconv.__init__": [[17, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ")", ":", "\n", "        ", "super", "(", "dcgan_upconv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "nin", ",", "nout", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nout", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_128.dcgan_upconv.forward": [[25, 27], ["dcgan_128.dcgan_upconv.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_128.encoder.__init__": [[29, 48], ["torch.Module.__init__", "dcgan_128.dcgan_conv", "dcgan_128.dcgan_conv", "dcgan_128.dcgan_conv", "dcgan_128.dcgan_conv", "dcgan_128.dcgan_conv", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "nf", "=", "64", "\n", "# input is (nc) x 128 x 128", "\n", "self", ".", "c1", "=", "dcgan_conv", "(", "nc", ",", "nf", ")", "\n", "# state size. (nf) x 64 x 64", "\n", "self", ".", "c2", "=", "dcgan_conv", "(", "nf", ",", "nf", "*", "2", ")", "\n", "# state size. (nf*2) x 32 x 32", "\n", "self", ".", "c3", "=", "dcgan_conv", "(", "nf", "*", "2", ",", "nf", "*", "4", ")", "\n", "# state size. (nf*4) x 16 x 16", "\n", "self", ".", "c4", "=", "dcgan_conv", "(", "nf", "*", "4", ",", "nf", "*", "8", ")", "\n", "# state size. (nf*8) x 8 x 8", "\n", "self", ".", "c5", "=", "dcgan_conv", "(", "nf", "*", "8", ",", "nf", "*", "8", ")", "\n", "# state size. (nf*8) x 4 x 4", "\n", "self", ".", "c6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nf", "*", "8", ",", "dim", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_128.encoder.forward": [[50, 58], ["dcgan_128.encoder.c1", "dcgan_128.encoder.c2", "dcgan_128.encoder.c3", "dcgan_128.encoder.c4", "dcgan_128.encoder.c5", "dcgan_128.encoder.c6", "dcgan_128.encoder.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h1", "=", "self", ".", "c1", "(", "input", ")", "\n", "h2", "=", "self", ".", "c2", "(", "h1", ")", "\n", "h3", "=", "self", ".", "c3", "(", "h2", ")", "\n", "h4", "=", "self", ".", "c4", "(", "h3", ")", "\n", "h5", "=", "self", ".", "c5", "(", "h4", ")", "\n", "h6", "=", "self", ".", "c6", "(", "h5", ")", "\n", "return", "h6", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ")", ",", "[", "h1", ",", "h2", ",", "h3", ",", "h4", ",", "h5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_128.decoder.__init__": [[61, 83], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "dcgan_128.dcgan_upconv", "dcgan_128.dcgan_upconv", "dcgan_128.dcgan_upconv", "dcgan_128.dcgan_upconv", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "nf", "=", "64", "\n", "self", ".", "upc1", "=", "nn", ".", "Sequential", "(", "\n", "# input is Z, going into a convolution", "\n", "nn", ".", "ConvTranspose2d", "(", "dim", ",", "nf", "*", "8", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "# state size. (nf*8) x 4 x 4", "\n", "self", ".", "upc2", "=", "dcgan_upconv", "(", "nf", "*", "8", "*", "2", ",", "nf", "*", "8", ")", "\n", "# state size. (nf*8) x 8 x 8", "\n", "self", ".", "upc3", "=", "dcgan_upconv", "(", "nf", "*", "8", "*", "2", ",", "nf", "*", "4", ")", "\n", "# state size. (nf*4) x 16 x 16", "\n", "self", ".", "upc4", "=", "dcgan_upconv", "(", "nf", "*", "4", "*", "2", ",", "nf", "*", "2", ")", "\n", "# state size. (nf*2) x 32 x 32", "\n", "self", ".", "upc5", "=", "dcgan_upconv", "(", "nf", "*", "2", "*", "2", ",", "nf", ")", "\n", "# state size. (nf) x 64 x 64", "\n", "self", ".", "upc6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "nf", "*", "2", ",", "nc", ",", "4", ",", "2", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", "# state size. (nc) x 128 x 128", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.dcgan_128.decoder.forward": [[86, 95], ["dcgan_128.decoder.upc1", "dcgan_128.decoder.upc2", "dcgan_128.decoder.upc3", "dcgan_128.decoder.upc4", "dcgan_128.decoder.upc5", "dcgan_128.decoder.upc6", "vec.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "vec", ",", "skip", "=", "input", "\n", "d1", "=", "self", ".", "upc1", "(", "vec", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ",", "1", ",", "1", ")", ")", "\n", "d2", "=", "self", ".", "upc2", "(", "torch", ".", "cat", "(", "[", "d1", ",", "skip", "[", "4", "]", "]", ",", "1", ")", ")", "\n", "d3", "=", "self", ".", "upc3", "(", "torch", ".", "cat", "(", "[", "d2", ",", "skip", "[", "3", "]", "]", ",", "1", ")", ")", "\n", "d4", "=", "self", ".", "upc4", "(", "torch", ".", "cat", "(", "[", "d3", ",", "skip", "[", "2", "]", "]", ",", "1", ")", ")", "\n", "d5", "=", "self", ".", "upc5", "(", "torch", ".", "cat", "(", "[", "d4", ",", "skip", "[", "1", "]", "]", ",", "1", ")", ")", "\n", "output", "=", "self", ".", "upc6", "(", "torch", ".", "cat", "(", "[", "d5", ",", "skip", "[", "0", "]", "]", ",", "1", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.linear_layer.MLP.__init__": [[10, 15], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "90", ",", "50", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "50", ",", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.linear_layer.MLP.forward": [[23, 28], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "linear_layer.MLP.fc2", "linear_layer.MLP.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "# h1 = F.dropout(h1, training=self.training)", "\n", "h2", "=", "self", ".", "fc2", "(", "h1", ")", "\n", "return", "h2", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.linear_layer.MLP2.__init__": [[31, 36], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MLP2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "10", ",", "6", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "6", ",", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.linear_layer.MLP2.forward": [[44, 49], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "linear_layer.MLP2.fc2", "linear_layer.MLP2.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "# h1 = F.dropout(h1, training=self.training)", "\n", "h2", "=", "self", ".", "fc2", "(", "h1", ")", "\n", "return", "h2", "", "", "", ""]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_128.vgg_layer.__init__": [[5, 11], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nin", ",", "nout", ")", ":", "\n", "        ", "super", "(", "vgg_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "nin", ",", "nout", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nout", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_128.vgg_layer.forward": [[13, 15], ["vgg_128.vgg_layer.main"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_128.encoder.__init__": [[17, 55], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.MaxPool2d", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "# 128 x 128", "\n", "self", ".", "c1", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "nc", ",", "64", ")", ",", "\n", "vgg_layer", "(", "64", ",", "64", ")", ",", "\n", ")", "\n", "# 64 x 64", "\n", "self", ".", "c2", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "64", ",", "128", ")", ",", "\n", "vgg_layer", "(", "128", ",", "128", ")", ",", "\n", ")", "\n", "# 32 x 32 ", "\n", "self", ".", "c3", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "128", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", ")", "\n", "# 16 x 16", "\n", "self", ".", "c4", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "256", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", ")", "\n", "# 8 x 8", "\n", "self", ".", "c5", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", ")", "\n", "# 4 x 4", "\n", "self", ".", "c6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "dim", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "dim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n", "self", ".", "mp", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_128.encoder.forward": [[56, 64], ["vgg_128.encoder.c1", "vgg_128.encoder.c2", "vgg_128.encoder.c3", "vgg_128.encoder.c4", "vgg_128.encoder.c5", "vgg_128.encoder.c6", "vgg_128.encoder.mp", "vgg_128.encoder.mp", "vgg_128.encoder.mp", "vgg_128.encoder.mp", "vgg_128.encoder.mp", "vgg_128.encoder.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "h1", "=", "self", ".", "c1", "(", "input", ")", "# 128 -> 64", "\n", "h2", "=", "self", ".", "c2", "(", "self", ".", "mp", "(", "h1", ")", ")", "# 64 -> 32", "\n", "h3", "=", "self", ".", "c3", "(", "self", ".", "mp", "(", "h2", ")", ")", "# 32 -> 16", "\n", "h4", "=", "self", ".", "c4", "(", "self", ".", "mp", "(", "h3", ")", ")", "# 16 -> 8", "\n", "h5", "=", "self", ".", "c5", "(", "self", ".", "mp", "(", "h4", ")", ")", "# 8 -> 4", "\n", "h6", "=", "self", ".", "c6", "(", "self", ".", "mp", "(", "h5", ")", ")", "# 4 -> 1", "\n", "return", "h6", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ")", ",", "[", "h1", ",", "h2", ",", "h3", ",", "h4", ",", "h5", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_128.decoder.__init__": [[67, 106], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.UpsamplingNearest2d", "torch.UpsamplingNearest2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "vgg_128.vgg_layer", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "nc", "=", "1", ")", ":", "\n", "        ", "super", "(", "decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "# 1 x 1 -> 4 x 4", "\n", "self", ".", "upc1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "dim", ",", "512", ",", "4", ",", "1", ",", "0", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "# 8 x 8", "\n", "self", ".", "upc2", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "512", "*", "2", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", "\n", ")", "\n", "# 16 x 16", "\n", "self", ".", "upc3", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "512", "*", "2", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "512", ")", ",", "\n", "vgg_layer", "(", "512", ",", "256", ")", "\n", ")", "\n", "# 32 x 32", "\n", "self", ".", "upc4", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "256", "*", "2", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "256", ")", ",", "\n", "vgg_layer", "(", "256", ",", "128", ")", "\n", ")", "\n", "# 64 x 64", "\n", "self", ".", "upc5", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "128", "*", "2", ",", "128", ")", ",", "\n", "vgg_layer", "(", "128", ",", "64", ")", "\n", ")", "\n", "# 128 x 128", "\n", "self", ".", "upc6", "=", "nn", ".", "Sequential", "(", "\n", "vgg_layer", "(", "64", "*", "2", ",", "64", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "nc", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "up", "=", "nn", ".", "UpsamplingNearest2d", "(", "scale_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.models.vgg_128.decoder.forward": [[107, 121], ["vgg_128.decoder.upc1", "vgg_128.decoder.up", "vgg_128.decoder.upc2", "vgg_128.decoder.up", "vgg_128.decoder.upc3", "vgg_128.decoder.up", "vgg_128.decoder.upc4", "vgg_128.decoder.up", "vgg_128.decoder.upc5", "vgg_128.decoder.up", "vgg_128.decoder.upc6", "vec.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "vec", ",", "skip", "=", "input", "\n", "d1", "=", "self", ".", "upc1", "(", "vec", ".", "view", "(", "-", "1", ",", "self", ".", "dim", ",", "1", ",", "1", ")", ")", "# 1 -> 4", "\n", "up1", "=", "self", ".", "up", "(", "d1", ")", "# 4 -> 8", "\n", "d2", "=", "self", ".", "upc2", "(", "torch", ".", "cat", "(", "[", "up1", ",", "skip", "[", "4", "]", "]", ",", "1", ")", ")", "# 8 x 8", "\n", "up2", "=", "self", ".", "up", "(", "d2", ")", "# 8 -> 16 ", "\n", "d3", "=", "self", ".", "upc3", "(", "torch", ".", "cat", "(", "[", "up2", ",", "skip", "[", "3", "]", "]", ",", "1", ")", ")", "# 16 x 16", "\n", "up3", "=", "self", ".", "up", "(", "d3", ")", "# 16 -> 32 ", "\n", "d4", "=", "self", ".", "upc4", "(", "torch", ".", "cat", "(", "[", "up3", ",", "skip", "[", "2", "]", "]", ",", "1", ")", ")", "# 32 x 32", "\n", "up4", "=", "self", ".", "up", "(", "d4", ")", "# 32 -> 64", "\n", "d5", "=", "self", ".", "upc5", "(", "torch", ".", "cat", "(", "[", "up4", ",", "skip", "[", "1", "]", "]", ",", "1", ")", ")", "# 64 x 64", "\n", "up5", "=", "self", ".", "up", "(", "d5", ")", "# 64 -> 128", "\n", "output", "=", "self", ".", "upc6", "(", "torch", ".", "cat", "(", "[", "up5", ",", "skip", "[", "0", "]", "]", ",", "1", ")", ")", "# 128 x 128", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.kth.KTH.__init__": [[12, 36], ["os.listdir", "list", "list", "open", "print", "json.load", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", ",", "data_root", ",", "seq_len", "=", "20", ",", "image_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "data_root", "=", "'%s/processed/'", "%", "data_root", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "classes", "=", "[", "'boxing'", ",", "'handclapping'", ",", "'handwaving'", ",", "'jogging'", ",", "'running'", ",", "'walking'", "]", "\n", "self", ".", "target", "=", "{", "'boxing'", ":", "0", ",", "'handclapping'", ":", "1", ",", "'handwaving'", ":", "2", ",", "'jogging'", ":", "3", ",", "'running'", ":", "4", ",", "'walking'", ":", "5", "}", "\n", "self", ".", "dirs", "=", "os", ".", "listdir", "(", "self", ".", "data_root", ")", "\n", "if", "train", ":", "\n", "            ", "self", ".", "train", "=", "True", "\n", "data_type", "=", "'train'", "\n", "self", ".", "persons", "=", "list", "(", "range", "(", "1", ",", "21", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train", "=", "False", "\n", "self", ".", "persons", "=", "list", "(", "range", "(", "21", ",", "26", ")", ")", "\n", "data_type", "=", "'test'", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "for", "c", "in", "self", ".", "classes", ":", "\n", "            ", "f", "=", "open", "(", "'%s/%s/%s_meta%dx%d.json'", "%", "(", "self", ".", "data_root", ",", "c", ",", "data_type", ",", "image_size", ",", "image_size", ")", ")", "\n", "print", "(", "f", ")", "\n", "self", ".", "data", "[", "c", "]", "=", "json", ".", "load", "(", "f", ")", "# self.data[c] = load_lua('%s/%s/%s_meta%dx%d.t7' % (self.data_root, c, data_type, image_size, image_size))", "\n", "\n", "\n", "", "self", ".", "seed_set", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.kth.KTH.get_sequence": [[37, 57], ["random.randint", "range", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "seq.append", "numpy.array", "len", "len", "len", "len", "scipy.misc.imread", "im[].reshape", "len"], "methods", ["None"], ["", "def", "get_sequence", "(", "self", ")", ":", "\n", "        ", "t", "=", "self", ".", "seq_len", "\n", "while", "True", ":", "# skip seqeunces that are too short", "\n", "            ", "c_idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "classes", ")", ")", "\n", "c", "=", "self", ".", "classes", "[", "c_idx", "]", "\n", "vid_idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "data", "[", "c", "]", ")", ")", "\n", "vid", "=", "self", ".", "data", "[", "c", "]", "[", "vid_idx", "]", "\n", "seq_idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "vid", "[", "'files'", "]", ")", ")", "\n", "if", "len", "(", "vid", "[", "'files'", "]", "[", "seq_idx", "]", ")", "-", "t", ">=", "0", ":", "\n", "                ", "break", "\n", "", "", "dname", "=", "'%s/%s/%s'", "%", "(", "self", ".", "data_root", ",", "c", ",", "vid", "[", "'vid'", "]", ")", "\n", "st", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "vid", "[", "'files'", "]", "[", "seq_idx", "]", ")", "-", "t", ")", "\n", "\n", "\n", "seq", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "st", ",", "st", "+", "t", ")", ":", "\n", "            ", "fname", "=", "'%s/%s'", "%", "(", "dname", ",", "vid", "[", "'files'", "]", "[", "seq_idx", "]", "[", "i", "]", ")", "\n", "im", "=", "misc", ".", "imread", "(", "fname", ")", "/", "255.", "\n", "seq", ".", "append", "(", "im", "[", ":", ",", ":", ",", "0", "]", ".", "reshape", "(", "self", ".", "image_size", ",", "self", ".", "image_size", ",", "1", ")", ")", "\n", "", "return", "np", ".", "array", "(", "seq", ")", ",", "self", ".", "target", "[", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.kth.KTH.__getitem__": [[58, 66], ["kth.KTH.get_sequence", "random.seed", "numpy.random.seed", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.ucf.UCF.get_sequence"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "not", "self", ".", "seed_set", ":", "\n", "            ", "self", ".", "seed_set", "=", "True", "\n", "random", ".", "seed", "(", "index", ")", "\n", "np", ".", "random", ".", "seed", "(", "index", ")", "\n", "#torch.manual_seed(index)", "\n", "", "x", ",", "y", "=", "self", ".", "get_sequence", "(", ")", "\n", "return", "torch", ".", "from_numpy", "(", "x", ")", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.kth.KTH.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dirs", ")", "*", "36", "*", "5", "# arbitrary", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.moving_mnist.MovingMNIST.__init__": [[9, 29], ["torchvision.datasets.MNIST", "len", "torchvision.transforms.Compose", "torchvision.transforms.Scale", "torchvision.transforms.ToTensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "train", ",", "data_root", ",", "seq_len", "=", "20", ",", "num_digits", "=", "2", ",", "image_size", "=", "64", ",", "deterministic", "=", "True", ")", ":", "\n", "        ", "path", "=", "data_root", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "num_digits", "=", "num_digits", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "step_length", "=", "0.1", "\n", "self", ".", "digit_size", "=", "32", "\n", "self", ".", "deterministic", "=", "deterministic", "\n", "self", ".", "seed_is_set", "=", "False", "# multi threaded loading", "\n", "self", ".", "channels", "=", "1", "\n", "\n", "self", ".", "data", "=", "datasets", ".", "MNIST", "(", "\n", "path", ",", "\n", "train", "=", "train", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "transforms", ".", "Scale", "(", "self", ".", "digit_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", ")", "\n", "\n", "self", ".", "N", "=", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.moving_mnist.MovingMNIST.set_seed": [[30, 34], ["numpy.random.seed"], "methods", ["None"], ["", "def", "set_seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "if", "not", "self", ".", "seed_is_set", ":", "\n", "            ", "self", ".", "seed_is_set", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.moving_mnist.MovingMNIST.__len__": [[35, 37], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "N", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.moving_mnist.MovingMNIST.__getitem__": [[38, 92], ["moving_mnist.MovingMNIST.set_seed", "numpy.zeros", "range", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "range", "digit.numpy().squeeze", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "digit.numpy", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.set_seed"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "set_seed", "(", "index", ")", "\n", "image_size", "=", "self", ".", "image_size", "\n", "digit_size", "=", "self", ".", "digit_size", "\n", "x", "=", "np", ".", "zeros", "(", "(", "self", ".", "seq_len", ",", "\n", "image_size", ",", "\n", "image_size", ",", "\n", "self", ".", "channels", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "n", "in", "range", "(", "self", ".", "num_digits", ")", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "N", ")", "\n", "digit", ",", "_", "=", "self", ".", "data", "[", "idx", "]", "\n", "\n", "sx", "=", "np", ".", "random", ".", "randint", "(", "image_size", "-", "digit_size", ")", "\n", "sy", "=", "np", ".", "random", ".", "randint", "(", "image_size", "-", "digit_size", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "for", "t", "in", "range", "(", "self", ".", "seq_len", ")", ":", "\n", "                ", "if", "sy", "<", "0", ":", "\n", "                    ", "sy", "=", "0", "\n", "if", "self", ".", "deterministic", ":", "\n", "                        ", "dy", "=", "-", "dy", "\n", "", "else", ":", "\n", "                        ", "dy", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "5", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "", "", "elif", "sy", ">=", "image_size", "-", "32", ":", "\n", "                    ", "sy", "=", "image_size", "-", "32", "-", "1", "\n", "if", "self", ".", "deterministic", ":", "\n", "                        ", "dy", "=", "-", "dy", "\n", "", "else", ":", "\n", "                        ", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "0", ")", "\n", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "\n", "", "", "if", "sx", "<", "0", ":", "\n", "                    ", "sx", "=", "0", "\n", "if", "self", ".", "deterministic", ":", "\n", "                        ", "dx", "=", "-", "dx", "\n", "", "else", ":", "\n", "                        ", "dx", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "5", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "", "", "elif", "sx", ">=", "image_size", "-", "32", ":", "\n", "                    ", "sx", "=", "image_size", "-", "32", "-", "1", "\n", "if", "self", ".", "deterministic", ":", "\n", "                        ", "dx", "=", "-", "dx", "\n", "", "else", ":", "\n", "                        ", "dx", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "0", ")", "\n", "dy", "=", "np", ".", "random", ".", "randint", "(", "-", "4", ",", "5", ")", "\n", "\n", "", "", "x", "[", "t", ",", "sy", ":", "sy", "+", "32", ",", "sx", ":", "sx", "+", "32", ",", "0", "]", "+=", "digit", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "sy", "+=", "dy", "\n", "sx", "+=", "dx", "\n", "\n", "", "", "x", "[", "x", ">", "1", "]", "=", "1.", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.ucf.UCF.__init__": [[12, 37], ["os.listdir", "list", "list", "torch.load", "torch.load", "torch.load", "torch.load", "range", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train", ",", "data_root", ",", "seq_len", "=", "20", ",", "image_size", "=", "64", ")", ":", "\n", "        ", "train", "=", "True", "\n", "self", ".", "data_root", "=", "'%s/processed/'", "%", "data_root", "\n", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "classes", "=", "[", "'BenchPress'", ",", "'BodyWeightSquats'", ",", "'CleanAndJerk'", ",", "'PullUps'", ",", "'PushUps'", ",", "'Shotput'", ",", "'TennisSwing'", ",", "'Lunges'", ",", "'Fencing'", "]", "#['boxing', 'handclapping', 'handwaving', 'jogging', 'running', 'walking']", "\n", "self", ".", "target", "=", "{", "'BenchPress'", ":", "0", ",", "'BodyWeightSquats'", ":", "1", ",", "'CleanAndJerk'", ":", "2", ",", "'PullUps'", ":", "3", ",", "'PushUps'", ":", "4", ",", "'Shotput'", ":", "5", ",", "'TennisSwing'", ":", "6", ",", "'Lunges'", ":", "7", ",", "'Fencing'", ":", "8", "}", "\n", "self", ".", "dirs", "=", "os", ".", "listdir", "(", "self", ".", "data_root", ")", "\n", "if", "train", ":", "\n", "            ", "self", ".", "train", "=", "True", "\n", "data_type", "=", "'train'", "\n", "self", ".", "persons", "=", "list", "(", "range", "(", "1", ",", "21", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train", "=", "False", "\n", "self", ".", "persons", "=", "list", "(", "range", "(", "21", ",", "26", ")", ")", "\n", "data_type", "=", "'test'", "\n", "\n", "", "self", ".", "data", "=", "{", "}", "\n", "for", "c", "in", "self", ".", "classes", ":", "\n", "            ", "self", ".", "data", "[", "c", "]", "=", "torch", ".", "load", "(", "'%s/%s/%s_meta%dx%d.pt'", "%", "(", "self", ".", "data_root", ",", "c", ",", "data_type", ",", "image_size", ",", "image_size", ")", ")", "\n", "# print(f)", "\n", "# = json.load(f) # self.data[c] = load_lua('%s/%s/%s_meta%dx%d.t7' % (self.data_root, c, data_type, image_size, image_size))", "\n", "\n", "\n", "", "self", ".", "seed_set", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.ucf.UCF.get_sequence": [[38, 62], ["random.randint", "range", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "seq.append", "numpy.array", "len", "len", "len", "len", "scipy.misc.imread", "len"], "methods", ["None"], ["", "def", "get_sequence", "(", "self", ")", ":", "\n", "        ", "t", "=", "self", ".", "seq_len", "\n", "while", "True", ":", "# skip seqeunces that are too short", "\n", "            ", "c_idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "classes", ")", ")", "\n", "c", "=", "self", ".", "classes", "[", "c_idx", "]", "\n", "# r_idx = np.random.randint(4)", "\n", "# c_idx = lists[r_idx]", "\n", "# c = self.classes[8]", "\n", "vid_idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "data", "[", "c", "]", ")", ")", "\n", "vid", "=", "self", ".", "data", "[", "c", "]", "[", "vid_idx", "]", "\n", "seq_idx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "vid", "[", "'files'", "]", ")", ")", "\n", "if", "len", "(", "vid", "[", "'files'", "]", "[", "seq_idx", "]", ")", "-", "t", ">=", "0", ":", "\n", "                ", "break", "\n", "", "", "dname", "=", "'%s/%s/%s'", "%", "(", "self", ".", "data_root", ",", "c", ",", "vid", "[", "'vid'", "]", ")", "\n", "st", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "vid", "[", "'files'", "]", "[", "seq_idx", "]", ")", "-", "t", ")", "\n", "\n", "\n", "seq", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "st", ",", "st", "+", "t", ")", ":", "\n", "            ", "fname", "=", "'%s/%s'", "%", "(", "dname", ",", "vid", "[", "'files'", "]", "[", "seq_idx", "]", "[", "i", "]", ")", "\n", "im", "=", "misc", ".", "imread", "(", "fname", ")", "/", "255.", "\n", "# pdb.set_trace()", "\n", "seq", ".", "append", "(", "im", ")", "#[:, :, 0].reshape(self.image_size, self.image_size, 3))", "\n", "", "return", "np", ".", "array", "(", "seq", ")", ",", "self", ".", "target", "[", "c", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.ucf.UCF.__getitem__": [[63, 71], ["ucf.UCF.get_sequence", "random.seed", "numpy.random.seed", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.ucf.UCF.get_sequence"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "not", "self", ".", "seed_set", ":", "\n", "            ", "self", ".", "seed_set", "=", "True", "\n", "random", ".", "seed", "(", "index", ")", "\n", "np", ".", "random", ".", "seed", "(", "index", ")", "\n", "#torch.manual_seed(index)", "\n", "", "x", ",", "y", "=", "self", ".", "get_sequence", "(", ")", "\n", "return", "torch", ".", "from_numpy", "(", "x", ")", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.ucf.UCF.__len__": [[72, 74], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dirs", ")", "*", "36", "*", "5", "# arbitrary", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__init__": [[14, 33], ["os.listdir", "os.listdir", "bair.RobotPush.dirs.append"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_root", ",", "train", "=", "True", ",", "seq_len", "=", "20", ",", "image_size", "=", "64", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "data_root", "\n", "if", "train", ":", "\n", "            ", "self", ".", "data_dir", "=", "'%s/processed_data/train'", "%", "self", ".", "root_dir", "\n", "self", ".", "ordered", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_dir", "=", "'%s/processed_data/test'", "%", "self", ".", "root_dir", "\n", "self", ".", "ordered", "=", "True", "\n", "", "self", ".", "dirs", "=", "[", "]", "\n", "i", "=", "0", "\n", "for", "d1", "in", "os", ".", "listdir", "(", "self", ".", "data_dir", ")", ":", "\n", "            ", "for", "d2", "in", "os", ".", "listdir", "(", "'%s/%s'", "%", "(", "self", ".", "data_dir", ",", "d1", ")", ")", ":", "\n", "                ", "self", ".", "dirs", ".", "append", "(", "'%s/%s/%s'", "%", "(", "self", ".", "data_dir", ",", "d1", ",", "d2", ")", ")", "\n", "", "if", "i", "==", "50", ":", "\n", "                ", "break", "\n", "", "", "self", ".", "seq_len", "=", "seq_len", "\n", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "seed_is_set", "=", "False", "# multi threaded loading", "\n", "self", ".", "d", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.set_seed": [[34, 38], ["numpy.random.seed"], "methods", ["None"], ["", "def", "set_seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "if", "not", "self", ".", "seed_is_set", ":", "\n", "            ", "self", ".", "seed_is_set", "=", "True", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__len__": [[39, 41], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "10000", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.get_seq": [[42, 58], ["range", "numpy.concatenate", "scipy.misc.imread().reshape", "numpy.concatenate.append", "len", "numpy.random.randint", "scipy.misc.imread", "len"], "methods", ["None"], ["", "def", "get_seq", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ordered", ":", "\n", "            ", "d", "=", "self", ".", "dirs", "[", "self", ".", "d", "]", "\n", "if", "self", ".", "d", "==", "len", "(", "self", ".", "dirs", ")", "-", "1", ":", "\n", "                ", "self", ".", "d", "=", "0", "\n", "", "else", ":", "\n", "                ", "self", ".", "d", "+=", "1", "\n", "", "", "else", ":", "\n", "            ", "d", "=", "self", ".", "dirs", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "dirs", ")", ")", "]", "\n", "", "image_seq", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "seq_len", ")", ":", "\n", "            ", "fname", "=", "'%s/%d.png'", "%", "(", "d", ",", "i", ")", "\n", "im", "=", "imread", "(", "fname", ")", ".", "reshape", "(", "1", ",", "64", ",", "64", ",", "3", ")", "\n", "image_seq", ".", "append", "(", "im", "/", "255.", ")", "\n", "", "image_seq", "=", "np", ".", "concatenate", "(", "image_seq", ",", "axis", "=", "0", ")", "\n", "return", "image_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.__getitem__": [[60, 63], ["bair.RobotPush.set_seed", "bair.RobotPush.get_seq"], "methods", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.bair.RobotPush.set_seed", "home.repos.pwc.inspect_result.shgaurav1_DVG.data.convert_bair.get_seq"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "self", ".", "set_seed", "(", "index", ")", "\n", "return", "self", ".", "get_seq", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.convert_bair.get_seq": [[20, 47], ["tensorflow.python.platform.gfile.Glob", "os.path.join", "RuntimeError", "tensorflow.python_io.tf_record_iterator", "range", "numpy.concatenate", "tensorflow.train.Example", "tf.train.Example.ParseFromString", "range", "PIL.Image.frombytes", "numpy.array().reshape", "np.concatenate.append", "str", "numpy.array", "np.array().reshape.reshape", "Image.frombytes.getdata"], "function", ["None"], ["def", "get_seq", "(", "dname", ")", ":", "\n", "    ", "data_dir", "=", "'%s/softmotion30_44k/%s'", "%", "(", "opt", ".", "data_dir", ",", "dname", ")", "\n", "\n", "filenames", "=", "gfile", ".", "Glob", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'*'", ")", ")", "\n", "if", "not", "filenames", ":", "\n", "        ", "raise", "RuntimeError", "(", "'No data files found.'", ")", "\n", "\n", "", "for", "f", "in", "filenames", ":", "\n", "        ", "k", "=", "0", "\n", "\n", "\n", "for", "serialized_example", "in", "tf", ".", "python_io", ".", "tf_record_iterator", "(", "f", ")", ":", "\n", "            ", "image_seq", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "4", ")", ":", "\n", "                ", "example", "=", "tf", ".", "train", ".", "Example", "(", ")", "\n", "example", ".", "ParseFromString", "(", "serialized_example", ")", "\n", "# image_seq = []", "\n", "for", "i", "in", "range", "(", "30", ")", ":", "\n", "                    ", "image_name", "=", "str", "(", "i", ")", "+", "'/image_aux1/encoded'", "\n", "byte_str", "=", "example", ".", "features", ".", "feature", "[", "image_name", "]", ".", "bytes_list", ".", "value", "[", "0", "]", "\n", "#img = Image.open(io.BytesIO(byte_str))", "\n", "img", "=", "Image", ".", "frombytes", "(", "'RGB'", ",", "(", "64", ",", "64", ")", ",", "byte_str", ")", "\n", "arr", "=", "np", ".", "array", "(", "img", ".", "getdata", "(", ")", ")", ".", "reshape", "(", "img", ".", "size", "[", "1", "]", ",", "img", ".", "size", "[", "0", "]", ",", "3", ")", "\n", "image_seq", ".", "append", "(", "arr", ".", "reshape", "(", "1", ",", "64", ",", "64", ",", "3", ")", "/", "255.", ")", "\n", "", "", "image_seq", "=", "np", ".", "concatenate", "(", "image_seq", ",", "axis", "=", "0", ")", "\n", "k", "=", "k", "+", "1", "\n", "yield", "f", ",", "k", ",", "image_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.shgaurav1_DVG.data.convert_bair.convert_data": [[48, 64], ["convert_bair.get_seq", "os.makedirs", "range", "print", "next", "f.split", "len", "scipy.misc.imsave"], "function", ["home.repos.pwc.inspect_result.shgaurav1_DVG.data.convert_bair.get_seq"], ["", "", "", "def", "convert_data", "(", "dname", ")", ":", "\n", "    ", "seq_generator", "=", "get_seq", "(", "dname", ")", "\n", "n", "=", "0", "\n", "while", "True", ":", "\n", "        ", "n", "+=", "1", "\n", "try", ":", "\n", "            ", "f", ",", "k", ",", "seq", "=", "next", "(", "seq_generator", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "break", "\n", "", "f", "=", "f", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "os", ".", "makedirs", "(", "'%s/processed_data/%s/%s/%d/'", "%", "(", "opt", ".", "data_dir", ",", "dname", ",", "f", "[", ":", "-", "10", "]", ",", "k", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "seq", ")", ")", ":", "\n", "            ", "imsave", "(", "'%s/processed_data/%s/%s/%d/%d.png'", "%", "(", "opt", ".", "data_dir", ",", "dname", ",", "f", "[", ":", "-", "10", "]", ",", "k", ",", "i", ")", ",", "seq", "[", "i", "]", ")", "\n", "# pdb.set_trace()", "\n", "", "print", "(", "'%s data: %s (%d)  (%d)'", "%", "(", "dname", ",", "f", ",", "k", ",", "n", ")", ")", "\n", "\n"]]}