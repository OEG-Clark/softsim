{"home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.prob_2_entropy": [[86, 91], ["prob.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.log2", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.log2", "torch.log2", "torch.log2", "torch.log2", "torch.log2"], "function", ["None"], ["def", "prob_2_entropy", "(", "prob", ")", ":", "\n", "    ", "\"\"\" convert probabilistic prediction maps to weighted self-information maps\n    \"\"\"", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "prob", ".", "size", "(", ")", "\n", "return", "torch", ".", "sum", "(", "-", "torch", ".", "mul", "(", "prob", ",", "torch", ".", "log2", "(", "prob", "+", "1e-30", ")", ")", ")", "/", "(", "n", "*", "c", "*", "h", "*", "w", "*", "np", ".", "log2", "(", "c", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.get_arguments": [[94, 166], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"available options : ResNet\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--source\"", ",", "type", "=", "str", ",", "default", "=", "SOURCE", ",", "\n", "help", "=", "\"available options : GTA5, SYNTHIA\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target\"", ",", "type", "=", "str", ",", "default", "=", "TARGET", ",", "\n", "help", "=", "\"available options : cityscapes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "BATCH_SIZE", ",", "\n", "help", "=", "\"Number of images sent to the network in one step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--iter-size\"", ",", "type", "=", "int", ",", "default", "=", "ITER_SIZE", ",", "\n", "help", "=", "\"Accumulate gradients for ITER_SIZE iterations.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "type", "=", "int", ",", "default", "=", "NUM_WORKERS", ",", "\n", "help", "=", "\"number of workers for multithread dataloading.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size-source\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE_SOURCE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of source images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY_TARGET", ",", "\n", "help", "=", "\"Path to the directory containing the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH_TARGET", ",", "\n", "help", "=", "\"Path to the file listing the images in the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size-target\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE_TARGET", ",", "\n", "help", "=", "\"Comma-separated string with height and width of target images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--is-training\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to updates the running means and variances during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE", ",", "\n", "help", "=", "\"Base learning rate for training with polynomial decay.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate-D\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE_D", ",", "\n", "help", "=", "\"Base learning rate for discriminator.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "MOMENTUM", ",", "\n", "help", "=", "\"Momentum component of the optimiser.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--not-restore-last\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to not restore last (FC) layers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS", ",", "\n", "help", "=", "\"Number of training steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps-stop\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS_STOP", ",", "\n", "help", "=", "\"Number of training steps for early stopping.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--power\"", ",", "type", "=", "float", ",", "default", "=", "POWER", ",", "\n", "help", "=", "\"Decay parameter to compute the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-mirror\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly mirror the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-scale\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly scale the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-seed\"", ",", "type", "=", "int", ",", "default", "=", "RANDOM_SEED", ",", "\n", "help", "=", "\"Random seed to have reproducible results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-num-images\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_NUM_IMAGES", ",", "\n", "help", "=", "\"How many images to save.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-pred-every\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_PRED_EVERY", ",", "\n", "help", "=", "\"Save summaries and checkpoint every often.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--snapshot-dir\"", ",", "type", "=", "str", ",", "default", "=", "SNAPSHOT_DIR", ",", "\n", "help", "=", "\"Where to save snapshots of the model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight-decay\"", ",", "type", "=", "float", ",", "default", "=", "WEIGHT_DECAY", ",", "\n", "help", "=", "\"Regularisation parameter for L2-loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose adaptation set.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.optimize_beta": [[171, 186], ["bottleneck_loss.detach.detach", "max"], "function", ["None"], ["def", "optimize_beta", "(", "beta", ",", "bottleneck_loss", ")", ":", "\n", "        ", "\"\"\"\n        perform a step for updating the adaptive beta\n        :param beta: old value of beta\n        :param bottleneck_loss: current value of bottleneck loss\n        :return: beta_new => updated value of beta\n        \"\"\"", "\n", "# please refer to the section 4 of the vdb_paper in literature", "\n", "# for more information about this.", "\n", "# this performs gradient ascent over the beta parameter", "\n", "bottleneck_loss", "=", "bottleneck_loss", ".", "detach", "(", ")", "\n", "beta_new", "=", "max", "(", "0", ",", "beta", "+", "(", "1e-6", "*", "bottleneck_loss", ")", ")", "#alpha:1e-6", "\n", "\n", "# return the updated beta value:", "\n", "return", "beta_new", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.bottleneck_loss": [[188, 206], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "def", "bottleneck_loss", "(", "mus", ",", "sigmas", ",", "i_c", ",", "alpha", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"\n        calculate the bottleneck loss for the given mus and sigmas\n        :param mus: means of the gaussian distributions\n        :param sigmas: stds of the gaussian distributions\n        :param i_c: value of bottleneck\n        :param alpha: small value for numerical stability\n        :return: loss_value: scalar tensor\n        \"\"\"", "\n", "# add a small value to sigmas to avoid inf log", "\n", "kl_divergence", "=", "(", "0.5", "*", "torch", ".", "sum", "(", "(", "mus", "**", "2", ")", "+", "(", "sigmas", "**", "2", ")", "\n", "-", "torch", ".", "log", "(", "(", "sigmas", "**", "2", ")", "+", "alpha", ")", "-", "1", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# calculate the bottleneck loss:", "\n", "bottleneck_loss", "=", "(", "torch", ".", "mean", "(", "kl_divergence", ")", "-", "i_c", ")", "\n", "\n", "# return the bottleneck_loss:", "\n", "return", "bottleneck_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.loss_calc": [[208, 217], ["torch.autograd.Variable().cuda", "utils.loss.CrossEntropy2d().cuda", "CrossEntropy2d().cuda.", "torch.autograd.Variable", "utils.loss.CrossEntropy2d", "Variable().cuda.long"], "function", ["None"], ["", "def", "loss_calc", "(", "pred", ",", "label", ",", "gpu", ")", ":", "\n", "    ", "\"\"\"\n    This function returns cross entropy loss for semantic segmentation\n    \"\"\"", "\n", "# out shape batch_size x channels x h x w -> batch_size x channels x h x w", "\n", "# label shape h x w x 1 x batch_size  -> batch_size x 1 x h x w", "\n", "label", "=", "Variable", "(", "label", ".", "long", "(", ")", ")", ".", "cuda", "(", "gpu", ")", "\n", "criterion", "=", "CrossEntropy2d", "(", "NUM_CLASSES", ")", ".", "cuda", "(", "gpu", ")", "\n", "return", "criterion", "(", "pred", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.lr_poly": [[219, 221], ["float"], "function", ["None"], ["", "def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.lr_warmup": [[223, 225], ["float"], "function", ["None"], ["", "def", "lr_warmup", "(", "base_lr", ",", "iter", ",", "warmup_iter", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "float", "(", "iter", ")", "/", "warmup_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.adjust_learning_rate": [[227, 235], ["train.lr_warmup", "train.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.lr_warmup", "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "if", "i_iter", "<", "PREHEAT_STEPS", ":", "\n", "        ", "lr", "=", "lr_warmup", "(", "args", ".", "learning_rate", ",", "i_iter", ",", "PREHEAT_STEPS", ")", "\n", "", "else", ":", "\n", "        ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.adjust_learning_rate_D": [[237, 245], ["train.lr_warmup", "train.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.lr_warmup", "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.lr_poly"], ["", "", "def", "adjust_learning_rate_D", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "if", "i_iter", "<", "PREHEAT_STEPS", ":", "\n", "        ", "lr", "=", "lr_warmup", "(", "args", ".", "learning_rate_D", ",", "i_iter", ",", "PREHEAT_STEPS", ")", "\n", "", "else", ":", "\n", "        ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate_D", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.weightmap": [[247, 251], ["torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "pred1.size", "pred1.size", "pred1.size", "pred1.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "function", ["None"], ["", "", "def", "weightmap", "(", "pred1", ",", "pred2", ")", ":", "\n", "    ", "output", "=", "1.0", "-", "torch", ".", "sum", "(", "(", "pred1", "*", "pred2", ")", ",", "1", ")", ".", "view", "(", "1", ",", "1", ",", "pred1", ".", "size", "(", "2", ")", ",", "pred1", ".", "size", "(", "3", ")", ")", "/", "(", "torch", ".", "norm", "(", "pred1", ",", "2", ",", "1", ")", "*", "torch", ".", "norm", "(", "pred2", ",", "2", ",", "1", ")", ")", ".", "view", "(", "1", ",", "1", ",", "pred1", ".", "size", "(", "2", ")", ",", "pred1", ".", "size", "(", "3", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.main": [[253, 618], ["map", "map", "model.CLAN_G.Res_Deeplab", "model.CLAN_G.Res_Deeplab.state_dict().copy", "model.CLAN_G.Res_Deeplab.train", "model.CLAN_G.Res_Deeplab.cuda", "model.cond_model.integrated_model", "model.cond_model.integrated_model.train", "model.CLAN_D.FCDiscriminator", "model.CLAN_D.FCDiscriminator.train", "model.CLAN_D.FCDiscriminator.cuda", "enumerate", "torch.utils.data.DataLoader", "enumerate", "torch.SGD", "optim.SGD.zero_grad", "torch.Adam", "optim.Adam.zero_grad", "torch.SGD", "optim.SGD.zero_grad", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "utils.loss.WeightedBCEWithLogitsLoss", "torch.Upsample", "torch.Upsample", "torch.Upsample", "print", "range", "args.input_size_source.split", "args.input_size_target.split", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "i.split", "model.CLAN_G.Res_Deeplab.load_state_dict", "model.CLAN_G.Res_Deeplab.load_state_dict", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataset.imagenet_dataset.imagenetDataset", "model.CLAN_G.Res_Deeplab.optim_parameters", "model.CLAN_D.FCDiscriminator.parameters", "list", "time.time", "optim.SGD.zero_grad", "train.adjust_learning_rate", "optim.Adam.zero_grad", "train.adjust_learning_rate_D", "optim.SGD.zero_grad", "train.adjust_learning_rate", "decoder1.eval", "nn.Sequential.eval", "decoder1.load_state_dict", "nn.Sequential.load_state_dict", "torch.Sequential", "model.cond_model.integrated_model.train", "nn.Sequential.cuda", "decoder1.cuda", "model.cond_model.integrated_model.cuda", "model.CLAN_D.FCDiscriminator.parameters", "model.CLAN_G.Res_Deeplab.parameters", "model.cond_model.integrated_model.parameters", "next", "torch.autograd.Variable().cuda", "model.CLAN_G.Res_Deeplab.", "torch.softmax", "next", "torch.autograd.Variable().cuda", "model.cond_model.integrated_model.", "pytorch_AdaIN.function.adaptive_instance_normalization", "decoder1", "model.CLAN_G.Res_Deeplab.", "nn.Upsample.", "nn.Upsample.", "train.weightmap", "model.CLAN_D.FCDiscriminator.", "nn.Upsample.", "im_loss.backward", "model.CLAN_G.Res_Deeplab.parameters", "model.cond_model.integrated_model.parameters", "model.CLAN_G.Res_Deeplab.", "nn.Upsample.", "nn.Upsample.", "torch.softmax", "loss_seg.backward", "model.CLAN_G.Res_Deeplab.", "nn.Upsample.", "nn.Upsample.", "train.weightmap", "model.CLAN_D.FCDiscriminator.", "nn.Upsample.", "loss_adv2.backward", "loss_weight.backward", "pred_source1.detach.detach", "pred_source2.detach.detach", "model.CLAN_D.FCDiscriminator.parameters", "model.CLAN_D.FCDiscriminator.", "nn.Upsample.", "torch.nn.BCEWithLogitsLoss.", "pred_target1.detach.detach", "pred_target2.detach.detach", "weight_map.detach.detach", "model.CLAN_D.FCDiscriminator.", "nn.Upsample.", "sum_loss.backward", "optim.SGD.step", "optim.SGD.step", "optim.Adam.step", "time.time", "print", "open", "open.write", "open.close", "model.CLAN_G.Res_Deeplab.state_dict", "dataset.gta5_dataset.GTA5DataSet", "dataset.synthia_dataset.SYNTHIADataSet", "model.cond_model.integrated_model.parameters", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.Upsample", "nn.Upsample.", "torch.MSELoss", "nn.MSELoss.", "torch.Upsample", "nn.Upsample.", "pytorch_AdaIN.function.calc_mean_std", "pytorch_AdaIN.function.calc_mean_std", "torch.MSELoss", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "nn.Sequential.", "nn.Sequential.", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "n_v.cuda.reshape", "n_v.cuda.cuda", "train.main.calc_style_loss"], "function", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.Res_Deeplab", "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet.optim_parameters", "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.adjust_learning_rate", "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.adjust_learning_rate_D", "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.adjust_learning_rate", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.adaptive_instance_normalization", "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.weightmap", "home.repos.pwc.inspect_result.gabriel-tjio_ash.None.train.weightmap", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.calc_style_loss"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the training.\"\"\"", "\n", "\n", "h", ",", "w", "=", "map", "(", "int", ",", "args", ".", "input_size_source", ".", "split", "(", "','", ")", ")", "\n", "input_size_source", "=", "(", "h", ",", "w", ")", "\n", "\n", "h", ",", "w", "=", "map", "(", "int", ",", "args", ".", "input_size_target", ".", "split", "(", "','", ")", ")", "\n", "input_size_target", "=", "(", "h", ",", "w", ")", "\n", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "# Create Network", "\n", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "        ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "        ", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "        ", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "if", "not", "args", ".", "num_classes", "==", "19", "or", "not", "i_parts", "[", "1", "]", "==", "'layer5'", ":", "\n", "            ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "\n", "", "", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'./mo'", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "im1", "=", "integrated_model", "(", ")", "\n", "im1", ".", "train", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "# Init D", "\n", "model_D", "=", "FCDiscriminator", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "#", "\n", "# =============================================================================", "\n", "#    #for retrain     ", "\n", "#    saved_state_dict_D = torch.load(RESTORE_FROM_D)", "\n", "#    model_D.load_state_dict(saved_state_dict_D)", "\n", "# =============================================================================", "\n", "\n", "model_D", ".", "train", "(", ")", "\n", "model_D", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "snapshot_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "snapshot_dir", ")", "\n", "\n", "", "if", "args", ".", "source", "==", "'GTA5'", ":", "\n", "        ", "trainloader", "=", "data", ".", "DataLoader", "(", "\n", "GTA5DataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "crop_size", "=", "input_size_source", ",", "\n", "scale", "=", "True", ",", "mirror", "=", "True", ",", "mean", "=", "IMG_MEAN", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "trainloader", "=", "data", ".", "DataLoader", "(", "\n", "SYNTHIADataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "crop_size", "=", "input_size_source", ",", "\n", "scale", "=", "True", ",", "mirror", "=", "True", ",", "mean", "=", "IMG_MEAN", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "\n", "styleloader", "=", "data", ".", "DataLoader", "(", "imagenetDataset", "(", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "crop_size", "=", "input_size_source", ",", "\n", "scale", "=", "True", ",", "mirror", "=", "True", ",", "mean", "=", "IMG_MEAN", ")", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "styleloader_iter", "=", "enumerate", "(", "styleloader", ")", "\n", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "args", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "optimizer_D", "=", "optim", ".", "Adam", "(", "model_D", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_D", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "optimizer_im", "=", "optim", ".", "SGD", "(", "list", "(", "im1", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "optimizer_im", ".", "zero_grad", "(", ")", "\n", "\n", "\n", "bce_loss", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "weighted_bce_loss", "=", "WeightedBCEWithLogitsLoss", "(", ")", "\n", "\n", "interp_source", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_source", "[", "1", "]", ",", "input_size_source", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "interp_target_bn", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "int", "(", "input_size_target", "[", "1", "]", "/", "4", ")", ",", "int", "(", "input_size_target", "[", "0", "]", "/", "4", ")", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "# Labels for Adversarial Training", "\n", "source_label", "=", "0", "\n", "target_label", "=", "1", "\n", "print", "(", "'exp = {}'", ".", "format", "(", "args", ".", "snapshot_dir", ")", ")", "\n", "beta", "=", "0", "\n", "\n", "for", "i_iter", "in", "range", "(", "args", ".", "num_steps", ")", ":", "\n", "        ", "time_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", "\n", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate_D", "(", "optimizer_D", ",", "i_iter", ")", "\n", "\n", "\n", "optimizer_im", ".", "zero_grad", "(", ")", "\n", "## adjust learning rate", "\n", "adjust_learning_rate", "(", "optimizer_im", ",", "i_iter", ")", "\n", "\n", "damping", "=", "(", "1", "-", "i_iter", "/", "NUM_STEPS", ")", "\n", "\n", "decoder1", "=", "decoder", "\n", "vgg1", "=", "vgg", "\n", "decoder1", ".", "eval", "(", ")", "\n", "vgg1", ".", "eval", "(", ")", "\n", "decoder1", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/home/gabriel/CLAN/pytorch_AdaIN/models/decoder.pth'", ")", ")", "\n", "vgg1", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'/home/gabriel/CLAN/pytorch_AdaIN/models/vgg_normalised.pth'", ")", ")", "\n", "vgg1", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "vgg", ".", "children", "(", ")", ")", "[", ":", "31", "]", ")", "\n", "im1", ".", "train", "(", ")", "\n", "vgg1", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "decoder1", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "im1", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "#======================================================================================", "\n", "# train G", "\n", "#======================================================================================", "\n", "\n", "#Remove Grads in D", "\n", "for", "param", "in", "model_D", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "# Train integrated model", "\n", "", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "im1", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "\n", "", "_", ",", "batch", "=", "next", "(", "trainloader_iter", ")", "\n", "images_s", ",", "labels_s", ",", "_", ",", "_", ",", "_", "=", "batch", "\n", "images_s", "=", "Variable", "(", "images_s", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "pred_source1", ",", "pred_source2", "=", "model", "(", "images_s", ")", "\n", "pred_source", "=", "F", ".", "softmax", "(", "pred_source1", "+", "pred_source2", ")", "\n", "#label smoothing", "\n", "a_smth", "=", "0.1", "\n", "pred_source", "=", "(", "1", "-", "a_smth", ")", "*", "pred_source", "+", "(", "a_smth", "/", "args", ".", "num_classes", ")", "\n", "\n", "_", ",", "stylebatch", "=", "next", "(", "styleloader_iter", ")", "\n", "style_img", ",", "_", ",", "_", "=", "stylebatch", "\n", "\n", "def", "calc_content_loss", "(", "input", ",", "target", ")", ":", "\n", "           ", "interp_tgt", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "target", ".", "size", "(", "2", ")", ",", "target", ".", "size", "(", "3", ")", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "input", "=", "interp_tgt", "(", "input", ")", "\n", "\n", "assert", "(", "input", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", ")", "\n", "assert", "(", "target", ".", "requires_grad", "is", "False", ")", "\n", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "return", "loss", "(", "input", ",", "target", ")", "\n", "\n", "", "def", "calc_style_loss", "(", "input", ",", "target", ")", ":", "\n", "           ", "interp_tgt", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "target", ".", "size", "(", "2", ")", ",", "target", ".", "size", "(", "3", ")", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "input", "=", "interp_tgt", "(", "input", ")", "\n", "assert", "(", "input", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", ")", "\n", "assert", "(", "target", ".", "requires_grad", "is", "False", ")", "\n", "input_mean", ",", "input_std", "=", "calc_mean_std", "(", "input", ")", "\n", "target_mean", ",", "target_std", "=", "calc_mean_std", "(", "target", ")", "\n", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "return", "loss", "(", "input_mean", ",", "target_mean", ")", "+", "loss", "(", "input_std", ",", "target_std", ")", "\n", "", "images_style", "=", "Variable", "(", "style_img", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "           ", "content_f", "=", "vgg1", "(", "images_s", ")", "\n", "style_f", "=", "vgg1", "(", "images_style", ")", "\n", "originalRandomNoise", "=", "torch", ".", "randn", "(", "style_f", ".", "shape", ")", "\n", "n_u", ",", "n_e", ",", "n_v", "=", "torch", ".", "svd", "(", "originalRandomNoise", ",", "some", "=", "True", ")", "\n", "n_v", "=", "n_v", ".", "reshape", "(", "style_f", ".", "shape", ")", "\n", "n_v", "=", "n_v", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "style_f", "*=", "(", "n_v", "+", "1", ")", "\n", "\n", "", "fused", "=", "im1", "(", "style_f", ",", "pred_source", ")", "### change model ", "\n", "feat", "=", "adaptive_instance_normalization", "(", "content_f", ",", "fused", ")", "\n", "alpha", "=", "0.5", "\n", "feat1", "=", "alpha", "*", "feat", "+", "(", "1", "-", "alpha", ")", "*", "content_f", "\n", "images_t", "=", "decoder1", "(", "feat1", ")", "\n", "style_loss1", "=", "1e-8", "*", "calc_style_loss", "(", "feat", ",", "style_f", ".", "detach", "(", ")", ")", "\n", "style_loss2", "=", "1e-8", "*", "calc_style_loss", "(", "feat", ",", "content_f", ".", "detach", "(", ")", ")", "\n", "content_loss", "=", "1e-8", "*", "calc_content_loss", "(", "feat", ",", "content_f", ".", "detach", "(", ")", ")", "\n", "\n", "pred_target1", ",", "pred_target2", "=", "model", "(", "images_t", ")", "\n", "pred_target1", "=", "interp_target", "(", "pred_target1", ")", "\n", "pred_target2", "=", "interp_target", "(", "pred_target2", ")", "\n", "\n", "weight_map", "=", "weightmap", "(", "F", ".", "softmax", "(", "pred_target1", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "pred_target2", ",", "dim", "=", "1", ")", ")", "\n", "t_out", "=", "model_D", "(", "F", ".", "softmax", "(", "pred_target1", "+", "pred_target2", ",", "dim", "=", "1", ")", ")", "\n", "\n", "D_out", "=", "interp_target", "(", "t_out", ")", "\n", "\n", "#Adaptive Adversarial Loss", "\n", "if", "(", "i_iter", ">", "PREHEAT_STEPS", ")", ":", "\n", "            ", "loss_adv", "=", "weighted_bce_loss", "(", "D_out", ",", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", ")", ".", "cuda", "(", "\n", "args", ".", "gpu", ")", ",", "weight_map", ",", "Epsilon", ",", "Lambda_local", ")", "\n", "", "else", ":", "\n", "            ", "loss_adv", "=", "bce_loss", "(", "D_out", ",", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", ")", ".", "cuda", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "\n", "", "loss_adv1", "=", "loss_adv", "*", "Lambda_adv", "*", "damping", "\n", "im_loss", "=", "-", "loss_adv1", "+", "style_loss1", "-", "style_loss2", "+", "content_loss", "\n", "\n", "# content loss - feat compare with content_f (minimize content loss)", "\n", "# style loss   - feat compared with style_f (minimize style f loss) + feat compared with content f (maximise loss)", "\n", "# loss adv maximize the adversarial loss", "\n", "im_loss", ".", "backward", "(", ")", "\n", "\n", "## Train with Source", "\n", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "", "for", "param", "in", "im1", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "pred_source1", ",", "pred_source2", "=", "model", "(", "images_s", ")", "\n", "pred_source1", "=", "interp_source", "(", "pred_source1", ")", "\n", "pred_source2", "=", "interp_source", "(", "pred_source2", ")", "\n", "pred_source", "=", "F", ".", "softmax", "(", "pred_source1", "+", "pred_source2", ")", "\n", "#label smoothing", "\n", "a_smth", "=", "0.1", "\n", "pred_source", "=", "(", "1", "-", "a_smth", ")", "*", "pred_source", "+", "(", "a_smth", "/", "args", ".", "num_classes", ")", "\n", "\n", "\n", "#Segmentation Loss", "\n", "loss_seg", "=", "(", "loss_calc", "(", "pred_source1", ",", "labels_s", ",", "args", ".", "gpu", ")", "+", "loss_calc", "(", "pred_source2", ",", "labels_s", ",", "args", ".", "gpu", ")", ")", "\n", "loss_seg", ".", "backward", "(", ")", "\n", "\n", "# Train with Stylized source images", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "           ", "content_f", "=", "vgg1", "(", "images_s", ")", "\n", "style_f", "=", "vgg1", "(", "images_style", ")", "\n", "originalRandomNoise", "=", "torch", ".", "randn", "(", "style_f", ".", "shape", ")", "\n", "n_u", ",", "n_e", ",", "n_v", "=", "torch", ".", "svd", "(", "originalRandomNoise", ",", "some", "=", "True", ")", "\n", "n_v", "=", "n_v", ".", "reshape", "(", "style_f", ".", "shape", ")", "\n", "n_v", "=", "n_v", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "style_f", "*=", "(", "n_v", "+", "1", ")", "\n", "\n", "fused", "=", "im1", "(", "style_f", ",", "pred_source", ")", "\n", "feat", "=", "adaptive_instance_normalization", "(", "content_f", ",", "fused", ")", "\n", "alpha", "=", "0.5", "\n", "feat1", "=", "alpha", "*", "feat", "+", "(", "1", "-", "alpha", ")", "*", "content_f", "\n", "\n", "images_t", "=", "decoder1", "(", "feat1", ")", "\n", "del", "decoder1", ",", "vgg1", ",", "feat", ",", "feat1", "\n", "\n", "", "pred_target1", ",", "pred_target2", "=", "model", "(", "images_t", ")", "\n", "pred_target1", "=", "interp_target", "(", "pred_target1", ")", "\n", "pred_target2", "=", "interp_target", "(", "pred_target2", ")", "\n", "\n", "weight_map", "=", "weightmap", "(", "F", ".", "softmax", "(", "pred_target1", ",", "dim", "=", "1", ")", ",", "F", ".", "softmax", "(", "pred_target2", ",", "dim", "=", "1", ")", ")", "\n", "t_out", "=", "model_D", "(", "F", ".", "softmax", "(", "pred_target1", "+", "pred_target2", ",", "dim", "=", "1", ")", ")", "\n", "\n", "D_out", "=", "interp_target", "(", "t_out", ")", "\n", "#Adaptive Adversarial Loss", "\n", "if", "(", "i_iter", ">", "PREHEAT_STEPS", ")", ":", "\n", "            ", "loss_adv", "=", "weighted_bce_loss", "(", "D_out", ",", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", ")", ".", "cuda", "(", "\n", "args", ".", "gpu", ")", ",", "weight_map", ",", "Epsilon", ",", "Lambda_local", ")", "\n", "", "else", ":", "\n", "            ", "loss_adv", "=", "bce_loss", "(", "D_out", ",", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", ")", ".", "cuda", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "loss_adv2", "=", "loss_adv", "*", "Lambda_adv", "*", "damping", "\n", "loss_adv2", ".", "backward", "(", ")", "\n", "\n", "#Weight Discrepancy Loss", "\n", "W5", "=", "None", "\n", "W6", "=", "None", "\n", "if", "args", ".", "model", "==", "'ResNet'", ":", "\n", "\n", "            ", "for", "(", "w5", ",", "w6", ")", "in", "zip", "(", "model", ".", "layer5", ".", "parameters", "(", ")", ",", "model", ".", "layer6", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "W5", "is", "None", "and", "W6", "is", "None", ":", "\n", "                    ", "W5", "=", "w5", ".", "view", "(", "-", "1", ")", "\n", "W6", "=", "w6", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "                    ", "W5", "=", "torch", ".", "cat", "(", "(", "W5", ",", "w5", ".", "view", "(", "-", "1", ")", ")", ",", "0", ")", "\n", "W6", "=", "torch", ".", "cat", "(", "(", "W6", ",", "w6", ".", "view", "(", "-", "1", ")", ")", ",", "0", ")", "\n", "\n", "", "", "", "loss_weight", "=", "(", "torch", ".", "matmul", "(", "W5", ",", "W6", ")", "/", "(", "torch", ".", "norm", "(", "W5", ")", "*", "torch", ".", "norm", "(", "W6", ")", ")", "+", "1", ")", "# +1 is for a positive loss", "\n", "loss_weight", "=", "loss_weight", "*", "Lambda_weight", "*", "damping", "*", "2", "\n", "loss_weight", ".", "backward", "(", ")", "\n", "\n", "#======================================================================================", "\n", "# train D", "\n", "#======================================================================================", "\n", "\n", "\n", "pred_source1", "=", "pred_source1", ".", "detach", "(", ")", "\n", "pred_source2", "=", "pred_source2", ".", "detach", "(", ")", "\n", "\n", "# Bring back Grads in D", "\n", "for", "param", "in", "model_D", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "# Train with Source", "\n", "", "s_out", "=", "model_D", "(", "F", ".", "softmax", "(", "pred_source1", "+", "pred_source2", ",", "dim", "=", "1", ")", ")", "\n", "\n", "D_out_s", "=", "interp_source", "(", "s_out", ")", "\n", "loss_D_s", "=", "bce_loss", "(", "D_out_s", ",", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "D_out_s", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", ")", ".", "cuda", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "\n", "# Train with Target", "\n", "pred_target1", "=", "pred_target1", ".", "detach", "(", ")", "\n", "pred_target2", "=", "pred_target2", ".", "detach", "(", ")", "\n", "weight_map", "=", "weight_map", ".", "detach", "(", ")", "\n", "\n", "t_out", "=", "model_D", "(", "F", ".", "softmax", "(", "pred_target1", "+", "pred_target2", ",", "dim", "=", "1", ")", ")", "\n", "D_out_t", "=", "interp_target", "(", "t_out", ")", "\n", "\n", "#Adaptive Adversarial Loss", "\n", "if", "(", "i_iter", ">", "PREHEAT_STEPS", ")", ":", "\n", "            ", "loss_D_t", "=", "weighted_bce_loss", "(", "D_out_t", ",", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "D_out_t", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "target_label", ")", ")", ".", "cuda", "(", "\n", "args", ".", "gpu", ")", ",", "weight_map", ",", "Epsilon", ",", "Lambda_local", ")", "\n", "", "else", ":", "\n", "            ", "loss_D_t", "=", "bce_loss", "(", "D_out_t", ",", "\n", "Variable", "(", "torch", ".", "FloatTensor", "(", "D_out_t", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "target_label", ")", ")", ".", "cuda", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "sum_loss", "=", "loss_D_s", "+", "loss_D_t", "\n", "sum_loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer_im", ".", "step", "(", ")", "\n", "optimizer_D", ".", "step", "(", ")", "\n", "time_taken", "=", "time", ".", "time", "(", ")", "\n", "time_elapsed", "=", "time_taken", "-", "time_start", "\n", "\n", "#print(", "\n", "#'iter = {0:6d}/{1:6d}, loss_seg = {2:.4f} loss_adv = {3:.4f}, loss_weight = {4:.4f}, loss_D_s = {5:.4f} loss_D_t = {6:.4f}, bottle_neck_loss_s={7:4f},beta_s={8:4f},bottle_neck_loss_t={9:4f},beta_t={10:4f},ssim_mu={11:4f},ssim_sigmas={12:4f}'.format(", "\n", "#    i_iter, args.num_steps, loss_seg, loss_adv, loss_weight, loss_D_s, loss_D_t,bottle_neck_loss_s,beta_s,bottle_neck_loss_t,beta_t,ssim_mu,ssim_sigmas), 'Time elapsed ', time_elapsed)", "\n", "print", "(", "\n", "'iter = {0:6d}/{1:6d}, loss_seg = {2:.4f} loss_adv2 = {3:.4f}, loss_weight = {4:.4f}, loss_D_s = {5:.4f} loss_D_t = {6:.4f},style_loss1= {7:.4f},style_loss2={8:.4f},content_loss= {9:.4f},loss_adv1 = {10:.4f}'", ".", "format", "(", "\n", "i_iter", ",", "args", ".", "num_steps", ",", "loss_seg", ",", "loss_adv2", ",", "loss_weight", ",", "loss_D_s", ",", "loss_D_t", ",", "style_loss1", ",", "style_loss2", ",", "content_loss", ",", "loss_adv1", ")", ",", "'Time elapsed '", ",", "time_elapsed", ")", "\n", "\n", "f_loss", "=", "open", "(", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'loss.txt'", ")", ",", "'a'", ")", "\n", "f_loss", ".", "write", "(", "'{0:.4f} {1:.4f} {2:.4f} {3:.4f} {4:.4f}\\n'", ".", "format", "(", "\n", "loss_seg", ",", "loss_adv", ",", "loss_weight", ",", "loss_D_s", ",", "loss_D_t", ")", ")", "\n", "f_loss", ".", "close", "(", ")", "\n", "\n", "if", "i_iter", ">=", "args", ".", "num_steps_stop", "-", "1", ":", "\n", "            ", "print", "(", "'save model ...'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "model_D", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps", ")", "+", "'_D.pth'", ")", ")", "\n", "torch", ".", "save", "(", "im1", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'_im.pth'", ")", ")", "\n", "\n", "break", "\n", "", "if", "i_iter", "%", "1000", "==", "0", "and", "i_iter", ">", "20000", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "model_D", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'_D.pth'", ")", ")", "\n", "torch", ".", "save", "(", "im1", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'_im.pth'", ")", ")", "\n", "torch", ".", "save", "(", "{", "'Iter'", ":", "i_iter", ",", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "'optimizerD_state_dict'", ":", "optimizer_D", ".", "state_dict", "(", ")", ",", "'optimizerim_state_dict'", ":", "optimizer_im", ".", "state_dict", "(", ")", "}", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_optimizers_final_cont.tar'", ")", ")", "\n", "continue", "\n", "", "if", "i_iter", "%", "args", ".", "save_pred_every", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "model_D", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'_D.pth'", ")", ")", "\n", "torch", ".", "save", "(", "im1", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'_im.pth'", ")", ")", "\n", "torch", ".", "save", "(", "{", "'Iter'", ":", "i_iter", ",", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "'optimizerD_state_dict'", ":", "optimizer_D", ".", "state_dict", "(", ")", ",", "'optimizerim_state_dict'", ":", "optimizer_im", ".", "state_dict", "(", ")", "}", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_optimizers_final_cont.tar'", ")", ")", "\n", "", "", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.loss.WeightedBCEWithLogitsLoss.__init__": [[21, 24], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "WeightedBCEWithLogitsLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.loss.WeightedBCEWithLogitsLoss.weighted": [[25, 39], ["ValueError", "loss.mean", "loss.sum", "target.size", "input.size", "target.size", "input.size"], "methods", ["None"], ["", "def", "weighted", "(", "self", ",", "input", ",", "target", ",", "weight", ",", "alpha", ",", "beta", ")", ":", "\n", "        ", "if", "not", "(", "target", ".", "size", "(", ")", "==", "input", ".", "size", "(", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Target size ({}) must be the same as input size ({})\"", ".", "format", "(", "target", ".", "size", "(", ")", ",", "input", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "max_val", "=", "(", "-", "input", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", "loss", "=", "input", "-", "input", "*", "target", "+", "max_val", "+", "(", "(", "-", "max_val", ")", ".", "exp", "(", ")", "+", "(", "-", "input", "-", "max_val", ")", ".", "exp", "(", ")", ")", ".", "log", "(", ")", "\n", "\n", "if", "weight", "is", "not", "None", ":", "\n", "            ", "loss", "=", "alpha", "*", "loss", "+", "beta", "*", "loss", "*", "weight", "\n", "\n", "", "if", "self", ".", "size_average", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.loss.WeightedBCEWithLogitsLoss.forward": [[40, 45], ["loss.WeightedBCEWithLogitsLoss.weighted", "loss.WeightedBCEWithLogitsLoss.weighted"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.loss.WeightedBCEWithLogitsLoss.weighted", "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.loss.WeightedBCEWithLogitsLoss.weighted"], ["", "", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "weight", ",", "alpha", ",", "beta", ")", ":", "\n", "        ", "if", "weight", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "weighted", "(", "input", ",", "target", ",", "weight", ",", "alpha", ",", "beta", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "weighted", "(", "input", ",", "target", ",", "None", ",", "alpha", ",", "beta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.loss.CrossEntropy2d.__init__": [[49, 62], ["torch.Module.__init__", "torch.autograd.Variable", "torch.autograd.Variable", "isinstance", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.autograd.Variable", "torch.autograd.Variable"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "class_num", ",", "alpha", "=", "None", ",", "gamma", "=", "2", ",", "size_average", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "super", "(", "CrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "alpha", "is", "None", ":", "\n", "            ", "self", ".", "alpha", "=", "Variable", "(", "torch", ".", "ones", "(", "class_num", ",", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "alpha", ",", "Variable", ")", ":", "\n", "                ", "self", ".", "alpha", "=", "alpha", "\n", "", "else", ":", "\n", "                ", "self", ".", "alpha", "=", "Variable", "(", "alpha", ")", "\n", "", "", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.loss.CrossEntropy2d.forward": [[63, 83], ["P[].view.size", "torch.Softmax2d", "torch.Softmax2d", "torch.Softmax2d.", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "target[].view", "P[].view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.log", "torch.gather.log", "batch_loss.mean", "batch_loss.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ")", ":", "\n", "        ", "N", ",", "C", ",", "H", ",", "W", "=", "predict", ".", "size", "(", ")", "\n", "sm", "=", "nn", ".", "Softmax2d", "(", ")", "\n", "\n", "P", "=", "sm", "(", "predict", ")", "\n", "P", "=", "torch", ".", "clamp", "(", "P", ",", "min", "=", "1e-9", ",", "max", "=", "1", "-", "(", "1e-9", ")", ")", "\n", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", "[", "target_mask", "]", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "predict", "=", "P", "[", "target_mask", ".", "view", "(", "N", ",", "1", ",", "H", ",", "W", ")", ".", "repeat", "(", "1", ",", "C", ",", "1", ",", "1", ")", "]", ".", "view", "(", "C", ",", "-", "1", ")", "\n", "probs", "=", "torch", ".", "gather", "(", "predict", ",", "dim", "=", "0", ",", "index", "=", "target", ")", "\n", "log_p", "=", "probs", ".", "log", "(", ")", "\n", "batch_loss", "=", "-", "(", "torch", ".", "pow", "(", "(", "1", "-", "probs", ")", ",", "self", ".", "gamma", ")", ")", "*", "log_p", "\n", "\n", "if", "self", ".", "size_average", ":", "\n", "            ", "loss", "=", "batch_loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "\n", "            ", "loss", "=", "batch_loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.loss.channel_1toN": [[9, 17], ["torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "torch.LongTensor().zero_", "range", "torch.LongTensor().zero_.float", "torch.from_numpy", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.logical_not().astype", "numpy.logical_not", "numpy.logical_xor", "layer.numpy", "torch.LongTensor().zero_.numpy"], "function", ["None"], ["def", "channel_1toN", "(", "img", ",", "num_channel", ")", ":", "\n", "    ", "T", "=", "torch", ".", "LongTensor", "(", "num_channel", ",", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", ".", "zero_", "(", ")", "\n", "mask", "=", "torch", ".", "LongTensor", "(", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "2", "]", ")", ".", "zero_", "(", ")", "\n", "for", "i", "in", "range", "(", "num_channel", ")", ":", "\n", "        ", "T", "[", "i", "]", "=", "T", "[", "i", "]", "+", "i", "\n", "layer", "=", "T", "[", "i", "]", "-", "img", "\n", "T", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "np", ".", "logical_not", "(", "np", ".", "logical_xor", "(", "layer", ".", "numpy", "(", ")", ",", "mask", ".", "numpy", "(", ")", ")", ")", ".", "astype", "(", "int", ")", ")", "\n", "", "return", "T", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.function.calc_mean_std": [[4, 13], ["feat.size", "feat_var.sqrt().view", "feat.view().mean().view", "len", "feat.view().var", "feat_var.sqrt", "feat.view().mean", "feat.view", "feat.view"], "function", ["None"], ["def", "calc_mean_std", "(", "feat", ",", "eps", "=", "1e-5", ")", ":", "\n", "# eps is a small value added to the variance to avoid divide-by-zero.", "\n", "    ", "size", "=", "feat", ".", "size", "(", ")", "\n", "assert", "(", "len", "(", "size", ")", "==", "4", ")", "\n", "N", ",", "C", "=", "size", "[", ":", "2", "]", "\n", "feat_var", "=", "feat", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ".", "var", "(", "dim", "=", "2", ")", "+", "eps", "\n", "feat_std", "=", "feat_var", ".", "sqrt", "(", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "feat_mean", "=", "feat", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "return", "feat_mean", ",", "feat_std", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.function.calc_mean_std_gcn": [[14, 25], ["feat.size", "feat_var.repeat().view.repeat().view", "feat_var.repeat().view.sqrt().view", "feat.view().mean().repeat().view", "feat_mean.view.view", "len", "feat.view().var", "feat_var.repeat().view.repeat", "feat_var.repeat().view.sqrt", "feat.view().mean().repeat", "feat.view", "int", "feat.view().mean", "feat.view", "int"], "function", ["None"], ["", "def", "calc_mean_std_gcn", "(", "feat", ",", "eps", "=", "1e-5", ")", ":", "\n", "# eps is a small value added to the variance to avoid divide-by-zero.", "\n", "    ", "size", "=", "feat", ".", "size", "(", ")", "\n", "assert", "(", "len", "(", "size", ")", "==", "4", ")", "\n", "N", ",", "C", "=", "size", "[", ":", "2", "]", "\n", "feat_var", "=", "feat", ".", "view", "(", "N", ",", "int", "(", "C", "/", "16", ")", ",", "-", "1", ")", ".", "var", "(", "dim", "=", "2", ")", "+", "eps", "\n", "feat_var", "=", "feat_var", ".", "repeat", "(", "1", ",", "16", ",", "1", ")", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "feat_std", "=", "feat_var", ".", "sqrt", "(", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "feat_mean", "=", "feat", ".", "view", "(", "N", ",", "int", "(", "C", "/", "16", ")", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "repeat", "(", "1", ",", "16", ",", "1", ")", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "feat_mean", "=", "feat_mean", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "return", "feat_mean", ",", "feat_std", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.function.calc_mean_std_gcn32": [[27, 38], ["feat.size", "feat_var.repeat().view.repeat().view", "feat_var.repeat().view.sqrt().view", "feat.view().mean().repeat().view", "feat_mean.view.view", "len", "feat.view().var", "feat_var.repeat().view.repeat", "feat_var.repeat().view.sqrt", "feat.view().mean().repeat", "feat.view", "int", "feat.view().mean", "feat.view", "int"], "function", ["None"], ["", "def", "calc_mean_std_gcn32", "(", "feat", ",", "eps", "=", "1e-5", ")", ":", "\n", "# eps is a small value added to the variance to avoid divide-by-zero.", "\n", "    ", "size", "=", "feat", ".", "size", "(", ")", "\n", "assert", "(", "len", "(", "size", ")", "==", "4", ")", "\n", "N", ",", "C", "=", "size", "[", ":", "2", "]", "\n", "feat_var", "=", "feat", ".", "view", "(", "N", ",", "int", "(", "C", "/", "32", ")", ",", "-", "1", ")", ".", "var", "(", "dim", "=", "2", ")", "+", "eps", "\n", "feat_var", "=", "feat_var", ".", "repeat", "(", "1", ",", "32", ",", "1", ")", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "feat_std", "=", "feat_var", ".", "sqrt", "(", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "feat_mean", "=", "feat", ".", "view", "(", "N", ",", "int", "(", "C", "/", "32", ")", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "repeat", "(", "1", ",", "32", ",", "1", ")", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "feat_mean", "=", "feat_mean", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "return", "feat_mean", ",", "feat_std", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.function.adaptive_instance_normalization": [[39, 49], ["content_feat.size", "function.calc_mean_std", "function.calc_mean_std", "content_std.expand", "style_mean.expand", "content_feat.size", "style_feat.size", "content_mean.expand", "style_std.expand"], "function", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std"], ["", "def", "adaptive_instance_normalization", "(", "content_feat", ",", "style_feat", ")", ":", "\n", "    ", "assert", "(", "content_feat", ".", "size", "(", ")", "[", ":", "2", "]", "==", "style_feat", ".", "size", "(", ")", "[", ":", "2", "]", ")", "\n", "size", "=", "content_feat", ".", "size", "(", ")", "\n", "style_mean", ",", "style_std", "=", "calc_mean_std", "(", "style_feat", ")", "\n", "# arbitrary mask", "\n", "content_mean", ",", "content_std", "=", "calc_mean_std", "(", "content_feat", ")", "\n", "\n", "normalized_feat", "=", "(", "content_feat", "-", "content_mean", ".", "expand", "(", "\n", "size", ")", ")", "/", "content_std", ".", "expand", "(", "size", ")", "\n", "return", "normalized_feat", "*", "style_std", ".", "expand", "(", "size", ")", "+", "style_mean", ".", "expand", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.function.adaptive_group_normalization": [[50, 60], ["content_feat.size", "function.calc_mean_std_gcn", "function.calc_mean_std_gcn", "content_std.expand", "style_mean.expand", "content_feat.size", "style_feat.size", "content_mean.expand", "style_std.expand"], "function", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std_gcn", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std_gcn"], ["", "def", "adaptive_group_normalization", "(", "content_feat", ",", "style_feat", ")", ":", "\n", "    ", "assert", "(", "content_feat", ".", "size", "(", ")", "[", ":", "2", "]", "==", "style_feat", ".", "size", "(", ")", "[", ":", "2", "]", ")", "\n", "size", "=", "content_feat", ".", "size", "(", ")", "\n", "style_mean", ",", "style_std", "=", "calc_mean_std_gcn", "(", "style_feat", ")", "\n", "# arbitrary mask", "\n", "content_mean", ",", "content_std", "=", "calc_mean_std_gcn", "(", "content_feat", ")", "\n", "\n", "normalized_feat", "=", "(", "content_feat", "-", "content_mean", ".", "expand", "(", "\n", "size", ")", ")", "/", "content_std", ".", "expand", "(", "size", ")", "\n", "return", "normalized_feat", "*", "style_std", ".", "expand", "(", "size", ")", "+", "style_mean", ".", "expand", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.function._calc_feat_flatten_mean_std": [[61, 69], ["isinstance", "feat.view", "feat.view.mean", "feat.view.std", "feat.size"], "function", ["None"], ["", "def", "_calc_feat_flatten_mean_std", "(", "feat", ")", ":", "\n", "# takes 3D feat (C, H, W), return mean and std of array within channels", "\n", "    ", "assert", "(", "feat", ".", "size", "(", ")", "[", "0", "]", "==", "3", ")", "\n", "assert", "(", "isinstance", "(", "feat", ",", "torch", ".", "FloatTensor", ")", ")", "\n", "feat_flatten", "=", "feat", ".", "view", "(", "3", ",", "-", "1", ")", "\n", "mean", "=", "feat_flatten", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "feat_flatten", ".", "std", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "feat_flatten", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.function._mat_sqrt": [[71, 74], ["torch.svd", "torch.mm", "torch.mm", "V.t", "D.pow().diag", "D.pow"], "function", ["None"], ["", "def", "_mat_sqrt", "(", "x", ")", ":", "\n", "    ", "U", ",", "D", ",", "V", "=", "torch", ".", "svd", "(", "x", ")", "\n", "return", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "U", ",", "D", ".", "pow", "(", "0.5", ")", ".", "diag", "(", ")", ")", ",", "V", ".", "t", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.function.coral": [[76, 103], ["function._calc_feat_flatten_mean_std", "function._calc_feat_flatten_mean_std", "torch.mm", "source_f_transfer.view", "source_f_std.expand_as", "torch.mm", "torch.eye", "target_f_std.expand_as", "torch.mm", "torch.eye", "function._mat_sqrt", "torch.mm", "target_f_mean.expand_as", "source.size", "source_f_mean.expand_as", "source_f_norm.t", "target_f_mean.expand_as", "target_f_norm.t", "torch.inverse", "target_f_std.expand_as", "function._mat_sqrt"], "function", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function._calc_feat_flatten_mean_std", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function._calc_feat_flatten_mean_std", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function._mat_sqrt", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function._mat_sqrt"], ["", "def", "coral", "(", "source", ",", "target", ")", ":", "\n", "# assume both source and target are 3D array (C, H, W)", "\n", "# Note: flatten -> f", "\n", "\n", "    ", "source_f", ",", "source_f_mean", ",", "source_f_std", "=", "_calc_feat_flatten_mean_std", "(", "source", ")", "\n", "source_f_norm", "=", "(", "source_f", "-", "source_f_mean", ".", "expand_as", "(", "\n", "source_f", ")", ")", "/", "source_f_std", ".", "expand_as", "(", "source_f", ")", "\n", "source_f_cov_eye", "=", "torch", ".", "mm", "(", "source_f_norm", ",", "source_f_norm", ".", "t", "(", ")", ")", "+", "torch", ".", "eye", "(", "3", ")", "\n", "\n", "target_f", ",", "target_f_mean", ",", "target_f_std", "=", "_calc_feat_flatten_mean_std", "(", "target", ")", "\n", "target_f_norm", "=", "(", "target_f", "-", "target_f_mean", ".", "expand_as", "(", "\n", "target_f", ")", ")", "/", "target_f_std", ".", "expand_as", "(", "target_f", ")", "\n", "target_f_cov_eye", "=", "torch", ".", "mm", "(", "target_f_norm", ",", "target_f_norm", ".", "t", "(", ")", ")", "+", "torch", ".", "eye", "(", "3", ")", "\n", "\n", "source_f_norm_transfer", "=", "torch", ".", "mm", "(", "\n", "_mat_sqrt", "(", "target_f_cov_eye", ")", ",", "\n", "torch", ".", "mm", "(", "torch", ".", "inverse", "(", "_mat_sqrt", "(", "source_f_cov_eye", ")", ")", ",", "\n", "source_f_norm", ")", "\n", ")", "\n", "\n", "source_f_transfer", "=", "source_f_norm_transfer", "*", "target_f_std", ".", "expand_as", "(", "source_f_norm", ")", "+", "target_f_mean", ".", "expand_as", "(", "source_f_norm", ")", "\n", "\n", "return", "source_f_transfer", ".", "view", "(", "source", ".", "size", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.visual.tensor2im": [[7, 18], ["image_tensor[].cpu().float().numpy", "numpy.transpose", "np.tile.astype", "numpy.tile", "image_tensor[].cpu().float", "image_tensor[].cpu"], "function", ["None"], ["def", "tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "#print(image_tensor)", "\n", "    ", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "#    mean = np.array([0.485, 0.456, 0.406])", "\n", "#    std = np.array([0.229, 0.224, 0.225])", "\n", "#    image_numpy = (std * image_numpy + mean) * 255", "\n", "image_numpy", "=", "image_numpy", "+", "IMG_MEAN", "\n", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.visual.onedim_tensor2im": [[19, 40], ["numpy.zeros", "range", "np.zeros.astype", "numpy.array", "image_tensor.size", "range", "image_tensor.size", "image_tensor.size", "image_tensor.size"], "function", ["None"], ["", "def", "onedim_tensor2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "dataset", "=", "'Pascal'", ")", ":", "\n", "    ", "if", "dataset", "==", "'Pascal'", ":", "\n", "        ", "palette_idx", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "255", ",", "0", ",", "0", "]", ",", "[", "155", ",", "100", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "0", ",", "100", ",", "155", "]", ",", "[", "0", ",", "0", ",", "255", "]", "]", ")", "#Pascal", "\n", "", "result", "=", "np", ".", "zeros", "(", "shape", "=", "(", "image_tensor", ".", "size", "(", "2", ")", ",", "image_tensor", ".", "size", "(", "3", ")", ",", "3", ")", ")", "\n", "#image_numpy = image_tensor[0].cpu().float().numpy()", "\n", "for", "i", "in", "range", "(", "image_tensor", ".", "size", "(", "2", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "image_tensor", ".", "size", "(", "3", ")", ")", ":", "\n", "#result[i][j] = palette_idx[np.argmax(image_numpy[:,i,j]) + 1]", "\n", "            ", "if", "image_tensor", ".", "data", "[", "0", "]", "[", "0", "]", "[", "i", "]", "[", "j", "]", ">", "0.8", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "1", "]", "\n", "", "elif", "0.65", "<", "image_tensor", ".", "data", "[", "0", "]", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.8", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "2", "]", "\n", "", "elif", "0.5", "<", "image_tensor", ".", "data", "[", "0", "]", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.65", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "3", "]", "\n", "", "elif", "0.35", "<", "image_tensor", ".", "data", "[", "0", "]", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.5", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "4", "]", "\n", "", "elif", "0.2", "<", "image_tensor", ".", "data", "[", "0", "]", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.35", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "5", "]", "\n", "", "else", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "6", "]", "\n", "", "", "", "return", "result", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.visual.onedim_superpixel2im": [[41, 63], ["numpy.zeros", "torch.div", "range", "np.zeros.astype", "numpy.array", "torch.div.size", "range", "torch.div.size", "torch.div.size", "torch.div.size"], "function", ["None"], ["", "def", "onedim_superpixel2im", "(", "image_tensor", ",", "imtype", "=", "np", ".", "uint8", ",", "dataset", "=", "'Pascal'", ")", ":", "\n", "    ", "if", "dataset", "==", "'Pascal'", ":", "\n", "        ", "palette_idx", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "255", ",", "0", ",", "0", "]", ",", "[", "155", ",", "100", ",", "0", "]", ",", "[", "128", ",", "128", ",", "0", "]", ",", "[", "0", ",", "128", ",", "128", "]", ",", "[", "0", ",", "100", ",", "155", "]", ",", "[", "0", ",", "0", ",", "255", "]", "]", ")", "#Pascal", "\n", "", "result", "=", "np", ".", "zeros", "(", "shape", "=", "(", "image_tensor", ".", "size", "(", "1", ")", ",", "image_tensor", ".", "size", "(", "2", ")", ",", "3", ")", ")", "\n", "image_tensor", "=", "torch", ".", "div", "(", "image_tensor", ",", "100", ")", "\n", "#image_numpy = image_tensor[0].cpu().float().numpy()", "\n", "for", "i", "in", "range", "(", "image_tensor", ".", "size", "(", "1", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "image_tensor", ".", "size", "(", "2", ")", ")", ":", "\n", "#result[i][j] = palette_idx[np.argmax(image_numpy[:,i,j]) + 1]", "\n", "            ", "if", "image_tensor", "[", "0", "]", "[", "i", "]", "[", "j", "]", ">", "0.8", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "1", "]", "\n", "", "elif", "0.65", "<", "image_tensor", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.8", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "2", "]", "\n", "", "elif", "0.5", "<", "image_tensor", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.65", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "3", "]", "\n", "", "elif", "0.35", "<", "image_tensor", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.5", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "4", "]", "\n", "", "elif", "0.2", "<", "image_tensor", "[", "0", "]", "[", "i", "]", "[", "j", "]", "<", "0.35", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "5", "]", "\n", "", "else", ":", "\n", "                ", "result", "[", "i", "]", "[", "j", "]", "=", "palette_idx", "[", "6", "]", "\n", "", "", "", "return", "result", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.utils.visual.save_image": [[65, 68], ["PIL.Image.fromarray", "Image.fromarray.save"], "function", ["None"], ["", "def", "save_image", "(", "image_numpy", ",", "image_path", ")", ":", "\n", "    ", "image_pil", "=", "Image", ".", "fromarray", "(", "image_numpy", ")", "\n", "image_pil", ".", "save", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.synthia_dataset.SYNTHIADataSet.__init__": [[13, 40], ["imageio.plugins.freeimage.download", "i_id.strip", "os.join", "os.join", "synthia_dataset.SYNTHIADataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "imageio", ".", "plugins", ".", "freeimage", ".", "download", "(", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "\n", "self", ".", "id_to_trainid", "=", "{", "3", ":", "0", ",", "4", ":", "1", ",", "2", ":", "2", ",", "21", ":", "3", ",", "5", ":", "4", ",", "7", ":", "5", ",", "\n", "15", ":", "6", ",", "9", ":", "7", ",", "6", ":", "8", ",", "16", ":", "9", ",", "1", ":", "10", ",", "10", ":", "11", ",", "17", ":", "12", ",", "\n", "8", ":", "13", ",", "18", ":", "14", ",", "19", ":", "15", ",", "20", ":", "16", ",", "12", ":", "17", ",", "11", ":", "18", "}", "\n", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"RGB/%s\"", "%", "name", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"GT/LABELS/%s\"", "%", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.synthia_dataset.SYNTHIADataSet.__len__": [[42, 44], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.synthia_dataset.SYNTHIADataSet.__scale__": [[45, 55], ["random.random", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__scale__", "(", "self", ")", ":", "\n", "        ", "cropsize", "=", "self", ".", "crop_size", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "r", "=", "random", ".", "random", "(", ")", "\n", "if", "r", ">", "0.7", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "1.1", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "1.1", ")", ")", "\n", "", "elif", "r", "<", "0.3", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "0.8", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "0.8", ")", ")", "\n", "\n", "", "", "return", "cropsize", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.synthia_dataset.SYNTHIADataSet.__getitem__": [[56, 96], ["synthia_dataset.SYNTHIADataSet.__scale__", "PIL.Image.open().convert", "PIL.Image.fromarray", "numpy.take.resize", "numpy.asarray.resize", "numpy.asarray", "numpy.asarray", "synthia_dataset.SYNTHIADataSet.id_to_trainid.items", "numpy.asarray", "numpy.take.transpose", "numpy.take.copy", "numpy.take.copy", "numpy.array", "numpy.array", "numpy.asarray", "numpy.ones", "numpy.take", "numpy.take", "print", "synthia_dataset.SYNTHIADataSet.__getitem__", "PIL.Image.open", "imageio.imread", "random.random", "range", "range"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__scale__", "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "cropsize", "=", "self", ".", "__scale__", "(", ")", "\n", "try", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "label", "=", "np", ".", "asarray", "(", "imageio", ".", "imread", "(", "datafiles", "[", "\"label\"", "]", ",", "format", "=", "'PNG-FI'", ")", ")", "[", ":", ",", ":", ",", "0", "]", "# uint16", "\n", "label", "=", "Image", ".", "fromarray", "(", "label", ")", "\n", "#label = Image.open(datafiles[\"label\"])", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "cropsize", ",", "Image", ".", "BICUBIC", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "float32", ")", "\n", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "                ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "", "label_copy", "=", "np", ".", "asarray", "(", "label_copy", ",", "np", ".", "float32", ")", "\n", "size", "=", "image", ".", "shape", "\n", "size_l", "=", "label", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "#randomly mirror the images", "\n", "if", "self", ".", "is_mirror", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "size", "[", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "idx_l", "=", "[", "i", "for", "i", "in", "range", "(", "size_l", "[", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "image", "=", "np", ".", "take", "(", "image", ",", "idx", ",", "axis", "=", "2", ")", "\n", "label_copy", "=", "np", ".", "take", "(", "label_copy", ",", "idx_l", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "'error'", ")", "\n", "index", "=", "index", "-", "1", "if", "index", ">", "0", "else", "index", "+", "1", "\n", "return", "self", ".", "__getitem__", "(", "index", ")", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.gta5_dataset.GTA5DataSet.__init__": [[11, 37], ["i_id.strip", "os.join", "os.join", "gta5_dataset.GTA5DataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "#self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"images/%s\"", "%", "name", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"labels/%s\"", "%", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.gta5_dataset.GTA5DataSet.__len__": [[39, 41], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.gta5_dataset.GTA5DataSet.__scale__": [[42, 52], ["random.random", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__scale__", "(", "self", ")", ":", "\n", "        ", "cropsize", "=", "self", ".", "crop_size", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "r", "=", "random", ".", "random", "(", ")", "\n", "if", "r", ">", "0.7", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "1.1", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "1.1", ")", ")", "\n", "", "elif", "r", "<", "0.3", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "0.8", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "0.8", ")", ")", "\n", "\n", "", "", "return", "cropsize", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.gta5_dataset.GTA5DataSet.__getitem__": [[53, 92], ["gta5_dataset.GTA5DataSet.__scale__", "PIL.Image.open().convert", "PIL.Image.open", "numpy.take.resize", "numpy.asarray.resize", "numpy.asarray", "numpy.asarray", "gta5_dataset.GTA5DataSet.id_to_trainid.items", "numpy.asarray", "numpy.take.transpose", "numpy.take.copy", "numpy.take.copy", "numpy.array", "numpy.array", "numpy.ones", "numpy.take", "numpy.take", "gta5_dataset.GTA5DataSet.__getitem__", "PIL.Image.open", "random.random", "range", "range"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__scale__", "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "cropsize", "=", "self", ".", "__scale__", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "Image", ".", "open", "(", "datafiles", "[", "\"label\"", "]", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "cropsize", ",", "Image", ".", "BICUBIC", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "float32", ")", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "                ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "\n", "", "label_copy", "=", "np", ".", "asarray", "(", "label_copy", ",", "np", ".", "float32", ")", "\n", "\n", "size", "=", "image", ".", "shape", "\n", "size_l", "=", "label", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "if", "self", ".", "is_mirror", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "size", "[", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "idx_l", "=", "[", "i", "for", "i", "in", "range", "(", "size_l", "[", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "image", "=", "np", ".", "take", "(", "image", ",", "idx", ",", "axis", "=", "2", ")", "\n", "label_copy", "=", "np", ".", "take", "(", "label_copy", ",", "idx_l", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "index", "=", "index", "-", "1", "if", "index", ">", "0", "else", "index", "+", "1", "\n", "return", "self", ".", "__getitem__", "(", "index", ")", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.cityscapes_dataset.cityscapesDataSet.__init__": [[11, 31], ["i_id.strip", "os.join", "cityscapes_dataset.cityscapesDataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "False", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ",", "set", "=", "'val'", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "#self.mean_bgr = np.array([72.30608881, 82.09696889, 71.60167789])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "set", "=", "set", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"leftImg8bit/%s/%s\"", "%", "(", "self", ".", "set", ",", "name", ")", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.cityscapes_dataset.cityscapesDataSet.__scale__": [[33, 43], ["random.random", "int", "int", "int", "int"], "methods", ["None"], ["", "", "def", "__scale__", "(", "self", ")", ":", "\n", "        ", "cropsize", "=", "self", ".", "crop_size", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "r", "=", "random", ".", "random", "(", ")", "\n", "if", "r", ">", "0.7", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "1.1", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "1.1", ")", ")", "\n", "", "elif", "r", "<", "0.3", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "0.8", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "0.8", ")", ")", "\n", "\n", "", "", "return", "cropsize", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.cityscapes_dataset.cityscapesDataSet.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.cityscapes_dataset.cityscapesDataSet.__getitem__": [[47, 73], ["cityscapes_dataset.cityscapesDataSet.__scale__", "PIL.Image.open().convert", "numpy.take.resize", "numpy.asarray", "numpy.take.transpose", "numpy.take.copy", "numpy.array", "numpy.array", "numpy.take", "cityscapes_dataset.cityscapesDataSet.__getitem__", "PIL.Image.open", "random.random", "range"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__scale__", "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "cropsize", "=", "self", ".", "__scale__", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "cropsize", ",", "Image", ".", "BICUBIC", ")", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "\n", "if", "self", ".", "is_mirror", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "size", "[", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "image", "=", "np", ".", "take", "(", "image", ",", "idx", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "index", "=", "index", "-", "1", "if", "index", ">", "0", "else", "index", "+", "1", "\n", "return", "self", ".", "__getitem__", "(", "index", ")", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.imagenetDataset.__init__": [[12, 32], ["os.join", "os.join", "imagenet_dataset.imagenetDataset.files.append", "os.listdir", "os.listdir", "os.listdir", "os.listdir", "int", "numpy.ceil", "fn.split", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", "=", "'/home/gabriel/data/imagenet'", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "256", ",", "256", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "#self.list_path = list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "#self.img_ids = [i_id.strip() for i_id in open(list_path)]", "\n", "accepted_extensions", "=", "[", "\"JPEG\"", "]", "\n", "self", ".", "img_ids", "=", "[", "fn", "for", "fn", "in", "os", ".", "listdir", "(", "root", ")", "if", "fn", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "in", "accepted_extensions", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "mean", "=", "mean", "\n", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ")", "\n", "#print img_file", "\n", "#print label_file", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.imagenetDataset.__len__": [[34, 36], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.imagenetDataset.__scale__": [[37, 47], ["random.random", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__scale__", "(", "self", ")", ":", "\n", "        ", "cropsize", "=", "self", ".", "crop_size", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "r", "=", "random", ".", "random", "(", ")", "\n", "if", "r", ">", "0.7", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "1.1", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "1.1", ")", ")", "\n", "", "elif", "r", "<", "0.3", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "0.8", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "0.8", ")", ")", "\n", "\n", "", "", "return", "cropsize", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.imagenetDataset.__getitem__": [[49, 85], ["imagenet_dataset.imagenetDataset.__scale__", "PIL.Image.open().convert", "image.transpose.transpose.resize", "numpy.asarray", "image_rgb.transpose.transpose.transpose", "image.transpose.transpose.transpose", "image.transpose.transpose.copy", "image_rgb.transpose.transpose.copy", "numpy.array", "print", "print", "print", "imagenet_dataset.imagenetDataset.__getitem__", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__scale__", "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "cropsize", "=", "self", ".", "__scale__", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "cropsize", ",", "Image", ".", "BICUBIC", ")", "\n", "#print('Image resized!')", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "#import pdb;pdb.set_trace()", "\n", "size", "=", "image", ".", "shape", "\n", "#print('convert to float 32')", "\n", "#print(size)", "\n", "image_rgb", "=", "image", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "#print('change to bgr')", "\n", "image", "-=", "self", ".", "mean", "\n", "#image_rgb = image_rgb[:, :, ::-1]  # change to BGR", "\n", "\n", "image_rgb", "=", "image_rgb", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "#print('normalized and transposed')                ", "\n", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "index", "=", "index", "-", "1", "if", "index", ">", "0", "else", "index", "+", "1", "\n", "print", "(", "'Exception'", ")", "\n", "print", "(", "index", ")", "\n", "print", "(", "datafiles", "[", "\"name\"", "]", ")", "\n", "return", "self", ".", "__getitem__", "(", "index", ")", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "image_rgb", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__init__": [[89, 117], ["i_id.strip", "os.join", "os.join", "imagenet_dataset.GTA5DataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "#self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"images/%s\"", "%", "name", ")", "\n", "#print img_file", "\n", "\n", "#print label_file", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__len__": [[119, 121], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__scale__": [[122, 132], ["random.random", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "__scale__", "(", "self", ")", ":", "\n", "        ", "cropsize", "=", "self", ".", "crop_size", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "r", "=", "random", ".", "random", "(", ")", "\n", "if", "r", ">", "0.7", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "1.1", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "1.1", ")", ")", "\n", "", "elif", "r", "<", "0.3", ":", "\n", "                ", "cropsize", "=", "(", "int", "(", "self", ".", "crop_size", "[", "0", "]", "*", "0.8", ")", ",", "int", "(", "self", ".", "crop_size", "[", "1", "]", "*", "0.8", ")", ")", "\n", "\n", "", "", "return", "cropsize", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__getitem__": [[133, 163], ["imagenet_dataset.GTA5DataSet.__scale__", "PIL.Image.open().convert", "numpy.take.resize", "numpy.asarray", "numpy.take.transpose", "numpy.take.copy", "numpy.array", "numpy.array", "numpy.take", "imagenet_dataset.GTA5DataSet.__getitem__", "PIL.Image.open", "random.random", "range", "range"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__scale__", "home.repos.pwc.inspect_result.gabriel-tjio_ash.dataset.imagenet_dataset.GTA5DataSet.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "cropsize", "=", "self", ".", "__scale__", "(", ")", "\n", "\n", "try", ":", "\n", "            ", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "cropsize", ",", "Image", ".", "BICUBIC", ")", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "\n", "size", "=", "image", ".", "shape", "\n", "size_l", "=", "label", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "if", "self", ".", "is_mirror", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "idx", "=", "[", "i", "for", "i", "in", "range", "(", "size", "[", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "idx_l", "=", "[", "i", "for", "i", "in", "range", "(", "size_l", "[", "1", "]", "-", "1", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "image", "=", "np", ".", "take", "(", "image", ",", "idx", ",", "axis", "=", "2", ")", "\n", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "index", "=", "index", "-", "1", "if", "index", ">", "0", "else", "index", "+", "1", "\n", "return", "self", ".", "__getitem__", "(", "index", ")", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.BasicBlock.__init__": [[24, 33], ["torch.Module.__init__", "CLAN_G.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "CLAN_G.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.__init__", "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.conv3x3", "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.BasicBlock.forward": [[34, 51], ["CLAN_G.BasicBlock.conv1", "CLAN_G.BasicBlock.bn1", "CLAN_G.BasicBlock.relu", "CLAN_G.BasicBlock.conv2", "CLAN_G.BasicBlock.bn2", "CLAN_G.BasicBlock.relu", "CLAN_G.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.Bottleneck.__init__": [[56, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "CLAN_G.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.BatchNorm2d", "CLAN_G.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.BatchNorm2d", "CLAN_G.Bottleneck.bn3.parameters", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.Bottleneck.forward": [[77, 98], ["CLAN_G.Bottleneck.conv1", "CLAN_G.Bottleneck.bn1", "CLAN_G.Bottleneck.relu", "CLAN_G.Bottleneck.conv2", "CLAN_G.Bottleneck.bn2", "CLAN_G.Bottleneck.relu", "CLAN_G.Bottleneck.conv3", "CLAN_G.Bottleneck.bn3", "CLAN_G.Bottleneck.relu", "CLAN_G.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.Classifier_Module.__init__": [[101, 110], ["torch.Module.__init__", "torch.ModuleList", "zip", "CLAN_G.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.Classifier_Module.forward": [[111, 116], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet.__init__": [[119, 143], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "CLAN_G.ResNet.bn1.parameters", "torch.ReLU", "torch.MaxPool2d", "CLAN_G.ResNet._make_layer", "CLAN_G.ResNet._make_layer", "CLAN_G.ResNet._make_layer", "CLAN_G.ResNet._make_layer", "CLAN_G.ResNet._make_pred_layer", "CLAN_G.ResNet._make_pred_layer", "CLAN_G.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.__init__", "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet._make_layer", "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet._make_layer", "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet._make_layer", "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet._make_layer", "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet._make_pred_layer", "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#        for i in m.parameters():", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet._make_layer": [[146, 162], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet._make_pred_layer": [[163, 165], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet.forward": [[166, 178], ["CLAN_G.ResNet.conv1", "CLAN_G.ResNet.bn1", "CLAN_G.ResNet.relu", "CLAN_G.ResNet.maxpool", "CLAN_G.ResNet.layer1", "CLAN_G.ResNet.layer2", "CLAN_G.ResNet.layer3", "CLAN_G.ResNet.layer4", "CLAN_G.ResNet.layer5", "CLAN_G.ResNet.layer6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer5", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer6", "(", "x", ")", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet.get_1x_lr_params_NOscale": [[179, 202], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet.get_10x_lr_params": [[203, 216], ["b.append", "b.append", "range", "CLAN_G.ResNet.layer5.parameters", "CLAN_G.ResNet.layer6.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "#b.append(self.layer7.parameters())", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet.optim_parameters": [[217, 220], ["CLAN_G.ResNet.get_1x_lr_params_NOscale", "CLAN_G.ResNet.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.ResNet.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.outS": [[7, 13], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.conv3x3": [[15, 19], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_G.Res_Deeplab": [[222, 225], ["CLAN_G.ResNet"], "function", ["None"], ["", "", "def", "Res_Deeplab", "(", "num_classes", "=", "21", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_D.FCDiscriminator.__init__": [[6, 16], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "ndf", "=", "64", ")", ":", "\n", "        ", "super", "(", "FCDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_classes", ",", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_D.FCDiscriminator.forward": [[17, 29], ["CLAN_D.FCDiscriminator.conv1", "CLAN_D.FCDiscriminator.leaky_relu", "CLAN_D.FCDiscriminator.conv2", "CLAN_D.FCDiscriminator.leaky_relu", "CLAN_D.FCDiscriminator.conv3", "CLAN_D.FCDiscriminator.leaky_relu", "CLAN_D.FCDiscriminator.conv4", "CLAN_D.FCDiscriminator.leaky_relu", "CLAN_D.FCDiscriminator.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_D.FCDiscriminator_Local.__init__": [[33, 43], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.Upsample"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "ndf", "=", "64", ")", ":", "\n", "        ", "super", "(", "FCDiscriminator_Local", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_classes", "+", "2048", ",", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "up_sample", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "32", ",", "mode", "=", "'bilinear'", ")", "\n", "#self.sigmoid = nn.Sigmoid()", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.CLAN_D.FCDiscriminator_Local.forward": [[46, 58], ["CLAN_D.FCDiscriminator_Local.conv1", "CLAN_D.FCDiscriminator_Local.leaky_relu", "CLAN_D.FCDiscriminator_Local.conv2", "CLAN_D.FCDiscriminator_Local.leaky_relu", "CLAN_D.FCDiscriminator_Local.conv3", "CLAN_D.FCDiscriminator_Local.leaky_relu", "CLAN_D.FCDiscriminator_Local.classifier", "CLAN_D.FCDiscriminator_Local.up_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "x", "=", "self", ".", "up_sample", "(", "x", ")", "\n", "#x = self.sigmoid(x) ", "\n", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.net2.Net.__init__": [[96, 110], ["torch.Module.__init__", "list", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MSELoss", "encoder.children", "getattr().parameters", "getattr"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "enc_layers", "=", "list", "(", "encoder", ".", "children", "(", ")", ")", "\n", "self", ".", "enc_1", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", ":", "4", "]", ")", "# input -> relu1_1", "\n", "self", ".", "enc_2", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", "4", ":", "11", "]", ")", "# relu1_1 -> relu2_1", "\n", "self", ".", "enc_3", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", "11", ":", "18", "]", ")", "# relu2_1 -> relu3_1", "\n", "self", ".", "enc_4", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", "18", ":", "31", "]", ")", "# relu3_1 -> relu4_1", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "# fix the encoder", "\n", "for", "name", "in", "[", "'enc_1'", ",", "'enc_2'", ",", "'enc_3'", ",", "'enc_4'", "]", ":", "\n", "            ", "for", "param", "in", "getattr", "(", "self", ",", "name", ")", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.net2.Net.encode_with_intermediate": [[112, 118], ["range", "getattr", "results.append", "getattr."], "methods", ["None"], ["", "", "", "def", "encode_with_intermediate", "(", "self", ",", "input", ")", ":", "\n", "        ", "results", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "func", "=", "getattr", "(", "self", ",", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "results", ".", "append", "(", "func", "(", "results", "[", "-", "1", "]", ")", ")", "\n", "", "return", "results", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.net2.Net.encode": [[120, 124], ["range", "getattr"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "input", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "input", "=", "getattr", "(", "self", ",", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "input", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.net2.Net.calc_content_loss": [[125, 129], ["net2.Net.mse_loss", "input.size", "target.size"], "methods", ["None"], ["", "def", "calc_content_loss", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "assert", "(", "input", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", ")", "\n", "assert", "(", "target", ".", "requires_grad", "is", "False", ")", "\n", "return", "self", ".", "mse_loss", "(", "input", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.net2.Net.calc_style_loss": [[130, 137], ["calc_mean_std", "calc_mean_std", "input.size", "target.size", "net2.Net.mse_loss", "net2.Net.mse_loss"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std"], ["", "def", "calc_style_loss", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "assert", "(", "input", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", ")", "\n", "assert", "(", "target", ".", "requires_grad", "is", "False", ")", "\n", "input_mean", ",", "input_std", "=", "calc_mean_std", "(", "input", ")", "\n", "target_mean", ",", "target_std", "=", "calc_mean_std", "(", "target", ")", "\n", "return", "self", ".", "mse_loss", "(", "input_mean", ",", "target_mean", ")", "+", "self", ".", "mse_loss", "(", "input_std", ",", "target_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.net2.Net.forward": [[138, 153], ["net2.Net.encode_with_intermediate", "net2.Net.encode", "adain", "net2.Net.decoder", "net2.Net.encode_with_intermediate", "net2.Net.calc_content_loss", "net2.Net.calc_style_loss", "range", "net2.Net.calc_style_loss"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.encode_with_intermediate", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.encode", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.encode_with_intermediate", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.calc_content_loss", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.calc_style_loss", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.calc_style_loss"], ["", "def", "forward", "(", "self", ",", "content", ",", "style", ",", "alpha", "=", "1.0", ")", ":", "\n", "        ", "assert", "0", "<=", "alpha", "<=", "1", "\n", "style_feats", "=", "self", ".", "encode_with_intermediate", "(", "style", ")", "\n", "content_feat", "=", "self", ".", "encode", "(", "content", ")", "\n", "t", "=", "adain", "(", "content_feat", ",", "style_feats", "[", "-", "1", "]", ")", "\n", "t", "=", "alpha", "*", "t", "+", "(", "1", "-", "alpha", ")", "*", "content_feat", "\n", "\n", "g_t", "=", "self", ".", "decoder", "(", "t", ")", "\n", "g_t_feats", "=", "self", ".", "encode_with_intermediate", "(", "g_t", ")", "\n", "\n", "loss_c", "=", "self", ".", "calc_content_loss", "(", "g_t_feats", "[", "-", "1", "]", ",", "t", ")", "\n", "loss_s", "=", "self", ".", "calc_style_loss", "(", "g_t_feats", "[", "0", "]", ",", "style_feats", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "loss_s", "+=", "self", ".", "calc_style_loss", "(", "g_t_feats", "[", "i", "]", ",", "style_feats", "[", "i", "]", ")", "\n", "", "return", "loss_c", ",", "loss_s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.cond_model.integrated_modelreadonly.__init__": [[23, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "integrated_modelreadonly", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# have to make sure x and y have matching dimensions", "\n", "\n", "self", ".", "condlayer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "19", ",", "128", ",", "4", ",", "4", ")", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "nn", ".", "InstanceNorm2d", "(", "128", ")", ",", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "1", ")", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "nn", ".", "InstanceNorm2d", "(", "256", ")", "\n", ")", "\n", "self", ".", "SFT_scale_conv0", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "1", ")", "\n", "self", ".", "SFT_scale_conv1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "1", ")", "\n", "self", ".", "SFT_shift_conv0", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "1", ")", "\n", "self", ".", "SFT_shift_conv1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.cond_model.integrated_modelreadonly.forward": [[36, 47], ["cond_model.integrated_modelreadonly.condlayer", "cond_model.integrated_modelreadonly.SFT_scale_conv1", "cond_model.integrated_modelreadonly.SFT_shift_conv1", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample.", "torch.Upsample.", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "cond_model.integrated_modelreadonly.SFT_scale_conv0", "cond_model.integrated_modelreadonly.SFT_shift_conv0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x: fea; y: cond (segmentation output Nx19xHxW)", "\n", "        ", "seg_f", "=", "self", ".", "condlayer", "(", "y", ")", "\n", "scale", "=", "self", ".", "SFT_scale_conv1", "(", "F", ".", "leaky_relu", "(", "self", ".", "SFT_scale_conv0", "(", "seg_f", ")", ",", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "shift", "=", "self", ".", "SFT_shift_conv1", "(", "F", ".", "leaky_relu", "(", "self", ".", "SFT_shift_conv0", "(", "seg_f", ")", ",", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "resize", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "scale1", "=", "resize", "(", "scale", ")", "\n", "shift1", "=", "resize", "(", "shift", ")", "\n", "fused", "=", "x", "*", "(", "scale1", "+", "1", ")", "+", "shift1", "\n", "\n", "return", "fused", ",", "scale", ",", "shift", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.cond_model.integrated_model.__init__": [[50, 62], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "integrated_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# have to make sure x and y have matching dimensions", "\n", "\n", "self", ".", "condlayer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "19", ",", "128", ",", "4", ",", "4", ")", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "nn", ".", "InstanceNorm2d", "(", "128", ")", ",", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "1", ")", ",", "nn", ".", "LeakyReLU", "(", "0.1", ",", "True", ")", ",", "nn", ".", "InstanceNorm2d", "(", "256", ")", "\n", ")", "\n", "self", ".", "SFT_scale_conv0", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "1", ")", "\n", "self", ".", "SFT_scale_conv1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "1", ")", "\n", "self", ".", "SFT_shift_conv0", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "1", ")", "\n", "self", ".", "SFT_shift_conv1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.model.cond_model.integrated_model.forward": [[63, 74], ["cond_model.integrated_model.condlayer", "cond_model.integrated_model.SFT_scale_conv1", "cond_model.integrated_model.SFT_shift_conv1", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample.", "torch.Upsample.", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "cond_model.integrated_model.SFT_scale_conv0", "cond_model.integrated_model.SFT_shift_conv0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x: fea; y: cond (segmentation output Nx19xHxW)", "\n", "        ", "seg_f", "=", "self", ".", "condlayer", "(", "y", ")", "\n", "scale", "=", "self", ".", "SFT_scale_conv1", "(", "F", ".", "leaky_relu", "(", "self", ".", "SFT_scale_conv0", "(", "seg_f", ")", ",", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "shift", "=", "self", ".", "SFT_shift_conv1", "(", "F", ".", "leaky_relu", "(", "self", ".", "SFT_shift_conv0", "(", "seg_f", ")", ",", "0.1", ",", "inplace", "=", "True", ")", ")", "\n", "resize", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "scale", "=", "resize", "(", "scale", ")", "\n", "shift", "=", "resize", "(", "shift", ")", "\n", "fused", "=", "x", "*", "(", "scale", "+", "1", ")", "+", "shift", "\n", "\n", "return", "fused", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.__init__": [[96, 110], ["torch.Module.__init__", "list", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MSELoss", "encoder.children", "getattr().parameters", "getattr"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "enc_layers", "=", "list", "(", "encoder", ".", "children", "(", ")", ")", "\n", "self", ".", "enc_1", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", ":", "4", "]", ")", "# input -> relu1_1", "\n", "self", ".", "enc_2", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", "4", ":", "11", "]", ")", "# relu1_1 -> relu2_1", "\n", "self", ".", "enc_3", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", "11", ":", "18", "]", ")", "# relu2_1 -> relu3_1", "\n", "self", ".", "enc_4", "=", "nn", ".", "Sequential", "(", "*", "enc_layers", "[", "18", ":", "31", "]", ")", "# relu3_1 -> relu4_1", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "mse_loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "# fix the encoder", "\n", "for", "name", "in", "[", "'enc_1'", ",", "'enc_2'", ",", "'enc_3'", ",", "'enc_4'", "]", ":", "\n", "            ", "for", "param", "in", "getattr", "(", "self", ",", "name", ")", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.encode_with_intermediate": [[112, 118], ["range", "getattr", "results.append", "getattr."], "methods", ["None"], ["", "", "", "def", "encode_with_intermediate", "(", "self", ",", "input", ")", ":", "\n", "        ", "results", "=", "[", "input", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "func", "=", "getattr", "(", "self", ",", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "results", ".", "append", "(", "func", "(", "results", "[", "-", "1", "]", ")", ")", "\n", "", "return", "results", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.encode": [[120, 124], ["range", "getattr"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "input", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "input", "=", "getattr", "(", "self", ",", "'enc_{:d}'", ".", "format", "(", "i", "+", "1", ")", ")", "(", "input", ")", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.calc_content_loss": [[125, 129], ["net2.Net.mse_loss", "input.size", "target.size"], "methods", ["None"], ["", "def", "calc_content_loss", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "assert", "(", "input", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", ")", "\n", "assert", "(", "target", ".", "requires_grad", "is", "False", ")", "\n", "return", "self", ".", "mse_loss", "(", "input", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.calc_style_loss": [[130, 137], ["calc_mean_std", "calc_mean_std", "input.size", "target.size", "net2.Net.mse_loss", "net2.Net.mse_loss"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std"], ["", "def", "calc_style_loss", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "assert", "(", "input", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", ")", "\n", "assert", "(", "target", ".", "requires_grad", "is", "False", ")", "\n", "input_mean", ",", "input_std", "=", "calc_mean_std", "(", "input", ")", "\n", "target_mean", ",", "target_std", "=", "calc_mean_std", "(", "target", ")", "\n", "return", "self", ".", "mse_loss", "(", "input_mean", ",", "target_mean", ")", "+", "self", ".", "mse_loss", "(", "input_std", ",", "target_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.forward": [[138, 153], ["net2.Net.encode_with_intermediate", "net2.Net.encode", "adain", "net2.Net.decoder", "net2.Net.encode_with_intermediate", "net2.Net.calc_content_loss", "net2.Net.calc_style_loss", "range", "net2.Net.calc_style_loss"], "methods", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.encode_with_intermediate", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.encode", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.encode_with_intermediate", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.calc_content_loss", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.calc_style_loss", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.net2.Net.calc_style_loss"], ["", "def", "forward", "(", "self", ",", "content", ",", "style", ",", "alpha", "=", "1.0", ")", ":", "\n", "        ", "assert", "0", "<=", "alpha", "<=", "1", "\n", "style_feats", "=", "self", ".", "encode_with_intermediate", "(", "style", ")", "\n", "content_feat", "=", "self", ".", "encode", "(", "content", ")", "\n", "t", "=", "adain", "(", "content_feat", ",", "style_feats", "[", "-", "1", "]", ")", "\n", "t", "=", "alpha", "*", "t", "+", "(", "1", "-", "alpha", ")", "*", "content_feat", "\n", "\n", "g_t", "=", "self", ".", "decoder", "(", "t", ")", "\n", "g_t_feats", "=", "self", ".", "encode_with_intermediate", "(", "g_t", ")", "\n", "\n", "loss_c", "=", "self", ".", "calc_content_loss", "(", "g_t_feats", "[", "-", "1", "]", ",", "t", ")", "\n", "loss_s", "=", "self", ".", "calc_style_loss", "(", "g_t_feats", "[", "0", "]", ",", "style_feats", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "            ", "loss_s", "+=", "self", ".", "calc_style_loss", "(", "g_t_feats", "[", "i", "]", ",", "style_feats", "[", "i", "]", ")", "\n", "", "return", "loss_c", ",", "loss_s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std": [[4, 13], ["feat.size", "feat_var.sqrt().view", "feat.view().mean().view", "len", "feat.view().var", "feat_var.sqrt", "feat.view().mean", "feat.view", "feat.view"], "function", ["None"], ["def", "calc_mean_std", "(", "feat", ",", "eps", "=", "1e-5", ")", ":", "\n", "# eps is a small value added to the variance to avoid divide-by-zero.", "\n", "    ", "size", "=", "feat", ".", "size", "(", ")", "\n", "assert", "(", "len", "(", "size", ")", "==", "4", ")", "\n", "N", ",", "C", "=", "size", "[", ":", "2", "]", "\n", "feat_var", "=", "feat", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ".", "var", "(", "dim", "=", "2", ")", "+", "eps", "\n", "feat_std", "=", "feat_var", ".", "sqrt", "(", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "feat_mean", "=", "feat", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "return", "feat_mean", ",", "feat_std", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std_gcn": [[14, 25], ["feat.size", "feat_var.repeat().view.repeat().view", "feat_var.repeat().view.sqrt().view", "feat.view().mean().repeat().view", "feat_mean.view.view", "len", "feat.view().var", "feat_var.repeat().view.repeat", "feat_var.repeat().view.sqrt", "feat.view().mean().repeat", "feat.view", "int", "feat.view().mean", "feat.view", "int"], "function", ["None"], ["", "def", "calc_mean_std_gcn", "(", "feat", ",", "eps", "=", "1e-5", ")", ":", "\n", "# eps is a small value added to the variance to avoid divide-by-zero.", "\n", "    ", "size", "=", "feat", ".", "size", "(", ")", "\n", "assert", "(", "len", "(", "size", ")", "==", "4", ")", "\n", "N", ",", "C", "=", "size", "[", ":", "2", "]", "\n", "feat_var", "=", "feat", ".", "view", "(", "N", ",", "int", "(", "C", "/", "16", ")", ",", "-", "1", ")", ".", "var", "(", "dim", "=", "2", ")", "+", "eps", "\n", "feat_var", "=", "feat_var", ".", "repeat", "(", "1", ",", "16", ",", "1", ")", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "feat_std", "=", "feat_var", ".", "sqrt", "(", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "feat_mean", "=", "feat", ".", "view", "(", "N", ",", "int", "(", "C", "/", "16", ")", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "repeat", "(", "1", ",", "16", ",", "1", ")", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "feat_mean", "=", "feat_mean", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "return", "feat_mean", ",", "feat_std", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std_gcn32": [[27, 38], ["feat.size", "feat_var.repeat().view.repeat().view", "feat_var.repeat().view.sqrt().view", "feat.view().mean().repeat().view", "feat_mean.view.view", "len", "feat.view().var", "feat_var.repeat().view.repeat", "feat_var.repeat().view.sqrt", "feat.view().mean().repeat", "feat.view", "int", "feat.view().mean", "feat.view", "int"], "function", ["None"], ["", "def", "calc_mean_std_gcn32", "(", "feat", ",", "eps", "=", "1e-5", ")", ":", "\n", "# eps is a small value added to the variance to avoid divide-by-zero.", "\n", "    ", "size", "=", "feat", ".", "size", "(", ")", "\n", "assert", "(", "len", "(", "size", ")", "==", "4", ")", "\n", "N", ",", "C", "=", "size", "[", ":", "2", "]", "\n", "feat_var", "=", "feat", ".", "view", "(", "N", ",", "int", "(", "C", "/", "32", ")", ",", "-", "1", ")", ".", "var", "(", "dim", "=", "2", ")", "+", "eps", "\n", "feat_var", "=", "feat_var", ".", "repeat", "(", "1", ",", "32", ",", "1", ")", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "feat_std", "=", "feat_var", ".", "sqrt", "(", ")", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "feat_mean", "=", "feat", ".", "view", "(", "N", ",", "int", "(", "C", "/", "32", ")", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "repeat", "(", "1", ",", "32", ",", "1", ")", ".", "view", "(", "N", ",", "C", ",", "-", "1", ")", "\n", "feat_mean", "=", "feat_mean", ".", "view", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "return", "feat_mean", ",", "feat_std", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.adaptive_instance_normalization": [[39, 49], ["content_feat.size", "function.calc_mean_std", "function.calc_mean_std", "content_std.expand", "style_mean.expand", "content_feat.size", "style_feat.size", "content_mean.expand", "style_std.expand"], "function", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std"], ["", "def", "adaptive_instance_normalization", "(", "content_feat", ",", "style_feat", ")", ":", "\n", "    ", "assert", "(", "content_feat", ".", "size", "(", ")", "[", ":", "2", "]", "==", "style_feat", ".", "size", "(", ")", "[", ":", "2", "]", ")", "\n", "size", "=", "content_feat", ".", "size", "(", ")", "\n", "style_mean", ",", "style_std", "=", "calc_mean_std", "(", "style_feat", ")", "\n", "# arbitrary mask", "\n", "content_mean", ",", "content_std", "=", "calc_mean_std", "(", "content_feat", ")", "\n", "\n", "normalized_feat", "=", "(", "content_feat", "-", "content_mean", ".", "expand", "(", "\n", "size", ")", ")", "/", "content_std", ".", "expand", "(", "size", ")", "\n", "return", "normalized_feat", "*", "style_std", ".", "expand", "(", "size", ")", "+", "style_mean", ".", "expand", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.adaptive_group_normalization": [[50, 60], ["content_feat.size", "function.calc_mean_std_gcn", "function.calc_mean_std_gcn", "content_std.expand", "style_mean.expand", "content_feat.size", "style_feat.size", "content_mean.expand", "style_std.expand"], "function", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std_gcn", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.calc_mean_std_gcn"], ["", "def", "adaptive_group_normalization", "(", "content_feat", ",", "style_feat", ")", ":", "\n", "    ", "assert", "(", "content_feat", ".", "size", "(", ")", "[", ":", "2", "]", "==", "style_feat", ".", "size", "(", ")", "[", ":", "2", "]", ")", "\n", "size", "=", "content_feat", ".", "size", "(", ")", "\n", "style_mean", ",", "style_std", "=", "calc_mean_std_gcn", "(", "style_feat", ")", "\n", "# arbitrary mask", "\n", "content_mean", ",", "content_std", "=", "calc_mean_std_gcn", "(", "content_feat", ")", "\n", "\n", "normalized_feat", "=", "(", "content_feat", "-", "content_mean", ".", "expand", "(", "\n", "size", ")", ")", "/", "content_std", ".", "expand", "(", "size", ")", "\n", "return", "normalized_feat", "*", "style_std", ".", "expand", "(", "size", ")", "+", "style_mean", ".", "expand", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function._calc_feat_flatten_mean_std": [[61, 69], ["isinstance", "feat.view", "feat.view.mean", "feat.view.std", "feat.size"], "function", ["None"], ["", "def", "_calc_feat_flatten_mean_std", "(", "feat", ")", ":", "\n", "# takes 3D feat (C, H, W), return mean and std of array within channels", "\n", "    ", "assert", "(", "feat", ".", "size", "(", ")", "[", "0", "]", "==", "3", ")", "\n", "assert", "(", "isinstance", "(", "feat", ",", "torch", ".", "FloatTensor", ")", ")", "\n", "feat_flatten", "=", "feat", ".", "view", "(", "3", ",", "-", "1", ")", "\n", "mean", "=", "feat_flatten", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "feat_flatten", ".", "std", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "feat_flatten", ",", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function._mat_sqrt": [[71, 74], ["torch.svd", "torch.mm", "torch.mm", "V.t", "D.pow().diag", "D.pow"], "function", ["None"], ["", "def", "_mat_sqrt", "(", "x", ")", ":", "\n", "    ", "U", ",", "D", ",", "V", "=", "torch", ".", "svd", "(", "x", ")", "\n", "return", "torch", ".", "mm", "(", "torch", ".", "mm", "(", "U", ",", "D", ".", "pow", "(", "0.5", ")", ".", "diag", "(", ")", ")", ",", "V", ".", "t", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function.coral": [[76, 103], ["function._calc_feat_flatten_mean_std", "function._calc_feat_flatten_mean_std", "torch.mm", "source_f_transfer.view", "source_f_std.expand_as", "torch.mm", "torch.eye", "target_f_std.expand_as", "torch.mm", "torch.eye", "function._mat_sqrt", "torch.mm", "target_f_mean.expand_as", "source.size", "source_f_mean.expand_as", "source_f_norm.t", "target_f_mean.expand_as", "target_f_norm.t", "torch.inverse", "target_f_std.expand_as", "function._mat_sqrt"], "function", ["home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function._calc_feat_flatten_mean_std", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function._calc_feat_flatten_mean_std", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function._mat_sqrt", "home.repos.pwc.inspect_result.gabriel-tjio_ash.pytorch_AdaIN.function._mat_sqrt"], ["", "def", "coral", "(", "source", ",", "target", ")", ":", "\n", "# assume both source and target are 3D array (C, H, W)", "\n", "# Note: flatten -> f", "\n", "\n", "    ", "source_f", ",", "source_f_mean", ",", "source_f_std", "=", "_calc_feat_flatten_mean_std", "(", "source", ")", "\n", "source_f_norm", "=", "(", "source_f", "-", "source_f_mean", ".", "expand_as", "(", "\n", "source_f", ")", ")", "/", "source_f_std", ".", "expand_as", "(", "source_f", ")", "\n", "source_f_cov_eye", "=", "torch", ".", "mm", "(", "source_f_norm", ",", "source_f_norm", ".", "t", "(", ")", ")", "+", "torch", ".", "eye", "(", "3", ")", "\n", "\n", "target_f", ",", "target_f_mean", ",", "target_f_std", "=", "_calc_feat_flatten_mean_std", "(", "target", ")", "\n", "target_f_norm", "=", "(", "target_f", "-", "target_f_mean", ".", "expand_as", "(", "\n", "target_f", ")", ")", "/", "target_f_std", ".", "expand_as", "(", "target_f", ")", "\n", "target_f_cov_eye", "=", "torch", ".", "mm", "(", "target_f_norm", ",", "target_f_norm", ".", "t", "(", ")", ")", "+", "torch", ".", "eye", "(", "3", ")", "\n", "\n", "source_f_norm_transfer", "=", "torch", ".", "mm", "(", "\n", "_mat_sqrt", "(", "target_f_cov_eye", ")", ",", "\n", "torch", ".", "mm", "(", "torch", ".", "inverse", "(", "_mat_sqrt", "(", "source_f_cov_eye", ")", ")", ",", "\n", "source_f_norm", ")", "\n", ")", "\n", "\n", "source_f_transfer", "=", "source_f_norm_transfer", "*", "target_f_std", ".", "expand_as", "(", "source_f_norm", ")", "+", "target_f_mean", ".", "expand_as", "(", "source_f_norm", ")", "\n", "\n", "return", "source_f_transfer", ".", "view", "(", "source", ".", "size", "(", ")", ")", "\n", "", ""]]}