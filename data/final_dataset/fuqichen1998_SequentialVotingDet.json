{"home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.train.main": [[14, 60], ["config.get_logger", "config.init_obj", "config.init_obj", "config.init_obj", "config.get_logger.info", "utils.prepare_device", "torch.nn.DataParallel.to", "getattr", "config.init_obj", "config.init_obj", "trainer.Trainer", "trainer.Trainer.train", "torch.nn.DataParallel.encoder.load_state_dict", "config.get_logger.info", "torch.nn.DataParallel.encoder.parameters", "torch.nn.DataParallel.transformer_encoder.parameters", "torch.nn.DataParallel.decoder.parameters", "config.get_logger.info", "len", "torch.nn.DataParallel", "getattr", "torch.nn.DataParallel.parameters", "torch.load"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.prepare_device", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.backbone.resnet.ResNetEncoder.load_state_dict"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "logger", "=", "config", ".", "get_logger", "(", "'train'", ")", "\n", "# setup data_loader instances", "\n", "data_loader", "=", "config", ".", "init_obj", "(", "'train_data_loader'", ",", "module_data", ")", "\n", "valid_data_loader", "=", "config", ".", "init_obj", "(", "'val_data_loader'", ",", "module_data", ")", "\n", "\n", "# build model architecture, then print to console", "\n", "model", "=", "config", ".", "init_obj", "(", "'arch'", ",", "module_arch", ")", "\n", "\n", "# load weights from pretraining", "\n", "if", "'pretrained_net'", "in", "config", ".", "config", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "config", "[", "'pretrained_net'", "]", ")", "[", "'state_dict'", "]", "\n", "model", ".", "encoder", ".", "load_state_dict", "(", "state_dict", ")", "\n", "logger", ".", "info", "(", "\"loaded pretrained weight from {}.\"", ".", "format", "(", "config", "[", "'pretrained_net'", "]", ")", ")", "\n", "for", "param", "in", "model", ".", "encoder", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "model", ".", "transformer_encoder", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "model", ".", "decoder", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "logger", ".", "info", "(", "\"Encoder Attention Decoder weights freezed.\"", ")", "\n", "\n", "", "logger", ".", "info", "(", "model", ")", "\n", "\n", "# prepare for (multi-device) GPU training", "\n", "device", ",", "device_ids", "=", "prepare_device", "(", "config", "[", "'n_gpu'", "]", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "if", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "\n", "# get function handles of loss and metrics", "\n", "", "criterion", "=", "getattr", "(", "module_loss", ",", "config", "[", "'loss'", "]", ")", "\n", "metrics", "=", "[", "getattr", "(", "module_metric", ",", "met", ")", "for", "met", "in", "config", "[", "'metrics'", "]", "]", "\n", "\n", "# build optimizer, learning rate scheduler. delete every lines containing lr_scheduler for disabling scheduler", "\n", "optimizer", "=", "config", ".", "init_obj", "(", "'optimizer'", ",", "torch", ".", "optim", ",", "model", ".", "parameters", "(", ")", ")", "\n", "lr_scheduler", "=", "config", ".", "init_obj", "(", "'lr_scheduler'", ",", "torch", ".", "optim", ".", "lr_scheduler", ",", "optimizer", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "model", ",", "criterion", ",", "metrics", ",", "optimizer", ",", "\n", "config", "=", "config", ",", "\n", "device", "=", "device", ",", "\n", "data_loader", "=", "data_loader", ",", "\n", "valid_data_loader", "=", "None", ",", "# skip validation to save time", "\n", "lr_scheduler", "=", "lr_scheduler", ")", "\n", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.test.main": [[15, 88], ["config.get_logger", "config.init_obj", "config.init_obj", "config.get_logger.info", "config.get_logger.info", "torch.load", "OrderedDict", "state_dict.items", "torch.nn.DataParallel.load_state_dict", "torch.device", "torch.nn.DataParallel.to", "torch.nn.DataParallel.eval", "pathlib.Path", "output_dir.mkdir", "write_pickle", "torch.nn.DataParallel", "type", "OrderedDict", "state_dict.items", "torch.no_grad", "enumerate", "torch.cuda.is_available", "tqdm.tqdm", "torch.nn.DataParallel.", "dets.append", "hand_bboxs.append", "obj_bboxs.append", "data.to", "GT.to", "handmask.to", "objmask.to", "objbox_mask.to", "model.voting.get_obj_predictions_iterative", "model.voting.get_obj_predictions_iterative", "copy.deepcopy", "copy.deepcopy", "hand_bbox[].detach().cpu().numpy", "obj_bbox[].detach().cpu().numpy", "hand_bbox[].detach().cpu", "obj_bbox[].detach().cpu", "hand_bbox[].detach", "obj_bbox[].detach"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.backbone.resnet.ResNetEncoder.load_state_dict", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.write_pickle", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_iterative.get_obj_predictions_iterative", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_iterative.get_obj_predictions_iterative"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "logger", "=", "config", ".", "get_logger", "(", "'test'", ")", "\n", "\n", "# setup data_loader instances", "\n", "data_loader", "=", "config", ".", "init_obj", "(", "'test_data_loader'", ",", "module_data", ")", "\n", "use_gt_hand", "=", "data_loader", ".", "dataset", ".", "use_gt_hand", "\n", "# build model architecture", "\n", "model", "=", "config", ".", "init_obj", "(", "'arch'", ",", "module_arch", ")", "\n", "logger", ".", "info", "(", "model", ")", "\n", "\n", "logger", ".", "info", "(", "'Loading checkpoint: {} ...'", ".", "format", "(", "config", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", ".", "resume", ")", "\n", "load_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "# if previous model is in data parallel", "\n", "new_model_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "'module'", "in", "k", ":", "\n", "            ", "k", "=", "k", "[", "7", ":", "]", "\n", "", "new_model_state_dict", "[", "k", "]", "=", "v", "\n", "", "state_dict", "=", "new_model_state_dict", "\n", "\n", "if", "config", "[", "'n_gpu'", "]", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "# if the current model in data parallel", "\n", "", "if", "type", "(", "model", ")", "==", "torch", ".", "nn", ".", "DataParallel", ":", "\n", "        ", "new_model_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'module'", "not", "in", "k", ":", "\n", "                ", "k", "=", "'module.'", "+", "k", "\n", "", "new_model_state_dict", "[", "k", "]", "=", "v", "\n", "", "state_dict", "=", "new_model_state_dict", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "# prepare model for testing", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# test dataloader must have a batch size of 1", "\n", "assert", "(", "data_loader", ".", "batch_size", "==", "1", ")", "\n", "dets", "=", "[", "]", "\n", "obj_bboxs", "=", "[", "]", "\n", "hand_bboxs", "=", "[", "]", "\n", "priors", "=", "data_loader", ".", "dataset", ".", "priors", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "data_loader", ")", ")", ":", "\n", "\n", "            ", "GT", ",", "handmask", ",", "objmask", ",", "objbox_mask", "=", "target", "[", "'GT'", "]", ",", "target", "[", "\n", "'handmask'", "]", ",", "target", "[", "'contact_mask'", "]", ",", "target", "[", "'objbox_mask'", "]", "\n", "hand_bbox", ",", "obj_bbox", "=", "target", "[", "'hand_bboxs'", "]", ",", "target", "[", "'obj_bboxs'", "]", "\n", "data", ",", "GT", ",", "handmask", ",", "objmask", ",", "objbox_mask", "=", "data", ".", "to", "(", "device", ")", ",", "GT", ".", "to", "(", "\n", "device", ")", ",", "handmask", ".", "to", "(", "device", ")", ",", "objmask", ".", "to", "(", "device", ")", ",", "objbox_mask", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "# iterative votings", "\n", "if", "use_gt_hand", ":", "\n", "                ", "rough_obj_det", ",", "det", "=", "get_obj_predictions_iterative", "(", "output", "[", "0", "]", ",", "handmask", "[", "0", "]", ",", "hand_bbox", "[", "0", "]", ",", "priors", ")", "\n", "", "else", ":", "\n", "                ", "rough_obj_det", ",", "det", "=", "get_obj_predictions_iterative", "(", "output", "[", "0", "]", ",", "handmask", "[", "0", "]", ",", "target", "[", "'doh100_hand_box'", "]", "[", "0", "]", ",", "priors", ")", "\n", "\n", "", "dets", ".", "append", "(", "det", ")", "\n", "hand_bboxs", ".", "append", "(", "deepcopy", "(", "hand_bbox", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "obj_bboxs", ".", "append", "(", "deepcopy", "(", "obj_bbox", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "\n", "", "", "save_dir", "=", "Path", "(", "config", "[", "'trainer'", "]", "[", "'save_dir'", "]", ")", "\n", "output_dir", "=", "save_dir", "/", "'outputs'", "/", "config", "[", "'name'", "]", "\n", "output_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# save output", "\n", "res", "=", "{", "'dets'", ":", "dets", ",", "'hand_bboxs'", ":", "hand_bboxs", "}", "\n", "fname", "=", "'pred_epoch={}_use_gt_hands={}.pickle'", ".", "format", "(", "load_epoch", ",", "use_gt_hand", ")", "\n", "write_pickle", "(", "res", ",", "output_dir", "/", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.__init__": [[12, 48], ["parse_config._update_config", "pathlib.Path", "parse_config.ConfigParser.save_dir.mkdir", "parse_config.ConfigParser.log_dir.mkdir", "utils.write_json", "logger.setup_logging", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config._update_config", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.write_json", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.logger.logger.setup_logging"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "resume", "=", "None", ",", "modification", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        class to parse configuration json file. Handles hyperparameters for training, initializations of modules, checkpoint saving\n        and logging module.\n        :param config: Dict containing configurations, hyperparameters for training. contents of `config.json` file for example.\n        :param resume: String, path to the checkpoint being loaded.\n        :param modification: Dict keychain:value, specifying position values to be replaced from config dict.\n        :param run_id: Unique Identifier for training processes. Used to save checkpoints and training log. Timestamp is being used as default\n        \"\"\"", "\n", "# load config file and apply modification", "\n", "self", ".", "_config", "=", "_update_config", "(", "config", ",", "modification", ")", "\n", "self", ".", "resume", "=", "resume", "\n", "\n", "# set save_dir where trained model and log will be saved.", "\n", "save_dir", "=", "Path", "(", "self", ".", "config", "[", "'trainer'", "]", "[", "'save_dir'", "]", ")", "\n", "\n", "exper_name", "=", "self", ".", "config", "[", "'name'", "]", "\n", "run_id", "=", "self", ".", "config", "[", "'run_id'", "]", "\n", "if", "run_id", "==", "''", ":", "# use timestamp as default run-id", "\n", "            ", "run_id", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "r'%m%d_%H%M%S'", ")", "\n", "", "self", ".", "_save_dir", "=", "save_dir", "/", "'models'", "/", "exper_name", "/", "run_id", "\n", "self", ".", "_log_dir", "=", "save_dir", "/", "'log'", "/", "exper_name", "/", "run_id", "\n", "\n", "# make directory for saving checkpoints and log.", "\n", "self", ".", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# save updated config file to the checkpoint dir", "\n", "write_json", "(", "self", ".", "config", ",", "self", ".", "save_dir", "/", "'config.json'", ")", "\n", "\n", "# configure logging module", "\n", "setup_logging", "(", "self", ".", "log_dir", ")", "\n", "self", ".", "log_levels", "=", "{", "\n", "0", ":", "logging", ".", "WARNING", ",", "\n", "1", ":", "logging", ".", "INFO", ",", "\n", "2", ":", "logging", ".", "DEBUG", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.from_args": [[50, 79], ["utils.read_json", "cls", "args.parse_args.parse_args.add_argument", "isinstance", "args.parse_args.parse_args.parse_args", "pathlib.Path", "pathlib.Path", "utils.read_json.update", "getattr", "utils.read_json", "parse_config._get_opt_name"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.read_json", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.read_json", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config._get_opt_name"], ["", "@", "classmethod", "\n", "def", "from_args", "(", "cls", ",", "args", ",", "options", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this class from some cli arguments. Used in train, test.\n        \"\"\"", "\n", "for", "opt", "in", "options", ":", "\n", "            ", "args", ".", "add_argument", "(", "*", "opt", ".", "flags", ",", "default", "=", "None", ",", "type", "=", "opt", ".", "type", ")", "\n", "", "if", "not", "isinstance", "(", "args", ",", "tuple", ")", ":", "\n", "            ", "args", "=", "args", ".", "parse_args", "(", ")", "\n", "\n", "", "if", "args", ".", "device", "is", "not", "None", ":", "\n", "            ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "device", "\n", "", "if", "args", ".", "resume", "is", "not", "None", ":", "\n", "            ", "resume", "=", "Path", "(", "args", ".", "resume", ")", "\n", "cfg_fname", "=", "resume", ".", "parent", "/", "'config.json'", "\n", "", "else", ":", "\n", "            ", "msg_no_cfg", "=", "\"Configuration file need to be specified. Add '-c config.json', for example.\"", "\n", "assert", "args", ".", "config", "is", "not", "None", ",", "msg_no_cfg", "\n", "resume", "=", "None", "\n", "cfg_fname", "=", "Path", "(", "args", ".", "config", ")", "\n", "\n", "", "config", "=", "read_json", "(", "cfg_fname", ")", "\n", "if", "args", ".", "config", "and", "resume", ":", "\n", "# update new config for fine-tuning", "\n", "            ", "config", ".", "update", "(", "read_json", "(", "args", ".", "config", ")", ")", "\n", "\n", "# parse custom cli options into dictionary", "\n", "", "modification", "=", "{", "opt", ".", "target", ":", "getattr", "(", "args", ",", "_get_opt_name", "(", "opt", ".", "flags", ")", ")", "for", "opt", "in", "options", "}", "\n", "return", "cls", "(", "config", ",", "resume", ",", "modification", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.init_obj": [[80, 94], ["dict", "all", "dict.update", "getattr"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.update"], ["", "def", "init_obj", "(", "self", ",", "name", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Finds a function handle with the name given as 'type' in config, and returns the\n        instance initialized with corresponding arguments given.\n\n        `object = config.init_obj('name', module, a, b=1)`\n        is equivalent to\n        `object = module.name(a, b=1)`\n        \"\"\"", "\n", "module_name", "=", "self", "[", "name", "]", "[", "'type'", "]", "\n", "module_args", "=", "dict", "(", "self", "[", "name", "]", "[", "'args'", "]", ")", "\n", "assert", "all", "(", "[", "k", "not", "in", "module_args", "for", "k", "in", "kwargs", "]", ")", ",", "'Overwriting kwargs given in config file is not allowed'", "\n", "module_args", ".", "update", "(", "kwargs", ")", "\n", "return", "getattr", "(", "module", ",", "module_name", ")", "(", "*", "args", ",", "**", "module_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.init_ftn": [[95, 109], ["dict", "all", "dict.update", "functools.partial", "getattr"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.update"], ["", "def", "init_ftn", "(", "self", ",", "name", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Finds a function handle with the name given as 'type' in config, and returns the\n        function with given arguments fixed with functools.partial.\n\n        `function = config.init_ftn('name', module, a, b=1)`\n        is equivalent to\n        `function = lambda *args, **kwargs: module.name(a, *args, b=1, **kwargs)`.\n        \"\"\"", "\n", "module_name", "=", "self", "[", "name", "]", "[", "'type'", "]", "\n", "module_args", "=", "dict", "(", "self", "[", "name", "]", "[", "'args'", "]", ")", "\n", "assert", "all", "(", "[", "k", "not", "in", "module_args", "for", "k", "in", "kwargs", "]", ")", ",", "'Overwriting kwargs given in config file is not allowed'", "\n", "module_args", ".", "update", "(", "kwargs", ")", "\n", "return", "partial", "(", "getattr", "(", "module", ",", "module_name", ")", ",", "*", "args", ",", "**", "module_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.__getitem__": [[110, 113], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Access items like ordinary dict.\"\"\"", "\n", "return", "self", ".", "config", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.get_logger": [[114, 120], ["logging.getLogger", "logging.getLogger.setLevel", "parse_config.ConfigParser.log_levels.keys"], "methods", ["None"], ["", "def", "get_logger", "(", "self", ",", "name", ",", "verbosity", "=", "2", ")", ":", "\n", "        ", "msg_verbosity", "=", "'verbosity option {} is invalid. Valid options are {}.'", ".", "format", "(", "verbosity", ",", "self", ".", "log_levels", ".", "keys", "(", ")", ")", "\n", "assert", "verbosity", "in", "self", ".", "log_levels", ",", "msg_verbosity", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "self", ".", "log_levels", "[", "verbosity", "]", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.config": [[122, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.save_dir": [[126, 129], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "save_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.log_dir": [[130, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "log_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config._update_config": [[135, 143], ["modification.items", "parse_config._set_by_path"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config._set_by_path"], ["", "", "def", "_update_config", "(", "config", ",", "modification", ")", ":", "\n", "    ", "if", "modification", "is", "None", ":", "\n", "        ", "return", "config", "\n", "\n", "", "for", "k", ",", "v", "in", "modification", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "is", "not", "None", ":", "\n", "            ", "_set_by_path", "(", "config", ",", "k", ",", "v", ")", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config._get_opt_name": [[144, 149], ["flags[].replace", "flg.startswith", "flg.replace"], "function", ["None"], ["", "def", "_get_opt_name", "(", "flags", ")", ":", "\n", "    ", "for", "flg", "in", "flags", ":", "\n", "        ", "if", "flg", ".", "startswith", "(", "'--'", ")", ":", "\n", "            ", "return", "flg", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "", "", "return", "flags", "[", "0", "]", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config._set_by_path": [[150, 154], ["keys.split.split", "parse_config._get_by_path"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config._get_by_path"], ["", "def", "_set_by_path", "(", "tree", ",", "keys", ",", "value", ")", ":", "\n", "    ", "\"\"\"Set a value in a nested object in tree by sequence of keys.\"\"\"", "\n", "keys", "=", "keys", ".", "split", "(", "';'", ")", "\n", "_get_by_path", "(", "tree", ",", "keys", "[", ":", "-", "1", "]", ")", "[", "keys", "[", "-", "1", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config._get_by_path": [[155, 158], ["functools.reduce"], "function", ["None"], ["", "def", "_get_by_path", "(", "tree", ",", "keys", ")", ":", "\n", "    ", "\"\"\"Access a nested object in tree by sequence of keys.\"\"\"", "\n", "return", "reduce", "(", "getitem", ",", "keys", ",", "tree", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.__init__": [[66, 71], ["pandas.DataFrame", "util.MetricTracker.reset"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.reset"], ["    ", "def", "__init__", "(", "self", ",", "*", "keys", ",", "writer", "=", "None", ")", ":", "\n", "        ", "self", ".", "writer", "=", "writer", "\n", "self", ".", "_data", "=", "pd", ".", "DataFrame", "(", "\n", "index", "=", "keys", ",", "columns", "=", "[", "'total'", ",", "'counts'", ",", "'average'", "]", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.reset": [[72, 75], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "col", "in", "self", ".", "_data", ".", "columns", ":", "\n", "            ", "self", ".", "_data", "[", "col", "]", ".", "values", "[", ":", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.update": [[76, 83], ["util.MetricTracker.writer.add_scalar"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "key", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "key", ",", "value", ")", "\n", "", "self", ".", "_data", ".", "total", "[", "key", "]", "+=", "value", "*", "n", "\n", "self", ".", "_data", ".", "counts", "[", "key", "]", "+=", "n", "\n", "self", ".", "_data", ".", "average", "[", "key", "]", "=", "self", ".", "_data", ".", "total", "[", "key", "]", "/", "self", ".", "_data", ".", "counts", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.avg": [[84, 86], ["None"], "methods", ["None"], ["", "def", "avg", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_data", ".", "average", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.result": [[87, 89], ["dict"], "methods", ["None"], ["", "def", "result", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "self", ".", "_data", ".", "average", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.ensure_dir": [[10, 14], ["pathlib.Path", "pathlib.Path.is_dir", "pathlib.Path.mkdir"], "function", ["None"], ["def", "ensure_dir", "(", "dirname", ")", ":", "\n", "    ", "dirname", "=", "Path", "(", "dirname", ")", "\n", "if", "not", "dirname", ".", "is_dir", "(", ")", ":", "\n", "        ", "dirname", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.read_json": [[16, 20], ["pathlib.Path", "pathlib.Path.open", "json.load"], "function", ["None"], ["", "", "def", "read_json", "(", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'rt'", ")", "as", "handle", ":", "\n", "        ", "return", "json", ".", "load", "(", "handle", ",", "object_hook", "=", "OrderedDict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.write_json": [[22, 26], ["pathlib.Path", "pathlib.Path.open", "json.dump"], "function", ["None"], ["", "", "def", "write_json", "(", "content", ",", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'wt'", ")", "as", "handle", ":", "\n", "        ", "json", ".", "dump", "(", "content", ",", "handle", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.read_pickle": [[28, 33], ["pathlib.Path", "pathlib.Path.open", "pickle.load"], "function", ["None"], ["", "", "def", "read_pickle", "(", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'rb'", ")", "as", "handle", ":", "\n", "        ", "content", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "return", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.write_pickle": [[35, 39], ["pathlib.Path", "pathlib.Path.open", "pickle.dump"], "function", ["None"], ["", "", "def", "write_pickle", "(", "content", ",", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "content", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.inf_loop": [[41, 45], ["itertools.repeat"], "function", ["None"], ["", "", "def", "inf_loop", "(", "data_loader", ")", ":", "\n", "    ", "''' wrapper function for endless data loader. '''", "\n", "for", "loader", "in", "repeat", "(", "data_loader", ")", ":", "\n", "        ", "yield", "from", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.prepare_device": [[47, 63], ["torch.cuda.device_count", "torch.device", "list", "print", "print", "range"], "function", ["None"], ["", "", "def", "prepare_device", "(", "n_gpu_use", ")", ":", "\n", "    ", "\"\"\"\n    setup GPU device if available. get gpu device indices which are used for DataParallel\n    \"\"\"", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "n_gpu_use", ">", "0", "and", "n_gpu", "==", "0", ":", "\n", "        ", "print", "(", "\"Warning: There\\'s no GPU available on this machine,\"", "\n", "\"training will be performed on CPU.\"", ")", "\n", "n_gpu_use", "=", "0", "\n", "", "if", "n_gpu_use", ">", "n_gpu", ":", "\n", "        ", "print", "(", "f\"Warning: The number of GPU\\'s configured to use is {n_gpu_use}, but only {n_gpu} are \"", "\n", "\"available on this machine.\"", ")", "\n", "n_gpu_use", "=", "n_gpu", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "n_gpu_use", ">", "0", "else", "'cpu'", ")", "\n", "list_ids", "=", "list", "(", "range", "(", "n_gpu_use", ")", ")", "\n", "return", "device", ",", "list_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.metric.get_iou": [[5, 30], ["max", "max", "min", "min", "min", "max", "min", "max", "min", "max", "min", "max", "float"], "function", ["None"], ["def", "get_iou", "(", "bb1", ",", "bb2", ")", ":", "\n", "\n", "    ", "bb1", "[", "0", "]", ",", "bb1", "[", "2", "]", "=", "min", "(", "bb1", "[", "0", "]", ",", "bb1", "[", "2", "]", ")", ",", "max", "(", "bb1", "[", "0", "]", ",", "bb1", "[", "2", "]", ")", "\n", "bb1", "[", "1", "]", ",", "bb1", "[", "3", "]", "=", "min", "(", "bb1", "[", "1", "]", ",", "bb1", "[", "3", "]", ")", ",", "max", "(", "bb1", "[", "1", "]", ",", "bb1", "[", "3", "]", ")", "\n", "bb2", "[", "0", "]", ",", "bb2", "[", "2", "]", "=", "min", "(", "bb2", "[", "0", "]", ",", "bb2", "[", "2", "]", ")", ",", "max", "(", "bb2", "[", "0", "]", ",", "bb2", "[", "2", "]", ")", "\n", "bb2", "[", "1", "]", ",", "bb2", "[", "3", "]", "=", "min", "(", "bb2", "[", "1", "]", ",", "bb2", "[", "3", "]", ")", ",", "max", "(", "bb2", "[", "1", "]", ",", "bb2", "[", "3", "]", ")", "\n", "\n", "# determine the coordinates of the intersection rectangle", "\n", "x_left", "=", "max", "(", "bb1", "[", "0", "]", ",", "bb2", "[", "0", "]", ")", "\n", "y_top", "=", "max", "(", "bb1", "[", "1", "]", ",", "bb2", "[", "1", "]", ")", "\n", "x_right", "=", "min", "(", "bb1", "[", "2", "]", ",", "bb2", "[", "2", "]", ")", "\n", "y_bottom", "=", "min", "(", "bb1", "[", "3", "]", ",", "bb2", "[", "3", "]", ")", "\n", "\n", "if", "x_right", "<", "x_left", "or", "y_bottom", "<", "y_top", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "intersection_area", "=", "(", "x_right", "-", "x_left", ")", "*", "(", "y_bottom", "-", "y_top", ")", "\n", "\n", "bb1_area", "=", "(", "bb1", "[", "2", "]", "-", "bb1", "[", "0", "]", ")", "*", "(", "bb1", "[", "3", "]", "-", "bb1", "[", "1", "]", ")", "\n", "bb2_area", "=", "(", "bb2", "[", "2", "]", "-", "bb2", "[", "0", "]", ")", "*", "(", "bb2", "[", "3", "]", "-", "bb2", "[", "1", "]", ")", "\n", "\n", "iou", "=", "intersection_area", "/", "float", "(", "bb1_area", "+", "bb2_area", "-", "intersection_area", ")", "\n", "assert", "iou", ">=", "0.0", "\n", "assert", "iou", "<=", "1.0", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.metric.eval_obj_bbox": [[32, 37], ["metric.get_iou", "gt_obj_bbox.any", "obj_bbox.any"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.metric.get_iou"], ["", "def", "eval_obj_bbox", "(", "obj_bbox", ",", "gt_obj_bbox", ")", ":", "\n", "    ", "if", "not", "gt_obj_bbox", ".", "any", "(", ")", "and", "not", "obj_bbox", ".", "any", "(", ")", ":", "\n", "        ", "return", "1.", "# max", "\n", "", "else", ":", "\n", "        ", "return", "get_iou", "(", "obj_bbox", ",", "gt_obj_bbox", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.metric.voc_ap": [[39, 71], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["", "", "def", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", "=", "False", ")", ":", "\n", "  ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n  Compute VOC AP given precision and recall.\n  If use_07_metric is true, uses the\n  VOC 07 11 point method (default:False).\n  \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "    ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "      ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "        ", "p", "=", "0", "\n", "", "else", ":", "\n", "        ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "    ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "      ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.metric.get_AP_": [[73, 161], ["enumerate", "enumerate", "numpy.concatenate", "numpy.concatenate", "numpy.argsort", "numpy.sort", "len", "numpy.zeros", "numpy.zeros", "range", "numpy.cumsum", "numpy.cumsum", "metric.voc_ap", "np.concatenate.append", "np.concatenate.append", "float", "numpy.maximum", "range", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax", "range", "len", "correct_det_indexs[].append", "numpy.finfo", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.metric.voc_ap"], ["", "def", "get_AP_", "(", "det_bboxes", ",", "det_scores", ",", "gt_bboxes", ",", "iou_thres", "=", "0.5", ",", "score_thres", "=", "0.", ",", "use_07_metric", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:\n            det_bboxes: list of ndarray [(N, 4)] with len of num_images\n            det_scores: list of ndarray [(N,)] with len of num_images\n            \n            gt_bboxes: list of ndarray [(M, 4)] with len of num_images\n    Output: \n            ap: average precision in float\n    \"\"\"", "\n", "# parse gt_bboxes to a dict", "\n", "npos", "=", "0", "\n", "img_recs", "=", "{", "}", "\n", "for", "i", ",", "bboxs", "in", "enumerate", "(", "gt_bboxes", ")", ":", "\n", "        ", "npos", "+=", "bboxs", ".", "shape", "[", "0", "]", "\n", "img_recs", "[", "i", "]", "=", "bboxs", "\n", "\n", "# parse det_boxes, det_scores to an array", "\n", "", "det_recs", "=", "[", "]", "\n", "confidences", "=", "[", "]", "\n", "img_ids", "=", "[", "]", "\n", "index_ids", "=", "[", "]", "\n", "for", "i", ",", "det_bbox", "in", "enumerate", "(", "det_bboxes", ")", ":", "\n", "        ", "det_score", "=", "det_scores", "[", "i", "]", "\n", "keep_idxs", "=", "det_score", ">", "score_thres", "\n", "det_bbox", ",", "det_score", "=", "det_bbox", "[", "keep_idxs", "]", ",", "det_score", "[", "keep_idxs", "]", "\n", "\n", "det_recs", ".", "append", "(", "det_bbox", ")", "\n", "confidences", ".", "append", "(", "det_score", ")", "\n", "img_ids", "+=", "[", "i", "]", "*", "det_score", ".", "shape", "[", "0", "]", "\n", "index_ids", "+=", "[", "idx", "for", "idx", "in", "range", "(", "det_score", ".", "shape", "[", "0", "]", ")", "]", "\n", "", "det_recs", "=", "np", ".", "concatenate", "(", "det_recs", ")", "\n", "confidences", "=", "np", ".", "concatenate", "(", "confidences", ")", "\n", "\n", "# sort the det_recs by confidences", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidences", ")", "\n", "sorted_confidences", "=", "np", ".", "sort", "(", "-", "confidences", ")", "\n", "det_recs", "=", "det_recs", "[", "sorted_ind", ",", ":", "]", "\n", "img_ids", "=", "[", "img_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "index_ids", "=", "[", "index_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# initialize tp/fp counting", "\n", "nd", "=", "len", "(", "img_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "correct_det_indexs", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "det_bboxes", ")", ")", "]", "\n", "\n", "# evaluate each det_bbox", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "        ", "img_id", "=", "img_ids", "[", "d", "]", "\n", "index_id", "=", "index_ids", "[", "d", "]", "\n", "R", "=", "img_recs", "[", "img_id", "]", "# (n, 4)", "\n", "det_rec", "=", "det_recs", "[", "d", "]", "# (4,)", "\n", "det_confidence", "=", "sorted_confidences", "[", "d", "]", "\n", "if", "R", ".", "size", ">", "0", ":", "\n", "# compute ious", "\n", "            ", "ixmin", "=", "np", ".", "maximum", "(", "R", "[", ":", ",", "0", "]", ",", "det_rec", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "R", "[", ":", ",", "1", "]", ",", "det_rec", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "R", "[", ":", ",", "2", "]", ",", "det_rec", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "R", "[", ":", ",", "3", "]", ",", "det_rec", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "uni", "=", "(", "(", "det_rec", "[", "2", "]", "-", "det_rec", "[", "0", "]", "+", "1.", ")", "*", "(", "det_rec", "[", "3", "]", "-", "det_rec", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "R", "[", ":", ",", "2", "]", "-", "R", "[", ":", ",", "0", "]", "+", "1.", ")", "*", "(", "R", "[", ":", ",", "3", "]", "-", "R", "[", ":", ",", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "# check tp/fp", "\n", "if", "ovmax", ">", "iou_thres", ":", "\n", "                ", "tp", "[", "d", "]", "=", "1.", "\n", "img_recs", "[", "img_id", "]", "=", "R", "[", "np", ".", "arange", "(", "R", ".", "shape", "[", "0", "]", ")", "!=", "jmax", "]", "\n", "correct_det_indexs", "[", "img_id", "]", ".", "append", "(", "index_id", ")", "\n", "", "else", ":", "\n", "                ", "fp", "[", "d", "]", "=", "1", "\n", "", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.", "\n", "\n", "# compute precision recall", "\n", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "prec", ",", "rec", ",", "ap", ",", "correct_det_indexs", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.metric.get_AP_HO": [[163, 280], ["enumerate", "enumerate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.argsort", "len", "numpy.zeros", "numpy.zeros", "range", "numpy.cumsum", "numpy.cumsum", "metric.voc_ap", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "float", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.max", "numpy.argmax", "gt_obj_bbox[].any", "numpy.finfo", "metric.eval_obj_bbox", "numpy.arange", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.metric.voc_ap", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.metric.eval_obj_bbox"], ["", "def", "get_AP_HO", "(", "\n", "hand_bboxes", ",", "hand_scores", ",", "obj_bboxes", ",", "obj_scores", ",", "confidence_scores", ",", "\n", "gt_hand_bboxes", ",", "gt_obj_bboxes", ",", "\n", "iou_thres", "=", "0.5", ",", "hand_score_thres", "=", "0.", ",", "obj_score_thres", "=", "0.", ",", "\n", "use_07_metric", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:\n            hand_bboxes: list of ndarray [(N, 4)] with len of num_images\n            hand_scores: list of ndarray [(N,)] with len of num_images\n            obj_bboxes: list of ndarray [(N, 4)] with len of num_images\n            obj_scores: list of ndarray [(N,)] with len of num_images\n            \n            gt_hand_bboxes: list of ndarray [(M, 4)] with len of num_images\n            gt_obj_bboxes: list of ndarray [(M, 4)] with len of num_images\n    Output: \n            ap: average precision in float\n    \"\"\"", "\n", "# parse gt_bboxes to a dict", "\n", "npos", "=", "0", "\n", "img_recs", "=", "{", "}", "\n", "for", "i", ",", "bboxs", "in", "enumerate", "(", "gt_hand_bboxes", ")", ":", "\n", "        ", "npos", "+=", "bboxs", ".", "shape", "[", "0", "]", "\n", "img_recs", "[", "i", "]", "=", "{", "'hand_bbox'", ":", "bboxs", ",", "'obj_bbox'", ":", "gt_obj_bboxes", "[", "i", "]", "}", "\n", "\n", "# parse det_boxes, det_scores to an array", "\n", "", "hand_recs", "=", "[", "]", "\n", "obj_recs", "=", "[", "]", "\n", "hand_confidences", "=", "[", "]", "\n", "obj_confidences", "=", "[", "]", "\n", "final_confidences", "=", "[", "]", "\n", "img_ids", "=", "[", "]", "\n", "\n", "for", "i", ",", "hand_bbox", "in", "enumerate", "(", "hand_bboxes", ")", ":", "\n", "        ", "hand_score", "=", "hand_scores", "[", "i", "]", "\n", "keep_idxs", "=", "hand_score", ">", "hand_score_thres", "\n", "hand_bbox", ",", "hand_score", "=", "hand_bbox", "[", "keep_idxs", "]", ",", "hand_score", "[", "keep_idxs", "]", "\n", "obj_bbox", ",", "obj_score", "=", "obj_bboxes", "[", "i", "]", "[", "keep_idxs", "]", ",", "obj_scores", "[", "i", "]", "[", "keep_idxs", "]", "\n", "confidence_score", "=", "confidence_scores", "[", "i", "]", "[", "keep_idxs", "]", "\n", "\n", "hand_recs", ".", "append", "(", "hand_bbox", ")", "\n", "obj_recs", ".", "append", "(", "obj_bbox", ")", "\n", "hand_confidences", ".", "append", "(", "hand_score", ")", "\n", "obj_confidences", ".", "append", "(", "obj_score", ")", "\n", "final_confidences", ".", "append", "(", "confidence_score", ")", "\n", "img_ids", "+=", "[", "i", "]", "*", "hand_score", ".", "shape", "[", "0", "]", "\n", "\n", "", "hand_recs", "=", "np", ".", "concatenate", "(", "hand_recs", ")", "\n", "obj_recs", "=", "np", ".", "concatenate", "(", "obj_recs", ")", "\n", "hand_confidences", "=", "np", ".", "concatenate", "(", "hand_confidences", ")", "\n", "obj_confidences", "=", "np", ".", "concatenate", "(", "obj_confidences", ")", "\n", "final_confidences", "=", "np", ".", "concatenate", "(", "final_confidences", ")", "\n", "\n", "# define confidence to sort the bounding box", "\n", "confidence_to_sort", "=", "final_confidences", "\n", "# sort the det_recs by confidences", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence_to_sort", ")", "\n", "hand_recs", "=", "hand_recs", "[", "sorted_ind", ",", ":", "]", "\n", "obj_recs", "=", "obj_recs", "[", "sorted_ind", ",", ":", "]", "\n", "img_ids", "=", "[", "img_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# initialize tp/fp counting", "\n", "nd", "=", "len", "(", "img_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "# for analysis", "\n", "tp_ho_counter", "=", "0", "\n", "tp_h__counter", "=", "0", "\n", "\n", "# evaluate each det_bbox", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "        ", "img_id", "=", "img_ids", "[", "d", "]", "\n", "gt_hand_bbox", "=", "img_recs", "[", "img_id", "]", "[", "'hand_bbox'", "]", "# (n, 4)", "\n", "gt_obj_bbox", "=", "img_recs", "[", "img_id", "]", "[", "'obj_bbox'", "]", "# (n, 4)", "\n", "\n", "hand_rec", "=", "hand_recs", "[", "d", "]", "# (4,)", "\n", "obj_rec", "=", "obj_recs", "[", "d", "]", "# (4,)", "\n", "if", "gt_hand_bbox", ".", "size", ">", "0", ":", "\n", "# compute ious", "\n", "            ", "ixmin", "=", "np", ".", "maximum", "(", "gt_hand_bbox", "[", ":", ",", "0", "]", ",", "hand_rec", "[", "0", "]", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "gt_hand_bbox", "[", ":", ",", "1", "]", ",", "hand_rec", "[", "1", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "gt_hand_bbox", "[", ":", ",", "2", "]", ",", "hand_rec", "[", "2", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "gt_hand_bbox", "[", ":", ",", "3", "]", ",", "hand_rec", "[", "3", "]", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", "+", "1.", ",", "0.", ")", "\n", "ih", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", "+", "1.", ",", "0.", ")", "\n", "inters", "=", "iw", "*", "ih", "\n", "uni", "=", "(", "(", "hand_rec", "[", "2", "]", "-", "hand_rec", "[", "0", "]", "+", "1.", ")", "*", "(", "hand_rec", "[", "3", "]", "-", "hand_rec", "[", "1", "]", "+", "1.", ")", "+", "\n", "(", "gt_hand_bbox", "[", ":", ",", "2", "]", "-", "gt_hand_bbox", "[", ":", ",", "0", "]", "+", "1.", ")", "*", "\n", "(", "gt_hand_bbox", "[", ":", ",", "3", "]", "-", "gt_hand_bbox", "[", ":", ",", "1", "]", "+", "1.", ")", "-", "inters", ")", "\n", "overlaps", "=", "inters", "/", "uni", "\n", "ovmax", "=", "np", ".", "max", "(", "overlaps", ")", "\n", "jmax", "=", "np", ".", "argmax", "(", "overlaps", ")", "\n", "\n", "# check hand iou and check object detection", "\n", "if", "ovmax", ">", "iou_thres", "and", "eval_obj_bbox", "(", "obj_rec", ",", "gt_obj_bbox", "[", "jmax", "]", ")", ">", "iou_thres", ":", "\n", "                ", "if", "gt_obj_bbox", "[", "jmax", "]", ".", "any", "(", ")", ":", "\n", "                    ", "tp_ho_counter", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "tp_h__counter", "+=", "1", "\n", "", "tp", "[", "d", "]", "=", "1.", "\n", "img_recs", "[", "img_id", "]", "[", "'hand_bbox'", "]", "=", "gt_hand_bbox", "[", "np", ".", "arange", "(", "\n", "gt_hand_bbox", ".", "shape", "[", "0", "]", ")", "!=", "jmax", "]", "\n", "img_recs", "[", "img_id", "]", "[", "'obj_bbox'", "]", "=", "gt_obj_bbox", "[", "np", ".", "arange", "(", "\n", "gt_obj_bbox", ".", "shape", "[", "0", "]", ")", "!=", "jmax", "]", "\n", "", "else", ":", "\n", "                ", "fp", "[", "d", "]", "=", "1", "\n", "", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.", "\n", "\n", "# compute precision recall", "\n", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "prec", ",", "rec", ",", "ap", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.xyxy2mask": [[7, 15], ["util.float2int", "util.float2int", "util.float2int", "util.float2int", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.float2int", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.float2int", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.float2int", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.float2int"], ["from", "collections", "import", "OrderedDict", "\n", "\n", "\n", "def", "ensure_dir", "(", "dirname", ")", ":", "\n", "    ", "dirname", "=", "Path", "(", "dirname", ")", "\n", "if", "not", "dirname", ".", "is_dir", "(", ")", ":", "\n", "        ", "dirname", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.xyxy2mask_ts": [[17, 25], ["max", "max", "max", "max", "torch.zeros", "min", "min", "min", "min", "max.long", "max.long", "max.long", "max.long"], "function", ["None"], ["    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'rt'", ")", "as", "handle", ":", "\n", "        ", "return", "json", ".", "load", "(", "handle", ",", "object_hook", "=", "OrderedDict", ")", "\n", "\n", "\n", "", "", "def", "write_json", "(", "content", ",", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'wt'", ")", "as", "handle", ":", "\n", "        ", "json", ".", "dump", "(", "content", ",", "handle", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.xyxy2xyhw": [[27, 34], ["abs", "abs"], "function", ["None"], ["\n", "", "", "def", "read_pickle", "(", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'rb'", ")", "as", "handle", ":", "\n", "        ", "content", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "return", "content", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.rchw2xyxy": [[36, 47], ["numpy.zeros_like", "numpy.abs", "numpy.abs", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum"], "function", ["None"], ["    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "content", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "\n", "", "", "def", "inf_loop", "(", "data_loader", ")", ":", "\n", "    ", "''' wrapper function for endless data loader. '''", "\n", "for", "loader", "in", "repeat", "(", "data_loader", ")", ":", "\n", "        ", "yield", "from", "loader", "\n", "\n", "\n", "", "", "def", "prepare_device", "(", "n_gpu_use", ")", ":", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.float2int": [[49, 51], ["int", "round"], "function", ["None"], ["\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.deparametric": [[52, 54], ["numpy.exp"], "function", ["None"], ["if", "n_gpu_use", ">", "0", "and", "n_gpu", "==", "0", ":", "\n", "        ", "print", "(", "\"Warning: There\\'s no GPU available on this machine,\"", "\n", "\"training will be performed on CPU.\"", ")", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.deparametric_ts": [[56, 58], ["torch.exp"], "function", ["None"], ["", "if", "n_gpu_use", ">", "n_gpu", ":", "\n", "        ", "print", "(", "f\"Warning: The number of GPU\\'s configured to use is {n_gpu_use}, but only {n_gpu} are \"", "\n", "\"available on this machine.\"", ")", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.one_hot": [[60, 110], ["torch.zeros", "isinstance", "TypeError", "ValueError", "ValueError", "torch.zeros.scatter_", "labels.unsqueeze", "type"], "function", ["None"], ["", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "n_gpu_use", ">", "0", "else", "'cpu'", ")", "\n", "list_ids", "=", "list", "(", "range", "(", "n_gpu_use", ")", ")", "\n", "return", "device", ",", "list_ids", "\n", "\n", "\n", "", "class", "MetricTracker", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "*", "keys", ",", "writer", "=", "None", ")", ":", "\n", "        ", "self", ".", "writer", "=", "writer", "\n", "self", ".", "_data", "=", "pd", ".", "DataFrame", "(", "\n", "index", "=", "keys", ",", "columns", "=", "[", "'total'", ",", "'counts'", ",", "'average'", "]", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "col", "in", "self", ".", "_data", ".", "columns", ":", "\n", "            ", "self", ".", "_data", "[", "col", "]", ".", "values", "[", ":", "]", "=", "0", "\n", "\n", "", "", "def", "update", "(", "self", ",", "key", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "key", ",", "value", ")", "\n", "", "self", ".", "_data", ".", "total", "[", "key", "]", "+=", "value", "*", "n", "\n", "self", ".", "_data", ".", "counts", "[", "key", "]", "+=", "n", "\n", "self", ".", "_data", ".", "average", "[", "key", "]", "=", "self", ".", "_data", ".", "total", "[", "key", "]", "/", "self", ".", "_data", ".", "counts", "[", "key", "]", "\n", "\n", "", "def", "avg", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_data", ".", "average", "[", "key", "]", "\n", "\n", "", "def", "result", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "self", ".", "_data", ".", "average", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.get_center_hm": [[7, 11], ["numpy.zeros", "numpy.add.at"], "function", ["None"], ["def", "get_center_hm", "(", "ys", ",", "xs", ",", "vals", ",", "h", ",", "w", ")", ":", "\n", "    ", "hm", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "np", ".", "add", ".", "at", "(", "hm", ",", "(", "ys", ",", "xs", ")", ",", "vals", ")", "\n", "return", "hm", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.vote_centor": [[13, 19], ["voting_lib.get_center_hm", "get_center_hm.argmax"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.get_center_hm"], ["", "def", "vote_centor", "(", "ys", ",", "xs", ",", "vals", ",", "h", ",", "w", ")", ":", "\n", "    ", "hm", "=", "get_center_hm", "(", "ys", ",", "xs", ",", "vals", ",", "h", ",", "w", ")", "\n", "max_idx", "=", "hm", ".", "argmax", "(", ")", "\n", "y_pred", "=", "max_idx", "//", "w", "\n", "x_pred", "=", "max_idx", "%", "w", "\n", "return", "y_pred", ",", "x_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.vote_hw": [[21, 26], ["numpy.zeros", "numpy.add.at", "np.zeros.argmax"], "function", ["None"], ["", "def", "vote_hw", "(", "arr1d", ",", "val1d", ",", "maxval", ")", ":", "\n", "    ", "hm", "=", "np", ".", "zeros", "(", "maxval", ")", "\n", "np", ".", "add", ".", "at", "(", "hm", ",", "arr1d", ",", "val1d", ")", "\n", "max_idx", "=", "hm", ".", "argmax", "(", ")", "\n", "return", "max_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.get_center_predictions": [[28, 34], ["numpy.meshgrid", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "get_center_predictions", "(", "r_pred", ",", "cos_pred", ",", "sin_pred", ")", ":", "\n", "    ", "h", ",", "w", "=", "r_pred", ".", "shape", "\n", "widxs", ",", "hidxs", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "0", ",", "w", ")", ",", "np", ".", "arange", "(", "0", ",", "h", ")", ")", "\n", "hidxs_pred", "=", "hidxs", "-", "r_pred", "*", "sin_pred", "\n", "widxs_pred", "=", "widxs", "-", "r_pred", "*", "cos_pred", "\n", "return", "hidxs_pred", ",", "widxs_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.get_predictions": [[36, 52], ["util.deparametric", "util.deparametric", "util.deparametric", "numpy.max", "numpy.exp", "numpy.sum", "numpy.sqrt", "numpy.exp"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.deparametric", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.deparametric", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.deparametric"], ["", "def", "get_predictions", "(", "output", ",", "priors", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"\n    output shape:   7xHxW\n    \"\"\"", "\n", "objprob_01", "=", "output", "[", "5", ":", "7", "]", "-", "np", ".", "max", "(", "output", "[", "5", ":", "7", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "objprob_pred", "=", "np", ".", "exp", "(", "objprob_01", "[", "1", "]", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "objprob_01", ")", ",", "axis", "=", "0", ")", "\n", "h_a", ",", "w_a", ",", "r_a", "=", "priors", "[", "'h_a'", "]", ",", "priors", "[", "'w_a'", "]", ",", "priors", "[", "'r_a'", "]", "\n", "r_pred", "=", "deparametric", "(", "output", "[", "0", "]", ",", "r_a", ")", "\n", "h_pred", "=", "deparametric", "(", "output", "[", "3", "]", ",", "h_a", ")", "\n", "w_pred", "=", "deparametric", "(", "output", "[", "4", "]", ",", "w_a", ")", "\n", "cos_pred", "=", "output", "[", "1", "]", "\n", "sin_pred", "=", "output", "[", "2", "]", "\n", "theta_unit_pred", "=", "np", ".", "sqrt", "(", "cos_pred", "**", "2", "+", "sin_pred", "**", "2", ")", "+", "eps", "\n", "cos_pred", "=", "cos_pred", "/", "theta_unit_pred", "\n", "sin_pred", "=", "sin_pred", "/", "theta_unit_pred", "\n", "return", "r_pred", ",", "cos_pred", ",", "sin_pred", ",", "h_pred", ",", "w_pred", ",", "objprob_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.get_center_predictions_ts": [[54, 62], ["torch.meshgrid", "hidxs.to.to", "widxs.to.to", "torch.arange", "torch.arange"], "function", ["None"], ["", "def", "get_center_predictions_ts", "(", "r_pred", ",", "cos_pred", ",", "sin_pred", ")", ":", "\n", "    ", "h", ",", "w", "=", "r_pred", ".", "shape", "\n", "hidxs", ",", "widxs", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "0", ",", "h", ")", ",", "torch", ".", "arange", "(", "0", ",", "w", ")", ")", "\n", "hidxs", "=", "hidxs", ".", "to", "(", "r_pred", ".", "device", ")", "\n", "widxs", "=", "widxs", ".", "to", "(", "r_pred", ".", "device", ")", "\n", "hidxs_pred", "=", "hidxs", "-", "r_pred", "*", "sin_pred", "\n", "widxs_pred", "=", "widxs", "-", "r_pred", "*", "cos_pred", "\n", "return", "hidxs_pred", ",", "widxs_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.get_predictions_ts": [[64, 79], ["util.deparametric_ts", "util.deparametric_ts", "util.deparametric_ts", "torch.exp", "torch.sum", "torch.sqrt", "torch.max", "torch.exp"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.deparametric_ts", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.deparametric_ts", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.deparametric_ts"], ["", "def", "get_predictions_ts", "(", "output", ",", "h_a", ",", "w_a", ",", "r_a", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"\n    output shape:   7xHxW\n    \"\"\"", "\n", "objprob_01", "=", "output", "[", "5", ":", "7", "]", "-", "torch", ".", "max", "(", "output", "[", "5", ":", "7", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "[", "0", "]", "\n", "objprob_pred", "=", "torch", ".", "exp", "(", "objprob_01", "[", "1", "]", ")", "/", "torch", ".", "sum", "(", "torch", ".", "exp", "(", "objprob_01", ")", ",", "axis", "=", "0", ")", "\n", "r_pred", "=", "deparametric_ts", "(", "output", "[", "0", "]", ",", "r_a", ")", "\n", "h_pred", "=", "deparametric_ts", "(", "output", "[", "3", "]", ",", "h_a", ")", "\n", "w_pred", "=", "deparametric_ts", "(", "output", "[", "4", "]", ",", "w_a", ")", "\n", "cos_pred", "=", "output", "[", "1", "]", "\n", "sin_pred", "=", "output", "[", "2", "]", "\n", "theta_unit_pred", "=", "torch", ".", "sqrt", "(", "cos_pred", "**", "2", "+", "sin_pred", "**", "2", ")", "+", "eps", "\n", "cos_pred", "=", "cos_pred", "/", "theta_unit_pred", "\n", "sin_pred", "=", "sin_pred", "/", "theta_unit_pred", "\n", "return", "r_pred", ",", "cos_pred", ",", "sin_pred", ",", "h_pred", ",", "w_pred", ",", "objprob_pred", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_single.get_obj_predictions": [[8, 78], ["voting_lib.get_predictions", "voting_lib.get_center_predictions", "numpy.zeros", "range", "util.rchw2xyxy", "type", "output.detach().cpu().numpy.detach().cpu().numpy", "type", "handmask.detach().cpu().numpy.detach().cpu().numpy", "type", "hand_bboxs.detach().cpu().numpy.detach().cpu().numpy", "util.xyxy2mask", "single_handmaks_nonoverlap.sum", "numpy.rint().astype", "numpy.rint().astype", "numpy.rint().astype", "numpy.rint().astype", "numpy.mean", "numpy.mean", "voting_lib.vote_centor", "voting_lib.vote_hw", "voting_lib.vote_hw", "output.detach().cpu().numpy.detach().cpu", "handmask.detach().cpu().numpy.detach().cpu", "hand_bboxs.detach().cpu().numpy.detach().cpu", "numpy.rint", "numpy.rint", "numpy.rint", "numpy.rint", "output.detach().cpu().numpy.detach", "handmask.detach().cpu().numpy.detach", "hand_bboxs.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.get_predictions", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.get_center_predictions", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.rchw2xyxy", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.xyxy2mask", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.vote_centor", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.vote_hw", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.vote_hw"], ["def", "get_obj_predictions", "(", "output", ",", "handmask", ",", "hand_bboxs", ",", "priors", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:\n        output shape:       7xHxW (torch tensor or numpy array)\n        handmask shape:     HxW (torch tensor or numpy array)\n        hand_bboxs:         nhandsx4 (torch tensor or numpy array)\n        priors:             {'h_a', 'w_a', 'r_a'} (dictionary)\n\n    Outputs:\n        dets:               nhandsx5 (x1, y1, x2, y2, score)\n    \"\"\"", "\n", "# to numpy", "\n", "if", "type", "(", "output", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "output", "=", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "type", "(", "handmask", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "handmask", "=", "handmask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "type", "(", "hand_bboxs", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "hand_bboxs", "=", "hand_bboxs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "h", ",", "w", "=", "handmask", ".", "shape", "\n", "\n", "# get predictions", "\n", "r_pred", ",", "cos_pred", ",", "sin_pred", ",", "h_pred", ",", "w_pred", ",", "objprob_pred", "=", "get_predictions", "(", "output", ",", "priors", ",", "eps", ")", "\n", "ys_pred", ",", "xs_pred", "=", "get_center_predictions", "(", "r_pred", ",", "cos_pred", ",", "sin_pred", ")", "\n", "\n", "# for each hands", "\n", "nhands", "=", "hand_bboxs", ".", "shape", "[", "0", "]", "\n", "dets", "=", "np", ".", "zeros", "(", "(", "nhands", ",", "5", ")", ")", "# x1, y1, x2, y2, confidence", "\n", "for", "i", "in", "range", "(", "nhands", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "hand_bboxs", "[", "i", "]", "\n", "single_handmask", "=", "xyxy2mask", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "h", ",", "w", ")", "\n", "single_handmaks_nonoverlap", "=", "(", "single_handmask", "*", "handmask", ")", "==", "1", "\n", "npixels_hand_nonoverlap", "=", "single_handmaks_nonoverlap", ".", "sum", "(", ")", "\n", "\n", "# if there is no hand pixels for voting", "\n", "if", "npixels_hand_nonoverlap", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "# only consider pixels inside this bounding box", "\n", "", "this_contact_pred", "=", "objprob_pred", "[", "single_handmaks_nonoverlap", "]", "\n", "this_ys_pred", "=", "np", ".", "rint", "(", "ys_pred", "[", "single_handmaks_nonoverlap", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "this_xs_pred", "=", "np", ".", "rint", "(", "xs_pred", "[", "single_handmaks_nonoverlap", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "this_h_pred", "=", "np", ".", "rint", "(", "h_pred", "[", "single_handmaks_nonoverlap", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "this_w_pred", "=", "np", ".", "rint", "(", "w_pred", "[", "single_handmaks_nonoverlap", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "dets", "[", "i", ",", "4", "]", "=", "np", ".", "mean", "(", "this_contact_pred", ")", "\n", "\n", "# remove points outside the image", "\n", "inside_mask", "=", "(", "0", "<=", "this_ys_pred", ")", "*", "(", "this_ys_pred", "<", "h", ")", "*", "(", "0", "<=", "this_xs_pred", ")", "*", "(", "this_xs_pred", "<", "w", ")", "*", "(", "0", "<=", "this_h_pred", ")", "*", "(", "this_h_pred", "<", "h", ")", "*", "(", "0", "<=", "this_w_pred", ")", "*", "(", "this_w_pred", "<", "w", ")", "\n", "this_contact_pred", "=", "this_contact_pred", "[", "inside_mask", "]", "\n", "this_ys_pred", "=", "this_ys_pred", "[", "inside_mask", "]", "\n", "this_xs_pred", "=", "this_xs_pred", "[", "inside_mask", "]", "\n", "this_h_pred", "=", "this_h_pred", "[", "inside_mask", "]", "\n", "this_w_pred", "=", "this_w_pred", "[", "inside_mask", "]", "\n", "\n", "# if no pixel has a valid vote", "\n", "if", "not", "this_xs_pred", ".", "size", ":", "\n", "            ", "continue", "\n", "\n", "", "dets", "[", "i", ",", "4", "]", "=", "np", ".", "mean", "(", "this_contact_pred", ")", "\n", "b_c_y_pred", ",", "b_c_x_pred", "=", "vote_centor", "(", "this_ys_pred", ",", "this_xs_pred", ",", "this_contact_pred", ",", "h", ",", "w", ")", "\n", "b_h_pred", "=", "vote_hw", "(", "this_h_pred", ",", "this_contact_pred", ",", "h", ")", "\n", "b_w_pred", "=", "vote_hw", "(", "this_w_pred", ",", "this_contact_pred", ",", "w", ")", "\n", "dets", "[", "i", ",", ":", "4", "]", "=", "[", "b_c_y_pred", ",", "b_c_x_pred", ",", "b_h_pred", ",", "b_w_pred", "]", "\n", "\n", "", "dets", "[", ":", ",", ":", "4", "]", "=", "rchw2xyxy", "(", "dets", "[", ":", ",", ":", "4", "]", ",", "h", ",", "w", ")", "\n", "return", "dets", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_general.box_field_voting": [[4, 26], ["torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.zeros().to", "torch.zeros().to.index_put_", "torch.zeros().to.argmax", "torch.zeros().to", "torch.zeros().to.index_put_", "torch.zeros().to.argmax", "torch.zeros().to", "torch.zeros().to.index_put_", "torch.zeros().to.argmax", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros", "torch.zeros", "torch.zeros", "torch.round", "torch.round", "torch.round", "torch.round"], "function", ["None"], ["def", "box_field_voting", "(", "xs", ",", "ys", ",", "hs", ",", "ws", ",", "confidences", ",", "h", ",", "w", ")", ":", "\n", "    ", "device", "=", "xs", ".", "device", "\n", "# discretize", "\n", "xs", "=", "torch", ".", "clamp", "(", "torch", ".", "round", "(", "xs", ")", ",", "0", ",", "w", "-", "1", ")", ".", "long", "(", ")", "\n", "ys", "=", "torch", ".", "clamp", "(", "torch", ".", "round", "(", "ys", ")", ",", "0", ",", "h", "-", "1", ")", ".", "long", "(", ")", "\n", "hs", "=", "torch", ".", "clamp", "(", "torch", ".", "round", "(", "hs", ")", ",", "0", ",", "h", "-", "1", ")", ".", "long", "(", ")", "\n", "ws", "=", "torch", ".", "clamp", "(", "torch", ".", "round", "(", "ws", ")", ",", "0", ",", "w", "-", "1", ")", ".", "long", "(", ")", "\n", "# vote for center", "\n", "center_hm", "=", "torch", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", ".", "to", "(", "device", ")", "\n", "center_hm", ".", "index_put_", "(", "(", "ys", ",", "xs", ")", ",", "confidences", ",", "accumulate", "=", "True", ")", "\n", "max_idx", "=", "center_hm", ".", "argmax", "(", ")", "\n", "y_pred", "=", "max_idx", "//", "w", "\n", "x_pred", "=", "max_idx", "%", "w", "\n", "# vote for height", "\n", "h_hm", "=", "torch", ".", "zeros", "(", "h", ")", ".", "to", "(", "device", ")", "\n", "h_hm", ".", "index_put_", "(", "(", "hs", ",", ")", ",", "confidences", ",", "accumulate", "=", "True", ")", "\n", "h_pred", "=", "h_hm", ".", "argmax", "(", ")", "\n", "# vote for width", "\n", "w_hm", "=", "torch", ".", "zeros", "(", "w", ")", ".", "to", "(", "device", ")", "\n", "w_hm", ".", "index_put_", "(", "(", "ws", ",", ")", ",", "confidences", ",", "accumulate", "=", "True", ")", "\n", "w_pred", "=", "w_hm", ".", "argmax", "(", ")", "\n", "return", "x_pred", ",", "y_pred", ",", "h_pred", ",", "w_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_general.maksed_inliers_gaussian_sum": [[28, 37], ["torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "maksed_inliers_gaussian_sum", "(", "xs", ",", "ys", ",", "hs", ",", "ws", ",", "confidences", ",", "x", ",", "y", ",", "h", ",", "w", ",", "tol", "=", "0.1", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "mask", "=", "(", "(", "(", "xs", "-", "x", ")", "/", "(", "w", "+", "eps", ")", ")", "<", "tol", ")", "*", "(", "(", "(", "ys", "-", "y", ")", "/", "(", "h", "+", "eps", ")", ")", "<", "tol", ")", "*", "(", "(", "(", "ws", "-", "w", ")", "/", "(", "w", "+", "eps", ")", ")", "<", "tol", ")", "*", "(", "(", "(", "hs", "-", "h", ")", "/", "(", "h", "+", "eps", ")", ")", "<", "tol", ")", "\n", "x_pred", "=", "torch", ".", "sum", "(", "xs", "[", "mask", "]", "*", "confidences", "[", "mask", "]", ")", "/", "(", "torch", ".", "sum", "(", "confidences", "[", "mask", "]", ")", "+", "eps", ")", "\n", "y_pred", "=", "torch", ".", "sum", "(", "ys", "[", "mask", "]", "*", "confidences", "[", "mask", "]", ")", "/", "(", "torch", ".", "sum", "(", "confidences", "[", "mask", "]", ")", "+", "eps", ")", "\n", "h_pred", "=", "torch", ".", "sum", "(", "hs", "[", "mask", "]", "*", "confidences", "[", "mask", "]", ")", "/", "(", "torch", ".", "sum", "(", "confidences", "[", "mask", "]", ")", "+", "eps", ")", "\n", "w_pred", "=", "torch", ".", "sum", "(", "ws", "[", "mask", "]", "*", "confidences", "[", "mask", "]", ")", "/", "(", "torch", ".", "sum", "(", "confidences", "[", "mask", "]", ")", "+", "eps", ")", "\n", "confidence", "=", "torch", ".", "mean", "(", "confidences", "[", "mask", "]", ")", "\n", "return", "x_pred", ",", "y_pred", ",", "h_pred", ",", "w_pred", ",", "confidence", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_iterative.get_obj_predictions_iterative": [[9, 100], ["voting_single.get_obj_predictions", "util.deparametric", "util.deparametric", "util.deparametric", "voting_lib.get_center_predictions", "numpy.zeros", "range", "type", "output.detach().cpu().numpy.detach().cpu().numpy", "type", "handmask.detach().cpu().numpy.detach().cpu().numpy", "type", "hand_bboxs.detach().cpu().numpy.detach().cpu().numpy", "numpy.sqrt", "numpy.max", "numpy.exp", "numpy.sum", "rough_obj_dets[].copy", "rough_obj_dets[].copy", "dets[].copy.any", "numpy.exp", "output.detach().cpu().numpy.detach().cpu", "handmask.detach().cpu().numpy.detach().cpu", "hand_bboxs.detach().cpu().numpy.detach().cpu", "util.xyxy2xyhw", "numpy.rint().astype", "numpy.rint().astype", "numpy.rint().astype", "numpy.rint().astype", "voting_lib.vote_centor", "voting_lib.vote_hw", "voting_lib.vote_hw", "util.rchw2xyxy", "numpy.mean", "dets[].copy", "util.xyxy2mask", "util.xyxy2mask", "output.detach().cpu().numpy.detach", "handmask.detach().cpu().numpy.detach", "hand_bboxs.detach().cpu().numpy.detach", "numpy.rint", "numpy.rint", "numpy.rint", "numpy.rint", "abs", "abs", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_single.get_obj_predictions", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.deparametric", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.deparametric", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.deparametric", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.get_center_predictions", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.xyxy2xyhw", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.vote_centor", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.vote_hw", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.vote_hw", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.rchw2xyxy", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.xyxy2mask", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.xyxy2mask"], ["def", "get_obj_predictions_iterative", "(", "output", ",", "handmask", ",", "hand_bboxs", ",", "priors", ",", "max_vote", "=", "5", ",", "tol", "=", "0.05", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"\n    Inputs:\n        output shape:       14xHxW (torch tensor or numpy array)\n        handmask shape:     HxW (torch tensor or numpy array)\n        hand_bboxs:         nhandsx4 (torch tensor or numpy array)\n        priors:             {'h_a', 'w_a', 'r_a'} (dictionary)\n\n    Outputs:\n        dets:               nhandsx5 (x1, y1, x2, y2, score)\n    \"\"\"", "\n", "# to numpy", "\n", "if", "type", "(", "output", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "output", "=", "output", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "type", "(", "handmask", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "handmask", "=", "handmask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "if", "type", "(", "hand_bboxs", ")", "==", "torch", ".", "Tensor", ":", "\n", "        ", "hand_bboxs", "=", "hand_bboxs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "h", ",", "w", "=", "handmask", ".", "shape", "\n", "# get the rough obj det (nhands, 5)", "\n", "rough_obj_dets", "=", "get_obj_predictions", "(", "output", "[", ":", "7", "]", ",", "handmask", ",", "hand_bboxs", ",", "priors", ",", "eps", ")", "\n", "\n", "# get predictions", "\n", "h_a", ",", "w_a", ",", "obj_r_a", "=", "priors", "[", "'h_a'", "]", ",", "priors", "[", "'w_a'", "]", ",", "priors", "[", "'obj_r_a'", "]", "\n", "r_pred", "=", "deparametric", "(", "output", "[", "7", "]", ",", "obj_r_a", ")", "\n", "h_pred", "=", "deparametric", "(", "output", "[", "10", "]", ",", "h_a", ")", "\n", "w_pred", "=", "deparametric", "(", "output", "[", "11", "]", ",", "w_a", ")", "\n", "cos_pred", "=", "output", "[", "8", "]", "\n", "sin_pred", "=", "output", "[", "9", "]", "\n", "theta_unit_pred", "=", "np", ".", "sqrt", "(", "cos_pred", "**", "2", "+", "sin_pred", "**", "2", ")", "+", "eps", "\n", "cos_pred", "=", "cos_pred", "/", "theta_unit_pred", "\n", "sin_pred", "=", "sin_pred", "/", "theta_unit_pred", "\n", "ys_pred", ",", "xs_pred", "=", "get_center_predictions", "(", "r_pred", ",", "cos_pred", ",", "sin_pred", ")", "\n", "objprob_01", "=", "output", "[", "12", ":", "14", "]", "-", "np", ".", "max", "(", "output", "[", "12", ":", "14", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "objprob_pred", "=", "np", ".", "exp", "(", "objprob_01", "[", "1", "]", ")", "/", "np", ".", "sum", "(", "np", ".", "exp", "(", "objprob_01", ")", ",", "axis", "=", "0", ")", "\n", "\n", "# for each hands", "\n", "nhands", "=", "hand_bboxs", ".", "shape", "[", "0", "]", "\n", "dets", "=", "np", ".", "zeros", "(", "(", "nhands", ",", "6", ")", ")", "# x1, y1, x2, y2, contact score, obj prob score", "\n", "for", "i", "in", "range", "(", "nhands", ")", ":", "\n", "        ", "rough_obj_box", "=", "rough_obj_dets", "[", "i", ",", ":", "4", "]", ".", "copy", "(", ")", "\n", "contact_score", "=", "rough_obj_dets", "[", "i", ",", "4", "]", ".", "copy", "(", ")", "\n", "\n", "# keep the contacting score", "\n", "dets", "[", "i", ",", "4", "]", "=", "contact_score", "\n", "\n", "# voting", "\n", "if", "rough_obj_box", ".", "any", "(", ")", ":", "\n", "            ", "vote_count", "=", "1", "\n", "while", "vote_count", "<", "max_vote", ":", "\n", "                ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "rough_obj_box", "\n", "xc", ",", "yc", ",", "box_h", ",", "box_w", "=", "xyxy2xyhw", "(", "rough_obj_box", ")", "\n", "single_obj_mask", "=", "xyxy2mask", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "h", ",", "w", ")", "==", "1.", "\n", "this_ys_pred", "=", "np", ".", "rint", "(", "ys_pred", "[", "single_obj_mask", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "this_xs_pred", "=", "np", ".", "rint", "(", "xs_pred", "[", "single_obj_mask", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "this_h_pred", "=", "np", ".", "rint", "(", "h_pred", "[", "single_obj_mask", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "this_w_pred", "=", "np", ".", "rint", "(", "w_pred", "[", "single_obj_mask", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "this_objprob_pred", "=", "objprob_pred", "[", "single_obj_mask", "]", "\n", "inside_mask", "=", "(", "0", "<=", "this_ys_pred", ")", "*", "(", "this_ys_pred", "<", "h", ")", "*", "(", "0", "<=", "this_xs_pred", ")", "*", "(", "this_xs_pred", "<", "w", ")", "*", "(", "0", "<=", "this_h_pred", ")", "*", "(", "this_h_pred", "<", "h", ")", "*", "(", "0", "<=", "this_w_pred", ")", "*", "(", "this_w_pred", "<", "w", ")", "\n", "this_ys_pred", "=", "this_ys_pred", "[", "inside_mask", "]", "\n", "this_xs_pred", "=", "this_xs_pred", "[", "inside_mask", "]", "\n", "this_h_pred", "=", "this_h_pred", "[", "inside_mask", "]", "\n", "this_w_pred", "=", "this_w_pred", "[", "inside_mask", "]", "\n", "this_contact_pred", "=", "this_objprob_pred", "[", "inside_mask", "]", "\n", "\n", "# if no pixel has a valid vote", "\n", "if", "not", "this_xs_pred", ".", "size", ":", "\n", "                    ", "break", "\n", "\n", "", "b_c_y_pred", ",", "b_c_x_pred", "=", "vote_centor", "(", "this_ys_pred", ",", "this_xs_pred", ",", "this_contact_pred", ",", "h", ",", "w", ")", "\n", "b_h_pred", "=", "vote_hw", "(", "this_h_pred", ",", "this_contact_pred", ",", "h", ")", "\n", "b_w_pred", "=", "vote_hw", "(", "this_w_pred", ",", "this_contact_pred", ",", "w", ")", "\n", "dets", "[", "i", ",", ":", "4", "]", "=", "[", "b_c_y_pred", ",", "b_c_x_pred", ",", "b_h_pred", ",", "b_w_pred", "]", "\n", "dets", "[", "i", ":", "i", "+", "1", ",", ":", "4", "]", "=", "rchw2xyxy", "(", "dets", "[", "i", ":", "i", "+", "1", ",", ":", "4", "]", ",", "h", ",", "w", ")", "\n", "\n", "# recompute the score", "\n", "single_obj_mask_final", "=", "xyxy2mask", "(", "*", "dets", "[", "i", ",", ":", "4", "]", ",", "h", ",", "w", ")", "==", "1.", "\n", "dets", "[", "i", ",", "5", "]", "=", "np", ".", "mean", "(", "objprob_pred", "[", "single_obj_mask_final", "]", ")", "\n", "\n", "# terminate", "\n", "if", "abs", "(", "xc", "-", "b_c_x_pred", ")", "/", "box_w", "<", "tol", "and", "abs", "(", "yc", "-", "b_c_y_pred", ")", "/", "box_h", "<", "tol", "and", "abs", "(", "b_h_pred", "-", "box_h", ")", "/", "box_h", "<", "tol", "and", "abs", "(", "b_w_pred", "-", "box_w", ")", "/", "box_w", "<", "tol", ":", "\n", "                    ", "break", "\n", "\n", "", "vote_count", "+=", "1", "\n", "rough_obj_box", "=", "dets", "[", "i", ",", ":", "4", "]", ".", "copy", "(", ")", "\n", "\n", "", "", "", "return", "rough_obj_dets", ",", "dets", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.base.EncoderMixin.out_channels": [[17, 21], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "out_channels", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return channels dimensions for each tensor of forward output of encoder\"\"\"", "\n", "return", "self", ".", "_out_channels", "[", ":", "self", ".", "_depth", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.base.EncoderMixin.set_in_channels": [[22, 33], ["util.patch_first_conv", "tuple", "list"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.util.patch_first_conv"], ["", "def", "set_in_channels", "(", "self", ",", "in_channels", ")", ":", "\n", "        ", "\"\"\"Change first convolution chennels\"\"\"", "\n", "if", "in_channels", "==", "3", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "_in_channels", "=", "in_channels", "\n", "if", "self", ".", "_out_channels", "[", "0", "]", "==", "3", ":", "\n", "            ", "self", ".", "_out_channels", "=", "tuple", "(", "\n", "[", "in_channels", "]", "+", "list", "(", "self", ".", "_out_channels", ")", "[", "1", ":", "]", ")", "\n", "\n", "", "utils", ".", "patch_first_conv", "(", "model", "=", "self", ",", "in_channels", "=", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.base.EncoderMixin.get_stages": [[34, 37], ["None"], "methods", ["None"], ["", "def", "get_stages", "(", "self", ")", ":", "\n", "        ", "\"\"\"Method should be overridden in encoder\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.base.EncoderMixin.make_dilated": [[38, 44], ["base.EncoderMixin.get_stages", "zip", "util.replace_strides_with_dilation"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.backbone.resnet.ResNetEncoder.get_stages", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.util.replace_strides_with_dilation"], ["", "def", "make_dilated", "(", "self", ",", "stage_list", ",", "dilation_list", ")", ":", "\n", "        ", "stages", "=", "self", ".", "get_stages", "(", ")", "\n", "for", "stage_indx", ",", "dilation_rate", "in", "zip", "(", "stage_list", ",", "dilation_list", ")", ":", "\n", "            ", "utils", ".", "replace_strides_with_dilation", "(", "\n", "module", "=", "stages", "[", "stage_indx", "]", ",", "\n", "dilation_rate", "=", "dilation_rate", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.base.SegmentationHeads.__init__": [[49, 56], ["torch.Module.__init__", "zip", "torch.ModuleList", "torch.ModuleList", "len", "len", "base.SegmentationHeads.segmentationheads.append", "base.SegmentationHead_3x1"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "activation", "=", "None", ",", "upsampling", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "len", "(", "in_channels", ")", "==", "len", "(", "out_channels", ")", ")", "\n", "self", ".", "segmentationheads", "=", "[", "]", "\n", "for", "in_channel", ",", "out_channel", "in", "zip", "(", "in_channels", ",", "out_channels", ")", ":", "\n", "            ", "self", ".", "segmentationheads", ".", "append", "(", "SegmentationHead_3x1", "(", "in_channel", ",", "out_channel", ",", "activation", ",", "upsampling", ")", ")", "\n", "", "self", ".", "segmentationheads", "=", "nn", ".", "ModuleList", "(", "self", ".", "segmentationheads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.base.SegmentationHeads.forward": [[57, 60], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "segmentationhead"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "        ", "outputs", "=", "[", "segmentationhead", "(", "src", ")", "for", "segmentationhead", "in", "self", ".", "segmentationheads", "]", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.base.SegmentationHead_3x1.__init__": [[64, 73], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "modules.Activation", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "activation", "=", "None", ",", "upsampling", "=", "1", ",", "with_bn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_0", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "(", "3", ",", "3", ")", ",", "padding", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "not", "with_bn", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "if", "with_bn", "else", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "conv2d_1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "upsampling", "=", "nn", ".", "UpsamplingBilinear2d", "(", "\n", "scale_factor", "=", "upsampling", ")", "if", "upsampling", ">", "1", "else", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "activation", "=", "Activation", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.base.SegmentationHead_3x1.forward": [[74, 82], ["base.SegmentationHead_3x1.conv2d_0", "base.SegmentationHead_3x1.bn", "base.SegmentationHead_3x1.relu", "base.SegmentationHead_3x1.conv2d_1", "base.SegmentationHead_3x1.upsampling", "base.SegmentationHead_3x1.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_0", "(", "src", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2d_1", "(", "out", ")", "\n", "out", "=", "self", ".", "upsampling", "(", "out", ")", "\n", "out", "=", "self", ".", "activation", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.base.SegmentationHead.__init__": [[86, 93], ["torch.Conv2d", "torch.Conv2d", "modules.Activation", "torch.Sequential.__init__", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "activation", "=", "None", ",", "upsampling", "=", "1", ")", ":", "\n", "        ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "padding", "=", "kernel_size", "//", "2", ")", "\n", "upsampling", "=", "nn", ".", "UpsamplingBilinear2d", "(", "\n", "scale_factor", "=", "upsampling", ")", "if", "upsampling", ">", "1", "else", "nn", ".", "Identity", "(", ")", "\n", "activation", "=", "Activation", "(", "activation", ")", "\n", "super", "(", ")", ".", "__init__", "(", "conv2d", ",", "upsampling", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.base.ClassificationHead.__init__": [[97, 109], ["modules.Flatten", "torch.Linear", "torch.Linear", "modules.Activation", "torch.Sequential.__init__", "ValueError", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveMaxPool2d", "torch.AdaptiveMaxPool2d", "torch.Dropout", "torch.Dropout", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "classes", ",", "pooling", "=", "\"avg\"", ",", "dropout", "=", "0.2", ",", "activation", "=", "None", ")", ":", "\n", "        ", "if", "pooling", "not", "in", "(", "\"max\"", ",", "\"avg\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Pooling should be one of ('max', 'avg'), got {}.\"", ".", "format", "(", "pooling", ")", ")", "\n", "", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "\n", "1", ")", "if", "pooling", "==", "'avg'", "else", "nn", ".", "AdaptiveMaxPool2d", "(", "1", ")", "\n", "flatten", "=", "Flatten", "(", ")", "\n", "dropout", "=", "nn", ".", "Dropout", "(", "\n", "p", "=", "dropout", ",", "inplace", "=", "True", ")", "if", "dropout", "else", "nn", ".", "Identity", "(", ")", "\n", "linear", "=", "nn", ".", "Linear", "(", "in_channels", ",", "classes", ",", "bias", "=", "True", ")", "\n", "activation", "=", "Activation", "(", "activation", ")", "\n", "super", "(", ")", ".", "__init__", "(", "pool", ",", "flatten", ",", "dropout", ",", "linear", ",", "activation", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.modules.Flatten.forward": [[10, 12], ["x.view"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.modules.ArgMax.__init__": [[16, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.modules.ArgMax.forward": [[20, 22], ["torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "argmax", "(", "x", ",", "dim", "=", "self", ".", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.modules.Activation.__init__": [[25, 48], ["torch.Module.__init__", "torch.Identity", "torch.Identity", "torch.Sigmoid", "torch.Sigmoid", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.LogSoftmax", "torch.LogSoftmax", "modules.ArgMax", "modules.ArgMax", "callable", "name", "ValueError"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "**", "params", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "name", "is", "None", "or", "name", "==", "'identity'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Identity", "(", "**", "params", ")", "\n", "", "elif", "name", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "name", "==", "'softmax2d'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ",", "**", "params", ")", "\n", "", "elif", "name", "==", "'softmax'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Softmax", "(", "**", "params", ")", "\n", "", "elif", "name", "==", "'logsoftmax'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "LogSoftmax", "(", "**", "params", ")", "\n", "", "elif", "name", "==", "'argmax'", ":", "\n", "            ", "self", ".", "activation", "=", "ArgMax", "(", "**", "params", ")", "\n", "", "elif", "name", "==", "'argmax2d'", ":", "\n", "            ", "self", ".", "activation", "=", "ArgMax", "(", "dim", "=", "1", ",", "**", "params", ")", "\n", "", "elif", "callable", "(", "name", ")", ":", "\n", "            ", "self", ".", "activation", "=", "name", "(", "**", "params", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Activation should be callable/sigmoid/softmax/logsoftmax/None; got {}'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.modules.Activation.forward": [[49, 51], ["modules.Activation.activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "activation", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.modules.Conv2dReLU.__init__": [[54, 92], ["torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Sequential.__init__", "RuntimeError", "InPlaceABN", "torch.Identity", "torch.Identity", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "padding", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "use_batchnorm", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "if", "use_batchnorm", "==", "\"inplace\"", "and", "InPlaceABN", "is", "None", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"In order to use `use_batchnorm='inplace'` inplace_abn package must be installed. \"", "\n", "+", "\"To install see: https://github.com/mapillary/inplace_abn\"", "\n", ")", "\n", "\n", "", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "not", "(", "use_batchnorm", ")", ",", "\n", ")", "\n", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "use_batchnorm", "==", "\"inplace\"", ":", "\n", "            ", "bn", "=", "InPlaceABN", "(", "\n", "out_channels", ",", "activation", "=", "\"leaky_relu\"", ",", "activation_param", "=", "0.0", ")", "\n", "relu", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "elif", "use_batchnorm", "and", "use_batchnorm", "!=", "\"inplace\"", ":", "\n", "            ", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n", "", "else", ":", "\n", "            ", "bn", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "super", "(", "Conv2dReLU", ",", "self", ")", ".", "__init__", "(", "conv", ",", "bn", ",", "relu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.modules.convolution.__init__": [[95, 103], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "inp_dim", ",", "out_dim", ",", "stride", "=", "1", ",", "with_bn", "=", "True", ")", ":", "\n", "        ", "super", "(", "convolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "pad", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "inp_dim", ",", "out_dim", ",", "(", "kernel_size", ",", "kernel_size", ")", ",", "padding", "=", "(", "\n", "pad", ",", "pad", ")", ",", "stride", "=", "(", "stride", ",", "stride", ")", ",", "bias", "=", "not", "with_bn", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_dim", ")", "if", "with_bn", "else", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.modules.convolution.forward": [[104, 109], ["modules.convolution.conv", "modules.convolution.bn", "modules.convolution.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv", "=", "self", ".", "conv", "(", "x", ")", "\n", "bn", "=", "self", ".", "bn", "(", "conv", ")", "\n", "relu", "=", "self", ".", "relu", "(", "bn", ")", "\n", "return", "relu", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.initialize.initialize_decoder": [[4, 21], ["module.modules", "isinstance", "torch.init.kaiming_uniform_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.xavier_uniform_", "torch.init.constant_"], "function", ["None"], ["def", "initialize_decoder", "(", "module", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "\"fan_in\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.initialize.initialize_head": [[23, 29], ["module.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.constant_"], "function", ["None"], ["", "", "", "", "def", "initialize_head", "(", "module", ")", ":", "\n", "    ", "for", "m", "in", "module", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.encoders.get_encoder": [[12, 37], ["params.update", "Encoder", "Encoder.set_in_channels", "Encoder.load_state_dict", "KeyError", "torch.load_url", "KeyError", "list", "encoders.keys", "list", "[].keys"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.base.EncoderMixin.set_in_channels", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.backbone.resnet.ResNetEncoder.load_state_dict"], ["def", "get_encoder", "(", "name", ",", "in_channels", "=", "3", ",", "depth", "=", "5", ",", "weights", "=", "None", ")", ":", "\n", "\n", "    ", "try", ":", "\n", "        ", "Encoder", "=", "encoders", "[", "name", "]", "[", "\"encoder\"", "]", "\n", "", "except", "KeyError", ":", "\n", "        ", "raise", "KeyError", "(", "\"Wrong encoder name `{}`, supported encoders: {}\"", ".", "format", "(", "\n", "name", ",", "list", "(", "encoders", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "", "params", "=", "encoders", "[", "name", "]", "[", "\"params\"", "]", "\n", "params", ".", "update", "(", "depth", "=", "depth", ")", "\n", "encoder", "=", "Encoder", "(", "**", "params", ")", "\n", "\n", "if", "weights", "is", "not", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "settings", "=", "encoders", "[", "name", "]", "[", "\"pretrained_settings\"", "]", "[", "weights", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "KeyError", "(", "\"Wrong pretrained weights `{}` for encoder `{}`. Avaliable options are: {}\"", ".", "format", "(", "\n", "weights", ",", "name", ",", "list", "(", "\n", "encoders", "[", "name", "]", "[", "\"pretrained_settings\"", "]", ".", "keys", "(", ")", ")", ",", "\n", ")", ")", "\n", "", "encoder", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "settings", "[", "\"url\"", "]", ")", ")", "\n", "\n", "", "encoder", ".", "set_in_channels", "(", "in_channels", ")", "\n", "\n", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.encoders.get_encoder_names": [[39, 41], ["list", "encoders.keys"], "function", ["None"], ["", "def", "get_encoder_names", "(", ")", ":", "\n", "    ", "return", "list", "(", "encoders", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.encoders.get_preprocessing_params": [[43, 56], ["settings[].get", "settings[].get", "settings[].get", "settings[].get", "settings.keys", "ValueError", "settings.keys"], "function", ["None"], ["", "def", "get_preprocessing_params", "(", "encoder_name", ",", "pretrained", "=", "\"imagenet\"", ")", ":", "\n", "    ", "settings", "=", "encoders", "[", "encoder_name", "]", "[", "\"pretrained_settings\"", "]", "\n", "\n", "if", "pretrained", "not", "in", "settings", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Avaliable pretrained options {}\"", ".", "format", "(", "settings", ".", "keys", "(", ")", ")", ")", "\n", "\n", "", "formatted_settings", "=", "{", "}", "\n", "formatted_settings", "[", "\"input_space\"", "]", "=", "settings", "[", "pretrained", "]", ".", "get", "(", "\"input_space\"", ")", "\n", "formatted_settings", "[", "\"input_range\"", "]", "=", "settings", "[", "pretrained", "]", ".", "get", "(", "\"input_range\"", ")", "\n", "formatted_settings", "[", "\"mean\"", "]", "=", "settings", "[", "pretrained", "]", ".", "get", "(", "\"mean\"", ")", "\n", "formatted_settings", "[", "\"std\"", "]", "=", "settings", "[", "pretrained", "]", ".", "get", "(", "\"std\"", ")", "\n", "return", "formatted_settings", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.encoders.preprocess_input": [[57, 77], ["x[].copy", "numpy.array", "numpy.array", "x[].copy.max"], "function", ["None"], ["", "def", "preprocess_input", "(", "\n", "x", ",", "mean", "=", "None", ",", "std", "=", "None", ",", "input_space", "=", "\"RGB\"", ",", "input_range", "=", "None", ",", "**", "kwargs", "\n", ")", ":", "\n", "\n", "    ", "if", "input_space", "==", "\"BGR\"", ":", "\n", "        ", "x", "=", "x", "[", "...", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n", "", "if", "input_range", "is", "not", "None", ":", "\n", "        ", "if", "x", ".", "max", "(", ")", ">", "1", "and", "input_range", "[", "1", "]", "==", "1", ":", "\n", "            ", "x", "=", "x", "/", "255.0", "\n", "\n", "", "", "if", "mean", "is", "not", "None", ":", "\n", "        ", "mean", "=", "np", ".", "array", "(", "mean", ")", "\n", "x", "=", "x", "-", "mean", "\n", "\n", "", "if", "std", "is", "not", "None", ":", "\n", "        ", "std", "=", "np", ".", "array", "(", "std", ")", "\n", "x", "=", "x", "/", "std", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.encoders.get_preprocessing_fn": [[79, 82], ["encoders.get_preprocessing_params", "functools.partial"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.encoders.get_preprocessing_params"], ["", "def", "get_preprocessing_fn", "(", "encoder_name", ",", "pretrained", "=", "\"imagenet\"", ")", ":", "\n", "    ", "params", "=", "get_preprocessing_params", "(", "encoder_name", ",", "pretrained", "=", "pretrained", ")", "\n", "return", "functools", ".", "partial", "(", "preprocess_input", ",", "**", "params", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.util.patch_first_conv": [[5, 37], ["model.modules", "module.weight.detach", "torch.parameter.Parameter", "isinstance", "torch.Tensor.sum", "module.reset_parameters", "torch.Tensor", "torch.Tensor"], "function", ["None"], ["from", "pathlib", "import", "Path", "\n", "from", "itertools", "import", "repeat", "\n", "from", "collections", "import", "OrderedDict", "\n", "\n", "\n", "def", "ensure_dir", "(", "dirname", ")", ":", "\n", "    ", "dirname", "=", "Path", "(", "dirname", ")", "\n", "if", "not", "dirname", ".", "is_dir", "(", ")", ":", "\n", "        ", "dirname", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "\n", "\n", "", "", "def", "read_json", "(", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'rt'", ")", "as", "handle", ":", "\n", "        ", "return", "json", ".", "load", "(", "handle", ",", "object_hook", "=", "OrderedDict", ")", "\n", "\n", "\n", "", "", "def", "write_json", "(", "content", ",", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'wt'", ")", "as", "handle", ":", "\n", "        ", "json", ".", "dump", "(", "content", ",", "handle", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "\n", "\n", "", "", "def", "read_pickle", "(", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'rb'", ")", "as", "handle", ":", "\n", "        ", "content", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "return", "content", "\n", "\n", "\n", "", "", "def", "write_pickle", "(", "content", ",", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'wb'", ")", "as", "handle", ":", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.util.replace_strides_with_dilation": [[39, 52], ["module.modules", "isinstance", "hasattr", "torch.Identity"], "function", ["None"], ["\n", "\n", "", "", "def", "inf_loop", "(", "data_loader", ")", ":", "\n", "    ", "''' wrapper function for endless data loader. '''", "\n", "for", "loader", "in", "repeat", "(", "data_loader", ")", ":", "\n", "        ", "yield", "from", "loader", "\n", "\n", "\n", "", "", "def", "prepare_device", "(", "n_gpu_use", ")", ":", "\n", "    ", "\"\"\"\n    setup GPU device if available. get gpu device indices which are used for DataParallel\n    \"\"\"", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "n_gpu_use", ">", "0", "and", "n_gpu", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.DeepLabV3PlusTR.DeepLabV3PlusTR.__init__": [[11, 89], ["segmentation_model.SegmentationModel.__init__", "encoders.get_encoder", "torch.Identity", "torch.Identity", "torch.Identity", "DeepLabV3PlusTR.DeepLabV3PlusDecoder", "base.SegmentationHead", "DeepLabV3PlusTR.DeepLabV3PlusTR.encoder.make_dilated", "transformer.TransformerEncoder2D", "base.ClassificationHead", "DeepLabV3PlusTR.DeepLabV3PlusTR.encoder.make_dilated", "ValueError"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.encoders.get_encoder", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.base.EncoderMixin.make_dilated", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.base.EncoderMixin.make_dilated"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoder_name", ":", "str", "=", "\"resnet34\"", ",", "\n", "encoder_depth", ":", "int", "=", "5", ",", "\n", "encoder_weights", ":", "Optional", "[", "str", "]", "=", "\"imagenet\"", ",", "\n", "encoder_output_stride", ":", "int", "=", "16", ",", "\n", "transformer_d_model", ":", "int", "=", "512", ",", "\n", "transformer_heads", ":", "int", "=", "8", ",", "\n", "transformer_layers", ":", "int", "=", "1", ",", "\n", "decoder_channels", ":", "int", "=", "256", ",", "\n", "decoder_atrous_rates", ":", "tuple", "=", "(", "12", ",", "24", ",", "36", ")", ",", "\n", "in_channels", ":", "int", "=", "3", ",", "\n", "classes", ":", "int", "=", "1", ",", "\n", "activation", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "upsampling", ":", "int", "=", "4", ",", "\n", "aux_params", ":", "Optional", "[", "dict", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# encoder", "\n", "self", ".", "encoder", "=", "get_encoder", "(", "\n", "encoder_name", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "depth", "=", "encoder_depth", ",", "\n", "weights", "=", "encoder_weights", ",", "\n", ")", "\n", "\n", "if", "encoder_output_stride", "==", "8", ":", "\n", "            ", "self", ".", "encoder", ".", "make_dilated", "(", "\n", "stage_list", "=", "[", "4", ",", "5", "]", ",", "\n", "dilation_list", "=", "[", "2", ",", "4", "]", "\n", ")", "\n", "\n", "", "elif", "encoder_output_stride", "==", "16", ":", "\n", "            ", "self", ".", "encoder", ".", "make_dilated", "(", "\n", "stage_list", "=", "[", "5", "]", ",", "\n", "dilation_list", "=", "[", "2", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Encoder output stride should be 8 or 16, got {}\"", ".", "format", "(", "\n", "encoder_output_stride", ")", "\n", ")", "\n", "\n", "# transformer", "\n", "", "encoder_channels_aft_te", "=", "[", "x", "for", "x", "in", "self", ".", "encoder", ".", "out_channels", "]", "\n", "self", ".", "transformer_encoder", "=", "nn", ".", "Identity", "(", ")", "\n", "if", "transformer_d_model", ">", "0", ":", "\n", "            ", "self", ".", "transformer_encoder", "=", "TransformerEncoder2D", "(", "\n", "self", ".", "encoder", ".", "out_channels", "[", "-", "1", "]", ",", "d_model", "=", "transformer_d_model", ",", "nhead", "=", "transformer_heads", ",", "num_layers", "=", "transformer_layers", ")", "\n", "encoder_channels_aft_te", "=", "[", "\n", "x", "for", "x", "in", "self", ".", "encoder", ".", "out_channels", "[", ":", "-", "1", "]", "]", "+", "[", "transformer_d_model", "]", "\n", "\n", "\n", "# decoder", "\n", "", "self", ".", "decoder", "=", "DeepLabV3PlusDecoder", "(", "\n", "encoder_channels", "=", "encoder_channels_aft_te", ",", "\n", "out_channels", "=", "decoder_channels", ",", "\n", "atrous_rates", "=", "decoder_atrous_rates", ",", "\n", "output_stride", "=", "encoder_output_stride", ",", "\n", ")", "\n", "\n", "# segmentation head", "\n", "self", ".", "segmentation_head", "=", "SegmentationHead", "(", "\n", "in_channels", "=", "self", ".", "decoder", ".", "out_channels", ",", "\n", "out_channels", "=", "classes", ",", "\n", "activation", "=", "activation", ",", "\n", "kernel_size", "=", "1", ",", "\n", "upsampling", "=", "upsampling", ",", "\n", ")", "\n", "\n", "# aux", "\n", "if", "aux_params", "is", "not", "None", ":", "\n", "            ", "self", ".", "classification_head", "=", "ClassificationHead", "(", "\n", "in_channels", "=", "self", ".", "encoder", ".", "out_channels", "[", "-", "1", "]", ",", "**", "aux_params", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "classification_head", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.DeepLabV3PlusTR.DeepLabV3PlusDecoder.__init__": [[92, 137], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ValueError", "DeepLabV3PlusTR.ASPP", "DeepLabV3PlusTR.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "DeepLabV3PlusTR.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "encoder_channels", ",", "\n", "out_channels", "=", "256", ",", "\n", "atrous_rates", "=", "(", "12", ",", "24", ",", "36", ")", ",", "\n", "output_stride", "=", "16", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "output_stride", "not", "in", "{", "8", ",", "16", "}", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Output stride should be 8 or 16, got {}.\"", ".", "format", "(", "output_stride", ")", ")", "\n", "\n", "", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "output_stride", "=", "output_stride", "\n", "\n", "self", ".", "aspp", "=", "nn", ".", "Sequential", "(", "\n", "ASPP", "(", "encoder_channels", "[", "-", "1", "]", ",", "out_channels", ",", "\n", "atrous_rates", ",", "separable", "=", "True", ")", ",", "\n", "SeparableConv2d", "(", "out_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "scale_factor", "=", "2", "if", "output_stride", "==", "8", "else", "4", "\n", "self", ".", "up", "=", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "scale_factor", ")", "\n", "\n", "highres_in_channels", "=", "encoder_channels", "[", "-", "4", "]", "\n", "highres_out_channels", "=", "48", "# proposed by authors of paper", "\n", "self", ".", "block1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "highres_in_channels", ",", "highres_out_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "highres_out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "block2", "=", "nn", ".", "Sequential", "(", "\n", "SeparableConv2d", "(", "\n", "highres_out_channels", "+", "out_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.DeepLabV3PlusTR.DeepLabV3PlusDecoder.forward": [[139, 146], ["DeepLabV3PlusTR.DeepLabV3PlusDecoder.aspp", "DeepLabV3PlusTR.DeepLabV3PlusDecoder.up", "DeepLabV3PlusTR.DeepLabV3PlusDecoder.block1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DeepLabV3PlusTR.DeepLabV3PlusDecoder.block2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "features", ")", ":", "\n", "        ", "aspp_features", "=", "self", ".", "aspp", "(", "features", "[", "-", "1", "]", ")", "\n", "aspp_features", "=", "self", ".", "up", "(", "aspp_features", ")", "\n", "high_res_features", "=", "self", ".", "block1", "(", "features", "[", "-", "4", "]", ")", "\n", "concat_features", "=", "torch", ".", "cat", "(", "[", "aspp_features", ",", "high_res_features", "]", ",", "dim", "=", "1", ")", "\n", "fused_features", "=", "self", ".", "block2", "(", "concat_features", ")", "\n", "return", "fused_features", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.DeepLabV3PlusTR.ASPPConv.__init__": [[149, 161], ["torch.Sequential.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dilation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.DeepLabV3PlusTR.ASPPSeparableConv.__init__": [[165, 177], ["torch.Sequential.__init__", "DeepLabV3PlusTR.SeparableConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "dilation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "SeparableConv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "dilation", ",", "\n", "dilation", "=", "dilation", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.DeepLabV3PlusTR.ASPPPooling.__init__": [[181, 187], ["torch.Sequential.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.DeepLabV3PlusTR.ASPPPooling.forward": [[189, 194], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "mod"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "for", "mod", "in", "self", ":", "\n", "            ", "x", "=", "mod", "(", "x", ")", "\n", "", "return", "F", ".", "interpolate", "(", "x", ",", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.DeepLabV3PlusTR.ASPP.__init__": [[197, 224], ["torch.Module.__init__", "modules.append", "tuple", "modules.append", "modules.append", "modules.append", "modules.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ASPPConvModule", "ASPPConvModule", "ASPPConvModule", "DeepLabV3PlusTR.ASPPPooling", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "atrous_rates", ",", "separable", "=", "False", ")", ":", "\n", "        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules", "=", "[", "]", "\n", "modules", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "rate1", ",", "rate2", ",", "rate3", "=", "tuple", "(", "atrous_rates", ")", "\n", "ASPPConvModule", "=", "ASPPConv", "if", "not", "separable", "else", "ASPPSeparableConv", "\n", "\n", "modules", ".", "append", "(", "ASPPConvModule", "(", "in_channels", ",", "out_channels", ",", "rate1", ")", ")", "\n", "modules", ".", "append", "(", "ASPPConvModule", "(", "in_channels", ",", "out_channels", ",", "rate2", ")", ")", "\n", "modules", ".", "append", "(", "ASPPConvModule", "(", "in_channels", ",", "out_channels", ",", "rate3", ")", ")", "\n", "modules", ".", "append", "(", "ASPPPooling", "(", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "modules", ")", "\n", "\n", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "5", "*", "out_channels", ",", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.DeepLabV3PlusTR.ASPP.forward": [[226, 232], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DeepLabV3PlusTR.ASPP.project", "torch.cat.append", "torch.cat.append", "torch.cat.append", "conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "res", ".", "append", "(", "conv", "(", "x", ")", ")", "\n", "", "res", "=", "torch", ".", "cat", "(", "res", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "project", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.DeepLabV3PlusTR.SeparableConv2d.__init__": [[236, 263], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential.__init__"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", ")", ":", "\n", "        ", "dephtwise_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "in_channels", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "pointwise_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "super", "(", ")", ".", "__init__", "(", "dephtwise_conv", ",", "pointwise_conv", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.transformer.TransformerEncoder2D.__init__": [[8, 18], ["torch.nn.Module.__init__", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Identity", "torch.nn.Identity"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "d_model", ",", "nhead", "=", "8", ",", "num_layers", "=", "6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "nhead", "=", "nhead", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "pe", "=", "None", "\n", "\n", "self", ".", "preconv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "d_model", ",", "(", "1", ",", "1", ")", ")", "if", "in_channels", "!=", "d_model", "else", "nn", ".", "Identity", "(", ")", "\n", "encoder_layer", "=", "nn", ".", "TransformerEncoderLayer", "(", "d_model", "=", "d_model", ",", "nhead", "=", "nhead", ")", "\n", "self", ".", "transformer_encoder", "=", "nn", ".", "TransformerEncoder", "(", "encoder_layer", ",", "num_layers", "=", "num_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.transformer.TransformerEncoder2D.forward": [[20, 35], ["transformer.TransformerEncoder2D.preconv", "transformer.TransformerEncoder2D.flatten().permute", "transformer.TransformerEncoder2D.transformer_encoder", "output.permute().reshape.permute().reshape.permute().reshape", "transformer.TransformerEncoder2D.flatten", "output.permute().reshape.permute().reshape.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ")", ":", "\n", "# reduce dimension if necessary", "\n", "        ", "compressed_src", "=", "self", ".", "preconv", "(", "src", ")", "\n", "bs", ",", "c", ",", "h", ",", "w", "=", "compressed_src", ".", "shape", "\n", "# # add positional encoding", "\n", "# if self.pe is None:", "\n", "#     self.pe = positionalencoding2d(c, h, w)[None].to(", "\n", "#         compressed_src.device)  # 1xCxHxW", "\n", "# output = compressed_src + self.pe", "\n", "# transformer forward", "\n", "output", "=", "compressed_src", ".", "flatten", "(", "2", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# HWxBxC", "\n", "output", "=", "self", ".", "transformer_encoder", "(", "output", ")", "\n", "# reshape to 2D", "\n", "output", "=", "output", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "reshape", "(", "bs", ",", "c", ",", "h", ",", "w", ")", "# BxCxHxW", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.transformer.positionalencoding2d": [[37, 64], ["torch.zeros", "torch.zeros", "int", "torch.exp", "torch.exp", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.sin().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.sin().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "torch.cos().transpose().unsqueeze().repeat", "ValueError", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.sin().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.sin().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "torch.cos().transpose().unsqueeze", "math.log", "torch.sin().transpose", "torch.sin().transpose", "torch.cos().transpose", "torch.cos().transpose", "torch.sin().transpose", "torch.sin().transpose", "torch.cos().transpose", "torch.cos().transpose", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.sin", "torch.sin", "torch.cos", "torch.cos"], "function", ["None"], ["", "", "def", "positionalencoding2d", "(", "d_model", ",", "height", ",", "width", ")", ":", "\n", "    ", "\"\"\"\n    :param d_model: dimension of the model\n    :param height: height of the positions\n    :param width: width of the positions\n    :return: d_model*height*width position matrix\n    \"\"\"", "\n", "if", "d_model", "%", "4", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot use sin/cos positional encoding with \"", "\n", "\"odd dimension (got dim={:d})\"", ".", "format", "(", "d_model", ")", ")", "\n", "", "pe", "=", "torch", ".", "zeros", "(", "d_model", ",", "height", ",", "width", ")", "\n", "# Each dimension use half of d_model", "\n", "d_model", "=", "int", "(", "d_model", "/", "2", ")", "\n", "div_term", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "0.", ",", "d_model", ",", "2", ")", "*", "\n", "-", "(", "math", ".", "log", "(", "10000.0", ")", "/", "d_model", ")", ")", "\n", "pos_w", "=", "torch", ".", "arange", "(", "0.", ",", "width", ")", ".", "unsqueeze", "(", "1", ")", "\n", "pos_h", "=", "torch", ".", "arange", "(", "0.", ",", "height", ")", ".", "unsqueeze", "(", "1", ")", "\n", "pe", "[", "0", ":", "d_model", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "sin", "(", "\n", "pos_w", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "height", ",", "1", ")", "\n", "pe", "[", "1", ":", "d_model", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "cos", "(", "\n", "pos_w", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "height", ",", "1", ")", "\n", "pe", "[", "d_model", ":", ":", "2", ",", ":", ",", ":", "]", "=", "torch", ".", "sin", "(", "\n", "pos_h", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "width", ")", "\n", "pe", "[", "d_model", "+", "1", ":", ":", "2", ",", ":", ",", "\n", ":", "]", "=", "torch", ".", "cos", "(", "pos_h", "*", "div_term", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "width", ")", "\n", "\n", "return", "pe", "\n", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.segmentation_model.SegmentationModel.initialize": [[7, 12], ["initialize.initialize_decoder", "initialize.initialize_head", "initialize.initialize_head"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.initialize.initialize_decoder", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.initialize.initialize_head", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.initialize.initialize_head"], ["    ", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "init", ".", "initialize_decoder", "(", "self", ".", "decoder", ")", "\n", "init", ".", "initialize_head", "(", "self", ".", "segmentation_head", ")", "\n", "if", "self", ".", "classification_head", "is", "not", "None", ":", "\n", "            ", "init", ".", "initialize_head", "(", "self", ".", "classification_head", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.segmentation_model.SegmentationModel.forward": [[13, 26], ["segmentation_model.SegmentationModel.encoder", "segmentation_model.SegmentationModel.transformer_encoder", "segmentation_model.SegmentationModel.decoder", "segmentation_model.SegmentationModel.segmentation_head", "segmentation_model.SegmentationModel.classification_head"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Sequentially pass `x` trough model`s encoder, transformer, decoder and heads\"\"\"", "\n", "features", "=", "self", ".", "encoder", "(", "x", ")", "\n", "features", "[", "-", "1", "]", "=", "self", ".", "transformer_encoder", "(", "features", "[", "-", "1", "]", ")", "\n", "decoder_output", "=", "self", ".", "decoder", "(", "*", "features", ")", "\n", "\n", "masks", "=", "self", ".", "segmentation_head", "(", "decoder_output", ")", "\n", "\n", "if", "self", ".", "classification_head", "is", "not", "None", ":", "\n", "            ", "labels", "=", "self", ".", "classification_head", "(", "features", "[", "-", "1", "]", ")", "\n", "return", "masks", ",", "labels", "\n", "\n", "", "return", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.Segnet.segmentation_model.SegmentationModel.predict": [[27, 44], ["segmentation_model.SegmentationModel.eval", "torch.no_grad", "segmentation_model.SegmentationModel.forward"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_model.BaseModel.forward"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Inference method. Switch model to `eval` mode, call `.forward(x)` with `torch.no_grad()`\n\n        Args:\n            x: 4D torch tensor with shape (batch_size, channels, height, width)\n\n        Return:\n            prediction: 4D torch tensor with shape (batch_size, classes, height, width)\n\n        \"\"\"", "\n", "if", "self", ".", "training", ":", "\n", "            ", "self", ".", "eval", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x", "=", "self", ".", "forward", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.backbone.resnet.ResNetEncoder.__init__": [[37, 45], ["torchvision.models.resnet.ResNet.__init__"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_channels", ",", "depth", "=", "5", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "_depth", "=", "depth", "\n", "self", ".", "_out_channels", "=", "out_channels", "\n", "self", ".", "_in_channels", "=", "3", "\n", "\n", "del", "self", ".", "fc", "\n", "del", "self", ".", "avgpool", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.backbone.resnet.ResNetEncoder.get_stages": [[46, 54], ["torch.Identity", "torch.Sequential", "torch.Sequential"], "methods", ["None"], ["", "def", "get_stages", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", "nn", ".", "Sequential", "(", "self", ".", "conv1", ",", "self", ".", "bn1", ",", "self", ".", "relu", ")", ",", "\n", "nn", ".", "Sequential", "(", "self", ".", "maxpool", ",", "self", ".", "layer1", ")", ",", "\n", "self", ".", "layer2", ",", "\n", "self", ".", "layer3", ",", "\n", "self", ".", "layer4", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.backbone.resnet.ResNetEncoder.forward": [[56, 65], ["resnet.ResNetEncoder.get_stages", "range", "features.append"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.backbone.resnet.ResNetEncoder.get_stages"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "stages", "=", "self", ".", "get_stages", "(", ")", "\n", "\n", "features", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_depth", "+", "1", ")", ":", "\n", "            ", "x", "=", "stages", "[", "i", "]", "(", "x", ")", "\n", "features", ".", "append", "(", "x", ")", "\n", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.backbone.resnet.ResNetEncoder.load_state_dict": [[66, 70], ["state_dict.pop", "state_dict.pop", "super().load_state_dict"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.backbone.resnet.ResNetEncoder.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "**", "kwargs", ")", ":", "\n", "        ", "state_dict", ".", "pop", "(", "\"fc.bias\"", ")", "\n", "state_dict", ".", "pop", "(", "\"fc.weight\"", ")", "\n", "super", "(", ")", ".", "load_state_dict", "(", "state_dict", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.nll_loss": [[9, 11], ["torch.nll_loss"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.nll_loss"], ["def", "nll_loss", "(", "output", ",", "target", ")", ":", "\n", "    ", "return", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.l1loss": [[13, 15], ["torch.l1_loss"], "function", ["None"], ["", "def", "l1loss", "(", "output", ",", "target", ")", ":", "\n", "    ", "return", "F", ".", "l1_loss", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.smooth_l1loss": [[17, 19], ["torch.smooth_l1_loss"], "function", ["None"], ["", "def", "smooth_l1loss", "(", "output", ",", "target", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "return", "F", ".", "smooth_l1_loss", "(", "output", ",", "target", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.CEloss": [[21, 23], ["torch.CrossEntropyLoss"], "function", ["None"], ["", "def", "CEloss", "(", "output", ",", "target", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "nn", ".", "CrossEntropyLoss", "(", "**", "kwargs", ")", "(", "output", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.focal_loss": [[25, 80], ["input.size", "util.one_hot", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "isinstance", "TypeError", "ValueError", "input.size", "target.size", "ValueError", "ValueError", "ValueError", "torch.softmax", "torch.log", "torch.log", "torch.log", "len", "input.size", "target.size", "input.size", "torch.mean", "torch.mean", "torch.mean", "type", "input.size", "target.size", "target.size", "torch.sum", "torch.sum", "torch.sum", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.one_hot"], ["", "def", "focal_loss", "(", "\n", "input", ":", "torch", ".", "Tensor", ",", "\n", "target", ":", "torch", ".", "Tensor", ",", "\n", "alpha", ":", "float", ",", "\n", "gamma", ":", "float", "=", "2.0", ",", "\n", "reduction", ":", "str", "=", "'none'", ",", "\n", "eps", ":", "float", "=", "1e-8", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "    ", "if", "not", "isinstance", "(", "input", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"Input type is not a torch.Tensor. Got {}\"", "\n", ".", "format", "(", "type", "(", "input", ")", ")", ")", "\n", "\n", "", "if", "not", "len", "(", "input", ".", "shape", ")", ">=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid input shape, we expect BxCx*. Got: {}\"", "\n", ".", "format", "(", "input", ".", "shape", ")", ")", "\n", "\n", "", "if", "input", ".", "size", "(", "0", ")", "!=", "target", ".", "size", "(", "0", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Expected input batch_size ({}) to match target batch_size ({}).'", "\n", ".", "format", "(", "input", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "", "n", "=", "input", ".", "size", "(", "0", ")", "\n", "out_size", "=", "(", "n", ",", ")", "+", "input", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "if", "target", ".", "size", "(", ")", "[", "1", ":", "]", "!=", "input", ".", "size", "(", ")", "[", "2", ":", "]", ":", "\n", "        ", "raise", "ValueError", "(", "'Expected target size {}, got {}'", ".", "format", "(", "\n", "out_size", ",", "target", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "if", "not", "input", ".", "device", "==", "target", ".", "device", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"input and target must be in the same device. Got: {} and {}\"", ".", "format", "(", "\n", "input", ".", "device", ",", "target", ".", "device", ")", ")", "\n", "\n", "# compute softmax over the classes axis", "\n", "", "input_soft", ":", "torch", ".", "Tensor", "=", "F", ".", "softmax", "(", "input", ",", "dim", "=", "1", ")", "+", "eps", "\n", "\n", "# create the labels one hot tensor", "\n", "target_one_hot", ":", "torch", ".", "Tensor", "=", "one_hot", "(", "\n", "target", ",", "num_classes", "=", "input", ".", "shape", "[", "1", "]", ",", "\n", "device", "=", "input", ".", "device", ",", "dtype", "=", "input", ".", "dtype", ")", "\n", "\n", "# compute the actual focal loss", "\n", "weight", "=", "torch", ".", "pow", "(", "-", "input_soft", "+", "1.", ",", "gamma", ")", "\n", "\n", "focal", "=", "-", "alpha", "*", "weight", "*", "torch", ".", "log", "(", "input_soft", ")", "\n", "loss_tmp", "=", "torch", ".", "sum", "(", "target_one_hot", "*", "focal", ",", "dim", "=", "1", ")", "\n", "\n", "if", "reduction", "==", "'none'", ":", "\n", "        ", "loss", "=", "loss_tmp", "\n", "", "elif", "reduction", "==", "'mean'", ":", "\n", "        ", "loss", "=", "torch", ".", "mean", "(", "loss_tmp", ")", "\n", "", "elif", "reduction", "==", "'sum'", ":", "\n", "        ", "loss", "=", "torch", ".", "sum", "(", "loss_tmp", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Invalid reduction mode: {}\"", "\n", ".", "format", "(", "reduction", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.giou": [[82, 104], ["torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.minimum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum", "torch.maximum"], "function", ["None"], ["", "def", "giou", "(", "pred", ",", "gt", ",", "eps", "=", "1e-7", ")", ":", "\n", "# pred, gt in xyhw", "\n", "    ", "gt_area", "=", "gt", "[", "2", "]", "*", "gt", "[", "3", "]", "\n", "pred_area", "=", "pred", "[", "2", "]", "*", "pred", "[", "3", "]", "\n", "# intersection", "\n", "tp_x", "=", "torch", ".", "maximum", "(", "gt", "[", "0", "]", "-", "gt", "[", "3", "]", "/", "2", ",", "pred", "[", "0", "]", "-", "pred", "[", "3", "]", "/", "2", ")", "\n", "tp_y", "=", "torch", ".", "maximum", "(", "gt", "[", "1", "]", "-", "gt", "[", "2", "]", "/", "2", ",", "pred", "[", "1", "]", "-", "pred", "[", "2", "]", "/", "2", ")", "\n", "br_x", "=", "torch", ".", "minimum", "(", "gt", "[", "0", "]", "+", "gt", "[", "3", "]", "/", "2", ",", "pred", "[", "0", "]", "+", "pred", "[", "3", "]", "/", "2", ")", "\n", "br_y", "=", "torch", ".", "minimum", "(", "gt", "[", "1", "]", "+", "gt", "[", "2", "]", "/", "2", ",", "pred", "[", "1", "]", "+", "pred", "[", "2", "]", "/", "2", ")", "\n", "inter", "=", "(", "br_x", "-", "tp_x", ")", "*", "(", "br_y", "-", "tp_y", ")", "\n", "union", "=", "gt_area", "+", "pred_area", "-", "inter", "\n", "iou", "=", "inter", "/", "(", "union", "+", "eps", ")", "\n", "# enclosure", "\n", "tp_x", "=", "torch", ".", "minimum", "(", "gt", "[", "0", "]", "-", "gt", "[", "3", "]", "/", "2", ",", "pred", "[", "0", "]", "-", "pred", "[", "3", "]", "/", "2", ")", "\n", "tp_y", "=", "torch", ".", "minimum", "(", "gt", "[", "1", "]", "-", "gt", "[", "2", "]", "/", "2", ",", "pred", "[", "1", "]", "-", "pred", "[", "2", "]", "/", "2", ")", "\n", "br_x", "=", "torch", ".", "maximum", "(", "gt", "[", "0", "]", "+", "gt", "[", "3", "]", "/", "2", ",", "pred", "[", "0", "]", "+", "pred", "[", "3", "]", "/", "2", ")", "\n", "br_y", "=", "torch", ".", "maximum", "(", "gt", "[", "1", "]", "+", "gt", "[", "2", "]", "/", "2", ",", "pred", "[", "1", "]", "+", "pred", "[", "2", "]", "/", "2", ")", "\n", "enclosure", "=", "(", "br_x", "-", "tp_x", ")", "*", "(", "br_y", "-", "tp_y", ")", "\n", "# giou", "\n", "giou", "=", "iou", "-", "(", "enclosure", "-", "union", ")", "/", "(", "enclosure", "+", "eps", ")", "\n", "\n", "return", "giou", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_double_vote.relational_boxfields_loss": [[6, 188], ["target[].to", "target[].to", "target[].to", "target[].to", "target[].to", "target[].to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "handmask_bn.any", "loss_lib.focal_loss", "range", "torch.sqrt", "loss_lib.focal_loss", "torch.sqrt", "GT[].type", "range", "range", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "GT[].type", "util.xyxy2mask_ts().to", "this_hand_contact_mask.any", "this_nonoverlap_hand_mask.any", "util.xyxy2mask_ts().to", "this_nonoverlap_obj_mask.any", "loss_lib.smooth_l1loss", "loss_lib.smooth_l1loss", "loss_lib.smooth_l1loss", "loss_lib.smooth_l1loss", "loss_lib.smooth_l1loss", "[].mean", "loss_lib.smooth_l1loss", "loss_lib.smooth_l1loss", "loss_lib.smooth_l1loss", "loss_lib.smooth_l1loss", "loss_lib.smooth_l1loss", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "util.xyxy2mask_ts", "util.xyxy2mask_ts"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.focal_loss", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.focal_loss", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.smooth_l1loss", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.smooth_l1loss", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.smooth_l1loss", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.smooth_l1loss", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.smooth_l1loss", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.smooth_l1loss", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.smooth_l1loss", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.smooth_l1loss", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.smooth_l1loss", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.smooth_l1loss", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.xyxy2mask_ts", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.xyxy2mask_ts"], ["def", "relational_boxfields_loss", "(", "output", ",", "target", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "\"\"\"\n        output shape:   Nx14xHxW\n        target shape:   Nx12xHxW\n        handmask shape: NxHxW\n        objmask shape:  NxHxW\n        \n        target channel info: tr, a(h), b(w), th, tw, contact  \n    \"\"\"", "\n", "\n", "batch_size", ",", "_", ",", "h", ",", "w", "=", "output", ".", "shape", "\n", "\n", "device", "=", "output", ".", "device", "\n", "GT", "=", "target", "[", "'GT'", "]", ".", "to", "(", "device", ")", "\n", "handmask", "=", "target", "[", "'handmask'", "]", ".", "to", "(", "device", ")", "\n", "contact_mask", "=", "target", "[", "'contact_mask'", "]", ".", "to", "(", "device", ")", "\n", "objbox_mask", "=", "target", "[", "'objbox_mask'", "]", ".", "to", "(", "device", ")", "\n", "\n", "nhands", "=", "target", "[", "'nhands'", "]", "\n", "n_unique_objs", "=", "target", "[", "'n_unique_objs'", "]", "\n", "enlarged_hand_bboxes", "=", "target", "[", "'padded_enlarged_unqiue_hand_bboxes'", "]", ".", "to", "(", "device", ")", "\n", "enlarged_obj_bboxes", "=", "target", "[", "'padded_enlarged_unqiue_obj_bboxes'", "]", ".", "to", "(", "device", ")", "\n", "\n", "total_nonoverlap_hands", "=", "0", "\n", "total_nonoverlap_contact_hands", "=", "0", "\n", "total_nonoverlap_objs", "=", "0", "\n", "\n", "# hands to objs losses", "\n", "tr_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "cos_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "sin_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "th_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "tw_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "contact_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "# objs losses", "\n", "obj_tr_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "obj_cos_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "obj_sin_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "obj_th_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "obj_tw_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "obj_prob_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "\n", "handmask_bn", "=", "handmask", "==", "1", "\n", "\n", "# hands to objs predictions", "\n", "tr_pred", "=", "output", "[", ":", ",", "0", "]", "\n", "cos_pred", "=", "output", "[", ":", ",", "1", "]", "\n", "sin_pred", "=", "output", "[", ":", ",", "2", "]", "\n", "theta_unit_pred", "=", "torch", ".", "sqrt", "(", "cos_pred", "**", "2", "+", "sin_pred", "**", "2", ")", "+", "eps", "\n", "cos_pred", "=", "cos_pred", "/", "theta_unit_pred", "\n", "sin_pred", "=", "sin_pred", "/", "theta_unit_pred", "\n", "th_pred", "=", "output", "[", ":", ",", "3", "]", "\n", "tw_pred", "=", "output", "[", ":", ",", "4", "]", "\n", "\n", "# precompute contact_prob loss", "\n", "if", "handmask_bn", ".", "any", "(", ")", ":", "\n", "        ", "contact_pred", "=", "output", "[", ":", ",", "5", ":", "7", "]", "\n", "contact_loss_all", "=", "focal_loss", "(", "contact_pred", ",", "GT", "[", ":", ",", "5", "]", ".", "type", "(", "torch", ".", "long", ")", ",", "0.25", ",", "reduction", "=", "'none'", ")", "\n", "\n", "# objs predictions", "\n", "", "obj_tr_pred", "=", "output", "[", ":", ",", "7", "]", "\n", "obj_cos_pred", "=", "output", "[", ":", ",", "8", "]", "\n", "obj_sin_pred", "=", "output", "[", ":", ",", "9", "]", "\n", "obj_theta_unit_pred", "=", "torch", ".", "sqrt", "(", "obj_cos_pred", "**", "2", "+", "obj_sin_pred", "**", "2", ")", "+", "eps", "\n", "obj_cos_pred", "=", "obj_cos_pred", "/", "obj_theta_unit_pred", "\n", "obj_sin_pred", "=", "obj_sin_pred", "/", "obj_theta_unit_pred", "\n", "obj_th_pred", "=", "output", "[", ":", ",", "10", "]", "\n", "obj_tw_pred", "=", "output", "[", ":", ",", "11", "]", "\n", "obj_pred", "=", "output", "[", ":", ",", "12", ":", "14", "]", "\n", "\n", "# precompute is_obj_loss", "\n", "obj_prob_loss", "=", "focal_loss", "(", "obj_pred", ",", "GT", "[", ":", ",", "11", "]", ".", "type", "(", "torch", ".", "long", ")", ",", "0.25", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "# for each sample", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "this_handmask", "=", "handmask", "[", "b", "]", "\n", "this_contact_mask", "=", "contact_mask", "[", "b", "]", "\n", "this_objbox_mask", "=", "objbox_mask", "[", "b", "]", "\n", "\n", "this_enlarged_hand_bboxes", "=", "enlarged_hand_bboxes", "[", "b", ",", ":", "nhands", "[", "b", "]", "]", "\n", "this_enlarged_obj_bboxes", "=", "enlarged_obj_bboxes", "[", "b", ",", ":", "n_unique_objs", "[", "b", "]", "]", "\n", "\n", "# for each hand", "\n", "for", "i", "in", "range", "(", "nhands", "[", "b", "]", ")", ":", "\n", "            ", "this_enlarged_hand_mask", "=", "xyxy2mask_ts", "(", "*", "this_enlarged_hand_bboxes", "[", "i", "]", ",", "h", ",", "w", ")", ".", "to", "(", "device", ")", "\n", "this_nonoverlap_hand_mask", "=", "(", "this_handmask", "*", "this_enlarged_hand_mask", ")", "==", "1", "\n", "this_hand_contact_mask", "=", "(", "this_contact_mask", "*", "this_enlarged_hand_mask", ")", "==", "1", "\n", "# r, h, w", "\n", "if", "this_hand_contact_mask", ".", "any", "(", ")", ":", "\n", "                ", "this_tr_pred", "=", "tr_pred", "[", "b", "]", "[", "this_hand_contact_mask", "]", "\n", "this_cos_pred", "=", "cos_pred", "[", "b", "]", "[", "this_hand_contact_mask", "]", "\n", "this_sin_pred", "=", "sin_pred", "[", "b", "]", "[", "this_hand_contact_mask", "]", "\n", "this_th_pred", "=", "th_pred", "[", "b", "]", "[", "this_hand_contact_mask", "]", "\n", "this_tw_pred", "=", "tw_pred", "[", "b", "]", "[", "this_hand_contact_mask", "]", "\n", "\n", "tr_loss", "+=", "smooth_l1loss", "(", "this_tr_pred", ",", "GT", "[", "b", ",", "0", "]", "[", "this_hand_contact_mask", "]", ",", "reduction", "=", "'mean'", ")", "\n", "cos_loss", "+=", "smooth_l1loss", "(", "this_cos_pred", ",", "GT", "[", "b", ",", "1", "]", "[", "this_hand_contact_mask", "]", ",", "reduction", "=", "'mean'", ")", "\n", "sin_loss", "+=", "smooth_l1loss", "(", "this_sin_pred", ",", "GT", "[", "b", ",", "2", "]", "[", "this_hand_contact_mask", "]", ",", "reduction", "=", "'mean'", ")", "\n", "th_loss", "+=", "smooth_l1loss", "(", "this_th_pred", ",", "GT", "[", "b", ",", "3", "]", "[", "this_hand_contact_mask", "]", ",", "reduction", "=", "'mean'", ")", "\n", "tw_loss", "+=", "smooth_l1loss", "(", "this_tw_pred", ",", "GT", "[", "b", ",", "4", "]", "[", "this_hand_contact_mask", "]", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "total_nonoverlap_contact_hands", "+=", "1", "\n", "\n", "# contact_prob", "\n", "", "if", "this_nonoverlap_hand_mask", ".", "any", "(", ")", ":", "\n", "                ", "contact_loss", "+=", "contact_loss_all", "[", "b", "]", "[", "this_nonoverlap_hand_mask", "]", ".", "mean", "(", ")", "\n", "total_nonoverlap_hands", "+=", "1", "\n", "\n", "# for each object", "\n", "", "", "for", "i", "in", "range", "(", "n_unique_objs", "[", "b", "]", ")", ":", "\n", "            ", "this_enlarged_obj_mask", "=", "xyxy2mask_ts", "(", "*", "this_enlarged_obj_bboxes", "[", "i", "]", ",", "h", ",", "w", ")", ".", "to", "(", "device", ")", "\n", "this_nonoverlap_obj_mask", "=", "(", "this_objbox_mask", "*", "this_enlarged_obj_mask", ")", "==", "1", "\n", "# r, h, w", "\n", "if", "this_nonoverlap_obj_mask", ".", "any", "(", ")", ":", "\n", "                ", "this_tr_pred", "=", "obj_tr_pred", "[", "b", "]", "[", "this_nonoverlap_obj_mask", "]", "\n", "this_cos_pred", "=", "obj_cos_pred", "[", "b", "]", "[", "this_nonoverlap_obj_mask", "]", "\n", "this_sin_pred", "=", "obj_sin_pred", "[", "b", "]", "[", "this_nonoverlap_obj_mask", "]", "\n", "this_th_pred", "=", "obj_th_pred", "[", "b", "]", "[", "this_nonoverlap_obj_mask", "]", "\n", "this_tw_pred", "=", "obj_tw_pred", "[", "b", "]", "[", "this_nonoverlap_obj_mask", "]", "\n", "\n", "obj_tr_loss", "+=", "smooth_l1loss", "(", "this_tr_pred", ",", "GT", "[", "b", ",", "6", "]", "[", "this_nonoverlap_obj_mask", "]", ",", "reduction", "=", "'mean'", ")", "\n", "obj_cos_loss", "+=", "smooth_l1loss", "(", "this_cos_pred", ",", "GT", "[", "b", ",", "7", "]", "[", "this_nonoverlap_obj_mask", "]", ",", "reduction", "=", "'mean'", ")", "\n", "obj_sin_loss", "+=", "smooth_l1loss", "(", "this_sin_pred", ",", "GT", "[", "b", ",", "8", "]", "[", "this_nonoverlap_obj_mask", "]", ",", "reduction", "=", "'mean'", ")", "\n", "obj_th_loss", "+=", "smooth_l1loss", "(", "this_th_pred", ",", "GT", "[", "b", ",", "9", "]", "[", "this_nonoverlap_obj_mask", "]", ",", "reduction", "=", "'mean'", ")", "\n", "obj_tw_loss", "+=", "smooth_l1loss", "(", "this_tw_pred", ",", "GT", "[", "b", ",", "10", "]", "[", "this_nonoverlap_obj_mask", "]", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "total_nonoverlap_objs", "+=", "1", "\n", "\n", "# Average among contacing hands", "\n", "", "", "", "if", "total_nonoverlap_contact_hands", ">", "0", ":", "\n", "        ", "tr_loss", "=", "tr_loss", "/", "total_nonoverlap_contact_hands", "\n", "cos_loss", "=", "cos_loss", "/", "total_nonoverlap_contact_hands", "\n", "sin_loss", "=", "sin_loss", "/", "total_nonoverlap_contact_hands", "\n", "th_loss", "=", "th_loss", "/", "total_nonoverlap_contact_hands", "\n", "tw_loss", "=", "tw_loss", "/", "total_nonoverlap_contact_hands", "\n", "", "else", ":", "\n", "        ", "tr_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "cos_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "sin_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "th_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "tw_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Avearge among hands", "\n", "", "if", "total_nonoverlap_hands", ">", "0", ":", "\n", "        ", "contact_loss", "=", "contact_loss", "/", "total_nonoverlap_hands", "\n", "", "else", ":", "\n", "        ", "contact_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Average among objs", "\n", "", "if", "total_nonoverlap_objs", ">", "0", ":", "\n", "        ", "obj_tr_loss", "=", "obj_tr_loss", "/", "total_nonoverlap_objs", "\n", "obj_cos_loss", "=", "obj_cos_loss", "/", "total_nonoverlap_objs", "\n", "obj_sin_loss", "=", "obj_sin_loss", "/", "total_nonoverlap_objs", "\n", "obj_th_loss", "=", "obj_th_loss", "/", "total_nonoverlap_objs", "\n", "obj_tw_loss", "=", "obj_tw_loss", "/", "total_nonoverlap_objs", "\n", "", "else", ":", "\n", "        ", "obj_tr_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "obj_cos_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "obj_sin_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "obj_th_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "obj_tw_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "total_loss", "=", "tr_loss", "+", "cos_loss", "+", "sin_loss", "+", "th_loss", "+", "tw_loss", "+", "contact_loss", "+", "obj_tr_loss", "+", "obj_cos_loss", "+", "obj_sin_loss", "+", "obj_th_loss", "+", "obj_tw_loss", "+", "obj_prob_loss", "\n", "\n", "losses", "=", "{", "\n", "'tr_loss'", ":", "tr_loss", ",", "\n", "'cos_loss'", ":", "cos_loss", ",", "\n", "'sin_loss'", ":", "sin_loss", ",", "\n", "'th_loss'", ":", "th_loss", ",", "\n", "'tw_loss'", ":", "tw_loss", ",", "\n", "'obj_tr_loss'", ":", "obj_tr_loss", ",", "\n", "'obj_cos_loss'", ":", "obj_cos_loss", ",", "\n", "'obj_sin_loss'", ":", "obj_sin_loss", ",", "\n", "'obj_th_loss'", ":", "obj_th_loss", ",", "\n", "'obj_tw_loss'", ":", "obj_tw_loss", ",", "\n", "'contact_loss'", ":", "contact_loss", ",", "\n", "'obj_prob_loss'", ":", "obj_prob_loss", ",", "\n", "'total_loss'", ":", "total_loss", "\n", "}", "\n", "return", "losses", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_rl_voting.rl_loss": [[8, 92], ["target[].to", "target[].to", "torch.tensor().to", "range", "votings.voting_lib.get_predictions_ts", "votings.voting_lib.get_center_predictions_ts", "votings.voting_lib.get_predictions_ts", "votings.voting_lib.get_center_predictions_ts", "range", "torch.tensor", "padded_obj_bboxes[].any", "votings.voting_general.box_field_voting", "votings.voting_general.maksed_inliers_gaussian_sum", "range", "util.xyxy2mask_ts().to", "loss_lib.giou", "votings.voting_general.box_field_voting", "votings.voting_general.maksed_inliers_gaussian_sum", "util.xyxy2mask_ts().to", "loss_lib.giou", "util.xyxy2mask_ts", "util.xyxy2mask_ts"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.get_predictions_ts", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.get_center_predictions_ts", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.get_predictions_ts", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_lib.get_center_predictions_ts", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_general.box_field_voting", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_general.maksed_inliers_gaussian_sum", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.giou", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_general.box_field_voting", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.votings.voting_general.maksed_inliers_gaussian_sum", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_lib.giou", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.xyxy2mask_ts", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.model.util.xyxy2mask_ts"], ["def", "rl_loss", "(", "output", ",", "target", ",", "eps", "=", "1e-7", ")", ":", "\n", "\n", "    ", "batch_size", ",", "_", ",", "h", ",", "w", "=", "output", ".", "shape", "\n", "\n", "device", "=", "output", ".", "device", "\n", "nhands", "=", "target", "[", "'nhands'", "]", "\n", "h_a", ",", "w_a", ",", "r_a", ",", "obj_r_a", "=", "target", "[", "'h_a'", "]", "[", "0", "]", ",", "target", "[", "'w_a'", "]", "[", "0", "]", ",", "target", "[", "'r_a'", "]", "[", "0", "]", ",", "target", "[", "'obj_r_a'", "]", "[", "0", "]", "\n", "\n", "enlarged_hand_bboxes", "=", "target", "[", "'padded_enlarged_unqiue_hand_bboxes'", "]", ".", "to", "(", "device", ")", "\n", "padded_obj_bboxes", "=", "target", "[", "'padded_enlarged_obj_bboxes'", "]", ".", "to", "(", "device", ")", "\n", "\n", "total_loss", "=", "torch", ".", "tensor", "(", "0.", ")", ".", "to", "(", "device", ")", "\n", "total_num_objs", "=", "0", "\n", "\n", "# for each sample", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "# if there is no contacts", "\n", "        ", "if", "not", "padded_obj_bboxes", "[", "b", "]", ".", "any", "(", ")", ":", "\n", "            ", "continue", "\n", "\n", "# get predictions", "\n", "## h2o", "\n", "", "h2o_r", ",", "h2o_cos", ",", "h2osin", ",", "h2o_h", ",", "h2o_w", ",", "contact_prob", "=", "get_predictions_ts", "(", "output", "[", "b", ",", ":", "7", "]", ",", "h_a", ",", "w_a", ",", "r_a", ",", "eps", ")", "\n", "h2o_ys", ",", "h2o_xs", "=", "get_center_predictions_ts", "(", "h2o_r", ",", "h2o_cos", ",", "h2osin", ")", "\n", "## o2o", "\n", "o2o_r", ",", "o2o_cos", ",", "o2osin", ",", "o2o_h", ",", "o2o_w", ",", "obj_prob", "=", "get_predictions_ts", "(", "output", "[", "b", ",", "7", ":", "]", ",", "h_a", ",", "w_a", ",", "obj_r_a", ",", "eps", ")", "\n", "o2o_ys", ",", "o2o_xs", "=", "get_center_predictions_ts", "(", "o2o_r", ",", "o2o_cos", ",", "o2osin", ")", "\n", "\n", "# for each hand", "\n", "for", "i", "in", "range", "(", "nhands", "[", "b", "]", ")", ":", "\n", "# skip small objects", "\n", "            ", "if", "padded_obj_bboxes", "[", "b", ",", "i", ",", "2", "]", "*", "padded_obj_bboxes", "[", "b", ",", "i", ",", "3", "]", "<", "10", ":", "\n", "                ", "continue", "\n", "\n", "", "ox_gt", ",", "oy_gt", ",", "oh_gt", ",", "ow_gt", "=", "padded_obj_bboxes", "[", "b", ",", "i", "]", "\n", "# average of hand pixels", "\n", "this_hand_mask", "=", "xyxy2mask_ts", "(", "*", "enlarged_hand_bboxes", "[", "b", ",", "i", "]", ",", "h", ",", "w", ")", ".", "to", "(", "device", ")", "==", "1", "\n", "\n", "# voting", "\n", "ox_major", ",", "oy_major", ",", "oh_major", ",", "ow_major", "=", "box_field_voting", "(", "\n", "h2o_xs", "[", "this_hand_mask", "]", ",", "\n", "h2o_ys", "[", "this_hand_mask", "]", ",", "\n", "h2o_h", "[", "this_hand_mask", "]", ",", "\n", "h2o_w", "[", "this_hand_mask", "]", ",", "\n", "contact_prob", "[", "this_hand_mask", "]", ",", "\n", "h", ",", "w", "\n", ")", "\n", "ox_pred", ",", "oy_pred", ",", "oh_pred", ",", "ow_pred", ",", "_", "=", "maksed_inliers_gaussian_sum", "(", "\n", "h2o_xs", "[", "this_hand_mask", "]", ",", "\n", "h2o_ys", "[", "this_hand_mask", "]", ",", "\n", "h2o_h", "[", "this_hand_mask", "]", ",", "\n", "h2o_w", "[", "this_hand_mask", "]", ",", "\n", "contact_prob", "[", "this_hand_mask", "]", ",", "\n", "ox_major", ",", "oy_major", ",", "oh_major", ",", "ow_major", "\n", ")", "\n", "total_loss", "+=", "(", "1", "-", "giou", "(", "[", "ox_pred", ",", "oy_pred", ",", "oh_pred", ",", "ow_pred", "]", ",", "[", "ox_gt", ",", "oy_gt", ",", "oh_gt", ",", "ow_gt", "]", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "# horizon of 5", "\n", "                ", "ox1", "=", "ox_pred", "-", "ow_pred", "/", "2", "\n", "oy1", "=", "oy_pred", "-", "oh_pred", "/", "2", "\n", "ox2", "=", "ox_pred", "+", "ow_pred", "/", "2", "\n", "oy2", "=", "oy_pred", "+", "oh_pred", "/", "2", "\n", "this_obj_mask", "=", "xyxy2mask_ts", "(", "ox1", ",", "oy1", ",", "ox2", ",", "oy2", ",", "h", ",", "w", ")", ".", "to", "(", "device", ")", "==", "1", "\n", "ox_major", ",", "oy_major", ",", "oh_major", ",", "ow_major", "=", "box_field_voting", "(", "\n", "o2o_xs", "[", "this_obj_mask", "]", ",", "\n", "o2o_ys", "[", "this_obj_mask", "]", ",", "\n", "o2o_h", "[", "this_obj_mask", "]", ",", "\n", "o2o_w", "[", "this_obj_mask", "]", ",", "\n", "obj_prob", "[", "this_obj_mask", "]", ",", "\n", "h", ",", "w", "\n", ")", "\n", "ox_pred", ",", "oy_pred", ",", "oh_pred", ",", "ow_pred", ",", "_", "=", "maksed_inliers_gaussian_sum", "(", "\n", "o2o_xs", "[", "this_obj_mask", "]", ",", "\n", "o2o_ys", "[", "this_obj_mask", "]", ",", "\n", "o2o_h", "[", "this_obj_mask", "]", ",", "\n", "o2o_w", "[", "this_obj_mask", "]", ",", "\n", "obj_prob", "[", "this_obj_mask", "]", ",", "\n", "ox_major", ",", "oy_major", ",", "oh_major", ",", "ow_major", "\n", ")", "\n", "total_loss", "+=", "(", "1", "-", "giou", "(", "[", "ox_pred", ",", "oy_pred", ",", "oh_pred", ",", "ow_pred", "]", ",", "[", "ox_gt", ",", "oy_gt", ",", "oh_gt", ",", "ow_gt", "]", ")", ")", "\n", "", "total_num_objs", "+=", "1", "\n", "", "", "if", "total_num_objs", ">", "0", ":", "\n", "        ", "total_loss", "=", "total_loss", "/", "total_num_objs", "/", "6", "\n", "", "return", "{", "'total_loss'", ":", "total_loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_rl_voting.combined_loss": [[94, 101], ["loss_double_vote.relational_boxfields_loss", "loss_rl_voting.rl_loss"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_double_vote.relational_boxfields_loss", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.losses.loss_rl_voting.rl_loss"], ["", "def", "combined_loss", "(", "output", ",", "target", ",", "eps", "=", "1e-7", ")", ":", "\n", "    ", "fields_losses", "=", "relational_boxfields_loss", "(", "output", ",", "target", ")", "\n", "rl_losses", "=", "rl_loss", "(", "output", ",", "target", ")", "\n", "fields_losses", "[", "'giou_loss'", "]", "=", "fields_losses", "[", "'total_loss'", "]", "\n", "fields_losses", "[", "'total_loss'", "]", "=", "fields_losses", "[", "'total_loss'", "]", "+", "rl_losses", "[", "'total_loss'", "]", "\n", "return", "fields_losses", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.doh100.DOH100DataLoader.__init__": [[21, 31], ["doh100.DOH100Dataset", "base.BaseDataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "\n", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "validation_split", "=", "0.0", ",", "\n", "num_workers", "=", "1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "DOH100Dataset", "(", "**", "kwargs", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dataset", ",", "batch_size", ",", "shuffle", ",", "\n", "validation_split", ",", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.doh100.DOH100Dataset.__init__": [[38, 85], ["sorted", "torchvision.transforms.Normalize", "torchvision.transforms.ColorJitter", "len", "open", "json.loads", "doh100.DOH100Dataset.annotations.keys", "open", "pickle.load", "os.path.join", "j.read"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "priors", ",", "\n", "img_root", "=", "'100DOH_FOLDER/raw'", ",", "\n", "annotation_dir", "=", "'100DOH_FOLDER/file'", ",", "\n", "mode", "=", "'train'", ",", "\n", "inp_size", "=", "224", ",", "\n", "bbox_area_thres", "=", "1", ",", "\n", "bbox_w_thres", "=", "1", ",", "\n", "bbox_h_thres", "=", "1", ",", "\n", "hand_bbox_ratio", "=", "1.", ",", "\n", "max_nhands", "=", "17", ",", "\n", "max_nobjs", "=", "17", ",", "\n", "use_gt_hand", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "img_root", "=", "img_root", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "annotation_dir", ",", "f'{mode}.json'", ")", ",", "'r'", ")", "as", "j", ":", "\n", "            ", "self", ".", "annotations", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "self", ".", "keyframe_list", "=", "sorted", "(", "self", ".", "annotations", ".", "keys", "(", ")", ")", "\n", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "color_jitter", "=", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "0.1", ",", "contrast", "=", "0.1", ",", "saturation", "=", "0.1", ",", "hue", "=", "0.01", ")", "\n", "\n", "# set properties", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "priors", "=", "priors", "\n", "self", ".", "inp_size", "=", "inp_size", "\n", "self", ".", "len", "=", "len", "(", "self", ".", "keyframe_list", ")", "\n", "self", ".", "hand_bbox_ratio", "=", "hand_bbox_ratio", "\n", "self", ".", "use_gt_hand", "=", "use_gt_hand", "\n", "self", ".", "max_nhands", "=", "max_nhands", "\n", "self", ".", "max_nobjs", "=", "max_nobjs", "\n", "\n", "# threshold for minimal bbox", "\n", "self", ".", "bbox_area_thres", "=", "bbox_area_thres", "\n", "self", ".", "bbox_h_thres", "=", "bbox_h_thres", "\n", "self", ".", "bbox_w_thres", "=", "bbox_w_thres", "\n", "\n", "# for alignment with 100 doh", "\n", "doh100_dets_path", "=", "'saved/detections.pkl'", "\n", "with", "open", "(", "doh100_dets_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "doh100_dets", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "doh100_dets_objs", "=", "doh100_dets", "[", "1", "]", "\n", "self", ".", "doh100_dets_hands", "=", "doh100_dets", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.doh100.DOH100Dataset.hand_bbox_aug": [[86, 95], ["data_utils.threshold", "data_utils.threshold", "data_utils.threshold", "data_utils.threshold"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold"], ["", "def", "hand_bbox_aug", "(", "self", ",", "hand_bbox", ",", "h_thres", ",", "w_thres", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "hand_bbox", "\n", "dh", "=", "(", "y2", "-", "y1", ")", "*", "(", "self", ".", "hand_bbox_ratio", "-", "1", ")", "//", "2", "\n", "dw", "=", "(", "x2", "-", "x1", ")", "*", "(", "self", ".", "hand_bbox_ratio", "-", "1", ")", "//", "2", "\n", "x1", "=", "threshold", "(", "x1", "-", "dw", ",", "0", ",", "w_thres", ")", "\n", "y1", "=", "threshold", "(", "y1", "-", "dh", ",", "0", ",", "h_thres", ")", "\n", "x2", "=", "threshold", "(", "x2", "+", "dw", ",", "0", ",", "w_thres", ")", "\n", "y2", "=", "threshold", "(", "y2", "+", "dh", ",", "0", ",", "h_thres", ")", "\n", "return", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.doh100.DOH100Dataset.get_handobj_bboxs": [[96, 144], ["len", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.rint().astype", "numpy.rint().astype", "trans_fn", "trans_fn", "trans_fn", "trans_fn", "doh100.DOH100Dataset.hand_bbox_aug", "handobj.get", "trans_fn", "trans_fn", "trans_fn", "trans_fn", "numpy.rint", "numpy.rint"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.hand_bbox_aug"], ["", "def", "get_handobj_bboxs", "(", "self", ",", "handobj_info", ",", "crop_info", ")", ":", "\n", "        ", "trans_fn", "=", "crop_info", "[", "'trans_fn'", "]", "\n", "h", "=", "crop_info", "[", "'h'", "]", "\n", "w", "=", "crop_info", "[", "'w'", "]", "\n", "ci", "=", "crop_info", "[", "'ci'", "]", "\n", "cj", "=", "crop_info", "[", "'cj'", "]", "\n", "rh", "=", "crop_info", "[", "'rh'", "]", "\n", "rw", "=", "crop_info", "[", "'rw'", "]", "\n", "h_thres", "=", "crop_info", "[", "'h_thres'", "]", "\n", "w_thres", "=", "crop_info", "[", "'w_thres'", "]", "\n", "horizental_flip", "=", "crop_info", "[", "'horizental_flip'", "]", "\n", "vertical_flip", "=", "crop_info", "[", "'vertical_flip'", "]", "\n", "\n", "nhands", "=", "len", "(", "handobj_info", ")", "\n", "hand_bboxs", "=", "np", ".", "zeros", "(", "(", "nhands", ",", "4", ")", ")", "\n", "obj_bboxs", "=", "np", ".", "zeros", "(", "(", "nhands", ",", "4", ")", ")", "\n", "for", "i", ",", "handobj", "in", "enumerate", "(", "handobj_info", ")", ":", "\n", "            ", "x1", "=", "trans_fn", "(", "handobj", "[", "'x1'", "]", ",", "w", ",", "cj", ",", "rw", ",", "0", ",", "w_thres", ")", "\n", "y1", "=", "trans_fn", "(", "handobj", "[", "'y1'", "]", ",", "h", ",", "ci", ",", "rh", ",", "0", ",", "h_thres", ")", "\n", "x2", "=", "trans_fn", "(", "handobj", "[", "'x2'", "]", ",", "w", ",", "cj", ",", "rw", ",", "0", ",", "w_thres", ")", "\n", "y2", "=", "trans_fn", "(", "handobj", "[", "'y2'", "]", ",", "h", ",", "ci", ",", "rh", ",", "0", ",", "h_thres", ")", "\n", "# augment hand bbox", "\n", "hand_bboxs", "[", "i", "]", "=", "self", ".", "hand_bbox_aug", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "h_thres", ",", "w_thres", ")", "\n", "if", "handobj", ".", "get", "(", "\"obj_bbox\"", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "bbox_info", "=", "handobj", "[", "'obj_bbox'", "]", "\n", "\n", "bx1", "=", "trans_fn", "(", "bbox_info", "[", "'x1'", "]", ",", "w", ",", "cj", ",", "rw", ",", "0", ",", "w_thres", ")", "\n", "by1", "=", "trans_fn", "(", "bbox_info", "[", "'y1'", "]", ",", "h", ",", "ci", ",", "rh", ",", "0", ",", "h_thres", ")", "\n", "bx2", "=", "trans_fn", "(", "bbox_info", "[", "'x2'", "]", ",", "w", ",", "cj", ",", "rw", ",", "0", ",", "w_thres", ")", "\n", "by2", "=", "trans_fn", "(", "bbox_info", "[", "'y2'", "]", ",", "h", ",", "ci", ",", "rh", ",", "0", ",", "h_thres", ")", "\n", "obj_bboxs", "[", "i", "]", "=", "[", "bx1", ",", "by1", ",", "bx2", ",", "by2", "]", "\n", "\n", "# flip boxes", "\n", "", "", "if", "horizental_flip", ":", "\n", "            ", "hand_bboxs", "[", ":", ",", "0", "]", ",", "hand_bboxs", "[", ":", ",", "2", "]", "=", "w_thres", "-", "hand_bboxs", "[", ":", ",", "2", "]", ",", "w_thres", "-", "hand_bboxs", "[", ":", ",", "0", "]", "\n", "obj_bboxs", "[", ":", ",", "0", "]", ",", "obj_bboxs", "[", ":", ",", "2", "]", "=", "w_thres", "-", "obj_bboxs", "[", ":", ",", "2", "]", ",", "w_thres", "-", "obj_bboxs", "[", ":", ",", "0", "]", "\n", "", "if", "vertical_flip", ":", "\n", "            ", "hand_bboxs", "[", ":", ",", "1", "]", ",", "hand_bboxs", "[", ":", ",", "3", "]", "=", "h_thres", "-", "hand_bboxs", "[", ":", ",", "3", "]", ",", "h_thres", "-", "hand_bboxs", "[", ":", ",", "1", "]", "\n", "obj_bboxs", "[", ":", ",", "1", "]", ",", "obj_bboxs", "[", ":", ",", "3", "]", "=", "h_thres", "-", "obj_bboxs", "[", ":", ",", "3", "]", ",", "h_thres", "-", "obj_bboxs", "[", ":", ",", "1", "]", "\n", "\n", "# round to int", "\n", "", "hand_bboxs", "=", "np", ".", "rint", "(", "hand_bboxs", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "obj_bboxs", "=", "np", ".", "rint", "(", "obj_bboxs", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "hand_bboxs", ",", "obj_bboxs", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.doh100.DOH100Dataset.prepare_GT": [[145, 236], ["torch.zeros", "torch.zeros", "torch.zeros", "numpy.zeros().astype", "numpy.zeros().astype", "enumerate", "numpy.zeros().astype", "numpy.unique", "enumerate", "numpy.rint().astype", "torch.meshgrid", "numpy.zeros", "numpy.zeros", "torch.meshgrid", "numpy.zeros", "torch.arange", "torch.arange", "numpy.sqrt", "torch.clip", "torch.log", "torch.log", "torch.arange", "torch.arange", "numpy.sqrt", "torch.clip", "torch.log", "torch.log", "numpy.rint", "torch.log", "torch.tensor", "torch.tensor", "torch.log", "torch.tensor", "torch.tensor", "data_utils.enlarge_box"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.enlarge_box"], ["", "def", "prepare_GT", "(", "self", ",", "hand_bboxs", ",", "obj_bboxs", ",", "crop_info", ")", ":", "\n", "# priors", "\n", "        ", "h_a", "=", "self", ".", "priors", "[", "'h_a'", "]", "\n", "w_a", "=", "self", ".", "priors", "[", "'w_a'", "]", "\n", "r_a", "=", "self", ".", "priors", "[", "'r_a'", "]", "\n", "obj_r_a", "=", "self", ".", "priors", "[", "'obj_r_a'", "]", "\n", "h_thres", "=", "crop_info", "[", "'h_thres'", "]", "\n", "w_thres", "=", "crop_info", "[", "'w_thres'", "]", "\n", "\n", "# 6 for tr, a, b, tw, th, contact(1 if there is contact else 0)", "\n", "# extra 6 for obj_tr, obj_a, obj_b, obj_tw, obj_th, obj_mask", "\n", "h", ",", "w", "=", "self", ".", "inp_size", ",", "self", ".", "inp_size", "\n", "GT", "=", "torch", ".", "zeros", "(", "(", "12", ",", "h", ",", "w", ")", ")", "\n", "handmask", "=", "torch", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "objbox_mask", "=", "torch", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "\n", "padded_enlarged_unqiue_hand_bboxes", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_nhands", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "padded_enlarged_obj_bboxes", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_nhands", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "for", "i", ",", "hand_bbox", "in", "enumerate", "(", "hand_bboxs", ")", ":", "\n", "# handmaks = number of hands in a pixel", "\n", "            ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "hand_bbox", "\n", "handmask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "+=", "1.", "\n", "padded_enlarged_unqiue_hand_bboxes", "[", "i", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "\n", "if", "y1", "<", "y2", "and", "x1", "<", "x2", ":", "\n", "                ", "bx1", ",", "by1", ",", "bx2", ",", "by2", "=", "obj_bboxs", "[", "i", "]", "\n", "bbox_cy", "=", "(", "by1", "+", "by2", ")", "/", "2.", "\n", "bbox_cx", "=", "(", "bx1", "+", "bx2", ")", "/", "2.", "\n", "# hand", "\n", "hand_bbox_ys", ",", "hand_bbox_xs", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "y1", ",", "y2", ")", ",", "torch", ".", "arange", "(", "x1", ",", "x2", ")", ")", "\n", "rs", "=", "np", ".", "sqrt", "(", "(", "hand_bbox_ys", "-", "bbox_cy", ")", "**", "2", "+", "(", "hand_bbox_xs", "-", "bbox_cx", ")", "**", "2", ")", "+", "1e-7", "\n", "if", "by1", "<", "by2", "and", "bx1", "<", "bx2", ":", "\n", "                    ", "padded_enlarged_obj_bboxes", "[", "i", "]", "=", "[", "bbox_cx", ",", "bbox_cy", ",", "by2", "-", "by1", ",", "bx2", "-", "bx1", "]", "\n", "# tr", "\n", "GT", "[", "0", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "torch", ".", "clip", "(", "torch", ".", "log", "(", "rs", "/", "r_a", ")", ",", "-", "6", ",", "2", ")", "\n", "# hand cos, sin", "\n", "GT", "[", "1", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "(", "hand_bbox_xs", "-", "bbox_cx", ")", "/", "rs", "\n", "GT", "[", "2", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "(", "hand_bbox_ys", "-", "bbox_cy", ")", "/", "rs", "\n", "# hand th, tw", "\n", "GT", "[", "3", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "(", "by2", "-", "by1", ")", "/", "h_a", ")", ")", "\n", "GT", "[", "4", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "(", "bx2", "-", "bx1", ")", "/", "w_a", ")", ")", "\n", "# contact", "\n", "GT", "[", "5", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "1.", "\n", "\n", "", "", "", "padded_enlarged_unqiue_obj_bboxes", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_nobjs", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "unqiue_obj_bboxes", "=", "np", ".", "unique", "(", "obj_bboxs", ",", "axis", "=", "0", ")", "\n", "for", "i", ",", "obj_bbox", "in", "enumerate", "(", "unqiue_obj_bboxes", ")", ":", "\n", "            ", "bx1", ",", "by1", ",", "bx2", ",", "by2", "=", "obj_bbox", "\n", "h", ",", "w", "=", "by2", "-", "by1", ",", "bx2", "-", "bx1", "\n", "# enlarge the obj bbox", "\n", "elged_bx1", ",", "elged_by1", ",", "elged_bx2", ",", "elged_by2", "=", "np", ".", "rint", "(", "enlarge_box", "(", "obj_bbox", ",", "h_thres", ",", "w_thres", ",", "1.4", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "padded_enlarged_unqiue_obj_bboxes", "[", "i", "]", "=", "[", "elged_bx1", ",", "elged_by1", ",", "elged_bx2", ",", "elged_by2", "]", "\n", "\n", "objbox_mask", "[", "elged_by1", ":", "elged_by2", ",", "elged_bx1", ":", "elged_bx2", "]", "+=", "1.", "\n", "bbox_cy", "=", "(", "by1", "+", "by2", ")", "/", "2.", "\n", "bbox_cx", "=", "(", "bx1", "+", "bx2", ")", "/", "2.", "\n", "# object", "\n", "obj_bbox_ys", ",", "obj_bbox_xs", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "elged_by1", ",", "elged_by2", ")", ",", "torch", ".", "arange", "(", "elged_bx1", ",", "elged_bx2", ")", ")", "\n", "obj_rs", "=", "np", ".", "sqrt", "(", "(", "obj_bbox_ys", "-", "bbox_cy", ")", "**", "2", "+", "(", "obj_bbox_xs", "-", "bbox_cx", ")", "**", "2", ")", "+", "1e-7", "\n", "if", "by1", "<", "by2", "and", "bx1", "<", "bx2", ":", "\n", "# obj_tr", "\n", "                ", "GT", "[", "6", ",", "elged_by1", ":", "elged_by2", ",", "elged_bx1", ":", "elged_bx2", "]", "=", "torch", ".", "clip", "(", "torch", ".", "log", "(", "obj_rs", "/", "obj_r_a", ")", ",", "-", "6", ",", "2", ")", "\n", "# obj cos, sin", "\n", "GT", "[", "7", ",", "elged_by1", ":", "elged_by2", ",", "elged_bx1", ":", "elged_bx2", "]", "=", "(", "obj_bbox_xs", "-", "bbox_cx", ")", "/", "obj_rs", "\n", "GT", "[", "8", ",", "elged_by1", ":", "elged_by2", ",", "elged_bx1", ":", "elged_bx2", "]", "=", "(", "obj_bbox_ys", "-", "bbox_cy", ")", "/", "obj_rs", "\n", "# obj th, tw", "\n", "GT", "[", "9", ",", "elged_by1", ":", "elged_by2", ",", "elged_bx1", ":", "elged_bx2", "]", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "h", "/", "h_a", ")", ")", "\n", "GT", "[", "10", ",", "elged_by1", ":", "elged_by2", ",", "elged_bx1", ":", "elged_bx2", "]", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "w", "/", "w_a", ")", ")", "\n", "GT", "[", "11", ",", "by1", ":", "by2", ",", "bx1", ":", "bx2", "]", "=", "1.", "\n", "\n", "# only train tr, a, b, tw, th on nonoverlaped hand contact with objs", "\n", "", "", "contact_mask", "=", "handmask", "*", "GT", "[", "5", ",", ":", ",", ":", "]", "\n", "\n", "# only train obj_tr, obj_a, obj_b, obj_tw, obj_th on nonoverlaped object", "\n", "objbox_mask", "=", "objbox_mask", "==", "1.", "\n", "\n", "return", "{", "\n", "'GT'", ":", "GT", ",", "\n", "'handmask'", ":", "handmask", ",", "\n", "'contact_mask'", ":", "contact_mask", ",", "\n", "'objbox_mask'", ":", "objbox_mask", ",", "\n", "'nhands'", ":", "hand_bboxs", ".", "shape", "[", "0", "]", ",", "\n", "'n_unique_objs'", ":", "unqiue_obj_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "'padded_enlarged_unqiue_hand_bboxes'", ":", "padded_enlarged_unqiue_hand_bboxes", ",", "\n", "'padded_enlarged_obj_bboxes'", ":", "padded_enlarged_obj_bboxes", ",", "\n", "'padded_enlarged_unqiue_obj_bboxes'", ":", "padded_enlarged_unqiue_obj_bboxes", ",", "\n", "# priors", "\n", "'h_a'", ":", "h_a", ",", "\n", "'w_a'", ":", "w_a", ",", "\n", "'r_a'", ":", "r_a", ",", "\n", "'obj_r_a'", ":", "obj_r_a", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.doh100.DOH100Dataset.train_data_augmentation": [[238, 284], ["int", "int", "torchvision.transforms.RandomCrop.get_params", "torchvision.crop", "doh100.DOH100Dataset.color_jitter", "torchvision.pad", "random.randint", "random.randint", "random.random", "keyframe.flip.flip.flip", "torchvision.transforms.Resize", "int", "int", "max", "max", "max", "max"], "methods", ["None"], ["", "def", "train_data_augmentation", "(", "self", ",", "keyframe", ")", ":", "\n", "        ", "h", ",", "w", "=", "keyframe", ".", "shape", "[", "1", "]", ",", "keyframe", ".", "shape", "[", "2", "]", "\n", "\n", "# Randomly crop with a random aspect ratio = w/h", "\n", "ch", "=", "int", "(", "random", ".", "randint", "(", "int", "(", "0.8", "*", "h", ")", ",", "h", ")", ")", "\n", "cw", "=", "int", "(", "random", ".", "randint", "(", "int", "(", "0.8", "*", "w", ")", ",", "w", ")", ")", "\n", "ci", ",", "cj", ",", "ch", ",", "cw", "=", "transforms", ".", "RandomCrop", ".", "get_params", "(", "keyframe", ",", "(", "ch", ",", "cw", ")", ")", "\n", "r_h", ",", "r_w", "=", "self", ".", "inp_size", "/", "max", "(", "ch", ",", "cw", ")", ",", "self", ".", "inp_size", "/", "max", "(", "ch", ",", "cw", ")", "\n", "keyframe", "=", "F", ".", "crop", "(", "keyframe", ",", "ci", ",", "cj", ",", "ch", ",", "cw", ")", "\n", "\n", "# random horizental flip", "\n", "horizental_flip", "=", "False", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "horizental_flip", "=", "True", "\n", "keyframe", "=", "keyframe", ".", "flip", "(", "2", ")", "\n", "\n", "# no random vertical flip", "\n", "", "vertical_flip", "=", "False", "\n", "# if random.random() > 0.5:", "\n", "#     vertical_flip = True", "\n", "#     keyframe = keyframe.flip(1)", "\n", "\n", "# color jitter", "\n", "keyframe", "=", "self", ".", "color_jitter", "(", "keyframe", ")", "\n", "\n", "# pad image to square", "\n", "padding", "=", "(", "0", ",", "0", ",", "max", "(", "ch", ",", "cw", ")", "-", "cw", ",", "max", "(", "ch", ",", "cw", ")", "-", "ch", ")", "\n", "keyframe", "=", "F", ".", "pad", "(", "keyframe", ",", "padding", ")", "\n", "\n", "# resize the image", "\n", "keyframe", "=", "transforms", ".", "Resize", "(", "self", ".", "inp_size", ")", "(", "keyframe", ")", "\n", "\n", "crop_info", "=", "{", "\n", "'trans_fn'", ":", "cropped_resized_x", ",", "\n", "'h'", ":", "h", ",", "\n", "'w'", ":", "w", ",", "\n", "'ci'", ":", "ci", ",", "\n", "'cj'", ":", "cj", ",", "\n", "'rh'", ":", "r_h", ",", "\n", "'rw'", ":", "r_w", ",", "\n", "'h_thres'", ":", "ch", "*", "r_h", ",", "\n", "'w_thres'", ":", "cw", "*", "r_w", ",", "\n", "'horizental_flip'", ":", "horizental_flip", ",", "\n", "'vertical_flip'", ":", "vertical_flip", "\n", "}", "\n", "return", "keyframe", ",", "crop_info", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.doh100.DOH100Dataset.eval_data_prep": [[285, 312], ["torchvision.pad", "torchvision.transforms.Resize", "max", "max", "max", "max"], "methods", ["None"], ["", "def", "eval_data_prep", "(", "self", ",", "keyframe", ")", ":", "\n", "        ", "h", ",", "w", "=", "keyframe", ".", "shape", "[", "1", "]", ",", "keyframe", ".", "shape", "[", "2", "]", "\n", "\n", "# recompute the ratio of the bounding boxes", "\n", "r_h", ",", "r_w", "=", "self", ".", "inp_size", "/", "max", "(", "h", ",", "w", ")", ",", "self", ".", "inp_size", "/", "max", "(", "h", ",", "w", ")", "\n", "\n", "# pad image to square", "\n", "padding", "=", "(", "0", ",", "0", ",", "max", "(", "h", ",", "w", ")", "-", "w", ",", "max", "(", "h", ",", "w", ")", "-", "h", ")", "\n", "keyframe", "=", "F", ".", "pad", "(", "keyframe", ",", "padding", ")", "\n", "\n", "# resize the image, GT, handmask, contact_mask", "\n", "keyframe", "=", "transforms", ".", "Resize", "(", "self", ".", "inp_size", ")", "(", "keyframe", ")", "\n", "\n", "crop_info", "=", "{", "\n", "'trans_fn'", ":", "cropped_resized_x", ",", "\n", "'h'", ":", "h", ",", "\n", "'w'", ":", "w", ",", "\n", "'ci'", ":", "0", ",", "\n", "'cj'", ":", "0", ",", "\n", "'rh'", ":", "r_h", ",", "\n", "'rw'", ":", "r_w", ",", "\n", "'h_thres'", ":", "h", "*", "r_h", ",", "\n", "'w_thres'", ":", "w", "*", "r_w", ",", "\n", "'horizental_flip'", ":", "False", ",", "\n", "'vertical_flip'", ":", "False", "\n", "}", "\n", "return", "keyframe", ",", "crop_info", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.doh100.DOH100Dataset.__len__": [[313, 315], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.doh100.DOH100Dataset.__getitem__": [[316, 359], ["os.path.join", "doh100.DOH100Dataset.normalize", "doh100.DOH100Dataset.get_handobj_bboxs", "torchvision.transforms.ToTensor", "PIL.Image.open", "doh100.DOH100Dataset.train_data_augmentation", "doh100.DOH100Dataset.eval_data_prep", "doh100.DOH100Dataset.prepare_GT", "numpy.rint().astype", "numpy.rint().astype", "doh100.DOH100Dataset.prepare_GT", "numpy.zeros_like", "numpy.rint", "numpy.rint", "max", "max"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.get_handobj_bboxs", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.train_data_augmentation", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.eval_data_prep", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.prepare_GT", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.prepare_GT"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# get image meta", "\n", "        ", "keyframe_subpath", "=", "self", ".", "keyframe_list", "[", "idx", "]", "\n", "annotations", "=", "self", ".", "annotations", "[", "keyframe_subpath", "]", "\n", "\n", "# load keyframe", "\n", "keyframe_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "img_root", ",", "keyframe_subpath", ")", "\n", "keyframe", "=", "transforms", ".", "ToTensor", "(", ")", "(", "Image", ".", "open", "(", "keyframe_path", ")", ")", "\n", "oh", ",", "ow", "=", "keyframe", ".", "shape", "[", "1", "]", ",", "keyframe", ".", "shape", "[", "2", "]", "\n", "\n", "# augmentation", "\n", "if", "'train'", "in", "self", ".", "mode", ":", "\n", "# train", "\n", "            ", "keyframe", ",", "crop_info", "=", "self", ".", "train_data_augmentation", "(", "keyframe", ")", "\n", "", "else", ":", "\n", "# eval", "\n", "            ", "keyframe", ",", "crop_info", "=", "self", ".", "eval_data_prep", "(", "keyframe", ")", "\n", "\n", "# normalize", "\n", "", "keyframe", "=", "self", ".", "normalize", "(", "keyframe", ")", "\n", "\n", "# compute GT", "\n", "hand_bboxs", ",", "obj_bboxs", "=", "self", ".", "get_handobj_bboxs", "(", "annotations", ",", "crop_info", ")", "\n", "if", "self", ".", "use_gt_hand", ":", "\n", "            ", "label", "=", "self", ".", "prepare_GT", "(", "hand_bboxs", ",", "obj_bboxs", ",", "crop_info", ")", "\n", "", "else", ":", "\n", "# add 100doh predicted hand&obj bbox", "\n", "            ", "doh100_hand_box", "=", "self", ".", "doh100_dets_hands", "[", "idx", "]", "[", ":", ",", ":", "4", "]", "\n", "doh100_obj_box", "=", "self", ".", "doh100_dets_objs", "[", "idx", "]", "[", ":", ",", ":", "4", "]", "\n", "doh100_hand_box", "=", "np", ".", "rint", "(", "doh100_hand_box", "*", "self", ".", "inp_size", "/", "max", "(", "oh", ",", "ow", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "doh100_obj_box", "=", "np", ".", "rint", "(", "doh100_obj_box", "*", "self", ".", "inp_size", "/", "max", "(", "oh", ",", "ow", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "label", "=", "self", ".", "prepare_GT", "(", "doh100_hand_box", ",", "np", ".", "zeros_like", "(", "doh100_hand_box", ")", ",", "crop_info", ")", "\n", "label", "[", "'doh100_hand_box'", "]", "=", "doh100_hand_box", "\n", "label", "[", "'doh100_obj_box'", "]", "=", "doh100_obj_box", "\n", "\n", "# return bboxs for test", "\n", "", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "label", "[", "'hand_bboxs'", "]", "=", "hand_bboxs", "\n", "label", "[", "'obj_bboxs'", "]", "=", "obj_bboxs", "\n", "label", "[", "'h'", "]", "=", "oh", "\n", "label", "[", "'w'", "]", "=", "ow", "\n", "\n", "", "return", "keyframe", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold": [[5, 7], ["min", "max"], "function", ["None"], ["def", "threshold", "(", "x", ",", "low", ",", "high", ")", ":", "\n", "    ", "return", "min", "(", "max", "(", "x", ",", "low", ")", ",", "high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.enlarge_box": [[8, 17], ["data_utils.threshold", "data_utils.threshold", "data_utils.threshold", "data_utils.threshold"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold"], ["", "def", "enlarge_box", "(", "box", ",", "h_thres", ",", "w_thres", ",", "factor", ")", ":", "\n", "    ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "box", "\n", "dh", "=", "(", "y2", "-", "y1", ")", "*", "(", "factor", "-", "1", ")", "//", "2", "\n", "dw", "=", "(", "x2", "-", "x1", ")", "*", "(", "factor", "-", "1", ")", "//", "2", "\n", "x1", "=", "threshold", "(", "x1", "-", "dw", ",", "0", ",", "w_thres", ")", "\n", "y1", "=", "threshold", "(", "y1", "-", "dh", ",", "0", ",", "h_thres", ")", "\n", "x2", "=", "threshold", "(", "x2", "+", "dw", ",", "0", ",", "w_thres", ")", "\n", "y2", "=", "threshold", "(", "y2", "+", "dh", ",", "0", ",", "h_thres", ")", "\n", "return", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.cropped_resized_x": [[18, 32], ["data_utils.threshold"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold"], ["", "def", "cropped_resized_x", "(", "x", ",", "s", ",", "c", ",", "r", ",", "low", ",", "high", ")", ":", "\n", "    ", "\"\"\"\n    return the corresponding index in cropped then resized image to\n    the original image\n    \n    Inputs:\n        x: original coordinates ratio\n        s: original size\n        c: crop idx\n        r: resized ratio\n    Output:\n        x': corresponding index in cropped then resized image\n    \"\"\"", "\n", "return", "threshold", "(", "(", "x", "*", "s", "-", "c", ")", "*", "r", ",", "low", ",", "high", ")", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataLoader.__init__": [[19, 29], ["meccano.MCNDataset", "base.BaseDataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "\n", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "validation_split", "=", "0.0", ",", "\n", "num_workers", "=", "1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "MCNDataset", "(", "**", "kwargs", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dataset", ",", "batch_size", ",", "shuffle", ",", "\n", "validation_split", ",", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.__init__": [[37, 76], ["sorted", "torchvision.transforms.Normalize", "torchvision.transforms.ColorJitter", "len", "open", "json.loads", "meccano.MCNDataset.annotations.keys", "annotation_file_tp.format", "j.read"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "priors", ",", "\n", "img_path_tp", "=", "'MECCANO_FOLDER/active_object_frames/{}'", ",", "\n", "annotation_file_tp", "=", "'MECCANO_FOLDER/home/fragusa/meccano_handobj_{}.json'", ",", "\n", "mode", "=", "'train'", ",", "\n", "inp_size", "=", "224", ",", "\n", "bbox_area_thres", "=", "1", ",", "\n", "bbox_w_thres", "=", "1", ",", "\n", "bbox_h_thres", "=", "1", ",", "\n", "hand_bbox_ratio", "=", "1.", ",", "\n", "max_nhands", "=", "3", ",", "\n", "max_nobjs", "=", "3", ",", "\n", "use_gt_hand", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "img_path_tp", "=", "img_path_tp", "\n", "with", "open", "(", "annotation_file_tp", ".", "format", "(", "mode", ")", ",", "'r'", ")", "as", "j", ":", "\n", "            ", "self", ".", "annotations", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "self", ".", "keyframe_list", "=", "sorted", "(", "self", ".", "annotations", ".", "keys", "(", ")", ")", "\n", "\n", "self", ".", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "self", ".", "color_jitter", "=", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "0.1", ",", "contrast", "=", "0.1", ",", "saturation", "=", "0.1", ",", "hue", "=", "0.01", ")", "\n", "\n", "# set properties", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "priors", "=", "priors", "\n", "self", ".", "inp_size", "=", "inp_size", "\n", "self", ".", "len", "=", "len", "(", "self", ".", "keyframe_list", ")", "\n", "self", ".", "hand_bbox_ratio", "=", "hand_bbox_ratio", "\n", "self", ".", "use_gt_hand", "=", "True", "\n", "self", ".", "max_nhands", "=", "max_nhands", "\n", "self", ".", "max_nobjs", "=", "max_nobjs", "\n", "\n", "# threshold for minimal bbox", "\n", "self", ".", "bbox_area_thres", "=", "bbox_area_thres", "\n", "self", ".", "bbox_h_thres", "=", "bbox_h_thres", "\n", "self", ".", "bbox_w_thres", "=", "bbox_w_thres", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.hand_bbox_aug": [[77, 86], ["data_utils.threshold", "data_utils.threshold", "data_utils.threshold", "data_utils.threshold"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.threshold"], ["", "def", "hand_bbox_aug", "(", "self", ",", "hand_bbox", ",", "h_thres", ",", "w_thres", ")", ":", "\n", "        ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "hand_bbox", "\n", "dh", "=", "(", "y2", "-", "y1", ")", "*", "(", "self", ".", "hand_bbox_ratio", "-", "1", ")", "//", "2", "\n", "dw", "=", "(", "x2", "-", "x1", ")", "*", "(", "self", ".", "hand_bbox_ratio", "-", "1", ")", "//", "2", "\n", "x1", "=", "threshold", "(", "x1", "-", "dw", ",", "0", ",", "w_thres", ")", "\n", "y1", "=", "threshold", "(", "y1", "-", "dh", ",", "0", ",", "h_thres", ")", "\n", "x2", "=", "threshold", "(", "x2", "+", "dw", ",", "0", ",", "w_thres", ")", "\n", "y2", "=", "threshold", "(", "y2", "+", "dh", ",", "0", ",", "h_thres", ")", "\n", "return", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.get_handobj_bboxs": [[87, 135], ["len", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.rint().astype", "numpy.rint().astype", "trans_fn", "trans_fn", "trans_fn", "trans_fn", "meccano.MCNDataset.hand_bbox_aug", "handobj.get", "trans_fn", "trans_fn", "trans_fn", "trans_fn", "numpy.rint", "numpy.rint"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.hand_bbox_aug"], ["", "def", "get_handobj_bboxs", "(", "self", ",", "handobj_info", ",", "crop_info", ")", ":", "\n", "        ", "trans_fn", "=", "crop_info", "[", "'trans_fn'", "]", "\n", "h", "=", "crop_info", "[", "'h'", "]", "\n", "w", "=", "crop_info", "[", "'w'", "]", "\n", "ci", "=", "crop_info", "[", "'ci'", "]", "\n", "cj", "=", "crop_info", "[", "'cj'", "]", "\n", "rh", "=", "crop_info", "[", "'rh'", "]", "\n", "rw", "=", "crop_info", "[", "'rw'", "]", "\n", "h_thres", "=", "crop_info", "[", "'h_thres'", "]", "\n", "w_thres", "=", "crop_info", "[", "'w_thres'", "]", "\n", "horizental_flip", "=", "crop_info", "[", "'horizental_flip'", "]", "\n", "vertical_flip", "=", "crop_info", "[", "'vertical_flip'", "]", "\n", "\n", "nhands", "=", "len", "(", "handobj_info", ")", "\n", "hand_bboxs", "=", "np", ".", "zeros", "(", "(", "nhands", ",", "4", ")", ")", "\n", "obj_bboxs", "=", "np", ".", "zeros", "(", "(", "nhands", ",", "4", ")", ")", "\n", "for", "i", ",", "handobj", "in", "enumerate", "(", "handobj_info", ")", ":", "\n", "            ", "x1", "=", "trans_fn", "(", "handobj", "[", "'x1'", "]", ",", "w", ",", "cj", ",", "rw", ",", "0", ",", "w_thres", ")", "\n", "y1", "=", "trans_fn", "(", "handobj", "[", "'y1'", "]", ",", "h", ",", "ci", ",", "rh", ",", "0", ",", "h_thres", ")", "\n", "x2", "=", "trans_fn", "(", "handobj", "[", "'x2'", "]", ",", "w", ",", "cj", ",", "rw", ",", "0", ",", "w_thres", ")", "\n", "y2", "=", "trans_fn", "(", "handobj", "[", "'y2'", "]", ",", "h", ",", "ci", ",", "rh", ",", "0", ",", "h_thres", ")", "\n", "# augment hand bbox", "\n", "hand_bboxs", "[", "i", "]", "=", "self", ".", "hand_bbox_aug", "(", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", ",", "h_thres", ",", "w_thres", ")", "\n", "if", "handobj", ".", "get", "(", "\"obj_bbox\"", ",", "None", ")", "is", "not", "None", ":", "\n", "                ", "bbox_info", "=", "handobj", "[", "'obj_bbox'", "]", "\n", "\n", "bx1", "=", "trans_fn", "(", "bbox_info", "[", "'x1'", "]", ",", "w", ",", "cj", ",", "rw", ",", "0", ",", "w_thres", ")", "\n", "by1", "=", "trans_fn", "(", "bbox_info", "[", "'y1'", "]", ",", "h", ",", "ci", ",", "rh", ",", "0", ",", "h_thres", ")", "\n", "bx2", "=", "trans_fn", "(", "bbox_info", "[", "'x2'", "]", ",", "w", ",", "cj", ",", "rw", ",", "0", ",", "w_thres", ")", "\n", "by2", "=", "trans_fn", "(", "bbox_info", "[", "'y2'", "]", ",", "h", ",", "ci", ",", "rh", ",", "0", ",", "h_thres", ")", "\n", "obj_bboxs", "[", "i", "]", "=", "[", "bx1", ",", "by1", ",", "bx2", ",", "by2", "]", "\n", "\n", "# flip boxes", "\n", "", "", "if", "horizental_flip", ":", "\n", "            ", "hand_bboxs", "[", ":", ",", "0", "]", ",", "hand_bboxs", "[", ":", ",", "2", "]", "=", "w_thres", "-", "hand_bboxs", "[", ":", ",", "2", "]", ",", "w_thres", "-", "hand_bboxs", "[", ":", ",", "0", "]", "\n", "obj_bboxs", "[", ":", ",", "0", "]", ",", "obj_bboxs", "[", ":", ",", "2", "]", "=", "w_thres", "-", "obj_bboxs", "[", ":", ",", "2", "]", ",", "w_thres", "-", "obj_bboxs", "[", ":", ",", "0", "]", "\n", "", "if", "vertical_flip", ":", "\n", "            ", "hand_bboxs", "[", ":", ",", "1", "]", ",", "hand_bboxs", "[", ":", ",", "3", "]", "=", "h_thres", "-", "hand_bboxs", "[", ":", ",", "3", "]", ",", "h_thres", "-", "hand_bboxs", "[", ":", ",", "1", "]", "\n", "obj_bboxs", "[", ":", ",", "1", "]", ",", "obj_bboxs", "[", ":", ",", "3", "]", "=", "h_thres", "-", "obj_bboxs", "[", ":", ",", "3", "]", ",", "h_thres", "-", "obj_bboxs", "[", ":", ",", "1", "]", "\n", "\n", "# round to int", "\n", "", "hand_bboxs", "=", "np", ".", "rint", "(", "hand_bboxs", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "obj_bboxs", "=", "np", ".", "rint", "(", "obj_bboxs", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "return", "hand_bboxs", ",", "obj_bboxs", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.prepare_GT": [[136, 231], ["torch.zeros", "torch.zeros", "torch.zeros", "numpy.zeros().astype", "numpy.zeros().astype", "enumerate", "numpy.zeros().astype", "numpy.unique", "enumerate", "numpy.rint().astype", "torch.meshgrid", "numpy.zeros", "numpy.zeros", "torch.meshgrid", "numpy.zeros", "torch.arange", "torch.arange", "numpy.sqrt", "torch.clip", "torch.log", "torch.log", "torch.arange", "torch.arange", "numpy.sqrt", "torch.clip", "torch.log", "torch.log", "numpy.rint", "torch.log", "torch.tensor", "torch.tensor", "torch.log", "torch.tensor", "torch.tensor", "data_utils.enlarge_box"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.data_utils.enlarge_box"], ["", "def", "prepare_GT", "(", "self", ",", "hand_bboxs", ",", "obj_bboxs", ",", "crop_info", ")", ":", "\n", "# priors", "\n", "        ", "h_a", "=", "self", ".", "priors", "[", "'h_a'", "]", "\n", "w_a", "=", "self", ".", "priors", "[", "'w_a'", "]", "\n", "r_a", "=", "self", ".", "priors", "[", "'r_a'", "]", "\n", "obj_r_a", "=", "self", ".", "priors", "[", "'obj_r_a'", "]", "\n", "h_thres", "=", "crop_info", "[", "'h_thres'", "]", "\n", "w_thres", "=", "crop_info", "[", "'w_thres'", "]", "\n", "\n", "# 6 for tr, a, b, tw, th, contact(1 if there is contact else 0)", "\n", "# extra 6 for obj_tr, obj_a, obj_b, obj_tw, obj_th, obj_mask", "\n", "h", ",", "w", "=", "self", ".", "inp_size", ",", "self", ".", "inp_size", "\n", "GT", "=", "torch", ".", "zeros", "(", "(", "12", ",", "h", ",", "w", ")", ")", "\n", "handmask", "=", "torch", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "objbox_mask", "=", "torch", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "\n", "padded_enlarged_unqiue_hand_bboxes", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_nhands", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "padded_enlarged_obj_bboxes", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_nhands", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "for", "i", ",", "hand_bbox", "in", "enumerate", "(", "hand_bboxs", ")", ":", "\n", "# handmaks = number of hands in a pixel", "\n", "            ", "x1", ",", "y1", ",", "x2", ",", "y2", "=", "hand_bbox", "\n", "handmask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "+=", "1.", "\n", "padded_enlarged_unqiue_hand_bboxes", "[", "i", "]", "=", "[", "x1", ",", "y1", ",", "x2", ",", "y2", "]", "\n", "\n", "if", "y1", "<", "y2", "and", "x1", "<", "x2", ":", "\n", "                ", "bx1", ",", "by1", ",", "bx2", ",", "by2", "=", "obj_bboxs", "[", "i", "]", "\n", "bbox_cy", "=", "(", "by1", "+", "by2", ")", "/", "2.", "\n", "bbox_cx", "=", "(", "bx1", "+", "bx2", ")", "/", "2.", "\n", "# hand", "\n", "hand_bbox_ys", ",", "hand_bbox_xs", "=", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "arange", "(", "y1", ",", "y2", ")", ",", "torch", ".", "arange", "(", "x1", ",", "x2", ")", ")", "\n", "rs", "=", "np", ".", "sqrt", "(", "(", "hand_bbox_ys", "-", "bbox_cy", ")", "**", "2", "+", "(", "hand_bbox_xs", "-", "bbox_cx", ")", "**", "2", ")", "+", "1e-7", "\n", "if", "by1", "<", "by2", "and", "bx1", "<", "bx2", ":", "\n", "                    ", "padded_enlarged_obj_bboxes", "[", "i", "]", "=", "[", "bbox_cx", ",", "bbox_cy", ",", "by2", "-", "by1", ",", "bx2", "-", "bx1", "]", "\n", "# tr", "\n", "GT", "[", "0", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "torch", ".", "clip", "(", "torch", ".", "log", "(", "rs", "/", "r_a", ")", ",", "-", "6", ",", "2", ")", "\n", "# hand cos, sin", "\n", "GT", "[", "1", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "(", "hand_bbox_xs", "-", "bbox_cx", ")", "/", "rs", "\n", "GT", "[", "2", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "(", "hand_bbox_ys", "-", "bbox_cy", ")", "/", "rs", "\n", "# hand th, tw", "\n", "GT", "[", "3", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "(", "by2", "-", "by1", ")", "/", "h_a", ")", ")", "\n", "GT", "[", "4", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "(", "bx2", "-", "bx1", ")", "/", "w_a", ")", ")", "\n", "# contact", "\n", "GT", "[", "5", ",", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "1.", "\n", "\n", "", "", "", "padded_enlarged_unqiue_obj_bboxes", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_nobjs", ",", "4", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "unqiue_obj_bboxes", "=", "np", ".", "unique", "(", "obj_bboxs", ",", "axis", "=", "0", ")", "\n", "for", "i", ",", "obj_bbox", "in", "enumerate", "(", "unqiue_obj_bboxes", ")", ":", "\n", "            ", "bx1", ",", "by1", ",", "bx2", ",", "by2", "=", "obj_bbox", "\n", "h", ",", "w", "=", "by2", "-", "by1", ",", "bx2", "-", "bx1", "\n", "# enlarge the obj bbox", "\n", "elged_bx1", ",", "elged_by1", ",", "elged_bx2", ",", "elged_by2", "=", "np", ".", "rint", "(", "enlarge_box", "(", "obj_bbox", ",", "h_thres", ",", "w_thres", ",", "1.4", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "padded_enlarged_unqiue_obj_bboxes", "[", "i", "]", "=", "[", "elged_bx1", ",", "elged_by1", ",", "elged_bx2", ",", "elged_by2", "]", "\n", "\n", "objbox_mask", "[", "elged_by1", ":", "elged_by2", ",", "elged_bx1", ":", "elged_bx2", "]", "+=", "1.", "\n", "bbox_cy", "=", "(", "by1", "+", "by2", ")", "/", "2.", "\n", "bbox_cx", "=", "(", "bx1", "+", "bx2", ")", "/", "2.", "\n", "# object", "\n", "obj_bbox_ys", ",", "obj_bbox_xs", "=", "torch", ".", "meshgrid", "(", "torch", ".", "arange", "(", "elged_by1", ",", "elged_by2", ")", ",", "torch", ".", "arange", "(", "elged_bx1", ",", "elged_bx2", ")", ")", "\n", "obj_rs", "=", "np", ".", "sqrt", "(", "(", "obj_bbox_ys", "-", "bbox_cy", ")", "**", "2", "+", "(", "obj_bbox_xs", "-", "bbox_cx", ")", "**", "2", ")", "+", "1e-7", "\n", "if", "by1", "<", "by2", "and", "bx1", "<", "bx2", ":", "\n", "# obj_tr", "\n", "                ", "GT", "[", "6", ",", "elged_by1", ":", "elged_by2", ",", "elged_bx1", ":", "elged_bx2", "]", "=", "torch", ".", "clip", "(", "torch", ".", "log", "(", "obj_rs", "/", "obj_r_a", ")", ",", "-", "6", ",", "2", ")", "\n", "# obj cos, sin", "\n", "GT", "[", "7", ",", "elged_by1", ":", "elged_by2", ",", "elged_bx1", ":", "elged_bx2", "]", "=", "(", "obj_bbox_xs", "-", "bbox_cx", ")", "/", "obj_rs", "\n", "GT", "[", "8", ",", "elged_by1", ":", "elged_by2", ",", "elged_bx1", ":", "elged_bx2", "]", "=", "(", "obj_bbox_ys", "-", "bbox_cy", ")", "/", "obj_rs", "\n", "# obj th, tw", "\n", "GT", "[", "9", ",", "elged_by1", ":", "elged_by2", ",", "elged_bx1", ":", "elged_bx2", "]", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "h", "/", "h_a", ")", ")", "\n", "GT", "[", "10", ",", "elged_by1", ":", "elged_by2", ",", "elged_bx1", ":", "elged_bx2", "]", "=", "torch", ".", "log", "(", "torch", ".", "tensor", "(", "w", "/", "w_a", ")", ")", "\n", "GT", "[", "11", ",", "by1", ":", "by2", ",", "bx1", ":", "bx2", "]", "=", "1.", "\n", "\n", "# only train contact on nonoverlaped hand mask", "\n", "", "", "handmask", "=", "handmask", "==", "1.", "\n", "\n", "# only train tr, a, b, tw, th on nonoverlaped hand contact with objs", "\n", "contact_mask", "=", "handmask", "*", "GT", "[", "5", ",", ":", ",", ":", "]", "\n", "\n", "# only train obj_tr, obj_a, obj_b, obj_tw, obj_th on nonoverlaped object", "\n", "objbox_mask", "=", "objbox_mask", "==", "1.", "\n", "\n", "return", "{", "\n", "'GT'", ":", "GT", ",", "\n", "'handmask'", ":", "handmask", ",", "\n", "'contact_mask'", ":", "contact_mask", ",", "\n", "'objbox_mask'", ":", "objbox_mask", ",", "\n", "'nhands'", ":", "hand_bboxs", ".", "shape", "[", "0", "]", ",", "\n", "'n_unique_objs'", ":", "unqiue_obj_bboxes", ".", "shape", "[", "0", "]", ",", "\n", "'padded_enlarged_unqiue_hand_bboxes'", ":", "padded_enlarged_unqiue_hand_bboxes", ",", "\n", "'padded_enlarged_obj_bboxes'", ":", "padded_enlarged_obj_bboxes", ",", "\n", "'padded_enlarged_unqiue_obj_bboxes'", ":", "padded_enlarged_unqiue_obj_bboxes", ",", "\n", "# priors", "\n", "'h_a'", ":", "h_a", ",", "\n", "'w_a'", ":", "w_a", ",", "\n", "'r_a'", ":", "r_a", ",", "\n", "'obj_r_a'", ":", "obj_r_a", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.train_data_augmentation": [[233, 279], ["int", "int", "torchvision.transforms.RandomCrop.get_params", "torchvision.crop", "meccano.MCNDataset.color_jitter", "torchvision.pad", "random.randint", "random.randint", "random.random", "keyframe.flip.flip.flip", "torchvision.transforms.Resize", "int", "int", "max", "max", "max", "max"], "methods", ["None"], ["", "def", "train_data_augmentation", "(", "self", ",", "keyframe", ")", ":", "\n", "        ", "h", ",", "w", "=", "keyframe", ".", "shape", "[", "1", "]", ",", "keyframe", ".", "shape", "[", "2", "]", "\n", "\n", "# Randomly crop with a random aspect ratio = w/h", "\n", "ch", "=", "int", "(", "random", ".", "randint", "(", "int", "(", "0.8", "*", "h", ")", ",", "h", ")", ")", "\n", "cw", "=", "int", "(", "random", ".", "randint", "(", "int", "(", "0.8", "*", "w", ")", ",", "w", ")", ")", "\n", "ci", ",", "cj", ",", "ch", ",", "cw", "=", "transforms", ".", "RandomCrop", ".", "get_params", "(", "keyframe", ",", "(", "ch", ",", "cw", ")", ")", "\n", "r_h", ",", "r_w", "=", "self", ".", "inp_size", "/", "max", "(", "ch", ",", "cw", ")", ",", "self", ".", "inp_size", "/", "max", "(", "ch", ",", "cw", ")", "\n", "keyframe", "=", "F", ".", "crop", "(", "keyframe", ",", "ci", ",", "cj", ",", "ch", ",", "cw", ")", "\n", "\n", "# random horizental flip", "\n", "horizental_flip", "=", "False", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "            ", "horizental_flip", "=", "True", "\n", "keyframe", "=", "keyframe", ".", "flip", "(", "2", ")", "\n", "\n", "# no random vertical flip", "\n", "", "vertical_flip", "=", "False", "\n", "# if random.random() > 0.5:", "\n", "#     vertical_flip = True", "\n", "#     keyframe = keyframe.flip(1)", "\n", "\n", "# color jitter", "\n", "keyframe", "=", "self", ".", "color_jitter", "(", "keyframe", ")", "\n", "\n", "# 6. pad image to square", "\n", "padding", "=", "(", "0", ",", "0", ",", "max", "(", "ch", ",", "cw", ")", "-", "cw", ",", "max", "(", "ch", ",", "cw", ")", "-", "ch", ")", "\n", "keyframe", "=", "F", ".", "pad", "(", "keyframe", ",", "padding", ")", "\n", "\n", "# resize the image", "\n", "keyframe", "=", "transforms", ".", "Resize", "(", "self", ".", "inp_size", ")", "(", "keyframe", ")", "\n", "\n", "crop_info", "=", "{", "\n", "'trans_fn'", ":", "cropped_resized_x", ",", "\n", "'h'", ":", "h", ",", "\n", "'w'", ":", "w", ",", "\n", "'ci'", ":", "ci", ",", "\n", "'cj'", ":", "cj", ",", "\n", "'rh'", ":", "r_h", ",", "\n", "'rw'", ":", "r_w", ",", "\n", "'h_thres'", ":", "ch", "*", "r_h", ",", "\n", "'w_thres'", ":", "cw", "*", "r_w", ",", "\n", "'horizental_flip'", ":", "horizental_flip", ",", "\n", "'vertical_flip'", ":", "vertical_flip", "\n", "}", "\n", "return", "keyframe", ",", "crop_info", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.eval_data_prep": [[281, 308], ["torchvision.pad", "torchvision.transforms.Resize", "max", "max", "max", "max"], "methods", ["None"], ["", "def", "eval_data_prep", "(", "self", ",", "keyframe", ")", ":", "\n", "        ", "h", ",", "w", "=", "keyframe", ".", "shape", "[", "1", "]", ",", "keyframe", ".", "shape", "[", "2", "]", "\n", "\n", "# recompute the index of the bounding boxes", "\n", "r_h", ",", "r_w", "=", "self", ".", "inp_size", "/", "max", "(", "h", ",", "w", ")", ",", "self", ".", "inp_size", "/", "max", "(", "h", ",", "w", ")", "\n", "\n", "# pad image to square", "\n", "padding", "=", "(", "0", ",", "0", ",", "max", "(", "h", ",", "w", ")", "-", "w", ",", "max", "(", "h", ",", "w", ")", "-", "h", ")", "\n", "keyframe", "=", "F", ".", "pad", "(", "keyframe", ",", "padding", ")", "\n", "\n", "# resize the image, GT, handmask, contact_mask", "\n", "keyframe", "=", "transforms", ".", "Resize", "(", "self", ".", "inp_size", ")", "(", "keyframe", ")", "\n", "\n", "crop_info", "=", "{", "\n", "'trans_fn'", ":", "cropped_resized_x", ",", "\n", "'h'", ":", "h", ",", "\n", "'w'", ":", "w", ",", "\n", "'ci'", ":", "0", ",", "\n", "'cj'", ":", "0", ",", "\n", "'rh'", ":", "r_h", ",", "\n", "'rw'", ":", "r_w", ",", "\n", "'h_thres'", ":", "h", "*", "r_h", ",", "\n", "'w_thres'", ":", "w", "*", "r_w", ",", "\n", "'horizental_flip'", ":", "False", ",", "\n", "'vertical_flip'", ":", "False", "\n", "}", "\n", "return", "keyframe", ",", "crop_info", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.__len__": [[309, 311], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.__getitem__": [[312, 345], ["meccano.MCNDataset.img_path_tp.format", "meccano.MCNDataset.normalize", "meccano.MCNDataset.get_handobj_bboxs", "meccano.MCNDataset.prepare_GT", "torchvision.transforms.ToTensor", "PIL.Image.open", "meccano.MCNDataset.train_data_augmentation", "meccano.MCNDataset.eval_data_prep"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.get_handobj_bboxs", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.prepare_GT", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.train_data_augmentation", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.data_loader.meccano.MCNDataset.eval_data_prep"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# get image meta", "\n", "        ", "keyframe_subpath", "=", "self", ".", "keyframe_list", "[", "idx", "]", "\n", "annotations", "=", "self", ".", "annotations", "[", "keyframe_subpath", "]", "\n", "\n", "# load keyframe", "\n", "keyframe_path", "=", "self", ".", "img_path_tp", ".", "format", "(", "keyframe_subpath", ")", "\n", "keyframe", "=", "transforms", ".", "ToTensor", "(", ")", "(", "Image", ".", "open", "(", "keyframe_path", ")", ")", "\n", "oh", ",", "ow", "=", "keyframe", ".", "shape", "[", "1", "]", ",", "keyframe", ".", "shape", "[", "2", "]", "\n", "\n", "# augmentation", "\n", "if", "'train'", "in", "self", ".", "mode", ":", "\n", "# train", "\n", "            ", "keyframe", ",", "crop_info", "=", "self", ".", "train_data_augmentation", "(", "keyframe", ")", "\n", "", "else", ":", "\n", "# eval", "\n", "            ", "keyframe", ",", "crop_info", "=", "self", ".", "eval_data_prep", "(", "keyframe", ")", "\n", "\n", "# normalize", "\n", "", "keyframe", "=", "self", ".", "normalize", "(", "keyframe", ")", "\n", "\n", "# compute GT", "\n", "hand_bboxs", ",", "obj_bboxs", "=", "self", ".", "get_handobj_bboxs", "(", "annotations", ",", "crop_info", ")", "\n", "label", "=", "self", ".", "prepare_GT", "(", "hand_bboxs", ",", "obj_bboxs", ",", "crop_info", ")", "\n", "\n", "# return bboxs for test", "\n", "if", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "label", "[", "'hand_bboxs'", "]", "=", "hand_bboxs", "\n", "label", "[", "'obj_bboxs'", "]", "=", "obj_bboxs", "\n", "label", "[", "'h'", "]", "=", "oh", "\n", "label", "[", "'w'", "]", "=", "ow", "\n", "\n", "", "return", "keyframe", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.logger.visualization.TensorboardWriter.__init__": [[6, 39], ["datetime.datetime.datetime.now", "str", "logger.warning", "importlib.import_module().SummaryWriter", "importlib.import_module"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "logger", ",", "enabled", ")", ":", "\n", "        ", "self", ".", "writer", "=", "None", "\n", "self", ".", "selected_module", "=", "\"\"", "\n", "\n", "if", "enabled", ":", "\n", "            ", "log_dir", "=", "str", "(", "log_dir", ")", "\n", "\n", "# Retrieve vizualization writer.", "\n", "succeeded", "=", "False", "\n", "for", "module", "in", "[", "\"torch.utils.tensorboard\"", ",", "\"tensorboardX\"", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "writer", "=", "importlib", ".", "import_module", "(", "module", ")", ".", "SummaryWriter", "(", "log_dir", ")", "\n", "succeeded", "=", "True", "\n", "break", "\n", "", "except", "ImportError", ":", "\n", "                    ", "succeeded", "=", "False", "\n", "", "self", ".", "selected_module", "=", "module", "\n", "\n", "", "if", "not", "succeeded", ":", "\n", "                ", "message", "=", "\"Warning: visualization (Tensorboard) is configured to use, but currently not installed on \"", "\"this machine. Please install TensorboardX with 'pip install tensorboardx', upgrade PyTorch to \"", "\"version >= 1.1 to use 'torch.utils.tensorboard' or turn off the option in the 'config.json' file.\"", "\n", "logger", ".", "warning", "(", "message", ")", "\n", "\n", "", "", "self", ".", "step", "=", "0", "\n", "self", ".", "mode", "=", "''", "\n", "\n", "self", ".", "tb_writer_ftns", "=", "{", "\n", "'add_scalar'", ",", "'add_scalars'", ",", "'add_image'", ",", "'add_images'", ",", "'add_audio'", ",", "\n", "'add_text'", ",", "'add_histogram'", ",", "'add_pr_curve'", ",", "'add_embedding'", "\n", "}", "\n", "self", ".", "tag_mode_exceptions", "=", "{", "'add_histogram'", ",", "'add_embedding'", "}", "\n", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.logger.visualization.TensorboardWriter.set_step": [[40, 49], ["datetime.datetime.datetime.now", "visualization.TensorboardWriter.add_scalar", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "duration.total_seconds"], "methods", ["None"], ["", "def", "set_step", "(", "self", ",", "step", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "step", "=", "step", "\n", "if", "step", "==", "0", ":", "\n", "            ", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "", "else", ":", "\n", "            ", "duration", "=", "datetime", ".", "now", "(", ")", "-", "self", ".", "timer", "\n", "self", ".", "add_scalar", "(", "'steps_per_sec'", ",", "1", "/", "duration", ".", "total_seconds", "(", ")", ")", "\n", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.logger.visualization.TensorboardWriter.__getattr__": [[50, 74], ["getattr", "object.__getattr__", "getattr.", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.logger.visualization.TensorboardWriter.__getattr__"], ["", "", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        If visualization is configured to use:\n            return add_data() methods of tensorboard with additional information (step, tag) added.\n        Otherwise:\n            return a blank function handle that does nothing\n        \"\"\"", "\n", "if", "name", "in", "self", ".", "tb_writer_ftns", ":", "\n", "            ", "add_data", "=", "getattr", "(", "self", ".", "writer", ",", "name", ",", "None", ")", "\n", "\n", "def", "wrapper", "(", "tag", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "if", "add_data", "is", "not", "None", ":", "\n", "# add mode(train/valid) tag", "\n", "                    ", "if", "name", "not", "in", "self", ".", "tag_mode_exceptions", ":", "\n", "                        ", "tag", "=", "'{}/{}'", ".", "format", "(", "tag", ",", "self", ".", "mode", ")", "\n", "", "add_data", "(", "tag", ",", "data", ",", "self", ".", "step", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "wrapper", "\n", "", "else", ":", "\n", "# default action for returning methods defined in this class, set_step() for instance.", "\n", "            ", "try", ":", "\n", "                ", "attr", "=", "object", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "AttributeError", ":", "\n", "                ", "raise", "AttributeError", "(", "\"type object '{}' has no attribute '{}'\"", ".", "format", "(", "self", ".", "selected_module", ",", "name", ")", ")", "\n", "", "return", "attr", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.logger.logger.setup_logging": [[7, 23], ["pathlib.Path", "pathlib.Path.is_file", "utils.read_json", "config[].items", "logging.config.dictConfig", "logging.config.dictConfig", "print", "logging.basicConfig", "logging.basicConfig", "str"], "function", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.read_json"], ["def", "setup_logging", "(", "save_dir", ",", "log_config", "=", "'logger/logger_config.json'", ",", "default_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"\n    Setup logging configuration\n    \"\"\"", "\n", "log_config", "=", "Path", "(", "log_config", ")", "\n", "if", "log_config", ".", "is_file", "(", ")", ":", "\n", "        ", "config", "=", "read_json", "(", "log_config", ")", "\n", "# modify logging paths based on run config", "\n", "for", "_", ",", "handler", "in", "config", "[", "'handlers'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "'filename'", "in", "handler", ":", "\n", "                ", "handler", "[", "'filename'", "]", "=", "str", "(", "save_dir", "/", "handler", "[", "'filename'", "]", ")", "\n", "\n", "", "", "logging", ".", "config", ".", "dictConfig", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Warning: logging configuration file is not found in {}.\"", ".", "format", "(", "log_config", ")", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "default_level", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.trainer.trainer.Trainer.__init__": [[15, 49], ["base.BaseTrainer.__init__", "int", "utils.MetricTracker", "utils.MetricTracker", "len", "utils.inf_loop", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.inf_loop"], ["def", "__init__", "(", "self", ",", "model", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "config", ",", "device", ",", "\n", "data_loader", ",", "valid_data_loader", "=", "None", ",", "lr_scheduler", "=", "None", ",", "len_epoch", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "if", "len_epoch", "is", "None", ":", "\n", "# epoch-based training", "\n", "            ", "self", ".", "len_epoch", "=", "len", "(", "self", ".", "data_loader", ")", "\n", "", "else", ":", "\n", "# iteration-based training", "\n", "            ", "self", ".", "data_loader", "=", "inf_loop", "(", "data_loader", ")", "\n", "self", ".", "len_epoch", "=", "len_epoch", "\n", "", "self", ".", "valid_data_loader", "=", "valid_data_loader", "\n", "self", ".", "do_validation", "=", "self", ".", "valid_data_loader", "is", "not", "None", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "self", ".", "log_step", "=", "int", "(", "np", ".", "sqrt", "(", "data_loader", ".", "batch_size", ")", ")", "\n", "\n", "self", ".", "loss_keys", "=", "[", "'tr_loss'", ",", "\n", "'cos_loss'", ",", "\n", "'sin_loss'", ",", "\n", "'th_loss'", ",", "\n", "'tw_loss'", ",", "\n", "'obj_tr_loss'", ",", "\n", "'obj_cos_loss'", ",", "\n", "'obj_sin_loss'", ",", "\n", "'obj_th_loss'", ",", "\n", "'obj_tw_loss'", ",", "\n", "'contact_loss'", ",", "\n", "'obj_prob_loss'", ",", "\n", "'giou_loss'", ",", "\n", "'total_loss'", "]", "\n", "self", ".", "train_metrics", "=", "MetricTracker", "(", "*", "self", ".", "loss_keys", ",", "*", "[", "m", ".", "__name__", "for", "m", "in", "self", ".", "metric_ftns", "]", ",", "writer", "=", "self", ".", "writer", ")", "\n", "self", ".", "valid_metrics", "=", "MetricTracker", "(", "*", "self", ".", "loss_keys", ",", "*", "[", "m", ".", "__name__", "for", "m", "in", "self", ".", "metric_ftns", "]", ",", "writer", "=", "self", ".", "writer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.trainer.trainer.Trainer._train_epoch": [[50, 91], ["trainer.Trainer.model.train", "trainer.Trainer.train_metrics.reset", "enumerate", "trainer.Trainer.train_metrics.result", "data.to.to.to", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "trainer.Trainer.criterion", "loss.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.writer.set_step", "trainer.Trainer.keys", "trainer.Trainer._valid_epoch", "trainer.Trainer.update", "trainer.Trainer.lr_scheduler.step", "trainer.Trainer.train_metrics.update", "trainer.Trainer.train_metrics.update", "trainer.Trainer.logger.debug", "losses[].item", "met", "trainer.Trainer._progress", "loss.item", "trainer.Trainer.items"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.reset", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.result", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.logger.visualization.TensorboardWriter.set_step", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.trainer.trainer.Trainer._valid_epoch", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.trainer.trainer.Trainer._progress"], ["", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an epoch\n\n        :param epoch: Integer, current training epoch.\n        :return: A log that contains average loss and metric in this epoch.\n        \"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "train_metrics", ".", "reset", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "data_loader", ")", ":", "\n", "\n", "            ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "losses", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "loss", "=", "losses", "[", "'total_loss'", "]", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "writer", ".", "set_step", "(", "(", "epoch", "-", "1", ")", "*", "self", ".", "len_epoch", "+", "batch_idx", ")", "\n", "for", "loss_key", "in", "losses", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "train_metrics", ".", "update", "(", "loss_key", ",", "losses", "[", "loss_key", "]", ".", "item", "(", ")", ")", "\n", "", "for", "met", "in", "self", ".", "metric_ftns", ":", "\n", "                ", "self", ".", "train_metrics", ".", "update", "(", "met", ".", "__name__", ",", "met", "(", "output", ",", "target", ")", ")", "\n", "\n", "", "if", "batch_idx", "%", "self", ".", "log_step", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "debug", "(", "'Train Epoch: {} {} Loss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "\n", "self", ".", "_progress", "(", "batch_idx", ")", ",", "\n", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "if", "batch_idx", "==", "self", ".", "len_epoch", ":", "\n", "                ", "break", "\n", "", "", "log", "=", "self", ".", "train_metrics", ".", "result", "(", ")", "\n", "\n", "if", "self", ".", "do_validation", ":", "\n", "            ", "val_log", "=", "self", ".", "_valid_epoch", "(", "epoch", ")", "\n", "log", ".", "update", "(", "**", "{", "'val_'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "step", "(", "epoch", "=", "epoch", ")", "\n", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.trainer.trainer.Trainer._valid_epoch": [[92, 118], ["trainer.Trainer.model.eval", "trainer.Trainer.valid_metrics.reset", "trainer.Trainer.valid_metrics.result", "torch.no_grad", "enumerate", "data.to.to.to", "trainer.Trainer.model", "trainer.Trainer.criterion", "trainer.Trainer.writer.set_step", "trainer.Trainer.keys", "trainer.Trainer.valid_metrics.update", "trainer.Trainer.valid_metrics.update", "losses[].item", "met", "len"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.reset", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.result", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.logger.visualization.TensorboardWriter.set_step", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.update"], ["", "def", "_valid_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Validate after training an epoch\n\n        :param epoch: Integer, current training epoch.\n        :return: A log that contains information about validation\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "valid_metrics", ".", "reset", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "valid_data_loader", ")", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "losses", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "loss", "=", "losses", "[", "'total_loss'", "]", "\n", "\n", "self", ".", "writer", ".", "set_step", "(", "\n", "(", "epoch", "-", "1", ")", "*", "len", "(", "self", ".", "valid_data_loader", ")", "+", "batch_idx", ",", "'valid'", ")", "\n", "for", "loss_key", "in", "losses", ".", "keys", "(", ")", ":", "\n", "                    ", "self", ".", "valid_metrics", ".", "update", "(", "\n", "loss_key", ",", "losses", "[", "loss_key", "]", ".", "item", "(", ")", ")", "\n", "", "for", "met", "in", "self", ".", "metric_ftns", ":", "\n", "                    ", "self", ".", "valid_metrics", ".", "update", "(", "\n", "met", ".", "__name__", ",", "met", "(", "output", ",", "target", ")", ")", "\n", "", "", "", "return", "self", ".", "valid_metrics", ".", "result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.trainer.trainer.Trainer._progress": [[119, 128], ["hasattr", "base.format"], "methods", ["None"], ["", "def", "_progress", "(", "self", ",", "batch_idx", ")", ":", "\n", "        ", "base", "=", "'[{}/{} ({:.0f}%)]'", "\n", "if", "hasattr", "(", "self", ".", "data_loader", ",", "'n_samples'", ")", ":", "\n", "            ", "current", "=", "batch_idx", "*", "self", ".", "data_loader", ".", "batch_size", "\n", "total", "=", "self", ".", "data_loader", ".", "n_samples", "\n", "", "else", ":", "\n", "            ", "current", "=", "batch_idx", "\n", "total", "=", "self", ".", "len_epoch", "\n", "", "return", "base", ".", "format", "(", "current", ",", "total", ",", "100.0", "*", "current", "/", "total", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_trainer.BaseTrainer.__init__": [[12, 48], ["config.get_logger", "cfg_trainer.get", "logger.TensorboardWriter", "base_trainer.BaseTrainer.monitor.split", "cfg_trainer.get", "base_trainer.BaseTrainer._resume_checkpoint"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.None.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_trainer.BaseTrainer._resume_checkpoint"], ["def", "__init__", "(", "self", ",", "model", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "logger", "=", "config", ".", "get_logger", "(", "'trainer'", ",", "config", "[", "'trainer'", "]", "[", "'verbosity'", "]", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "metric_ftns", "=", "metric_ftns", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "cfg_trainer", "=", "config", "[", "'trainer'", "]", "\n", "self", ".", "epochs", "=", "cfg_trainer", "[", "'epochs'", "]", "\n", "self", ".", "save_period", "=", "cfg_trainer", "[", "'save_period'", "]", "\n", "self", ".", "monitor", "=", "cfg_trainer", ".", "get", "(", "'monitor'", ",", "'off'", ")", "\n", "\n", "# configuration to monitor model performance and save best", "\n", "if", "self", ".", "monitor", "==", "'off'", ":", "\n", "            ", "self", ".", "mnt_mode", "=", "'off'", "\n", "self", ".", "mnt_best", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "mnt_mode", ",", "self", ".", "mnt_metric", "=", "self", ".", "monitor", ".", "split", "(", ")", "\n", "assert", "self", ".", "mnt_mode", "in", "[", "'min'", ",", "'max'", "]", "\n", "\n", "self", ".", "mnt_best", "=", "inf", "if", "self", ".", "mnt_mode", "==", "'min'", "else", "-", "inf", "\n", "self", ".", "early_stop", "=", "cfg_trainer", ".", "get", "(", "'early_stop'", ",", "inf", ")", "\n", "if", "self", ".", "early_stop", "<=", "0", ":", "\n", "                ", "self", ".", "early_stop", "=", "inf", "\n", "\n", "", "", "self", ".", "start_epoch", "=", "1", "\n", "\n", "self", ".", "checkpoint_dir", "=", "config", ".", "save_dir", "\n", "\n", "# setup visualization writer instance                ", "\n", "self", ".", "writer", "=", "TensorboardWriter", "(", "config", ".", "log_dir", ",", "self", ".", "logger", ",", "cfg_trainer", "[", "'tensorboard'", "]", ")", "\n", "\n", "if", "config", ".", "resume", "is", "not", "None", ":", "\n", "            ", "self", ".", "_resume_checkpoint", "(", "config", ".", "resume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_trainer.BaseTrainer._train_epoch": [[49, 57], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an epoch\n\n        :param epoch: Current epoch number\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_trainer.BaseTrainer.train": [[58, 101], ["range", "base_trainer.BaseTrainer._train_epoch", "log.update", "log.items", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer._save_checkpoint", "base_trainer.BaseTrainer.logger.info", "str", "base_trainer.BaseTrainer.logger.warning"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_trainer.BaseTrainer._train_epoch", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_trainer.BaseTrainer._save_checkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Full training logic\n        \"\"\"", "\n", "not_improved_count", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "result", "=", "self", ".", "_train_epoch", "(", "epoch", ")", "\n", "\n", "# save logged informations into log dict", "\n", "log", "=", "{", "'epoch'", ":", "epoch", "}", "\n", "log", ".", "update", "(", "result", ")", "\n", "\n", "# print logged informations to the screen", "\n", "for", "key", ",", "value", "in", "log", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'    {:15s}: {}'", ".", "format", "(", "str", "(", "key", ")", ",", "value", ")", ")", "\n", "\n", "# evaluate model performance according to configured metric, save best checkpoint as model_best", "\n", "", "best", "=", "False", "\n", "if", "self", ".", "mnt_mode", "!=", "'off'", ":", "\n", "                ", "try", ":", "\n", "# check whether model performance improved or not, according to specified metric(mnt_metric)", "\n", "                    ", "improved", "=", "(", "self", ".", "mnt_mode", "==", "'min'", "and", "log", "[", "self", ".", "mnt_metric", "]", "<=", "self", ".", "mnt_best", ")", "or", "(", "self", ".", "mnt_mode", "==", "'max'", "and", "log", "[", "self", ".", "mnt_metric", "]", ">=", "self", ".", "mnt_best", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Metric '{}' is not found. \"", "\n", "\"Model performance monitoring is disabled.\"", ".", "format", "(", "self", ".", "mnt_metric", ")", ")", "\n", "self", ".", "mnt_mode", "=", "'off'", "\n", "improved", "=", "False", "\n", "\n", "", "if", "improved", ":", "\n", "                    ", "self", ".", "mnt_best", "=", "log", "[", "self", ".", "mnt_metric", "]", "\n", "not_improved_count", "=", "0", "\n", "best", "=", "True", "\n", "", "else", ":", "\n", "                    ", "not_improved_count", "+=", "1", "\n", "\n", "", "if", "not_improved_count", ">", "self", ".", "early_stop", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"Validation performance didn\\'t improve for {} epochs. \"", "\n", "\"Training stops.\"", ".", "format", "(", "self", ".", "early_stop", ")", ")", "\n", "break", "\n", "\n", "", "", "if", "epoch", "%", "self", ".", "save_period", "==", "0", ":", "\n", "                ", "self", ".", "_save_checkpoint", "(", "epoch", ",", "save_best", "=", "best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_trainer.BaseTrainer._save_checkpoint": [[102, 128], ["str", "torch.save", "base_trainer.BaseTrainer.logger.info", "type", "base_trainer.BaseTrainer.model.module.state_dict", "base_trainer.BaseTrainer.model.state_dict", "base_trainer.BaseTrainer.optimizer.state_dict", "str", "torch.save", "base_trainer.BaseTrainer.logger.info", "type"], "methods", ["None"], ["", "", "", "def", "_save_checkpoint", "(", "self", ",", "epoch", ",", "save_best", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Saving checkpoints\n\n        :param epoch: current epoch number\n        :param log: logging information of the epoch\n        :param save_best: if True, rename the saved checkpoint to 'model_best.pth'\n        \"\"\"", "\n", "arch", "=", "type", "(", "self", ".", "model", ")", ".", "__name__", "\n", "model_state_dict", "=", "self", ".", "model", ".", "module", ".", "state_dict", "(", ")", "if", "type", "(", "\n", "self", ".", "model", ")", "==", "torch", ".", "nn", ".", "DataParallel", "else", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "state", "=", "{", "\n", "'arch'", ":", "arch", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model_state_dict", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'monitor_best'", ":", "self", ".", "mnt_best", ",", "\n", "'config'", ":", "self", ".", "config", "\n", "}", "\n", "filename", "=", "str", "(", "self", ".", "checkpoint_dir", "/", "'checkpoint-epoch{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint: {} ...\"", ".", "format", "(", "filename", ")", ")", "\n", "if", "save_best", ":", "\n", "            ", "best_path", "=", "str", "(", "self", ".", "checkpoint_dir", "/", "'model_best.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "best_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving current best: model_best.pth ...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_trainer.BaseTrainer._resume_checkpoint": [[129, 164], ["str", "base_trainer.BaseTrainer.logger.info", "torch.load", "base_trainer.BaseTrainer.model.load_state_dict", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.logger.warning", "type", "collections.OrderedDict", "model_state_dict.items", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.backbone.resnet.ResNetEncoder.load_state_dict", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.backbone.resnet.ResNetEncoder.load_state_dict"], ["", "", "def", "_resume_checkpoint", "(", "self", ",", "resume_path", ")", ":", "\n", "        ", "\"\"\"\n        Resume from saved checkpoints\n\n        :param resume_path: Checkpoint path to be resumed\n        \"\"\"", "\n", "resume_path", "=", "str", "(", "resume_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint: {} ...\"", ".", "format", "(", "resume_path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_path", ")", "\n", "self", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "self", ".", "mnt_best", "=", "checkpoint", "[", "'monitor_best'", "]", "\n", "\n", "# load architecture params from checkpoint.", "\n", "if", "checkpoint", "[", "'config'", "]", "[", "'arch'", "]", "!=", "self", ".", "config", "[", "'arch'", "]", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Architecture configuration given in config file is different from that of \"", "\n", "\"checkpoint. This may yield an exception while state_dict is being loaded.\"", ")", "\n", "", "model_state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "# if the current model in data parallel", "\n", "if", "type", "(", "self", ".", "model", ")", "==", "torch", ".", "nn", ".", "DataParallel", ":", "\n", "            ", "new_model_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "model_state_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "'module'", "not", "in", "k", ":", "\n", "                    ", "k", "=", "'module.'", "+", "k", "\n", "", "new_model_state_dict", "[", "k", "]", "=", "v", "\n", "", "model_state_dict", "=", "new_model_state_dict", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "\n", "# load optimizer state from checkpoint only when optimizer type is not changed.", "\n", "if", "checkpoint", "[", "'config'", "]", "[", "'optimizer'", "]", "[", "'type'", "]", "!=", "self", ".", "config", "[", "'optimizer'", "]", "[", "'type'", "]", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Optimizer type given in config file is different from that of checkpoint. \"", "\n", "\"Optimizer parameters not being resumed.\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Checkpoint loaded. Resume training from epoch {}\"", ".", "format", "(", "self", ".", "start_epoch", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__": [[11, 29], ["len", "base_data_loader.BaseDataLoader._split_sampler", "torch.utils.data.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader._split_sampler", "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "shuffle", ",", "validation_split", ",", "num_workers", ",", "collate_fn", "=", "default_collate", ")", ":", "\n", "        ", "self", ".", "validation_split", "=", "validation_split", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "self", ".", "batch_idx", "=", "0", "\n", "self", ".", "n_samples", "=", "len", "(", "dataset", ")", "\n", "\n", "self", ".", "sampler", ",", "self", ".", "valid_sampler", "=", "self", ".", "_split_sampler", "(", "self", ".", "validation_split", ")", "\n", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'dataset'", ":", "dataset", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "self", ".", "shuffle", ",", "\n", "'collate_fn'", ":", "collate_fn", ",", "\n", "'num_workers'", ":", "num_workers", ",", "\n", "'drop_last'", ":", "True", ",", "\n", "}", "\n", "super", "(", ")", ".", "__init__", "(", "sampler", "=", "self", ".", "sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader._split_sampler": [[30, 57], ["numpy.arange", "numpy.random.seed", "numpy.random.shuffle", "isinstance", "numpy.delete", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "int", "numpy.arange"], "methods", ["None"], ["", "def", "_split_sampler", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "0.0", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "idx_full", "=", "np", ".", "arange", "(", "self", ".", "n_samples", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_full", ")", "\n", "\n", "if", "isinstance", "(", "split", ",", "int", ")", ":", "\n", "            ", "assert", "split", ">", "0", "\n", "assert", "split", "<", "self", ".", "n_samples", ",", "\"validation set size is configured to be larger than entire dataset.\"", "\n", "len_valid", "=", "split", "\n", "", "else", ":", "\n", "            ", "len_valid", "=", "int", "(", "self", ".", "n_samples", "*", "split", ")", "\n", "\n", "", "valid_idx", "=", "idx_full", "[", "0", ":", "len_valid", "]", "\n", "train_idx", "=", "np", ".", "delete", "(", "idx_full", ",", "np", ".", "arange", "(", "0", ",", "len_valid", ")", ")", "\n", "\n", "train_sampler", "=", "SubsetRandomSampler", "(", "train_idx", ")", "\n", "valid_sampler", "=", "SubsetRandomSampler", "(", "valid_idx", ")", "\n", "\n", "# turn off shuffle option which is mutually exclusive with sampler", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "n_samples", "=", "len", "(", "train_idx", ")", "\n", "\n", "return", "train_sampler", ",", "valid_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_data_loader.BaseDataLoader.split_validation": [[58, 63], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "valid_sampler", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "DataLoader", "(", "sampler", "=", "self", ".", "valid_sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_model.BaseModel.forward": [[10, 18], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass logic\n\n        :return: Model output\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_model.BaseModel.__str__": [[19, 26], ["filter", "sum", "base_model.BaseModel.parameters", "torch.Module.__str__", "numpy.prod", "p.size"], "methods", ["home.repos.pwc.inspect_result.fuqichen1998_SequentialVotingDet.base.base_model.BaseModel.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Model prints with number of trainable parameters\n        \"\"\"", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "return", "super", "(", ")", ".", "__str__", "(", ")", "+", "'\\nTrainable parameters: {}'", ".", "format", "(", "params", ")", "\n", "", "", ""]]}