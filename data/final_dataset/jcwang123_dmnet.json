{"home.repos.pwc.inspect_result.jcwang123_dmnet.None.train.main": [[96, 400], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group", "torch.device", "torch.device", "torch.device", "torch.device", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "utils.summary.create_saver", "utils.summary.create_logger", "utils.summary.create_summary", "print", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "net.Ours.GlobalDenseST.GDST.to", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "utils.summary.create_summary.close", "dataset.Endovis2017.endovis2017", "dataset.Endovis2017.endovis2017", "net.MobileNetRefine.mobilenet.mbv2", "net.Ours.GlobalDenseST.GDST.parameters", "print", "net.Ours.GlobalDenseST.GDST.train", "time.perf_counter", "enumerate", "print", "net.Ours.GlobalDenseST.GDST.eval", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "numpy.zeros", "print", "utils.summary.create_summary.add_scalar", "utils.summary.create_summary.add_scalar", "os.path.join", "os.path.join", "utils.LoadModel.load_model", "utils.LoadModel.load_model", "utils.LoadModel.load_model", "utils.LoadModel.load_model", "os.path.join", "utils.LoadModel.load_model", "train.main.val_map"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.create_saver", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.create_logger", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.create_summary", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.EmptySummaryWriter.close", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.EmptySummaryWriter.add_scalar", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.EmptySummaryWriter.add_scalar", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.LoadModel.load_model", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.LoadModel.load_model", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.LoadModel.load_model", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.LoadModel.load_model", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.LoadModel.load_model"], ["def", "main", "(", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "cfg", ".", "gpus", "\n", "#     torch.manual_seed(317)", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "# disable this if OOM at beginning of training", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "if", "cfg", ".", "dist", ":", "\n", "        ", "cfg", ".", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "cfg", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "cfg", ".", "local_rank", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "\n", "init_method", "=", "'env://'", ",", "\n", "world_size", "=", "num_gpus", ",", "\n", "rank", "=", "cfg", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "\n", "", "for", "fold", "in", "cfg", ".", "folds", ":", "\n", "        ", "cfg", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "root_dir", ",", "cfg", ".", "dataset", ",", "cfg", ".", "data_tag", ",", "\n", "cfg", ".", "log_name", ",", "'logs'", ",", "'fold{}'", ".", "format", "(", "fold", ")", ")", "\n", "cfg", ".", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "root_dir", ",", "cfg", ".", "dataset", ",", "cfg", ".", "data_tag", ",", "\n", "cfg", ".", "log_name", ",", "'ckpt'", ",", "\n", "'fold{}'", ".", "format", "(", "fold", ")", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "ckpt_dir", ",", "exist_ok", "=", "True", ")", "\n", "saver", "=", "create_saver", "(", "cfg", ".", "local_rank", ",", "save_dir", "=", "cfg", ".", "ckpt_dir", ")", "\n", "logger", "=", "create_logger", "(", "cfg", ".", "local_rank", ",", "save_dir", "=", "cfg", ".", "log_dir", ")", "\n", "summary_writer", "=", "create_summary", "(", "cfg", ".", "local_rank", ",", "log_dir", "=", "cfg", ".", "log_dir", ")", "\n", "print", "=", "logger", ".", "info", "\n", "print", "(", "cfg", ")", "\n", "print", "(", "'Setting up data...'", ")", "\n", "\n", "if", "cfg", ".", "dataset", "==", "'endovis2017'", ":", "\n", "            ", "train_dataset", "=", "endovis2017", "(", "'train'", ",", "\n", "t", "=", "cfg", ".", "t", ",", "\n", "fold", "=", "fold", ",", "\n", "rate", "=", "rate", ",", "\n", "tag", "=", "cfg", ".", "data_tag", ",", "\n", "global_n", "=", "cfg", ".", "global_n", ")", "\n", "val_dataset", "=", "endovis2017", "(", "'val'", ",", "\n", "t", "=", "cfg", ".", "t", ",", "\n", "fold", "=", "fold", ",", "\n", "rate", "=", "rate", ",", "\n", "tag", "=", "cfg", ".", "data_tag", ",", "\n", "global_n", "=", "cfg", ".", "global_n", ")", "\n", "classes", "=", "train_dataset", ".", "class_num", "\n", "\n", "", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "cfg", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "compute_loss", "=", "loss_functions", "[", "cfg", ".", "loss", "]", "\n", "# build model", "\n", "if", "'mb_rf'", "in", "cfg", ".", "arch", ":", "\n", "            ", "model", "=", "mbv2", "(", "classes", "+", "1", ",", "imagenet", "=", "True", ",", "rate", "=", "1", ")", "\n", "", "elif", "'res50_rf'", "in", "cfg", ".", "arch", ":", "\n", "            ", "model", "=", "rf_lw50", "(", "classes", "+", "1", ",", "imagenet", "=", "True", ")", "\n", "", "elif", "'lwa'", "in", "cfg", ".", "arch", ":", "\n", "            ", "model", "=", "lwa", "(", "classes", "+", "1", ",", "imagenet", "=", "True", ")", "\n", "", "elif", "'tunet'", "in", "cfg", ".", "arch", ":", "\n", "            ", "model", "=", "TUnet", "(", "in_channels", "=", "64", ",", "\n", "num_classes", "=", "classes", "+", "1", ",", "\n", "pretrained", "=", "True", ")", "\n", "#             compute_loss = LossMulti(jaccard_weight=1,num_classes=classes+1)", "\n", "", "elif", "'unet'", "in", "cfg", ".", "arch", ":", "\n", "            ", "model", "=", "UNet", "(", "3", ",", "classes", "+", "1", ")", "\n", "", "elif", "'tpnet'", "in", "cfg", ".", "arch", ":", "\n", "            ", "assert", "(", "cfg", ".", "t", ">", "1", ")", "\n", "model", "=", "TemporalNet", "(", "classes", "+", "1", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "\n", "tag", "=", "cfg", ".", "lstm", ",", "\n", "group", "=", "1", ")", "\n", "", "elif", "'spnet'", "in", "cfg", ".", "arch", ":", "\n", "            ", "assert", "(", "cfg", ".", "global_n", ">", "1", ")", "\n", "model", "=", "spnet", "(", "classes", "+", "1", ",", "\n", "imagenet", "=", "True", ",", "\n", "global_n", "=", "cfg", ".", "global_n", ",", "\n", "spatial_layer", "=", "cfg", ".", "spatial_layer", ")", "\n", "", "elif", "'densest'", "in", "cfg", ".", "arch", ":", "\n", "            ", "assert", "(", "cfg", ".", "t", ">", "1", ")", "\n", "model", "=", "DenseST", "(", "classes", "+", "1", ",", "tag", "=", "cfg", ".", "lstm", ")", "\n", "", "elif", "'gdst'", "in", "cfg", ".", "arch", ":", "\n", "            ", "assert", "(", "cfg", ".", "t", ">", "1", "and", "cfg", ".", "global_n", ">", "0", "\n", "and", "cfg", ".", "fusion_type", "is", "not", "None", ")", "\n", "model", "=", "GDST", "(", "classes", "+", "1", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "\n", "tag", "=", "cfg", ".", "lstm", ",", "\n", "group", "=", "1", ",", "\n", "t", "=", "cfg", ".", "t", ",", "\n", "global_n", "=", "cfg", ".", "global_n", ",", "\n", "fusion_type", "=", "cfg", ".", "fusion_type", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "cfg", ".", "lr", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "def", "train", "(", "epoch", ")", ":", "\n", "            ", "print", "(", "'\\n Epoch: %d'", "%", "epoch", ")", "\n", "model", ".", "train", "(", ")", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "                ", "for", "k", "in", "batch", ":", "\n", "                    ", "if", "not", "k", "==", "'path'", ":", "\n", "                        ", "batch", "[", "k", "]", "=", "batch", "[", "k", "]", ".", "to", "(", "device", "=", "cfg", ".", "device", ",", "\n", "non_blocking", "=", "True", ")", ".", "float", "(", ")", "\n", "", "", "outputs", "=", "model", "(", "batch", "[", "'image'", "]", ")", "\n", "if", "'bise'", "in", "cfg", ".", "arch", ":", "\n", "                    ", "loss", "=", "compute_loss", "(", "outputs", ",", "batch", "[", "'label'", "]", ")", "\n", "", "elif", "cfg", ".", "arch", "in", "[", "'unet'", ",", "'tunet'", "]", ":", "\n", "                    ", "loss", "=", "compute_loss", "(", "outputs", ",", "batch", "[", "'label'", "]", ")", "\n", "", "elif", "cfg", ".", "arch", "in", "[", "\n", "'mb_rf'", ",", "'lwa'", ",", "'tpnet'", ",", "'densest'", ",", "'spnet'", ",", "'gdst'", ",", "\n", "'res50_rf'", "\n", "]", ":", "\n", "                    ", "outputs", "=", "F", ".", "interpolate", "(", "outputs", ",", "scale_factor", "=", "4", "//", "rate", ")", "\n", "loss", "=", "compute_loss", "(", "outputs", ",", "batch", "[", "'label'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "batch_idx", "%", "cfg", ".", "log_interval", "==", "0", ":", "\n", "                    ", "duration", "=", "time", ".", "perf_counter", "(", ")", "-", "tic", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "\n", "'[%d/%d-%d/%d]'", "%", "\n", "(", "epoch", ",", "cfg", ".", "num_epochs", ",", "batch_idx", ",", "len", "(", "train_loader", ")", ")", "+", "\n", "'Dice_loss:{:.4f} Time:{:.4f}'", ".", "format", "(", "\n", "loss", ".", "item", "(", ")", ",", "duration", ")", ")", "\n", "\n", "", "step", "=", "len", "(", "train_loader", ")", "*", "epoch", "+", "batch_idx", "\n", "summary_writer", ".", "add_scalar", "(", "'loss/AVG'", ",", "loss", ".", "item", "(", ")", ",", "step", ")", "\n", "", "return", "\n", "\n", "", "def", "val_map", "(", "epoch", ")", ":", "\n", "            ", "print", "(", "'\\n Val@Epoch: %d'", "%", "epoch", ")", "\n", "model", ".", "eval", "(", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "dices", "=", "[", "]", "\n", "ious", "=", "[", "]", "\n", "metrics", "=", "np", ".", "zeros", "(", "(", "2", ",", "classes", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "                ", "for", "inputs", "in", "val_loader", ":", "\n", "                    ", "inputs", "[", "'image'", "]", "=", "inputs", "[", "'image'", "]", ".", "to", "(", "cfg", ".", "device", ")", ".", "float", "(", ")", "\n", "\n", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "output", "=", "model", "(", "inputs", "[", "'image'", "]", ")", "\n", "if", "'bise'", "in", "cfg", ".", "arch", ":", "\n", "                        ", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "cfg", ".", "arch", "in", "[", "\n", "'mb_rf'", ",", "'lwa'", ",", "'tpnet'", ",", "'densest'", ",", "'spnet'", ",", "\n", "'gdst'", ",", "'res50_rf'", "\n", "]", ":", "\n", "                        ", "output", "=", "F", ".", "interpolate", "(", "output", ",", "scale_factor", "=", "4", "//", "rate", ")", "\n", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "output", "=", "F", ".", "one_hot", "(", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "1", ")", ",", "\n", "num_classes", "=", "classes", "+", "1", ")", ".", "permute", "(", "\n", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "output", "=", "output", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "cfg", ".", "arch", "in", "[", "'unet'", ",", "'tunet'", "]", ":", "\n", "                        ", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "\n", "#                         output = output.cpu().numpy()", "\n", "", "else", ":", "\n", "\n", "                        ", "raise", "NotImplementedError", "\n", "", "duration", "=", "time", ".", "perf_counter", "(", ")", "-", "tic", "\n", "dice", "=", "compute_dice", "(", "output", ",", "\n", "inputs", "[", "'label'", "]", ".", "numpy", "(", ")", ",", "\n", "return_all", "=", "True", ")", "\n", "iou", "=", "compute_iou", "(", "output", ",", "\n", "inputs", "[", "'label'", "]", ".", "numpy", "(", ")", ",", "\n", "return_all", "=", "True", ")", "\n", "dices", ".", "append", "(", "dice", ")", "\n", "ious", ".", "append", "(", "iou", ")", "\n", "", "dices", "=", "np", ".", "array", "(", "dices", ")", "\n", "ious", "=", "np", ".", "array", "(", "ious", ")", "\n", "for", "i", "in", "range", "(", "classes", ")", ":", "\n", "                    ", "metrics", "[", "0", ",", "i", "]", "=", "np", ".", "mean", "(", "dices", "[", ":", ",", "i", "]", "[", "dices", "[", ":", ",", "i", "]", ">", "-", "1", "]", ")", "\n", "metrics", "[", "1", ",", "i", "]", "=", "np", ".", "mean", "(", "ious", "[", ":", ",", "i", "]", "[", "ious", "[", ":", ",", "i", "]", ">", "-", "1", "]", ")", "\n", "", "print", "(", "metrics", ")", "\n", "dc", ",", "jc", "=", "[", "\n", "np", ".", "mean", "(", "metrics", "[", "i", "]", "[", "metrics", "[", "i", "]", ">", "-", "1", "]", ")", "for", "i", "in", "range", "(", "2", ")", "\n", "]", "\n", "", "print", "(", "'Dice:{:.4f} IoU:{:.4f} Time:{:.4f}'", ".", "format", "(", "\n", "dc", ",", "jc", ",", "duration", ")", ")", "\n", "summary_writer", ".", "add_scalar", "(", "'Dice/Fold{}'", ".", "format", "(", "fold", ")", ",", "dc", ",", "epoch", ")", "\n", "summary_writer", ".", "add_scalar", "(", "'IoU/Fold{}'", ".", "format", "(", "fold", ")", ",", "jc", ",", "epoch", ")", "\n", "return", "dc", "\n", "\n", "", "print", "(", "'Starting training...'", ")", "\n", "best", "=", "0", "\n", "best_ep", "=", "0", "\n", "model", "=", "model", ".", "to", "(", "cfg", ".", "device", ")", "\n", "\n", "if", "cfg", ".", "arch", "in", "[", "'densest'", ",", "'gdst'", ",", "'bgdst'", "]", ":", "\n", "            ", "mem_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "root_dir", ",", "cfg", ".", "dataset", ",", "cfg", ".", "data_tag", ",", "\n", "'spnet'", ",", "'ckpt'", ",", "'fold{}'", ".", "format", "(", "fold", ")", ",", "\n", "'checkpoint.t7'", ")", "\n", "cfg", ".", "load_model", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "root_dir", ",", "cfg", ".", "dataset", ",", "\n", "cfg", ".", "data_tag", ",", "cfg", ".", "pre_name", ",", "'ckpt'", ",", "\n", "'fold{}'", ".", "format", "(", "fold", ")", ",", "\n", "'checkpoint.t7'", ")", "\n", "model", "=", "load_model", "(", "model", ",", "mem_path", ",", "False", ")", "\n", "model", "=", "load_model", "(", "model", ",", "cfg", ".", "load_model", ",", "False", ")", "\n", "model", ".", "encoder", "=", "load_model", "(", "model", ".", "encoder", ",", "cfg", ".", "load_model", ",", "False", ")", "\n", "model", ".", "decoder", "=", "load_model", "(", "model", ".", "decoder", ",", "cfg", ".", "load_model", ",", "False", ")", "\n", "\n", "", "if", "cfg", ".", "arch", "in", "[", "'tpnet'", ",", "'spnet'", ",", "'densest'", "]", ":", "\n", "            ", "if", "cfg", ".", "need_pretrain", ":", "\n", "                ", "if", "cfg", ".", "freeze_name", "is", "None", ":", "\n", "                    ", "if", "cfg", ".", "arch", "==", "'tpnet'", ":", "\n", "                        ", "cfg", ".", "freeze_name", "=", "[", "'lstm'", "]", "\n", "", "elif", "cfg", ".", "arch", "==", "'spnet'", ":", "\n", "                        ", "cfg", ".", "freeze_name", "=", "[", "'memory'", "]", "\n", "", "else", ":", "\n", "                        ", "cfg", ".", "freeze_name", "=", "[", "'non_local'", "]", "\n", "", "", "else", ":", "\n", "                    ", "cfg", ".", "freeze_name", "=", "cfg", ".", "freeze_name", ".", "split", "(", "','", ")", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", "*", "2", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "cfg", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "not", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", "in", "cfg", ".", "freeze_name", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "False", "\n", "", "else", ":", "\n", "                        ", "print", "(", "'{} NOT Freeze'", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "", "cfg", ".", "load_model", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "root_dir", ",", "cfg", ".", "dataset", ",", "\n", "cfg", ".", "data_tag", ",", "cfg", ".", "pre_name", ",", "\n", "'ckpt'", ",", "'fold{}'", ".", "format", "(", "fold", ")", ",", "\n", "'checkpoint.t7'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "cfg", ".", "load_model", ")", "\n", "if", "cfg", ".", "arch", "in", "[", "'tpnet'", ",", "'spnet'", "]", ":", "\n", "                    ", "model", ".", "encoder", "=", "load_model", "(", "model", ".", "encoder", ",", "cfg", ".", "load_model", ")", "\n", "model", ".", "decoder", "=", "load_model", "(", "model", ".", "decoder", ",", "cfg", ".", "load_model", ")", "\n", "", "print", "(", "'Pretrain for {} epochs and save the best weight'", ".", "format", "(", "\n", "cfg", ".", "pretrain_ep", ")", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "cfg", ".", "pretrain_ep", "+", "1", ")", ":", "\n", "                    ", "train", "(", "epoch", ")", "\n", "save_map", "=", "val_map", "(", "epoch", ")", "\n", "if", "save_map", ">", "best", ":", "\n", "                        ", "best", "=", "save_map", "\n", "print", "(", "saver", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'stage1'", ")", ")", "\n", "\n", "", "", "print", "(", "\n", "'Finished Pretraining, reduce lr to a half and load the best weight'", "\n", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "cfg", ".", "lr", "/", "cfg", ".", "decay", ")", "\n", "cfg", ".", "load_model", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ckpt_dir", ",", "'stage1.t7'", ")", "\n", "model", "=", "load_model", "(", "model", ",", "cfg", ".", "load_model", ")", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "True", "\n", "", "best_ep", "=", "cfg", ".", "pretrain_ep", "\n", "best", "=", "0", "\n", "\n", "", "else", ":", "\n", "                ", "cfg", ".", "load_model", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "ckpt_dir", ",", "'stage1.t7'", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "cfg", ".", "load_model", ")", "\n", "model", "=", "load_model", "(", "model", ",", "cfg", ".", "load_model", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "\n", "cfg", ".", "lr", "/", "cfg", ".", "decay", ")", "\n", "best_ep", "=", "cfg", ".", "pretrain_ep", "\n", "best", "=", "0", "\n", "\n", "", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "cfg", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "True", ")", "\n", "if", "cfg", ".", "reset", ":", "\n", "            ", "cfg", ".", "reset_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "root_dir", ",", "cfg", ".", "dataset", ",", "\n", "cfg", ".", "data_tag", ",", "'res50_rf'", ",", "'ckpt'", ",", "\n", "'fold{}'", ".", "format", "(", "fold", ")", ",", "\n", "'checkpoint.t7'", ")", "\n", "model", "=", "load_model", "(", "model", ",", "cfg", ".", "reset_path", ")", "\n", "best", "=", "val_map", "(", "cfg", ".", "reset_epoch", ")", "\n", "best_ep", "=", "cfg", ".", "reset_epoch", "\n", "\n", "", "for", "epoch", "in", "range", "(", "best_ep", "+", "1", ",", "cfg", ".", "num_epochs", "+", "1", ")", ":", "\n", "            ", "train", "(", "epoch", ")", "\n", "if", "cfg", ".", "val_interval", ">", "0", "and", "epoch", "%", "cfg", ".", "val_interval", "==", "0", ":", "\n", "                ", "save_map", "=", "val_map", "(", "epoch", ")", "\n", "if", "save_map", ">", "best", ":", "\n", "                    ", "best", "=", "save_map", "\n", "best_ep", "=", "epoch", "\n", "print", "(", "saver", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'checkpoint'", ")", ")", "\n", "", "else", ":", "\n", "                    ", "if", "epoch", "-", "best_ep", ">", "30", ":", "\n", "                        ", "break", "\n", "", "", "print", "(", "saver", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'latestcheckpoint'", ")", ")", "\n", "", "", "summary_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.arguments.get_arguments": [[6, 139], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "setattr", "densetorch.misc.broadcast", "getattr"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Arguments for Light-Weight-RefineNet Training Pipeline\"", "\n", ")", "\n", "\n", "# Common transformations", "\n", "parser", ".", "add_argument", "(", "\"--img-scale\"", ",", "type", "=", "float", ",", "default", "=", "1.0", "/", "255", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--img-mean\"", ",", "type", "=", "float", ",", "nargs", "=", "3", ",", "default", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--img-std\"", ",", "type", "=", "float", ",", "nargs", "=", "3", ",", "default", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", "\n", "\n", "# Training augmentations", "\n", "parser", ".", "add_argument", "(", "\n", "\"--augmentations-type\"", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "\"densetorch\"", ",", "\"albumentations\"", "]", ",", "\n", "default", "=", "\"densetorch\"", ",", "\n", ")", "\n", "\n", "# Dataset", "\n", "parser", ".", "add_argument", "(", "\n", "\"--val-list-path\"", ",", "type", "=", "str", ",", "default", "=", "\"./data/val.nyu\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--val-dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./datasets/nyud/\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--val-batch-size\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "# Optimisation", "\n", "parser", ".", "add_argument", "(", "\"--random-seed\"", ",", "type", "=", "int", ",", "default", "=", "42", ")", "\n", "\n", "# Training / validation setup", "\n", "parser", ".", "add_argument", "(", "\n", "\"--enc-backbone\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"50\"", ",", "\"101\"", ",", "\"152\"", ",", "\"mbv2\"", "]", ",", "default", "=", "\"mbv2\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--enc-pretrained\"", ",", "type", "=", "int", ",", "choices", "=", "[", "0", ",", "1", "]", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num-stages\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "3", ",", "\n", "help", "=", "\"Number of training stages. All other arguments with nargs='+' must \"", "\n", "\"have the number of arguments equal to this value. Otherwise, the given \"", "\n", "\"arguments will be broadcasted to have the required length.\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "40", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--dataset-type\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"densetorch\"", ",", "\n", "choices", "=", "[", "\"densetorch\"", ",", "\"torchvision\"", "]", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--val-download\"", ",", "\n", "type", "=", "int", ",", "\n", "choices", "=", "[", "0", ",", "1", "]", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"Only used if dataset_type == torchvision.\"", ",", "\n", ")", "\n", "\n", "# Checkpointing configuration", "\n", "parser", ".", "add_argument", "(", "\"--ckpt-dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./checkpoints/\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--ckpt-path\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./checkpoints/checkpoint.pth.tar\"", ",", "\n", "help", "=", "\"Path to the checkpoint file.\"", ",", "\n", ")", "\n", "\n", "# Arguments broadcastable across training stages", "\n", "stage_parser", "=", "parser", ".", "add_argument_group", "(", "\"stage-parser\"", ")", "\n", "stage_parser", ".", "add_argument", "(", "\n", "\"--crop-size\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "default", "=", "(", "500", ",", "500", ",", "500", ",", ")", "\n", ")", "\n", "stage_parser", ".", "add_argument", "(", "\n", "\"--shorter-side\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "default", "=", "(", "350", ",", "350", ",", "350", ",", ")", "\n", ")", "\n", "stage_parser", ".", "add_argument", "(", "\n", "\"--low-scale\"", ",", "type", "=", "float", ",", "nargs", "=", "\"+\"", ",", "default", "=", "(", "0.5", ",", "0.5", ",", "0.5", ",", ")", "\n", ")", "\n", "stage_parser", ".", "add_argument", "(", "\n", "\"--high-scale\"", ",", "type", "=", "float", ",", "nargs", "=", "\"+\"", ",", "default", "=", "(", "2.0", ",", "2.0", ",", "2.0", ",", ")", "\n", ")", "\n", "stage_parser", ".", "add_argument", "(", "\n", "\"--train-list-path\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "default", "=", "(", "\"./data/train.nyu\"", ",", ")", "\n", ")", "\n", "stage_parser", ".", "add_argument", "(", "\n", "\"--train-dir\"", ",", "type", "=", "str", ",", "nargs", "=", "\"+\"", ",", "default", "=", "(", "\"./datasets/nyud/\"", ",", ")", "\n", ")", "\n", "stage_parser", ".", "add_argument", "(", "\n", "\"--train-batch-size\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "default", "=", "(", "6", ",", "6", ",", "6", ",", ")", "\n", ")", "\n", "stage_parser", ".", "add_argument", "(", "\n", "\"--freeze-bn\"", ",", "type", "=", "int", ",", "choices", "=", "[", "0", ",", "1", "]", ",", "nargs", "=", "\"+\"", ",", "default", "=", "(", "1", ",", "1", ",", "1", ",", ")", "\n", ")", "\n", "stage_parser", ".", "add_argument", "(", "\n", "\"--epochs-per-stage\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "default", "=", "(", "100", ",", "100", ",", "100", ")", ",", "\n", ")", "\n", "stage_parser", ".", "add_argument", "(", "\"--val-every\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "default", "=", "(", "5", ",", "5", ",", "5", ",", ")", ")", "\n", "stage_parser", ".", "add_argument", "(", "\n", "\"--stage-names\"", ",", "\n", "type", "=", "str", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "choices", "=", "[", "\"SBD\"", ",", "\"VOC\"", "]", ",", "\n", "default", "=", "(", "\"SBD\"", ",", "\"VOC\"", ",", ")", ",", "\n", "help", "=", "\"Only used if dataset_type == torchvision.\"", ",", "\n", ")", "\n", "stage_parser", ".", "add_argument", "(", "\n", "\"--train-download\"", ",", "\n", "type", "=", "int", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "choices", "=", "[", "0", ",", "1", "]", ",", "\n", "default", "=", "(", "0", ",", "0", ",", ")", ",", "\n", "help", "=", "\"Only used if dataset_type == torchvision.\"", ",", "\n", ")", "\n", "stage_parser", ".", "add_argument", "(", "\n", "\"--grad-norm\"", ",", "\n", "type", "=", "float", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "(", "0.0", ",", ")", ",", "\n", "help", "=", "\"If > 0.0, clip gradients' norm to this value.\"", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "# Broadcast all arguments in stage-parser", "\n", "for", "group_action", "in", "stage_parser", ".", "_group_actions", ":", "\n", "        ", "argument_name", "=", "group_action", ".", "dest", "\n", "setattr", "(", "\n", "args", ",", "\n", "argument_name", ",", "\n", "broadcast", "(", "getattr", "(", "args", ",", "argument_name", ")", ",", "args", ".", "num_stages", ")", ",", "\n", ")", "\n", "", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.optimisers.get_lr_schedulers": [[8, 36], ["numpy.cumsum", "densetorch.misc.create_scheduler", "densetorch.misc.create_scheduler"], "function", ["None"], ["def", "get_lr_schedulers", "(", "\n", "enc_optim", ",", "\n", "dec_optim", ",", "\n", "enc_lr_gamma", ",", "\n", "dec_lr_gamma", ",", "\n", "enc_scheduler_type", ",", "\n", "dec_scheduler_type", ",", "\n", "epochs_per_stage", ",", "\n", ")", ":", "\n", "    ", "milestones", "=", "np", ".", "cumsum", "(", "epochs_per_stage", ")", "\n", "max_epochs", "=", "milestones", "[", "-", "1", "]", "\n", "schedulers", "=", "[", "\n", "dt", ".", "misc", ".", "create_scheduler", "(", "\n", "scheduler_type", "=", "enc_scheduler_type", ",", "\n", "optim", "=", "enc_optim", ",", "\n", "gamma", "=", "enc_lr_gamma", ",", "\n", "milestones", "=", "milestones", ",", "\n", "max_epochs", "=", "max_epochs", ",", "\n", ")", ",", "\n", "dt", ".", "misc", ".", "create_scheduler", "(", "\n", "scheduler_type", "=", "dec_scheduler_type", ",", "\n", "optim", "=", "dec_optim", ",", "\n", "gamma", "=", "dec_lr_gamma", ",", "\n", "milestones", "=", "milestones", ",", "\n", "max_epochs", "=", "max_epochs", ",", "\n", ")", ",", "\n", "]", "\n", "return", "schedulers", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.optimisers.get_optimisers": [[38, 67], ["network.get_encoder_and_decoder_params", "densetorch.misc.create_optim", "densetorch.misc.create_optim"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.src.network.get_encoder_and_decoder_params"], ["", "def", "get_optimisers", "(", "\n", "model", ",", "\n", "enc_optim_type", ",", "\n", "enc_lr", ",", "\n", "enc_weight_decay", ",", "\n", "enc_momentum", ",", "\n", "dec_optim_type", ",", "\n", "dec_lr", ",", "\n", "dec_weight_decay", ",", "\n", "dec_momentum", ",", "\n", ")", ":", "\n", "    ", "enc_params", ",", "dec_params", "=", "get_encoder_and_decoder_params", "(", "model", ")", "\n", "optimisers", "=", "[", "\n", "dt", ".", "misc", ".", "create_optim", "(", "\n", "optim_type", "=", "enc_optim_type", ",", "\n", "parameters", "=", "enc_params", ",", "\n", "lr", "=", "enc_lr", ",", "\n", "weight_decay", "=", "enc_weight_decay", ",", "\n", "momentum", "=", "enc_momentum", ",", "\n", ")", ",", "\n", "dt", ".", "misc", ".", "create_optim", "(", "\n", "optim_type", "=", "dec_optim_type", ",", "\n", "parameters", "=", "dec_params", ",", "\n", "lr", "=", "dec_lr", ",", "\n", "weight_decay", "=", "dec_weight_decay", ",", "\n", "momentum", "=", "dec_momentum", ",", "\n", ")", ",", "\n", "]", "\n", "return", "optimisers", "\n", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.network.get_segmenter": [[8, 22], ["rf_lw50", "rf_lw101", "rf_lw152", "models.mobilenet.mbv2", "ValueError", "str"], "function", ["None"], ["def", "get_segmenter", "(", "\n", "enc_backbone", ",", "enc_pretrained", ",", "num_classes", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Create Encoder-Decoder; for now only ResNet [50,101,152] Encoders are supported\"\"\"", "\n", "if", "enc_backbone", "==", "\"50\"", ":", "\n", "        ", "return", "rf_lw50", "(", "num_classes", ",", "imagenet", "=", "enc_pretrained", ")", "\n", "", "elif", "enc_backbone", "==", "\"101\"", ":", "\n", "        ", "return", "rf_lw101", "(", "num_classes", ",", "imagenet", "=", "enc_pretrained", ")", "\n", "", "elif", "enc_backbone", "==", "\"152\"", ":", "\n", "        ", "return", "rf_lw152", "(", "num_classes", ",", "imagenet", "=", "enc_pretrained", ")", "\n", "", "elif", "enc_backbone", "==", "\"mbv2\"", ":", "\n", "        ", "return", "mbv2", "(", "num_classes", ",", "imagenet", "=", "enc_pretrained", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"{} is not supported\"", ".", "format", "(", "str", "(", "enc_backbone", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.network.get_encoder_and_decoder_params": [[24, 37], ["logging.getLogger", "model.named_parameters", "bool", "re.match", "enc_params.append", "logging.getLogger.info", "dec_params.append", "logging.getLogger.info"], "function", ["None"], ["", "", "def", "get_encoder_and_decoder_params", "(", "model", ")", ":", "\n", "    ", "\"\"\"Filter model parameters into two groups: encoder and decoder.\"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "enc_params", "=", "[", "]", "\n", "dec_params", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "bool", "(", "re", ".", "match", "(", "\".*conv1.*|.*bn1.*|.*layer.*\"", ",", "k", ")", ")", ":", "\n", "            ", "enc_params", ".", "append", "(", "v", ")", "\n", "logger", ".", "info", "(", "\" Enc. parameter: {}\"", ".", "format", "(", "k", ")", ")", "\n", "", "else", ":", "\n", "            ", "dec_params", ".", "append", "(", "v", ")", "\n", "logger", ".", "info", "(", "\" Dec. parameter: {}\"", ".", "format", "(", "k", ")", ")", "\n", "", "", "return", "enc_params", ",", "dec_params", "\n", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.train.setup_network": [[19, 38], ["logging.getLogger", "network.get_segmenter().to", "logging.getLogger.info", "torch.CrossEntropyLoss().to", "densetorch.engine.MeanIoU", "torch.DataParallel", "network.get_segmenter", "torch.CrossEntropyLoss", "densetorch.misc.compute_params"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.src.network.get_segmenter"], ["from", "net", ".", "TernausNet", ".", "tunet", "import", "UNet16", "as", "TUnet", "\n", "from", "net", ".", "Ours", ".", "base", "import", "TemporalNet", "\n", "# from net.BiseNet.r18 import BiSeNet", "\n", "from", "net", ".", "unet", ".", "unet", "import", "UNet", "\n", "from", "net", ".", "Ours", ".", "DenseST", "import", "DenseST", "\n", "from", "net", ".", "Ours", ".", "SpNet", "import", "spnet", "\n", "from", "net", ".", "Ours", ".", "GlobalDenseST", "import", "GDST", "\n", "####data", "\n", "\n", "from", "dataset", ".", "Endovis2017", "import", "endovis2017", "\n", "from", "utils", ".", "losses", "import", "BCELoss", "\n", "# from utils.EndoLoss import LossMulti", "\n", "from", "utils", ".", "EndoLoss", "import", "LossMulti", "\n", "from", "utils", ".", "metrics", "import", "compute_dice", ",", "compute_iou", "\n", "from", "utils", ".", "summary", "import", "create_summary", ",", "create_logger", ",", "create_saver", ",", "DisablePrint", "\n", "from", "utils", ".", "LoadModel", "import", "load_model", "\n", "# from net.BiseNet.seg_opr.loss_opr import SigmoidFocalLoss, ProbOhemCrossEntropy2d", "\n", "\n", "# Training settings", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'real-time segmentation'", ")", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.train.setup_checkpoint_and_maybe_restore": [[40, 67], ["densetorch.misc.Saver", "dt.misc.Saver.maybe_load", "densetorch.misc.load_state_dict", "zip", "zip", "vars", "optim.load_state_dict", "sched.load_state_dict"], "function", ["None"], ["parser", ".", "add_argument", "(", "'--local_rank'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--dist'", ",", "action", "=", "'store_true'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--root_dir'", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "'/raid/wjc/logs/RealtimeSegmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--data_tag'", ",", "type", "=", "str", ",", "choices", "=", "[", "'part'", ",", "'type'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--log_name'", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "\n", "'mb_rf'", ",", "'lwa'", ",", "'bise'", ",", "'unet'", ",", "'tunet'", ",", "'tpnet'", ",", "\n", "'spnet'", ",", "'densest'", ",", "'gdst'", ",", "'res50_rf'", "\n", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--load_model'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--folds'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log_interval'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'--val_interval'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.train.setup_data_loaders": [[69, 104], ["data.get_transforms", "data.get_datasets", "densetorch.data.get_loaders"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.src.data.get_transforms", "home.repos.pwc.inspect_result.jcwang123_dmnet.src.data.get_datasets"], ["\n", "parser", ".", "add_argument", "(", "'--lstm'", ",", "\n", "type", "=", "str", ",", "\n", "choices", "=", "[", "'convlstm'", ",", "'btnlstm'", ",", "'grouplstm'", ",", "'kdlstm'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--t'", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--freeze_name'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--spatial_layer'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--global_n'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--need_pretrain'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--pre_name'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain_ep'", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--decay'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--fusion_type'", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--reset'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--reset_epoch'", ",", "type", "=", "int", ")", "\n", "\n", "cfg", "=", "parser", ".", "parse_args", "(", ")", "\n", "# os.chdir(cfg.root_dir)", "\n", "cfg", ".", "folds", "=", "list", "(", "map", "(", "int", ",", "cfg", ".", "folds", ".", "split", "(", "','", ")", ")", ")", "\n", "# loss_functions = {'dice': DiceLoss(ignore_index=4), 'bce': BCELoss()}", "\n", "loss_functions", "=", "{", "'bce'", ":", "BCELoss", "(", ")", "}", "\n", "# rate = 1 if cfg.arch=='bise' else 1", "\n", "rate", "=", "1", "\n", "\n", "\n", "def", "main", "(", ")", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "cfg", ".", "gpus", "\n", "#     torch.manual_seed(317)", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "# disable this if OOM at beginning of training", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "if", "cfg", ".", "dist", ":", "\n", "        ", "cfg", ".", "device", "=", "torch", ".", "device", "(", "'cuda:%d'", "%", "cfg", ".", "local_rank", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "cfg", ".", "local_rank", ")", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.train.setup_optimisers_and_schedulers": [[106, 128], ["optimisers.get_optimisers", "optimisers.get_lr_schedulers"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.src.optimisers.get_optimisers", "home.repos.pwc.inspect_result.jcwang123_dmnet.src.optimisers.get_lr_schedulers"], ["init_method", "=", "'env://'", ",", "\n", "world_size", "=", "num_gpus", ",", "\n", "rank", "=", "cfg", ".", "local_rank", ")", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "\n", "", "for", "fold", "in", "cfg", ".", "folds", ":", "\n", "        ", "cfg", ".", "log_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "root_dir", ",", "cfg", ".", "dataset", ",", "cfg", ".", "data_tag", ",", "\n", "cfg", ".", "log_name", ",", "'logs'", ",", "'fold{}'", ".", "format", "(", "fold", ")", ")", "\n", "cfg", ".", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "root_dir", ",", "cfg", ".", "dataset", ",", "cfg", ".", "data_tag", ",", "\n", "cfg", ".", "log_name", ",", "'ckpt'", ",", "\n", "'fold{}'", ".", "format", "(", "fold", ")", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "ckpt_dir", ",", "exist_ok", "=", "True", ")", "\n", "saver", "=", "create_saver", "(", "cfg", ".", "local_rank", ",", "save_dir", "=", "cfg", ".", "ckpt_dir", ")", "\n", "logger", "=", "create_logger", "(", "cfg", ".", "local_rank", ",", "save_dir", "=", "cfg", ".", "log_dir", ")", "\n", "summary_writer", "=", "create_summary", "(", "cfg", ".", "local_rank", ",", "log_dir", "=", "cfg", ".", "log_dir", ")", "\n", "print", "=", "logger", ".", "info", "\n", "print", "(", "cfg", ")", "\n", "print", "(", "'Setting up data...'", ")", "\n", "\n", "if", "cfg", ".", "dataset", "==", "'endovis2017'", ":", "\n", "            ", "train_dataset", "=", "endovis2017", "(", "'train'", ",", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.train.main": [[130, 183], ["arguments.get_arguments", "logging.getLogger", "densetorch.misc.set_seed", "train.setup_network", "train.setup_data_loaders", "train.setup_optimisers_and_schedulers", "train.setup_checkpoint_and_maybe_restore", "numpy.cumsum", "sum", "range", "torch.cuda.is_available", "torch.cuda.is_available", "range", "logging.getLogger.info", "densetorch.engine.train", "scheduler.step", "logging.getLogger.info", "densetorch.engine.validate", "saver.maybe_save", "segmenter.state_dict", "optimiser.state_dict", "scheduler.state_dict"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.src.arguments.get_arguments", "home.repos.pwc.inspect_result.jcwang123_dmnet.src.train.setup_network", "home.repos.pwc.inspect_result.jcwang123_dmnet.src.train.setup_data_loaders", "home.repos.pwc.inspect_result.jcwang123_dmnet.src.train.setup_optimisers_and_schedulers", "home.repos.pwc.inspect_result.jcwang123_dmnet.src.train.setup_checkpoint_and_maybe_restore"], ["fold", "=", "fold", ",", "\n", "rate", "=", "rate", ",", "\n", "tag", "=", "cfg", ".", "data_tag", ",", "\n", "global_n", "=", "cfg", ".", "global_n", ")", "\n", "val_dataset", "=", "endovis2017", "(", "'val'", ",", "\n", "t", "=", "cfg", ".", "t", ",", "\n", "fold", "=", "fold", ",", "\n", "rate", "=", "rate", ",", "\n", "tag", "=", "cfg", ".", "data_tag", ",", "\n", "global_n", "=", "cfg", ".", "global_n", ")", "\n", "classes", "=", "train_dataset", ".", "class_num", "\n", "\n", "", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "cfg", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", "drop_last", "=", "False", ")", "\n", "compute_loss", "=", "loss_functions", "[", "cfg", ".", "loss", "]", "\n", "# build model", "\n", "if", "'mb_rf'", "in", "cfg", ".", "arch", ":", "\n", "            ", "model", "=", "mbv2", "(", "classes", "+", "1", ",", "imagenet", "=", "True", ",", "rate", "=", "1", ")", "\n", "", "elif", "'res50_rf'", "in", "cfg", ".", "arch", ":", "\n", "            ", "model", "=", "rf_lw50", "(", "classes", "+", "1", ",", "imagenet", "=", "True", ")", "\n", "", "elif", "'lwa'", "in", "cfg", ".", "arch", ":", "\n", "            ", "model", "=", "lwa", "(", "classes", "+", "1", ",", "imagenet", "=", "True", ")", "\n", "", "elif", "'tunet'", "in", "cfg", ".", "arch", ":", "\n", "            ", "model", "=", "TUnet", "(", "in_channels", "=", "64", ",", "\n", "num_classes", "=", "classes", "+", "1", ",", "\n", "pretrained", "=", "True", ")", "\n", "#             compute_loss = LossMulti(jaccard_weight=1,num_classes=classes+1)", "\n", "", "elif", "'unet'", "in", "cfg", ".", "arch", ":", "\n", "            ", "model", "=", "UNet", "(", "3", ",", "classes", "+", "1", ")", "\n", "", "elif", "'tpnet'", "in", "cfg", ".", "arch", ":", "\n", "            ", "assert", "(", "cfg", ".", "t", ">", "1", ")", "\n", "model", "=", "TemporalNet", "(", "classes", "+", "1", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "\n", "tag", "=", "cfg", ".", "lstm", ",", "\n", "group", "=", "1", ")", "\n", "", "elif", "'spnet'", "in", "cfg", ".", "arch", ":", "\n", "            ", "assert", "(", "cfg", ".", "global_n", ">", "1", ")", "\n", "model", "=", "spnet", "(", "classes", "+", "1", ",", "\n", "imagenet", "=", "True", ",", "\n", "global_n", "=", "cfg", ".", "global_n", ",", "\n", "spatial_layer", "=", "cfg", ".", "spatial_layer", ")", "\n", "", "elif", "'densest'", "in", "cfg", ".", "arch", ":", "\n", "            ", "assert", "(", "cfg", ".", "t", ">", "1", ")", "\n", "model", "=", "DenseST", "(", "classes", "+", "1", ",", "tag", "=", "cfg", ".", "lstm", ")", "\n", "", "elif", "'gdst'", "in", "cfg", ".", "arch", ":", "\n", "            ", "assert", "(", "cfg", ".", "t", ">", "1", "and", "cfg", ".", "global_n", ">", "0", "\n", "and", "cfg", ".", "fusion_type", "is", "not", "None", ")", "\n", "model", "=", "GDST", "(", "classes", "+", "1", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "\n", "tag", "=", "cfg", ".", "lstm", ",", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.data.albumentations2torchvision": [[6, 22], ["numpy.array", "Compose", "output[].to", "zip", "zip"], "function", ["None"], ["def", "albumentations2torchvision", "(", "transforms", ")", ":", "\n", "    ", "\"\"\"Wrap albumentations transformation so that they can be used in torchvision dataset\"\"\"", "\n", "from", "albumentations", "import", "Compose", "\n", "\n", "def", "wrapper_func", "(", "image", ",", "target", ")", ":", "\n", "        ", "keys", "=", "[", "\"image\"", ",", "\"mask\"", "]", "\n", "np_dtypes", "=", "[", "np", ".", "float32", ",", "np", ".", "uint8", "]", "\n", "torch_dtypes", "=", "[", "torch", ".", "float32", ",", "torch", ".", "long", "]", "\n", "sample_dict", "=", "{", "\n", "key", ":", "np", ".", "array", "(", "value", ",", "dtype", "=", "dtype", ")", "\n", "for", "key", ",", "value", ",", "dtype", "in", "zip", "(", "keys", ",", "[", "image", ",", "target", "]", ",", "np_dtypes", ")", "\n", "}", "\n", "output", "=", "Compose", "(", "transforms", ")", "(", "**", "sample_dict", ")", "\n", "return", "[", "output", "[", "key", "]", ".", "to", "(", "dtype", ")", "for", "key", ",", "dtype", "in", "zip", "(", "keys", ",", "torch_dtypes", ")", "]", "\n", "\n", "", "return", "wrapper_func", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.data.albumentations_transforms": [[24, 89], ["range", "wrapper", "Normalize", "ToTensor", "train_transforms.append", "ValueError", "wrapper", "OneOf", "PadIfNeeded", "HorizontalFlip", "RandomCrop", "RandomScale", "LongestMaxSize", "SmallestMaxSize", "numpy.array"], "function", ["None"], ["", "def", "albumentations_transforms", "(", "\n", "crop_size", ",", "\n", "shorter_side", ",", "\n", "low_scale", ",", "\n", "high_scale", ",", "\n", "img_mean", ",", "\n", "img_std", ",", "\n", "img_scale", ",", "\n", "ignore_label", ",", "\n", "num_stages", ",", "\n", "dataset_type", ",", "\n", ")", ":", "\n", "    ", "from", "albumentations", "import", "(", "\n", "Normalize", ",", "\n", "HorizontalFlip", ",", "\n", "RandomCrop", ",", "\n", "PadIfNeeded", ",", "\n", "RandomScale", ",", "\n", "LongestMaxSize", ",", "\n", "SmallestMaxSize", ",", "\n", "OneOf", ",", "\n", ")", "\n", "from", "albumentations", ".", "pytorch", "import", "ToTensorV2", "as", "ToTensor", "\n", "from", "densetorch", ".", "data", "import", "albumentations2densetorch", "\n", "\n", "if", "dataset_type", "==", "\"densetorch\"", ":", "\n", "        ", "wrapper", "=", "albumentations2densetorch", "\n", "", "elif", "dataset_type", "==", "\"torchvision\"", ":", "\n", "        ", "wrapper", "=", "albumentations2torchvision", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown dataset type: {dataset_type}\"", ")", "\n", "\n", "", "common_transformations", "=", "[", "\n", "Normalize", "(", "max_pixel_value", "=", "1.0", "/", "img_scale", ",", "mean", "=", "img_mean", ",", "std", "=", "img_std", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "]", "\n", "train_transforms", "=", "[", "]", "\n", "for", "stage", "in", "range", "(", "num_stages", ")", ":", "\n", "        ", "train_transforms", ".", "append", "(", "\n", "wrapper", "(", "\n", "[", "\n", "OneOf", "(", "\n", "[", "\n", "RandomScale", "(", "\n", "scale_limit", "=", "(", "low_scale", "[", "stage", "]", ",", "high_scale", "[", "stage", "]", ")", "\n", ")", ",", "\n", "LongestMaxSize", "(", "max_size", "=", "shorter_side", "[", "stage", "]", ")", ",", "\n", "SmallestMaxSize", "(", "max_size", "=", "shorter_side", "[", "stage", "]", ")", ",", "\n", "]", "\n", ")", ",", "\n", "PadIfNeeded", "(", "\n", "min_height", "=", "crop_size", "[", "stage", "]", ",", "\n", "min_width", "=", "crop_size", "[", "stage", "]", ",", "\n", "border_mode", "=", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "value", "=", "np", ".", "array", "(", "img_mean", ")", "/", "img_scale", ",", "\n", "mask_value", "=", "ignore_label", ",", "\n", ")", ",", "\n", "HorizontalFlip", "(", "p", "=", "0.5", ",", ")", ",", "\n", "RandomCrop", "(", "height", "=", "crop_size", "[", "stage", "]", ",", "width", "=", "crop_size", "[", "stage", "]", ",", ")", ",", "\n", "]", "\n", "+", "common_transformations", "\n", ")", "\n", ")", "\n", "", "val_transforms", "=", "wrapper", "(", "common_transformations", ")", "\n", "return", "train_transforms", ",", "val_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.data.densetorch_transforms": [[91, 142], ["range", "wrapper", "Normalise", "ToTensor", "train_transforms.append", "ValueError", "wrapper", "ResizeAndScale", "Pad", "RandomMirror", "RandomCrop"], "function", ["None"], ["", "def", "densetorch_transforms", "(", "\n", "crop_size", ",", "\n", "shorter_side", ",", "\n", "low_scale", ",", "\n", "high_scale", ",", "\n", "img_mean", ",", "\n", "img_std", ",", "\n", "img_scale", ",", "\n", "ignore_label", ",", "\n", "num_stages", ",", "\n", "dataset_type", ",", "\n", ")", ":", "\n", "    ", "from", "torchvision", ".", "transforms", "import", "Compose", "\n", "from", "densetorch", ".", "data", "import", "(", "\n", "Pad", ",", "\n", "RandomCrop", ",", "\n", "RandomMirror", ",", "\n", "ResizeAndScale", ",", "\n", "ToTensor", ",", "\n", "Normalise", ",", "\n", "densetorch2torchvision", ",", "\n", ")", "\n", "\n", "if", "dataset_type", "==", "\"densetorch\"", ":", "\n", "        ", "wrapper", "=", "Compose", "\n", "", "elif", "dataset_type", "==", "\"torchvision\"", ":", "\n", "        ", "wrapper", "=", "densetorch2torchvision", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown dataset type: {dataset_type}\"", ")", "\n", "\n", "", "common_transformations", "=", "[", "\n", "Normalise", "(", "scale", "=", "img_scale", ",", "mean", "=", "img_mean", ",", "std", "=", "img_std", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "]", "\n", "train_transforms", "=", "[", "]", "\n", "for", "stage", "in", "range", "(", "num_stages", ")", ":", "\n", "        ", "train_transforms", ".", "append", "(", "\n", "wrapper", "(", "\n", "[", "\n", "ResizeAndScale", "(", "\n", "shorter_side", "[", "stage", "]", ",", "low_scale", "[", "stage", "]", ",", "high_scale", "[", "stage", "]", "\n", ")", ",", "\n", "Pad", "(", "crop_size", "[", "stage", "]", ",", "img_mean", ",", "ignore_label", ")", ",", "\n", "RandomMirror", "(", ")", ",", "\n", "RandomCrop", "(", "crop_size", "[", "stage", "]", ")", ",", "\n", "]", "\n", "+", "common_transformations", "\n", ")", "\n", ")", "\n", "", "val_transforms", "=", "wrapper", "(", "common_transformations", ")", "\n", "return", "train_transforms", ",", "val_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.data.get_transforms": [[144, 194], ["func", "ValueError"], "function", ["None"], ["", "def", "get_transforms", "(", "\n", "crop_size", ",", "\n", "shorter_side", ",", "\n", "low_scale", ",", "\n", "high_scale", ",", "\n", "img_mean", ",", "\n", "img_std", ",", "\n", "img_scale", ",", "\n", "ignore_label", ",", "\n", "num_stages", ",", "\n", "augmentations_type", ",", "\n", "dataset_type", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n\n      crop_size (int) : square crop to apply during the training.\n      shorter_side (int) : parameter of the shorter_side resize transformation.\n      low_scale (float) : lowest scale ratio for augmentations.\n      high_scale (float) : highest scale ratio for augmentations.\n      img_mean (list of float) : image mean.\n      img_std (list of float) : image standard deviation\n      img_scale (list of float) : image scale.\n      ignore_label (int) : label to pad segmentation masks with.\n      num_stages (int): how many train_transforms to create.\n      augmentations_type (str): whether to use densetorch augmentations or albumentations.\n      dataset_type (str): whether to use densetorch or torchvision dataset;\n                            needed to correctly wrap transformations.\n\n    Returns:\n      train_transforms, val_transforms\n\n    \"\"\"", "\n", "if", "augmentations_type", "==", "\"densetorch\"", ":", "\n", "        ", "func", "=", "densetorch_transforms", "\n", "", "elif", "augmentations_type", "==", "\"albumentations\"", ":", "\n", "        ", "func", "=", "albumentations_transforms", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown augmentations type {augmentations_type}\"", ")", "\n", "", "return", "func", "(", "\n", "crop_size", "=", "crop_size", ",", "\n", "shorter_side", "=", "shorter_side", ",", "\n", "low_scale", "=", "low_scale", ",", "\n", "high_scale", "=", "high_scale", ",", "\n", "img_mean", "=", "img_mean", ",", "\n", "img_std", "=", "img_std", ",", "\n", "img_scale", "=", "img_scale", ",", "\n", "ignore_label", "=", "ignore_label", ",", "\n", "num_stages", "=", "num_stages", ",", "\n", "dataset_type", "=", "dataset_type", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.data.densetorch_dataset": [[197, 233], ["Dataset", "Dataset", "x.decode().strip().split", "range", "len", "x.decode().strip", "x.decode"], "function", ["None"], ["", "def", "densetorch_dataset", "(", "\n", "train_dir", ",", "\n", "val_dir", ",", "\n", "train_list_path", ",", "\n", "val_list_path", ",", "\n", "train_transforms", ",", "\n", "val_transforms", ",", "\n", "masks_names", ",", "\n", "stage_names", ",", "\n", "train_download", ",", "\n", "val_download", ",", "\n", ")", ":", "\n", "    ", "from", "densetorch", ".", "data", "import", "MMDataset", "as", "Dataset", "\n", "\n", "def", "line_to_paths_fn", "(", "x", ")", ":", "\n", "        ", "rgb", ",", "segm", "=", "x", ".", "decode", "(", "\"utf-8\"", ")", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", "\"\\t\"", ")", "[", ":", "2", "]", "\n", "return", "[", "rgb", ",", "segm", "]", "\n", "\n", "", "train_sets", "=", "[", "\n", "Dataset", "(", "\n", "data_file", "=", "train_list_path", "[", "i", "]", ",", "\n", "data_dir", "=", "train_dir", "[", "i", "]", ",", "\n", "line_to_paths_fn", "=", "line_to_paths_fn", ",", "\n", "masks_names", "=", "masks_names", ",", "\n", "transform", "=", "train_transforms", "[", "i", "]", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "train_transforms", ")", ")", "\n", "]", "\n", "val_set", "=", "Dataset", "(", "\n", "data_file", "=", "val_list_path", ",", "\n", "data_dir", "=", "val_dir", ",", "\n", "line_to_paths_fn", "=", "line_to_paths_fn", ",", "\n", "masks_names", "=", "masks_names", ",", "\n", "transform", "=", "val_transforms", ",", "\n", ")", "\n", "return", "train_sets", ",", "val_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.data.torchvision_dataset": [[235, 274], ["enumerate", "VOCSegmentation", "train_sets.append", "stage.lower", "partial", "partial.", "stage.lower", "partial"], "function", ["None"], ["", "def", "torchvision_dataset", "(", "\n", "train_dir", ",", "\n", "val_dir", ",", "\n", "train_list_path", ",", "\n", "val_list_path", ",", "\n", "train_transforms", ",", "\n", "val_transforms", ",", "\n", "masks_names", ",", "\n", "stage_names", ",", "\n", "train_download", ",", "\n", "val_download", ",", "\n", ")", ":", "\n", "    ", "from", "torchvision", ".", "datasets", ".", "voc", "import", "VOCSegmentation", "\n", "from", "torchvision", ".", "datasets", "import", "SBDataset", "\n", "from", "functools", "import", "partial", "\n", "\n", "train_sets", "=", "[", "]", "\n", "for", "i", ",", "stage", "in", "enumerate", "(", "stage_names", ")", ":", "\n", "        ", "if", "stage", ".", "lower", "(", ")", "==", "\"voc\"", ":", "\n", "            ", "Dataset", "=", "partial", "(", "VOCSegmentation", ",", "image_set", "=", "\"train\"", ",", "year", "=", "\"2012\"", ",", ")", "\n", "", "elif", "stage", ".", "lower", "(", ")", "==", "\"sbd\"", ":", "\n", "            ", "Dataset", "=", "partial", "(", "SBDataset", ",", "mode", "=", "\"segmentation\"", ",", "image_set", "=", "\"train_noval\"", ")", "\n", "", "train_sets", ".", "append", "(", "\n", "Dataset", "(", "\n", "root", "=", "train_dir", "[", "i", "]", ",", "\n", "transforms", "=", "train_transforms", "[", "i", "]", ",", "\n", "download", "=", "train_download", "[", "i", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "", "val_set", "=", "VOCSegmentation", "(", "\n", "root", "=", "val_dir", ",", "\n", "image_set", "=", "\"val\"", ",", "\n", "year", "=", "\"2012\"", ",", "\n", "download", "=", "val_download", ",", "\n", "transforms", "=", "val_transforms", ",", "\n", ")", "\n", "\n", "return", "train_sets", ",", "val_set", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.src.data.get_datasets": [[276, 306], ["func", "ValueError"], "function", ["None"], ["", "def", "get_datasets", "(", "\n", "train_dir", ",", "\n", "val_dir", ",", "\n", "train_list_path", ",", "\n", "val_list_path", ",", "\n", "train_transforms", ",", "\n", "val_transforms", ",", "\n", "masks_names", ",", "\n", "dataset_type", ",", "\n", "stage_names", ",", "\n", "train_download", ",", "\n", "val_download", ",", "\n", ")", ":", "\n", "    ", "if", "dataset_type", "==", "\"densetorch\"", ":", "\n", "        ", "func", "=", "densetorch_dataset", "\n", "", "elif", "dataset_type", "==", "\"torchvision\"", ":", "\n", "        ", "func", "=", "torchvision_dataset", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Unknown dataset type {dataset_type}\"", ")", "\n", "", "return", "func", "(", "\n", "train_dir", ",", "\n", "val_dir", ",", "\n", "train_list_path", ",", "\n", "val_list_path", ",", "\n", "train_transforms", ",", "\n", "val_transforms", ",", "\n", "masks_names", ",", "\n", "stage_names", ",", "\n", "train_download", ",", "\n", "val_download", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_transforms.get_dummy_image_and_mask": [[11, 15], ["numpy.random.randint().astype", "numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["def", "get_dummy_image_and_mask", "(", "size", "=", "(", "512", ",", "512", ")", ")", ":", "\n", "    ", "image", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "255", ",", "size", "=", "size", "+", "(", "3", ",", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mask", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "15", ",", "size", "=", "size", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_transforms.pack_sample": [[17, 25], ["image.copy.copy", "mask.copy.copy"], "function", ["None"], ["", "def", "pack_sample", "(", "image", ",", "mask", ",", "dataset_type", ")", ":", "\n", "    ", "image", "=", "image", ".", "copy", "(", ")", "\n", "mask", "=", "mask", ".", "copy", "(", ")", "\n", "if", "dataset_type", "==", "\"densetorch\"", ":", "\n", "        ", "sample", "=", "(", "{", "\"image\"", ":", "image", ",", "\"mask\"", ":", "mask", ",", "\"names\"", ":", "(", "\"mask\"", ",", ")", "}", ",", ")", "\n", "", "elif", "dataset_type", "==", "\"torchvision\"", ":", "\n", "        ", "sample", "=", "(", "image", ",", "mask", ")", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_transforms.unpack_sample": [[27, 34], ["None"], "function", ["None"], ["", "def", "unpack_sample", "(", "sample", ",", "dataset_type", ")", ":", "\n", "    ", "if", "dataset_type", "==", "\"densetorch\"", ":", "\n", "        ", "image", "=", "sample", "[", "\"image\"", "]", "\n", "mask", "=", "sample", "[", "\"mask\"", "]", "\n", "", "elif", "dataset_type", "==", "\"torchvision\"", ":", "\n", "        ", "image", ",", "mask", "=", "sample", "\n", "", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_transforms.num_stages": [[36, 39], ["pytest.fixture", "random.randint"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", ")", "\n", "def", "num_stages", "(", ")", ":", "\n", "    ", "return", "random", ".", "randint", "(", "1", ",", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_transforms.crop_size": [[41, 48], ["pytest.fixture", "random.randint"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", ")", "\n", "def", "crop_size", "(", ")", ":", "\n", "    ", "crop_size", "=", "random", ".", "randint", "(", "160", ",", "960", ")", "\n", "if", "crop_size", "%", "2", "==", "1", ":", "\n", "# NOTE: In DenseTorch, the crop is always even.", "\n", "        ", "crop_size", "-=", "1", "\n", "", "return", "crop_size", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_transforms.shorter_side": [[50, 53], ["pytest.fixture", "random.randint"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", ")", "\n", "def", "shorter_side", "(", ")", ":", "\n", "    ", "return", "random", ".", "randint", "(", "160", ",", "960", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_transforms.low_scale": [[55, 58], ["pytest.fixture", "random.random"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", ")", "\n", "def", "low_scale", "(", ")", ":", "\n", "    ", "return", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_transforms.high_scale": [[60, 63], ["pytest.fixture", "random.random"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", ")", "\n", "def", "high_scale", "(", ")", ":", "\n", "    ", "return", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_transforms.test_transforms": [[65, 134], ["pytest.mark.parametrize", "pytest.mark.parametrize", "data.get_transforms", "zip", "len", "test_transforms.get_dummy_image_and_mask", "test_transforms.pack_sample", "transform", "test_transforms.unpack_sample", "isinstance", "isinstance", "numpy.unique", "numpy.unique", "densetorch.misc.broadcast", "densetorch.misc.broadcast", "densetorch.misc.broadcast", "densetorch.misc.broadcast", "mask_output.numpy", "len", "all", "numpy.setdiff1d", "np.unique.tolist"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.src.data.get_transforms", "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_transforms.get_dummy_image_and_mask", "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_transforms.pack_sample", "home.repos.pwc.inspect_result.jcwang123_dmnet.dataset.Endovis2017.endovis2017.transform", "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_transforms.unpack_sample"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"augmentations_type\"", ",", "[", "\"densetorch\"", ",", "\"albumentations\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"dataset_type\"", ",", "[", "\"densetorch\"", ",", "\"torchvision\"", "]", ")", "\n", "def", "test_transforms", "(", "\n", "augmentations_type", ",", "\n", "crop_size", ",", "\n", "dataset_type", ",", "\n", "num_stages", ",", "\n", "shorter_side", ",", "\n", "low_scale", ",", "\n", "high_scale", ",", "\n", "img_mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "img_std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "img_scale", "=", "1.0", "/", "255", ",", "\n", "ignore_label", "=", "255", ",", "\n", ")", ":", "\n", "    ", "train_transforms", ",", "val_transforms", "=", "get_transforms", "(", "\n", "crop_size", "=", "broadcast", "(", "crop_size", ",", "num_stages", ")", ",", "\n", "shorter_side", "=", "broadcast", "(", "shorter_side", ",", "num_stages", ")", ",", "\n", "low_scale", "=", "broadcast", "(", "low_scale", ",", "num_stages", ")", ",", "\n", "high_scale", "=", "broadcast", "(", "high_scale", ",", "num_stages", ")", ",", "\n", "img_mean", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "img_std", "=", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "\n", "img_scale", "=", "1.0", "/", "255", ",", "\n", "ignore_label", "=", "255", ",", "\n", "num_stages", "=", "num_stages", ",", "\n", "augmentations_type", "=", "augmentations_type", ",", "\n", "dataset_type", "=", "dataset_type", ",", "\n", ")", "\n", "assert", "len", "(", "train_transforms", ")", "==", "num_stages", "\n", "for", "is_val", ",", "transform", "in", "zip", "(", "\n", "[", "False", "]", "*", "num_stages", "+", "[", "True", "]", ",", "train_transforms", "+", "[", "val_transforms", "]", "\n", ")", ":", "\n", "        ", "image", ",", "mask", "=", "get_dummy_image_and_mask", "(", ")", "\n", "sample", "=", "pack_sample", "(", "image", "=", "image", ",", "mask", "=", "mask", ",", "dataset_type", "=", "dataset_type", ")", "\n", "output", "=", "transform", "(", "*", "sample", ")", "\n", "image_output", ",", "mask_output", "=", "unpack_sample", "(", "\n", "sample", "=", "output", ",", "dataset_type", "=", "dataset_type", "\n", ")", "\n", "# Test shape", "\n", "if", "not", "is_val", ":", "\n", "            ", "assert", "(", "\n", "image_output", ".", "shape", "[", "-", "2", ":", "]", "\n", "==", "mask_output", ".", "shape", "[", "-", "2", ":", "]", "\n", "==", "(", "crop_size", ",", "crop_size", ")", "\n", ")", "\n", "# Test that the outputs are torch tensors", "\n", "", "assert", "isinstance", "(", "image_output", ",", "torch", ".", "Tensor", ")", "\n", "assert", "isinstance", "(", "mask_output", ",", "torch", ".", "Tensor", ")", "\n", "# Test that there are no new segmentation classes, except for probably ignore_label", "\n", "uq_classes_before", "=", "np", ".", "unique", "(", "mask", ")", "\n", "uq_classes_after", "=", "np", ".", "unique", "(", "mask_output", ".", "numpy", "(", ")", ")", "\n", "assert", "(", "\n", "len", "(", "\n", "np", ".", "setdiff1d", "(", "\n", "uq_classes_after", ",", "uq_classes_before", ".", "tolist", "(", ")", "+", "[", "ignore_label", "]", "\n", ")", "\n", ")", "\n", "==", "0", "\n", ")", "\n", "if", "is_val", ":", "\n", "# Test that for validation transformation the output shape has not changed", "\n", "            ", "assert", "(", "\n", "image_output", ".", "shape", "[", "-", "2", ":", "]", "\n", "==", "image", ".", "shape", "[", ":", "2", "]", "\n", "==", "mask_output", ".", "shape", "[", "-", "2", ":", "]", "\n", "==", "mask", ".", "shape", "[", ":", "2", "]", "\n", ")", "\n", "# Test that there were no changes to the classes at all", "\n", "assert", "all", "(", "uq_classes_before", "==", "uq_classes_after", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_setup_network.test_setup_network": [[10, 19], ["arguments.get_arguments", "train.setup_network", "isinstance", "isinstance", "isinstance", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.src.arguments.get_arguments", "home.repos.pwc.inspect_result.jcwang123_dmnet.src.train.setup_network"], ["def", "test_setup_network", "(", ")", ":", "\n", "# NOTE: Removing any sys.argv to get default arguments", "\n", "    ", "sys", ".", "argv", "=", "[", "\"\"", "]", "\n", "args", "=", "get_arguments", "(", ")", "\n", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "segmenter", ",", "training_loss", ",", "validation_loss", "=", "setup_network", "(", "args", ",", "device", ")", "\n", "assert", "isinstance", "(", "segmenter", ",", "torch", ".", "nn", ".", "Module", ")", "\n", "assert", "isinstance", "(", "training_loss", ",", "torch", ".", "nn", ".", "CrossEntropyLoss", ")", "\n", "assert", "isinstance", "(", "validation_loss", ",", "dt", ".", "engine", ".", "MeanIoU", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_networks.get_dummy_input_tensor": [[26, 29], ["torch.FloatTensor().float", "torch.FloatTensor"], "function", ["None"], ["def", "get_dummy_input_tensor", "(", "height", ",", "width", ",", "channels", "=", "3", ",", "batch", "=", "4", ")", ":", "\n", "    ", "input_tensor", "=", "torch", ".", "FloatTensor", "(", "batch", ",", "channels", ",", "height", ",", "width", ")", ".", "float", "(", ")", "\n", "return", "input_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_networks.get_network_output_shape": [[31, 33], ["numpy.ceil", "numpy.ceil"], "function", ["None"], ["", "def", "get_network_output_shape", "(", "h", ",", "w", ",", "output_stride", "=", "4", ")", ":", "\n", "    ", "return", "np", ".", "ceil", "(", "h", "/", "output_stride", ")", ",", "np", ".", "ceil", "(", "w", "/", "output_stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_networks.num_classes": [[35, 38], ["pytest.fixture", "random.randint"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", ")", "\n", "def", "num_classes", "(", ")", ":", "\n", "    ", "return", "random", ".", "randint", "(", "1", ",", "40", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_networks.input_height": [[40, 43], ["pytest.fixture", "random.randint"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", ")", "\n", "def", "input_height", "(", ")", ":", "\n", "    ", "return", "random", ".", "randint", "(", "33", ",", "320", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_networks.input_width": [[45, 48], ["pytest.fixture", "random.randint"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", ")", "\n", "def", "input_width", "(", ")", ":", "\n", "    ", "return", "random", ".", "randint", "(", "33", ",", "320", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_networks.test_networks": [[50, 83], ["pytest.mark.parametrize", "pytest.mark.parametrize", "network.get_segmenter().eval().to", "network.get_encoder_and_decoder_params", "torch.cuda.is_available", "len", "len", "torch.no_grad", "get_dummy_input_tensor().to", "test_networks.get_network_output_shape", "get_segmenter().eval().to.", "network.get_segmenter().eval", "densetorch.misc.compute_params", "network.size", "network.size", "network.size", "test_networks.get_dummy_input_tensor", "network.get_segmenter"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.src.network.get_encoder_and_decoder_params", "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_networks.get_network_output_shape", "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_networks.get_dummy_input_tensor", "home.repos.pwc.inspect_result.jcwang123_dmnet.src.network.get_segmenter"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"enc_backbone\"", ",", "[", "\"50\"", ",", "\"101\"", ",", "\"152\"", ",", "\"mbv2\"", "]", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"enc_pretrained\"", ",", "[", "False", ",", "True", "]", ")", "\n", "def", "test_networks", "(", "enc_backbone", ",", "enc_pretrained", ",", "num_classes", ",", "input_height", ",", "input_width", ")", ":", "\n", "    ", "device", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", "\n", "network", "=", "(", "\n", "get_segmenter", "(", "\n", "enc_backbone", "=", "enc_backbone", ",", "\n", "enc_pretrained", "=", "enc_pretrained", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", ")", "\n", ".", "eval", "(", ")", "\n", ".", "to", "(", "device", ")", "\n", ")", "\n", "if", "num_classes", "==", "21", ":", "\n", "        ", "assert", "(", "\n", "dt", ".", "misc", ".", "compute_params", "(", "network", ")", "\n", "==", "NUMBER_OF_PARAMETERS_WITH_21_CLASSES", "[", "enc_backbone", "]", "\n", ")", "\n", "\n", "", "enc_params", ",", "dec_params", "=", "get_encoder_and_decoder_params", "(", "network", ")", "\n", "n_enc_layers", ",", "n_dec_layers", "=", "NUMBER_OF_ENCODER_DECODER_LAYERS", "[", "enc_backbone", "]", "\n", "assert", "len", "(", "enc_params", ")", "==", "n_enc_layers", "\n", "assert", "len", "(", "dec_params", ")", "==", "n_dec_layers", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "input_tensor", "=", "get_dummy_input_tensor", "(", "\n", "height", "=", "input_height", ",", "width", "=", "input_width", "\n", ")", ".", "to", "(", "device", ")", "\n", "output_h", ",", "output_w", "=", "get_network_output_shape", "(", "*", "input_tensor", ".", "shape", "[", "-", "2", ":", "]", ")", "\n", "output", "=", "network", "(", "input_tensor", ")", "\n", "assert", "output", ".", "size", "(", "1", ")", "==", "num_classes", "\n", "assert", "output", ".", "size", "(", "2", ")", "==", "output_h", "\n", "assert", "output", ".", "size", "(", "3", ")", "==", "output_w", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_setup_optimisers_and_schedulers.DummyEncDecModel.__init__": [[9, 13], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DummyEncDecModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ",", "2", ")", ")", "\n", "self", ".", "dec1", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_setup_optimisers_and_schedulers.test_setup_optimisers_and_schedulers": [[15, 34], ["arguments.get_arguments", "test_setup_optimisers_and_schedulers.DummyEncDecModel", "train.setup_optimisers_and_schedulers", "len", "len", "isinstance", "hasattr", "hasattr", "hasattr", "hasattr", "isinstance", "hasattr", "hasattr", "hasattr"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.src.arguments.get_arguments", "home.repos.pwc.inspect_result.jcwang123_dmnet.src.train.setup_optimisers_and_schedulers"], ["", "", "def", "test_setup_optimisers_and_schedulers", "(", ")", ":", "\n", "# NOTE: Removing any sys.argv to get default arguments", "\n", "    ", "sys", ".", "argv", "=", "[", "\"\"", "]", "\n", "args", "=", "get_arguments", "(", ")", "\n", "model", "=", "DummyEncDecModel", "(", ")", "\n", "optimisers", ",", "schedulers", "=", "setup_optimisers_and_schedulers", "(", "args", ",", "model", ")", "\n", "assert", "len", "(", "optimisers", ")", "==", "2", "\n", "assert", "len", "(", "schedulers", ")", "==", "2", "\n", "for", "optimiser", "in", "optimisers", ":", "\n", "        ", "assert", "isinstance", "(", "optimiser", ",", "torch", ".", "optim", ".", "Optimizer", ")", "\n", "assert", "hasattr", "(", "optimiser", ",", "\"state_dict\"", ")", "\n", "assert", "hasattr", "(", "optimiser", ",", "\"load_state_dict\"", ")", "\n", "assert", "hasattr", "(", "optimiser", ",", "\"step\"", ")", "\n", "assert", "hasattr", "(", "optimiser", ",", "\"zero_grad\"", ")", "\n", "", "for", "scheduler", "in", "schedulers", ":", "\n", "        ", "assert", "isinstance", "(", "scheduler", ",", "torch", ".", "optim", ".", "lr_scheduler", ".", "_LRScheduler", ")", "\n", "assert", "hasattr", "(", "scheduler", ",", "\"state_dict\"", ")", "\n", "assert", "hasattr", "(", "scheduler", ",", "\"load_state_dict\"", ")", "\n", "assert", "hasattr", "(", "scheduler", ",", "\"step\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_setup_data_loaders.get_fake_datasets": [[9, 11], ["torchvision.datasets.FakeData", "torchvision.datasets.FakeData"], "function", ["None"], ["def", "get_fake_datasets", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "FakeData", "(", ")", ",", "FakeData", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.tests.test_setup_data_loaders.test_setup_data_loaders": [[13, 23], ["arguments.get_arguments", "mocker.patch.object", "train.setup_data_loaders", "isinstance", "len", "isinstance"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.src.arguments.get_arguments", "home.repos.pwc.inspect_result.jcwang123_dmnet.src.train.setup_data_loaders"], ["", "def", "test_setup_data_loaders", "(", "mocker", ")", ":", "\n", "# NOTE: Removing any sys.argv to get default arguments", "\n", "    ", "sys", ".", "argv", "=", "[", "\"\"", "]", "\n", "args", "=", "get_arguments", "(", ")", "\n", "mocker", ".", "patch", ".", "object", "(", "train", ",", "\"get_datasets\"", ",", "side_effect", "=", "get_fake_datasets", ")", "\n", "train_loaders", ",", "val_loader", "=", "train", ".", "setup_data_loaders", "(", "args", ")", "\n", "assert", "len", "(", "train_loaders", ")", "==", "args", ".", "num_stages", "\n", "for", "train_loader", "in", "train_loaders", ":", "\n", "        ", "assert", "isinstance", "(", "train_loader", ",", "torch", ".", "utils", ".", "data", ".", "DataLoader", ")", "\n", "", "assert", "isinstance", "(", "val_loader", ",", "torch", ".", "utils", ".", "data", ".", "DataLoader", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.EmptySummaryWriter.__init__": [[34, 36], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.EmptySummaryWriter.add_scalar": [[37, 39], ["None"], "methods", ["None"], ["", "def", "add_scalar", "(", "self", ",", "tag", ",", "scalar_value", ",", "global_step", "=", "None", ",", "walltime", "=", "None", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.EmptySummaryWriter.close": [[40, 42], ["None"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.Saver.__init__": [[77, 82], ["os.makedirs"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "distributed_rank", ",", "save_dir", ")", ":", "\n", "    ", "self", ".", "distributed_rank", "=", "distributed_rank", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "os", ".", "makedirs", "(", "self", ".", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.Saver.save": [[83, 89], ["torch.save", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.Saver.save"], ["", "def", "save", "(", "self", ",", "obj", ",", "save_name", ")", ":", "\n", "    ", "if", "self", ".", "distributed_rank", "==", "0", ":", "\n", "      ", "torch", ".", "save", "(", "obj", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_name", "+", "'.t7'", ")", ")", "\n", "return", "'checkpoint saved in %s !'", "%", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "save_name", ")", "\n", "", "else", ":", "\n", "      ", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.DisablePrint.__init__": [[96, 98], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "local_rank", "=", "0", ")", ":", "\n", "    ", "self", ".", "local_rank", "=", "local_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.DisablePrint.__enter__": [[99, 105], ["open"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "local_rank", "!=", "0", ":", "\n", "      ", "self", ".", "_original_stdout", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "", "else", ":", "\n", "      ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.DisablePrint.__exit__": [[106, 112], ["sys.stdout.close"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.EmptySummaryWriter.close"], ["", "", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "    ", "if", "self", ".", "local_rank", "!=", "0", ":", "\n", "      ", "sys", ".", "stdout", ".", "close", "(", ")", "\n", "sys", ".", "stdout", "=", "self", ".", "_original_stdout", "\n", "", "else", ":", "\n", "      ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.create_summary": [[44, 49], ["summary.EmptySummaryWriter", "SummaryWriter"], "function", ["None"], ["", "", "def", "create_summary", "(", "distributed_rank", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "  ", "if", "distributed_rank", ">", "0", ":", "\n", "    ", "return", "EmptySummaryWriter", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "    ", "return", "SummaryWriter", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.create_logger": [[51, 74], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "datetime.datetime.now().strftime", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join", "datetime.datetime.now"], "function", ["None"], ["", "", "def", "create_logger", "(", "distributed_rank", "=", "0", ",", "save_dir", "=", "None", ")", ":", "\n", "  ", "logger", "=", "logging", ".", "getLogger", "(", "'logger'", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "filename", "=", "\"log_%s.txt\"", "%", "(", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%Y_%m_%d_%H_%M_%S\"", ")", ")", "\n", "\n", "# don't log results for the non-master process", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "    ", "return", "logger", "\n", "", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# formatter = logging.Formatter(\"%(asctime)s %(name)s %(levelname)s: %(message)s\")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(message)s [%(asctime)s]\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", "is", "not", "None", ":", "\n", "    ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.summary.create_saver": [[91, 93], ["summary.Saver"], "function", ["None"], ["", "", "", "def", "create_saver", "(", "distributed_rank", ",", "save_dir", ")", ":", "\n", "  ", "return", "Saver", "(", "distributed_rank", ",", "save_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.metrics.compute_dice": [[3, 19], ["numpy.zeros", "range", "list", "numpy.mean", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["def", "compute_dice", "(", "pre", ",", "ref", ",", "return_all", "=", "False", ")", ":", "\n", "# n*c*w*h", "\n", "    ", "pre", "=", "pre", ">", "0.5", "\n", "ref", "=", "ref", ">", "0.5", "\n", "assert", "pre", ".", "shape", "==", "ref", ".", "shape", "\n", "class_num", "=", "pre", ".", "shape", "[", "1", "]", "\n", "dice", "=", "np", ".", "zeros", "(", "(", "class_num", "-", "1", ",", ")", ")", "\n", "for", "c", "in", "range", "(", "1", ",", "class_num", ")", ":", "\n", "        ", "index", "=", "list", "(", "np", ".", "sum", "(", "ref", "[", ":", ",", "c", "]", ",", "axis", "=", "(", "1", ",", "2", ")", ")", ">", "10", ")", "\n", "p", "=", "pre", "[", ":", ",", "c", "]", "[", "index", "]", "\n", "r", "=", "ref", "[", ":", ",", "c", "]", "[", "index", "]", "\n", "dice", "[", "c", "-", "1", "]", "=", "np", ".", "mean", "(", "2", "*", "np", ".", "sum", "(", "p", "*", "r", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "/", "(", "np", ".", "sum", "(", "p", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "+", "np", ".", "sum", "(", "r", ",", "axis", "=", "(", "1", ",", "2", ")", ")", ")", ")", "\n", "", "if", "return_all", ":", "\n", "        ", "return", "dice", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "dice", "[", "dice", ">", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.metrics.compute_iou": [[20, 35], ["numpy.zeros", "range", "list", "numpy.mean", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "", "def", "compute_iou", "(", "pre", ",", "ref", ",", "return_all", "=", "False", ")", ":", "\n", "    ", "pre", "=", "pre", ">", "0.5", "\n", "ref", "=", "ref", ">", "0.5", "\n", "assert", "pre", ".", "shape", "==", "ref", ".", "shape", "\n", "class_num", "=", "pre", ".", "shape", "[", "1", "]", "\n", "iou", "=", "np", ".", "zeros", "(", "(", "class_num", "-", "1", ",", ")", ")", "\n", "for", "c", "in", "range", "(", "1", ",", "class_num", ")", ":", "\n", "        ", "index", "=", "list", "(", "np", ".", "sum", "(", "ref", "[", ":", ",", "c", "]", ",", "axis", "=", "(", "1", ",", "2", ")", ")", ">", "10", ")", "\n", "p", "=", "pre", "[", ":", ",", "c", "]", "[", "index", "]", "\n", "r", "=", "ref", "[", ":", ",", "c", "]", "[", "index", "]", "\n", "iou", "[", "c", "-", "1", "]", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "p", "*", "r", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "/", "(", "np", ".", "sum", "(", "p", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "+", "np", ".", "sum", "(", "r", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "-", "np", ".", "sum", "(", "p", "*", "r", ",", "axis", "=", "(", "1", ",", "2", ")", ")", ")", ")", "\n", "", "if", "return_all", ":", "\n", "        ", "return", "iou", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "iou", "[", "iou", ">", "-", "1", "]", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.pytorch_modelsize.SizeEstimator.__init__": [[8, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "input_size", "=", "(", "1", ",", "1", ",", "32", ",", "32", ")", ",", "bits", "=", "32", ")", ":", "\n", "        ", "'''\n        Estimates the size of PyTorch models in memory\n        for a given input size\n        '''", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "bits", "=", "bits", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.pytorch_modelsize.SizeEstimator.get_parameter_sizes": [[18, 31], ["list", "range", "pytorch_modelsize.SizeEstimator.model.modules", "len", "list", "range", "m.parameters", "len", "sizes.append", "numpy.array", "p[].size"], "methods", ["None"], ["", "def", "get_parameter_sizes", "(", "self", ")", ":", "\n", "        ", "'''Get sizes of all parameters in `model`'''", "\n", "mods", "=", "list", "(", "self", ".", "model", ".", "modules", "(", ")", ")", "\n", "sizes", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "mods", ")", ")", ":", "\n", "            ", "m", "=", "mods", "[", "i", "]", "\n", "p", "=", "list", "(", "m", ".", "parameters", "(", ")", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "p", ")", ")", ":", "\n", "                ", "sizes", ".", "append", "(", "np", ".", "array", "(", "p", "[", "j", "]", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "", "self", ".", "param_sizes", "=", "sizes", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.pytorch_modelsize.SizeEstimator.get_output_sizes": [[32, 45], ["torch.autograd.Variable", "torch.autograd.Variable", "list", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "pytorch_modelsize.SizeEstimator.model.modules", "len", "m", "out_sizes.append", "numpy.array", "m.size"], "methods", ["None"], ["", "def", "get_output_sizes", "(", "self", ")", ":", "\n", "        ", "'''Run sample input through each layer to get output sizes'''", "\n", "input_", "=", "Variable", "(", "torch", ".", "FloatTensor", "(", "*", "self", ".", "input_size", ")", ",", "volatile", "=", "True", ")", "\n", "mods", "=", "list", "(", "self", ".", "model", ".", "modules", "(", ")", ")", "\n", "out_sizes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "mods", ")", ")", ":", "\n", "            ", "m", "=", "mods", "[", "i", "]", "\n", "out", "=", "m", "(", "input_", ")", "\n", "out_sizes", ".", "append", "(", "np", ".", "array", "(", "out", ".", "size", "(", ")", ")", ")", "\n", "input_", "=", "out", "\n", "\n", "", "self", ".", "out_sizes", "=", "out_sizes", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.pytorch_modelsize.SizeEstimator.calc_param_bits": [[46, 55], ["range", "len", "numpy.prod", "numpy.array"], "methods", ["None"], ["", "def", "calc_param_bits", "(", "self", ")", ":", "\n", "        ", "'''Calculate total number of bits to store `model` parameters'''", "\n", "total_bits", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "param_sizes", ")", ")", ":", "\n", "            ", "s", "=", "self", ".", "param_sizes", "[", "i", "]", "\n", "bits", "=", "np", ".", "prod", "(", "np", ".", "array", "(", "s", ")", ")", "*", "self", ".", "bits", "\n", "total_bits", "+=", "bits", "\n", "", "self", ".", "param_bits", "=", "total_bits", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.pytorch_modelsize.SizeEstimator.calc_forward_backward_bits": [[56, 66], ["range", "len", "numpy.prod", "numpy.array"], "methods", ["None"], ["", "def", "calc_forward_backward_bits", "(", "self", ")", ":", "\n", "        ", "'''Calculate bits to store forward and backward pass'''", "\n", "total_bits", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "out_sizes", ")", ")", ":", "\n", "            ", "s", "=", "self", ".", "out_sizes", "[", "i", "]", "\n", "bits", "=", "np", ".", "prod", "(", "np", ".", "array", "(", "s", ")", ")", "*", "self", ".", "bits", "\n", "total_bits", "+=", "bits", "\n", "# multiply by 2 for both forward AND backward", "\n", "", "self", ".", "forward_backward_bits", "=", "(", "total_bits", "*", "2", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.pytorch_modelsize.SizeEstimator.calc_input_bits": [[67, 71], ["numpy.prod", "numpy.array"], "methods", ["None"], ["", "def", "calc_input_bits", "(", "self", ")", ":", "\n", "        ", "'''Calculate bits to store input'''", "\n", "self", ".", "input_bits", "=", "np", ".", "prod", "(", "np", ".", "array", "(", "self", ".", "input_size", ")", ")", "*", "self", ".", "bits", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.pytorch_modelsize.SizeEstimator.estimate_size": [[72, 83], ["pytorch_modelsize.SizeEstimator.get_parameter_sizes", "pytorch_modelsize.SizeEstimator.get_output_sizes", "pytorch_modelsize.SizeEstimator.calc_param_bits", "pytorch_modelsize.SizeEstimator.calc_forward_backward_bits", "pytorch_modelsize.SizeEstimator.calc_input_bits"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.pytorch_modelsize.SizeEstimator.get_parameter_sizes", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.pytorch_modelsize.SizeEstimator.get_output_sizes", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.pytorch_modelsize.SizeEstimator.calc_param_bits", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.pytorch_modelsize.SizeEstimator.calc_forward_backward_bits", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.pytorch_modelsize.SizeEstimator.calc_input_bits"], ["", "def", "estimate_size", "(", "self", ")", ":", "\n", "        ", "'''Estimate model size in memory in megabytes and bits'''", "\n", "self", ".", "get_parameter_sizes", "(", ")", "\n", "self", ".", "get_output_sizes", "(", ")", "\n", "self", ".", "calc_param_bits", "(", ")", "\n", "self", ".", "calc_forward_backward_bits", "(", ")", "\n", "self", ".", "calc_input_bits", "(", ")", "\n", "total", "=", "self", ".", "param_bits", "+", "self", ".", "forward_backward_bits", "+", "self", ".", "input_bits", "\n", "\n", "total_megabytes", "=", "(", "total", "/", "8", ")", "/", "(", "1024", "**", "2", ")", "\n", "return", "total_megabytes", ",", "total", "", "", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.LoadModel.load_model": [[5, 37], ["torch.load", "torch.load", "print", "collections.OrderedDict", "model.state_dict", "model.load_state_dict", "key.startswith", "key.startswith", "print", "print", "print"], "function", ["None"], ["def", "load_model", "(", "model", ",", "pretrain_dir", ",", "log", "=", "True", ")", ":", "\n", "    ", "state_dict_", "=", "torch", ".", "load", "(", "pretrain_dir", ",", "map_location", "=", "'cuda:0'", ")", "\n", "print", "(", "'loaded pretrained weights form %s !'", "%", "pretrain_dir", ")", "\n", "state_dict", "=", "OrderedDict", "(", ")", "\n", "\n", "# convert data_parallal to model", "\n", "for", "key", "in", "state_dict_", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'module'", ")", "and", "not", "key", ".", "startswith", "(", "'module_list'", ")", ":", "\n", "            ", "state_dict", "[", "key", "[", "7", ":", "]", "]", "=", "state_dict_", "[", "key", "]", "\n", "", "else", ":", "\n", "            ", "state_dict", "[", "key", "]", "=", "state_dict_", "[", "key", "]", "\n", "\n", "# check loaded parameters and created model parameters", "\n", "", "", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "state_dict", ":", "\n", "        ", "if", "key", "in", "model_state_dict", ":", "\n", "#       print(key,state_dict[key].shape,model_state_dict[key].shape)", "\n", "            ", "if", "state_dict", "[", "key", "]", ".", "shape", "!=", "model_state_dict", "[", "key", "]", ".", "shape", ":", "\n", "                ", "if", "log", ":", "\n", "                    ", "print", "(", "'Skip loading parameter {}, required shape{}, loaded shape{}.'", ".", "format", "(", "key", ",", "model_state_dict", "[", "key", "]", ".", "shape", ",", "state_dict", "[", "key", "]", ".", "shape", ")", ")", "\n", "", "state_dict", "[", "key", "]", "=", "model_state_dict", "[", "key", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "log", ":", "\n", "                ", "print", "(", "'Drop parameter {}.'", ".", "format", "(", "key", ")", ")", "\n", "", "", "", "for", "key", "in", "model_state_dict", ":", "\n", "        ", "if", "key", "not", "in", "state_dict", ":", "\n", "            ", "if", "log", ":", "\n", "                ", "print", "(", "'No param {}.'", ".", "format", "(", "key", ")", ")", "\n", "", "state_dict", "[", "key", "]", "=", "model_state_dict", "[", "key", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "\n", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.EndoMetric.general_dice": [[8, 23], ["set", "y_true.sum", "y_true.flatten", "y_pred.sum", "EndoMetric.dice"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.EndoMetric.dice"], ["def", "general_dice", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "result", "=", "[", "]", "\n", "\n", "if", "y_true", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "if", "y_pred", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n", "", "", "for", "instrument_id", "in", "set", "(", "y_true", ".", "flatten", "(", ")", ")", ":", "\n", "        ", "if", "instrument_id", "==", "0", ":", "\n", "            ", "continue", "\n", "", "result", "+=", "[", "[", "instrument_id", ",", "dice", "(", "y_true", "==", "instrument_id", ",", "y_pred", "==", "instrument_id", ")", "]", "]", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.EndoMetric.general_jaccard": [[25, 40], ["set", "y_true.sum", "y_true.flatten", "y_pred.sum", "EndoMetric.jaccard"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.EndoMetric.jaccard"], ["", "def", "general_jaccard", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "result", "=", "[", "]", "\n", "\n", "if", "y_true", ".", "sum", "(", ")", "==", "0", ":", "\n", "        ", "if", "y_pred", ".", "sum", "(", ")", "==", "0", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n", "", "", "for", "instrument_id", "in", "set", "(", "y_true", ".", "flatten", "(", ")", ")", ":", "\n", "        ", "if", "instrument_id", "==", "0", ":", "\n", "            ", "continue", "\n", "", "result", "+=", "[", "[", "instrument_id", ",", "jaccard", "(", "y_true", "==", "instrument_id", ",", "y_pred", "==", "instrument_id", ")", "]", "]", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.EndoMetric.jaccard": [[41, 45], ["y_true.sum", "y_pred.sum"], "function", ["None"], ["", "def", "jaccard", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "intersection", "=", "(", "y_true", "*", "y_pred", ")", ".", "sum", "(", ")", "\n", "union", "=", "y_true", ".", "sum", "(", ")", "+", "y_pred", ".", "sum", "(", ")", "-", "intersection", "\n", "return", "(", "intersection", "+", "1e-15", ")", "/", "(", "union", "+", "1e-15", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.EndoMetric.dice": [[47, 49], ["y_true.sum", "y_pred.sum"], "function", ["None"], ["", "def", "dice", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "(", "2", "*", "(", "y_true", "*", "y_pred", ")", ".", "sum", "(", ")", "+", "1e-15", ")", "/", "(", "y_true", ".", "sum", "(", ")", "+", "y_pred", ".", "sum", "(", ")", "+", "1e-15", ")", "", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.EndoLoss.LossBinary.__init__": [[13, 16], ["torch.nn.BCEWithLogitsLoss"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "jaccard_weight", "=", "0", ")", ":", "\n", "        ", "self", ".", "nll_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "self", ".", "jaccard_weight", "=", "jaccard_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.EndoLoss.LossBinary.__call__": [[17, 30], ["EndoLoss.LossBinary.nll_loss", "torch.nn.functional.sigmoid", "torch.nn.functional.sigmoid.sum", "jaccard_target.sum", "torch.log"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "loss", "=", "(", "1", "-", "self", ".", "jaccard_weight", ")", "*", "self", ".", "nll_loss", "(", "outputs", ",", "targets", ")", "\n", "\n", "if", "self", ".", "jaccard_weight", ":", "\n", "            ", "eps", "=", "1e-15", "\n", "jaccard_target", "=", "(", "targets", "==", "1", ")", ".", "float", "(", ")", "\n", "jaccard_output", "=", "F", ".", "sigmoid", "(", "outputs", ")", "\n", "\n", "intersection", "=", "(", "jaccard_output", "*", "jaccard_target", ")", ".", "sum", "(", ")", "\n", "union", "=", "jaccard_output", ".", "sum", "(", ")", "+", "jaccard_target", ".", "sum", "(", ")", "\n", "\n", "loss", "-=", "self", ".", "jaccard_weight", "*", "torch", ".", "log", "(", "(", "intersection", "+", "eps", ")", "/", "(", "union", "-", "intersection", "+", "eps", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.EndoLoss.LossMulti.__init__": [[33, 42], ["torch.nn.NLLLoss2d", "utils.cuda", "torch.from_numpy", "class_weights.astype"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "jaccard_weight", "=", "0", ",", "class_weights", "=", "None", ",", "num_classes", "=", "1", ")", ":", "\n", "        ", "if", "class_weights", "is", "not", "None", ":", "\n", "            ", "nll_weight", "=", "utils", ".", "cuda", "(", "\n", "torch", ".", "from_numpy", "(", "class_weights", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "nll_weight", "=", "None", "\n", "", "self", ".", "nll_loss", "=", "nn", ".", "NLLLoss2d", "(", "weight", "=", "nll_weight", ")", "\n", "self", ".", "jaccard_weight", "=", "jaccard_weight", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.EndoLoss.LossMulti.__call__": [[43, 56], ["EndoLoss.LossMulti.nll_loss", "range", "outputs[].exp", "outputs[].exp.sum", "jaccard_target.sum", "torch.log"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "loss", "=", "(", "1", "-", "self", ".", "jaccard_weight", ")", "*", "self", ".", "nll_loss", "(", "outputs", ",", "targets", ")", "\n", "\n", "if", "self", ".", "jaccard_weight", ":", "\n", "            ", "eps", "=", "1e-15", "\n", "for", "cls", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "                ", "jaccard_target", "=", "(", "targets", "==", "cls", ")", ".", "float", "(", ")", "\n", "jaccard_output", "=", "outputs", "[", ":", ",", "cls", "]", ".", "exp", "(", ")", "\n", "intersection", "=", "(", "jaccard_output", "*", "jaccard_target", ")", ".", "sum", "(", ")", "\n", "\n", "union", "=", "jaccard_output", ".", "sum", "(", ")", "+", "jaccard_target", ".", "sum", "(", ")", "\n", "loss", "-=", "torch", ".", "log", "(", "(", "intersection", "+", "eps", ")", "/", "(", "union", "-", "intersection", "+", "eps", ")", ")", "*", "self", ".", "jaccard_weight", "\n", "", "", "return", "loss", "", "", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.losses.BinaryCrossEntropyLoss.__init__": [[47, 52], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["def", "__init__", "(", "self", ",", "smooth", "=", "1", ",", "p", "=", "2", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "BinaryCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "smooth", "=", "smooth", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.losses.BinaryCrossEntropyLoss.forward": [[53, 58], ["predict.contiguous().view.contiguous().view.contiguous().view", "target.contiguous().view.contiguous().view.contiguous().view", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "predict.contiguous().view.contiguous().view.contiguous", "target.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ")", ":", "\n", "        ", "assert", "predict", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", ",", "\"predict & target batch size don't match\"", "\n", "predict", "=", "predict", ".", "contiguous", "(", ")", ".", "view", "(", "predict", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "target", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "target", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "return", "F", ".", "binary_cross_entropy", "(", "predict", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.losses.BCELoss.__init__": [[70, 75], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "ignore_index", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BCELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.losses.BCELoss.forward": [[76, 92], ["losses.BinaryCrossEntropyLoss", "torch.softmax", "torch.softmax", "torch.softmax", "range", "BinaryCrossEntropyLoss.", "total_loss.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ")", ":", "\n", "        ", "assert", "predict", ".", "shape", "==", "target", ".", "shape", ",", "'predict & target shape do not match'", "\n", "dice", "=", "BinaryCrossEntropyLoss", "(", "**", "self", ".", "kwargs", ")", "\n", "total_loss", "=", "[", "]", "\n", "predict", "=", "F", ".", "softmax", "(", "predict", ",", "dim", "=", "1", ")", "\n", "avg_loss", "=", "0", "\n", "for", "i", "in", "range", "(", "target", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "i", "!=", "self", ".", "ignore_index", ":", "\n", "                ", "loss", "=", "dice", "(", "predict", "[", ":", ",", "i", "]", ",", "target", "[", ":", ",", "i", "]", ")", "\n", "if", "self", ".", "weight", "is", "not", "None", ":", "\n", "                    ", "assert", "self", ".", "weight", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "1", "]", ",", "'Expect weight shape [{}], get[{}]'", ".", "format", "(", "target", ".", "shape", "[", "1", "]", ",", "self", ".", "weight", ".", "shape", "[", "0", "]", ")", "\n", "loss", "*=", "self", ".", "weights", "[", "i", "]", "\n", "", "total_loss", ".", "append", "(", "loss", ")", "\n", "avg_loss", "+=", "loss", "\n", "", "", "return", "avg_loss", "/", "target", ".", "shape", "[", "1", "]", "", "", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.losses.make_one_hot": [[10, 25], ["numpy.array", "tuple", "torch.zeros", "torch.zeros", "torch.zeros", "result.scatter_.scatter_", "input.cpu"], "function", ["None"], ["def", "make_one_hot", "(", "input", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\"Convert class index tensor to one hot encoding tensor.\n    Args:\n         input: A tensor of shape [N, 1, *]\n         num_classes: An int of number of class\n    Returns:\n        A tensor of shape [N, num_classes, *]\n    \"\"\"", "\n", "shape", "=", "np", ".", "array", "(", "input", ".", "shape", ")", "\n", "shape", "[", "1", "]", "=", "num_classes", "\n", "shape", "=", "tuple", "(", "shape", ")", "\n", "result", "=", "torch", ".", "zeros", "(", "shape", ")", "\n", "result", "=", "result", ".", "scatter_", "(", "1", ",", "input", ".", "cpu", "(", ")", ",", "1", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.flip": [[6, 8], ["img[].copy"], "function", ["None"], ["def", "flip", "(", "img", ")", ":", "\n", "  ", "return", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.get_border": [[10, 15], ["None"], "function", ["None"], ["", "def", "get_border", "(", "border", ",", "size", ")", ":", "\n", "  ", "i", "=", "1", "\n", "while", "size", "-", "border", "//", "i", "<=", "border", "//", "i", ":", "\n", "    ", "i", "*=", "2", "\n", "", "return", "border", "//", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.transform_preds": [[16, 22], ["numpy.zeros", "image.get_affine_transform", "range", "image.affine_transform"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.get_affine_transform", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.affine_transform"], ["", "def", "transform_preds", "(", "coords", ",", "center", ",", "scale", ",", "output_size", ")", ":", "\n", "  ", "target_coords", "=", "np", ".", "zeros", "(", "coords", ".", "shape", ")", "\n", "trans", "=", "get_affine_transform", "(", "center", ",", "scale", ",", "0", ",", "output_size", ",", "inv", "=", "1", ")", "\n", "for", "p", "in", "range", "(", "coords", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "target_coords", "[", "p", ",", "0", ":", "2", "]", "=", "affine_transform", "(", "coords", "[", "p", ",", "0", ":", "2", "]", ",", "trans", ")", "\n", "", "return", "target_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.get_affine_transform": [[24, 58], ["numpy.array", "image.get_dir", "numpy.array", "numpy.zeros", "numpy.zeros", "image.get_3rd_point", "image.get_3rd_point", "numpy.array", "numpy.array", "cv2.getAffineTransform", "cv2.getAffineTransform", "isinstance", "isinstance", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.get_dir", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.get_3rd_point", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.get_3rd_point"], ["", "def", "get_affine_transform", "(", "center", ",", "\n", "scale", ",", "\n", "rot", ",", "\n", "output_size", ",", "\n", "shift", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "inv", "=", "0", ")", ":", "\n", "  ", "if", "not", "isinstance", "(", "scale", ",", "np", ".", "ndarray", ")", "and", "not", "isinstance", "(", "scale", ",", "list", ")", ":", "\n", "    ", "scale", "=", "np", ".", "array", "(", "[", "scale", ",", "scale", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "", "scale_tmp", "=", "scale", "\n", "src_w", "=", "scale_tmp", "[", "0", "]", "\n", "dst_w", "=", "output_size", "[", "0", "]", "\n", "dst_h", "=", "output_size", "[", "1", "]", "\n", "\n", "rot_rad", "=", "np", ".", "pi", "*", "rot", "/", "180", "\n", "src_dir", "=", "get_dir", "(", "[", "0", ",", "src_w", "*", "-", "0.5", "]", ",", "rot_rad", ")", "\n", "dst_dir", "=", "np", ".", "array", "(", "[", "0", ",", "dst_w", "*", "-", "0.5", "]", ",", "np", ".", "float32", ")", "\n", "\n", "src", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dst", "=", "np", ".", "zeros", "(", "(", "3", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "src", "[", "0", ",", ":", "]", "=", "center", "+", "scale_tmp", "*", "shift", "\n", "src", "[", "1", ",", ":", "]", "=", "center", "+", "src_dir", "+", "scale_tmp", "*", "shift", "\n", "dst", "[", "0", ",", ":", "]", "=", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", "\n", "dst", "[", "1", ",", ":", "]", "=", "np", ".", "array", "(", "[", "dst_w", "*", "0.5", ",", "dst_h", "*", "0.5", "]", ",", "np", ".", "float32", ")", "+", "dst_dir", "\n", "\n", "src", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "src", "[", "0", ",", ":", "]", ",", "src", "[", "1", ",", ":", "]", ")", "\n", "dst", "[", "2", ":", ",", ":", "]", "=", "get_3rd_point", "(", "dst", "[", "0", ",", ":", "]", ",", "dst", "[", "1", ",", ":", "]", ")", "\n", "\n", "if", "inv", ":", "\n", "    ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "dst", ")", ",", "np", ".", "float32", "(", "src", ")", ")", "\n", "", "else", ":", "\n", "    ", "trans", "=", "cv2", ".", "getAffineTransform", "(", "np", ".", "float32", "(", "src", ")", ",", "np", ".", "float32", "(", "dst", ")", ")", "\n", "\n", "", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.affine_transform": [[60, 64], ["numpy.dot", "numpy.array"], "function", ["None"], ["", "def", "affine_transform", "(", "pt", ",", "t", ")", ":", "\n", "  ", "new_pt", "=", "np", ".", "array", "(", "[", "pt", "[", "0", "]", ",", "pt", "[", "1", "]", ",", "1.", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "new_pt", "=", "np", ".", "dot", "(", "t", ",", "new_pt", ")", "\n", "return", "new_pt", "[", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.get_3rd_point": [[66, 69], ["numpy.array"], "function", ["None"], ["", "def", "get_3rd_point", "(", "a", ",", "b", ")", ":", "\n", "  ", "direct", "=", "a", "-", "b", "\n", "return", "b", "+", "np", ".", "array", "(", "[", "-", "direct", "[", "1", "]", ",", "direct", "[", "0", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.get_dir": [[71, 79], ["numpy.sin", "numpy.cos"], "function", ["None"], ["", "def", "get_dir", "(", "src_point", ",", "rot_rad", ")", ":", "\n", "  ", "_sin", ",", "_cos", "=", "np", ".", "sin", "(", "rot_rad", ")", ",", "np", ".", "cos", "(", "rot_rad", ")", "\n", "\n", "src_result", "=", "[", "0", ",", "0", "]", "\n", "src_result", "[", "0", "]", "=", "src_point", "[", "0", "]", "*", "_cos", "-", "src_point", "[", "1", "]", "*", "_sin", "\n", "src_result", "[", "1", "]", "=", "src_point", "[", "0", "]", "*", "_sin", "+", "src_point", "[", "1", "]", "*", "_cos", "\n", "\n", "return", "src_result", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.crop": [[81, 90], ["image.get_affine_transform", "cv2.warpAffine", "int", "int"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.get_affine_transform"], ["", "def", "crop", "(", "img", ",", "center", ",", "scale", ",", "output_size", ",", "rot", "=", "0", ")", ":", "\n", "  ", "trans", "=", "get_affine_transform", "(", "center", ",", "scale", ",", "rot", ",", "output_size", ")", "\n", "\n", "dst_img", "=", "cv2", ".", "warpAffine", "(", "img", ",", "\n", "trans", ",", "\n", "(", "int", "(", "output_size", "[", "0", "]", ")", ",", "int", "(", "output_size", "[", "1", "]", ")", ")", ",", "\n", "flags", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "return", "dst_img", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.gaussian_radius": [[93, 114], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "min"], "function", ["None"], ["", "def", "gaussian_radius", "(", "det_size", ",", "min_overlap", "=", "0.7", ")", ":", "\n", "  ", "height", ",", "width", "=", "det_size", "\n", "\n", "a1", "=", "1", "\n", "b1", "=", "(", "height", "+", "width", ")", "\n", "c1", "=", "width", "*", "height", "*", "(", "1", "-", "min_overlap", ")", "/", "(", "1", "+", "min_overlap", ")", "\n", "sq1", "=", "np", ".", "sqrt", "(", "b1", "**", "2", "-", "4", "*", "a1", "*", "c1", ")", "\n", "r1", "=", "(", "b1", "+", "sq1", ")", "/", "2", "\n", "\n", "a2", "=", "4", "\n", "b2", "=", "2", "*", "(", "height", "+", "width", ")", "\n", "c2", "=", "(", "1", "-", "min_overlap", ")", "*", "width", "*", "height", "\n", "sq2", "=", "np", ".", "sqrt", "(", "b2", "**", "2", "-", "4", "*", "a2", "*", "c2", ")", "\n", "r2", "=", "(", "b2", "+", "sq2", ")", "/", "2", "\n", "\n", "a3", "=", "4", "*", "min_overlap", "\n", "b3", "=", "-", "2", "*", "min_overlap", "*", "(", "height", "+", "width", ")", "\n", "c3", "=", "(", "min_overlap", "-", "1", ")", "*", "width", "*", "height", "\n", "sq3", "=", "np", ".", "sqrt", "(", "b3", "**", "2", "-", "4", "*", "a3", "*", "c3", ")", "\n", "r3", "=", "(", "b3", "+", "sq3", ")", "/", "2", "\n", "return", "min", "(", "r1", ",", "r2", ",", "r3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.gaussian2D": [[116, 123], ["numpy.exp", "np.exp.max", "numpy.finfo"], "function", ["None"], ["", "def", "gaussian2D", "(", "shape", ",", "sigma", "=", "1", ")", ":", "\n", "  ", "m", ",", "n", "=", "[", "(", "ss", "-", "1.", ")", "/", "2.", "for", "ss", "in", "shape", "]", "\n", "y", ",", "x", "=", "np", ".", "ogrid", "[", "-", "m", ":", "m", "+", "1", ",", "-", "n", ":", "n", "+", "1", "]", "\n", "\n", "h", "=", "np", ".", "exp", "(", "-", "(", "x", "*", "x", "+", "y", "*", "y", ")", "/", "(", "2", "*", "sigma", "*", "sigma", ")", ")", "\n", "h", "[", "h", "<", "np", ".", "finfo", "(", "h", ".", "dtype", ")", ".", "eps", "*", "h", ".", "max", "(", ")", "]", "=", "0", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.draw_umich_gaussian": [[125, 141], ["image.gaussian2D", "int", "int", "min", "min", "min", "min", "numpy.maximum", "min", "min"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.gaussian2D"], ["", "def", "draw_umich_gaussian", "(", "heatmap", ",", "center", ",", "radius", ",", "k", "=", "1", ")", ":", "\n", "  ", "diameter", "=", "2", "*", "radius", "+", "1", "\n", "gaussian", "=", "gaussian2D", "(", "(", "diameter", ",", "diameter", ")", ",", "sigma", "=", "diameter", "/", "6", ")", "\n", "\n", "x", ",", "y", "=", "int", "(", "center", "[", "0", "]", ")", ",", "int", "(", "center", "[", "1", "]", ")", "\n", "\n", "height", ",", "width", "=", "heatmap", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "left", ",", "right", "=", "min", "(", "x", ",", "radius", ")", ",", "min", "(", "width", "-", "x", ",", "radius", "+", "1", ")", "\n", "top", ",", "bottom", "=", "min", "(", "y", ",", "radius", ")", ",", "min", "(", "height", "-", "y", ",", "radius", "+", "1", ")", "\n", "\n", "masked_heatmap", "=", "heatmap", "[", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "\n", "masked_gaussian", "=", "gaussian", "[", "radius", "-", "top", ":", "radius", "+", "bottom", ",", "radius", "-", "left", ":", "radius", "+", "right", "]", "\n", "if", "min", "(", "masked_gaussian", ".", "shape", ")", ">", "0", "and", "min", "(", "masked_heatmap", ".", "shape", ")", ">", "0", ":", "# TODO debug", "\n", "    ", "np", ".", "maximum", "(", "masked_heatmap", ",", "masked_gaussian", "*", "k", ",", "out", "=", "masked_heatmap", ")", "\n", "", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.draw_dense_reg": [[143, 173], ["image.gaussian2D", "numpy.array().reshape", "numpy.ones", "int", "int", "min", "min", "min", "min", "numpy.array", "numpy.arange", "delta.reshape", "delta.reshape", "min", "min"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.gaussian2D"], ["", "def", "draw_dense_reg", "(", "regmap", ",", "heatmap", ",", "center", ",", "value", ",", "radius", ",", "is_offset", "=", "False", ")", ":", "\n", "  ", "diameter", "=", "2", "*", "radius", "+", "1", "\n", "gaussian", "=", "gaussian2D", "(", "(", "diameter", ",", "diameter", ")", ",", "sigma", "=", "diameter", "/", "6", ")", "\n", "value", "=", "np", ".", "array", "(", "value", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "dim", "=", "value", ".", "shape", "[", "0", "]", "\n", "reg", "=", "np", ".", "ones", "(", "(", "dim", ",", "diameter", "*", "2", "+", "1", ",", "diameter", "*", "2", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "value", "\n", "if", "is_offset", "and", "dim", "==", "2", ":", "\n", "    ", "delta", "=", "np", ".", "arange", "(", "diameter", "*", "2", "+", "1", ")", "-", "radius", "\n", "reg", "[", "0", "]", "=", "reg", "[", "0", "]", "-", "delta", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "reg", "[", "1", "]", "=", "reg", "[", "1", "]", "-", "delta", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "x", ",", "y", "=", "int", "(", "center", "[", "0", "]", ")", ",", "int", "(", "center", "[", "1", "]", ")", "\n", "\n", "height", ",", "width", "=", "heatmap", ".", "shape", "[", "0", ":", "2", "]", "\n", "\n", "left", ",", "right", "=", "min", "(", "x", ",", "radius", ")", ",", "min", "(", "width", "-", "x", ",", "radius", "+", "1", ")", "\n", "top", ",", "bottom", "=", "min", "(", "y", ",", "radius", ")", ",", "min", "(", "height", "-", "y", ",", "radius", "+", "1", ")", "\n", "\n", "masked_heatmap", "=", "heatmap", "[", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "\n", "masked_regmap", "=", "regmap", "[", ":", ",", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "\n", "masked_gaussian", "=", "gaussian", "[", "radius", "-", "top", ":", "radius", "+", "bottom", ",", "\n", "radius", "-", "left", ":", "radius", "+", "right", "]", "\n", "masked_reg", "=", "reg", "[", ":", ",", "radius", "-", "top", ":", "radius", "+", "bottom", ",", "\n", "radius", "-", "left", ":", "radius", "+", "right", "]", "\n", "if", "min", "(", "masked_gaussian", ".", "shape", ")", ">", "0", "and", "min", "(", "masked_heatmap", ".", "shape", ")", ">", "0", ":", "# TODO debug", "\n", "    ", "idx", "=", "(", "masked_gaussian", ">=", "masked_heatmap", ")", ".", "reshape", "(", "\n", "1", ",", "masked_gaussian", ".", "shape", "[", "0", "]", ",", "masked_gaussian", ".", "shape", "[", "1", "]", ")", "\n", "masked_regmap", "=", "(", "1", "-", "idx", ")", "*", "masked_regmap", "+", "idx", "*", "masked_reg", "\n", "", "regmap", "[", ":", ",", "y", "-", "top", ":", "y", "+", "bottom", ",", "x", "-", "left", ":", "x", "+", "right", "]", "=", "masked_regmap", "\n", "return", "regmap", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.draw_msra_gaussian": [[175, 197], ["int", "int", "numpy.arange", "numpy.exp", "numpy.maximum", "int", "int", "int", "int", "max", "max", "max", "min", "max", "min", "min", "min"], "function", ["None"], ["", "def", "draw_msra_gaussian", "(", "heatmap", ",", "center", ",", "sigma", ")", ":", "\n", "  ", "tmp_size", "=", "sigma", "*", "3", "\n", "mu_x", "=", "int", "(", "center", "[", "0", "]", "+", "0.5", ")", "\n", "mu_y", "=", "int", "(", "center", "[", "1", "]", "+", "0.5", ")", "\n", "w", ",", "h", "=", "heatmap", ".", "shape", "[", "0", "]", ",", "heatmap", ".", "shape", "[", "1", "]", "\n", "ul", "=", "[", "int", "(", "mu_x", "-", "tmp_size", ")", ",", "int", "(", "mu_y", "-", "tmp_size", ")", "]", "\n", "br", "=", "[", "int", "(", "mu_x", "+", "tmp_size", "+", "1", ")", ",", "int", "(", "mu_y", "+", "tmp_size", "+", "1", ")", "]", "\n", "if", "ul", "[", "0", "]", ">=", "h", "or", "ul", "[", "1", "]", ">=", "w", "or", "br", "[", "0", "]", "<", "0", "or", "br", "[", "1", "]", "<", "0", ":", "\n", "    ", "return", "heatmap", "\n", "", "size", "=", "2", "*", "tmp_size", "+", "1", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "size", ",", "1", ",", "np", ".", "float32", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", "=", "y0", "=", "size", "//", "2", "\n", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "g_x", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "h", ")", "-", "ul", "[", "0", "]", "\n", "g_y", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "w", ")", "-", "ul", "[", "1", "]", "\n", "img_x", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "h", ")", "\n", "img_y", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "w", ")", "\n", "heatmap", "[", "img_y", "[", "0", "]", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", ":", "img_x", "[", "1", "]", "]", "=", "np", ".", "maximum", "(", "\n", "heatmap", "[", "img_y", "[", "0", "]", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", ":", "img_x", "[", "1", "]", "]", ",", "\n", "g", "[", "g_y", "[", "0", "]", ":", "g_y", "[", "1", "]", ",", "g_x", "[", "0", "]", ":", "g_x", "[", "1", "]", "]", ")", "\n", "return", "heatmap", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.grayscale": [[199, 201], ["cv2.cvtColor"], "function", ["None"], ["", "def", "grayscale", "(", "image", ")", ":", "\n", "  ", "return", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.lighting_": [[203, 206], ["data_rng.normal", "numpy.dot"], "function", ["None"], ["", "def", "lighting_", "(", "data_rng", ",", "image", ",", "alphastd", ",", "eigval", ",", "eigvec", ")", ":", "\n", "  ", "alpha", "=", "data_rng", ".", "normal", "(", "scale", "=", "alphastd", ",", "size", "=", "(", "3", ",", ")", ")", "\n", "image", "+=", "np", ".", "dot", "(", "eigvec", ",", "eigval", "*", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.blend_": [[208, 212], ["None"], "function", ["None"], ["", "def", "blend_", "(", "alpha", ",", "image1", ",", "image2", ")", ":", "\n", "  ", "image1", "*=", "alpha", "\n", "image2", "*=", "(", "1", "-", "alpha", ")", "\n", "image1", "+=", "image2", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.saturation_": [[214, 217], ["image.blend_", "data_rng.uniform"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.blend_"], ["", "def", "saturation_", "(", "data_rng", ",", "image", ",", "gs", ",", "gs_mean", ",", "var", ")", ":", "\n", "  ", "alpha", "=", "1.", "+", "data_rng", ".", "uniform", "(", "low", "=", "-", "var", ",", "high", "=", "var", ")", "\n", "blend_", "(", "alpha", ",", "image", ",", "gs", "[", ":", ",", ":", ",", "None", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.brightness_": [[219, 222], ["data_rng.uniform"], "function", ["None"], ["", "def", "brightness_", "(", "data_rng", ",", "image", ",", "gs", ",", "gs_mean", ",", "var", ")", ":", "\n", "  ", "alpha", "=", "1.", "+", "data_rng", ".", "uniform", "(", "low", "=", "-", "var", ",", "high", "=", "var", ")", "\n", "image", "*=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.contrast_": [[224, 227], ["image.blend_", "data_rng.uniform"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.blend_"], ["", "def", "contrast_", "(", "data_rng", ",", "image", ",", "gs", ",", "gs_mean", ",", "var", ")", ":", "\n", "  ", "alpha", "=", "1.", "+", "data_rng", ".", "uniform", "(", "low", "=", "-", "var", ",", "high", "=", "var", ")", "\n", "blend_", "(", "alpha", ",", "image", ",", "gs_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.color_aug": [[229, 238], ["random.shuffle", "image.grayscale", "grayscale.mean", "image.lighting_", "f"], "function", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.grayscale", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.lighting_"], ["", "def", "color_aug", "(", "data_rng", ",", "image", ",", "eig_val", ",", "eig_vec", ")", ":", "\n", "  ", "functions", "=", "[", "brightness_", ",", "contrast_", ",", "saturation_", "]", "\n", "random", ".", "shuffle", "(", "functions", ")", "\n", "\n", "gs", "=", "grayscale", "(", "image", ")", "\n", "gs_mean", "=", "gs", ".", "mean", "(", ")", "\n", "for", "f", "in", "functions", ":", "\n", "    ", "f", "(", "data_rng", ",", "image", ",", "gs", ",", "gs_mean", ",", "0.4", ")", "\n", "", "lighting_", "(", "data_rng", ",", "image", ",", "0.1", ",", "eig_val", ",", "eig_vec", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.dataset.Endovis2017.endovis2017.__init__": [[30, 60], ["torch.Dataset.__init__", "print", "len", "numpy.array", "numpy.array", "range", "len", "range", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "split", ",", "t", "=", "1", ",", "fold", "=", "0", ",", "rate", "=", "4", ",", "tag", "=", "'part'", ",", "global_n", "=", "0", ",", "test", "=", "False", ")", ":", "\n", "        ", "super", "(", "endovis2017", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "mean", "=", "np", ".", "array", "(", "MEAN", ",", "dtype", "=", "np", ".", "float32", ")", "[", "None", ",", "None", ",", ":", "]", "\n", "self", ".", "std", "=", "np", ".", "array", "(", "STD", ",", "dtype", "=", "np", ".", "float32", ")", "[", "None", ",", "None", ",", ":", "]", "\n", "self", ".", "img_size", "=", "{", "'h'", ":", "512", ",", "'w'", ":", "640", "}", "\n", "self", ".", "t", "=", "t", "\n", "self", ".", "tag", "=", "tag", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "class_num", "=", "7", "if", "tag", "==", "'type'", "else", "4", "\n", "# /raid/wjc/data/ead/endovis2017/training/instrument_dataset_*/frame.png", "\n", "# 8 * 225 frames", "\n", "# 0 for valid and the last 25 of the rest are used for valid", "\n", "\n", "if", "test", ":", "\n", "            ", "self", ".", "images", "=", "[", "[", "j", ",", "i", "]", "for", "j", "in", "range", "(", "1", ",", "9", ")", "for", "i", "in", "range", "(", "225", ",", "300", ")", "]", "+", "[", "[", "j", ",", "i", "]", "for", "j", "in", "range", "(", "9", ",", "11", ")", "for", "i", "in", "range", "(", "300", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "images", "=", "[", "]", "\n", "train_images", "=", "[", "]", "\n", "valid_images", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "4", ")", ":", "\n", "                ", "if", "f", "==", "fold", ":", "\n", "                    ", "valid_images", "+=", "[", "[", "j", ",", "i", "]", "for", "j", "in", "Folds", "[", "f", "]", "for", "i", "in", "range", "(", "225", ")", "]", "\n", "", "else", ":", "\n", "                    ", "train_images", "+=", "[", "[", "j", ",", "i", "]", "for", "j", "in", "Folds", "[", "f", "]", "for", "i", "in", "range", "(", "225", ")", "]", "\n", "", "", "self", ".", "images", "=", "train_images", "if", "self", ".", "split", "==", "'train'", "else", "valid_images", "\n", "", "print", "(", "'Loaded {}frames'", ".", "format", "(", "len", "(", "self", ".", "images", ")", ")", ")", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "images", ")", "\n", "self", ".", "rate", "=", "rate", "\n", "self", ".", "global_n", "=", "global_n", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.dataset.Endovis2017.endovis2017.load_data": [[62, 76], ["numpy.load", "list", "list", "numpy.load", "numpy.load", "numpy.load", "numpy.random.rand", "range", "range"], "methods", ["None"], ["", "def", "load_data", "(", "self", ",", "ins", ",", "frame", ",", "t", "=", "1", ",", "global_n", "=", "0", ")", ":", "\n", "        ", "image", "=", "[", "]", "\n", "if", "global_n", ":", "\n", "            ", "global_images_index", "=", "(", "np", ".", "random", ".", "rand", "(", "global_n", ")", "*", "225", ")", ".", "astype", "(", "'int'", ")", "\n", "image", "+=", "[", "np", ".", "load", "(", "'/raid/wjc/data/ead/endovis2017/training/instrument_dataset_{}/processed_v1/image{:03d}.npy'", ".", "format", "(", "ins", ",", "ind", ")", ")", "for", "ind", "in", "global_images_index", "]", "\n", "", "if", "t", ">", "frame", ":", "\n", "            ", "image", "+=", "list", "(", "[", "np", ".", "load", "(", "'/raid/wjc/data/ead/endovis2017/training/instrument_dataset_{}/processed_v1/image{:03d}.npy'", ".", "format", "(", "ins", ",", "i", ")", ")", "for", "i", "in", "range", "(", "frame", "+", "t", "-", "1", ",", "frame", "-", "1", ",", "-", "1", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "image", "+=", "list", "(", "[", "np", ".", "load", "(", "'/raid/wjc/data/ead/endovis2017/training/instrument_dataset_{}/processed_v1/image{:03d}.npy'", ".", "format", "(", "ins", ",", "i", ")", ")", "for", "i", "in", "range", "(", "frame", "-", "t", "+", "1", ",", "frame", "+", "1", ")", "]", ")", "\n", "", "label", "=", "np", ".", "load", "(", "'/raid/wjc/data/ead/endovis2017/training/instrument_dataset_{}/processed_v1/{}{:03d}.npy'", ".", "format", "(", "ins", ",", "self", ".", "tag", ",", "frame", ")", ")", "\n", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.dataset.Endovis2017.endovis2017.transform": [[77, 110], ["torchvision.transforms.Resize", "list", "list", "torchvision.transforms.RandomCrop.get_params", "list", "list", "random.random", "list", "list", "random.random", "list", "list", "random.random", "torchvision.transforms.Resize.", "torchvision.transforms.Resize.", "torchvision.crop", "torchvision.crop", "int", "int", "torchvision.hflip", "torchvision.hflip", "torchvision.vflip", "torchvision.vflip"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.crop", "home.repos.pwc.inspect_result.jcwang123_dmnet.utils.image.crop"], ["", "def", "transform", "(", "self", ",", "images", ",", "masks", ")", ":", "\n", "# Resize", "\n", "        ", "scale", "=", "random", ".", "random", "(", ")", "*", "0.4", "+", "1", "\n", "resize", "=", "transforms", ".", "Resize", "(", "size", "=", "(", "int", "(", "512", "*", "scale", ")", ",", "int", "(", "640", "*", "scale", ")", ")", ")", "\n", "\n", "\n", "#         image = resize(image)", "\n", "#         mask = resize(mask)", "\n", "images", "=", "list", "(", "[", "resize", "(", "image", ")", "for", "image", "in", "images", "]", ")", "\n", "masks", "=", "list", "(", "[", "resize", "(", "mask", ")", "for", "mask", "in", "masks", "]", ")", "\n", "\n", "\n", "# Random crop", "\n", "i", ",", "j", ",", "h", ",", "w", "=", "transforms", ".", "RandomCrop", ".", "get_params", "(", "\n", "images", "[", "0", "]", ",", "output_size", "=", "(", "512", ",", "640", ")", ")", "\n", "#         image = TF.crop(image, i, j, h, w)", "\n", "#         mask = resize(mask)", "\n", "images", "=", "list", "(", "[", "TF", ".", "crop", "(", "image", ",", "i", ",", "j", ",", "h", ",", "w", ")", "for", "image", "in", "images", "]", ")", "\n", "masks", "=", "list", "(", "[", "TF", ".", "crop", "(", "mask", ",", "i", ",", "j", ",", "h", ",", "w", ")", "for", "mask", "in", "masks", "]", ")", "\n", "\n", "# Random horizontal flipping", "\n", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "#             image = TF.hflip(image)", "\n", "            ", "images", "=", "list", "(", "[", "TF", ".", "hflip", "(", "image", ")", "for", "image", "in", "images", "]", ")", "\n", "masks", "=", "list", "(", "[", "TF", ".", "hflip", "(", "mask", ")", "for", "mask", "in", "masks", "]", ")", "\n", "\n", "# Random vertical flipping", "\n", "", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "#             image = TF.vflip(image)", "\n", "            ", "images", "=", "list", "(", "[", "TF", ".", "vflip", "(", "image", ")", "for", "image", "in", "images", "]", ")", "\n", "masks", "=", "list", "(", "[", "TF", ".", "vflip", "(", "mask", ")", "for", "mask", "in", "masks", "]", ")", "\n", "\n", "", "return", "images", ",", "masks", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.dataset.Endovis2017.endovis2017.__getitem__": [[111, 165], ["Endovis2017.endovis2017.load_data", "numpy.array", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.one_hot().permute", "torch.one_hot().permute", "torch.one_hot().permute", "numpy.unique", "Endovis2017.endovis2017.transform", "numpy.zeros", "range", "numpy.min", "numpy.max", "img2[].transpose", "img2.transpose", "PIL.Image.fromarray", "numpy.asarray", "len", "numpy.asarray", "torch.one_hot", "torch.one_hot", "torch.one_hot", "numpy.uint8", "masks.append", "numpy.zeros.to", "PIL.Image.fromarray", "numpy.uint8"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.dataset.Endovis2017.endovis2017.load_data", "home.repos.pwc.inspect_result.jcwang123_dmnet.dataset.Endovis2017.endovis2017.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "ins", ",", "frame", "=", "self", ".", "images", "[", "index", "]", "\n", "#         print(img_path)", "\n", "#         st = time.perf_counter()", "\n", "imgs", ",", "label", "=", "self", ".", "load_data", "(", "ins", ",", "frame", ",", "self", ".", "t", ",", "global_n", "=", "self", ".", "global_n", ")", "\n", "#         print('Load data:',time.perf_counter()-st)", "\n", "#         st = time.perf_counter()", "\n", "\n", "label", "=", "(", "label", "/", "30", "+", "0.5", ")", ".", "astype", "(", "'int'", ")", "# w * h", "\n", "masks", "=", "[", "]", "\n", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "#             img = Image.fromarray(np.uint8(img))", "\n", "            ", "imgs", "=", "[", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "img", ")", ")", "for", "img", "in", "imgs", "]", "\n", "classes", "=", "np", ".", "unique", "(", "label", ")", "\n", "masks", "=", "[", "]", "\n", "for", "cls", "in", "classes", ":", "\n", "                ", "if", "cls", ":", "\n", "                    ", "masks", ".", "append", "(", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "label", "==", "cls", ")", ")", ")", "\n", "", "", "imgs", ",", "masks", "=", "self", ".", "transform", "(", "imgs", ",", "masks", ")", "\n", "imgs", "=", "[", "np", ".", "asarray", "(", "img", ")", "for", "img", "in", "imgs", "]", "\n", "label", "=", "np", ".", "zeros", "(", "(", "imgs", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "imgs", "[", "0", "]", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "classes", ")", ")", ":", "\n", "                ", "mask", "=", "np", ".", "asarray", "(", "masks", "[", "i", "-", "1", "]", ")", "\n", "label", "[", "mask", ">", "0", "]", "=", "classes", "[", "i", "]", "\n", "#             print('transform data:',time.perf_counter()-st)", "\n", "#             st = time.perf_counter()    ", "\n", "", "", "imgs", "=", "np", ".", "array", "(", "imgs", ")", "\n", "#         print('img2numpy:',time.perf_counter()-st)", "\n", "#         st = time.perf_counter()    ", "\n", "img2", "=", "imgs", "-", "np", ".", "min", "(", "imgs", ")", "\n", "img2", "=", "img2", "/", "np", ".", "max", "(", "img2", ")", "\n", "#         img2 = imgs/255", "\n", "img2", "=", "(", "img2", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "#         print('imgmean:',time.perf_counter()-st)", "\n", "if", "(", "self", ".", "t", "+", "self", ".", "global_n", ")", "==", "1", ":", "\n", "            ", "img", "=", "img2", "[", "0", "]", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# c w h", "\n", "", "else", ":", "\n", "            ", "img", "=", "img2", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# t c w h", "\n", "#         print('Processed:',time.perf_counter()-st)", "\n", "#         st = time.perf_counter()    ", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "#         print('Img2tensor:',time.perf_counter()-st)", "\n", "#         st = time.perf_counter()    ", "\n", "label", "=", "label", "[", ":", ":", "self", ".", "rate", ",", ":", ":", "self", ".", "rate", "]", "\n", "if", "self", ".", "tag", "==", "'part'", ":", "\n", "            ", "label", "[", "label", ">", "self", ".", "class_num", "]", "=", "0", "\n", "", "label", "=", "torch", ".", "from_numpy", "(", "label", ")", "\n", "#         print('Label2tensor:',time.perf_counter()-st)", "\n", "#         st = time.perf_counter()    ", "\n", "label", "=", "F", ".", "one_hot", "(", "label", ".", "to", "(", "torch", ".", "int64", ")", ",", "num_classes", "=", "self", ".", "class_num", "+", "1", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "#         print('final data:',time.perf_counter()-st)", "\n", "return", "{", "'path'", ":", "[", "ins", ",", "frame", "]", ",", "'image'", ":", "img", ",", "'label'", ":", "label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.dataset.Endovis2017.endovis2017.__len__": [[166, 168], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.grouplstm.GroupLSTMCell.__init__": [[13, 38], ["torch.Module.__init__", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "grouplstm.GroupLSTMCell._initialize_weights", "int"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__", "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.EffLA.EffLA._initialize_weights"], ["def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ",", "ac", "=", "'tanh'", ")", ":", "\n", "        ", "super", "(", "GroupLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "hidden_channels", "%", "2", "==", "0", "\n", "\n", "self", ".", "input_channels", "=", "int", "(", "input_channels", ")", "\n", "self", ".", "hidden_channels", "=", "int", "(", "hidden_channels", ")", "\n", "self", ".", "num_features", "=", "4", "\n", "self", ".", "W", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "input_channels", ",", "out_channels", "=", "self", ".", "input_channels", ",", "kernel_size", "=", "3", ",", "groups", "=", "self", ".", "input_channels", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "Wy", "=", "nn", ".", "Conv2d", "(", "int", "(", "self", ".", "input_channels", "+", "self", ".", "hidden_channels", ")", ",", "self", ".", "hidden_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "Wi", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "self", ".", "hidden_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wbi", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wbf", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wbc", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wbo", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "if", "ac", "==", "'tanh'", ":", "\n", "            ", "self", ".", "_activation", "=", "F", ".", "tanh", "\n", "", "else", ":", "\n", "            ", "self", ".", "_activation", "=", "F", ".", "relu", "\n", "\n", "# self.Wci = None", "\n", "# self.Wcf = None", "\n", "# self.Wco = None", "\n", "#         logging.info(\"Initializing weights of lstm\")", "\n", "", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.grouplstm.GroupLSTMCell._initialize_weights": [[39, 52], ["grouplstm.GroupLSTMCell.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            initialized weights of the model\n        \"\"\"", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.grouplstm.GroupLSTMCell.forward": [[53, 73], ["grouplstm.GroupLSTMCell.W", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grouplstm.GroupLSTMCell.Wy", "grouplstm.GroupLSTMCell.Wi", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "grouplstm.GroupLSTMCell.Wbi", "grouplstm.GroupLSTMCell.Wbf", "grouplstm.GroupLSTMCell.Wbo", "grouplstm.GroupLSTMCell._activation", "grouplstm.GroupLSTMCell._activation", "grouplstm.GroupLSTMCell.Wbc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "h", ",", "c", ")", ":", "#implemented as mentioned in paper here the only difference is  Wbi, Wbf, Wbc & Wbo are commuted all together in paper", "\n", "        ", "\"\"\"\n        Arguments:\n            x : input tensor\n            h : hidden state tensor\n            c : cell state tensor\n        Returns:\n            output tensor after LSTM cell \n        \"\"\"", "\n", "x", "=", "self", ".", "W", "(", "x", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "x", ",", "h", ")", ",", "1", ")", "#concatenate input and hidden layers", "\n", "i", "=", "self", ".", "Wy", "(", "y", ")", "#reduce to hidden layer size", "\n", "b", "=", "self", ".", "Wi", "(", "i", ")", "#depth wise 3*3", "\n", "ci", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wbi", "(", "b", ")", ")", "\n", "cf", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wbf", "(", "b", ")", ")", "\n", "cc", "=", "cf", "*", "c", "+", "ci", "*", "self", ".", "_activation", "(", "self", ".", "Wbc", "(", "b", ")", ")", "\n", "co", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wbo", "(", "b", ")", ")", "\n", "ch", "=", "co", "*", "self", ".", "_activation", "(", "cc", ")", "\n", "o", "=", "ch", "+", "cc", "\n", "return", "o", ",", "ch", ",", "cc", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.grouplstm.GroupLSTMCell.init_hidden": [[74, 92], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ",", "hidden", ",", "shape", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            batch_size : an int variable having value of batch size while training\n            hidden : an int variable having value of number of channels in hidden state\n            shape : an array containing shape of the hidden and cell state \n        Returns:\n            cell state and hidden state\n        \"\"\"", "\n", "# if self.Wci is None:", "\n", "#     self.Wci = Variable(torch.zeros(1, hidden, shape[0], shape[1])).cuda()", "\n", "#     self.Wcf = Variable(torch.zeros(1, hidden, shape[0], shape[1])).cuda()", "\n", "#     self.Wco = Variable(torch.zeros(1, hidden, shape[0], shape[1])).cuda()", "\n", "# else:", "\n", "#     assert shape[0] == self.Wci.size()[2], 'Input Height Mismatched!'", "\n", "#     assert shape[1] == self.Wci.size()[3], 'Input Width Mismatched!'", "\n", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.grouplstm.GroupLSTM.__init__": [[95, 112], ["torch.Module.__init__", "int", "int", "grouplstm.GroupLSTMCell"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ",", "height", ",", "width", ",", "group", ")", ":", "\n", "        ", "\"\"\" Creates Bottleneck LSTM layer\n        Arguments:\n            input_channels : variable having value of number of channels of input to this layer\n            hidden_channels : variable having value of number of channels of hidden state of this layer\n            height : an int variable having value of height of the input\n            width : an int variable having value of width of the input\n            batch_size : an int variable having value of batch_size of the input\n        Returns:\n            Output tensor of LSTM layer\n        \"\"\"", "\n", "super", "(", "GroupLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "input_channels", "%", "group", "==", "0", "and", "hidden_channels", "%", "group", "==", "0", "\n", "self", ".", "input_channels", "=", "int", "(", "input_channels", ")", "\n", "self", ".", "hidden_channels", "=", "int", "(", "hidden_channels", ")", "\n", "self", ".", "group", "=", "group", "\n", "self", ".", "cell", "=", "GroupLSTMCell", "(", "self", ".", "input_channels", "//", "self", ".", "group", ",", "self", ".", "hidden_channels", "//", "self", ".", "group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.grouplstm.GroupLSTM.forward": [[117, 135], ["input.size", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "grouplstm.GroupLSTM.cell.init_hidden", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat.append", "torch.cat.append", "torch.cat.append", "grouplstm.GroupLSTM.cell", "output_inner.append"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstmv2.ConvLSTMCell.init_hidden"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "#         new_h, new_c = self.cell(input, self.hidden_state, self.cell_state)", "\n", "#         self.hidden_state = new_h", "\n", "#         self.cell_state = new_c", "\n", "        ", "batch_size", ",", "seq_len", ",", "channels", ",", "height", ",", "width", "=", "input", ".", "size", "(", ")", "\n", "split_inputs", "=", "torch", ".", "split", "(", "input", ",", "channels", "//", "self", ".", "group", ",", "dim", "=", "2", ")", "\n", "outputs", "=", "[", "]", "\n", "for", "split_input", "in", "split_inputs", ":", "\n", "            ", "h", ",", "c", "=", "self", ".", "cell", ".", "init_hidden", "(", "batch_size", ",", "hidden", "=", "self", ".", "hidden_channels", "//", "self", ".", "group", ",", "shape", "=", "(", "height", ",", "width", ")", ")", "\n", "#         h, c = self.cell(input[:,0], self.hidden_state, self.cell_state)", "\n", "output_inner", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "seq_len", ")", ":", "\n", "                ", "o", ",", "h", ",", "c", "=", "self", ".", "cell", "(", "split_input", "[", ":", ",", "t", ",", ":", ",", ":", ",", ":", "]", ",", "h", ",", "c", ")", "\n", "output_inner", ".", "append", "(", "o", ")", "\n", "", "layer_output", "=", "torch", ".", "stack", "(", "output_inner", ",", "dim", "=", "1", ")", "\n", "outputs", ".", "append", "(", "layer_output", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "outputs", ",", "dim", "=", "1", ")", "\n", "return", "layer_output", "", "", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.bottlenecklstm.BottleneckLSTMCell.__init__": [[13, 35], ["torch.Module.__init__", "int", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "bottlenecklstm.BottleneckLSTMCell._initialize_weights", "int"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__", "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.EffLA.EffLA._initialize_weights"], ["def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ")", ":", "\n", "        ", "super", "(", "BottleneckLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "hidden_channels", "%", "2", "==", "0", "\n", "\n", "self", ".", "input_channels", "=", "int", "(", "input_channels", ")", "\n", "self", ".", "hidden_channels", "=", "int", "(", "hidden_channels", ")", "\n", "self", ".", "num_features", "=", "4", "\n", "self", ".", "W", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "input_channels", ",", "out_channels", "=", "self", ".", "input_channels", ",", "kernel_size", "=", "3", ",", "groups", "=", "self", ".", "input_channels", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "Wy", "=", "nn", ".", "Conv2d", "(", "int", "(", "self", ".", "input_channels", "+", "self", ".", "hidden_channels", ")", ",", "self", ".", "hidden_channels", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "Wi", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "3", ",", "1", ",", "1", ",", "groups", "=", "self", ".", "hidden_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wbi", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wbf", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wbc", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wbo", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "ac", "=", "nn", ".", "ReLU6", "(", ")", "\n", "\n", "# self.Wci = None", "\n", "# self.Wcf = None", "\n", "# self.Wco = None", "\n", "#         logging.info(\"Initializing weights of lstm\")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.bottlenecklstm.BottleneckLSTMCell._initialize_weights": [[36, 49], ["bottlenecklstm.BottleneckLSTMCell.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            initialized weights of the model\n        \"\"\"", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.bottlenecklstm.BottleneckLSTMCell.forward": [[50, 69], ["bottlenecklstm.BottleneckLSTMCell.W", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "bottlenecklstm.BottleneckLSTMCell.Wy", "bottlenecklstm.BottleneckLSTMCell.Wi", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "bottlenecklstm.BottleneckLSTMCell.Wbi", "bottlenecklstm.BottleneckLSTMCell.Wbf", "bottlenecklstm.BottleneckLSTMCell.Wbo", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "bottlenecklstm.BottleneckLSTMCell.Wbc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "h", ",", "c", ")", ":", "#implemented as mentioned in paper here the only difference is  Wbi, Wbf, Wbc & Wbo are commuted all together in paper", "\n", "        ", "\"\"\"\n        Arguments:\n            x : input tensor\n            h : hidden state tensor\n            c : cell state tensor\n        Returns:\n            output tensor after LSTM cell \n        \"\"\"", "\n", "x", "=", "self", ".", "W", "(", "x", ")", "\n", "y", "=", "torch", ".", "cat", "(", "(", "x", ",", "h", ")", ",", "1", ")", "#concatenate input and hidden layers", "\n", "i", "=", "self", ".", "Wy", "(", "y", ")", "#reduce to hidden layer size", "\n", "b", "=", "self", ".", "Wi", "(", "i", ")", "#depth wise 3*3", "\n", "ci", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wbi", "(", "b", ")", ")", "\n", "cf", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wbf", "(", "b", ")", ")", "\n", "cc", "=", "cf", "*", "c", "+", "ci", "*", "F", ".", "tanh", "(", "self", ".", "Wbc", "(", "b", ")", ")", "\n", "co", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wbo", "(", "b", ")", ")", "\n", "ch", "=", "co", "*", "F", ".", "tanh", "(", "cc", ")", "\n", "return", "ch", ",", "cc", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.bottlenecklstm.BottleneckLSTMCell.init_hidden": [[70, 88], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ",", "hidden", ",", "shape", ")", ":", "\n", "        ", "\"\"\"\n        Arguments:\n            batch_size : an int variable having value of batch size while training\n            hidden : an int variable having value of number of channels in hidden state\n            shape : an array containing shape of the hidden and cell state \n        Returns:\n            cell state and hidden state\n        \"\"\"", "\n", "# if self.Wci is None:", "\n", "#     self.Wci = Variable(torch.zeros(1, hidden, shape[0], shape[1])).cuda()", "\n", "#     self.Wcf = Variable(torch.zeros(1, hidden, shape[0], shape[1])).cuda()", "\n", "#     self.Wco = Variable(torch.zeros(1, hidden, shape[0], shape[1])).cuda()", "\n", "# else:", "\n", "#     assert shape[0] == self.Wci.size()[2], 'Input Height Mismatched!'", "\n", "#     assert shape[1] == self.Wci.size()[3], 'Input Width Mismatched!'", "\n", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.bottlenecklstm.BottleneckLSTM.__init__": [[91, 106], ["torch.Module.__init__", "int", "int", "bottlenecklstm.BottleneckLSTMCell"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ",", "height", ",", "width", ")", ":", "\n", "        ", "\"\"\" Creates Bottleneck LSTM layer\n        Arguments:\n            input_channels : variable having value of number of channels of input to this layer\n            hidden_channels : variable having value of number of channels of hidden state of this layer\n            height : an int variable having value of height of the input\n            width : an int variable having value of width of the input\n            batch_size : an int variable having value of batch_size of the input\n        Returns:\n            Output tensor of LSTM layer\n        \"\"\"", "\n", "super", "(", "BottleneckLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_channels", "=", "int", "(", "input_channels", ")", "\n", "self", ".", "hidden_channels", "=", "int", "(", "hidden_channels", ")", "\n", "self", ".", "cell", "=", "BottleneckLSTMCell", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.bottlenecklstm.BottleneckLSTM.forward": [[111, 124], ["input.size", "bottlenecklstm.BottleneckLSTM.cell.init_hidden", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "bottlenecklstm.BottleneckLSTM.cell", "output_inner.append"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstmv2.ConvLSTMCell.init_hidden"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "#         new_h, new_c = self.cell(input, self.hidden_state, self.cell_state)", "\n", "#         self.hidden_state = new_h", "\n", "#         self.cell_state = new_c", "\n", "        ", "batch_size", ",", "seq_len", ",", "_", ",", "height", ",", "width", "=", "input", ".", "size", "(", ")", "\n", "h", ",", "c", "=", "self", ".", "cell", ".", "init_hidden", "(", "batch_size", ",", "hidden", "=", "self", ".", "hidden_channels", ",", "shape", "=", "(", "height", ",", "width", ")", ")", "\n", "#         h, c = self.cell(input[:,0], self.hidden_state, self.cell_state)", "\n", "output_inner", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "seq_len", ")", ":", "\n", "            ", "h", ",", "c", "=", "self", ".", "cell", "(", "input", "[", ":", ",", "t", ",", ":", ",", ":", ",", ":", "]", ",", "h", ",", "c", ")", "\n", "output_inner", ".", "append", "(", "h", ")", "\n", "", "layer_output", "=", "torch", ".", "stack", "(", "output_inner", ",", "dim", "=", "1", ")", "\n", "return", "layer_output", "", "", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstm.ConvLSTMCell.__init__": [[8, 39], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "input_dim", ",", "hidden_dim", ",", "kernel_size", ",", "bias", ")", ":", "\n", "        ", "\"\"\"\n        Initialize ConvLSTM cell.\n        Parameters\n        ----------\n        input_size: (int, int)\n            Height and width of input tensor as (height, width).\n        input_dim: int\n            Number of channels of input tensor.\n        hidden_dim: int\n            Number of channels of hidden state.\n        kernel_size: (int, int)\n            Size of the convolutional kernel.\n        bias: bool\n            Whether or not to add the bias.\n        \"\"\"", "\n", "super", "(", "ConvLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "height", ",", "self", ".", "width", "=", "input_size", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding", "=", "kernel_size", "[", "0", "]", "//", "2", ",", "kernel_size", "[", "1", "]", "//", "2", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "self", ".", "input_dim", "+", "self", ".", "hidden_dim", ",", "\n", "out_channels", "=", "4", "*", "self", ".", "hidden_dim", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstm.ConvLSTMCell.forward": [[40, 56], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_convlstm.ConvLSTMCell.conv", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "prev_state", ")", ":", "\n", "        ", "h_prev", ",", "c_prev", "=", "prev_state", "\n", "combined", "=", "torch", ".", "cat", "(", "(", "input", ",", "h_prev", ")", ",", "dim", "=", "1", ")", "# concatenate along channel axis", "\n", "\n", "combined_conv", "=", "self", ".", "conv", "(", "combined", ")", "\n", "cc_i", ",", "cc_f", ",", "cc_o", ",", "cc_g", "=", "torch", ".", "split", "(", "combined_conv", ",", "self", ".", "hidden_dim", ",", "dim", "=", "1", ")", "\n", "\n", "i", "=", "F", ".", "sigmoid", "(", "cc_i", ")", "\n", "f", "=", "F", ".", "sigmoid", "(", "cc_f", ")", "\n", "o", "=", "F", ".", "sigmoid", "(", "cc_o", ")", "\n", "g", "=", "F", ".", "tanh", "(", "cc_g", ")", "\n", "\n", "c_cur", "=", "f", "*", "c_prev", "+", "i", "*", "g", "\n", "h_cur", "=", "o", "*", "F", ".", "tanh", "(", "c_cur", ")", "\n", "\n", "return", "h_cur", ",", "c_cur", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstm.ConvLSTMCell.init_hidden": [[57, 63], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "state[].cuda", "state[].cuda"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "state", "=", "(", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "hidden_dim", ",", "self", ".", "height", ",", "self", ".", "width", ")", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "self", ".", "hidden_dim", ",", "self", ".", "height", ",", "self", ".", "width", ")", ")", ")", "\n", "if", "cuda", ":", "\n", "            ", "state", "=", "(", "state", "[", "0", "]", ".", "cuda", "(", ")", ",", "state", "[", "1", "]", ".", "cuda", "(", ")", ")", "\n", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstm.ConvLSTM.__init__": [[66, 99], ["torch.Module.__init__", "torch_convlstm.ConvLSTM._check_kernel_size_consistency", "torch_convlstm.ConvLSTM._extend_for_multilayer", "torch_convlstm.ConvLSTM._extend_for_multilayer", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ValueError", "cell_list.append", "len", "len", "torch_convlstm.ConvLSTMCell"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__", "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstm.ConvLSTM._check_kernel_size_consistency", "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstm.ConvLSTM._extend_for_multilayer", "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstm.ConvLSTM._extend_for_multilayer"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "input_dim", ",", "hidden_dim", ",", "kernel_size", ",", "num_layers", ",", "\n", "batch_first", "=", "False", ",", "bias", "=", "True", ",", "return_all_layers", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_check_kernel_size_consistency", "(", "kernel_size", ")", "\n", "\n", "# Make sure that both `kernel_size` and `hidden_dim` are lists having len == num_layers", "\n", "kernel_size", "=", "self", ".", "_extend_for_multilayer", "(", "kernel_size", ",", "num_layers", ")", "\n", "hidden_dim", "=", "self", ".", "_extend_for_multilayer", "(", "hidden_dim", ",", "num_layers", ")", "\n", "if", "not", "len", "(", "kernel_size", ")", "==", "len", "(", "hidden_dim", ")", "==", "num_layers", ":", "\n", "            ", "raise", "ValueError", "(", "'Inconsistent list length.'", ")", "\n", "\n", "", "self", ".", "height", ",", "self", ".", "width", "=", "input_size", "\n", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "return_all_layers", "=", "return_all_layers", "\n", "\n", "cell_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_layers", ")", ":", "\n", "            ", "cur_input_dim", "=", "self", ".", "input_dim", "if", "i", "==", "0", "else", "self", ".", "hidden_dim", "[", "i", "-", "1", "]", "\n", "\n", "cell_list", ".", "append", "(", "ConvLSTMCell", "(", "input_size", "=", "(", "self", ".", "height", ",", "self", ".", "width", ")", ",", "\n", "input_dim", "=", "cur_input_dim", ",", "\n", "hidden_dim", "=", "self", ".", "hidden_dim", "[", "i", "]", ",", "\n", "kernel_size", "=", "self", ".", "kernel_size", "[", "i", "]", ",", "\n", "bias", "=", "self", ".", "bias", ")", ")", "\n", "\n", "", "self", ".", "cell_list", "=", "nn", ".", "ModuleList", "(", "cell_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstm.ConvLSTM.forward": [[100, 148], ["input.permute.permute.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "input.permute.permute.permute", "torch_convlstm.ConvLSTM.get_init_states", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "layer_output_list.append", "last_state_list.append", "layer_output.permute.permute.permute", "output_inner.append", "input.permute.permute.size"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstm.ConvLSTM.get_init_states"], ["", "def", "forward", "(", "self", ",", "input", ",", "hidden_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        input_tensor: todo\n            5-D Tensor either of shape (t, b, c, h, w) or (b, t, c, h, w)\n        hidden_state: todo\n            None. todo implement stateful\n        Returns\n        -------\n        last_state_list, layer_output\n        \"\"\"", "\n", "if", "not", "self", ".", "batch_first", ":", "\n", "# (t, b, c, h, w) -> (b, t, c, h, w)", "\n", "            ", "input", "=", "input", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "\n", "\n", "", "if", "hidden_state", "is", "None", ":", "\n", "            ", "hidden_state", "=", "self", ".", "get_init_states", "(", "batch_size", "=", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "layer_output_list", "=", "[", "]", "\n", "last_state_list", "=", "[", "]", "\n", "\n", "seq_len", "=", "input", ".", "size", "(", "1", ")", "\n", "cur_layer_input", "=", "input", "\n", "\n", "for", "layer_idx", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "h", ",", "c", "=", "hidden_state", "[", "layer_idx", "]", "\n", "output_inner", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "seq_len", ")", ":", "\n", "                ", "h", ",", "c", "=", "self", ".", "cell_list", "[", "layer_idx", "]", "(", "input", "=", "cur_layer_input", "[", ":", ",", "t", ",", ":", ",", ":", ",", ":", "]", ",", "\n", "prev_state", "=", "[", "h", ",", "c", "]", ")", "\n", "output_inner", ".", "append", "(", "h", ")", "\n", "\n", "", "layer_output", "=", "torch", ".", "stack", "(", "output_inner", ",", "dim", "=", "1", ")", "\n", "# #             print(layer_output.size())", "\n", "#             return layer_output", "\n", "cur_layer_input", "=", "layer_output", "\n", "\n", "layer_output_list", ".", "append", "(", "layer_output", ")", "\n", "last_state_list", ".", "append", "(", "(", "h", ",", "c", ")", ")", "\n", "\n", "\n", "", "layer_output", "=", "torch", ".", "cat", "(", "layer_output_list", ",", "dim", "=", "1", ")", "\n", "if", "not", "self", ".", "batch_first", ":", "\n", "            ", "layer_output", "=", "layer_output", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "\n", "", "return", "layer_output", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstm.ConvLSTM.get_init_states": [[149, 154], ["range", "init_states.append", "torch_convlstm.ConvLSTM.cell_list[].init_hidden"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstmv2.ConvLSTMCell.init_hidden"], ["", "def", "get_init_states", "(", "self", ",", "batch_size", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "init_states", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "init_states", ".", "append", "(", "self", ".", "cell_list", "[", "i", "]", ".", "init_hidden", "(", "batch_size", ",", "cuda", ")", ")", "\n", "", "return", "init_states", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstm.ConvLSTM._check_kernel_size_consistency": [[155, 160], ["ValueError", "isinstance", "isinstance", "all", "isinstance"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_check_kernel_size_consistency", "(", "kernel_size", ")", ":", "\n", "        ", "if", "not", "(", "isinstance", "(", "kernel_size", ",", "tuple", ")", "or", "\n", "(", "isinstance", "(", "kernel_size", ",", "list", ")", "and", "all", "(", "[", "isinstance", "(", "elem", ",", "tuple", ")", "for", "elem", "in", "kernel_size", "]", ")", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'`kernel_size` must be tuple or list of tuples'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstm.ConvLSTM._extend_for_multilayer": [[161, 166], ["isinstance"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_extend_for_multilayer", "(", "param", ",", "num_layers", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "param", ",", "list", ")", ":", "\n", "            ", "param", "=", "[", "param", "]", "*", "num_layers", "\n", "", "return", "param", "", "", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstmv2.ConvLSTMCell.__init__": [[8, 32], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ",", "kernel_size", ")", ":", "\n", "        ", "super", "(", "ConvLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "hidden_channels", "%", "2", "==", "0", "\n", "\n", "self", ".", "input_channels", "=", "input_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_features", "=", "4", "\n", "\n", "self", ".", "padding", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "/", "2", ")", "\n", "\n", "self", ".", "Wxi", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Whi", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wxf", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Whf", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wxc", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Whc", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wxo", "=", "nn", ".", "Conv2d", "(", "self", ".", "input_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "True", ")", "\n", "self", ".", "Who", "=", "nn", ".", "Conv2d", "(", "self", ".", "hidden_channels", ",", "self", ".", "hidden_channels", ",", "self", ".", "kernel_size", ",", "1", ",", "self", ".", "padding", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "Wci", "=", "None", "\n", "self", ".", "Wcf", "=", "None", "\n", "self", ".", "Wco", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstmv2.ConvLSTMCell.forward": [[33, 40], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch_convlstmv2.ConvLSTMCell.Wxi", "torch_convlstmv2.ConvLSTMCell.Whi", "torch_convlstmv2.ConvLSTMCell.Wxf", "torch_convlstmv2.ConvLSTMCell.Whf", "torch_convlstmv2.ConvLSTMCell.Wxo", "torch_convlstmv2.ConvLSTMCell.Who", "torch_convlstmv2.ConvLSTMCell.Wxc", "torch_convlstmv2.ConvLSTMCell.Whc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "h", ",", "c", ")", ":", "\n", "        ", "ci", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wxi", "(", "x", ")", "+", "self", ".", "Whi", "(", "h", ")", "+", "c", "*", "self", ".", "Wci", ")", "\n", "cf", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wxf", "(", "x", ")", "+", "self", ".", "Whf", "(", "h", ")", "+", "c", "*", "self", ".", "Wcf", ")", "\n", "cc", "=", "cf", "*", "c", "+", "ci", "*", "torch", ".", "tanh", "(", "self", ".", "Wxc", "(", "x", ")", "+", "self", ".", "Whc", "(", "h", ")", ")", "\n", "co", "=", "torch", ".", "sigmoid", "(", "self", ".", "Wxo", "(", "x", ")", "+", "self", ".", "Who", "(", "h", ")", "+", "cc", "*", "self", ".", "Wco", ")", "\n", "ch", "=", "co", "*", "torch", ".", "tanh", "(", "cc", ")", "\n", "return", "ch", ",", "cc", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstmv2.ConvLSTMCell.init_hidden": [[41, 51], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch_convlstmv2.ConvLSTMCell.Wci.size", "torch_convlstmv2.ConvLSTMCell.Wci.size", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "init_hidden", "(", "self", ",", "batch_size", ",", "hidden", ",", "shape", ")", ":", "\n", "        ", "if", "self", ".", "Wci", "is", "None", ":", "\n", "            ", "self", ".", "Wci", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "Wcf", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "Wco", "=", "Variable", "(", "torch", ".", "zeros", "(", "1", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "shape", "[", "0", "]", "==", "self", ".", "Wci", ".", "size", "(", ")", "[", "2", "]", ",", "'Input Height Mismatched!'", "\n", "assert", "shape", "[", "1", "]", "==", "self", ".", "Wci", ".", "size", "(", ")", "[", "3", "]", ",", "'Input Width Mismatched!'", "\n", "", "return", "(", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", ",", "\n", "Variable", "(", "torch", ".", "zeros", "(", "batch_size", ",", "hidden", ",", "shape", "[", "0", "]", ",", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstmv2.ConvLSTM.__init__": [[56, 70], ["torch.Module.__init__", "len", "range", "torch_convlstmv2.ConvLSTMCell", "setattr", "torch_convlstmv2.ConvLSTM._all_layers.append"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channels", ",", "hidden_channels", ",", "kernel_size", ",", "step", "=", "1", ",", "effective_step", "=", "[", "1", "]", ")", ":", "\n", "        ", "super", "(", "ConvLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_channels", "=", "[", "input_channels", "]", "+", "hidden_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_layers", "=", "len", "(", "hidden_channels", ")", "\n", "self", ".", "step", "=", "step", "\n", "self", ".", "effective_step", "=", "effective_step", "\n", "self", ".", "_all_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "name", "=", "'cell{}'", ".", "format", "(", "i", ")", "\n", "cell", "=", "ConvLSTMCell", "(", "self", ".", "input_channels", "[", "i", "]", ",", "self", ".", "hidden_channels", "[", "i", "]", ",", "self", ".", "kernel_size", ")", "\n", "setattr", "(", "self", ",", "name", ",", "cell", ")", "\n", "self", ".", "_all_layers", ".", "append", "(", "cell", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstmv2.ConvLSTM.forward": [[71, 94], ["range", "range", "outputs.append", "x.size", "getattr().init_hidden", "internal_state.append", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.LSTM.torch_convlstmv2.ConvLSTMCell.init_hidden"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "internal_state", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "for", "step", "in", "range", "(", "self", ".", "step", ")", ":", "\n", "            ", "x", "=", "input", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "# all cells are initialized in the first step", "\n", "                ", "name", "=", "'cell{}'", ".", "format", "(", "i", ")", "\n", "if", "step", "==", "0", ":", "\n", "                    ", "bsize", ",", "_", ",", "height", ",", "width", "=", "x", ".", "size", "(", ")", "\n", "(", "h", ",", "c", ")", "=", "getattr", "(", "self", ",", "name", ")", ".", "init_hidden", "(", "batch_size", "=", "bsize", ",", "hidden", "=", "self", ".", "hidden_channels", "[", "i", "]", ",", "\n", "shape", "=", "(", "height", ",", "width", ")", ")", "\n", "internal_state", ".", "append", "(", "(", "h", ",", "c", ")", ")", "\n", "\n", "# do forward", "\n", "", "(", "h", ",", "c", ")", "=", "internal_state", "[", "i", "]", "\n", "x", ",", "new_c", "=", "getattr", "(", "self", ",", "name", ")", "(", "x", ",", "h", ",", "c", ")", "\n", "internal_state", "[", "i", "]", "=", "(", "x", ",", "new_c", ")", "\n", "# only record effective steps", "\n", "", "if", "step", "in", "self", ".", "effective_step", ":", "\n", "                ", "outputs", ".", "append", "(", "x", ")", "\n", "\n", "", "", "return", "outputs", ",", "(", "x", ",", "new_c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.base.TemporalNet.__init__": [[18, 23], ["torch.Module.__init__", "MobileEncoder", "RefineDecoder", "TimeProcesser"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "batch_size", ",", "tag", ",", "group", ")", ":", "\n", "        ", "super", "(", "TemporalNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "MobileEncoder", "(", ")", "\n", "self", ".", "decoder", "=", "RefineDecoder", "(", "num_classes", ")", "\n", "self", ".", "lstm", "=", "TimeProcesser", "(", "256", ",", "256", ",", "(", "16", ",", "20", ")", ",", "batch_size", ",", "tag", ",", "group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.base.TemporalNet.forward": [[24, 40], ["time.perf_counter", "x.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "base.TemporalNet.decoder", "base.TemporalNet.encoder", "seq.append", "base.TemporalNet.lstm", "tensor[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "b", ",", "t", ",", "_", ",", "w", ",", "h", "=", "x", ".", "size", "(", ")", "#", "\n", "\n", "seq", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "t", ")", ":", "\n", "            ", "tensor", "=", "self", ".", "encoder", "(", "x", "[", ":", ",", "i", "]", ")", "\n", "seq", ".", "append", "(", "tensor", "[", "-", "1", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "tem", "=", "torch", ".", "cat", "(", "seq", ",", "dim", "=", "1", ")", "# b,t,c,w,h", "\n", "\n", "temporal_output", "=", "self", ".", "lstm", "(", "tem", ")", "[", ":", ",", "-", "1", "]", "\n", "\n", "tensor", "[", "-", "1", "]", "=", "temporal_output", "\n", "out_segm", "=", "self", ".", "decoder", "(", "tensor", ")", "\n", "return", "out_segm", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.base.TemporalNet._initialize_weights": [[41, 50], ["base.TemporalNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.SpNet.SPNet.__init__": [[17, 25], ["torch.Module.__init__", "Memory", "MobileEncoder", "RefineDecoder"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "global_n", ",", "spatial_layer", ")", ":", "\n", "        ", "super", "(", "SPNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "c", "=", "256", "if", "spatial_layer", "==", "-", "1", "else", "96", "\n", "self", ".", "memory", "=", "Memory", "(", "c", ")", "\n", "self", ".", "global_n", "=", "global_n", "\n", "self", ".", "encoder", "=", "MobileEncoder", "(", ")", "\n", "self", ".", "decoder", "=", "RefineDecoder", "(", "num_classes", ")", "\n", "self", ".", "spatial_layer", "=", "spatial_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.SpNet.SPNet.forward": [[26, 46], ["time.perf_counter", "x.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "SpNet.SPNet.decoder", "SpNet.SPNet.encoder", "torch.cat.append", "torch.cat.append", "torch.cat.append", "SpNet.SPNet.memory", "tensor[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "b", ",", "t", ",", "_", ",", "w", ",", "h", "=", "x", ".", "size", "(", ")", "\n", "\n", "seq", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "t", ")", ":", "\n", "            ", "tensor", "=", "self", ".", "encoder", "(", "x", "[", ":", ",", "i", "]", ")", "\n", "seq", ".", "append", "(", "tensor", "[", "self", ".", "spatial_layer", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "seq", "=", "torch", ".", "cat", "(", "seq", ",", "dim", "=", "1", ")", "\n", "\n", "global_context", "=", "seq", "[", ":", ",", ":", "-", "1", "]", "\n", "current_context", "=", "seq", "[", ":", ",", "-", "1", "]", "\n", "if", "self", ".", "global_n", ">", "0", ":", "\n", "            ", "st_outputs", ",", "st_p", "=", "self", ".", "memory", "(", "global_context", ",", "current_context", ")", "\n", "", "else", ":", "\n", "            ", "st_outputs", "=", "current_context", "\n", "", "tensor", "[", "self", ".", "spatial_layer", "]", "=", "st_outputs", "\n", "out_segm", "=", "self", ".", "decoder", "(", "tensor", ")", "\n", "return", "out_segm", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.SpNet.SPNet._initialize_weights": [[47, 56], ["SpNet.SPNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.SpNet.spnet": [[58, 79], ["SpNet.SPNet", "SPNet.load_state_dict", "net.utils.helpers.maybe_download", "data_info.get", "SPNet.load_state_dict", "data_info.get.lower", "net.utils.helpers.maybe_download"], "function", ["None"], ["", "", "", "", "def", "spnet", "(", "num_classes", ",", "imagenet", "=", "False", ",", "pretrained", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs the network.\n\n    Args:\n\n        num_classes (int): the number of classes for the segmentation head to output.\n\n    \"\"\"", "\n", "model", "=", "SPNet", "(", "num_classes", ",", "**", "kwargs", ")", "\n", "if", "imagenet", ":", "\n", "        ", "key", "=", "\"mbv2_imagenet\"", "\n", "url", "=", "models_urls", "[", "key", "]", "\n", "model", ".", "load_state_dict", "(", "maybe_download", "(", "key", ",", "url", ")", ",", "strict", "=", "False", ")", "\n", "", "elif", "pretrained", ":", "\n", "        ", "dataset", "=", "data_info", ".", "get", "(", "num_classes", ",", "None", ")", "\n", "if", "dataset", ":", "\n", "            ", "bname", "=", "\"mbv2_\"", "+", "dataset", ".", "lower", "(", ")", "\n", "key", "=", "\"rf_lw\"", "+", "bname", "\n", "url", "=", "models_urls", "[", "bname", "]", "\n", "model", ".", "load_state_dict", "(", "maybe_download", "(", "key", ",", "url", ")", ",", "strict", "=", "False", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.DMNet.DMNet.__init__": [[13, 29], ["torch.Module.__init__", "MobileEncoder", "RefineDecoder", "TimeProcesser", "Memory"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_classes", ",", "\n", "batch_size", ",", "\n", "tag", ",", "\n", "group", ",", "\n", "t", ",", "\n", "global_n", ",", "\n", "fusion_type", "=", "'tandem'", ")", ":", "\n", "        ", "super", "(", "DMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "MobileEncoder", "(", ")", "\n", "self", ".", "decoder", "=", "RefineDecoder", "(", "num_classes", ")", "\n", "self", ".", "lstm", "=", "TimeProcesser", "(", "256", ",", "256", ",", "(", "16", ",", "20", ")", ",", "batch_size", ",", "tag", ",", "group", ")", "\n", "self", ".", "memory", "=", "Memory", "(", "256", ")", "\n", "self", ".", "t", "=", "t", "\n", "self", ".", "g", "=", "global_n", "\n", "self", ".", "ft", "=", "fusion_type", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.DMNet.DMNet.forward": [[30, 63], ["time.perf_counter", "x.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "DMNet.DMNet.decoder", "DMNet.DMNet.encoder", "seq.append", "DMNet.DMNet.encoder", "seq.append", "DMNet.DMNet.memory", "DMNet.DMNet.memory", "tensor[].unsqueeze", "tensor[].unsqueeze", "DMNet.DMNet.lstm", "DMNet.DMNet.lstm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "g", "=", "self", ".", "g", "\n", "t", "=", "self", ".", "t", "\n", "b", ",", "n", ",", "_", ",", "w", ",", "h", "=", "x", ".", "size", "(", ")", "#", "\n", "assert", "self", ".", "g", "+", "self", ".", "t", "==", "n", "\n", "\n", "seq", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "g", ")", ":", "\n", "            ", "tensor", "=", "self", ".", "encoder", "(", "x", "[", ":", ",", "i", "]", ")", "\n", "seq", ".", "append", "(", "tensor", "[", "-", "1", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "global_mem", "=", "torch", ".", "cat", "(", "seq", ",", "dim", "=", "1", ")", "# b,g,c,w,h", "\n", "\n", "seq", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "g", ",", "n", ")", ":", "\n", "            ", "tensor", "=", "self", ".", "encoder", "(", "x", "[", ":", ",", "i", "]", ")", "\n", "seq", ".", "append", "(", "tensor", "[", "-", "1", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "local_mem", "=", "torch", ".", "cat", "(", "seq", ",", "dim", "=", "1", ")", "# b,g,c,w,h", "\n", "\n", "if", "self", ".", "ft", "==", "'tandem'", ":", "\n", "            ", "local_output", "=", "self", ".", "lstm", "(", "local_mem", ")", "[", ":", ",", "-", "1", "]", "\n", "final_output", ",", "gdst_p", "=", "self", ".", "memory", "(", "global_mem", ",", "local_output", ")", "\n", "", "else", ":", "\n", "            ", "local_output", "=", "self", ".", "lstm", "(", "local_mem", ")", "[", ":", ",", "-", "1", "]", "\n", "global_output", ",", "_", "=", "self", ".", "memory", "(", "global_mem", ",", "local_mem", "[", ":", ",", "-", "1", "]", ")", "\n", "if", "self", ".", "ft", "==", "'add'", ":", "\n", "                ", "final_output", "=", "global_output", "+", "local_output", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "tensor", "[", "-", "1", "]", "=", "final_output", "\n", "out_segm", "=", "self", ".", "decoder", "(", "tensor", ")", "\n", "return", "out_segm", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.DMNet.DMNet._initialize_weights": [[64, 73], ["DMNet.DMNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.TimeProcesser.__init__": [[25, 50], ["torch.Module.__init__", "net.utils.layer_factory.conv1x1", "net.LSTM.torch_convlstm.ConvLSTM", "net.LSTM.bottlenecklstm.BottleneckLSTM", "net.LSTM.grouplstm.GroupLSTM"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "size", ",", "batch_size", ",", "tag", ",", "group", "=", "1", ")", ":", "\n", "        ", "super", "(", "TimeProcesser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "inplanes", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "tag", "=", "tag", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "if", "not", "inplanes", "==", "planes", ":", "\n", "            ", "self", ".", "refine", "=", "conv1x1", "(", "planes", ",", "inplanes", ")", "\n", "", "if", "self", ".", "tag", "==", "'convlstm'", ":", "\n", "            ", "self", ".", "processer", "=", "ConvLSTM", "(", "input_size", "=", "size", ",", "\n", "input_dim", "=", "inplanes", ",", "\n", "hidden_dim", "=", "[", "planes", "]", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "num_layers", "=", "1", ",", "\n", "batch_first", "=", "True", ",", "\n", "bias", "=", "True", ",", "\n", "return_all_layers", "=", "False", ")", "\n", "", "elif", "self", ".", "tag", "==", "'btnlstm'", ":", "\n", "            ", "self", ".", "processer", "=", "BottleneckLSTM", "(", "inplanes", ",", "planes", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ")", "\n", "", "elif", "self", ".", "tag", "==", "'group'", ":", "\n", "            ", "self", ".", "processer", "=", "GroupLSTM", "(", "inplanes", ",", "planes", ",", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "\n", "group", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.TimeProcesser.forward": [[51, 54], ["Module.TimeProcesser.processer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "processer", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.InvertedResidualBlock.__init__": [[58, 72], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "net.utils.layer_factory.convbnrelu", "net.utils.layer_factory.convbnrelu", "net.utils.layer_factory.convbnrelu"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion_factor", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "InvertedResidualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "intermed_planes", "=", "in_planes", "*", "expansion_factor", "\n", "self", ".", "residual", "=", "(", "in_planes", "==", "out_planes", ")", "and", "(", "stride", "==", "1", ")", "\n", "self", ".", "output", "=", "nn", ".", "Sequential", "(", "\n", "convbnrelu", "(", "in_planes", ",", "intermed_planes", ",", "1", ")", ",", "\n", "convbnrelu", "(", "\n", "intermed_planes", ",", "\n", "intermed_planes", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "groups", "=", "intermed_planes", ",", "\n", ")", ",", "\n", "convbnrelu", "(", "intermed_planes", ",", "out_planes", ",", "1", ",", "act", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.InvertedResidualBlock.forward": [[74, 81], ["Module.InvertedResidualBlock.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "output", "(", "x", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "return", "out", "+", "residual", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.MemoryCore.__init__": [[84, 87], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MemoryCore", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.MemoryCore.forward": [[88, 109], ["m_in.size", "m_out.size", "m_in.transpose().contiguous().view", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "q_in.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "Module.MemoryCore.dropout", "m_out.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "mem.view.view.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "math.sqrt", "m_in.transpose().contiguous", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "m_in.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "m_in", ",", "m_out", ",", "q_in", ",", "q_out", ")", ":", "# m_in: o,t,c,h,w", "\n", "        ", "B", ",", "T", ",", "D_e", ",", "H", ",", "W", "=", "m_in", ".", "size", "(", ")", "\n", "_", ",", "_", ",", "D_o", ",", "_", ",", "_", "=", "m_out", ".", "size", "(", ")", "\n", "\n", "mi", "=", "m_in", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "B", ",", "D_e", ",", "T", "*", "H", "*", "W", ")", "\n", "mi", "=", "torch", ".", "transpose", "(", "mi", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# b, THW, emb", "\n", "\n", "qi", "=", "q_in", ".", "view", "(", "B", ",", "D_e", ",", "H", "*", "W", ")", "# b, emb, HW", "\n", "\n", "p", "=", "torch", ".", "bmm", "(", "mi", ",", "qi", ")", "# b, THW, HW", "\n", "p", "=", "p", "/", "math", ".", "sqrt", "(", "D_e", ")", "\n", "p", "=", "F", ".", "softmax", "(", "p", ",", "dim", "=", "1", ")", "# b, THW, HW", "\n", "p", "=", "self", ".", "dropout", "(", "p", ")", "\n", "\n", "mo", "=", "m_out", ".", "view", "(", "B", ",", "D_o", ",", "T", "*", "H", "*", "W", ")", "\n", "mem", "=", "torch", ".", "bmm", "(", "mo", ",", "p", ")", "# Weighted-sum B, D_o, HW", "\n", "mem", "=", "mem", ".", "view", "(", "B", ",", "D_o", ",", "H", ",", "W", ")", "\n", "\n", "mem_out", "=", "torch", ".", "cat", "(", "[", "mem", ",", "q_out", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "mem_out", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.KeyValue.__init__": [[112, 124], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "indim", ",", "keydim", ",", "valdim", ")", ":", "\n", "        ", "super", "(", "KeyValue", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Key", "=", "nn", ".", "Conv2d", "(", "indim", ",", "\n", "keydim", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "padding", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "1", ")", "\n", "self", ".", "Value", "=", "nn", ".", "Conv2d", "(", "indim", ",", "\n", "valdim", ",", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "\n", "padding", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.KeyValue.forward": [[125, 127], ["Module.KeyValue.Key", "Module.KeyValue.Value"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "[", "self", ".", "Key", "(", "x", ")", ",", "self", ".", "Value", "(", "x", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.Memory.__init__": [[130, 134], ["torch.Module.__init__", "Module.MemoryCore", "Module.KeyValue"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "c", ")", ":", "\n", "        ", "super", "(", "Memory", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mem_core", "=", "MemoryCore", "(", ")", "\n", "self", ".", "kv", "=", "KeyValue", "(", "c", ",", "c", "//", "4", ",", "c", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.Memory.forward": [[135, 150], ["mem.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "Module.Memory.kv", "Module.Memory.mem_core", "Module.Memory.kv", "keys.append", "values.append", "k.unsqueeze", "v.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "mem", ",", "query", ")", ":", "\n", "        ", "_", ",", "T", ",", "_", ",", "_", ",", "_", "=", "mem", ".", "size", "(", ")", "\n", "#         print('Memory:{}'.format(T))", "\n", "keys", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "k", ",", "v", "=", "self", ".", "kv", "(", "mem", "[", ":", ",", "t", "]", ")", "\n", "keys", ".", "append", "(", "k", ".", "unsqueeze", "(", "1", ")", ")", "\n", "values", ".", "append", "(", "v", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "MemoryKeys", "=", "torch", ".", "cat", "(", "keys", ",", "dim", "=", "1", ")", "\n", "MemoryValues", "=", "torch", ".", "cat", "(", "values", ",", "dim", "=", "1", ")", "\n", "CurrentKey", ",", "CurrentValue", "=", "self", ".", "kv", "(", "query", ")", "\n", "mem_out", ",", "p", "=", "self", ".", "mem_core", "(", "MemoryKeys", ",", "MemoryValues", ",", "CurrentKey", ",", "\n", "CurrentValue", ")", "\n", "return", "mem_out", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.MobileEncoder.__init__": [[168, 191], ["torch.Module.__init__", "net.utils.layer_factory.convbnrelu", "net.utils.layer_factory.conv1x1", "net.utils.layer_factory.conv1x1", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "range", "setattr", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "Module.InvertedResidualBlock"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MobileEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer1", "=", "convbnrelu", "(", "3", ",", "self", ".", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "c_layer", "=", "2", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "self", ".", "mobilenet_config", ":", "\n", "            ", "layers", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "n", ")", ":", "\n", "                ", "layers", ".", "append", "(", "\n", "InvertedResidualBlock", "(", "\n", "self", ".", "in_planes", ",", "\n", "c", ",", "\n", "expansion_factor", "=", "t", ",", "\n", "stride", "=", "s", "if", "idx", "==", "0", "else", "1", ",", "\n", ")", ")", "\n", "self", ".", "in_planes", "=", "c", "\n", "", "setattr", "(", "self", ",", "\"layer{}\"", ".", "format", "(", "c_layer", ")", ",", "nn", ".", "Sequential", "(", "*", "layers", ")", ")", "\n", "c_layer", "+=", "1", "\n", "\n", "## Light-Weight RefineNet ##", "\n", "", "self", ".", "conv8", "=", "conv1x1", "(", "320", ",", "256", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv7", "=", "conv1x1", "(", "160", ",", "256", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.MobileEncoder.forward": [[192, 205], ["Module.MobileEncoder.layer1", "Module.MobileEncoder.layer2", "Module.MobileEncoder.layer3", "Module.MobileEncoder.layer4", "Module.MobileEncoder.layer5", "Module.MobileEncoder.layer6", "Module.MobileEncoder.layer7", "Module.MobileEncoder.layer8", "Module.MobileEncoder.conv8", "Module.MobileEncoder.conv7", "Module.MobileEncoder.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "l1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "l2", "=", "self", ".", "layer2", "(", "l1", ")", "# x / 2", "\n", "l3", "=", "self", ".", "layer3", "(", "l2", ")", "# 24, x / 4", "\n", "l4", "=", "self", ".", "layer4", "(", "l3", ")", "# 32, x / 8", "\n", "l5", "=", "self", ".", "layer5", "(", "l4", ")", "# 64, x / 16", "\n", "l6", "=", "self", ".", "layer6", "(", "l5", ")", "# 96, x / 16", "\n", "l7", "=", "self", ".", "layer7", "(", "l6", ")", "# 160, x / 32", "\n", "l8", "=", "self", ".", "layer8", "(", "l7", ")", "# 320, x / 32", "\n", "l8", "=", "self", ".", "conv8", "(", "l8", ")", "\n", "l7", "=", "self", ".", "conv7", "(", "l7", ")", "\n", "l7", "=", "self", ".", "relu", "(", "l8", "+", "l7", ")", "# 256, x/32", "\n", "return", "[", "l3", ",", "l4", ",", "l5", ",", "l6", ",", "l7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.RefineDecoder.__init__": [[208, 225], ["torch.Module.__init__", "net.utils.layer_factory.conv1x1", "net.utils.layer_factory.conv1x1", "net.utils.layer_factory.conv1x1", "net.utils.layer_factory.conv1x1", "Module.RefineDecoder._make_crp", "Module.RefineDecoder._make_crp", "Module.RefineDecoder._make_crp", "Module.RefineDecoder._make_crp", "net.utils.layer_factory.conv1x1", "net.utils.layer_factory.conv1x1", "net.utils.layer_factory.conv1x1", "net.utils.layer_factory.conv3x3", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__", "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.RefineDecoder._make_crp", "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.RefineDecoder._make_crp", "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.RefineDecoder._make_crp", "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.RefineDecoder._make_crp"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "RefineDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv6", "=", "conv1x1", "(", "96", ",", "256", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "conv1x1", "(", "64", ",", "256", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "conv1x1", "(", "32", ",", "256", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "24", ",", "256", ",", "bias", "=", "False", ")", "\n", "self", ".", "crp4", "=", "self", ".", "_make_crp", "(", "256", ",", "256", ",", "4", ")", "\n", "self", ".", "crp3", "=", "self", ".", "_make_crp", "(", "256", ",", "256", ",", "4", ")", "\n", "self", ".", "crp2", "=", "self", ".", "_make_crp", "(", "256", ",", "256", ",", "4", ")", "\n", "self", ".", "crp1", "=", "self", ".", "_make_crp", "(", "256", ",", "256", ",", "4", ")", "\n", "\n", "self", ".", "conv_adapt4", "=", "conv1x1", "(", "256", ",", "256", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_adapt3", "=", "conv1x1", "(", "256", ",", "256", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_adapt2", "=", "conv1x1", "(", "256", ",", "256", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "segm", "=", "conv3x3", "(", "256", ",", "num_classes", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.RefineDecoder._make_crp": [[226, 229], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "net.utils.layer_factory.CRPBlock"], "methods", ["None"], ["", "def", "_make_crp", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stages", ")", ":", "\n", "        ", "layers", "=", "[", "CRPBlock", "(", "in_planes", ",", "out_planes", ",", "stages", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.Module.RefineDecoder.forward": [[230, 262], ["Module.RefineDecoder.crp4", "Module.RefineDecoder.conv_adapt4", "Module.RefineDecoder.conv6", "Module.RefineDecoder.conv5", "Module.RefineDecoder.relu", "Module.RefineDecoder.crp3", "Module.RefineDecoder.conv_adapt3", "Module.RefineDecoder.conv4", "Module.RefineDecoder.relu", "Module.RefineDecoder.crp2", "Module.RefineDecoder.conv_adapt2", "Module.RefineDecoder.conv3", "Module.RefineDecoder.relu", "Module.RefineDecoder.crp1", "Module.RefineDecoder.segm", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.Upsample", "Module.RefineDecoder.size", "Module.RefineDecoder.size", "Module.RefineDecoder.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "l3", ",", "l4", ",", "l5", ",", "l6", ",", "l7", "=", "x", "\n", "\n", "l7", "=", "self", ".", "crp4", "(", "l7", ")", "\n", "l7", "=", "self", ".", "conv_adapt4", "(", "l7", ")", "\n", "l7", "=", "nn", ".", "Upsample", "(", "size", "=", "l6", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ")", "(", "l7", ")", "\n", "\n", "l6", "=", "self", ".", "conv6", "(", "l6", ")", "\n", "l5", "=", "self", ".", "conv5", "(", "l5", ")", "\n", "l5", "=", "self", ".", "relu", "(", "l5", "+", "l6", "+", "l7", ")", "\n", "l5", "=", "self", ".", "crp3", "(", "l5", ")", "\n", "l5", "=", "self", ".", "conv_adapt3", "(", "l5", ")", "\n", "l5", "=", "nn", ".", "Upsample", "(", "size", "=", "l4", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ")", "(", "l5", ")", "\n", "\n", "l4", "=", "self", ".", "conv4", "(", "l4", ")", "\n", "l4", "=", "self", ".", "relu", "(", "l5", "+", "l4", ")", "\n", "l4", "=", "self", ".", "crp2", "(", "l4", ")", "\n", "l4", "=", "self", ".", "conv_adapt2", "(", "l4", ")", "\n", "l4", "=", "nn", ".", "Upsample", "(", "size", "=", "l3", ".", "size", "(", ")", "[", "2", ":", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ")", "(", "l4", ")", "\n", "\n", "l3", "=", "self", ".", "conv3", "(", "l3", ")", "\n", "l3", "=", "self", ".", "relu", "(", "l3", "+", "l4", ")", "\n", "l3", "=", "self", ".", "crp1", "(", "l3", ")", "\n", "\n", "out_segm", "=", "self", ".", "segm", "(", "l3", ")", "\n", "return", "out_segm", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.EffLA.EffLA.__init__": [[11, 17], ["torch.Module.__init__", "MobileEncoder", "RefineDecoder", "TimeProcesser", "Memory"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "tag", ")", ":", "\n", "        ", "super", "(", "EffLA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "MobileEncoder", "(", ")", "\n", "self", ".", "decoder", "=", "RefineDecoder", "(", "num_classes", ")", "\n", "self", ".", "lstm", "=", "TimeProcesser", "(", "256", ",", "256", ",", "(", "16", ",", "20", ")", ",", "1", ",", "tag", ",", "1", ")", "\n", "self", ".", "memory", "=", "Memory", "(", "256", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.EffLA.EffLA.forward": [[18, 35], ["time.perf_counter", "x.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EffLA.EffLA.memory", "EffLA.EffLA.decoder", "EffLA.EffLA.encoder", "torch.cat.append", "torch.cat.append", "torch.cat.append", "EffLA.EffLA.lstm", "tensor[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "tic", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "b", ",", "t", ",", "_", ",", "w", ",", "h", "=", "x", ".", "size", "(", ")", "\n", "\n", "seq", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "t", ")", ":", "\n", "            ", "tensor", "=", "self", ".", "encoder", "(", "x", "[", ":", ",", "i", "]", ")", "\n", "seq", ".", "append", "(", "tensor", "[", "-", "1", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "seq", "=", "torch", ".", "cat", "(", "seq", ",", "dim", "=", "1", ")", "\n", "\n", "temporal_output", "=", "self", ".", "lstm", "(", "seq", ")", "[", ":", ",", "-", "1", ":", "]", "\n", "densest_output", ",", "p", "=", "self", ".", "memory", "(", "temporal_output", ",", "temporal_output", "[", ":", ",", "0", "]", ")", "\n", "\n", "tensor", "[", "-", "1", "]", "=", "densest_output", "\n", "out_segm", "=", "self", ".", "decoder", "(", "tensor", ")", "\n", "return", "out_segm", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.Ours.EffLA.EffLA._initialize_weights": [[36, 45], ["EffLA.EffLA.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_concatenation._NonLocalBlockND.__init__": [[7, 67], ["torch.nn.Module.__init__", "conv_nd", "conv_nd", "conv_nd", "torch.nn.Sequential", "torch.nn.MaxPool3d", "torch.nn.Sequential", "torch.nn.init.constant_", "torch.nn.init.constant_", "conv_nd", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool1d", "conv_nd", "bn"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "dimension", "=", "3", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "_NonLocalBlockND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "dimension", "in", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "sub_sample", "=", "sub_sample", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "inter_channels", "\n", "\n", "if", "self", ".", "inter_channels", "is", "None", ":", "\n", "            ", "self", ".", "inter_channels", "=", "in_channels", "//", "2", "\n", "if", "self", ".", "inter_channels", "==", "0", ":", "\n", "                ", "self", ".", "inter_channels", "=", "1", "\n", "\n", "", "", "if", "dimension", "==", "3", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv3d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm3d", "\n", "", "elif", "dimension", "==", "2", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv2d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "\n", "", "else", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv1d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "(", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "\n", "\n", "", "self", ".", "g", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "if", "bn_layer", ":", "\n", "            ", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "bn", "(", "self", ".", "in_channels", ")", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "theta", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "phi", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "concat_project", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inter_channels", "*", "2", ",", "1", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "\n", "if", "sub_sample", ":", "\n", "            ", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "self", ".", "g", ",", "max_pool_layer", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Sequential", "(", "self", ".", "phi", ",", "max_pool_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_concatenation._NonLocalBlockND.forward": [[68, 107], ["x.size", "non_local_concatenation._NonLocalBlockND.g().view", "g_x.permute.permute.permute", "non_local_concatenation._NonLocalBlockND.theta().view", "non_local_concatenation._NonLocalBlockND.phi().view", "theta_x.repeat.repeat.size", "phi_x.repeat.repeat.size", "theta_x.repeat.repeat.repeat", "phi_x.repeat.repeat.repeat", "torch.cat", "non_local_concatenation._NonLocalBlockND.concat_project", "f.view.view.size", "f.view.view.view", "f.view.view.size", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "non_local_concatenation._NonLocalBlockND.W", "non_local_concatenation._NonLocalBlockND.g", "non_local_concatenation._NonLocalBlockND.theta", "non_local_concatenation._NonLocalBlockND.phi", "y.view.view.permute", "x.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "return_nl_map", "=", "False", ")", ":", "\n", "        ", "'''\n        :param x: (b, c, t, h, w)\n        :param return_nl_map: if True return z, nl_map, else only return z.\n        :return:\n        '''", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# (b, c, N, 1)", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ",", "1", ")", "\n", "# (b, c, 1, N)", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "1", ",", "-", "1", ")", "\n", "\n", "h", "=", "theta_x", ".", "size", "(", "2", ")", "\n", "w", "=", "phi_x", ".", "size", "(", "3", ")", "\n", "theta_x", "=", "theta_x", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "w", ")", "\n", "phi_x", "=", "phi_x", ".", "repeat", "(", "1", ",", "1", ",", "h", ",", "1", ")", "\n", "\n", "concat_feature", "=", "torch", ".", "cat", "(", "[", "theta_x", ",", "phi_x", "]", ",", "dim", "=", "1", ")", "\n", "f", "=", "self", ".", "concat_project", "(", "concat_feature", ")", "\n", "b", ",", "_", ",", "h", ",", "w", "=", "f", ".", "size", "(", ")", "\n", "f", "=", "f", ".", "view", "(", "b", ",", "h", ",", "w", ")", "\n", "\n", "N", "=", "f", ".", "size", "(", "-", "1", ")", "\n", "f_div_C", "=", "f", "/", "N", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "if", "return_nl_map", ":", "\n", "            ", "return", "z", ",", "f_div_C", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_concatenation.NONLocalBlock1D.__init__": [[110, 115], ["non_local_concatenation._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock1D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "1", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_concatenation.NONLocalBlock2D.__init__": [[118, 123], ["non_local_concatenation._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "2", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_concatenation.NONLocalBlock3D.__init__": [[126, 131], ["non_local_concatenation._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ",", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock3D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "3", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_embedded_gaussian._NonLocalBlockND.__init__": [[7, 69], ["torch.nn.Module.__init__", "conv_nd", "conv_nd", "conv_nd", "torch.nn.MaxPool3d", "torch.nn.Sequential", "torch.nn.init.constant_", "torch.nn.init.constant_", "conv_nd", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool1d", "conv_nd", "bn"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "dimension", "=", "3", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param in_channels:\n        :param inter_channels:\n        :param dimension:\n        :param sub_sample:\n        :param bn_layer:\n        \"\"\"", "\n", "\n", "super", "(", "_NonLocalBlockND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "dimension", "in", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "sub_sample", "=", "sub_sample", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "inter_channels", "\n", "\n", "if", "self", ".", "inter_channels", "is", "None", ":", "\n", "            ", "self", ".", "inter_channels", "=", "in_channels", "//", "2", "\n", "if", "self", ".", "inter_channels", "==", "0", ":", "\n", "                ", "self", ".", "inter_channels", "=", "1", "\n", "\n", "", "", "if", "dimension", "==", "3", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv3d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm3d", "\n", "", "elif", "dimension", "==", "2", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv2d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "\n", "", "else", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv1d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "(", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "\n", "\n", "", "self", ".", "g", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "if", "bn_layer", ":", "\n", "            ", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "bn", "(", "self", ".", "in_channels", ")", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "theta", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "phi", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "if", "sub_sample", ":", "\n", "            ", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "self", ".", "g", ",", "max_pool_layer", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Sequential", "(", "self", ".", "phi", ",", "max_pool_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_embedded_gaussian._NonLocalBlockND.forward": [[70, 97], ["x.size", "non_local_embedded_gaussian._NonLocalBlockND.g().view", "g_x.permute.permute.permute", "non_local_embedded_gaussian._NonLocalBlockND.theta().view", "theta_x.permute.permute.permute", "non_local_embedded_gaussian._NonLocalBlockND.phi().view", "torch.matmul", "torch.nn.functional.softmax", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "non_local_embedded_gaussian._NonLocalBlockND.W", "non_local_embedded_gaussian._NonLocalBlockND.g", "non_local_embedded_gaussian._NonLocalBlockND.theta", "non_local_embedded_gaussian._NonLocalBlockND.phi", "y.view.view.permute", "x.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "return_nl_map", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param x: (b, c, t, h, w)\n        :param return_nl_map: if True return z, nl_map, else only return z.\n        :return:\n        \"\"\"", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "f_div_C", "=", "F", ".", "softmax", "(", "f", ",", "dim", "=", "-", "1", ")", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "if", "return_nl_map", ":", "\n", "            ", "return", "z", ",", "f_div_C", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_embedded_gaussian.NONLocalBlock1D.__init__": [[100, 105], ["non_local_embedded_gaussian._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock1D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "1", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_embedded_gaussian.NONLocalBlock2D.__init__": [[108, 113], ["non_local_embedded_gaussian._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "2", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_embedded_gaussian.NONLocalBlock3D.__init__": [[116, 121], ["non_local_embedded_gaussian._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock3D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "3", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_dot_product._NonLocalBlockND.__init__": [[7, 62], ["torch.nn.Module.__init__", "conv_nd", "conv_nd", "conv_nd", "torch.nn.MaxPool3d", "torch.nn.Sequential", "torch.nn.init.constant_", "torch.nn.init.constant_", "conv_nd", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool1d", "conv_nd", "bn"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "dimension", "=", "3", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "_NonLocalBlockND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "dimension", "in", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "sub_sample", "=", "sub_sample", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "inter_channels", "\n", "\n", "if", "self", ".", "inter_channels", "is", "None", ":", "\n", "            ", "self", ".", "inter_channels", "=", "in_channels", "//", "2", "\n", "if", "self", ".", "inter_channels", "==", "0", ":", "\n", "                ", "self", ".", "inter_channels", "=", "1", "\n", "\n", "", "", "if", "dimension", "==", "3", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv3d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm3d", "\n", "", "elif", "dimension", "==", "2", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv2d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "\n", "", "else", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv1d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "(", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "\n", "\n", "", "self", ".", "g", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "if", "bn_layer", ":", "\n", "            ", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "bn", "(", "self", ".", "in_channels", ")", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "theta", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "phi", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "if", "sub_sample", ":", "\n", "            ", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "self", ".", "g", ",", "max_pool_layer", ")", "\n", "self", ".", "phi", "=", "nn", ".", "Sequential", "(", "self", ".", "phi", ",", "max_pool_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_dot_product._NonLocalBlockND.forward": [[63, 91], ["x.size", "non_local_dot_product._NonLocalBlockND.g().view", "g_x.permute.permute.permute", "non_local_dot_product._NonLocalBlockND.theta().view", "theta_x.permute.permute.permute", "non_local_dot_product._NonLocalBlockND.phi().view", "torch.matmul", "torch.matmul.size", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "non_local_dot_product._NonLocalBlockND.W", "non_local_dot_product._NonLocalBlockND.g", "non_local_dot_product._NonLocalBlockND.theta", "non_local_dot_product._NonLocalBlockND.phi", "y.view.view.permute", "x.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "return_nl_map", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param x: (b, c, t, h, w)\n        :param return_nl_map: if True return z, nl_map, else only return z.\n        :return:\n        \"\"\"", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "theta_x", "=", "self", ".", "theta", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "N", "=", "f", ".", "size", "(", "-", "1", ")", "\n", "f_div_C", "=", "f", "/", "N", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "if", "return_nl_map", ":", "\n", "            ", "return", "z", ",", "f_div_C", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_dot_product.NONLocalBlock1D.__init__": [[94, 99], ["non_local_dot_product._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock1D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "1", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_dot_product.NONLocalBlock2D.__init__": [[102, 107], ["non_local_dot_product._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "2", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_dot_product.NONLocalBlock3D.__init__": [[110, 115], ["non_local_dot_product._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock3D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "3", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian._NonLocalBlockND.__init__": [[7, 56], ["torch.nn.Module.__init__", "conv_nd", "torch.nn.MaxPool3d", "torch.nn.Sequential", "torch.nn.init.constant_", "torch.nn.init.constant_", "conv_nd", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.Sequential", "torch.nn.MaxPool2d", "torch.nn.MaxPool1d", "conv_nd", "bn"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "dimension", "=", "3", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "_NonLocalBlockND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "dimension", "in", "[", "1", ",", "2", ",", "3", "]", "\n", "\n", "self", ".", "dimension", "=", "dimension", "\n", "self", ".", "sub_sample", "=", "sub_sample", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "inter_channels", "=", "inter_channels", "\n", "\n", "if", "self", ".", "inter_channels", "is", "None", ":", "\n", "            ", "self", ".", "inter_channels", "=", "in_channels", "//", "2", "\n", "if", "self", ".", "inter_channels", "==", "0", ":", "\n", "                ", "self", ".", "inter_channels", "=", "1", "\n", "\n", "", "", "if", "dimension", "==", "3", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv3d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "1", ",", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm3d", "\n", "", "elif", "dimension", "==", "2", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv2d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "(", "2", ",", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm2d", "\n", "", "else", ":", "\n", "            ", "conv_nd", "=", "nn", ".", "Conv1d", "\n", "max_pool_layer", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "(", "2", ")", ")", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "\n", "\n", "", "self", ".", "g", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "inter_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "if", "bn_layer", ":", "\n", "            ", "self", ".", "W", "=", "nn", ".", "Sequential", "(", "\n", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "bn", "(", "self", ".", "in_channels", ")", "\n", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", "[", "1", "]", ".", "bias", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "conv_nd", "(", "in_channels", "=", "self", ".", "inter_channels", ",", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "W", ".", "bias", ",", "0", ")", "\n", "\n", "", "if", "sub_sample", ":", "\n", "            ", "self", ".", "g", "=", "nn", ".", "Sequential", "(", "self", ".", "g", ",", "max_pool_layer", ")", "\n", "self", ".", "phi", "=", "max_pool_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian._NonLocalBlockND.forward": [[57, 93], ["x.size", "non_local_gaussian._NonLocalBlockND.g().view", "g_x.permute.permute.permute", "x.view", "theta_x.permute.permute.permute", "torch.matmul", "torch.nn.functional.softmax", "torch.matmul", "y.view.view.permute().contiguous", "y.view.view.view", "non_local_gaussian._NonLocalBlockND.W", "non_local_gaussian._NonLocalBlockND.phi().view", "x.view", "non_local_gaussian._NonLocalBlockND.g", "y.view.view.permute", "non_local_gaussian._NonLocalBlockND.phi", "x.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "return_nl_map", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param x: (b, c, t, h, w)\n        :param return_nl_map: if True return z, nl_map, else only return z.\n        :return:\n        \"\"\"", "\n", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "g_x", "=", "self", ".", "g", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "-", "1", ")", "\n", "\n", "g_x", "=", "g_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "theta_x", "=", "x", ".", "view", "(", "batch_size", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "theta_x", "=", "theta_x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "if", "self", ".", "sub_sample", ":", "\n", "            ", "phi_x", "=", "self", ".", "phi", "(", "x", ")", ".", "view", "(", "batch_size", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "phi_x", "=", "x", ".", "view", "(", "batch_size", ",", "self", ".", "in_channels", ",", "-", "1", ")", "\n", "\n", "", "f", "=", "torch", ".", "matmul", "(", "theta_x", ",", "phi_x", ")", "\n", "f_div_C", "=", "F", ".", "softmax", "(", "f", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# if self.store_last_batch_nl_map:", "\n", "#     self.nl_map = f_div_C", "\n", "\n", "y", "=", "torch", ".", "matmul", "(", "f_div_C", ",", "g_x", ")", "\n", "y", "=", "y", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "y", "=", "y", ".", "view", "(", "batch_size", ",", "self", ".", "inter_channels", ",", "*", "x", ".", "size", "(", ")", "[", "2", ":", "]", ")", "\n", "W_y", "=", "self", ".", "W", "(", "y", ")", "\n", "z", "=", "W_y", "+", "x", "\n", "\n", "if", "return_nl_map", ":", "\n", "            ", "return", "z", ",", "f_div_C", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock1D.__init__": [[96, 101], ["non_local_gaussian._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock1D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "1", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock2D.__init__": [[104, 109], ["non_local_gaussian._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "2", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__": [[112, 117], ["non_local_gaussian._NonLocalBlockND.__init__"], "methods", ["home.repos.pwc.inspect_result.jcwang123_dmnet.lib.non_local_gaussian.NONLocalBlock3D.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "inter_channels", "=", "None", ",", "sub_sample", "=", "True", ",", "bn_layer", "=", "True", ")", ":", "\n", "        ", "super", "(", "NONLocalBlock3D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "\n", "inter_channels", "=", "inter_channels", ",", "\n", "dimension", "=", "3", ",", "sub_sample", "=", "sub_sample", ",", "\n", "bn_layer", "=", "bn_layer", ")", "\n", "\n"]]}