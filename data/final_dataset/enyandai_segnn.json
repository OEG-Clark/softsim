{"home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.SynData.__init__": [[14, 19], ["range", "SynData.SynData.dist.append", "data.y.max", "data.x[].sum"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "self", ".", "dist", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "data", ".", "y", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "            ", "self", ".", "dist", ".", "append", "(", "data", ".", "x", "[", "data", ".", "y", "==", "i", "]", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.SynData.plot_subgraph": [[20, 26], ["networkx.Graph", "networkx.Graph", "networkx.Graph.add_edges_from", "networkx.spring_layout", "networkx.spring_layout", "networkx.draw", "networkx.draw", "matplotlib.show"], "methods", ["None"], ["", "", "def", "plot_subgraph", "(", "self", ",", "subgraphs", ",", "y", ")", ":", "\n", "        ", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "G", ".", "add_edges_from", "(", "subgraphs", ")", "\n", "pos", "=", "nx", ".", "spring_layout", "(", "G", ")", "\n", "nx", ".", "draw", "(", "G", ",", "pos", ",", "node_color", "=", "y", ",", "node_size", "=", "800", ",", "cmap", "=", "plt", ".", "cm", ".", "tab10", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.SynData.add_noise": [[27, 44], ["SynData.SynData.data.x[].numpy().copy", "numpy.ones", "int", "numpy.random.choice", "numpy.random.choice", "numpy.ones.sum", "len", "SynData.SynData.data.x[].numpy", "len", "SynData.SynData.sum", "SynData.SynData.nonzero"], "methods", ["None"], ["", "def", "add_noise", "(", "self", ",", "idx", ",", "noise_rate", "=", "0.1", ")", ":", "\n", "        ", "from", "utils", "import", "attribute_mask", "\n", "\n", "# x = attribute_mask(self.data.x[idx], noise_rate)", "\n", "x", "=", "self", ".", "data", ".", "x", "[", "idx", "]", ".", "numpy", "(", ")", ".", "copy", "(", ")", "\n", "\n", "p", "=", "np", ".", "ones", "(", "[", "len", "(", "x", ")", "]", ")", "\n", "\n", "p", "[", "x", "==", "1", "]", "=", "0", "\n", "p", "=", "p", "/", "p", ".", "sum", "(", ")", "\n", "size", "=", "int", "(", "x", ".", "sum", "(", ")", "*", "noise_rate", ")", "\n", "noise", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "p", ")", ",", "size", "=", "size", ",", "p", "=", "p", ",", "replace", "=", "False", ")", "\n", "x", "[", "noise", "]", "=", "1", "\n", "noise", "=", "np", ".", "random", ".", "choice", "(", "x", ".", "nonzero", "(", ")", "[", "0", "]", ",", "size", "=", "size", ",", "replace", "=", "False", ")", "\n", "x", "[", "noise", "]", "=", "0", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.SynData.syn_rank": [[45, 129], ["data.y[].numpy", "subgraphs[].T.numpy", "numpy.arange", "numpy.arange", "data.x[].numpy", "networkx.Graph", "networkx.Graph", "enumerate", "zip", "graphs.append", "enumerate", "enumerate", "data.x[].numpy", "networkx.Graph.add_node", "networkx.Graph.add_edge", "networkx.Graph", "networkx.Graph", "enumerate", "zip", "graphs.append", "networkx.Graph", "networkx.Graph", "enumerate", "zip", "graphs.append", "len", "len", "len", "SynData.SynData.add_noise", "networkx.Graph.add_node", "networkx.Graph.add_edge", "range", "SynData.SynData.add_noise", "networkx.Graph.add_node", "networkx.Graph.add_edge", "numpy.random.randint", "numpy.random.randint", "networkx.Graph.add_edge", "len", "len", "len", "int", "numpy.random.randint", "numpy.random.randint", "networkx.Graph.add_edge", "networkx.Graph.number_of_nodes", "networkx.Graph.number_of_nodes", "len", "int", "networkx.Graph.number_of_nodes", "networkx.Graph.number_of_nodes", "numpy.random.randint", "numpy.random.randint", "networkx.Graph.add_edge", "int", "networkx.Graph.has_edge", "networkx.Graph.has_edge", "networkx.Graph.number_of_nodes", "networkx.Graph.number_of_nodes", "networkx.Graph.has_edge"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.SynData.add_noise", "home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.SynData.add_noise"], ["", "def", "syn_rank", "(", "self", ",", "start", ",", "neighbors", ",", "subgraphs", ",", "node_start", ",", "edge_start", ")", ":", "\n", "\n", "\n", "        ", "data", "=", "self", ".", "data", "\n", "\n", "y", "=", "data", ".", "y", "[", "neighbors", "]", ".", "numpy", "(", ")", "\n", "subgraphs", "=", "subgraphs", "[", ":", ",", "subgraphs", "[", "0", "]", "<", "subgraphs", "[", "1", "]", "]", ".", "T", ".", "numpy", "(", ")", "\n", "\n", "#self.plot_subgraph(subgraphs, y)", "\n", "\n", "node_roles", "=", "np", ".", "arange", "(", "node_start", ",", "node_start", "+", "len", "(", "neighbors", ")", ")", "\n", "edge_roles", "=", "np", ".", "arange", "(", "edge_start", ",", "edge_start", "+", "len", "(", "subgraphs", ")", ")", "\n", "\n", "neighbor_x", "=", "data", ".", "x", "[", "neighbors", "]", ".", "numpy", "(", ")", "\n", "graphs", "=", "[", "]", "\n", "\n", "# add test", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "for", "j", ",", "idx", "in", "enumerate", "(", "neighbors", ")", ":", "\n", "            ", "new_node_idx", "=", "start", "+", "j", "\n", "x", "=", "data", ".", "x", "[", "idx", "]", ".", "numpy", "(", ")", "\n", "#print(np.abs(x-data.x[idx].numpy()).sum())", "\n", "G", ".", "add_node", "(", "new_node_idx", ",", "x", "=", "x", ",", "y", "=", "int", "(", "data", ".", "y", "[", "idx", "]", ")", ",", "node_role", "=", "node_roles", "[", "j", "]", ",", "test_mask", "=", "True", ",", "train_mask", "=", "False", ",", "val_mask", "=", "False", ",", "noise", "=", "0.0", ")", "\n", "\n", "", "for", "edge", ",", "role", "in", "zip", "(", "subgraphs", ",", "edge_roles", ")", ":", "\n", "            ", "G", ".", "add_edge", "(", "edge", "[", "0", "]", ",", "edge", "[", "1", "]", ",", "edge_role", "=", "role", ")", "\n", "", "graphs", ".", "append", "(", "G", ")", "\n", "\n", "train_noises", "=", "[", "0.2", ",", "0.3", ",", "0.4", "]", "\n", "for", "i", ",", "noise_rate", "in", "enumerate", "(", "train_noises", ")", ":", "\n", "            ", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "for", "j", ",", "idx", "in", "enumerate", "(", "neighbors", ")", ":", "\n", "                ", "new_node_idx", "=", "start", "+", "j", "\n", "x", "=", "self", ".", "add_noise", "(", "idx", ",", "noise_rate", ")", "\n", "G", ".", "add_node", "(", "new_node_idx", ",", "x", "=", "x", ",", "y", "=", "int", "(", "data", ".", "y", "[", "idx", "]", ")", ",", "node_role", "=", "node_roles", "[", "j", "]", ",", "test_mask", "=", "False", ",", "train_mask", "=", "True", ",", "val_mask", "=", "False", ",", "noise", "=", "noise_rate", ")", "\n", "\n", "", "for", "edge", ",", "role", "in", "zip", "(", "subgraphs", ",", "edge_roles", ")", ":", "\n", "                ", "G", ".", "add_edge", "(", "edge", "[", "0", "]", ",", "edge", "[", "1", "]", ",", "edge_role", "=", "role", ")", "\n", "\n", "", "if", "noise_rate", "==", "0.4", ":", "\n", "                ", "while", "True", ":", "\n", "                    ", "u", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "G", ".", "number_of_nodes", "(", ")", ")", "\n", "v", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "G", ".", "number_of_nodes", "(", ")", ")", "\n", "if", "(", "not", "G", ".", "has_edge", "(", "u", ",", "v", ")", ")", "and", "(", "u", "!=", "v", ")", ":", "\n", "                        ", "break", "\n", "", "G", ".", "add_edge", "(", "u", ",", "v", ",", "edge_role", "=", "0", ")", "\n", "\n", "", "", "if", "noise_rate", "==", "0.6", ":", "\n", "                ", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "                    ", "while", "True", ":", "\n", "                        ", "u", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "G", ".", "number_of_nodes", "(", ")", ")", "\n", "v", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "G", ".", "number_of_nodes", "(", ")", ")", "\n", "if", "(", "not", "G", ".", "has_edge", "(", "u", ",", "v", ")", ")", "and", "(", "u", "!=", "v", ")", ":", "\n", "                            ", "break", "\n", "", "G", ".", "add_edge", "(", "u", ",", "v", ",", "edge_role", "=", "0", ")", "\n", "\n", "", "", "", "graphs", ".", "append", "(", "G", ")", "\n", "\n", "", "val_noises", "=", "[", "0.2", "]", "*", "3", "\n", "\n", "for", "i", ",", "noise_rate", "in", "enumerate", "(", "val_noises", ")", ":", "\n", "            ", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "for", "j", ",", "idx", "in", "enumerate", "(", "neighbors", ")", ":", "\n", "                ", "new_node_idx", "=", "start", "+", "j", "\n", "x", "=", "self", ".", "add_noise", "(", "idx", ",", "noise_rate", ")", "\n", "\n", "G", ".", "add_node", "(", "new_node_idx", ",", "x", "=", "x", ",", "y", "=", "int", "(", "data", ".", "y", "[", "idx", "]", ")", ",", "node_role", "=", "node_roles", "[", "j", "]", ",", "test_mask", "=", "False", ",", "train_mask", "=", "False", ",", "val_mask", "=", "True", ",", "noise", "=", "noise_rate", ")", "\n", "\n", "", "for", "edge", ",", "role", "in", "zip", "(", "subgraphs", ",", "edge_roles", ")", ":", "\n", "                ", "G", ".", "add_edge", "(", "edge", "[", "0", "]", ",", "edge", "[", "1", "]", ",", "edge_role", "=", "role", ")", "\n", "\n", "", "while", "True", ":", "\n", "                ", "u", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "G", ".", "number_of_nodes", "(", ")", ")", "\n", "v", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "G", ".", "number_of_nodes", "(", ")", ")", "\n", "if", "(", "not", "G", ".", "has_edge", "(", "u", ",", "v", ")", ")", "and", "(", "u", "!=", "v", ")", ":", "\n", "                    ", "break", "\n", "", "G", ".", "add_edge", "(", "u", ",", "v", ",", "edge_role", "=", "0", ")", "\n", "", "graphs", ".", "append", "(", "G", ")", "\n", "\n", "", "number", "=", "1", "+", "len", "(", "val_noises", ")", "+", "len", "(", "train_noises", ")", "\n", "return", "graphs", ",", "start", "+", "number", "*", "len", "(", "neighbors", ")", ",", "node_start", "+", "len", "(", "neighbors", ")", ",", "edge_start", "+", "len", "(", "subgraphs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.SynData.syn_local": [[130, 160], ["data.y[].numpy", "subgraphs[].T.numpy", "numpy.arange", "numpy.arange", "data.x[].numpy", "range", "networkx.Graph", "networkx.Graph", "enumerate", "zip", "graphs.append", "len", "len", "networkx.Graph.add_node", "networkx.Graph.add_edge", "len", "len", "data.x[].numpy", "SynData.SynData.add_noise", "len", "int", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.SynData.add_noise"], ["", "def", "syn_local", "(", "self", ",", "start", ",", "neighbors", ",", "subgraphs", ",", "node_start", ",", "edge_start", ",", "number", "=", "10", ",", "noise_rate", "=", "0.4", ")", ":", "\n", "\n", "\n", "        ", "data", "=", "self", ".", "data", "\n", "\n", "y", "=", "data", ".", "y", "[", "neighbors", "]", ".", "numpy", "(", ")", "\n", "subgraphs", "=", "subgraphs", "[", ":", ",", "subgraphs", "[", "0", "]", "<", "subgraphs", "[", "1", "]", "]", ".", "T", ".", "numpy", "(", ")", "\n", "\n", "#self.plot_subgraph(subgraphs, y)", "\n", "\n", "node_roles", "=", "np", ".", "arange", "(", "node_start", ",", "node_start", "+", "len", "(", "neighbors", ")", ")", "\n", "edge_roles", "=", "np", ".", "arange", "(", "edge_start", ",", "edge_start", "+", "len", "(", "subgraphs", ")", ")", "\n", "\n", "neighbor_x", "=", "data", ".", "x", "[", "neighbors", "]", ".", "numpy", "(", ")", "\n", "graphs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "number", ")", ":", "\n", "            ", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "for", "j", ",", "idx", "in", "enumerate", "(", "neighbors", ")", ":", "\n", "                ", "new_node_idx", "=", "start", "+", "i", "*", "len", "(", "neighbors", ")", "+", "j", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "x", "=", "data", ".", "x", "[", "idx", "]", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "self", ".", "add_noise", "(", "idx", ",", "noise_rate", ")", "\n", "#print(np.abs(x-data.x[idx].numpy()).sum())", "\n", "", "G", ".", "add_node", "(", "new_node_idx", ",", "x", "=", "x", ",", "y", "=", "int", "(", "data", ".", "y", "[", "idx", "]", ")", ",", "node_role", "=", "node_roles", "[", "j", "]", ")", "\n", "", "for", "edge", ",", "role", "in", "zip", "(", "subgraphs", ",", "edge_roles", ")", ":", "\n", "                ", "G", ".", "add_edge", "(", "edge", "[", "0", "]", "+", "i", "*", "len", "(", "neighbors", ")", "+", "start", ",", "edge", "[", "1", "]", "+", "i", "*", "len", "(", "neighbors", ")", "+", "start", ",", "edge_role", "=", "role", ")", "\n", "", "graphs", ".", "append", "(", "G", ")", "\n", "\n", "", "return", "graphs", ",", "start", "+", "number", "*", "len", "(", "neighbors", ")", ",", "node_start", "+", "len", "(", "neighbors", ")", ",", "edge_start", "+", "len", "(", "subgraphs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.SynData.syn_random_basis": [[161, 180], ["data.x.mean().numpy", "networkx.gnm_random_graph", "networkx.gnm_random_graph", "sorted", "networkx.relabel_nodes", "networkx.relabel_nodes", "enumerate", "int", "numpy.random.binomial", "data.y.max", "data.x.mean", "enumerate"], "methods", ["None"], ["", "def", "syn_random_basis", "(", "self", ",", "n", ",", "d", ",", "start", "=", "0", ",", "node_start", "=", "0", ",", "edge_start", "=", "0", ")", ":", "\n", "        ", "data", "=", "self", ".", "data", "\n", "m", "=", "d", "*", "n", "\n", "label", "=", "int", "(", "data", ".", "y", ".", "max", "(", ")", ")", "+", "1", "\n", "p", "=", "data", ".", "x", ".", "mean", "(", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "p", "[", ":", "10", "]", "=", "0.7", "\n", "G", "=", "nx", ".", "gnm_random_graph", "(", "n", ",", "m", ",", "seed", "=", "15", ",", "directed", "=", "False", ")", "\n", "nids", "=", "sorted", "(", "G", ")", "\n", "mapping", "=", "{", "nid", ":", "start", "+", "i", "for", "i", ",", "nid", "in", "enumerate", "(", "nids", ")", "}", "\n", "G", "=", "nx", ".", "relabel_nodes", "(", "G", ",", "mapping", ")", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "G", ".", "nodes", ")", ":", "\n", "            ", "G", ".", "nodes", "[", "node", "]", "[", "'x'", "]", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "p", ")", "\n", "G", ".", "nodes", "[", "node", "]", "[", "'node_role'", "]", "=", "node_start", "\n", "G", ".", "nodes", "[", "node", "]", "[", "'y'", "]", "=", "label", "\n", "\n", "", "for", "edge", "in", "G", ".", "edges", ":", "\n", "            ", "G", ".", "edges", "[", "edge", "]", "[", "'edge_role'", "]", "=", "edge_start", "\n", "\n", "", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.SynData.syn_real_basis": [[181, 201], ["list", "list", "networkx.Graph", "networkx.Graph", "torch_geometric.utils.subgraph", "torch_geometric.utils.remove_isolated_nodes", "list", "torch_geometric.utils.subgraph", "enumerate", "networkx.Graph.add_edges_from", "sorted", "networkx.Graph.add_node", "set", "set", "numpy.random.choice", "len", "numpy.asarray", "edge_index.T.numpy", "numpy.arange", "data.x[].numpy", "int", "len"], "methods", ["None"], ["", "def", "syn_real_basis", "(", "self", ",", "n", ",", "remove_nodes", ",", "start", "=", "0", ",", "node_start", "=", "0", ",", "edge_start", "=", "0", ")", ":", "\n", "        ", "data", "=", "self", ".", "data", "\n", "\n", "remain_nodes", "=", "list", "(", "set", "(", "np", ".", "arange", "(", "len", "(", "data", ".", "x", ")", ")", ")", "-", "set", "(", "remove_nodes", ")", ")", "\n", "remain_nodes", "=", "list", "(", "sorted", "(", "np", ".", "random", ".", "choice", "(", "remain_nodes", ",", "n", ",", "False", ")", ")", ")", "\n", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "\n", "edge_index", ",", "_", "=", "subgraph", "(", "remain_nodes", ",", "data", ".", "edge_index", ",", "relabel_nodes", "=", "True", ")", "\n", "_", ",", "_", ",", "node_mask", "=", "remove_isolated_nodes", "(", "edge_index", ",", "num_nodes", "=", "len", "(", "remain_nodes", ")", ")", "\n", "\n", "remain_nodes", "=", "list", "(", "np", ".", "asarray", "(", "remain_nodes", ")", "[", "node_mask", "]", ")", "\n", "\n", "edge_index", ",", "_", "=", "subgraph", "(", "remain_nodes", ",", "data", ".", "edge_index", ",", "relabel_nodes", "=", "True", ")", "\n", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "remain_nodes", ")", ":", "\n", "            ", "G", ".", "add_node", "(", "i", "+", "start", ",", "x", "=", "data", ".", "x", "[", "idx", "]", ".", "numpy", "(", ")", ",", "node_role", "=", "node_start", ",", "y", "=", "int", "(", "data", ".", "y", "[", "idx", "]", ")", ")", "\n", "", "G", ".", "add_edges_from", "(", "edge_index", ".", "T", ".", "numpy", "(", ")", "+", "start", ",", "edge_role", "=", "edge_start", ")", "\n", "\n", "return", "G", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.SynData.syn_graph": [[203, 267], ["numpy.random.seed", "int", "range", "SynData.SynData.syn_real_basis", "numpy.random.choice", "range", "SynData.SynData.number_of_nodes", "numpy.random.shuffle", "SynData.SynData.number_of_nodes", "SynData.SynData.number_of_nodes", "networkx.relabel_nodes", "networkx.relabel_nodes", "networkx.relabel_nodes.number_of_nodes", "SynData.SynData.add_nodes_from", "SynData.SynData.add_edges_from", "numpy.random.choice", "numpy.random.choice", "zip", "SynData.SynData.data.y.max", "torch_geometric.utils.k_hop_subgraph", "int", "networkx.relabel_nodes.nodes", "networkx.relabel_nodes.edges", "list", "list", "SynData.SynData.add_edge", "int", "set", "set", "SynData.SynData.syn_rank", "list", "enumerate", "list", "len", "len", "len", "neighbors.numpy", "SynData.SynData.number_of_nodes", "neighbors.numpy"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.SynData.syn_real_basis", "home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.SynData.syn_rank"], ["", "def", "syn_graph", "(", "self", ",", "n_basis", "=", "300", ",", "basis_type", "=", "'real'", ",", "nb_shapes", "=", "3", ",", "hop", "=", "2", ",", "connect", "=", "1", ",", "seed", "=", "15", ")", ":", "\n", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "nb_class", "=", "int", "(", "self", ".", "data", ".", "y", ".", "max", "(", ")", "+", "1", ")", "\n", "node_start", "=", "1", "\n", "edge_start", "=", "1", "\n", "graphs", "=", "[", "]", "\n", "remove_nodes", "=", "[", "]", "\n", "for", "label", "in", "range", "(", "nb_class", ")", ":", "\n", "            ", "n", "=", "0", "\n", "indices", "=", "(", "self", ".", "data", ".", "y", "==", "label", ")", ".", "nonzero", "(", ")", ".", "flatten", "(", ")", ".", "numpy", "(", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "\n", "for", "idx", "in", "indices", ":", "\n", "                ", "neighbors", ",", "subgraphs", ",", "_", ",", "_", "=", "k_hop_subgraph", "(", "int", "(", "idx", ")", ",", "hop", ",", "self", ".", "data", ".", "edge_index", ",", "relabel_nodes", "=", "True", ")", "\n", "\n", "\n", "overlap", "=", "set", "(", "list", "(", "neighbors", ".", "numpy", "(", ")", ")", ")", "&", "set", "(", "remove_nodes", ")", "\n", "\n", "if", "len", "(", "neighbors", ")", ">=", "5", "and", "len", "(", "neighbors", ")", "<=", "20", "and", "len", "(", "overlap", ")", "==", "0", ":", "\n", "\n", "# G, start, node_start, edge_start = self.syn_local(0, neighbors, subgraphs,\\", "\n", "#                                             node_start, edge_start, nb_copy, noise_rate)", "\n", "                    ", "G", ",", "start", ",", "node_start", ",", "edge_start", "=", "self", ".", "syn_rank", "(", "0", ",", "neighbors", ",", "subgraphs", ",", "node_start", ",", "edge_start", ")", "\n", "\n", "n", "+=", "1", "\n", "graphs", "+=", "G", "\n", "remove_nodes", "+=", "list", "(", "neighbors", ".", "numpy", "(", ")", ")", "\n", "", "if", "n", "==", "nb_shapes", ":", "\n", "                    ", "break", "\n", "", "", "", "start", "=", "0", "\n", "\n", "# if basis_type=='random':", "\n", "#     basis = self.syn_random_basis(n_basis, 2, start)", "\n", "# else:", "\n", "basis", "=", "self", ".", "syn_real_basis", "(", "n_basis", "*", "2", ",", "remove_nodes", ",", "start", ")", "\n", "train_basis_idx", "=", "np", ".", "random", ".", "choice", "(", "basis", ".", "number_of_nodes", "(", ")", ",", "size", "=", "int", "(", "0.2", "*", "basis", ".", "number_of_nodes", "(", ")", ")", ",", "replace", "=", "False", ")", "\n", "\n", "for", "i", "in", "range", "(", "basis", ".", "number_of_nodes", "(", ")", ")", ":", "\n", "            ", "basis", ".", "nodes", "[", "i", "]", "[", "'train_mask'", "]", "=", "False", "\n", "basis", ".", "nodes", "[", "i", "]", "[", "'test_mask'", "]", "=", "False", "\n", "basis", ".", "nodes", "[", "i", "]", "[", "'val_mask'", "]", "=", "False", "\n", "basis", ".", "nodes", "[", "i", "]", "[", "'noise'", "]", "=", "0.0", "\n", "\n", "if", "i", "in", "train_basis_idx", ":", "\n", "                ", "basis", ".", "nodes", "[", "i", "]", "[", "'train_mask'", "]", "=", "True", "\n", "\n", "", "", "start", "+=", "basis", ".", "number_of_nodes", "(", ")", "\n", "for", "motif", "in", "graphs", ":", "\n", "\n", "            ", "mapping", "=", "{", "nid", ":", "start", "+", "i", "for", "i", ",", "nid", "in", "enumerate", "(", "motif", ".", "nodes", ")", "}", "\n", "motif", "=", "nx", ".", "relabel_nodes", "(", "motif", ",", "mapping", ")", "\n", "start", "+=", "motif", ".", "number_of_nodes", "(", ")", "\n", "\n", "basis", ".", "add_nodes_from", "(", "motif", ".", "nodes", "(", "data", "=", "True", ")", ")", "\n", "basis", ".", "add_edges_from", "(", "motif", ".", "edges", "(", "data", "=", "True", ")", ")", "\n", "u", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "basis", ")", ",", "connect", ",", "False", ")", "\n", "v", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "motif", ")", ",", "connect", ",", "False", ")", "\n", "for", "i", ",", "j", "in", "zip", "(", "u", ",", "v", ")", ":", "\n", "                ", "basis", ".", "add_edge", "(", "i", ",", "j", ",", "edge_role", "=", "0", ")", "\n", "\n", "", "", "return", "basis", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.make_pred_real": [[272, 289], ["edge_mask[].cpu().numpy", "numpy.zeros_like", "range", "edge_mask[].cpu"], "function", ["None"], ["def", "make_pred_real", "(", "node_idx", ",", "edge_mask", ",", "edge_index", ")", ":", "\n", "\n", "    ", "mask", "=", "(", "edge_mask", ">", "0", ")", "&", "(", "edge_index", "[", "0", "]", "<", "edge_index", "[", "1", "]", ")", "\n", "pred", "=", "edge_mask", "[", "mask", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "real_edge", "=", "edge_index", "[", ":", ",", "mask", "]", "\n", "real", "=", "np", ".", "zeros_like", "(", "pred", ")", "\n", "start_idx", "=", "node_idx", "-", "node_idx", "%", "5", "\n", "for", "i", "in", "range", "(", "real_edge", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "if", "real_edge", "[", "0", ",", "i", "]", "==", "start_idx", ":", "\n", "            ", "if", "real_edge", "[", "1", ",", "i", "]", "in", "[", "start_idx", "+", "1", ",", "start_idx", "+", "3", ",", "start_idx", "+", "4", "]", ":", "\n", "                ", "real", "[", "i", "]", "=", "1.0", "\n", "", "", "if", "real_edge", "[", "0", ",", "i", "]", "==", "start_idx", "+", "1", "and", "real_edge", "[", "1", ",", "i", "]", "==", "start_idx", "+", "2", ":", "\n", "            ", "real", "[", "i", "]", "=", "1.0", "\n", "", "if", "real_edge", "[", "0", ",", "i", "]", "==", "start_idx", "+", "2", "and", "real_edge", "[", "1", ",", "i", "]", "==", "start_idx", "+", "3", ":", "\n", "            ", "real", "[", "i", "]", "=", "1.0", "\n", "\n", "", "", "return", "pred", ",", "real", "\n", "", "def", "BA_shape", "(", "file", ")", ":", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.SynData.BA_shape": [[289, 309], ["networkx.convert_matrix.from_numpy_array", "nx.convert_matrix.from_numpy_array.nodes", "torch_geometric.utils.from_networkx", "open", "pickle.load", "numpy.asarray", "networkx.degree", "networkx.triangles"], "function", ["None"], ["", "def", "BA_shape", "(", "file", ")", ":", "\n", "\n", "    ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fin", ":", "\n", "        ", "adj", ",", "features", ",", "y_train", ",", "y_val", ",", "y_test", ",", "train_mask", ",", "val_mask", ",", "test_mask", ",", "edge_label_matrix", "=", "pkl", ".", "load", "(", "fin", ")", "\n", "\n", "", "y", "=", "(", "y_train", "+", "y_test", "+", "y_val", ")", ".", "nonzero", "(", ")", "[", "1", "]", "\n", "\n", "\n", "G", "=", "nx", ".", "convert_matrix", ".", "from_numpy_array", "(", "adj", ")", "\n", "features", "=", "[", "]", "\n", "for", "i", "in", "G", ".", "nodes", "(", ")", ":", "\n", "        ", "G", ".", "nodes", "[", "i", "]", "[", "'x'", "]", "=", "np", ".", "asarray", "(", "[", "nx", ".", "degree", "(", "G", ",", "i", ")", ",", "nx", ".", "triangles", "(", "G", ",", "i", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "G", ".", "nodes", "[", "i", "]", "[", "'train_mask'", "]", "=", "train_mask", "[", "i", "]", "\n", "G", ".", "nodes", "[", "i", "]", "[", "'val_mask'", "]", "=", "val_mask", "[", "i", "]", "\n", "G", ".", "nodes", "[", "i", "]", "[", "'test_mask'", "]", "=", "test_mask", "[", "i", "]", "\n", "G", ".", "nodes", "[", "i", "]", "[", "'y'", "]", "=", "y", "[", "i", "]", "\n", "\n", "", "data", "=", "from_networkx", "(", "G", ")", "\n", "\n", "return", "data", ",", "edge_label_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.__init__": [[38, 53], ["name.lower", "os.expanduser", "os.expanduser", "os.join", "os.join", "dataset.Dataset.load_data", "dataset.Dataset.get_train_val_test", "os.normpath", "os.normpath"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.load_data", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.get_train_val_test"], ["def", "__init__", "(", "self", ",", "root", ",", "name", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", ".", "lower", "(", ")", "\n", "\n", "assert", "self", ".", "name", "in", "[", "'cora'", ",", "'citeseer'", ",", "'cora_ml'", ",", "'polblogs'", ",", "'pubmed'", "]", ",", "'Currently only support cora, citeseer, cora_ml, polblogs, pubmed'", "\n", "\n", "self", ".", "seed", "=", "seed", "\n", "\n", "self", ".", "url", "=", "'https://raw.githubusercontent.com/danielzuegner/gnn-meta-attack/master/data/%s.npz'", "%", "self", ".", "name", "\n", "self", ".", "root", "=", "osp", ".", "expanduser", "(", "osp", ".", "normpath", "(", "root", ")", ")", "\n", "self", ".", "data_folder", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "name", ")", "\n", "self", ".", "data_filename", "=", "self", ".", "data_folder", "+", "'.npz'", "\n", "\n", "self", ".", "adj", ",", "self", ".", "features", ",", "self", ".", "labels", "=", "self", ".", "load_data", "(", ")", "\n", "self", ".", "idx_train", ",", "self", ".", "idx_val", ",", "self", ".", "idx_test", "=", "self", ".", "get_train_val_test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.get_train_val_test": [[54, 58], ["utils.get_train_val_test"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.utils.get_train_val_test"], ["", "def", "get_train_val_test", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get training, validation, test splits\n        \"\"\"", "\n", "return", "get_train_val_test", "(", "nnodes", "=", "self", ".", "adj", ".", "shape", "[", "0", "]", ",", "val_size", "=", "0.1", ",", "test_size", "=", "0.8", ",", "stratify", "=", "self", ".", "labels", ",", "seed", "=", "self", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.load_data": [[59, 69], ["print", "dataset.Dataset.get_adj", "dataset.Dataset.load_pubmed", "os.exists", "os.exists", "dataset.Dataset.download_npz"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.get_adj", "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.load_pubmed", "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.download_npz"], ["", "def", "load_data", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Loading {} dataset...'", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "if", "self", ".", "name", "==", "'pubmed'", ":", "\n", "            ", "return", "self", ".", "load_pubmed", "(", ")", "\n", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "data_filename", ")", ":", "\n", "            ", "self", ".", "download_npz", "(", ")", "\n", "\n", "", "adj", ",", "features", ",", "labels", "=", "self", ".", "get_adj", "(", ")", "\n", "return", "adj", ",", "features", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.download_npz": [[70, 78], ["print", "urllib.request.urlretrieve", "Exception"], "methods", ["None"], ["", "def", "download_npz", "(", "self", ")", ":", "\n", "        ", "\"\"\"Download adjacen matrix npz file from self.url.\n        \"\"\"", "\n", "print", "(", "'Dowloading from {} to {}'", ".", "format", "(", "self", ".", "url", ",", "self", ".", "data_filename", ")", ")", "\n", "try", ":", "\n", "            ", "urllib", ".", "request", ".", "urlretrieve", "(", "self", ".", "url", ",", "self", ".", "data_filename", ")", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "'''Download failed! Make sure you have stable Internet connection and enter the right name'''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.download_pubmed": [[79, 85], ["urllib.request.urlretrieve", "os.join", "os.join", "Exception"], "methods", ["None"], ["", "", "def", "download_pubmed", "(", "self", ",", "name", ")", ":", "\n", "        ", "url", "=", "'https://raw.githubusercontent.com/tkipf/gcn/master/gcn/data/'", "\n", "try", ":", "\n", "            ", "urllib", ".", "request", ".", "urlretrieve", "(", "url", "+", "name", ",", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ")", ")", "\n", "", "except", ":", "\n", "            ", "raise", "Exception", "(", "'''Download failed! Make sure you have stable Internet connection and enter the right name'''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.load_pubmed": [[87, 121], ["range", "tuple", "dataset.parse_index_file", "numpy.sort", "scipy.vstack().tolil", "networkx.adjacency_matrix", "numpy.vstack", "len", "os.join", "os.join", "os.exists", "os.exists", "dataset.Dataset.download_pubmed", "os.join", "os.join", "networkx.from_dict_of_lists", "numpy.where", "os.exists", "os.exists", "dataset.Dataset.download_pubmed", "open", "os.join", "os.join", "scipy.vstack", "objects.append", "objects.append", "pickle.load", "pickle.load"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.parse_index_file", "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.download_pubmed", "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.download_pubmed"], ["", "", "def", "load_pubmed", "(", "self", ")", ":", "\n", "        ", "dataset", "=", "'pubmed'", "\n", "names", "=", "[", "'x'", ",", "'y'", ",", "'tx'", ",", "'ty'", ",", "'allx'", ",", "'ally'", ",", "'graph'", "]", "\n", "objects", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "names", ")", ")", ":", "\n", "            ", "name", "=", "\"ind.{}.{}\"", ".", "format", "(", "dataset", ",", "names", "[", "i", "]", ")", "\n", "data_filename", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "name", ")", "\n", "\n", "if", "not", "osp", ".", "exists", "(", "data_filename", ")", ":", "\n", "                ", "self", ".", "download_pubmed", "(", "name", ")", "\n", "\n", "", "with", "open", "(", "data_filename", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", ">", "(", "3", ",", "0", ")", ":", "\n", "                    ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", ")", "\n", "", "else", ":", "\n", "                    ", "objects", ".", "append", "(", "pkl", ".", "load", "(", "f", ")", ")", "\n", "\n", "", "", "", "x", ",", "y", ",", "tx", ",", "ty", ",", "allx", ",", "ally", ",", "graph", "=", "tuple", "(", "objects", ")", "\n", "\n", "\n", "test_idx_file", "=", "\"ind.{}.test.index\"", ".", "format", "(", "dataset", ")", "\n", "if", "not", "osp", ".", "exists", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "test_idx_file", ")", ")", ":", "\n", "            ", "self", ".", "download_pubmed", "(", "test_idx_file", ")", "\n", "\n", "", "test_idx_reorder", "=", "parse_index_file", "(", "osp", ".", "join", "(", "self", ".", "root", ",", "test_idx_file", ")", ")", "\n", "test_idx_range", "=", "np", ".", "sort", "(", "test_idx_reorder", ")", "\n", "\n", "features", "=", "sp", ".", "vstack", "(", "(", "allx", ",", "tx", ")", ")", ".", "tolil", "(", ")", "\n", "features", "[", "test_idx_reorder", ",", ":", "]", "=", "features", "[", "test_idx_range", ",", ":", "]", "\n", "adj", "=", "nx", ".", "adjacency_matrix", "(", "nx", ".", "from_dict_of_lists", "(", "graph", ")", ")", "\n", "labels", "=", "np", ".", "vstack", "(", "(", "ally", ",", "ty", ")", ")", "\n", "labels", "[", "test_idx_reorder", ",", ":", "]", "=", "labels", "[", "test_idx_range", ",", ":", "]", "\n", "labels", "=", "np", ".", "where", "(", "labels", ")", "[", "1", "]", "\n", "return", "adj", ",", "features", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.get_adj": [[122, 143], ["dataset.Dataset.load_npz", "adj.astype().tocsr.astype().tocsr.tolil", "dataset.Dataset.largest_connected_components", "adj.astype().tocsr.astype().tocsr.setdiag", "adj.astype().tocsr.astype().tocsr.astype().tocsr", "adj.astype().tocsr.astype().tocsr.eliminate_zeros", "adj.astype().tocsr.astype().tocsr.sum().A1.min", "numpy.abs().sum", "adj.astype().tocsr.astype().tocsr.astype", "adj.astype().tocsr.astype().tocsr.max", "len", "numpy.abs", "numpy.unique", "adj.astype().tocsr.astype().tocsr.sum", "adj.astype().tocsr.astype().tocsr.nonzero"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.load_npz", "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.largest_connected_components"], ["", "def", "get_adj", "(", "self", ")", ":", "\n", "        ", "adj", ",", "features", ",", "labels", "=", "self", ".", "load_npz", "(", "self", ".", "data_filename", ")", "\n", "adj", "=", "adj", "+", "adj", ".", "T", "\n", "adj", "=", "adj", ".", "tolil", "(", ")", "\n", "adj", "[", "adj", ">", "1", "]", "=", "1", "\n", "\n", "lcc", "=", "self", ".", "largest_connected_components", "(", "adj", ")", "\n", "adj", "=", "adj", "[", "lcc", "]", "[", ":", ",", "lcc", "]", "\n", "features", "=", "features", "[", "lcc", "]", "\n", "labels", "=", "labels", "[", "lcc", "]", "\n", "assert", "adj", ".", "sum", "(", "0", ")", ".", "A1", ".", "min", "(", ")", ">", "0", ",", "\"Graph contains singleton nodes\"", "\n", "\n", "# whether to set diag=0?", "\n", "adj", ".", "setdiag", "(", "0", ")", "\n", "adj", "=", "adj", ".", "astype", "(", "\"float32\"", ")", ".", "tocsr", "(", ")", "\n", "adj", ".", "eliminate_zeros", "(", ")", "\n", "\n", "assert", "np", ".", "abs", "(", "adj", "-", "adj", ".", "T", ")", ".", "sum", "(", ")", "==", "0", ",", "\"Input graph is not symmetric\"", "\n", "assert", "adj", ".", "max", "(", ")", "==", "1", "and", "len", "(", "np", ".", "unique", "(", "adj", "[", "adj", ".", "nonzero", "(", ")", "]", ".", "A1", ")", ")", "==", "1", ",", "\"Graph must be unweighted\"", "\n", "\n", "return", "adj", ",", "features", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.load_npz": [[144, 167], ["scipy.csr_matrix", "numpy.load", "numpy.eye", "scipy.csr_matrix", "loader.get", "loader.get", "scipy.csr_matrix"], "methods", ["None"], ["", "def", "load_npz", "(", "self", ",", "file_name", ",", "is_sparse", "=", "True", ")", ":", "\n", "        ", "with", "np", ".", "load", "(", "file_name", ")", "as", "loader", ":", "\n", "# loader = dict(loader)", "\n", "            ", "if", "is_sparse", ":", "\n", "                ", "adj", "=", "sp", ".", "csr_matrix", "(", "(", "loader", "[", "'adj_data'", "]", ",", "loader", "[", "'adj_indices'", "]", ",", "\n", "loader", "[", "'adj_indptr'", "]", ")", ",", "shape", "=", "loader", "[", "'adj_shape'", "]", ")", "\n", "if", "'attr_data'", "in", "loader", ":", "\n", "                    ", "features", "=", "sp", ".", "csr_matrix", "(", "(", "loader", "[", "'attr_data'", "]", ",", "loader", "[", "'attr_indices'", "]", ",", "\n", "loader", "[", "'attr_indptr'", "]", ")", ",", "shape", "=", "loader", "[", "'attr_shape'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "features", "=", "None", "\n", "", "labels", "=", "loader", ".", "get", "(", "'labels'", ")", "\n", "", "else", ":", "\n", "                ", "adj", "=", "loader", "[", "'adj_data'", "]", "\n", "if", "'attr_data'", "in", "loader", ":", "\n", "                    ", "features", "=", "loader", "[", "'attr_data'", "]", "\n", "", "else", ":", "\n", "                    ", "features", "=", "None", "\n", "", "labels", "=", "loader", ".", "get", "(", "'labels'", ")", "\n", "", "", "if", "features", "is", "None", ":", "\n", "            ", "features", "=", "np", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "\n", "", "features", "=", "sp", ".", "csr_matrix", "(", "features", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "adj", ",", "features", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.largest_connected_components": [[168, 186], ["scipy.csgraph.connected_components", "numpy.bincount", "print", "numpy.argsort", "enumerate"], "methods", ["None"], ["", "def", "largest_connected_components", "(", "self", ",", "adj", ",", "n_components", "=", "1", ")", ":", "\n", "        ", "\"\"\"Select k largest connected components.\n\n\t\tParameters\n\t\t----------\n\t\tadj : scipy.sparse.csr_matrix\n\t\t\tinput adjacency matrix\n\t\tn_components : int\n\t\t\tn largest connected components we want to select\n\t\t\"\"\"", "\n", "\n", "_", ",", "component_indices", "=", "sp", ".", "csgraph", ".", "connected_components", "(", "adj", ")", "\n", "component_sizes", "=", "np", ".", "bincount", "(", "component_indices", ")", "\n", "components_to_keep", "=", "np", ".", "argsort", "(", "component_sizes", ")", "[", ":", ":", "-", "1", "]", "[", ":", "n_components", "]", "# reverse order to sort descending", "\n", "nodes_to_keep", "=", "[", "\n", "idx", "for", "(", "idx", ",", "component", ")", "in", "enumerate", "(", "component_indices", ")", "if", "component", "in", "components_to_keep", "]", "\n", "print", "(", "\"Selecting {0} largest connected components\"", ".", "format", "(", "n_components", ")", ")", "\n", "return", "nodes_to_keep", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.__repr__": [[187, 189], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{0}(adj_shape={1}, feature_shape={2})'", ".", "format", "(", "self", ".", "name", ",", "self", ".", "adj", ".", "shape", ",", "self", ".", "features", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.Dataset.onehot": [[190, 194], ["numpy.identity", "labels.max"], "methods", ["None"], ["", "def", "onehot", "(", "self", ",", "labels", ")", ":", "\n", "        ", "eye", "=", "np", ".", "identity", "(", "labels", ".", "max", "(", ")", "+", "1", ")", "\n", "onehot_mx", "=", "eye", "[", "labels", "]", "\n", "return", "onehot_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.TrainLoader.__init__": [[233, 246], ["numpy.arange", "len", "torch.logical_not().cpu().numpy", "torch.logical_not().cpu", "torch.logical_not"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_mask", ",", "edge_index", ",", "sample_size", ",", "N_node", "=", "50", ",", "N_edge", "=", "100", ",", "hop", "=", "1", ",", "device", "=", "None", ")", ":", "\n", "\n", "        ", "self", ".", "edge_index", "=", "edge_index", "\n", "\n", "self", ".", "node_idx", "=", "np", ".", "arange", "(", "len", "(", "train_mask", ")", ")", "[", "torch", ".", "logical_not", "(", "train_mask", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "self", ".", "train_mask", "=", "train_mask", "\n", "self", ".", "sample_size", "=", "sample_size", "\n", "self", ".", "hop", "=", "hop", "\n", "self", ".", "N_edge", "=", "N_edge", "\n", "\n", "if", "device", "==", "None", ":", "\n", "            ", "device", "=", "train_mask", ".", "device", "\n", "", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.TrainLoader.get_unlabeled": [[247, 317], ["numpy.random.choice", "numpy.random.choice.copy", "numpy.random.shuffle", "torch.tensor", "torch.tensor", "enumerate", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_geometric.utils.k_hop_subgraph", "torch.cat.append", "torch.cat.append", "numpy.meshgrid", "torch.tensor", "torch.tensor", "all_x_pos.append", "all_y_pos.append", "numpy.meshgrid", "torch.tensor", "torch.tensor", "all_x_neg.append", "all_y_neg.append", "int", "numpy.arange", "numpy.arange", "torch.tensor.flatten", "torch.tensor.flatten", "numpy.arange", "numpy.arange", "torch.tensor.flatten", "torch.tensor.flatten"], "methods", ["None"], ["", "def", "get_unlabeled", "(", "self", ")", ":", "\n", "\n", "        ", "hop", "=", "self", ".", "hop", "\n", "device", "=", "self", ".", "device", "\n", "edge_index", "=", "self", ".", "edge_index", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "node_idx", ",", "self", ".", "sample_size", ",", "replace", "=", "False", ")", "\n", "\n", "neg_idx", "=", "idx", ".", "copy", "(", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "neg_idx", ")", "\n", "\n", "nodes", "=", "torch", ".", "tensor", "(", "idx", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "neg_nodes", "=", "torch", ".", "tensor", "(", "neg_idx", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "all_subgraphs", "=", "{", "}", "\n", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "neg_idx", ")", ":", "\n", "            ", "neighbors", ",", "subgraphs", ",", "_", ",", "_", "=", "k_hop_subgraph", "(", "int", "(", "node", ")", ",", "hop", ",", "edge_index", ")", "\n", "\n", "subgraphs", "=", "subgraphs", "[", ":", ",", "subgraphs", "[", "1", "]", ">=", "subgraphs", "[", "0", "]", "]", "\n", "\n", "all_subgraphs", "[", "node", "]", "=", "subgraphs", "\n", "\n", "", "pos_subgraphs", "=", "[", "]", "\n", "neg_subgraphs", "=", "[", "]", "\n", "\n", "p_n", "=", "0", "\n", "n_n", "=", "0", "\n", "\n", "all_x_pos", "=", "[", "]", "\n", "all_y_pos", "=", "[", "]", "\n", "\n", "all_x_neg", "=", "[", "]", "\n", "all_y_neg", "=", "[", "]", "\n", "\n", "for", "idx", ",", "neg_idx", "in", "zip", "(", "idx", ",", "neg_idx", ")", ":", "\n", "\n", "            ", "pos_subgraphs", ".", "append", "(", "all_subgraphs", "[", "idx", "]", ")", "\n", "neg_subgraphs", ".", "append", "(", "all_subgraphs", "[", "neg_idx", "]", ")", "\n", "\n", "p_l", "=", "all_subgraphs", "[", "idx", "]", ".", "shape", "[", "1", "]", "\n", "n_l", "=", "all_subgraphs", "[", "neg_idx", "]", ".", "shape", "[", "1", "]", "\n", "\n", "x_pos", ",", "y_pos", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "p_n", ",", "p_n", "+", "p_l", ")", ",", "np", ".", "arange", "(", "p_n", ",", "p_n", "+", "p_l", ")", ",", "indexing", "=", "'ij'", ")", "\n", "\n", "x_pos", "=", "torch", ".", "tensor", "(", "x_pos", ".", "flatten", "(", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "y_pos", "=", "torch", ".", "tensor", "(", "y_pos", ".", "flatten", "(", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "all_x_pos", ".", "append", "(", "x_pos", ")", "\n", "all_y_pos", ".", "append", "(", "y_pos", ")", "\n", "\n", "x_neg", ",", "y_neg", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "p_n", ",", "p_n", "+", "p_l", ")", ",", "np", ".", "arange", "(", "n_n", ",", "n_n", "+", "n_l", ")", ",", "indexing", "=", "'ij'", ")", "\n", "\n", "x_neg", "=", "torch", ".", "tensor", "(", "x_neg", ".", "flatten", "(", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "y_neg", "=", "torch", ".", "tensor", "(", "y_neg", ".", "flatten", "(", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "all_x_neg", ".", "append", "(", "x_neg", ")", "\n", "all_y_neg", ".", "append", "(", "y_neg", ")", "\n", "\n", "p_n", "+=", "p_l", "\n", "n_n", "+=", "n_l", "\n", "\n", "\n", "", "pos_subgraphs", "=", "torch", ".", "cat", "(", "pos_subgraphs", ",", "dim", "=", "1", ")", "\n", "neg_subgraphs", "=", "torch", ".", "cat", "(", "neg_subgraphs", ",", "dim", "=", "1", ")", "\n", "x_pos", "=", "torch", ".", "cat", "(", "all_x_pos", ")", "\n", "y_pos", "=", "torch", ".", "cat", "(", "all_y_pos", ")", "\n", "x_neg", "=", "torch", ".", "cat", "(", "all_x_neg", ")", "\n", "y_neg", "=", "torch", ".", "cat", "(", "all_y_neg", ")", "\n", "\n", "return", "nodes", ",", "neg_nodes", ",", "pos_subgraphs", ",", "neg_subgraphs", ",", "x_pos", ",", "y_pos", ",", "x_neg", ",", "y_neg", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.TrainLoader.get_pert_edge": [[318, 333], ["negative_sampling", "numpy.random.choice", "to_undirected", "int", "torch.cat", "int", "len", "len"], "methods", ["None"], ["", "def", "get_pert_edge", "(", "self", ",", "p", "=", "0.1", ")", ":", "\n", "\n", "        ", "from", "torch_geometric", ".", "utils", "import", "negative_sampling", ",", "to_undirected", "\n", "\n", "neg_edge", "=", "negative_sampling", "(", "self", ".", "edge_index", ",", "num_neg_samples", "=", "int", "(", "p", "*", "self", ".", "edge_index", ".", "shape", "[", "1", "]", ")", ",", "force_undirected", "=", "True", ")", "\n", "neg_edge", "=", "neg_edge", "[", ":", ",", "(", "neg_edge", "[", "0", "]", ">=", "0", ")", "&", "(", "neg_edge", "[", "1", "]", ">=", "0", ")", "]", "\n", "neg_edge", "=", "neg_edge", "[", ":", ",", "(", "neg_edge", "[", "0", "]", "<", "len", "(", "self", ".", "train_mask", ")", ")", "&", "(", "neg_edge", "[", "1", "]", "<", "len", "(", "self", ".", "train_mask", ")", ")", "]", "\n", "unique_edge", "=", "self", ".", "edge_index", "[", ":", ",", "self", ".", "edge_index", "[", "0", "]", ">=", "self", ".", "edge_index", "[", "1", "]", "]", "\n", "index", "=", "np", ".", "random", ".", "choice", "(", "unique_edge", ".", "shape", "[", "1", "]", ",", "int", "(", "(", "1", "-", "p", ")", "*", "unique_edge", ".", "shape", "[", "1", "]", ")", ",", "replace", "=", "False", ")", "\n", "\n", "common_edge", "=", "unique_edge", "[", ":", ",", "index", "]", "\n", "\n", "pert_edge_index", "=", "to_undirected", "(", "torch", ".", "cat", "(", "[", "common_edge", ",", "neg_edge", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "pert_edge_index", ",", "common_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.TrainLoader.get_train": [[334, 361], ["numpy.random.choice", "torch.tensor", "dataset.TrainLoader.get_pert_edge", "numpy.random.choice", "torch.stack", "len", "numpy.random.choice", "torch.stack.append"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.TrainLoader.get_pert_edge"], ["", "def", "get_train", "(", "self", ")", ":", "\n", "\n", "        ", "node_idx", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "train_mask", ")", ",", "self", ".", "sample_size", ",", "replace", "=", "False", ")", "\n", "# unlabeled_nodes = get_batch(idx, self.edge_index, self.hop, self.device)", "\n", "\n", "nodes", "=", "torch", ".", "tensor", "(", "node_idx", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "\n", "unique_edge", "=", "self", ".", "edge_index", "[", ":", ",", "self", ".", "edge_index", "[", "0", "]", ">=", "self", ".", "edge_index", "[", "1", "]", "]", "\n", "\n", "pert_edge_index", ",", "common_edge", "=", "self", ".", "get_pert_edge", "(", ")", "\n", "\n", "edge_index", "=", "np", ".", "random", ".", "choice", "(", "common_edge", ".", "shape", "[", "1", "]", ",", "4", "*", "self", ".", "sample_size", ",", "replace", "=", "False", ")", "\n", "edges", "=", "common_edge", "[", ":", ",", "edge_index", "]", "\n", "\n", "# neg_edges = self.edge_index", "\n", "neg_unique_edge", "=", "pert_edge_index", "[", ":", ",", "pert_edge_index", "[", "0", "]", ">=", "pert_edge_index", "[", "1", "]", "]", "\n", "\n", "neg_edges", "=", "[", "]", "\n", "for", "index", "in", "edge_index", ":", "\n", "            ", "mask", "=", "(", "neg_unique_edge", "[", "0", "]", "!=", "common_edge", "[", "0", ",", "index", "]", ")", "|", "(", "neg_unique_edge", "[", "1", "]", "!=", "common_edge", "[", "1", ",", "index", "]", ")", "\n", "\n", "neg_edges_row", "=", "np", ".", "random", ".", "choice", "(", "neg_unique_edge", ".", "shape", "[", "1", "]", "-", "1", ",", "self", ".", "N_edge", ",", "replace", "=", "True", ")", "\n", "neg_edges", ".", "append", "(", "neg_unique_edge", "[", ":", ",", "mask", "]", "[", ":", ",", "neg_edges_row", "]", ")", "\n", "", "neg_edges", "=", "torch", ".", "stack", "(", "neg_edges", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "nodes", ",", "edges", ",", "neg_edges", ",", "pert_edge_index", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.TestLoader.__init__": [[364, 377], ["range", "numpy.arange", "len", "dataset.TestLoader.data.append", "len", "test_mask.cpu().numpy", "dataset.get_batch", "test_mask.cpu"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.get_batch"], ["    ", "def", "__init__", "(", "self", ",", "test_mask", ",", "edge_index", ",", "sample_size", ",", "hop", "=", "1", ",", "device", "=", "None", ")", ":", "\n", "        ", "self", ".", "edge_index", "=", "edge_index", "\n", "self", ".", "sample_size", "=", "sample_size", "\n", "self", ".", "hop", "=", "hop", "\n", "self", ".", "test_idx", "=", "np", ".", "arange", "(", "len", "(", "test_mask", ")", ")", "[", "test_mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "if", "device", "==", "None", ":", "\n", "            ", "device", "=", "test_mask", ".", "device", "\n", "", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "data", "=", "[", "]", "\n", "for", "item", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "idx", "=", "self", ".", "test_idx", "[", "sample_size", "*", "item", ":", "sample_size", "*", "(", "item", "+", "1", ")", "]", "\n", "self", ".", "data", ".", "append", "(", "get_batch", "(", "idx", ",", "self", ".", "edge_index", ",", "self", ".", "hop", ",", "self", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.TestLoader.__len__": [[378, 383], ["len", "len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "test_idx", ")", "%", "self", ".", "sample_size", "==", "0", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_idx", ")", "//", "self", ".", "sample_size", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_idx", ")", "//", "self", ".", "sample_size", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.TestLoader.__getitem__": [[384, 387], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "\n", "        ", "return", "self", ".", "data", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.parse_index_file": [[195, 200], ["open", "index.append", "int", "line.strip"], "function", ["None"], ["", "", "def", "parse_index_file", "(", "filename", ")", ":", "\n", "    ", "index", "=", "[", "]", "\n", "for", "line", "in", "open", "(", "filename", ")", ":", "\n", "        ", "index", ".", "append", "(", "int", "(", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.get_batch": [[201, 225], ["torch.tensor", "torch_geometric.utils.is_undirected", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_geometric.utils.k_hop_subgraph", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "int", "torch.full", "torch.full", "len"], "function", ["None"], ["", "def", "get_batch", "(", "idx", ",", "edge_index", ",", "hop", ",", "device", ")", ":", "\n", "        ", "nodes", "=", "torch", ".", "tensor", "(", "idx", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "\n", "all_neighbors", "=", "[", "]", "\n", "all_subgraphs", "=", "[", "]", "\n", "batch_n", "=", "[", "]", "\n", "batch_g", "=", "[", "]", "\n", "undirected", "=", "is_undirected", "(", "edge_index", ")", "\n", "for", "i", ",", "node", "in", "enumerate", "(", "nodes", ")", ":", "\n", "            ", "neighbors", ",", "subgraphs", ",", "_", ",", "_", "=", "k_hop_subgraph", "(", "int", "(", "node", ")", ",", "hop", ",", "edge_index", ")", "\n", "# if undirected:", "\n", "subgraphs", "=", "subgraphs", "[", ":", ",", "subgraphs", "[", "1", "]", ">=", "subgraphs", "[", "0", "]", "]", "\n", "all_neighbors", ".", "append", "(", "neighbors", ")", "\n", "all_subgraphs", ".", "append", "(", "subgraphs", ")", "\n", "# print(subgraphs.shape)", "\n", "batch_n", ".", "append", "(", "torch", ".", "full", "(", "[", "len", "(", "neighbors", ")", "]", ",", "i", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", ")", "\n", "batch_g", ".", "append", "(", "torch", ".", "full", "(", "[", "subgraphs", ".", "shape", "[", "1", "]", "]", ",", "i", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", ")", "\n", "\n", "", "all_neighbors", "=", "torch", ".", "cat", "(", "all_neighbors", ")", "\n", "all_subgraphs", "=", "torch", ".", "cat", "(", "all_subgraphs", ",", "dim", "=", "1", ")", "\n", "batch_n", "=", "torch", ".", "cat", "(", "batch_n", ")", "\n", "batch_g", "=", "torch", ".", "cat", "(", "batch_g", ")", "\n", "\n", "return", "nodes", ",", "all_neighbors", ",", "batch_n", ",", "all_subgraphs", ",", "batch_g", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.get_labeled": [[226, 230], ["dataset.get_batch", "numpy.arange", "len", "train_mask.cpu().numpy", "train_mask.cpu"], "function", ["home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.get_batch"], ["", "def", "get_labeled", "(", "train_mask", ",", "edge_index", ",", "hop", ",", "device", ")", ":", "\n", "\n", "    ", "train_idx", "=", "np", ".", "arange", "(", "len", "(", "train_mask", ")", ")", "[", "train_mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "return", "get_batch", "(", "train_idx", ",", "edge_index", ",", "hop", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.tensor2onehot": [[5, 20], ["labels.long.long", "torch.eye", "onehot_mx.to", "labels.long.max"], "function", ["None"], ["def", "tensor2onehot", "(", "labels", ")", ":", "\n", "    ", "\"\"\"Convert label tensor to label onehot tensor.\n    Parameters\n    ----------\n    labels : torch.LongTensor\n        node labels\n    Returns\n    -------\n    torch.LongTensor\n        onehot labels tensor\n    \"\"\"", "\n", "labels", "=", "labels", ".", "long", "(", ")", "\n", "eye", "=", "torch", ".", "eye", "(", "labels", ".", "max", "(", ")", "+", "1", ")", "\n", "onehot_mx", "=", "eye", "[", "labels", "]", "\n", "return", "onehot_mx", ".", "to", "(", "labels", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.accuracy": [[21, 42], ["[].type_as", "[].type_as.eq().double", "correct.sum.sum", "hasattr", "type", "torch.LongTensor", "len", "[].type_as.eq", "output.max"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "labels", ")", ":", "\n", "    ", "\"\"\"Return accuracy of output compared to labels.\n    Parameters\n    ----------\n    output : torch.Tensor\n        output from model\n    labels : torch.Tensor or numpy.array\n        node labels\n    Returns\n    -------\n    float\n        accuracy\n    \"\"\"", "\n", "if", "not", "hasattr", "(", "labels", ",", "'__len__'", ")", ":", "\n", "        ", "labels", "=", "[", "labels", "]", "\n", "", "if", "type", "(", "labels", ")", "is", "not", "torch", ".", "Tensor", ":", "\n", "        ", "labels", "=", "torch", ".", "LongTensor", "(", "labels", ")", "\n", "", "preds", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", ".", "type_as", "(", "labels", ")", "\n", "correct", "=", "preds", ".", "eq", "(", "labels", ")", ".", "double", "(", ")", "\n", "correct", "=", "correct", ".", "sum", "(", ")", "\n", "return", "correct", "/", "len", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.sparse_mx_to_torch_sparse_tensor": [[43, 51], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.LongTensor().unsqueeze", "torch.LongTensor().unsqueeze", "torch.cat", "torch.FloatTensor", "torch.sparse.FloatTensor", "torch.cat.t", "torch.Size", "sparse_mx.tocoo().astype.tocoo", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sparserow", "=", "torch", ".", "LongTensor", "(", "sparse_mx", ".", "row", ")", ".", "unsqueeze", "(", "1", ")", "\n", "sparsecol", "=", "torch", ".", "LongTensor", "(", "sparse_mx", ".", "col", ")", ".", "unsqueeze", "(", "1", ")", "\n", "sparseconcat", "=", "torch", ".", "cat", "(", "(", "sparserow", ",", "sparsecol", ")", ",", "1", ")", "\n", "sparsedata", "=", "torch", ".", "FloatTensor", "(", "sparse_mx", ".", "data", ")", "\n", "return", "torch", ".", "sparse", ".", "FloatTensor", "(", "sparseconcat", ".", "t", "(", ")", ",", "sparsedata", ",", "torch", ".", "Size", "(", "sparse_mx", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.idx_to_mask": [[52, 56], ["torch.zeros"], "function", ["None"], ["", "def", "idx_to_mask", "(", "indices", ",", "n", ")", ":", "\n", "    ", "mask", "=", "torch", ".", "zeros", "(", "n", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "mask", "[", "indices", "]", "=", "True", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.attribute_mask": [[60, 68], ["copy.deepcopy", "numpy.random.binomial", "np.random.binomial.nonzero"], "function", ["None"], ["", "def", "attribute_mask", "(", "features", ",", "drop_rate", ")", ":", "\n", "    ", "import", "copy", "\n", "features", "=", "copy", ".", "deepcopy", "(", "features", ")", "\n", "mask", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "drop_rate", ",", "size", "=", "features", ".", "shape", ")", "\n", "# mask = torch.tensor(mask, device=features.device)", "\n", "features", "[", "mask", ".", "nonzero", "(", ")", "]", "=", "0", "\n", "\n", "return", "features", "\n", "", "def", "get_splits_each_class", "(", "labels", ",", "train_size", "=", "50", ",", "val_size", "=", "100", ",", "test_size", "=", "500", ")", ":", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.get_splits_each_class": [[68, 86], ["numpy.random.seed", "numpy.arange", "range", "len", "labels.max", "numpy.random.permutation", "numpy.hstack().astype", "numpy.hstack().astype", "numpy.hstack().astype", "utils.idx_to_mask", "utils.idx_to_mask", "utils.idx_to_mask", "len", "len", "len", "numpy.hstack", "numpy.hstack", "numpy.hstack"], "function", ["home.repos.pwc.inspect_result.enyandai_segnn.None.utils.idx_to_mask", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.idx_to_mask", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.idx_to_mask"], ["", "def", "get_splits_each_class", "(", "labels", ",", "train_size", "=", "50", ",", "val_size", "=", "100", ",", "test_size", "=", "500", ")", ":", "\n", "    ", "\"\"\"We randomly sample n instances for class, where n = train_size.\n    \"\"\"", "\n", "np", ".", "random", ".", "seed", "(", "15", ")", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "\n", "nclass", "=", "labels", ".", "max", "(", ")", "+", "1", "\n", "idx_train", "=", "[", "]", "\n", "idx_val", "=", "[", "]", "\n", "idx_test", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nclass", ")", ":", "\n", "        ", "labels_i", "=", "idx", "[", "labels", "==", "i", "]", "\n", "labels_i", "=", "np", ".", "random", ".", "permutation", "(", "labels_i", ")", "\n", "idx_train", "=", "np", ".", "hstack", "(", "(", "idx_train", ",", "labels_i", "[", ":", "train_size", "]", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "idx_val", "=", "np", ".", "hstack", "(", "(", "idx_val", ",", "labels_i", "[", "train_size", ":", "train_size", "+", "val_size", "]", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "idx_test", "=", "np", ".", "hstack", "(", "(", "idx_test", ",", "labels_i", "[", "train_size", "+", "val_size", ":", "train_size", "+", "val_size", "+", "test_size", "]", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "", "return", "idx_to_mask", "(", "idx_train", ",", "len", "(", "labels", ")", ")", ",", "idx_to_mask", "(", "idx_val", ",", "len", "(", "labels", ")", ")", ",", "idx_to_mask", "(", "idx_test", ",", "len", "(", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.get_train_val_test": [[89, 139], ["numpy.arange", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "numpy.random.seed"], "function", ["None"], ["def", "get_train_val_test", "(", "nnodes", ",", "val_size", "=", "0.1", ",", "test_size", "=", "0.8", ",", "stratify", "=", "None", ",", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"This setting follows nettack/mettack, where we split the nodes\n    into 10% training, 10% validation and 80% testing data\n\n    Parameters\n    ----------\n    nnodes : int\n        number of nodes in total\n    val_size : float\n        size of validation set\n    test_size : float\n        size of test set\n    stratify :\n        data is expected to split in a stratified fashion. So stratify should be labels.\n    seed : int or None\n        random seed\n\n    Returns\n    -------\n    idx_train :\n        node training indices\n    idx_val :\n        node validation indices\n    idx_test :\n        node test indices\n    \"\"\"", "\n", "\n", "assert", "stratify", "is", "not", "None", ",", "'stratify cannot be None!'", "\n", "\n", "if", "seed", "is", "not", "None", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "", "idx", "=", "np", ".", "arange", "(", "nnodes", ")", "\n", "train_size", "=", "1", "-", "val_size", "-", "test_size", "\n", "idx_train_and_val", ",", "idx_test", "=", "train_test_split", "(", "idx", ",", "\n", "random_state", "=", "None", ",", "\n", "train_size", "=", "train_size", "+", "val_size", ",", "\n", "test_size", "=", "test_size", ",", "\n", "stratify", "=", "stratify", ")", "\n", "\n", "if", "stratify", "is", "not", "None", ":", "\n", "        ", "stratify", "=", "stratify", "[", "idx_train_and_val", "]", "\n", "\n", "", "idx_train", ",", "idx_val", "=", "train_test_split", "(", "idx_train_and_val", ",", "\n", "random_state", "=", "None", ",", "\n", "train_size", "=", "(", "train_size", "/", "(", "train_size", "+", "val_size", ")", ")", ",", "\n", "test_size", "=", "(", "val_size", "/", "(", "train_size", "+", "val_size", ")", ")", ",", "\n", "stratify", "=", "stratify", ")", "\n", "\n", "return", "idx_train", ",", "idx_val", ",", "idx_test", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.Entropy.__init__": [[12, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "Entropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.Entropy.forward": [[16, 21], ["pred.clamp.clamp.clamp", "loss.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "eps", "=", "self", ".", "eps", "\n", "pred", "=", "pred", ".", "clamp", "(", "eps", ",", "1", "-", "(", "pred", ".", "shape", "[", "1", "]", "-", "1", ")", "*", "eps", ")", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "target", "*", "torch", ".", "log", "(", "pred", ")", ",", "dim", "=", "1", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.Explainer.__init__": [[31, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nhid", ")", ":", "\n", "        ", "super", "(", "Explainer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.Explainer.explain": [[34, 43], ["edge_matrix.argmax", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist"], "methods", ["None"], ["", "def", "explain", "(", "self", ",", "h", ",", "node_edge", ",", "label_edge", ")", ":", "\n", "        ", "a", "=", "h", "\n", "edge_feature_n", "=", "(", "a", "[", "node_edge", "[", "0", "]", "]", "+", "a", "[", "node_edge", "[", "1", "]", "]", ")", "/", "2", "\n", "edge_feature_l", "=", "(", "a", "[", "label_edge", "[", "0", "]", "]", "+", "a", "[", "label_edge", "[", "1", "]", "]", ")", "/", "2", "\n", "edge_matrix", "=", "-", "torch", ".", "cdist", "(", "edge_feature_n", ",", "edge_feature_l", ")", "\n", "\n", "indices", "=", "edge_matrix", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "return", "label_edge", "[", ":", ",", "indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.Explainer.explain_structure": [[44, 55], ["torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist"], "methods", ["None"], ["", "def", "explain_structure", "(", "self", ",", "h", ",", "node_edge", ",", "label_edge", ")", ":", "\n", "\n", "        ", "a", "=", "h", "\n", "edge_feature_n", "=", "(", "a", "[", "node_edge", "[", "0", "]", "]", "+", "a", "[", "node_edge", "[", "1", "]", "]", ")", "/", "2", "\n", "edge_feature_l", "=", "(", "a", "[", "label_edge", "[", "0", "]", "]", "+", "a", "[", "label_edge", "[", "1", "]", "]", ")", "/", "2", "\n", "edge_matrix", "=", "-", "torch", ".", "cdist", "(", "edge_feature_n", ",", "edge_feature_l", ")", "\n", "\n", "score", ",", "_", "=", "torch", ".", "max", "(", "edge_matrix", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.Explainer.forward": [[58, 75], ["torch_scatter.scatter", "torch_scatter.scatter", "torch_scatter.scatter", "torch_scatter.scatter", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "nodes", ",", "label_nodes", ")", ":", "\n", "        ", "a", "=", "h", "\n", "\n", "edge_feature_n", "=", "(", "a", "[", "nodes", "[", "3", "]", "[", "0", "]", "]", "+", "a", "[", "nodes", "[", "3", "]", "[", "1", "]", "]", ")", "/", "2", "\n", "edge_feature_l", "=", "(", "a", "[", "label_nodes", "[", "3", "]", "[", "0", "]", "]", "+", "a", "[", "label_nodes", "[", "3", "]", "[", "1", "]", "]", ")", "/", "2", "\n", "\n", "edge_matrix", "=", "-", "torch", ".", "cdist", "(", "edge_feature_n", ",", "edge_feature_l", ")", "\n", "\n", "\n", "edge_out_n", "=", "scatter", "(", "edge_matrix", ",", "label_nodes", "[", "4", "]", ",", "dim", "=", "1", ",", "reduce", "=", "'max'", ")", "\n", "edge_out_n", "=", "scatter", "(", "edge_out_n", ",", "nodes", "[", "4", "]", ",", "dim", "=", "0", ",", "reduce", "=", "'mean'", ")", "\n", "\n", "edge_out_l", "=", "scatter", "(", "edge_matrix", ",", "nodes", "[", "4", "]", ",", "dim", "=", "0", ",", "reduce", "=", "'max'", ")", "\n", "edge_out_l", "=", "scatter", "(", "edge_out_l", ",", "label_nodes", "[", "4", "]", ",", "dim", "=", "1", ",", "reduce", "=", "'mean'", ")", "\n", "\n", "edge_out", "=", "(", "edge_out_n", "+", "edge_out_l", ")", "/", "2", "\n", "return", "edge_out", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.__init__": [[79, 104], ["torch.Module.__init__", "ExplainGNN.Explainer", "ExplainGNN.Entropy", "GCN", "MLP", "DeGNN"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "nfeat", ",", "device", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "ExplainGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "device", "is", "not", "None", ",", "\"Please specify 'device'!\"", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nfeat", "=", "nfeat", "\n", "self", ".", "nhid", "=", "args", ".", "hidden", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "if", "args", ".", "model", "==", "'GCN'", ":", "\n", "            ", "self", ".", "model", "=", "GCN", "(", "self", ".", "nfeat", ",", "self", ".", "nhid", ")", "\n", "", "elif", "args", ".", "model", "==", "'MLP'", ":", "\n", "            ", "self", ".", "model", "=", "MLP", "(", "self", ".", "nfeat", ",", "self", ".", "nhid", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "DeGNN", "(", "self", ".", "nfeat", ",", "self", ".", "nhid", ",", "args", ".", "nlayer", ",", "args", ".", "init", ")", "\n", "\n", "", "self", ".", "explainer", "=", "Explainer", "(", "self", ".", "nhid", ")", "\n", "self", ".", "criterion", "=", "Entropy", "(", ")", "\n", "\n", "self", ".", "best_model", "=", "None", "\n", "self", ".", "edge_index", "=", "None", "\n", "self", ".", "edge_weight", "=", "None", "\n", "self", ".", "features", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.explain_structure": [[105, 123], ["ExplainGNN.ExplainGNN.eval", "ExplainGNN.ExplainGNN.explainer", "score.squeeze().topk", "range", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "ExplainGNN.ExplainGNN.explainer.explain_structure", "score.squeeze"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.explain_structure"], ["", "def", "explain_structure", "(", "self", ",", "label_nodes", ",", "node", ",", "K", "=", "10", ")", ":", "\n", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "embedding", "=", "self", ".", "embedding", "\n", "\n", "node_score", "=", "-", "torch", ".", "cdist", "(", "embedding", "[", "node", "[", "0", "]", "]", ",", "embedding", "[", "label_nodes", "[", "0", "]", "]", ")", "\n", "neigh_score", "=", "self", ".", "explainer", "(", "embedding", ",", "node", ",", "label_nodes", ")", "\n", "\n", "score", "=", "(", "self", ".", "args", ".", "alpha", "*", "node_score", "+", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "*", "neigh_score", ")", "/", "self", ".", "args", ".", "T", "\n", "\n", "_", ",", "indices", "=", "score", ".", "squeeze", "(", ")", ".", "topk", "(", "K", ")", "\n", "edge_mask", "=", "0.0", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "\n", "            ", "label_edge", "=", "label_nodes", "[", "3", "]", "[", ":", ",", "label_nodes", "[", "4", "]", "==", "indices", "[", "i", "]", "]", "\n", "edge_mask", "+=", "self", ".", "explainer", ".", "explain_structure", "(", "self", ".", "embedding", ",", "node", "[", "3", "]", ",", "label_edge", ")", "\n", "\n", "", "return", "edge_mask", ",", "node", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.explain": [[125, 150], ["ExplainGNN.ExplainGNN.eval", "ExplainGNN.ExplainGNN.explainer", "score.squeeze().topk", "range", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "ExplainGNN.ExplainGNN.explainer.explain", "ExplainGNN.ExplainGNN.check_edge_type", "float", "float", "score.squeeze", "int", "int"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.explain", "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.check_edge_type"], ["", "def", "explain", "(", "self", ",", "label_nodes", ",", "node", ",", "G", ",", "K", "=", "1", ")", ":", "\n", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "\n", "embedding", "=", "self", ".", "embedding", "\n", "\n", "node_score", "=", "-", "torch", ".", "cdist", "(", "embedding", "[", "node", "[", "0", "]", "]", ",", "embedding", "[", "label_nodes", "[", "0", "]", "]", ")", "\n", "neigh_score", "=", "self", ".", "explainer", "(", "embedding", ",", "node", ",", "label_nodes", ")", "\n", "\n", "score", "=", "(", "self", ".", "args", ".", "alpha", "*", "node_score", "+", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "*", "neigh_score", ")", "/", "self", ".", "args", ".", "T", "\n", "\n", "_", ",", "indices", "=", "score", ".", "squeeze", "(", ")", ".", "topk", "(", "K", ")", "\n", "node_acc", "=", "0.0", "\n", "edge_acc", "=", "0.0", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "node_acc", "+=", "(", "G", ".", "nodes", "[", "int", "(", "label_nodes", "[", "0", "]", "[", "indices", "[", "i", "]", "]", ")", "]", "[", "'node_role'", "]", "==", "G", ".", "nodes", "[", "int", "(", "node", "[", "0", "]", ")", "]", "[", "'node_role'", "]", ")", "\n", "\n", "label_edge", "=", "label_nodes", "[", "3", "]", "[", ":", ",", "label_nodes", "[", "4", "]", "==", "indices", "[", "i", "]", "]", "\n", "pair_edge", "=", "self", ".", "explainer", ".", "explain", "(", "self", ".", "embedding", ",", "node", "[", "3", "]", ",", "label_edge", ")", "\n", "edge_acc", "+=", "self", ".", "check_edge_type", "(", "G", ",", "node", "[", "3", "]", ",", "pair_edge", ")", "\n", "\n", "", "node_acc", "=", "node_acc", "/", "K", "\n", "edge_acc", "=", "edge_acc", "/", "K", "\n", "\n", "return", "float", "(", "node_acc", ")", ",", "float", "(", "edge_acc", ")", ",", "pair_edge", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.explain_top1": [[151, 166], ["torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "ExplainGNN.ExplainGNN.explainer.explain", "ExplainGNN.ExplainGNN.explainer", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.explain"], ["", "def", "explain_top1", "(", "self", ",", "label_nodes", ",", "nodes", ")", ":", "\n", "        ", "embedding", "=", "self", ".", "embedding", "\n", "\n", "node_score", "=", "-", "torch", ".", "cdist", "(", "embedding", "[", "nodes", "[", "0", "]", "]", ",", "embedding", "[", "label_nodes", "[", "0", "]", "]", ")", "/", "self", ".", "args", ".", "T", "\n", "neigh_score", "=", "self", ".", "explainer", "(", "embedding", ",", "nodes", ",", "label_nodes", ")", "/", "self", ".", "args", ".", "T", "\n", "\n", "log_score", "=", "self", ".", "args", ".", "alpha", "*", "node_score", "+", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "*", "neigh_score", "\n", "\n", "_", ",", "index", "=", "torch", ".", "topk", "(", "log_score", ",", "k", "=", "1", ",", "dim", "=", "1", ")", "\n", "index", "=", "index", "[", "0", ",", "0", "]", "\n", "\n", "label_edge", "=", "label_nodes", "[", "3", "]", "[", ":", ",", "label_nodes", "[", "4", "]", "==", "index", "]", "\n", "pair_edge", "=", "self", ".", "explainer", ".", "explain", "(", "self", ".", "embedding", ",", "nodes", "[", "3", "]", ",", "label_edge", ")", "\n", "\n", "return", "label_nodes", "[", "0", "]", "[", "index", "]", ",", "label_edge", ",", "pair_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.explain_rank": [[167, 194], ["ExplainGNN.ExplainGNN.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ExplainGNN.ExplainGNN.forward", "range", "len", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "range", "numpy.asarray", "len", "ExplainGNN.ExplainGNN.explainer", "numpy.asarray.append", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "y_true[].sum"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward"], ["", "def", "explain_rank", "(", "self", ",", "label_nodes", ",", "test_loader", ",", "role_id", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "embedding", "=", "self", ".", "forward", "(", "self", ".", "features", ",", "self", ".", "edge_index", ",", "self", ".", "edge_weight", ")", "\n", "self", ".", "embedding", "=", "embedding", "\n", "results", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "test_loader", ")", ")", ":", "\n", "                ", "nodes", "=", "test_loader", "[", "i", "]", "\n", "node_score", "=", "-", "torch", ".", "cdist", "(", "embedding", "[", "nodes", "[", "0", "]", "]", ",", "embedding", "[", "label_nodes", "[", "0", "]", "]", ")", "/", "self", ".", "args", ".", "T", "\n", "neigh_score", "=", "self", ".", "explainer", "(", "embedding", ",", "nodes", ",", "label_nodes", ")", "/", "self", ".", "args", ".", "T", "\n", "\n", "log_score", "=", "self", ".", "args", ".", "alpha", "*", "node_score", "+", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "*", "neigh_score", "\n", "\n", "_", ",", "index", "=", "torch", ".", "sort", "(", "log_score", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "index", "=", "torch", ".", "squeeze", "(", "index", ")", "\n", "\n", "y_true", "=", "(", "role_id", "[", "label_nodes", "[", "0", "]", "[", "index", "]", "]", "==", "role_id", "[", "nodes", "[", "0", "]", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "Pk", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "1", ",", "30", ")", ":", "\n", "                    ", "Pk", ".", "append", "(", "y_true", "[", ":", "k", "]", ".", "sum", "(", ")", "/", "k", ")", "\n", "", "Pk", "=", "np", ".", "asarray", "(", "Pk", ")", "\n", "\n", "results", "+=", "Pk", "\n", "", "results", "=", "results", "/", "len", "(", "test_loader", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.check_edge_type": [[196, 212], ["range", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "check_edge_type", "(", "self", ",", "G", ",", "node_edge", ",", "pair_edge", ")", ":", "\n", "# to do", "\n", "        ", "n", "=", "0", "\n", "t", "=", "0", "\n", "for", "i", "in", "range", "(", "node_edge", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "edge_role0", "=", "G", ".", "edges", "[", "int", "(", "node_edge", "[", "0", ",", "i", "]", ")", ",", "int", "(", "node_edge", "[", "1", ",", "i", "]", ")", "]", "[", "'edge_role'", "]", "\n", "\n", "edge_role1", "=", "G", ".", "edges", "[", "int", "(", "pair_edge", "[", "0", ",", "i", "]", ")", ",", "int", "(", "pair_edge", "[", "1", ",", "i", "]", ")", "]", "[", "'edge_role'", "]", "\n", "if", "edge_role0", ">", "0", ":", "\n", "                ", "n", "+=", "1", "\n", "if", "edge_role0", "==", "edge_role1", ":", "\n", "                    ", "t", "+=", "1", "\n", "", "", "", "if", "n", "==", "0", ":", "\n", "            ", "return", "1.0", "\n", "\n", "", "return", "t", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.contrast_loss": [[213, 252], ["utils.attribute_mask", "utils.attribute_mask", "train_loader.get_train", "ExplainGNN.ExplainGNN.forward", "ExplainGNN.ExplainGNN.forward", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "ExplainGNN.ExplainGNN.criterion", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "ExplainGNN.ExplainGNN.criterion", "neg_edges[].flatten", "neg_edges[].flatten", "edge_feature_pos2.unsqueeze", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.utils.attribute_mask", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.attribute_mask", "home.repos.pwc.inspect_result.enyandai_segnn.None.dataset.TrainLoader.get_train", "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward"], ["", "def", "contrast_loss", "(", "self", ",", "train_loader", ")", ":", "\n", "\n", "# node score", "\n", "\n", "        ", "features_1", "=", "attribute_mask", "(", "self", ".", "features", ",", "self", ".", "args", ".", "attr_mask", ")", "\n", "features_2", "=", "attribute_mask", "(", "self", ".", "features", ",", "self", ".", "args", ".", "attr_mask", ")", "\n", "\n", "nodes", ",", "edges", ",", "neg_edges", ",", "pert_edge_index", "=", "train_loader", ".", "get_train", "(", ")", "\n", "# print(features_2.shape, pert_edge_index.max(), pert_edge_index.min())", "\n", "embedding_1", "=", "self", ".", "forward", "(", "features_1", ",", "self", ".", "edge_index", ",", "None", ")", "\n", "embedding_2", "=", "self", ".", "forward", "(", "features_2", ",", "pert_edge_index", ",", "None", ")", "\n", "\n", "\n", "edge_feature_pos1", "=", "(", "embedding_1", "[", "edges", "[", "0", "]", "]", "+", "embedding_1", "[", "edges", "[", "1", "]", "]", ")", "/", "2", "\n", "edge_feature_pos2", "=", "(", "embedding_2", "[", "edges", "[", "0", "]", "]", "+", "embedding_2", "[", "edges", "[", "1", "]", "]", ")", "/", "2", "\n", "\n", "neg_row", "=", "embedding_2", "[", "neg_edges", "[", "0", "]", ".", "flatten", "(", ")", "]", "\n", "neg_col", "=", "embedding_2", "[", "neg_edges", "[", "1", "]", ".", "flatten", "(", ")", "]", "\n", "\n", "\n", "edge_feature_neg", "=", "(", "neg_row", "+", "neg_col", ")", "/", "2", "\n", "edge_feature_neg", "=", "torch", ".", "reshape", "(", "edge_feature_neg", ",", "(", "neg_edges", ".", "shape", "[", "1", "]", ",", "neg_edges", ".", "shape", "[", "2", "]", ",", "-", "1", ")", ")", "\n", "\n", "edge_feature", "=", "torch", ".", "cat", "(", "[", "edge_feature_pos2", ".", "unsqueeze", "(", "dim", "=", "0", ")", ",", "edge_feature_neg", "]", ",", "dim", "=", "0", ")", "\n", "edge_matrix", "=", "edge_feature", "-", "edge_feature_pos1", "\n", "edge_matrix", "=", "-", "torch", ".", "norm", "(", "edge_matrix", ",", "p", "=", "2", ",", "dim", "=", "-", "1", ")", ".", "T", "/", "self", ".", "args", ".", "T", "\n", "\n", "edge_score", "=", "F", ".", "softmax", "(", "edge_matrix", ",", "dim", "=", "1", ")", "\n", "\n", "ground_truth", "=", "torch", ".", "zeros_like", "(", "edge_score", ")", "\n", "ground_truth", "[", ":", ",", "0", "]", "=", "1.0", "\n", "edge_loss", "=", "self", ".", "criterion", "(", "edge_score", ",", "ground_truth", ")", "\n", "\n", "node_score", "=", "F", ".", "softmax", "(", "-", "torch", ".", "cdist", "(", "embedding_1", "[", "nodes", "]", ",", "embedding_2", "[", "nodes", "]", ")", "/", "self", ".", "args", ".", "T", ",", "dim", "=", "1", ")", "\n", "ground_truth", "=", "torch", ".", "eye", "(", "node_score", ".", "shape", "[", "0", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "node_loss", "=", "self", ".", "criterion", "(", "node_score", ",", "ground_truth", ")", "\n", "\n", "return", "self", ".", "args", ".", "beta1", "*", "edge_loss", "+", "self", ".", "args", ".", "beta2", "*", "node_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.cls_loss": [[256, 304], ["ExplainGNN.ExplainGNN.explainer", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "torch.arange().long().repeat().T.flatten", "indices.flatten", "len", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "mask.view.view.scatter_", "mask.view.view.view", "min", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "softmax", "ExplainGNN.ExplainGNN.criterion", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "int", "numpy.random.choice", "torch_scatter.scatter", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long().repeat", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange().long", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "cls_loss", "(", "self", ",", "embedding", ",", "label_nodes", ")", ":", "\n", "        ", "from", "torch_geometric", ".", "utils", "import", "softmax", "\n", "K", "=", "self", ".", "args", ".", "K", "\n", "Q", "=", "15", "\n", "\n", "node_score", "=", "-", "torch", ".", "cdist", "(", "embedding", "[", "label_nodes", "[", "0", "]", "]", ",", "embedding", "[", "label_nodes", "[", "0", "]", "]", ")", "\n", "neigh_score", "=", "self", ".", "explainer", "(", "embedding", ",", "label_nodes", ",", "label_nodes", ")", "\n", "\n", "score", "=", "(", "self", ".", "args", ".", "alpha", "*", "node_score", "+", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "*", "neigh_score", ")", "/", "self", ".", "args", ".", "T", "\n", "\n", "_", ",", "indices", "=", "torch", ".", "topk", "(", "score", ",", "K", ",", "dim", "=", "1", ")", "\n", "\n", "pos_row", "=", "torch", ".", "arange", "(", "0", ",", "score", ".", "shape", "[", "0", "]", ",", "device", "=", "self", ".", "device", ")", ".", "long", "(", ")", ".", "repeat", "(", "[", "K", ",", "1", "]", ")", ".", "T", ".", "flatten", "(", ")", "\n", "pos_col", "=", "indices", ".", "flatten", "(", ")", "\n", "\n", "self_mask", "=", "(", "pos_col", "!=", "pos_row", ")", "\n", "pos_col", "=", "pos_col", "[", "self_mask", "]", "\n", "pos_row", "=", "pos_row", "[", "self_mask", "]", "\n", "\n", "# negative sample", "\n", "N", "=", "len", "(", "label_nodes", "[", "0", "]", ")", "\n", "mask", "=", "torch", ".", "ones_like", "(", "score", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "mask", ".", "scatter_", "(", "1", ",", "indices", ",", "False", ")", "\n", "# train_labels = self.labels[label_nodes[0]]", "\n", "# repeat_label = train_labels.repeat([N,1])", "\n", "# mask = mask & ((repeat_label - repeat_label.T)!=0)", "\n", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", "\n", "\n", "alpha", "=", "2.0", "\n", "sample_size", "=", "min", "(", "int", "(", "N", "*", "Q", "*", "alpha", ")", ",", "(", "N", "-", "K", ")", "*", "N", ")", "\n", "perm", "=", "torch", ".", "tensor", "(", "np", ".", "random", ".", "choice", "(", "N", "*", "N", ",", "sample_size", ",", "replace", "=", "False", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "perm", "=", "perm", "[", "mask", "[", "perm", "]", "]", "[", ":", "N", "*", "Q", "]", "\n", "\n", "neg_row", "=", "perm", "//", "N", "\n", "neg_col", "=", "perm", "%", "N", "\n", "\n", "row", "=", "torch", ".", "cat", "(", "[", "pos_row", ",", "neg_row", "]", ")", "\n", "col", "=", "torch", ".", "cat", "(", "[", "pos_col", ",", "neg_col", "]", ")", "\n", "\n", "sample_score", "=", "score", "[", "row", ",", "col", "]", "\n", "label_score", "=", "softmax", "(", "sample_score", ",", "row", ")", "\n", "\n", "ref_labels", "=", "self", ".", "onehot_labels", "[", "label_nodes", "[", "0", "]", "]", "[", "col", "]", ".", "T", "\n", "preds", "=", "scatter", "(", "ref_labels", "*", "label_score", ",", "row", ")", ".", "T", "\n", "\n", "cls_loss", "=", "self", ".", "criterion", "(", "preds", ",", "self", ".", "onehot_labels", "[", "label_nodes", "[", "0", "]", "]", ")", "\n", "\n", "return", "cls_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.predict": [[308, 326], ["ExplainGNN.ExplainGNN.explainer", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.softmax.scatter_", "float"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "embedding", ",", "label_nodes", ",", "nodes", ")", ":", "\n", "\n", "        ", "K", "=", "self", ".", "args", ".", "K", "\n", "\n", "node_score", "=", "-", "torch", ".", "cdist", "(", "embedding", "[", "nodes", "[", "0", "]", "]", ",", "embedding", "[", "label_nodes", "[", "0", "]", "]", ")", "\n", "neigh_score", "=", "self", ".", "explainer", "(", "embedding", ",", "nodes", ",", "label_nodes", ")", "\n", "\n", "score", "=", "(", "self", ".", "args", ".", "alpha", "*", "node_score", "+", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "*", "neigh_score", ")", "/", "self", ".", "args", ".", "T", "\n", "\n", "if", "K", ">", "0", ":", "\n", "            ", "_", ",", "index", "=", "torch", ".", "topk", "(", "score", ",", "k", "=", "score", ".", "shape", "[", "1", "]", "-", "K", ",", "dim", "=", "1", ",", "largest", "=", "False", ",", "sorted", "=", "False", ")", "\n", "score", ".", "scatter_", "(", "1", ",", "index", ",", "float", "(", "'-inf'", ")", ")", "\n", "", "score", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "1", ")", "\n", "\n", "train_labels", "=", "self", ".", "onehot_labels", "[", "label_nodes", "[", "0", "]", "]", "\n", "preds", "=", "score", "@", "train_labels", "\n", "\n", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.forward": [[327, 331], ["ExplainGNN.ExplainGNN.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", "(", "x", ",", "edge_index", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.fit": [[332, 342], ["utils.tensor2onehot", "ExplainGNN.ExplainGNN._train_with_val"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.utils.tensor2onehot", "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN._train_with_val"], ["", "def", "fit", "(", "self", ",", "features", ",", "edge_index", ",", "edge_weight", ",", "labels", ",", "label_nodes", ",", "train_loader", ",", "val_loader", ",", "train_iters", "=", "200", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "self", ".", "edge_index", ",", "self", ".", "edge_weight", "=", "edge_index", ",", "edge_weight", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "onehot_labels", "=", "utils", ".", "tensor2onehot", "(", "labels", ")", "\n", "self", ".", "label_nodes", "=", "label_nodes", "\n", "self", ".", "idx_train", "=", "label_nodes", "[", "0", "]", "\n", "self", ".", "_train_with_val", "(", "train_loader", ",", "val_loader", ",", "train_iters", ",", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN._train_with_val": [[344, 387], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "range", "ExplainGNN.ExplainGNN.load_state_dict", "print", "ExplainGNN.ExplainGNN.parameters", "ExplainGNN.ExplainGNN.train", "torch.Adam.zero_grad", "ExplainGNN.ExplainGNN.forward", "ExplainGNN.ExplainGNN.cls_loss", "ExplainGNN.ExplainGNN.contrast_loss", "loss_train.backward", "torch.Adam.step", "ExplainGNN.ExplainGNN.eval", "ExplainGNN.ExplainGNN.forward", "ExplainGNN.ExplainGNN.val", "print", "copy.deepcopy", "print", "ExplainGNN.ExplainGNN.state_dict", "ExplainGNN.ExplainGNN.item", "ExplainGNN.ExplainGNN.item"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.cls_loss", "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.contrast_loss", "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.val"], ["", "def", "_train_with_val", "(", "self", ",", "train_loader", ",", "val_loader", ",", "train_iters", ",", "verbose", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'=== training model ==='", ")", "\n", "\n", "", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "\n", "best_acc_val", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "train_iters", ")", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "self", ".", "embedding", "=", "self", ".", "forward", "(", "self", ".", "features", ",", "self", ".", "edge_index", ",", "self", ".", "edge_weight", ")", "\n", "cls_loss", "=", "self", ".", "cls_loss", "(", "self", ".", "embedding", ",", "self", ".", "label_nodes", ")", "\n", "\n", "\n", "# N = 1", "\n", "# cont_loss = 0", "\n", "# for j in range(N):", "\n", "cont_loss", "=", "self", ".", "contrast_loss", "(", "train_loader", ")", "\n", "# cont_loss = cont_loss/N", "\n", "loss_train", "=", "cls_loss", "+", "cont_loss", "\n", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "self", ".", "embedding", "=", "self", ".", "forward", "(", "self", ".", "features", ",", "self", ".", "edge_index", ",", "self", ".", "edge_weight", ")", "\n", "acc_val", "=", "self", ".", "val", "(", "self", ".", "label_nodes", ",", "val_loader", ")", "\n", "\n", "if", "acc_val", ">", "best_acc_val", ":", "\n", "                ", "best_acc_val", "=", "acc_val", "\n", "weights", "=", "deepcopy", "(", "self", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "if", "verbose", "and", "(", "i", "+", "1", ")", "%", "1", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch {}, cls loss: {}'", ".", "format", "(", "i", "+", "1", ",", "cls_loss", ".", "item", "(", ")", ")", ",", "\n", "'cont_loss: {:.4f}'", ".", "format", "(", "cont_loss", ".", "item", "(", ")", ")", ",", "\n", "'acc_val: {:.4f}'", ".", "format", "(", "acc_val", ")", ",", "\n", "'best_acc_val: {:.4f}'", ".", "format", "(", "best_acc_val", ")", ")", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "'=== picking the best model according to the performance on validation ==='", ")", "\n", "", "self", ".", "load_state_dict", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.val": [[388, 400], ["ExplainGNN.ExplainGNN.eval", "ExplainGNN.ExplainGNN.forward", "range", "float", "len", "ExplainGNN.ExplainGNN.predict", "len", "len", "utils.accuracy"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.models.MLP.MLP.predict", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.accuracy"], ["", "def", "val", "(", "self", ",", "label_nodes", ",", "test_loader", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "acc", "=", "0", "\n", "n", "=", "0", "\n", "self", ".", "embedding", "=", "self", ".", "forward", "(", "self", ".", "features", ",", "self", ".", "edge_index", ",", "self", ".", "edge_weight", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "test_loader", ")", ")", ":", "\n", "            ", "nodes", "=", "test_loader", "[", "i", "]", "\n", "preds", "=", "self", ".", "predict", "(", "self", ".", "embedding", ",", "label_nodes", ",", "nodes", ")", "\n", "acc", "+=", "len", "(", "nodes", "[", "0", "]", ")", "*", "utils", ".", "accuracy", "(", "preds", ",", "self", ".", "labels", "[", "nodes", "[", "0", "]", "]", ")", "\n", "n", "+=", "len", "(", "nodes", "[", "0", "]", ")", "\n", "", "acc", "=", "acc", "/", "n", "\n", "return", "float", "(", "acc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.ExplainGNN.test": [[401, 439], ["ExplainGNN.ExplainGNN.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "ExplainGNN.ExplainGNN.forward", "range", "float", "len", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "ExplainGNN.ExplainGNN.explainer", "len", "utils.accuracy", "y_true.sum", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.accuracy"], ["", "def", "test", "(", "self", ",", "label_nodes", ",", "test_loader", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "acc", "=", "0", "\n", "n", "=", "0", "\n", "Pk", "=", "0.0", "\n", "\n", "K", "=", "self", ".", "args", ".", "K", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "embedding", "=", "self", ".", "forward", "(", "self", ".", "features", ",", "self", ".", "edge_index", ",", "self", ".", "edge_weight", ")", "\n", "self", ".", "embedding", "=", "embedding", "\n", "for", "i", "in", "range", "(", "len", "(", "test_loader", ")", ")", ":", "\n", "                ", "nodes", "=", "test_loader", "[", "i", "]", "\n", "node_score", "=", "-", "torch", ".", "cdist", "(", "embedding", "[", "nodes", "[", "0", "]", "]", ",", "embedding", "[", "label_nodes", "[", "0", "]", "]", ")", "/", "self", ".", "args", ".", "T", "\n", "neigh_score", "=", "self", ".", "explainer", "(", "embedding", ",", "nodes", ",", "label_nodes", ")", "/", "self", ".", "args", ".", "T", "\n", "\n", "log_score", "=", "self", ".", "args", ".", "alpha", "*", "node_score", "+", "(", "1", "-", "self", ".", "args", ".", "alpha", ")", "*", "neigh_score", "\n", "\n", "_", ",", "index", "=", "torch", ".", "topk", "(", "log_score", ",", "k", "=", "K", ",", "dim", "=", "1", ",", "sorted", "=", "False", ")", "\n", "index", "=", "torch", ".", "squeeze", "(", "index", ")", "\n", "score", "=", "log_score", "[", ":", ",", "torch", ".", "squeeze", "(", "index", ")", "]", "\n", "\n", "score", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "1", ")", "\n", "\n", "train_labels", "=", "self", ".", "onehot_labels", "[", "label_nodes", "[", "0", "]", "[", "index", "]", "]", "\n", "preds", "=", "score", "@", "train_labels", "\n", "acc", "+=", "len", "(", "nodes", "[", "0", "]", ")", "*", "utils", ".", "accuracy", "(", "preds", ",", "self", ".", "labels", "[", "nodes", "[", "0", "]", "]", ")", "\n", "\n", "_", ",", "index", "=", "torch", ".", "topk", "(", "log_score", ",", "k", "=", "5", ",", "dim", "=", "1", ",", "sorted", "=", "False", ")", "\n", "index", "=", "torch", ".", "squeeze", "(", "index", ")", "\n", "\n", "y_true", "=", "(", "self", ".", "labels", "[", "label_nodes", "[", "0", "]", "[", "index", "]", "]", "==", "self", ".", "labels", "[", "nodes", "[", "0", "]", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "Pk", "+=", "y_true", ".", "sum", "(", ")", "/", "5", "\n", "\n", "n", "+=", "1", "\n", "\n", "", "", "acc", "=", "acc", "/", "n", "\n", "Pk", "=", "Pk", "/", "n", "\n", "return", "float", "(", "acc", ")", ",", "Pk", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.ExplainGNN.cosine": [[22, 25], ["t1.norm", "t2.norm"], "function", ["None"], ["", "", "def", "cosine", "(", "t1", ",", "t2", ")", ":", "\n", "\n", "    ", "return", "t1", "@", "t2", ".", "T", "/", "(", "t1", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "@", "t2", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.KNNGNN.Entropy.__init__": [[12, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", "=", "1e-8", ")", ":", "\n", "        ", "super", "(", "Entropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "1e-8", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.KNNGNN.Entropy.forward": [[16, 21], ["pred.clamp.clamp.clamp", "loss.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred", ",", "target", ")", ":", "\n", "        ", "eps", "=", "self", ".", "eps", "\n", "pred", "=", "pred", ".", "clamp", "(", "eps", ",", "1", "-", "(", "pred", ".", "shape", "[", "1", "]", "-", "1", ")", "*", "eps", ")", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "target", "*", "torch", ".", "log", "(", "pred", ")", ",", "dim", "=", "1", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.KNNGNN.KNNGNN.__init__": [[25, 43], ["torch.Module.__init__", "models.GCN.GCN", "KNNGNN.Entropy"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "nfeat", ",", "device", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "KNNGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "device", "is", "not", "None", ",", "\"Please specify 'device'!\"", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nfeat", "=", "nfeat", "\n", "self", ".", "nhid", "=", "args", ".", "hidden", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "self", ".", "GCN", "=", "GCN", "(", "self", ".", "nfeat", ",", "self", ".", "nhid", ",", "self", ".", "nhid", ",", "device", "=", "device", ")", "\n", "self", ".", "criterion", "=", "Entropy", "(", ")", "\n", "\n", "self", ".", "best_model", "=", "None", "\n", "self", ".", "edge_index", "=", "None", "\n", "self", ".", "edge_weight", "=", "None", "\n", "self", ".", "features", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.KNNGNN.KNNGNN.predict": [[45, 61], ["KNNGNN.KNNGNN.forward", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "score.fill_diagonal_", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "score.scatter_", "float", "float"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward"], ["", "def", "predict", "(", "self", ",", "features", ",", "edge_index", ",", "edge_weight", ",", "onehot_labels", ",", "idx_train", ",", "idx_test", ",", "train_phase", "=", "True", ")", ":", "\n", "\n", "        ", "embedding", "=", "self", ".", "forward", "(", "features", ",", "edge_index", ",", "edge_weight", ")", "\n", "train_labels", "=", "onehot_labels", "[", "idx_train", "]", "\n", "score", "=", "embedding", "[", "idx_test", "]", "@", "embedding", "[", "idx_train", "]", ".", "T", "\n", "if", "train_phase", ":", "\n", "            ", "score", ".", "fill_diagonal_", "(", "float", "(", "'-inf'", ")", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "K", ">", "0", ":", "\n", "            ", "_", ",", "index", "=", "torch", ".", "topk", "(", "score", ",", "k", "=", "train_labels", ".", "shape", "[", "0", "]", "-", "self", ".", "args", ".", "K", ",", "dim", "=", "1", ",", "largest", "=", "False", ",", "sorted", "=", "False", ")", "\n", "score", ".", "scatter_", "(", "1", ",", "index", ",", "float", "(", "'-inf'", ")", ")", "\n", "\n", "", "weights", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "1", ")", "\n", "preds", "=", "weights", "@", "train_labels", "\n", "\n", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.KNNGNN.KNNGNN.forward": [[64, 69], ["KNNGNN.KNNGNN.GCN"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "GCN", "(", "x", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.KNNGNN.KNNGNN.fit": [[70, 82], ["labels.long.long.long", "utils.tensor2onehot", "KNNGNN.KNNGNN.GCN.initialize", "KNNGNN.KNNGNN._train_with_val"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.utils.tensor2onehot", "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN.initialize", "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN._train_with_val"], ["", "def", "fit", "(", "self", ",", "features", ",", "edge_index", ",", "edge_weight", ",", "labels", ",", "idx_train", ",", "idx_val", "=", "None", ",", "train_iters", "=", "200", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "self", ".", "edge_index", ",", "self", ".", "edge_weight", "=", "edge_index", ",", "edge_weight", "\n", "self", ".", "features", "=", "features", "\n", "labels", "=", "labels", ".", "long", "(", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "onehot_labels", "=", "utils", ".", "tensor2onehot", "(", "labels", ")", "\n", "self", ".", "idx_train", "=", "idx_train", "\n", "self", ".", "GCN", ".", "initialize", "(", ")", "\n", "\n", "self", ".", "_train_with_val", "(", "idx_train", ",", "idx_val", ",", "train_iters", ",", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.KNNGNN.KNNGNN._train_with_val": [[83, 118], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "range", "KNNGNN.KNNGNN.load_state_dict", "print", "KNNGNN.KNNGNN.parameters", "KNNGNN.KNNGNN.train", "torch.Adam.zero_grad", "KNNGNN.KNNGNN.predict", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss.backward", "torch.Adam.step", "KNNGNN.KNNGNN.eval", "KNNGNN.KNNGNN.predict", "utils.accuracy", "print", "copy.deepcopy", "print", "KNNGNN.KNNGNN.state_dict", "torch.mse_loss.item"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.MLP.MLP.predict", "home.repos.pwc.inspect_result.enyandai_segnn.models.MLP.MLP.predict", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.accuracy"], ["", "def", "_train_with_val", "(", "self", ",", "idx_train", ",", "idx_val", ",", "train_iters", ",", "verbose", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'=== training gcn model ==='", ")", "\n", "\n", "", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "args", ".", "lr", ",", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "\n", "best_acc_val", "=", "0", "\n", "\n", "\n", "for", "i", "in", "range", "(", "train_iters", ")", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "predict", "(", "self", ".", "features", ",", "self", ".", "edge_index", ",", "self", ".", "edge_weight", ",", "self", ".", "onehot_labels", ",", "idx_train", ",", "idx_train", ",", "train_phase", "=", "True", ")", "\n", "loss_train", "=", "F", ".", "mse_loss", "(", "output", ",", "self", ".", "onehot_labels", "[", "idx_train", "]", ")", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "eval", "(", ")", "\n", "output", "=", "self", ".", "predict", "(", "self", ".", "features", ",", "self", ".", "edge_index", ",", "self", ".", "edge_weight", ",", "self", ".", "onehot_labels", ",", "idx_train", ",", "idx_val", ",", "train_phase", "=", "False", ")", "\n", "acc_val", "=", "utils", ".", "accuracy", "(", "output", ",", "self", ".", "labels", "[", "idx_val", "]", ")", "\n", "\n", "if", "acc_val", ">", "best_acc_val", ":", "\n", "                ", "best_acc_val", "=", "acc_val", "\n", "self", ".", "output", "=", "output", "\n", "weights", "=", "deepcopy", "(", "self", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "if", "verbose", "and", "i", "+", "1", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch {}, training loss: {}'", ".", "format", "(", "i", "+", "1", ",", "loss_train", ".", "item", "(", ")", ")", ",", "\n", "'acc_val: {.4f}'", ".", "format", "(", "acc_val", ")", ",", "\n", "'best_acc_val'", ".", "format", "(", "best_acc_val", ")", ")", "\n", "\n", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "'=== picking the best model according to the performance on validation ==='", ")", "\n", "", "self", ".", "load_state_dict", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.KNNGNN.KNNGNN.test": [[120, 135], ["KNNGNN.KNNGNN.eval", "KNNGNN.KNNGNN.predict", "KNNGNN.KNNGNN.criterion", "utils.accuracy", "print", "KNNGNN.KNNGNN.item", "utils.accuracy.item"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.MLP.MLP.predict", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.accuracy"], ["", "def", "test", "(", "self", ",", "idx_test", ")", ":", "\n", "        ", "\"\"\"Evaluate GCN performance on test set.\n        Parameters\n        ----------\n        idx_test :\n            node testing indices\n        \"\"\"", "\n", "self", ".", "eval", "(", ")", "\n", "output", "=", "self", ".", "predict", "(", "self", ".", "features", ",", "self", ".", "edge_index", ",", "self", ".", "edge_weight", ",", "self", ".", "onehot_labels", ",", "self", ".", "idx_train", ",", "idx_test", ",", "train_phase", "=", "False", ")", "\n", "loss_test", "=", "self", ".", "criterion", "(", "output", ",", "self", ".", "onehot_labels", "[", "idx_test", "]", ")", "\n", "acc_test", "=", "utils", ".", "accuracy", "(", "output", ",", "self", ".", "labels", "[", "idx_test", "]", ")", "\n", "print", "(", "\"Test set results:\"", ",", "\n", "\"loss= {:.4f}\"", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "\"accuracy= {:.4f}\"", ".", "format", "(", "acc_test", ".", "item", "(", ")", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.__init__": [[12, 31], ["torch.Module.__init__", "Baseline.Baseline.get_body", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__", "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.get_body"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "nfeat", ",", "nclass", ",", "dropout", "=", "0.5", ",", "lr", "=", "0.01", ",", "weight_decay", "=", "5e-4", ",", "device", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "Baseline", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "device", "is", "not", "None", ",", "\"Please specify 'device'!\"", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "args", "=", "args", "\n", "nhid", "=", "self", ".", "args", ".", "hidden", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "\n", "self", ".", "body", "=", "self", ".", "get_body", "(", "nfeat", ",", "nhid", ",", "args", ".", "model", ")", "\n", "self", ".", "lin", "=", "nn", ".", "Linear", "(", "nhid", ",", "nclass", ")", "\n", "\n", "self", ".", "best_model", "=", "None", "\n", "self", ".", "edge_index", "=", "None", "\n", "self", ".", "embedding", "=", "None", "\n", "self", ".", "features", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.get_body": [[32, 40], ["GCN", "GIN", "MLP"], "methods", ["None"], ["", "def", "get_body", "(", "self", ",", "nfeat", ",", "nhid", ",", "model", ")", ":", "\n", "        ", "if", "model", "==", "'GCN'", ":", "\n", "            ", "return", "GCN", "(", "nfeat", ",", "nhid", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "if", "model", "==", "'GIN'", ":", "\n", "            ", "return", "GIN", "(", "nfeat", ",", "nhid", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "", "if", "model", "==", "'MLP'", ":", "\n", "            ", "return", "MLP", "(", "nfeat", ",", "nhid", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.forward": [[41, 45], ["Baseline.Baseline.body", "Baseline.Baseline.lin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "self", ".", "body", "(", "x", ",", "edge_index", ")", "\n", "y", "=", "self", ".", "lin", "(", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.predict": [[46, 63], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.softmax.scatter_", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "float"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "embedding", ",", "label_nodes", ",", "nodes", ")", ":", "\n", "\n", "        ", "K", "=", "self", ".", "args", ".", "K", "\n", "\n", "embedding", "=", "self", ".", "embedding", "\n", "\n", "score", "=", "-", "torch", ".", "cdist", "(", "embedding", "[", "nodes", "[", "0", "]", "]", ",", "embedding", "[", "label_nodes", "[", "0", "]", "]", ")", "/", "self", ".", "args", ".", "T", "\n", "\n", "if", "K", ">", "0", ":", "\n", "            ", "_", ",", "index", "=", "torch", ".", "topk", "(", "score", ",", "k", "=", "score", ".", "shape", "[", "1", "]", "-", "K", ",", "dim", "=", "1", ",", "largest", "=", "False", ",", "sorted", "=", "False", ")", "\n", "score", ".", "scatter_", "(", "1", ",", "index", ",", "float", "(", "'-inf'", ")", ")", "\n", "", "score", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "1", ")", "\n", "\n", "train_labels", "=", "self", ".", "onehot_labels", "[", "label_nodes", "[", "0", "]", "]", "\n", "preds", "=", "score", "@", "train_labels", "\n", "\n", "return", "preds", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.explain": [[64, 96], ["Baseline.Baseline.eval", "score.squeeze().topk", "range", "Baseline.Baseline.body", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "edge_matrix.argmax", "Baseline.Baseline.check_edge_type", "float", "float", "score.squeeze", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "int", "int"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.check_edge_type"], ["", "def", "explain", "(", "self", ",", "x", ",", "edge_index", ",", "label_nodes", ",", "node", ",", "G", ",", "K", "=", "1", ")", ":", "\n", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "if", "self", ".", "embedding", "==", "None", ":", "\n", "            ", "self", ".", "embedding", "=", "self", ".", "body", "(", "x", ",", "edge_index", ")", "\n", "\n", "", "features", "=", "self", ".", "embedding", "\n", "\n", "score", "=", "-", "torch", ".", "cdist", "(", "features", "[", "node", "[", "0", "]", "]", ",", "features", "[", "label_nodes", "[", "0", "]", "]", ")", "\n", "_", ",", "indices", "=", "score", ".", "squeeze", "(", ")", ".", "topk", "(", "K", ")", "\n", "\n", "node_acc", "=", "0.0", "\n", "edge_acc", "=", "0.0", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "node_acc", "+=", "(", "G", ".", "nodes", "[", "int", "(", "label_nodes", "[", "0", "]", "[", "indices", "[", "i", "]", "]", ")", "]", "[", "'node_role'", "]", "==", "G", ".", "nodes", "[", "int", "(", "node", "[", "0", "]", ")", "]", "[", "'node_role'", "]", ")", "\n", "\n", "label_edge", "=", "label_nodes", "[", "3", "]", "[", ":", ",", "label_nodes", "[", "4", "]", "==", "indices", "[", "i", "]", "]", "\n", "\n", "node_edge", "=", "node", "[", "3", "]", "\n", "edge_feature_n", "=", "(", "features", "[", "node_edge", "[", "0", "]", "]", "+", "features", "[", "node_edge", "[", "1", "]", "]", ")", "/", "2", "\n", "\n", "edge_feature_l", "=", "(", "features", "[", "label_edge", "[", "0", "]", "]", "+", "features", "[", "label_edge", "[", "1", "]", "]", ")", "/", "2", "\n", "edge_matrix", "=", "-", "torch", ".", "cdist", "(", "edge_feature_n", ",", "edge_feature_l", ")", "\n", "\n", "indices", "=", "edge_matrix", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "pair_edge", "=", "label_edge", "[", ":", ",", "indices", "]", "\n", "edge_acc", "+=", "self", ".", "check_edge_type", "(", "G", ",", "node", "[", "3", "]", ",", "pair_edge", ")", "\n", "\n", "", "node_acc", "=", "node_acc", "/", "K", "\n", "edge_acc", "=", "edge_acc", "/", "K", "\n", "\n", "return", "float", "(", "node_acc", ")", ",", "float", "(", "edge_acc", ")", ",", "pair_edge", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.explain_top1": [[97, 116], ["torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "edge_matrix.argmax", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist"], "methods", ["None"], ["", "def", "explain_top1", "(", "self", ",", "label_nodes", ",", "nodes", ")", ":", "\n", "        ", "features", "=", "self", ".", "embedding", "\n", "\n", "score", "=", "-", "torch", ".", "cdist", "(", "features", "[", "nodes", "[", "0", "]", "]", ",", "features", "[", "label_nodes", "[", "0", "]", "]", ")", "\n", "\n", "_", ",", "index", "=", "torch", ".", "topk", "(", "score", ",", "k", "=", "1", ",", "dim", "=", "1", ",", "sorted", "=", "False", ")", "\n", "index", "=", "index", "[", "0", "]", "\n", "\n", "label_edge", "=", "label_nodes", "[", "3", "]", "[", ":", ",", "label_nodes", "[", "4", "]", "==", "index", "]", "\n", "node_edge", "=", "nodes", "[", "3", "]", "\n", "edge_feature_n", "=", "(", "features", "[", "node_edge", "[", "0", "]", "]", "+", "features", "[", "node_edge", "[", "1", "]", "]", ")", "/", "2", "\n", "\n", "edge_feature_l", "=", "(", "features", "[", "label_edge", "[", "0", "]", "]", "+", "features", "[", "label_edge", "[", "1", "]", "]", ")", "/", "2", "\n", "edge_matrix", "=", "-", "torch", ".", "cdist", "(", "edge_feature_n", ",", "edge_feature_l", ")", "\n", "\n", "indices", "=", "edge_matrix", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "pair_edge", "=", "label_edge", "[", ":", ",", "indices", "]", "\n", "\n", "return", "label_nodes", "[", "0", "]", "[", "index", "]", ",", "label_edge", ",", "pair_edge", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.explain_rank": [[117, 139], ["Baseline.Baseline.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "range", "len", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "range", "numpy.asarray", "len", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "numpy.asarray.append", "y_true[].sum"], "methods", ["None"], ["", "def", "explain_rank", "(", "self", ",", "label_nodes", ",", "test_loader", ",", "role_id", ")", ":", "\n", "        ", "self", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "embedding", "=", "self", ".", "embedding", "\n", "results", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "test_loader", ")", ")", ":", "\n", "                ", "nodes", "=", "test_loader", "[", "i", "]", "\n", "node_score", "=", "-", "torch", ".", "cdist", "(", "embedding", "[", "nodes", "[", "0", "]", "]", ",", "embedding", "[", "label_nodes", "[", "0", "]", "]", ")", "\n", "_", ",", "index", "=", "torch", ".", "sort", "(", "node_score", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "index", "=", "torch", ".", "squeeze", "(", "index", ")", "\n", "\n", "y_true", "=", "(", "role_id", "[", "label_nodes", "[", "0", "]", "[", "index", "]", "]", "==", "role_id", "[", "nodes", "[", "0", "]", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "Pk", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "1", ",", "30", ")", ":", "\n", "                    ", "Pk", ".", "append", "(", "y_true", "[", ":", "k", "]", ".", "sum", "(", ")", "/", "k", ")", "\n", "", "Pk", "=", "np", ".", "asarray", "(", "Pk", ")", "\n", "\n", "results", "+=", "Pk", "\n", "", "results", "=", "results", "/", "len", "(", "test_loader", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.check_edge_type": [[141, 157], ["range", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "check_edge_type", "(", "self", ",", "G", ",", "node_edge", ",", "pair_edge", ")", ":", "\n", "# to do", "\n", "        ", "n", "=", "0", "\n", "t", "=", "0", "\n", "for", "i", "in", "range", "(", "node_edge", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "edge_role0", "=", "G", ".", "edges", "[", "int", "(", "node_edge", "[", "0", ",", "i", "]", ")", ",", "int", "(", "node_edge", "[", "1", ",", "i", "]", ")", "]", "[", "'edge_role'", "]", "\n", "\n", "edge_role1", "=", "G", ".", "edges", "[", "int", "(", "pair_edge", "[", "0", ",", "i", "]", ")", ",", "int", "(", "pair_edge", "[", "1", ",", "i", "]", ")", "]", "[", "'edge_role'", "]", "\n", "if", "edge_role0", ">", "0", ":", "\n", "                ", "n", "+=", "1", "\n", "if", "edge_role0", "==", "edge_role1", ":", "\n", "                    ", "t", "+=", "1", "\n", "", "", "", "if", "n", "==", "0", ":", "\n", "            ", "return", "1.0", "\n", "\n", "", "return", "t", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.fit": [[158, 166], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "utils.tensor2onehot", "Baseline.Baseline._train_with_val"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.utils.tensor2onehot", "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN._train_with_val"], ["", "def", "fit", "(", "self", ",", "features", ",", "edge_index", ",", "labels", ",", "idx_train", ",", "idx_val", "=", "None", ",", "train_iters", "=", "200", ",", "verbose", "=", "False", ")", ":", "\n", "\n", "\n", "        ", "self", ".", "edge_index", "=", "edge_index", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "labels", "=", "torch", ".", "tensor", "(", "labels", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "self", ".", "onehot_labels", "=", "utils", ".", "tensor2onehot", "(", "labels", ")", "\n", "self", ".", "_train_with_val", "(", "self", ".", "labels", ",", "idx_train", ",", "idx_val", ",", "train_iters", ",", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline._train_with_val": [[167, 199], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "range", "Baseline.Baseline.load_state_dict", "print", "Baseline.Baseline.parameters", "Baseline.Baseline.train", "torch.Adam.zero_grad", "Baseline.Baseline.forward", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy.backward", "torch.Adam.step", "Baseline.Baseline.eval", "Baseline.Baseline.forward", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "utils.accuracy", "print", "print", "print", "copy.deepcopy", "Baseline.Baseline.state_dict", "torch.cross_entropy.item"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.accuracy"], ["", "def", "_train_with_val", "(", "self", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "train_iters", ",", "verbose", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'=== training gcn model ==='", ")", "\n", "", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "\n", "best_loss_val", "=", "100", "\n", "best_acc_val", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "train_iters", ")", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "forward", "(", "self", ".", "features", ",", "self", ".", "edge_index", ")", "\n", "loss_train", "=", "F", ".", "cross_entropy", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "eval", "(", ")", "\n", "output", "=", "self", ".", "forward", "(", "self", ".", "features", ",", "self", ".", "edge_index", ")", "\n", "loss_val", "=", "F", ".", "cross_entropy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "acc_val", "=", "utils", ".", "accuracy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "\n", "if", "verbose", "and", "i", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch {}, training loss: {}'", ".", "format", "(", "i", ",", "loss_train", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "\"acc_val: {:.4f}\"", ".", "format", "(", "acc_val", ")", ")", "\n", "", "if", "acc_val", ">", "best_acc_val", ":", "\n", "                ", "best_acc_val", "=", "acc_val", "\n", "self", ".", "output", "=", "output", "\n", "weights", "=", "deepcopy", "(", "self", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "'=== picking the best model according to the performance on validation ==='", ")", "\n", "", "self", ".", "load_state_dict", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.test": [[201, 225], ["Baseline.Baseline.eval", "Baseline.Baseline.body", "Baseline.Baseline.lin", "utils.accuracy", "print", "range", "len", "Baseline.Baseline.predict", "len", "float", "float", "utils.accuracy.item", "len", "utils.accuracy"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.None.utils.accuracy", "home.repos.pwc.inspect_result.enyandai_segnn.models.MLP.MLP.predict", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.accuracy"], ["", "def", "test", "(", "self", ",", "idx_test", ",", "label_nodes", ",", "test_loader", ")", ":", "\n", "        ", "\"\"\"Evaluate GCN performance on test set.\n        Parameters\n        ----------\n        idx_test :\n            node testing indices\n        \"\"\"", "\n", "self", ".", "eval", "(", ")", "\n", "self", ".", "embedding", "=", "self", ".", "body", "(", "self", ".", "features", ",", "self", ".", "edge_index", ")", "\n", "output", "=", "self", ".", "lin", "(", "self", ".", "embedding", ")", "\n", "acc_cls", "=", "utils", ".", "accuracy", "(", "output", "[", "idx_test", "]", ",", "self", ".", "labels", "[", "idx_test", "]", ")", "\n", "print", "(", "\"cls test results:\"", ",", "\n", "\"accuracy= {:.4f}\"", ".", "format", "(", "acc_cls", ".", "item", "(", ")", ")", ")", "\n", "\n", "acc", "=", "0", "\n", "n", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "test_loader", ")", ")", ":", "\n", "            ", "nodes", "=", "test_loader", "[", "i", "]", "\n", "preds", "=", "self", ".", "predict", "(", "self", ".", "embedding", ",", "label_nodes", ",", "nodes", ")", "\n", "acc", "+=", "len", "(", "nodes", "[", "0", "]", ")", "*", "utils", ".", "accuracy", "(", "preds", ",", "self", ".", "labels", "[", "nodes", "[", "0", "]", "]", ")", "\n", "n", "+=", "len", "(", "nodes", "[", "0", "]", ")", "\n", "", "acc", "=", "acc", "/", "n", "\n", "return", "float", "(", "acc", ")", ",", "float", "(", "acc_cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Baseline.Baseline.mAP": [[226, 248], ["Baseline.Baseline.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "Baseline.Baseline.body", "range", "len", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "log_score[].squeeze().cpu().numpy", "average_precision_score", "numpy.isnan", "len", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "torch.cdist", "log_score[].squeeze().cpu", "log_score[].squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["None"], ["", "def", "mAP", "(", "self", ",", "idx_test", ",", "label_nodes", ",", "test_loader", ")", ":", "\n", "        ", "from", "sklearn", ".", "metrics", "import", "average_precision_score", "\n", "self", ".", "eval", "(", ")", "\n", "MAP", "=", "0.0", "\n", "n", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "embedding", "=", "self", ".", "body", "(", "self", ".", "features", ",", "self", ".", "edge_index", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "test_loader", ")", ")", ":", "\n", "                ", "nodes", "=", "test_loader", "[", "i", "]", "\n", "log_score", "=", "-", "torch", ".", "cdist", "(", "embedding", "[", "nodes", "[", "0", "]", "]", ",", "embedding", "[", "label_nodes", "[", "0", "]", "]", ")", "/", "self", ".", "args", ".", "T", "\n", "_", ",", "index", "=", "torch", ".", "topk", "(", "log_score", ",", "k", "=", "5", ",", "dim", "=", "1", ",", "sorted", "=", "False", ")", "\n", "index", "=", "torch", ".", "squeeze", "(", "index", ")", "\n", "y_true", "=", "(", "self", ".", "labels", "[", "label_nodes", "[", "0", "]", "[", "index", "]", "]", "==", "self", ".", "labels", "[", "nodes", "[", "0", "]", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_score", "=", "log_score", "[", ":", ",", "torch", ".", "squeeze", "(", "index", ")", "]", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "AP", "=", "average_precision_score", "(", "y_true", ",", "y_score", ")", "\n", "if", "np", ".", "isnan", "(", "AP", ")", ":", "\n", "                    ", "AP", "=", "0", "\n", "", "MAP", "+=", "AP", "\n", "n", "+=", "len", "(", "nodes", "[", "0", "]", ")", "\n", "\n", "", "", "return", "MAP", "/", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.MLP.MLP.__init__": [[16, 35], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "dropout", "=", "0.5", ",", "lr", "=", "0.01", ",", "weight_decay", "=", "5e-4", ",", "device", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "device", "is", "not", "None", ",", "\"Please specify 'device'!\"", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nfeat", "=", "nfeat", "\n", "self", ".", "hidden_sizes", "=", "[", "nhid", "]", "\n", "self", ".", "nclass", "=", "nclass", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "lr", "=", "lr", "\n", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "nfeat", ",", "nhid", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "nhid", ",", "nclass", ")", ")", "\n", "self", ".", "output", "=", "None", "\n", "self", ".", "best_model", "=", "None", "\n", "self", ".", "best_output", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.MLP.MLP.forward": [[37, 40], ["MLP.MLP.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "return", "self", ".", "body", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.MLP.MLP.fit": [[41, 53], ["features.to", "labels.long().to", "MLP.MLP._train_without_val", "MLP.MLP._train_with_val", "labels.long"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN._train_without_val", "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN._train_with_val"], ["", "def", "fit", "(", "self", ",", "features", ",", "labels", ",", "idx_train", ",", "idx_val", "=", "None", ",", "train_iters", "=", "200", ",", "initialize", "=", "True", ",", "verbose", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        features\n        \"\"\"", "\n", "self", ".", "features", "=", "features", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "labels", "=", "labels", ".", "long", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "\n", "if", "idx_val", "is", "None", ":", "\n", "            ", "self", ".", "_train_without_val", "(", "self", ".", "labels", ",", "idx_train", ",", "train_iters", ",", "verbose", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_train_with_val", "(", "self", ".", "labels", ",", "idx_train", ",", "idx_val", ",", "train_iters", ",", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.MLP.MLP._train_without_val": [[54, 69], ["MLP.MLP.train", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "range", "MLP.MLP.eval", "MLP.MLP.forward", "MLP.MLP.parameters", "torch.Adam.zero_grad", "MLP.MLP.forward", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy.backward", "torch.Adam.step", "print", "torch.cross_entropy.item"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward"], ["", "", "def", "_train_without_val", "(", "self", ",", "labels", ",", "idx_train", ",", "train_iters", ",", "verbose", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "for", "i", "in", "range", "(", "train_iters", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "forward", "(", "self", ".", "features", ")", "\n", "loss_train", "=", "F", ".", "cross_entropy", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "verbose", "and", "i", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch {}, training loss: {}'", ".", "format", "(", "i", ",", "loss_train", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "self", ".", "eval", "(", ")", "\n", "output", "=", "self", ".", "forward", "(", "self", ".", "features", ")", "\n", "self", ".", "output", "=", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.MLP.MLP._train_with_val": [[70, 102], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "range", "MLP.MLP.load_state_dict", "print", "MLP.MLP.parameters", "MLP.MLP.train", "torch.Adam.zero_grad", "MLP.MLP.forward", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy.backward", "torch.Adam.step", "MLP.MLP.eval", "MLP.MLP.forward", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "deeprobust.graph.utils.accuracy", "print", "print", "copy.deepcopy", "MLP.MLP.state_dict", "torch.cross_entropy.item"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.accuracy"], ["", "def", "_train_with_val", "(", "self", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "train_iters", ",", "verbose", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'=== training gcn model ==='", ")", "\n", "", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "\n", "best_loss_val", "=", "100", "\n", "best_acc_val", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "train_iters", ")", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "forward", "(", "self", ".", "features", ")", "\n", "loss_train", "=", "F", ".", "cross_entropy", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "verbose", "and", "i", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch {}, training loss: {}'", ".", "format", "(", "i", ",", "loss_train", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "self", ".", "eval", "(", ")", "\n", "output", "=", "self", ".", "forward", "(", "self", ".", "features", ")", "\n", "loss_val", "=", "F", ".", "cross_entropy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "acc_val", "=", "utils", ".", "accuracy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "\n", "if", "acc_val", ">", "best_acc_val", ":", "\n", "                ", "best_acc_val", "=", "acc_val", "\n", "self", ".", "output", "=", "output", "\n", "weights", "=", "deepcopy", "(", "self", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "'=== picking the best model according to the performance on validation ==='", ")", "\n", "", "self", ".", "load_state_dict", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.MLP.MLP.predict": [[104, 123], ["MLP.MLP.eval", "MLP.MLP.forward", "MLP.MLP.forward"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward"], ["", "def", "predict", "(", "self", ",", "features", "=", "None", ")", ":", "\n", "        ", "\"\"\"By default, the inputs should be unnormalized data\n        Parameters\n        ----------\n        features :\n            node features. If `features` and `adj` are not given, this function will use previous stored `features` and `adj` from training to make predictions.\n        adj :\n            adjcency matrix. If `features` and `adj` are not given, this function will use previous stored `features` and `adj` from training to make predictions.\n        Returns\n        -------\n        torch.FloatTensor\n            output (log probabilities) of GCN\n        \"\"\"", "\n", "\n", "self", ".", "eval", "(", ")", "\n", "if", "features", "is", "None", ":", "\n", "            ", "return", "self", ".", "forward", "(", "self", ".", "features", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "forward", "(", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.MLP.MLP.test": [[125, 141], ["MLP.MLP.eval", "MLP.MLP.predict", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "deeprobust.graph.utils.accuracy", "print", "float", "torch.cross_entropy.item", "deeprobust.graph.utils.accuracy.item"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.MLP.MLP.predict", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.accuracy"], ["", "", "def", "test", "(", "self", ",", "idx_test", ")", ":", "\n", "        ", "\"\"\"Evaluate GCN performance on test set.\n        Parameters\n        ----------\n        idx_test :\n            node testing indices\n        \"\"\"", "\n", "self", ".", "eval", "(", ")", "\n", "output", "=", "self", ".", "predict", "(", ")", "\n", "# output = self.output", "\n", "loss_test", "=", "F", ".", "cross_entropy", "(", "output", "[", "idx_test", "]", ",", "self", ".", "labels", "[", "idx_test", "]", ")", "\n", "acc_test", "=", "utils", ".", "accuracy", "(", "output", "[", "idx_test", "]", ",", "self", ".", "labels", "[", "idx_test", "]", ")", "\n", "print", "(", "\"Test set results:\"", ",", "\n", "\"loss= {:.4f}\"", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "\"accuracy= {:.4f}\"", ".", "format", "(", "acc_test", ".", "item", "(", ")", ")", ")", "\n", "return", "float", "(", "acc_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN.__init__": [[47, 72], ["torch.Module.__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__"], ["def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nclass", ",", "dropout", "=", "0.5", ",", "lr", "=", "0.01", ",", "weight_decay", "=", "5e-4", ",", "with_relu", "=", "True", ",", "with_bias", "=", "True", ",", "self_loop", "=", "True", ",", "device", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "device", "is", "not", "None", ",", "\"Please specify 'device'!\"", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "nfeat", "=", "nfeat", "\n", "self", ".", "hidden_sizes", "=", "[", "nhid", "]", "\n", "self", ".", "nclass", "=", "nclass", "\n", "self", ".", "gc1", "=", "GCNConv", "(", "nfeat", ",", "nhid", ",", "bias", "=", "with_bias", ",", "add_self_loops", "=", "self_loop", ")", "\n", "self", ".", "gc2", "=", "GCNConv", "(", "nhid", ",", "nclass", ",", "bias", "=", "with_bias", ",", "add_self_loops", "=", "self_loop", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "lr", "=", "lr", "\n", "if", "not", "with_relu", ":", "\n", "            ", "self", ".", "weight_decay", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight_decay", "=", "weight_decay", "\n", "", "self", ".", "with_relu", "=", "with_relu", "\n", "self", ".", "with_bias", "=", "with_bias", "\n", "self", ".", "output", "=", "None", "\n", "self", ".", "best_model", "=", "None", "\n", "self", ".", "best_output", "=", "None", "\n", "self", ".", "edge_index", "=", "None", "\n", "self", ".", "edge_weight", "=", "None", "\n", "self", ".", "features", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN.forward": [[73, 82], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout", "GCN.GCN.gc2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "GCN.GCN.gc1", "GCN.GCN.gc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ")", ":", "\n", "        ", "if", "self", ".", "with_relu", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "self", ".", "gc1", "(", "x", ",", "edge_index", ",", "edge_weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "gc1", "(", "x", ",", "adj", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "edge_index", ",", "edge_weight", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN.initialize": [[83, 88], ["GCN.GCN.gc1.reset_parameters", "GCN.GCN.gc2.reset_parameters"], "methods", ["None"], ["", "def", "initialize", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize parameters of GCN.\n        \"\"\"", "\n", "self", ".", "gc1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "gc2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN.fit": [[89, 124], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "GCN.GCN.initialize", "GCN.GCN._train_without_val", "GCN.GCN._train_with_val"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN.initialize", "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN._train_without_val", "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN._train_with_val"], ["", "def", "fit", "(", "self", ",", "features", ",", "edge_index", ",", "edge_weight", ",", "labels", ",", "idx_train", ",", "idx_val", "=", "None", ",", "train_iters", "=", "200", ",", "initialize", "=", "True", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"Train the gcn model, when idx_val is not None, pick the best model according to the validation loss.\n        Parameters\n        ----------\n        features :\n            node features\n        adj :\n            the adjacency matrix. The format could be torch.tensor or scipy matrix\n        labels :\n            node labels\n        idx_train :\n            node training indices\n        idx_val :\n            node validation indices. If not given (None), GCN training process will not adpot early stopping\n        train_iters : int\n            number of training epochs\n        initialize : bool\n            whether to initialize parameters before training\n        verbose : bool\n            whether to show verbose logs\n        \"\"\"", "\n", "\n", "self", ".", "device", "=", "self", ".", "gc1", ".", "weight", ".", "device", "\n", "if", "initialize", ":", "\n", "            ", "self", ".", "initialize", "(", ")", "\n", "\n", "", "self", ".", "edge_index", ",", "self", ".", "edge_weight", "=", "edge_index", ",", "edge_weight", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "labels", "=", "torch", ".", "tensor", "(", "labels", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "\n", "if", "idx_val", "is", "None", ":", "\n", "            ", "self", ".", "_train_without_val", "(", "self", ".", "labels", ",", "idx_train", ",", "train_iters", ",", "verbose", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_train_with_val", "(", "self", ".", "labels", ",", "idx_train", ",", "idx_val", ",", "train_iters", ",", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN._train_without_val": [[125, 140], ["GCN.GCN.train", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "range", "GCN.GCN.eval", "GCN.GCN.forward", "GCN.GCN.parameters", "torch.Adam.zero_grad", "GCN.GCN.forward", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss.backward", "torch.Adam.step", "print", "torch.nll_loss.item"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward"], ["", "", "def", "_train_without_val", "(", "self", ",", "labels", ",", "idx_train", ",", "train_iters", ",", "verbose", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "for", "i", "in", "range", "(", "train_iters", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "forward", "(", "self", ".", "features", ",", "self", ".", "edge_index", ",", "self", ".", "edge_weight", ")", "\n", "loss_train", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "verbose", "and", "i", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch {}, training loss: {}'", ".", "format", "(", "i", ",", "loss_train", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "", "self", ".", "eval", "(", ")", "\n", "output", "=", "self", ".", "forward", "(", "self", ".", "features", ",", "self", ".", "edge_index", ",", "self", ".", "edge_weight", ")", "\n", "self", ".", "output", "=", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN._train_with_val": [[141, 175], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "range", "GCN.GCN.load_state_dict", "print", "GCN.GCN.parameters", "GCN.GCN.train", "torch.Adam.zero_grad", "GCN.GCN.forward", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss.backward", "torch.Adam.step", "GCN.GCN.eval", "GCN.GCN.forward", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "utils.accuracy", "print", "print", "print", "copy.deepcopy", "GCN.GCN.state_dict", "torch.nll_loss.item"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.accuracy"], ["", "def", "_train_with_val", "(", "self", ",", "labels", ",", "idx_train", ",", "idx_val", ",", "train_iters", ",", "verbose", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'=== training gcn model ==='", ")", "\n", "", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "self", ".", "weight_decay", ")", "\n", "\n", "best_loss_val", "=", "100", "\n", "best_acc_val", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "train_iters", ")", ":", "\n", "            ", "self", ".", "train", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "forward", "(", "self", ".", "features", ",", "self", ".", "edge_index", ",", "self", ".", "edge_weight", ")", "\n", "loss_train", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_train", "]", ",", "labels", "[", "idx_train", "]", ")", "\n", "loss_train", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "\n", "self", ".", "eval", "(", ")", "\n", "output", "=", "self", ".", "forward", "(", "self", ".", "features", ",", "self", ".", "edge_index", ",", "self", ".", "edge_weight", ")", "\n", "loss_val", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "acc_val", "=", "utils", ".", "accuracy", "(", "output", "[", "idx_val", "]", ",", "labels", "[", "idx_val", "]", ")", "\n", "\n", "if", "verbose", "and", "i", "%", "10", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch {}, training loss: {}'", ".", "format", "(", "i", ",", "loss_train", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "\"acc_val: {:.4f}\"", ".", "format", "(", "acc_val", ")", ")", "\n", "", "if", "acc_val", ">", "best_acc_val", ":", "\n", "                ", "best_acc_val", "=", "acc_val", "\n", "self", ".", "output", "=", "output", "\n", "weights", "=", "deepcopy", "(", "self", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "'=== picking the best model according to the performance on validation ==='", ")", "\n", "", "self", ".", "load_state_dict", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.GCN.GCN.test": [[177, 192], ["GCN.GCN.eval", "GCN.GCN.forward", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "utils.accuracy", "print", "float", "torch.nll_loss.item", "utils.accuracy.item"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward", "home.repos.pwc.inspect_result.enyandai_segnn.None.utils.accuracy"], ["", "def", "test", "(", "self", ",", "idx_test", ")", ":", "\n", "        ", "\"\"\"Evaluate GCN performance on test set.\n        Parameters\n        ----------\n        idx_test :\n            node testing indices\n        \"\"\"", "\n", "self", ".", "eval", "(", ")", "\n", "output", "=", "self", ".", "forward", "(", "self", ".", "features", ",", "self", ".", "edge_index", ",", "self", ".", "edge_weight", ")", "\n", "loss_test", "=", "F", ".", "nll_loss", "(", "output", "[", "idx_test", "]", ",", "self", ".", "labels", "[", "idx_test", "]", ")", "\n", "acc_test", "=", "utils", ".", "accuracy", "(", "output", "[", "idx_test", "]", ",", "self", ".", "labels", "[", "idx_test", "]", ")", "\n", "print", "(", "\"Test set results:\"", ",", "\n", "\"loss= {:.4f}\"", ".", "format", "(", "loss_test", ".", "item", "(", ")", ")", ",", "\n", "\"accuracy= {:.4f}\"", ".", "format", "(", "acc_test", ".", "item", "(", ")", ")", ")", "\n", "return", "float", "(", "acc_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.DeConv.__init__": [[15, 24], ["kwargs.setdefault", "torch_geometric.nn.conv.MessagePassing.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.nn.init.uniform_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "init", ",", "**", "kwargs", ")", ":", "# yapf: disable", "\n", "        ", "kwargs", ".", "setdefault", "(", "'aggr'", ",", "'mean'", ")", "\n", "super", "(", "DeConv", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "\n", "self", ".", "lin_l", "=", "torch", ".", "nn", ".", "Parameter", "(", "0.01", "*", "torch", ".", "ones", "(", "[", "in_channels", "]", ")", ")", "\n", "if", "init", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "lin_l", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.DeConv.forward": [[25, 36], ["isinstance", "Backbone.DeConv.propagate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "Union", "[", "Tensor", ",", "OptPairTensor", "]", ",", "edge_index", ":", "Adj", ",", "\n", "size", ":", "Size", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "if", "isinstance", "(", "x", ",", "Tensor", ")", ":", "\n", "            ", "x", ":", "OptPairTensor", "=", "(", "x", ",", "x", ")", "\n", "\n", "# propagate_type: (x: OptPairTensor)", "\n", "", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "size", "=", "size", ")", "\n", "out", "=", "out", "*", "self", ".", "lin_l", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.DeConv.message": [[37, 39], ["None"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.DeConv.message_and_aggregate": [[40, 44], ["adj_t.set_value.set_value.set_value", "torch_sparse.matmul"], "methods", ["None"], ["", "def", "message_and_aggregate", "(", "self", ",", "adj_t", ":", "SparseTensor", ",", "\n", "x", ":", "OptPairTensor", ")", "->", "Tensor", ":", "\n", "        ", "adj_t", "=", "adj_t", ".", "set_value", "(", "None", ",", "layout", "=", "None", ")", "\n", "return", "matmul", "(", "adj_t", ",", "x", "[", "0", "]", ",", "reduce", "=", "self", ".", "aggr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.DeConv.__repr__": [[45, 47], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {})'", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.DeGNN.__init__": [[50, 62], ["torch.Module.__init__", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "Backbone.DeConv", "torch.Linear", "torch.Linear", "torch.Linear", "body.append", "body.append", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "nlayer", ",", "init", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "DeGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "\n", "body", "=", "[", "nn", ".", "Linear", "(", "nfeat", ",", "nhid", ")", "]", "\n", "for", "l", "in", "range", "(", "nlayer", "-", "1", ")", ":", "\n", "            ", "body", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "body", ".", "append", "(", "nn", ".", "Linear", "(", "nhid", ",", "nhid", ")", ")", "\n", "\n", "", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "*", "body", ")", "\n", "self", ".", "agg", "=", "DeConv", "(", "nhid", ",", "init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.DeGNN.forward": [[63, 67], ["Backbone.DeGNN.body", "Backbone.DeGNN.agg"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "h", "=", "self", ".", "body", "(", "x", ")", "\n", "neigh", "=", "self", ".", "agg", "(", "h", ",", "edge_index", ")", "\n", "return", "h", "+", "neigh", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GCN.__init__": [[71, 77], ["torch.Module.__init__", "torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "dropout", "=", "0.5", ")", ":", "\n", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gc1", "=", "GCNConv", "(", "nfeat", ",", "nhid", ")", "\n", "self", ".", "gc2", "=", "GCNConv", "(", "nhid", ",", "nhid", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GCN.forward": [[78, 84], ["torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "Backbone.GCN.gc2", "Backbone.GCN.gc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "gc1", "(", "x", ",", "edge_index", ")", ")", "\n", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "gc2", "(", "x", ",", "edge_index", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.MLP.__init__": [[87, 95], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ")", ":", "\n", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "body", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "nfeat", ",", "nhid", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "nhid", ",", "nhid", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.MLP.forward": [[96, 99], ["Backbone.MLP.body"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "x", "=", "self", ".", "body", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__": [[102, 110], ["torch.Module.__init__", "torch_geometric.nn.GCNConv", "torch.Linear", "torch.Linear", "torch.Linear", "torch_geometric.nn.GCNConv", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nfeat", ",", "nhid", ",", "dropout", "=", "0.5", ")", ":", "\n", "\n", "        ", "super", "(", "GIN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gc1", "=", "GCNConv", "(", "nfeat", ",", "nhid", ")", "\n", "self", ".", "lin_1", "=", "nn", ".", "Linear", "(", "nhid", ",", "nhid", ")", "\n", "self", ".", "gc2", "=", "GCNConv", "(", "nhid", ",", "nhid", ")", "\n", "self", ".", "lin_2", "=", "nn", ".", "Linear", "(", "nhid", ",", "nhid", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.enyandai_segnn.models.Backbone.GIN.forward": [[111, 119], ["Backbone.GIN.lin_1", "torch.dropout", "torch.dropout", "torch.dropout", "Backbone.GIN.lin_2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "Backbone.GIN.gc1", "Backbone.GIN.gc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "\n", "        ", "x", "=", "self", ".", "lin_1", "(", "F", ".", "relu", "(", "self", ".", "gc1", "(", "x", ",", "edge_index", ")", ")", ")", "\n", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "lin_2", "(", "F", ".", "relu", "(", "self", ".", "gc2", "(", "x", ",", "edge_index", ")", ")", ")", "\n", "\n", "return", "x", "\n", "", "", ""]]}