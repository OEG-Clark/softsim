{"home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.local.normalize_phone.main": [[13, 46], ["parser.parse_args", "print", "sys.exit", "open", "f.readlines", "open", "open", "rf.readlines", "os.path.exists", "os.path.exists", "line.strip().split.strip().split", "line.strip().split.strip().split", "wf.writelines", "line.strip().split.strip", "len", "line.strip().split.strip", "len", "print", "sys.exit", "len"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "map", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "src", ")", ":", "\n", "        ", "print", "(", "\"Map file or source file not exist !\"", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "map_dict", "=", "{", "}", "\n", "with", "open", "(", "args", ".", "map", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "if", "args", ".", "to", "==", "\"60-48\"", ":", "\n", "                ", "if", "len", "(", "line", ")", "==", "1", ":", "\n", "                    ", "map_dict", "[", "line", "[", "0", "]", "]", "=", "\"\"", "\n", "", "else", ":", "\n", "                    ", "map_dict", "[", "line", "[", "0", "]", "]", "=", "line", "[", "1", "]", "\n", "", "", "elif", "args", ".", "to", "==", "\"60-39\"", ":", "\n", "                ", "if", "len", "(", "line", ")", "==", "1", ":", "\n", "                    ", "map_dict", "[", "line", "[", "0", "]", "]", "=", "\"\"", "\n", "", "else", ":", "\n", "                    ", "map_dict", "[", "line", "[", "0", "]", "]", "=", "line", "[", "2", "]", "\n", "", "", "elif", "args", ".", "to", "==", "\"48-39\"", ":", "\n", "                ", "if", "len", "(", "line", ")", "==", "3", ":", "\n", "                    ", "map_dict", "[", "line", "[", "1", "]", "]", "=", "line", "[", "2", "]", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "\"%s phonemes are not supported\"", "%", "args", ".", "to", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "", "with", "open", "(", "args", ".", "src", ",", "'r'", ")", "as", "rf", ",", "open", "(", "args", ".", "tgt", ",", "'w'", ")", "as", "wf", ":", "\n", "        ", "for", "line", "in", "rf", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "uttid", ",", "utt", "=", "line", "[", "0", "]", ",", "line", "[", "1", ":", "]", "\n", "map_utt", "=", "[", "map_dict", "[", "phone", "]", "for", "phone", "in", "utt", "if", "map_dict", "[", "phone", "]", "!=", "\"\"", "]", "\n", "wf", ".", "writelines", "(", "uttid", "+", "' '", "+", "' '", ".", "join", "(", "map_utt", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.local.l2arctic_prep.del_repeat_sil": [[31, 39], ["range", "len", "tmp.append"], "function", ["None"], ["def", "del_repeat_sil", "(", "phn_lst", ")", ":", "\n", "    ", "tmp", "=", "[", "phn_lst", "[", "0", "]", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "phn_lst", ")", ")", ":", "\n", "        ", "if", "(", "phn_lst", "[", "i", "]", "==", "phn_lst", "[", "i", "-", "1", "]", "and", "phn_lst", "[", "i", "]", "==", "\"sil\"", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "tmp", ".", "append", "(", "phn_lst", "[", "i", "]", ")", "\n", "", "", "return", "tmp", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.NgramLM.LanguageModel.__init__": [[16, 24], ["math.log", "NgramLM.LanguageModel.initngrams"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.NgramLM.LanguageModel.initngrams"], ["def", "__init__", "(", "self", ",", "arpa_file", "=", "None", ",", "n_gram", "=", "2", ",", "start", "=", "'<s>'", ",", "end", "=", "'</s>'", ",", "unk", "=", "'<unk>'", ")", ":", "\n", "        ", "\"Load arpa file to get words and prob\"", "\n", "self", ".", "n_gram", "=", "n_gram", "\n", "self", ".", "start", "=", "start", "\n", "self", ".", "end", "=", "end", "\n", "self", ".", "unk", "=", "unk", "\n", "self", ".", "scale", "=", "math", ".", "log", "(", "10", ")", "#arpa\u683c\u5f0f\u662f\u4ee510\u4e3a\u5e95\u7684\u5bf9\u6570\u6982\u7387\uff0c\u8f6c\u5316\u4e3a\u4ee5e\u4e3a\u5e95", "\n", "self", ".", "initngrams", "(", "arpa_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.NgramLM.LanguageModel.initngrams": [[25, 59], ["open", "open.readlines", "open.close", "lines.strip", "line.split.split.split", "line.split.split.split", "len", "len", "len", "len", "float", "float", "float", "float", "float", "float"], "methods", ["None"], ["", "def", "initngrams", "(", "self", ",", "fn", ")", ":", "\n", "        ", "\"internal init of word bigrams\"", "\n", "self", ".", "unigram", "=", "{", "}", "\n", "self", ".", "bigram", "=", "{", "}", "\n", "if", "self", ".", "n_gram", "==", "3", ":", "\n", "            ", "self", ".", "trigrame", "=", "{", "}", "\n", "\n", "# go through text and create each bigrams", "\n", "", "f", "=", "open", "(", "fn", ",", "'r'", ")", "\n", "recording", "=", "0", "\n", "for", "lines", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "line", "=", "lines", ".", "strip", "(", "'\\n'", ")", "\n", "#a = re.match('gram', line)", "\n", "if", "line", "==", "\"\\\\1-grams:\"", ":", "\n", "                ", "recording", "=", "1", "\n", "continue", "\n", "", "if", "line", "==", "\"\\\\2-grams:\"", ":", "\n", "                ", "recording", "=", "2", "\n", "continue", "\n", "", "if", "recording", "==", "1", ":", "\n", "                ", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "line", ")", "==", "3", ":", "\n", "                    ", "self", ".", "unigram", "[", "line", "[", "1", "]", "]", "=", "[", "self", ".", "scale", "*", "float", "(", "line", "[", "0", "]", ")", ",", "self", ".", "scale", "*", "float", "(", "line", "[", "2", "]", ")", "]", "#save the prob and backoff prob", "\n", "", "elif", "len", "(", "line", ")", "==", "2", ":", "\n", "                    ", "self", ".", "unigram", "[", "line", "[", "1", "]", "]", "=", "[", "self", ".", "scale", "*", "float", "(", "line", "[", "0", "]", ")", ",", "0.0", "]", "\n", "", "", "if", "recording", "==", "2", ":", "\n", "                ", "line", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "line", ")", "==", "3", ":", "\n", "#print(line[1])", "\n", "                    ", "self", ".", "bigram", "[", "line", "[", "1", "]", "]", "=", "[", "self", ".", "scale", "*", "float", "(", "line", "[", "0", "]", ")", ",", "self", ".", "scale", "*", "float", "(", "line", "[", "2", "]", ")", "]", "\n", "", "elif", "len", "(", "line", ")", "==", "2", ":", "\n", "                    ", "self", ".", "bigram", "[", "line", "[", "1", "]", "]", "=", "[", "self", ".", "scale", "*", "float", "(", "line", "[", "0", "]", ")", ",", "0.0", "]", "\n", "", "", "", "f", ".", "close", "(", ")", "\n", "self", ".", "unigram", "[", "'UNK'", "]", "=", "self", ".", "unigram", "[", "self", ".", "unk", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.NgramLM.LanguageModel.get_uni_prob": [[61, 64], ["None"], "methods", ["None"], ["", "def", "get_uni_prob", "(", "self", ",", "wid", ")", ":", "\n", "        ", "\"Returns unigram probabiliy of word\"", "\n", "return", "self", ".", "unigram", "[", "wid", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.NgramLM.LanguageModel.get_bi_prob": [[65, 79], ["None"], "methods", ["None"], ["", "def", "get_bi_prob", "(", "self", ",", "w1", ",", "w2", ")", ":", "\n", "        ", "'''\n        Return bigrams probability p(w2 | w1)\n        if bigrame does not exist, use backoff prob\n        '''", "\n", "if", "w1", "==", "''", ":", "\n", "            ", "w1", "=", "self", ".", "start", "\n", "", "if", "w2", "==", "''", ":", "\n", "            ", "w2", "=", "self", ".", "end", "\n", "", "key", "=", "w1", "+", "' '", "+", "w2", "\n", "if", "key", "not", "in", "self", ".", "bigram", ":", "\n", "            ", "return", "self", ".", "unigram", "[", "w1", "]", "[", "1", "]", "+", "self", ".", "unigram", "[", "w2", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "bigram", "[", "key", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.NgramLM.LanguageModel.score_bg": [[80, 91], ["sentence.strip().split", "NgramLM.LanguageModel.get_bi_prob", "range", "NgramLM.LanguageModel.get_bi_prob", "NgramLM.LanguageModel.get_bi_prob", "sentence.strip", "len"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.NgramLM.LanguageModel.get_bi_prob", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.NgramLM.LanguageModel.get_bi_prob", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.NgramLM.LanguageModel.get_bi_prob"], ["", "", "def", "score_bg", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "'''\n        Score a sentence using bigram, return P(sentence)\n        '''", "\n", "val", "=", "0.0", "\n", "words", "=", "sentence", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "val", "+=", "self", ".", "get_bi_prob", "(", "self", ".", "start", ",", "words", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "words", ")", "-", "1", ")", ":", "\n", "            ", "val", "+=", "self", ".", "get_bi_prob", "(", "words", "[", "i", "]", ",", "words", "[", "i", "+", "1", "]", ")", "\n", "", "val", "+=", "self", ".", "get_bi_prob", "(", "words", "[", "-", "1", "]", ",", "self", ".", "end", ")", "\n", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.Vocab.__init__": [[14, 26], ["data_loader.Vocab.read_lang"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.Vocab.read_lang"], ["    ", "def", "__init__", "(", "self", ",", "vocab_file", ")", ":", "\n", "        ", "self", ".", "vocab_file", "=", "vocab_file", "\n", "self", ".", "word2index", "=", "{", "\"blank\"", ":", "0", ",", "\"UNK\"", ":", "1", "}", "\n", "self", ".", "index2word", "=", "{", "0", ":", "\"blank\"", ",", "1", ":", "\"UNK\"", "}", "\n", "self", ".", "word2count", "=", "{", "}", "\n", "self", ".", "n_words", "=", "2", "\n", "self", ".", "read_lang", "(", ")", "\n", "\n", "", "def", "add_sentence", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "for", "word", "in", "sentence", ".", "split", "(", "' '", ")", ":", "\n", "            ", "self", ".", "add_word", "(", "word", ")", "\n", "\n", "", "", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.Vocab.add_sentence": [[27, 30], ["sentence.split", "data_loader.Vocab.add_word"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.Vocab.add_word"], ["        ", "if", "word", "not", "in", "self", ".", "word2index", ":", "\n", "            ", "self", ".", "word2index", "[", "word", "]", "=", "self", ".", "n_words", "\n", "self", ".", "word2count", "[", "word", "]", "=", "1", "\n", "self", ".", "index2word", "[", "self", ".", "n_words", "]", "=", "word", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.Vocab.add_word": [[31, 39], ["None"], "methods", ["None"], ["self", ".", "n_words", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "word2count", "[", "word", "]", "+=", "1", "\n", "\n", "", "", "def", "read_lang", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Reading vocabulary from {}\"", ".", "format", "(", "self", ".", "vocab_file", ")", ")", "\n", "with", "open", "(", "self", ".", "vocab_file", ",", "'r'", ")", "as", "rf", ":", "\n", "            ", "line", "=", "rf", ".", "readline", "(", ")", "\n", "while", "line", ":", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.Vocab.read_lang": [[40, 53], ["print", "print", "open", "rf.readline", "rf.readline.strip().split", "data_loader.Vocab.add_sentence", "rf.readline", "len", "rf.readline.strip"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.Vocab.add_sentence"], ["                ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "line", ")", ">", "1", ":", "\n", "                    ", "sen", "=", "' '", ".", "join", "(", "line", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "                    ", "sen", "=", "line", "[", "0", "]", "\n", "", "self", ".", "add_sentence", "(", "sen", ")", "\n", "line", "=", "rf", ".", "readline", "(", ")", "\n", "", "", "print", "(", "\"Vocabulary size is {}\"", ".", "format", "(", "self", ".", "n_words", ")", ")", "\n", "\n", "\n", "", "", "class", "SpeechDataset", "(", "Dataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "vocab", ",", "scp_path", ",", "lab_path", ",", "trans_path", ",", "opts", ",", "is_training", "=", "False", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "is_training", "=", "is_training", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.SpeechDataset.__init__": [[56, 78], ["process_label_file", "data_loader.SpeechDataset.process_feature_label", "open", "f.readlines", "line.strip().split", "data_loader.SpeechDataset.item.append", "line.strip"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.process_label_file", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.SpeechDataset.process_feature_label"], ["self", ".", "trans_path", "=", "trans_path", "\n", "self", ".", "left_ctx", "=", "opts", ".", "left_ctx", "\n", "self", ".", "right_ctx", "=", "opts", ".", "right_ctx", "\n", "self", ".", "n_skip_frame", "=", "opts", ".", "n_skip_frame", "\n", "self", ".", "n_downsample", "=", "opts", ".", "n_downsample", "\n", "self", ".", "feature_type", "=", "opts", ".", "feature_type", "\n", "self", ".", "mel", "=", "opts", ".", "mel", "\n", "\n", "if", "opts", ".", "feature_type", "==", "\"waveform\"", ":", "\n", "            ", "self", ".", "label_dict", "=", "process_label_file", "(", "label_file", ",", "self", ".", "out_type", ",", "self", ".", "class2int", ")", "\n", "self", ".", "item", "=", "[", "]", "\n", "with", "open", "(", "wav_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "                    ", "utt", ",", "path", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "self", ".", "item", ".", "append", "(", "(", "path", ",", "self", ".", "label_dict", "[", "utt", "]", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "process_feature_label", "(", ")", "\n", "\n", "", "", "def", "process_feature_label", "(", "self", ")", ":", "\n", "        ", "path_dict", "=", "[", "]", "\n", "#read the ark path", "\n", "with", "open", "(", "self", ".", "scp_path", ",", "'r'", ")", "as", "rf", ":", "\n", "            ", "line", "=", "rf", ".", "readline", "(", ")", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.SpeechDataset.process_feature_label": [[79, 115], ["dict", "dict", "print", "range", "open", "rf.readline", "open", "rf.readline", "open", "rf.readline", "len", "len", "len", "data_loader.SpeechDataset.item.append", "rf.readline.strip().split", "path_dict.append", "rf.readline", "rf.readline.strip().split", "rf.readline", "rf.readline.strip().split", "rf.readline", "len", "rf.readline.strip", "rf.readline.strip", "label.split", "rf.readline.strip", "trans.split"], "methods", ["None"], ["while", "line", ":", "\n", "                ", "utt", ",", "path", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "path_dict", ".", "append", "(", "(", "utt", ",", "path", ")", ")", "\n", "line", "=", "rf", ".", "readline", "(", ")", "\n", "\n", "#read the label", "\n", "", "", "label_dict", "=", "dict", "(", ")", "\n", "with", "open", "(", "self", ".", "lab_path", ",", "'r'", ")", "as", "rf", ":", "\n", "            ", "line", "=", "rf", ".", "readline", "(", ")", "\n", "while", "line", ":", "\n", "                ", "utt", ",", "label", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "\n", "label_dict", "[", "utt", "]", "=", "[", "self", ".", "vocab", ".", "word2index", "[", "c", "]", "if", "c", "in", "self", ".", "vocab", ".", "word2index", "else", "self", ".", "vocab", ".", "word2index", "[", "'UNK'", "]", "for", "c", "in", "label", ".", "split", "(", ")", "]", "\n", "line", "=", "rf", ".", "readline", "(", ")", "\n", "\n", "#read the transcript", "\n", "", "", "trans_dict", "=", "dict", "(", ")", "\n", "with", "open", "(", "self", ".", "trans_path", ",", "'r'", ")", "as", "rf", ":", "\n", "            ", "line", "=", "rf", ".", "readline", "(", ")", "\n", "while", "line", ":", "\n", "                ", "utt", ",", "trans", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "\n", "trans_dict", "[", "utt", "]", "=", "[", "self", ".", "vocab", ".", "word2index", "[", "c", "]", "if", "c", "in", "self", ".", "vocab", ".", "word2index", "else", "self", ".", "vocab", ".", "word2index", "[", "'UNK'", "]", "for", "c", "in", "trans", ".", "split", "(", ")", "]", "\n", "line", "=", "rf", ".", "readline", "(", ")", "\n", "#print(len(path_dict),len(label_dict))", "\n", "", "", "assert", "len", "(", "path_dict", ")", "==", "len", "(", "label_dict", ")", "\n", "print", "(", "\"Reading %d lines from %s\"", "%", "(", "len", "(", "label_dict", ")", ",", "self", ".", "lab_path", ")", ")", "\n", "\n", "self", ".", "item", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "path_dict", ")", ")", ":", "\n", "            ", "utt", ",", "path", "=", "path_dict", "[", "i", "]", "\n", "self", ".", "item", ".", "append", "(", "(", "path", ",", "label_dict", "[", "utt", "]", ",", "trans_dict", "[", "utt", "]", ",", "utt", ")", ")", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "feature_type", "==", "\"waveform\"", ":", "\n", "            ", "path", ",", "label", "=", "self", ".", "item", "[", "idx", "]", "\n", "return", "(", "load_wave", "(", "path", ")", ",", "label", ")", "\n", "", "else", ":", "\n", "            ", "path", ",", "label", ",", "trans", ",", "utt", "=", "self", ".", "item", "[", "idx", "]", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.SpeechDataset.__getitem__": [[116, 140], ["kaldiio.load_mat", "utils.tools.skip_feat", "utils.tools.load_wave", "utils.tools.spec_augment", "sum", "utils.tools.make_context", "numpy.vstack", "utils.tools.data_enhancement", "utils.tools.F_Mel", "torch.from_numpy", "torch.LongTensor", "torch.LongTensor", "numpy.zeros", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.skip_feat", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.load_wave", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.spec_augment", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.make_context", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.data_enhancement", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.F_Mel"], ["feat", "=", "kaldiio", ".", "load_mat", "(", "path", ")", "\n", "## data agument   ", "\n", "if", "(", "self", ".", "is_training", "==", "True", ")", ":", "\n", "                ", "feat", "=", "spec_augment", "(", "feat", ")", "\n", "trans", "=", "[", "data_enhance", "(", "phoneme", ")", "for", "phoneme", "in", "trans", "]", "\n", "", "feat", "=", "skip_feat", "(", "make_context", "(", "feat", ",", "self", ".", "left_ctx", ",", "self", ".", "right_ctx", ")", ",", "self", ".", "n_skip_frame", ")", "\n", "seq_len", ",", "dim", "=", "feat", ".", "shape", "\n", "if", "seq_len", "%", "self", ".", "n_downsample", "!=", "0", ":", "\n", "                ", "pad_len", "=", "self", ".", "n_downsample", "-", "seq_len", "%", "self", ".", "n_downsample", "\n", "feat", "=", "np", ".", "vstack", "(", "[", "feat", ",", "np", ".", "zeros", "(", "(", "pad_len", ",", "dim", ")", ")", "]", ")", "\n", "", "if", "self", ".", "mel", ":", "\n", "                ", "return", "(", "F_Mel", "(", "torch", ".", "from_numpy", "(", "feat", ")", ",", "audio_conf", ")", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "return", "(", "torch", ".", "from_numpy", "(", "feat", ")", ",", "torch", ".", "LongTensor", "(", "label", ")", ",", "torch", ".", "LongTensor", "(", "trans", ")", ",", "utt", ")", "\n", "\n", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "item", ")", "\n", "\n", "", "", "def", "create_input", "(", "batch", ")", ":", "\n", "    ", "inputs_max_length", "=", "max", "(", "x", "[", "0", "]", ".", "size", "(", "0", ")", "for", "x", "in", "batch", ")", "\n", "feat_size", "=", "batch", "[", "0", "]", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "targets_max_length", "=", "max", "(", "x", "[", "1", "]", ".", "size", "(", "0", ")", "for", "x", "in", "batch", ")", "\n", "\n", "trans_max_length", "=", "max", "(", "x", "[", "2", "]", ".", "size", "(", "0", ")", "for", "x", "in", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.SpeechDataset.__len__": [[141, 143], ["len"], "methods", ["None"], ["batch_size", "=", "len", "(", "batch", ")", "\n", "batch_data", "=", "torch", ".", "zeros", "(", "batch_size", ",", "inputs_max_length", ",", "feat_size", ")", "\n", "batch_label", "=", "torch", ".", "zeros", "(", "batch_size", ",", "targets_max_length", ")", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.SpeechDataLoader.__init__": [[183, 186], ["torch.utils.data.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.__init__"], ["for", "i", "in", "range", "(", "1", ")", ":", "\n", "        ", "show", "=", "dev_dataset", "[", "i", "]", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "text", "=", "dev_dataset", "[", "i", "]", "[", "1", "]", "\n", "for", "num", "in", "range", "(", "len", "(", "text", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.data_loader.create_input": [[144, 175], ["max", "[].size", "max", "max", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "feature.size", "label.size", "trans.size", "batch_data[].narrow().copy_", "batch_label[].narrow().copy_", "batch_trans[].narrow().copy_", "utt_list.append", "torch.zeros.float", "torch.zeros.float", "torch.zeros.long", "torch.zeros.long", "torch.zeros.long", "torch.zeros.long", "x[].size", "x[].size", "x[].size", "batch_data[].narrow", "batch_label[].narrow", "batch_trans[].narrow"], "function", ["None"], ["batch_trans", "=", "torch", ".", "zeros", "(", "batch_size", ",", "trans_max_length", ")", "\n", "input_sizes", "=", "torch", ".", "zeros", "(", "batch_size", ")", "\n", "target_sizes", "=", "torch", ".", "zeros", "(", "batch_size", ")", "\n", "trans_sizes", "=", "torch", ".", "zeros", "(", "batch_size", ")", "\n", "utt_list", "=", "[", "]", "\n", "\n", "for", "x", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "feature", ",", "label", ",", "trans", ",", "utt", "=", "batch", "[", "x", "]", "\n", "feature_length", "=", "feature", ".", "size", "(", "0", ")", "\n", "label_length", "=", "label", ".", "size", "(", "0", ")", "\n", "trans_length", "=", "trans", ".", "size", "(", "0", ")", "\n", "\n", "batch_data", "[", "x", "]", ".", "narrow", "(", "0", ",", "0", ",", "feature_length", ")", ".", "copy_", "(", "feature", ")", "\n", "batch_label", "[", "x", "]", ".", "narrow", "(", "0", ",", "0", ",", "label_length", ")", ".", "copy_", "(", "label", ")", "\n", "batch_trans", "[", "x", "]", ".", "narrow", "(", "0", ",", "0", ",", "trans_length", ")", ".", "copy_", "(", "trans", ")", "\n", "\n", "input_sizes", "[", "x", "]", "=", "feature_length", "/", "inputs_max_length", "\n", "target_sizes", "[", "x", "]", "=", "label_length", "\n", "trans_sizes", "[", "x", "]", "=", "trans_length", "\n", "utt_list", ".", "append", "(", "utt", ")", "\n", "", "return", "batch_data", ".", "float", "(", ")", ",", "input_sizes", ".", "float", "(", ")", ",", "batch_label", ".", "long", "(", ")", ",", "target_sizes", ".", "long", "(", ")", ",", "batch_trans", ".", "long", "(", ")", ",", "trans_sizes", ".", "long", "(", ")", ",", "utt_list", "\n", "\n", "", "'''\nclass torch.utils.data.DataLoader(dataset, batch_size=1, shuffle=False, sampler=None, batch_sampler=None, num_workers=0, \n                                                    collate_fn=<function default_collate>, pin_memory=False, drop_last=False)\nsubclass of DataLoader and rewrite the collate_fn to form batch\n'''", "\n", "\n", "class", "SpeechDataLoader", "(", "DataLoader", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SpeechDataLoader", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "collate_fn", "=", "create_input", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.load_audio": [[151, 166], ["torchaudio.load", "sound.mean.numpy", "len", "sound.mean.squeeze", "sound.mean.mean"], "function", ["None"], ["\n", "", "def", "data_enhance", "(", "phone", ",", "mutation_prob", "=", ".1", ",", "enhancement_type", "=", "1", ",", "phone_num", "=", "42", ")", ":", "\n", "    ", "\"\"\"\n    Function:\n        data enhancement: revise transcript.\n    parameters:\n        phone: the norm phone(int), idx in Vocab function. egs:vocab.idx2word\n        mutation_prob: the probability of phone mutations(0<= mutation_prob <= 1)\n        enhancement_type: the type of enhancement(1/2/3/4)\n                          type 1: Enhancement based on consonant and vowel\n                          type 2: Enhancement based on data distribution\n                          type 3: Enhancement based on literally random\n                          type 4: Enhancement based on setting zero\n    return:\n        mutation_phone: mutation phone\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.load_wave": [[167, 181], ["tools.load_audio", "torch.FloatTensor", "torch.FloatTensor.mean", "torch.FloatTensor.std", "torch.FloatTensor.add_", "torch.FloatTensor.div_"], "function", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.load_audio"], ["mutation_phone", "=", "phone", "\n", "\n", "if", "enhancement_type", "==", "1", ":", "\n", "# random mutation", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "mutation_prob", ":", "\n", "# substite from vowels", "\n", "            ", "if", "index2word", "[", "mutation_phone", "]", "in", "vowels", ":", "\n", "                ", "mutation_phone", "=", "word2index", "[", "random", ".", "choice", "(", "vowels", ")", "]", "\n", "# substite from consonants", "\n", "", "elif", "index2word", "[", "mutation_phone", "]", "in", "consonants", ":", "\n", "# get the consonants phone", "\n", "                ", "consonants_phone", "=", "random", ".", "choice", "(", "consonants", ")", "\n", "# get the index of the consonants_phone", "\n", "mutation_phone", "=", "word2index", "[", "consonants_phone", "]", "\n", "", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.F_Mel": [[182, 204], ["fre_f.numpy().tolist.size", "fre_f.numpy().tolist.numpy().tolist", "torch.FloatTensor", "librosa.mel_frequencies", "range", "mel_f.append", "fre_f.numpy().tolist.numpy", "int", "mel_f_frame.append", "math.floor"], "function", ["None"], ["            ", "pass", "\n", "", "", "elif", "enhancement_type", "==", "2", ":", "\n", "# random mutation", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "mutation_prob", ":", "\n", "# substite from common incorrect phones", "\n", "            ", "if", "index2word", "[", "mutation_phone", "]", "in", "common_incorrect_voc", ".", "keys", "(", ")", ":", "\n", "                ", "mutation_phone", "=", "index2word", "[", "mutation_phone", "]", "\n", "# get the common incorrect phone", "\n", "common_incorrect_phone", "=", "random", ".", "choice", "(", "common_incorrect_voc", "[", "mutation_phone", "]", ")", "\n", "# transfer phone to index", "\n", "common_incorrect_phone_index", "=", "word2index", "[", "common_incorrect_phone", "]", "\n", "mutation_phone", "=", "common_incorrect_phone_index", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "", "", "elif", "enhancement_type", "==", "3", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "mutation_prob", ":", "\n", "            ", "mutation_phone", "=", "(", "phone", "+", "random", ".", "randint", "(", "0", ",", "phone_num", ")", ")", "%", "phone_num", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "", "elif", "enhancement_type", "==", "4", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "mutation_prob", ":", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.make_context": [[205, 215], ["range", "feature.reverse", "range", "numpy.hstack", "feature.append", "feature.append", "numpy.vstack", "numpy.vstack"], "function", ["None"], ["            ", "mutation_phone", "=", "0", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "", "return", "mutation_phone", "\n", "\n", ""]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.skip_feat": [[216, 226], ["range", "numpy.vstack", "skip_feature.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.spec_augment": [[227, 254], ["numpy.array", "range", "range", "numpy.random.uniform", "int", "random.randint", "numpy.random.uniform", "int", "random.randint"], "function", ["None"], ["\n", "\n", ""]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.process_label_file": [[256, 286], ["dict", "open", "open.readlines", "open.close", "label.split.strip", "range", "label.split.split", "range", "label.split.split", "label.split.split", "len", "len", "label_list.append", "label[].lower", "label_list.append", "label_list.append", "label[].lower"], "function", ["None"], []], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.data_enhance": [[152, 210], ["random.random", "random.random", "random.choice", "common_incorrect_voc.keys", "random.choice", "random.random", "random.choice", "random.random", "random.randint"], "function", ["None"], ["", "def", "data_enhance", "(", "phone", ",", "mutation_prob", "=", ".1", ",", "enhancement_type", "=", "1", ",", "phone_num", "=", "42", ")", ":", "\n", "    ", "\"\"\"\n    Function:\n        data enhancement: revise transcript.\n    parameters:\n        phone: the norm phone(int), idx in Vocab function. egs:vocab.idx2word\n        mutation_prob: the probability of phone mutations(0<= mutation_prob <= 1)\n        enhancement_type: the type of enhancement(1/2/3/4)\n                          type 1: Enhancement based on consonant and vowel\n                          type 2: Enhancement based on data distribution\n                          type 3: Enhancement based on literally random\n                          type 4: Enhancement based on setting zero\n    return:\n        mutation_phone: mutation phone\n    \"\"\"", "\n", "mutation_phone", "=", "phone", "\n", "\n", "if", "enhancement_type", "==", "1", ":", "\n", "# random mutation", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "mutation_prob", ":", "\n", "# substite from vowels", "\n", "            ", "if", "index2word", "[", "mutation_phone", "]", "in", "vowels", ":", "\n", "                ", "mutation_phone", "=", "word2index", "[", "random", ".", "choice", "(", "vowels", ")", "]", "\n", "# substite from consonants", "\n", "", "elif", "index2word", "[", "mutation_phone", "]", "in", "consonants", ":", "\n", "# get the consonants phone", "\n", "                ", "consonants_phone", "=", "random", ".", "choice", "(", "consonants", ")", "\n", "# get the index of the consonants_phone", "\n", "mutation_phone", "=", "word2index", "[", "consonants_phone", "]", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "", "", "elif", "enhancement_type", "==", "2", ":", "\n", "# random mutation", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "mutation_prob", ":", "\n", "# substite from common incorrect phones", "\n", "            ", "if", "index2word", "[", "mutation_phone", "]", "in", "common_incorrect_voc", ".", "keys", "(", ")", ":", "\n", "                ", "mutation_phone", "=", "index2word", "[", "mutation_phone", "]", "\n", "# get the common incorrect phone", "\n", "common_incorrect_phone", "=", "random", ".", "choice", "(", "common_incorrect_voc", "[", "mutation_phone", "]", ")", "\n", "# transfer phone to index", "\n", "common_incorrect_phone_index", "=", "word2index", "[", "common_incorrect_phone", "]", "\n", "mutation_phone", "=", "common_incorrect_phone_index", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "else", ":", "\n", "            ", "pass", "\n", "", "", "elif", "enhancement_type", "==", "3", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "mutation_prob", ":", "\n", "            ", "mutation_phone", "=", "(", "phone", "+", "random", ".", "randint", "(", "0", ",", "phone_num", ")", ")", "%", "phone_num", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "", "elif", "enhancement_type", "==", "4", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "mutation_prob", ":", "\n", "            ", "mutation_phone", "=", "0", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n", "", "", "return", "mutation_phone", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder.__init__": [[11, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "int2char", ",", "space_idx", "=", "1", ",", "blank_index", "=", "0", ")", ":", "\n", "        ", "'''\n        int2char     :     \u5c06\u7c7b\u522b\u8f6c\u5316\u4e3a\u5b57\u7b26\u6807\u7b7e\n        space_idx    :     \u7a7a\u683c\u7b26\u53f7\u7684\u7d22\u5f15\uff0c\u5982\u679c\u4e3a\u4e3a-1\uff0c\u8868\u793a\u7a7a\u683c\u4e0d\u662f\u4e00\u4e2a\u7c7b\u522b\n        blank_index  :     \u7a7a\u767d\u7c7b\u7684\u7d22\u5f15\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a0\n        '''", "\n", "self", ".", "int_to_char", "=", "int2char", "\n", "self", ".", "space_idx", "=", "space_idx", "\n", "self", ".", "blank_index", "=", "blank_index", "\n", "self", ".", "num_word", "=", "0", "\n", "self", ".", "num_char", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder.decode": [[23, 26], ["None"], "methods", ["None"], ["", "def", "decode", "(", "self", ")", ":", "\n", "        ", "\"\u89e3\u7801\u51fd\u6570\uff0c\u5728GreedyDecoder\u548cBeamDecoder\u7ee7\u627f\u7c7b\u4e2d\u5b9e\u73b0\"", "\n", "raise", "NotImplementedError", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder.phone_word_error": [[27, 50], ["ctcDecoder.Decoder.decode", "ctcDecoder.Decoder._unflatten_targets", "ctcDecoder.Decoder._process_strings", "range", "ctcDecoder.Decoder._convert_to_strings", "len", "ctcDecoder.Decoder.cer", "ctcDecoder.Decoder.wer", "len", "len", "target_strings[].split"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.decode", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._unflatten_targets", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._process_strings", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._convert_to_strings", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder.cer", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder.wer"], ["", "def", "phone_word_error", "(", "self", ",", "prob_tensor", ",", "frame_seq_len", ",", "targets", ",", "target_sizes", ")", ":", "\n", "        ", "'''\u8ba1\u7b97\u8bcd\u9519\u7387\u548c\u5b57\u7b26\u9519\u8bef\u7387\n        Args:\n            prob_tensor     :   \u6a21\u578b\u7684\u8f93\u51fa\n            frame_seq_len   :   \u6bcf\u4e2a\u6837\u672c\u7684\u5e27\u957f\n            targets         :   \u6837\u672c\u6807\u7b7e\n            target_sizes    :   \u6bcf\u4e2a\u6837\u672c\u6807\u7b7e\u7684\u957f\u5ea6\n        Returns:\n            wer             :   \u8bcd\u9519\u7387\uff0c\u4ee5space\u4e3a\u95f4\u9694\u5206\u5f00\u4f5c\u4e3a\u8bcd\n            cer             :   \u5b57\u7b26\u9519\u8bef\u7387\n        '''", "\n", "strings", "=", "self", ".", "decode", "(", "prob_tensor", ",", "frame_seq_len", ")", "\n", "targets", "=", "self", ".", "_unflatten_targets", "(", "targets", ",", "target_sizes", ")", "\n", "target_strings", "=", "self", ".", "_process_strings", "(", "self", ".", "_convert_to_strings", "(", "targets", ")", ")", "\n", "\n", "cer", "=", "0", "\n", "wer", "=", "0", "\n", "for", "x", "in", "range", "(", "len", "(", "target_strings", ")", ")", ":", "\n", "            ", "cer", "+=", "self", ".", "cer", "(", "strings", "[", "x", "]", ",", "target_strings", "[", "x", "]", ")", "\n", "wer", "+=", "self", ".", "wer", "(", "strings", "[", "x", "]", ",", "target_strings", "[", "x", "]", ")", "\n", "self", ".", "num_word", "+=", "len", "(", "target_strings", "[", "x", "]", ".", "split", "(", ")", ")", "\n", "self", ".", "num_char", "+=", "len", "(", "target_strings", "[", "x", "]", ")", "\n", "", "return", "cer", ",", "wer", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._unflatten_targets": [[51, 65], ["split_targets.append"], "methods", ["None"], ["", "def", "_unflatten_targets", "(", "self", ",", "targets", ",", "target_sizes", ")", ":", "\n", "        ", "'''\u5c06\u6807\u7b7e\u6309\u7167\u6bcf\u4e2a\u6837\u672c\u7684\u6807\u7b7e\u957f\u5ea6\u8fdb\u884c\u5206\u5272\n        Args:\n            targets        :    \u6570\u5b57\u8868\u793a\u7684\u6807\u7b7e\n            target_sizes   :    \u6bcf\u4e2a\u6837\u672c\u6807\u7b7e\u7684\u957f\u5ea6\n        Returns:\n            split_targets  :    \u5f97\u5230\u7684\u5206\u5272\u540e\u7684\u6807\u7b7e\n        '''", "\n", "split_targets", "=", "[", "]", "\n", "offset", "=", "0", "\n", "for", "size", "in", "target_sizes", ":", "\n", "            ", "split_targets", ".", "append", "(", "targets", "[", "offset", ":", "offset", "+", "size", "]", ")", "\n", "offset", "+=", "size", "\n", "", "return", "split_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._process_strings": [[66, 79], ["ctcDecoder.Decoder._process_string", "processed_strings.append"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._process_string"], ["", "def", "_process_strings", "(", "self", ",", "seqs", ",", "remove_rep", "=", "False", ")", ":", "\n", "        ", "'''\u5904\u7406\u8f6c\u5316\u540e\u7684\u5b57\u7b26\u5e8f\u5217\uff0c\u5305\u62ec\u53bb\u91cd\u590d\u7b49\uff0c\u5c06list\u8f6c\u5316\u4e3astring\n        Args:\n            seqs       :   \u5f85\u5904\u7406\u5e8f\u5217\n            remove_rep :   \u662f\u5426\u53bb\u91cd\u590d\n        Returns:\n            processed_strings  :  \u5904\u7406\u540e\u7684\u5b57\u7b26\u5e8f\u5217\n        '''", "\n", "processed_strings", "=", "[", "]", "\n", "for", "seq", "in", "seqs", ":", "\n", "            ", "string", "=", "self", ".", "_process_string", "(", "seq", ",", "remove_rep", ")", "\n", "processed_strings", ".", "append", "(", "string", ")", "\n", "", "return", "processed_strings", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._process_string": [[80, 93], ["enumerate"], "methods", ["None"], ["", "def", "_process_string", "(", "self", ",", "seq", ",", "remove_rep", "=", "False", ")", ":", "\n", "        ", "string", "=", "''", "\n", "for", "i", ",", "char", "in", "enumerate", "(", "seq", ")", ":", "\n", "            ", "if", "char", "!=", "self", ".", "int_to_char", "[", "self", ".", "blank_index", "]", ":", "\n", "                ", "if", "remove_rep", "and", "i", "!=", "0", "and", "char", "==", "seq", "[", "i", "-", "1", "]", ":", "#remove dumplicates", "\n", "                    ", "pass", "\n", "", "elif", "self", ".", "space_idx", "==", "-", "1", ":", "\n", "                    ", "string", "=", "string", "+", "' '", "+", "char", "\n", "", "elif", "char", "==", "self", ".", "int_to_char", "[", "self", ".", "space_idx", "]", ":", "\n", "                    ", "string", "+=", "' '", "\n", "", "else", ":", "\n", "                    ", "string", "=", "string", "+", "char", "\n", "", "", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._convert_to_strings": [[94, 108], ["range", "len", "ctcDecoder.Decoder._convert_to_string", "strings.append", "len"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._convert_to_string"], ["", "def", "_convert_to_strings", "(", "self", ",", "seq", ",", "sizes", "=", "None", ")", ":", "\n", "        ", "'''\u5c06\u6570\u5b57\u5e8f\u5217\u7684\u8f93\u51fa\u8f6c\u5316\u4e3a\u5b57\u7b26\u5e8f\u5217\n        Args:\n            seqs       :   \u5f85\u8f6c\u5316\u5e8f\u5217\n            sizes      :   \u6bcf\u4e2a\u6837\u672c\u5e8f\u5217\u7684\u957f\u5ea6\n        Returns:\n            strings  :  \u8f6c\u5316\u540e\u7684\u5b57\u7b26\u5e8f\u5217\n        '''", "\n", "strings", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "len", "(", "seq", ")", ")", ":", "\n", "            ", "seq_len", "=", "sizes", "[", "x", "]", "if", "sizes", "is", "not", "None", "else", "len", "(", "seq", "[", "x", "]", ")", "\n", "string", "=", "self", ".", "_convert_to_string", "(", "seq", "[", "x", "]", ",", "seq_len", ")", "\n", "strings", ".", "append", "(", "string", ")", "\n", "", "return", "strings", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._convert_to_string": [[109, 117], ["range", "result.append"], "methods", ["None"], ["", "def", "_convert_to_string", "(", "self", ",", "seq", ",", "sizes", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "sizes", ")", ":", "\n", "            ", "result", ".", "append", "(", "self", ".", "int_to_char", "[", "seq", "[", "i", "]", "]", ")", "\n", "", "if", "self", ".", "space_idx", "==", "-", "1", ":", "\n", "            ", "return", "result", "\n", "", "else", ":", "\n", "            ", "return", "''", ".", "join", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder.wer": [[118, 126], ["set", "dict", "ctcDecoder.Decoder._edit_distance", "zip", "s1.split", "s2.split", "range", "s1.split", "s2.split", "len"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._edit_distance"], ["", "", "def", "wer", "(", "self", ",", "s1", ",", "s2", ")", ":", "\n", "        ", "\"\u5c06\u7a7a\u683c\u4f5c\u4e3a\u5206\u5272\u8ba1\u7b97\u8bcd\u9519\u8bef\u7387\"", "\n", "b", "=", "set", "(", "s1", ".", "split", "(", ")", "+", "s2", ".", "split", "(", ")", ")", "\n", "word2int", "=", "dict", "(", "zip", "(", "b", ",", "range", "(", "len", "(", "b", ")", ")", ")", ")", "\n", "\n", "w1", "=", "[", "word2int", "[", "w", "]", "for", "w", "in", "s1", ".", "split", "(", ")", "]", "\n", "w2", "=", "[", "word2int", "[", "w", "]", "for", "w", "in", "s2", ".", "split", "(", ")", "]", "\n", "return", "self", ".", "_edit_distance", "(", "w1", ",", "w2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder.cer": [[127, 130], ["ctcDecoder.Decoder._edit_distance"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._edit_distance"], ["", "def", "cer", "(", "self", ",", "s1", ",", "s2", ")", ":", "\n", "        ", "\"\u8ba1\u7b97\u5b57\u7b26\u9519\u8bef\u7387\"", "\n", "return", "self", ".", "_edit_distance", "(", "s1", ",", "s2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._edit_distance": [[131, 150], ["range", "range", "range", "len", "len", "range", "range", "min"], "methods", ["None"], ["", "def", "_edit_distance", "(", "self", ",", "src_seq", ",", "tgt_seq", ")", ":", "\n", "        ", "\"\u8ba1\u7b97\u4e24\u4e2a\u5e8f\u5217\u7684\u7f16\u8f91\u8ddd\u79bb\uff0c\u7528\u6765\u8ba1\u7b97\u5b57\u7b26\u9519\u8bef\u7387\"", "\n", "L1", ",", "L2", "=", "len", "(", "src_seq", ")", ",", "len", "(", "tgt_seq", ")", "\n", "if", "L1", "==", "0", ":", "return", "L2", "\n", "if", "L2", "==", "0", ":", "return", "L1", "\n", "# construct matrix of size (L1 + 1, L2 + 1)", "\n", "dist", "=", "[", "[", "0", "]", "*", "(", "L2", "+", "1", ")", "for", "i", "in", "range", "(", "L1", "+", "1", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "L2", "+", "1", ")", ":", "\n", "            ", "dist", "[", "0", "]", "[", "i", "]", "=", "dist", "[", "0", "]", "[", "i", "-", "1", "]", "+", "1", "\n", "", "for", "i", "in", "range", "(", "1", ",", "L1", "+", "1", ")", ":", "\n", "            ", "dist", "[", "i", "]", "[", "0", "]", "=", "dist", "[", "i", "-", "1", "]", "[", "0", "]", "+", "1", "\n", "", "for", "i", "in", "range", "(", "1", ",", "L1", "+", "1", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "1", ",", "L2", "+", "1", ")", ":", "\n", "                ", "if", "src_seq", "[", "i", "-", "1", "]", "==", "tgt_seq", "[", "j", "-", "1", "]", ":", "\n", "                    ", "cost", "=", "0", "\n", "", "else", ":", "\n", "                    ", "cost", "=", "1", "\n", "", "dist", "[", "i", "]", "[", "j", "]", "=", "min", "(", "dist", "[", "i", "]", "[", "j", "-", "1", "]", "+", "1", ",", "dist", "[", "i", "-", "1", "]", "[", "j", "]", "+", "1", ",", "dist", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "+", "cost", ")", "\n", "", "", "return", "dist", "[", "L1", "]", "[", "L2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.GreedyDecoder.decode": [[154, 167], ["prob_tensor.transpose.transpose.transpose", "torch.max", "ctcDecoder.GreedyDecoder.view", "ctcDecoder.GreedyDecoder._convert_to_strings", "ctcDecoder.GreedyDecoder._process_strings", "ctcDecoder.GreedyDecoder.size", "ctcDecoder.GreedyDecoder.size", "ctcDecoder.GreedyDecoder.numpy"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._convert_to_strings", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._process_strings"], ["def", "decode", "(", "self", ",", "prob_tensor", ",", "frame_seq_len", ")", ":", "\n", "        ", "'''\u89e3\u7801\u51fd\u6570\n        Args:\n            prob_tensor   :   \u7f51\u7edc\u6a21\u578b\u8f93\u51fa\n            frame_seq_len :   \u6bcf\u4e00\u6837\u672c\u7684\u5e27\u6570\n        Returns:\n            \u89e3\u7801\u5f97\u5230\u7684string\uff0c\u5373\u8bc6\u522b\u7ed3\u679c\n        '''", "\n", "prob_tensor", "=", "prob_tensor", ".", "transpose", "(", "0", ",", "1", ")", "\n", "_", ",", "decoded", "=", "torch", ".", "max", "(", "prob_tensor", ",", "2", ")", "\n", "decoded", "=", "decoded", ".", "view", "(", "decoded", ".", "size", "(", "0", ")", ",", "decoded", ".", "size", "(", "1", ")", ")", "\n", "decoded", "=", "self", ".", "_convert_to_strings", "(", "decoded", ".", "numpy", "(", ")", ",", "frame_seq_len", ")", "\n", "return", "self", ".", "_process_strings", "(", "decoded", ",", "remove_rep", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.BeamDecoder.__init__": [[170, 180], ["ctcDecoder.Decoder.__init__", "sys.path.append", "uNgram.LanguageModel", "uBeam.ctcBeamSearch"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.__init__"], ["def", "__init__", "(", "self", ",", "int2char", ",", "beam_width", "=", "200", ",", "blank_index", "=", "0", ",", "space_idx", "=", "-", "1", ",", "lm_path", "=", "None", ",", "lm_alpha", "=", "0.01", ")", ":", "\n", "        ", "self", ".", "beam_width", "=", "beam_width", "\n", "super", "(", "BeamDecoder", ",", "self", ")", ".", "__init__", "(", "int2char", ",", "space_idx", "=", "space_idx", ",", "blank_index", "=", "blank_index", ")", "\n", "\n", "import", "sys", "\n", "sys", ".", "path", ".", "append", "(", "'../'", ")", "\n", "import", "utils", ".", "BeamSearch", "as", "uBeam", "\n", "import", "utils", ".", "NgramLM", "as", "uNgram", "\n", "lm", "=", "uNgram", ".", "LanguageModel", "(", "arpa_file", "=", "lm_path", ")", "\n", "self", ".", "_decoder", "=", "uBeam", ".", "ctcBeamSearch", "(", "int2char", ",", "beam_width", ",", "lm", ",", "lm_alpha", "=", "lm_alpha", ",", "blank_index", "=", "blank_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.BeamDecoder.decode": [[181, 193], ["prob_tensor.transpose", "torch.exp", "ctcDecoder.BeamDecoder._decoder.decode"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.decode"], ["", "def", "decode", "(", "self", ",", "prob_tensor", ",", "frame_seq_len", "=", "None", ")", ":", "\n", "        ", "'''\u89e3\u7801\u51fd\u6570\n        Args:\n            prob_tensor   :   \u7f51\u7edc\u6a21\u578b\u8f93\u51fa\n            frame_seq_len :   \u6bcf\u4e00\u6837\u672c\u7684\u5e27\u6570\n        Returns:\n            res           :   \u89e3\u7801\u5f97\u5230\u7684string\uff0c\u5373\u8bc6\u522b\u7ed3\u679c\n        '''", "\n", "probs", "=", "prob_tensor", ".", "transpose", "(", "0", ",", "1", ")", "\n", "probs", "=", "torch", ".", "exp", "(", "probs", ")", "\n", "res", "=", "self", ".", "_decoder", ".", "decode", "(", "probs", ",", "frame_seq_len", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.BeamEntry.__init__": [[11, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "prTotal", "=", "LOG_ZERO", "# blank and non-blank", "\n", "self", ".", "prNonBlank", "=", "LOG_ZERO", "# non-blank", "\n", "self", ".", "prBlank", "=", "LOG_ZERO", "# blank", "\n", "self", ".", "y", "=", "(", ")", "# labelling at current time-step", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.BeamState.__init__": [[20, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "entries", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.BeamState.norm": [[23, 28], ["BeamSearch.BeamState.entries.items", "len"], "methods", ["None"], ["", "def", "norm", "(", "self", ")", ":", "\n", "        ", "\"length-normalise probabilities to avoid penalising long labellings\"", "\n", "for", "(", "k", ",", "v", ")", "in", "self", ".", "entries", ".", "items", "(", ")", ":", "\n", "            ", "labellingLen", "=", "len", "(", "self", ".", "entries", "[", "k", "]", ".", "y", ")", "\n", "self", ".", "entries", "[", "k", "]", ".", "prTotal", "=", "self", ".", "entries", "[", "k", "]", ".", "prTotal", "*", "(", "1.0", "/", "(", "labellingLen", "if", "labellingLen", "else", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.BeamState.sort": [[29, 34], ["sorted", "BeamSearch.BeamState.entries.items"], "methods", ["None"], ["", "", "def", "sort", "(", "self", ")", ":", "\n", "        ", "\"return beams sorted by probability\"", "\n", "u", "=", "[", "v", "for", "(", "k", ",", "v", ")", "in", "self", ".", "entries", ".", "items", "(", ")", "]", "\n", "s", "=", "sorted", "(", "u", ",", "reverse", "=", "True", ",", "key", "=", "lambda", "x", ":", "x", ".", "prTotal", ")", "\n", "return", "[", "x", ".", "y", "for", "x", "in", "s", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.__init__": [[36, 42], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "classes", ",", "beam_width", ",", "lm", ",", "lm_alpha", "=", "0.01", ",", "blank_index", "=", "0", ")", ":", "\n", "        ", "self", ".", "classes", "=", "classes", "\n", "self", ".", "beamWidth", "=", "beam_width", "\n", "self", ".", "lm_alpha", "=", "lm_alpha", "\n", "self", ".", "lm", "=", "lm", "\n", "self", ".", "blank_index", "=", "blank_index", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.log_add_prob": [[43, 51], ["math.log", "math.exp"], "methods", ["None"], ["", "def", "log_add_prob", "(", "self", ",", "log_x", ",", "log_y", ")", ":", "\n", "        ", "if", "log_x", "<=", "LOG_ZERO", ":", "\n", "            ", "return", "log_y", "\n", "", "if", "log_y", "<=", "LOG_ZERO", ":", "\n", "            ", "return", "log_x", "\n", "", "if", "(", "log_y", "-", "log_x", ")", ">", "0.0", ":", "\n", "            ", "log_y", ",", "log_x", "=", "log_x", ",", "log_y", "\n", "", "return", "log_x", "+", "math", ".", "log", "(", "1", "+", "math", ".", "exp", "(", "log_y", "-", "log_x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.calcExtPr": [[52, 67], ["len", "len", "BeamSearch.ctcBeamSearch.lm.get_bi_prob", "math.log", "math.log"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.NgramLM.LanguageModel.get_bi_prob"], ["", "def", "calcExtPr", "(", "self", ",", "k", ",", "y", ",", "t", ",", "mat", ",", "beamState", ")", ":", "\n", "        ", "\"probability for extending labelling y to y+k\"", "\n", "\n", "# language model (char bigrams)", "\n", "bigramProb", "=", "LOG_ONE", "\n", "if", "self", ".", "lm", ":", "\n", "            ", "c1", "=", "self", ".", "classes", "[", "y", "[", "-", "1", "]", "]", "if", "len", "(", "y", ")", "else", "''", "\n", "c2", "=", "self", ".", "classes", "[", "k", "]", "\n", "bigramProb", "=", "self", ".", "lm", ".", "get_bi_prob", "(", "c1", ",", "c2", ")", "*", "self", ".", "lm_alpha", "\n", "\n", "# optical model (RNN)", "\n", "", "if", "len", "(", "y", ")", "and", "y", "[", "-", "1", "]", "==", "k", "and", "mat", "[", "t", "-", "1", ",", "self", ".", "blank_index", "]", "<", "0.9", ":", "\n", "            ", "return", "math", ".", "log", "(", "mat", "[", "t", ",", "k", "]", ")", "+", "bigramProb", "+", "beamState", ".", "entries", "[", "y", "]", ".", "prBlank", "\n", "", "else", ":", "\n", "            ", "return", "math", ".", "log", "(", "mat", "[", "t", ",", "k", "]", ")", "+", "bigramProb", "+", "beamState", ".", "entries", "[", "y", "]", ".", "prTotal", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.addLabelling": [[68, 72], ["BeamSearch.BeamEntry"], "methods", ["None"], ["", "", "def", "addLabelling", "(", "self", ",", "beamState", ",", "y", ")", ":", "\n", "        ", "\"adds labelling if it does not exist yet\"", "\n", "if", "y", "not", "in", "beamState", ".", "entries", ":", "\n", "            ", "beamState", ".", "entries", "[", "y", "]", "=", "BeamEntry", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.decode": [[73, 154], ["inputs.size", "range", "inputs[].numpy", "BeamSearch.BeamState", "BeamSearch.BeamEntry", "range", "BeamSearch.BeamState", "BeamSearch.BeamState.norm", "res.append", "BeamSearch.BeamState", "BeamSearch.BeamState.sort", "BeamSearch.ctcBeamSearch.addLabelling", "BeamSearch.ctcBeamSearch.log_add_prob", "BeamSearch.ctcBeamSearch.log_add_prob", "BeamSearch.BeamState.sort", "BeamSearch.BeamState.sort", "BeamSearch.ctcBeamSearch.addLabelling", "BeamSearch.ctcBeamSearch.log_add_prob", "BeamSearch.ctcBeamSearch.log_add_prob", "BeamSearch.ctcBeamSearch.log_add_prob", "BeamSearch.ctcBeamSearch.log_add_prob", "range", "len", "math.log", "BeamSearch.ctcBeamSearch.lm.get_bi_prob", "math.log", "BeamSearch.ctcBeamSearch.calcExtPr", "BeamSearch.ctcBeamSearch.addLabelling", "BeamSearch.ctcBeamSearch.log_add_prob", "BeamSearch.ctcBeamSearch.log_add_prob"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.BeamState.norm", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.BeamState.sort", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.addLabelling", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.log_add_prob", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.log_add_prob", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.BeamState.sort", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.BeamState.sort", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.addLabelling", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.log_add_prob", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.log_add_prob", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.log_add_prob", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.log_add_prob", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.NgramLM.LanguageModel.get_bi_prob", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.calcExtPr", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.addLabelling", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.log_add_prob", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.log_add_prob"], ["", "", "def", "decode", "(", "self", ",", "inputs", ",", "inputs_list", ")", ":", "\n", "        ", "'''\n        mat : FloatTesnor batch * timesteps * class\n        '''", "\n", "batches", ",", "maxT", ",", "maxC", "=", "inputs", ".", "size", "(", ")", "\n", "res", "=", "[", "]", "\n", "\n", "for", "batch", "in", "range", "(", "batches", ")", ":", "\n", "            ", "mat", "=", "inputs", "[", "batch", "]", ".", "numpy", "(", ")", "\n", "# Initialise beam state", "\n", "last", "=", "BeamState", "(", ")", "\n", "y", "=", "(", ")", "\n", "last", ".", "entries", "[", "y", "]", "=", "BeamEntry", "(", ")", "\n", "last", ".", "entries", "[", "y", "]", ".", "prBlank", "=", "LOG_ONE", "\n", "last", ".", "entries", "[", "y", "]", ".", "prTotal", "=", "LOG_ONE", "\n", "\n", "# go over all time-steps", "\n", "for", "t", "in", "range", "(", "inputs_list", "[", "batch", "]", ")", ":", "\n", "                ", "curr", "=", "BeamState", "(", ")", "\n", "#\u8df3\u8fc7\u6982\u7387\u5f88\u63a5\u8fd11\u7684blank\u5e27\uff0c\u589e\u52a0\u89e3\u7801\u901f\u5ea6", "\n", "if", "(", "1", "-", "mat", "[", "t", ",", "self", ".", "blank_index", "]", ")", "<", "0.1", ":", "\n", "                    ", "continue", "\n", "#\u53d6\u524dbeam\u4e2a\u6700\u597d\u7684\u7ed3\u679c", "\n", "", "BHat", "=", "last", ".", "sort", "(", ")", "[", "0", ":", "self", ".", "beamWidth", "]", "\n", "# go over best labellings", "\n", "for", "y", "in", "BHat", ":", "\n", "                    ", "prNonBlank", "=", "LOG_ZERO", "\n", "# if nonempty labelling", "\n", "if", "len", "(", "y", ")", ">", "0", ":", "\n", "#\u76f8\u540c\u7684y\u4e24\u79cd\u53ef\u80fd\uff0c\u52a0\u5165\u91cd\u590d\u6216\u8005\u52a0\u5165\u7a7a\u767d,\u5982\u679c\u4e4b\u524d\u6ca1\u6709\u5b57\u7b26\uff0c\u5728NonBlank\u6982\u7387\u4e3a0", "\n", "                        ", "prNonBlank", "=", "last", ".", "entries", "[", "y", "]", ".", "prNonBlank", "+", "math", ".", "log", "(", "mat", "[", "t", ",", "y", "[", "-", "1", "]", "]", ")", "\n", "\n", "# calc probabilities", "\n", "", "prBlank", "=", "(", "last", ".", "entries", "[", "y", "]", ".", "prTotal", ")", "+", "math", ".", "log", "(", "mat", "[", "t", ",", "self", ".", "blank_index", "]", ")", "\n", "# save result", "\n", "self", ".", "addLabelling", "(", "curr", ",", "y", ")", "\n", "curr", ".", "entries", "[", "y", "]", ".", "y", "=", "y", "\n", "curr", ".", "entries", "[", "y", "]", ".", "prNonBlank", "=", "self", ".", "log_add_prob", "(", "curr", ".", "entries", "[", "y", "]", ".", "prNonBlank", ",", "prNonBlank", ")", "\n", "curr", ".", "entries", "[", "y", "]", ".", "prBlank", "=", "self", ".", "log_add_prob", "(", "curr", ".", "entries", "[", "y", "]", ".", "prBlank", ",", "prBlank", ")", "\n", "prTotal", "=", "self", ".", "log_add_prob", "(", "prBlank", ",", "prNonBlank", ")", "\n", "curr", ".", "entries", "[", "y", "]", ".", "prTotal", "=", "self", ".", "log_add_prob", "(", "curr", ".", "entries", "[", "y", "]", ".", "prTotal", ",", "prTotal", ")", "\n", "\n", "#t\u65f6\u523b\u52a0\u5165\u5176\u5b83\u7684label,\u6b64\u65f6Blank\u7684\u6982\u7387\u4e3a0\uff0c\u5982\u679c\u52a0\u5165\u7684label\u4e0e\u6700\u540e\u4e00\u4e2a\u76f8\u540c\uff0c\u56e0\u4e3a\u4e0d\u80fd\u91cd\u590d\uff0c\u6240\u4ee5\u4e0a\u4e00\u4e2a\u5b57\u7b26\u4e00\u5b9a\u662fblank", "\n", "for", "k", "in", "range", "(", "maxC", ")", ":", "\n", "                        ", "if", "k", "!=", "self", ".", "blank_index", ":", "\n", "                            ", "newY", "=", "y", "+", "(", "k", ",", ")", "\n", "prNonBlank", "=", "self", ".", "calcExtPr", "(", "k", ",", "y", ",", "t", ",", "mat", ",", "last", ")", "\n", "\n", "# save result", "\n", "self", ".", "addLabelling", "(", "curr", ",", "newY", ")", "\n", "curr", ".", "entries", "[", "newY", "]", ".", "y", "=", "newY", "\n", "curr", ".", "entries", "[", "newY", "]", ".", "prNonBlank", "=", "self", ".", "log_add_prob", "(", "curr", ".", "entries", "[", "newY", "]", ".", "prNonBlank", ",", "prNonBlank", ")", "\n", "curr", ".", "entries", "[", "newY", "]", ".", "prTotal", "=", "self", ".", "log_add_prob", "(", "curr", ".", "entries", "[", "newY", "]", ".", "prTotal", ",", "prNonBlank", ")", "\n", "\n", "# set new beam state", "\n", "", "", "", "last", "=", "curr", "\n", "\n", "", "BHat", "=", "last", ".", "sort", "(", ")", "[", "0", ":", "self", ".", "beamWidth", "]", "\n", "# go over best labellings", "\n", "curr", "=", "BeamState", "(", ")", "\n", "for", "y", "in", "BHat", ":", "\n", "                ", "newY", "=", "y", "\n", "c1", "=", "self", ".", "classes", "[", "y", "[", "-", "1", "]", "]", "\n", "c2", "=", "\"\"", "\n", "prNonBlank", "=", "last", ".", "entries", "[", "newY", "]", ".", "prTotal", "+", "self", ".", "lm", ".", "get_bi_prob", "(", "c1", ",", "c2", ")", "*", "self", ".", "lm_alpha", "\n", "self", ".", "addLabelling", "(", "curr", ",", "newY", ")", "\n", "curr", ".", "entries", "[", "newY", "]", ".", "y", "=", "newY", "\n", "curr", ".", "entries", "[", "newY", "]", ".", "prNonBlank", "=", "self", ".", "log_add_prob", "(", "curr", ".", "entries", "[", "newY", "]", ".", "prNonBlank", ",", "prNonBlank", ")", "\n", "curr", ".", "entries", "[", "newY", "]", ".", "prTotal", "=", "self", ".", "log_add_prob", "(", "curr", ".", "entries", "[", "newY", "]", ".", "prTotal", ",", "prNonBlank", ")", "\n", "\n", "", "last", "=", "curr", "\n", "# normalise probabilities according to labelling length", "\n", "last", ".", "norm", "(", ")", "\n", "\n", "# sort by probability", "\n", "bestLabelling", "=", "last", ".", "sort", "(", ")", "[", "0", "]", "# get most probable labelling", "\n", "\n", "# map labels to chars", "\n", "res_b", "=", "' '", ".", "join", "(", "[", "self", ".", "classes", "[", "l", "]", "for", "l", "in", "bestLabelling", "]", ")", "\n", "res", ".", "append", "(", "res_b", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.tools.data_enhancement": [[288, 357], ["random.random", "random.random", "random.choice", "common_incorrect_voc.keys", "random.choice", "random.random", "random.choice", "random.random", "random.randint"], "function", ["None"], []], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.cnn_rnn.BatchRNN.__init__": [[17, 27], ["torch.Module.__init__", "rnn_type", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "rnn_type", "=", "nn", ".", "LSTM", ",", "\n", "bidirectional", "=", "False", ",", "batch_norm", "=", "True", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "BatchRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "batch_norm", "=", "nn", ".", "BatchNorm1d", "(", "input_size", ")", "if", "batch_norm", "else", "None", "\n", "self", ".", "rnn", "=", "rnn_type", "(", "input_size", "=", "input_size", ",", "hidden_size", "=", "hidden_size", ",", "\n", "bidirectional", "=", "bidirectional", ",", "bias", "=", "False", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.cnn_rnn.BatchRNN.forward": [[28, 37], ["cnn_rnn.BatchRNN.rnn", "cnn_rnn.BatchRNN.dropout", "x.transpose.transpose.transpose", "cnn_rnn.BatchRNN.batch_norm", "x.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "batch_norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "x", "=", "self", ".", "batch_norm", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "", "x", ",", "_", "=", "self", ".", "rnn", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "#self.rnn.flatten_parameters()", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.cnn_rnn.LayerCNN.__init__": [[42, 59], ["torch.Module.__init__", "activation_function", "torch.Dropout", "torch.Dropout", "torch.Dropout", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "len", "len", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.__init__"], ["def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", ",", "padding", ",", "pooling_size", "=", "None", ",", "\n", "activation_function", "=", "nn", ".", "ReLU", ",", "batch_norm", "=", "True", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "LayerCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "len", "(", "kernel_size", ")", "==", "2", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "batch_norm", "=", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", "if", "batch_norm", "else", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "batch_norm", "=", "nn", ".", "BatchNorm1d", "(", "out_channel", ")", "if", "batch_norm", "else", "None", "\n", "", "self", ".", "activation", "=", "activation_function", "(", "inplace", "=", "True", ")", "\n", "if", "pooling_size", "is", "not", "None", "and", "len", "(", "kernel_size", ")", "==", "2", ":", "\n", "            ", "self", ".", "pooling", "=", "nn", ".", "MaxPool2d", "(", "pooling_size", ")", "\n", "", "elif", "len", "(", "kernel_size", ")", "==", "1", ":", "\n", "            ", "self", ".", "pooling", "=", "nn", ".", "MaxPool1d", "(", "pooling_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pooling", "=", "None", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.cnn_rnn.LayerCNN.forward": [[60, 69], ["cnn_rnn.LayerCNN.conv", "cnn_rnn.LayerCNN.activation", "cnn_rnn.LayerCNN.dropout", "cnn_rnn.LayerCNN.batch_norm", "cnn_rnn.LayerCNN.pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "batch_norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "batch_norm", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "if", "self", ".", "pooling", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "pooling", "(", "x", ")", "\n", "", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.cnn_rnn.CTC_Model.__init__": [[71, 146], ["torch.Module.__init__", "cnn_rnn.BatchRNN", "rnns.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "ValueError", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "cnn_rnn.BatchRNN", "rnns.append", "collections.OrderedDict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "type", "len", "cnn_rnn.LayerCNN", "cnns.append", "collections.OrderedDict", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "int", "math.floor"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "add_cnn", "=", "False", ",", "cnn_param", "=", "None", ",", "rnn_param", "=", "None", ",", "num_class", "=", "39", ",", "drop_out", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"\n        add_cnn   [bool]:  whether add cnn in the model\n        cnn_param [dict]:  cnn parameters, only support Conv2d i.e.\n            cnn_param = {\"layer\":[[(in_channel, out_channel), (kernel_size), (stride), (padding), (pooling_size)],...], \n                            \"batch_norm\":True, \"activate_function\":nn.ReLU}\n        rnn_param [dict]:  rnn parameters i.e.\n            rnn_param = {\"rnn_input_size\":201, \"rnn_hidden_size\":256, ....}\n        num_class  [int]:  the number of modelling units, add blank to be the number of classes\n        drop_out [float]:  drop_out rate for all\n        \"\"\"", "\n", "super", "(", "CTC_Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_cnn", "=", "add_cnn", "\n", "self", ".", "cnn_param", "=", "cnn_param", "\n", "if", "rnn_param", "is", "None", "or", "type", "(", "rnn_param", ")", "!=", "dict", ":", "\n", "            ", "raise", "ValueError", "(", "\"rnn_param need to be a dict to contain all params of rnn!\"", ")", "\n", "", "self", ".", "rnn_param", "=", "rnn_param", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_directions", "=", "2", "if", "rnn_param", "[", "\"bidirectional\"", "]", "else", "1", "\n", "self", ".", "drop_out", "=", "drop_out", "\n", "\n", "if", "add_cnn", ":", "\n", "            ", "cnns", "=", "[", "]", "\n", "activation", "=", "cnn_param", "[", "\"activate_function\"", "]", "\n", "batch_norm", "=", "cnn_param", "[", "\"batch_norm\"", "]", "\n", "rnn_input_size", "=", "rnn_param", "[", "\"rnn_input_size\"", "]", "\n", "cnn_layers", "=", "cnn_param", "[", "\"layer\"", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "cnn_layers", ")", ")", ":", "\n", "                ", "in_channel", "=", "cnn_layers", "[", "n", "]", "[", "0", "]", "[", "0", "]", "\n", "out_channel", "=", "cnn_layers", "[", "n", "]", "[", "0", "]", "[", "1", "]", "\n", "kernel_size", "=", "cnn_layers", "[", "n", "]", "[", "1", "]", "\n", "stride", "=", "cnn_layers", "[", "n", "]", "[", "2", "]", "\n", "padding", "=", "cnn_layers", "[", "n", "]", "[", "3", "]", "\n", "pooling_size", "=", "cnn_layers", "[", "n", "]", "[", "4", "]", "\n", "\n", "cnn", "=", "LayerCNN", "(", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", ",", "padding", ",", "pooling_size", ",", "\n", "activation_function", "=", "activation", ",", "batch_norm", "=", "batch_norm", ",", "dropout", "=", "drop_out", ")", "\n", "cnns", ".", "append", "(", "(", "'%d'", "%", "n", ",", "cnn", ")", ")", "\n", "\n", "try", ":", "\n", "                    ", "rnn_input_size", "=", "int", "(", "math", ".", "floor", "(", "(", "rnn_input_size", "+", "2", "*", "padding", "[", "1", "]", "-", "kernel_size", "[", "1", "]", ")", "/", "stride", "[", "1", "]", ")", "+", "1", ")", "\n", "", "except", ":", "\n", "#if using 1-d Conv", "\n", "                    ", "rnn_input_size", "=", "rnn_input_size", "\n", "", "", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "cnns", ")", ")", "\n", "rnn_input_size", "*=", "out_channel", "\n", "", "else", ":", "\n", "            ", "rnn_input_size", "=", "rnn_param", "[", "\"rnn_input_size\"", "]", "\n", "\n", "", "rnns", "=", "[", "]", "\n", "rnn_hidden_size", "=", "rnn_param", "[", "\"rnn_hidden_size\"", "]", "\n", "rnn_type", "=", "rnn_param", "[", "\"rnn_type\"", "]", "\n", "rnn_layers", "=", "rnn_param", "[", "\"rnn_layers\"", "]", "\n", "bidirectional", "=", "rnn_param", "[", "\"bidirectional\"", "]", "\n", "batch_norm", "=", "rnn_param", "[", "\"batch_norm\"", "]", "\n", "rnn", "=", "BatchRNN", "(", "input_size", "=", "rnn_input_size", ",", "hidden_size", "=", "rnn_hidden_size", ",", "rnn_type", "=", "rnn_type", ",", "\n", "bidirectional", "=", "bidirectional", ",", "dropout", "=", "drop_out", ",", "batch_norm", "=", "False", ")", "\n", "rnns", ".", "append", "(", "(", "'0'", ",", "rnn", ")", ")", "\n", "for", "i", "in", "range", "(", "rnn_layers", "-", "1", ")", ":", "\n", "            ", "rnn", "=", "BatchRNN", "(", "input_size", "=", "self", ".", "num_directions", "*", "rnn_hidden_size", ",", "hidden_size", "=", "rnn_hidden_size", ",", "rnn_type", "=", "rnn_type", ",", "\n", "bidirectional", "=", "bidirectional", ",", "dropout", "=", "drop_out", ",", "batch_norm", "=", "batch_norm", ")", "\n", "rnns", ".", "append", "(", "(", "'%d'", "%", "(", "i", "+", "1", ")", ",", "rnn", ")", ")", "\n", "", "self", ".", "rnns", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "rnns", ")", ")", "\n", "\n", "## Character_embedding", "\n", "#self.embeds = nn.Embedding(42, 512)", "\n", "#self.lstm_embeds = nn.LSTM(512, rnn_hidden_size, batch_first=True,bidirectional = True)", "\n", "#self.score = nn.Linear(rnn_hidden_size*2, rnn_hidden_size*2, bias=False)", "\n", "\n", "if", "batch_norm", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_directions", "*", "rnn_hidden_size", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "num_directions", "*", "rnn_hidden_size", ",", "num_class", ",", "bias", "=", "False", ")", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "num_directions", "*", "rnn_hidden_size", ",", "num_class", ",", "bias", "=", "False", ")", "\n", "", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.cnn_rnn.CTC_Model.forward": [[147, 180], ["cnn_rnn.CTC_Model.conv", "x.view.view.transpose().contiguous", "x.view.view.size", "x.view.view.transpose().contiguous", "cnn_rnn.CTC_Model.rnns", "x.view.view.size", "x.view.view.view", "cnn_rnn.CTC_Model.fc", "x.view.view.view", "cnn_rnn.CTC_Model.log_softmax", "print", "x.view.view.unsqueeze", "visual.append", "len", "x.view.view.view", "visual.append", "visual.append", "x.view.view.transpose", "x.view.view.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x1", ",", "visualize", "=", "False", ")", ":", "\n", "        ", "if", "visualize", ":", "\n", "            ", "visual", "=", "[", "x", "]", "\n", "\n", "", "if", "self", ".", "add_cnn", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "if", "visualize", ":", "\n", "                ", "visual", ".", "append", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "sizes", "=", "x", ".", "size", "(", ")", "\n", "if", "len", "(", "sizes", ")", ">", "3", ":", "\n", "                ", "x", "=", "x", ".", "view", "(", "sizes", "[", "0", "]", ",", "sizes", "[", "1", "]", ",", "sizes", "[", "2", "]", "*", "sizes", "[", "3", "]", ")", "\n", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "visualize", ":", "\n", "                ", "visual", ".", "append", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "rnns", "(", "x", ")", "\n", "seq_len", ",", "batch", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "seq_len", "*", "batch", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "seq_len", ",", "batch", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "log_softmax", "(", "x", ")", "\n", "\n", "if", "visualize", ":", "\n", "                ", "visual", ".", "append", "(", "out", ")", "\n", "return", "out", ",", "visual", "\n", "", "return", "out", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"error\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.cnn_rnn.CTC_Model.compute_wer": [[181, 197], ["range", "len", "range", "editdistance.eval", "len", "len", "pred.append", "pred.append"], "methods", ["None"], ["", "", "def", "compute_wer", "(", "self", ",", "index", ",", "input_sizes", ",", "targets", ",", "target_sizes", ")", ":", "\n", "        ", "batch_errs", "=", "0", "\n", "batch_tokens", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "index", ")", ")", ":", "\n", "            ", "label", "=", "targets", "[", "i", "]", "[", ":", "target_sizes", "[", "i", "]", "]", "\n", "pred", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "index", "[", "i", "]", "[", ":", "input_sizes", "[", "i", "]", "]", ")", ")", ":", "\n", "                ", "if", "index", "[", "i", "]", "[", "j", "]", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "j", "==", "0", ":", "\n", "                    ", "pred", ".", "append", "(", "index", "[", "i", "]", "[", "j", "]", ")", "\n", "", "if", "j", ">", "0", "and", "index", "[", "i", "]", "[", "j", "]", "!=", "index", "[", "i", "]", "[", "j", "-", "1", "]", ":", "\n", "                    ", "pred", ".", "append", "(", "index", "[", "i", "]", "[", "j", "]", ")", "\n", "", "", "batch_errs", "+=", "ed", ".", "eval", "(", "label", ",", "pred", ")", "\n", "batch_tokens", "+=", "len", "(", "label", ")", "\n", "", "return", "batch_errs", ",", "batch_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.cnn_rnn.CTC_Model.add_weights_noise": [[198, 202], ["cnn_rnn.CTC_Model.parameters", "torch.nn.parameter.Parameter.data.new().normal_().type_as", "torch.nn.parameter.Parameter.data.new().normal_().type_as", "torch.nn.parameter.Parameter.data.new().normal_().type_as", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter.type", "torch.nn.parameter.Parameter.type", "torch.nn.parameter.Parameter.type", "torch.nn.parameter.Parameter.data.new().normal_", "torch.nn.parameter.Parameter.data.new().normal_", "torch.nn.parameter.Parameter.data.new().normal_", "torch.nn.parameter.Parameter.data.new", "torch.nn.parameter.Parameter.data.new", "torch.nn.parameter.Parameter.data.new", "torch.nn.parameter.Parameter.size", "torch.nn.parameter.Parameter.size", "torch.nn.parameter.Parameter.size"], "methods", ["None"], ["", "def", "add_weights_noise", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "weight_noise", "=", "param", ".", "data", ".", "new", "(", "param", ".", "size", "(", ")", ")", ".", "normal_", "(", "0", ",", "0.075", ")", ".", "type_as", "(", "param", ".", "type", "(", ")", ")", "\n", "param", "=", "torch", ".", "nn", ".", "parameter", ".", "Parameter", "(", "param", ".", "data", "+", "weight_noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.cnn_rnn.CTC_Model.save_package": [[203, 224], ["model.state_dict", "optimizer.state_dict"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "save_package", "(", "model", ",", "optimizer", "=", "None", ",", "decoder", "=", "None", ",", "epoch", "=", "None", ",", "loss_results", "=", "None", ",", "dev_loss_results", "=", "None", ",", "dev_cer_results", "=", "None", ")", ":", "\n", "        ", "package", "=", "{", "\n", "'rnn_param'", ":", "model", ".", "rnn_param", ",", "\n", "'add_cnn'", ":", "model", ".", "add_cnn", ",", "\n", "'cnn_param'", ":", "model", ".", "cnn_param", ",", "\n", "'num_class'", ":", "model", ".", "num_class", ",", "\n", "'_drop_out'", ":", "model", ".", "drop_out", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", "\n", "}", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "            ", "package", "[", "'optim_dict'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "", "if", "decoder", "is", "not", "None", ":", "\n", "            ", "package", "[", "'decoder'", "]", "=", "decoder", "\n", "", "if", "epoch", "is", "not", "None", ":", "\n", "            ", "package", "[", "'epoch'", "]", "=", "epoch", "\n", "", "if", "loss_results", "is", "not", "None", ":", "\n", "            ", "package", "[", "'loss_results'", "]", "=", "loss_results", "\n", "package", "[", "'dev_loss_results'", "]", "=", "dev_loss_results", "\n", "package", "[", "'dev_cer_results'", "]", "=", "dev_cer_results", "\n", "", "return", "package", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.BatchRNN.__init__": [[19, 29], ["torch.Module.__init__", "rnn_type", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "rnn_type", "=", "nn", ".", "LSTM", ",", "\n", "bidirectional", "=", "False", ",", "batch_norm", "=", "True", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "BatchRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "batch_norm", "=", "nn", ".", "BatchNorm1d", "(", "input_size", ")", "if", "batch_norm", "else", "None", "\n", "self", ".", "rnn", "=", "rnn_type", "(", "input_size", "=", "input_size", ",", "hidden_size", "=", "hidden_size", ",", "\n", "bidirectional", "=", "bidirectional", ",", "bias", "=", "False", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.BatchRNN.forward": [[30, 39], ["model_ctc.BatchRNN.rnn", "model_ctc.BatchRNN.dropout", "x.transpose.transpose.transpose", "model_ctc.BatchRNN.batch_norm", "x.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "batch_norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "x", "=", "self", ".", "batch_norm", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "", "x", ",", "_", "=", "self", ".", "rnn", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "#self.rnn.flatten_parameters()", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.LayerCNN.__init__": [[44, 61], ["torch.Module.__init__", "activation_function", "torch.Dropout", "torch.Dropout", "torch.Dropout", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "len", "len", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.__init__"], ["def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", ",", "padding", ",", "pooling_size", "=", "None", ",", "\n", "activation_function", "=", "nn", ".", "ReLU", ",", "batch_norm", "=", "True", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "LayerCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "len", "(", "kernel_size", ")", "==", "2", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "batch_norm", "=", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", "if", "batch_norm", "else", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv1d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "self", ".", "batch_norm", "=", "nn", ".", "BatchNorm1d", "(", "out_channel", ")", "if", "batch_norm", "else", "None", "\n", "", "self", ".", "activation", "=", "activation_function", "(", "inplace", "=", "True", ")", "\n", "if", "pooling_size", "is", "not", "None", "and", "len", "(", "kernel_size", ")", "==", "2", ":", "\n", "            ", "self", ".", "pooling", "=", "nn", ".", "MaxPool2d", "(", "pooling_size", ")", "\n", "", "elif", "len", "(", "kernel_size", ")", "==", "1", ":", "\n", "            ", "self", ".", "pooling", "=", "nn", ".", "MaxPool1d", "(", "pooling_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pooling", "=", "None", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.LayerCNN.forward": [[62, 71], ["model_ctc.LayerCNN.conv", "model_ctc.LayerCNN.activation", "model_ctc.LayerCNN.dropout", "model_ctc.LayerCNN.batch_norm", "model_ctc.LayerCNN.pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "batch_norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "batch_norm", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "if", "self", ".", "pooling", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "pooling", "(", "x", ")", "\n", "", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.__init__": [[73, 148], ["torch.Module.__init__", "model_ctc.BatchRNN", "rnns.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "ValueError", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model_ctc.BatchRNN", "rnns.append", "collections.OrderedDict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "type", "len", "model_ctc.LayerCNN", "cnns.append", "collections.OrderedDict", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "int", "math.floor"], "methods", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.__init__"], ["    ", "def", "__init__", "(", "self", ",", "add_cnn", "=", "False", ",", "cnn_param", "=", "None", ",", "rnn_param", "=", "None", ",", "num_class", "=", "39", ",", "drop_out", "=", "0.1", ")", ":", "\n", "        ", "\"\"\"\n        add_cnn   [bool]:  whether add cnn in the model\n        cnn_param [dict]:  cnn parameters, only support Conv2d i.e.\n            cnn_param = {\"layer\":[[(in_channel, out_channel), (kernel_size), (stride), (padding), (pooling_size)],...], \n                            \"batch_norm\":True, \"activate_function\":nn.ReLU}\n        rnn_param [dict]:  rnn parameters i.e.\n            rnn_param = {\"rnn_input_size\":201, \"rnn_hidden_size\":256, ....}\n        num_class  [int]:  the number of modelling units, add blank to be the number of classes\n        drop_out [float]:  drop_out rate for all\n        \"\"\"", "\n", "super", "(", "CTC_Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_cnn", "=", "add_cnn", "\n", "self", ".", "cnn_param", "=", "cnn_param", "\n", "if", "rnn_param", "is", "None", "or", "type", "(", "rnn_param", ")", "!=", "dict", ":", "\n", "            ", "raise", "ValueError", "(", "\"rnn_param need to be a dict to contain all params of rnn!\"", ")", "\n", "", "self", ".", "rnn_param", "=", "rnn_param", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_directions", "=", "2", "if", "rnn_param", "[", "\"bidirectional\"", "]", "else", "1", "\n", "self", ".", "drop_out", "=", "drop_out", "\n", "\n", "if", "add_cnn", ":", "\n", "            ", "cnns", "=", "[", "]", "\n", "activation", "=", "cnn_param", "[", "\"activate_function\"", "]", "\n", "batch_norm", "=", "cnn_param", "[", "\"batch_norm\"", "]", "\n", "rnn_input_size", "=", "rnn_param", "[", "\"rnn_input_size\"", "]", "\n", "cnn_layers", "=", "cnn_param", "[", "\"layer\"", "]", "\n", "for", "n", "in", "range", "(", "len", "(", "cnn_layers", ")", ")", ":", "\n", "                ", "in_channel", "=", "cnn_layers", "[", "n", "]", "[", "0", "]", "[", "0", "]", "\n", "out_channel", "=", "cnn_layers", "[", "n", "]", "[", "0", "]", "[", "1", "]", "\n", "kernel_size", "=", "cnn_layers", "[", "n", "]", "[", "1", "]", "\n", "stride", "=", "cnn_layers", "[", "n", "]", "[", "2", "]", "\n", "padding", "=", "cnn_layers", "[", "n", "]", "[", "3", "]", "\n", "pooling_size", "=", "cnn_layers", "[", "n", "]", "[", "4", "]", "\n", "\n", "cnn", "=", "LayerCNN", "(", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", ",", "padding", ",", "pooling_size", ",", "\n", "activation_function", "=", "activation", ",", "batch_norm", "=", "batch_norm", ",", "dropout", "=", "drop_out", ")", "\n", "cnns", ".", "append", "(", "(", "'%d'", "%", "n", ",", "cnn", ")", ")", "\n", "\n", "try", ":", "\n", "                    ", "rnn_input_size", "=", "int", "(", "math", ".", "floor", "(", "(", "rnn_input_size", "+", "2", "*", "padding", "[", "1", "]", "-", "kernel_size", "[", "1", "]", ")", "/", "stride", "[", "1", "]", ")", "+", "1", ")", "\n", "", "except", ":", "\n", "#if using 1-d Conv", "\n", "                    ", "rnn_input_size", "=", "rnn_input_size", "\n", "", "", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "cnns", ")", ")", "\n", "rnn_input_size", "*=", "out_channel", "\n", "", "else", ":", "\n", "            ", "rnn_input_size", "=", "rnn_param", "[", "\"rnn_input_size\"", "]", "\n", "\n", "", "rnns", "=", "[", "]", "\n", "rnn_hidden_size", "=", "rnn_param", "[", "\"rnn_hidden_size\"", "]", "\n", "rnn_type", "=", "rnn_param", "[", "\"rnn_type\"", "]", "\n", "rnn_layers", "=", "rnn_param", "[", "\"rnn_layers\"", "]", "\n", "bidirectional", "=", "rnn_param", "[", "\"bidirectional\"", "]", "\n", "batch_norm", "=", "rnn_param", "[", "\"batch_norm\"", "]", "\n", "rnn", "=", "BatchRNN", "(", "input_size", "=", "rnn_input_size", ",", "hidden_size", "=", "rnn_hidden_size", ",", "rnn_type", "=", "rnn_type", ",", "\n", "bidirectional", "=", "bidirectional", ",", "dropout", "=", "drop_out", ",", "batch_norm", "=", "False", ")", "\n", "rnns", ".", "append", "(", "(", "'0'", ",", "rnn", ")", ")", "\n", "for", "i", "in", "range", "(", "rnn_layers", "-", "1", ")", ":", "\n", "            ", "rnn", "=", "BatchRNN", "(", "input_size", "=", "self", ".", "num_directions", "*", "rnn_hidden_size", ",", "hidden_size", "=", "rnn_hidden_size", ",", "rnn_type", "=", "rnn_type", ",", "\n", "bidirectional", "=", "bidirectional", ",", "dropout", "=", "drop_out", ",", "batch_norm", "=", "batch_norm", ")", "\n", "rnns", ".", "append", "(", "(", "'%d'", "%", "(", "i", "+", "1", ")", ",", "rnn", ")", ")", "\n", "", "self", ".", "rnns", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "rnns", ")", ")", "\n", "\n", "## Character_embedding", "\n", "self", ".", "embeds", "=", "nn", ".", "Embedding", "(", "42", ",", "512", ")", "\n", "self", ".", "lstm_embeds", "=", "nn", ".", "LSTM", "(", "512", ",", "rnn_hidden_size", ",", "batch_first", "=", "True", ",", "bidirectional", "=", "True", ")", "\n", "self", ".", "score", "=", "nn", ".", "Linear", "(", "rnn_hidden_size", "*", "2", ",", "rnn_hidden_size", "*", "2", ",", "bias", "=", "False", ")", "\n", "\n", "if", "batch_norm", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm1d", "(", "self", ".", "num_directions", "*", "rnn_hidden_size", "*", "2", ")", ",", "\n", "nn", ".", "Linear", "(", "self", ".", "num_directions", "*", "rnn_hidden_size", "*", "2", ",", "num_class", ",", "bias", "=", "False", ")", ",", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "num_directions", "*", "rnn_hidden_size", "*", "2", ",", "num_class", ",", "bias", "=", "False", ")", "\n", "", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.forward": [[149, 213], ["model_ctc.CTC_Model.conv", "x.view.view.transpose().contiguous", "x.view.view.size", "x.view.view.transpose().contiguous", "model_ctc.CTC_Model.rnns", "x.view.view.transpose", "model_ctc.CTC_Model.embeds", "model_ctc.CTC_Model.lstm_embeds", "model_ctc.CTC_Model.score", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.transpose().contiguous", "torch.cat.transpose().contiguous", "torch.cat.transpose().contiguous", "x.view.view.size", "x.view.view.view", "model_ctc.CTC_Model.fc", "x.view.view.view", "model_ctc.CTC_Model.log_softmax", "print", "x.view.view.unsqueeze", "visual.append", "len", "x.view.view.view", "visual.append", "model_ctc.CTC_Model.transpose", "visual.append", "x.view.view.transpose", "x.view.view.transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x1", ",", "visualize", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        x: audio\n        x1: sentence\n        \"\"\"", "\n", "#x: batch_size * 1 * max_seq_length * feat_size", "\n", "if", "visualize", ":", "\n", "            ", "visual", "=", "[", "x", "]", "\n", "\n", "", "if", "self", ".", "add_cnn", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "if", "visualize", ":", "\n", "                ", "visual", ".", "append", "(", "x", ")", "\n", "\n", "", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "sizes", "=", "x", ".", "size", "(", ")", "\n", "if", "len", "(", "sizes", ")", ">", "3", ":", "\n", "                ", "x", "=", "x", ".", "view", "(", "sizes", "[", "0", "]", ",", "sizes", "[", "1", "]", ",", "sizes", "[", "2", "]", "*", "sizes", "[", "3", "]", ")", "\n", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "visualize", ":", "\n", "                ", "visual", ".", "append", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "rnns", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "x1", "=", "self", ".", "embeds", "(", "x1", ")", "\n", "\n", "# [batch,Char_num,Hidden_unit]", "\n", "# value", "\n", "x1", ",", "_", "=", "self", ".", "lstm_embeds", "(", "x1", ")", "\n", "#x1 = self.score(x1)", "\n", "\n", "# key", "\n", "key", "=", "self", ".", "score", "(", "x1", ")", "\n", "\n", "attn_score", "=", "torch", ".", "bmm", "(", "x", ",", "key", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn_max", ",", "_", "=", "torch", ".", "max", "(", "attn_score", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "exp_score", "=", "torch", ".", "exp", "(", "attn_score", "-", "attn_max", ")", "\n", "\n", "attn_weights", "=", "exp_score", "\n", "weights_denom", "=", "torch", ".", "sum", "(", "attn_weights", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "attn_weights", "=", "attn_weights", "/", "(", "weights_denom", "+", "1e-30", ")", "\n", "c", "=", "torch", ".", "bmm", "(", "attn_weights", ",", "x1", ")", "\n", "\n", "# query and context concat", "\n", "out1", "=", "torch", ".", "cat", "(", "(", "x", ",", "c", ")", ",", "-", "1", ")", "\n", "x", "=", "out1", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "\n", "seq_len", ",", "batch", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "seq_len", "*", "batch", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "seq_len", ",", "batch", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "log_softmax", "(", "x", ")", "\n", "\n", "if", "visualize", ":", "\n", "                ", "visual", ".", "append", "(", "out", ")", "\n", "return", "out", ",", "visual", "\n", "", "return", "out", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"error\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.compute_wer": [[214, 232], ["range", "len", "range", "editdistance.eval", "len", "len", "pred.append", "pred.append"], "methods", ["None"], ["", "", "def", "compute_wer", "(", "self", ",", "index", ",", "input_sizes", ",", "targets", ",", "target_sizes", ")", ":", "\n", "        ", "batch_errs", "=", "0", "\n", "batch_tokens", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "index", ")", ")", ":", "\n", "            ", "label", "=", "targets", "[", "i", "]", "[", ":", "target_sizes", "[", "i", "]", "]", "\n", "pred", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "index", "[", "i", "]", "[", ":", "input_sizes", "[", "i", "]", "]", ")", ")", ":", "\n", "                ", "if", "index", "[", "i", "]", "[", "j", "]", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "j", "==", "0", ":", "\n", "                    ", "pred", ".", "append", "(", "index", "[", "i", "]", "[", "j", "]", ")", "\n", "", "if", "j", ">", "0", "and", "index", "[", "i", "]", "[", "j", "]", "!=", "index", "[", "i", "]", "[", "j", "-", "1", "]", ":", "\n", "                    ", "pred", ".", "append", "(", "index", "[", "i", "]", "[", "j", "]", ")", "\n", "", "", "batch_errs", "+=", "ed", ".", "eval", "(", "label", ",", "pred", ")", "\n", "batch_tokens", "+=", "len", "(", "label", ")", "\n", "# total_pred.append(pred)", "\n", "\n", "", "return", "batch_errs", ",", "batch_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.add_weights_noise": [[233, 237], ["model_ctc.CTC_Model.parameters", "torch.nn.parameter.Parameter.data.new().normal_().type_as", "torch.nn.parameter.Parameter.data.new().normal_().type_as", "torch.nn.parameter.Parameter.data.new().normal_().type_as", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter.type", "torch.nn.parameter.Parameter.type", "torch.nn.parameter.Parameter.type", "torch.nn.parameter.Parameter.data.new().normal_", "torch.nn.parameter.Parameter.data.new().normal_", "torch.nn.parameter.Parameter.data.new().normal_", "torch.nn.parameter.Parameter.data.new", "torch.nn.parameter.Parameter.data.new", "torch.nn.parameter.Parameter.data.new", "torch.nn.parameter.Parameter.size", "torch.nn.parameter.Parameter.size", "torch.nn.parameter.Parameter.size"], "methods", ["None"], ["", "def", "add_weights_noise", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "weight_noise", "=", "param", ".", "data", ".", "new", "(", "param", ".", "size", "(", ")", ")", ".", "normal_", "(", "0", ",", "0.075", ")", ".", "type_as", "(", "param", ".", "type", "(", ")", ")", "\n", "param", "=", "torch", ".", "nn", ".", "parameter", ".", "Parameter", "(", "param", ".", "data", "+", "weight_noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.save_package": [[238, 259], ["model.state_dict", "optimizer.state_dict"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "save_package", "(", "model", ",", "optimizer", "=", "None", ",", "decoder", "=", "None", ",", "epoch", "=", "None", ",", "loss_results", "=", "None", ",", "dev_loss_results", "=", "None", ",", "dev_cer_results", "=", "None", ")", ":", "\n", "        ", "package", "=", "{", "\n", "'rnn_param'", ":", "model", ".", "rnn_param", ",", "\n", "'add_cnn'", ":", "model", ".", "add_cnn", ",", "\n", "'cnn_param'", ":", "model", ".", "cnn_param", ",", "\n", "'num_class'", ":", "model", ".", "num_class", ",", "\n", "'_drop_out'", ":", "model", ".", "drop_out", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", "\n", "}", "\n", "if", "optimizer", "is", "not", "None", ":", "\n", "            ", "package", "[", "'optim_dict'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "", "if", "decoder", "is", "not", "None", ":", "\n", "            ", "package", "[", "'decoder'", "]", "=", "decoder", "\n", "", "if", "epoch", "is", "not", "None", ":", "\n", "            ", "package", "[", "'epoch'", "]", "=", "epoch", "\n", "", "if", "loss_results", "is", "not", "None", ":", "\n", "            ", "package", "[", "'loss_results'", "]", "=", "loss_results", "\n", "package", "[", "'dev_loss_results'", "]", "=", "dev_loss_results", "\n", "package", "[", "'dev_cer_results'", "]", "=", "dev_cer_results", "\n", "", "return", "package", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.steps.test_ctc.test": [[22, 111], ["parser.parse_args", "steps.train_ctc.Config", "yaml.safe_load.items", "os.path.join", "torch.load", "torch.load", "utils.data_loader.Vocab", "utils.data_loader.SpeechDataset", "utils.data_loader.SpeechDataLoader", "CTC_Model", "CTC_Model.to", "CTC_Model.load_state_dict", "CTC_Model.eval", "time.time", "print", "print", "print", "time.time", "print", "yaml.safe_load", "setattr", "print", "torch.device", "torch.device", "torch.device", "torch.device", "utils.ctcDecoder.GreedyDecoder", "utils.ctcDecoder.BeamDecoder", "torch.no_grad", "torch.no_grad", "open", "print", "sys.exit", "inputs.to.to", "CTC_Model.", "probs.cpu.size", "probs.cpu.cpu", "utils.ctcDecoder.BeamDecoder.decode", "range", "range", "range", "float", "input_sizes.numpy().tolist", "targets.numpy", "target_sizes.numpy", "len", "labels.append", "len", "print", "print", "len", "utils.ctcDecoder.BeamDecoder.wer", "len", "len", "labels[].split", "input_sizes.numpy"], "function", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.decode", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder.wer"], ["def", "test", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "try", ":", "\n", "        ", "conf", "=", "yaml", ".", "safe_load", "(", "open", "(", "args", ".", "conf", ",", "'r'", ")", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "\"Config file not exist!\"", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "opts", "=", "Config", "(", ")", "\n", "for", "k", ",", "v", "in", "conf", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "opts", ",", "k", ",", "v", ")", "\n", "print", "(", "'{:50}:{}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "use_cuda", "=", "opts", ".", "use_gpu", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "if", "use_cuda", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "checkpoint_dir", ",", "opts", ".", "exp_name", ",", "'ctc_best_model.pkl'", ")", "\n", "package", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "\n", "rnn_param", "=", "package", "[", "\"rnn_param\"", "]", "\n", "add_cnn", "=", "package", "[", "\"add_cnn\"", "]", "\n", "cnn_param", "=", "package", "[", "\"cnn_param\"", "]", "\n", "num_class", "=", "package", "[", "\"num_class\"", "]", "\n", "feature_type", "=", "package", "[", "'epoch'", "]", "[", "'feature_type'", "]", "\n", "n_feats", "=", "package", "[", "'epoch'", "]", "[", "'n_feats'", "]", "\n", "drop_out", "=", "package", "[", "'_drop_out'", "]", "\n", "mel", "=", "opts", ".", "mel", "\n", "\n", "beam_width", "=", "opts", ".", "beam_width", "\n", "lm_alpha", "=", "opts", ".", "lm_alpha", "\n", "decoder_type", "=", "opts", ".", "decode_type", "\n", "vocab_file", "=", "opts", ".", "vocab_file", "\n", "\n", "vocab", "=", "Vocab", "(", "vocab_file", ")", "\n", "test_dataset", "=", "SpeechDataset", "(", "vocab", ",", "opts", ".", "test_scp_path", ",", "opts", ".", "test_lab_path", ",", "opts", ",", "False", ")", "\n", "test_loader", "=", "SpeechDataLoader", "(", "test_dataset", ",", "batch_size", "=", "opts", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "opts", ".", "num_workers", ",", "pin_memory", "=", "False", ")", "\n", "\n", "model", "=", "CTC_Model", "(", "rnn_param", "=", "rnn_param", ",", "add_cnn", "=", "add_cnn", ",", "cnn_param", "=", "cnn_param", ",", "num_class", "=", "num_class", ",", "drop_out", "=", "drop_out", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "load_state_dict", "(", "package", "[", "'state_dict'", "]", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "\n", "if", "decoder_type", "==", "'Greedy'", ":", "\n", "        ", "decoder", "=", "GreedyDecoder", "(", "vocab", ".", "index2word", ",", "space_idx", "=", "-", "1", ",", "blank_index", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "decoder", "=", "BeamDecoder", "(", "vocab", ".", "index2word", ",", "beam_width", "=", "beam_width", ",", "blank_index", "=", "0", ",", "space_idx", "=", "-", "1", ",", "lm_path", "=", "opts", ".", "lm_path", ",", "lm_alpha", "=", "opts", ".", "lm_alpha", ")", "\n", "\n", "", "total_wer", "=", "0", "\n", "total_cer", "=", "0", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", "in", "test_loader", ":", "\n", "            ", "inputs", ",", "input_sizes", ",", "targets", ",", "target_sizes", ",", "utt_list", "=", "data", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "#rnput_sizes = input_sizes.to(device) ", "\n", "#target = target.to(device)", "\n", "#target_sizes = target_sizes.to(device)", "\n", "\n", "probs", "=", "model", "(", "inputs", ")", "\n", "\n", "max_length", "=", "probs", ".", "size", "(", "0", ")", "\n", "input_sizes", "=", "(", "input_sizes", "*", "max_length", ")", ".", "long", "(", ")", "\n", "\n", "probs", "=", "probs", ".", "cpu", "(", ")", "\n", "decoded", "=", "decoder", ".", "decode", "(", "probs", ",", "input_sizes", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "targets", ",", "target_sizes", "=", "targets", ".", "numpy", "(", ")", ",", "target_sizes", ".", "numpy", "(", ")", "\n", "labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "targets", ")", ")", ":", "\n", "                ", "label", "=", "[", "vocab", ".", "index2word", "[", "num", "]", "for", "num", "in", "targets", "[", "i", "]", "[", ":", "target_sizes", "[", "i", "]", "]", "]", "\n", "labels", ".", "append", "(", "' '", ".", "join", "(", "label", ")", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "targets", ")", ")", ":", "\n", "                ", "print", "(", "\"origin : \"", "+", "labels", "[", "x", "]", ")", "\n", "print", "(", "\"decoded: \"", "+", "decoded", "[", "x", "]", ")", "\n", "", "cer", "=", "0", "\n", "wer", "=", "0", "\n", "for", "x", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "                ", "wer", "+=", "decoder", ".", "wer", "(", "decoded", "[", "x", "]", ",", "labels", "[", "x", "]", ")", "\n", "decoder", ".", "num_word", "+=", "len", "(", "labels", "[", "x", "]", ".", "split", "(", ")", ")", "\n", "\n", "", "total_wer", "+=", "wer", "\n", "", "", "print", "(", "\"total_error:\"", ",", "total_wer", ")", "\n", "print", "(", "\"total_phoneme:\"", ",", "decoder", ".", "num_word", ")", "\n", "PER", "=", "(", "float", "(", "total_wer", ")", "/", "decoder", ".", "num_word", ")", "*", "100", "\n", "print", "(", "\"Phoneme error rate on test set: %.4f\"", "%", "PER", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "time_used", "=", "(", "end", "-", "start", ")", "/", "60.0", "\n", "print", "(", "\"time used for decode %d sentences: %.4f minutes.\"", "%", "(", "len", "(", "test_dataset", ")", ",", "time_used", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.steps.test_ctc_nosil.test": [[21, 146], ["parser.parse_args", "steps.train_ctc.Config", "yaml.safe_load.items", "os.path.join", "torch.load", "torch.load", "utils.data_loader.Vocab", "utils.data_loader.SpeechDataset", "utils.data_loader.SpeechDataLoader", "CTC_Model", "CTC_Model.to", "CTC_Model.load_state_dict", "CTC_Model.eval", "open", "open", "time.time", "print", "print", "print", "time.time", "print", "open.close", "open.close", "yaml.safe_load", "setattr", "print", "torch.device", "torch.device", "torch.device", "torch.device", "utils.ctcDecoder.GreedyDecoder", "utils.ctcDecoder.BeamDecoder", "torch.no_grad", "torch.no_grad", "open", "print", "sys.exit", "inputs.to.to", "trans.to.to", "CTC_Model.", "probs.cpu.size", "probs.cpu.cpu", "utils.ctcDecoder.BeamDecoder.decode", "range", "range", "range", "range", "range", "float", "input_sizes.numpy().tolist", "targets.numpy", "target_sizes.numpy", "len", "labels.append", "len", "decoded[].split", "labels[].split", "labesl_nosil.append", "decoded_nosil.append", "len", "open.write", "open.write", "len", "print", "print", "len", "utils.ctcDecoder.BeamDecoder.wer", "len", "len", "labesl_nosil[].split", "input_sizes.numpy"], "function", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.decode", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder.wer"], ["def", "test", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "try", ":", "\n", "        ", "conf", "=", "yaml", ".", "safe_load", "(", "open", "(", "args", ".", "conf", ",", "'r'", ")", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "\"Config file not exist!\"", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "opts", "=", "Config", "(", ")", "\n", "for", "k", ",", "v", "in", "conf", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "opts", ",", "k", ",", "v", ")", "\n", "print", "(", "'{:50}:{}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "use_cuda", "=", "opts", ".", "use_gpu", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "if", "use_cuda", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "model_path", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "checkpoint_dir", ",", "opts", ".", "exp_name", ",", "'ctc_best_model.pkl'", ")", "\n", "package", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "\n", "rnn_param", "=", "package", "[", "\"rnn_param\"", "]", "\n", "add_cnn", "=", "package", "[", "\"add_cnn\"", "]", "\n", "cnn_param", "=", "package", "[", "\"cnn_param\"", "]", "\n", "num_class", "=", "package", "[", "\"num_class\"", "]", "\n", "feature_type", "=", "package", "[", "'epoch'", "]", "[", "'feature_type'", "]", "\n", "n_feats", "=", "package", "[", "'epoch'", "]", "[", "'n_feats'", "]", "\n", "drop_out", "=", "package", "[", "'_drop_out'", "]", "\n", "mel", "=", "opts", ".", "mel", "\n", "\n", "beam_width", "=", "opts", ".", "beam_width", "\n", "lm_alpha", "=", "opts", ".", "lm_alpha", "\n", "decoder_type", "=", "opts", ".", "decode_type", "\n", "vocab_file", "=", "opts", ".", "vocab_file", "\n", "\n", "vocab", "=", "Vocab", "(", "vocab_file", ")", "\n", "test_dataset", "=", "SpeechDataset", "(", "vocab", ",", "opts", ".", "test_scp_path", ",", "opts", ".", "test_lab_path", ",", "opts", ".", "test_trans_path", ",", "opts", ",", "is_training", "=", "False", ")", "\n", "test_loader", "=", "SpeechDataLoader", "(", "test_dataset", ",", "batch_size", "=", "opts", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "opts", ".", "num_workers", ",", "pin_memory", "=", "False", ")", "\n", "\n", "model", "=", "CTC_Model", "(", "rnn_param", "=", "rnn_param", ",", "add_cnn", "=", "add_cnn", ",", "cnn_param", "=", "cnn_param", ",", "num_class", "=", "num_class", ",", "drop_out", "=", "drop_out", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "load_state_dict", "(", "package", "[", "'state_dict'", "]", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "\n", "if", "decoder_type", "==", "'Greedy'", ":", "\n", "        ", "decoder", "=", "GreedyDecoder", "(", "vocab", ".", "index2word", ",", "space_idx", "=", "-", "1", ",", "blank_index", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "decoder", "=", "BeamDecoder", "(", "vocab", ".", "index2word", ",", "beam_width", "=", "beam_width", ",", "blank_index", "=", "0", ",", "space_idx", "=", "-", "1", ",", "lm_path", "=", "opts", ".", "lm_path", ",", "lm_alpha", "=", "opts", ".", "lm_alpha", ")", "\n", "\n", "", "w1", "=", "open", "(", "\"decode_seq\"", ",", "'w+'", ")", "\n", "w2", "=", "open", "(", "\"human_seq\"", ",", "'w+'", ")", "\n", "total_wer", "=", "0", "\n", "total_cer", "=", "0", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", "in", "test_loader", ":", "\n", "            ", "inputs", ",", "input_sizes", ",", "targets", ",", "target_sizes", ",", "trans", ",", "trans_sizes", ",", "utt_list", "=", "data", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "trans", "=", "trans", ".", "to", "(", "device", ")", "\n", "#rnput_sizes = input_sizes.to(device) ", "\n", "#target = target.to(device)", "\n", "#target_sizes = target_sizes.to(device)", "\n", "\n", "probs", "=", "model", "(", "inputs", ",", "trans", ")", "\n", "\n", "max_length", "=", "probs", ".", "size", "(", "0", ")", "\n", "input_sizes", "=", "(", "input_sizes", "*", "max_length", ")", ".", "long", "(", ")", "\n", "\n", "probs", "=", "probs", ".", "cpu", "(", ")", "\n", "decoded", "=", "decoder", ".", "decode", "(", "probs", ",", "input_sizes", ".", "numpy", "(", ")", ".", "tolist", "(", ")", ")", "\n", "\n", "targets", ",", "target_sizes", "=", "targets", ".", "numpy", "(", ")", ",", "target_sizes", ".", "numpy", "(", ")", "\n", "labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "targets", ")", ")", ":", "\n", "                ", "label", "=", "[", "vocab", ".", "index2word", "[", "num", "]", "for", "num", "in", "targets", "[", "i", "]", "[", ":", "target_sizes", "[", "i", "]", "]", "]", "\n", "labels", ".", "append", "(", "' '", ".", "join", "(", "label", ")", ")", "\n", "\n", "\n", "## compute with out sil     ", "\n", "", "decoded_nosil", "=", "[", "]", "\n", "labesl_nosil", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "                ", "hyp", "=", "decoded", "[", "i", "]", ".", "split", "(", "\" \"", ")", "\n", "ref", "=", "labels", "[", "i", "]", ".", "split", "(", "\" \"", ")", "\n", "ref_precess", "=", "[", "i", "for", "i", "in", "ref", "if", "(", "i", "!=", "\"sil\"", ")", "]", "\n", "hyp_precess", "=", "[", "i", "for", "i", "in", "hyp", "if", "(", "i", "!=", "\"sil\"", ")", "]", "\n", "labesl_nosil", ".", "append", "(", "' '", ".", "join", "(", "ref_precess", ")", ")", "\n", "decoded_nosil", ".", "append", "(", "' '", ".", "join", "(", "hyp_precess", ")", ")", "\n", "", "for", "x", "in", "range", "(", "len", "(", "targets", ")", ")", ":", "\n", "                ", "w2", ".", "write", "(", "utt_list", "[", "x", "]", "+", "\" \"", "+", "labesl_nosil", "[", "x", "]", "+", "\"\\n\"", ")", "\n", "w1", ".", "write", "(", "utt_list", "[", "x", "]", "+", "\" \"", "+", "decoded_nosil", "[", "x", "]", "+", "\"\\n\"", ")", "\n", "\n", "", "wer", "=", "0", "\n", "for", "x", "in", "range", "(", "len", "(", "targets", ")", ")", ":", "\n", "                ", "print", "(", "\"origin : \"", "+", "labesl_nosil", "[", "x", "]", ")", "\n", "print", "(", "\"decoded: \"", "+", "decoded_nosil", "[", "x", "]", ")", "\n", "", "for", "x", "in", "range", "(", "len", "(", "labesl_nosil", ")", ")", ":", "\n", "                ", "wer", "+=", "decoder", ".", "wer", "(", "decoded_nosil", "[", "x", "]", ",", "labesl_nosil", "[", "x", "]", ")", "\n", "decoder", ".", "num_word", "+=", "len", "(", "labesl_nosil", "[", "x", "]", ".", "split", "(", ")", ")", "\n", "", "total_wer", "+=", "wer", "\n", "\n", "##  ", "\n", "#for x in range(len(targets)):", "\n", "#    print(\"origin : \" + labels[x])", "\n", "#    print(\"decoded: \" + decoded[x])", "\n", "#cer = 0", "\n", "#wer = 0", "\n", "#for x in range(len(labels)):", "\n", "#    cer += decoder.cer(decoded[x], labels[x])", "\n", "#    wer += decoder.wer(decoded[x], labels[x])", "\n", "#    decoder.num_word += len(labels[x].split())", "\n", "#    decoder.num_char += len(labels[x])", "\n", "#total_cer += cer", "\n", "#total_wer += wer", "\n", "##", "\n", "", "", "print", "(", "\"total_error:\"", ",", "total_wer", ")", "\n", "print", "(", "\"total_phoneme:\"", ",", "decoder", ".", "num_word", ")", "\n", "WER", "=", "(", "float", "(", "total_wer", ")", "/", "decoder", ".", "num_word", ")", "*", "100", "\n", "print", "(", "\"Phoneme error rate on test set: %.4f\"", "%", "WER", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "time_used", "=", "(", "end", "-", "start", ")", "/", "60.0", "\n", "print", "(", "\"time used for decode %d sentences: %.4f minutes.\"", "%", "(", "len", "(", "test_dataset", ")", ",", "time_used", ")", ")", "\n", "w1", ".", "close", "(", ")", "\n", "w2", ".", "close", "(", ")", "\n", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "test", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.steps.train_ctc.run_epoch": [[28, 89], ["enumerate", "print", "model.train", "model.eval", "inputs.to.to", "input_sizes.to.to", "targets.to.to", "target_sizes.to.to", "trans.to.to", "trans_sizes.to.to", "model", "model.size", "loss_fn", "loss_fn.item", "loss_fn.item", "torch.max", "torch.max", "model.compute_wer", "index.transpose().cpu().numpy", "input_sizes.to.cpu().numpy", "targets.to.cpu().numpy", "target_sizes.to.cpu().numpy", "print", "optimizer.zero_grad", "loss_fn.backward", "optimizer.step", "index.transpose().cpu", "input_sizes.to.cpu", "targets.to.cpu", "target_sizes.to.cpu", "index.transpose"], "function", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.compute_wer"], ["        ", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "\n", "", "total_loss", "=", "0", "\n", "total_tokens", "=", "0", "\n", "total_errs", "=", "0", "\n", "cur_loss", "=", "0", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_iter", ")", ":", "\n", "        ", "inputs", ",", "input_sizes", ",", "targets", ",", "target_sizes", ",", "trans", ",", "trans_sizes", ",", "utt_list", "=", "data", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "input_sizes", "=", "input_sizes", ".", "to", "(", "device", ")", "\n", "targets", "=", "targets", ".", "to", "(", "device", ")", "\n", "target_sizes", "=", "target_sizes", ".", "to", "(", "device", ")", "\n", "trans", "=", "trans", ".", "to", "(", "device", ")", "\n", "trans_sizes", "=", "trans_sizes", ".", "to", "(", "device", ")", "\n", "\n", "\n", "\n", "out", "=", "model", "(", "inputs", ",", "trans", ")", "\n", "out_len", ",", "batch_size", ",", "_", "=", "out", ".", "size", "(", ")", "\n", "input_sizes", "=", "(", "input_sizes", "*", "out_len", ")", ".", "long", "(", ")", "\n", "loss", "=", "loss_fn", "(", "out", ",", "targets", ",", "input_sizes", ",", "target_sizes", ")", "\n", "loss", "/=", "batch_size", "\n", "cur_loss", "+=", "loss", ".", "item", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "prob", ",", "index", "=", "torch", ".", "max", "(", "out", ",", "dim", "=", "-", "1", ")", "\n", "batch_errs", ",", "batch_tokens", "=", "model", ".", "compute_wer", "(", "index", ".", "transpose", "(", "0", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "input_sizes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "targets", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "target_sizes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "total_errs", "+=", "batch_errs", "\n", "total_tokens", "+=", "batch_tokens", "\n", "\n", "if", "(", "i", "+", "1", ")", "%", "print_every", "==", "0", "and", "is_training", ":", "\n", "            ", "print", "(", "'Epoch = %d, step = %d, cur_loss = %.4f, total_loss = %.4f, total_wer = %.4f'", "%", "(", "epoch_id", ",", "\n", "i", "+", "1", ",", "cur_loss", "/", "print_every", ",", "total_loss", "/", "(", "i", "+", "1", ")", ",", "total_errs", "/", "total_tokens", ")", ")", "\n", "cur_loss", "=", "0", "\n", "\n", "", "if", "is_training", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "#nn.utils.clip_grad_norm_(model.parameters(), 400)", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "average_loss", "=", "total_loss", "/", "(", "i", "+", "1", ")", "\n", "training", "=", "\"Train\"", "if", "is_training", "else", "\"Valid\"", "\n", "print", "(", "\"Epoch %d %s done, total_loss: %.4f, total_wer: %.4f\"", "%", "(", "epoch_id", ",", "training", ",", "average_loss", ",", "total_errs", "/", "total_tokens", ")", ")", "\n", "return", "1", "-", "total_errs", "/", "total_tokens", ",", "average_loss", "\n", "\n", "", "class", "Config", "(", "object", ")", ":", "\n", "    ", "batch_size", "=", "4", "\n", "dropout", "=", "0.1", "\n", "\n", "", "def", "main", "(", "conf", ")", ":", "\n", "    ", "opts", "=", "Config", "(", ")", "\n", "for", "k", ",", "v", "in", "conf", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "opts", ",", "k", ",", "v", ")", "\n", "print", "(", "'{:50}:{}'", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda:1'", ")", "if", "opts", ".", "use_gpu", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "torch", ".", "manual_seed", "(", "opts", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "opts", ".", "seed", ")", "\n", "if", "opts", ".", "use_gpu", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "opts", ".", "seed", ")", "\n"]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.steps.train_ctc.main": [[94, 269], ["train_ctc.Config", "conf.items", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "utils.data_loader.Vocab", "utils.data_loader.SpeechDataset", "utils.data_loader.SpeechDataset", "utils.data_loader.SpeechDataLoader", "utils.data_loader.SpeechDataLoader", "eval", "eval", "eval", "eval", "eval", "range", "CTC_Model", "model.to.to", "model.to.named_parameters", "print", "enumerate", "print", "torch.CTCLoss", "torch.optim.Adam", "torch.optim.Adam", "Visdom", "time.time", "print", "model.to.load_state_dict", "torch.optim.Adam.load_state_dict", "os.path.join", "os.path.join", "torch.save", "torch.save", "setattr", "print", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "cnn_param[].append", "param.numel", "model.to.children", "print", "model.to.parameters", "dict", "dict", "dict", "print", "train_ctc.run_epoch", "loss_results.append", "train_ctc.run_epoch", "print", "dev_loss_results.append", "dev_cer_results.append", "print", "print", "print", "print", "os.path.exists", "os.makedirs", "CTC_Model.save_package", "layer_param.append", "layer_param.append", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "model.to.load_state_dict", "torch.optim.Adam.load_state_dict", "str", "str", "model.to.state_dict", "torch.optim.Adam.state_dict", "model.to.state_dict", "torch.optim.Adam.state_dict", "str", "str", "time.time", "copy.deepcopy", "copy.deepcopy", "model.to.state_dict", "torch.optim.Adam.state_dict"], "function", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.steps.train_ctc.run_epoch", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.steps.train_ctc.run_epoch", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.models.model_ctc.CTC_Model.save_package"], ["dev_dataset", "=", "SpeechDataset", "(", "vocab", ",", "opts", ".", "valid_scp_path", ",", "opts", ".", "valid_lab_path", ",", "opts", ".", "valid_trans_path", ",", "opts", ",", "is_training", "=", "False", ")", "\n", "train_loader", "=", "SpeechDataLoader", "(", "train_dataset", ",", "batch_size", "=", "opts", ".", "batch_size", ",", "shuffle", "=", "opts", ".", "shuffle_train", ",", "num_workers", "=", "opts", ".", "num_workers", ")", "\n", "dev_loader", "=", "SpeechDataLoader", "(", "dev_dataset", ",", "batch_size", "=", "opts", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "opts", ".", "num_workers", ")", "\n", "\n", "#Define Model", "\n", "rnn_type", "=", "supported_rnn", "[", "opts", ".", "rnn_type", "]", "\n", "rnn_param", "=", "{", "\"rnn_input_size\"", ":", "opts", ".", "rnn_input_size", ",", "\"rnn_hidden_size\"", ":", "opts", ".", "rnn_hidden_size", ",", "\"rnn_layers\"", ":", "opts", ".", "rnn_layers", ",", "\n", "\"rnn_type\"", ":", "rnn_type", ",", "\"bidirectional\"", ":", "opts", ".", "bidirectional", ",", "\"batch_norm\"", ":", "opts", ".", "batch_norm", "}", "\n", "\n", "num_class", "=", "vocab", ".", "n_words", "\n", "opts", ".", "output_class_dim", "=", "vocab", ".", "n_words", "\n", "drop_out", "=", "opts", ".", "drop_out", "\n", "add_cnn", "=", "opts", ".", "add_cnn", "\n", "\n", "cnn_param", "=", "{", "}", "\n", "channel", "=", "eval", "(", "opts", ".", "channel", ")", "\n", "kernel_size", "=", "eval", "(", "opts", ".", "kernel_size", ")", "\n", "stride", "=", "eval", "(", "opts", ".", "stride", ")", "\n", "padding", "=", "eval", "(", "opts", ".", "padding", ")", "\n", "pooling", "=", "eval", "(", "opts", ".", "pooling", ")", "\n", "activation_function", "=", "supported_activate", "[", "opts", ".", "activation_function", "]", "\n", "cnn_param", "[", "'batch_norm'", "]", "=", "opts", ".", "batch_norm", "\n", "cnn_param", "[", "'activate_function'", "]", "=", "activation_function", "\n", "cnn_param", "[", "\"layer\"", "]", "=", "[", "]", "\n", "for", "layer", "in", "range", "(", "opts", ".", "layers", ")", ":", "\n", "        ", "layer_param", "=", "[", "channel", "[", "layer", "]", ",", "kernel_size", "[", "layer", "]", ",", "stride", "[", "layer", "]", ",", "padding", "[", "layer", "]", "]", "\n", "if", "pooling", "is", "not", "None", ":", "\n", "            ", "layer_param", ".", "append", "(", "pooling", "[", "layer", "]", ")", "\n", "", "else", ":", "\n", "            ", "layer_param", ".", "append", "(", "None", ")", "\n", "", "cnn_param", "[", "\"layer\"", "]", ".", "append", "(", "layer_param", ")", "\n", "\n", "", "model", "=", "CTC_Model", "(", "add_cnn", "=", "add_cnn", ",", "cnn_param", "=", "cnn_param", ",", "rnn_param", "=", "rnn_param", ",", "num_class", "=", "num_class", ",", "drop_out", "=", "drop_out", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "num_params", "=", "0", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "\"Number of parameters %d\"", "%", "num_params", ")", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "model", ".", "children", "(", ")", ")", ":", "\n", "        ", "print", "(", "idx", ",", "m", ")", "\n", "\n", "#Training", "\n", "", "init_lr", "=", "opts", ".", "init_lr", "\n", "num_epoches", "=", "opts", ".", "num_epoches", "\n", "end_adjust_acc", "=", "opts", ".", "end_adjust_acc", "\n", "decay", "=", "opts", ".", "lr_decay", "\n", "weight_decay", "=", "opts", ".", "weight_decay", "\n", "batch_size", "=", "opts", ".", "batch_size", "\n", "\n", "params", "=", "{", "'num_epoches'", ":", "num_epoches", ",", "'end_adjust_acc'", ":", "end_adjust_acc", ",", "'mel'", ":", "opts", ".", "mel", ",", "'seed'", ":", "opts", ".", "seed", ",", "\n", "'decay'", ":", "decay", ",", "'learning_rate'", ":", "init_lr", ",", "'weight_decay'", ":", "weight_decay", ",", "'batch_size'", ":", "batch_size", ",", "\n", "'feature_type'", ":", "opts", ".", "feature_type", ",", "'n_feats'", ":", "opts", ".", "feature_dim", "}", "\n", "print", "(", "params", ")", "\n", "\n", "loss_fn", "=", "nn", ".", "CTCLoss", "(", "reduction", "=", "'sum'", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "init_lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "\n", "#visualization for training", "\n", "from", "visdom", "import", "Visdom", "\n", "viz", "=", "Visdom", "(", ")", "\n", "if", "add_cnn", ":", "\n", "        ", "title", "=", "opts", ".", "feature_type", "+", "str", "(", "opts", ".", "feature_dim", ")", "+", "' CNN_LSTM_CTC'", "\n", "", "else", ":", "\n", "        ", "title", "=", "opts", ".", "feature_type", "+", "str", "(", "opts", ".", "feature_dim", ")", "+", "' LSTM_CTC'", "\n", "\n", "", "viz_opts", "=", "[", "dict", "(", "title", "=", "title", "+", "\" Loss\"", ",", "ylabel", "=", "'Loss'", ",", "xlabel", "=", "'Epoch'", ")", ",", "\n", "dict", "(", "title", "=", "title", "+", "\" Loss on Dev\"", ",", "ylabel", "=", "'DEV Loss'", ",", "xlabel", "=", "'Epoch'", ")", ",", "\n", "dict", "(", "title", "=", "title", "+", "' CER on DEV'", ",", "ylabel", "=", "'DEV CER'", ",", "xlabel", "=", "'Epoch'", ")", "]", "\n", "viz_window", "=", "[", "None", ",", "None", ",", "None", "]", "\n", "\n", "count", "=", "0", "\n", "learning_rate", "=", "init_lr", "\n", "loss_best", "=", "1000", "\n", "loss_best_true", "=", "1000", "\n", "adjust_rate_flag", "=", "False", "\n", "stop_train", "=", "False", "\n", "adjust_time", "=", "0", "\n", "acc_best", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "loss_results", "=", "[", "]", "\n", "dev_loss_results", "=", "[", "]", "\n", "dev_cer_results", "=", "[", "]", "\n", "\n", "while", "not", "stop_train", ":", "\n", "        ", "if", "count", ">=", "num_epoches", ":", "\n", "            ", "break", "\n", "", "count", "+=", "1", "\n", "\n", "if", "adjust_rate_flag", ":", "\n", "            ", "learning_rate", "*=", "decay", "\n", "adjust_rate_flag", "=", "False", "\n", "for", "param", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "param", "[", "'lr'", "]", "*=", "decay", "\n", "\n", "", "", "print", "(", "\"Start training epoch: %d, learning_rate: %.5f\"", "%", "(", "count", ",", "learning_rate", ")", ")", "\n", "\n", "train_acc", ",", "loss", "=", "run_epoch", "(", "count", ",", "model", ",", "train_loader", ",", "loss_fn", ",", "device", ",", "optimizer", "=", "optimizer", ",", "print_every", "=", "opts", ".", "verbose_step", ",", "is_training", "=", "True", ")", "\n", "loss_results", ".", "append", "(", "loss", ")", "\n", "acc", ",", "dev_loss", "=", "run_epoch", "(", "count", ",", "model", ",", "dev_loader", ",", "loss_fn", ",", "device", ",", "optimizer", "=", "None", ",", "print_every", "=", "opts", ".", "verbose_step", ",", "is_training", "=", "False", ")", "\n", "print", "(", "\"loss on dev set is %.4f\"", "%", "dev_loss", ")", "\n", "dev_loss_results", ".", "append", "(", "dev_loss", ")", "\n", "dev_cer_results", ".", "append", "(", "acc", ")", "\n", "\n", "#adjust learning rate by dev_loss", "\n", "if", "dev_loss", "<", "(", "loss_best", "-", "end_adjust_acc", ")", ":", "\n", "            ", "loss_best", "=", "dev_loss", "\n", "loss_best_true", "=", "dev_loss", "\n", "adjust_rate_count", "=", "0", "\n", "model_state", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "op_state", "=", "copy", ".", "deepcopy", "(", "optimizer", ".", "state_dict", "(", ")", ")", "\n", "", "elif", "(", "dev_loss", "<", "loss_best", "+", "end_adjust_acc", ")", ":", "\n", "            ", "adjust_rate_count", "+=", "1", "\n", "if", "dev_loss", "<", "loss_best", "and", "dev_loss", "<", "loss_best_true", ":", "\n", "                ", "loss_best_true", "=", "dev_loss", "\n", "model_state", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "op_state", "=", "copy", ".", "deepcopy", "(", "optimizer", ".", "state_dict", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "adjust_rate_count", "=", "10", "\n", "\n", "", "if", "acc", ">", "acc_best", ":", "\n", "            ", "acc_best", "=", "acc", "\n", "best_model_state", "=", "copy", ".", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "best_op_state", "=", "copy", ".", "deepcopy", "(", "optimizer", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "print", "(", "\"adjust_rate_count:\"", "+", "str", "(", "adjust_rate_count", ")", ")", "\n", "print", "(", "'adjust_time:'", "+", "str", "(", "adjust_time", ")", ")", "\n", "\n", "if", "adjust_rate_count", "==", "10", ":", "\n", "            ", "adjust_rate_flag", "=", "True", "\n", "adjust_time", "+=", "1", "\n", "adjust_rate_count", "=", "0", "\n", "if", "loss_best", ">", "loss_best_true", ":", "\n", "                ", "loss_best", "=", "loss_best_true", "\n", "", "model", ".", "load_state_dict", "(", "model_state", ")", "\n", "optimizer", ".", "load_state_dict", "(", "op_state", ")", "\n", "\n", "", "if", "adjust_time", "==", "8", ":", "\n", "            ", "stop_train", "=", "True", "\n", "\n", "", "time_used", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", "\n", "print", "(", "\"epoch %d done, cv acc is: %.4f, time_used: %.4f minutes\"", "%", "(", "count", ",", "acc", ",", "time_used", ")", ")", "\n", "\n", "#x_axis = range(count)", "\n", "#y_axis = [loss_results[0:count], dev_loss_results[0:count], dev_cer_results[0:count]]", "\n", "#for x in range(len(viz_window)):", "\n", "#    if viz_window[x] is None:", "\n", "#        viz_window[x] = viz.line(X = np.array(x_axis), Y = np.array(y_axis[x]), opts = viz_opts[x],)", "\n", "#    else:", "\n", "#        viz.line(X = np.array(x_axis), Y = np.array(y_axis[x]), win = viz_window[x], update = 'replace',)", "\n", "\n", "", "print", "(", "\"End training, best dev loss is: %.4f, acc is: %.4f\"", "%", "(", "loss_best", ",", "acc_best", ")", ")", "\n", "model", ".", "load_state_dict", "(", "best_model_state", ")", "\n", "optimizer", ".", "load_state_dict", "(", "best_op_state", ")", "\n", "save_dir", "=", "os", ".", "path", ".", "join", "(", "opts", ".", "checkpoint_dir", ",", "opts", ".", "exp_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "best_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'ctc_best_model.pkl'", ")", "\n", "params", "[", "'epoch'", "]", "=", "count", "\n", "\n", "torch", ".", "save", "(", "CTC_Model", ".", "save_package", "(", "model", ",", "optimizer", "=", "optimizer", ",", "epoch", "=", "params", ",", "loss_results", "=", "loss_results", ",", "dev_loss_results", "=", "dev_loss_results", ",", "dev_cer_results", "=", "dev_cer_results", ")", ",", "best_path", ")", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "try", ":", "\n", "        ", "config_path", "=", "args", ".", "conf", "\n", "conf", "=", "yaml", ".", "safe_load", "(", "open", "(", "config_path", ",", "'r'", ")", ")", "\n", "", "except", ":", "\n", "        ", "print", "(", "\"No input config or config file missing, please check.\"", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "main", "(", "conf", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.steps.visualize.test": [[16, 134], ["torch.load", "torch.load", "data_loader.myDataset", "CTC_Model", "model.cuda.load_state_dict", "model.cuda.eval", "open", "pickle.load", "open.close", "print", "visdom.Visdom", "range", "data_loader.myCNNDataLoader", "data_loader.myDataLoader", "model.cuda.cuda", "ctcDecoder.GreedyDecoder", "ctcDecoder.BeamDecoder", "legend.append", "torch.autograd.Variable", "model.cuda.", "probs.data.cpu.data.cpu", "ctcDecoder.BeamDecoder.decode", "ctcDecoder.BeamDecoder._unflatten_targets", "ctcDecoder.BeamDecoder._process_strings", "range", "range", "nn.utils.rnn.pack_padded_sequence.transpose", "nn.utils.rnn.pack_padded_sequence.cuda", "torch.utils.rnn.pack_padded_sequence", "probs.data.cpu.size", "ctcDecoder.BeamDecoder._convert_to_strings", "len", "labels[].strip().split", "range", "decoded[].strip().split", "range", "len", "print", "print", "[].transpose().data.cpu", "dict", "visdom.Visdom.heatmap", "dict", "[].transpose().data.cpu", "visdom.Visdom.heatmap", "dict", "[].transpose().data.cpu", "visdom.Visdom.heatmap", "[].data.cpu", "dict", "visdom.Visdom.line", "[].transpose().data.cpu", "dict", "visdom.Visdom.heatmap", "[].data.cpu", "dict", "visdom.Visdom.line", "int", "len", "len", "[].data.cpu.size", "[].data.cpu.numpy", "[].data.cpu.size", "[].data.cpu.numpy", "labels[].strip", "decoded[].strip", "np.array", "np.array", "[].transpose", "[].transpose", "[].transpose", "range", "[].transpose", "range", "visual[].transpose", "visual[].transpose", "visual[].transpose"], "function", ["home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.BeamSearch.ctcBeamSearch.decode", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._unflatten_targets", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._process_strings", "home.repos.pwc.inspect_result.cageyoko_CTC-Attention-Mispronunciation.utils.ctcDecoder.Decoder._convert_to_strings"], ["def", "test", "(", ")", ":", "\n", "    ", "model_path", "=", "'../log/exp_cnn_lstm_ctc_spectrum201/exp_cnn3*41_3*21_4lstm_ctc_Melspectrum_stride_1_2/exp2_82.1483/best_model_cv80.8660423723.pkl'", "\n", "package", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "data_dir", "=", "'../data_prepare/data'", "\n", "rnn_param", "=", "package", "[", "\"rnn_param\"", "]", "\n", "add_cnn", "=", "package", "[", "\"add_cnn\"", "]", "\n", "cnn_param", "=", "package", "[", "\"cnn_param\"", "]", "\n", "num_class", "=", "package", "[", "\"num_class\"", "]", "\n", "feature_type", "=", "package", "[", "'epoch'", "]", "[", "'feature_type'", "]", "\n", "n_feats", "=", "package", "[", "'epoch'", "]", "[", "'n_feats'", "]", "\n", "out_type", "=", "package", "[", "'epoch'", "]", "[", "'out_type'", "]", "\n", "drop_out", "=", "package", "[", "'_drop_out'", "]", "\n", "try", ":", "\n", "        ", "mel", "=", "package", "[", "'epoch'", "]", "[", "'mel'", "]", "\n", "", "except", ":", "\n", "        ", "mel", "=", "False", "\n", "#weight_decay = package['epoch']['weight_decay']", "\n", "#print(weight_decay)", "\n", "\n", "", "decoder_type", "=", "'Greedy'", "\n", "\n", "test_dataset", "=", "myDataset", "(", "data_dir", ",", "data_set", "=", "'train'", ",", "feature_type", "=", "feature_type", ",", "out_type", "=", "out_type", ",", "n_feats", "=", "n_feats", ",", "mel", "=", "mel", ")", "\n", "\n", "model", "=", "CTC_Model", "(", "rnn_param", "=", "rnn_param", ",", "add_cnn", "=", "add_cnn", ",", "cnn_param", "=", "cnn_param", ",", "num_class", "=", "num_class", ",", "drop_out", "=", "drop_out", ")", "\n", "\n", "if", "add_cnn", ":", "\n", "        ", "test_loader", "=", "myCNNDataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "test_loader", "=", "myDataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "pin_memory", "=", "False", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "package", "[", "'state_dict'", "]", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "USE_CUDA", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "if", "decoder_type", "==", "'Greedy'", ":", "\n", "        ", "decoder", "=", "GreedyDecoder", "(", "test_dataset", ".", "int2phone", ",", "space_idx", "=", "-", "1", ",", "blank_index", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "decoder", "=", "BeamDecoder", "(", "test_dataset", ".", "int2phone", ")", "\n", "\n", "", "import", "pickle", "\n", "f", "=", "open", "(", "'../decode_map_48-39/map_dict.pkl'", ",", "'rb'", ")", "\n", "map_dict", "=", "pickle", ".", "load", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "print", "(", "map_dict", ")", "\n", "\n", "vis", "=", "visdom", ".", "Visdom", "(", "env", "=", "'fan'", ")", "\n", "legend", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "49", ")", ":", "\n", "        ", "legend", ".", "append", "(", "test_dataset", ".", "int2phone", "[", "i", "]", ")", "\n", "\n", "", "for", "data", "in", "test_loader", ":", "\n", "        ", "inputs", ",", "target", ",", "input_sizes", ",", "input_size_list", ",", "target_sizes", "=", "data", "\n", "if", "not", "add_cnn", ":", "\n", "            ", "inputs", "=", "inputs", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "inputs", "=", "Variable", "(", "inputs", ",", "volatile", "=", "True", ",", "requires_grad", "=", "False", ")", "\n", "if", "USE_CUDA", ":", "\n", "            ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "\n", "", "if", "not", "add_cnn", ":", "\n", "            ", "inputs", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "inputs", ",", "input_size_list", ")", "\n", "\n", "", "probs", ",", "visual", "=", "model", "(", "inputs", ",", "visualize", "=", "True", ")", "\n", "probs", "=", "probs", ".", "data", ".", "cpu", "(", ")", "\n", "\n", "if", "add_cnn", ":", "\n", "            ", "max_length", "=", "probs", ".", "size", "(", "0", ")", "\n", "input_size_list", "=", "[", "int", "(", "x", "*", "max_length", ")", "for", "x", "in", "input_size_list", "]", "\n", "\n", "", "decoded", "=", "decoder", ".", "decode", "(", "probs", ",", "input_size_list", ")", "\n", "targets", "=", "decoder", ".", "_unflatten_targets", "(", "target", ",", "target_sizes", ")", "\n", "labels", "=", "decoder", ".", "_process_strings", "(", "decoder", ".", "_convert_to_strings", "(", "targets", ")", ")", "\n", "\n", "for", "x", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "            ", "label", "=", "labels", "[", "x", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "label", ")", ")", ":", "\n", "                ", "label", "[", "i", "]", "=", "map_dict", "[", "label", "[", "i", "]", "]", "\n", "", "labels", "[", "x", "]", "=", "' '", ".", "join", "(", "label", ")", "\n", "decode", "=", "decoded", "[", "x", "]", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "decode", ")", ")", ":", "\n", "                ", "decode", "[", "i", "]", "=", "map_dict", "[", "decode", "[", "i", "]", "]", "\n", "", "decoded", "[", "x", "]", "=", "' '", ".", "join", "(", "decode", ")", "\n", "\n", "", "for", "x", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "            ", "print", "(", "\"origin: \"", "+", "labels", "[", "x", "]", ")", "\n", "print", "(", "\"decoded: \"", "+", "decoded", "[", "x", "]", ")", "\n", "\n", "", "if", "add_cnn", ":", "\n", "            ", "spectrum_inputs", "=", "visual", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "data", ".", "cpu", "(", ")", "\n", "opts", "=", "dict", "(", "title", "=", "labels", "[", "0", "]", ",", "xlabel", "=", "\"frame\"", ",", "ylabel", "=", "'spectrum'", ")", "\n", "vis", ".", "heatmap", "(", "spectrum_inputs", ",", "opts", "=", "opts", ")", "\n", "\n", "opts", "=", "dict", "(", "title", "=", "labels", "[", "0", "]", ",", "xlabel", "=", "\"frame\"", ",", "ylabel", "=", "'feature_after_cnn'", ")", "\n", "after_cnn", "=", "visual", "[", "1", "]", "[", "0", "]", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "data", ".", "cpu", "(", ")", "\n", "vis", ".", "heatmap", "(", "after_cnn", ",", "opts", "=", "opts", ")", "\n", "\n", "opts", "=", "dict", "(", "title", "=", "labels", "[", "0", "]", ",", "xlabel", "=", "\"frame\"", ",", "ylabel", "=", "'feature_before_rnn'", ")", "\n", "before_rnn", "=", "visual", "[", "2", "]", ".", "transpose", "(", "0", ",", "1", ")", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "data", ".", "cpu", "(", ")", "\n", "vis", ".", "heatmap", "(", "before_rnn", ",", "opts", "=", "opts", ")", "\n", "\n", "show_prob", "=", "visual", "[", "3", "]", ".", "transpose", "(", "0", ",", "1", ")", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", "\n", "line_opts", "=", "dict", "(", "title", "=", "decoded", "[", "0", "]", ",", "xlabel", "=", "\"frame\"", ",", "ylabel", "=", "\"probability\"", ",", "legend", "=", "legend", ")", "\n", "x", "=", "show_prob", ".", "size", "(", ")", "[", "0", "]", "\n", "vis", ".", "line", "(", "show_prob", ".", "numpy", "(", ")", ",", "X", "=", "np", ".", "array", "(", "range", "(", "x", ")", ")", ",", "opts", "=", "line_opts", ")", "\n", "", "else", ":", "\n", "            ", "spectrum_inputs", "=", "visual", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "data", ".", "cpu", "(", ")", "\n", "opts", "=", "dict", "(", "title", "=", "labels", "[", "0", "]", ",", "xlabel", "=", "\"frame\"", ",", "ylabel", "=", "'spectrum'", ")", "\n", "vis", ".", "heatmap", "(", "spectrum_inputs", ",", "opts", "=", "opts", ")", "\n", "\n", "show_prob", "=", "visual", "[", "1", "]", ".", "transpose", "(", "0", ",", "1", ")", "[", "0", "]", ".", "data", ".", "cpu", "(", ")", "\n", "line_opts", "=", "dict", "(", "title", "=", "decoded", "[", "0", "]", ",", "xlabel", "=", "\"frame\"", ",", "ylabel", "=", "\"probability\"", ",", "legend", "=", "legend", ")", "\n", "x", "=", "show_prob", ".", "size", "(", ")", "[", "0", "]", "\n", "vis", ".", "line", "(", "show_prob", ".", "numpy", "(", ")", ",", "X", "=", "np", ".", "array", "(", "range", "(", "x", ")", ")", ",", "opts", "=", "line_opts", ")", "\n", "", "break", "\n", "\n"]]}