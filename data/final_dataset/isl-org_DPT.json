{"home.repos.pwc.inspect_result.isl-org_DPT.None.run_segmentation.run": [[18, 115], ["print", "torch.device", "torch.device", "print", "torchvision.transforms.Compose", "dpt.models.DPTSegmentationModel.eval", "dpt.models.DPTSegmentationModel.to", "glob.glob", "len", "os.makedirs", "print", "enumerate", "print", "dpt.models.DPTSegmentationModel", "dpt.models.DPTSegmentationModel.to", "dpt.models.DPTSegmentationModel.half", "os.path.join", "print", "util.io.read_image", "os.path.join", "util.io.write_segm_img", "torch.cuda.is_available", "torch.cuda.is_available", "dpt.models.DPTSegmentationModel", "dpt.transforms.Resize", "dpt.transforms.NormalizeImage", "dpt.transforms.PrepareForNet", "torch.device", "torch.device", "torchvision.transforms.Compose.", "torch.no_grad", "torch.no_grad", "torch.from_numpy().to().unsqueeze", "torch.from_numpy().to().unsqueeze", "dpt.models.DPTSegmentationModel.forward", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "prediction.squeeze().cpu().numpy.squeeze().cpu().numpy", "sample.half.to", "sample.half.half", "torch.argmax", "torch.argmax", "os.path.splitext", "torch.from_numpy().to", "torch.from_numpy().to", "torch.device", "torch.device", "prediction.squeeze().cpu().numpy.squeeze().cpu", "os.path.basename", "torch.from_numpy", "torch.from_numpy", "prediction.squeeze().cpu().numpy.squeeze"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.util.io.read_image", "home.repos.pwc.inspect_result.isl-org_DPT.util.io.write_segm_img", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.forward"], ["def", "run", "(", "input_path", ",", "output_path", ",", "model_path", ",", "model_type", "=", "\"dpt_hybrid\"", ",", "optimize", "=", "True", ")", ":", "\n", "    ", "\"\"\"Run segmentation network\n\n    Args:\n        input_path (str): path to input folder\n        output_path (str): path to output folder\n        model_path (str): path to saved model\n    \"\"\"", "\n", "print", "(", "\"initialize\"", ")", "\n", "\n", "# select device", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "\"device: %s\"", "%", "device", ")", "\n", "\n", "net_w", "=", "net_h", "=", "480", "\n", "\n", "# load network", "\n", "if", "model_type", "==", "\"dpt_large\"", ":", "\n", "        ", "model", "=", "DPTSegmentationModel", "(", "\n", "150", ",", "\n", "path", "=", "model_path", ",", "\n", "backbone", "=", "\"vitl16_384\"", ",", "\n", ")", "\n", "", "elif", "model_type", "==", "\"dpt_hybrid\"", ":", "\n", "        ", "model", "=", "DPTSegmentationModel", "(", "\n", "150", ",", "\n", "path", "=", "model_path", ",", "\n", "backbone", "=", "\"vitb_rn50_384\"", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "assert", "(", "\n", "False", "\n", ")", ",", "f\"model_type '{model_type}' not implemented, use: --model_type [dpt_large|dpt_hybrid]\"", "\n", "\n", "", "transform", "=", "Compose", "(", "\n", "[", "\n", "Resize", "(", "\n", "net_w", ",", "\n", "net_h", ",", "\n", "resize_target", "=", "None", ",", "\n", "keep_aspect_ratio", "=", "True", ",", "\n", "ensure_multiple_of", "=", "32", ",", "\n", "resize_method", "=", "\"minimal\"", ",", "\n", "image_interpolation_method", "=", "cv2", ".", "INTER_CUBIC", ",", "\n", ")", ",", "\n", "NormalizeImage", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ",", "\n", "PrepareForNet", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "optimize", "==", "True", "and", "device", "==", "torch", ".", "device", "(", "\"cuda\"", ")", ":", "\n", "        ", "model", "=", "model", ".", "to", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "model", "=", "model", ".", "half", "(", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "# get input", "\n", "img_names", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "input_path", ",", "\"*\"", ")", ")", "\n", "num_images", "=", "len", "(", "img_names", ")", "\n", "\n", "# create output folder", "\n", "os", ".", "makedirs", "(", "output_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "print", "(", "\"start processing\"", ")", "\n", "\n", "for", "ind", ",", "img_name", "in", "enumerate", "(", "img_names", ")", ":", "\n", "\n", "        ", "print", "(", "\"  processing {} ({}/{})\"", ".", "format", "(", "img_name", ",", "ind", "+", "1", ",", "num_images", ")", ")", "\n", "\n", "# input", "\n", "img", "=", "util", ".", "io", ".", "read_image", "(", "img_name", ")", "\n", "img_input", "=", "transform", "(", "{", "\"image\"", ":", "img", "}", ")", "[", "\"image\"", "]", "\n", "\n", "# compute", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sample", "=", "torch", ".", "from_numpy", "(", "img_input", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "if", "optimize", "==", "True", "and", "device", "==", "torch", ".", "device", "(", "\"cuda\"", ")", ":", "\n", "                ", "sample", "=", "sample", ".", "to", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "sample", "=", "sample", ".", "half", "(", ")", "\n", "\n", "", "out", "=", "model", ".", "forward", "(", "sample", ")", "\n", "\n", "prediction", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "out", ",", "size", "=", "img", ".", "shape", "[", ":", "2", "]", ",", "mode", "=", "\"bicubic\"", ",", "align_corners", "=", "False", "\n", ")", "\n", "prediction", "=", "torch", ".", "argmax", "(", "prediction", ",", "dim", "=", "1", ")", "+", "1", "\n", "prediction", "=", "prediction", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# output", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "\n", "output_path", ",", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_name", ")", ")", "[", "0", "]", "\n", ")", "\n", "util", ".", "io", ".", "write_segm_img", "(", "filename", ",", "img", ",", "prediction", ",", "alpha", "=", "0.5", ")", "\n", "\n", "", "print", "(", "\"finished\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.None.run_monodepth.run": [[20, 177], ["print", "torch.device", "print", "torchvision.transforms.Compose", "dpt.midas_net.MidasNet_large.eval", "dpt.midas_net.MidasNet_large.to", "glob.glob", "len", "os.makedirs", "print", "enumerate", "print", "dpt.models.DPTDepthModel", "dpt.transforms.NormalizeImage", "dpt.midas_net.MidasNet_large.to", "dpt.midas_net.MidasNet_large.half", "os.path.join", "os.path.isdir", "print", "util.io.read_image", "os.path.join", "util.io.write_depth", "torch.cuda.is_available", "dpt.models.DPTDepthModel", "dpt.transforms.NormalizeImage", "dpt.transforms.Resize", "dpt.transforms.PrepareForNet", "torch.device", "torchvision.transforms.Compose.", "torch.no_grad", "torch.from_numpy().to().unsqueeze", "dpt.midas_net.MidasNet_large.forward", "torch.nn.functional.interpolate().squeeze().cpu().numpy", "dpt.models.DPTDepthModel", "dpt.transforms.NormalizeImage", "sample.half.to", "sample.half.half", "os.path.splitext", "dpt.models.DPTDepthModel", "dpt.transforms.NormalizeImage", "torch.from_numpy().to", "torch.device", "torch.nn.functional.interpolate().squeeze().cpu", "os.path.basename", "dpt.midas_net.MidasNet_large", "dpt.transforms.NormalizeImage", "torch.from_numpy", "torch.nn.functional.interpolate().squeeze", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate().squeeze().cpu().numpy.unsqueeze"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.util.io.read_image", "home.repos.pwc.inspect_result.isl-org_DPT.util.io.write_depth", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.forward"], ["def", "run", "(", "input_path", ",", "output_path", ",", "model_path", ",", "model_type", "=", "\"dpt_hybrid\"", ",", "optimize", "=", "True", ")", ":", "\n", "    ", "\"\"\"Run MonoDepthNN to compute depth maps.\n\n    Args:\n        input_path (str): path to input folder\n        output_path (str): path to output folder\n        model_path (str): path to saved model\n    \"\"\"", "\n", "print", "(", "\"initialize\"", ")", "\n", "\n", "# select device", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "print", "(", "\"device: %s\"", "%", "device", ")", "\n", "\n", "# load network", "\n", "if", "model_type", "==", "\"dpt_large\"", ":", "# DPT-Large", "\n", "        ", "net_w", "=", "net_h", "=", "384", "\n", "model", "=", "DPTDepthModel", "(", "\n", "path", "=", "model_path", ",", "\n", "backbone", "=", "\"vitl16_384\"", ",", "\n", "non_negative", "=", "True", ",", "\n", "enable_attention_hooks", "=", "False", ",", "\n", ")", "\n", "normalization", "=", "NormalizeImage", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "", "elif", "model_type", "==", "\"dpt_hybrid\"", ":", "# DPT-Hybrid", "\n", "        ", "net_w", "=", "net_h", "=", "384", "\n", "model", "=", "DPTDepthModel", "(", "\n", "path", "=", "model_path", ",", "\n", "backbone", "=", "\"vitb_rn50_384\"", ",", "\n", "non_negative", "=", "True", ",", "\n", "enable_attention_hooks", "=", "False", ",", "\n", ")", "\n", "normalization", "=", "NormalizeImage", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "", "elif", "model_type", "==", "\"dpt_hybrid_kitti\"", ":", "\n", "        ", "net_w", "=", "1216", "\n", "net_h", "=", "352", "\n", "\n", "model", "=", "DPTDepthModel", "(", "\n", "path", "=", "model_path", ",", "\n", "scale", "=", "0.00006016", ",", "\n", "shift", "=", "0.00579", ",", "\n", "invert", "=", "True", ",", "\n", "backbone", "=", "\"vitb_rn50_384\"", ",", "\n", "non_negative", "=", "True", ",", "\n", "enable_attention_hooks", "=", "False", ",", "\n", ")", "\n", "\n", "normalization", "=", "NormalizeImage", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "", "elif", "model_type", "==", "\"dpt_hybrid_nyu\"", ":", "\n", "        ", "net_w", "=", "640", "\n", "net_h", "=", "480", "\n", "\n", "model", "=", "DPTDepthModel", "(", "\n", "path", "=", "model_path", ",", "\n", "scale", "=", "0.000305", ",", "\n", "shift", "=", "0.1378", ",", "\n", "invert", "=", "True", ",", "\n", "backbone", "=", "\"vitb_rn50_384\"", ",", "\n", "non_negative", "=", "True", ",", "\n", "enable_attention_hooks", "=", "False", ",", "\n", ")", "\n", "\n", "normalization", "=", "NormalizeImage", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", "\n", "", "elif", "model_type", "==", "\"midas_v21\"", ":", "# Convolutional model", "\n", "        ", "net_w", "=", "net_h", "=", "384", "\n", "\n", "model", "=", "MidasNet_large", "(", "model_path", ",", "non_negative", "=", "True", ")", "\n", "normalization", "=", "NormalizeImage", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "assert", "(", "\n", "False", "\n", ")", ",", "f\"model_type '{model_type}' not implemented, use: --model_type [dpt_large|dpt_hybrid|dpt_hybrid_kitti|dpt_hybrid_nyu|midas_v21]\"", "\n", "\n", "", "transform", "=", "Compose", "(", "\n", "[", "\n", "Resize", "(", "\n", "net_w", ",", "\n", "net_h", ",", "\n", "resize_target", "=", "None", ",", "\n", "keep_aspect_ratio", "=", "True", ",", "\n", "ensure_multiple_of", "=", "32", ",", "\n", "resize_method", "=", "\"minimal\"", ",", "\n", "image_interpolation_method", "=", "cv2", ".", "INTER_CUBIC", ",", "\n", ")", ",", "\n", "normalization", ",", "\n", "PrepareForNet", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "optimize", "==", "True", "and", "device", "==", "torch", ".", "device", "(", "\"cuda\"", ")", ":", "\n", "        ", "model", "=", "model", ".", "to", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "model", "=", "model", ".", "half", "(", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "# get input", "\n", "img_names", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "input_path", ",", "\"*\"", ")", ")", "\n", "num_images", "=", "len", "(", "img_names", ")", "\n", "\n", "# create output folder", "\n", "os", ".", "makedirs", "(", "output_path", ",", "exist_ok", "=", "True", ")", "\n", "\n", "print", "(", "\"start processing\"", ")", "\n", "for", "ind", ",", "img_name", "in", "enumerate", "(", "img_names", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "img_name", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "print", "(", "\"  processing {} ({}/{})\"", ".", "format", "(", "img_name", ",", "ind", "+", "1", ",", "num_images", ")", ")", "\n", "# input", "\n", "\n", "img", "=", "util", ".", "io", ".", "read_image", "(", "img_name", ")", "\n", "\n", "if", "args", ".", "kitti_crop", "is", "True", ":", "\n", "            ", "height", ",", "width", ",", "_", "=", "img", ".", "shape", "\n", "top", "=", "height", "-", "352", "\n", "left", "=", "(", "width", "-", "1216", ")", "//", "2", "\n", "img", "=", "img", "[", "top", ":", "top", "+", "352", ",", "left", ":", "left", "+", "1216", ",", ":", "]", "\n", "\n", "", "img_input", "=", "transform", "(", "{", "\"image\"", ":", "img", "}", ")", "[", "\"image\"", "]", "\n", "\n", "# compute", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sample", "=", "torch", ".", "from_numpy", "(", "img_input", ")", ".", "to", "(", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "if", "optimize", "==", "True", "and", "device", "==", "torch", ".", "device", "(", "\"cuda\"", ")", ":", "\n", "                ", "sample", "=", "sample", ".", "to", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "sample", "=", "sample", ".", "half", "(", ")", "\n", "\n", "", "prediction", "=", "model", ".", "forward", "(", "sample", ")", "\n", "prediction", "=", "(", "\n", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "prediction", ".", "unsqueeze", "(", "1", ")", ",", "\n", "size", "=", "img", ".", "shape", "[", ":", "2", "]", ",", "\n", "mode", "=", "\"bicubic\"", ",", "\n", "align_corners", "=", "False", ",", "\n", ")", "\n", ".", "squeeze", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ".", "numpy", "(", ")", "\n", ")", "\n", "\n", "if", "model_type", "==", "\"dpt_hybrid_kitti\"", ":", "\n", "                ", "prediction", "*=", "256", "\n", "\n", "", "if", "model_type", "==", "\"dpt_hybrid_nyu\"", ":", "\n", "                ", "prediction", "*=", "1000.0", "\n", "\n", "", "", "filename", "=", "os", ".", "path", ".", "join", "(", "\n", "output_path", ",", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_name", ")", ")", "[", "0", "]", "\n", ")", "\n", "util", ".", "io", ".", "write_depth", "(", "filename", ",", "prediction", ",", "bits", "=", "2", ",", "absolute_depth", "=", "args", ".", "absolute_depth", ")", "\n", "\n", "", "print", "(", "\"finished\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.Resize.__init__": [[51, 92], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "width", ",", "\n", "height", ",", "\n", "resize_target", "=", "True", ",", "\n", "keep_aspect_ratio", "=", "False", ",", "\n", "ensure_multiple_of", "=", "1", ",", "\n", "resize_method", "=", "\"lower_bound\"", ",", "\n", "image_interpolation_method", "=", "cv2", ".", "INTER_AREA", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Init.\n\n        Args:\n            width (int): desired output width\n            height (int): desired output height\n            resize_target (bool, optional):\n                True: Resize the full sample (image, mask, target).\n                False: Resize image only.\n                Defaults to True.\n            keep_aspect_ratio (bool, optional):\n                True: Keep the aspect ratio of the input sample.\n                Output sample might not have the given width and height, and\n                resize behaviour depends on the parameter 'resize_method'.\n                Defaults to False.\n            ensure_multiple_of (int, optional):\n                Output width and height is constrained to be multiple of this parameter.\n                Defaults to 1.\n            resize_method (str, optional):\n                \"lower_bound\": Output will be at least as large as the given size.\n                \"upper_bound\": Output will be at max as large as the given size. (Output size might be smaller than given size.)\n                \"minimal\": Scale as least as possible.  (Output size might be smaller than given size.)\n                Defaults to \"lower_bound\".\n        \"\"\"", "\n", "self", ".", "__width", "=", "width", "\n", "self", ".", "__height", "=", "height", "\n", "\n", "self", ".", "__resize_target", "=", "resize_target", "\n", "self", ".", "__keep_aspect_ratio", "=", "keep_aspect_ratio", "\n", "self", ".", "__multiple_of", "=", "ensure_multiple_of", "\n", "self", ".", "__resize_method", "=", "resize_method", "\n", "self", ".", "__image_interpolation_method", "=", "image_interpolation_method", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.Resize.constrain_to_multiple_of": [[93, 103], ["numpy.round", "numpy.floor", "numpy.ceil"], "methods", ["None"], ["", "def", "constrain_to_multiple_of", "(", "self", ",", "x", ",", "min_val", "=", "0", ",", "max_val", "=", "None", ")", ":", "\n", "        ", "y", "=", "(", "np", ".", "round", "(", "x", "/", "self", ".", "__multiple_of", ")", "*", "self", ".", "__multiple_of", ")", ".", "astype", "(", "int", ")", "\n", "\n", "if", "max_val", "is", "not", "None", "and", "y", ">", "max_val", ":", "\n", "            ", "y", "=", "(", "np", ".", "floor", "(", "x", "/", "self", ".", "__multiple_of", ")", "*", "self", ".", "__multiple_of", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "if", "y", "<", "min_val", ":", "\n", "            ", "y", "=", "(", "np", ".", "ceil", "(", "x", "/", "self", ".", "__multiple_of", ")", "*", "self", ".", "__multiple_of", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.Resize.get_size": [[104, 160], ["transforms.Resize.constrain_to_multiple_of", "transforms.Resize.constrain_to_multiple_of", "transforms.Resize.constrain_to_multiple_of", "transforms.Resize.constrain_to_multiple_of", "transforms.Resize.constrain_to_multiple_of", "transforms.Resize.constrain_to_multiple_of", "ValueError", "ValueError", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.Resize.constrain_to_multiple_of", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.Resize.constrain_to_multiple_of", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.Resize.constrain_to_multiple_of", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.Resize.constrain_to_multiple_of", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.Resize.constrain_to_multiple_of", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.Resize.constrain_to_multiple_of"], ["", "def", "get_size", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "# determine new height and width", "\n", "        ", "scale_height", "=", "self", ".", "__height", "/", "height", "\n", "scale_width", "=", "self", ".", "__width", "/", "width", "\n", "\n", "if", "self", ".", "__keep_aspect_ratio", ":", "\n", "            ", "if", "self", ".", "__resize_method", "==", "\"lower_bound\"", ":", "\n", "# scale such that output size is lower bound", "\n", "                ", "if", "scale_width", ">", "scale_height", ":", "\n", "# fit width", "\n", "                    ", "scale_height", "=", "scale_width", "\n", "", "else", ":", "\n", "# fit height", "\n", "                    ", "scale_width", "=", "scale_height", "\n", "", "", "elif", "self", ".", "__resize_method", "==", "\"upper_bound\"", ":", "\n", "# scale such that output size is upper bound", "\n", "                ", "if", "scale_width", "<", "scale_height", ":", "\n", "# fit width", "\n", "                    ", "scale_height", "=", "scale_width", "\n", "", "else", ":", "\n", "# fit height", "\n", "                    ", "scale_width", "=", "scale_height", "\n", "", "", "elif", "self", ".", "__resize_method", "==", "\"minimal\"", ":", "\n", "# scale as least as possbile", "\n", "                ", "if", "abs", "(", "1", "-", "scale_width", ")", "<", "abs", "(", "1", "-", "scale_height", ")", ":", "\n", "# fit width", "\n", "                    ", "scale_height", "=", "scale_width", "\n", "", "else", ":", "\n", "# fit height", "\n", "                    ", "scale_width", "=", "scale_height", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "f\"resize_method {self.__resize_method} not implemented\"", "\n", ")", "\n", "\n", "", "", "if", "self", ".", "__resize_method", "==", "\"lower_bound\"", ":", "\n", "            ", "new_height", "=", "self", ".", "constrain_to_multiple_of", "(", "\n", "scale_height", "*", "height", ",", "min_val", "=", "self", ".", "__height", "\n", ")", "\n", "new_width", "=", "self", ".", "constrain_to_multiple_of", "(", "\n", "scale_width", "*", "width", ",", "min_val", "=", "self", ".", "__width", "\n", ")", "\n", "", "elif", "self", ".", "__resize_method", "==", "\"upper_bound\"", ":", "\n", "            ", "new_height", "=", "self", ".", "constrain_to_multiple_of", "(", "\n", "scale_height", "*", "height", ",", "max_val", "=", "self", ".", "__height", "\n", ")", "\n", "new_width", "=", "self", ".", "constrain_to_multiple_of", "(", "\n", "scale_width", "*", "width", ",", "max_val", "=", "self", ".", "__width", "\n", ")", "\n", "", "elif", "self", ".", "__resize_method", "==", "\"minimal\"", ":", "\n", "            ", "new_height", "=", "self", ".", "constrain_to_multiple_of", "(", "scale_height", "*", "height", ")", "\n", "new_width", "=", "self", ".", "constrain_to_multiple_of", "(", "scale_width", "*", "width", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"resize_method {self.__resize_method} not implemented\"", ")", "\n", "\n", "", "return", "(", "new_width", ",", "new_height", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.Resize.__call__": [[161, 194], ["transforms.Resize.get_size", "cv2.resize", "cv2.resize", "sample[].astype", "cv2.resize", "cv2.resize", "sample[].astype"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.Resize.get_size"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "width", ",", "height", "=", "self", ".", "get_size", "(", "\n", "sample", "[", "\"image\"", "]", ".", "shape", "[", "1", "]", ",", "sample", "[", "\"image\"", "]", ".", "shape", "[", "0", "]", "\n", ")", "\n", "\n", "# resize sample", "\n", "sample", "[", "\"image\"", "]", "=", "cv2", ".", "resize", "(", "\n", "sample", "[", "\"image\"", "]", ",", "\n", "(", "width", ",", "height", ")", ",", "\n", "interpolation", "=", "self", ".", "__image_interpolation_method", ",", "\n", ")", "\n", "\n", "if", "self", ".", "__resize_target", ":", "\n", "            ", "if", "\"disparity\"", "in", "sample", ":", "\n", "                ", "sample", "[", "\"disparity\"", "]", "=", "cv2", ".", "resize", "(", "\n", "sample", "[", "\"disparity\"", "]", ",", "\n", "(", "width", ",", "height", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ",", "\n", ")", "\n", "\n", "", "if", "\"depth\"", "in", "sample", ":", "\n", "                ", "sample", "[", "\"depth\"", "]", "=", "cv2", ".", "resize", "(", "\n", "sample", "[", "\"depth\"", "]", ",", "(", "width", ",", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", "\n", ")", "\n", "\n", "", "sample", "[", "\"mask\"", "]", "=", "cv2", ".", "resize", "(", "\n", "sample", "[", "\"mask\"", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "(", "width", ",", "height", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ",", "\n", ")", "\n", "sample", "[", "\"mask\"", "]", "=", "sample", "[", "\"mask\"", "]", ".", "astype", "(", "bool", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.NormalizeImage.__init__": [[199, 202], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "__mean", "=", "mean", "\n", "self", ".", "__std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.NormalizeImage.__call__": [[203, 207], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "[", "\"image\"", "]", "=", "(", "sample", "[", "\"image\"", "]", "-", "self", ".", "__mean", ")", "/", "self", ".", "__std", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.PrepareForNet.__init__": [[212, 214], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.PrepareForNet.__call__": [[215, 232], ["numpy.transpose", "numpy.ascontiguousarray().astype", "sample[].astype", "numpy.ascontiguousarray", "sample[].astype", "numpy.ascontiguousarray", "sample[].astype", "numpy.ascontiguousarray", "numpy.ascontiguousarray"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "image", "=", "np", ".", "transpose", "(", "sample", "[", "\"image\"", "]", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "sample", "[", "\"image\"", "]", "=", "np", ".", "ascontiguousarray", "(", "image", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "\"mask\"", "in", "sample", ":", "\n", "            ", "sample", "[", "\"mask\"", "]", "=", "sample", "[", "\"mask\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sample", "[", "\"mask\"", "]", "=", "np", ".", "ascontiguousarray", "(", "sample", "[", "\"mask\"", "]", ")", "\n", "\n", "", "if", "\"disparity\"", "in", "sample", ":", "\n", "            ", "disparity", "=", "sample", "[", "\"disparity\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sample", "[", "\"disparity\"", "]", "=", "np", ".", "ascontiguousarray", "(", "disparity", ")", "\n", "\n", "", "if", "\"depth\"", "in", "sample", ":", "\n", "            ", "depth", "=", "sample", "[", "\"depth\"", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "sample", "[", "\"depth\"", "]", "=", "np", ".", "ascontiguousarray", "(", "depth", ")", "\n", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.transforms.apply_min_size": [[6, 46], ["list", "max", "math.ceil", "math.ceil", "cv2.resize", "cv2.resize", "cv2.resize", "sample[].astype", "tuple", "tuple", "tuple", "sample[].astype", "tuple"], "function", ["None"], ["def", "apply_min_size", "(", "sample", ",", "size", ",", "image_interpolation_method", "=", "cv2", ".", "INTER_AREA", ")", ":", "\n", "    ", "\"\"\"Rezise the sample to ensure the given size. Keeps aspect ratio.\n\n    Args:\n        sample (dict): sample\n        size (tuple): image size\n\n    Returns:\n        tuple: new size\n    \"\"\"", "\n", "shape", "=", "list", "(", "sample", "[", "\"disparity\"", "]", ".", "shape", ")", "\n", "\n", "if", "shape", "[", "0", "]", ">=", "size", "[", "0", "]", "and", "shape", "[", "1", "]", ">=", "size", "[", "1", "]", ":", "\n", "        ", "return", "sample", "\n", "\n", "", "scale", "=", "[", "0", ",", "0", "]", "\n", "scale", "[", "0", "]", "=", "size", "[", "0", "]", "/", "shape", "[", "0", "]", "\n", "scale", "[", "1", "]", "=", "size", "[", "1", "]", "/", "shape", "[", "1", "]", "\n", "\n", "scale", "=", "max", "(", "scale", ")", "\n", "\n", "shape", "[", "0", "]", "=", "math", ".", "ceil", "(", "scale", "*", "shape", "[", "0", "]", ")", "\n", "shape", "[", "1", "]", "=", "math", ".", "ceil", "(", "scale", "*", "shape", "[", "1", "]", ")", "\n", "\n", "# resize", "\n", "sample", "[", "\"image\"", "]", "=", "cv2", ".", "resize", "(", "\n", "sample", "[", "\"image\"", "]", ",", "tuple", "(", "shape", "[", ":", ":", "-", "1", "]", ")", ",", "interpolation", "=", "image_interpolation_method", "\n", ")", "\n", "\n", "sample", "[", "\"disparity\"", "]", "=", "cv2", ".", "resize", "(", "\n", "sample", "[", "\"disparity\"", "]", ",", "tuple", "(", "shape", "[", ":", ":", "-", "1", "]", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", "\n", ")", "\n", "sample", "[", "\"mask\"", "]", "=", "cv2", ".", "resize", "(", "\n", "sample", "[", "\"mask\"", "]", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "tuple", "(", "shape", "[", ":", ":", "-", "1", "]", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ",", "\n", ")", "\n", "sample", "[", "\"mask\"", "]", "=", "sample", "[", "\"mask\"", "]", ".", "astype", "(", "bool", ")", "\n", "\n", "return", "tuple", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.models.DPT.__init__": [[27, 67], ["base_model.BaseModel.__init__", "blocks._make_encoder", "models._make_fusion_block", "models._make_fusion_block", "models._make_fusion_block", "models._make_fusion_block"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks._make_encoder", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.models._make_fusion_block", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.models._make_fusion_block", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.models._make_fusion_block", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.models._make_fusion_block"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "head", ",", "\n", "features", "=", "256", ",", "\n", "backbone", "=", "\"vitb_rn50_384\"", ",", "\n", "readout", "=", "\"project\"", ",", "\n", "channels_last", "=", "False", ",", "\n", "use_bn", "=", "False", ",", "\n", "enable_attention_hooks", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "DPT", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "channels_last", "=", "channels_last", "\n", "\n", "hooks", "=", "{", "\n", "\"vitb_rn50_384\"", ":", "[", "0", ",", "1", ",", "8", ",", "11", "]", ",", "\n", "\"vitb16_384\"", ":", "[", "2", ",", "5", ",", "8", ",", "11", "]", ",", "\n", "\"vitl16_384\"", ":", "[", "5", ",", "11", ",", "17", ",", "23", "]", ",", "\n", "}", "\n", "\n", "# Instantiate backbone and reassemble blocks", "\n", "self", ".", "pretrained", ",", "self", ".", "scratch", "=", "_make_encoder", "(", "\n", "backbone", ",", "\n", "features", ",", "\n", "False", ",", "# Set to true of you want to train from scratch, uses ImageNet weights", "\n", "groups", "=", "1", ",", "\n", "expand", "=", "False", ",", "\n", "exportable", "=", "False", ",", "\n", "hooks", "=", "hooks", "[", "backbone", "]", ",", "\n", "use_readout", "=", "readout", ",", "\n", "enable_attention_hooks", "=", "enable_attention_hooks", ",", "\n", ")", "\n", "\n", "self", ".", "scratch", ".", "refinenet1", "=", "_make_fusion_block", "(", "features", ",", "use_bn", ")", "\n", "self", ".", "scratch", ".", "refinenet2", "=", "_make_fusion_block", "(", "features", ",", "use_bn", ")", "\n", "self", ".", "scratch", ".", "refinenet3", "=", "_make_fusion_block", "(", "features", ",", "use_bn", ")", "\n", "self", ".", "scratch", ".", "refinenet4", "=", "_make_fusion_block", "(", "features", ",", "use_bn", ")", "\n", "\n", "self", ".", "scratch", ".", "output_conv", "=", "head", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.models.DPT.forward": [[68, 87], ["blocks.forward_vit", "models.DPT.scratch.layer1_rn", "models.DPT.scratch.layer2_rn", "models.DPT.scratch.layer3_rn", "models.DPT.scratch.layer4_rn", "models.DPT.scratch.refinenet4", "models.DPT.scratch.refinenet3", "models.DPT.scratch.refinenet2", "models.DPT.scratch.refinenet1", "models.DPT.scratch.output_conv", "x.contiguous"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.forward_vit"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "channels_last", "==", "True", ":", "\n", "            ", "x", ".", "contiguous", "(", "memory_format", "=", "torch", ".", "channels_last", ")", "\n", "\n", "", "layer_1", ",", "layer_2", ",", "layer_3", ",", "layer_4", "=", "forward_vit", "(", "self", ".", "pretrained", ",", "x", ")", "\n", "\n", "layer_1_rn", "=", "self", ".", "scratch", ".", "layer1_rn", "(", "layer_1", ")", "\n", "layer_2_rn", "=", "self", ".", "scratch", ".", "layer2_rn", "(", "layer_2", ")", "\n", "layer_3_rn", "=", "self", ".", "scratch", ".", "layer3_rn", "(", "layer_3", ")", "\n", "layer_4_rn", "=", "self", ".", "scratch", ".", "layer4_rn", "(", "layer_4", ")", "\n", "\n", "path_4", "=", "self", ".", "scratch", ".", "refinenet4", "(", "layer_4_rn", ")", "\n", "path_3", "=", "self", ".", "scratch", ".", "refinenet3", "(", "path_4", ",", "layer_3_rn", ")", "\n", "path_2", "=", "self", ".", "scratch", ".", "refinenet2", "(", "path_3", ",", "layer_2_rn", ")", "\n", "path_1", "=", "self", ".", "scratch", ".", "refinenet1", "(", "path_2", ",", "layer_1_rn", ")", "\n", "\n", "out", "=", "self", ".", "scratch", ".", "output_conv", "(", "path_1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.models.DPTDepthModel.__init__": [[90, 113], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "models.DPT.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "blocks.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Identity", "torch.Identity", "torch.Identity", "models.DPTDepthModel.load", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Identity", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.base_model.BaseModel.load"], ["    ", "def", "__init__", "(", "\n", "self", ",", "path", "=", "None", ",", "non_negative", "=", "True", ",", "scale", "=", "1.0", ",", "shift", "=", "0.0", ",", "invert", "=", "False", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "features", "=", "kwargs", "[", "\"features\"", "]", "if", "\"features\"", "in", "kwargs", "else", "256", "\n", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "shift", "=", "shift", "\n", "self", ".", "invert", "=", "invert", "\n", "\n", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "features", ",", "features", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "Interpolate", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "features", "//", "2", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "if", "non_negative", "else", "nn", ".", "Identity", "(", ")", ",", "\n", "nn", ".", "Identity", "(", ")", ",", "\n", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "head", ",", "**", "kwargs", ")", "\n", "\n", "if", "path", "is", "not", "None", ":", "\n", "            ", "self", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.models.DPTDepthModel.forward": [[114, 124], ["super().forward().squeeze", "models.DPT.forward"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.forward"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "inv_depth", "=", "super", "(", ")", ".", "forward", "(", "x", ")", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "invert", ":", "\n", "            ", "depth", "=", "self", ".", "scale", "*", "inv_depth", "+", "self", ".", "shift", "\n", "depth", "[", "depth", "<", "1e-8", "]", "=", "1e-8", "\n", "depth", "=", "1.0", "/", "depth", "\n", "return", "depth", "\n", "", "else", ":", "\n", "            ", "return", "inv_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.models.DPTSegmentationModel.__init__": [[127, 154], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "models.DPT.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "blocks.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "models.DPTSegmentationModel.load"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.base_model.BaseModel.load"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "path", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "features", "=", "kwargs", "[", "\"features\"", "]", "if", "\"features\"", "in", "kwargs", "else", "256", "\n", "\n", "kwargs", "[", "\"use_bn\"", "]", "=", "True", "\n", "\n", "head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "features", ",", "features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "features", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ",", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "features", ",", "num_classes", ",", "kernel_size", "=", "1", ")", ",", "\n", "Interpolate", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", ",", "\n", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "head", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "auxlayer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "features", ",", "features", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "features", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.1", ",", "False", ")", ",", "\n", "nn", ".", "Conv2d", "(", "features", ",", "num_classes", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "\n", "\n", "if", "path", "is", "not", "None", ":", "\n", "            ", "self", ".", "load", "(", "path", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.models._make_fusion_block": [[15, 23], ["blocks.FeatureFusionBlock_custom", "torch.ReLU"], "function", ["None"], ["def", "_make_fusion_block", "(", "features", ",", "use_bn", ")", ":", "\n", "    ", "return", "FeatureFusionBlock_custom", "(", "\n", "features", ",", "\n", "nn", ".", "ReLU", "(", "False", ")", ",", "\n", "deconv", "=", "False", ",", "\n", "bn", "=", "use_bn", ",", "\n", "expand", "=", "False", ",", "\n", "align_corners", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.midas_net.MidasNet_large.__init__": [[15, 49], ["print", "base_model.BaseModel.__init__", "blocks._make_encoder", "blocks.FeatureFusionBlock", "blocks.FeatureFusionBlock", "blocks.FeatureFusionBlock", "blocks.FeatureFusionBlock", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "blocks.Interpolate", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "midas_net.MidasNet_large.load", "torch.ReLU", "torch.ReLU", "torch.Identity", "torch.Identity"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks._make_encoder", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.base_model.BaseModel.load"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ",", "features", "=", "256", ",", "non_negative", "=", "True", ")", ":", "\n", "        ", "\"\"\"Init.\n\n        Args:\n            path (str, optional): Path to saved model. Defaults to None.\n            features (int, optional): Number of features. Defaults to 256.\n            backbone (str, optional): Backbone network for encoder. Defaults to resnet50\n        \"\"\"", "\n", "print", "(", "\"Loading weights: \"", ",", "path", ")", "\n", "\n", "super", "(", "MidasNet_large", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "use_pretrained", "=", "False", "if", "path", "is", "None", "else", "True", "\n", "\n", "self", ".", "pretrained", ",", "self", ".", "scratch", "=", "_make_encoder", "(", "\n", "backbone", "=", "\"resnext101_wsl\"", ",", "features", "=", "features", ",", "use_pretrained", "=", "use_pretrained", "\n", ")", "\n", "\n", "self", ".", "scratch", ".", "refinenet4", "=", "FeatureFusionBlock", "(", "features", ")", "\n", "self", ".", "scratch", ".", "refinenet3", "=", "FeatureFusionBlock", "(", "features", ")", "\n", "self", ".", "scratch", ".", "refinenet2", "=", "FeatureFusionBlock", "(", "features", ")", "\n", "self", ".", "scratch", ".", "refinenet1", "=", "FeatureFusionBlock", "(", "features", ")", "\n", "\n", "self", ".", "scratch", ".", "output_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "features", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "Interpolate", "(", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", "if", "non_negative", "else", "nn", ".", "Identity", "(", ")", ",", "\n", ")", "\n", "\n", "if", "path", ":", "\n", "            ", "self", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.midas_net.MidasNet_large.forward": [[50, 78], ["midas_net.MidasNet_large.pretrained.layer1", "midas_net.MidasNet_large.pretrained.layer2", "midas_net.MidasNet_large.pretrained.layer3", "midas_net.MidasNet_large.pretrained.layer4", "midas_net.MidasNet_large.scratch.layer1_rn", "midas_net.MidasNet_large.scratch.layer2_rn", "midas_net.MidasNet_large.scratch.layer3_rn", "midas_net.MidasNet_large.scratch.layer4_rn", "midas_net.MidasNet_large.scratch.refinenet4", "midas_net.MidasNet_large.scratch.refinenet3", "midas_net.MidasNet_large.scratch.refinenet2", "midas_net.MidasNet_large.scratch.refinenet1", "midas_net.MidasNet_large.scratch.output_conv", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward pass.\n\n        Args:\n            x (tensor): input data (image)\n\n        Returns:\n            tensor: depth\n        \"\"\"", "\n", "\n", "layer_1", "=", "self", ".", "pretrained", ".", "layer1", "(", "x", ")", "\n", "layer_2", "=", "self", ".", "pretrained", ".", "layer2", "(", "layer_1", ")", "\n", "layer_3", "=", "self", ".", "pretrained", ".", "layer3", "(", "layer_2", ")", "\n", "layer_4", "=", "self", ".", "pretrained", ".", "layer4", "(", "layer_3", ")", "\n", "\n", "layer_1_rn", "=", "self", ".", "scratch", ".", "layer1_rn", "(", "layer_1", ")", "\n", "layer_2_rn", "=", "self", ".", "scratch", ".", "layer2_rn", "(", "layer_2", ")", "\n", "layer_3_rn", "=", "self", ".", "scratch", ".", "layer3_rn", "(", "layer_3", ")", "\n", "layer_4_rn", "=", "self", ".", "scratch", ".", "layer4_rn", "(", "layer_4", ")", "\n", "\n", "path_4", "=", "self", ".", "scratch", ".", "refinenet4", "(", "layer_4_rn", ")", "\n", "path_3", "=", "self", ".", "scratch", ".", "refinenet3", "(", "path_4", ",", "layer_3_rn", ")", "\n", "path_2", "=", "self", ".", "scratch", ".", "refinenet2", "(", "path_3", ",", "layer_2_rn", ")", "\n", "path_1", "=", "self", ".", "scratch", ".", "refinenet1", "(", "path_2", ",", "layer_1_rn", ")", "\n", "\n", "out", "=", "self", ".", "scratch", ".", "output_conv", "(", "path_1", ")", "\n", "\n", "return", "torch", ".", "squeeze", "(", "out", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.Slice.__init__": [[58, 61], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__"], ["    ", "def", "__init__", "(", "self", ",", "start_index", "=", "1", ")", ":", "\n", "        ", "super", "(", "Slice", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_index", "=", "start_index", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.Slice.forward": [[62, 64], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ",", "self", ".", "start_index", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.AddReadout.__init__": [[67, 70], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__"], ["    ", "def", "__init__", "(", "self", ",", "start_index", "=", "1", ")", ":", "\n", "        ", "super", "(", "AddReadout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_index", "=", "start_index", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.AddReadout.forward": [[71, 77], ["readout.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "start_index", "==", "2", ":", "\n", "            ", "readout", "=", "(", "x", "[", ":", ",", "0", "]", "+", "x", "[", ":", ",", "1", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "            ", "readout", "=", "x", "[", ":", ",", "0", "]", "\n", "", "return", "x", "[", ":", ",", "self", ".", "start_index", ":", "]", "+", "readout", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.ProjectReadout.__init__": [[80, 85], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "start_index", "=", "1", ")", ":", "\n", "        ", "super", "(", "ProjectReadout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_index", "=", "start_index", "\n", "\n", "self", ".", "project", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "2", "*", "in_features", ",", "in_features", ")", ",", "nn", ".", "GELU", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.ProjectReadout.forward": [[86, 91], ["x[].unsqueeze().expand_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vit.ProjectReadout.project", "x[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "readout", "=", "x", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "x", "[", ":", ",", "self", ".", "start_index", ":", "]", ")", "\n", "features", "=", "torch", ".", "cat", "(", "(", "x", "[", ":", ",", "self", ".", "start_index", ":", "]", ",", "readout", ")", ",", "-", "1", ")", "\n", "\n", "return", "self", ".", "project", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.Transpose.__init__": [[94, 98], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim0", ",", "dim1", ")", ":", "\n", "        ", "super", "(", "Transpose", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim0", "=", "dim0", "\n", "self", ".", "dim1", "=", "dim1", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.Transpose.forward": [[99, 102], ["x.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "transpose", "(", "self", ".", "dim0", ",", "self", ".", "dim1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_activation": [[12, 17], ["None"], "function", ["None"], ["def", "get_activation", "(", "name", ")", ":", "\n", "    ", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "        ", "activations", "[", "name", "]", "=", "output", "\n", "\n", "", "return", "hook", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_attention": [[22, 43], ["module.qkv().reshape().permute", "attn.softmax.softmax", "module.qkv().reshape", "k.transpose", "module.qkv"], "function", ["None"], ["def", "get_attention", "(", "name", ")", ":", "\n", "    ", "def", "hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "        ", "x", "=", "input", "[", "0", "]", "\n", "B", ",", "N", ",", "C", "=", "x", ".", "shape", "\n", "qkv", "=", "(", "\n", "module", ".", "qkv", "(", "x", ")", "\n", ".", "reshape", "(", "B", ",", "N", ",", "3", ",", "module", ".", "num_heads", ",", "C", "//", "module", ".", "num_heads", ")", "\n", ".", "permute", "(", "2", ",", "0", ",", "3", ",", "1", ",", "4", ")", "\n", ")", "\n", "q", ",", "k", ",", "v", "=", "(", "\n", "qkv", "[", "0", "]", ",", "\n", "qkv", "[", "1", "]", ",", "\n", "qkv", "[", "2", "]", ",", "\n", ")", "# make torchscript happy (cannot use tensor as tuple)", "\n", "\n", "attn", "=", "(", "q", "@", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "*", "module", ".", "scale", "\n", "\n", "attn", "=", "attn", ".", "softmax", "(", "dim", "=", "-", "1", ")", "# [:,:,1,1:]", "\n", "attention", "[", "name", "]", "=", "attn", "\n", "\n", "", "return", "hook", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_mean_attention_map": [[45, 55], ["torch.nn.functional.interpolate().squeeze.unflatten().float", "torch.nn.functional.interpolate().squeeze", "torch.nn.functional.interpolate().squeeze", "torch.nn.functional.interpolate().squeeze", "torch.mean", "torch.mean", "torch.mean", "torch.nn.functional.interpolate().squeeze.unflatten", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.Size", "torch.Size", "torch.Size"], "function", ["None"], ["", "def", "get_mean_attention_map", "(", "attn", ",", "token", ",", "shape", ")", ":", "\n", "    ", "attn", "=", "attn", "[", ":", ",", ":", ",", "token", ",", "1", ":", "]", "\n", "attn", "=", "attn", ".", "unflatten", "(", "2", ",", "torch", ".", "Size", "(", "[", "shape", "[", "2", "]", "//", "16", ",", "shape", "[", "3", "]", "//", "16", "]", ")", ")", ".", "float", "(", ")", "\n", "attn", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "\n", "attn", ",", "size", "=", "shape", "[", "2", ":", "]", ",", "mode", "=", "\"bicubic\"", ",", "align_corners", "=", "False", "\n", ")", ".", "squeeze", "(", "0", ")", "\n", "\n", "all_attn", "=", "torch", ".", "mean", "(", "attn", ",", "0", ")", "\n", "\n", "return", "all_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.forward_vit": [[104, 146], ["pretrained.model.forward_flex", "torch.Sequential", "torch.Unflatten", "nn.Sequential.", "nn.Sequential.", "nn.Sequential.", "nn.Sequential.", "torch.Size", "torch.Size", "torch.Size", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.forward_flex"], ["", "", "def", "forward_vit", "(", "pretrained", ",", "x", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "\n", "glob", "=", "pretrained", ".", "model", ".", "forward_flex", "(", "x", ")", "\n", "\n", "layer_1", "=", "pretrained", ".", "activations", "[", "\"1\"", "]", "\n", "layer_2", "=", "pretrained", ".", "activations", "[", "\"2\"", "]", "\n", "layer_3", "=", "pretrained", ".", "activations", "[", "\"3\"", "]", "\n", "layer_4", "=", "pretrained", ".", "activations", "[", "\"4\"", "]", "\n", "\n", "layer_1", "=", "pretrained", ".", "act_postprocess1", "[", "0", ":", "2", "]", "(", "layer_1", ")", "\n", "layer_2", "=", "pretrained", ".", "act_postprocess2", "[", "0", ":", "2", "]", "(", "layer_2", ")", "\n", "layer_3", "=", "pretrained", ".", "act_postprocess3", "[", "0", ":", "2", "]", "(", "layer_3", ")", "\n", "layer_4", "=", "pretrained", ".", "act_postprocess4", "[", "0", ":", "2", "]", "(", "layer_4", ")", "\n", "\n", "unflatten", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Unflatten", "(", "\n", "2", ",", "\n", "torch", ".", "Size", "(", "\n", "[", "\n", "h", "//", "pretrained", ".", "model", ".", "patch_size", "[", "1", "]", ",", "\n", "w", "//", "pretrained", ".", "model", ".", "patch_size", "[", "0", "]", ",", "\n", "]", "\n", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "if", "layer_1", ".", "ndim", "==", "3", ":", "\n", "        ", "layer_1", "=", "unflatten", "(", "layer_1", ")", "\n", "", "if", "layer_2", ".", "ndim", "==", "3", ":", "\n", "        ", "layer_2", "=", "unflatten", "(", "layer_2", ")", "\n", "", "if", "layer_3", ".", "ndim", "==", "3", ":", "\n", "        ", "layer_3", "=", "unflatten", "(", "layer_3", ")", "\n", "", "if", "layer_4", ".", "ndim", "==", "3", ":", "\n", "        ", "layer_4", "=", "unflatten", "(", "layer_4", ")", "\n", "\n", "", "layer_1", "=", "pretrained", ".", "act_postprocess1", "[", "3", ":", "len", "(", "pretrained", ".", "act_postprocess1", ")", "]", "(", "layer_1", ")", "\n", "layer_2", "=", "pretrained", ".", "act_postprocess2", "[", "3", ":", "len", "(", "pretrained", ".", "act_postprocess2", ")", "]", "(", "layer_2", ")", "\n", "layer_3", "=", "pretrained", ".", "act_postprocess3", "[", "3", ":", "len", "(", "pretrained", ".", "act_postprocess3", ")", "]", "(", "layer_3", ")", "\n", "layer_4", "=", "pretrained", ".", "act_postprocess4", "[", "3", ":", "len", "(", "pretrained", ".", "act_postprocess4", ")", "]", "(", "layer_4", ")", "\n", "\n", "return", "layer_1", ",", "layer_2", ",", "layer_3", ",", "layer_4", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._resize_pos_embed": [[148, 163], ["int", "posemb_grid.permute().reshape.reshape().permute", "torch.interpolate", "posemb_grid.permute().reshape.permute().reshape", "torch.cat", "torch.cat", "torch.cat", "math.sqrt", "len", "posemb_grid.permute().reshape.reshape", "posemb_grid.permute().reshape.permute"], "function", ["None"], ["", "def", "_resize_pos_embed", "(", "self", ",", "posemb", ",", "gs_h", ",", "gs_w", ")", ":", "\n", "    ", "posemb_tok", ",", "posemb_grid", "=", "(", "\n", "posemb", "[", ":", ",", ":", "self", ".", "start_index", "]", ",", "\n", "posemb", "[", "0", ",", "self", ".", "start_index", ":", "]", ",", "\n", ")", "\n", "\n", "gs_old", "=", "int", "(", "math", ".", "sqrt", "(", "len", "(", "posemb_grid", ")", ")", ")", "\n", "\n", "posemb_grid", "=", "posemb_grid", ".", "reshape", "(", "1", ",", "gs_old", ",", "gs_old", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "posemb_grid", "=", "F", ".", "interpolate", "(", "posemb_grid", ",", "size", "=", "(", "gs_h", ",", "gs_w", ")", ",", "mode", "=", "\"bilinear\"", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "1", ",", "gs_h", "*", "gs_w", ",", "-", "1", ")", "\n", "\n", "posemb", "=", "torch", ".", "cat", "(", "[", "posemb_tok", ",", "posemb_grid", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "posemb", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.forward_flex": [[165, 202], ["vit.._resize_pos_embed", "hasattr", "vit..patch_embed.proj().flatten().transpose", "vit..pos_drop", "vit..norm", "vit..patch_embed.backbone", "isinstance", "getattr", "vit..cls_token.expand", "vit..dist_token.expand", "torch.cat", "torch.cat", "torch.cat", "vit..cls_token.expand", "torch.cat", "torch.cat", "torch.cat", "blk", "vit..patch_embed.proj().flatten", "vit..patch_embed.proj"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._resize_pos_embed"], ["", "def", "forward_flex", "(", "self", ",", "x", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "\n", "pos_embed", "=", "self", ".", "_resize_pos_embed", "(", "\n", "self", ".", "pos_embed", ",", "h", "//", "self", ".", "patch_size", "[", "1", "]", ",", "w", "//", "self", ".", "patch_size", "[", "0", "]", "\n", ")", "\n", "\n", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "\n", "if", "hasattr", "(", "self", ".", "patch_embed", ",", "\"backbone\"", ")", ":", "\n", "        ", "x", "=", "self", ".", "patch_embed", ".", "backbone", "(", "x", ")", "\n", "if", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "x", "=", "x", "[", "-", "1", "]", "# last feature if backbone outputs list/tuple of features", "\n", "\n", "", "", "x", "=", "self", ".", "patch_embed", ".", "proj", "(", "x", ")", ".", "flatten", "(", "2", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "if", "getattr", "(", "self", ",", "\"dist_token\"", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "\n", "B", ",", "-", "1", ",", "-", "1", "\n", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "dist_token", "=", "self", ".", "dist_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "dist_token", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "\n", "B", ",", "-", "1", ",", "-", "1", "\n", ")", "# stole cls_tokens impl from Phil Wang, thanks", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "x", "=", "x", "+", "pos_embed", "\n", "x", "=", "self", ".", "pos_drop", "(", "x", ")", "\n", "\n", "for", "blk", "in", "self", ".", "blocks", ":", "\n", "        ", "x", "=", "blk", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_readout_oper": [[204, 219], ["len", "vit.Slice", "len", "vit.AddReadout", "vit.ProjectReadout"], "function", ["None"], ["", "def", "get_readout_oper", "(", "vit_features", ",", "features", ",", "use_readout", ",", "start_index", "=", "1", ")", ":", "\n", "    ", "if", "use_readout", "==", "\"ignore\"", ":", "\n", "        ", "readout_oper", "=", "[", "Slice", "(", "start_index", ")", "]", "*", "len", "(", "features", ")", "\n", "", "elif", "use_readout", "==", "\"add\"", ":", "\n", "        ", "readout_oper", "=", "[", "AddReadout", "(", "start_index", ")", "]", "*", "len", "(", "features", ")", "\n", "", "elif", "use_readout", "==", "\"project\"", ":", "\n", "        ", "readout_oper", "=", "[", "\n", "ProjectReadout", "(", "vit_features", ",", "start_index", ")", "for", "out_feat", "in", "features", "\n", "]", "\n", "", "else", ":", "\n", "        ", "assert", "(", "\n", "False", "\n", ")", ",", "\"wrong operation for readout token, use_readout can be 'ignore', 'add', or 'project'\"", "\n", "\n", "", "return", "readout_oper", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_vit_b16_backbone": [[221, 349], ["torch.Module", "nn.Module.model.blocks[].register_forward_hook", "nn.Module.model.blocks[].register_forward_hook", "nn.Module.model.blocks[].register_forward_hook", "nn.Module.model.blocks[].register_forward_hook", "vit.get_readout_oper", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "types.MethodType", "types.MethodType", "vit.get_activation", "vit.get_activation", "vit.get_activation", "vit.get_activation", "nn.Module.model.blocks[].attn.register_forward_hook", "nn.Module.model.blocks[].attn.register_forward_hook", "nn.Module.model.blocks[].attn.register_forward_hook", "nn.Module.model.blocks[].attn.register_forward_hook", "vit.Transpose", "torch.Unflatten", "torch.Conv2d", "torch.ConvTranspose2d", "vit.Transpose", "torch.Unflatten", "torch.Conv2d", "torch.ConvTranspose2d", "vit.Transpose", "torch.Unflatten", "torch.Conv2d", "vit.Transpose", "torch.Unflatten", "torch.Conv2d", "torch.Conv2d", "vit.get_attention", "vit.get_attention", "vit.get_attention", "vit.get_attention", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_readout_oper", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_activation", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_activation", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_activation", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_activation", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_attention", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_attention", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_attention", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_attention"], ["", "def", "_make_vit_b16_backbone", "(", "\n", "model", ",", "\n", "features", "=", "[", "96", ",", "192", ",", "384", ",", "768", "]", ",", "\n", "size", "=", "[", "384", ",", "384", "]", ",", "\n", "hooks", "=", "[", "2", ",", "5", ",", "8", ",", "11", "]", ",", "\n", "vit_features", "=", "768", ",", "\n", "use_readout", "=", "\"ignore\"", ",", "\n", "start_index", "=", "1", ",", "\n", "enable_attention_hooks", "=", "False", ",", "\n", ")", ":", "\n", "    ", "pretrained", "=", "nn", ".", "Module", "(", ")", "\n", "\n", "pretrained", ".", "model", "=", "model", "\n", "pretrained", ".", "model", ".", "blocks", "[", "hooks", "[", "0", "]", "]", ".", "register_forward_hook", "(", "get_activation", "(", "\"1\"", ")", ")", "\n", "pretrained", ".", "model", ".", "blocks", "[", "hooks", "[", "1", "]", "]", ".", "register_forward_hook", "(", "get_activation", "(", "\"2\"", ")", ")", "\n", "pretrained", ".", "model", ".", "blocks", "[", "hooks", "[", "2", "]", "]", ".", "register_forward_hook", "(", "get_activation", "(", "\"3\"", ")", ")", "\n", "pretrained", ".", "model", ".", "blocks", "[", "hooks", "[", "3", "]", "]", ".", "register_forward_hook", "(", "get_activation", "(", "\"4\"", ")", ")", "\n", "\n", "pretrained", ".", "activations", "=", "activations", "\n", "\n", "if", "enable_attention_hooks", ":", "\n", "        ", "pretrained", ".", "model", ".", "blocks", "[", "hooks", "[", "0", "]", "]", ".", "attn", ".", "register_forward_hook", "(", "\n", "get_attention", "(", "\"attn_1\"", ")", "\n", ")", "\n", "pretrained", ".", "model", ".", "blocks", "[", "hooks", "[", "1", "]", "]", ".", "attn", ".", "register_forward_hook", "(", "\n", "get_attention", "(", "\"attn_2\"", ")", "\n", ")", "\n", "pretrained", ".", "model", ".", "blocks", "[", "hooks", "[", "2", "]", "]", ".", "attn", ".", "register_forward_hook", "(", "\n", "get_attention", "(", "\"attn_3\"", ")", "\n", ")", "\n", "pretrained", ".", "model", ".", "blocks", "[", "hooks", "[", "3", "]", "]", ".", "attn", ".", "register_forward_hook", "(", "\n", "get_attention", "(", "\"attn_4\"", ")", "\n", ")", "\n", "pretrained", ".", "attention", "=", "attention", "\n", "\n", "", "readout_oper", "=", "get_readout_oper", "(", "vit_features", ",", "features", ",", "use_readout", ",", "start_index", ")", "\n", "\n", "# 32, 48, 136, 384", "\n", "pretrained", ".", "act_postprocess1", "=", "nn", ".", "Sequential", "(", "\n", "readout_oper", "[", "0", "]", ",", "\n", "Transpose", "(", "1", ",", "2", ")", ",", "\n", "nn", ".", "Unflatten", "(", "2", ",", "torch", ".", "Size", "(", "[", "size", "[", "0", "]", "//", "16", ",", "size", "[", "1", "]", "//", "16", "]", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "vit_features", ",", "\n", "out_channels", "=", "features", "[", "0", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", "=", "features", "[", "0", "]", ",", "\n", "out_channels", "=", "features", "[", "0", "]", ",", "\n", "kernel_size", "=", "4", ",", "\n", "stride", "=", "4", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "pretrained", ".", "act_postprocess2", "=", "nn", ".", "Sequential", "(", "\n", "readout_oper", "[", "1", "]", ",", "\n", "Transpose", "(", "1", ",", "2", ")", ",", "\n", "nn", ".", "Unflatten", "(", "2", ",", "torch", ".", "Size", "(", "[", "size", "[", "0", "]", "//", "16", ",", "size", "[", "1", "]", "//", "16", "]", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "vit_features", ",", "\n", "out_channels", "=", "features", "[", "1", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", "=", "features", "[", "1", "]", ",", "\n", "out_channels", "=", "features", "[", "1", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "pretrained", ".", "act_postprocess3", "=", "nn", ".", "Sequential", "(", "\n", "readout_oper", "[", "2", "]", ",", "\n", "Transpose", "(", "1", ",", "2", ")", ",", "\n", "nn", ".", "Unflatten", "(", "2", ",", "torch", ".", "Size", "(", "[", "size", "[", "0", "]", "//", "16", ",", "size", "[", "1", "]", "//", "16", "]", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "vit_features", ",", "\n", "out_channels", "=", "features", "[", "2", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "pretrained", ".", "act_postprocess4", "=", "nn", ".", "Sequential", "(", "\n", "readout_oper", "[", "3", "]", ",", "\n", "Transpose", "(", "1", ",", "2", ")", ",", "\n", "nn", ".", "Unflatten", "(", "2", ",", "torch", ".", "Size", "(", "[", "size", "[", "0", "]", "//", "16", ",", "size", "[", "1", "]", "//", "16", "]", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "vit_features", ",", "\n", "out_channels", "=", "features", "[", "3", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "features", "[", "3", "]", ",", "\n", "out_channels", "=", "features", "[", "3", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "pretrained", ".", "model", ".", "start_index", "=", "start_index", "\n", "pretrained", ".", "model", ".", "patch_size", "=", "[", "16", ",", "16", "]", "\n", "\n", "# We inject this function into the VisionTransformer instances so that", "\n", "# we can use it with interpolated position embeddings without modifying the library source.", "\n", "pretrained", ".", "model", ".", "forward_flex", "=", "types", ".", "MethodType", "(", "forward_flex", ",", "pretrained", ".", "model", ")", "\n", "pretrained", ".", "model", ".", "_resize_pos_embed", "=", "types", ".", "MethodType", "(", "\n", "_resize_pos_embed", ",", "pretrained", ".", "model", "\n", ")", "\n", "\n", "return", "pretrained", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_vit_b_rn50_backbone": [[351, 492], ["torch.Module", "nn.Module.model.blocks[].register_forward_hook", "nn.Module.model.blocks[].register_forward_hook", "vit.get_readout_oper", "torch.Sequential", "torch.Sequential", "types.MethodType", "types.MethodType", "nn.Module.model.blocks[].register_forward_hook", "nn.Module.model.blocks[].register_forward_hook", "nn.Module.model.patch_embed.backbone.stages[].register_forward_hook", "nn.Module.model.patch_embed.backbone.stages[].register_forward_hook", "vit.get_activation", "vit.get_activation", "nn.Module.model.blocks[].attn.register_forward_hook", "nn.Module.model.blocks[].attn.register_forward_hook", "nn.Module.model.blocks[].attn.register_forward_hook", "nn.Module.model.blocks[].attn.register_forward_hook", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vit.Transpose", "torch.Unflatten", "torch.Conv2d", "vit.Transpose", "torch.Unflatten", "torch.Conv2d", "torch.Conv2d", "vit.get_activation", "vit.get_activation", "vit.get_activation", "vit.get_activation", "vit.get_attention", "vit.get_attention", "vit.get_attention", "vit.get_attention", "vit.Transpose", "torch.Unflatten", "torch.Conv2d", "torch.ConvTranspose2d", "vit.Transpose", "torch.Unflatten", "torch.Conv2d", "torch.ConvTranspose2d", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_readout_oper", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_activation", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_activation", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_activation", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_activation", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_activation", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_activation", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_attention", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_attention", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_attention", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_attention"], ["", "def", "_make_vit_b_rn50_backbone", "(", "\n", "model", ",", "\n", "features", "=", "[", "256", ",", "512", ",", "768", ",", "768", "]", ",", "\n", "size", "=", "[", "384", ",", "384", "]", ",", "\n", "hooks", "=", "[", "0", ",", "1", ",", "8", ",", "11", "]", ",", "\n", "vit_features", "=", "768", ",", "\n", "use_vit_only", "=", "False", ",", "\n", "use_readout", "=", "\"ignore\"", ",", "\n", "start_index", "=", "1", ",", "\n", "enable_attention_hooks", "=", "False", ",", "\n", ")", ":", "\n", "    ", "pretrained", "=", "nn", ".", "Module", "(", ")", "\n", "\n", "pretrained", ".", "model", "=", "model", "\n", "\n", "if", "use_vit_only", "==", "True", ":", "\n", "        ", "pretrained", ".", "model", ".", "blocks", "[", "hooks", "[", "0", "]", "]", ".", "register_forward_hook", "(", "get_activation", "(", "\"1\"", ")", ")", "\n", "pretrained", ".", "model", ".", "blocks", "[", "hooks", "[", "1", "]", "]", ".", "register_forward_hook", "(", "get_activation", "(", "\"2\"", ")", ")", "\n", "", "else", ":", "\n", "        ", "pretrained", ".", "model", ".", "patch_embed", ".", "backbone", ".", "stages", "[", "0", "]", ".", "register_forward_hook", "(", "\n", "get_activation", "(", "\"1\"", ")", "\n", ")", "\n", "pretrained", ".", "model", ".", "patch_embed", ".", "backbone", ".", "stages", "[", "1", "]", ".", "register_forward_hook", "(", "\n", "get_activation", "(", "\"2\"", ")", "\n", ")", "\n", "\n", "", "pretrained", ".", "model", ".", "blocks", "[", "hooks", "[", "2", "]", "]", ".", "register_forward_hook", "(", "get_activation", "(", "\"3\"", ")", ")", "\n", "pretrained", ".", "model", ".", "blocks", "[", "hooks", "[", "3", "]", "]", ".", "register_forward_hook", "(", "get_activation", "(", "\"4\"", ")", ")", "\n", "\n", "if", "enable_attention_hooks", ":", "\n", "        ", "pretrained", ".", "model", ".", "blocks", "[", "2", "]", ".", "attn", ".", "register_forward_hook", "(", "get_attention", "(", "\"attn_1\"", ")", ")", "\n", "pretrained", ".", "model", ".", "blocks", "[", "5", "]", ".", "attn", ".", "register_forward_hook", "(", "get_attention", "(", "\"attn_2\"", ")", ")", "\n", "pretrained", ".", "model", ".", "blocks", "[", "8", "]", ".", "attn", ".", "register_forward_hook", "(", "get_attention", "(", "\"attn_3\"", ")", ")", "\n", "pretrained", ".", "model", ".", "blocks", "[", "11", "]", ".", "attn", ".", "register_forward_hook", "(", "get_attention", "(", "\"attn_4\"", ")", ")", "\n", "pretrained", ".", "attention", "=", "attention", "\n", "\n", "", "pretrained", ".", "activations", "=", "activations", "\n", "\n", "readout_oper", "=", "get_readout_oper", "(", "vit_features", ",", "features", ",", "use_readout", ",", "start_index", ")", "\n", "\n", "if", "use_vit_only", "==", "True", ":", "\n", "        ", "pretrained", ".", "act_postprocess1", "=", "nn", ".", "Sequential", "(", "\n", "readout_oper", "[", "0", "]", ",", "\n", "Transpose", "(", "1", ",", "2", ")", ",", "\n", "nn", ".", "Unflatten", "(", "2", ",", "torch", ".", "Size", "(", "[", "size", "[", "0", "]", "//", "16", ",", "size", "[", "1", "]", "//", "16", "]", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "vit_features", ",", "\n", "out_channels", "=", "features", "[", "0", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", "=", "features", "[", "0", "]", ",", "\n", "out_channels", "=", "features", "[", "0", "]", ",", "\n", "kernel_size", "=", "4", ",", "\n", "stride", "=", "4", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "pretrained", ".", "act_postprocess2", "=", "nn", ".", "Sequential", "(", "\n", "readout_oper", "[", "1", "]", ",", "\n", "Transpose", "(", "1", ",", "2", ")", ",", "\n", "nn", ".", "Unflatten", "(", "2", ",", "torch", ".", "Size", "(", "[", "size", "[", "0", "]", "//", "16", ",", "size", "[", "1", "]", "//", "16", "]", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "vit_features", ",", "\n", "out_channels", "=", "features", "[", "1", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", "=", "features", "[", "1", "]", ",", "\n", "out_channels", "=", "features", "[", "1", "]", ",", "\n", "kernel_size", "=", "2", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "pretrained", ".", "act_postprocess1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Identity", "(", ")", ",", "nn", ".", "Identity", "(", ")", ",", "nn", ".", "Identity", "(", ")", "\n", ")", "\n", "pretrained", ".", "act_postprocess2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Identity", "(", ")", ",", "nn", ".", "Identity", "(", ")", ",", "nn", ".", "Identity", "(", ")", "\n", ")", "\n", "\n", "", "pretrained", ".", "act_postprocess3", "=", "nn", ".", "Sequential", "(", "\n", "readout_oper", "[", "2", "]", ",", "\n", "Transpose", "(", "1", ",", "2", ")", ",", "\n", "nn", ".", "Unflatten", "(", "2", ",", "torch", ".", "Size", "(", "[", "size", "[", "0", "]", "//", "16", ",", "size", "[", "1", "]", "//", "16", "]", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "vit_features", ",", "\n", "out_channels", "=", "features", "[", "2", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "pretrained", ".", "act_postprocess4", "=", "nn", ".", "Sequential", "(", "\n", "readout_oper", "[", "3", "]", ",", "\n", "Transpose", "(", "1", ",", "2", ")", ",", "\n", "nn", ".", "Unflatten", "(", "2", ",", "torch", ".", "Size", "(", "[", "size", "[", "0", "]", "//", "16", ",", "size", "[", "1", "]", "//", "16", "]", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "vit_features", ",", "\n", "out_channels", "=", "features", "[", "3", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "features", "[", "3", "]", ",", "\n", "out_channels", "=", "features", "[", "3", "]", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "1", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "pretrained", ".", "model", ".", "start_index", "=", "start_index", "\n", "pretrained", ".", "model", ".", "patch_size", "=", "[", "16", ",", "16", "]", "\n", "\n", "# We inject this function into the VisionTransformer instances so that", "\n", "# we can use it with interpolated position embeddings without modifying the library source.", "\n", "pretrained", ".", "model", ".", "forward_flex", "=", "types", ".", "MethodType", "(", "forward_flex", ",", "pretrained", ".", "model", ")", "\n", "\n", "# We inject this function into the VisionTransformer instances so that", "\n", "# we can use it with interpolated position embeddings without modifying the library source.", "\n", "pretrained", ".", "model", ".", "_resize_pos_embed", "=", "types", ".", "MethodType", "(", "\n", "_resize_pos_embed", ",", "pretrained", ".", "model", "\n", ")", "\n", "\n", "return", "pretrained", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_pretrained_vitb_rn50_384": [[494, 512], ["timm.create_model", "vit._make_vit_b_rn50_backbone"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_vit_b_rn50_backbone"], ["", "def", "_make_pretrained_vitb_rn50_384", "(", "\n", "pretrained", ",", "\n", "use_readout", "=", "\"ignore\"", ",", "\n", "hooks", "=", "None", ",", "\n", "use_vit_only", "=", "False", ",", "\n", "enable_attention_hooks", "=", "False", ",", "\n", ")", ":", "\n", "    ", "model", "=", "timm", ".", "create_model", "(", "\"vit_base_resnet50_384\"", ",", "pretrained", "=", "pretrained", ")", "\n", "\n", "hooks", "=", "[", "0", ",", "1", ",", "8", ",", "11", "]", "if", "hooks", "==", "None", "else", "hooks", "\n", "return", "_make_vit_b_rn50_backbone", "(", "\n", "model", ",", "\n", "features", "=", "[", "256", ",", "512", ",", "768", ",", "768", "]", ",", "\n", "size", "=", "[", "384", ",", "384", "]", ",", "\n", "hooks", "=", "hooks", ",", "\n", "use_vit_only", "=", "use_vit_only", ",", "\n", "use_readout", "=", "use_readout", ",", "\n", "enable_attention_hooks", "=", "enable_attention_hooks", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_pretrained_vitl16_384": [[515, 528], ["timm.create_model", "vit._make_vit_b16_backbone"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_vit_b16_backbone"], ["", "def", "_make_pretrained_vitl16_384", "(", "\n", "pretrained", ",", "use_readout", "=", "\"ignore\"", ",", "hooks", "=", "None", ",", "enable_attention_hooks", "=", "False", "\n", ")", ":", "\n", "    ", "model", "=", "timm", ".", "create_model", "(", "\"vit_large_patch16_384\"", ",", "pretrained", "=", "pretrained", ")", "\n", "\n", "hooks", "=", "[", "5", ",", "11", ",", "17", ",", "23", "]", "if", "hooks", "==", "None", "else", "hooks", "\n", "return", "_make_vit_b16_backbone", "(", "\n", "model", ",", "\n", "features", "=", "[", "256", ",", "512", ",", "1024", ",", "1024", "]", ",", "\n", "hooks", "=", "hooks", ",", "\n", "vit_features", "=", "1024", ",", "\n", "use_readout", "=", "use_readout", ",", "\n", "enable_attention_hooks", "=", "enable_attention_hooks", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_pretrained_vitb16_384": [[531, 543], ["timm.create_model", "vit._make_vit_b16_backbone"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_vit_b16_backbone"], ["", "def", "_make_pretrained_vitb16_384", "(", "\n", "pretrained", ",", "use_readout", "=", "\"ignore\"", ",", "hooks", "=", "None", ",", "enable_attention_hooks", "=", "False", "\n", ")", ":", "\n", "    ", "model", "=", "timm", ".", "create_model", "(", "\"vit_base_patch16_384\"", ",", "pretrained", "=", "pretrained", ")", "\n", "\n", "hooks", "=", "[", "2", ",", "5", ",", "8", ",", "11", "]", "if", "hooks", "==", "None", "else", "hooks", "\n", "return", "_make_vit_b16_backbone", "(", "\n", "model", ",", "\n", "features", "=", "[", "96", ",", "192", ",", "384", ",", "768", "]", ",", "\n", "hooks", "=", "hooks", ",", "\n", "use_readout", "=", "use_readout", ",", "\n", "enable_attention_hooks", "=", "enable_attention_hooks", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_pretrained_deitb16_384": [[546, 558], ["timm.create_model", "vit._make_vit_b16_backbone"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_vit_b16_backbone"], ["", "def", "_make_pretrained_deitb16_384", "(", "\n", "pretrained", ",", "use_readout", "=", "\"ignore\"", ",", "hooks", "=", "None", ",", "enable_attention_hooks", "=", "False", "\n", ")", ":", "\n", "    ", "model", "=", "timm", ".", "create_model", "(", "\"vit_deit_base_patch16_384\"", ",", "pretrained", "=", "pretrained", ")", "\n", "\n", "hooks", "=", "[", "2", ",", "5", ",", "8", ",", "11", "]", "if", "hooks", "==", "None", "else", "hooks", "\n", "return", "_make_vit_b16_backbone", "(", "\n", "model", ",", "\n", "features", "=", "[", "96", ",", "192", ",", "384", ",", "768", "]", ",", "\n", "hooks", "=", "hooks", ",", "\n", "use_readout", "=", "use_readout", ",", "\n", "enable_attention_hooks", "=", "enable_attention_hooks", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_pretrained_deitb16_distil_384": [[561, 576], ["timm.create_model", "vit._make_vit_b16_backbone"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_vit_b16_backbone"], ["", "def", "_make_pretrained_deitb16_distil_384", "(", "\n", "pretrained", ",", "use_readout", "=", "\"ignore\"", ",", "hooks", "=", "None", ",", "enable_attention_hooks", "=", "False", "\n", ")", ":", "\n", "    ", "model", "=", "timm", ".", "create_model", "(", "\n", "\"vit_deit_base_distilled_patch16_384\"", ",", "pretrained", "=", "pretrained", "\n", ")", "\n", "\n", "hooks", "=", "[", "2", ",", "5", ",", "8", ",", "11", "]", "if", "hooks", "==", "None", "else", "hooks", "\n", "return", "_make_vit_b16_backbone", "(", "\n", "model", ",", "\n", "features", "=", "[", "96", ",", "192", ",", "384", ",", "768", "]", ",", "\n", "hooks", "=", "hooks", ",", "\n", "use_readout", "=", "use_readout", ",", "\n", "start_index", "=", "2", ",", "\n", "enable_attention_hooks", "=", "enable_attention_hooks", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.Interpolate.__init__": [[141, 154], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__"], ["def", "__init__", "(", "self", ",", "scale_factor", ",", "mode", ",", "align_corners", "=", "False", ")", ":", "\n", "        ", "\"\"\"Init.\n\n        Args:\n            scale_factor (float): scaling\n            mode (str): interpolation mode\n        \"\"\"", "\n", "super", "(", "Interpolate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "interp", "=", "nn", ".", "functional", ".", "interpolate", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.Interpolate.forward": [[155, 173], ["blocks.Interpolate.interp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward pass.\n\n        Args:\n            x (tensor): input\n\n        Returns:\n            tensor: interpolated data\n        \"\"\"", "\n", "\n", "x", "=", "self", ".", "interp", "(", "\n", "x", ",", "\n", "scale_factor", "=", "self", ".", "scale_factor", ",", "\n", "mode", "=", "self", ".", "mode", ",", "\n", "align_corners", "=", "self", ".", "align_corners", ",", "\n", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.ResidualConvUnit.__init__": [[178, 195], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__"], ["def", "__init__", "(", "self", ",", "features", ")", ":", "\n", "        ", "\"\"\"Init.\n\n        Args:\n            features (int): number of features\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "features", ",", "features", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "features", ",", "features", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", "\n", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.ResidualConvUnit.forward": [[196, 211], ["blocks.ResidualConvUnit.relu", "blocks.ResidualConvUnit.conv1", "blocks.ResidualConvUnit.relu", "blocks.ResidualConvUnit.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward pass.\n\n        Args:\n            x (tensor): input\n\n        Returns:\n            tensor: output\n        \"\"\"", "\n", "out", "=", "self", ".", "relu", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "return", "out", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock.__init__": [[216, 226], ["torch.Module.__init__", "blocks.ResidualConvUnit", "blocks.ResidualConvUnit"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__"], ["def", "__init__", "(", "self", ",", "features", ")", ":", "\n", "        ", "\"\"\"Init.\n\n        Args:\n            features (int): number of features\n        \"\"\"", "\n", "super", "(", "FeatureFusionBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resConfUnit1", "=", "ResidualConvUnit", "(", "features", ")", "\n", "self", ".", "resConfUnit2", "=", "ResidualConvUnit", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock.forward": [[227, 245], ["blocks.FeatureFusionBlock.resConfUnit2", "torch.functional.interpolate", "torch.functional.interpolate", "len", "blocks.FeatureFusionBlock.resConfUnit1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "xs", ")", ":", "\n", "        ", "\"\"\"Forward pass.\n\n        Returns:\n            tensor: output\n        \"\"\"", "\n", "output", "=", "xs", "[", "0", "]", "\n", "\n", "if", "len", "(", "xs", ")", "==", "2", ":", "\n", "            ", "output", "+=", "self", ".", "resConfUnit1", "(", "xs", "[", "1", "]", ")", "\n", "\n", "", "output", "=", "self", ".", "resConfUnit2", "(", "output", ")", "\n", "\n", "output", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "output", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", "\n", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.ResidualConvUnit_custom.__init__": [[250, 289], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__"], ["def", "__init__", "(", "self", ",", "features", ",", "activation", ",", "bn", ")", ":", "\n", "        ", "\"\"\"Init.\n\n        Args:\n            features (int): number of features\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bn", "=", "bn", "\n", "\n", "self", ".", "groups", "=", "1", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "features", ",", "\n", "features", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "not", "self", ".", "bn", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "features", ",", "\n", "features", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "not", "self", ".", "bn", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", ")", "\n", "\n", "if", "self", ".", "bn", "==", "True", ":", "\n", "            ", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "features", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "features", ")", "\n", "\n", "", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "skip_add", "=", "nn", ".", "quantized", ".", "FloatFunctional", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.ResidualConvUnit_custom.forward": [[290, 314], ["blocks.ResidualConvUnit_custom.activation", "blocks.ResidualConvUnit_custom.conv1", "blocks.ResidualConvUnit_custom.activation", "blocks.ResidualConvUnit_custom.conv2", "blocks.ResidualConvUnit_custom.skip_add.add", "blocks.ResidualConvUnit_custom.bn1", "blocks.ResidualConvUnit_custom.bn2", "blocks.ResidualConvUnit_custom.conv_merge"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Forward pass.\n\n        Args:\n            x (tensor): input\n\n        Returns:\n            tensor: output\n        \"\"\"", "\n", "\n", "out", "=", "self", ".", "activation", "(", "x", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "if", "self", ".", "bn", "==", "True", ":", "\n", "            ", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "activation", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "self", ".", "bn", "==", "True", ":", "\n", "            ", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "", "if", "self", ".", "groups", ">", "1", ":", "\n", "            ", "out", "=", "self", ".", "conv_merge", "(", "out", ")", "\n", "\n", "", "return", "self", ".", "skip_add", ".", "add", "(", "out", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__": [[321, 361], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "blocks.ResidualConvUnit_custom", "blocks.ResidualConvUnit_custom", "torch.quantized.FloatFunctional", "torch.quantized.FloatFunctional"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "features", ",", "\n", "activation", ",", "\n", "deconv", "=", "False", ",", "\n", "bn", "=", "False", ",", "\n", "expand", "=", "False", ",", "\n", "align_corners", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Init.\n\n        Args:\n            features (int): number of features\n        \"\"\"", "\n", "super", "(", "FeatureFusionBlock_custom", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "deconv", "=", "deconv", "\n", "self", ".", "align_corners", "=", "align_corners", "\n", "\n", "self", ".", "groups", "=", "1", "\n", "\n", "self", ".", "expand", "=", "expand", "\n", "out_features", "=", "features", "\n", "if", "self", ".", "expand", "==", "True", ":", "\n", "            ", "out_features", "=", "features", "//", "2", "\n", "\n", "", "self", ".", "out_conv", "=", "nn", ".", "Conv2d", "(", "\n", "features", ",", "\n", "out_features", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "True", ",", "\n", "groups", "=", "1", ",", "\n", ")", "\n", "\n", "self", ".", "resConfUnit1", "=", "ResidualConvUnit_custom", "(", "features", ",", "activation", ",", "bn", ")", "\n", "self", ".", "resConfUnit2", "=", "ResidualConvUnit_custom", "(", "features", ",", "activation", ",", "bn", ")", "\n", "\n", "self", ".", "skip_add", "=", "nn", ".", "quantized", ".", "FloatFunctional", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks.FeatureFusionBlock_custom.forward": [[362, 384], ["blocks.FeatureFusionBlock_custom.resConfUnit2", "torch.functional.interpolate", "torch.functional.interpolate", "blocks.FeatureFusionBlock_custom.out_conv", "len", "blocks.FeatureFusionBlock_custom.resConfUnit1", "blocks.FeatureFusionBlock_custom.skip_add.add"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "xs", ")", ":", "\n", "        ", "\"\"\"Forward pass.\n\n        Returns:\n            tensor: output\n        \"\"\"", "\n", "output", "=", "xs", "[", "0", "]", "\n", "\n", "if", "len", "(", "xs", ")", "==", "2", ":", "\n", "            ", "res", "=", "self", ".", "resConfUnit1", "(", "xs", "[", "1", "]", ")", "\n", "output", "=", "self", ".", "skip_add", ".", "add", "(", "output", ",", "res", ")", "\n", "# output += res", "\n", "\n", "", "output", "=", "self", ".", "resConfUnit2", "(", "output", ")", "\n", "\n", "output", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "output", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "self", ".", "align_corners", "\n", ")", "\n", "\n", "output", "=", "self", ".", "out_conv", "(", "output", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks._make_encoder": [[12, 65], ["vit._make_pretrained_vitl16_384", "blocks._make_scratch", "vit._make_pretrained_vitb_rn50_384", "blocks._make_scratch", "vit._make_pretrained_vitb16_384", "blocks._make_scratch", "blocks._make_pretrained_resnext101_wsl", "blocks._make_scratch", "print"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_pretrained_vitl16_384", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks._make_scratch", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_pretrained_vitb_rn50_384", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks._make_scratch", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit._make_pretrained_vitb16_384", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks._make_scratch", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks._make_pretrained_resnext101_wsl", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks._make_scratch"], ["def", "_make_encoder", "(", "\n", "backbone", ",", "\n", "features", ",", "\n", "use_pretrained", ",", "\n", "groups", "=", "1", ",", "\n", "expand", "=", "False", ",", "\n", "exportable", "=", "True", ",", "\n", "hooks", "=", "None", ",", "\n", "use_vit_only", "=", "False", ",", "\n", "use_readout", "=", "\"ignore\"", ",", "\n", "enable_attention_hooks", "=", "False", ",", "\n", ")", ":", "\n", "    ", "if", "backbone", "==", "\"vitl16_384\"", ":", "\n", "        ", "pretrained", "=", "_make_pretrained_vitl16_384", "(", "\n", "use_pretrained", ",", "\n", "hooks", "=", "hooks", ",", "\n", "use_readout", "=", "use_readout", ",", "\n", "enable_attention_hooks", "=", "enable_attention_hooks", ",", "\n", ")", "\n", "scratch", "=", "_make_scratch", "(", "\n", "[", "256", ",", "512", ",", "1024", ",", "1024", "]", ",", "features", ",", "groups", "=", "groups", ",", "expand", "=", "expand", "\n", ")", "# ViT-L/16 - 85.0% Top1 (backbone)", "\n", "", "elif", "backbone", "==", "\"vitb_rn50_384\"", ":", "\n", "        ", "pretrained", "=", "_make_pretrained_vitb_rn50_384", "(", "\n", "use_pretrained", ",", "\n", "hooks", "=", "hooks", ",", "\n", "use_vit_only", "=", "use_vit_only", ",", "\n", "use_readout", "=", "use_readout", ",", "\n", "enable_attention_hooks", "=", "enable_attention_hooks", ",", "\n", ")", "\n", "scratch", "=", "_make_scratch", "(", "\n", "[", "256", ",", "512", ",", "768", ",", "768", "]", ",", "features", ",", "groups", "=", "groups", ",", "expand", "=", "expand", "\n", ")", "# ViT-H/16 - 85.0% Top1 (backbone)", "\n", "", "elif", "backbone", "==", "\"vitb16_384\"", ":", "\n", "        ", "pretrained", "=", "_make_pretrained_vitb16_384", "(", "\n", "use_pretrained", ",", "\n", "hooks", "=", "hooks", ",", "\n", "use_readout", "=", "use_readout", ",", "\n", "enable_attention_hooks", "=", "enable_attention_hooks", ",", "\n", ")", "\n", "scratch", "=", "_make_scratch", "(", "\n", "[", "96", ",", "192", ",", "384", ",", "768", "]", ",", "features", ",", "groups", "=", "groups", ",", "expand", "=", "expand", "\n", ")", "# ViT-B/16 - 84.6% Top1 (backbone)", "\n", "", "elif", "backbone", "==", "\"resnext101_wsl\"", ":", "\n", "        ", "pretrained", "=", "_make_pretrained_resnext101_wsl", "(", "use_pretrained", ")", "\n", "scratch", "=", "_make_scratch", "(", "\n", "[", "256", ",", "512", ",", "1024", ",", "2048", "]", ",", "features", ",", "groups", "=", "groups", ",", "expand", "=", "expand", "\n", ")", "# efficientnet_lite3", "\n", "", "else", ":", "\n", "        ", "print", "(", "f\"Backbone '{backbone}' not implemented\"", ")", "\n", "assert", "False", "\n", "\n", "", "return", "pretrained", ",", "scratch", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks._make_scratch": [[67, 118], ["torch.Module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "function", ["None"], ["", "def", "_make_scratch", "(", "in_shape", ",", "out_shape", ",", "groups", "=", "1", ",", "expand", "=", "False", ")", ":", "\n", "    ", "scratch", "=", "nn", ".", "Module", "(", ")", "\n", "\n", "out_shape1", "=", "out_shape", "\n", "out_shape2", "=", "out_shape", "\n", "out_shape3", "=", "out_shape", "\n", "out_shape4", "=", "out_shape", "\n", "if", "expand", "==", "True", ":", "\n", "        ", "out_shape1", "=", "out_shape", "\n", "out_shape2", "=", "out_shape", "*", "2", "\n", "out_shape3", "=", "out_shape", "*", "4", "\n", "out_shape4", "=", "out_shape", "*", "8", "\n", "\n", "", "scratch", ".", "layer1_rn", "=", "nn", ".", "Conv2d", "(", "\n", "in_shape", "[", "0", "]", ",", "\n", "out_shape1", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", ",", "\n", ")", "\n", "scratch", ".", "layer2_rn", "=", "nn", ".", "Conv2d", "(", "\n", "in_shape", "[", "1", "]", ",", "\n", "out_shape2", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", ",", "\n", ")", "\n", "scratch", ".", "layer3_rn", "=", "nn", ".", "Conv2d", "(", "\n", "in_shape", "[", "2", "]", ",", "\n", "out_shape3", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", ",", "\n", ")", "\n", "scratch", ".", "layer4_rn", "=", "nn", ".", "Conv2d", "(", "\n", "in_shape", "[", "3", "]", ",", "\n", "out_shape4", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", ",", "\n", ")", "\n", "\n", "return", "scratch", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks._make_resnet_backbone": [[120, 131], ["torch.Module", "torch.Sequential"], "function", ["None"], ["", "def", "_make_resnet_backbone", "(", "resnet", ")", ":", "\n", "    ", "pretrained", "=", "nn", ".", "Module", "(", ")", "\n", "pretrained", ".", "layer1", "=", "nn", ".", "Sequential", "(", "\n", "resnet", ".", "conv1", ",", "resnet", ".", "bn1", ",", "resnet", ".", "relu", ",", "resnet", ".", "maxpool", ",", "resnet", ".", "layer1", "\n", ")", "\n", "\n", "pretrained", ".", "layer2", "=", "resnet", ".", "layer2", "\n", "pretrained", ".", "layer3", "=", "resnet", ".", "layer3", "\n", "pretrained", ".", "layer4", "=", "resnet", ".", "layer4", "\n", "\n", "return", "pretrained", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks._make_pretrained_resnext101_wsl": [[133, 136], ["torch.hub.load", "torch.hub.load", "blocks._make_resnet_backbone"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.base_model.BaseModel.load", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.base_model.BaseModel.load", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.blocks._make_resnet_backbone"], ["", "def", "_make_pretrained_resnext101_wsl", "(", "use_pretrained", ")", ":", "\n", "    ", "resnet", "=", "torch", ".", "hub", ".", "load", "(", "\"facebookresearch/WSL-Images\"", ",", "\"resnext101_32x8d_wsl\"", ")", "\n", "return", "_make_resnet_backbone", "(", "resnet", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.dpt.base_model.BaseModel.load": [[5, 17], ["torch.load", "base_model.BaseModel.load_state_dict", "torch.device"], "methods", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.base_model.BaseModel.load"], ["    ", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"Load model from file.\n\n        Args:\n            path (str): file path\n        \"\"\"", "\n", "parameters", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n", "if", "\"optimizer\"", "in", "parameters", ":", "\n", "            ", "parameters", "=", "parameters", "[", "\"model\"", "]", "\n", "\n", "", "self", ".", "load_state_dict", "(", "parameters", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.isl-org_DPT.util.io.read_pfm": [[14, 61], ["open", "file.readline().rstrip", "re.match", "float", "numpy.fromfile", "numpy.reshape", "numpy.flipud", "file.readline().rstrip.decode", "file.readline().decode", "list", "Exception", "file.readline().decode().rstrip", "file.readline", "file.readline().rstrip.decode", "Exception", "map", "file.readline", "re.match.groups", "file.readline().decode", "file.readline"], "function", ["None"], ["def", "read_pfm", "(", "path", ")", ":", "\n", "    ", "\"\"\"Read pfm file.\n\n    Args:\n        path (str): path to file\n\n    Returns:\n        tuple: (data, scale)\n    \"\"\"", "\n", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "file", ":", "\n", "\n", "        ", "color", "=", "None", "\n", "width", "=", "None", "\n", "height", "=", "None", "\n", "scale", "=", "None", "\n", "endian", "=", "None", "\n", "\n", "header", "=", "file", ".", "readline", "(", ")", ".", "rstrip", "(", ")", "\n", "if", "header", ".", "decode", "(", "\"ascii\"", ")", "==", "\"PF\"", ":", "\n", "            ", "color", "=", "True", "\n", "", "elif", "header", ".", "decode", "(", "\"ascii\"", ")", "==", "\"Pf\"", ":", "\n", "            ", "color", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Not a PFM file: \"", "+", "path", ")", "\n", "\n", "", "dim_match", "=", "re", ".", "match", "(", "r\"^(\\d+)\\s(\\d+)\\s$\"", ",", "file", ".", "readline", "(", ")", ".", "decode", "(", "\"ascii\"", ")", ")", "\n", "if", "dim_match", ":", "\n", "            ", "width", ",", "height", "=", "list", "(", "map", "(", "int", ",", "dim_match", ".", "groups", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Malformed PFM header.\"", ")", "\n", "\n", "", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ".", "decode", "(", "\"ascii\"", ")", ".", "rstrip", "(", ")", ")", "\n", "if", "scale", "<", "0", ":", "\n", "# little-endian", "\n", "            ", "endian", "=", "\"<\"", "\n", "scale", "=", "-", "scale", "\n", "", "else", ":", "\n", "# big-endian", "\n", "            ", "endian", "=", "\">\"", "\n", "\n", "", "data", "=", "np", ".", "fromfile", "(", "file", ",", "endian", "+", "\"f\"", ")", "\n", "shape", "=", "(", "height", ",", "width", ",", "3", ")", "if", "color", "else", "(", "height", ",", "width", ")", "\n", "\n", "data", "=", "np", ".", "reshape", "(", "data", ",", "shape", ")", "\n", "data", "=", "np", ".", "flipud", "(", "data", ")", "\n", "\n", "return", "data", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.util.io.write_pfm": [[63, 100], ["open", "numpy.flipud", "file.write", "file.write", "file.write", "np.flipud.tofile", "Exception", "len", "Exception", "len", "len"], "function", ["None"], ["", "", "def", "write_pfm", "(", "path", ",", "image", ",", "scale", "=", "1", ")", ":", "\n", "    ", "\"\"\"Write pfm file.\n\n    Args:\n        path (str): pathto file\n        image (array): data\n        scale (int, optional): Scale. Defaults to 1.\n    \"\"\"", "\n", "\n", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "file", ":", "\n", "        ", "color", "=", "None", "\n", "\n", "if", "image", ".", "dtype", ".", "name", "!=", "\"float32\"", ":", "\n", "            ", "raise", "Exception", "(", "\"Image dtype must be float32.\"", ")", "\n", "\n", "", "image", "=", "np", ".", "flipud", "(", "image", ")", "\n", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "3", ":", "# color image", "\n", "            ", "color", "=", "True", "\n", "", "elif", "(", "\n", "len", "(", "image", ".", "shape", ")", "==", "2", "or", "len", "(", "image", ".", "shape", ")", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "1", "\n", ")", ":", "# greyscale", "\n", "            ", "color", "=", "False", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Image must have H x W x 3, H x W x 1 or H x W dimensions.\"", ")", "\n", "\n", "", "file", ".", "write", "(", "\"PF\\n\"", "if", "color", "else", "\"Pf\\n\"", ".", "encode", "(", ")", ")", "\n", "file", ".", "write", "(", "\"%d %d\\n\"", ".", "encode", "(", ")", "%", "(", "image", ".", "shape", "[", "1", "]", ",", "image", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "endian", "=", "image", ".", "dtype", ".", "byteorder", "\n", "\n", "if", "endian", "==", "\"<\"", "or", "endian", "==", "\"=\"", "and", "sys", ".", "byteorder", "==", "\"little\"", ":", "\n", "            ", "scale", "=", "-", "scale", "\n", "\n", "", "file", ".", "write", "(", "\"%f\\n\"", ".", "encode", "(", ")", "%", "scale", ")", "\n", "\n", "image", ".", "tofile", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.util.io.read_image": [[102, 119], ["cv2.imread", "cv2.cvtColor", "cv2.cvtColor"], "function", ["None"], ["", "", "def", "read_image", "(", "path", ")", ":", "\n", "    ", "\"\"\"Read image and output RGB image (0-1).\n\n    Args:\n        path (str): path to file\n\n    Returns:\n        array: RGB image (0-1)\n    \"\"\"", "\n", "img", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "\n", "if", "img", ".", "ndim", "==", "2", ":", "\n", "        ", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_GRAY2BGR", ")", "\n", "\n", "", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "/", "255.0", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.util.io.resize_image": [[121, 149], ["cv2.resize", "torch.from_numpy().contiguous().float", "img_resized.unsqueeze.unsqueeze", "torch.from_numpy().contiguous", "numpy.ceil", "numpy.ceil", "torch.from_numpy", "numpy.transpose"], "function", ["None"], ["", "def", "resize_image", "(", "img", ")", ":", "\n", "    ", "\"\"\"Resize image and make it fit for network.\n\n    Args:\n        img (array): image\n\n    Returns:\n        tensor: data ready for network\n    \"\"\"", "\n", "height_orig", "=", "img", ".", "shape", "[", "0", "]", "\n", "width_orig", "=", "img", ".", "shape", "[", "1", "]", "\n", "\n", "if", "width_orig", ">", "height_orig", ":", "\n", "        ", "scale", "=", "width_orig", "/", "384", "\n", "", "else", ":", "\n", "        ", "scale", "=", "height_orig", "/", "384", "\n", "\n", "", "height", "=", "(", "np", ".", "ceil", "(", "height_orig", "/", "scale", "/", "32", ")", "*", "32", ")", ".", "astype", "(", "int", ")", "\n", "width", "=", "(", "np", ".", "ceil", "(", "width_orig", "/", "scale", "/", "32", ")", "*", "32", ")", ".", "astype", "(", "int", ")", "\n", "\n", "img_resized", "=", "cv2", ".", "resize", "(", "img", ",", "(", "width", ",", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "\n", "img_resized", "=", "(", "\n", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "img_resized", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", ".", "contiguous", "(", ")", ".", "float", "(", ")", "\n", ")", "\n", "img_resized", "=", "img_resized", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "return", "img_resized", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.util.io.resize_depth": [[151, 169], ["torch.squeeze().to", "cv2.resize", "torch.squeeze().to.numpy", "torch.squeeze"], "function", ["None"], ["", "def", "resize_depth", "(", "depth", ",", "width", ",", "height", ")", ":", "\n", "    ", "\"\"\"Resize depth map and bring to CPU (numpy).\n\n    Args:\n        depth (tensor): depth\n        width (int): image width\n        height (int): image height\n\n    Returns:\n        array: processed depth\n    \"\"\"", "\n", "depth", "=", "torch", ".", "squeeze", "(", "depth", "[", "0", ",", ":", ",", ":", ",", ":", "]", ")", ".", "to", "(", "\"cpu\"", ")", "\n", "\n", "depth_resized", "=", "cv2", ".", "resize", "(", "\n", "depth", ".", "numpy", "(", ")", ",", "(", "width", ",", "height", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", "\n", ")", "\n", "\n", "return", "depth_resized", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.util.io.write_depth": [[171, 199], ["io.write_pfm", "depth.astype", "depth.min", "depth.max", "cv2.imwrite", "numpy.zeros", "np.zeros.astype", "cv2.imwrite", "numpy.finfo", "np.zeros.astype"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.util.io.write_pfm"], ["", "def", "write_depth", "(", "path", ",", "depth", ",", "bits", "=", "1", ",", "absolute_depth", "=", "False", ")", ":", "\n", "    ", "\"\"\"Write depth map to pfm and png file.\n\n    Args:\n        path (str): filepath without extension\n        depth (array): depth\n    \"\"\"", "\n", "write_pfm", "(", "path", "+", "\".pfm\"", ",", "depth", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "if", "absolute_depth", ":", "\n", "        ", "out", "=", "depth", "\n", "", "else", ":", "\n", "        ", "depth_min", "=", "depth", ".", "min", "(", ")", "\n", "depth_max", "=", "depth", ".", "max", "(", ")", "\n", "\n", "max_val", "=", "(", "2", "**", "(", "8", "*", "bits", ")", ")", "-", "1", "\n", "\n", "if", "depth_max", "-", "depth_min", ">", "np", ".", "finfo", "(", "\"float\"", ")", ".", "eps", ":", "\n", "            ", "out", "=", "max_val", "*", "(", "depth", "-", "depth_min", ")", "/", "(", "depth_max", "-", "depth_min", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "np", ".", "zeros", "(", "depth", ".", "shape", ",", "dtype", "=", "depth", ".", "dtype", ")", "\n", "\n", "", "", "if", "bits", "==", "1", ":", "\n", "        ", "cv2", ".", "imwrite", "(", "path", "+", "\".png\"", ",", "out", ".", "astype", "(", "\"uint8\"", ")", ",", "[", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ",", "0", "]", ")", "\n", "", "elif", "bits", "==", "2", ":", "\n", "        ", "cv2", ".", "imwrite", "(", "path", "+", "\".png\"", ",", "out", ".", "astype", "(", "\"uint16\"", ")", ",", "[", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ",", "0", "]", ")", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.util.io.write_segm_img": [[201, 220], ["pallete.get_mask_pallete", "PIL.Image.fromarray().convert", "pallete.get_mask_pallete.convert", "PIL.Image.blend", "Image.blend.save", "PIL.Image.fromarray", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.util.pallete.get_mask_pallete"], ["", "def", "write_segm_img", "(", "path", ",", "image", ",", "labels", ",", "palette", "=", "\"detail\"", ",", "alpha", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Write depth map to pfm and png file.\n\n    Args:\n        path (str): filepath without extension\n        image (array): input image\n        labels (array): labeling of the image\n    \"\"\"", "\n", "\n", "mask", "=", "get_mask_pallete", "(", "labels", ",", "\"ade20k\"", ")", "\n", "\n", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "255", "*", "image", ")", ")", ".", "convert", "(", "\"RGBA\"", ")", "\n", "seg", "=", "mask", ".", "convert", "(", "\"RGBA\"", ")", "\n", "\n", "out", "=", "Image", ".", "blend", "(", "img", ",", "seg", ",", "alpha", ")", "\n", "\n", "out", ".", "save", "(", "path", "+", "\".png\"", ")", "\n", "\n", "return", "\n", "", ""]], "home.repos.pwc.inspect_result.isl-org_DPT.util.misc.visualize_attention": [[5, 64], ["matplotlib.imshow", "matplotlib.ylabel", "matplotlib.title", "matplotlib.gca", "plt.gca.axes.xaxis.set_ticklabels", "plt.gca.axes.yaxis.set_ticklabels", "plt.gca.axes.xaxis.set_ticks", "plt.gca.axes.yaxis.set_ticks", "matplotlib.imshow", "matplotlib.title", "matplotlib.imshow", "matplotlib.title", "matplotlib.imshow", "matplotlib.title", "matplotlib.ylabel", "matplotlib.gca", "plt.gca.axes.xaxis.set_ticklabels", "plt.gca.axes.yaxis.set_ticklabels", "plt.gca.axes.xaxis.set_ticks", "plt.gca.axes.yaxis.set_ticks", "matplotlib.tight_layout", "matplotlib.show", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.set_cmap", "matplotlib.title", "matplotlib.axis", "matplotlib.subplot", "dpt.vit.get_mean_attention_map", "matplotlib.subplot", "dpt.vit.get_mean_attention_map", "matplotlib.axis", "matplotlib.subplot", "dpt.vit.get_mean_attention_map", "matplotlib.axis", "matplotlib.subplot", "dpt.vit.get_mean_attention_map", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "input.squeeze().permute", "dpt.vit.get_mean_attention_map", "dpt.vit.get_mean_attention_map", "dpt.vit.get_mean_attention_map", "dpt.vit.get_mean_attention_map", "input.squeeze"], "function", ["home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_mean_attention_map", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_mean_attention_map", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_mean_attention_map", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_mean_attention_map", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_mean_attention_map", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_mean_attention_map", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_mean_attention_map", "home.repos.pwc.inspect_result.isl-org_DPT.dpt.vit.get_mean_attention_map"], ["def", "visualize_attention", "(", "input", ",", "model", ",", "prediction", ",", "model_type", ")", ":", "\n", "    ", "input", "=", "(", "input", "+", "1.0", ")", "/", "2.0", "\n", "\n", "attn1", "=", "model", ".", "pretrained", ".", "attention", "[", "\"attn_1\"", "]", "\n", "attn2", "=", "model", ".", "pretrained", ".", "attention", "[", "\"attn_2\"", "]", "\n", "attn3", "=", "model", ".", "pretrained", ".", "attention", "[", "\"attn_3\"", "]", "\n", "attn4", "=", "model", ".", "pretrained", ".", "attention", "[", "\"attn_4\"", "]", "\n", "\n", "plt", ".", "subplot", "(", "3", ",", "4", ",", "1", ")", ",", "plt", ".", "imshow", "(", "input", ".", "squeeze", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ")", ",", "plt", ".", "title", "(", "\"Input\"", ",", "fontsize", "=", "8", ")", ",", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "subplot", "(", "3", ",", "4", ",", "2", ")", ",", "plt", ".", "imshow", "(", "prediction", ")", ",", "plt", ".", "set_cmap", "(", "\"inferno\"", ")", ",", "plt", ".", "title", "(", "\"Prediction\"", ",", "fontsize", "=", "8", ")", ",", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "\n", "if", "model_type", "==", "\"dpt_hybrid\"", ":", "\n", "        ", "h", "=", "[", "3", ",", "6", ",", "9", ",", "12", "]", "\n", "", "else", ":", "\n", "        ", "h", "=", "[", "6", ",", "12", ",", "18", ",", "24", "]", "\n", "\n", "# upper left", "\n", "", "plt", ".", "subplot", "(", "345", ")", ",", "\n", "ax1", "=", "plt", ".", "imshow", "(", "get_mean_attention_map", "(", "attn1", ",", "1", ",", "input", ".", "shape", ")", ")", "\n", "plt", ".", "ylabel", "(", "\"Upper left corner\"", ",", "fontsize", "=", "8", ")", "\n", "plt", ".", "title", "(", "f\"Layer {h[0]}\"", ",", "fontsize", "=", "8", ")", "\n", "gc", "=", "plt", ".", "gca", "(", ")", "\n", "gc", ".", "axes", ".", "xaxis", ".", "set_ticklabels", "(", "[", "]", ")", "\n", "gc", ".", "axes", ".", "yaxis", ".", "set_ticklabels", "(", "[", "]", ")", "\n", "gc", ".", "axes", ".", "xaxis", ".", "set_ticks", "(", "[", "]", ")", "\n", "gc", ".", "axes", ".", "yaxis", ".", "set_ticks", "(", "[", "]", ")", "\n", "\n", "\n", "plt", ".", "subplot", "(", "346", ")", ",", "\n", "plt", ".", "imshow", "(", "get_mean_attention_map", "(", "attn2", ",", "1", ",", "input", ".", "shape", ")", ")", "\n", "plt", ".", "title", "(", "f\"Layer {h[1]}\"", ",", "fontsize", "=", "8", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", ",", "\n", "\n", "plt", ".", "subplot", "(", "347", ")", ",", "\n", "plt", ".", "imshow", "(", "get_mean_attention_map", "(", "attn3", ",", "1", ",", "input", ".", "shape", ")", ")", "\n", "plt", ".", "title", "(", "f\"Layer {h[2]}\"", ",", "fontsize", "=", "8", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", ",", "\n", "\n", "\n", "plt", ".", "subplot", "(", "348", ")", ",", "\n", "plt", ".", "imshow", "(", "get_mean_attention_map", "(", "attn4", ",", "1", ",", "input", ".", "shape", ")", ")", "\n", "plt", ".", "title", "(", "f\"Layer {h[3]}\"", ",", "fontsize", "=", "8", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", ",", "\n", "\n", "\n", "# lower right", "\n", "plt", ".", "subplot", "(", "3", ",", "4", ",", "9", ")", ",", "plt", ".", "imshow", "(", "get_mean_attention_map", "(", "attn1", ",", "-", "1", ",", "input", ".", "shape", ")", ")", "\n", "plt", ".", "ylabel", "(", "\"Lower right corner\"", ",", "fontsize", "=", "8", ")", "\n", "gc", "=", "plt", ".", "gca", "(", ")", "\n", "gc", ".", "axes", ".", "xaxis", ".", "set_ticklabels", "(", "[", "]", ")", "\n", "gc", ".", "axes", ".", "yaxis", ".", "set_ticklabels", "(", "[", "]", ")", "\n", "gc", ".", "axes", ".", "xaxis", ".", "set_ticks", "(", "[", "]", ")", "\n", "gc", ".", "axes", ".", "yaxis", ".", "set_ticks", "(", "[", "]", ")", "\n", "\n", "plt", ".", "subplot", "(", "3", ",", "4", ",", "10", ")", ",", "plt", ".", "imshow", "(", "get_mean_attention_map", "(", "attn2", ",", "-", "1", ",", "input", ".", "shape", ")", ")", ",", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "subplot", "(", "3", ",", "4", ",", "11", ")", ",", "plt", ".", "imshow", "(", "get_mean_attention_map", "(", "attn3", ",", "-", "1", ",", "input", ".", "shape", ")", ")", ",", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "subplot", "(", "3", ",", "4", ",", "12", ")", ",", "plt", ".", "imshow", "(", "get_mean_attention_map", "(", "attn4", ",", "-", "1", ",", "input", ".", "shape", ")", ")", ",", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.isl-org_DPT.util.pallete.get_mask_pallete": [[13, 27], ["PIL.Image.fromarray", "npimg.squeeze().astype", "Image.fromarray.putpalette", "Image.fromarray.putpalette", "npimg.squeeze", "Image.fromarray.putpalette"], "function", ["None"], ["def", "get_mask_pallete", "(", "npimg", ",", "dataset", "=", "'detail'", ")", ":", "\n", "    ", "\"\"\"Get image color pallete for visualizing masks\"\"\"", "\n", "# recovery boundary", "\n", "if", "dataset", "==", "'pascal_voc'", ":", "\n", "        ", "npimg", "[", "npimg", "==", "21", "]", "=", "255", "\n", "# put colormap", "\n", "", "out_img", "=", "Image", ".", "fromarray", "(", "npimg", ".", "squeeze", "(", ")", ".", "astype", "(", "'uint8'", ")", ")", "\n", "if", "dataset", "==", "'ade20k'", ":", "\n", "        ", "out_img", ".", "putpalette", "(", "adepallete", ")", "\n", "", "elif", "dataset", "==", "'citys'", ":", "\n", "        ", "out_img", ".", "putpalette", "(", "citypallete", ")", "\n", "", "elif", "dataset", "in", "(", "'detail'", ",", "'pascal_voc'", ",", "'pascal_aug'", ")", ":", "\n", "        ", "out_img", ".", "putpalette", "(", "vocpallete", ")", "\n", "", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.isl-org_DPT.util.pallete._get_voc_pallete": [[28, 44], ["range"], "function", ["None"], ["", "def", "_get_voc_pallete", "(", "num_cls", ")", ":", "\n", "    ", "n", "=", "num_cls", "\n", "pallete", "=", "[", "0", "]", "*", "(", "n", "*", "3", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "            ", "lab", "=", "j", "\n", "pallete", "[", "j", "*", "3", "+", "0", "]", "=", "0", "\n", "pallete", "[", "j", "*", "3", "+", "1", "]", "=", "0", "\n", "pallete", "[", "j", "*", "3", "+", "2", "]", "=", "0", "\n", "i", "=", "0", "\n", "while", "(", "lab", ">", "0", ")", ":", "\n", "                    ", "pallete", "[", "j", "*", "3", "+", "0", "]", "|=", "(", "(", "(", "lab", ">>", "0", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "pallete", "[", "j", "*", "3", "+", "1", "]", "|=", "(", "(", "(", "lab", ">>", "1", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "pallete", "[", "j", "*", "3", "+", "2", "]", "|=", "(", "(", "(", "lab", ">>", "2", ")", "&", "1", ")", "<<", "(", "7", "-", "i", ")", ")", "\n", "i", "=", "i", "+", "1", "\n", "lab", ">>=", "3", "\n", "", "", "return", "pallete", "\n", "\n"]]}